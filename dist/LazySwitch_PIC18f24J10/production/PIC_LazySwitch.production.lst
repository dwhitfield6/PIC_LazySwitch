

Microchip Technology PIC18 PRO Macro Assembler V1.35 build -356382666 
                                                                                               Sun Sep 06 08:23:05 2015

Microchip Technology Omniscient Code Generator v1.35 (PRO mode) build 201507080246
     1                           	processor	18F24J10
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	_FlashWaste_const,global,ovrld,reloc=2,class=CODE,delta=1
     8                           	psect	_IR_SavedTiming0_const,global,ovrld,reloc=2,class=CODE,delta=1
     9                           	psect	_IR_SavedTiming1_const,global,ovrld,reloc=2,class=CODE,delta=1
    10                           	psect	_RF_SavedTiming_const,global,ovrld,reloc=2,class=CODE,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1
   118                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   119                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
   147                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   148                           	psect	param0,global,class=BANK0,space=1,delta=1
   149                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   150  0000                     
   151                           	psect	idataCOMRAM
   152  001BD6                     __pidataCOMRAM:
   153                           	opt stack 0
   154                           
   155                           ;initializer for _ADC_CurrentSource
   156  001BD6  0A                 	db	10
   157                           
   158                           	psect	idataBANK1
   159  001BB8                     __pidataBANK1:
   160                           	opt stack 0
   161                           
   162                           ;initializer for _Rail_VIN
   163  001BB8  00                 	db	0
   164  001BB9  90                 	db	144
   165  001BBA  40                 	db	64
   166                           
   167                           ;initializer for _IR_Saved
   168  001BBB  5B                 	db	91
   169                           
   170                           ;initializer for _RF_Saved
   171  001BBC  5B                 	db	91
   172                           
   173                           ;initializer for _System_State
   174  001BBD  08                 	db	8
   175  0000                     _FlashWaste_absconstaddr	set	9728
   176  0000                     _IR_SavedTiming0_absconstaddr	set	9216
   177  0000                     _IR_SavedTiming1_absconstaddr	set	9408
   178  0000                     _RF_SavedTiming_absconstaddr	set	9600
   179  0000                     _FlashWaste_absconstaddr	set	9728
   180                           
   181                           	psect	_FlashWaste_const
   182  002600                     __p_FlashWaste_const:
   183                           	opt stack 0
   184  002600                     _FlashWaste:
   185                           	opt stack 0
   186  002600  DA                 	db	218
   187  002601  DA                 	db	218
   188  002602  DA                 	db	218
   189  002603  DA                 	db	218
   190  002604  DA                 	db	218
   191  002605  DA                 	db	218
   192  002606  DA                 	db	218
   193  002607  DA                 	db	218
   194  002608  DA                 	db	218
   195  002609  DA                 	db	218
   196  00260A  DA                 	db	218
   197  00260B  DA                 	db	218
   198  00260C  DA                 	db	218
   199  00260D  DA                 	db	218
   200  00260E  DA                 	db	218
   201  00260F  DA                 	db	218
   202  002610  DA                 	db	218
   203  002611  DA                 	db	218
   204  002612  DA                 	db	218
   205  002613  DA                 	db	218
   206  002614  DA                 	db	218
   207  002615  DA                 	db	218
   208  002616  DA                 	db	218
   209  002617  DA                 	db	218
   210  002618  DA                 	db	218
   211  002619  DA                 	db	218
   212  00261A  DA                 	db	218
   213  00261B  DA                 	db	218
   214  00261C  DA                 	db	218
   215  00261D  DA                 	db	218
   216  00261E  DA                 	db	218
   217  00261F  DA                 	db	218
   218  002620  DA                 	db	218
   219  002621  DA                 	db	218
   220  002622  DA                 	db	218
   221  002623  DA                 	db	218
   222  002624  DA                 	db	218
   223  002625  DA                 	db	218
   224  002626  DA                 	db	218
   225  002627  DA                 	db	218
   226  002628  DA                 	db	218
   227  002629  DA                 	db	218
   228  00262A  DA                 	db	218
   229  00262B  DA                 	db	218
   230  00262C  DA                 	db	218
   231  00262D  DA                 	db	218
   232  00262E  DA                 	db	218
   233  00262F  DA                 	db	218
   234  002630  DA                 	db	218
   235  002631  DA                 	db	218
   236  002632  DA                 	db	218
   237  002633  DA                 	db	218
   238  002634  DA                 	db	218
   239  002635  DA                 	db	218
   240  002636  DA                 	db	218
   241  002637  DA                 	db	218
   242  002638  DA                 	db	218
   243  002639  DA                 	db	218
   244  00263A  DA                 	db	218
   245  00263B  DA                 	db	218
   246  00263C  DA                 	db	218
   247  00263D  DA                 	db	218
   248  00263E  DA                 	db	218
   249  00263F  DA                 	db	218
   250  002640  DA                 	db	218
   251  002641  DA                 	db	218
   252  002642  DA                 	db	218
   253  002643  DA                 	db	218
   254  002644  DA                 	db	218
   255  002645  DA                 	db	218
   256  002646  DA                 	db	218
   257  002647  DA                 	db	218
   258  002648  DA                 	db	218
   259  002649  DA                 	db	218
   260  00264A  DA                 	db	218
   261  00264B  DA                 	db	218
   262  00264C  DA                 	db	218
   263  00264D  DA                 	db	218
   264  00264E  DA                 	db	218
   265  00264F  DA                 	db	218
   266  002650  DA                 	db	218
   267  002651  DA                 	db	218
   268  002652  DA                 	db	218
   269  002653  DA                 	db	218
   270  002654  DA                 	db	218
   271  002655  DA                 	db	218
   272  002656  DA                 	db	218
   273  002657  DA                 	db	218
   274  002658  DA                 	db	218
   275  002659  DA                 	db	218
   276  00265A  DA                 	db	218
   277  00265B  DA                 	db	218
   278  00265C  DA                 	db	218
   279  00265D  DA                 	db	218
   280  00265E  DA                 	db	218
   281  00265F  DA                 	db	218
   282  002660  DA                 	db	218
   283  002661  DA                 	db	218
   284  002662  DA                 	db	218
   285  002663  DA                 	db	218
   286  002664  DA                 	db	218
   287  002665  DA                 	db	218
   288  002666  DA                 	db	218
   289  002667  DA                 	db	218
   290  002668  DA                 	db	218
   291  002669  DA                 	db	218
   292  00266A  DA                 	db	218
   293  00266B  DA                 	db	218
   294  00266C  DA                 	db	218
   295  00266D  DA                 	db	218
   296  00266E  DA                 	db	218
   297  00266F  DA                 	db	218
   298  002670  DA                 	db	218
   299  002671  DA                 	db	218
   300  002672  DA                 	db	218
   301  002673  DA                 	db	218
   302  002674  DA                 	db	218
   303  002675  DA                 	db	218
   304  002676  DA                 	db	218
   305  002677  DA                 	db	218
   306  002678  DA                 	db	218
   307  002679  DA                 	db	218
   308  00267A  DA                 	db	218
   309  00267B  DA                 	db	218
   310  00267C  DA                 	db	218
   311  00267D  DA                 	db	218
   312  00267E  DA                 	db	218
   313  00267F  DA                 	db	218
   314  002680  DA                 	db	218
   315  002681  DA                 	db	218
   316  002682  DA                 	db	218
   317  002683  DA                 	db	218
   318  002684  DA                 	db	218
   319  002685  DA                 	db	218
   320  002686  DA                 	db	218
   321  002687  DA                 	db	218
   322  002688  DA                 	db	218
   323  002689  DA                 	db	218
   324  00268A  DA                 	db	218
   325  00268B  DA                 	db	218
   326  00268C  DA                 	db	218
   327  00268D  DA                 	db	218
   328  00268E  DA                 	db	218
   329  00268F  DA                 	db	218
   330  002690  DA                 	db	218
   331  002691  DA                 	db	218
   332  002692  DA                 	db	218
   333  002693  DA                 	db	218
   334  002694  DA                 	db	218
   335  002695  DA                 	db	218
   336  002696  DA                 	db	218
   337  002697  DA                 	db	218
   338  002698  DA                 	db	218
   339  002699  DA                 	db	218
   340  00269A  DA                 	db	218
   341  00269B  DA                 	db	218
   342  00269C  DA                 	db	218
   343  00269D  DA                 	db	218
   344  00269E  DA                 	db	218
   345  00269F  DA                 	db	218
   346  0026A0  DA                 	db	218
   347  0026A1  DA                 	db	218
   348  0026A2  DA                 	db	218
   349  0026A3  DA                 	db	218
   350  0026A4  DA                 	db	218
   351  0026A5  DA                 	db	218
   352  0026A6  DA                 	db	218
   353  0026A7  DA                 	db	218
   354  0026A8  DA                 	db	218
   355  0026A9  DA                 	db	218
   356  0026AA  DA                 	db	218
   357  0026AB  DA                 	db	218
   358  0026AC  DA                 	db	218
   359  0026AD  DA                 	db	218
   360  0026AE  DA                 	db	218
   361  0026AF  DA                 	db	218
   362  0026B0  DA                 	db	218
   363  0026B1  DA                 	db	218
   364  0026B2  DA                 	db	218
   365  0026B3  DA                 	db	218
   366  0026B4  DA                 	db	218
   367  0026B5  DA                 	db	218
   368  0026B6  DA                 	db	218
   369  0026B7  DA                 	db	218
   370  0026B8  DA                 	db	218
   371  0026B9  DA                 	db	218
   372  0026BA  DA                 	db	218
   373  0026BB  DA                 	db	218
   374  0026BC  DA                 	db	218
   375  0026BD  DA                 	db	218
   376  0026BE  DA                 	db	218
   377  0026BF  DA                 	db	218
   378  0026C0  DA                 	db	218
   379  0026C1  DA                 	db	218
   380  0026C2  DA                 	db	218
   381  0026C3  DA                 	db	218
   382  0026C4  DA                 	db	218
   383  0026C5  DA                 	db	218
   384  0026C6  DA                 	db	218
   385  0026C7  DA                 	db	218
   386  0026C8  DA                 	db	218
   387  0026C9  DA                 	db	218
   388  0026CA  DA                 	db	218
   389  0026CB  DA                 	db	218
   390  0026CC  DA                 	db	218
   391  0026CD  DA                 	db	218
   392  0026CE  DA                 	db	218
   393  0026CF  DA                 	db	218
   394  0026D0  DA                 	db	218
   395  0026D1  DA                 	db	218
   396  0026D2  DA                 	db	218
   397  0026D3  DA                 	db	218
   398  0026D4  DA                 	db	218
   399  0026D5  DA                 	db	218
   400  0026D6  DA                 	db	218
   401  0026D7  DA                 	db	218
   402  0026D8  DA                 	db	218
   403  0026D9  DA                 	db	218
   404  0026DA  DA                 	db	218
   405  0026DB  DA                 	db	218
   406  0026DC  DA                 	db	218
   407  0026DD  DA                 	db	218
   408  0026DE  DA                 	db	218
   409  0026DF  DA                 	db	218
   410  0026E0  DA                 	db	218
   411  0026E1  DA                 	db	218
   412  0026E2  DA                 	db	218
   413  0026E3  DA                 	db	218
   414  0026E4  DA                 	db	218
   415  0026E5  DA                 	db	218
   416  0026E6  DA                 	db	218
   417  0026E7  DA                 	db	218
   418  0026E8  DA                 	db	218
   419  0026E9  DA                 	db	218
   420  0026EA  DA                 	db	218
   421  0026EB  DA                 	db	218
   422  0026EC  DA                 	db	218
   423  0026ED  DA                 	db	218
   424  0026EE  DA                 	db	218
   425  0026EF  DA                 	db	218
   426  0026F0  DA                 	db	218
   427  0026F1  DA                 	db	218
   428  0026F2  DA                 	db	218
   429  0026F3  DA                 	db	218
   430  0026F4  DA                 	db	218
   431  0026F5  DA                 	db	218
   432  0026F6  DA                 	db	218
   433  0026F7  DA                 	db	218
   434  0026F8  DA                 	db	218
   435  0026F9  DA                 	db	218
   436  0026FA  DA                 	db	218
   437  0026FB  DA                 	db	218
   438  0026FC  DA                 	db	218
   439  0026FD  DA                 	db	218
   440  0026FE  DA                 	db	218
   441  0026FF  DA                 	db	218
   442  002700  DA                 	db	218
   443  002701  DA                 	db	218
   444  002702  DA                 	db	218
   445  002703  DA                 	db	218
   446  002704  DA                 	db	218
   447  002705  DA                 	db	218
   448  002706  DA                 	db	218
   449  002707  DA                 	db	218
   450  002708  DA                 	db	218
   451  002709  DA                 	db	218
   452  00270A  DA                 	db	218
   453  00270B  DA                 	db	218
   454  00270C  DA                 	db	218
   455  00270D  DA                 	db	218
   456  00270E  DA                 	db	218
   457  00270F  DA                 	db	218
   458  002710  DA                 	db	218
   459  002711  DA                 	db	218
   460  002712  DA                 	db	218
   461  002713  DA                 	db	218
   462  002714  DA                 	db	218
   463  002715  DA                 	db	218
   464  002716  DA                 	db	218
   465  002717  DA                 	db	218
   466  002718  DA                 	db	218
   467  002719  DA                 	db	218
   468  00271A  DA                 	db	218
   469  00271B  DA                 	db	218
   470  00271C  DA                 	db	218
   471  00271D  DA                 	db	218
   472  00271E  DA                 	db	218
   473  00271F  DA                 	db	218
   474  002720  DA                 	db	218
   475  002721  DA                 	db	218
   476  002722  DA                 	db	218
   477  002723  DA                 	db	218
   478  002724  DA                 	db	218
   479  002725  DA                 	db	218
   480  002726  DA                 	db	218
   481  002727  DA                 	db	218
   482  002728  DA                 	db	218
   483  002729  DA                 	db	218
   484  00272A  DA                 	db	218
   485  00272B  DA                 	db	218
   486  00272C  DA                 	db	218
   487  00272D  DA                 	db	218
   488  00272E  DA                 	db	218
   489  00272F  DA                 	db	218
   490  002730  DA                 	db	218
   491  002731  DA                 	db	218
   492  002732  DA                 	db	218
   493  002733  DA                 	db	218
   494  002734  DA                 	db	218
   495  002735  DA                 	db	218
   496  002736  DA                 	db	218
   497  002737  DA                 	db	218
   498  002738  DA                 	db	218
   499  002739  DA                 	db	218
   500  00273A  DA                 	db	218
   501  00273B  DA                 	db	218
   502  00273C  DA                 	db	218
   503  00273D  DA                 	db	218
   504  00273E  DA                 	db	218
   505  00273F  DA                 	db	218
   506  002740  DA                 	db	218
   507  002741  DA                 	db	218
   508  002742  DA                 	db	218
   509  002743  DA                 	db	218
   510  002744  DA                 	db	218
   511  002745  DA                 	db	218
   512  002746  DA                 	db	218
   513  002747  DA                 	db	218
   514  002748  DA                 	db	218
   515  002749  DA                 	db	218
   516  00274A  DA                 	db	218
   517  00274B  DA                 	db	218
   518  00274C  DA                 	db	218
   519  00274D  DA                 	db	218
   520  00274E  DA                 	db	218
   521  00274F  DA                 	db	218
   522  002750  DA                 	db	218
   523  002751  DA                 	db	218
   524  002752  DA                 	db	218
   525  002753  DA                 	db	218
   526  002754  DA                 	db	218
   527  002755  DA                 	db	218
   528  002756  DA                 	db	218
   529  002757  DA                 	db	218
   530  002758  DA                 	db	218
   531  002759  DA                 	db	218
   532  00275A  DA                 	db	218
   533  00275B  DA                 	db	218
   534  00275C  DA                 	db	218
   535  00275D  DA                 	db	218
   536  00275E  DA                 	db	218
   537  00275F  DA                 	db	218
   538  002760  DA                 	db	218
   539  002761  DA                 	db	218
   540  002762  DA                 	db	218
   541  002763  DA                 	db	218
   542  002764  DA                 	db	218
   543  002765  DA                 	db	218
   544  002766  DA                 	db	218
   545  002767  DA                 	db	218
   546  002768  DA                 	db	218
   547  002769  DA                 	db	218
   548  00276A  DA                 	db	218
   549  00276B  DA                 	db	218
   550  00276C  DA                 	db	218
   551  00276D  DA                 	db	218
   552  00276E  DA                 	db	218
   553  00276F  DA                 	db	218
   554  002770  DA                 	db	218
   555  002771  DA                 	db	218
   556  002772  DA                 	db	218
   557  002773  DA                 	db	218
   558  002774  DA                 	db	218
   559  002775  DA                 	db	218
   560  002776  DA                 	db	218
   561  002777  DA                 	db	218
   562  002778  DA                 	db	218
   563  002779  DA                 	db	218
   564  00277A  DA                 	db	218
   565  00277B  DA                 	db	218
   566  00277C  DA                 	db	218
   567  00277D  DA                 	db	218
   568  00277E  DA                 	db	218
   569  00277F  DA                 	db	218
   570  002780  DA                 	db	218
   571  002781  DA                 	db	218
   572  002782  DA                 	db	218
   573  002783  DA                 	db	218
   574  002784  DA                 	db	218
   575  002785  DA                 	db	218
   576  002786  DA                 	db	218
   577  002787  DA                 	db	218
   578  002788  DA                 	db	218
   579  002789  DA                 	db	218
   580  00278A  DA                 	db	218
   581  00278B  DA                 	db	218
   582  00278C  DA                 	db	218
   583  00278D  DA                 	db	218
   584  00278E  DA                 	db	218
   585  00278F  DA                 	db	218
   586  002790  DA                 	db	218
   587  002791  DA                 	db	218
   588  002792  DA                 	db	218
   589  002793  DA                 	db	218
   590  002794  DA                 	db	218
   591  002795  DA                 	db	218
   592  002796  DA                 	db	218
   593  002797  DA                 	db	218
   594  002798  DA                 	db	218
   595  002799  DA                 	db	218
   596  00279A  DA                 	db	218
   597  00279B  DA                 	db	218
   598  00279C  DA                 	db	218
   599  00279D  DA                 	db	218
   600  00279E  DA                 	db	218
   601  00279F  DA                 	db	218
   602  0027A0  DA                 	db	218
   603  0027A1  DA                 	db	218
   604  0027A2  DA                 	db	218
   605  0027A3  DA                 	db	218
   606  0027A4  DA                 	db	218
   607  0027A5  DA                 	db	218
   608  0027A6  DA                 	db	218
   609  0027A7  DA                 	db	218
   610  0027A8  DA                 	db	218
   611  0027A9  DA                 	db	218
   612  0027AA  DA                 	db	218
   613  0027AB  DA                 	db	218
   614  0027AC  DA                 	db	218
   615  0027AD  DA                 	db	218
   616  0027AE  DA                 	db	218
   617  0027AF  DA                 	db	218
   618  0027B0  DA                 	db	218
   619  0027B1  DA                 	db	218
   620  0027B2  DA                 	db	218
   621  0027B3  DA                 	db	218
   622  0027B4  DA                 	db	218
   623  0027B5  DA                 	db	218
   624  0027B6  DA                 	db	218
   625  0027B7  DA                 	db	218
   626  0027B8  DA                 	db	218
   627  0027B9  DA                 	db	218
   628  0027BA  DA                 	db	218
   629  0027BB  DA                 	db	218
   630  0027BC  DA                 	db	218
   631  0027BD  DA                 	db	218
   632  0027BE  DA                 	db	218
   633  0027BF  DA                 	db	218
   634  0027C0  DA                 	db	218
   635  0027C1  DA                 	db	218
   636  0027C2  DA                 	db	218
   637  0027C3  DA                 	db	218
   638  0027C4  DA                 	db	218
   639  0027C5  DA                 	db	218
   640  0027C6  DA                 	db	218
   641  0027C7  DA                 	db	218
   642  0027C8  DA                 	db	218
   643  0027C9  DA                 	db	218
   644  0027CA  DA                 	db	218
   645  0027CB  DA                 	db	218
   646  0027CC  DA                 	db	218
   647  0027CD  DA                 	db	218
   648  0027CE  DA                 	db	218
   649  0027CF  DA                 	db	218
   650  0027D0  DA                 	db	218
   651  0027D1  DA                 	db	218
   652  0027D2  DA                 	db	218
   653  0027D3  DA                 	db	218
   654  0027D4  DA                 	db	218
   655  0027D5  DA                 	db	218
   656  0027D6  DA                 	db	218
   657  0027D7  DA                 	db	218
   658  0027D8  DA                 	db	218
   659  0027D9  DA                 	db	218
   660  0027DA  DA                 	db	218
   661  0027DB  DA                 	db	218
   662  0027DC  DA                 	db	218
   663  0027DD  DA                 	db	218
   664  0027DE  DA                 	db	218
   665  0027DF  DA                 	db	218
   666  0027E0  DA                 	db	218
   667  0027E1  DA                 	db	218
   668  0027E2  DA                 	db	218
   669  0027E3  DA                 	db	218
   670  0027E4  DA                 	db	218
   671  0027E5  DA                 	db	218
   672  0027E6  DA                 	db	218
   673  0027E7  DA                 	db	218
   674  0027E8  DA                 	db	218
   675  0027E9  DA                 	db	218
   676  0027EA  DA                 	db	218
   677  0027EB  DA                 	db	218
   678  0027EC  DA                 	db	218
   679  0027ED  DA                 	db	218
   680  0027EE  DA                 	db	218
   681  0027EF  DA                 	db	218
   682  0027F0  DA                 	db	218
   683  0027F1  DA                 	db	218
   684  0027F2  DA                 	db	218
   685  0027F3  DA                 	db	218
   686  0027F4  DA                 	db	218
   687  0027F5  DA                 	db	218
   688  0027F6  DA                 	db	218
   689  0027F7  DA                 	db	218
   690  0027F8  DA                 	db	218
   691  0027F9  DA                 	db	218
   692  0027FA  DA                 	db	218
   693  0027FB  DA                 	db	218
   694  0027FC  DA                 	db	218
   695  0027FD  DA                 	db	218
   696  0027FE  DA                 	db	218
   697  0027FF  DA                 	db	218
   698  002800                     __end_of_FlashWaste:
   699                           	opt stack 0
   700  0000                     _IR_SavedTiming0_absconstaddr	set	9216
   701                           
   702                           	psect	_IR_SavedTiming0_const
   703  002400                     __p_IR_SavedTiming0_const:
   704                           	opt stack 0
   705  002400                     _IR_SavedTiming0:
   706                           	opt stack 0
   707  002400  2198               	dw	8600
   708  002402  1068               	dw	4200
   709  002404  01C2               	dw	450
   710  002406  04B0               	dw	1200
   711  002408  01C2               	dw	450
   712  00240A  01C2               	dw	450
   713  00240C  01C2               	dw	450
   714  00240E  04B0               	dw	1200
   715  002410  01C2               	dw	450
   716  002412  04B0               	dw	1200
   717  002414  01C2               	dw	450
   718  002416  01C2               	dw	450
   719  002418  01C2               	dw	450
   720  00241A  04B0               	dw	1200
   721  00241C  01C2               	dw	450
   722  00241E  01C2               	dw	450
   723  002420  01C2               	dw	450
   724  002422  04B0               	dw	1200
   725  002424  01C2               	dw	450
   726  002426  01C2               	dw	450
   727  002428  01C2               	dw	450
   728  00242A  04B0               	dw	1200
   729  00242C  01C2               	dw	450
   730  00242E  01C2               	dw	450
   731  002430  01C2               	dw	450
   732  002432  01C2               	dw	450
   733  002434  01C2               	dw	450
   734  002436  04B0               	dw	1200
   735  002438  01C2               	dw	450
   736  00243A  01C2               	dw	450
   737  00243C  01C2               	dw	450
   738  00243E  04B0               	dw	1200
   739  002440  01C2               	dw	450
   740  002442  01C2               	dw	450
   741  002444  01C2               	dw	450
   742  002446  01C2               	dw	450
   743  002448  01C2               	dw	450
   744  00244A  04B0               	dw	1200
   745  00244C  01C2               	dw	450
   746  00244E  01C2               	dw	450
   747  002450  01C2               	dw	450
   748  002452  04B0               	dw	1200
   749  002454  01C2               	dw	450
   750  002456  01C2               	dw	450
   751  002458  01C2               	dw	450
   752  00245A  01C2               	dw	450
   753  00245C  01C2               	dw	450
   754  00245E  01C2               	dw	450
   755  002460  01C2               	dw	450
   756  002462  01C2               	dw	450
   757  002464  01C2               	dw	450
   758  002466  04B0               	dw	1200
   759  002468  01C2               	dw	450
   760  00246A  01C2               	dw	450
   761  00246C  01C2               	dw	450
   762  00246E  04B0               	dw	1200
   763  002470  01C2               	dw	450
   764  002472  01C2               	dw	450
   765  002474  01C2               	dw	450
   766  002476  04B0               	dw	1200
   767  002478  01C2               	dw	450
   768  00247A  04B0               	dw	1200
   769  00247C  01C2               	dw	450
   770  00247E  04B0               	dw	1200
   771  002480  01C2               	dw	450
   772  002482  04B0               	dw	1200
   773  002484  01C2               	dw	450
   774  002486  0000               	dw	0
   775  002488  0000               	dw	0
   776  00248A  0000               	dw	0
   777  00248C  0000               	dw	0
   778  00248E  0000               	dw	0
   779  002490  0000               	dw	0
   780  002492  0000               	dw	0
   781  002494  0000               	dw	0
   782  002496  0000               	dw	0
   783  002498  0000               	dw	0
   784  00249A  0000               	dw	0
   785  00249C  0000               	dw	0
   786  00249E  0000               	dw	0
   787  0024A0  0000               	dw	0
   788  0024A2  0000               	dw	0
   789  0024A4  0000               	dw	0
   790  0024A6  0000               	dw	0
   791  0024A8  0000               	dw	0
   792  0024AA  0000               	dw	0
   793  0024AC  0000               	dw	0
   794  0024AE  0000               	dw	0
   795  0024B0  0000               	dw	0
   796  0024B2  0000               	dw	0
   797  0024B4  0000               	dw	0
   798  0024B6  0000               	dw	0
   799  0024B8  0000               	dw	0
   800  0024BA  0000               	dw	0
   801  0024BC  0000               	dw	0
   802  0024BE  0000               	dw	0
   803  0024C0                     __end_of_IR_SavedTiming0:
   804                           	opt stack 0
   805  0000                     _IR_SavedTiming1_absconstaddr	set	9408
   806                           
   807                           	psect	_IR_SavedTiming1_const
   808  0024C0                     __p_IR_SavedTiming1_const:
   809                           	opt stack 0
   810  0024C0                     _IR_SavedTiming1:
   811                           	opt stack 0
   812  0024C0  2198               	dw	8600
   813  0024C2  1068               	dw	4200
   814  0024C4  01C2               	dw	450
   815  0024C6  01C2               	dw	450
   816  0024C8  01C2               	dw	450
   817  0024CA  01C2               	dw	450
   818  0024CC  01C2               	dw	450
   819  0024CE  01C2               	dw	450
   820  0024D0  01C2               	dw	450
   821  0024D2  04B0               	dw	1200
   822  0024D4  01C2               	dw	450
   823  0024D6  04B0               	dw	1200
   824  0024D8  01C2               	dw	450
   825  0024DA  04B0               	dw	1200
   826  0024DC  01C2               	dw	450
   827  0024DE  01C2               	dw	450
   828  0024E0  01C2               	dw	450
   829  0024E2  01C2               	dw	450
   830  0024E4  01C2               	dw	450
   831  0024E6  04B0               	dw	1200
   832  0024E8  01C2               	dw	450
   833  0024EA  04B0               	dw	1200
   834  0024EC  01C2               	dw	450
   835  0024EE  04B0               	dw	1200
   836  0024F0  01C2               	dw	450
   837  0024F2  01C2               	dw	450
   838  0024F4  01C2               	dw	450
   839  0024F6  01C2               	dw	450
   840  0024F8  01C2               	dw	450
   841  0024FA  01C2               	dw	450
   842  0024FC  01C2               	dw	450
   843  0024FE  04B0               	dw	1200
   844  002500  01C2               	dw	450
   845  002502  04B0               	dw	1200
   846  002504  01C2               	dw	450
   847  002506  01C2               	dw	450
   848  002508  01C2               	dw	450
   849  00250A  04B0               	dw	1200
   850  00250C  01C2               	dw	450
   851  00250E  01C2               	dw	450
   852  002510  01C2               	dw	450
   853  002512  04B0               	dw	1200
   854  002514  01C2               	dw	450
   855  002516  01C2               	dw	450
   856  002518  01C2               	dw	450
   857  00251A  01C2               	dw	450
   858  00251C  01C2               	dw	450
   859  00251E  01C2               	dw	450
   860  002520  01C2               	dw	450
   861  002522  01C2               	dw	450
   862  002524  01C2               	dw	450
   863  002526  04B0               	dw	1200
   864  002528  01C2               	dw	450
   865  00252A  01C2               	dw	450
   866  00252C  01C2               	dw	450
   867  00252E  04B0               	dw	1200
   868  002530  01C2               	dw	450
   869  002532  01C2               	dw	450
   870  002534  01C2               	dw	450
   871  002536  04B0               	dw	1200
   872  002538  01C2               	dw	450
   873  00253A  04B0               	dw	1200
   874  00253C  01C2               	dw	450
   875  00253E  04B0               	dw	1200
   876  002540  01C2               	dw	450
   877  002542  04B0               	dw	1200
   878  002544  01C2               	dw	450
   879  002546  0000               	dw	0
   880  002548  0000               	dw	0
   881  00254A  0000               	dw	0
   882  00254C  0000               	dw	0
   883  00254E  0000               	dw	0
   884  002550  0000               	dw	0
   885  002552  0000               	dw	0
   886  002554  0000               	dw	0
   887  002556  0000               	dw	0
   888  002558  0000               	dw	0
   889  00255A  0000               	dw	0
   890  00255C  0000               	dw	0
   891  00255E  0000               	dw	0
   892  002560  0000               	dw	0
   893  002562  0000               	dw	0
   894  002564  0000               	dw	0
   895  002566  0000               	dw	0
   896  002568  0000               	dw	0
   897  00256A  0000               	dw	0
   898  00256C  0000               	dw	0
   899  00256E  0000               	dw	0
   900  002570  0000               	dw	0
   901  002572  0000               	dw	0
   902  002574  0000               	dw	0
   903  002576  0000               	dw	0
   904  002578  0000               	dw	0
   905  00257A  0000               	dw	0
   906  00257C  0000               	dw	0
   907  00257E  0000               	dw	0
   908  002580                     __end_of_IR_SavedTiming1:
   909                           	opt stack 0
   910  0000                     _RF_SavedTiming_absconstaddr	set	9600
   911                           
   912                           	psect	_RF_SavedTiming_const
   913  002580                     __p_RF_SavedTiming_const:
   914                           	opt stack 0
   915  002580                     _RF_SavedTiming:
   916                           	opt stack 0
   917  002580  0342               	dw	834
   918  002582  0015               	dw	21
   919  002584  0050               	dw	80
   920  002586  0016               	dw	22
   921  002588  0050               	dw	80
   922  00258A  0015               	dw	21
   923  00258C  004E               	dw	78
   924  00258E  004F               	dw	79
   925  002590  001A               	dw	26
   926  002592  0016               	dw	22
   927  002594  004E               	dw	78
   928  002596  004E               	dw	78
   929  002598  001B               	dw	27
   930  00259A  0015               	dw	21
   931  00259C  004F               	dw	79
   932  00259E  004C               	dw	76
   933  0025A0  0019               	dw	25
   934  0025A2  0017               	dw	23
   935  0025A4  004F               	dw	79
   936  0025A6  004B               	dw	75
   937  0025A8  001B               	dw	27
   938  0025AA  0015               	dw	21
   939  0025AC  0051               	dw	81
   940  0025AE  004B               	dw	75
   941  0025B0  0019               	dw	25
   942  0025B2  0016               	dw	22
   943  0025B4  0051               	dw	81
   944  0025B6  0016               	dw	22
   945  0025B8  004F               	dw	79
   946  0025BA  0016               	dw	22
   947  0025BC  0050               	dw	80
   948  0025BE  0018               	dw	24
   949  0025C0  004F               	dw	79
   950  0025C2  004D               	dw	77
   951  0025C4  0019               	dw	25
   952  0025C6  004C               	dw	76
   953  0025C8  001B               	dw	27
   954  0025CA  0015               	dw	21
   955  0025CC  0050               	dw	80
   956  0025CE  0015               	dw	21
   957  0025D0  0051               	dw	81
   958  0025D2  0015               	dw	21
   959  0025D4  0050               	dw	80
   960  0025D6  0016               	dw	22
   961  0025D8  0050               	dw	80
   962  0025DA  0016               	dw	22
   963  0025DC  0051               	dw	81
   964  0025DE  0016               	dw	22
   965  0025E0  004F               	dw	79
   966  0025E2  0016               	dw	22
   967  0025E4  00                 	db	0
   968  0025E5  00                 	db	0
   969  0025E6  00                 	db	0
   970  0025E7  00                 	db	0
   971  0025E8  00                 	db	0
   972  0025E9  00                 	db	0
   973  0025EA  00                 	db	0
   974  0025EB  00                 	db	0
   975  0025EC  00                 	db	0
   976  0025ED  00                 	db	0
   977  0025EE  00                 	db	0
   978  0025EF  00                 	db	0
   979  0025F0  00                 	db	0
   980  0025F1  00                 	db	0
   981  0025F2  00                 	db	0
   982  0025F3  00                 	db	0
   983  0025F4  00                 	db	0
   984  0025F5  00                 	db	0
   985  0025F6  00                 	db	0
   986  0025F7  00                 	db	0
   987  0025F8  00                 	db	0
   988  0025F9  00                 	db	0
   989  0025FA  00                 	db	0
   990  0025FB  00                 	db	0
   991  0025FC  00                 	db	0
   992  0025FD  00                 	db	0
   993  0025FE  00                 	db	0
   994  0025FF  00                 	db	0
   995  002600                     __end_of_RF_SavedTiming:
   996                           	opt stack 0
   997  0000                     _ADCON0bits	set	4034
   998  0000                     _ADCON1bits	set	4033
   999  0000                     _ADCON2bits	set	4032
  1000  0000                     _ADRESH	set	4036
  1001  0000                     _ADRESL	set	4035
  1002  0000                     _EECON1bits	set	4006
  1003  0000                     _INTCON2bits	set	4081
  1004  0000                     _INTCON3bits	set	4080
  1005  0000                     _INTCONbits	set	4082
  1006  0000                     _IPR1bits	set	3999
  1007  0000                     _LATA	set	3977
  1008  0000                     _LATB	set	3978
  1009  0000                     _LATC	set	3979
  1010  0000                     _OSCCON	set	4051
  1011  0000                     _OSCCONbits	set	4051
  1012  0000                     _OSCTUNEbits	set	3995
  1013  0000                     _PIE1bits	set	3997
  1014  0000                     _PIR1bits	set	3998
  1015  0000                     _PORTB	set	3969
  1016  0000                     _PR2	set	4043
  1017  0000                     _RCONbits	set	4048
  1018  0000                     _T0CONbits	set	4053
  1019  0000                     _T1CONbits	set	4045
  1020  0000                     _T2CONbits	set	4042
  1021  0000                     _TABLAT	set	4085
  1022  0000                     _TBLPTRH	set	4087
  1023  0000                     _TBLPTRL	set	4086
  1024  0000                     _TBLPTRU	set	4088
  1025  0000                     _TMR0H	set	4055
  1026  0000                     _TMR0L	set	4054
  1027  0000                     _TMR1H	set	4047
  1028  0000                     _TMR1L	set	4046
  1029  0000                     _TMR2	set	4044
  1030  0000                     _TRISAbits	set	3986
  1031  0000                     _TRISBbits	set	3987
  1032  0000                     _TRISCbits	set	3988
  1033                           
  1034                           ; #config settings
  1035  0000                     
  1036                           	psect	cinit
  1037  00105C                     __pcinit:
  1038                           	opt stack 0
  1039  00105C                     start_initialization:
  1040                           	opt stack 0
  1041  00105C                     __initialization:
  1042                           	opt stack 0
  1043                           
  1044                           ; Clear objects allocated to BANK3 (192 bytes)
  1045  00105C  EE03  F000         	lfsr	0,__pbssBANK3
  1046  001060  0EC0               	movlw	192
  1047  001062                     clear_0:
  1048  001062  6AEE               	clrf	postinc0,c
  1049  001064  06E8               	decf	wreg,f,c
  1050  001066  E1FD               	bnz	clear_0
  1051                           
  1052                           ; Clear objects allocated to BANK2 (192 bytes)
  1053  001068  EE02  F000         	lfsr	0,__pbssBANK2
  1054  00106C  0EC0               	movlw	192
  1055  00106E                     clear_1:
  1056  00106E  6AEE               	clrf	postinc0,c
  1057  001070  06E8               	decf	wreg,f,c
  1058  001072  E1FD               	bnz	clear_1
  1059                           
  1060                           ; Clear objects allocated to BANK1 (135 bytes)
  1061  001074  EE01  F000         	lfsr	0,__pbssBANK1
  1062  001078  0E87               	movlw	135
  1063  00107A                     clear_2:
  1064  00107A  6AEE               	clrf	postinc0,c
  1065  00107C  06E8               	decf	wreg,f,c
  1066  00107E  E1FD               	bnz	clear_2
  1067                           
  1068                           ; Clear objects allocated to BANK0 (10 bytes)
  1069  001080  EE00  F0C0         	lfsr	0,__pbssBANK0
  1070  001084  0E0A               	movlw	10
  1071  001086                     clear_3:
  1072  001086  6AEE               	clrf	postinc0,c
  1073  001088  06E8               	decf	wreg,f,c
  1074  00108A  E1FD               	bnz	clear_3
  1075                           
  1076                           ; Clear objects allocated to COMRAM (19 bytes)
  1077  00108C  EE00  F05A         	lfsr	0,__pbssCOMRAM
  1078  001090  0E13               	movlw	19
  1079  001092                     clear_4:
  1080  001092  6AEE               	clrf	postinc0,c
  1081  001094  06E8               	decf	wreg,f,c
  1082  001096  E1FD               	bnz	clear_4
  1083                           
  1084                           ; Initialize objects allocated to BANK1 (6 bytes)
  1085                           ; load TBLPTR registers with __pidataBANK1
  1086  001098  0EB8               	movlw	low __pidataBANK1
  1087  00109A  6EF6               	movwf	tblptrl,c
  1088  00109C  0E1B               	movlw	high __pidataBANK1
  1089  00109E  6EF7               	movwf	tblptrh,c
  1090  0010A0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1091  0010A2  6EF8               	movwf	tblptru,c
  1092  0010A4  EE01  F0A9         	lfsr	0,__pdataBANK1
  1093  0010A8  EE10 F006          	lfsr	1,6
  1094  0010AC                     copy_data0:
  1095  0010AC  0009               	tblrd		*+
  1096  0010AE  CFF5 FFEE          	movff	tablat,postinc0
  1097  0010B2  50E5               	movf	postdec1,w,c
  1098  0010B4  50E1               	movf	fsr1l,w,c
  1099  0010B6  E1FA               	bnz	copy_data0
  1100                           
  1101                           ; Initialize objects allocated to COMRAM (1 bytes)
  1102                           ; load TBLPTR registers with __pidataCOMRAM
  1103  0010B8  0ED6               	movlw	low __pidataCOMRAM
  1104  0010BA  6EF6               	movwf	tblptrl,c
  1105  0010BC  0E1B               	movlw	high __pidataCOMRAM
  1106  0010BE  6EF7               	movwf	tblptrh,c
  1107  0010C0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1108  0010C2  6EF8               	movwf	tblptru,c
  1109  0010C4  0009               	tblrd		*+	;fetch initializer
  1110  0010C6  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1111  0010CA                     end_of_initialization:
  1112                           	opt stack 0
  1113  0010CA                     __end_of__initialization:
  1114                           	opt stack 0
  1115  0010CA  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1116  0010CC  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1117  0010CE  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1118  0010D0  6EF8               	movwf	tblptru,c
  1119  0010D2  0100               	movlb	0
  1120  0010D4  EF26  F01F         	goto	_main	;jump to C main() function
  1121                           tblptru	equ	0xFF8
  1122                           tblptrh	equ	0xFF7
  1123                           tblptrl	equ	0xFF6
  1124                           tablat	equ	0xFF5
  1125                           postinc0	equ	0xFEE
  1126                           wreg	equ	0xFE8
  1127                           postdec1	equ	0xFE5
  1128                           fsr1l	equ	0xFE1
  1129                           
  1130                           	psect	bssCOMRAM
  1131  00005A                     __pbssCOMRAM:
  1132                           	opt stack 0
  1133  00005A                     _Activity_Timer:
  1134                           	opt stack 0
  1135  00005A                     	ds	4
  1136  00005E                     _IR_SyncHigh:
  1137                           	opt stack 0
  1138  00005E                     	ds	2
  1139  000060                     _IR_SyncLow:
  1140                           	opt stack 0
  1141  000060                     	ds	2
  1142  000062                     _Timer2Post:
  1143                           	opt stack 0
  1144  000062                     	ds	2
  1145  000064                     _Timer2PostCount:
  1146                           	opt stack 0
  1147  000064                     	ds	2
  1148  000066                     _ButtonChange:
  1149                           	opt stack 0
  1150  000066                     	ds	1
  1151  000067                     _IRChange:
  1152                           	opt stack 0
  1153  000067                     	ds	1
  1154  000068                     _IRProgramCodeNumber:
  1155                           	opt stack 0
  1156  000068                     	ds	1
  1157  000069                     _IRStarted:
  1158                           	opt stack 0
  1159  000069                     	ds	1
  1160  00006A                     _IR_CodeSize:
  1161                           	opt stack 0
  1162  00006A                     	ds	1
  1163  00006B                     _IR_DataPlace:
  1164                           	opt stack 0
  1165  00006B                     	ds	1
  1166  00006C                     _Timer2Use:
  1167                           	opt stack 0
  1168  00006C                     	ds	1
  1169                           tblptru	equ	0xFF8
  1170                           tblptrh	equ	0xFF7
  1171                           tblptrl	equ	0xFF6
  1172                           tablat	equ	0xFF5
  1173                           postinc0	equ	0xFEE
  1174                           wreg	equ	0xFE8
  1175                           postdec1	equ	0xFE5
  1176                           fsr1l	equ	0xFE1
  1177                           
  1178                           	psect	dataCOMRAM
  1179  00006D                     __pdataCOMRAM:
  1180                           	opt stack 0
  1181  00006D                     _ADC_CurrentSource:
  1182                           	opt stack 0
  1183  00006D                     	ds	1
  1184                           tblptru	equ	0xFF8
  1185                           tblptrh	equ	0xFF7
  1186                           tblptrl	equ	0xFF6
  1187                           tablat	equ	0xFF5
  1188                           postinc0	equ	0xFEE
  1189                           wreg	equ	0xFE8
  1190                           postdec1	equ	0xFE5
  1191                           fsr1l	equ	0xFE1
  1192                           
  1193                           	psect	bssBANK0
  1194  0000C0                     __pbssBANK0:
  1195                           	opt stack 0
  1196  0000C0                     _RF_SyncHigh:
  1197                           	opt stack 0
  1198  0000C0                     	ds	2
  1199  0000C2                     _RF_SyncLow:
  1200                           	opt stack 0
  1201  0000C2                     	ds	2
  1202  0000C4                     _ButtonValue_prev:
  1203                           	opt stack 0
  1204  0000C4                     	ds	1
  1205  0000C5                     _DC_Motor:
  1206                           	opt stack 0
  1207  0000C5                     	ds	1
  1208  0000C6                     _IRValue_prev:
  1209                           	opt stack 0
  1210  0000C6                     	ds	1
  1211  0000C7                     _RFStarted:
  1212                           	opt stack 0
  1213  0000C7                     	ds	1
  1214  0000C8                     _RF_CodeSize:
  1215                           	opt stack 0
  1216  0000C8                     	ds	1
  1217  0000C9                     _RF_DataPlace:
  1218                           	opt stack 0
  1219  0000C9                     	ds	1
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           postinc0	equ	0xFEE
  1225                           wreg	equ	0xFE8
  1226                           postdec1	equ	0xFE5
  1227                           fsr1l	equ	0xFE1
  1228                           
  1229                           	psect	bssBANK1
  1230  000100                     __pbssBANK1:
  1231                           	opt stack 0
  1232  000100                     _ADC_SampleCount:
  1233                           	opt stack 0
  1234  000100                     	ds	2
  1235  000102                     _Button_Data:
  1236                           	opt stack 0
  1237  000102                     	ds	1
  1238  000103                     _Flash_Status:
  1239                           	opt stack 0
  1240  000103                     	ds	1
  1241  000104                     _IR_Data:
  1242                           	opt stack 0
  1243  000104                     	ds	1
  1244  000105                     _RF_Data:
  1245                           	opt stack 0
  1246  000105                     	ds	1
  1247  000106                     _System_State_Change:
  1248                           	opt stack 0
  1249  000106                     	ds	1
  1250  000107                     _RF_DataTiming:
  1251                           	opt stack 0
  1252  000107                     	ds	128
  1253                           tblptru	equ	0xFF8
  1254                           tblptrh	equ	0xFF7
  1255                           tblptrl	equ	0xFF6
  1256                           tablat	equ	0xFF5
  1257                           postinc0	equ	0xFEE
  1258                           wreg	equ	0xFE8
  1259                           postdec1	equ	0xFE5
  1260                           fsr1l	equ	0xFE1
  1261                           
  1262                           	psect	dataBANK1
  1263  0001A9                     __pdataBANK1:
  1264                           	opt stack 0
  1265  0001A9                     _Rail_VIN:
  1266                           	opt stack 0
  1267  0001A9                     	ds	3
  1268  0001AC                     _IR_Saved:
  1269                           	opt stack 0
  1270  0001AC                     	ds	1
  1271  0001AD                     _RF_Saved:
  1272                           	opt stack 0
  1273  0001AD                     	ds	1
  1274  0001AE                     _System_State:
  1275                           	opt stack 0
  1276  0001AE                     	ds	1
  1277                           tblptru	equ	0xFF8
  1278                           tblptrh	equ	0xFF7
  1279                           tblptrl	equ	0xFF6
  1280                           tablat	equ	0xFF5
  1281                           postinc0	equ	0xFEE
  1282                           wreg	equ	0xFE8
  1283                           postdec1	equ	0xFE5
  1284                           fsr1l	equ	0xFE1
  1285                           
  1286                           	psect	bssBANK2
  1287  000200                     __pbssBANK2:
  1288                           	opt stack 0
  1289  000200                     _IR_DataTiming:
  1290                           	opt stack 0
  1291  000200                     	ds	192
  1292                           tblptru	equ	0xFF8
  1293                           tblptrh	equ	0xFF7
  1294                           tblptrl	equ	0xFF6
  1295                           tablat	equ	0xFF5
  1296                           postinc0	equ	0xFEE
  1297                           wreg	equ	0xFE8
  1298                           postdec1	equ	0xFE5
  1299                           fsr1l	equ	0xFE1
  1300                           
  1301                           	psect	bssBANK3
  1302  000300                     __pbssBANK3:
  1303                           	opt stack 0
  1304  000300                     _IR_DataHolder1:
  1305                           	opt stack 0
  1306  000300                     	ds	192
  1307                           tblptru	equ	0xFF8
  1308                           tblptrh	equ	0xFF7
  1309                           tblptrl	equ	0xFF6
  1310                           tablat	equ	0xFF5
  1311                           postinc0	equ	0xFEE
  1312                           wreg	equ	0xFE8
  1313                           postdec1	equ	0xFE5
  1314                           fsr1l	equ	0xFE1
  1315                           
  1316                           	psect	cstackBANK1
  1317  000187                     __pcstackBANK1:
  1318                           	opt stack 0
  1319  000187                     ?___ftmul:
  1320                           	opt stack 0
  1321  000187                     ___fttol@sign1:
  1322                           	opt stack 0
  1323  000187                     ___ftmul@f1:
  1324                           	opt stack 0
  1325  000187                     MSC_DelayMS@i:
  1326                           	opt stack 0
  1327                           
  1328                           ; 4 bytes @ 0x0
  1329  000187                     	ds	1
  1330  000188                     ___fttol@lval:
  1331                           	opt stack 0
  1332                           
  1333                           ; 4 bytes @ 0x1
  1334  000188                     	ds	2
  1335  00018A                     ___ftmul@f2:
  1336                           	opt stack 0
  1337                           
  1338                           ; 3 bytes @ 0x3
  1339  00018A                     	ds	1
  1340  00018B                     MSC_BlinkLED@blink:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x4
  1344  00018B                     	ds	1
  1345  00018C                     ___fttol@exp1:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x5
  1349  00018C                     	ds	1
  1350  00018D                     ??___ftmul:
  1351  00018D                     MSC_BlinkLED@speed:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x6
  1355  00018D                     	ds	2
  1356  00018F                     MSC_BlinkLED@i:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0x8
  1360  00018F                     	ds	1
  1361  000190                     ___ftmul@exp:
  1362                           	opt stack 0
  1363                           
  1364                           ; 1 bytes @ 0x9
  1365  000190                     	ds	1
  1366  000191                     ___ftmul@sign:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0xA
  1370  000191                     	ds	1
  1371  000192                     ___ftmul@f3_as_product:
  1372                           	opt stack 0
  1373                           
  1374                           ; 3 bytes @ 0xB
  1375  000192                     	ds	3
  1376  000195                     RF_LoadCode@Low:
  1377                           	opt stack 0
  1378  000195                     IR_LoadCode@Low1:
  1379                           	opt stack 0
  1380                           
  1381                           ; 3 bytes @ 0xE
  1382  000195                     	ds	3
  1383  000198                     RF_LoadCode@High:
  1384                           	opt stack 0
  1385  000198                     IR_LoadCode@High1:
  1386                           	opt stack 0
  1387                           
  1388                           ; 3 bytes @ 0x11
  1389  000198                     	ds	3
  1390  00019B                     IR_LoadCode@CodeSize1:
  1391                           	opt stack 0
  1392                           
  1393                           ; 1 bytes @ 0x14
  1394  00019B                     	ds	1
  1395  00019C                     IR_LoadCode@Low2:
  1396                           	opt stack 0
  1397                           
  1398                           ; 3 bytes @ 0x15
  1399  00019C                     	ds	3
  1400  00019F                     IR_LoadCode@High2:
  1401                           	opt stack 0
  1402                           
  1403                           ; 3 bytes @ 0x18
  1404  00019F                     	ds	3
  1405  0001A2                     IR_LoadCode@CodeSize2:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x1B
  1409  0001A2                     	ds	1
  1410  0001A3                     IR_LoadCode@LowBound:
  1411                           	opt stack 0
  1412                           
  1413                           ; 3 bytes @ 0x1C
  1414  0001A3                     	ds	3
  1415  0001A6                     IR_LoadCode@HighBound:
  1416                           	opt stack 0
  1417                           
  1418                           ; 3 bytes @ 0x1F
  1419  0001A6                     	ds	3
  1420                           tblptru	equ	0xFF8
  1421                           tblptrh	equ	0xFF7
  1422                           tblptrl	equ	0xFF6
  1423                           tablat	equ	0xFF5
  1424                           postinc0	equ	0xFEE
  1425                           wreg	equ	0xFE8
  1426                           postdec1	equ	0xFE5
  1427                           fsr1l	equ	0xFE1
  1428                           
  1429                           	psect	cstackBANK0
  1430  000080                     __pcstackBANK0:
  1431                           	opt stack 0
  1432  000080                     ?i2___ftpack:
  1433                           	opt stack 0
  1434  000080                     ?i2___fttol:
  1435                           	opt stack 0
  1436  000080                     i2RF_CalculateCodesize@i:
  1437                           	opt stack 0
  1438  000080                     i2RF_DataInt@state:
  1439                           	opt stack 0
  1440  000080                     i2TMR_Timer0@state:
  1441                           	opt stack 0
  1442  000080                     i2TMR_Timer0Int@state:
  1443                           	opt stack 0
  1444  000080                     i2MSC_CleanBufferInt@data:
  1445                           	opt stack 0
  1446  000080                     i2FSH_VerifyWriteIntArray@ConstArray:
  1447                           	opt stack 0
  1448  000080                     i2___ftpack@arg:
  1449                           	opt stack 0
  1450  000080                     i2___fttol@f1:
  1451                           	opt stack 0
  1452  000080                     i2FSH_AddressToBlock@Address:
  1453                           	opt stack 0
  1454                           
  1455                           ; 4 bytes @ 0x0
  1456  000080                     	ds	1
  1457  000081                     i2TMR_ResetTimer0@TimerOn:
  1458                           	opt stack 0
  1459                           
  1460                           ; 1 bytes @ 0x1
  1461  000081                     	ds	1
  1462  000082                     i2MSC_CleanBufferInt@count:
  1463                           	opt stack 0
  1464                           
  1465                           ; 2 bytes @ 0x2
  1466  000082                     	ds	1
  1467  000083                     i2___ftpack@exp:
  1468                           	opt stack 0
  1469  000083                     i2FSH_VerifyWriteIntArray@Array:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x3
  1473  000083                     	ds	1
  1474  000084                     ??i2___fttol:
  1475  000084                     i2___ftpack@sign:
  1476                           	opt stack 0
  1477  000084                     i2MSC_CleanBufferInt@i:
  1478                           	opt stack 0
  1479  000084                     i2FSH_WriteIntArray@ConstArray:
  1480                           	opt stack 0
  1481  000084                     i2FSH_EraseBlock@Address:
  1482                           	opt stack 0
  1483                           
  1484                           ; 4 bytes @ 0x4
  1485  000084                     	ds	1
  1486  000085                     ??i2_FSH_VerifyWriteIntArray:
  1487  000085                     ??i2___ftpack:
  1488                           
  1489                           ; 0 bytes @ 0x5
  1490  000085                     	ds	1
  1491  000086                     i2MSC_BufferCopyIntConst@from:
  1492                           	opt stack 0
  1493                           
  1494                           ; 3 bytes @ 0x6
  1495  000086                     	ds	1
  1496  000087                     i2FSH_WriteIntArray@Array:
  1497                           	opt stack 0
  1498                           
  1499                           ; 2 bytes @ 0x7
  1500  000087                     	ds	1
  1501  000088                     ?i2___lwtoft:
  1502                           	opt stack 0
  1503  000088                     i2FSH_EraseBlock@highint:
  1504                           	opt stack 0
  1505  000088                     i2FSH_VerifyWriteIntArray@data:
  1506                           	opt stack 0
  1507  000088                     i2___lwtoft@c:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x8
  1511  000088                     	ds	1
  1512  000089                     ??i2_FSH_WriteIntArray:
  1513  000089                     i2FSH_EraseBlock@lowint:
  1514                           	opt stack 0
  1515  000089                     i2___fttol@sign1:
  1516                           	opt stack 0
  1517  000089                     i2MSC_BufferCopyIntConst@to:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x9
  1521  000089                     	ds	1
  1522  00008A                     i2FSH_EraseBlock@WriteTries:
  1523                           	opt stack 0
  1524  00008A                     i2FSH_VerifyWriteIntArray@failcount:
  1525                           	opt stack 0
  1526  00008A                     i2___fttol@lval:
  1527                           	opt stack 0
  1528                           
  1529                           ; 4 bytes @ 0xA
  1530  00008A                     	ds	1
  1531  00008B                     ?i2___ftmul:
  1532                           	opt stack 0
  1533  00008B                     i2FSH_WriteIntArray@i:
  1534                           	opt stack 0
  1535  00008B                     i2FSH_VerifyWriteIntArray@i:
  1536                           	opt stack 0
  1537  00008B                     i2MSC_BufferCopyIntConst@count:
  1538                           	opt stack 0
  1539  00008B                     i2___ftge@ff1:
  1540                           	opt stack 0
  1541  00008B                     i2___ftmul@f1:
  1542                           	opt stack 0
  1543                           
  1544                           ; 3 bytes @ 0xB
  1545  00008B                     	ds	1
  1546  00008C                     i2FSH_WriteIntArray@address:
  1547                           	opt stack 0
  1548                           
  1549                           ; 4 bytes @ 0xC
  1550  00008C                     	ds	1
  1551  00008D                     i2MSC_BufferCopyIntConst@shift:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0xD
  1555  00008D                     	ds	1
  1556  00008E                     i2___fttol@exp1:
  1557                           	opt stack 0
  1558  00008E                     i2___ftge@ff2:
  1559                           	opt stack 0
  1560  00008E                     i2___ftmul@f2:
  1561                           	opt stack 0
  1562                           
  1563                           ; 3 bytes @ 0xE
  1564  00008E                     	ds	1
  1565  00008F                     i2MSC_BufferCopyIntConst@i:
  1566                           	opt stack 0
  1567                           
  1568                           ; 2 bytes @ 0xF
  1569  00008F                     	ds	2
  1570  000091                     ??i2_FSH_Write_IR_RF:
  1571  000091                     ??i2___ftge:
  1572  000091                     ??i2___ftmul:
  1573                           
  1574                           ; 0 bytes @ 0x11
  1575  000091                     	ds	3
  1576  000094                     i2___ftmul@exp:
  1577                           	opt stack 0
  1578                           
  1579                           ; 1 bytes @ 0x14
  1580  000094                     	ds	1
  1581  000095                     i2___ftmul@sign:
  1582                           	opt stack 0
  1583                           
  1584                           ; 1 bytes @ 0x15
  1585  000095                     	ds	1
  1586  000096                     i2___ftmul@f3_as_product:
  1587                           	opt stack 0
  1588                           
  1589                           ; 3 bytes @ 0x16
  1590  000096                     	ds	1
  1591  000097                     i2FSH_Write_IR_RF@highint:
  1592                           	opt stack 0
  1593                           
  1594                           ; 1 bytes @ 0x17
  1595  000097                     	ds	1
  1596  000098                     i2FSH_Write_IR_RF@lowint:
  1597                           	opt stack 0
  1598                           
  1599                           ; 1 bytes @ 0x18
  1600  000098                     	ds	1
  1601  000099                     i2FSH_Write_IR_RF@FlashWasteindex:
  1602                           	opt stack 0
  1603  000099                     i2RF_LoadCode@Low:
  1604                           	opt stack 0
  1605                           
  1606                           ; 3 bytes @ 0x19
  1607  000099                     	ds	2
  1608  00009B                     i2FSH_Write_IR_RF@j:
  1609                           	opt stack 0
  1610                           
  1611                           ; 1 bytes @ 0x1B
  1612  00009B                     	ds	1
  1613  00009C                     i2FSH_Write_IR_RF@status:
  1614                           	opt stack 0
  1615  00009C                     i2RF_LoadCode@High:
  1616                           	opt stack 0
  1617                           
  1618                           ; 3 bytes @ 0x1C
  1619  00009C                     	ds	1
  1620  00009D                     i2FSH_Write_IR_RF@i:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x1D
  1624  00009D                     	ds	2
  1625  00009F                     i2FSH_Write_IR_RF@WriteTries:
  1626                           	opt stack 0
  1627                           
  1628                           ; 1 bytes @ 0x1F
  1629  00009F                     	ds	1
  1630  0000A0                     i2FSH_Write_IR_RF@RAMaddress:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x20
  1634  0000A0                     	ds	2
  1635  0000A2                     
  1636                           ; 0 bytes @ 0x22
  1637  0000A2                     	ds	2
  1638  0000A4                     RF_CheckCode@Low:
  1639                           	opt stack 0
  1640                           
  1641                           ; 3 bytes @ 0x24
  1642  0000A4                     	ds	3
  1643  0000A7                     RF_CheckCode@High:
  1644                           	opt stack 0
  1645                           
  1646                           ; 3 bytes @ 0x27
  1647  0000A7                     	ds	3
  1648  0000AA                     RF_CheckCode@i:
  1649                           	opt stack 0
  1650                           
  1651                           ; 1 bytes @ 0x2A
  1652  0000AA                     	ds	1
  1653  0000AB                     ??_high_isr:
  1654                           
  1655                           ; 0 bytes @ 0x2B
  1656  0000AB                     	ds	8
  1657  0000B3                     high_isr@RFtemp:
  1658                           	opt stack 0
  1659                           
  1660                           ; 2 bytes @ 0x33
  1661  0000B3                     	ds	2
  1662  0000B5                     ?___ftpack:
  1663                           	opt stack 0
  1664  0000B5                     ?___fttol:
  1665                           	opt stack 0
  1666  0000B5                     RF_CalculateCodesize@i:
  1667                           	opt stack 0
  1668  0000B5                     RF_DataInt@state:
  1669                           	opt stack 0
  1670  0000B5                     RF_Receiver@state:
  1671                           	opt stack 0
  1672  0000B5                     RF_SetBandwidth@band:
  1673                           	opt stack 0
  1674  0000B5                     RF_SetSquelch@state:
  1675                           	opt stack 0
  1676  0000B5                     MTR_IN1@state:
  1677                           	opt stack 0
  1678  0000B5                     MTR_IN2@state:
  1679                           	opt stack 0
  1680  0000B5                     IR_ReadReceiver@value:
  1681                           	opt stack 0
  1682  0000B5                     LDO_Pass@state:
  1683                           	opt stack 0
  1684  0000B5                     BUT_ReadButton@value:
  1685                           	opt stack 0
  1686  0000B5                     BUT_IR_PinChangeInt@state:
  1687                           	opt stack 0
  1688  0000B5                     TMR_Timer0@state:
  1689                           	opt stack 0
  1690  0000B5                     TMR_Timer1@state:
  1691                           	opt stack 0
  1692  0000B5                     TMR_Timer2@state:
  1693                           	opt stack 0
  1694  0000B5                     TMR_Timer0Int@state:
  1695                           	opt stack 0
  1696  0000B5                     TMR_Timer1Int@state:
  1697                           	opt stack 0
  1698  0000B5                     TMR_Timer2Int@state:
  1699                           	opt stack 0
  1700  0000B5                     TMR_Timer1Osc@state:
  1701                           	opt stack 0
  1702  0000B5                     ADC_Module@state:
  1703                           	opt stack 0
  1704  0000B5                     ADC_ConversionInt@state:
  1705                           	opt stack 0
  1706  0000B5                     MSC_DelayNOP@NOPs:
  1707                           	opt stack 0
  1708  0000B5                     MSC_CleanBufferInt@data:
  1709                           	opt stack 0
  1710  0000B5                     IR_CalculateCodesize@Code:
  1711                           	opt stack 0
  1712  0000B5                     ___ftpack@arg:
  1713                           	opt stack 0
  1714  0000B5                     ___ftge@ff1:
  1715                           	opt stack 0
  1716  0000B5                     ___fttol@f1:
  1717                           	opt stack 0
  1718                           
  1719                           ; 3 bytes @ 0x35
  1720  0000B5                     	ds	1
  1721  0000B6                     TMR_ResetTimer0@TimerOn:
  1722                           	opt stack 0
  1723  0000B6                     TMR_ResetTimer1@TimerOn:
  1724                           	opt stack 0
  1725                           
  1726                           ; 1 bytes @ 0x36
  1727  0000B6                     	ds	1
  1728  0000B7                     TMR_Timer1Function@mode:
  1729                           	opt stack 0
  1730  0000B7                     MSC_DelayNOP@i:
  1731                           	opt stack 0
  1732  0000B7                     MSC_CleanBufferInt@count:
  1733                           	opt stack 0
  1734                           
  1735                           ; 2 bytes @ 0x37
  1736  0000B7                     	ds	1
  1737  0000B8                     ??_IR_CalculateCodesize:
  1738  0000B8                     ___ftpack@exp:
  1739                           	opt stack 0
  1740  0000B8                     ___ftge@ff2:
  1741                           	opt stack 0
  1742                           
  1743                           ; 3 bytes @ 0x38
  1744  0000B8                     	ds	1
  1745  0000B9                     ??___fttol:
  1746  0000B9                     ___ftpack@sign:
  1747                           	opt stack 0
  1748  0000B9                     MSC_CleanBufferInt@i:
  1749                           	opt stack 0
  1750  0000B9                     MSC_DelayMS@US:
  1751                           	opt stack 0
  1752                           
  1753                           ; 4 bytes @ 0x39
  1754  0000B9                     	ds	1
  1755  0000BA                     ??___ftpack:
  1756                           
  1757                           ; 0 bytes @ 0x3A
  1758  0000BA                     	ds	1
  1759  0000BB                     ??___ftge:
  1760  0000BB                     IR_CalculateCodesize@i:
  1761                           	opt stack 0
  1762                           
  1763                           ; 1 bytes @ 0x3B
  1764  0000BB                     	ds	2
  1765  0000BD                     ??_MSC_DelayMS:
  1766  0000BD                     ?___lwtoft:
  1767                           	opt stack 0
  1768  0000BD                     ___lwtoft@c:
  1769                           	opt stack 0
  1770                           
  1771                           ; 2 bytes @ 0x3D
  1772  0000BD                     	ds	1
  1773  0000BE                     ??_MSC_BlinkLED:
  1774  0000BE                     
  1775                           ; 0 bytes @ 0x3E
  1776  0000BE                     	ds	2
  1777  0000C0                     tblptru	equ	0xFF8
  1778                           tblptrh	equ	0xFF7
  1779                           tblptrl	equ	0xFF6
  1780                           tablat	equ	0xFF5
  1781                           postinc0	equ	0xFEE
  1782                           wreg	equ	0xFE8
  1783                           postdec1	equ	0xFE5
  1784                           fsr1l	equ	0xFE1
  1785                           
  1786                           ; 0 bytes @ 0x40
  1787                           
  1788                           	psect	cstackCOMRAM
  1789  000001                     __pcstackCOMRAM:
  1790                           	opt stack 0
  1791  000001                     ?i1___ftpack:
  1792                           	opt stack 0
  1793  000001                     ?i1___fttol:
  1794                           	opt stack 0
  1795  000001                     i1RF_DataInt@state:
  1796                           	opt stack 0
  1797  000001                     i1IR_ReadReceiver@value:
  1798                           	opt stack 0
  1799  000001                     i1BUT_ReadButton@value:
  1800                           	opt stack 0
  1801  000001                     i1BUT_IR_PinChangeInt@state:
  1802                           	opt stack 0
  1803  000001                     i1TMR_Timer0@state:
  1804                           	opt stack 0
  1805  000001                     i1TMR_Timer1@state:
  1806                           	opt stack 0
  1807  000001                     i1TMR_Timer2@state:
  1808                           	opt stack 0
  1809  000001                     i1TMR_Timer0Int@state:
  1810                           	opt stack 0
  1811  000001                     i1MSC_CleanBufferInt@data:
  1812                           	opt stack 0
  1813  000001                     FSH_VerifyWriteIntArray@ConstArray:
  1814                           	opt stack 0
  1815  000001                     i1IR_CalculateCodesize@Code:
  1816                           	opt stack 0
  1817  000001                     i1___ftpack@arg:
  1818                           	opt stack 0
  1819  000001                     i1___fttol@f1:
  1820                           	opt stack 0
  1821  000001                     FSH_AddressToBlock@Address:
  1822                           	opt stack 0
  1823                           
  1824                           ; 4 bytes @ 0x0
  1825  000001                     	ds	1
  1826  000002                     TMR_ResetTimer2@TimerOn:
  1827                           	opt stack 0
  1828  000002                     i1TMR_ResetTimer1@TimerOn:
  1829                           	opt stack 0
  1830                           
  1831                           ; 1 bytes @ 0x1
  1832  000002                     	ds	1
  1833  000003                     TMR_Timer2Start@time:
  1834                           	opt stack 0
  1835  000003                     i1MSC_CleanBufferInt@count:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0x2
  1839  000003                     	ds	1
  1840  000004                     ??i1_IR_CalculateCodesize:
  1841  000004                     i1___ftpack@exp:
  1842                           	opt stack 0
  1843  000004                     FSH_VerifyWriteIntArray@Array:
  1844                           	opt stack 0
  1845                           
  1846                           ; 2 bytes @ 0x3
  1847  000004                     	ds	1
  1848  000005                     ??i1___fttol:
  1849  000005                     i1___ftpack@sign:
  1850                           	opt stack 0
  1851  000005                     i1MSC_CleanBufferInt@i:
  1852                           	opt stack 0
  1853  000005                     FSH_WriteIntArray@ConstArray:
  1854                           	opt stack 0
  1855  000005                     FSH_EraseBlock@Address:
  1856                           	opt stack 0
  1857                           
  1858                           ; 4 bytes @ 0x4
  1859  000005                     	ds	1
  1860  000006                     ??_FSH_VerifyWriteIntArray:
  1861  000006                     ??i1___ftpack:
  1862                           
  1863                           ; 0 bytes @ 0x5
  1864  000006                     	ds	1
  1865  000007                     i1IR_CalculateCodesize@i:
  1866                           	opt stack 0
  1867  000007                     MSC_BufferCopyIntConst@from:
  1868                           	opt stack 0
  1869                           
  1870                           ; 3 bytes @ 0x6
  1871  000007                     	ds	1
  1872  000008                     FSH_WriteIntArray@Array:
  1873                           	opt stack 0
  1874                           
  1875                           ; 2 bytes @ 0x7
  1876  000008                     	ds	1
  1877  000009                     ?i1___lwtoft:
  1878                           	opt stack 0
  1879  000009                     FSH_EraseBlock@highint:
  1880                           	opt stack 0
  1881  000009                     FSH_VerifyWriteIntArray@data:
  1882                           	opt stack 0
  1883  000009                     i1___lwtoft@c:
  1884                           	opt stack 0
  1885                           
  1886                           ; 2 bytes @ 0x8
  1887  000009                     	ds	1
  1888  00000A                     ??_FSH_WriteIntArray:
  1889  00000A                     FSH_EraseBlock@lowint:
  1890                           	opt stack 0
  1891  00000A                     i1___fttol@sign1:
  1892                           	opt stack 0
  1893  00000A                     MSC_BufferCopyIntConst@to:
  1894                           	opt stack 0
  1895                           
  1896                           ; 2 bytes @ 0x9
  1897  00000A                     	ds	1
  1898  00000B                     FSH_EraseBlock@WriteTries:
  1899                           	opt stack 0
  1900  00000B                     FSH_VerifyWriteIntArray@failcount:
  1901                           	opt stack 0
  1902  00000B                     i1___fttol@lval:
  1903                           	opt stack 0
  1904                           
  1905                           ; 4 bytes @ 0xA
  1906  00000B                     	ds	1
  1907  00000C                     ?___ftdiv:
  1908                           	opt stack 0
  1909  00000C                     FSH_WriteIntArray@i:
  1910                           	opt stack 0
  1911  00000C                     FSH_VerifyWriteIntArray@i:
  1912                           	opt stack 0
  1913  00000C                     MSC_BufferCopyIntConst@count:
  1914                           	opt stack 0
  1915  00000C                     ___ftdiv@f1:
  1916                           	opt stack 0
  1917  00000C                     i1___ftge@ff1:
  1918                           	opt stack 0
  1919                           
  1920                           ; 3 bytes @ 0xB
  1921  00000C                     	ds	1
  1922  00000D                     FSH_WriteIntArray@address:
  1923                           	opt stack 0
  1924                           
  1925                           ; 4 bytes @ 0xC
  1926  00000D                     	ds	1
  1927  00000E                     MSC_BufferCopyIntConst@shift:
  1928                           	opt stack 0
  1929                           
  1930                           ; 2 bytes @ 0xD
  1931  00000E                     	ds	1
  1932  00000F                     i1___fttol@exp1:
  1933                           	opt stack 0
  1934  00000F                     ___ftdiv@f2:
  1935                           	opt stack 0
  1936  00000F                     i1___ftge@ff2:
  1937                           	opt stack 0
  1938                           
  1939                           ; 3 bytes @ 0xE
  1940  00000F                     	ds	1
  1941  000010                     MSC_BufferCopyIntConst@i:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0xF
  1945  000010                     	ds	2
  1946  000012                     ??_FSH_Write_IR_RF:
  1947  000012                     ??___ftdiv:
  1948  000012                     ??i1___ftge:
  1949                           
  1950                           ; 0 bytes @ 0x11
  1951  000012                     	ds	3
  1952  000015                     ___ftdiv@cntr:
  1953                           	opt stack 0
  1954                           
  1955                           ; 1 bytes @ 0x14
  1956  000015                     	ds	1
  1957  000016                     ___ftdiv@f3:
  1958                           	opt stack 0
  1959                           
  1960                           ; 3 bytes @ 0x15
  1961  000016                     	ds	2
  1962  000018                     FSH_Write_IR_RF@highint:
  1963                           	opt stack 0
  1964                           
  1965                           ; 1 bytes @ 0x17
  1966  000018                     	ds	1
  1967  000019                     FSH_Write_IR_RF@lowint:
  1968                           	opt stack 0
  1969  000019                     ___ftdiv@exp:
  1970                           	opt stack 0
  1971                           
  1972                           ; 1 bytes @ 0x18
  1973  000019                     	ds	1
  1974  00001A                     ___ftdiv@sign:
  1975                           	opt stack 0
  1976  00001A                     FSH_Write_IR_RF@FlashWasteindex:
  1977                           	opt stack 0
  1978                           
  1979                           ; 2 bytes @ 0x19
  1980  00001A                     	ds	1
  1981  00001B                     ?i1___ftmul:
  1982                           	opt stack 0
  1983  00001B                     i1___ftmul@f1:
  1984                           	opt stack 0
  1985                           
  1986                           ; 3 bytes @ 0x1A
  1987  00001B                     	ds	1
  1988  00001C                     FSH_Write_IR_RF@j:
  1989                           	opt stack 0
  1990                           
  1991                           ; 1 bytes @ 0x1B
  1992  00001C                     	ds	1
  1993  00001D                     FSH_Write_IR_RF@status:
  1994                           	opt stack 0
  1995                           
  1996                           ; 1 bytes @ 0x1C
  1997  00001D                     	ds	1
  1998  00001E                     FSH_Write_IR_RF@i:
  1999                           	opt stack 0
  2000  00001E                     i1___ftmul@f2:
  2001                           	opt stack 0
  2002                           
  2003                           ; 3 bytes @ 0x1D
  2004  00001E                     	ds	2
  2005  000020                     FSH_Write_IR_RF@WriteTries:
  2006                           	opt stack 0
  2007                           
  2008                           ; 1 bytes @ 0x1F
  2009  000020                     	ds	1
  2010  000021                     ??i1___ftmul:
  2011  000021                     FSH_Write_IR_RF@RAMaddress:
  2012                           	opt stack 0
  2013                           
  2014                           ; 2 bytes @ 0x20
  2015  000021                     	ds	3
  2016  000024                     i1___ftmul@exp:
  2017                           	opt stack 0
  2018                           
  2019                           ; 1 bytes @ 0x23
  2020  000024                     	ds	1
  2021  000025                     i1___ftmul@sign:
  2022                           	opt stack 0
  2023                           
  2024                           ; 1 bytes @ 0x24
  2025  000025                     	ds	1
  2026  000026                     i1___ftmul@f3_as_product:
  2027                           	opt stack 0
  2028                           
  2029                           ; 3 bytes @ 0x25
  2030  000026                     	ds	3
  2031  000029                     ADC_CalculateVoltage@Voltage:
  2032                           	opt stack 0
  2033  000029                     i1IR_LoadCode@Low1:
  2034                           	opt stack 0
  2035                           
  2036                           ; 3 bytes @ 0x28
  2037  000029                     	ds	3
  2038  00002C                     ADC_CalculateVoltage@ADCcounts:
  2039                           	opt stack 0
  2040  00002C                     i1IR_LoadCode@High1:
  2041                           	opt stack 0
  2042                           
  2043                           ; 3 bytes @ 0x2B
  2044  00002C                     	ds	3
  2045  00002F                     i1IR_LoadCode@CodeSize1:
  2046                           	opt stack 0
  2047                           
  2048                           ; 1 bytes @ 0x2E
  2049  00002F                     	ds	1
  2050  000030                     i1IR_LoadCode@Low2:
  2051                           	opt stack 0
  2052                           
  2053                           ; 3 bytes @ 0x2F
  2054  000030                     	ds	3
  2055  000033                     i1IR_LoadCode@High2:
  2056                           	opt stack 0
  2057                           
  2058                           ; 3 bytes @ 0x32
  2059  000033                     	ds	3
  2060  000036                     i1IR_LoadCode@CodeSize2:
  2061                           	opt stack 0
  2062                           
  2063                           ; 1 bytes @ 0x35
  2064  000036                     	ds	1
  2065  000037                     i1IR_LoadCode@LowBound:
  2066                           	opt stack 0
  2067                           
  2068                           ; 3 bytes @ 0x36
  2069  000037                     	ds	3
  2070  00003A                     i1IR_LoadCode@HighBound:
  2071                           	opt stack 0
  2072                           
  2073                           ; 3 bytes @ 0x39
  2074  00003A                     	ds	3
  2075  00003D                     ??_IR_CheckCode:
  2076                           
  2077                           ; 0 bytes @ 0x3C
  2078  00003D                     	ds	6
  2079  000043                     IR_CheckCode@data:
  2080                           	opt stack 0
  2081                           
  2082                           ; 2 bytes @ 0x42
  2083  000043                     	ds	2
  2084  000045                     IR_CheckCode@High:
  2085                           	opt stack 0
  2086                           
  2087                           ; 3 bytes @ 0x44
  2088  000045                     	ds	3
  2089  000048                     IR_CheckCode@Low:
  2090                           	opt stack 0
  2091                           
  2092                           ; 3 bytes @ 0x47
  2093  000048                     	ds	3
  2094  00004B                     IR_CheckCode@i:
  2095                           	opt stack 0
  2096                           
  2097                           ; 1 bytes @ 0x4A
  2098  00004B                     	ds	1
  2099  00004C                     ??_low_isr:
  2100                           
  2101                           ; 0 bytes @ 0x4B
  2102  00004C                     	ds	11
  2103  000057                     low_isr@button_state:
  2104                           	opt stack 0
  2105                           
  2106                           ; 1 bytes @ 0x56
  2107  000057                     	ds	1
  2108  000058                     low_isr@IRtemp:
  2109                           	opt stack 0
  2110                           
  2111                           ; 2 bytes @ 0x57
  2112  000058                     	ds	2
  2113                           tblptru	equ	0xFF8
  2114                           tblptrh	equ	0xFF7
  2115                           tblptrl	equ	0xFF6
  2116                           tablat	equ	0xFF5
  2117                           postinc0	equ	0xFEE
  2118                           wreg	equ	0xFE8
  2119                           postdec1	equ	0xFE5
  2120                           fsr1l	equ	0xFE1
  2121                           
  2122 ;;
  2123 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2124 ;;
  2125 ;; *************** function _main *****************
  2126 ;; Defined at:
  2127 ;;		line 90 in file "main.c"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;		None
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;		None
  2132 ;; Return value:  Size  Location     Type
  2133 ;;                  2   60[None  ] int 
  2134 ;; Registers used:
  2135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2136 ;; Tracked objects:
  2137 ;;		On entry : 0/0
  2138 ;;		On exit  : F/1
  2139 ;;		Unchanged: 0/0
  2140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2141 ;;      Params:         0       0       0       0       0
  2142 ;;      Locals:         0       0       0       0       0
  2143 ;;      Temps:          0       0       0       0       0
  2144 ;;      Totals:         0       0       0       0       0
  2145 ;;Total ram usage:        0 bytes
  2146 ;; Hardware stack levels required when called:   18
  2147 ;; This function calls:
  2148 ;;		_ADC_Start
  2149 ;;		_IR_LoadCode
  2150 ;;		_Init_App
  2151 ;;		_Init_System
  2152 ;;		_MSC_BlinkLED
  2153 ;;		_MSC_DelayMS
  2154 ;;		_MTR_Rotate
  2155 ;;		_RF_Enable
  2156 ;;		_RF_LoadCode
  2157 ;;		_SYS_ActivityTimer
  2158 ;;		_SYS_ConfigureOscillator
  2159 ;;		_SYS_DisableInt
  2160 ;;		_SYS_EnableInt
  2161 ;;		___ftge
  2162 ;; This function is called by:
  2163 ;;		Startup code after reset
  2164 ;; This function uses a non-reentrant model
  2165 ;;
  2166                           
  2167                           	psect	text0
  2168  003E4C                     __ptext0:
  2169                           	opt stack 0
  2170  003E4C                     _main:
  2171                           	opt stack 13
  2172                           
  2173                           ;main.c: 93: SYS_ConfigureOscillator();
  2174                           
  2175                           ;incstack = 0
  2176  003E4C  ECC8  F00D         	call	_SYS_ConfigureOscillator	;wreg free
  2177                           
  2178                           ;main.c: 94: Init_App();
  2179  003E50  EC68  F00A         	call	_Init_App	;wreg free
  2180                           
  2181                           ;main.c: 95: Init_System();
  2182  003E54  EC9C  F00A         	call	_Init_System	;wreg free
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;main.c: 98: RF_LoadCode();
  2186  003E58  EC22  F001         	call	_RF_LoadCode	;wreg free
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;main.c: 99: IR_LoadCode();
  2190  003E5C  ECC1  F01B         	call	_IR_LoadCode	;wreg free
  2191                           
  2192                           ; BSR set to: 1
  2193                           ;main.c: 100: MSC_BlinkLED(4,50);
  2194  003E60  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2195  003E62  0E04               	movlw	4
  2196  003E64  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2197  003E66  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2198  003E68  0E32               	movlw	50
  2199  003E6A  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2200  003E6C  ECEC  F009         	call	_MSC_BlinkLED	;wreg free
  2201                           
  2202                           ; BSR set to: 1
  2203                           ;main.c: 101: (LATC &= ~0x10);
  2204  003E70  988B               	bcf	3979,4,c	;volatile
  2205  003E72                     l6919:
  2206                           
  2207                           ; BSR set to: 1
  2208                           ;main.c: 104: {
  2209                           ;main.c: 105: if(System_State == 8)
  2210  003E72  0E08               	movlw	8
  2211  003E74  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  2212  003E76  E001 D08C          	bnz	l6993
  2213                           
  2214                           ; BSR set to: 1
  2215                           ;main.c: 106: {
  2216                           ;main.c: 108: if(System_State_Change)
  2217  003E7A  5106               	movf	_System_State_Change& (0+255),w,b	;volatile
  2218  003E7C  E03F               	bz	l6957
  2219                           
  2220                           ; BSR set to: 1
  2221                           ;main.c: 109: {
  2222                           ;main.c: 111: (LATC &= ~0x10);
  2223  003E7E  988B               	bcf	3979,4,c	;volatile
  2224                           
  2225                           ; BSR set to: 1
  2226                           ;main.c: 112: if(RF_Saved == 90)
  2227  003E80  0E5A               	movlw	90
  2228  003E82  19AD               	xorwf	_RF_Saved& (0+255),w,b
  2229  003E84  E117               	bnz	l6939
  2230                           
  2231                           ; BSR set to: 1
  2232                           ;main.c: 113: {
  2233                           ;main.c: 114: if(Flash_Status == 1)
  2234  003E86  0503               	decf	_Flash_Status& (0+255),w,b
  2235  003E88  E10A               	bnz	l6933
  2236                           
  2237                           ; BSR set to: 1
  2238                           ;main.c: 115: {
  2239                           ;main.c: 116: MSC_BlinkLED(4,50);
  2240  003E8A  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2241  003E8C  0E04               	movlw	4
  2242  003E8E  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2243  003E90  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2244  003E92  0E32               	movlw	50
  2245  003E94  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2246  003E96  ECEC  F009         	call	_MSC_BlinkLED	;wreg free
  2247  003E9A                     l6931:
  2248                           
  2249                           ; BSR set to: 1
  2250                           ;main.c: 117: (LATC &= ~0x10);
  2251  003E9A  988B               	bcf	3979,4,c	;volatile
  2252                           
  2253                           ;main.c: 118: }
  2254  003E9C  D009               	goto	l6937
  2255  003E9E                     l6933:
  2256                           
  2257                           ; BSR set to: 1
  2258                           ;main.c: 119: else
  2259                           ;main.c: 120: {
  2260                           ;main.c: 121: MSC_BlinkLED(6,75);
  2261  003E9E  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2262  003EA0  0E06               	movlw	6
  2263  003EA2  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2264  003EA4  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2265  003EA6  0E4B               	movlw	75
  2266  003EA8  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2267  003EAA  ECEC  F009         	call	_MSC_BlinkLED	;wreg free
  2268  003EAE  D7F5               	goto	l6931
  2269  003EB0                     l6937:
  2270                           
  2271                           ; BSR set to: 1
  2272                           ;main.c: 123: }
  2273                           ;main.c: 124: RF_Saved = 91;
  2274  003EB0  0E5B               	movlw	91
  2275  003EB2  6FAD               	movwf	_RF_Saved& (0+255),b
  2276  003EB4                     l6939:
  2277                           
  2278                           ; BSR set to: 1
  2279                           ;main.c: 125: }
  2280                           ;main.c: 126: if(IR_Saved == 90)
  2281  003EB4  0E5A               	movlw	90
  2282  003EB6  19AC               	xorwf	_IR_Saved& (0+255),w,b
  2283  003EB8  E117               	bnz	i1L__ptext5
  2284                           
  2285                           ; BSR set to: 1
  2286                           ;main.c: 127: {
  2287                           ;main.c: 128: if(Flash_Status == 1)
  2288  003EBA  0503               	decf	_Flash_Status& (0+255),w,b
  2289  003EBC  E10A               	bnz	l6947
  2290                           
  2291                           ; BSR set to: 1
  2292                           ;main.c: 129: {
  2293                           ;main.c: 130: MSC_BlinkLED(4,50);
  2294  003EBE  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2295  003EC0  0E04               	movlw	4
  2296  003EC2  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2297  003EC4  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2298  003EC6  0E32               	movlw	50
  2299  003EC8  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2300  003ECA  ECEC  F009         	call	_MSC_BlinkLED	;wreg free
  2301  003ECE                     l6945:
  2302                           
  2303                           ; BSR set to: 1
  2304                           ;main.c: 131: (LATC &= ~0x10);
  2305  003ECE  988B               	bcf	3979,4,c	;volatile
  2306                           
  2307                           ;main.c: 132: }
  2308  003ED0  D009               	goto	l6951
  2309  003ED2                     l6947:
  2310                           
  2311                           ; BSR set to: 1
  2312                           ;main.c: 133: else
  2313                           ;main.c: 134: {
  2314                           ;main.c: 135: MSC_BlinkLED(6,75);
  2315  003ED2  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2316  003ED4  0E06               	movlw	6
  2317  003ED6  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2318  003ED8  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2319  003EDA  0E4B               	movlw	75
  2320  003EDC  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2321  003EDE  ECEC  F009         	call	_MSC_BlinkLED	;wreg free
  2322  003EE2  D7F5               	goto	l6945
  2323  003EE4                     l6951:
  2324                           
  2325                           ; BSR set to: 1
  2326                           ;main.c: 137: }
  2327                           ;main.c: 138: IR_Saved = 91;
  2328  003EE4  0E5B               	movlw	91
  2329  003EE6  6FAC               	movwf	_IR_Saved& (0+255),b
  2330  003EE8                     i1L__ptext5:
  2331                           	opt stack 0
  2332  003EE8                     i1L_SYS_EnableInt:
  2333                           	opt stack 0
  2334  003EE8                     i1Ll5079:
  2335                           	opt stack 17
  2336                           
  2337                           ;SYSTEM.c: 83: BUT_IR_PinChangeInt(1);
  2338  003EE8  0E01               	movlw	1
  2339  003EEA  EC61  F00D         	call	_BUT_IR_PinChangeInt
  2340                           
  2341                           ;SYSTEM.c: 84: RF_DataInt(1);
  2342  003EEE  0E01               	movlw	1
  2343  003EF0  ECD7  F00C         	call	_RF_DataInt
  2344  003EF4                     i1Ll5081:
  2345                           	opt stack 17
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;SYSTEM.c: 85: INTCONbits.PEIE = 1;
  2349  003EF4  8CF2               	bsf	intcon,6,c	;volatile
  2350  003EF6                     i1Ll5083:
  2351                           	opt stack 17
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;SYSTEM.c: 86: INTCONbits.GIE = 1;
  2355  003EF6  8EF2               	bsf	intcon,7,c	;volatile
  2356  003EF8                     i1Ll345:
  2357                           	opt stack 13
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;main.c: 141: System_State_Change = 0;
  2361  003EF8  0101               	movlb	1	; () banked
  2362  003EFA  6B06               	clrf	_System_State_Change& (0+255),b	;volatile
  2363  003EFC                     l6957:
  2364                           
  2365                           ; BSR set to: 1
  2366                           ;main.c: 142: }
  2367                           ;main.c: 143: if(RF_Data || IR_Data || Button_Data)
  2368  003EFC  5105               	movf	_RF_Data& (0+255),w,b	;volatile
  2369  003EFE  E104               	bnz	l6963
  2370                           
  2371                           ; BSR set to: 1
  2372  003F00  5104               	movf	_IR_Data& (0+255),w,b	;volatile
  2373  003F02  E102               	bnz	l6963
  2374                           
  2375                           ; BSR set to: 1
  2376  003F04  5102               	movf	_Button_Data& (0+255),w,b	;volatile
  2377  003F06  E01B               	bz	l6983
  2378  003F08                     l6963:
  2379                           
  2380                           ; BSR set to: 1
  2381                           ;main.c: 144: {
  2382                           ;main.c: 145: (LATC |= 0x10);
  2383  003F08  888B               	bsf	3979,4,c	;volatile
  2384  003F0A                     i2L__ptext1:
  2385                           	opt stack 0
  2386  003F0A                     i2L_SYS_DisableInt:
  2387                           	opt stack 0
  2388  003F0A                     i2Ll6095:
  2389                           	opt stack 18
  2390                           
  2391                           ; BSR set to: 1
  2392                           ;SYSTEM.c: 72: INTCONbits.GIE = 0;
  2393  003F0A  9EF2               	bcf	intcon,7,c	;volatile
  2394                           
  2395                           ;SYSTEM.c: 73: INTCONbits.PEIE = 0;
  2396  003F0C  9CF2               	bcf	intcon,6,c	;volatile
  2397  003F0E                     i2Ll342:
  2398                           	opt stack 13
  2399                           
  2400                           ; BSR set to: 1
  2401                           ;main.c: 147: MTR_Rotate();
  2402  003F0E  EC78  F006         	call	_MTR_Rotate	;wreg free
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;main.c: 148: MSC_DelayMS(200);
  2406  003F12  0EC8               	movlw	200
  2407  003F14  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  2408  003F16  6BBA               	clrf	(MSC_DelayMS@US+1)& (0+255),b
  2409  003F18  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  2410  003F1A  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  2411  003F1C  ECC5  F009         	call	_MSC_DelayMS	;wreg free
  2412  003F20                     i3L__ptext5:
  2413                           	opt stack 0
  2414  003F20                     i3L_SYS_EnableInt:
  2415                           	opt stack 0
  2416  003F20                     i3Ll5079:
  2417                           	opt stack 17
  2418                           
  2419                           ;SYSTEM.c: 83: BUT_IR_PinChangeInt(1);
  2420  003F20  0E01               	movlw	1
  2421  003F22  EC61  F00D         	call	_BUT_IR_PinChangeInt
  2422                           
  2423                           ;SYSTEM.c: 84: RF_DataInt(1);
  2424  003F26  0E01               	movlw	1
  2425  003F28  ECD7  F00C         	call	_RF_DataInt
  2426  003F2C                     i3Ll5081:
  2427                           	opt stack 17
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;SYSTEM.c: 85: INTCONbits.PEIE = 1;
  2431  003F2C  8CF2               	bsf	intcon,6,c	;volatile
  2432  003F2E                     i3Ll5083:
  2433                           	opt stack 17
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;SYSTEM.c: 86: INTCONbits.GIE = 1;
  2437  003F2E  8EF2               	bsf	intcon,7,c	;volatile
  2438  003F30                     i3Ll345:
  2439                           	opt stack 13
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;main.c: 150: RF_Data = 0;
  2443  003F30  0101               	movlb	1	; () banked
  2444  003F32  6B05               	clrf	_RF_Data& (0+255),b	;volatile
  2445                           
  2446                           ; BSR set to: 1
  2447                           ;main.c: 151: IR_Data = 0;
  2448  003F34  6B04               	clrf	_IR_Data& (0+255),b	;volatile
  2449                           
  2450                           ; BSR set to: 1
  2451                           ;main.c: 152: Button_Data = 0;
  2452  003F36  6B02               	clrf	_Button_Data& (0+255),b	;volatile
  2453                           
  2454                           ; BSR set to: 1
  2455                           ;main.c: 153: (LATC &= ~0x10);
  2456  003F38  988B               	bcf	3979,4,c	;volatile
  2457                           
  2458                           ; BSR set to: 1
  2459                           ;main.c: 154: RF_Enable();
  2460  003F3A  ECF3  F01F         	call	_RF_Enable	;wreg free
  2461  003F3E                     l6983:
  2462                           
  2463                           ;main.c: 155: }
  2464                           ;main.c: 156: if(Rail_VIN < 3.4 || Rail_VIN > 5.5 )
  2465  003F3E  C1A9  F0B5         	movff	_Rail_VIN,___ftge@ff1
  2466  003F42  C1AA  F0B6         	movff	_Rail_VIN+1,___ftge@ff1+1
  2467  003F46  C1AB  F0B7         	movff	_Rail_VIN+2,___ftge@ff1+2
  2468  003F4A  0E9A               	movlw	154
  2469  003F4C  0100               	movlb	0	; () banked
  2470  003F4E  6FB8               	movwf	___ftge@ff2& (0+255),b
  2471  003F50  0E59               	movlw	89
  2472  003F52  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  2473  003F54  0E40               	movlw	64
  2474  003F56  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  2475  003F58  EC40  F009         	call	___ftge	;wreg free
  2476  003F5C  E30E               	bnc	l6987
  2477                           
  2478                           ; BSR set to: 0
  2479  003F5E  6BB5               	clrf	___ftge@ff1& (0+255),b
  2480  003F60  0EB0               	movlw	176
  2481  003F62  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  2482  003F64  0E40               	movlw	64
  2483  003F66  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  2484  003F68  C1A9  F0B8         	movff	_Rail_VIN,___ftge@ff2
  2485  003F6C  C1AA  F0B9         	movff	_Rail_VIN+1,___ftge@ff2+1
  2486  003F70  C1AB  F0BA         	movff	_Rail_VIN+2,___ftge@ff2+2
  2487  003F74  EC40  F009         	call	___ftge	;wreg free
  2488  003F78  E209               	bc	l6991
  2489  003F7A                     l6987:
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;main.c: 157: {
  2493                           ;main.c: 158: MSC_DelayMS(100);
  2494  003F7A  0E64               	movlw	100
  2495  003F7C  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  2496  003F7E  6BBA               	clrf	(MSC_DelayMS@US+1)& (0+255),b
  2497  003F80  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  2498  003F82  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  2499  003F84  ECC5  F009         	call	_MSC_DelayMS	;wreg free
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;main.c: 159: (LATC ^= 0x10);
  2503  003F88  0E10               	movlw	16
  2504  003F8A  1A8B               	xorwf	3979,f,c	;volatile
  2505  003F8C                     l6991:
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;main.c: 160: }
  2509                           ;main.c: 161: SYS_ActivityTimer();
  2510  003F8C  EC0E  F00A         	call	_SYS_ActivityTimer	;wreg free
  2511                           
  2512                           ;main.c: 162: }
  2513  003F90  D01C               	goto	l7009
  2514  003F92                     l6993:
  2515                           
  2516                           ; BSR set to: 1
  2517                           ;main.c: 163: else if(System_State == 10)
  2518  003F92  0E0A               	movlw	10
  2519  003F94  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  2520  003F96  E119               	bnz	l7009
  2521                           
  2522                           ; BSR set to: 1
  2523                           ;main.c: 164: {
  2524                           ;main.c: 166: MSC_DelayMS(25);
  2525  003F98  0E19               	movlw	25
  2526  003F9A  0100               	movlb	0	; () banked
  2527  003F9C  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  2528  003F9E  6BBA               	clrf	(MSC_DelayMS@US+1)& (0+255),b
  2529  003FA0  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  2530  003FA2  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  2531  003FA4  ECC5  F009         	call	_MSC_DelayMS	;wreg free
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;main.c: 167: (LATC ^= 0x10);
  2535  003FA8  0E10               	movlw	16
  2536  003FAA  1A8B               	xorwf	3979,f,c	;volatile
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;main.c: 168: if(RF_Data)
  2540  003FAC  0101               	movlb	1	; () banked
  2541  003FAE  5105               	movf	_RF_Data& (0+255),w,b	;volatile
  2542  003FB0  E005               	bz	l78
  2543                           
  2544                           ; BSR set to: 1
  2545                           ;main.c: 169: {
  2546                           ;main.c: 171: RF_Data = 0;
  2547  003FB2  6B05               	clrf	_RF_Data& (0+255),b	;volatile
  2548                           
  2549                           ; BSR set to: 1
  2550                           ;main.c: 172: System_State = 8;
  2551  003FB4  0E08               	movlw	8
  2552  003FB6  6FAE               	movwf	_System_State& (0+255),b	;volatile
  2553                           
  2554                           ;main.c: 173: System_State_Change = 1;
  2555  003FB8  0E01               	movlw	1
  2556  003FBA  6F06               	movwf	_System_State_Change& (0+255),b	;volatile
  2557  003FBC                     l78:
  2558                           
  2559                           ; BSR set to: 1
  2560                           ;main.c: 174: }
  2561                           ;main.c: 175: if(IR_Data)
  2562  003FBC  5104               	movf	_IR_Data& (0+255),w,b	;volatile
  2563  003FBE  E005               	bz	l7009
  2564                           
  2565                           ; BSR set to: 1
  2566                           ;main.c: 176: {
  2567                           ;main.c: 178: IR_Data = 0;
  2568  003FC0  6B04               	clrf	_IR_Data& (0+255),b	;volatile
  2569                           
  2570                           ; BSR set to: 1
  2571                           ;main.c: 179: System_State = 8;
  2572  003FC2  0E08               	movlw	8
  2573  003FC4  6FAE               	movwf	_System_State& (0+255),b	;volatile
  2574                           
  2575                           ;main.c: 180: System_State_Change = 1;
  2576  003FC6  0E01               	movlw	1
  2577  003FC8  6F06               	movwf	_System_State_Change& (0+255),b	;volatile
  2578  003FCA                     l7009:
  2579                           
  2580                           ;main.c: 181: }
  2581                           ;main.c: 182: }
  2582                           ;main.c: 184: ADC_SampleCount++;
  2583  003FCA  0101               	movlb	1	; () banked
  2584  003FCC  4B00               	infsnz	_ADC_SampleCount& (0+255),f,b
  2585  003FCE  2B01               	incf	(_ADC_SampleCount+1)& (0+255),f,b
  2586                           
  2587                           ; BSR set to: 1
  2588                           ;main.c: 185: if(ADC_SampleCount > 10)
  2589  003FD0  5101               	movf	(_ADC_SampleCount+1)& (0+255),w,b
  2590  003FD2  E104               	bnz	u7500
  2591  003FD4  0E0B               	movlw	11
  2592  003FD6  5D00               	subwf	_ADC_SampleCount& (0+255),w,b
  2593  003FD8  E201 D74B          	bnc	l6919
  2594  003FDC                     u7500:
  2595                           
  2596                           ; BSR set to: 1
  2597                           ;main.c: 186: {
  2598                           ;main.c: 187: ADC_Start();
  2599  003FDC  ECE9  F00D         	call	_ADC_Start	;wreg free
  2600                           
  2601                           ; BSR set to: 1
  2602                           ;main.c: 188: ADC_SampleCount = 0;
  2603  003FE0  6B00               	clrf	_ADC_SampleCount& (0+255),b
  2604  003FE2  6B01               	clrf	(_ADC_SampleCount+1)& (0+255),b
  2605  003FE4  D746               	goto	l6919
  2606  003FE6                     __end_of_main:
  2607                           	opt stack 0
  2608                           tblptru	equ	0xFF8
  2609                           tblptrh	equ	0xFF7
  2610                           tblptrl	equ	0xFF6
  2611                           tablat	equ	0xFF5
  2612                           intcon	equ	0xFF2
  2613                           postinc0	equ	0xFEE
  2614                           wreg	equ	0xFE8
  2615                           postdec1	equ	0xFE5
  2616                           fsr1l	equ	0xFE1
  2617                           
  2618 ;; *************** function _SYS_DisableInt *****************
  2619 ;; Defined at:
  2620 ;;		line 70 in file "SYSTEM.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;		None
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;		None
  2625 ;; Return value:  Size  Location     Type
  2626 ;;		None               void
  2627 ;; Registers used:
  2628 ;;		None
  2629 ;; Tracked objects:
  2630 ;;		On entry : F/1
  2631 ;;		On exit  : F/1
  2632 ;;		Unchanged: F/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2634 ;;      Params:         0       0       0       0       0
  2635 ;;      Locals:         0       0       0       0       0
  2636 ;;      Temps:          0       0       0       0       0
  2637 ;;      Totals:         0       0       0       0       0
  2638 ;;Total ram usage:        0 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:   12
  2641 ;; This function calls:
  2642 ;;		Nothing
  2643 ;; This function is called by:
  2644 ;;		_main
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           	psect	text1
  2649  000000                     __ptext1:
  2650                           	opt stack 0
  2651  000000                     _SYS_DisableInt:
  2652                           	opt stack 0
  2653  000000                     __end_of_SYS_DisableInt:
  2654                           	opt stack 0
  2655                           tblptru	equ	0xFF8
  2656                           tblptrh	equ	0xFF7
  2657                           tblptrl	equ	0xFF6
  2658                           tablat	equ	0xFF5
  2659                           intcon	equ	0xFF2
  2660                           postinc0	equ	0xFEE
  2661                           wreg	equ	0xFE8
  2662                           postdec1	equ	0xFE5
  2663                           fsr1l	equ	0xFE1
  2664                           
  2665 ;; *************** function _SYS_ConfigureOscillator *****************
  2666 ;; Defined at:
  2667 ;;		line 116 in file "SYSTEM.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;		None
  2672 ;; Return value:  Size  Location     Type
  2673 ;;		None               void
  2674 ;; Registers used:
  2675 ;;		None
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2681 ;;      Params:         0       0       0       0       0
  2682 ;;      Locals:         0       0       0       0       0
  2683 ;;      Temps:          0       0       0       0       0
  2684 ;;      Totals:         0       0       0       0       0
  2685 ;;Total ram usage:        0 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:   12
  2688 ;; This function calls:
  2689 ;;		Nothing
  2690 ;; This function is called by:
  2691 ;;		_main
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text2
  2696  001B90                     __ptext2:
  2697                           	opt stack 0
  2698  001B90                     _SYS_ConfigureOscillator:
  2699                           	opt stack 18
  2700                           
  2701                           ;SYSTEM.c: 119: OSCTUNEbits.PLLEN = 1;
  2702                           
  2703                           ; BSR set to: 1
  2704                           ;incstack = 0
  2705  001B90  8C9B               	bsf	3995,6,c	;volatile
  2706  001B92                     l354:
  2707  001B92  B6D3               	btfsc	4051,3,c	;volatile
  2708  001B94  0012               	return		;funcret
  2709  001B96  D7FD               	goto	l354
  2710  001B98                     __end_of_SYS_ConfigureOscillator:
  2711                           	opt stack 0
  2712                           tblptru	equ	0xFF8
  2713                           tblptrh	equ	0xFF7
  2714                           tblptrl	equ	0xFF6
  2715                           tablat	equ	0xFF5
  2716                           intcon	equ	0xFF2
  2717                           postinc0	equ	0xFEE
  2718                           wreg	equ	0xFE8
  2719                           postdec1	equ	0xFE5
  2720                           fsr1l	equ	0xFE1
  2721                           
  2722 ;; *************** function _SYS_ActivityTimer *****************
  2723 ;; Defined at:
  2724 ;;		line 129 in file "SYSTEM.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;		None
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;		None
  2729 ;; Return value:  Size  Location     Type
  2730 ;;		None               void
  2731 ;; Registers used:
  2732 ;;		wreg, status,2, status,0, cstack
  2733 ;; Tracked objects:
  2734 ;;		On entry : F/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2738 ;;      Params:         0       0       0       0       0
  2739 ;;      Locals:         0       0       0       0       0
  2740 ;;      Temps:          0       0       0       0       0
  2741 ;;      Totals:         0       0       0       0       0
  2742 ;;Total ram usage:        0 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:   14
  2745 ;; This function calls:
  2746 ;;		_SYS_ActivityTimerReset
  2747 ;;		_SYS_EnableInt
  2748 ;;		_SYS_Sleep
  2749 ;; This function is called by:
  2750 ;;		_main
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text3
  2755  00141C                     __ptext3:
  2756                           	opt stack 0
  2757  00141C                     _SYS_ActivityTimer:
  2758                           	opt stack 16
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;SYSTEM.c: 131: if(Activity_Timer > 1000L)
  2762                           
  2763                           ;incstack = 0
  2764  00141C  505D               	movf	_Activity_Timer+3,w,c
  2765  00141E  105C               	iorwf	_Activity_Timer+2,w,c
  2766  001420  E105               	bnz	u6080
  2767  001422  0EE9               	movlw	233
  2768  001424  5C5A               	subwf	_Activity_Timer,w,c
  2769  001426  0E03               	movlw	3
  2770  001428  585B               	subwfb	_Activity_Timer+1,w,c
  2771  00142A  E310               	bnc	l6121
  2772  00142C                     u6080:
  2773  00142C                     i4L__ptext6:
  2774                           	opt stack 0
  2775  00142C                     i4L_SYS_ActivityTimerReset:
  2776                           	opt stack 0
  2777  00142C                     i4Ll5093:
  2778                           	opt stack 17
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;SYSTEM.c: 62: Activity_Timer = 0;
  2782  00142C  6A5A               	clrf	_Activity_Timer,c
  2783  00142E  6A5B               	clrf	_Activity_Timer+1,c
  2784  001430  6A5C               	clrf	_Activity_Timer+2,c
  2785  001432  6A5D               	clrf	_Activity_Timer+3,c
  2786  001434                     i4Ll339:
  2787                           	opt stack 16
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;SYSTEM.c: 134: (LATC &= ~0x10);
  2791  001434  988B               	bcf	3979,4,c	;volatile
  2792  001436                     i5L__ptext5:
  2793                           	opt stack 0
  2794  001436                     i5L_SYS_EnableInt:
  2795                           	opt stack 0
  2796  001436                     i5Ll5079:
  2797                           	opt stack 17
  2798                           
  2799                           ;SYSTEM.c: 83: BUT_IR_PinChangeInt(1);
  2800  001436  0E01               	movlw	1
  2801  001438  EC61  F00D         	call	_BUT_IR_PinChangeInt
  2802                           
  2803                           ;SYSTEM.c: 84: RF_DataInt(1);
  2804  00143C  0E01               	movlw	1
  2805  00143E  ECD7  F00C         	call	_RF_DataInt
  2806  001442                     i5Ll5081:
  2807                           	opt stack 17
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;SYSTEM.c: 85: INTCONbits.PEIE = 1;
  2811  001442  8CF2               	bsf	intcon,6,c	;volatile
  2812  001444                     i5Ll5083:
  2813                           	opt stack 17
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;SYSTEM.c: 86: INTCONbits.GIE = 1;
  2817  001444  8EF2               	bsf	intcon,7,c	;volatile
  2818  001446                     i5Ll345:
  2819                           	opt stack 0
  2820  001446                     i6L__ptext4:
  2821                           	opt stack 0
  2822  001446                     i6L_SYS_Sleep:
  2823                           	opt stack 0
  2824  001446                     i6Ll5163:
  2825                           	opt stack 17
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;SYSTEM.c: 96: OSCCON &= ~0b10000000;
  2829  001446  9ED3               	bcf	4051,7,c	;volatile
  2830  001448  0003               	sleep		;# 
  2831  00144A                     i6Ll348:
  2832                           	opt stack 0
  2833  00144A  0012               	return	
  2834  00144C                     l6121:
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;SYSTEM.c: 138: else
  2838                           ;SYSTEM.c: 139: {
  2839                           ;SYSTEM.c: 140: Activity_Timer++;
  2840  00144C  2A5A               	incf	_Activity_Timer,f,c
  2841  00144E  0E00               	movlw	0
  2842  001450  225B               	addwfc	_Activity_Timer+1,f,c
  2843  001452  225C               	addwfc	_Activity_Timer+2,f,c
  2844  001454  225D               	addwfc	_Activity_Timer+3,f,c
  2845  001456  0C00               	retlw	0	;funcret
  2846  001458                     __end_of_SYS_ActivityTimer:
  2847                           	opt stack 0
  2848                           tblptru	equ	0xFF8
  2849                           tblptrh	equ	0xFF7
  2850                           tblptrl	equ	0xFF6
  2851                           tablat	equ	0xFF5
  2852                           intcon	equ	0xFF2
  2853                           postinc0	equ	0xFEE
  2854                           wreg	equ	0xFE8
  2855                           postdec1	equ	0xFE5
  2856                           fsr1l	equ	0xFE1
  2857                           
  2858 ;; *************** function _SYS_Sleep *****************
  2859 ;; Defined at:
  2860 ;;		line 94 in file "SYSTEM.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;		None
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;		None
  2865 ;; Return value:  Size  Location     Type
  2866 ;;		None               void
  2867 ;; Registers used:
  2868 ;;		status,2, status,0
  2869 ;; Tracked objects:
  2870 ;;		On entry : F/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2874 ;;      Params:         0       0       0       0       0
  2875 ;;      Locals:         0       0       0       0       0
  2876 ;;      Temps:          0       0       0       0       0
  2877 ;;      Totals:         0       0       0       0       0
  2878 ;;Total ram usage:        0 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:   12
  2881 ;; This function calls:
  2882 ;;		Nothing
  2883 ;; This function is called by:
  2884 ;;		_SYS_ActivityTimer
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           	psect	text4
  2889  000000                     __ptext4:
  2890                           	opt stack 0
  2891  000000                     _SYS_Sleep:
  2892                           	opt stack 0
  2893  000000                     __end_of_SYS_Sleep:
  2894                           	opt stack 0
  2895                           tblptru	equ	0xFF8
  2896                           tblptrh	equ	0xFF7
  2897                           tblptrl	equ	0xFF6
  2898                           tablat	equ	0xFF5
  2899                           intcon	equ	0xFF2
  2900                           postinc0	equ	0xFEE
  2901                           wreg	equ	0xFE8
  2902                           postdec1	equ	0xFE5
  2903                           fsr1l	equ	0xFE1
  2904                           
  2905 ;; *************** function _SYS_EnableInt *****************
  2906 ;; Defined at:
  2907 ;;		line 81 in file "SYSTEM.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;		None
  2912 ;; Return value:  Size  Location     Type
  2913 ;;		None               void
  2914 ;; Registers used:
  2915 ;;		wreg, status,2, cstack
  2916 ;; Tracked objects:
  2917 ;;		On entry : E/1
  2918 ;;		On exit  : F/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2921 ;;      Params:         0       0       0       0       0
  2922 ;;      Locals:         0       0       0       0       0
  2923 ;;      Temps:          0       0       0       0       0
  2924 ;;      Totals:         0       0       0       0       0
  2925 ;;Total ram usage:        0 bytes
  2926 ;; Hardware stack levels used:    1
  2927 ;; Hardware stack levels required when called:   13
  2928 ;; This function calls:
  2929 ;;		_BUT_IR_PinChangeInt
  2930 ;;		_RF_DataInt
  2931 ;; This function is called by:
  2932 ;;		_main
  2933 ;;		_SYS_ActivityTimer
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text5
  2938  000000                     __ptext5:
  2939                           	opt stack 0
  2940  000000                     _SYS_EnableInt:
  2941                           	opt stack 0
  2942  000000                     __end_of_SYS_EnableInt:
  2943                           	opt stack 0
  2944                           tblptru	equ	0xFF8
  2945                           tblptrh	equ	0xFF7
  2946                           tblptrl	equ	0xFF6
  2947                           tablat	equ	0xFF5
  2948                           intcon	equ	0xFF2
  2949                           postinc0	equ	0xFEE
  2950                           wreg	equ	0xFE8
  2951                           postdec1	equ	0xFE5
  2952                           fsr1l	equ	0xFE1
  2953                           
  2954 ;; *************** function _SYS_ActivityTimerReset *****************
  2955 ;; Defined at:
  2956 ;;		line 60 in file "SYSTEM.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;		None
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;		None
  2961 ;; Return value:  Size  Location     Type
  2962 ;;		None               void
  2963 ;; Registers used:
  2964 ;;		None
  2965 ;; Tracked objects:
  2966 ;;		On entry : F/0
  2967 ;;		On exit  : F/0
  2968 ;;		Unchanged: F/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2970 ;;      Params:         0       0       0       0       0
  2971 ;;      Locals:         0       0       0       0       0
  2972 ;;      Temps:          0       0       0       0       0
  2973 ;;      Totals:         0       0       0       0       0
  2974 ;;Total ram usage:        0 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; Hardware stack levels required when called:   12
  2977 ;; This function calls:
  2978 ;;		Nothing
  2979 ;; This function is called by:
  2980 ;;		_SYS_ActivityTimer
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text6
  2985  000000                     __ptext6:
  2986                           	opt stack 0
  2987  000000                     _SYS_ActivityTimerReset:
  2988                           	opt stack 0
  2989  000000                     __end_of_SYS_ActivityTimerReset:
  2990                           	opt stack 0
  2991                           tblptru	equ	0xFF8
  2992                           tblptrh	equ	0xFF7
  2993                           tblptrl	equ	0xFF6
  2994                           tablat	equ	0xFF5
  2995                           intcon	equ	0xFF2
  2996                           postinc0	equ	0xFEE
  2997                           wreg	equ	0xFE8
  2998                           postdec1	equ	0xFE5
  2999                           fsr1l	equ	0xFE1
  3000                           
  3001 ;; *************** function _RF_LoadCode *****************
  3002 ;; Defined at:
  3003 ;;		line 127 in file "RF.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;		None
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  High            3   17[BANK1 ] int 
  3008 ;;  Low             3   14[BANK1 ] int 
  3009 ;; Return value:  Size  Location     Type
  3010 ;;		None               void
  3011 ;; Registers used:
  3012 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3013 ;; Tracked objects:
  3014 ;;		On entry : F/0
  3015 ;;		On exit  : F/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3018 ;;      Params:         0       0       0       0       0
  3019 ;;      Locals:         0       0       6       0       0
  3020 ;;      Temps:          0       0       0       0       0
  3021 ;;      Totals:         0       0       6       0       0
  3022 ;;Total ram usage:        6 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; Hardware stack levels required when called:   14
  3025 ;; This function calls:
  3026 ;;		_RF_CalculateCodesize
  3027 ;;		___ftge
  3028 ;;		___ftmul
  3029 ;;		___fttol
  3030 ;;		___lwtoft
  3031 ;; This function is called by:
  3032 ;;		_main
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           	psect	text7
  3037  000244                     __ptext7:
  3038                           	opt stack 0
  3039  000244                     _RF_LoadCode:
  3040                           	opt stack 16
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;RF.c: 130: double High = 0.0;
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;incstack = 0
  3047  000244  0101               	movlb	1	; () banked
  3048  000246  6B98               	clrf	RF_LoadCode@High& (0+255),b
  3049  000248  6B99               	clrf	(RF_LoadCode@High+1)& (0+255),b
  3050  00024A  6B9A               	clrf	(RF_LoadCode@High+2)& (0+255),b
  3051                           
  3052                           ; BSR set to: 1
  3053                           ;RF.c: 132: Low = (double)RF_SavedTiming[0] * (1.0 - 0.02);
  3054  00024C  0E80               	movlw	128
  3055  00024E  6EF6               	movwf	tblptrl,c
  3056  000250                     	if	1	;There is more than 1 active tblptr byte
  3057  000250  0E25               	movlw	37
  3058  000252  6EF7               	movwf	tblptrh,c
  3059  000254                     	endif
  3060  000254                     	if	0	;There are less than 3 active tblptr bytes
  3061  000254                     	endif
  3062  000254  0009               	tblrd		*+
  3063  000256  CFF5 F0BD          	movff	tablat,___lwtoft@c
  3064  00025A  000A               	tblrd		*-
  3065  00025C  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  3066  000260  EC81  F00B         	call	___lwtoft	;wreg free
  3067  000264  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  3068  000268  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  3069  00026C  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  3070  000270  0EE1               	movlw	225
  3071  000272  0101               	movlb	1	; () banked
  3072  000274  6F8A               	movwf	___ftmul@f2& (0+255),b
  3073  000276  0E7A               	movlw	122
  3074  000278  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  3075  00027A  0E3F               	movlw	63
  3076  00027C  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  3077  00027E  ECBC  F002         	call	___ftmul	;wreg free
  3078  000282  C187  F195         	movff	?___ftmul,RF_LoadCode@Low
  3079  000286  C188  F196         	movff	?___ftmul+1,RF_LoadCode@Low+1
  3080  00028A  C189  F197         	movff	?___ftmul+2,RF_LoadCode@Low+2
  3081                           
  3082                           ;RF.c: 133: High = (double)RF_SavedTiming[0] * (1.0 + 0.02);
  3083  00028E  0E80               	movlw	128
  3084  000290  6EF6               	movwf	tblptrl,c
  3085  000292                     	if	1	;There is more than 1 active tblptr byte
  3086  000292  0E25               	movlw	37
  3087  000294  6EF7               	movwf	tblptrh,c
  3088  000296                     	endif
  3089  000296                     	if	0	;There are less than 3 active tblptr bytes
  3090  000296                     	endif
  3091  000296  0009               	tblrd		*+
  3092  000298  CFF5 F0BD          	movff	tablat,___lwtoft@c
  3093  00029C  000A               	tblrd		*-
  3094  00029E  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  3095  0002A2  EC81  F00B         	call	___lwtoft	;wreg free
  3096  0002A6  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  3097  0002AA  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  3098  0002AE  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  3099  0002B2  0E8F               	movlw	143
  3100  0002B4  0101               	movlb	1	; () banked
  3101  0002B6  6F8A               	movwf	___ftmul@f2& (0+255),b
  3102  0002B8  0E82               	movlw	130
  3103  0002BA  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  3104  0002BC  0E3F               	movlw	63
  3105  0002BE  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  3106  0002C0  ECBC  F002         	call	___ftmul	;wreg free
  3107  0002C4  C187  F198         	movff	?___ftmul,RF_LoadCode@High
  3108  0002C8  C188  F199         	movff	?___ftmul+1,RF_LoadCode@High+1
  3109  0002CC  C189  F19A         	movff	?___ftmul+2,RF_LoadCode@High+2
  3110                           
  3111                           ;RF.c: 135: if(Low < 300)
  3112  0002D0  C195  F0B5         	movff	RF_LoadCode@Low,___ftge@ff1
  3113  0002D4  C196  F0B6         	movff	RF_LoadCode@Low+1,___ftge@ff1+1
  3114  0002D8  C197  F0B7         	movff	RF_LoadCode@Low+2,___ftge@ff1+2
  3115  0002DC  0100               	movlb	0	; () banked
  3116  0002DE  6BB8               	clrf	___ftge@ff2& (0+255),b
  3117  0002E0  0E96               	movlw	150
  3118  0002E2  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  3119  0002E4  0E43               	movlw	67
  3120  0002E6  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  3121  0002E8  EC40  F009         	call	___ftge	;wreg free
  3122  0002EC  E206               	bc	l6833
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;RF.c: 136: {
  3126                           ;RF.c: 137: Low = 300;
  3127  0002EE  0101               	movlb	1	; () banked
  3128  0002F0  6B95               	clrf	RF_LoadCode@Low& (0+255),b
  3129  0002F2  0E96               	movlw	150
  3130  0002F4  6F96               	movwf	(RF_LoadCode@Low+1)& (0+255),b
  3131  0002F6  0E43               	movlw	67
  3132  0002F8  6F97               	movwf	(RF_LoadCode@Low+2)& (0+255),b
  3133  0002FA                     l6833:
  3134                           
  3135                           ;RF.c: 138: }
  3136                           ;RF.c: 139: if(High > 2000)
  3137  0002FA  0100               	movlb	0	; () banked
  3138  0002FC  6BB5               	clrf	___ftge@ff1& (0+255),b
  3139  0002FE  0EFA               	movlw	250
  3140  000300  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  3141  000302  0E44               	movlw	68
  3142  000304  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  3143  000306  C198  F0B8         	movff	RF_LoadCode@High,___ftge@ff2
  3144  00030A  C199  F0B9         	movff	RF_LoadCode@High+1,___ftge@ff2+1
  3145  00030E  C19A  F0BA         	movff	RF_LoadCode@High+2,___ftge@ff2+2
  3146  000312  EC40  F009         	call	___ftge	;wreg free
  3147  000316  E206               	bc	l6837
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;RF.c: 140: {
  3151                           ;RF.c: 141: High = 2000;
  3152  000318  0101               	movlb	1	; () banked
  3153  00031A  6B98               	clrf	RF_LoadCode@High& (0+255),b
  3154  00031C  0EFA               	movlw	250
  3155  00031E  6F99               	movwf	(RF_LoadCode@High+1)& (0+255),b
  3156  000320  0E44               	movlw	68
  3157  000322  6F9A               	movwf	(RF_LoadCode@High+2)& (0+255),b
  3158  000324                     l6837:
  3159                           
  3160                           ;RF.c: 142: }
  3161                           ;RF.c: 144: RF_SyncLow = (unsigned int) Low;
  3162  000324  C195  F0B5         	movff	RF_LoadCode@Low,___fttol@f1
  3163  000328  C196  F0B6         	movff	RF_LoadCode@Low+1,___fttol@f1+1
  3164  00032C  C197  F0B7         	movff	RF_LoadCode@Low+2,___fttol@f1+2
  3165  000330  ECFD  F003         	call	___fttol	;wreg free
  3166  000334  C0B5  F0C2         	movff	?___fttol,_RF_SyncLow
  3167  000338  C0B6  F0C3         	movff	?___fttol+1,_RF_SyncLow+1
  3168                           
  3169                           ;RF.c: 145: RF_SyncHigh = (unsigned int) High;
  3170  00033C  C198  F0B5         	movff	RF_LoadCode@High,___fttol@f1
  3171  000340  C199  F0B6         	movff	RF_LoadCode@High+1,___fttol@f1+1
  3172  000344  C19A  F0B7         	movff	RF_LoadCode@High+2,___fttol@f1+2
  3173  000348  ECFD  F003         	call	___fttol	;wreg free
  3174  00034C  C0B5  F0C0         	movff	?___fttol,_RF_SyncHigh
  3175  000350  C0B6  F0C1         	movff	?___fttol+1,_RF_SyncHigh+1
  3176                           
  3177                           ;RF.c: 147: RF_CodeSize = RF_CalculateCodesize();
  3178  000354  EC83  F00A         	call	_RF_CalculateCodesize	;wreg free
  3179  000358  6FC8               	movwf	_RF_CodeSize& (0+255),b
  3180                           
  3181                           ; BSR set to: 0
  3182  00035A  0012               	return		;funcret
  3183  00035C                     __end_of_RF_LoadCode:
  3184                           	opt stack 0
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           intcon	equ	0xFF2
  3190                           postinc0	equ	0xFEE
  3191                           wreg	equ	0xFE8
  3192                           postdec1	equ	0xFE5
  3193                           fsr1l	equ	0xFE1
  3194                           
  3195 ;; *************** function _RF_CalculateCodesize *****************
  3196 ;; Defined at:
  3197 ;;		line 155 in file "RF.c"
  3198 ;; Parameters:    Size  Location     Type
  3199 ;;		None
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;  i               1   53[BANK0 ] unsigned char 
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  1    wreg      unsigned char 
  3204 ;; Registers used:
  3205 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3206 ;; Tracked objects:
  3207 ;;		On entry : E/0
  3208 ;;		On exit  : F/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3211 ;;      Params:         0       0       0       0       0
  3212 ;;      Locals:         0       1       0       0       0
  3213 ;;      Temps:          0       0       0       0       0
  3214 ;;      Totals:         0       1       0       0       0
  3215 ;;Total ram usage:        1 bytes
  3216 ;; Hardware stack levels used:    1
  3217 ;; Hardware stack levels required when called:   12
  3218 ;; This function calls:
  3219 ;;		Nothing
  3220 ;; This function is called by:
  3221 ;;		_RF_LoadCode
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           	psect	text8
  3226  001506                     __ptext8:
  3227                           	opt stack 0
  3228  001506                     _RF_CalculateCodesize:
  3229                           	opt stack 17
  3230                           
  3231                           ;RF.c: 157: unsigned char i;
  3232                           ;RF.c: 159: for(i=0; i<64;i++)
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;incstack = 0
  3236  001506  0100               	movlb	0	; () banked
  3237  001508  6BB5               	clrf	RF_CalculateCodesize@i& (0+255),b
  3238  00150A                     l5171:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;RF.c: 160: {
  3242                           ;RF.c: 161: if(RF_SavedTiming[i] == 0)
  3243  00150A  51B5               	movf	RF_CalculateCodesize@i& (0+255),w,b
  3244  00150C  0D02               	mullw	2
  3245  00150E  0E80               	movlw	128
  3246  001510  24F3               	addwf	prodl,w,c
  3247  001512  6EF6               	movwf	tblptrl,c
  3248  001514  0E25               	movlw	37
  3249  001516  20F4               	addwfc	prodh,w,c
  3250  001518  6EF7               	movwf	tblptrh,c
  3251  00151A  6AF8               	clrf	tblptru,c
  3252  00151C  0E00               	movlw	0
  3253  00151E  22F8               	addwfc	tblptru,f,c
  3254  001520  0009               	tblrd		*+
  3255  001522  50F5               	movf	tablat,w,c
  3256  001524  0009               	tblrd		*+
  3257  001526  10F5               	iorwf	tablat,w,c
  3258  001528  E102               	bnz	l5177
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;RF.c: 162: {
  3262                           ;RF.c: 163: return i;
  3263  00152A  51B5               	movf	RF_CalculateCodesize@i& (0+255),w,b
  3264  00152C  0012               	return	
  3265  00152E                     l5177:
  3266                           
  3267                           ; BSR set to: 0
  3268  00152E  2BB5               	incf	RF_CalculateCodesize@i& (0+255),f,b
  3269                           
  3270                           ; BSR set to: 0
  3271  001530  0E3F               	movlw	63
  3272  001532  65B5               	cpfsgt	RF_CalculateCodesize@i& (0+255),b
  3273  001534  D7EA               	goto	l5171
  3274  001536  0C40               	retlw	64
  3275  001538                     __end_of_RF_CalculateCodesize:
  3276                           	opt stack 0
  3277                           tblptru	equ	0xFF8
  3278                           tblptrh	equ	0xFF7
  3279                           tblptrl	equ	0xFF6
  3280                           tablat	equ	0xFF5
  3281                           prodh	equ	0xFF4
  3282                           prodl	equ	0xFF3
  3283                           intcon	equ	0xFF2
  3284                           postinc0	equ	0xFEE
  3285                           wreg	equ	0xFE8
  3286                           postdec1	equ	0xFE5
  3287                           fsr1l	equ	0xFE1
  3288                           
  3289 ;; *************** function _RF_Enable *****************
  3290 ;; Defined at:
  3291 ;;		line 101 in file "RF.c"
  3292 ;; Parameters:    Size  Location     Type
  3293 ;;		None
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;		None
  3296 ;; Return value:  Size  Location     Type
  3297 ;;		None               void
  3298 ;; Registers used:
  3299 ;;		wreg, status,2, cstack
  3300 ;; Tracked objects:
  3301 ;;		On entry : F/1
  3302 ;;		On exit  : F/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3305 ;;      Params:         0       0       0       0       0
  3306 ;;      Locals:         0       0       0       0       0
  3307 ;;      Temps:          0       0       0       0       0
  3308 ;;      Totals:         0       0       0       0       0
  3309 ;;Total ram usage:        0 bytes
  3310 ;; Hardware stack levels used:    1
  3311 ;; Hardware stack levels required when called:   13
  3312 ;; This function calls:
  3313 ;;		_RF_DataInt
  3314 ;;		_TMR_Timer0Int
  3315 ;; This function is called by:
  3316 ;;		_main
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text9
  3321  003FE6                     __ptext9:
  3322                           	opt stack 0
  3323  003FE6                     _RF_Enable:
  3324                           	opt stack 17
  3325                           
  3326                           ; BSR set to: 1
  3327                           ;RF.c: 103: INTCON3bits.INT1IF = 0;
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;incstack = 0
  3331  003FE6  90F0               	bcf	intcon3,0,c	;volatile
  3332                           
  3333                           ;RF.c: 104: INTCON3bits.INT2IF = 0;
  3334  003FE8  92F0               	bcf	intcon3,1,c	;volatile
  3335                           
  3336                           ;RF.c: 105: INTCONbits.TMR0IF = 0;
  3337  003FEA  94F2               	bcf	intcon,2,c	;volatile
  3338                           
  3339                           ; BSR set to: 1
  3340                           ;RF.c: 106: RF_DataInt(1);
  3341  003FEC  0E01               	movlw	1
  3342  003FEE  ECD7  F00C         	call	_RF_DataInt
  3343                           
  3344                           ;RF.c: 107: TMR_Timer0Int(1);
  3345  003FF2  0E01               	movlw	1
  3346  003FF4  EF41  F00D         	goto	_TMR_Timer0Int
  3347  003FF8                     __end_of_RF_Enable:
  3348                           	opt stack 0
  3349                           tblptru	equ	0xFF8
  3350                           tblptrh	equ	0xFF7
  3351                           tblptrl	equ	0xFF6
  3352                           tablat	equ	0xFF5
  3353                           prodh	equ	0xFF4
  3354                           prodl	equ	0xFF3
  3355                           intcon	equ	0xFF2
  3356                           intcon3	equ	0xFF0
  3357                           postinc0	equ	0xFEE
  3358                           wreg	equ	0xFE8
  3359                           postdec1	equ	0xFE5
  3360                           fsr1l	equ	0xFE1
  3361                           
  3362 ;; *************** function _MTR_Rotate *****************
  3363 ;; Defined at:
  3364 ;;		line 104 in file "MOTOR.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;		None
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;		None               void
  3371 ;; Registers used:
  3372 ;;		wreg, status,2, status,0, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : F/1
  3375 ;;		On exit  : F/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3378 ;;      Params:         0       0       0       0       0
  3379 ;;      Locals:         0       0       0       0       0
  3380 ;;      Temps:          0       0       0       0       0
  3381 ;;      Totals:         0       0       0       0       0
  3382 ;;Total ram usage:        0 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:   14
  3385 ;; This function calls:
  3386 ;;		_MSC_DelayMS
  3387 ;;		_MTR_IN1
  3388 ;;		_MTR_IN2
  3389 ;; This function is called by:
  3390 ;;		_main
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           	psect	text10
  3395  000CF0                     __ptext10:
  3396                           	opt stack 0
  3397  000CF0                     _MTR_Rotate:
  3398                           	opt stack 16
  3399                           
  3400                           ; BSR set to: 1
  3401                           ;MOTOR.c: 106: if(DC_Motor == 0)
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;incstack = 0
  3405  000CF0  0100               	movlb	0	; () banked
  3406  000CF2  51C5               	movf	_DC_Motor& (0+255),w,b
  3407  000CF4  E11D               	bnz	l6901
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;MOTOR.c: 107: {
  3411                           ;MOTOR.c: 108: MTR_IN1(0);
  3412  000CF6  0E00               	movlw	0
  3413  000CF8                     i7L__ptext12:
  3414                           	opt stack 0
  3415  000CF8                     i7L_MTR_IN1:
  3416                           	opt stack 17
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;incstack = 0
  3420                           ;MTR_IN1@state stored from wreg
  3421  000CF8  6FB5               	movwf	MTR_IN1@state& (0+255),b
  3422  000CFA                     i7Ll5433:
  3423                           	opt stack 17
  3424                           
  3425                           ;MOTOR.c: 56: if(state)
  3426  000CFA  0100               	movlb	0	; () banked
  3427  000CFC  51B5               	movf	MTR_IN1@state& (0+255),w,b
  3428  000CFE  B4D8               	btfsc	status,2,c
  3429  000D00                     i7Lu5241:
  3430                           	opt stack 0
  3431  000D00  D002               	goto	i7Ll5437
  3432  000D02                     i7Lu5240:
  3433                           	opt stack 0
  3434  000D02                     i7Ll5435:
  3435                           	opt stack 17
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;MOTOR.c: 57: {
  3439                           ;MOTOR.c: 58: LATB |= 0x08;
  3440  000D02  868A               	bsf	3978,3,c	;volatile
  3441  000D04  D001               	goto	iL44
  3442  000D06                     i7Ll5437:
  3443                           	opt stack 17
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;MOTOR.c: 60: else
  3447                           ;MOTOR.c: 61: {
  3448                           ;MOTOR.c: 62: LATB &= ~0x08;
  3449  000D06  968A               	bcf	3978,3,c	;volatile
  3450  000D08                     i7Ll505:
  3451                           	opt stack 0
  3452  000D08                     iL44:
  3453                           
  3454                           ;MOTOR.c: 109: MTR_IN2(1);
  3455  000D08  0E01               	movlw	1
  3456  000D0A                     i8L__ptext11:
  3457                           	opt stack 0
  3458  000D0A                     i8L_MTR_IN2:
  3459                           	opt stack 17
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;incstack = 0
  3463                           ;MTR_IN2@state stored from wreg
  3464  000D0A  6FB5               	movwf	MTR_IN2@state& (0+255),b
  3465  000D0C                     i8Ll5439:
  3466                           	opt stack 17
  3467                           
  3468                           ;MOTOR.c: 73: if(state)
  3469  000D0C  0100               	movlb	0	; () banked
  3470  000D0E  51B5               	movf	MTR_IN2@state& (0+255),w,b
  3471  000D10  B4D8               	btfsc	status,2,c
  3472  000D12                     i8Lu5251:
  3473                           	opt stack 0
  3474  000D12  D002               	goto	i8Ll5443
  3475  000D14                     i8Lu5250:
  3476                           	opt stack 0
  3477  000D14                     i8Ll5441:
  3478                           	opt stack 17
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;MOTOR.c: 74: {
  3482                           ;MOTOR.c: 75: LATC |= 0x04;
  3483  000D14  848B               	bsf	3979,2,c	;volatile
  3484  000D16  D001               	goto	iL54
  3485  000D18                     i8Ll5443:
  3486                           	opt stack 17
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;MOTOR.c: 77: else
  3490                           ;MOTOR.c: 78: {
  3491                           ;MOTOR.c: 79: LATC &= ~0x04;
  3492  000D18  948B               	bcf	3979,2,c	;volatile
  3493  000D1A                     i8Ll510:
  3494                           	opt stack 0
  3495  000D1A                     iL54:
  3496                           
  3497                           ;MOTOR.c: 110: MSC_DelayMS(400);
  3498  000D1A  0E90               	movlw	144
  3499  000D1C  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  3500  000D1E  0E01               	movlw	1
  3501  000D20  6FBA               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  3502  000D22  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  3503  000D24  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  3504  000D26  ECC5  F009         	call	_MSC_DelayMS	;wreg free
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;MOTOR.c: 111: DC_Motor = 1;
  3508  000D2A  0E01               	movlw	1
  3509  000D2C  6FC5               	movwf	_DC_Motor& (0+255),b
  3510                           
  3511                           ;MOTOR.c: 112: }
  3512  000D2E  D01B               	goto	l517
  3513  000D30                     l6901:
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;MOTOR.c: 113: else
  3517                           ;MOTOR.c: 114: {
  3518                           ;MOTOR.c: 115: MTR_IN1(1);
  3519  000D30  0E01               	movlw	1
  3520  000D32                     i9L__ptext12:
  3521                           	opt stack 0
  3522  000D32                     i9L_MTR_IN1:
  3523                           	opt stack 17
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;incstack = 0
  3527                           ;MTR_IN1@state stored from wreg
  3528  000D32  6FB5               	movwf	MTR_IN1@state& (0+255),b
  3529  000D34                     i9Ll5433:
  3530                           	opt stack 17
  3531                           
  3532                           ;MOTOR.c: 56: if(state)
  3533  000D34  0100               	movlb	0	; () banked
  3534  000D36  51B5               	movf	MTR_IN1@state& (0+255),w,b
  3535  000D38  B4D8               	btfsc	status,2,c
  3536  000D3A                     i9Lu5241:
  3537                           	opt stack 0
  3538  000D3A  D002               	goto	i9Ll5437
  3539  000D3C                     i9Lu5240:
  3540                           	opt stack 0
  3541  000D3C                     i9Ll5435:
  3542                           	opt stack 17
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;MOTOR.c: 57: {
  3546                           ;MOTOR.c: 58: LATB |= 0x08;
  3547  000D3C  868A               	bsf	3978,3,c	;volatile
  3548  000D3E  D001               	goto	iL64
  3549  000D40                     i9Ll5437:
  3550                           	opt stack 17
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;MOTOR.c: 60: else
  3554                           ;MOTOR.c: 61: {
  3555                           ;MOTOR.c: 62: LATB &= ~0x08;
  3556  000D40  968A               	bcf	3978,3,c	;volatile
  3557  000D42                     i9Ll505:
  3558                           	opt stack 0
  3559  000D42                     iL64:
  3560                           
  3561                           ;MOTOR.c: 116: MTR_IN2(0);
  3562  000D42  0E00               	movlw	0
  3563  000D44                     i10L__ptext11:
  3564                           	opt stack 0
  3565  000D44                     i10L_MTR_IN2:
  3566                           	opt stack 17
  3567                           
  3568                           ; BSR set to: 0
  3569                           ;incstack = 0
  3570                           ;MTR_IN2@state stored from wreg
  3571  000D44  6FB5               	movwf	MTR_IN2@state& (0+255),b
  3572  000D46                     i10Ll5439:
  3573                           	opt stack 17
  3574                           
  3575                           ;MOTOR.c: 73: if(state)
  3576  000D46  0100               	movlb	0	; () banked
  3577  000D48  51B5               	movf	MTR_IN2@state& (0+255),w,b
  3578  000D4A  B4D8               	btfsc	status,2,c
  3579  000D4C                     i10Lu5251:
  3580                           	opt stack 0
  3581  000D4C  D002               	goto	i10Ll5443
  3582  000D4E                     i10Lu5250:
  3583                           	opt stack 0
  3584  000D4E                     i10Ll5441:
  3585                           	opt stack 17
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;MOTOR.c: 74: {
  3589                           ;MOTOR.c: 75: LATC |= 0x04;
  3590  000D4E  848B               	bsf	3979,2,c	;volatile
  3591  000D50  D001               	goto	iL74
  3592  000D52                     i10Ll5443:
  3593                           	opt stack 17
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;MOTOR.c: 77: else
  3597                           ;MOTOR.c: 78: {
  3598                           ;MOTOR.c: 79: LATC &= ~0x04;
  3599  000D52  948B               	bcf	3979,2,c	;volatile
  3600  000D54                     i10Ll510:
  3601                           	opt stack 0
  3602  000D54                     iL74:
  3603                           
  3604                           ;MOTOR.c: 117: MSC_DelayMS(400);
  3605  000D54  0E90               	movlw	144
  3606  000D56  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  3607  000D58  0E01               	movlw	1
  3608  000D5A  6FBA               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  3609  000D5C  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  3610  000D5E  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  3611  000D60  ECC5  F009         	call	_MSC_DelayMS	;wreg free
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;MOTOR.c: 118: DC_Motor = 0;
  3615  000D64  6BC5               	clrf	_DC_Motor& (0+255),b
  3616  000D66                     l517:
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;MOTOR.c: 119: }
  3620                           ;MOTOR.c: 120: MTR_IN1(0);
  3621  000D66  0E00               	movlw	0
  3622  000D68                     i11L__ptext12:
  3623                           	opt stack 0
  3624  000D68                     i11L_MTR_IN1:
  3625                           	opt stack 17
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;incstack = 0
  3629                           ;MTR_IN1@state stored from wreg
  3630  000D68  6FB5               	movwf	MTR_IN1@state& (0+255),b
  3631  000D6A                     i11Ll5433:
  3632                           	opt stack 17
  3633                           
  3634                           ;MOTOR.c: 56: if(state)
  3635  000D6A  0100               	movlb	0	; () banked
  3636  000D6C  51B5               	movf	MTR_IN1@state& (0+255),w,b
  3637  000D6E  B4D8               	btfsc	status,2,c
  3638  000D70                     i11Lu5241:
  3639                           	opt stack 0
  3640  000D70  D002               	goto	i11Ll5437
  3641  000D72                     i11Lu5240:
  3642                           	opt stack 0
  3643  000D72                     i11Ll5435:
  3644                           	opt stack 17
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;MOTOR.c: 57: {
  3648                           ;MOTOR.c: 58: LATB |= 0x08;
  3649  000D72  868A               	bsf	3978,3,c	;volatile
  3650  000D74  D001               	goto	iL84
  3651  000D76                     i11Ll5437:
  3652                           	opt stack 17
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;MOTOR.c: 60: else
  3656                           ;MOTOR.c: 61: {
  3657                           ;MOTOR.c: 62: LATB &= ~0x08;
  3658  000D76  968A               	bcf	3978,3,c	;volatile
  3659  000D78                     i11Ll505:
  3660                           	opt stack 0
  3661  000D78                     iL84:
  3662                           
  3663                           ;MOTOR.c: 121: MTR_IN2(0);
  3664  000D78  0E00               	movlw	0
  3665  000D7A                     i12L__ptext11:
  3666                           	opt stack 0
  3667  000D7A                     i12L_MTR_IN2:
  3668                           	opt stack 17
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;incstack = 0
  3672                           ;MTR_IN2@state stored from wreg
  3673  000D7A  6FB5               	movwf	MTR_IN2@state& (0+255),b
  3674  000D7C                     i12Ll5439:
  3675                           	opt stack 17
  3676                           
  3677                           ;MOTOR.c: 73: if(state)
  3678  000D7C  0100               	movlb	0	; () banked
  3679  000D7E  51B5               	movf	MTR_IN2@state& (0+255),w,b
  3680  000D80  B4D8               	btfsc	status,2,c
  3681  000D82                     i12Lu5251:
  3682                           	opt stack 0
  3683  000D82  D002               	goto	i12Ll5443
  3684  000D84                     i12Lu5250:
  3685                           	opt stack 0
  3686  000D84                     i12Ll5441:
  3687                           	opt stack 17
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;MOTOR.c: 74: {
  3691                           ;MOTOR.c: 75: LATC |= 0x04;
  3692  000D84  848B               	bsf	3979,2,c	;volatile
  3693  000D86  0012               	return	
  3694  000D88                     i12Ll5443:
  3695                           	opt stack 17
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;MOTOR.c: 77: else
  3699                           ;MOTOR.c: 78: {
  3700                           ;MOTOR.c: 79: LATC &= ~0x04;
  3701  000D88  948B               	bcf	3979,2,c	;volatile
  3702  000D8A                     i12Ll510:
  3703                           	opt stack 0
  3704  000D8A  0012               	return	
  3705  000D8C                     __end_of_MTR_Rotate:
  3706                           	opt stack 0
  3707                           tblptru	equ	0xFF8
  3708                           tblptrh	equ	0xFF7
  3709                           tblptrl	equ	0xFF6
  3710                           tablat	equ	0xFF5
  3711                           prodh	equ	0xFF4
  3712                           prodl	equ	0xFF3
  3713                           intcon	equ	0xFF2
  3714                           intcon3	equ	0xFF0
  3715                           postinc0	equ	0xFEE
  3716                           wreg	equ	0xFE8
  3717                           postdec1	equ	0xFE5
  3718                           fsr1l	equ	0xFE1
  3719                           status	equ	0xFD8
  3720                           
  3721 ;; *************** function _MTR_IN2 *****************
  3722 ;; Defined at:
  3723 ;;		line 71 in file "MOTOR.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;  state           1    wreg     unsigned char 
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;  state           1   53[BANK0 ] unsigned char 
  3728 ;; Return value:  Size  Location     Type
  3729 ;;		None               void
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0
  3732 ;; Tracked objects:
  3733 ;;		On entry : F/0
  3734 ;;		On exit  : F/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3737 ;;      Params:         0       0       0       0       0
  3738 ;;      Locals:         0       1       0       0       0
  3739 ;;      Temps:          0       0       0       0       0
  3740 ;;      Totals:         0       1       0       0       0
  3741 ;;Total ram usage:        1 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:   12
  3744 ;; This function calls:
  3745 ;;		Nothing
  3746 ;; This function is called by:
  3747 ;;		_MTR_Rotate
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text11
  3752  000000                     __ptext11:
  3753                           	opt stack 0
  3754  000000                     _MTR_IN2:
  3755                           	opt stack 0
  3756  000000                     __end_of_MTR_IN2:
  3757                           	opt stack 0
  3758                           tblptru	equ	0xFF8
  3759                           tblptrh	equ	0xFF7
  3760                           tblptrl	equ	0xFF6
  3761                           tablat	equ	0xFF5
  3762                           prodh	equ	0xFF4
  3763                           prodl	equ	0xFF3
  3764                           intcon	equ	0xFF2
  3765                           intcon3	equ	0xFF0
  3766                           postinc0	equ	0xFEE
  3767                           wreg	equ	0xFE8
  3768                           postdec1	equ	0xFE5
  3769                           fsr1l	equ	0xFE1
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _MTR_IN1 *****************
  3773 ;; Defined at:
  3774 ;;		line 54 in file "MOTOR.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  state           1    wreg     unsigned char 
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;  state           1   53[BANK0 ] unsigned char 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;		None               void
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0
  3783 ;; Tracked objects:
  3784 ;;		On entry : F/0
  3785 ;;		On exit  : F/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3788 ;;      Params:         0       0       0       0       0
  3789 ;;      Locals:         0       1       0       0       0
  3790 ;;      Temps:          0       0       0       0       0
  3791 ;;      Totals:         0       1       0       0       0
  3792 ;;Total ram usage:        1 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:   12
  3795 ;; This function calls:
  3796 ;;		Nothing
  3797 ;; This function is called by:
  3798 ;;		_MTR_Rotate
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text12
  3803  000000                     __ptext12:
  3804                           	opt stack 0
  3805  000000                     _MTR_IN1:
  3806                           	opt stack 0
  3807  000000                     __end_of_MTR_IN1:
  3808                           	opt stack 0
  3809                           tblptru	equ	0xFF8
  3810                           tblptrh	equ	0xFF7
  3811                           tblptrl	equ	0xFF6
  3812                           tablat	equ	0xFF5
  3813                           prodh	equ	0xFF4
  3814                           prodl	equ	0xFF3
  3815                           intcon	equ	0xFF2
  3816                           intcon3	equ	0xFF0
  3817                           postinc0	equ	0xFEE
  3818                           wreg	equ	0xFE8
  3819                           postdec1	equ	0xFE5
  3820                           fsr1l	equ	0xFE1
  3821                           status	equ	0xFD8
  3822                           
  3823 ;; *************** function _MSC_BlinkLED *****************
  3824 ;; Defined at:
  3825 ;;		line 173 in file "MISC.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;  blink           2    4[BANK1 ] unsigned int 
  3828 ;;  speed           2    6[BANK1 ] unsigned int 
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;  i               2    8[BANK1 ] unsigned int 
  3831 ;; Return value:  Size  Location     Type
  3832 ;;		None               void
  3833 ;; Registers used:
  3834 ;;		wreg, status,2, status,0, cstack
  3835 ;; Tracked objects:
  3836 ;;		On entry : F/1
  3837 ;;		On exit  : F/1
  3838 ;;		Unchanged: 0/0
  3839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3840 ;;      Params:         0       0       4       0       0
  3841 ;;      Locals:         0       0       2       0       0
  3842 ;;      Temps:          0       2       0       0       0
  3843 ;;      Totals:         0       2       6       0       0
  3844 ;;Total ram usage:        8 bytes
  3845 ;; Hardware stack levels used:    1
  3846 ;; Hardware stack levels required when called:   14
  3847 ;; This function calls:
  3848 ;;		_MSC_DelayMS
  3849 ;; This function is called by:
  3850 ;;		_main
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           	psect	text13
  3855  0013D8                     __ptext13:
  3856                           	opt stack 0
  3857  0013D8                     _MSC_BlinkLED:
  3858                           	opt stack 16
  3859                           
  3860                           ; BSR set to: 1
  3861                           ;MISC.c: 175: unsigned int i;
  3862                           ;MISC.c: 177: for(i=0;i<(blink<<1);i++)
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;incstack = 0
  3866  0013D8  6B8F               	clrf	MSC_BlinkLED@i& (0+255),b
  3867  0013DA  6B90               	clrf	(MSC_BlinkLED@i+1)& (0+255),b
  3868  0013DC  D00E               	goto	l6893
  3869  0013DE                     l6887:
  3870                           
  3871                           ; BSR set to: 1
  3872                           ;MISC.c: 178: {
  3873                           ;MISC.c: 179: MSC_DelayMS(speed);
  3874  0013DE  C18D  F0B9         	movff	MSC_BlinkLED@speed,MSC_DelayMS@US
  3875  0013E2  C18E  F0BA         	movff	MSC_BlinkLED@speed+1,MSC_DelayMS@US+1
  3876  0013E6  0100               	movlb	0	; () banked
  3877  0013E8  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  3878  0013EA  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  3879  0013EC  ECC5  F009         	call	_MSC_DelayMS	;wreg free
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;MISC.c: 180: (LATC ^= 0x10);
  3883  0013F0  0E10               	movlw	16
  3884  0013F2  1A8B               	xorwf	3979,f,c	;volatile
  3885                           
  3886                           ; BSR set to: 0
  3887  0013F4  0101               	movlb	1	; () banked
  3888  0013F6  4B8F               	infsnz	MSC_BlinkLED@i& (0+255),f,b
  3889  0013F8  2B90               	incf	(MSC_BlinkLED@i+1)& (0+255),f,b
  3890  0013FA                     l6893:
  3891                           
  3892                           ; BSR set to: 1
  3893  0013FA  C18B  F0BE         	movff	MSC_BlinkLED@blink,??_MSC_BlinkLED
  3894  0013FE  C18C  F0BF         	movff	MSC_BlinkLED@blink+1,??_MSC_BlinkLED+1
  3895  001402  90D8               	bcf	status,0,c
  3896  001404  0100               	movlb	0	; () banked
  3897  001406  37BE               	rlcf	??_MSC_BlinkLED& (0+255),f,b
  3898  001408  37BF               	rlcf	(??_MSC_BlinkLED+1)& (0+255),f,b
  3899  00140A  51BE               	movf	??_MSC_BlinkLED& (0+255),w,b
  3900  00140C  0101               	movlb	1	; () banked
  3901  00140E  5D8F               	subwf	MSC_BlinkLED@i& (0+255),w,b
  3902  001410  0100               	movlb	0	; () banked
  3903  001412  51BF               	movf	(??_MSC_BlinkLED+1)& (0+255),w,b
  3904  001414  0101               	movlb	1	; () banked
  3905  001416  5990               	subwfb	(MSC_BlinkLED@i+1)& (0+255),w,b
  3906  001418  E3E2               	bnc	l6887
  3907                           
  3908                           ; BSR set to: 1
  3909  00141A  0012               	return		;funcret
  3910  00141C                     __end_of_MSC_BlinkLED:
  3911                           	opt stack 0
  3912                           tblptru	equ	0xFF8
  3913                           tblptrh	equ	0xFF7
  3914                           tblptrl	equ	0xFF6
  3915                           tablat	equ	0xFF5
  3916                           prodh	equ	0xFF4
  3917                           prodl	equ	0xFF3
  3918                           intcon	equ	0xFF2
  3919                           intcon3	equ	0xFF0
  3920                           postinc0	equ	0xFEE
  3921                           wreg	equ	0xFE8
  3922                           postdec1	equ	0xFE5
  3923                           fsr1l	equ	0xFE1
  3924                           status	equ	0xFD8
  3925                           
  3926 ;; *************** function _MSC_DelayMS *****************
  3927 ;; Defined at:
  3928 ;;		line 47 in file "MISC.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;  US              4   57[BANK0 ] long 
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;  i               4    0[BANK1 ] long 
  3933 ;; Return value:  Size  Location     Type
  3934 ;;		None               void
  3935 ;; Registers used:
  3936 ;;		wreg, status,2, status,0, cstack
  3937 ;; Tracked objects:
  3938 ;;		On entry : F/0
  3939 ;;		On exit  : F/0
  3940 ;;		Unchanged: 0/0
  3941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3942 ;;      Params:         0       4       0       0       0
  3943 ;;      Locals:         0       0       4       0       0
  3944 ;;      Temps:          0       1       0       0       0
  3945 ;;      Totals:         0       5       4       0       0
  3946 ;;Total ram usage:        9 bytes
  3947 ;; Hardware stack levels used:    1
  3948 ;; Hardware stack levels required when called:   13
  3949 ;; This function calls:
  3950 ;;		_MSC_DelayNOP
  3951 ;; This function is called by:
  3952 ;;		_main
  3953 ;;		_MTR_Rotate
  3954 ;;		_MSC_BlinkLED
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           	psect	text14
  3959  00138A                     __ptext14:
  3960                           	opt stack 0
  3961  00138A                     _MSC_DelayMS:
  3962                           	opt stack 16
  3963                           
  3964                           ; BSR set to: 0
  3965                           ;MISC.c: 49: long i;
  3966                           ;MISC.c: 51: for(i=0; i<US; i++)
  3967                           
  3968                           ; BSR set to: 1
  3969                           ;incstack = 0
  3970  00138A  0101               	movlb	1	; () banked
  3971  00138C  6B87               	clrf	MSC_DelayMS@i& (0+255),b
  3972  00138E  6B88               	clrf	(MSC_DelayMS@i+1)& (0+255),b
  3973  001390  6B89               	clrf	(MSC_DelayMS@i+2)& (0+255),b
  3974  001392  6B8A               	clrf	(MSC_DelayMS@i+3)& (0+255),b
  3975  001394  D00C               	goto	l6745
  3976  001396                     l6741:
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;MISC.c: 52: {
  3980                           ;MISC.c: 53: MSC_DelayNOP(1000);
  3981  001396  0E03               	movlw	3
  3982  001398  6FB6               	movwf	(MSC_DelayNOP@NOPs+1)& (0+255),b
  3983  00139A  0EE8               	movlw	232
  3984  00139C  6FB5               	movwf	MSC_DelayNOP@NOPs& (0+255),b
  3985  00139E  EC8E  F00C         	call	_MSC_DelayNOP	;wreg free
  3986                           
  3987                           ; BSR set to: 0
  3988  0013A2  0101               	movlb	1	; () banked
  3989  0013A4  2B87               	incf	MSC_DelayMS@i& (0+255),f,b
  3990  0013A6  0E00               	movlw	0
  3991  0013A8  2388               	addwfc	(MSC_DelayMS@i+1)& (0+255),f,b
  3992  0013AA  2389               	addwfc	(MSC_DelayMS@i+2)& (0+255),f,b
  3993  0013AC  238A               	addwfc	(MSC_DelayMS@i+3)& (0+255),f,b
  3994  0013AE                     l6745:
  3995                           
  3996                           ; BSR set to: 1
  3997  0013AE  0100               	movlb	0	; () banked
  3998  0013B0  51B9               	movf	MSC_DelayMS@US& (0+255),w,b
  3999  0013B2  0101               	movlb	1	; () banked
  4000  0013B4  5D87               	subwf	MSC_DelayMS@i& (0+255),w,b
  4001  0013B6  0100               	movlb	0	; () banked
  4002  0013B8  51BA               	movf	(MSC_DelayMS@US+1)& (0+255),w,b
  4003  0013BA  0101               	movlb	1	; () banked
  4004  0013BC  5988               	subwfb	(MSC_DelayMS@i+1)& (0+255),w,b
  4005  0013BE  0100               	movlb	0	; () banked
  4006  0013C0  51BB               	movf	(MSC_DelayMS@US+2)& (0+255),w,b
  4007  0013C2  0101               	movlb	1	; () banked
  4008  0013C4  5989               	subwfb	(MSC_DelayMS@i+2)& (0+255),w,b
  4009  0013C6  518A               	movf	(MSC_DelayMS@i+3)& (0+255),w,b
  4010  0013C8  0A80               	xorlw	128
  4011  0013CA  0100               	movlb	0	; () banked
  4012  0013CC  6FBD               	movwf	??_MSC_DelayMS& (0+255),b
  4013  0013CE  51BC               	movf	(MSC_DelayMS@US+3)& (0+255),w,b
  4014  0013D0  0A80               	xorlw	128
  4015  0013D2  59BD               	subwfb	??_MSC_DelayMS& (0+255),w,b
  4016  0013D4  E3E0               	bnc	l6741
  4017                           
  4018                           ; BSR set to: 0
  4019  0013D6  0012               	return		;funcret
  4020  0013D8                     __end_of_MSC_DelayMS:
  4021                           	opt stack 0
  4022                           tblptru	equ	0xFF8
  4023                           tblptrh	equ	0xFF7
  4024                           tblptrl	equ	0xFF6
  4025                           tablat	equ	0xFF5
  4026                           prodh	equ	0xFF4
  4027                           prodl	equ	0xFF3
  4028                           intcon	equ	0xFF2
  4029                           intcon3	equ	0xFF0
  4030                           postinc0	equ	0xFEE
  4031                           wreg	equ	0xFE8
  4032                           postdec1	equ	0xFE5
  4033                           fsr1l	equ	0xFE1
  4034                           status	equ	0xFD8
  4035                           
  4036 ;; *************** function _MSC_DelayNOP *****************
  4037 ;; Defined at:
  4038 ;;		line 62 in file "MISC.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;  NOPs            2   53[BANK0 ] unsigned int 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;  i               2   55[BANK0 ] unsigned int 
  4043 ;; Return value:  Size  Location     Type
  4044 ;;		None               void
  4045 ;; Registers used:
  4046 ;;		wreg, status,2, status,0
  4047 ;; Tracked objects:
  4048 ;;		On entry : F/0
  4049 ;;		On exit  : F/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4052 ;;      Params:         0       2       0       0       0
  4053 ;;      Locals:         0       2       0       0       0
  4054 ;;      Temps:          0       0       0       0       0
  4055 ;;      Totals:         0       4       0       0       0
  4056 ;;Total ram usage:        4 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; Hardware stack levels required when called:   12
  4059 ;; This function calls:
  4060 ;;		Nothing
  4061 ;; This function is called by:
  4062 ;;		_MSC_DelayMS
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           	psect	text15
  4067  00191C                     __ptext15:
  4068                           	opt stack 0
  4069  00191C                     _MSC_DelayNOP:
  4070                           	opt stack 16
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;MISC.c: 64: unsigned int i;
  4074                           ;MISC.c: 65: for(i=0; i<NOPs; i++)
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;incstack = 0
  4078  00191C  6BB7               	clrf	MSC_DelayNOP@i& (0+255),b
  4079  00191E  6BB8               	clrf	(MSC_DelayNOP@i+1)& (0+255),b
  4080  001920  D004               	goto	l6737
  4081  001922                     l666:
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;MISC.c: 66: {
  4085                           ;MISC.c: 67: __nop();
  4086  001922  F000               	nop	
  4087  001924  0100               	movlb	0	; () banked
  4088  001926  4BB7               	infsnz	MSC_DelayNOP@i& (0+255),f,b
  4089  001928  2BB8               	incf	(MSC_DelayNOP@i+1)& (0+255),f,b
  4090  00192A                     l6737:
  4091                           
  4092                           ; BSR set to: 0
  4093  00192A  51B5               	movf	MSC_DelayNOP@NOPs& (0+255),w,b
  4094  00192C  5DB7               	subwf	MSC_DelayNOP@i& (0+255),w,b
  4095  00192E  51B6               	movf	(MSC_DelayNOP@NOPs+1)& (0+255),w,b
  4096  001930  59B8               	subwfb	(MSC_DelayNOP@i+1)& (0+255),w,b
  4097  001932  E3F7               	bnc	l666
  4098                           
  4099                           ; BSR set to: 0
  4100  001934  0012               	return		;funcret
  4101  001936                     __end_of_MSC_DelayNOP:
  4102                           	opt stack 0
  4103                           tblptru	equ	0xFF8
  4104                           tblptrh	equ	0xFF7
  4105                           tblptrl	equ	0xFF6
  4106                           tablat	equ	0xFF5
  4107                           prodh	equ	0xFF4
  4108                           prodl	equ	0xFF3
  4109                           intcon	equ	0xFF2
  4110                           intcon3	equ	0xFF0
  4111                           postinc0	equ	0xFEE
  4112                           wreg	equ	0xFE8
  4113                           postdec1	equ	0xFE5
  4114                           fsr1l	equ	0xFE1
  4115                           status	equ	0xFD8
  4116                           
  4117 ;; *************** function _Init_System *****************
  4118 ;; Defined at:
  4119 ;;		line 153 in file "USER.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;		None
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;		None
  4124 ;; Return value:  Size  Location     Type
  4125 ;;		None               void
  4126 ;; Registers used:
  4127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : F/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4133 ;;      Params:         0       0       0       0       0
  4134 ;;      Locals:         0       0       0       0       0
  4135 ;;      Temps:          0       0       0       0       0
  4136 ;;      Totals:         0       0       0       0       0
  4137 ;;Total ram usage:        0 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:   17
  4140 ;; This function calls:
  4141 ;;		_BUT_ReadButton
  4142 ;;		_IR_ReadReceiver
  4143 ;;		_InitADC
  4144 ;;		_InitButton
  4145 ;;		_InitFlash
  4146 ;;		_InitIR
  4147 ;;		_InitLDO
  4148 ;;		_InitMOTOR
  4149 ;;		_InitRF
  4150 ;;		_InitTimers
  4151 ;; This function is called by:
  4152 ;;		_main
  4153 ;; This function uses a non-reentrant model
  4154 ;;
  4155                           
  4156                           	psect	text16
  4157  001538                     __ptext16:
  4158                           	opt stack 0
  4159  001538                     _Init_System:
  4160                           	opt stack 13
  4161                           
  4162                           ;USER.c: 155: InitTimers();
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;incstack = 0
  4166  001538  ECBC  F00D         	call	_InitTimers	;wreg free
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;USER.c: 156: InitRF();
  4170  00153C  ECB5  F00A         	call	_InitRF	;wreg free
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;USER.c: 157: InitButton();
  4174  001540  ECC2  F00D         	call	_InitButton	;wreg free
  4175                           
  4176                           ;USER.c: 158: InitIR();
  4177  001544  ECEB  F00C         	call	_InitIR	;wreg free
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;USER.c: 159: InitLDO();
  4181  001548  ECCC  F00C         	call	_InitLDO	;wreg free
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;USER.c: 160: InitMOTOR();
  4185  00154C  ECE5  F00D         	call	_InitMOTOR	;wreg free
  4186                           
  4187                           ;USER.c: 161: InitFlash();
  4188  001550  ECE7  F00D         	call	_InitFlash	;wreg free
  4189                           
  4190                           ;USER.c: 162: InitADC();
  4191  001554  ECA7  F00B         	call	_InitADC	;wreg free
  4192                           
  4193                           ; BSR set to: 0
  4194                           ;USER.c: 164: BUT_ReadButton();
  4195  001558  ECDD  F00B         	call	_BUT_ReadButton	;wreg free
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;USER.c: 165: IR_ReadReceiver();
  4199  00155C  ECEE  F00B         	call	_IR_ReadReceiver	;wreg free
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;USER.c: 166: INTCONbits.RBIF = 0;
  4203  001560  90F2               	bcf	intcon,0,c	;volatile
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;USER.c: 169: RCONbits.IPEN = 1;
  4207  001562  8ED0               	bsf	4048,7,c	;volatile
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;USER.c: 170: INTCONbits.GIE = 1;
  4211  001564  8EF2               	bsf	intcon,7,c	;volatile
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;USER.c: 171: INTCONbits.PEIE = 1;
  4215  001566  8CF2               	bsf	intcon,6,c	;volatile
  4216                           
  4217                           ; BSR set to: 0
  4218  001568  0012               	return		;funcret
  4219  00156A                     __end_of_Init_System:
  4220                           	opt stack 0
  4221                           tblptru	equ	0xFF8
  4222                           tblptrh	equ	0xFF7
  4223                           tblptrl	equ	0xFF6
  4224                           tablat	equ	0xFF5
  4225                           prodh	equ	0xFF4
  4226                           prodl	equ	0xFF3
  4227                           intcon	equ	0xFF2
  4228                           intcon3	equ	0xFF0
  4229                           postinc0	equ	0xFEE
  4230                           wreg	equ	0xFE8
  4231                           postdec1	equ	0xFE5
  4232                           fsr1l	equ	0xFE1
  4233                           status	equ	0xFD8
  4234                           
  4235 ;; *************** function _InitTimers *****************
  4236 ;; Defined at:
  4237 ;;		line 59 in file "TIMERS.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;		None
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;		None
  4242 ;; Return value:  Size  Location     Type
  4243 ;;		None               void
  4244 ;; Registers used:
  4245 ;;		wreg, status,2, status,0, cstack
  4246 ;; Tracked objects:
  4247 ;;		On entry : 0/0
  4248 ;;		On exit  : F/0
  4249 ;;		Unchanged: 0/0
  4250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4251 ;;      Params:         0       0       0       0       0
  4252 ;;      Locals:         0       0       0       0       0
  4253 ;;      Temps:          0       0       0       0       0
  4254 ;;      Totals:         0       0       0       0       0
  4255 ;;Total ram usage:        0 bytes
  4256 ;; Hardware stack levels used:    1
  4257 ;; Hardware stack levels required when called:   16
  4258 ;; This function calls:
  4259 ;;		_InitTimer0
  4260 ;;		_InitTimer1
  4261 ;;		_InitTimer2
  4262 ;; This function is called by:
  4263 ;;		_Init_System
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           	psect	text17
  4268  001B78                     __ptext17:
  4269                           	opt stack 0
  4270  001B78                     _InitTimers:
  4271                           	opt stack 13
  4272                           
  4273                           ;TIMERS.c: 61: InitTimer0();
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;incstack = 0
  4277  001B78  EC20  F00C         	call	_InitTimer0	;wreg free
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;TIMERS.c: 62: InitTimer1();
  4281  001B7C  EC9B  F00C         	call	_InitTimer1	;wreg free
  4282                           
  4283                           ; BSR set to: 0
  4284                           ;TIMERS.c: 63: InitTimer2();
  4285  001B80  EFA8  F00C         	goto	_InitTimer2	;wreg free
  4286  001B84                     __end_of_InitTimers:
  4287                           	opt stack 0
  4288                           tblptru	equ	0xFF8
  4289                           tblptrh	equ	0xFF7
  4290                           tblptrl	equ	0xFF6
  4291                           tablat	equ	0xFF5
  4292                           prodh	equ	0xFF4
  4293                           prodl	equ	0xFF3
  4294                           intcon	equ	0xFF2
  4295                           intcon3	equ	0xFF0
  4296                           postinc0	equ	0xFEE
  4297                           wreg	equ	0xFE8
  4298                           postdec1	equ	0xFE5
  4299                           fsr1l	equ	0xFE1
  4300                           status	equ	0xFD8
  4301                           
  4302 ;; *************** function _InitTimer2 *****************
  4303 ;; Defined at:
  4304 ;;		line 103 in file "TIMERS.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;		None
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;		None
  4309 ;; Return value:  Size  Location     Type
  4310 ;;		None               void
  4311 ;; Registers used:
  4312 ;;		wreg, status,2, cstack
  4313 ;; Tracked objects:
  4314 ;;		On entry : F/0
  4315 ;;		On exit  : F/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4318 ;;      Params:         0       0       0       0       0
  4319 ;;      Locals:         0       0       0       0       0
  4320 ;;      Temps:          0       0       0       0       0
  4321 ;;      Totals:         0       0       0       0       0
  4322 ;;Total ram usage:        0 bytes
  4323 ;; Hardware stack levels used:    1
  4324 ;; Hardware stack levels required when called:   13
  4325 ;; This function calls:
  4326 ;;		_TMR_Timer2
  4327 ;;		_TMR_Timer2Int
  4328 ;; This function is called by:
  4329 ;;		_InitTimers
  4330 ;; This function uses a non-reentrant model
  4331 ;;
  4332                           
  4333                           	psect	text18
  4334  001950                     __ptext18:
  4335                           	opt stack 0
  4336  001950                     _InitTimer2:
  4337                           	opt stack 15
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;TIMERS.c: 105: TMR_Timer2(0);
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;incstack = 0
  4344  001950  0E00               	movlw	0
  4345  001952  EC29  F00D         	call	_TMR_Timer2
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;TIMERS.c: 106: T2CONbits.TOUTPS = 0b1111;
  4349  001956  0E78               	movlw	120
  4350  001958  12CA               	iorwf	4042,f,c	;volatile
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;TIMERS.c: 107: T2CONbits.T2CKPS = 0b11;
  4354  00195A  0E03               	movlw	3
  4355  00195C  12CA               	iorwf	4042,f,c	;volatile
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;TIMERS.c: 108: IPR1bits.TMR2IP = 0;
  4359  00195E  929F               	bcf	3999,1,c	;volatile
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;TIMERS.c: 109: PR2 = 0xFF;
  4363  001960  68CB               	setf	4043,c	;volatile
  4364                           
  4365                           ;TIMERS.c: 110: TMR_Timer2Int(1);
  4366  001962  0E01               	movlw	1
  4367  001964  EF21  F00D         	goto	_TMR_Timer2Int
  4368  001968                     __end_of_InitTimer2:
  4369                           	opt stack 0
  4370                           tblptru	equ	0xFF8
  4371                           tblptrh	equ	0xFF7
  4372                           tblptrl	equ	0xFF6
  4373                           tablat	equ	0xFF5
  4374                           prodh	equ	0xFF4
  4375                           prodl	equ	0xFF3
  4376                           intcon	equ	0xFF2
  4377                           intcon3	equ	0xFF0
  4378                           postinc0	equ	0xFEE
  4379                           wreg	equ	0xFE8
  4380                           postdec1	equ	0xFE5
  4381                           fsr1l	equ	0xFE1
  4382                           status	equ	0xFD8
  4383                           
  4384 ;; *************** function _TMR_Timer2Int *****************
  4385 ;; Defined at:
  4386 ;;		line 370 in file "TIMERS.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;  state           1    wreg     unsigned char 
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;  state           1   53[BANK0 ] unsigned char 
  4391 ;; Return value:  Size  Location     Type
  4392 ;;		None               void
  4393 ;; Registers used:
  4394 ;;		wreg, status,2
  4395 ;; Tracked objects:
  4396 ;;		On entry : F/0
  4397 ;;		On exit  : F/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4400 ;;      Params:         0       0       0       0       0
  4401 ;;      Locals:         0       1       0       0       0
  4402 ;;      Temps:          0       0       0       0       0
  4403 ;;      Totals:         0       1       0       0       0
  4404 ;;Total ram usage:        1 bytes
  4405 ;; Hardware stack levels used:    1
  4406 ;; Hardware stack levels required when called:   12
  4407 ;; This function calls:
  4408 ;;		Nothing
  4409 ;; This function is called by:
  4410 ;;		_InitTimer2
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           	psect	text19
  4415  001A42                     __ptext19:
  4416                           	opt stack 0
  4417  001A42                     _TMR_Timer2Int:
  4418                           	opt stack 15
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;incstack = 0
  4422                           ;TMR_Timer2Int@state stored from wreg
  4423  001A42  6FB5               	movwf	TMR_Timer2Int@state& (0+255),b
  4424                           
  4425                           ;TIMERS.c: 372: if(state)
  4426  001A44  0100               	movlb	0	; () banked
  4427  001A46  51B5               	movf	TMR_Timer2Int@state& (0+255),w,b
  4428  001A48  E002               	bz	l883
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;TIMERS.c: 373: {
  4432                           ;TIMERS.c: 375: PIE1bits.TMR2IE = 1;
  4433  001A4A  829D               	bsf	3997,1,c	;volatile
  4434                           
  4435                           ;TIMERS.c: 376: }
  4436  001A4C  0012               	return	
  4437  001A4E                     l883:
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;TIMERS.c: 377: else
  4441                           ;TIMERS.c: 378: {
  4442                           ;TIMERS.c: 380: PIE1bits.TMR2IE = 0;
  4443  001A4E  929D               	bcf	3997,1,c	;volatile
  4444                           
  4445                           ; BSR set to: 0
  4446  001A50  0012               	return		;funcret
  4447  001A52                     __end_of_TMR_Timer2Int:
  4448                           	opt stack 0
  4449                           tblptru	equ	0xFF8
  4450                           tblptrh	equ	0xFF7
  4451                           tblptrl	equ	0xFF6
  4452                           tablat	equ	0xFF5
  4453                           prodh	equ	0xFF4
  4454                           prodl	equ	0xFF3
  4455                           intcon	equ	0xFF2
  4456                           intcon3	equ	0xFF0
  4457                           postinc0	equ	0xFEE
  4458                           wreg	equ	0xFE8
  4459                           postdec1	equ	0xFE5
  4460                           fsr1l	equ	0xFE1
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function _TMR_Timer2 *****************
  4464 ;; Defined at:
  4465 ;;		line 249 in file "TIMERS.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  state           1    wreg     unsigned char 
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;  state           1   53[BANK0 ] unsigned char 
  4470 ;; Return value:  Size  Location     Type
  4471 ;;		None               void
  4472 ;; Registers used:
  4473 ;;		wreg, status,2
  4474 ;; Tracked objects:
  4475 ;;		On entry : F/0
  4476 ;;		On exit  : F/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4479 ;;      Params:         0       0       0       0       0
  4480 ;;      Locals:         0       1       0       0       0
  4481 ;;      Temps:          0       0       0       0       0
  4482 ;;      Totals:         0       1       0       0       0
  4483 ;;Total ram usage:        1 bytes
  4484 ;; Hardware stack levels used:    1
  4485 ;; Hardware stack levels required when called:   12
  4486 ;; This function calls:
  4487 ;;		Nothing
  4488 ;; This function is called by:
  4489 ;;		_InitTimer2
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           	psect	text20
  4494  001A52                     __ptext20:
  4495                           	opt stack 0
  4496  001A52                     _TMR_Timer2:
  4497                           	opt stack 15
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;incstack = 0
  4501                           ;TMR_Timer2@state stored from wreg
  4502  001A52  6FB5               	movwf	TMR_Timer2@state& (0+255),b
  4503                           
  4504                           ;TIMERS.c: 251: if(state)
  4505  001A54  0100               	movlb	0	; () banked
  4506  001A56  51B5               	movf	TMR_Timer2@state& (0+255),w,b
  4507  001A58  E002               	bz	l853
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;TIMERS.c: 252: {
  4511                           ;TIMERS.c: 254: T2CONbits.TMR2ON = 1;
  4512  001A5A  84CA               	bsf	4042,2,c	;volatile
  4513                           
  4514                           ;TIMERS.c: 255: }
  4515  001A5C  0012               	return	
  4516  001A5E                     l853:
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;TIMERS.c: 256: else
  4520                           ;TIMERS.c: 257: {
  4521                           ;TIMERS.c: 259: T2CONbits.TMR2ON = 0;
  4522  001A5E  94CA               	bcf	4042,2,c	;volatile
  4523                           
  4524                           ; BSR set to: 0
  4525  001A60  0012               	return		;funcret
  4526  001A62                     __end_of_TMR_Timer2:
  4527                           	opt stack 0
  4528                           tblptru	equ	0xFF8
  4529                           tblptrh	equ	0xFF7
  4530                           tblptrl	equ	0xFF6
  4531                           tablat	equ	0xFF5
  4532                           prodh	equ	0xFF4
  4533                           prodl	equ	0xFF3
  4534                           intcon	equ	0xFF2
  4535                           intcon3	equ	0xFF0
  4536                           postinc0	equ	0xFEE
  4537                           wreg	equ	0xFE8
  4538                           postdec1	equ	0xFE5
  4539                           fsr1l	equ	0xFE1
  4540                           status	equ	0xFD8
  4541                           
  4542 ;; *************** function _InitTimer1 *****************
  4543 ;; Defined at:
  4544 ;;		line 88 in file "TIMERS.c"
  4545 ;; Parameters:    Size  Location     Type
  4546 ;;		None
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;		None
  4549 ;; Return value:  Size  Location     Type
  4550 ;;		None               void
  4551 ;; Registers used:
  4552 ;;		wreg, status,2, status,0, cstack
  4553 ;; Tracked objects:
  4554 ;;		On entry : F/0
  4555 ;;		On exit  : F/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4558 ;;      Params:         0       0       0       0       0
  4559 ;;      Locals:         0       0       0       0       0
  4560 ;;      Temps:          0       0       0       0       0
  4561 ;;      Totals:         0       0       0       0       0
  4562 ;;Total ram usage:        0 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:   15
  4565 ;; This function calls:
  4566 ;;		_TMR_ResetTimer1
  4567 ;;		_TMR_Timer1
  4568 ;;		_TMR_Timer1Function
  4569 ;;		_TMR_Timer1Int
  4570 ;; This function is called by:
  4571 ;;		_InitTimers
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text21
  4576  001936                     __ptext21:
  4577                           	opt stack 0
  4578  001936                     _InitTimer1:
  4579                           	opt stack 13
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;TIMERS.c: 90: TMR_Timer1(0);
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;incstack = 0
  4586  001936  0E00               	movlw	0
  4587  001938  EC39  F00D         	call	_TMR_Timer1
  4588                           
  4589                           ;TIMERS.c: 91: TMR_ResetTimer1();
  4590  00193C  EC10  F00C         	call	_TMR_ResetTimer1	;wreg free
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;TIMERS.c: 92: T1CONbits.RD16 = 1;
  4594  001940  8ECD               	bsf	4045,7,c	;volatile
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;TIMERS.c: 93: TMR_Timer1Function(16);
  4598  001942  0E10               	movlw	16
  4599  001944  EC2E  F00B         	call	_TMR_Timer1Function
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;TIMERS.c: 94: IPR1bits.TMR1IP = 0;
  4603  001948  909F               	bcf	3999,0,c	;volatile
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;TIMERS.c: 95: TMR_Timer1Int(1);
  4607  00194A  0E01               	movlw	1
  4608  00194C  EF31  F00D         	goto	_TMR_Timer1Int
  4609  001950                     __end_of_InitTimer1:
  4610                           	opt stack 0
  4611                           tblptru	equ	0xFF8
  4612                           tblptrh	equ	0xFF7
  4613                           tblptrl	equ	0xFF6
  4614                           tablat	equ	0xFF5
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           intcon	equ	0xFF2
  4618                           intcon3	equ	0xFF0
  4619                           postinc0	equ	0xFEE
  4620                           wreg	equ	0xFE8
  4621                           postdec1	equ	0xFE5
  4622                           fsr1l	equ	0xFE1
  4623                           status	equ	0xFD8
  4624                           
  4625 ;; *************** function _TMR_Timer1Int *****************
  4626 ;; Defined at:
  4627 ;;		line 351 in file "TIMERS.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;  state           1    wreg     unsigned char 
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  state           1   53[BANK0 ] unsigned char 
  4632 ;; Return value:  Size  Location     Type
  4633 ;;		None               void
  4634 ;; Registers used:
  4635 ;;		wreg, status,2
  4636 ;; Tracked objects:
  4637 ;;		On entry : F/0
  4638 ;;		On exit  : F/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4641 ;;      Params:         0       0       0       0       0
  4642 ;;      Locals:         0       1       0       0       0
  4643 ;;      Temps:          0       0       0       0       0
  4644 ;;      Totals:         0       1       0       0       0
  4645 ;;Total ram usage:        1 bytes
  4646 ;; Hardware stack levels used:    1
  4647 ;; Hardware stack levels required when called:   12
  4648 ;; This function calls:
  4649 ;;		Nothing
  4650 ;; This function is called by:
  4651 ;;		_InitTimer1
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text22
  4656  001A62                     __ptext22:
  4657                           	opt stack 0
  4658  001A62                     _TMR_Timer1Int:
  4659                           	opt stack 15
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;incstack = 0
  4663                           ;TMR_Timer1Int@state stored from wreg
  4664  001A62  6FB5               	movwf	TMR_Timer1Int@state& (0+255),b
  4665                           
  4666                           ;TIMERS.c: 353: if(state)
  4667  001A64  0100               	movlb	0	; () banked
  4668  001A66  51B5               	movf	TMR_Timer1Int@state& (0+255),w,b
  4669  001A68  E002               	bz	l878
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;TIMERS.c: 354: {
  4673                           ;TIMERS.c: 356: PIE1bits.TMR1IE = 1;
  4674  001A6A  809D               	bsf	3997,0,c	;volatile
  4675                           
  4676                           ;TIMERS.c: 357: }
  4677  001A6C  0012               	return	
  4678  001A6E                     l878:
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;TIMERS.c: 358: else
  4682                           ;TIMERS.c: 359: {
  4683                           ;TIMERS.c: 361: PIE1bits.TMR1IE = 0;
  4684  001A6E  909D               	bcf	3997,0,c	;volatile
  4685                           
  4686                           ; BSR set to: 0
  4687  001A70  0012               	return		;funcret
  4688  001A72                     __end_of_TMR_Timer1Int:
  4689                           	opt stack 0
  4690                           tblptru	equ	0xFF8
  4691                           tblptrh	equ	0xFF7
  4692                           tblptrl	equ	0xFF6
  4693                           tablat	equ	0xFF5
  4694                           prodh	equ	0xFF4
  4695                           prodl	equ	0xFF3
  4696                           intcon	equ	0xFF2
  4697                           intcon3	equ	0xFF0
  4698                           postinc0	equ	0xFEE
  4699                           wreg	equ	0xFE8
  4700                           postdec1	equ	0xFE5
  4701                           fsr1l	equ	0xFE1
  4702                           status	equ	0xFD8
  4703                           
  4704 ;; *************** function _TMR_Timer1Function *****************
  4705 ;; Defined at:
  4706 ;;		line 157 in file "TIMERS.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  mode            1    wreg     unsigned char 
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;  mode            1   55[BANK0 ] unsigned char 
  4711 ;; Return value:  Size  Location     Type
  4712 ;;		None               void
  4713 ;; Registers used:
  4714 ;;		wreg, status,2, status,0, cstack
  4715 ;; Tracked objects:
  4716 ;;		On entry : F/0
  4717 ;;		On exit  : F/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4720 ;;      Params:         0       0       0       0       0
  4721 ;;      Locals:         0       1       0       0       0
  4722 ;;      Temps:          0       0       0       0       0
  4723 ;;      Totals:         0       1       0       0       0
  4724 ;;Total ram usage:        1 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:   14
  4727 ;; This function calls:
  4728 ;;		_TMR_ResetTimer1
  4729 ;;		_TMR_Timer1
  4730 ;;		_TMR_Timer1Osc
  4731 ;; This function is called by:
  4732 ;;		_InitTimer1
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text23
  4737  00165C                     __ptext23:
  4738                           	opt stack 0
  4739  00165C                     _TMR_Timer1Function:
  4740                           	opt stack 13
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;incstack = 0
  4744                           ;TMR_Timer1Function@mode stored from wreg
  4745  00165C  6FB7               	movwf	TMR_Timer1Function@mode& (0+255),b
  4746                           
  4747                           ;TIMERS.c: 159: TMR_Timer1(0);
  4748  00165E  0E00               	movlw	0
  4749  001660  EC39  F00D         	call	_TMR_Timer1
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;TIMERS.c: 160: if(mode == 15)
  4753  001664  0E0F               	movlw	15
  4754  001666  19B7               	xorwf	TMR_Timer1Function@mode& (0+255),w,b
  4755  001668  E107               	bnz	l4321
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;TIMERS.c: 161: {
  4759                           ;TIMERS.c: 162: T1CONbits.T1CKPS = 0b00;
  4760  00166A  0ECF               	movlw	-49
  4761  00166C  16CD               	andwf	4045,f,c	;volatile
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;TIMERS.c: 163: TMR_Timer1Osc(1);
  4765  00166E  0E01               	movlw	1
  4766  001670  ECB4  F00C         	call	_TMR_Timer1Osc
  4767                           
  4768                           ;TIMERS.c: 164: }
  4769  001674  EF10  F00C         	goto	_TMR_ResetTimer1
  4770  001678                     l4321:
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;TIMERS.c: 165: else
  4774                           ;TIMERS.c: 166: {
  4775                           ;TIMERS.c: 167: T1CONbits.T1CKPS = 0b11;
  4776  001678  0E30               	movlw	48
  4777  00167A  12CD               	iorwf	4045,f,c	;volatile
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;TIMERS.c: 168: TMR_Timer1Osc(0);
  4781  00167C  0E00               	movlw	0
  4782  00167E  ECB4  F00C         	call	_TMR_Timer1Osc
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;TIMERS.c: 169: }
  4786                           ;TIMERS.c: 170: TMR_ResetTimer1();
  4787  001682  EF10  F00C         	goto	_TMR_ResetTimer1	;wreg free
  4788  001686                     __end_of_TMR_Timer1Function:
  4789                           	opt stack 0
  4790                           tblptru	equ	0xFF8
  4791                           tblptrh	equ	0xFF7
  4792                           tblptrl	equ	0xFF6
  4793                           tablat	equ	0xFF5
  4794                           prodh	equ	0xFF4
  4795                           prodl	equ	0xFF3
  4796                           intcon	equ	0xFF2
  4797                           intcon3	equ	0xFF0
  4798                           postinc0	equ	0xFEE
  4799                           wreg	equ	0xFE8
  4800                           postdec1	equ	0xFE5
  4801                           fsr1l	equ	0xFE1
  4802                           status	equ	0xFD8
  4803                           
  4804 ;; *************** function _TMR_Timer1Osc *****************
  4805 ;; Defined at:
  4806 ;;		line 389 in file "TIMERS.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;  state           1    wreg     unsigned char 
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  state           1   53[BANK0 ] unsigned char 
  4811 ;; Return value:  Size  Location     Type
  4812 ;;		None               void
  4813 ;; Registers used:
  4814 ;;		wreg, status,2
  4815 ;; Tracked objects:
  4816 ;;		On entry : F/0
  4817 ;;		On exit  : F/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4820 ;;      Params:         0       0       0       0       0
  4821 ;;      Locals:         0       1       0       0       0
  4822 ;;      Temps:          0       0       0       0       0
  4823 ;;      Totals:         0       1       0       0       0
  4824 ;;Total ram usage:        1 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; Hardware stack levels required when called:   12
  4827 ;; This function calls:
  4828 ;;		Nothing
  4829 ;; This function is called by:
  4830 ;;		_TMR_Timer1Function
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           	psect	text24
  4835  001968                     __ptext24:
  4836                           	opt stack 0
  4837  001968                     _TMR_Timer1Osc:
  4838                           	opt stack 14
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;incstack = 0
  4842                           ;TMR_Timer1Osc@state stored from wreg
  4843  001968  6FB5               	movwf	TMR_Timer1Osc@state& (0+255),b
  4844                           
  4845                           ;TIMERS.c: 391: if(state)
  4846  00196A  0100               	movlb	0	; () banked
  4847  00196C  51B5               	movf	TMR_Timer1Osc@state& (0+255),w,b
  4848  00196E  E004               	bz	l888
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;TIMERS.c: 392: {
  4852                           ;TIMERS.c: 393: T1CONbits.T1RUN = 1;
  4853  001970  8CCD               	bsf	4045,6,c	;volatile
  4854                           
  4855                           ;TIMERS.c: 394: T1CONbits.T1OSCEN = 1;
  4856  001972  86CD               	bsf	4045,3,c	;volatile
  4857                           
  4858                           ;TIMERS.c: 395: T1CONbits.TMR1CS = 1;
  4859  001974  82CD               	bsf	4045,1,c	;volatile
  4860                           
  4861                           ;TIMERS.c: 396: }
  4862  001976  0012               	return	
  4863  001978                     l888:
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;TIMERS.c: 397: else
  4867                           ;TIMERS.c: 398: {
  4868                           ;TIMERS.c: 399: T1CONbits.T1RUN = 0;
  4869  001978  9CCD               	bcf	4045,6,c	;volatile
  4870                           
  4871                           ;TIMERS.c: 400: T1CONbits.T1OSCEN = 0;
  4872  00197A  96CD               	bcf	4045,3,c	;volatile
  4873                           
  4874                           ;TIMERS.c: 401: T1CONbits.TMR1CS = 0;
  4875  00197C  92CD               	bcf	4045,1,c	;volatile
  4876                           
  4877                           ; BSR set to: 0
  4878  00197E  0012               	return		;funcret
  4879  001980                     __end_of_TMR_Timer1Osc:
  4880                           	opt stack 0
  4881                           tblptru	equ	0xFF8
  4882                           tblptrh	equ	0xFF7
  4883                           tblptrl	equ	0xFF6
  4884                           tablat	equ	0xFF5
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           intcon	equ	0xFF2
  4888                           intcon3	equ	0xFF0
  4889                           postinc0	equ	0xFEE
  4890                           wreg	equ	0xFE8
  4891                           postdec1	equ	0xFE5
  4892                           fsr1l	equ	0xFE1
  4893                           status	equ	0xFD8
  4894                           
  4895 ;; *************** function _TMR_ResetTimer1 *****************
  4896 ;; Defined at:
  4897 ;;		line 286 in file "TIMERS.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;		None
  4900 ;; Auto vars:     Size  Location     Type
  4901 ;;  TimerOn         1   54[BANK0 ] unsigned char 
  4902 ;; Return value:  Size  Location     Type
  4903 ;;		None               void
  4904 ;; Registers used:
  4905 ;;		wreg, status,2, cstack
  4906 ;; Tracked objects:
  4907 ;;		On entry : F/0
  4908 ;;		On exit  : F/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4911 ;;      Params:         0       0       0       0       0
  4912 ;;      Locals:         0       1       0       0       0
  4913 ;;      Temps:          0       0       0       0       0
  4914 ;;      Totals:         0       1       0       0       0
  4915 ;;Total ram usage:        1 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:   13
  4918 ;; This function calls:
  4919 ;;		_TMR_Timer1
  4920 ;; This function is called by:
  4921 ;;		_InitTimer1
  4922 ;;		_TMR_Timer1Function
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           	psect	text25
  4927  001820                     __ptext25:
  4928                           	opt stack 0
  4929  001820                     _TMR_ResetTimer1:
  4930                           	opt stack 13
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;TIMERS.c: 288: unsigned char TimerOn = T1CONbits.TMR1ON;
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;incstack = 0
  4937  001820  0E00               	movlw	0
  4938  001822  B0CD               	btfsc	4045,0,c	;volatile
  4939  001824  0E01               	movlw	1
  4940  001826  6FB6               	movwf	TMR_ResetTimer1@TimerOn& (0+255),b
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;TIMERS.c: 290: TMR_Timer1(0);
  4944  001828  0E00               	movlw	0
  4945  00182A  EC39  F00D         	call	_TMR_Timer1
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;TIMERS.c: 291: TMR1H = 0;
  4949  00182E  6ACF               	clrf	4047,c	;volatile
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;TIMERS.c: 292: TMR1L = 2;
  4953  001830  0E02               	movlw	2
  4954  001832  6ECE               	movwf	4046,c	;volatile
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;TIMERS.c: 293: if(TimerOn)
  4958  001834  51B6               	movf	TMR_ResetTimer1@TimerOn& (0+255),w,b
  4959  001836  B4D8               	btfsc	status,2,c
  4960  001838  0012               	return	
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;TIMERS.c: 294: {
  4964                           ;TIMERS.c: 295: TMR_Timer1(1);
  4965  00183A  0E01               	movlw	1
  4966  00183C  EF39  F00D         	goto	_TMR_Timer1
  4967  001840                     __end_of_TMR_ResetTimer1:
  4968                           	opt stack 0
  4969                           tblptru	equ	0xFF8
  4970                           tblptrh	equ	0xFF7
  4971                           tblptrl	equ	0xFF6
  4972                           tablat	equ	0xFF5
  4973                           prodh	equ	0xFF4
  4974                           prodl	equ	0xFF3
  4975                           intcon	equ	0xFF2
  4976                           intcon3	equ	0xFF0
  4977                           postinc0	equ	0xFEE
  4978                           wreg	equ	0xFE8
  4979                           postdec1	equ	0xFE5
  4980                           fsr1l	equ	0xFE1
  4981                           status	equ	0xFD8
  4982                           
  4983 ;; *************** function _TMR_Timer1 *****************
  4984 ;; Defined at:
  4985 ;;		line 230 in file "TIMERS.c"
  4986 ;; Parameters:    Size  Location     Type
  4987 ;;  state           1    wreg     unsigned char 
  4988 ;; Auto vars:     Size  Location     Type
  4989 ;;  state           1   53[BANK0 ] unsigned char 
  4990 ;; Return value:  Size  Location     Type
  4991 ;;		None               void
  4992 ;; Registers used:
  4993 ;;		wreg, status,2
  4994 ;; Tracked objects:
  4995 ;;		On entry : 0/0
  4996 ;;		On exit  : F/0
  4997 ;;		Unchanged: 0/0
  4998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4999 ;;      Params:         0       0       0       0       0
  5000 ;;      Locals:         0       1       0       0       0
  5001 ;;      Temps:          0       0       0       0       0
  5002 ;;      Totals:         0       1       0       0       0
  5003 ;;Total ram usage:        1 bytes
  5004 ;; Hardware stack levels used:    1
  5005 ;; Hardware stack levels required when called:   12
  5006 ;; This function calls:
  5007 ;;		Nothing
  5008 ;; This function is called by:
  5009 ;;		_InitTimer1
  5010 ;;		_TMR_Timer1Function
  5011 ;;		_TMR_ResetTimer1
  5012 ;; This function uses a non-reentrant model
  5013 ;;
  5014                           
  5015                           	psect	text26
  5016  001A72                     __ptext26:
  5017                           	opt stack 0
  5018  001A72                     _TMR_Timer1:
  5019                           	opt stack 14
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;incstack = 0
  5023                           ;TMR_Timer1@state stored from wreg
  5024  001A72  0100               	movlb	0	; () banked
  5025  001A74  6FB5               	movwf	TMR_Timer1@state& (0+255),b
  5026                           
  5027                           ;TIMERS.c: 232: if(state)
  5028  001A76  51B5               	movf	TMR_Timer1@state& (0+255),w,b
  5029  001A78  E002               	bz	l848
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;TIMERS.c: 233: {
  5033                           ;TIMERS.c: 235: T1CONbits.TMR1ON = 1;
  5034  001A7A  80CD               	bsf	4045,0,c	;volatile
  5035                           
  5036                           ;TIMERS.c: 236: }
  5037  001A7C  0012               	return	
  5038  001A7E                     l848:
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;TIMERS.c: 237: else
  5042                           ;TIMERS.c: 238: {
  5043                           ;TIMERS.c: 240: T1CONbits.TMR1ON = 0;
  5044  001A7E  90CD               	bcf	4045,0,c	;volatile
  5045                           
  5046                           ; BSR set to: 0
  5047  001A80  0012               	return		;funcret
  5048  001A82                     __end_of_TMR_Timer1:
  5049                           	opt stack 0
  5050                           tblptru	equ	0xFF8
  5051                           tblptrh	equ	0xFF7
  5052                           tblptrl	equ	0xFF6
  5053                           tablat	equ	0xFF5
  5054                           prodh	equ	0xFF4
  5055                           prodl	equ	0xFF3
  5056                           intcon	equ	0xFF2
  5057                           intcon3	equ	0xFF0
  5058                           postinc0	equ	0xFEE
  5059                           wreg	equ	0xFE8
  5060                           postdec1	equ	0xFE5
  5061                           fsr1l	equ	0xFE1
  5062                           status	equ	0xFD8
  5063                           
  5064 ;; *************** function _InitTimer0 *****************
  5065 ;; Defined at:
  5066 ;;		line 71 in file "TIMERS.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;		None
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;		None
  5071 ;; Return value:  Size  Location     Type
  5072 ;;		None               void
  5073 ;; Registers used:
  5074 ;;		wreg, status,2, cstack
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : F/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5080 ;;      Params:         0       0       0       0       0
  5081 ;;      Locals:         0       0       0       0       0
  5082 ;;      Temps:          0       0       0       0       0
  5083 ;;      Totals:         0       0       0       0       0
  5084 ;;Total ram usage:        0 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:   14
  5087 ;; This function calls:
  5088 ;;		_TMR_ResetTimer0
  5089 ;;		_TMR_Timer0
  5090 ;;		_TMR_Timer0Int
  5091 ;; This function is called by:
  5092 ;;		_InitTimers
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           	psect	text27
  5097  001840                     __ptext27:
  5098                           	opt stack 0
  5099  001840                     _InitTimer0:
  5100                           	opt stack 14
  5101                           
  5102                           ;TIMERS.c: 73: TMR_Timer0(0);
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;incstack = 0
  5106  001840  0E00               	movlw	0
  5107  001842  EC49  F00D         	call	_TMR_Timer0
  5108                           
  5109                           ;TIMERS.c: 74: TMR_ResetTimer0();
  5110  001846  EC30  F00C         	call	_TMR_ResetTimer0	;wreg free
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;TIMERS.c: 75: T0CONbits.T08BIT = 0;
  5114  00184A  9CD5               	bcf	4053,6,c	;volatile
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;TIMERS.c: 76: T0CONbits.T0CS = 0;
  5118  00184C  9AD5               	bcf	4053,5,c	;volatile
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;TIMERS.c: 77: T0CONbits.PSA = 0;
  5122  00184E  96D5               	bcf	4053,3,c	;volatile
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;TIMERS.c: 78: T0CONbits.T0PS = 0b101;
  5126  001850  50D5               	movf	4053,w,c	;volatile
  5127  001852  0BF8               	andlw	-8
  5128  001854  0905               	iorlw	5
  5129  001856  6ED5               	movwf	4053,c	;volatile
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;TIMERS.c: 79: INTCON2bits.TMR0IP = 1;
  5133  001858  84F1               	bsf	intcon2,2,c	;volatile
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;TIMERS.c: 80: TMR_Timer0Int(1);
  5137  00185A  0E01               	movlw	1
  5138  00185C  EF41  F00D         	goto	_TMR_Timer0Int
  5139  001860                     __end_of_InitTimer0:
  5140                           	opt stack 0
  5141                           tblptru	equ	0xFF8
  5142                           tblptrh	equ	0xFF7
  5143                           tblptrl	equ	0xFF6
  5144                           tablat	equ	0xFF5
  5145                           prodh	equ	0xFF4
  5146                           prodl	equ	0xFF3
  5147                           intcon	equ	0xFF2
  5148                           intcon2	equ	0xFF1
  5149                           intcon3	equ	0xFF0
  5150                           postinc0	equ	0xFEE
  5151                           wreg	equ	0xFE8
  5152                           postdec1	equ	0xFE5
  5153                           fsr1l	equ	0xFE1
  5154                           status	equ	0xFD8
  5155                           
  5156 ;; *************** function _TMR_Timer0Int *****************
  5157 ;; Defined at:
  5158 ;;		line 332 in file "TIMERS.c"
  5159 ;; Parameters:    Size  Location     Type
  5160 ;;  state           1    wreg     unsigned char 
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;  state           1   53[BANK0 ] unsigned char 
  5163 ;; Return value:  Size  Location     Type
  5164 ;;		None               void
  5165 ;; Registers used:
  5166 ;;		wreg, status,2
  5167 ;; Tracked objects:
  5168 ;;		On entry : F/0
  5169 ;;		On exit  : F/0
  5170 ;;		Unchanged: 0/0
  5171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5172 ;;      Params:         0       0       0       0       0
  5173 ;;      Locals:         0       1       0       0       0
  5174 ;;      Temps:          0       0       0       0       0
  5175 ;;      Totals:         0       1       0       0       0
  5176 ;;Total ram usage:        1 bytes
  5177 ;; Hardware stack levels used:    1
  5178 ;; Hardware stack levels required when called:   12
  5179 ;; This function calls:
  5180 ;;		Nothing
  5181 ;; This function is called by:
  5182 ;;		_RF_Enable
  5183 ;;		_InitTimer0
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           	psect	text28
  5188  001A82                     __ptext28:
  5189                           	opt stack 0
  5190  001A82                     _TMR_Timer0Int:
  5191                           	opt stack 17
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;incstack = 0
  5195                           ;TMR_Timer0Int@state stored from wreg
  5196  001A82  6FB5               	movwf	TMR_Timer0Int@state& (0+255),b
  5197                           
  5198                           ;TIMERS.c: 334: if(state)
  5199  001A84  0100               	movlb	0	; () banked
  5200  001A86  51B5               	movf	TMR_Timer0Int@state& (0+255),w,b
  5201  001A88  E002               	bz	l873
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;TIMERS.c: 335: {
  5205                           ;TIMERS.c: 337: INTCONbits.TMR0IE = 1;
  5206  001A8A  8AF2               	bsf	intcon,5,c	;volatile
  5207                           
  5208                           ;TIMERS.c: 338: }
  5209  001A8C  0012               	return	
  5210  001A8E                     l873:
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;TIMERS.c: 339: else
  5214                           ;TIMERS.c: 340: {
  5215                           ;TIMERS.c: 342: INTCONbits.TMR0IE = 0;
  5216  001A8E  9AF2               	bcf	intcon,5,c	;volatile
  5217                           
  5218                           ; BSR set to: 0
  5219  001A90  0012               	return		;funcret
  5220  001A92                     __end_of_TMR_Timer0Int:
  5221                           	opt stack 0
  5222                           tblptru	equ	0xFF8
  5223                           tblptrh	equ	0xFF7
  5224                           tblptrl	equ	0xFF6
  5225                           tablat	equ	0xFF5
  5226                           prodh	equ	0xFF4
  5227                           prodl	equ	0xFF3
  5228                           intcon	equ	0xFF2
  5229                           intcon2	equ	0xFF1
  5230                           intcon3	equ	0xFF0
  5231                           postinc0	equ	0xFEE
  5232                           wreg	equ	0xFE8
  5233                           postdec1	equ	0xFE5
  5234                           fsr1l	equ	0xFE1
  5235                           status	equ	0xFD8
  5236                           
  5237 ;; *************** function _TMR_ResetTimer0 *****************
  5238 ;; Defined at:
  5239 ;;		line 268 in file "TIMERS.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;		None
  5242 ;; Auto vars:     Size  Location     Type
  5243 ;;  TimerOn         1   54[BANK0 ] unsigned char 
  5244 ;; Return value:  Size  Location     Type
  5245 ;;		None               void
  5246 ;; Registers used:
  5247 ;;		wreg, status,2, cstack
  5248 ;; Tracked objects:
  5249 ;;		On entry : F/0
  5250 ;;		On exit  : F/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5253 ;;      Params:         0       0       0       0       0
  5254 ;;      Locals:         0       1       0       0       0
  5255 ;;      Temps:          0       0       0       0       0
  5256 ;;      Totals:         0       1       0       0       0
  5257 ;;Total ram usage:        1 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:   13
  5260 ;; This function calls:
  5261 ;;		_TMR_Timer0
  5262 ;; This function is called by:
  5263 ;;		_InitTimer0
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           	psect	text29
  5268  001860                     __ptext29:
  5269                           	opt stack 0
  5270  001860                     _TMR_ResetTimer0:
  5271                           	opt stack 14
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;TIMERS.c: 270: unsigned char TimerOn = T0CONbits.TMR0ON;
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;incstack = 0
  5278  001860  0E00               	movlw	0
  5279  001862  BED5               	btfsc	4053,7,c	;volatile
  5280  001864  0E01               	movlw	1
  5281  001866  6FB6               	movwf	TMR_ResetTimer0@TimerOn& (0+255),b
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;TIMERS.c: 272: TMR_Timer0(0);
  5285  001868  0E00               	movlw	0
  5286  00186A  EC49  F00D         	call	_TMR_Timer0
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;TIMERS.c: 273: TMR0H = 0;
  5290  00186E  6AD7               	clrf	4055,c	;volatile
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;TIMERS.c: 274: TMR0L = 2;
  5294  001870  0E02               	movlw	2
  5295  001872  6ED6               	movwf	4054,c	;volatile
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;TIMERS.c: 275: if(TimerOn)
  5299  001874  51B6               	movf	TMR_ResetTimer0@TimerOn& (0+255),w,b
  5300  001876  B4D8               	btfsc	status,2,c
  5301  001878  0012               	return	
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;TIMERS.c: 276: {
  5305                           ;TIMERS.c: 277: TMR_Timer0(1);
  5306  00187A  0E01               	movlw	1
  5307  00187C  EF49  F00D         	goto	_TMR_Timer0
  5308  001880                     __end_of_TMR_ResetTimer0:
  5309                           	opt stack 0
  5310                           tblptru	equ	0xFF8
  5311                           tblptrh	equ	0xFF7
  5312                           tblptrl	equ	0xFF6
  5313                           tablat	equ	0xFF5
  5314                           prodh	equ	0xFF4
  5315                           prodl	equ	0xFF3
  5316                           intcon	equ	0xFF2
  5317                           intcon2	equ	0xFF1
  5318                           intcon3	equ	0xFF0
  5319                           postinc0	equ	0xFEE
  5320                           wreg	equ	0xFE8
  5321                           postdec1	equ	0xFE5
  5322                           fsr1l	equ	0xFE1
  5323                           status	equ	0xFD8
  5324                           
  5325 ;; *************** function _TMR_Timer0 *****************
  5326 ;; Defined at:
  5327 ;;		line 211 in file "TIMERS.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;  state           1    wreg     unsigned char 
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;  state           1   53[BANK0 ] unsigned char 
  5332 ;; Return value:  Size  Location     Type
  5333 ;;		None               void
  5334 ;; Registers used:
  5335 ;;		wreg, status,2
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : F/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5341 ;;      Params:         0       0       0       0       0
  5342 ;;      Locals:         0       1       0       0       0
  5343 ;;      Temps:          0       0       0       0       0
  5344 ;;      Totals:         0       1       0       0       0
  5345 ;;Total ram usage:        1 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; Hardware stack levels required when called:   12
  5348 ;; This function calls:
  5349 ;;		Nothing
  5350 ;; This function is called by:
  5351 ;;		_InitTimer0
  5352 ;;		_TMR_ResetTimer0
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           	psect	text30
  5357  001A92                     __ptext30:
  5358                           	opt stack 0
  5359  001A92                     _TMR_Timer0:
  5360                           	opt stack 15
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;incstack = 0
  5364                           ;TMR_Timer0@state stored from wreg
  5365  001A92  0100               	movlb	0	; () banked
  5366  001A94  6FB5               	movwf	TMR_Timer0@state& (0+255),b
  5367                           
  5368                           ;TIMERS.c: 213: if(state)
  5369  001A96  51B5               	movf	TMR_Timer0@state& (0+255),w,b
  5370  001A98  E002               	bz	l843
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;TIMERS.c: 214: {
  5374                           ;TIMERS.c: 216: T0CONbits.TMR0ON = 1;
  5375  001A9A  8ED5               	bsf	4053,7,c	;volatile
  5376                           
  5377                           ;TIMERS.c: 217: }
  5378  001A9C  0012               	return	
  5379  001A9E                     l843:
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;TIMERS.c: 218: else
  5383                           ;TIMERS.c: 219: {
  5384                           ;TIMERS.c: 221: T0CONbits.TMR0ON = 0;
  5385  001A9E  9ED5               	bcf	4053,7,c	;volatile
  5386                           
  5387                           ; BSR set to: 0
  5388  001AA0  0012               	return		;funcret
  5389  001AA2                     __end_of_TMR_Timer0:
  5390                           	opt stack 0
  5391                           tblptru	equ	0xFF8
  5392                           tblptrh	equ	0xFF7
  5393                           tblptrl	equ	0xFF6
  5394                           tablat	equ	0xFF5
  5395                           prodh	equ	0xFF4
  5396                           prodl	equ	0xFF3
  5397                           intcon	equ	0xFF2
  5398                           intcon2	equ	0xFF1
  5399                           intcon3	equ	0xFF0
  5400                           postinc0	equ	0xFEE
  5401                           wreg	equ	0xFE8
  5402                           postdec1	equ	0xFE5
  5403                           fsr1l	equ	0xFE1
  5404                           status	equ	0xFD8
  5405                           
  5406 ;; *************** function _InitRF *****************
  5407 ;; Defined at:
  5408 ;;		line 68 in file "RF.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;		None
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;		None
  5413 ;; Return value:  Size  Location     Type
  5414 ;;		None               void
  5415 ;; Registers used:
  5416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : F/0
  5419 ;;		On exit  : F/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5422 ;;      Params:         0       0       0       0       0
  5423 ;;      Locals:         0       0       0       0       0
  5424 ;;      Temps:          0       0       0       0       0
  5425 ;;      Totals:         0       0       0       0       0
  5426 ;;Total ram usage:        0 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:   13
  5429 ;; This function calls:
  5430 ;;		_MSC_CleanBufferInt
  5431 ;;		_RF_DataInt
  5432 ;;		_RF_Receiver
  5433 ;;		_RF_SetBandwidth
  5434 ;;		_RF_SetSquelch
  5435 ;; This function is called by:
  5436 ;;		_Init_System
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text31
  5441  00156A                     __ptext31:
  5442                           	opt stack 0
  5443  00156A                     _InitRF:
  5444                           	opt stack 16
  5445                           
  5446                           ; BSR set to: 0
  5447                           ;RF.c: 71: RF_Receiver(1);
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;incstack = 0
  5451  00156A  0E01               	movlw	1
  5452  00156C  EC59  F00D         	call	_RF_Receiver
  5453                           
  5454                           ;RF.c: 72: RF_SetBandwidth(2);
  5455  001570  0E02               	movlw	2
  5456  001572  EC43  F00B         	call	_RF_SetBandwidth
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;RF.c: 73: MSC_CleanBufferInt(&RF_DataTiming,64);
  5460  001576  0E07               	movlw	low _RF_DataTiming
  5461  001578  6FB5               	movwf	MSC_CleanBufferInt@data& (0+255),b
  5462  00157A  0E01               	movlw	high _RF_DataTiming
  5463  00157C  6FB6               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  5464  00157E  6BB8               	clrf	(MSC_CleanBufferInt@count+1)& (0+255),b
  5465  001580  0E40               	movlw	64
  5466  001582  6FB7               	movwf	MSC_CleanBufferInt@count& (0+255),b
  5467  001584  ECCE  F00A         	call	_MSC_CleanBufferInt	;wreg free
  5468                           
  5469                           ; BSR set to: 0
  5470                           ;RF.c: 74: RF_SetSquelch(0);
  5471  001588  0E00               	movlw	0
  5472  00158A  EC51  F00D         	call	_RF_SetSquelch
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;RF.c: 75: INTCON3bits.INT1P = 1;
  5476  00158E  8CF0               	bsf	intcon3,6,c	;volatile
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;RF.c: 76: INTCON3bits.INT2P = 1;
  5480  001590  8EF0               	bsf	intcon3,7,c	;volatile
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;RF.c: 77: INTCON2bits.INTEDG1 = 1;
  5484  001592  8AF1               	bsf	intcon2,5,c	;volatile
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;RF.c: 78: INTCON2bits.INTEDG2 = 0;
  5488  001594  98F1               	bcf	intcon2,4,c	;volatile
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;RF.c: 79: RF_DataInt(1);
  5492  001596  0E01               	movlw	1
  5493  001598  EFD7  F00C         	goto	_RF_DataInt
  5494  00159C                     __end_of_InitRF:
  5495                           	opt stack 0
  5496                           tblptru	equ	0xFF8
  5497                           tblptrh	equ	0xFF7
  5498                           tblptrl	equ	0xFF6
  5499                           tablat	equ	0xFF5
  5500                           prodh	equ	0xFF4
  5501                           prodl	equ	0xFF3
  5502                           intcon	equ	0xFF2
  5503                           intcon2	equ	0xFF1
  5504                           intcon3	equ	0xFF0
  5505                           postinc0	equ	0xFEE
  5506                           wreg	equ	0xFE8
  5507                           postdec1	equ	0xFE5
  5508                           fsr1l	equ	0xFE1
  5509                           status	equ	0xFD8
  5510                           
  5511 ;; *************** function _RF_SetSquelch *****************
  5512 ;; Defined at:
  5513 ;;		line 334 in file "RF.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;  state           1    wreg     unsigned char 
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;  state           1   53[BANK0 ] unsigned char 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;		None               void
  5520 ;; Registers used:
  5521 ;;		wreg, status,2, status,0
  5522 ;; Tracked objects:
  5523 ;;		On entry : F/0
  5524 ;;		On exit  : F/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5527 ;;      Params:         0       0       0       0       0
  5528 ;;      Locals:         0       1       0       0       0
  5529 ;;      Temps:          0       0       0       0       0
  5530 ;;      Totals:         0       1       0       0       0
  5531 ;;Total ram usage:        1 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:   12
  5534 ;; This function calls:
  5535 ;;		Nothing
  5536 ;; This function is called by:
  5537 ;;		_InitRF
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           	psect	text32
  5542  001AA2                     __ptext32:
  5543                           	opt stack 0
  5544  001AA2                     _RF_SetSquelch:
  5545                           	opt stack 16
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;incstack = 0
  5549                           ;RF_SetSquelch@state stored from wreg
  5550  001AA2  6FB5               	movwf	RF_SetSquelch@state& (0+255),b
  5551                           
  5552                           ;RF.c: 336: if(!state)
  5553  001AA4  0100               	movlb	0	; () banked
  5554  001AA6  51B5               	movf	RF_SetSquelch@state& (0+255),w,b
  5555  001AA8  E102               	bnz	l4513
  5556                           
  5557                           ; BSR set to: 0
  5558                           ;RF.c: 337: {
  5559                           ;RF.c: 339: LATA |= 0x20;
  5560  001AAA  8A89               	bsf	3977,5,c	;volatile
  5561                           
  5562                           ;RF.c: 340: }
  5563  001AAC  0012               	return	
  5564  001AAE                     l4513:
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;RF.c: 341: else
  5568                           ;RF.c: 342: {
  5569                           ;RF.c: 344: LATA &= ~0x20;
  5570  001AAE  9A89               	bcf	3977,5,c	;volatile
  5571                           
  5572                           ; BSR set to: 0
  5573  001AB0  0012               	return		;funcret
  5574  001AB2                     __end_of_RF_SetSquelch:
  5575                           	opt stack 0
  5576                           tblptru	equ	0xFF8
  5577                           tblptrh	equ	0xFF7
  5578                           tblptrl	equ	0xFF6
  5579                           tablat	equ	0xFF5
  5580                           prodh	equ	0xFF4
  5581                           prodl	equ	0xFF3
  5582                           intcon	equ	0xFF2
  5583                           intcon2	equ	0xFF1
  5584                           intcon3	equ	0xFF0
  5585                           postinc0	equ	0xFEE
  5586                           wreg	equ	0xFE8
  5587                           postdec1	equ	0xFE5
  5588                           fsr1l	equ	0xFE1
  5589                           status	equ	0xFD8
  5590                           
  5591 ;; *************** function _RF_SetBandwidth *****************
  5592 ;; Defined at:
  5593 ;;		line 300 in file "RF.c"
  5594 ;; Parameters:    Size  Location     Type
  5595 ;;  band            1    wreg     unsigned char 
  5596 ;; Auto vars:     Size  Location     Type
  5597 ;;  band            1   53[BANK0 ] unsigned char 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;		None               void
  5600 ;; Registers used:
  5601 ;;		wreg, status,2, status,0
  5602 ;; Tracked objects:
  5603 ;;		On entry : F/0
  5604 ;;		On exit  : F/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5607 ;;      Params:         0       0       0       0       0
  5608 ;;      Locals:         0       1       0       0       0
  5609 ;;      Temps:          0       0       0       0       0
  5610 ;;      Totals:         0       1       0       0       0
  5611 ;;Total ram usage:        1 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:   12
  5614 ;; This function calls:
  5615 ;;		Nothing
  5616 ;; This function is called by:
  5617 ;;		_InitRF
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           	psect	text33
  5622  001686                     __ptext33:
  5623                           	opt stack 0
  5624  001686                     _RF_SetBandwidth:
  5625                           	opt stack 16
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;incstack = 0
  5629                           ;RF_SetBandwidth@band stored from wreg
  5630  001686  6FB5               	movwf	RF_SetBandwidth@band& (0+255),b
  5631                           
  5632                           ;RF.c: 302: if(band == 0)
  5633  001688  0100               	movlb	0	; () banked
  5634  00168A  51B5               	movf	RF_SetBandwidth@band& (0+255),w,b
  5635  00168C  E103               	bnz	l4491
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;RF.c: 303: {
  5639                           ;RF.c: 305: LATC &= ~0x40;
  5640  00168E  9C8B               	bcf	3979,6,c	;volatile
  5641                           
  5642                           ;RF.c: 306: LATC &= ~0x80;
  5643  001690  9E8B               	bcf	3979,7,c	;volatile
  5644                           
  5645                           ;RF.c: 307: }
  5646  001692  0012               	return	
  5647  001694                     l4491:
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;RF.c: 308: else if(band == 1)
  5651  001694  05B5               	decf	RF_SetBandwidth@band& (0+255),w,b
  5652  001696  E103               	bnz	l4495
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;RF.c: 309: {
  5656                           ;RF.c: 311: LATC |= 0x40;
  5657  001698  8C8B               	bsf	3979,6,c	;volatile
  5658                           
  5659                           ;RF.c: 312: LATC &= ~0x80;
  5660  00169A  9E8B               	bcf	3979,7,c	;volatile
  5661                           
  5662                           ;RF.c: 313: }
  5663  00169C  0012               	return	
  5664  00169E                     l4495:
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;RF.c: 314: else if(band == 2)
  5668  00169E  0E02               	movlw	2
  5669  0016A0  19B5               	xorwf	RF_SetBandwidth@band& (0+255),w,b
  5670  0016A2  E103               	bnz	l4499
  5671                           
  5672                           ; BSR set to: 0
  5673                           ;RF.c: 315: {
  5674                           ;RF.c: 317: LATC &= ~0x40;
  5675  0016A4  9C8B               	bcf	3979,6,c	;volatile
  5676                           
  5677                           ;RF.c: 318: LATC |= 0x80;
  5678  0016A6  8E8B               	bsf	3979,7,c	;volatile
  5679                           
  5680                           ;RF.c: 319: }
  5681  0016A8  0012               	return	
  5682  0016AA                     l4499:
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;RF.c: 320: else
  5686                           ;RF.c: 321: {
  5687                           ;RF.c: 323: LATC |= 0x40;
  5688  0016AA  8C8B               	bsf	3979,6,c	;volatile
  5689                           
  5690                           ;RF.c: 324: LATC |= 0x80;
  5691  0016AC  8E8B               	bsf	3979,7,c	;volatile
  5692                           
  5693                           ; BSR set to: 0
  5694  0016AE  0012               	return		;funcret
  5695  0016B0                     __end_of_RF_SetBandwidth:
  5696                           	opt stack 0
  5697                           tblptru	equ	0xFF8
  5698                           tblptrh	equ	0xFF7
  5699                           tblptrl	equ	0xFF6
  5700                           tablat	equ	0xFF5
  5701                           prodh	equ	0xFF4
  5702                           prodl	equ	0xFF3
  5703                           intcon	equ	0xFF2
  5704                           intcon2	equ	0xFF1
  5705                           intcon3	equ	0xFF0
  5706                           postinc0	equ	0xFEE
  5707                           wreg	equ	0xFE8
  5708                           postdec1	equ	0xFE5
  5709                           fsr1l	equ	0xFE1
  5710                           status	equ	0xFD8
  5711                           
  5712 ;; *************** function _RF_Receiver *****************
  5713 ;; Defined at:
  5714 ;;		line 281 in file "RF.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;  state           1    wreg     unsigned char 
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;  state           1   53[BANK0 ] unsigned char 
  5719 ;; Return value:  Size  Location     Type
  5720 ;;		None               void
  5721 ;; Registers used:
  5722 ;;		wreg, status,2, status,0
  5723 ;; Tracked objects:
  5724 ;;		On entry : F/0
  5725 ;;		On exit  : F/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5728 ;;      Params:         0       0       0       0       0
  5729 ;;      Locals:         0       1       0       0       0
  5730 ;;      Temps:          0       0       0       0       0
  5731 ;;      Totals:         0       1       0       0       0
  5732 ;;Total ram usage:        1 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:   12
  5735 ;; This function calls:
  5736 ;;		Nothing
  5737 ;; This function is called by:
  5738 ;;		_InitRF
  5739 ;; This function uses a non-reentrant model
  5740 ;;
  5741                           
  5742                           	psect	text34
  5743  001AB2                     __ptext34:
  5744                           	opt stack 0
  5745  001AB2                     _RF_Receiver:
  5746                           	opt stack 16
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;incstack = 0
  5750                           ;RF_Receiver@state stored from wreg
  5751  001AB2  6FB5               	movwf	RF_Receiver@state& (0+255),b
  5752                           
  5753                           ;RF.c: 283: if(!state)
  5754  001AB4  0100               	movlb	0	; () banked
  5755  001AB6  51B5               	movf	RF_Receiver@state& (0+255),w,b
  5756  001AB8  E102               	bnz	l4485
  5757                           
  5758                           ; BSR set to: 0
  5759                           ;RF.c: 284: {
  5760                           ;RF.c: 286: LATA |= 0x04;
  5761  001ABA  8489               	bsf	3977,2,c	;volatile
  5762                           
  5763                           ;RF.c: 287: }
  5764  001ABC  0012               	return	
  5765  001ABE                     l4485:
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;RF.c: 288: else
  5769                           ;RF.c: 289: {
  5770                           ;RF.c: 291: LATA &= ~0x04;
  5771  001ABE  9489               	bcf	3977,2,c	;volatile
  5772                           
  5773                           ; BSR set to: 0
  5774  001AC0  0012               	return		;funcret
  5775  001AC2                     __end_of_RF_Receiver:
  5776                           	opt stack 0
  5777                           tblptru	equ	0xFF8
  5778                           tblptrh	equ	0xFF7
  5779                           tblptrl	equ	0xFF6
  5780                           tablat	equ	0xFF5
  5781                           prodh	equ	0xFF4
  5782                           prodl	equ	0xFF3
  5783                           intcon	equ	0xFF2
  5784                           intcon2	equ	0xFF1
  5785                           intcon3	equ	0xFF0
  5786                           postinc0	equ	0xFEE
  5787                           wreg	equ	0xFE8
  5788                           postdec1	equ	0xFE5
  5789                           fsr1l	equ	0xFE1
  5790                           status	equ	0xFD8
  5791                           
  5792 ;; *************** function _RF_DataInt *****************
  5793 ;; Defined at:
  5794 ;;		line 254 in file "RF.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;  state           1    wreg     unsigned char 
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;  state           1   53[BANK0 ] unsigned char 
  5799 ;; Return value:  Size  Location     Type
  5800 ;;		None               void
  5801 ;; Registers used:
  5802 ;;		wreg, status,2
  5803 ;; Tracked objects:
  5804 ;;		On entry : E/0
  5805 ;;		On exit  : F/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5808 ;;      Params:         0       0       0       0       0
  5809 ;;      Locals:         0       1       0       0       0
  5810 ;;      Temps:          0       0       0       0       0
  5811 ;;      Totals:         0       1       0       0       0
  5812 ;;Total ram usage:        1 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:   12
  5815 ;; This function calls:
  5816 ;;		Nothing
  5817 ;; This function is called by:
  5818 ;;		_SYS_EnableInt
  5819 ;;		_InitRF
  5820 ;;		_RF_Enable
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           	psect	text35
  5825  0019AE                     __ptext35:
  5826                           	opt stack 0
  5827  0019AE                     _RF_DataInt:
  5828                           	opt stack 17
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;incstack = 0
  5832                           ;RF_DataInt@state stored from wreg
  5833  0019AE  0100               	movlb	0	; () banked
  5834  0019B0  6FB5               	movwf	RF_DataInt@state& (0+255),b
  5835                           
  5836                           ;RF.c: 257: if(state)
  5837  0019B2  51B5               	movf	RF_DataInt@state& (0+255),w,b
  5838  0019B4  E003               	bz	l469
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;RF.c: 258: {
  5842                           ;RF.c: 260: INTCON3bits.INT1E = 1;
  5843  0019B6  86F0               	bsf	intcon3,3,c	;volatile
  5844                           
  5845                           ;RF.c: 261: INTCON3bits.INT2E = 1;
  5846  0019B8  88F0               	bsf	intcon3,4,c	;volatile
  5847                           
  5848                           ;RF.c: 262: }
  5849  0019BA  0012               	return	
  5850  0019BC                     l469:
  5851                           
  5852                           ; BSR set to: 0
  5853                           ;RF.c: 263: else
  5854                           ;RF.c: 264: {
  5855                           ;RF.c: 266: INTCON3bits.INT1E = 0;
  5856  0019BC  96F0               	bcf	intcon3,3,c	;volatile
  5857                           
  5858                           ;RF.c: 267: INTCON3bits.INT2E = 0;
  5859  0019BE  98F0               	bcf	intcon3,4,c	;volatile
  5860                           
  5861                           ; BSR set to: 0
  5862  0019C0  0012               	return		;funcret
  5863  0019C2                     __end_of_RF_DataInt:
  5864                           	opt stack 0
  5865                           tblptru	equ	0xFF8
  5866                           tblptrh	equ	0xFF7
  5867                           tblptrl	equ	0xFF6
  5868                           tablat	equ	0xFF5
  5869                           prodh	equ	0xFF4
  5870                           prodl	equ	0xFF3
  5871                           intcon	equ	0xFF2
  5872                           intcon2	equ	0xFF1
  5873                           intcon3	equ	0xFF0
  5874                           postinc0	equ	0xFEE
  5875                           wreg	equ	0xFE8
  5876                           postdec1	equ	0xFE5
  5877                           fsr1l	equ	0xFE1
  5878                           status	equ	0xFD8
  5879                           
  5880 ;; *************** function _InitMOTOR *****************
  5881 ;; Defined at:
  5882 ;;		line 92 in file "MOTOR.c"
  5883 ;; Parameters:    Size  Location     Type
  5884 ;;		None
  5885 ;; Auto vars:     Size  Location     Type
  5886 ;;		None
  5887 ;; Return value:  Size  Location     Type
  5888 ;;		None               void
  5889 ;; Registers used:
  5890 ;;		None
  5891 ;; Tracked objects:
  5892 ;;		On entry : F/0
  5893 ;;		On exit  : 0/0
  5894 ;;		Unchanged: 0/0
  5895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5896 ;;      Params:         0       0       0       0       0
  5897 ;;      Locals:         0       0       0       0       0
  5898 ;;      Temps:          0       0       0       0       0
  5899 ;;      Totals:         0       0       0       0       0
  5900 ;;Total ram usage:        0 bytes
  5901 ;; Hardware stack levels used:    1
  5902 ;; Hardware stack levels required when called:   12
  5903 ;; This function calls:
  5904 ;;		Nothing
  5905 ;; This function is called by:
  5906 ;;		_Init_System
  5907 ;; This function uses a non-reentrant model
  5908 ;;
  5909                           
  5910                           	psect	text36
  5911  001BCA                     __ptext36:
  5912                           	opt stack 0
  5913  001BCA                     _InitMOTOR:
  5914                           	opt stack 17
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;MOTOR.c: 95: __nop();
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;incstack = 0
  5921  001BCA  F000               	nop	
  5922  001BCC  0012               	return		;funcret
  5923  001BCE                     __end_of_InitMOTOR:
  5924                           	opt stack 0
  5925                           tblptru	equ	0xFF8
  5926                           tblptrh	equ	0xFF7
  5927                           tblptrl	equ	0xFF6
  5928                           tablat	equ	0xFF5
  5929                           prodh	equ	0xFF4
  5930                           prodl	equ	0xFF3
  5931                           intcon	equ	0xFF2
  5932                           intcon2	equ	0xFF1
  5933                           intcon3	equ	0xFF0
  5934                           postinc0	equ	0xFEE
  5935                           wreg	equ	0xFE8
  5936                           postdec1	equ	0xFE5
  5937                           fsr1l	equ	0xFE1
  5938                           status	equ	0xFD8
  5939                           
  5940 ;; *************** function _InitLDO *****************
  5941 ;; Defined at:
  5942 ;;		line 75 in file "LDO.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;		None
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;		None
  5947 ;; Return value:  Size  Location     Type
  5948 ;;		None               void
  5949 ;; Registers used:
  5950 ;;		wreg, status,2, status,0, cstack
  5951 ;; Tracked objects:
  5952 ;;		On entry : F/0
  5953 ;;		On exit  : F/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5956 ;;      Params:         0       0       0       0       0
  5957 ;;      Locals:         0       0       0       0       0
  5958 ;;      Temps:          0       0       0       0       0
  5959 ;;      Totals:         0       0       0       0       0
  5960 ;;Total ram usage:        0 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:   13
  5963 ;; This function calls:
  5964 ;;		_LDO_Pass
  5965 ;; This function is called by:
  5966 ;;		_Init_System
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text37
  5971  001998                     __ptext37:
  5972                           	opt stack 0
  5973  001998                     _InitLDO:
  5974                           	opt stack 16
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;LDO.c: 77: LDO_Pass(0);
  5978                           
  5979                           ;incstack = 0
  5980  001998  0E00               	movlw	0
  5981  00199A                     i13L__ptext38:
  5982                           	opt stack 0
  5983  00199A                     i13L_LDO_Pass:
  5984                           	opt stack 16
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;incstack = 0
  5988                           ;LDO_Pass@state stored from wreg
  5989  00199A  6FB5               	movwf	LDO_Pass@state& (0+255),b
  5990  00199C                     i13Ll4515:
  5991                           	opt stack 16
  5992                           
  5993                           ;LDO.c: 54: if(state)
  5994  00199C  0100               	movlb	0	; () banked
  5995  00199E  51B5               	movf	LDO_Pass@state& (0+255),w,b
  5996  0019A0  B4D8               	btfsc	status,2,c
  5997  0019A2                     i13Lu4011:
  5998                           	opt stack 0
  5999  0019A2  D003               	goto	i13Ll645
  6000  0019A4                     i13Lu4010:
  6001                           	opt stack 0
  6002  0019A4                     i13Ll4517:
  6003                           	opt stack 16
  6004                           
  6005                           ; BSR set to: 0
  6006                           ;LDO.c: 55: {
  6007                           ;LDO.c: 57: TRISCbits.TRISC5 = 0;
  6008  0019A4  9A94               	bcf	3988,5,c	;volatile
  6009  0019A6                     i13Ll4519:
  6010                           	opt stack 16
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;LDO.c: 58: LATC &= ~0x20;
  6014  0019A6  9A8B               	bcf	3979,5,c	;volatile
  6015  0019A8  0012               	return	
  6016  0019AA                     i13Ll645:
  6017                           	opt stack 16
  6018                           
  6019                           ; BSR set to: 0
  6020                           ;LDO.c: 60: else
  6021                           ;LDO.c: 61: {
  6022                           ;LDO.c: 63: TRISCbits.TRISC5 = 1;
  6023  0019AA  8A94               	bsf	3988,5,c	;volatile
  6024  0019AC                     i13Ll647:
  6025                           	opt stack 0
  6026  0019AC  0012               	return	
  6027  0019AE                     __end_of_InitLDO:
  6028                           	opt stack 0
  6029                           tblptru	equ	0xFF8
  6030                           tblptrh	equ	0xFF7
  6031                           tblptrl	equ	0xFF6
  6032                           tablat	equ	0xFF5
  6033                           prodh	equ	0xFF4
  6034                           prodl	equ	0xFF3
  6035                           intcon	equ	0xFF2
  6036                           intcon2	equ	0xFF1
  6037                           intcon3	equ	0xFF0
  6038                           postinc0	equ	0xFEE
  6039                           wreg	equ	0xFE8
  6040                           postdec1	equ	0xFE5
  6041                           fsr1l	equ	0xFE1
  6042                           status	equ	0xFD8
  6043                           
  6044 ;; *************** function _LDO_Pass *****************
  6045 ;; Defined at:
  6046 ;;		line 52 in file "LDO.c"
  6047 ;; Parameters:    Size  Location     Type
  6048 ;;  state           1    wreg     unsigned char 
  6049 ;; Auto vars:     Size  Location     Type
  6050 ;;  state           1   53[BANK0 ] unsigned char 
  6051 ;; Return value:  Size  Location     Type
  6052 ;;		None               void
  6053 ;; Registers used:
  6054 ;;		wreg, status,2, status,0
  6055 ;; Tracked objects:
  6056 ;;		On entry : F/0
  6057 ;;		On exit  : F/0
  6058 ;;		Unchanged: 0/0
  6059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6060 ;;      Params:         0       0       0       0       0
  6061 ;;      Locals:         0       1       0       0       0
  6062 ;;      Temps:          0       0       0       0       0
  6063 ;;      Totals:         0       1       0       0       0
  6064 ;;Total ram usage:        1 bytes
  6065 ;; Hardware stack levels used:    1
  6066 ;; Hardware stack levels required when called:   12
  6067 ;; This function calls:
  6068 ;;		Nothing
  6069 ;; This function is called by:
  6070 ;;		_InitLDO
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           	psect	text38
  6075  000000                     __ptext38:
  6076                           	opt stack 0
  6077  000000                     _LDO_Pass:
  6078                           	opt stack 0
  6079  000000                     __end_of_LDO_Pass:
  6080                           	opt stack 0
  6081                           tblptru	equ	0xFF8
  6082                           tblptrh	equ	0xFF7
  6083                           tblptrl	equ	0xFF6
  6084                           tablat	equ	0xFF5
  6085                           prodh	equ	0xFF4
  6086                           prodl	equ	0xFF3
  6087                           intcon	equ	0xFF2
  6088                           intcon2	equ	0xFF1
  6089                           intcon3	equ	0xFF0
  6090                           postinc0	equ	0xFEE
  6091                           wreg	equ	0xFE8
  6092                           postdec1	equ	0xFE5
  6093                           fsr1l	equ	0xFE1
  6094                           status	equ	0xFD8
  6095                           
  6096 ;; *************** function _InitIR *****************
  6097 ;; Defined at:
  6098 ;;		line 72 in file "IR.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;		None
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;		None
  6103 ;; Return value:  Size  Location     Type
  6104 ;;		None               void
  6105 ;; Registers used:
  6106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6107 ;; Tracked objects:
  6108 ;;		On entry : F/0
  6109 ;;		On exit  : F/0
  6110 ;;		Unchanged: 0/0
  6111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6112 ;;      Params:         0       0       0       0       0
  6113 ;;      Locals:         0       0       0       0       0
  6114 ;;      Temps:          0       0       0       0       0
  6115 ;;      Totals:         0       0       0       0       0
  6116 ;;Total ram usage:        0 bytes
  6117 ;; Hardware stack levels used:    1
  6118 ;; Hardware stack levels required when called:   13
  6119 ;; This function calls:
  6120 ;;		_MSC_CleanBufferInt
  6121 ;; This function is called by:
  6122 ;;		_Init_System
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           	psect	text39
  6127  0019D6                     __ptext39:
  6128                           	opt stack 0
  6129  0019D6                     _InitIR:
  6130                           	opt stack 16
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;IR.c: 74: MSC_CleanBufferInt(&IR_DataTiming,96);
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;incstack = 0
  6137  0019D6  0E00               	movlw	low _IR_DataTiming
  6138  0019D8  6FB5               	movwf	MSC_CleanBufferInt@data& (0+255),b
  6139  0019DA  0E02               	movlw	high _IR_DataTiming
  6140  0019DC  6FB6               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  6141  0019DE  6BB8               	clrf	(MSC_CleanBufferInt@count+1)& (0+255),b
  6142  0019E0  0E60               	movlw	96
  6143  0019E2  6FB7               	movwf	MSC_CleanBufferInt@count& (0+255),b
  6144  0019E4  EFCE  F00A         	goto	_MSC_CleanBufferInt	;wreg free
  6145  0019E8                     __end_of_InitIR:
  6146                           	opt stack 0
  6147                           tblptru	equ	0xFF8
  6148                           tblptrh	equ	0xFF7
  6149                           tblptrl	equ	0xFF6
  6150                           tablat	equ	0xFF5
  6151                           prodh	equ	0xFF4
  6152                           prodl	equ	0xFF3
  6153                           intcon	equ	0xFF2
  6154                           intcon2	equ	0xFF1
  6155                           intcon3	equ	0xFF0
  6156                           postinc0	equ	0xFEE
  6157                           wreg	equ	0xFE8
  6158                           postdec1	equ	0xFE5
  6159                           fsr1l	equ	0xFE1
  6160                           status	equ	0xFD8
  6161                           
  6162 ;; *************** function _MSC_CleanBufferInt *****************
  6163 ;; Defined at:
  6164 ;;		line 90 in file "MISC.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;  data            2   53[BANK0 ] PTR unsigned int 
  6167 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
  6168 ;;  count           2   55[BANK0 ] unsigned int 
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;  i               2   57[BANK0 ] unsigned int 
  6171 ;; Return value:  Size  Location     Type
  6172 ;;		None               void
  6173 ;; Registers used:
  6174 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6175 ;; Tracked objects:
  6176 ;;		On entry : F/0
  6177 ;;		On exit  : F/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6180 ;;      Params:         0       4       0       0       0
  6181 ;;      Locals:         0       2       0       0       0
  6182 ;;      Temps:          0       0       0       0       0
  6183 ;;      Totals:         0       6       0       0       0
  6184 ;;Total ram usage:        6 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:   12
  6187 ;; This function calls:
  6188 ;;		Nothing
  6189 ;; This function is called by:
  6190 ;;		_InitRF
  6191 ;;		_InitIR
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           	psect	text40
  6196  00159C                     __ptext40:
  6197                           	opt stack 0
  6198  00159C                     _MSC_CleanBufferInt:
  6199                           	opt stack 16
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;MISC.c: 92: unsigned int i=0;
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;incstack = 0
  6206  00159C  6BB9               	clrf	MSC_CleanBufferInt@i& (0+255),b
  6207  00159E  6BBA               	clrf	(MSC_CleanBufferInt@i+1)& (0+255),b
  6208                           
  6209                           ;MISC.c: 93: for(i=0; i<count;i++)
  6210  0015A0  6BB9               	clrf	MSC_CleanBufferInt@i& (0+255),b
  6211  0015A2  6BBA               	clrf	(MSC_CleanBufferInt@i+1)& (0+255),b
  6212  0015A4  D00D               	goto	l4507
  6213  0015A6                     l4503:
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;MISC.c: 94: {
  6217                           ;MISC.c: 95: data[i]= 0;
  6218  0015A6  90D8               	bcf	status,0,c
  6219  0015A8  35B9               	rlcf	MSC_CleanBufferInt@i& (0+255),w,b
  6220  0015AA  6ED9               	movwf	fsr2l,c
  6221  0015AC  35BA               	rlcf	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  6222  0015AE  6EDA               	movwf	fsr2h,c
  6223  0015B0  51B5               	movf	MSC_CleanBufferInt@data& (0+255),w,b
  6224  0015B2  26D9               	addwf	fsr2l,f,c
  6225  0015B4  51B6               	movf	(MSC_CleanBufferInt@data+1)& (0+255),w,b
  6226  0015B6  22DA               	addwfc	fsr2h,f,c
  6227  0015B8  6ADE               	clrf	postinc2,c
  6228  0015BA  6ADD               	clrf	postdec2,c
  6229                           
  6230                           ; BSR set to: 0
  6231  0015BC  4BB9               	infsnz	MSC_CleanBufferInt@i& (0+255),f,b
  6232  0015BE  2BBA               	incf	(MSC_CleanBufferInt@i+1)& (0+255),f,b
  6233  0015C0                     l4507:
  6234                           
  6235                           ; BSR set to: 0
  6236  0015C0  51B7               	movf	MSC_CleanBufferInt@count& (0+255),w,b
  6237  0015C2  5DB9               	subwf	MSC_CleanBufferInt@i& (0+255),w,b
  6238  0015C4  51B8               	movf	(MSC_CleanBufferInt@count+1)& (0+255),w,b
  6239  0015C6  59BA               	subwfb	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  6240  0015C8  E3EE               	bnc	l4503
  6241                           
  6242                           ; BSR set to: 0
  6243  0015CA  0012               	return		;funcret
  6244  0015CC                     __end_of_MSC_CleanBufferInt:
  6245                           	opt stack 0
  6246                           tblptru	equ	0xFF8
  6247                           tblptrh	equ	0xFF7
  6248                           tblptrl	equ	0xFF6
  6249                           tablat	equ	0xFF5
  6250                           prodh	equ	0xFF4
  6251                           prodl	equ	0xFF3
  6252                           intcon	equ	0xFF2
  6253                           intcon2	equ	0xFF1
  6254                           intcon3	equ	0xFF0
  6255                           postinc0	equ	0xFEE
  6256                           wreg	equ	0xFE8
  6257                           postdec1	equ	0xFE5
  6258                           fsr1l	equ	0xFE1
  6259                           postinc2	equ	0xFDE
  6260                           postdec2	equ	0xFDD
  6261                           fsr2h	equ	0xFDA
  6262                           fsr2l	equ	0xFD9
  6263                           status	equ	0xFD8
  6264                           
  6265 ;; *************** function _InitFlash *****************
  6266 ;; Defined at:
  6267 ;;		line 60 in file "FLASH.c"
  6268 ;; Parameters:    Size  Location     Type
  6269 ;;		None
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;		None
  6272 ;; Return value:  Size  Location     Type
  6273 ;;		None               void
  6274 ;; Registers used:
  6275 ;;		None
  6276 ;; Tracked objects:
  6277 ;;		On entry : 0/0
  6278 ;;		On exit  : 0/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6281 ;;      Params:         0       0       0       0       0
  6282 ;;      Locals:         0       0       0       0       0
  6283 ;;      Temps:          0       0       0       0       0
  6284 ;;      Totals:         0       0       0       0       0
  6285 ;;Total ram usage:        0 bytes
  6286 ;; Hardware stack levels used:    1
  6287 ;; Hardware stack levels required when called:   12
  6288 ;; This function calls:
  6289 ;;		Nothing
  6290 ;; This function is called by:
  6291 ;;		_Init_System
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           	psect	text41
  6296  001BCE                     __ptext41:
  6297                           	opt stack 0
  6298  001BCE                     _InitFlash:
  6299                           	opt stack 17
  6300                           
  6301                           ;FLASH.c: 63: __nop();
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;incstack = 0
  6305  001BCE  F000               	nop	
  6306  001BD0  0012               	return		;funcret
  6307  001BD2                     __end_of_InitFlash:
  6308                           	opt stack 0
  6309                           tblptru	equ	0xFF8
  6310                           tblptrh	equ	0xFF7
  6311                           tblptrl	equ	0xFF6
  6312                           tablat	equ	0xFF5
  6313                           prodh	equ	0xFF4
  6314                           prodl	equ	0xFF3
  6315                           intcon	equ	0xFF2
  6316                           intcon2	equ	0xFF1
  6317                           intcon3	equ	0xFF0
  6318                           postinc0	equ	0xFEE
  6319                           wreg	equ	0xFE8
  6320                           postdec1	equ	0xFE5
  6321                           fsr1l	equ	0xFE1
  6322                           postinc2	equ	0xFDE
  6323                           postdec2	equ	0xFDD
  6324                           fsr2h	equ	0xFDA
  6325                           fsr2l	equ	0xFD9
  6326                           status	equ	0xFD8
  6327                           
  6328 ;; *************** function _InitButton *****************
  6329 ;; Defined at:
  6330 ;;		line 59 in file "BUTTON.c"
  6331 ;; Parameters:    Size  Location     Type
  6332 ;;		None
  6333 ;; Auto vars:     Size  Location     Type
  6334 ;;		None
  6335 ;; Return value:  Size  Location     Type
  6336 ;;		None               void
  6337 ;; Registers used:
  6338 ;;		wreg, status,2, status,0, cstack
  6339 ;; Tracked objects:
  6340 ;;		On entry : F/0
  6341 ;;		On exit  : F/0
  6342 ;;		Unchanged: 0/0
  6343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6344 ;;      Params:         0       0       0       0       0
  6345 ;;      Locals:         0       0       0       0       0
  6346 ;;      Temps:          0       0       0       0       0
  6347 ;;      Totals:         0       0       0       0       0
  6348 ;;Total ram usage:        0 bytes
  6349 ;; Hardware stack levels used:    1
  6350 ;; Hardware stack levels required when called:   13
  6351 ;; This function calls:
  6352 ;;		_BUT_IR_PinChangeInt
  6353 ;;		_BUT_ReadButton
  6354 ;; This function is called by:
  6355 ;;		_Init_System
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           	psect	text42
  6360  001B84                     __ptext42:
  6361                           	opt stack 0
  6362  001B84                     _InitButton:
  6363                           	opt stack 16
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;BUTTON.c: 62: INTCON2bits.RBIP = 0;
  6367                           
  6368                           ;incstack = 0
  6369  001B84  90F1               	bcf	intcon2,0,c	;volatile
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;BUTTON.c: 63: BUT_ReadButton();
  6373  001B86  ECDD  F00B         	call	_BUT_ReadButton	;wreg free
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;BUTTON.c: 64: BUT_IR_PinChangeInt(1);
  6377  001B8A  0E01               	movlw	1
  6378  001B8C  EF61  F00D         	goto	_BUT_IR_PinChangeInt
  6379  001B90                     __end_of_InitButton:
  6380                           	opt stack 0
  6381                           tblptru	equ	0xFF8
  6382                           tblptrh	equ	0xFF7
  6383                           tblptrl	equ	0xFF6
  6384                           tablat	equ	0xFF5
  6385                           prodh	equ	0xFF4
  6386                           prodl	equ	0xFF3
  6387                           intcon	equ	0xFF2
  6388                           intcon2	equ	0xFF1
  6389                           intcon3	equ	0xFF0
  6390                           postinc0	equ	0xFEE
  6391                           wreg	equ	0xFE8
  6392                           postdec1	equ	0xFE5
  6393                           fsr1l	equ	0xFE1
  6394                           postinc2	equ	0xFDE
  6395                           postdec2	equ	0xFDD
  6396                           fsr2h	equ	0xFDA
  6397                           fsr2l	equ	0xFD9
  6398                           status	equ	0xFD8
  6399                           
  6400 ;; *************** function _BUT_ReadButton *****************
  6401 ;; Defined at:
  6402 ;;		line 73 in file "BUTTON.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;		None
  6405 ;; Auto vars:     Size  Location     Type
  6406 ;;  value           1   53[BANK0 ] unsigned char 
  6407 ;; Return value:  Size  Location     Type
  6408 ;;                  1    wreg      unsigned char 
  6409 ;; Registers used:
  6410 ;;		wreg, status,2, status,0
  6411 ;; Tracked objects:
  6412 ;;		On entry : F/0
  6413 ;;		On exit  : F/0
  6414 ;;		Unchanged: 0/0
  6415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6416 ;;      Params:         0       0       0       0       0
  6417 ;;      Locals:         0       1       0       0       0
  6418 ;;      Temps:          0       0       0       0       0
  6419 ;;      Totals:         0       1       0       0       0
  6420 ;;Total ram usage:        1 bytes
  6421 ;; Hardware stack levels used:    1
  6422 ;; Hardware stack levels required when called:   12
  6423 ;; This function calls:
  6424 ;;		Nothing
  6425 ;; This function is called by:
  6426 ;;		_Init_System
  6427 ;;		_InitButton
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           	psect	text43
  6432  0017BA                     __ptext43:
  6433                           	opt stack 0
  6434  0017BA                     _BUT_ReadButton:
  6435                           	opt stack 16
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;BUTTON.c: 75: unsigned char value = PORTB;
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;incstack = 0
  6442  0017BA  CF81 F0B5          	movff	3969,BUT_ReadButton@value	;volatile
  6443                           
  6444                           ;BUTTON.c: 76: if((value & 0x20) == 0)
  6445  0017BE  BBB5               	btfsc	BUT_ReadButton@value& (0+255),5,b
  6446  0017C0  D007               	goto	l4459
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;BUTTON.c: 77: {
  6450                           ;BUTTON.c: 79: if(ButtonValue_prev == 0)
  6451  0017C2  51C4               	movf	_ButtonValue_prev& (0+255),w,b
  6452  0017C4  E102               	bnz	l739
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;BUTTON.c: 80: {
  6456                           ;BUTTON.c: 81: ButtonChange = 1;
  6457  0017C6  0E01               	movlw	1
  6458  0017C8  6E66               	movwf	_ButtonChange,c
  6459  0017CA                     l739:
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;BUTTON.c: 82: }
  6463                           ;BUTTON.c: 83: ButtonValue_prev = 1;
  6464  0017CA  0E01               	movlw	1
  6465  0017CC  6FC4               	movwf	_ButtonValue_prev& (0+255),b
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;BUTTON.c: 84: return 1;
  6469  0017CE  0C01               	retlw	1
  6470  0017D0                     l4459:
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;BUTTON.c: 85: }
  6474                           ;BUTTON.c: 88: if(ButtonValue_prev == 1)
  6475  0017D0  05C4               	decf	_ButtonValue_prev& (0+255),w,b
  6476  0017D2  E102               	bnz	l4463
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;BUTTON.c: 89: {
  6480                           ;BUTTON.c: 90: ButtonChange = 1;
  6481  0017D4  0E01               	movlw	1
  6482  0017D6  6E66               	movwf	_ButtonChange,c
  6483  0017D8                     l4463:
  6484                           
  6485                           ; BSR set to: 0
  6486                           ;BUTTON.c: 91: }
  6487                           ;BUTTON.c: 92: ButtonValue_prev = 0;
  6488  0017D8  6BC4               	clrf	_ButtonValue_prev& (0+255),b
  6489                           
  6490                           ; BSR set to: 0
  6491                           
  6492                           ; BSR set to: 0
  6493                           ;BUTTON.c: 93: return 0;
  6494  0017DA  0C00               	retlw	0	;funcret
  6495  0017DC                     __end_of_BUT_ReadButton:
  6496                           	opt stack 0
  6497                           tblptru	equ	0xFF8
  6498                           tblptrh	equ	0xFF7
  6499                           tblptrl	equ	0xFF6
  6500                           tablat	equ	0xFF5
  6501                           prodh	equ	0xFF4
  6502                           prodl	equ	0xFF3
  6503                           intcon	equ	0xFF2
  6504                           intcon2	equ	0xFF1
  6505                           intcon3	equ	0xFF0
  6506                           postinc0	equ	0xFEE
  6507                           wreg	equ	0xFE8
  6508                           postdec1	equ	0xFE5
  6509                           fsr1l	equ	0xFE1
  6510                           postinc2	equ	0xFDE
  6511                           postdec2	equ	0xFDD
  6512                           fsr2h	equ	0xFDA
  6513                           fsr2l	equ	0xFD9
  6514                           status	equ	0xFD8
  6515                           
  6516 ;; *************** function _BUT_IR_PinChangeInt *****************
  6517 ;; Defined at:
  6518 ;;		line 101 in file "BUTTON.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  state           1    wreg     unsigned char 
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;  state           1   53[BANK0 ] unsigned char 
  6523 ;; Return value:  Size  Location     Type
  6524 ;;		None               void
  6525 ;; Registers used:
  6526 ;;		wreg, status,2
  6527 ;; Tracked objects:
  6528 ;;		On entry : E/1
  6529 ;;		On exit  : F/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6532 ;;      Params:         0       0       0       0       0
  6533 ;;      Locals:         0       1       0       0       0
  6534 ;;      Temps:          0       0       0       0       0
  6535 ;;      Totals:         0       1       0       0       0
  6536 ;;Total ram usage:        1 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; Hardware stack levels required when called:   12
  6539 ;; This function calls:
  6540 ;;		Nothing
  6541 ;; This function is called by:
  6542 ;;		_SYS_EnableInt
  6543 ;;		_InitButton
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           	psect	text44
  6548  001AC2                     __ptext44:
  6549                           	opt stack 0
  6550  001AC2                     _BUT_IR_PinChangeInt:
  6551                           	opt stack 17
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;incstack = 0
  6555                           ;BUT_IR_PinChangeInt@state stored from wreg
  6556  001AC2  0100               	movlb	0	; () banked
  6557  001AC4  6FB5               	movwf	BUT_IR_PinChangeInt@state& (0+255),b
  6558                           
  6559                           ;BUTTON.c: 103: if(state)
  6560  001AC6  51B5               	movf	BUT_IR_PinChangeInt@state& (0+255),w,b
  6561  001AC8  E002               	bz	l744
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;BUTTON.c: 104: {
  6565                           ;BUTTON.c: 106: INTCONbits.RBIE = 1;
  6566  001ACA  86F2               	bsf	intcon,3,c	;volatile
  6567                           
  6568                           ;BUTTON.c: 107: }
  6569  001ACC  0012               	return	
  6570  001ACE                     l744:
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;BUTTON.c: 108: else
  6574                           ;BUTTON.c: 109: {
  6575                           ;BUTTON.c: 111: INTCONbits.RBIE = 0;
  6576  001ACE  96F2               	bcf	intcon,3,c	;volatile
  6577                           
  6578                           ; BSR set to: 0
  6579  001AD0  0012               	return		;funcret
  6580  001AD2                     __end_of_BUT_IR_PinChangeInt:
  6581                           	opt stack 0
  6582                           tblptru	equ	0xFF8
  6583                           tblptrh	equ	0xFF7
  6584                           tblptrl	equ	0xFF6
  6585                           tablat	equ	0xFF5
  6586                           prodh	equ	0xFF4
  6587                           prodl	equ	0xFF3
  6588                           intcon	equ	0xFF2
  6589                           intcon2	equ	0xFF1
  6590                           intcon3	equ	0xFF0
  6591                           postinc0	equ	0xFEE
  6592                           wreg	equ	0xFE8
  6593                           postdec1	equ	0xFE5
  6594                           fsr1l	equ	0xFE1
  6595                           postinc2	equ	0xFDE
  6596                           postdec2	equ	0xFDD
  6597                           fsr2h	equ	0xFDA
  6598                           fsr2l	equ	0xFD9
  6599                           status	equ	0xFD8
  6600                           
  6601 ;; *************** function _InitADC *****************
  6602 ;; Defined at:
  6603 ;;		line 61 in file "ADC.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;		None
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;		None
  6608 ;; Return value:  Size  Location     Type
  6609 ;;		None               void
  6610 ;; Registers used:
  6611 ;;		wreg, status,2, status,0, cstack
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : F/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6617 ;;      Params:         0       0       0       0       0
  6618 ;;      Locals:         0       0       0       0       0
  6619 ;;      Temps:          0       0       0       0       0
  6620 ;;      Totals:         0       0       0       0       0
  6621 ;;Total ram usage:        0 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; Hardware stack levels required when called:   13
  6624 ;; This function calls:
  6625 ;;		_ADC_ChangeChannel
  6626 ;;		_ADC_ConversionInt
  6627 ;;		_ADC_Module
  6628 ;; This function is called by:
  6629 ;;		_Init_System
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           	psect	text45
  6634  00174E                     __ptext45:
  6635                           	opt stack 0
  6636  00174E                     _InitADC:
  6637                           	opt stack 16
  6638                           
  6639                           ;ADC.c: 63: ADCON1bits.VCFG1 = 0;
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;incstack = 0
  6643  00174E  9AC1               	bcf	4033,5,c	;volatile
  6644                           
  6645                           ;ADC.c: 64: ADCON1bits.VCFG0 = 0;
  6646  001750  98C1               	bcf	4033,4,c	;volatile
  6647                           
  6648                           ;ADC.c: 65: ADCON2bits.ADFM = 1;
  6649  001752  8EC0               	bsf	4032,7,c	;volatile
  6650                           
  6651                           ;ADC.c: 66: ADCON2bits.ACQT = 0b111;
  6652  001754  0E38               	movlw	56
  6653  001756  12C0               	iorwf	4032,f,c	;volatile
  6654                           
  6655                           ;ADC.c: 67: ADCON2bits.ADCS = 0b110;
  6656  001758  50C0               	movf	4032,w,c	;volatile
  6657  00175A  0BF8               	andlw	-8
  6658  00175C  0906               	iorlw	6
  6659  00175E  6EC0               	movwf	4032,c	;volatile
  6660                           
  6661                           ;ADC.c: 68: IPR1bits.ADIP = 0;
  6662  001760  9C9F               	bcf	3999,6,c	;volatile
  6663                           
  6664                           ;ADC.c: 69: ADC_ChangeChannel();
  6665  001762  EC70  F00C         	call	_ADC_ChangeChannel	;wreg free
  6666                           
  6667                           ;ADC.c: 70: ADC_ConversionInt(1);
  6668  001766  0E01               	movlw	1
  6669  001768  EC71  F00D         	call	_ADC_ConversionInt
  6670                           
  6671                           ; BSR set to: 0
  6672                           ;ADC.c: 71: ADC_Module(1);
  6673  00176C  0E01               	movlw	1
  6674  00176E  EF69  F00D         	goto	_ADC_Module
  6675  001772                     __end_of_InitADC:
  6676                           	opt stack 0
  6677                           tblptru	equ	0xFF8
  6678                           tblptrh	equ	0xFF7
  6679                           tblptrl	equ	0xFF6
  6680                           tablat	equ	0xFF5
  6681                           prodh	equ	0xFF4
  6682                           prodl	equ	0xFF3
  6683                           intcon	equ	0xFF2
  6684                           intcon2	equ	0xFF1
  6685                           intcon3	equ	0xFF0
  6686                           postinc0	equ	0xFEE
  6687                           wreg	equ	0xFE8
  6688                           postdec1	equ	0xFE5
  6689                           fsr1l	equ	0xFE1
  6690                           postinc2	equ	0xFDE
  6691                           postdec2	equ	0xFDD
  6692                           fsr2h	equ	0xFDA
  6693                           fsr2l	equ	0xFD9
  6694                           status	equ	0xFD8
  6695                           
  6696 ;; *************** function _ADC_Module *****************
  6697 ;; Defined at:
  6698 ;;		line 126 in file "ADC.c"
  6699 ;; Parameters:    Size  Location     Type
  6700 ;;  state           1    wreg     unsigned char 
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;  state           1   53[BANK0 ] unsigned char 
  6703 ;; Return value:  Size  Location     Type
  6704 ;;		None               void
  6705 ;; Registers used:
  6706 ;;		wreg, status,2
  6707 ;; Tracked objects:
  6708 ;;		On entry : F/0
  6709 ;;		On exit  : F/0
  6710 ;;		Unchanged: 0/0
  6711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6712 ;;      Params:         0       0       0       0       0
  6713 ;;      Locals:         0       1       0       0       0
  6714 ;;      Temps:          0       0       0       0       0
  6715 ;;      Totals:         0       1       0       0       0
  6716 ;;Total ram usage:        1 bytes
  6717 ;; Hardware stack levels used:    1
  6718 ;; Hardware stack levels required when called:   12
  6719 ;; This function calls:
  6720 ;;		Nothing
  6721 ;; This function is called by:
  6722 ;;		_InitADC
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           	psect	text46
  6727  001AD2                     __ptext46:
  6728                           	opt stack 0
  6729  001AD2                     _ADC_Module:
  6730                           	opt stack 16
  6731                           
  6732                           ; BSR set to: 0
  6733                           ;incstack = 0
  6734                           ;ADC_Module@state stored from wreg
  6735  001AD2  6FB5               	movwf	ADC_Module@state& (0+255),b
  6736                           
  6737                           ;ADC.c: 128: if(state)
  6738  001AD4  0100               	movlb	0	; () banked
  6739  001AD6  51B5               	movf	ADC_Module@state& (0+255),w,b
  6740  001AD8  E002               	bz	l1087
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;ADC.c: 129: {
  6744                           ;ADC.c: 131: ADCON0bits.ADON = 1;
  6745  001ADA  80C2               	bsf	4034,0,c	;volatile
  6746                           
  6747                           ;ADC.c: 132: }
  6748  001ADC  0012               	return	
  6749  001ADE                     l1087:
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;ADC.c: 133: else
  6753                           ;ADC.c: 134: {
  6754                           ;ADC.c: 136: ADCON0bits.ADON = 0;
  6755  001ADE  90C2               	bcf	4034,0,c	;volatile
  6756                           
  6757                           ; BSR set to: 0
  6758  001AE0  0012               	return		;funcret
  6759  001AE2                     __end_of_ADC_Module:
  6760                           	opt stack 0
  6761                           tblptru	equ	0xFF8
  6762                           tblptrh	equ	0xFF7
  6763                           tblptrl	equ	0xFF6
  6764                           tablat	equ	0xFF5
  6765                           prodh	equ	0xFF4
  6766                           prodl	equ	0xFF3
  6767                           intcon	equ	0xFF2
  6768                           intcon2	equ	0xFF1
  6769                           intcon3	equ	0xFF0
  6770                           postinc0	equ	0xFEE
  6771                           wreg	equ	0xFE8
  6772                           postdec1	equ	0xFE5
  6773                           fsr1l	equ	0xFE1
  6774                           postinc2	equ	0xFDE
  6775                           postdec2	equ	0xFDD
  6776                           fsr2h	equ	0xFDA
  6777                           fsr2l	equ	0xFD9
  6778                           status	equ	0xFD8
  6779                           
  6780 ;; *************** function _ADC_ConversionInt *****************
  6781 ;; Defined at:
  6782 ;;		line 169 in file "ADC.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;  state           1    wreg     unsigned char 
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;  state           1   53[BANK0 ] unsigned char 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;		None               void
  6789 ;; Registers used:
  6790 ;;		wreg, status,2
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : F/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6796 ;;      Params:         0       0       0       0       0
  6797 ;;      Locals:         0       1       0       0       0
  6798 ;;      Temps:          0       0       0       0       0
  6799 ;;      Totals:         0       1       0       0       0
  6800 ;;Total ram usage:        1 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:   12
  6803 ;; This function calls:
  6804 ;;		Nothing
  6805 ;; This function is called by:
  6806 ;;		_InitADC
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           	psect	text47
  6811  001AE2                     __ptext47:
  6812                           	opt stack 0
  6813  001AE2                     _ADC_ConversionInt:
  6814                           	opt stack 16
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;incstack = 0
  6818                           ;ADC_ConversionInt@state stored from wreg
  6819  001AE2  0100               	movlb	0	; () banked
  6820  001AE4  6FB5               	movwf	ADC_ConversionInt@state& (0+255),b
  6821                           
  6822                           ;ADC.c: 171: if(state)
  6823  001AE6  51B5               	movf	ADC_ConversionInt@state& (0+255),w,b
  6824  001AE8  E002               	bz	l1099
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;ADC.c: 172: {
  6828                           ;ADC.c: 174: PIE1bits.ADIE = 1;
  6829  001AEA  8C9D               	bsf	3997,6,c	;volatile
  6830                           
  6831                           ;ADC.c: 175: }
  6832  001AEC  0012               	return	
  6833  001AEE                     l1099:
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;ADC.c: 176: else
  6837                           ;ADC.c: 177: {
  6838                           ;ADC.c: 179: PIE1bits.ADIE = 0;
  6839  001AEE  9C9D               	bcf	3997,6,c	;volatile
  6840                           
  6841                           ; BSR set to: 0
  6842  001AF0  0012               	return		;funcret
  6843  001AF2                     __end_of_ADC_ConversionInt:
  6844                           	opt stack 0
  6845                           tblptru	equ	0xFF8
  6846                           tblptrh	equ	0xFF7
  6847                           tblptrl	equ	0xFF6
  6848                           tablat	equ	0xFF5
  6849                           prodh	equ	0xFF4
  6850                           prodl	equ	0xFF3
  6851                           intcon	equ	0xFF2
  6852                           intcon2	equ	0xFF1
  6853                           intcon3	equ	0xFF0
  6854                           postinc0	equ	0xFEE
  6855                           wreg	equ	0xFE8
  6856                           postdec1	equ	0xFE5
  6857                           fsr1l	equ	0xFE1
  6858                           postinc2	equ	0xFDE
  6859                           postdec2	equ	0xFDD
  6860                           fsr2h	equ	0xFDA
  6861                           fsr2l	equ	0xFD9
  6862                           status	equ	0xFD8
  6863                           
  6864 ;; *************** function _ADC_ChangeChannel *****************
  6865 ;; Defined at:
  6866 ;;		line 107 in file "ADC.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;		None
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;		None
  6871 ;; Return value:  Size  Location     Type
  6872 ;;		None               void
  6873 ;; Registers used:
  6874 ;;		wreg, status,2, status,0
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6880 ;;      Params:         0       0       0       0       0
  6881 ;;      Locals:         0       0       0       0       0
  6882 ;;      Temps:          0       0       0       0       0
  6883 ;;      Totals:         0       0       0       0       0
  6884 ;;Total ram usage:        0 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:   12
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		_InitADC
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	text48
  6895  0018E0                     __ptext48:
  6896                           	opt stack 0
  6897  0018E0                     _ADC_ChangeChannel:
  6898                           	opt stack 16
  6899                           
  6900                           ;ADC.c: 109: if(ADC_CurrentSource == 10)
  6901                           
  6902                           ; BSR set to: 0
  6903                           ;incstack = 0
  6904  0018E0  0E0A               	movlw	10
  6905  0018E2  186D               	xorwf	_ADC_CurrentSource,w,c
  6906  0018E4  E107               	bnz	l4671
  6907                           
  6908                           ;ADC.c: 110: {
  6909                           ;ADC.c: 111: ADC_CurrentSource = 11;
  6910  0018E6  0E0B               	movlw	11
  6911  0018E8  6E6D               	movwf	_ADC_CurrentSource,c
  6912                           
  6913                           ;ADC.c: 112: ADCON0bits.CHS = 1;
  6914  0018EA  50C2               	movf	4034,w,c	;volatile
  6915  0018EC  0BC3               	andlw	-61
  6916  0018EE  0904               	iorlw	4
  6917  0018F0  6EC2               	movwf	4034,c	;volatile
  6918                           
  6919                           ;ADC.c: 113: }
  6920  0018F2  0012               	return	
  6921  0018F4                     l4671:
  6922                           
  6923                           ;ADC.c: 114: else
  6924                           ;ADC.c: 115: {
  6925                           ;ADC.c: 116: ADC_CurrentSource = 10;
  6926  0018F4  0E0A               	movlw	10
  6927  0018F6  6E6D               	movwf	_ADC_CurrentSource,c
  6928                           
  6929                           ;ADC.c: 117: ADCON0bits.CHS = 0;
  6930  0018F8  0EC3               	movlw	-61
  6931  0018FA  16C2               	andwf	4034,f,c	;volatile
  6932  0018FC  0CC3               	retlw	195	;funcret
  6933  0018FE                     __end_of_ADC_ChangeChannel:
  6934                           	opt stack 0
  6935                           tblptru	equ	0xFF8
  6936                           tblptrh	equ	0xFF7
  6937                           tblptrl	equ	0xFF6
  6938                           tablat	equ	0xFF5
  6939                           prodh	equ	0xFF4
  6940                           prodl	equ	0xFF3
  6941                           intcon	equ	0xFF2
  6942                           intcon2	equ	0xFF1
  6943                           intcon3	equ	0xFF0
  6944                           postinc0	equ	0xFEE
  6945                           wreg	equ	0xFE8
  6946                           postdec1	equ	0xFE5
  6947                           fsr1l	equ	0xFE1
  6948                           postinc2	equ	0xFDE
  6949                           postdec2	equ	0xFDD
  6950                           fsr2h	equ	0xFDA
  6951                           fsr2l	equ	0xFD9
  6952                           status	equ	0xFD8
  6953                           
  6954 ;; *************** function _IR_ReadReceiver *****************
  6955 ;; Defined at:
  6956 ;;		line 82 in file "IR.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;		None
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;  value           1   53[BANK0 ] unsigned char 
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  1    wreg      unsigned char 
  6963 ;; Registers used:
  6964 ;;		wreg, status,2, status,0
  6965 ;; Tracked objects:
  6966 ;;		On entry : F/0
  6967 ;;		On exit  : F/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6970 ;;      Params:         0       0       0       0       0
  6971 ;;      Locals:         0       1       0       0       0
  6972 ;;      Temps:          0       0       0       0       0
  6973 ;;      Totals:         0       1       0       0       0
  6974 ;;Total ram usage:        1 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:   12
  6977 ;; This function calls:
  6978 ;;		Nothing
  6979 ;; This function is called by:
  6980 ;;		_Init_System
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           	psect	text49
  6985  0017DC                     __ptext49:
  6986                           	opt stack 0
  6987  0017DC                     _IR_ReadReceiver:
  6988                           	opt stack 17
  6989                           
  6990                           ; BSR set to: 0
  6991                           ;IR.c: 84: unsigned char value = PORTB;
  6992                           
  6993                           ;incstack = 0
  6994  0017DC  CF81 F0B5          	movff	3969,IR_ReadReceiver@value	;volatile
  6995                           
  6996                           ;IR.c: 86: if(value & 0x10)
  6997  0017E0  A9B5               	btfss	IR_ReadReceiver@value& (0+255),4,b
  6998  0017E2  D007               	goto	l5105
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;IR.c: 87: {
  7002                           ;IR.c: 88: if(IRValue_prev == 0)
  7003  0017E4  51C6               	movf	_IRValue_prev& (0+255),w,b
  7004  0017E6  E102               	bnz	l571
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;IR.c: 89: {
  7008                           ;IR.c: 90: IRChange = 1;
  7009  0017E8  0E01               	movlw	1
  7010  0017EA  6E67               	movwf	_IRChange,c
  7011  0017EC                     l571:
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;IR.c: 91: }
  7015                           ;IR.c: 92: IRValue_prev = 1;
  7016  0017EC  0E01               	movlw	1
  7017  0017EE  6FC6               	movwf	_IRValue_prev& (0+255),b
  7018                           
  7019                           ; BSR set to: 0
  7020                           ;IR.c: 93: return 1;
  7021  0017F0  0C01               	retlw	1
  7022  0017F2                     l5105:
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;IR.c: 94: }
  7026                           ;IR.c: 96: if(IRValue_prev == 1)
  7027  0017F2  05C6               	decf	_IRValue_prev& (0+255),w,b
  7028  0017F4  E102               	bnz	l5109
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;IR.c: 97: {
  7032                           ;IR.c: 98: IRChange = 1;
  7033  0017F6  0E01               	movlw	1
  7034  0017F8  6E67               	movwf	_IRChange,c
  7035  0017FA                     l5109:
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;IR.c: 99: }
  7039                           ;IR.c: 100: IRValue_prev = 0;
  7040  0017FA  6BC6               	clrf	_IRValue_prev& (0+255),b
  7041                           
  7042                           ; BSR set to: 0
  7043                           
  7044                           ; BSR set to: 0
  7045                           ;IR.c: 101: return 0;
  7046  0017FC  0C00               	retlw	0	;funcret
  7047  0017FE                     __end_of_IR_ReadReceiver:
  7048                           	opt stack 0
  7049                           tblptru	equ	0xFF8
  7050                           tblptrh	equ	0xFF7
  7051                           tblptrl	equ	0xFF6
  7052                           tablat	equ	0xFF5
  7053                           prodh	equ	0xFF4
  7054                           prodl	equ	0xFF3
  7055                           intcon	equ	0xFF2
  7056                           intcon2	equ	0xFF1
  7057                           intcon3	equ	0xFF0
  7058                           postinc0	equ	0xFEE
  7059                           wreg	equ	0xFE8
  7060                           postdec1	equ	0xFE5
  7061                           fsr1l	equ	0xFE1
  7062                           postinc2	equ	0xFDE
  7063                           postdec2	equ	0xFDD
  7064                           fsr2h	equ	0xFDA
  7065                           fsr2l	equ	0xFD9
  7066                           status	equ	0xFD8
  7067                           
  7068 ;; *************** function _Init_App *****************
  7069 ;; Defined at:
  7070 ;;		line 72 in file "USER.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;		None
  7073 ;; Auto vars:     Size  Location     Type
  7074 ;;		None
  7075 ;; Return value:  Size  Location     Type
  7076 ;;		None               void
  7077 ;; Registers used:
  7078 ;;		wreg, status,2
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7084 ;;      Params:         0       0       0       0       0
  7085 ;;      Locals:         0       0       0       0       0
  7086 ;;      Temps:          0       0       0       0       0
  7087 ;;      Totals:         0       0       0       0       0
  7088 ;;Total ram usage:        0 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; Hardware stack levels required when called:   12
  7091 ;; This function calls:
  7092 ;;		Nothing
  7093 ;; This function is called by:
  7094 ;;		_main
  7095 ;; This function uses a non-reentrant model
  7096 ;;
  7097                           
  7098                           	psect	text50
  7099  0014D0                     __ptext50:
  7100                           	opt stack 0
  7101  0014D0                     _Init_App:
  7102                           	opt stack 18
  7103                           
  7104                           ;USER.c: 74: LATA = 0;
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;incstack = 0
  7108  0014D0  6A89               	clrf	3977,c	;volatile
  7109                           
  7110                           ;USER.c: 75: LATB = 0;
  7111  0014D2  6A8A               	clrf	3978,c	;volatile
  7112                           
  7113                           ;USER.c: 76: LATC = 0;
  7114  0014D4  6A8B               	clrf	3979,c	;volatile
  7115                           
  7116                           ;USER.c: 78: ADCON1bits.PCFG = 0b1101;
  7117  0014D6  50C1               	movf	4033,w,c	;volatile
  7118  0014D8  0BF0               	andlw	-16
  7119  0014DA  090D               	iorlw	13
  7120  0014DC  6EC1               	movwf	4033,c	;volatile
  7121                           
  7122                           ;USER.c: 81: TRISCbits.TRISC0 = 1;
  7123  0014DE  8094               	bsf	3988,0,c	;volatile
  7124                           
  7125                           ;USER.c: 82: TRISCbits.TRISC1 = 1;
  7126  0014E0  8294               	bsf	3988,1,c	;volatile
  7127                           
  7128                           ;USER.c: 85: TRISAbits.TRISA0 = 1;
  7129  0014E2  8092               	bsf	3986,0,c	;volatile
  7130                           
  7131                           ;USER.c: 89: TRISAbits.TRISA1 = 1;
  7132  0014E4  8292               	bsf	3986,1,c	;volatile
  7133                           
  7134                           ;USER.c: 92: TRISAbits.TRISA2 = 0;
  7135  0014E6  9492               	bcf	3986,2,c	;volatile
  7136                           
  7137                           ;USER.c: 95: TRISAbits.TRISA5 = 0;
  7138  0014E8  9A92               	bcf	3986,5,c	;volatile
  7139                           
  7140                           ;USER.c: 98: TRISBbits.TRISB1 = 1;
  7141  0014EA  8293               	bsf	3987,1,c	;volatile
  7142                           
  7143                           ;USER.c: 99: TRISBbits.TRISB2 = 1;
  7144  0014EC  8493               	bsf	3987,2,c	;volatile
  7145                           
  7146                           ;USER.c: 103: TRISBbits.TRISB3 = 0;
  7147  0014EE  9693               	bcf	3987,3,c	;volatile
  7148                           
  7149                           ;USER.c: 106: TRISCbits.TRISC2 = 0;
  7150  0014F0  9494               	bcf	3988,2,c	;volatile
  7151                           
  7152                           ;USER.c: 110: TRISCbits.TRISC3 = 1;
  7153  0014F2  8694               	bsf	3988,3,c	;volatile
  7154                           
  7155                           ;USER.c: 113: TRISCbits.TRISC5 = 1;
  7156  0014F4  8A94               	bsf	3988,5,c	;volatile
  7157                           
  7158                           ;USER.c: 117: TRISCbits.TRISC4 = 0;
  7159  0014F6  9894               	bcf	3988,4,c	;volatile
  7160                           
  7161                           ;USER.c: 121: TRISBbits.TRISB0 = 1;
  7162  0014F8  8093               	bsf	3987,0,c	;volatile
  7163                           
  7164                           ;USER.c: 122: TRISBbits.TRISB4 = 1;
  7165  0014FA  8893               	bsf	3987,4,c	;volatile
  7166                           
  7167                           ;USER.c: 126: TRISBbits.TRISB5 = 1;
  7168  0014FC  8A93               	bsf	3987,5,c	;volatile
  7169                           
  7170                           ;USER.c: 130: TRISAbits.TRISA3 = 1;
  7171  0014FE  8692               	bsf	3986,3,c	;volatile
  7172                           
  7173                           ;USER.c: 142: TRISCbits.TRISC6 = 0;
  7174  001500  9C94               	bcf	3988,6,c	;volatile
  7175                           
  7176                           ;USER.c: 143: TRISCbits.TRISC7 = 0;
  7177  001502  9E94               	bcf	3988,7,c	;volatile
  7178  001504  0012               	return		;funcret
  7179  001506                     __end_of_Init_App:
  7180                           	opt stack 0
  7181                           tblptru	equ	0xFF8
  7182                           tblptrh	equ	0xFF7
  7183                           tblptrl	equ	0xFF6
  7184                           tablat	equ	0xFF5
  7185                           prodh	equ	0xFF4
  7186                           prodl	equ	0xFF3
  7187                           intcon	equ	0xFF2
  7188                           intcon2	equ	0xFF1
  7189                           intcon3	equ	0xFF0
  7190                           postinc0	equ	0xFEE
  7191                           wreg	equ	0xFE8
  7192                           postdec1	equ	0xFE5
  7193                           fsr1l	equ	0xFE1
  7194                           postinc2	equ	0xFDE
  7195                           postdec2	equ	0xFDD
  7196                           fsr2h	equ	0xFDA
  7197                           fsr2l	equ	0xFD9
  7198                           status	equ	0xFD8
  7199                           
  7200 ;; *************** function _IR_LoadCode *****************
  7201 ;; Defined at:
  7202 ;;		line 131 in file "IR.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;		None
  7205 ;; Auto vars:     Size  Location     Type
  7206 ;;  HighBound       3   31[BANK1 ] unsigned char 
  7207 ;;  LowBound        3   28[BANK1 ] unsigned char 
  7208 ;;  High2           3   24[BANK1 ] unsigned char 
  7209 ;;  Low2            3   21[BANK1 ] unsigned char 
  7210 ;;  High1           3   17[BANK1 ] unsigned char 
  7211 ;;  Low1            3   14[BANK1 ] unsigned char 
  7212 ;;  CodeSize2       1   27[BANK1 ] unsigned char 
  7213 ;;  CodeSize1       1   20[BANK1 ] unsigned char 
  7214 ;; Return value:  Size  Location     Type
  7215 ;;		None               void
  7216 ;; Registers used:
  7217 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7218 ;; Tracked objects:
  7219 ;;		On entry : F/0
  7220 ;;		On exit  : F/1
  7221 ;;		Unchanged: 0/0
  7222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7223 ;;      Params:         0       0       0       0       0
  7224 ;;      Locals:         0       0      20       0       0
  7225 ;;      Temps:          0       0       0       0       0
  7226 ;;      Totals:         0       0      20       0       0
  7227 ;;Total ram usage:       20 bytes
  7228 ;; Hardware stack levels used:    1
  7229 ;; Hardware stack levels required when called:   14
  7230 ;; This function calls:
  7231 ;;		_IR_CalculateCodesize
  7232 ;;		___ftge
  7233 ;;		___ftmul
  7234 ;;		___fttol
  7235 ;;		___lwtoft
  7236 ;; This function is called by:
  7237 ;;		_main
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           	psect	text51
  7242  003782                     __ptext51:
  7243                           	opt stack 0
  7244  003782                     _IR_LoadCode:
  7245                           	opt stack 16
  7246                           
  7247                           ; BSR set to: 0
  7248                           ;IR.c: 134: double High1 = 0.0;
  7249                           
  7250                           ;incstack = 0
  7251  003782  0101               	movlb	1	; () banked
  7252  003784  6B98               	clrf	IR_LoadCode@High1& (0+255),b
  7253  003786  6B99               	clrf	(IR_LoadCode@High1+1)& (0+255),b
  7254  003788  6B9A               	clrf	(IR_LoadCode@High1+2)& (0+255),b
  7255                           
  7256                           ;IR.c: 135: double Low2 = 0.0;
  7257  00378A  6B9C               	clrf	IR_LoadCode@Low2& (0+255),b
  7258  00378C  6B9D               	clrf	(IR_LoadCode@Low2+1)& (0+255),b
  7259  00378E  6B9E               	clrf	(IR_LoadCode@Low2+2)& (0+255),b
  7260                           
  7261                           ;IR.c: 136: double High2 = 0.0;
  7262  003790  6B9F               	clrf	IR_LoadCode@High2& (0+255),b
  7263  003792  6BA0               	clrf	(IR_LoadCode@High2+1)& (0+255),b
  7264  003794  6BA1               	clrf	(IR_LoadCode@High2+2)& (0+255),b
  7265                           
  7266                           ;IR.c: 137: double LowBound = 0.0;
  7267  003796  6BA3               	clrf	IR_LoadCode@LowBound& (0+255),b
  7268  003798  6BA4               	clrf	(IR_LoadCode@LowBound+1)& (0+255),b
  7269  00379A  6BA5               	clrf	(IR_LoadCode@LowBound+2)& (0+255),b
  7270                           
  7271                           ;IR.c: 138: double HighBound = 0.0;
  7272  00379C  6BA6               	clrf	IR_LoadCode@HighBound& (0+255),b
  7273  00379E  6BA7               	clrf	(IR_LoadCode@HighBound+1)& (0+255),b
  7274  0037A0  6BA8               	clrf	(IR_LoadCode@HighBound+2)& (0+255),b
  7275                           
  7276                           ; BSR set to: 1
  7277                           ;IR.c: 139: unsigned char CodeSize1;
  7278                           ;IR.c: 140: unsigned char CodeSize2;
  7279                           ;IR.c: 142: Low1 = (double)IR_SavedTiming0[0] * (1.0 - 0.3);
  7280  0037A2  6AF6               	clrf	tblptrl,c
  7281  0037A4                     	if	1	;There is more than 1 active tblptr byte
  7282  0037A4  0E24               	movlw	36
  7283  0037A6  6EF7               	movwf	tblptrh,c
  7284  0037A8                     	endif
  7285  0037A8                     	if	0	;There are less than 3 active tblptr bytes
  7286  0037A8                     	endif
  7287  0037A8  0009               	tblrd		*+
  7288  0037AA  CFF5 F0BD          	movff	tablat,___lwtoft@c
  7289  0037AE  000A               	tblrd		*-
  7290  0037B0  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  7291  0037B4  EC81  F00B         	call	___lwtoft	;wreg free
  7292  0037B8  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  7293  0037BC  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  7294  0037C0  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  7295  0037C4  0E33               	movlw	51
  7296  0037C6  0101               	movlb	1	; () banked
  7297  0037C8  6F8A               	movwf	___ftmul@f2& (0+255),b
  7298  0037CA  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  7299  0037CC  0E3F               	movlw	63
  7300  0037CE  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  7301  0037D0  ECBC  F002         	call	___ftmul	;wreg free
  7302  0037D4  C187  F195         	movff	?___ftmul,IR_LoadCode@Low1
  7303  0037D8  C188  F196         	movff	?___ftmul+1,IR_LoadCode@Low1+1
  7304  0037DC  C189  F197         	movff	?___ftmul+2,IR_LoadCode@Low1+2
  7305                           
  7306                           ;IR.c: 143: High1= (double)IR_SavedTiming0[0] * (1.0 + 0.3);
  7307  0037E0  6AF6               	clrf	tblptrl,c
  7308  0037E2                     	if	1	;There is more than 1 active tblptr byte
  7309  0037E2  0E24               	movlw	36
  7310  0037E4  6EF7               	movwf	tblptrh,c
  7311  0037E6                     	endif
  7312  0037E6                     	if	0	;There are less than 3 active tblptr bytes
  7313  0037E6                     	endif
  7314  0037E6  0009               	tblrd		*+
  7315  0037E8  CFF5 F0BD          	movff	tablat,___lwtoft@c
  7316  0037EC  000A               	tblrd		*-
  7317  0037EE  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  7318  0037F2  EC81  F00B         	call	___lwtoft	;wreg free
  7319  0037F6  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  7320  0037FA  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  7321  0037FE  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  7322  003802  0E66               	movlw	102
  7323  003804  0101               	movlb	1	; () banked
  7324  003806  6F8A               	movwf	___ftmul@f2& (0+255),b
  7325  003808  0EA6               	movlw	166
  7326  00380A  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  7327  00380C  0E3F               	movlw	63
  7328  00380E  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  7329  003810  ECBC  F002         	call	___ftmul	;wreg free
  7330  003814  C187  F198         	movff	?___ftmul,IR_LoadCode@High1
  7331  003818  C188  F199         	movff	?___ftmul+1,IR_LoadCode@High1+1
  7332  00381C  C189  F19A         	movff	?___ftmul+2,IR_LoadCode@High1+2
  7333                           
  7334                           ;IR.c: 145: Low2 = (double)IR_SavedTiming1[0] * (1.0 - 0.3);
  7335  003820  0EC0               	movlw	192
  7336  003822  6EF6               	movwf	tblptrl,c
  7337  003824                     	if	1	;There is more than 1 active tblptr byte
  7338  003824  0E24               	movlw	36
  7339  003826  6EF7               	movwf	tblptrh,c
  7340  003828                     	endif
  7341  003828                     	if	0	;There are less than 3 active tblptr bytes
  7342  003828                     	endif
  7343  003828  0009               	tblrd		*+
  7344  00382A  CFF5 F0BD          	movff	tablat,___lwtoft@c
  7345  00382E  000A               	tblrd		*-
  7346  003830  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  7347  003834  EC81  F00B         	call	___lwtoft	;wreg free
  7348  003838  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  7349  00383C  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  7350  003840  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  7351  003844  0E33               	movlw	51
  7352  003846  0101               	movlb	1	; () banked
  7353  003848  6F8A               	movwf	___ftmul@f2& (0+255),b
  7354  00384A  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  7355  00384C  0E3F               	movlw	63
  7356  00384E  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  7357  003850  ECBC  F002         	call	___ftmul	;wreg free
  7358  003854  C187  F19C         	movff	?___ftmul,IR_LoadCode@Low2
  7359  003858  C188  F19D         	movff	?___ftmul+1,IR_LoadCode@Low2+1
  7360  00385C  C189  F19E         	movff	?___ftmul+2,IR_LoadCode@Low2+2
  7361                           
  7362                           ;IR.c: 146: High2= (double)IR_SavedTiming1[0] * (1.0 + 0.3);
  7363  003860  0EC0               	movlw	192
  7364  003862  6EF6               	movwf	tblptrl,c
  7365  003864                     	if	1	;There is more than 1 active tblptr byte
  7366  003864  0E24               	movlw	36
  7367  003866  6EF7               	movwf	tblptrh,c
  7368  003868                     	endif
  7369  003868                     	if	0	;There are less than 3 active tblptr bytes
  7370  003868                     	endif
  7371  003868  0009               	tblrd		*+
  7372  00386A  CFF5 F0BD          	movff	tablat,___lwtoft@c
  7373  00386E  000A               	tblrd		*-
  7374  003870  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  7375  003874  EC81  F00B         	call	___lwtoft	;wreg free
  7376  003878  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  7377  00387C  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  7378  003880  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  7379  003884  0E66               	movlw	102
  7380  003886  0101               	movlb	1	; () banked
  7381  003888  6F8A               	movwf	___ftmul@f2& (0+255),b
  7382  00388A  0EA6               	movlw	166
  7383  00388C  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  7384  00388E  0E3F               	movlw	63
  7385  003890  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  7386  003892  ECBC  F002         	call	___ftmul	;wreg free
  7387  003896  C187  F19F         	movff	?___ftmul,IR_LoadCode@High2
  7388  00389A  C188  F1A0         	movff	?___ftmul+1,IR_LoadCode@High2+1
  7389  00389E  C189  F1A1         	movff	?___ftmul+2,IR_LoadCode@High2+2
  7390                           
  7391                           ;IR.c: 148: LowBound = Low1;
  7392  0038A2  C195  F1A3         	movff	IR_LoadCode@Low1,IR_LoadCode@LowBound
  7393  0038A6  C196  F1A4         	movff	IR_LoadCode@Low1+1,IR_LoadCode@LowBound+1
  7394  0038AA  C197  F1A5         	movff	IR_LoadCode@Low1+2,IR_LoadCode@LowBound+2
  7395                           
  7396                           ;IR.c: 149: if(Low2 < LowBound)
  7397  0038AE  C19C  F0B5         	movff	IR_LoadCode@Low2,___ftge@ff1
  7398  0038B2  C19D  F0B6         	movff	IR_LoadCode@Low2+1,___ftge@ff1+1
  7399  0038B6  C19E  F0B7         	movff	IR_LoadCode@Low2+2,___ftge@ff1+2
  7400  0038BA  C1A3  F0B8         	movff	IR_LoadCode@LowBound,___ftge@ff2
  7401  0038BE  C1A4  F0B9         	movff	IR_LoadCode@LowBound+1,___ftge@ff2+1
  7402  0038C2  C1A5  F0BA         	movff	IR_LoadCode@LowBound+2,___ftge@ff2+2
  7403  0038C6  EC40  F009         	call	___ftge	;wreg free
  7404  0038CA  E206               	bc	l6853
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;IR.c: 150: {
  7408                           ;IR.c: 151: LowBound = Low2;
  7409  0038CC  C19C  F1A3         	movff	IR_LoadCode@Low2,IR_LoadCode@LowBound
  7410  0038D0  C19D  F1A4         	movff	IR_LoadCode@Low2+1,IR_LoadCode@LowBound+1
  7411  0038D4  C19E  F1A5         	movff	IR_LoadCode@Low2+2,IR_LoadCode@LowBound+2
  7412  0038D8                     l6853:
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;IR.c: 152: }
  7416                           ;IR.c: 153: if(LowBound < 6000)
  7417  0038D8  C1A3  F0B5         	movff	IR_LoadCode@LowBound,___ftge@ff1
  7418  0038DC  C1A4  F0B6         	movff	IR_LoadCode@LowBound+1,___ftge@ff1+1
  7419  0038E0  C1A5  F0B7         	movff	IR_LoadCode@LowBound+2,___ftge@ff1+2
  7420  0038E4  0E80               	movlw	128
  7421  0038E6  6FB8               	movwf	___ftge@ff2& (0+255),b
  7422  0038E8  0EBB               	movlw	187
  7423  0038EA  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  7424  0038EC  0E45               	movlw	69
  7425  0038EE  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  7426  0038F0  EC40  F009         	call	___ftge	;wreg free
  7427  0038F4  E207               	bc	l6857
  7428                           
  7429                           ; BSR set to: 0
  7430                           ;IR.c: 154: {
  7431                           ;IR.c: 155: LowBound = 6000;
  7432  0038F6  0E80               	movlw	128
  7433  0038F8  0101               	movlb	1	; () banked
  7434  0038FA  6FA3               	movwf	IR_LoadCode@LowBound& (0+255),b
  7435  0038FC  0EBB               	movlw	187
  7436  0038FE  6FA4               	movwf	(IR_LoadCode@LowBound+1)& (0+255),b
  7437  003900  0E45               	movlw	69
  7438  003902  6FA5               	movwf	(IR_LoadCode@LowBound+2)& (0+255),b
  7439  003904                     l6857:
  7440                           
  7441                           ;IR.c: 156: }
  7442                           ;IR.c: 158: HighBound = High1;
  7443  003904  C198  F1A6         	movff	IR_LoadCode@High1,IR_LoadCode@HighBound
  7444  003908  C199  F1A7         	movff	IR_LoadCode@High1+1,IR_LoadCode@HighBound+1
  7445  00390C  C19A  F1A8         	movff	IR_LoadCode@High1+2,IR_LoadCode@HighBound+2
  7446                           
  7447                           ;IR.c: 159: if(High2 < HighBound)
  7448  003910  C19F  F0B5         	movff	IR_LoadCode@High2,___ftge@ff1
  7449  003914  C1A0  F0B6         	movff	IR_LoadCode@High2+1,___ftge@ff1+1
  7450  003918  C1A1  F0B7         	movff	IR_LoadCode@High2+2,___ftge@ff1+2
  7451  00391C  C1A6  F0B8         	movff	IR_LoadCode@HighBound,___ftge@ff2
  7452  003920  C1A7  F0B9         	movff	IR_LoadCode@HighBound+1,___ftge@ff2+1
  7453  003924  C1A8  F0BA         	movff	IR_LoadCode@HighBound+2,___ftge@ff2+2
  7454  003928  EC40  F009         	call	___ftge	;wreg free
  7455  00392C  E206               	bc	l6863
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;IR.c: 160: {
  7459                           ;IR.c: 161: HighBound = High2;
  7460  00392E  C19F  F1A6         	movff	IR_LoadCode@High2,IR_LoadCode@HighBound
  7461  003932  C1A0  F1A7         	movff	IR_LoadCode@High2+1,IR_LoadCode@HighBound+1
  7462  003936  C1A1  F1A8         	movff	IR_LoadCode@High2+2,IR_LoadCode@HighBound+2
  7463  00393A                     l6863:
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;IR.c: 162: }
  7467                           ;IR.c: 163: if(HighBound < 10000)
  7468  00393A  C1A6  F0B5         	movff	IR_LoadCode@HighBound,___ftge@ff1
  7469  00393E  C1A7  F0B6         	movff	IR_LoadCode@HighBound+1,___ftge@ff1+1
  7470  003942  C1A8  F0B7         	movff	IR_LoadCode@HighBound+2,___ftge@ff1+2
  7471  003946  0E40               	movlw	64
  7472  003948  6FB8               	movwf	___ftge@ff2& (0+255),b
  7473  00394A  0E1C               	movlw	28
  7474  00394C  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  7475  00394E  0E46               	movlw	70
  7476  003950  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  7477  003952  EC40  F009         	call	___ftge	;wreg free
  7478  003956  E207               	bc	l6867
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;IR.c: 164: {
  7482                           ;IR.c: 165: HighBound = 10000;
  7483  003958  0E40               	movlw	64
  7484  00395A  0101               	movlb	1	; () banked
  7485  00395C  6FA6               	movwf	IR_LoadCode@HighBound& (0+255),b
  7486  00395E  0E1C               	movlw	28
  7487  003960  6FA7               	movwf	(IR_LoadCode@HighBound+1)& (0+255),b
  7488  003962  0E46               	movlw	70
  7489  003964  6FA8               	movwf	(IR_LoadCode@HighBound+2)& (0+255),b
  7490  003966                     l6867:
  7491                           
  7492                           ;IR.c: 166: }
  7493                           ;IR.c: 168: IR_SyncLow = (unsigned int) LowBound;
  7494  003966  C1A3  F0B5         	movff	IR_LoadCode@LowBound,___fttol@f1
  7495  00396A  C1A4  F0B6         	movff	IR_LoadCode@LowBound+1,___fttol@f1+1
  7496  00396E  C1A5  F0B7         	movff	IR_LoadCode@LowBound+2,___fttol@f1+2
  7497  003972  ECFD  F003         	call	___fttol	;wreg free
  7498  003976  C0B5  F060         	movff	?___fttol,_IR_SyncLow
  7499  00397A  C0B6  F061         	movff	?___fttol+1,_IR_SyncLow+1
  7500                           
  7501                           ;IR.c: 169: IR_SyncHigh = (unsigned int) HighBound;
  7502  00397E  C1A6  F0B5         	movff	IR_LoadCode@HighBound,___fttol@f1
  7503  003982  C1A7  F0B6         	movff	IR_LoadCode@HighBound+1,___fttol@f1+1
  7504  003986  C1A8  F0B7         	movff	IR_LoadCode@HighBound+2,___fttol@f1+2
  7505  00398A  ECFD  F003         	call	___fttol	;wreg free
  7506  00398E  C0B5  F05E         	movff	?___fttol,_IR_SyncHigh
  7507  003992  C0B6  F05F         	movff	?___fttol+1,_IR_SyncHigh+1
  7508                           
  7509                           ;IR.c: 171: CodeSize1 = IR_CalculateCodesize(&IR_SavedTiming0[0]);
  7510  003996  0100               	movlb	0	; () banked
  7511  003998  6BB5               	clrf	IR_CalculateCodesize@Code& (0+255),b
  7512  00399A  0E24               	movlw	36
  7513  00399C  6FB6               	movwf	(IR_CalculateCodesize@Code+1)& (0+255),b
  7514  00399E  6BB7               	clrf	(IR_CalculateCodesize@Code+2)& (0+255),b
  7515  0039A0  EC2C  F00A         	call	_IR_CalculateCodesize	;wreg free
  7516  0039A4  0101               	movlb	1	; () banked
  7517  0039A6  6F9B               	movwf	IR_LoadCode@CodeSize1& (0+255),b
  7518                           
  7519                           ; BSR set to: 1
  7520                           ;IR.c: 172: CodeSize2 = IR_CalculateCodesize(&IR_SavedTiming1[0]);
  7521  0039A8  0EC0               	movlw	192
  7522  0039AA  0100               	movlb	0	; () banked
  7523  0039AC  6FB5               	movwf	IR_CalculateCodesize@Code& (0+255),b
  7524  0039AE  0E24               	movlw	36
  7525  0039B0  6FB6               	movwf	(IR_CalculateCodesize@Code+1)& (0+255),b
  7526  0039B2  6BB7               	clrf	(IR_CalculateCodesize@Code+2)& (0+255),b
  7527  0039B4  EC2C  F00A         	call	_IR_CalculateCodesize	;wreg free
  7528  0039B8  0101               	movlb	1	; () banked
  7529  0039BA  6FA2               	movwf	IR_LoadCode@CodeSize2& (0+255),b
  7530                           
  7531                           ; BSR set to: 1
  7532                           ;IR.c: 174: IR_CodeSize = CodeSize1;
  7533  0039BC  C19B  F06A         	movff	IR_LoadCode@CodeSize1,_IR_CodeSize
  7534                           
  7535                           ; BSR set to: 1
  7536                           ;IR.c: 175: if(IR_CodeSize < CodeSize2)
  7537  0039C0  51A2               	movf	IR_LoadCode@CodeSize2& (0+255),w,b
  7538  0039C2  5C6A               	subwf	_IR_CodeSize,w,c
  7539  0039C4  E202               	bc	l6881
  7540                           
  7541                           ; BSR set to: 1
  7542                           ;IR.c: 176: {
  7543                           ;IR.c: 177: IR_CodeSize = CodeSize2;
  7544  0039C6  C1A2  F06A         	movff	IR_LoadCode@CodeSize2,_IR_CodeSize
  7545  0039CA                     l6881:
  7546                           
  7547                           ; BSR set to: 1
  7548                           ;IR.c: 178: }
  7549                           ;IR.c: 179: if(IR_CodeSize < 40)
  7550  0039CA  0E28               	movlw	40
  7551  0039CC  606A               	cpfslt	_IR_CodeSize,c
  7552  0039CE  0C28               	retlw	40
  7553                           
  7554                           ; BSR set to: 1
  7555                           ;IR.c: 180: {
  7556                           ;IR.c: 181: IR_CodeSize = 40;
  7557  0039D0  6E6A               	movwf	_IR_CodeSize,c
  7558                           
  7559                           ; BSR set to: 1
  7560  0039D2  0C28               	retlw	40	;funcret
  7561  0039D4                     __end_of_IR_LoadCode:
  7562                           	opt stack 0
  7563                           tblptru	equ	0xFF8
  7564                           tblptrh	equ	0xFF7
  7565                           tblptrl	equ	0xFF6
  7566                           tablat	equ	0xFF5
  7567                           prodh	equ	0xFF4
  7568                           prodl	equ	0xFF3
  7569                           intcon	equ	0xFF2
  7570                           intcon2	equ	0xFF1
  7571                           intcon3	equ	0xFF0
  7572                           postinc0	equ	0xFEE
  7573                           wreg	equ	0xFE8
  7574                           postdec1	equ	0xFE5
  7575                           fsr1l	equ	0xFE1
  7576                           postinc2	equ	0xFDE
  7577                           postdec2	equ	0xFDD
  7578                           fsr2h	equ	0xFDA
  7579                           fsr2l	equ	0xFD9
  7580                           status	equ	0xFD8
  7581                           
  7582 ;; *************** function ___lwtoft *****************
  7583 ;; Defined at:
  7584 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
  7585 ;; Parameters:    Size  Location     Type
  7586 ;;  c               2   61[BANK0 ] unsigned int 
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;		None
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  3   61[BANK0 ] float 
  7591 ;; Registers used:
  7592 ;;		wreg, status,2, status,0, cstack
  7593 ;; Tracked objects:
  7594 ;;		On entry : E/1
  7595 ;;		On exit  : F/0
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7598 ;;      Params:         0       3       0       0       0
  7599 ;;      Locals:         0       0       0       0       0
  7600 ;;      Temps:          0       0       0       0       0
  7601 ;;      Totals:         0       3       0       0       0
  7602 ;;Total ram usage:        3 bytes
  7603 ;; Hardware stack levels used:    1
  7604 ;; Hardware stack levels required when called:   13
  7605 ;; This function calls:
  7606 ;;		___ftpack
  7607 ;; This function is called by:
  7608 ;;		_RF_LoadCode
  7609 ;;		_IR_LoadCode
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           	psect	text52
  7614  001702                     __ptext52:
  7615                           	opt stack 0
  7616  001702                     ___lwtoft:
  7617                           	opt stack 16
  7618                           
  7619                           ; BSR set to: 1
  7620                           ;incstack = 0
  7621  001702  C0BD  F0B5         	movff	___lwtoft@c,___ftpack@arg
  7622  001706  C0BE  F0B6         	movff	___lwtoft@c+1,___ftpack@arg+1
  7623  00170A  0100               	movlb	0	; () banked
  7624  00170C  6BB7               	clrf	(___ftpack@arg+2)& (0+255),b
  7625  00170E  0E8E               	movlw	142
  7626  001710  6FB8               	movwf	___ftpack@exp& (0+255),b
  7627  001712  0E00               	movlw	0
  7628  001714  6FB9               	movwf	___ftpack@sign& (0+255),b
  7629  001716  EC5E  F007         	call	___ftpack	;wreg free
  7630  00171A  C0B5  F0BD         	movff	?___ftpack,?___lwtoft
  7631  00171E  C0B6  F0BE         	movff	?___ftpack+1,?___lwtoft+1
  7632  001722  C0B7  F0BF         	movff	?___ftpack+2,?___lwtoft+2
  7633                           
  7634                           ; BSR set to: 0
  7635  001726  0012               	return		;funcret
  7636  001728                     __end_of___lwtoft:
  7637                           	opt stack 0
  7638                           tblptru	equ	0xFF8
  7639                           tblptrh	equ	0xFF7
  7640                           tblptrl	equ	0xFF6
  7641                           tablat	equ	0xFF5
  7642                           prodh	equ	0xFF4
  7643                           prodl	equ	0xFF3
  7644                           intcon	equ	0xFF2
  7645                           intcon2	equ	0xFF1
  7646                           intcon3	equ	0xFF0
  7647                           postinc0	equ	0xFEE
  7648                           wreg	equ	0xFE8
  7649                           postdec1	equ	0xFE5
  7650                           fsr1l	equ	0xFE1
  7651                           postinc2	equ	0xFDE
  7652                           postdec2	equ	0xFDD
  7653                           fsr2h	equ	0xFDA
  7654                           fsr2l	equ	0xFD9
  7655                           status	equ	0xFD8
  7656                           
  7657 ;; *************** function ___fttol *****************
  7658 ;; Defined at:
  7659 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;  f1              3   53[BANK0 ] float 
  7662 ;; Auto vars:     Size  Location     Type
  7663 ;;  lval            4    1[BANK1 ] unsigned long 
  7664 ;;  exp1            1    5[BANK1 ] unsigned char 
  7665 ;;  sign1           1    0[BANK1 ] unsigned char 
  7666 ;; Return value:  Size  Location     Type
  7667 ;;                  4   53[BANK0 ] long 
  7668 ;; Registers used:
  7669 ;;		wreg, status,2, status,0
  7670 ;; Tracked objects:
  7671 ;;		On entry : E/0
  7672 ;;		On exit  : E/0
  7673 ;;		Unchanged: 0/0
  7674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7675 ;;      Params:         0       4       0       0       0
  7676 ;;      Locals:         0       0       6       0       0
  7677 ;;      Temps:          0       5       0       0       0
  7678 ;;      Totals:         0       9       6       0       0
  7679 ;;Total ram usage:       15 bytes
  7680 ;; Hardware stack levels used:    1
  7681 ;; Hardware stack levels required when called:   12
  7682 ;; This function calls:
  7683 ;;		Nothing
  7684 ;; This function is called by:
  7685 ;;		_RF_LoadCode
  7686 ;;		_IR_LoadCode
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           	psect	text53
  7691  0007FA                     __ptext53:
  7692                           	opt stack 0
  7693  0007FA                     ___fttol:
  7694                           	opt stack 17
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;incstack = 0
  7698  0007FA  C0B7  F0B9         	movff	___fttol@f1+2,??___fttol
  7699  0007FE  0100               	movlb	0	; () banked
  7700  000800  6BBA               	clrf	(??___fttol+1)& (0+255),b
  7701  000802  6BBB               	clrf	(??___fttol+2)& (0+255),b
  7702  000804  35B6               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7703  000806  37B9               	rlcf	??___fttol& (0+255),f,b
  7704  000808  E301               	bnc	u7181
  7705  00080A  81BA               	bsf	(??___fttol+1)& (0+255),0,b
  7706  00080C                     u7181:
  7707  00080C  51B9               	movf	??___fttol& (0+255),w,b
  7708  00080E  0101               	movlb	1	; () banked
  7709  000810  6F8C               	movwf	___fttol@exp1& (0+255),b
  7710  000812  518C               	movf	___fttol@exp1& (0+255),w,b
  7711  000814  E106               	bnz	l6789
  7712  000816                     l6787:
  7713                           
  7714                           ; BSR set to: 1
  7715  000816  0100               	movlb	0	; () banked
  7716  000818  6BB5               	clrf	?___fttol& (0+255),b
  7717  00081A  6BB6               	clrf	(?___fttol+1)& (0+255),b
  7718  00081C  6BB7               	clrf	(?___fttol+2)& (0+255),b
  7719  00081E  6BB8               	clrf	(?___fttol+3)& (0+255),b
  7720  000820  0012               	return	
  7721  000822                     l6789:
  7722                           
  7723                           ; BSR set to: 1
  7724  000822  0E17               	movlw	23
  7725  000824  0100               	movlb	0	; () banked
  7726  000826  6FB9               	movwf	??___fttol& (0+255),b
  7727  000828  C0B5  F0BA         	movff	___fttol@f1,??___fttol+1
  7728  00082C  C0B6  F0BB         	movff	___fttol@f1+1,??___fttol+2
  7729  000830  C0B7  F0BC         	movff	___fttol@f1+2,??___fttol+3
  7730  000834  29B9               	incf	??___fttol& (0+255),w,b
  7731  000836  6FBD               	movwf	(??___fttol+4)& (0+255),b
  7732  000838  D004               	goto	u7200
  7733  00083A                     u7205:
  7734  00083A  90D8               	bcf	status,0,c
  7735  00083C  33BC               	rrcf	(??___fttol+3)& (0+255),f,b
  7736  00083E  33BB               	rrcf	(??___fttol+2)& (0+255),f,b
  7737  000840  33BA               	rrcf	(??___fttol+1)& (0+255),f,b
  7738  000842                     u7200:
  7739  000842  2FBD               	decfsz	(??___fttol+4)& (0+255),f,b
  7740  000844  D7FA               	goto	u7205
  7741  000846  0100               	movlb	0	; () banked
  7742  000848  51BA               	movf	(??___fttol+1)& (0+255),w,b
  7743  00084A  0101               	movlb	1	; () banked
  7744  00084C  6F87               	movwf	___fttol@sign1& (0+255),b
  7745                           
  7746                           ; BSR set to: 1
  7747  00084E  0100               	movlb	0	; () banked
  7748  000850  8FB6               	bsf	(___fttol@f1+1)& (0+255),7,b
  7749                           
  7750                           ; BSR set to: 0
  7751  000852  6BB7               	clrf	(___fttol@f1+2)& (0+255),b
  7752                           
  7753                           ; BSR set to: 0
  7754  000854  51B5               	movf	___fttol@f1& (0+255),w,b
  7755  000856  0101               	movlb	1	; () banked
  7756  000858  6F88               	movwf	___fttol@lval& (0+255),b
  7757  00085A  0100               	movlb	0	; () banked
  7758  00085C  51B6               	movf	(___fttol@f1+1)& (0+255),w,b
  7759  00085E  0101               	movlb	1	; () banked
  7760  000860  6F89               	movwf	(___fttol@lval+1)& (0+255),b
  7761  000862  0100               	movlb	0	; () banked
  7762  000864  51B7               	movf	(___fttol@f1+2)& (0+255),w,b
  7763  000866  0101               	movlb	1	; () banked
  7764  000868  6F8A               	movwf	(___fttol@lval+2)& (0+255),b
  7765  00086A  6B8B               	clrf	(___fttol@lval+3)& (0+255),b
  7766                           
  7767                           ; BSR set to: 1
  7768  00086C  0E8E               	movlw	142
  7769  00086E  5F8C               	subwf	___fttol@exp1& (0+255),f,b
  7770                           
  7771                           ; BSR set to: 1
  7772  000870  AF8C               	btfss	___fttol@exp1& (0+255),7,b
  7773  000872  D00C               	goto	l6809
  7774                           
  7775                           ; BSR set to: 1
  7776  000874  518C               	movf	___fttol@exp1& (0+255),w,b
  7777  000876  0A80               	xorlw	128
  7778  000878  0F8F               	addlw	143
  7779  00087A  E3CD               	bnc	l6787
  7780  00087C                     l6805:
  7781                           
  7782                           ; BSR set to: 1
  7783  00087C  90D8               	bcf	status,0,c
  7784  00087E  338B               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7785  000880  338A               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7786  000882  3389               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7787  000884  3388               	rrcf	___fttol@lval& (0+255),f,b
  7788                           
  7789                           ; BSR set to: 1
  7790  000886  3F8C               	incfsz	___fttol@exp1& (0+255),f,b
  7791  000888  D7F9               	goto	l6805
  7792  00088A  D00C               	goto	l6817
  7793  00088C                     l6809:
  7794                           
  7795                           ; BSR set to: 1
  7796  00088C  0E17               	movlw	23
  7797  00088E  658C               	cpfsgt	___fttol@exp1& (0+255),b
  7798  000890  D007               	goto	l6815
  7799  000892  D7C1               	goto	l6787
  7800  000894                     l6813:
  7801                           
  7802                           ; BSR set to: 1
  7803  000894  90D8               	bcf	status,0,c
  7804  000896  3788               	rlcf	___fttol@lval& (0+255),f,b
  7805  000898  3789               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7806  00089A  378A               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7807  00089C  378B               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7808  00089E  078C               	decf	___fttol@exp1& (0+255),f,b
  7809  0008A0                     l6815:
  7810                           
  7811                           ; BSR set to: 1
  7812  0008A0  518C               	movf	___fttol@exp1& (0+255),w,b
  7813  0008A2  E1F8               	bnz	l6813
  7814  0008A4                     l6817:
  7815                           
  7816                           ; BSR set to: 1
  7817  0008A4  5187               	movf	___fttol@sign1& (0+255),w,b
  7818  0008A6  E008               	bz	l6821
  7819                           
  7820                           ; BSR set to: 1
  7821  0008A8  1F8B               	comf	(___fttol@lval+3)& (0+255),f,b
  7822  0008AA  1F8A               	comf	(___fttol@lval+2)& (0+255),f,b
  7823  0008AC  1F89               	comf	(___fttol@lval+1)& (0+255),f,b
  7824  0008AE  6D88               	negf	___fttol@lval& (0+255),b
  7825  0008B0  0E00               	movlw	0
  7826  0008B2  2389               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7827  0008B4  238A               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7828  0008B6  238B               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7829  0008B8                     l6821:
  7830                           
  7831                           ; BSR set to: 1
  7832  0008B8  C188  F0B5         	movff	___fttol@lval,?___fttol
  7833  0008BC  C189  F0B6         	movff	___fttol@lval+1,?___fttol+1
  7834  0008C0  C18A  F0B7         	movff	___fttol@lval+2,?___fttol+2
  7835  0008C4  C18B  F0B8         	movff	___fttol@lval+3,?___fttol+3
  7836  0008C8  0012               	return		;funcret
  7837  0008CA                     __end_of___fttol:
  7838                           	opt stack 0
  7839                           tblptru	equ	0xFF8
  7840                           tblptrh	equ	0xFF7
  7841                           tblptrl	equ	0xFF6
  7842                           tablat	equ	0xFF5
  7843                           prodh	equ	0xFF4
  7844                           prodl	equ	0xFF3
  7845                           intcon	equ	0xFF2
  7846                           intcon2	equ	0xFF1
  7847                           intcon3	equ	0xFF0
  7848                           postinc0	equ	0xFEE
  7849                           wreg	equ	0xFE8
  7850                           postdec1	equ	0xFE5
  7851                           fsr1l	equ	0xFE1
  7852                           postinc2	equ	0xFDE
  7853                           postdec2	equ	0xFDD
  7854                           fsr2h	equ	0xFDA
  7855                           fsr2l	equ	0xFD9
  7856                           status	equ	0xFD8
  7857                           
  7858 ;; *************** function ___ftmul *****************
  7859 ;; Defined at:
  7860 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;  f1              3    0[BANK1 ] float 
  7863 ;;  f2              3    3[BANK1 ] float 
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;  f3_as_produc    3   11[BANK1 ] unsigned um
  7866 ;;  sign            1   10[BANK1 ] unsigned char 
  7867 ;;  exp             1    9[BANK1 ] unsigned char 
  7868 ;;  cntr            1    0        unsigned char 
  7869 ;; Return value:  Size  Location     Type
  7870 ;;                  3    0[BANK1 ] float 
  7871 ;; Registers used:
  7872 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7873 ;; Tracked objects:
  7874 ;;		On entry : F/1
  7875 ;;		On exit  : E/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7878 ;;      Params:         0       0       6       0       0
  7879 ;;      Locals:         0       0       5       0       0
  7880 ;;      Temps:          0       0       3       0       0
  7881 ;;      Totals:         0       0      14       0       0
  7882 ;;Total ram usage:       14 bytes
  7883 ;; Hardware stack levels used:    1
  7884 ;; Hardware stack levels required when called:   13
  7885 ;; This function calls:
  7886 ;;		___ftpack
  7887 ;; This function is called by:
  7888 ;;		_RF_LoadCode
  7889 ;;		_IR_LoadCode
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           	psect	text54
  7894  000578                     __ptext54:
  7895                           	opt stack 0
  7896  000578                     ___ftmul:
  7897                           	opt stack 16
  7898                           
  7899                           ; BSR set to: 1
  7900                           
  7901                           ;incstack = 0
  7902  000578  C189  F18D         	movff	___ftmul@f1+2,??___ftmul
  7903  00057C  6B8E               	clrf	(??___ftmul+1)& (0+255),b
  7904  00057E  6B8F               	clrf	(??___ftmul+2)& (0+255),b
  7905  000580  3588               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7906  000582  378D               	rlcf	??___ftmul& (0+255),f,b
  7907  000584  E301               	bnc	u7131
  7908  000586  818E               	bsf	(??___ftmul+1)& (0+255),0,b
  7909  000588                     u7131:
  7910  000588  518D               	movf	??___ftmul& (0+255),w,b
  7911  00058A  6F90               	movwf	___ftmul@exp& (0+255),b
  7912  00058C  5190               	movf	___ftmul@exp& (0+255),w,b
  7913  00058E  E104               	bnz	l6751
  7914                           
  7915                           ; BSR set to: 1
  7916  000590  6B87               	clrf	?___ftmul& (0+255),b
  7917  000592  6B88               	clrf	(?___ftmul+1)& (0+255),b
  7918  000594  6B89               	clrf	(?___ftmul+2)& (0+255),b
  7919  000596  0012               	return	
  7920  000598                     l6751:
  7921                           
  7922                           ; BSR set to: 1
  7923  000598  C18C  F18D         	movff	___ftmul@f2+2,??___ftmul
  7924  00059C  6B8E               	clrf	(??___ftmul+1)& (0+255),b
  7925  00059E  6B8F               	clrf	(??___ftmul+2)& (0+255),b
  7926  0005A0  358B               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7927  0005A2  378D               	rlcf	??___ftmul& (0+255),f,b
  7928  0005A4  E301               	bnc	u7151
  7929  0005A6  818E               	bsf	(??___ftmul+1)& (0+255),0,b
  7930  0005A8                     u7151:
  7931  0005A8  518D               	movf	??___ftmul& (0+255),w,b
  7932  0005AA  6F91               	movwf	___ftmul@sign& (0+255),b
  7933  0005AC  5191               	movf	___ftmul@sign& (0+255),w,b
  7934  0005AE  E104               	bnz	l6755
  7935                           
  7936                           ; BSR set to: 1
  7937  0005B0  6B87               	clrf	?___ftmul& (0+255),b
  7938  0005B2  6B88               	clrf	(?___ftmul+1)& (0+255),b
  7939  0005B4  6B89               	clrf	(?___ftmul+2)& (0+255),b
  7940  0005B6  0012               	return	
  7941  0005B8                     l6755:
  7942                           
  7943                           ; BSR set to: 1
  7944  0005B8  5191               	movf	___ftmul@sign& (0+255),w,b
  7945  0005BA  0F7B               	addlw	123
  7946  0005BC  2790               	addwf	___ftmul@exp& (0+255),f,b
  7947                           
  7948                           ; BSR set to: 1
  7949  0005BE  C189  F191         	movff	___ftmul@f1+2,___ftmul@sign
  7950  0005C2  518C               	movf	(___ftmul@f2+2)& (0+255),w,b
  7951  0005C4  1B91               	xorwf	___ftmul@sign& (0+255),f,b
  7952  0005C6  0E80               	movlw	128
  7953  0005C8  1791               	andwf	___ftmul@sign& (0+255),f,b
  7954                           
  7955                           ; BSR set to: 1
  7956  0005CA  8F88               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7957                           
  7958                           ; BSR set to: 1
  7959  0005CC  8F8B               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7960                           
  7961                           ; BSR set to: 1
  7962  0005CE  6B8C               	clrf	(___ftmul@f2+2)& (0+255),b
  7963                           
  7964                           ; BSR set to: 1
  7965                           
  7966                           ; BSR set to: 1
  7967  0005D0  6B89               	clrf	(___ftmul@f1+2)& (0+255),b
  7968                           
  7969                           ; BSR set to: 1
  7970  0005D2  5187               	movf	___ftmul@f1& (0+255),w,b
  7971  0005D4  038A               	mulwf	___ftmul@f2& (0+255),b
  7972  0005D6  CFF4 FFF3          	movff	prodh,prodl
  7973  0005DA  6AF4               	clrf	prodh,c
  7974  0005DC  CFF3 F192          	movff	prodl,___ftmul@f3_as_product
  7975  0005E0  CFF4 F193          	movff	prodh,___ftmul@f3_as_product+1
  7976  0005E4  6B94               	clrf	(___ftmul@f3_as_product+2)& (0+255),b
  7977                           
  7978                           ; BSR set to: 1
  7979  0005E6  5187               	movf	___ftmul@f1& (0+255),w,b
  7980  0005E8  038B               	mulwf	(___ftmul@f2+1)& (0+255),b
  7981  0005EA  50F3               	movf	prodl,w,c
  7982  0005EC  2792               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7983  0005EE  50F4               	movf	prodh,w,c
  7984  0005F0  2393               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7985  0005F2  0E00               	movlw	0
  7986  0005F4  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7987                           
  7988                           ; BSR set to: 1
  7989  0005F6  5188               	movf	(___ftmul@f1+1)& (0+255),w,b
  7990  0005F8  038A               	mulwf	___ftmul@f2& (0+255),b
  7991  0005FA  50F3               	movf	prodl,w,c
  7992  0005FC  2792               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7993  0005FE  50F4               	movf	prodh,w,c
  7994  000600  2393               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7995  000602  0E00               	movlw	0
  7996  000604  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7997                           
  7998                           ; BSR set to: 1
  7999  000606  5188               	movf	(___ftmul@f1+1)& (0+255),w,b
  8000  000608  038B               	mulwf	(___ftmul@f2+1)& (0+255),b
  8001  00060A  50F3               	movf	prodl,w,c
  8002  00060C  2793               	addwf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8003  00060E  50F4               	movf	prodh,w,c
  8004  000610  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8005                           
  8006                           ; BSR set to: 1
  8007  000612  AF94               	btfss	(___ftmul@f3_as_product+2)& (0+255),7,b
  8008  000614  D005               	goto	l1397
  8009                           
  8010                           ; BSR set to: 1
  8011  000616  90D8               	bcf	status,0,c
  8012  000618  3394               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8013  00061A  3393               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8014  00061C  3392               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8015  00061E  2B90               	incf	___ftmul@exp& (0+255),f,b
  8016  000620                     l1397:
  8017                           
  8018                           ; BSR set to: 1
  8019  000620  90D8               	bcf	status,0,c
  8020  000622  3394               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8021  000624  3393               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8022  000626  3392               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8023                           
  8024                           ; BSR set to: 1
  8025  000628  C192  F0B5         	movff	___ftmul@f3_as_product,___ftpack@arg
  8026  00062C  C193  F0B6         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8027  000630  C194  F0B7         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8028  000634  C190  F0B8         	movff	___ftmul@exp,___ftpack@exp
  8029  000638  C191  F0B9         	movff	___ftmul@sign,___ftpack@sign
  8030  00063C  EC5E  F007         	call	___ftpack	;wreg free
  8031  000640  C0B5  F187         	movff	?___ftpack,?___ftmul
  8032  000644  C0B6  F188         	movff	?___ftpack+1,?___ftmul+1
  8033  000648  C0B7  F189         	movff	?___ftpack+2,?___ftmul+2
  8034  00064C  0012               	return		;funcret
  8035  00064E                     __end_of___ftmul:
  8036                           	opt stack 0
  8037                           tblptru	equ	0xFF8
  8038                           tblptrh	equ	0xFF7
  8039                           tblptrl	equ	0xFF6
  8040                           tablat	equ	0xFF5
  8041                           prodh	equ	0xFF4
  8042                           prodl	equ	0xFF3
  8043                           intcon	equ	0xFF2
  8044                           intcon2	equ	0xFF1
  8045                           intcon3	equ	0xFF0
  8046                           postinc0	equ	0xFEE
  8047                           wreg	equ	0xFE8
  8048                           postdec1	equ	0xFE5
  8049                           fsr1l	equ	0xFE1
  8050                           postinc2	equ	0xFDE
  8051                           postdec2	equ	0xFDD
  8052                           fsr2h	equ	0xFDA
  8053                           fsr2l	equ	0xFD9
  8054                           status	equ	0xFD8
  8055                           
  8056 ;; *************** function ___ftpack *****************
  8057 ;; Defined at:
  8058 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  8059 ;; Parameters:    Size  Location     Type
  8060 ;;  arg             3   53[BANK0 ] unsigned um
  8061 ;;  exp             1   56[BANK0 ] unsigned char 
  8062 ;;  sign            1   57[BANK0 ] unsigned char 
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;		None
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  3   53[BANK0 ] float 
  8067 ;; Registers used:
  8068 ;;		wreg, status,2, status,0
  8069 ;; Tracked objects:
  8070 ;;		On entry : E/0
  8071 ;;		On exit  : F/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8074 ;;      Params:         0       5       0       0       0
  8075 ;;      Locals:         0       0       0       0       0
  8076 ;;      Temps:          0       3       0       0       0
  8077 ;;      Totals:         0       8       0       0       0
  8078 ;;Total ram usage:        8 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:   12
  8081 ;; This function calls:
  8082 ;;		Nothing
  8083 ;; This function is called by:
  8084 ;;		___ftmul
  8085 ;;		___lwtoft
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           	psect	text55
  8090  000EBC                     __ptext55:
  8091                           	opt stack 0
  8092  000EBC                     ___ftpack:
  8093                           	opt stack 16
  8094                           
  8095                           ;incstack = 0
  8096  000EBC  0100               	movlb	0	; () banked
  8097  000EBE  51B8               	movf	___ftpack@exp& (0+255),w,b
  8098  000EC0  E004               	bz	l1313
  8099                           
  8100                           ; BSR set to: 0
  8101  000EC2  51B5               	movf	___ftpack@arg& (0+255),w,b
  8102  000EC4  11B6               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  8103  000EC6  11B7               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  8104  000EC8  E109               	bnz	l4687
  8105  000ECA                     l1313:
  8106                           
  8107                           ; BSR set to: 0
  8108  000ECA  6BB5               	clrf	?___ftpack& (0+255),b
  8109  000ECC  6BB6               	clrf	(?___ftpack+1)& (0+255),b
  8110  000ECE  6BB7               	clrf	(?___ftpack+2)& (0+255),b
  8111  000ED0  0012               	return	
  8112  000ED2                     l4685:
  8113                           
  8114                           ; BSR set to: 0
  8115  000ED2  2BB8               	incf	___ftpack@exp& (0+255),f,b
  8116  000ED4  90D8               	bcf	status,0,c
  8117  000ED6  33B7               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8118  000ED8  33B6               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8119  000EDA  33B5               	rrcf	___ftpack@arg& (0+255),f,b
  8120  000EDC                     l4687:
  8121                           
  8122                           ; BSR set to: 0
  8123  000EDC  6BBA               	clrf	??___ftpack& (0+255),b
  8124  000EDE  6BBB               	clrf	(??___ftpack+1)& (0+255),b
  8125  000EE0  0EFE               	movlw	254
  8126  000EE2  15B7               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8127  000EE4  6FBC               	movwf	(??___ftpack+2)& (0+255),b
  8128  000EE6  51BA               	movf	??___ftpack& (0+255),w,b
  8129  000EE8  11BB               	iorwf	(??___ftpack+1)& (0+255),w,b
  8130  000EEA  11BC               	iorwf	(??___ftpack+2)& (0+255),w,b
  8131  000EEC  E00A               	bz	l4693
  8132  000EEE  D7F1               	goto	l4685
  8133  000EF0                     l4689:
  8134                           
  8135                           ; BSR set to: 0
  8136  000EF0  2BB8               	incf	___ftpack@exp& (0+255),f,b
  8137                           
  8138                           ; BSR set to: 0
  8139  000EF2  2BB5               	incf	___ftpack@arg& (0+255),f,b
  8140  000EF4  0E00               	movlw	0
  8141  000EF6  23B6               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  8142  000EF8  23B7               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  8143  000EFA  90D8               	bcf	status,0,c
  8144  000EFC  33B7               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8145  000EFE  33B6               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8146  000F00  33B5               	rrcf	___ftpack@arg& (0+255),f,b
  8147  000F02                     l4693:
  8148                           
  8149                           ; BSR set to: 0
  8150  000F02  6BBA               	clrf	??___ftpack& (0+255),b
  8151  000F04  6BBB               	clrf	(??___ftpack+1)& (0+255),b
  8152  000F06  51B7               	movf	(___ftpack@arg+2)& (0+255),w,b
  8153  000F08  6FBC               	movwf	(??___ftpack+2)& (0+255),b
  8154  000F0A  51BA               	movf	??___ftpack& (0+255),w,b
  8155  000F0C  11BB               	iorwf	(??___ftpack+1)& (0+255),w,b
  8156  000F0E  11BC               	iorwf	(??___ftpack+2)& (0+255),w,b
  8157  000F10  E006               	bz	l4697
  8158  000F12  D7EE               	goto	l4689
  8159  000F14                     l4695:
  8160                           
  8161                           ; BSR set to: 0
  8162  000F14  07B8               	decf	___ftpack@exp& (0+255),f,b
  8163  000F16  90D8               	bcf	status,0,c
  8164  000F18  37B5               	rlcf	___ftpack@arg& (0+255),f,b
  8165  000F1A  37B6               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  8166  000F1C  37B7               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  8167  000F1E                     l4697:
  8168                           
  8169                           ; BSR set to: 0
  8170  000F1E  BFB6               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  8171  000F20  D003               	goto	l1325
  8172                           
  8173                           ; BSR set to: 0
  8174  000F22  0E02               	movlw	2
  8175  000F24  61B8               	cpfslt	___ftpack@exp& (0+255),b
  8176  000F26  D7F6               	goto	l4695
  8177  000F28                     l1325:
  8178                           
  8179                           ; BSR set to: 0
  8180  000F28  A1B8               	btfss	___ftpack@exp& (0+255),0,b
  8181                           
  8182                           ; BSR set to: 0
  8183  000F2A  9FB6               	bcf	(___ftpack@arg+1)& (0+255),7,b
  8184                           
  8185                           ; BSR set to: 0
  8186  000F2C  90D8               	bcf	status,0,c
  8187  000F2E  33B8               	rrcf	___ftpack@exp& (0+255),f,b
  8188                           
  8189                           ; BSR set to: 0
  8190  000F30  51B8               	movf	___ftpack@exp& (0+255),w,b
  8191  000F32  13B7               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  8192                           
  8193                           ; BSR set to: 0
  8194  000F34  51B9               	movf	___ftpack@sign& (0+255),w,b
  8195  000F36  E001               	bz	l4711
  8196                           
  8197                           ; BSR set to: 0
  8198  000F38  8FB7               	bsf	(___ftpack@arg+2)& (0+255),7,b
  8199  000F3A                     l4711:
  8200                           
  8201                           ; BSR set to: 0
  8202  000F3A  C0B5  F0B5         	movff	___ftpack@arg,?___ftpack
  8203  000F3E  C0B6  F0B6         	movff	___ftpack@arg+1,?___ftpack+1
  8204  000F42  C0B7  F0B7         	movff	___ftpack@arg+2,?___ftpack+2
  8205                           
  8206                           ; BSR set to: 0
  8207  000F46  0012               	return		;funcret
  8208  000F48                     __end_of___ftpack:
  8209                           	opt stack 0
  8210                           tblptru	equ	0xFF8
  8211                           tblptrh	equ	0xFF7
  8212                           tblptrl	equ	0xFF6
  8213                           tablat	equ	0xFF5
  8214                           prodh	equ	0xFF4
  8215                           prodl	equ	0xFF3
  8216                           intcon	equ	0xFF2
  8217                           intcon2	equ	0xFF1
  8218                           intcon3	equ	0xFF0
  8219                           postinc0	equ	0xFEE
  8220                           wreg	equ	0xFE8
  8221                           postdec1	equ	0xFE5
  8222                           fsr1l	equ	0xFE1
  8223                           postinc2	equ	0xFDE
  8224                           postdec2	equ	0xFDD
  8225                           fsr2h	equ	0xFDA
  8226                           fsr2l	equ	0xFD9
  8227                           status	equ	0xFD8
  8228                           
  8229 ;; *************** function ___ftge *****************
  8230 ;; Defined at:
  8231 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
  8232 ;; Parameters:    Size  Location     Type
  8233 ;;  ff1             3   53[BANK0 ] float 
  8234 ;;  ff2             3   56[BANK0 ] float 
  8235 ;; Auto vars:     Size  Location     Type
  8236 ;;		None
  8237 ;; Return value:  Size  Location     Type
  8238 ;;		None               void
  8239 ;; Registers used:
  8240 ;;		wreg, status,2, status,0
  8241 ;; Tracked objects:
  8242 ;;		On entry : E/0
  8243 ;;		On exit  : F/0
  8244 ;;		Unchanged: 0/0
  8245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8246 ;;      Params:         0       6       0       0       0
  8247 ;;      Locals:         0       0       0       0       0
  8248 ;;      Temps:          0       3       0       0       0
  8249 ;;      Totals:         0       9       0       0       0
  8250 ;;Total ram usage:        9 bytes
  8251 ;; Hardware stack levels used:    1
  8252 ;; Hardware stack levels required when called:   12
  8253 ;; This function calls:
  8254 ;;		Nothing
  8255 ;; This function is called by:
  8256 ;;		_main
  8257 ;;		_RF_LoadCode
  8258 ;;		_IR_LoadCode
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           	psect	text56
  8263  001280                     __ptext56:
  8264                           	opt stack 0
  8265  001280                     ___ftge:
  8266                           	opt stack 18
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;incstack = 0
  8270  001280  0100               	movlb	0	; () banked
  8271  001282  AFB7               	btfss	(___ftge@ff1+2)& (0+255),7,b
  8272  001284  D00D               	goto	l5555
  8273                           
  8274                           ; BSR set to: 0
  8275  001286  6BBB               	clrf	??___ftge& (0+255),b
  8276  001288  6BBC               	clrf	(??___ftge+1)& (0+255),b
  8277  00128A  0E80               	movlw	128
  8278  00128C  6FBD               	movwf	(??___ftge+2)& (0+255),b
  8279  00128E  51B5               	movf	___ftge@ff1& (0+255),w,b
  8280  001290  5DBB               	subwf	??___ftge& (0+255),w,b
  8281  001292  6FB5               	movwf	___ftge@ff1& (0+255),b
  8282  001294  51B6               	movf	(___ftge@ff1+1)& (0+255),w,b
  8283  001296  59BC               	subwfb	(??___ftge+1)& (0+255),w,b
  8284  001298  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  8285  00129A  51B7               	movf	(___ftge@ff1+2)& (0+255),w,b
  8286  00129C  59BD               	subwfb	(??___ftge+2)& (0+255),w,b
  8287  00129E  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  8288  0012A0                     l5555:
  8289                           
  8290                           ; BSR set to: 0
  8291  0012A0  AFBA               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8292  0012A2  D00D               	goto	l5559
  8293                           
  8294                           ; BSR set to: 0
  8295  0012A4  6BBB               	clrf	??___ftge& (0+255),b
  8296  0012A6  6BBC               	clrf	(??___ftge+1)& (0+255),b
  8297  0012A8  0E80               	movlw	128
  8298  0012AA  6FBD               	movwf	(??___ftge+2)& (0+255),b
  8299  0012AC  51B8               	movf	___ftge@ff2& (0+255),w,b
  8300  0012AE  5DBB               	subwf	??___ftge& (0+255),w,b
  8301  0012B0  6FB8               	movwf	___ftge@ff2& (0+255),b
  8302  0012B2  51B9               	movf	(___ftge@ff2+1)& (0+255),w,b
  8303  0012B4  59BC               	subwfb	(??___ftge+1)& (0+255),w,b
  8304  0012B6  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  8305  0012B8  51BA               	movf	(___ftge@ff2+2)& (0+255),w,b
  8306  0012BA  59BD               	subwfb	(??___ftge+2)& (0+255),w,b
  8307  0012BC  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  8308  0012BE                     l5559:
  8309                           
  8310                           ; BSR set to: 0
  8311  0012BE  0E80               	movlw	128
  8312  0012C0  1BB7               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8313                           
  8314                           ; BSR set to: 0
  8315  0012C2  1BBA               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8316  0012C4  51B8               	movf	___ftge@ff2& (0+255),w,b
  8317  0012C6  5DB5               	subwf	___ftge@ff1& (0+255),w,b
  8318  0012C8  51B9               	movf	(___ftge@ff2+1)& (0+255),w,b
  8319  0012CA  59B6               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8320  0012CC  51BA               	movf	(___ftge@ff2+2)& (0+255),w,b
  8321  0012CE  59B7               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8322  0012D0  E202               	bc	l5565
  8323                           
  8324                           ; BSR set to: 0
  8325  0012D2  90D8               	bcf	status,0,c
  8326  0012D4  0012               	return	
  8327  0012D6                     l5565:
  8328                           
  8329                           ; BSR set to: 0
  8330  0012D6  80D8               	bsf	status,0,c
  8331                           
  8332                           ; BSR set to: 0
  8333  0012D8  0012               	return		;funcret
  8334  0012DA                     __end_of___ftge:
  8335                           	opt stack 0
  8336                           tblptru	equ	0xFF8
  8337                           tblptrh	equ	0xFF7
  8338                           tblptrl	equ	0xFF6
  8339                           tablat	equ	0xFF5
  8340                           prodh	equ	0xFF4
  8341                           prodl	equ	0xFF3
  8342                           intcon	equ	0xFF2
  8343                           intcon2	equ	0xFF1
  8344                           intcon3	equ	0xFF0
  8345                           postinc0	equ	0xFEE
  8346                           wreg	equ	0xFE8
  8347                           postdec1	equ	0xFE5
  8348                           fsr1l	equ	0xFE1
  8349                           postinc2	equ	0xFDE
  8350                           postdec2	equ	0xFDD
  8351                           fsr2h	equ	0xFDA
  8352                           fsr2l	equ	0xFD9
  8353                           status	equ	0xFD8
  8354                           
  8355 ;; *************** function _IR_CalculateCodesize *****************
  8356 ;; Defined at:
  8357 ;;		line 190 in file "IR.c"
  8358 ;; Parameters:    Size  Location     Type
  8359 ;;  Code            3   53[BANK0 ] PTR const unsigned int 
  8360 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), 
  8361 ;; Auto vars:     Size  Location     Type
  8362 ;;  i               1   59[BANK0 ] unsigned char 
  8363 ;; Return value:  Size  Location     Type
  8364 ;;                  1    wreg      unsigned char 
  8365 ;; Registers used:
  8366 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8367 ;; Tracked objects:
  8368 ;;		On entry : F/0
  8369 ;;		On exit  : F/0
  8370 ;;		Unchanged: 0/0
  8371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8372 ;;      Params:         0       3       0       0       0
  8373 ;;      Locals:         0       1       0       0       0
  8374 ;;      Temps:          0       3       0       0       0
  8375 ;;      Totals:         0       7       0       0       0
  8376 ;;Total ram usage:        7 bytes
  8377 ;; Hardware stack levels used:    1
  8378 ;; Hardware stack levels required when called:   12
  8379 ;; This function calls:
  8380 ;;		Nothing
  8381 ;; This function is called by:
  8382 ;;		_IR_LoadCode
  8383 ;; This function uses a non-reentrant model
  8384 ;;
  8385                           
  8386                           	psect	text57
  8387  001458                     __ptext57:
  8388                           	opt stack 0
  8389  001458                     _IR_CalculateCodesize:
  8390                           	opt stack 17
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;IR.c: 192: unsigned char i;
  8394                           ;IR.c: 194: for(i=0; i<96;i++)
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;incstack = 0
  8398  001458  6BBB               	clrf	IR_CalculateCodesize@i& (0+255),b
  8399  00145A                     l5451:
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;IR.c: 195: {
  8403                           ;IR.c: 196: if(Code[i] == 0)
  8404  00145A  51BB               	movf	IR_CalculateCodesize@i& (0+255),w,b
  8405  00145C  0D02               	mullw	2
  8406  00145E  50F3               	movf	prodl,w,c
  8407  001460  25B5               	addwf	IR_CalculateCodesize@Code& (0+255),w,b
  8408  001462  6FB8               	movwf	??_IR_CalculateCodesize& (0+255),b
  8409  001464  50F4               	movf	prodh,w,c
  8410  001466  21B6               	addwfc	(IR_CalculateCodesize@Code+1)& (0+255),w,b
  8411  001468  6FB9               	movwf	(??_IR_CalculateCodesize+1)& (0+255),b
  8412  00146A  0E00               	movlw	0
  8413  00146C  21B7               	addwfc	(IR_CalculateCodesize@Code+2)& (0+255),w,b
  8414  00146E  6FBA               	movwf	(??_IR_CalculateCodesize+2)& (0+255),b
  8415  001470  C0B8  FFF6         	movff	??_IR_CalculateCodesize,tblptrl
  8416  001474  C0B9  FFF7         	movff	??_IR_CalculateCodesize+1,tblptrh
  8417  001478  C0BA  FFF8         	movff	??_IR_CalculateCodesize+2,tblptru
  8418  00147C  0009               	tblrd		*+
  8419  00147E  50F5               	movf	tablat,w,c
  8420  001480  0009               	tblrd		*+
  8421  001482  10F5               	iorwf	tablat,w,c
  8422  001484  E102               	bnz	l5457
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;IR.c: 197: {
  8426                           ;IR.c: 198: return i;
  8427  001486  51BB               	movf	IR_CalculateCodesize@i& (0+255),w,b
  8428  001488  0012               	return	
  8429  00148A                     l5457:
  8430                           
  8431                           ; BSR set to: 0
  8432  00148A  2BBB               	incf	IR_CalculateCodesize@i& (0+255),f,b
  8433                           
  8434                           ; BSR set to: 0
  8435  00148C  0E5F               	movlw	95
  8436  00148E  65BB               	cpfsgt	IR_CalculateCodesize@i& (0+255),b
  8437  001490  D7E4               	goto	l5451
  8438  001492  0C60               	retlw	96
  8439  001494                     __end_of_IR_CalculateCodesize:
  8440                           	opt stack 0
  8441                           tblptru	equ	0xFF8
  8442                           tblptrh	equ	0xFF7
  8443                           tblptrl	equ	0xFF6
  8444                           tablat	equ	0xFF5
  8445                           prodh	equ	0xFF4
  8446                           prodl	equ	0xFF3
  8447                           intcon	equ	0xFF2
  8448                           intcon2	equ	0xFF1
  8449                           intcon3	equ	0xFF0
  8450                           postinc0	equ	0xFEE
  8451                           wreg	equ	0xFE8
  8452                           postdec1	equ	0xFE5
  8453                           fsr1l	equ	0xFE1
  8454                           postinc2	equ	0xFDE
  8455                           postdec2	equ	0xFDD
  8456                           fsr2h	equ	0xFDA
  8457                           fsr2l	equ	0xFD9
  8458                           status	equ	0xFD8
  8459                           
  8460 ;; *************** function _ADC_Start *****************
  8461 ;; Defined at:
  8462 ;;		line 145 in file "ADC.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;		None
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;		None
  8467 ;; Return value:  Size  Location     Type
  8468 ;;		None               void
  8469 ;; Registers used:
  8470 ;;		None
  8471 ;; Tracked objects:
  8472 ;;		On entry : F/1
  8473 ;;		On exit  : F/1
  8474 ;;		Unchanged: F/0
  8475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8476 ;;      Params:         0       0       0       0       0
  8477 ;;      Locals:         0       0       0       0       0
  8478 ;;      Temps:          0       0       0       0       0
  8479 ;;      Totals:         0       0       0       0       0
  8480 ;;Total ram usage:        0 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; Hardware stack levels required when called:   12
  8483 ;; This function calls:
  8484 ;;		Nothing
  8485 ;; This function is called by:
  8486 ;;		_main
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           	psect	text58
  8491  001BD2                     __ptext58:
  8492                           	opt stack 0
  8493  001BD2                     _ADC_Start:
  8494                           	opt stack 18
  8495                           
  8496                           ; BSR set to: 1
  8497                           ;ADC.c: 147: ADCON0bits.GO = 1;
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;incstack = 0
  8501  001BD2  82C2               	bsf	4034,1,c	;volatile
  8502                           
  8503                           ; BSR set to: 1
  8504  001BD4  0012               	return		;funcret
  8505  001BD6                     __end_of_ADC_Start:
  8506                           	opt stack 0
  8507                           tblptru	equ	0xFF8
  8508                           tblptrh	equ	0xFF7
  8509                           tblptrl	equ	0xFF6
  8510                           tablat	equ	0xFF5
  8511                           prodh	equ	0xFF4
  8512                           prodl	equ	0xFF3
  8513                           intcon	equ	0xFF2
  8514                           intcon2	equ	0xFF1
  8515                           intcon3	equ	0xFF0
  8516                           postinc0	equ	0xFEE
  8517                           wreg	equ	0xFE8
  8518                           postdec1	equ	0xFE5
  8519                           fsr1l	equ	0xFE1
  8520                           postinc2	equ	0xFDE
  8521                           postdec2	equ	0xFDD
  8522                           fsr2h	equ	0xFDA
  8523                           fsr2l	equ	0xFD9
  8524                           status	equ	0xFD8
  8525                           
  8526 ;; *************** function _low_isr *****************
  8527 ;; Defined at:
  8528 ;;		line 126 in file "INTERRUPTS.c"
  8529 ;; Parameters:    Size  Location     Type
  8530 ;;		None
  8531 ;; Auto vars:     Size  Location     Type
  8532 ;;  IRtemp          2   87[COMRAM] unsigned int 
  8533 ;;  button_state    1   86[COMRAM] unsigned char 
  8534 ;;  IR_state        1    0        unsigned char 
  8535 ;; Return value:  Size  Location     Type
  8536 ;;		None               void
  8537 ;; Registers used:
  8538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8539 ;; Tracked objects:
  8540 ;;		On entry : 0/0
  8541 ;;		On exit  : 0/0
  8542 ;;		Unchanged: 0/0
  8543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8544 ;;      Params:         0       0       0       0       0
  8545 ;;      Locals:         3       0       0       0       0
  8546 ;;      Temps:         11       0       0       0       0
  8547 ;;      Totals:        14       0       0       0       0
  8548 ;;Total ram usage:       14 bytes
  8549 ;; Hardware stack levels used:    1
  8550 ;; Hardware stack levels required when called:   11
  8551 ;; This function calls:
  8552 ;;		_ADC_CalculateVoltage
  8553 ;;		_IR_CheckCode
  8554 ;;		_IR_ResetData
  8555 ;;		_RF_Disable
  8556 ;;		_TMR_Timer1Start
  8557 ;;		_TMR_Timer1Status
  8558 ;;		_TMR_Timer2Start
  8559 ;;		i1_BUT_IR_PinChangeInt
  8560 ;;		i1_BUT_ReadButton
  8561 ;;		i1_IR_ReadReceiver
  8562 ;;		i1_RF_DataInt
  8563 ;;		i1_SYS_ActivityTimerReset
  8564 ;;		i1_TMR_ResetTimer1
  8565 ;;		i1_TMR_Timer1
  8566 ;;		i1_TMR_Timer2
  8567 ;; This function is called by:
  8568 ;;		Interrupt level 1
  8569 ;; This function uses a non-reentrant model
  8570 ;;
  8571                           
  8572                           	psect	intcodelo
  8573  000018                     __pintcodelo:
  8574                           	opt stack 0
  8575  000018                     _low_isr:
  8576                           	opt stack 13
  8577                           
  8578                           ; BSR set to: 1
  8579                           ;incstack = 0
  8580  000018  806E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  8581  00001A  CFD8 F04C          	movff	status,??_low_isr
  8582  00001E  CFE8 F04D          	movff	wreg,??_low_isr+1
  8583  000022  CFE0 F04E          	movff	bsr,??_low_isr+2
  8584  000026  CFD9 F04F          	movff	fsr2l,??_low_isr+3
  8585  00002A  CFDA F050          	movff	fsr2h,??_low_isr+4
  8586  00002E  CFF3 F051          	movff	prodl,??_low_isr+5
  8587  000032  CFF4 F052          	movff	prodh,??_low_isr+6
  8588  000036  CFF6 F053          	movff	tblptrl,??_low_isr+7
  8589  00003A  CFF7 F054          	movff	tblptrh,??_low_isr+8
  8590  00003E  CFF8 F055          	movff	tblptru,??_low_isr+9
  8591  000042  CFF5 F056          	movff	tablat,??_low_isr+10
  8592                           
  8593                           ;INTERRUPTS.c: 132: if(INTCONbits.RBIF)
  8594  000046  A0F2               	btfss	intcon,0,c	;volatile
  8595  000048  D08C               	goto	i1l215
  8596                           
  8597                           ;INTERRUPTS.c: 133: {
  8598                           ;INTERRUPTS.c: 138: button_state = BUT_ReadButton();
  8599  00004A  EC94  F00B         	call	i1_BUT_ReadButton	;wreg free
  8600  00004E  6E57               	movwf	low_isr@button_state,c
  8601                           
  8602                           ;INTERRUPTS.c: 139: IR_state = IR_ReadReceiver();
  8603  000050  ECFF  F00B         	call	i1_IR_ReadReceiver	;wreg free
  8604  000054                     i14L__ptext60:
  8605                           	opt stack 0
  8606  000054                     i14Li1_SYS_ActivityTimerReset:
  8607                           	opt stack 0
  8608  000054                     i14Li1l6375:
  8609                           	opt stack 17
  8610                           
  8611                           ;SYSTEM.c: 62: Activity_Timer = 0;
  8612  000054  6A5A               	clrf	_Activity_Timer,c
  8613  000056  6A5B               	clrf	_Activity_Timer+1,c
  8614  000058  6A5C               	clrf	_Activity_Timer+2,c
  8615  00005A  6A5D               	clrf	_Activity_Timer+3,c
  8616  00005C                     i14Li1l339:
  8617                           	opt stack 13
  8618                           
  8619                           ;INTERRUPTS.c: 141: if(ButtonChange)
  8620  00005C  5066               	movf	_ButtonChange,w,c
  8621  00005E  E02C               	bz	i1l6629
  8622                           
  8623                           ;INTERRUPTS.c: 142: {
  8624                           ;INTERRUPTS.c: 144: TMR_Timer2(0);
  8625  000060  0E00               	movlw	0
  8626  000062  ECA0  F00D         	call	i1_TMR_Timer2
  8627                           
  8628                           ;INTERRUPTS.c: 145: if(button_state)
  8629  000066  5057               	movf	low_isr@button_state,w,c
  8630  000068  E016               	bz	i1l6617
  8631                           
  8632                           ;INTERRUPTS.c: 146: {
  8633                           ;INTERRUPTS.c: 148: if(System_State == 8)
  8634  00006A  0E08               	movlw	8
  8635  00006C  0101               	movlb	1	; () banked
  8636  00006E  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  8637  000070  E109               	bnz	i1l6613
  8638                           
  8639                           ; BSR set to: 1
  8640                           ;INTERRUPTS.c: 149: {
  8641                           ;INTERRUPTS.c: 150: Timer2Use = 17;
  8642  000072  0E11               	movlw	17
  8643  000074  6E6C               	movwf	_Timer2Use,c
  8644                           
  8645                           ; BSR set to: 1
  8646                           ;INTERRUPTS.c: 151: TMR_Timer2Start(400);
  8647  000076  0E01               	movlw	1
  8648  000078  6E04               	movwf	TMR_Timer2Start@time+1,c
  8649  00007A  0E90               	movlw	144
  8650  00007C  6E03               	movwf	TMR_Timer2Start@time,c
  8651  00007E  ECC0  F00C         	call	_TMR_Timer2Start	;wreg free
  8652                           
  8653                           ;INTERRUPTS.c: 152: }
  8654  000082  D018               	goto	i1l6627
  8655  000084                     i1l6613:
  8656                           
  8657                           ; BSR set to: 1
  8658                           ;INTERRUPTS.c: 153: else
  8659                           ;INTERRUPTS.c: 154: {
  8660                           ;INTERRUPTS.c: 155: Timer2Use = 19;
  8661  000084  0E13               	movlw	19
  8662  000086  6E6C               	movwf	_Timer2Use,c
  8663                           
  8664                           ; BSR set to: 1
  8665                           ;INTERRUPTS.c: 156: TMR_Timer2Start(8);
  8666  000088  0E00               	movlw	0
  8667  00008A  6E04               	movwf	TMR_Timer2Start@time+1,c
  8668  00008C  0E08               	movlw	8
  8669  00008E  6E03               	movwf	TMR_Timer2Start@time,c
  8670  000090  ECC0  F00C         	call	_TMR_Timer2Start	;wreg free
  8671  000094  D00F               	goto	i1l6627
  8672  000096                     i1l6617:
  8673                           
  8674                           ;INTERRUPTS.c: 159: else
  8675                           ;INTERRUPTS.c: 160: {
  8676                           ;INTERRUPTS.c: 161: if(System_State != 10)
  8677  000096  0E0A               	movlw	10
  8678  000098  0101               	movlb	1	; () banked
  8679  00009A  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  8680  00009C  E003               	bz	i1l6623
  8681                           
  8682                           ; BSR set to: 1
  8683                           ;INTERRUPTS.c: 162: {
  8684                           ;INTERRUPTS.c: 164: Button_Data = 1;
  8685  00009E  0E01               	movlw	1
  8686  0000A0  6F02               	movwf	_Button_Data& (0+255),b	;volatile
  8687  0000A2  D7F0               	goto	i1l6613
  8688  0000A4                     i1l6623:
  8689                           
  8690                           ; BSR set to: 1
  8691                           ;INTERRUPTS.c: 168: else
  8692                           ;INTERRUPTS.c: 169: {
  8693                           ;INTERRUPTS.c: 170: Timer2Use = 18;
  8694  0000A4  0E12               	movlw	18
  8695  0000A6  6E6C               	movwf	_Timer2Use,c
  8696                           
  8697                           ; BSR set to: 1
  8698                           ;INTERRUPTS.c: 171: TMR_Timer2Start(500);
  8699  0000A8  0E01               	movlw	1
  8700  0000AA  6E04               	movwf	TMR_Timer2Start@time+1,c
  8701  0000AC  0EF4               	movlw	244
  8702  0000AE  6E03               	movwf	TMR_Timer2Start@time,c
  8703  0000B0  ECC0  F00C         	call	_TMR_Timer2Start	;wreg free
  8704  0000B4                     i1l6627:
  8705                           
  8706                           ;INTERRUPTS.c: 172: }
  8707                           ;INTERRUPTS.c: 173: }
  8708                           ;INTERRUPTS.c: 174: ButtonChange = 0;
  8709  0000B4  6A66               	clrf	_ButtonChange,c
  8710                           
  8711                           ;INTERRUPTS.c: 175: }
  8712  0000B6  D053               	goto	i1l223
  8713  0000B8                     i1l6629:
  8714                           
  8715                           ;INTERRUPTS.c: 176: else if(IRChange)
  8716  0000B8  5067               	movf	_IRChange,w,c
  8717  0000BA  E050               	bz	i1l224
  8718                           
  8719                           ;INTERRUPTS.c: 177: {
  8720                           ;INTERRUPTS.c: 179: if(!TMR_Timer1Status())
  8721  0000BC  ECDF  F00D         	call	_TMR_Timer1Status	;wreg free
  8722  0000C0  0900               	iorlw	0
  8723  0000C2  E103               	bnz	i1l225
  8724                           
  8725                           ;INTERRUPTS.c: 180: {
  8726                           ;INTERRUPTS.c: 182: TMR_Timer1Start();
  8727  0000C4  EC79  F00D         	call	_TMR_Timer1Start	;wreg free
  8728                           
  8729                           ;INTERRUPTS.c: 183: }
  8730  0000C8  D047               	goto	i1l226
  8731  0000CA                     i1l225:
  8732                           
  8733                           ;INTERRUPTS.c: 184: else
  8734                           ;INTERRUPTS.c: 185: {
  8735                           ;INTERRUPTS.c: 186: IRtemp = TMR1L;
  8736  0000CA  CFCE F058          	movff	4046,low_isr@IRtemp	;volatile
  8737  0000CE  6A59               	clrf	low_isr@IRtemp+1,c
  8738                           
  8739                           ;INTERRUPTS.c: 187: IRtemp += (unsigned int)TMR1H << 8;
  8740  0000D0  50CF               	movf	4047,w,c	;volatile
  8741  0000D2  2659               	addwf	low_isr@IRtemp+1,f,c
  8742                           
  8743                           ;INTERRUPTS.c: 188: TMR_ResetTimer1();
  8744  0000D4  EC50  F00C         	call	i1_TMR_ResetTimer1	;wreg free
  8745                           
  8746                           ;INTERRUPTS.c: 189: if(!IRStarted)
  8747  0000D8  5069               	movf	_IRStarted,w,c
  8748  0000DA  E122               	bnz	i1l6659
  8749                           
  8750                           ;INTERRUPTS.c: 190: {
  8751                           ;INTERRUPTS.c: 191: if(System_State == 8)
  8752  0000DC  0E08               	movlw	8
  8753  0000DE  0101               	movlb	1	; () banked
  8754  0000E0  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  8755  0000E2  E110               	bnz	i1l6651
  8756                           
  8757                           ; BSR set to: 1
  8758                           ;INTERRUPTS.c: 192: {
  8759                           ;INTERRUPTS.c: 193: if(IRtemp >= IR_SyncLow && IRtemp <= IR_SyncHigh)
  8760  0000E4  5060               	movf	_IR_SyncLow,w,c
  8761  0000E6  5C58               	subwf	low_isr@IRtemp,w,c
  8762  0000E8  5061               	movf	_IR_SyncLow+1,w,c
  8763  0000EA  5859               	subwfb	low_isr@IRtemp+1,w,c
  8764  0000EC  E319               	bnc	i1l6659
  8765                           
  8766                           ; BSR set to: 1
  8767  0000EE  5058               	movf	low_isr@IRtemp,w,c
  8768  0000F0  5C5E               	subwf	_IR_SyncHigh,w,c
  8769  0000F2  5059               	movf	low_isr@IRtemp+1,w,c
  8770  0000F4  585F               	subwfb	_IR_SyncHigh+1,w,c
  8771  0000F6  E314               	bnc	i1l6659
  8772                           
  8773                           ; BSR set to: 1
  8774                           ;INTERRUPTS.c: 194: {
  8775                           ;INTERRUPTS.c: 195: RF_DataInt(0);
  8776  0000F8  0E00               	movlw	0
  8777  0000FA  EC06  F00D         	call	i1_RF_DataInt
  8778  0000FE                     i1l6649:
  8779                           
  8780                           ;INTERRUPTS.c: 196: IRStarted = 1;
  8781  0000FE  0E01               	movlw	1
  8782  000100  6E69               	movwf	_IRStarted,c
  8783  000102  D00E               	goto	i1l6659
  8784  000104                     i1l6651:
  8785                           
  8786                           ; BSR set to: 1
  8787                           ;INTERRUPTS.c: 199: else
  8788                           ;INTERRUPTS.c: 200: {
  8789                           ;INTERRUPTS.c: 201: if(IRtemp >= 6000 && IRtemp <= 10000)
  8790  000104  0E70               	movlw	112
  8791  000106  5C58               	subwf	low_isr@IRtemp,w,c
  8792  000108  0E17               	movlw	23
  8793  00010A  5859               	subwfb	low_isr@IRtemp+1,w,c
  8794  00010C  E309               	bnc	i1l6659
  8795                           
  8796                           ; BSR set to: 1
  8797  00010E  0E11               	movlw	17
  8798  000110  5C58               	subwf	low_isr@IRtemp,w,c
  8799  000112  0E27               	movlw	39
  8800  000114  5859               	subwfb	low_isr@IRtemp+1,w,c
  8801  000116  E204               	bc	i1l6659
  8802                           
  8803                           ; BSR set to: 1
  8804                           ;INTERRUPTS.c: 202: {
  8805                           ;INTERRUPTS.c: 203: RF_DataInt(0);
  8806  000118  0E00               	movlw	0
  8807  00011A  EC06  F00D         	call	i1_RF_DataInt
  8808  00011E  D7EF               	goto	i1l6649
  8809  000120                     i1l6659:
  8810                           
  8811                           ;INTERRUPTS.c: 205: }
  8812                           ;INTERRUPTS.c: 206: }
  8813                           ;INTERRUPTS.c: 207: }
  8814                           ;INTERRUPTS.c: 208: if(IRStarted)
  8815  000120  5069               	movf	_IRStarted,w,c
  8816  000122  E01A               	bz	i1l226
  8817                           
  8818                           ;INTERRUPTS.c: 209: {
  8819                           ;INTERRUPTS.c: 210: RF_Disable();
  8820  000124  ECF4  F00C         	call	_RF_Disable	;wreg free
  8821                           
  8822                           ;INTERRUPTS.c: 211: if(IR_DataPlace < 96)
  8823  000128  0E60               	movlw	96
  8824  00012A  606B               	cpfslt	_IR_DataPlace,c
  8825  00012C  D015               	goto	i1l226
  8826                           
  8827                           ;INTERRUPTS.c: 212: {
  8828                           ;INTERRUPTS.c: 213: IR_DataTiming[IR_DataPlace] = IRtemp;
  8829  00012E  506B               	movf	_IR_DataPlace,w,c
  8830  000130  0D02               	mullw	2
  8831  000132  0E00               	movlw	low _IR_DataTiming
  8832  000134  24F3               	addwf	prodl,w,c
  8833  000136  6ED9               	movwf	fsr2l,c
  8834  000138  0E02               	movlw	high _IR_DataTiming
  8835  00013A  20F4               	addwfc	prodh,w,c
  8836  00013C  6EDA               	movwf	fsr2h,c
  8837  00013E  C058  FFDE         	movff	low_isr@IRtemp,postinc2
  8838  000142  C059  FFDD         	movff	low_isr@IRtemp+1,postdec2
  8839                           
  8840                           ;INTERRUPTS.c: 214: IR_DataPlace++;
  8841  000146  2A6B               	incf	_IR_DataPlace,f,c
  8842                           
  8843                           ;INTERRUPTS.c: 215: if(System_State == 8)
  8844  000148  0E08               	movlw	8
  8845  00014A  0101               	movlb	1	; () banked
  8846  00014C  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  8847  00014E  E104               	bnz	i1l226
  8848                           
  8849                           ; BSR set to: 1
  8850                           ;INTERRUPTS.c: 216: {
  8851                           ;INTERRUPTS.c: 217: if(IR_DataPlace >= IR_CodeSize)
  8852  000150  506A               	movf	_IR_CodeSize,w,c
  8853  000152  5C6B               	subwf	_IR_DataPlace,w,c
  8854  000154  E301               	bnc	i1l226
  8855                           
  8856                           ; BSR set to: 1
  8857                           ;INTERRUPTS.c: 218: {
  8858                           ;INTERRUPTS.c: 219: PIR1bits.TMR1IF = 1;
  8859  000156  809E               	bsf	3998,0,c	;volatile
  8860  000158                     i1l226:
  8861                           
  8862                           ;INTERRUPTS.c: 220: }
  8863                           ;INTERRUPTS.c: 221: }
  8864                           ;INTERRUPTS.c: 222: }
  8865                           ;INTERRUPTS.c: 223: }
  8866                           ;INTERRUPTS.c: 224: }
  8867                           ;INTERRUPTS.c: 225: IRChange = 0;
  8868  000158  6A67               	clrf	_IRChange,c
  8869                           
  8870                           ;INTERRUPTS.c: 226: }
  8871  00015A  D001               	goto	i1l223
  8872  00015C                     i1l224:
  8873                           
  8874                           ;INTERRUPTS.c: 227: else
  8875                           ;INTERRUPTS.c: 228: {
  8876                           ;INTERRUPTS.c: 230: __nop();
  8877  00015C  F000               	nop	
  8878  00015E                     i1l223:
  8879                           
  8880                           ;INTERRUPTS.c: 231: }
  8881                           ;INTERRUPTS.c: 232: INTCONbits.RBIF = 0;
  8882  00015E  90F2               	bcf	intcon,0,c	;volatile
  8883                           
  8884                           ;INTERRUPTS.c: 233: }
  8885  000160  D057               	goto	i1l254
  8886  000162                     i1l215:
  8887                           
  8888                           ;INTERRUPTS.c: 234: else if(PIR1bits.TMR2IF)
  8889  000162  A29E               	btfss	3998,1,c	;volatile
  8890  000164  D01E               	goto	i1l238
  8891                           
  8892                           ;INTERRUPTS.c: 235: {
  8893                           ;INTERRUPTS.c: 237: if(Timer2PostCount >= Timer2Post)
  8894  000166  5062               	movf	_Timer2Post,w,c
  8895  000168  5C64               	subwf	_Timer2PostCount,w,c
  8896  00016A  5063               	movf	_Timer2Post+1,w,c
  8897  00016C  5865               	subwfb	_Timer2PostCount+1,w,c
  8898  00016E  E311               	bnc	i15L__ptext60
  8899                           
  8900                           ;INTERRUPTS.c: 238: {
  8901                           ;INTERRUPTS.c: 239: TMR_Timer2(0);
  8902  000170  0E00               	movlw	0
  8903  000172  ECA0  F00D         	call	i1_TMR_Timer2
  8904                           
  8905                           ;INTERRUPTS.c: 240: if(Timer2Use == 17)
  8906  000176  0E11               	movlw	17
  8907  000178  186C               	xorwf	_Timer2Use,w,c
  8908  00017A  E102               	bnz	i1l6683
  8909                           
  8910                           ;INTERRUPTS.c: 241: {
  8911                           ;INTERRUPTS.c: 243: System_State = 10;
  8912  00017C  0E0A               	movlw	10
  8913  00017E  D004               	goto	L1
  8914  000180                     i1l6683:
  8915                           
  8916                           ;INTERRUPTS.c: 246: else if(Timer2Use == 18)
  8917  000180  0E12               	movlw	18
  8918  000182  186C               	xorwf	_Timer2Use,w,c
  8919  000184  E10C               	bnz	i1l6691
  8920                           
  8921                           ;INTERRUPTS.c: 247: {
  8922                           ;INTERRUPTS.c: 248: System_State = 8;
  8923  000186  0E08               	movlw	8
  8924  000188                     L1:
  8925  000188  0101               	movlb	1	; () banked
  8926  00018A  6FAE               	movwf	_System_State& (0+255),b	;volatile
  8927                           
  8928                           ;INTERRUPTS.c: 249: System_State_Change = 1;
  8929  00018C  0E01               	movlw	1
  8930  00018E  6F06               	movwf	_System_State_Change& (0+255),b	;volatile
  8931  000190  D006               	goto	i1l6691
  8932  000192                     i15L__ptext60:
  8933                           	opt stack 0
  8934  000192                     i15Li1_SYS_ActivityTimerReset:
  8935                           	opt stack 0
  8936  000192                     i15Li1l6375:
  8937                           	opt stack 17
  8938                           
  8939                           ;SYSTEM.c: 62: Activity_Timer = 0;
  8940  000192  6A5A               	clrf	_Activity_Timer,c
  8941  000194  6A5B               	clrf	_Activity_Timer+1,c
  8942  000196  6A5C               	clrf	_Activity_Timer+2,c
  8943  000198  6A5D               	clrf	_Activity_Timer+3,c
  8944  00019A                     i15Li1l339:
  8945                           	opt stack 13
  8946                           
  8947                           ;INTERRUPTS.c: 255: Timer2PostCount++;
  8948  00019A  4A64               	infsnz	_Timer2PostCount,f,c
  8949  00019C  2A65               	incf	_Timer2PostCount+1,f,c
  8950  00019E                     i1l6691:
  8951                           
  8952                           ;INTERRUPTS.c: 256: }
  8953                           ;INTERRUPTS.c: 257: PIR1bits.TMR2IF = 0;
  8954  00019E  929E               	bcf	3998,1,c	;volatile
  8955                           
  8956                           ;INTERRUPTS.c: 258: }
  8957  0001A0  D037               	goto	i1l254
  8958  0001A2                     i1l238:
  8959                           
  8960                           ;INTERRUPTS.c: 259: else if(PIR1bits.ADIF)
  8961  0001A2  AC9E               	btfss	3998,6,c	;volatile
  8962  0001A4  D004               	goto	i1l245
  8963                           
  8964                           ;INTERRUPTS.c: 260: {
  8965                           ;INTERRUPTS.c: 262: ADC_CalculateVoltage();
  8966  0001A6  EC7B  F005         	call	_ADC_CalculateVoltage	;wreg free
  8967                           
  8968                           ;INTERRUPTS.c: 263: PIR1bits.ADIF = 0;
  8969  0001AA  9C9E               	bcf	3998,6,c	;volatile
  8970                           
  8971                           ;INTERRUPTS.c: 264: }
  8972  0001AC  D031               	goto	i1l254
  8973  0001AE                     i1l245:
  8974                           
  8975                           ;INTERRUPTS.c: 265: else if(PIR1bits.TMR1IF)
  8976  0001AE  A09E               	btfss	3998,0,c	;volatile
  8977  0001B0  D02E               	goto	i1l247
  8978                           
  8979                           ;INTERRUPTS.c: 266: {
  8980                           ;INTERRUPTS.c: 268: BUT_IR_PinChangeInt(0);
  8981  0001B2  0E00               	movlw	0
  8982  0001B4  EC99  F00D         	call	i1_BUT_IR_PinChangeInt
  8983                           
  8984                           ;INTERRUPTS.c: 269: TMR_Timer1(0);
  8985  0001B8  0E00               	movlw	0
  8986  0001BA  ECA7  F00D         	call	i1_TMR_Timer1
  8987  0001BE                     i16L__ptext60:
  8988                           	opt stack 0
  8989  0001BE                     i16Li1_SYS_ActivityTimerReset:
  8990                           	opt stack 0
  8991  0001BE                     i16Li1l6375:
  8992                           	opt stack 17
  8993                           
  8994                           ;SYSTEM.c: 62: Activity_Timer = 0;
  8995  0001BE  6A5A               	clrf	_Activity_Timer,c
  8996  0001C0  6A5B               	clrf	_Activity_Timer+1,c
  8997  0001C2  6A5C               	clrf	_Activity_Timer+2,c
  8998  0001C4  6A5D               	clrf	_Activity_Timer+3,c
  8999  0001C6                     i16Li1l339:
  9000                           	opt stack 13
  9001                           
  9002                           ;INTERRUPTS.c: 271: BUT_ReadButton();
  9003  0001C6  EC94  F00B         	call	i1_BUT_ReadButton	;wreg free
  9004                           
  9005                           ; BSR set to: 0
  9006                           ;INTERRUPTS.c: 272: IR_ReadReceiver();
  9007  0001CA  ECFF  F00B         	call	i1_IR_ReadReceiver	;wreg free
  9008                           
  9009                           ; BSR set to: 0
  9010                           ;INTERRUPTS.c: 273: INTCONbits.RBIF = 0;
  9011  0001CE  90F2               	bcf	intcon,0,c	;volatile
  9012                           
  9013                           ; BSR set to: 0
  9014                           ;INTERRUPTS.c: 274: if(System_State == 10)
  9015  0001D0  0E0A               	movlw	10
  9016  0001D2  0101               	movlb	1	; () banked
  9017  0001D4  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  9018  0001D6  E108               	bnz	i1l6713
  9019                           
  9020                           ; BSR set to: 1
  9021                           ;INTERRUPTS.c: 275: {
  9022                           ;INTERRUPTS.c: 276: if(IR_DataPlace >= 40)
  9023  0001D8  0E27               	movlw	39
  9024  0001DA  646B               	cpfsgt	_IR_DataPlace,c
  9025  0001DC  D00A               	goto	i1l6719
  9026  0001DE                     i1l6711:
  9027                           
  9028                           ; BSR set to: 1
  9029                           ;INTERRUPTS.c: 277: {
  9030                           ;INTERRUPTS.c: 279: IR_Data = IR_CheckCode();
  9031  0001DE  EC01  F014         	call	_IR_CheckCode	;wreg free
  9032  0001E2  0101               	movlb	1	; () banked
  9033  0001E4  6F04               	movwf	_IR_Data& (0+255),b	;volatile
  9034  0001E6  D005               	goto	i1l6719
  9035  0001E8                     i1l6713:
  9036                           
  9037                           ; BSR set to: 1
  9038                           ;INTERRUPTS.c: 282: else
  9039                           ;INTERRUPTS.c: 283: {
  9040                           ;INTERRUPTS.c: 284: if(!IR_Data)
  9041  0001E8  5104               	movf	_IR_Data& (0+255),w,b	;volatile
  9042  0001EA  E103               	bnz	i1l6719
  9043                           
  9044                           ; BSR set to: 1
  9045                           ;INTERRUPTS.c: 285: {
  9046                           ;INTERRUPTS.c: 286: if(IR_DataPlace >= IR_CodeSize)
  9047  0001EC  506A               	movf	_IR_CodeSize,w,c
  9048  0001EE  5C6B               	subwf	_IR_DataPlace,w,c
  9049  0001F0  E2F6               	bc	i1l6711
  9050  0001F2                     i1l6719:
  9051                           
  9052                           ; BSR set to: 1
  9053                           ;INTERRUPTS.c: 289: }
  9054                           ;INTERRUPTS.c: 290: }
  9055                           ;INTERRUPTS.c: 291: }
  9056                           ;INTERRUPTS.c: 292: TMR_ResetTimer1();
  9057  0001F2  EC50  F00C         	call	i1_TMR_ResetTimer1	;wreg free
  9058                           
  9059                           ;INTERRUPTS.c: 293: IR_ResetData();
  9060  0001F6  ECD0  F00D         	call	_IR_ResetData	;wreg free
  9061                           
  9062                           ;INTERRUPTS.c: 294: INTCON3bits.INT1IF = 0;
  9063  0001FA  90F0               	bcf	intcon3,0,c	;volatile
  9064                           
  9065                           ;INTERRUPTS.c: 295: INTCON3bits.INT2IF = 0;
  9066  0001FC  92F0               	bcf	intcon3,1,c	;volatile
  9067                           
  9068                           ;INTERRUPTS.c: 296: RF_DataInt(1);
  9069  0001FE  0E01               	movlw	1
  9070  000200  EC06  F00D         	call	i1_RF_DataInt
  9071                           
  9072                           ;INTERRUPTS.c: 297: BUT_IR_PinChangeInt(1);
  9073  000204  0E01               	movlw	1
  9074  000206  EC99  F00D         	call	i1_BUT_IR_PinChangeInt
  9075                           
  9076                           ;INTERRUPTS.c: 298: PIR1bits.TMR1IF = 0;
  9077  00020A  909E               	bcf	3998,0,c	;volatile
  9078                           
  9079                           ;INTERRUPTS.c: 299: }
  9080  00020C  D001               	goto	i1l254
  9081  00020E                     i1l247:
  9082                           
  9083                           ;INTERRUPTS.c: 300: else
  9084                           ;INTERRUPTS.c: 301: {
  9085                           ;INTERRUPTS.c: 303: __nop();
  9086  00020E  F000               	nop	
  9087  000210                     i1l254:
  9088  000210  C056  FFF5         	movff	??_low_isr+10,tablat
  9089  000214  C055  FFF8         	movff	??_low_isr+9,tblptru
  9090  000218  C054  FFF7         	movff	??_low_isr+8,tblptrh
  9091  00021C  C053  FFF6         	movff	??_low_isr+7,tblptrl
  9092  000220  C052  FFF4         	movff	??_low_isr+6,prodh
  9093  000224  C051  FFF3         	movff	??_low_isr+5,prodl
  9094  000228  C050  FFDA         	movff	??_low_isr+4,fsr2h
  9095  00022C  C04F  FFD9         	movff	??_low_isr+3,fsr2l
  9096  000230  C04E  FFE0         	movff	??_low_isr+2,bsr
  9097  000234  C04D  FFE8         	movff	??_low_isr+1,wreg
  9098  000238  C04C  FFD8         	movff	??_low_isr,status
  9099  00023C  906E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  9100  00023E  0010               	retfie	
  9101  000240                     __end_of_low_isr:
  9102                           	opt stack 0
  9103                           tblptru	equ	0xFF8
  9104                           tblptrh	equ	0xFF7
  9105                           tblptrl	equ	0xFF6
  9106                           tablat	equ	0xFF5
  9107                           prodh	equ	0xFF4
  9108                           prodl	equ	0xFF3
  9109                           intcon	equ	0xFF2
  9110                           intcon2	equ	0xFF1
  9111                           intcon3	equ	0xFF0
  9112                           postinc0	equ	0xFEE
  9113                           wreg	equ	0xFE8
  9114                           postdec1	equ	0xFE5
  9115                           fsr1l	equ	0xFE1
  9116                           bsr	equ	0xFE0
  9117                           postinc2	equ	0xFDE
  9118                           postdec2	equ	0xFDD
  9119                           fsr2h	equ	0xFDA
  9120                           fsr2l	equ	0xFD9
  9121                           status	equ	0xFD8
  9122                           
  9123 ;; *************** function i1_SYS_ActivityTimerReset *****************
  9124 ;; Defined at:
  9125 ;;		line 60 in file "SYSTEM.c"
  9126 ;; Parameters:    Size  Location     Type
  9127 ;;		None
  9128 ;; Auto vars:     Size  Location     Type
  9129 ;;		None
  9130 ;; Return value:  Size  Location     Type
  9131 ;;		None               void
  9132 ;; Registers used:
  9133 ;;		None
  9134 ;; Tracked objects:
  9135 ;;		On entry : 0/0
  9136 ;;		On exit  : 0/0
  9137 ;;		Unchanged: 0/0
  9138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9139 ;;      Params:         0       0       0       0       0
  9140 ;;      Locals:         0       0       0       0       0
  9141 ;;      Temps:          0       0       0       0       0
  9142 ;;      Totals:         0       0       0       0       0
  9143 ;;Total ram usage:        0 bytes
  9144 ;; Hardware stack levels used:    1
  9145 ;; Hardware stack levels required when called:    6
  9146 ;; This function calls:
  9147 ;;		Nothing
  9148 ;; This function is called by:
  9149 ;;		_low_isr
  9150 ;; This function uses a non-reentrant model
  9151 ;;
  9152                           
  9153                           	psect	text60
  9154  000000                     __ptext60:
  9155                           	opt stack 0
  9156  000000                     __end_ofi1_SYS_ActivityTimerReset:
  9157                           	opt stack 0
  9158                           tblptru	equ	0xFF8
  9159                           tblptrh	equ	0xFF7
  9160                           tblptrl	equ	0xFF6
  9161                           tablat	equ	0xFF5
  9162                           prodh	equ	0xFF4
  9163                           prodl	equ	0xFF3
  9164                           intcon	equ	0xFF2
  9165                           intcon2	equ	0xFF1
  9166                           intcon3	equ	0xFF0
  9167                           postinc0	equ	0xFEE
  9168                           wreg	equ	0xFE8
  9169                           postdec1	equ	0xFE5
  9170                           fsr1l	equ	0xFE1
  9171                           bsr	equ	0xFE0
  9172                           postinc2	equ	0xFDE
  9173                           postdec2	equ	0xFDD
  9174                           fsr2h	equ	0xFDA
  9175                           fsr2l	equ	0xFD9
  9176                           status	equ	0xFD8
  9177                           
  9178 ;; *************** function i1_IR_ReadReceiver *****************
  9179 ;; Defined at:
  9180 ;;		line 82 in file "IR.c"
  9181 ;; Parameters:    Size  Location     Type
  9182 ;;		None
  9183 ;; Auto vars:     Size  Location     Type
  9184 ;;  IR_ReadRecei    1    0[COMRAM] unsigned char 
  9185 ;; Return value:  Size  Location     Type
  9186 ;;                  1    wreg      unsigned char 
  9187 ;; Registers used:
  9188 ;;		wreg, status,2, status,0
  9189 ;; Tracked objects:
  9190 ;;		On entry : F/0
  9191 ;;		On exit  : F/0
  9192 ;;		Unchanged: 0/0
  9193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9194 ;;      Params:         0       0       0       0       0
  9195 ;;      Locals:         1       0       0       0       0
  9196 ;;      Temps:          0       0       0       0       0
  9197 ;;      Totals:         1       0       0       0       0
  9198 ;;Total ram usage:        1 bytes
  9199 ;; Hardware stack levels used:    1
  9200 ;; Hardware stack levels required when called:    6
  9201 ;; This function calls:
  9202 ;;		Nothing
  9203 ;; This function is called by:
  9204 ;;		_low_isr
  9205 ;; This function uses a non-reentrant model
  9206 ;;
  9207                           
  9208                           	psect	text61
  9209  0017FE                     __ptext61:
  9210                           	opt stack 0
  9211  0017FE                     i1_IR_ReadReceiver:
  9212                           	opt stack 17
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;IR.c: 84: unsigned char value = PORTB;
  9216                           
  9217                           ;incstack = 0
  9218  0017FE  CF81 F001          	movff	3969,i1IR_ReadReceiver@value	;volatile
  9219                           
  9220                           ;IR.c: 86: if(value & 0x10)
  9221  001802  A801               	btfss	i1IR_ReadReceiver@value,4,c
  9222  001804  D007               	goto	i1l6391
  9223                           
  9224                           ; BSR set to: 0
  9225                           ;IR.c: 87: {
  9226                           ;IR.c: 88: if(IRValue_prev == 0)
  9227  001806  51C6               	movf	_IRValue_prev& (0+255),w,b
  9228  001808  E102               	bnz	i1l571
  9229                           
  9230                           ; BSR set to: 0
  9231                           ;IR.c: 89: {
  9232                           ;IR.c: 90: IRChange = 1;
  9233  00180A  0E01               	movlw	1
  9234  00180C  6E67               	movwf	_IRChange,c
  9235  00180E                     i1l571:
  9236                           
  9237                           ; BSR set to: 0
  9238                           ;IR.c: 91: }
  9239                           ;IR.c: 92: IRValue_prev = 1;
  9240  00180E  0E01               	movlw	1
  9241  001810  6FC6               	movwf	_IRValue_prev& (0+255),b
  9242                           
  9243                           ; BSR set to: 0
  9244                           ;IR.c: 93: return 1;
  9245  001812  0C01               	retlw	1
  9246  001814                     i1l6391:
  9247                           
  9248                           ; BSR set to: 0
  9249                           ;IR.c: 94: }
  9250                           ;IR.c: 96: if(IRValue_prev == 1)
  9251  001814  05C6               	decf	_IRValue_prev& (0+255),w,b
  9252  001816  E102               	bnz	i1l6395
  9253                           
  9254                           ; BSR set to: 0
  9255                           ;IR.c: 97: {
  9256                           ;IR.c: 98: IRChange = 1;
  9257  001818  0E01               	movlw	1
  9258  00181A  6E67               	movwf	_IRChange,c
  9259  00181C                     i1l6395:
  9260                           
  9261                           ; BSR set to: 0
  9262                           ;IR.c: 99: }
  9263                           ;IR.c: 100: IRValue_prev = 0;
  9264  00181C  6BC6               	clrf	_IRValue_prev& (0+255),b
  9265                           
  9266                           ; BSR set to: 0
  9267                           
  9268                           ; BSR set to: 0
  9269                           ;IR.c: 101: return 0;
  9270  00181E  0C00               	retlw	0	;funcret
  9271  001820                     __end_ofi1_IR_ReadReceiver:
  9272                           	opt stack 0
  9273                           tblptru	equ	0xFF8
  9274                           tblptrh	equ	0xFF7
  9275                           tblptrl	equ	0xFF6
  9276                           tablat	equ	0xFF5
  9277                           prodh	equ	0xFF4
  9278                           prodl	equ	0xFF3
  9279                           intcon	equ	0xFF2
  9280                           intcon2	equ	0xFF1
  9281                           intcon3	equ	0xFF0
  9282                           postinc0	equ	0xFEE
  9283                           wreg	equ	0xFE8
  9284                           postdec1	equ	0xFE5
  9285                           fsr1l	equ	0xFE1
  9286                           bsr	equ	0xFE0
  9287                           postinc2	equ	0xFDE
  9288                           postdec2	equ	0xFDD
  9289                           fsr2h	equ	0xFDA
  9290                           fsr2l	equ	0xFD9
  9291                           status	equ	0xFD8
  9292                           
  9293 ;; *************** function i1_BUT_ReadButton *****************
  9294 ;; Defined at:
  9295 ;;		line 73 in file "BUTTON.c"
  9296 ;; Parameters:    Size  Location     Type
  9297 ;;		None
  9298 ;; Auto vars:     Size  Location     Type
  9299 ;;  BUT_ReadButt    1    0[COMRAM] unsigned char 
  9300 ;; Return value:  Size  Location     Type
  9301 ;;                  1    wreg      unsigned char 
  9302 ;; Registers used:
  9303 ;;		wreg, status,2, status,0
  9304 ;; Tracked objects:
  9305 ;;		On entry : 0/0
  9306 ;;		On exit  : F/0
  9307 ;;		Unchanged: 0/0
  9308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9309 ;;      Params:         0       0       0       0       0
  9310 ;;      Locals:         1       0       0       0       0
  9311 ;;      Temps:          0       0       0       0       0
  9312 ;;      Totals:         1       0       0       0       0
  9313 ;;Total ram usage:        1 bytes
  9314 ;; Hardware stack levels used:    1
  9315 ;; Hardware stack levels required when called:    6
  9316 ;; This function calls:
  9317 ;;		Nothing
  9318 ;; This function is called by:
  9319 ;;		_low_isr
  9320 ;; This function uses a non-reentrant model
  9321 ;;
  9322                           
  9323                           	psect	text62
  9324  001728                     __ptext62:
  9325                           	opt stack 0
  9326  001728                     i1_BUT_ReadButton:
  9327                           	opt stack 17
  9328                           
  9329                           ;BUTTON.c: 75: unsigned char value = PORTB;
  9330                           
  9331                           ; BSR set to: 0
  9332                           ;incstack = 0
  9333  001728  CF81 F001          	movff	3969,i1BUT_ReadButton@value	;volatile
  9334                           
  9335                           ;BUTTON.c: 76: if((value & 0x20) == 0)
  9336  00172C  BA01               	btfsc	i1BUT_ReadButton@value,5,c
  9337  00172E  D008               	goto	i1l6411
  9338                           
  9339                           ;BUTTON.c: 77: {
  9340                           ;BUTTON.c: 79: if(ButtonValue_prev == 0)
  9341  001730  0100               	movlb	0	; () banked
  9342  001732  51C4               	movf	_ButtonValue_prev& (0+255),w,b
  9343  001734  E102               	bnz	i1l739
  9344                           
  9345                           ; BSR set to: 0
  9346                           ;BUTTON.c: 80: {
  9347                           ;BUTTON.c: 81: ButtonChange = 1;
  9348  001736  0E01               	movlw	1
  9349  001738  6E66               	movwf	_ButtonChange,c
  9350  00173A                     i1l739:
  9351                           
  9352                           ; BSR set to: 0
  9353                           ;BUTTON.c: 82: }
  9354                           ;BUTTON.c: 83: ButtonValue_prev = 1;
  9355  00173A  0E01               	movlw	1
  9356  00173C  6FC4               	movwf	_ButtonValue_prev& (0+255),b
  9357                           
  9358                           ; BSR set to: 0
  9359                           ;BUTTON.c: 84: return 1;
  9360  00173E  0C01               	retlw	1
  9361  001740                     i1l6411:
  9362                           
  9363                           ;BUTTON.c: 85: }
  9364                           ;BUTTON.c: 88: if(ButtonValue_prev == 1)
  9365  001740  0100               	movlb	0	; () banked
  9366  001742  05C4               	decf	_ButtonValue_prev& (0+255),w,b
  9367  001744  E102               	bnz	i1l6415
  9368                           
  9369                           ; BSR set to: 0
  9370                           ;BUTTON.c: 89: {
  9371                           ;BUTTON.c: 90: ButtonChange = 1;
  9372  001746  0E01               	movlw	1
  9373  001748  6E66               	movwf	_ButtonChange,c
  9374  00174A                     i1l6415:
  9375                           
  9376                           ; BSR set to: 0
  9377                           ;BUTTON.c: 91: }
  9378                           ;BUTTON.c: 92: ButtonValue_prev = 0;
  9379  00174A  6BC4               	clrf	_ButtonValue_prev& (0+255),b
  9380                           
  9381                           ; BSR set to: 0
  9382                           
  9383                           ; BSR set to: 0
  9384                           ;BUTTON.c: 93: return 0;
  9385  00174C  0C00               	retlw	0	;funcret
  9386  00174E                     __end_ofi1_BUT_ReadButton:
  9387                           	opt stack 0
  9388                           tblptru	equ	0xFF8
  9389                           tblptrh	equ	0xFF7
  9390                           tblptrl	equ	0xFF6
  9391                           tablat	equ	0xFF5
  9392                           prodh	equ	0xFF4
  9393                           prodl	equ	0xFF3
  9394                           intcon	equ	0xFF2
  9395                           intcon2	equ	0xFF1
  9396                           intcon3	equ	0xFF0
  9397                           postinc0	equ	0xFEE
  9398                           wreg	equ	0xFE8
  9399                           postdec1	equ	0xFE5
  9400                           fsr1l	equ	0xFE1
  9401                           bsr	equ	0xFE0
  9402                           postinc2	equ	0xFDE
  9403                           postdec2	equ	0xFDD
  9404                           fsr2h	equ	0xFDA
  9405                           fsr2l	equ	0xFD9
  9406                           status	equ	0xFD8
  9407                           
  9408 ;; *************** function i1_BUT_IR_PinChangeInt *****************
  9409 ;; Defined at:
  9410 ;;		line 101 in file "BUTTON.c"
  9411 ;; Parameters:    Size  Location     Type
  9412 ;;  state           1    wreg     unsigned char 
  9413 ;; Auto vars:     Size  Location     Type
  9414 ;;  state           1    0[COMRAM] unsigned char 
  9415 ;; Return value:  Size  Location     Type
  9416 ;;		None               void
  9417 ;; Registers used:
  9418 ;;		wreg, status,2
  9419 ;; Tracked objects:
  9420 ;;		On entry : 0/0
  9421 ;;		On exit  : 0/0
  9422 ;;		Unchanged: 0/0
  9423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9424 ;;      Params:         0       0       0       0       0
  9425 ;;      Locals:         1       0       0       0       0
  9426 ;;      Temps:          0       0       0       0       0
  9427 ;;      Totals:         1       0       0       0       0
  9428 ;;Total ram usage:        1 bytes
  9429 ;; Hardware stack levels used:    1
  9430 ;; Hardware stack levels required when called:    6
  9431 ;; This function calls:
  9432 ;;		Nothing
  9433 ;; This function is called by:
  9434 ;;		_low_isr
  9435 ;; This function uses a non-reentrant model
  9436 ;;
  9437                           
  9438                           	psect	text63
  9439  001B32                     __ptext63:
  9440                           	opt stack 0
  9441  001B32                     i1_BUT_IR_PinChangeInt:
  9442                           	opt stack 17
  9443                           
  9444                           ; BSR set to: 0
  9445                           ;incstack = 0
  9446                           ;i1BUT_IR_PinChangeInt@state stored from wreg
  9447  001B32  6E01               	movwf	i1BUT_IR_PinChangeInt@state,c
  9448                           
  9449                           ;BUTTON.c: 103: if(state)
  9450  001B34  5001               	movf	i1BUT_IR_PinChangeInt@state,w,c
  9451  001B36  E002               	bz	i1l744
  9452                           
  9453                           ;BUTTON.c: 104: {
  9454                           ;BUTTON.c: 106: INTCONbits.RBIE = 1;
  9455  001B38  86F2               	bsf	intcon,3,c	;volatile
  9456                           
  9457                           ;BUTTON.c: 107: }
  9458  001B3A  0012               	return	
  9459  001B3C                     i1l744:
  9460                           
  9461                           ;BUTTON.c: 108: else
  9462                           ;BUTTON.c: 109: {
  9463                           ;BUTTON.c: 111: INTCONbits.RBIE = 0;
  9464  001B3C  96F2               	bcf	intcon,3,c	;volatile
  9465  001B3E  0012               	return		;funcret
  9466  001B40                     __end_ofi1_BUT_IR_PinChangeInt:
  9467                           	opt stack 0
  9468                           tblptru	equ	0xFF8
  9469                           tblptrh	equ	0xFF7
  9470                           tblptrl	equ	0xFF6
  9471                           tablat	equ	0xFF5
  9472                           prodh	equ	0xFF4
  9473                           prodl	equ	0xFF3
  9474                           intcon	equ	0xFF2
  9475                           intcon2	equ	0xFF1
  9476                           intcon3	equ	0xFF0
  9477                           postinc0	equ	0xFEE
  9478                           wreg	equ	0xFE8
  9479                           postdec1	equ	0xFE5
  9480                           fsr1l	equ	0xFE1
  9481                           bsr	equ	0xFE0
  9482                           postinc2	equ	0xFDE
  9483                           postdec2	equ	0xFDD
  9484                           fsr2h	equ	0xFDA
  9485                           fsr2l	equ	0xFD9
  9486                           status	equ	0xFD8
  9487                           
  9488 ;; *************** function _TMR_Timer2Start *****************
  9489 ;; Defined at:
  9490 ;;		line 142 in file "TIMERS.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;  time            2    2[COMRAM] unsigned int 
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;		None
  9495 ;; Return value:  Size  Location     Type
  9496 ;;		None               void
  9497 ;; Registers used:
  9498 ;;		wreg, status,2, cstack
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/1
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9504 ;;      Params:         2       0       0       0       0
  9505 ;;      Locals:         0       0       0       0       0
  9506 ;;      Temps:          0       0       0       0       0
  9507 ;;      Totals:         2       0       0       0       0
  9508 ;;Total ram usage:        2 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; Hardware stack levels required when called:    8
  9511 ;; This function calls:
  9512 ;;		_TMR_ResetTimer2
  9513 ;;		i1_TMR_Timer2
  9514 ;; This function is called by:
  9515 ;;		_low_isr
  9516 ;; This function uses a non-reentrant model
  9517 ;;
  9518                           
  9519                           	psect	text64
  9520  001980                     __ptext64:
  9521                           	opt stack 0
  9522  001980                     _TMR_Timer2Start:
  9523                           	opt stack 15
  9524                           
  9525                           ;TIMERS.c: 144: TMR_Timer2(0);
  9526                           
  9527                           ;incstack = 0
  9528  001980  0E00               	movlw	0
  9529  001982  ECA0  F00D         	call	i1_TMR_Timer2
  9530                           
  9531                           ;TIMERS.c: 145: Timer2Post = time;
  9532  001986  C003  F062         	movff	TMR_Timer2Start@time,_Timer2Post
  9533  00198A  C004  F063         	movff	TMR_Timer2Start@time+1,_Timer2Post+1
  9534                           
  9535                           ;TIMERS.c: 146: TMR_ResetTimer2();
  9536  00198E  EC40  F00C         	call	_TMR_ResetTimer2	;wreg free
  9537                           
  9538                           ;TIMERS.c: 147: TMR_Timer2(1);
  9539  001992  0E01               	movlw	1
  9540  001994  EFA0  F00D         	goto	i1_TMR_Timer2
  9541  001998                     __end_of_TMR_Timer2Start:
  9542                           	opt stack 0
  9543                           tblptru	equ	0xFF8
  9544                           tblptrh	equ	0xFF7
  9545                           tblptrl	equ	0xFF6
  9546                           tablat	equ	0xFF5
  9547                           prodh	equ	0xFF4
  9548                           prodl	equ	0xFF3
  9549                           intcon	equ	0xFF2
  9550                           intcon2	equ	0xFF1
  9551                           intcon3	equ	0xFF0
  9552                           postinc0	equ	0xFEE
  9553                           wreg	equ	0xFE8
  9554                           postdec1	equ	0xFE5
  9555                           fsr1l	equ	0xFE1
  9556                           bsr	equ	0xFE0
  9557                           postinc2	equ	0xFDE
  9558                           postdec2	equ	0xFDD
  9559                           fsr2h	equ	0xFDA
  9560                           fsr2l	equ	0xFD9
  9561                           status	equ	0xFD8
  9562                           
  9563 ;; *************** function _TMR_ResetTimer2 *****************
  9564 ;; Defined at:
  9565 ;;		line 304 in file "TIMERS.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;		None
  9568 ;; Auto vars:     Size  Location     Type
  9569 ;;  TimerOn         1    1[COMRAM] unsigned char 
  9570 ;; Return value:  Size  Location     Type
  9571 ;;		None               void
  9572 ;; Registers used:
  9573 ;;		wreg, status,2, cstack
  9574 ;; Tracked objects:
  9575 ;;		On entry : 0/1
  9576 ;;		On exit  : 0/0
  9577 ;;		Unchanged: 0/0
  9578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9579 ;;      Params:         0       0       0       0       0
  9580 ;;      Locals:         1       0       0       0       0
  9581 ;;      Temps:          0       0       0       0       0
  9582 ;;      Totals:         1       0       0       0       0
  9583 ;;Total ram usage:        1 bytes
  9584 ;; Hardware stack levels used:    1
  9585 ;; Hardware stack levels required when called:    7
  9586 ;; This function calls:
  9587 ;;		i1_TMR_Timer2
  9588 ;; This function is called by:
  9589 ;;		_TMR_Timer2Start
  9590 ;; This function uses a non-reentrant model
  9591 ;;
  9592                           
  9593                           	psect	text65
  9594  001880                     __ptext65:
  9595                           	opt stack 0
  9596  001880                     _TMR_ResetTimer2:
  9597                           	opt stack 15
  9598                           
  9599                           ;TIMERS.c: 306: unsigned char TimerOn = T2CONbits.TMR2ON;
  9600                           
  9601                           ;incstack = 0
  9602  001880  0E00               	movlw	0
  9603  001882  B4CA               	btfsc	4042,2,c	;volatile
  9604  001884  0E01               	movlw	1
  9605  001886  6E02               	movwf	TMR_ResetTimer2@TimerOn,c
  9606                           
  9607                           ;TIMERS.c: 308: TMR_Timer2(0);
  9608  001888  0E00               	movlw	0
  9609  00188A  ECA0  F00D         	call	i1_TMR_Timer2
  9610                           
  9611                           ;TIMERS.c: 309: Timer2PostCount = 0;
  9612  00188E  6A64               	clrf	_Timer2PostCount,c
  9613  001890  6A65               	clrf	_Timer2PostCount+1,c
  9614                           
  9615                           ;TIMERS.c: 310: TMR2 = 0;
  9616  001892  6ACC               	clrf	4044,c	;volatile
  9617                           
  9618                           ;TIMERS.c: 311: if(TimerOn)
  9619  001894  5002               	movf	TMR_ResetTimer2@TimerOn,w,c
  9620  001896  B4D8               	btfsc	status,2,c
  9621  001898  0012               	return	
  9622                           
  9623                           ;TIMERS.c: 312: {
  9624                           ;TIMERS.c: 313: TMR_Timer2(1);
  9625  00189A  0E01               	movlw	1
  9626  00189C  EFA0  F00D         	goto	i1_TMR_Timer2
  9627  0018A0                     __end_of_TMR_ResetTimer2:
  9628                           	opt stack 0
  9629                           tblptru	equ	0xFF8
  9630                           tblptrh	equ	0xFF7
  9631                           tblptrl	equ	0xFF6
  9632                           tablat	equ	0xFF5
  9633                           prodh	equ	0xFF4
  9634                           prodl	equ	0xFF3
  9635                           intcon	equ	0xFF2
  9636                           intcon2	equ	0xFF1
  9637                           intcon3	equ	0xFF0
  9638                           postinc0	equ	0xFEE
  9639                           wreg	equ	0xFE8
  9640                           postdec1	equ	0xFE5
  9641                           fsr1l	equ	0xFE1
  9642                           bsr	equ	0xFE0
  9643                           postinc2	equ	0xFDE
  9644                           postdec2	equ	0xFDD
  9645                           fsr2h	equ	0xFDA
  9646                           fsr2l	equ	0xFD9
  9647                           status	equ	0xFD8
  9648                           
  9649 ;; *************** function i1_TMR_Timer2 *****************
  9650 ;; Defined at:
  9651 ;;		line 249 in file "TIMERS.c"
  9652 ;; Parameters:    Size  Location     Type
  9653 ;;  state           1    wreg     unsigned char 
  9654 ;; Auto vars:     Size  Location     Type
  9655 ;;  state           1    0[COMRAM] unsigned char 
  9656 ;; Return value:  Size  Location     Type
  9657 ;;		None               void
  9658 ;; Registers used:
  9659 ;;		wreg, status,2
  9660 ;; Tracked objects:
  9661 ;;		On entry : 0/0
  9662 ;;		On exit  : 0/0
  9663 ;;		Unchanged: 0/0
  9664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9665 ;;      Params:         0       0       0       0       0
  9666 ;;      Locals:         1       0       0       0       0
  9667 ;;      Temps:          0       0       0       0       0
  9668 ;;      Totals:         1       0       0       0       0
  9669 ;;Total ram usage:        1 bytes
  9670 ;; Hardware stack levels used:    1
  9671 ;; Hardware stack levels required when called:    6
  9672 ;; This function calls:
  9673 ;;		Nothing
  9674 ;; This function is called by:
  9675 ;;		_low_isr
  9676 ;;		_TMR_Timer2Start
  9677 ;;		_TMR_ResetTimer2
  9678 ;; This function uses a non-reentrant model
  9679 ;;
  9680                           
  9681                           	psect	text66
  9682  001B40                     __ptext66:
  9683                           	opt stack 0
  9684  001B40                     i1_TMR_Timer2:
  9685                           	opt stack 17
  9686                           
  9687                           ;incstack = 0
  9688                           ;i1TMR_Timer2@state stored from wreg
  9689  001B40  6E01               	movwf	i1TMR_Timer2@state,c
  9690                           
  9691                           ;TIMERS.c: 251: if(state)
  9692  001B42  5001               	movf	i1TMR_Timer2@state,w,c
  9693  001B44  E002               	bz	i1l853
  9694                           
  9695                           ;TIMERS.c: 252: {
  9696                           ;TIMERS.c: 254: T2CONbits.TMR2ON = 1;
  9697  001B46  84CA               	bsf	4042,2,c	;volatile
  9698                           
  9699                           ;TIMERS.c: 255: }
  9700  001B48  0012               	return	
  9701  001B4A                     i1l853:
  9702                           
  9703                           ;TIMERS.c: 256: else
  9704                           ;TIMERS.c: 257: {
  9705                           ;TIMERS.c: 259: T2CONbits.TMR2ON = 0;
  9706  001B4A  94CA               	bcf	4042,2,c	;volatile
  9707  001B4C  0012               	return		;funcret
  9708  001B4E                     __end_ofi1_TMR_Timer2:
  9709                           	opt stack 0
  9710                           tblptru	equ	0xFF8
  9711                           tblptrh	equ	0xFF7
  9712                           tblptrl	equ	0xFF6
  9713                           tablat	equ	0xFF5
  9714                           prodh	equ	0xFF4
  9715                           prodl	equ	0xFF3
  9716                           intcon	equ	0xFF2
  9717                           intcon2	equ	0xFF1
  9718                           intcon3	equ	0xFF0
  9719                           postinc0	equ	0xFEE
  9720                           wreg	equ	0xFE8
  9721                           postdec1	equ	0xFE5
  9722                           fsr1l	equ	0xFE1
  9723                           bsr	equ	0xFE0
  9724                           postinc2	equ	0xFDE
  9725                           postdec2	equ	0xFDD
  9726                           fsr2h	equ	0xFDA
  9727                           fsr2l	equ	0xFD9
  9728                           status	equ	0xFD8
  9729                           
  9730 ;; *************** function _TMR_Timer1Status *****************
  9731 ;; Defined at:
  9732 ;;		line 196 in file "TIMERS.c"
  9733 ;; Parameters:    Size  Location     Type
  9734 ;;		None
  9735 ;; Auto vars:     Size  Location     Type
  9736 ;;		None
  9737 ;; Return value:  Size  Location     Type
  9738 ;;                  1    wreg      unsigned char 
  9739 ;; Registers used:
  9740 ;;		wreg
  9741 ;; Tracked objects:
  9742 ;;		On entry : 0/0
  9743 ;;		On exit  : 0/0
  9744 ;;		Unchanged: 0/0
  9745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9746 ;;      Params:         0       0       0       0       0
  9747 ;;      Locals:         0       0       0       0       0
  9748 ;;      Temps:          0       0       0       0       0
  9749 ;;      Totals:         0       0       0       0       0
  9750 ;;Total ram usage:        0 bytes
  9751 ;; Hardware stack levels used:    1
  9752 ;; Hardware stack levels required when called:    6
  9753 ;; This function calls:
  9754 ;;		Nothing
  9755 ;; This function is called by:
  9756 ;;		_low_isr
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760                           	psect	text67
  9761  001BBE                     __ptext67:
  9762                           	opt stack 0
  9763  001BBE                     _TMR_Timer1Status:
  9764                           	opt stack 17
  9765                           
  9766                           ;TIMERS.c: 198: if(T1CONbits.TMR1ON)
  9767                           
  9768                           ;incstack = 0
  9769  001BBE  B0CD               	btfsc	4045,0,c	;volatile
  9770                           
  9771                           ;TIMERS.c: 199: {
  9772                           ;TIMERS.c: 201: return 1;
  9773  001BC0  0C01               	retlw	1
  9774                           
  9775                           ;TIMERS.c: 202: }
  9776                           ;TIMERS.c: 203: return 0;
  9777  001BC2  0C00               	retlw	0	;funcret
  9778  001BC4                     __end_of_TMR_Timer1Status:
  9779                           	opt stack 0
  9780                           tblptru	equ	0xFF8
  9781                           tblptrh	equ	0xFF7
  9782                           tblptrl	equ	0xFF6
  9783                           tablat	equ	0xFF5
  9784                           prodh	equ	0xFF4
  9785                           prodl	equ	0xFF3
  9786                           intcon	equ	0xFF2
  9787                           intcon2	equ	0xFF1
  9788                           intcon3	equ	0xFF0
  9789                           postinc0	equ	0xFEE
  9790                           wreg	equ	0xFE8
  9791                           postdec1	equ	0xFE5
  9792                           fsr1l	equ	0xFE1
  9793                           bsr	equ	0xFE0
  9794                           postinc2	equ	0xFDE
  9795                           postdec2	equ	0xFDD
  9796                           fsr2h	equ	0xFDA
  9797                           fsr2l	equ	0xFD9
  9798                           status	equ	0xFD8
  9799                           
  9800 ;; *************** function _TMR_Timer1Start *****************
  9801 ;; Defined at:
  9802 ;;		line 130 in file "TIMERS.c"
  9803 ;; Parameters:    Size  Location     Type
  9804 ;;		None
  9805 ;; Auto vars:     Size  Location     Type
  9806 ;;		None
  9807 ;; Return value:  Size  Location     Type
  9808 ;;		None               void
  9809 ;; Registers used:
  9810 ;;		wreg, status,2, cstack
  9811 ;; Tracked objects:
  9812 ;;		On entry : 0/0
  9813 ;;		On exit  : 0/0
  9814 ;;		Unchanged: 0/0
  9815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9816 ;;      Params:         0       0       0       0       0
  9817 ;;      Locals:         0       0       0       0       0
  9818 ;;      Temps:          0       0       0       0       0
  9819 ;;      Totals:         0       0       0       0       0
  9820 ;;Total ram usage:        0 bytes
  9821 ;; Hardware stack levels used:    1
  9822 ;; Hardware stack levels required when called:    8
  9823 ;; This function calls:
  9824 ;;		i1_TMR_ResetTimer1
  9825 ;;		i1_TMR_Timer1
  9826 ;; This function is called by:
  9827 ;;		_low_isr
  9828 ;; This function uses a non-reentrant model
  9829 ;;
  9830                           
  9831                           	psect	text68
  9832  001AF2                     __ptext68:
  9833                           	opt stack 0
  9834  001AF2                     _TMR_Timer1Start:
  9835                           	opt stack 15
  9836                           
  9837                           ;TIMERS.c: 132: TMR_Timer1(0);
  9838                           
  9839                           ;incstack = 0
  9840  001AF2  0E00               	movlw	0
  9841  001AF4  ECA7  F00D         	call	i1_TMR_Timer1
  9842                           
  9843                           ;TIMERS.c: 133: TMR_ResetTimer1();
  9844  001AF8  EC50  F00C         	call	i1_TMR_ResetTimer1	;wreg free
  9845                           
  9846                           ;TIMERS.c: 134: TMR_Timer1(1);
  9847  001AFC  0E01               	movlw	1
  9848  001AFE  EFA7  F00D         	goto	i1_TMR_Timer1
  9849  001B02                     __end_of_TMR_Timer1Start:
  9850                           	opt stack 0
  9851                           tblptru	equ	0xFF8
  9852                           tblptrh	equ	0xFF7
  9853                           tblptrl	equ	0xFF6
  9854                           tablat	equ	0xFF5
  9855                           prodh	equ	0xFF4
  9856                           prodl	equ	0xFF3
  9857                           intcon	equ	0xFF2
  9858                           intcon2	equ	0xFF1
  9859                           intcon3	equ	0xFF0
  9860                           postinc0	equ	0xFEE
  9861                           wreg	equ	0xFE8
  9862                           postdec1	equ	0xFE5
  9863                           fsr1l	equ	0xFE1
  9864                           bsr	equ	0xFE0
  9865                           postinc2	equ	0xFDE
  9866                           postdec2	equ	0xFDD
  9867                           fsr2h	equ	0xFDA
  9868                           fsr2l	equ	0xFD9
  9869                           status	equ	0xFD8
  9870                           
  9871 ;; *************** function i1_TMR_ResetTimer1 *****************
  9872 ;; Defined at:
  9873 ;;		line 286 in file "TIMERS.c"
  9874 ;; Parameters:    Size  Location     Type
  9875 ;;		None
  9876 ;; Auto vars:     Size  Location     Type
  9877 ;;  TMR_ResetTim    1    1[COMRAM] unsigned char 
  9878 ;; Return value:  Size  Location     Type
  9879 ;;		None               void
  9880 ;; Registers used:
  9881 ;;		wreg, status,2, cstack
  9882 ;; Tracked objects:
  9883 ;;		On entry : 0/0
  9884 ;;		On exit  : 0/0
  9885 ;;		Unchanged: 0/0
  9886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9887 ;;      Params:         0       0       0       0       0
  9888 ;;      Locals:         1       0       0       0       0
  9889 ;;      Temps:          0       0       0       0       0
  9890 ;;      Totals:         1       0       0       0       0
  9891 ;;Total ram usage:        1 bytes
  9892 ;; Hardware stack levels used:    1
  9893 ;; Hardware stack levels required when called:    7
  9894 ;; This function calls:
  9895 ;;		i1_TMR_Timer1
  9896 ;; This function is called by:
  9897 ;;		_low_isr
  9898 ;;		_TMR_Timer1Start
  9899 ;; This function uses a non-reentrant model
  9900 ;;
  9901                           
  9902                           	psect	text69
  9903  0018A0                     __ptext69:
  9904                           	opt stack 0
  9905  0018A0                     i1_TMR_ResetTimer1:
  9906                           	opt stack 16
  9907                           
  9908                           ;TIMERS.c: 288: unsigned char TimerOn = T1CONbits.TMR1ON;
  9909                           
  9910                           ;incstack = 0
  9911  0018A0  0E00               	movlw	0
  9912  0018A2  B0CD               	btfsc	4045,0,c	;volatile
  9913  0018A4  0E01               	movlw	1
  9914  0018A6  6E02               	movwf	i1TMR_ResetTimer1@TimerOn,c
  9915                           
  9916                           ;TIMERS.c: 290: TMR_Timer1(0);
  9917  0018A8  0E00               	movlw	0
  9918  0018AA  ECA7  F00D         	call	i1_TMR_Timer1
  9919                           
  9920                           ;TIMERS.c: 291: TMR1H = 0;
  9921  0018AE  6ACF               	clrf	4047,c	;volatile
  9922                           
  9923                           ;TIMERS.c: 292: TMR1L = 2;
  9924  0018B0  0E02               	movlw	2
  9925  0018B2  6ECE               	movwf	4046,c	;volatile
  9926                           
  9927                           ;TIMERS.c: 293: if(TimerOn)
  9928  0018B4  5002               	movf	i1TMR_ResetTimer1@TimerOn,w,c
  9929  0018B6  B4D8               	btfsc	status,2,c
  9930  0018B8  0012               	return	
  9931                           
  9932                           ;TIMERS.c: 294: {
  9933                           ;TIMERS.c: 295: TMR_Timer1(1);
  9934  0018BA  0E01               	movlw	1
  9935  0018BC  EFA7  F00D         	goto	i1_TMR_Timer1
  9936  0018C0                     __end_ofi1_TMR_ResetTimer1:
  9937                           	opt stack 0
  9938                           tblptru	equ	0xFF8
  9939                           tblptrh	equ	0xFF7
  9940                           tblptrl	equ	0xFF6
  9941                           tablat	equ	0xFF5
  9942                           prodh	equ	0xFF4
  9943                           prodl	equ	0xFF3
  9944                           intcon	equ	0xFF2
  9945                           intcon2	equ	0xFF1
  9946                           intcon3	equ	0xFF0
  9947                           postinc0	equ	0xFEE
  9948                           wreg	equ	0xFE8
  9949                           postdec1	equ	0xFE5
  9950                           fsr1l	equ	0xFE1
  9951                           bsr	equ	0xFE0
  9952                           postinc2	equ	0xFDE
  9953                           postdec2	equ	0xFDD
  9954                           fsr2h	equ	0xFDA
  9955                           fsr2l	equ	0xFD9
  9956                           status	equ	0xFD8
  9957                           
  9958 ;; *************** function i1_TMR_Timer1 *****************
  9959 ;; Defined at:
  9960 ;;		line 230 in file "TIMERS.c"
  9961 ;; Parameters:    Size  Location     Type
  9962 ;;  state           1    wreg     unsigned char 
  9963 ;; Auto vars:     Size  Location     Type
  9964 ;;  state           1    0[COMRAM] unsigned char 
  9965 ;; Return value:  Size  Location     Type
  9966 ;;		None               void
  9967 ;; Registers used:
  9968 ;;		wreg, status,2
  9969 ;; Tracked objects:
  9970 ;;		On entry : 0/0
  9971 ;;		On exit  : 0/0
  9972 ;;		Unchanged: 0/0
  9973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9974 ;;      Params:         0       0       0       0       0
  9975 ;;      Locals:         1       0       0       0       0
  9976 ;;      Temps:          0       0       0       0       0
  9977 ;;      Totals:         1       0       0       0       0
  9978 ;;Total ram usage:        1 bytes
  9979 ;; Hardware stack levels used:    1
  9980 ;; Hardware stack levels required when called:    6
  9981 ;; This function calls:
  9982 ;;		Nothing
  9983 ;; This function is called by:
  9984 ;;		_low_isr
  9985 ;;		_TMR_Timer1Start
  9986 ;;		i1_TMR_ResetTimer1
  9987 ;; This function uses a non-reentrant model
  9988 ;;
  9989                           
  9990                           	psect	text70
  9991  001B4E                     __ptext70:
  9992                           	opt stack 0
  9993  001B4E                     i1_TMR_Timer1:
  9994                           	opt stack 17
  9995                           
  9996                           ;incstack = 0
  9997                           ;i1TMR_Timer1@state stored from wreg
  9998  001B4E  6E01               	movwf	i1TMR_Timer1@state,c
  9999                           
 10000                           ;TIMERS.c: 232: if(state)
 10001  001B50  5001               	movf	i1TMR_Timer1@state,w,c
 10002  001B52  E002               	bz	i1l848
 10003                           
 10004                           ;TIMERS.c: 233: {
 10005                           ;TIMERS.c: 235: T1CONbits.TMR1ON = 1;
 10006  001B54  80CD               	bsf	4045,0,c	;volatile
 10007                           
 10008                           ;TIMERS.c: 236: }
 10009  001B56  0012               	return	
 10010  001B58                     i1l848:
 10011                           
 10012                           ;TIMERS.c: 237: else
 10013                           ;TIMERS.c: 238: {
 10014                           ;TIMERS.c: 240: T1CONbits.TMR1ON = 0;
 10015  001B58  90CD               	bcf	4045,0,c	;volatile
 10016  001B5A  0012               	return		;funcret
 10017  001B5C                     __end_ofi1_TMR_Timer1:
 10018                           	opt stack 0
 10019                           tblptru	equ	0xFF8
 10020                           tblptrh	equ	0xFF7
 10021                           tblptrl	equ	0xFF6
 10022                           tablat	equ	0xFF5
 10023                           prodh	equ	0xFF4
 10024                           prodl	equ	0xFF3
 10025                           intcon	equ	0xFF2
 10026                           intcon2	equ	0xFF1
 10027                           intcon3	equ	0xFF0
 10028                           postinc0	equ	0xFEE
 10029                           wreg	equ	0xFE8
 10030                           postdec1	equ	0xFE5
 10031                           fsr1l	equ	0xFE1
 10032                           bsr	equ	0xFE0
 10033                           postinc2	equ	0xFDE
 10034                           postdec2	equ	0xFDD
 10035                           fsr2h	equ	0xFDA
 10036                           fsr2l	equ	0xFD9
 10037                           status	equ	0xFD8
 10038                           
 10039 ;; *************** function _RF_Disable *****************
 10040 ;; Defined at:
 10041 ;;		line 90 in file "RF.c"
 10042 ;; Parameters:    Size  Location     Type
 10043 ;;		None
 10044 ;; Auto vars:     Size  Location     Type
 10045 ;;		None
 10046 ;; Return value:  Size  Location     Type
 10047 ;;		None               void
 10048 ;; Registers used:
 10049 ;;		wreg, status,2, cstack
 10050 ;; Tracked objects:
 10051 ;;		On entry : 0/0
 10052 ;;		On exit  : 0/0
 10053 ;;		Unchanged: 0/0
 10054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10055 ;;      Params:         0       0       0       0       0
 10056 ;;      Locals:         0       0       0       0       0
 10057 ;;      Temps:          0       0       0       0       0
 10058 ;;      Totals:         0       0       0       0       0
 10059 ;;Total ram usage:        0 bytes
 10060 ;; Hardware stack levels used:    1
 10061 ;; Hardware stack levels required when called:    7
 10062 ;; This function calls:
 10063 ;;		i1_RF_DataInt
 10064 ;;		i1_TMR_Timer0
 10065 ;;		i1_TMR_Timer0Int
 10066 ;; This function is called by:
 10067 ;;		_low_isr
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           	psect	text71
 10072  0019E8                     __ptext71:
 10073                           	opt stack 0
 10074  0019E8                     _RF_Disable:
 10075                           	opt stack 16
 10076                           
 10077                           ;RF.c: 92: RF_DataInt(0);
 10078                           
 10079                           ;incstack = 0
 10080  0019E8  0E00               	movlw	0
 10081  0019EA  EC06  F00D         	call	i1_RF_DataInt
 10082                           
 10083                           ;RF.c: 93: TMR_Timer0Int(0);
 10084  0019EE  0E00               	movlw	0
 10085  0019F0  ECB5  F00D         	call	i1_TMR_Timer0Int
 10086                           
 10087                           ;RF.c: 94: TMR_Timer0(0);
 10088  0019F4  0E00               	movlw	0
 10089  0019F6  EFAE  F00D         	goto	i1_TMR_Timer0
 10090  0019FA                     __end_of_RF_Disable:
 10091                           	opt stack 0
 10092                           tblptru	equ	0xFF8
 10093                           tblptrh	equ	0xFF7
 10094                           tblptrl	equ	0xFF6
 10095                           tablat	equ	0xFF5
 10096                           prodh	equ	0xFF4
 10097                           prodl	equ	0xFF3
 10098                           intcon	equ	0xFF2
 10099                           intcon2	equ	0xFF1
 10100                           intcon3	equ	0xFF0
 10101                           postinc0	equ	0xFEE
 10102                           wreg	equ	0xFE8
 10103                           postdec1	equ	0xFE5
 10104                           fsr1l	equ	0xFE1
 10105                           bsr	equ	0xFE0
 10106                           postinc2	equ	0xFDE
 10107                           postdec2	equ	0xFDD
 10108                           fsr2h	equ	0xFDA
 10109                           fsr2l	equ	0xFD9
 10110                           status	equ	0xFD8
 10111                           
 10112 ;; *************** function i1_TMR_Timer0 *****************
 10113 ;; Defined at:
 10114 ;;		line 211 in file "TIMERS.c"
 10115 ;; Parameters:    Size  Location     Type
 10116 ;;  state           1    wreg     unsigned char 
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;  state           1    0[COMRAM] unsigned char 
 10119 ;; Return value:  Size  Location     Type
 10120 ;;		None               void
 10121 ;; Registers used:
 10122 ;;		wreg, status,2
 10123 ;; Tracked objects:
 10124 ;;		On entry : 0/0
 10125 ;;		On exit  : 0/0
 10126 ;;		Unchanged: 0/0
 10127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10128 ;;      Params:         0       0       0       0       0
 10129 ;;      Locals:         1       0       0       0       0
 10130 ;;      Temps:          0       0       0       0       0
 10131 ;;      Totals:         1       0       0       0       0
 10132 ;;Total ram usage:        1 bytes
 10133 ;; Hardware stack levels used:    1
 10134 ;; Hardware stack levels required when called:    6
 10135 ;; This function calls:
 10136 ;;		Nothing
 10137 ;; This function is called by:
 10138 ;;		_RF_Disable
 10139 ;; This function uses a non-reentrant model
 10140 ;;
 10141                           
 10142                           	psect	text72
 10143  001B5C                     __ptext72:
 10144                           	opt stack 0
 10145  001B5C                     i1_TMR_Timer0:
 10146                           	opt stack 16
 10147                           
 10148                           ;incstack = 0
 10149                           ;i1TMR_Timer0@state stored from wreg
 10150  001B5C  6E01               	movwf	i1TMR_Timer0@state,c
 10151                           
 10152                           ;TIMERS.c: 213: if(state)
 10153  001B5E  5001               	movf	i1TMR_Timer0@state,w,c
 10154  001B60  E002               	bz	i1l843
 10155                           
 10156                           ;TIMERS.c: 214: {
 10157                           ;TIMERS.c: 216: T0CONbits.TMR0ON = 1;
 10158  001B62  8ED5               	bsf	4053,7,c	;volatile
 10159                           
 10160                           ;TIMERS.c: 217: }
 10161  001B64  0012               	return	
 10162  001B66                     i1l843:
 10163                           
 10164                           ;TIMERS.c: 218: else
 10165                           ;TIMERS.c: 219: {
 10166                           ;TIMERS.c: 221: T0CONbits.TMR0ON = 0;
 10167  001B66  9ED5               	bcf	4053,7,c	;volatile
 10168  001B68  0012               	return		;funcret
 10169  001B6A                     __end_ofi1_TMR_Timer0:
 10170                           	opt stack 0
 10171                           tblptru	equ	0xFF8
 10172                           tblptrh	equ	0xFF7
 10173                           tblptrl	equ	0xFF6
 10174                           tablat	equ	0xFF5
 10175                           prodh	equ	0xFF4
 10176                           prodl	equ	0xFF3
 10177                           intcon	equ	0xFF2
 10178                           intcon2	equ	0xFF1
 10179                           intcon3	equ	0xFF0
 10180                           postinc0	equ	0xFEE
 10181                           wreg	equ	0xFE8
 10182                           postdec1	equ	0xFE5
 10183                           fsr1l	equ	0xFE1
 10184                           bsr	equ	0xFE0
 10185                           postinc2	equ	0xFDE
 10186                           postdec2	equ	0xFDD
 10187                           fsr2h	equ	0xFDA
 10188                           fsr2l	equ	0xFD9
 10189                           status	equ	0xFD8
 10190                           
 10191 ;; *************** function _IR_CheckCode *****************
 10192 ;; Defined at:
 10193 ;;		line 210 in file "IR.c"
 10194 ;; Parameters:    Size  Location     Type
 10195 ;;		None
 10196 ;; Auto vars:     Size  Location     Type
 10197 ;;  Low             3   71[COMRAM] unsigned char 
 10198 ;;  High            3   68[COMRAM] unsigned char 
 10199 ;;  data            2   66[COMRAM] unsigned int 
 10200 ;;  i               1   74[COMRAM] unsigned char 
 10201 ;; Return value:  Size  Location     Type
 10202 ;;                  1    wreg      unsigned char 
 10203 ;; Registers used:
 10204 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10205 ;; Tracked objects:
 10206 ;;		On entry : 0/1
 10207 ;;		On exit  : 0/0
 10208 ;;		Unchanged: 0/0
 10209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10210 ;;      Params:         0       0       0       0       0
 10211 ;;      Locals:         9       0       0       0       0
 10212 ;;      Temps:          6       0       0       0       0
 10213 ;;      Totals:        15       0       0       0       0
 10214 ;;Total ram usage:       15 bytes
 10215 ;; Hardware stack levels used:    1
 10216 ;; Hardware stack levels required when called:   10
 10217 ;; This function calls:
 10218 ;;		_FSH_Write_IR_RF
 10219 ;;		i1_IR_LoadCode
 10220 ;;		i1___ftge
 10221 ;;		i1___ftmul
 10222 ;;		i1___lwtoft
 10223 ;; This function is called by:
 10224 ;;		_low_isr
 10225 ;; This function uses a non-reentrant model
 10226 ;;
 10227                           
 10228                           	psect	text73
 10229  002802                     __ptext73:
 10230                           	opt stack 0
 10231  002802                     _IR_CheckCode:
 10232                           	opt stack 13
 10233                           
 10234                           ;IR.c: 214: double High = 0.0;
 10235                           
 10236                           ;incstack = 0
 10237  002802  6A45               	clrf	IR_CheckCode@High,c
 10238  002804  6A46               	clrf	IR_CheckCode@High+1,c
 10239  002806  6A47               	clrf	IR_CheckCode@High+2,c
 10240                           
 10241                           ;IR.c: 215: unsigned int data;
 10242                           ;IR.c: 217: if(System_State == 8)
 10243  002808  0E08               	movlw	8
 10244  00280A  0101               	movlb	1	; () banked
 10245  00280C  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
 10246  00280E  E001 D309          	bnz	i1l6317
 10247                           
 10248                           ; BSR set to: 1
 10249                           ;IR.c: 218: {
 10250                           ;IR.c: 219: for(i=0; i<IR_CodeSize;i++)
 10251  002812  6A4B               	clrf	IR_CheckCode@i,c
 10252  002814  D189               	goto	i1l6279
 10253  002816                     i1l6245:
 10254                           
 10255                           ;IR.c: 220: {
 10256                           ;IR.c: 221: data = IR_SavedTiming0[i];
 10257  002816  504B               	movf	IR_CheckCode@i,w,c
 10258  002818  0D02               	mullw	2
 10259  00281A  0E00               	movlw	0
 10260  00281C  24F3               	addwf	prodl,w,c
 10261  00281E  6EF6               	movwf	tblptrl,c
 10262  002820  0E24               	movlw	36
 10263  002822  20F4               	addwfc	prodh,w,c
 10264  002824  6EF7               	movwf	tblptrh,c
 10265  002826  6AF8               	clrf	tblptru,c
 10266  002828  0E00               	movlw	0
 10267  00282A  22F8               	addwfc	tblptru,f,c
 10268  00282C  0009               	tblrd		*+
 10269  00282E  CFF5 F043          	movff	tablat,IR_CheckCode@data
 10270  002832  000A               	tblrd		*-
 10271  002834  CFF5 F044          	movff	tablat,IR_CheckCode@data+1
 10272  002838  C043  F009         	movff	IR_CheckCode@data,i1___lwtoft@c
 10273  00283C  C044  F00A         	movff	IR_CheckCode@data+1,i1___lwtoft@c+1
 10274  002840  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10275                           
 10276                           ;IR.c: 223: if(IR_SavedTiming0[i] > 4000)
 10277  002844  504B               	movf	IR_CheckCode@i,w,c
 10278  002846  0D02               	mullw	2
 10279  002848  0E00               	movlw	0
 10280  00284A  24F3               	addwf	prodl,w,c
 10281  00284C  6EF6               	movwf	tblptrl,c
 10282  00284E  0E24               	movlw	36
 10283  002850  20F4               	addwfc	prodh,w,c
 10284  002852  6EF7               	movwf	tblptrh,c
 10285  002854  6AF8               	clrf	tblptru,c
 10286  002856  0E00               	movlw	0
 10287  002858  22F8               	addwfc	tblptru,f,c
 10288  00285A  0009               	tblrd		*+
 10289  00285C  0EA1               	movlw	161
 10290  00285E  5EF5               	subwf	tablat,f,c
 10291  002860  0009               	tblrd		*+
 10292  002862  0E0F               	movlw	15
 10293  002864  5AF5               	subwfb	tablat,f,c
 10294  002866  E348               	bnc	i1l6253
 10295                           
 10296                           ;IR.c: 224: {
 10297                           ;IR.c: 225: Low = (double)IR_SavedTiming0[i] * (1.0 - 0.3);
 10298  002868  504B               	movf	IR_CheckCode@i,w,c
 10299  00286A  0D02               	mullw	2
 10300  00286C  0E00               	movlw	0
 10301  00286E  24F3               	addwf	prodl,w,c
 10302  002870  6EF6               	movwf	tblptrl,c
 10303  002872  0E24               	movlw	36
 10304  002874  20F4               	addwfc	prodh,w,c
 10305  002876  6EF7               	movwf	tblptrh,c
 10306  002878  6AF8               	clrf	tblptru,c
 10307  00287A  0E00               	movlw	0
 10308  00287C  22F8               	addwfc	tblptru,f,c
 10309  00287E  0009               	tblrd		*+
 10310  002880  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10311  002884  000A               	tblrd		*-
 10312  002886  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10313  00288A  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10314  00288E  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10315  002892  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10316  002896  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10317  00289A  0E33               	movlw	51
 10318  00289C  6E1E               	movwf	i1___ftmul@f2,c
 10319  00289E  6E1F               	movwf	i1___ftmul@f2+1,c
 10320  0028A0  0E3F               	movlw	63
 10321  0028A2  6E20               	movwf	i1___ftmul@f2+2,c
 10322  0028A4  EC27  F003         	call	i1___ftmul	;wreg free
 10323  0028A8  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10324  0028AC  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10325  0028B0  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10326                           
 10327                           ;IR.c: 226: High = (double)IR_SavedTiming0[i] * (1.0 + 0.3);
 10328  0028B4  504B               	movf	IR_CheckCode@i,w,c
 10329  0028B6  0D02               	mullw	2
 10330  0028B8  0E00               	movlw	0
 10331  0028BA  24F3               	addwf	prodl,w,c
 10332  0028BC  6EF6               	movwf	tblptrl,c
 10333  0028BE  0E24               	movlw	36
 10334  0028C0  20F4               	addwfc	prodh,w,c
 10335  0028C2  6EF7               	movwf	tblptrh,c
 10336  0028C4  6AF8               	clrf	tblptru,c
 10337  0028C6  0E00               	movlw	0
 10338  0028C8  22F8               	addwfc	tblptru,f,c
 10339  0028CA  0009               	tblrd		*+
 10340  0028CC  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10341  0028D0  000A               	tblrd		*-
 10342  0028D2  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10343  0028D6  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10344  0028DA  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10345  0028DE  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10346  0028E2  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10347  0028E6  0E66               	movlw	102
 10348  0028E8  6E1E               	movwf	i1___ftmul@f2,c
 10349  0028EA  0EA6               	movlw	166
 10350  0028EC  6E1F               	movwf	i1___ftmul@f2+1,c
 10351  0028EE  0E3F               	movlw	63
 10352  0028F0  6E20               	movwf	i1___ftmul@f2+2,c
 10353  0028F2  EC27  F003         	call	i1___ftmul	;wreg free
 10354  0028F6  D0B3               	goto	L2
 10355  0028F8                     i1l6253:
 10356                           
 10357                           ;IR.c: 228: else if(IR_SavedTiming0[i] <= 4000 && IR_SavedTiming0[i] > 1000)
 10358  0028F8  504B               	movf	IR_CheckCode@i,w,c
 10359  0028FA  0D02               	mullw	2
 10360  0028FC  0E00               	movlw	0
 10361  0028FE  24F3               	addwf	prodl,w,c
 10362  002900  6EF6               	movwf	tblptrl,c
 10363  002902  0E24               	movlw	36
 10364  002904  20F4               	addwfc	prodh,w,c
 10365  002906  6EF7               	movwf	tblptrh,c
 10366  002908  6AF8               	clrf	tblptru,c
 10367  00290A  0E00               	movlw	0
 10368  00290C  22F8               	addwfc	tblptru,f,c
 10369  00290E  0009               	tblrd		*+
 10370  002910  0EA1               	movlw	161
 10371  002912  5EF5               	subwf	tablat,f,c
 10372  002914  0009               	tblrd		*+
 10373  002916  0E0F               	movlw	15
 10374  002918  5AF5               	subwfb	tablat,f,c
 10375  00291A  E259               	bc	i1l6259
 10376  00291C  504B               	movf	IR_CheckCode@i,w,c
 10377  00291E  0D02               	mullw	2
 10378  002920  0E00               	movlw	0
 10379  002922  24F3               	addwf	prodl,w,c
 10380  002924  6EF6               	movwf	tblptrl,c
 10381  002926  0E24               	movlw	36
 10382  002928  20F4               	addwfc	prodh,w,c
 10383  00292A  6EF7               	movwf	tblptrh,c
 10384  00292C  6AF8               	clrf	tblptru,c
 10385  00292E  0E00               	movlw	0
 10386  002930  22F8               	addwfc	tblptru,f,c
 10387  002932  0009               	tblrd		*+
 10388  002934  0EE9               	movlw	233
 10389  002936  5EF5               	subwf	tablat,f,c
 10390  002938  0009               	tblrd		*+
 10391  00293A  0E03               	movlw	3
 10392  00293C  5AF5               	subwfb	tablat,f,c
 10393  00293E  E347               	bnc	i1l6259
 10394                           
 10395                           ;IR.c: 229: {
 10396                           ;IR.c: 230: Low = (double)IR_SavedTiming0[i] * (1.0 - 0.75);
 10397  002940  504B               	movf	IR_CheckCode@i,w,c
 10398  002942  0D02               	mullw	2
 10399  002944  0E00               	movlw	0
 10400  002946  24F3               	addwf	prodl,w,c
 10401  002948  6EF6               	movwf	tblptrl,c
 10402  00294A  0E24               	movlw	36
 10403  00294C  20F4               	addwfc	prodh,w,c
 10404  00294E  6EF7               	movwf	tblptrh,c
 10405  002950  6AF8               	clrf	tblptru,c
 10406  002952  0E00               	movlw	0
 10407  002954  22F8               	addwfc	tblptru,f,c
 10408  002956  0009               	tblrd		*+
 10409  002958  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10410  00295C  000A               	tblrd		*-
 10411  00295E  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10412  002962  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10413  002966  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10414  00296A  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10415  00296E  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10416  002972  6A1E               	clrf	i1___ftmul@f2,c
 10417  002974  0E80               	movlw	128
 10418  002976  6E1F               	movwf	i1___ftmul@f2+1,c
 10419  002978  0E3E               	movlw	62
 10420  00297A  6E20               	movwf	i1___ftmul@f2+2,c
 10421  00297C  EC27  F003         	call	i1___ftmul	;wreg free
 10422  002980  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10423  002984  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10424  002988  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10425                           
 10426                           ;IR.c: 231: High = (double)IR_SavedTiming0[i] * (1.0 + 0.75);
 10427  00298C  504B               	movf	IR_CheckCode@i,w,c
 10428  00298E  0D02               	mullw	2
 10429  002990  0E00               	movlw	0
 10430  002992  24F3               	addwf	prodl,w,c
 10431  002994  6EF6               	movwf	tblptrl,c
 10432  002996  0E24               	movlw	36
 10433  002998  20F4               	addwfc	prodh,w,c
 10434  00299A  6EF7               	movwf	tblptrh,c
 10435  00299C  6AF8               	clrf	tblptru,c
 10436  00299E  0E00               	movlw	0
 10437  0029A0  22F8               	addwfc	tblptru,f,c
 10438  0029A2  0009               	tblrd		*+
 10439  0029A4  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10440  0029A8  000A               	tblrd		*-
 10441  0029AA  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10442  0029AE  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10443  0029B2  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10444  0029B6  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10445  0029BA  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10446  0029BE  6A1E               	clrf	i1___ftmul@f2,c
 10447  0029C0  0EE0               	movlw	224
 10448  0029C2  6E1F               	movwf	i1___ftmul@f2+1,c
 10449  0029C4  0E3F               	movlw	63
 10450  0029C6  6E20               	movwf	i1___ftmul@f2+2,c
 10451  0029C8  EC27  F003         	call	i1___ftmul	;wreg free
 10452  0029CC  D048               	goto	L2
 10453  0029CE                     i1l6259:
 10454                           
 10455                           ;IR.c: 233: else
 10456                           ;IR.c: 234: {
 10457                           ;IR.c: 235: Low = (double)IR_SavedTiming0[i] * (1.0 - 1.1);
 10458  0029CE  504B               	movf	IR_CheckCode@i,w,c
 10459  0029D0  0D02               	mullw	2
 10460  0029D2  0E00               	movlw	0
 10461  0029D4  24F3               	addwf	prodl,w,c
 10462  0029D6  6EF6               	movwf	tblptrl,c
 10463  0029D8  0E24               	movlw	36
 10464  0029DA  20F4               	addwfc	prodh,w,c
 10465  0029DC  6EF7               	movwf	tblptrh,c
 10466  0029DE  6AF8               	clrf	tblptru,c
 10467  0029E0  0E00               	movlw	0
 10468  0029E2  22F8               	addwfc	tblptru,f,c
 10469  0029E4  0009               	tblrd		*+
 10470  0029E6  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10471  0029EA  000A               	tblrd		*-
 10472  0029EC  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10473  0029F0  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10474  0029F4  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10475  0029F8  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10476  0029FC  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10477  002A00  0ECD               	movlw	205
 10478  002A02  6E1E               	movwf	i1___ftmul@f2,c
 10479  002A04  0ECC               	movlw	204
 10480  002A06  6E1F               	movwf	i1___ftmul@f2+1,c
 10481  002A08  0EBD               	movlw	189
 10482  002A0A  6E20               	movwf	i1___ftmul@f2+2,c
 10483  002A0C  EC27  F003         	call	i1___ftmul	;wreg free
 10484  002A10  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10485  002A14  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10486  002A18  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10487                           
 10488                           ;IR.c: 236: High = (double)IR_SavedTiming0[i] * (1.0 + 1.1);
 10489  002A1C  504B               	movf	IR_CheckCode@i,w,c
 10490  002A1E  0D02               	mullw	2
 10491  002A20  0E00               	movlw	0
 10492  002A22  24F3               	addwf	prodl,w,c
 10493  002A24  6EF6               	movwf	tblptrl,c
 10494  002A26  0E24               	movlw	36
 10495  002A28  20F4               	addwfc	prodh,w,c
 10496  002A2A  6EF7               	movwf	tblptrh,c
 10497  002A2C  6AF8               	clrf	tblptru,c
 10498  002A2E  0E00               	movlw	0
 10499  002A30  22F8               	addwfc	tblptru,f,c
 10500  002A32  0009               	tblrd		*+
 10501  002A34  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10502  002A38  000A               	tblrd		*-
 10503  002A3A  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10504  002A3E  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10505  002A42  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10506  002A46  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10507  002A4A  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10508  002A4E  0E66               	movlw	102
 10509  002A50  6E1E               	movwf	i1___ftmul@f2,c
 10510  002A52  0E06               	movlw	6
 10511  002A54  6E1F               	movwf	i1___ftmul@f2+1,c
 10512  002A56  0E40               	movlw	64
 10513  002A58  6E20               	movwf	i1___ftmul@f2+2,c
 10514  002A5A  EC27  F003         	call	i1___ftmul	;wreg free
 10515  002A5E                     L2:
 10516  002A5E  C01B  F045         	movff	?i1___ftmul,IR_CheckCode@High
 10517  002A62  C01C  F046         	movff	?i1___ftmul+1,IR_CheckCode@High+1
 10518  002A66  C01D  F047         	movff	?i1___ftmul+2,IR_CheckCode@High+2
 10519                           
 10520                           ;IR.c: 237: }
 10521                           ;IR.c: 239: if((double)IR_DataTiming[i] < Low || (double)IR_DataTiming[i] > High )
 10522  002A6A  504B               	movf	IR_CheckCode@i,w,c
 10523  002A6C  0D02               	mullw	2
 10524  002A6E  0E00               	movlw	low _IR_DataTiming
 10525  002A70  24F3               	addwf	prodl,w,c
 10526  002A72  6ED9               	movwf	fsr2l,c
 10527  002A74  0E02               	movlw	high _IR_DataTiming
 10528  002A76  20F4               	addwfc	prodh,w,c
 10529  002A78  6EDA               	movwf	fsr2h,c
 10530  002A7A  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10531  002A7E  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10532  002A82  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10533  002A86  C009  F00C         	movff	?i1___lwtoft,i1___ftge@ff1
 10534  002A8A  C00A  F00D         	movff	?i1___lwtoft+1,i1___ftge@ff1+1
 10535  002A8E  C00B  F00E         	movff	?i1___lwtoft+2,i1___ftge@ff1+2
 10536  002A92  C048  F00F         	movff	IR_CheckCode@Low,i1___ftge@ff2
 10537  002A96  C049  F010         	movff	IR_CheckCode@Low+1,i1___ftge@ff2+1
 10538  002A9A  C04A  F011         	movff	IR_CheckCode@Low+2,i1___ftge@ff2+2
 10539  002A9E  EC6D  F009         	call	i1___ftge	;wreg free
 10540  002AA2  E31D               	bnc	i1l6265
 10541  002AA4  C045  F00C         	movff	IR_CheckCode@High,i1___ftge@ff1
 10542  002AA8  C046  F00D         	movff	IR_CheckCode@High+1,i1___ftge@ff1+1
 10543  002AAC  C047  F00E         	movff	IR_CheckCode@High+2,i1___ftge@ff1+2
 10544  002AB0  504B               	movf	IR_CheckCode@i,w,c
 10545  002AB2  0D02               	mullw	2
 10546  002AB4  0E00               	movlw	low _IR_DataTiming
 10547  002AB6  24F3               	addwf	prodl,w,c
 10548  002AB8  6ED9               	movwf	fsr2l,c
 10549  002ABA  0E02               	movlw	high _IR_DataTiming
 10550  002ABC  20F4               	addwfc	prodh,w,c
 10551  002ABE  6EDA               	movwf	fsr2h,c
 10552  002AC0  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10553  002AC4  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10554  002AC8  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10555  002ACC  C009  F00F         	movff	?i1___lwtoft,i1___ftge@ff2
 10556  002AD0  C00A  F010         	movff	?i1___lwtoft+1,i1___ftge@ff2+1
 10557  002AD4  C00B  F011         	movff	?i1___lwtoft+2,i1___ftge@ff2+2
 10558  002AD8  EC6D  F009         	call	i1___ftge	;wreg free
 10559  002ADC  E211               	bc	i1l6271
 10560  002ADE                     i1l6265:
 10561                           
 10562                           ;IR.c: 240: {
 10563                           ;IR.c: 241: if(IR_SavedTiming0[i] == 0)
 10564  002ADE  504B               	movf	IR_CheckCode@i,w,c
 10565  002AE0  0D02               	mullw	2
 10566  002AE2  0E00               	movlw	0
 10567  002AE4  24F3               	addwf	prodl,w,c
 10568  002AE6  6EF6               	movwf	tblptrl,c
 10569  002AE8  0E24               	movlw	36
 10570  002AEA  20F4               	addwfc	prodh,w,c
 10571  002AEC  6EF7               	movwf	tblptrh,c
 10572  002AEE  6AF8               	clrf	tblptru,c
 10573  002AF0  0E00               	movlw	0
 10574  002AF2  22F8               	addwfc	tblptru,f,c
 10575  002AF4  0009               	tblrd		*+
 10576  002AF6  50F5               	movf	tablat,w,c
 10577  002AF8  0009               	tblrd		*+
 10578  002AFA  10F5               	iorwf	tablat,w,c
 10579  002AFC  E119               	bnz	i1l609
 10580                           
 10581                           ;IR.c: 242: {
 10582                           ;IR.c: 243: return 1;
 10583  002AFE  0C01               	retlw	1
 10584  002B00                     i1l6271:
 10585                           
 10586                           ;IR.c: 246: }
 10587                           ;IR.c: 247: if(i == (IR_CodeSize -1))
 10588  002B00  504B               	movf	IR_CheckCode@i,w,c
 10589  002B02  6E3D               	movwf	??_IR_CheckCode& (0+255),c
 10590  002B04  6A3E               	clrf	(??_IR_CheckCode+1)& (0+255),c
 10591  002B06  683F               	setf	(??_IR_CheckCode+2)& (0+255),c
 10592  002B08  6840               	setf	(??_IR_CheckCode+3)& (0+255),c
 10593  002B0A  506A               	movf	_IR_CodeSize,w,c
 10594  002B0C  6E41               	movwf	(??_IR_CheckCode+4)& (0+255),c
 10595  002B0E  6A42               	clrf	(??_IR_CheckCode+5)& (0+255),c
 10596  002B10  503F               	movf	??_IR_CheckCode+2,w,c
 10597  002B12  2641               	addwf	??_IR_CheckCode+4,f,c
 10598  002B14  5040               	movf	??_IR_CheckCode+3,w,c
 10599  002B16  2242               	addwfc	??_IR_CheckCode+5,f,c
 10600  002B18  503D               	movf	??_IR_CheckCode,w,c
 10601  002B1A  1841               	xorwf	??_IR_CheckCode+4,w,c
 10602  002B1C  E104               	bnz	i1l6277
 10603  002B1E  503E               	movf	??_IR_CheckCode+1,w,c
 10604  002B20  1842               	xorwf	??_IR_CheckCode+5,w,c
 10605  002B22  E101               	bnz	i1l6277
 10606  002B24  0C01               	retlw	1
 10607  002B26                     i1l6277:
 10608  002B26  2A4B               	incf	IR_CheckCode@i,f,c
 10609  002B28                     i1l6279:
 10610  002B28  506A               	movf	_IR_CodeSize,w,c
 10611  002B2A  5C4B               	subwf	IR_CheckCode@i,w,c
 10612  002B2C  E201 D673          	bnc	i1l6245
 10613  002B30                     i1l609:
 10614                           
 10615                           ;IR.c: 250: }
 10616                           ;IR.c: 251: }
 10617                           ;IR.c: 252: for(i=0; i<IR_CodeSize;i++)
 10618  002B30  6A4B               	clrf	IR_CheckCode@i,c
 10619  002B32  D173               	goto	i1l6315
 10620  002B34                     i1l6281:
 10621                           
 10622                           ;IR.c: 253: {
 10623                           ;IR.c: 254: if(IR_SavedTiming1[i] > 4000)
 10624  002B34  504B               	movf	IR_CheckCode@i,w,c
 10625  002B36  0D02               	mullw	2
 10626  002B38  0EC0               	movlw	192
 10627  002B3A  24F3               	addwf	prodl,w,c
 10628  002B3C  6EF6               	movwf	tblptrl,c
 10629  002B3E  0E24               	movlw	36
 10630  002B40  20F4               	addwfc	prodh,w,c
 10631  002B42  6EF7               	movwf	tblptrh,c
 10632  002B44  6AF8               	clrf	tblptru,c
 10633  002B46  0E00               	movlw	0
 10634  002B48  22F8               	addwfc	tblptru,f,c
 10635  002B4A  0009               	tblrd		*+
 10636  002B4C  0EA1               	movlw	161
 10637  002B4E  5EF5               	subwf	tablat,f,c
 10638  002B50  0009               	tblrd		*+
 10639  002B52  0E0F               	movlw	15
 10640  002B54  5AF5               	subwfb	tablat,f,c
 10641  002B56  E348               	bnc	i1l6285
 10642                           
 10643                           ;IR.c: 255: {
 10644                           ;IR.c: 256: Low = (double)IR_SavedTiming1[i] * (1.0 - 0.3);
 10645  002B58  504B               	movf	IR_CheckCode@i,w,c
 10646  002B5A  0D02               	mullw	2
 10647  002B5C  0EC0               	movlw	192
 10648  002B5E  24F3               	addwf	prodl,w,c
 10649  002B60  6EF6               	movwf	tblptrl,c
 10650  002B62  0E24               	movlw	36
 10651  002B64  20F4               	addwfc	prodh,w,c
 10652  002B66  6EF7               	movwf	tblptrh,c
 10653  002B68  6AF8               	clrf	tblptru,c
 10654  002B6A  0E00               	movlw	0
 10655  002B6C  22F8               	addwfc	tblptru,f,c
 10656  002B6E  0009               	tblrd		*+
 10657  002B70  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10658  002B74  000A               	tblrd		*-
 10659  002B76  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10660  002B7A  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10661  002B7E  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10662  002B82  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10663  002B86  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10664  002B8A  0E33               	movlw	51
 10665  002B8C  6E1E               	movwf	i1___ftmul@f2,c
 10666  002B8E  6E1F               	movwf	i1___ftmul@f2+1,c
 10667  002B90  0E3F               	movlw	63
 10668  002B92  6E20               	movwf	i1___ftmul@f2+2,c
 10669  002B94  EC27  F003         	call	i1___ftmul	;wreg free
 10670  002B98  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10671  002B9C  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10672  002BA0  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10673                           
 10674                           ;IR.c: 257: High = (double)IR_SavedTiming1[i] * (1.0 + 0.3);
 10675  002BA4  504B               	movf	IR_CheckCode@i,w,c
 10676  002BA6  0D02               	mullw	2
 10677  002BA8  0EC0               	movlw	192
 10678  002BAA  24F3               	addwf	prodl,w,c
 10679  002BAC  6EF6               	movwf	tblptrl,c
 10680  002BAE  0E24               	movlw	36
 10681  002BB0  20F4               	addwfc	prodh,w,c
 10682  002BB2  6EF7               	movwf	tblptrh,c
 10683  002BB4  6AF8               	clrf	tblptru,c
 10684  002BB6  0E00               	movlw	0
 10685  002BB8  22F8               	addwfc	tblptru,f,c
 10686  002BBA  0009               	tblrd		*+
 10687  002BBC  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10688  002BC0  000A               	tblrd		*-
 10689  002BC2  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10690  002BC6  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10691  002BCA  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10692  002BCE  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10693  002BD2  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10694  002BD6  0E66               	movlw	102
 10695  002BD8  6E1E               	movwf	i1___ftmul@f2,c
 10696  002BDA  0EA6               	movlw	166
 10697  002BDC  6E1F               	movwf	i1___ftmul@f2+1,c
 10698  002BDE  0E3F               	movlw	63
 10699  002BE0  6E20               	movwf	i1___ftmul@f2+2,c
 10700  002BE2  EC27  F003         	call	i1___ftmul	;wreg free
 10701  002BE6  D0B3               	goto	L3
 10702  002BE8                     i1l6285:
 10703                           
 10704                           ;IR.c: 259: else if(IR_SavedTiming0[i] <= 4000 && IR_SavedTiming0[i] > 1000)
 10705  002BE8  504B               	movf	IR_CheckCode@i,w,c
 10706  002BEA  0D02               	mullw	2
 10707  002BEC  0E00               	movlw	0
 10708  002BEE  24F3               	addwf	prodl,w,c
 10709  002BF0  6EF6               	movwf	tblptrl,c
 10710  002BF2  0E24               	movlw	36
 10711  002BF4  20F4               	addwfc	prodh,w,c
 10712  002BF6  6EF7               	movwf	tblptrh,c
 10713  002BF8  6AF8               	clrf	tblptru,c
 10714  002BFA  0E00               	movlw	0
 10715  002BFC  22F8               	addwfc	tblptru,f,c
 10716  002BFE  0009               	tblrd		*+
 10717  002C00  0EA1               	movlw	161
 10718  002C02  5EF5               	subwf	tablat,f,c
 10719  002C04  0009               	tblrd		*+
 10720  002C06  0E0F               	movlw	15
 10721  002C08  5AF5               	subwfb	tablat,f,c
 10722  002C0A  E259               	bc	i1l6291
 10723  002C0C  504B               	movf	IR_CheckCode@i,w,c
 10724  002C0E  0D02               	mullw	2
 10725  002C10  0E00               	movlw	0
 10726  002C12  24F3               	addwf	prodl,w,c
 10727  002C14  6EF6               	movwf	tblptrl,c
 10728  002C16  0E24               	movlw	36
 10729  002C18  20F4               	addwfc	prodh,w,c
 10730  002C1A  6EF7               	movwf	tblptrh,c
 10731  002C1C  6AF8               	clrf	tblptru,c
 10732  002C1E  0E00               	movlw	0
 10733  002C20  22F8               	addwfc	tblptru,f,c
 10734  002C22  0009               	tblrd		*+
 10735  002C24  0EE9               	movlw	233
 10736  002C26  5EF5               	subwf	tablat,f,c
 10737  002C28  0009               	tblrd		*+
 10738  002C2A  0E03               	movlw	3
 10739  002C2C  5AF5               	subwfb	tablat,f,c
 10740  002C2E  E347               	bnc	i1l6291
 10741                           
 10742                           ;IR.c: 260: {
 10743                           ;IR.c: 261: Low = (double)IR_SavedTiming1[i] * (1.0 - 0.75);
 10744  002C30  504B               	movf	IR_CheckCode@i,w,c
 10745  002C32  0D02               	mullw	2
 10746  002C34  0EC0               	movlw	192
 10747  002C36  24F3               	addwf	prodl,w,c
 10748  002C38  6EF6               	movwf	tblptrl,c
 10749  002C3A  0E24               	movlw	36
 10750  002C3C  20F4               	addwfc	prodh,w,c
 10751  002C3E  6EF7               	movwf	tblptrh,c
 10752  002C40  6AF8               	clrf	tblptru,c
 10753  002C42  0E00               	movlw	0
 10754  002C44  22F8               	addwfc	tblptru,f,c
 10755  002C46  0009               	tblrd		*+
 10756  002C48  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10757  002C4C  000A               	tblrd		*-
 10758  002C4E  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10759  002C52  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10760  002C56  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10761  002C5A  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10762  002C5E  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10763  002C62  6A1E               	clrf	i1___ftmul@f2,c
 10764  002C64  0E80               	movlw	128
 10765  002C66  6E1F               	movwf	i1___ftmul@f2+1,c
 10766  002C68  0E3E               	movlw	62
 10767  002C6A  6E20               	movwf	i1___ftmul@f2+2,c
 10768  002C6C  EC27  F003         	call	i1___ftmul	;wreg free
 10769  002C70  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10770  002C74  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10771  002C78  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10772                           
 10773                           ;IR.c: 262: High = (double)IR_SavedTiming1[i] * (1.0 + 0.75);
 10774  002C7C  504B               	movf	IR_CheckCode@i,w,c
 10775  002C7E  0D02               	mullw	2
 10776  002C80  0EC0               	movlw	192
 10777  002C82  24F3               	addwf	prodl,w,c
 10778  002C84  6EF6               	movwf	tblptrl,c
 10779  002C86  0E24               	movlw	36
 10780  002C88  20F4               	addwfc	prodh,w,c
 10781  002C8A  6EF7               	movwf	tblptrh,c
 10782  002C8C  6AF8               	clrf	tblptru,c
 10783  002C8E  0E00               	movlw	0
 10784  002C90  22F8               	addwfc	tblptru,f,c
 10785  002C92  0009               	tblrd		*+
 10786  002C94  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10787  002C98  000A               	tblrd		*-
 10788  002C9A  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10789  002C9E  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10790  002CA2  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10791  002CA6  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10792  002CAA  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10793  002CAE  6A1E               	clrf	i1___ftmul@f2,c
 10794  002CB0  0EE0               	movlw	224
 10795  002CB2  6E1F               	movwf	i1___ftmul@f2+1,c
 10796  002CB4  0E3F               	movlw	63
 10797  002CB6  6E20               	movwf	i1___ftmul@f2+2,c
 10798  002CB8  EC27  F003         	call	i1___ftmul	;wreg free
 10799  002CBC  D048               	goto	L3
 10800  002CBE                     i1l6291:
 10801                           
 10802                           ;IR.c: 264: else
 10803                           ;IR.c: 265: {
 10804                           ;IR.c: 266: Low = (double)IR_SavedTiming1[i] * (1.0 - 1.1);
 10805  002CBE  504B               	movf	IR_CheckCode@i,w,c
 10806  002CC0  0D02               	mullw	2
 10807  002CC2  0EC0               	movlw	192
 10808  002CC4  24F3               	addwf	prodl,w,c
 10809  002CC6  6EF6               	movwf	tblptrl,c
 10810  002CC8  0E24               	movlw	36
 10811  002CCA  20F4               	addwfc	prodh,w,c
 10812  002CCC  6EF7               	movwf	tblptrh,c
 10813  002CCE  6AF8               	clrf	tblptru,c
 10814  002CD0  0E00               	movlw	0
 10815  002CD2  22F8               	addwfc	tblptru,f,c
 10816  002CD4  0009               	tblrd		*+
 10817  002CD6  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10818  002CDA  000A               	tblrd		*-
 10819  002CDC  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10820  002CE0  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10821  002CE4  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10822  002CE8  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10823  002CEC  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10824  002CF0  0ECD               	movlw	205
 10825  002CF2  6E1E               	movwf	i1___ftmul@f2,c
 10826  002CF4  0ECC               	movlw	204
 10827  002CF6  6E1F               	movwf	i1___ftmul@f2+1,c
 10828  002CF8  0EBD               	movlw	189
 10829  002CFA  6E20               	movwf	i1___ftmul@f2+2,c
 10830  002CFC  EC27  F003         	call	i1___ftmul	;wreg free
 10831  002D00  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10832  002D04  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10833  002D08  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10834                           
 10835                           ;IR.c: 267: High = (double)IR_SavedTiming1[i] * (1.0 + 1.1);
 10836  002D0C  504B               	movf	IR_CheckCode@i,w,c
 10837  002D0E  0D02               	mullw	2
 10838  002D10  0EC0               	movlw	192
 10839  002D12  24F3               	addwf	prodl,w,c
 10840  002D14  6EF6               	movwf	tblptrl,c
 10841  002D16  0E24               	movlw	36
 10842  002D18  20F4               	addwfc	prodh,w,c
 10843  002D1A  6EF7               	movwf	tblptrh,c
 10844  002D1C  6AF8               	clrf	tblptru,c
 10845  002D1E  0E00               	movlw	0
 10846  002D20  22F8               	addwfc	tblptru,f,c
 10847  002D22  0009               	tblrd		*+
 10848  002D24  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10849  002D28  000A               	tblrd		*-
 10850  002D2A  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10851  002D2E  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10852  002D32  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10853  002D36  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10854  002D3A  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10855  002D3E  0E66               	movlw	102
 10856  002D40  6E1E               	movwf	i1___ftmul@f2,c
 10857  002D42  0E06               	movlw	6
 10858  002D44  6E1F               	movwf	i1___ftmul@f2+1,c
 10859  002D46  0E40               	movlw	64
 10860  002D48  6E20               	movwf	i1___ftmul@f2+2,c
 10861  002D4A  EC27  F003         	call	i1___ftmul	;wreg free
 10862  002D4E                     L3:
 10863  002D4E  C01B  F045         	movff	?i1___ftmul,IR_CheckCode@High
 10864  002D52  C01C  F046         	movff	?i1___ftmul+1,IR_CheckCode@High+1
 10865  002D56  C01D  F047         	movff	?i1___ftmul+2,IR_CheckCode@High+2
 10866                           
 10867                           ;IR.c: 268: }
 10868                           ;IR.c: 270: if((double)IR_DataTiming[i] < Low || (double)IR_DataTiming[i] > High )
 10869  002D5A  504B               	movf	IR_CheckCode@i,w,c
 10870  002D5C  0D02               	mullw	2
 10871  002D5E  0E00               	movlw	low _IR_DataTiming
 10872  002D60  24F3               	addwf	prodl,w,c
 10873  002D62  6ED9               	movwf	fsr2l,c
 10874  002D64  0E02               	movlw	high _IR_DataTiming
 10875  002D66  20F4               	addwfc	prodh,w,c
 10876  002D68  6EDA               	movwf	fsr2h,c
 10877  002D6A  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10878  002D6E  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10879  002D72  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10880  002D76  C009  F00C         	movff	?i1___lwtoft,i1___ftge@ff1
 10881  002D7A  C00A  F00D         	movff	?i1___lwtoft+1,i1___ftge@ff1+1
 10882  002D7E  C00B  F00E         	movff	?i1___lwtoft+2,i1___ftge@ff1+2
 10883  002D82  C048  F00F         	movff	IR_CheckCode@Low,i1___ftge@ff2
 10884  002D86  C049  F010         	movff	IR_CheckCode@Low+1,i1___ftge@ff2+1
 10885  002D8A  C04A  F011         	movff	IR_CheckCode@Low+2,i1___ftge@ff2+2
 10886  002D8E  EC6D  F009         	call	i1___ftge	;wreg free
 10887  002D92  E31D               	bnc	i1l6297
 10888  002D94  C045  F00C         	movff	IR_CheckCode@High,i1___ftge@ff1
 10889  002D98  C046  F00D         	movff	IR_CheckCode@High+1,i1___ftge@ff1+1
 10890  002D9C  C047  F00E         	movff	IR_CheckCode@High+2,i1___ftge@ff1+2
 10891  002DA0  504B               	movf	IR_CheckCode@i,w,c
 10892  002DA2  0D02               	mullw	2
 10893  002DA4  0E00               	movlw	low _IR_DataTiming
 10894  002DA6  24F3               	addwf	prodl,w,c
 10895  002DA8  6ED9               	movwf	fsr2l,c
 10896  002DAA  0E02               	movlw	high _IR_DataTiming
 10897  002DAC  20F4               	addwfc	prodh,w,c
 10898  002DAE  6EDA               	movwf	fsr2h,c
 10899  002DB0  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10900  002DB4  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10901  002DB8  ECB9  F00B         	call	i1___lwtoft	;wreg free
 10902  002DBC  C009  F00F         	movff	?i1___lwtoft,i1___ftge@ff2
 10903  002DC0  C00A  F010         	movff	?i1___lwtoft+1,i1___ftge@ff2+1
 10904  002DC4  C00B  F011         	movff	?i1___lwtoft+2,i1___ftge@ff2+2
 10905  002DC8  EC6D  F009         	call	i1___ftge	;wreg free
 10906  002DCC  E212               	bc	i1l6307
 10907  002DCE                     i1l6297:
 10908                           
 10909                           ;IR.c: 271: {
 10910                           ;IR.c: 272: if(IR_SavedTiming1[i] == 0)
 10911  002DCE  504B               	movf	IR_CheckCode@i,w,c
 10912  002DD0  0D02               	mullw	2
 10913  002DD2  0EC0               	movlw	192
 10914  002DD4  24F3               	addwf	prodl,w,c
 10915  002DD6  6EF6               	movwf	tblptrl,c
 10916  002DD8  0E24               	movlw	36
 10917  002DDA  20F4               	addwfc	prodh,w,c
 10918  002DDC  6EF7               	movwf	tblptrh,c
 10919  002DDE  6AF8               	clrf	tblptru,c
 10920  002DE0  0E00               	movlw	0
 10921  002DE2  22F8               	addwfc	tblptru,f,c
 10922  002DE4  0009               	tblrd		*+
 10923  002DE6  50F5               	movf	tablat,w,c
 10924  002DE8  0009               	tblrd		*+
 10925  002DEA  10F5               	iorwf	tablat,w,c
 10926  002DEC  B4D8               	btfsc	status,2,c
 10927  002DEE  0C01               	retlw	1
 10928                           
 10929                           ;IR.c: 275: }
 10930                           ;IR.c: 276: return 0;
 10931  002DF0  0C00               	retlw	0
 10932  002DF2                     i1l6307:
 10933                           
 10934                           ;IR.c: 277: }
 10935                           ;IR.c: 278: if(i == (IR_CodeSize -1))
 10936  002DF2  504B               	movf	IR_CheckCode@i,w,c
 10937  002DF4  6E3D               	movwf	??_IR_CheckCode& (0+255),c
 10938  002DF6  6A3E               	clrf	(??_IR_CheckCode+1)& (0+255),c
 10939  002DF8  683F               	setf	(??_IR_CheckCode+2)& (0+255),c
 10940  002DFA  6840               	setf	(??_IR_CheckCode+3)& (0+255),c
 10941  002DFC  506A               	movf	_IR_CodeSize,w,c
 10942  002DFE  6E41               	movwf	(??_IR_CheckCode+4)& (0+255),c
 10943  002E00  6A42               	clrf	(??_IR_CheckCode+5)& (0+255),c
 10944  002E02  503F               	movf	??_IR_CheckCode+2,w,c
 10945  002E04  2641               	addwf	??_IR_CheckCode+4,f,c
 10946  002E06  5040               	movf	??_IR_CheckCode+3,w,c
 10947  002E08  2242               	addwfc	??_IR_CheckCode+5,f,c
 10948  002E0A  503D               	movf	??_IR_CheckCode,w,c
 10949  002E0C  1841               	xorwf	??_IR_CheckCode+4,w,c
 10950  002E0E  E104               	bnz	i1l6313
 10951  002E10  503E               	movf	??_IR_CheckCode+1,w,c
 10952  002E12  1842               	xorwf	??_IR_CheckCode+5,w,c
 10953  002E14  E101               	bnz	i1l6313
 10954  002E16  0C01               	retlw	1
 10955  002E18                     i1l6313:
 10956  002E18  2A4B               	incf	IR_CheckCode@i,f,c
 10957  002E1A                     i1l6315:
 10958  002E1A  506A               	movf	_IR_CodeSize,w,c
 10959  002E1C  5C4B               	subwf	IR_CheckCode@i,w,c
 10960  002E1E  E201 D689          	bnc	i1l6281
 10961  002E22  0C00               	retlw	0
 10962  002E24                     i1l6317:
 10963                           
 10964                           ; BSR set to: 1
 10965                           ;IR.c: 284: else
 10966                           ;IR.c: 285: {
 10967                           ;IR.c: 286: if(IR_DataPlace >= 40)
 10968  002E24  0E27               	movlw	39
 10969  002E26  646B               	cpfsgt	_IR_DataPlace,c
 10970  002E28  0C00               	retlw	0
 10971                           
 10972                           ; BSR set to: 1
 10973                           ;IR.c: 287: {
 10974                           ;IR.c: 288: for(i=0;i<IR_DataPlace;i++)
 10975  002E2A  6A4B               	clrf	IR_CheckCode@i,c
 10976  002E2C  D043               	goto	i1l6339
 10977  002E2E                     i1l6321:
 10978                           
 10979                           ; BSR set to: 1
 10980                           ;IR.c: 289: {
 10981                           ;IR.c: 290: if(IR_DataTiming[i] < 40)
 10982  002E2E  504B               	movf	IR_CheckCode@i,w,c
 10983  002E30  0D02               	mullw	2
 10984  002E32  0E00               	movlw	low _IR_DataTiming
 10985  002E34  24F3               	addwf	prodl,w,c
 10986  002E36  6ED9               	movwf	fsr2l,c
 10987  002E38  0E02               	movlw	high _IR_DataTiming
 10988  002E3A  20F4               	addwfc	prodh,w,c
 10989  002E3C  6EDA               	movwf	fsr2h,c
 10990  002E3E  0E01               	movlw	1
 10991  002E40  50DB               	movf	plusw2,w,c
 10992  002E42  E104               	bnz	i1l6329
 10993  002E44  0E28               	movlw	40
 10994  002E46  5CDE               	subwf	postinc2,w,c
 10995  002E48  E201               	bc	i1l6329
 10996  002E4A  0C00               	retlw	0
 10997  002E4C                     i1l6329:
 10998                           
 10999                           ; BSR set to: 1
 11000                           ;IR.c: 295: else if(IR_DataTiming[i] < 200)
 11001  002E4C  504B               	movf	IR_CheckCode@i,w,c
 11002  002E4E  0D02               	mullw	2
 11003  002E50  0E00               	movlw	low _IR_DataTiming
 11004  002E52  24F3               	addwf	prodl,w,c
 11005  002E54  6ED9               	movwf	fsr2l,c
 11006  002E56  0E02               	movlw	high _IR_DataTiming
 11007  002E58  20F4               	addwfc	prodh,w,c
 11008  002E5A  6EDA               	movwf	fsr2h,c
 11009  002E5C  0E01               	movlw	1
 11010  002E5E  50DB               	movf	plusw2,w,c
 11011  002E60  E10F               	bnz	i1l6333
 11012  002E62  0EC8               	movlw	200
 11013  002E64  5CDE               	subwf	postinc2,w,c
 11014  002E66  E20C               	bc	i1l6333
 11015                           
 11016                           ; BSR set to: 1
 11017                           ;IR.c: 296: {
 11018                           ;IR.c: 297: IR_DataTiming[i] +=350;
 11019  002E68  504B               	movf	IR_CheckCode@i,w,c
 11020  002E6A  0D02               	mullw	2
 11021  002E6C  0E00               	movlw	low _IR_DataTiming
 11022  002E6E  24F3               	addwf	prodl,w,c
 11023  002E70  6ED9               	movwf	fsr2l,c
 11024  002E72  0E02               	movlw	high _IR_DataTiming
 11025  002E74  20F4               	addwfc	prodh,w,c
 11026  002E76  6EDA               	movwf	fsr2h,c
 11027  002E78  0E5E               	movlw	94
 11028  002E7A  26DE               	addwf	postinc2,f,c
 11029  002E7C  0E01               	movlw	1
 11030  002E7E  D018               	goto	L4
 11031  002E80                     i1l6333:
 11032                           
 11033                           ; BSR set to: 1
 11034                           ;IR.c: 299: else if(IR_DataTiming[i] < 320)
 11035  002E80  504B               	movf	IR_CheckCode@i,w,c
 11036  002E82  0D02               	mullw	2
 11037  002E84  0E00               	movlw	low _IR_DataTiming
 11038  002E86  24F3               	addwf	prodl,w,c
 11039  002E88  6ED9               	movwf	fsr2l,c
 11040  002E8A  0E02               	movlw	high _IR_DataTiming
 11041  002E8C  20F4               	addwfc	prodh,w,c
 11042  002E8E  6EDA               	movwf	fsr2h,c
 11043  002E90  0E40               	movlw	64
 11044  002E92  5CDE               	subwf	postinc2,w,c
 11045  002E94  0E01               	movlw	1
 11046  002E96  58DE               	subwfb	postinc2,w,c
 11047  002E98  E20C               	bc	i1l6337
 11048                           
 11049                           ; BSR set to: 1
 11050                           ;IR.c: 300: {
 11051                           ;IR.c: 301: IR_DataTiming[i] +=150;
 11052  002E9A  504B               	movf	IR_CheckCode@i,w,c
 11053  002E9C  0D02               	mullw	2
 11054  002E9E  0E00               	movlw	low _IR_DataTiming
 11055  002EA0  24F3               	addwf	prodl,w,c
 11056  002EA2  6ED9               	movwf	fsr2l,c
 11057  002EA4  0E02               	movlw	high _IR_DataTiming
 11058  002EA6  20F4               	addwfc	prodh,w,c
 11059  002EA8  6EDA               	movwf	fsr2h,c
 11060  002EAA  0E96               	movlw	150
 11061  002EAC  26DE               	addwf	postinc2,f,c
 11062  002EAE  0E00               	movlw	0
 11063  002EB0                     L4:
 11064  002EB0  22DD               	addwfc	postdec2,f,c
 11065  002EB2                     i1l6337:
 11066                           
 11067                           ; BSR set to: 1
 11068  002EB2  2A4B               	incf	IR_CheckCode@i,f,c
 11069  002EB4                     i1l6339:
 11070                           
 11071                           ; BSR set to: 1
 11072  002EB4  506B               	movf	_IR_DataPlace,w,c
 11073  002EB6  5C4B               	subwf	IR_CheckCode@i,w,c
 11074  002EB8  E3BA               	bnc	i1l6321
 11075                           
 11076                           ; BSR set to: 1
 11077                           ;IR.c: 302: }
 11078                           ;IR.c: 303: }
 11079                           ;IR.c: 304: for(i=IR_DataPlace;i<96;i++)
 11080  002EBA  C06B  F04B         	movff	_IR_DataPlace,IR_CheckCode@i
 11081  002EBE                     i1l6341:
 11082                           
 11083                           ; BSR set to: 1
 11084  002EBE  0E5F               	movlw	95
 11085  002EC0  644B               	cpfsgt	IR_CheckCode@i,c
 11086  002EC2  D001               	goto	i1l6345
 11087  002EC4  D00C               	goto	i1l6351
 11088  002EC6                     i1l6345:
 11089                           
 11090                           ; BSR set to: 1
 11091                           ;IR.c: 305: {
 11092                           ;IR.c: 307: IR_DataTiming[i] = 0;
 11093  002EC6  504B               	movf	IR_CheckCode@i,w,c
 11094  002EC8  0D02               	mullw	2
 11095  002ECA  0E00               	movlw	low _IR_DataTiming
 11096  002ECC  24F3               	addwf	prodl,w,c
 11097  002ECE  6ED9               	movwf	fsr2l,c
 11098  002ED0  0E02               	movlw	high _IR_DataTiming
 11099  002ED2  20F4               	addwfc	prodh,w,c
 11100  002ED4  6EDA               	movwf	fsr2h,c
 11101  002ED6  6ADE               	clrf	postinc2,c
 11102  002ED8  6ADD               	clrf	postdec2,c
 11103                           
 11104                           ; BSR set to: 1
 11105  002EDA  2A4B               	incf	IR_CheckCode@i,f,c
 11106  002EDC  D7F0               	goto	i1l6341
 11107  002EDE                     i1l6351:
 11108                           
 11109                           ; BSR set to: 1
 11110                           ;IR.c: 308: }
 11111                           ;IR.c: 311: IR_Saved = 90;
 11112  002EDE  0E5A               	movlw	90
 11113  002EE0  6FAC               	movwf	_IR_Saved& (0+255),b
 11114                           
 11115                           ; BSR set to: 1
 11116                           ;IR.c: 312: Flash_Status = FSH_Write_IR_RF();
 11117  002EE2  ECAA  F019         	call	_FSH_Write_IR_RF	;wreg free
 11118  002EE6  0101               	movlb	1	; () banked
 11119  002EE8  6F03               	movwf	_Flash_Status& (0+255),b
 11120                           
 11121                           ; BSR set to: 1
 11122                           ;IR.c: 313: if(Flash_Status)
 11123  002EEA  5103               	movf	_Flash_Status& (0+255),w,b
 11124  002EEC  E007               	bz	i1l6365
 11125                           
 11126                           ; BSR set to: 1
 11127                           ;IR.c: 314: {
 11128                           ;IR.c: 315: IRProgramCodeNumber++;
 11129  002EEE  2A68               	incf	_IRProgramCodeNumber,f,c
 11130                           
 11131                           ; BSR set to: 1
 11132                           ;IR.c: 316: if(IRProgramCodeNumber > 1)
 11133  002EF0  0E01               	movlw	1
 11134  002EF2  6468               	cpfsgt	_IRProgramCodeNumber,c
 11135  002EF4  D001               	goto	i1l6363
 11136                           
 11137                           ; BSR set to: 1
 11138                           ;IR.c: 317: {
 11139                           ;IR.c: 318: IRProgramCodeNumber = 0;
 11140  002EF6  6A68               	clrf	_IRProgramCodeNumber,c
 11141  002EF8                     i1l6363:
 11142                           
 11143                           ; BSR set to: 1
 11144                           ;IR.c: 319: }
 11145                           ;IR.c: 320: IR_LoadCode();
 11146  002EF8  ECEA  F01C         	call	i1_IR_LoadCode	;wreg free
 11147  002EFC                     i1l6365:
 11148                           
 11149                           ;IR.c: 321: }
 11150                           ;IR.c: 322: System_State = 8;
 11151  002EFC  0E08               	movlw	8
 11152  002EFE  0101               	movlb	1	; () banked
 11153  002F00  6FAE               	movwf	_System_State& (0+255),b	;volatile
 11154  002F02  0C00               	retlw	0
 11155  002F04                     __end_of_IR_CheckCode:
 11156                           	opt stack 0
 11157                           tblptru	equ	0xFF8
 11158                           tblptrh	equ	0xFF7
 11159                           tblptrl	equ	0xFF6
 11160                           tablat	equ	0xFF5
 11161                           prodh	equ	0xFF4
 11162                           prodl	equ	0xFF3
 11163                           intcon	equ	0xFF2
 11164                           intcon2	equ	0xFF1
 11165                           intcon3	equ	0xFF0
 11166                           postinc0	equ	0xFEE
 11167                           wreg	equ	0xFE8
 11168                           postdec1	equ	0xFE5
 11169                           fsr1l	equ	0xFE1
 11170                           bsr	equ	0xFE0
 11171                           postinc2	equ	0xFDE
 11172                           postdec2	equ	0xFDD
 11173                           plusw2	equ	0xFDB
 11174                           fsr2h	equ	0xFDA
 11175                           fsr2l	equ	0xFD9
 11176                           status	equ	0xFD8
 11177                           
 11178 ;; *************** function i1_IR_LoadCode *****************
 11179 ;; Defined at:
 11180 ;;		line 131 in file "IR.c"
 11181 ;; Parameters:    Size  Location     Type
 11182 ;;		None
 11183 ;; Auto vars:     Size  Location     Type
 11184 ;;  IR_LoadCode     3   57[COMRAM] unsigned char 
 11185 ;;  IR_LoadCode     3   54[COMRAM] unsigned char 
 11186 ;;  IR_LoadCode     3   50[COMRAM] unsigned char 
 11187 ;;  IR_LoadCode     3   47[COMRAM] unsigned char 
 11188 ;;  IR_LoadCode     3   43[COMRAM] unsigned char 
 11189 ;;  IR_LoadCode     3   40[COMRAM] unsigned char 
 11190 ;;  IR_LoadCode     1   53[COMRAM] unsigned char 
 11191 ;;  IR_LoadCode     1   46[COMRAM] unsigned char 
 11192 ;; Return value:  Size  Location     Type
 11193 ;;		None               void
 11194 ;; Registers used:
 11195 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11196 ;; Tracked objects:
 11197 ;;		On entry : F/1
 11198 ;;		On exit  : 0/0
 11199 ;;		Unchanged: 0/0
 11200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11201 ;;      Params:         0       0       0       0       0
 11202 ;;      Locals:        20       0       0       0       0
 11203 ;;      Temps:          0       0       0       0       0
 11204 ;;      Totals:        20       0       0       0       0
 11205 ;;Total ram usage:       20 bytes
 11206 ;; Hardware stack levels used:    1
 11207 ;; Hardware stack levels required when called:    8
 11208 ;; This function calls:
 11209 ;;		i1_IR_CalculateCodesize
 11210 ;;		i1___ftge
 11211 ;;		i1___ftmul
 11212 ;;		i1___fttol
 11213 ;;		i1___lwtoft
 11214 ;; This function is called by:
 11215 ;;		_IR_CheckCode
 11216 ;; This function uses a non-reentrant model
 11217 ;;
 11218                           
 11219                           	psect	text74
 11220  0039D4                     __ptext74:
 11221                           	opt stack 0
 11222  0039D4                     i1_IR_LoadCode:
 11223                           	opt stack 14
 11224                           
 11225                           ; BSR set to: 1
 11226                           ;IR.c: 134: double High1 = 0.0;
 11227                           
 11228                           ;incstack = 0
 11229  0039D4  6A2C               	clrf	i1IR_LoadCode@High1,c
 11230  0039D6  6A2D               	clrf	i1IR_LoadCode@High1+1,c
 11231  0039D8  6A2E               	clrf	i1IR_LoadCode@High1+2,c
 11232                           
 11233                           ;IR.c: 135: double Low2 = 0.0;
 11234  0039DA  6A30               	clrf	i1IR_LoadCode@Low2,c
 11235  0039DC  6A31               	clrf	i1IR_LoadCode@Low2+1,c
 11236  0039DE  6A32               	clrf	i1IR_LoadCode@Low2+2,c
 11237                           
 11238                           ;IR.c: 136: double High2 = 0.0;
 11239  0039E0  6A33               	clrf	i1IR_LoadCode@High2,c
 11240  0039E2  6A34               	clrf	i1IR_LoadCode@High2+1,c
 11241  0039E4  6A35               	clrf	i1IR_LoadCode@High2+2,c
 11242                           
 11243                           ;IR.c: 137: double LowBound = 0.0;
 11244  0039E6  6A37               	clrf	i1IR_LoadCode@LowBound,c
 11245  0039E8  6A38               	clrf	i1IR_LoadCode@LowBound+1,c
 11246  0039EA  6A39               	clrf	i1IR_LoadCode@LowBound+2,c
 11247                           
 11248                           ;IR.c: 138: double HighBound = 0.0;
 11249  0039EC  6A3A               	clrf	i1IR_LoadCode@HighBound,c
 11250  0039EE  6A3B               	clrf	i1IR_LoadCode@HighBound+1,c
 11251  0039F0  6A3C               	clrf	i1IR_LoadCode@HighBound+2,c
 11252                           
 11253                           ; BSR set to: 1
 11254                           ;IR.c: 139: unsigned char CodeSize1;
 11255                           ;IR.c: 140: unsigned char CodeSize2;
 11256                           ;IR.c: 142: Low1 = (double)IR_SavedTiming0[0] * (1.0 - 0.3);
 11257  0039F2  6AF6               	clrf	tblptrl,c
 11258  0039F4                     	if	1	;There is more than 1 active tblptr byte
 11259  0039F4  0E24               	movlw	36
 11260  0039F6  6EF7               	movwf	tblptrh,c
 11261  0039F8                     	endif
 11262  0039F8                     	if	0	;There are less than 3 active tblptr bytes
 11263  0039F8                     	endif
 11264  0039F8  0009               	tblrd		*+
 11265  0039FA  CFF5 F009          	movff	tablat,i1___lwtoft@c
 11266  0039FE  000A               	tblrd		*-
 11267  003A00  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 11268  003A04  ECB9  F00B         	call	i1___lwtoft	;wreg free
 11269  003A08  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 11270  003A0C  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 11271  003A10  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 11272  003A14  0E33               	movlw	51
 11273  003A16  6E1E               	movwf	i1___ftmul@f2,c
 11274  003A18  6E1F               	movwf	i1___ftmul@f2+1,c
 11275  003A1A  0E3F               	movlw	63
 11276  003A1C  6E20               	movwf	i1___ftmul@f2+2,c
 11277  003A1E  EC27  F003         	call	i1___ftmul	;wreg free
 11278  003A22  C01B  F029         	movff	?i1___ftmul,i1IR_LoadCode@Low1
 11279  003A26  C01C  F02A         	movff	?i1___ftmul+1,i1IR_LoadCode@Low1+1
 11280  003A2A  C01D  F02B         	movff	?i1___ftmul+2,i1IR_LoadCode@Low1+2
 11281                           
 11282                           ;IR.c: 143: High1= (double)IR_SavedTiming0[0] * (1.0 + 0.3);
 11283  003A2E  6AF6               	clrf	tblptrl,c
 11284  003A30                     	if	1	;There is more than 1 active tblptr byte
 11285  003A30  0E24               	movlw	36
 11286  003A32  6EF7               	movwf	tblptrh,c
 11287  003A34                     	endif
 11288  003A34                     	if	0	;There are less than 3 active tblptr bytes
 11289  003A34                     	endif
 11290  003A34  0009               	tblrd		*+
 11291  003A36  CFF5 F009          	movff	tablat,i1___lwtoft@c
 11292  003A3A  000A               	tblrd		*-
 11293  003A3C  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 11294  003A40  ECB9  F00B         	call	i1___lwtoft	;wreg free
 11295  003A44  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 11296  003A48  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 11297  003A4C  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 11298  003A50  0E66               	movlw	102
 11299  003A52  6E1E               	movwf	i1___ftmul@f2,c
 11300  003A54  0EA6               	movlw	166
 11301  003A56  6E1F               	movwf	i1___ftmul@f2+1,c
 11302  003A58  0E3F               	movlw	63
 11303  003A5A  6E20               	movwf	i1___ftmul@f2+2,c
 11304  003A5C  EC27  F003         	call	i1___ftmul	;wreg free
 11305  003A60  C01B  F02C         	movff	?i1___ftmul,i1IR_LoadCode@High1
 11306  003A64  C01C  F02D         	movff	?i1___ftmul+1,i1IR_LoadCode@High1+1
 11307  003A68  C01D  F02E         	movff	?i1___ftmul+2,i1IR_LoadCode@High1+2
 11308                           
 11309                           ;IR.c: 145: Low2 = (double)IR_SavedTiming1[0] * (1.0 - 0.3);
 11310  003A6C  0EC0               	movlw	192
 11311  003A6E  6EF6               	movwf	tblptrl,c
 11312  003A70                     	if	1	;There is more than 1 active tblptr byte
 11313  003A70  0E24               	movlw	36
 11314  003A72  6EF7               	movwf	tblptrh,c
 11315  003A74                     	endif
 11316  003A74                     	if	0	;There are less than 3 active tblptr bytes
 11317  003A74                     	endif
 11318  003A74  0009               	tblrd		*+
 11319  003A76  CFF5 F009          	movff	tablat,i1___lwtoft@c
 11320  003A7A  000A               	tblrd		*-
 11321  003A7C  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 11322  003A80  ECB9  F00B         	call	i1___lwtoft	;wreg free
 11323  003A84  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 11324  003A88  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 11325  003A8C  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 11326  003A90  0E33               	movlw	51
 11327  003A92  6E1E               	movwf	i1___ftmul@f2,c
 11328  003A94  6E1F               	movwf	i1___ftmul@f2+1,c
 11329  003A96  0E3F               	movlw	63
 11330  003A98  6E20               	movwf	i1___ftmul@f2+2,c
 11331  003A9A  EC27  F003         	call	i1___ftmul	;wreg free
 11332  003A9E  C01B  F030         	movff	?i1___ftmul,i1IR_LoadCode@Low2
 11333  003AA2  C01C  F031         	movff	?i1___ftmul+1,i1IR_LoadCode@Low2+1
 11334  003AA6  C01D  F032         	movff	?i1___ftmul+2,i1IR_LoadCode@Low2+2
 11335                           
 11336                           ;IR.c: 146: High2= (double)IR_SavedTiming1[0] * (1.0 + 0.3);
 11337  003AAA  0EC0               	movlw	192
 11338  003AAC  6EF6               	movwf	tblptrl,c
 11339  003AAE                     	if	1	;There is more than 1 active tblptr byte
 11340  003AAE  0E24               	movlw	36
 11341  003AB0  6EF7               	movwf	tblptrh,c
 11342  003AB2                     	endif
 11343  003AB2                     	if	0	;There are less than 3 active tblptr bytes
 11344  003AB2                     	endif
 11345  003AB2  0009               	tblrd		*+
 11346  003AB4  CFF5 F009          	movff	tablat,i1___lwtoft@c
 11347  003AB8  000A               	tblrd		*-
 11348  003ABA  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 11349  003ABE  ECB9  F00B         	call	i1___lwtoft	;wreg free
 11350  003AC2  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 11351  003AC6  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 11352  003ACA  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 11353  003ACE  0E66               	movlw	102
 11354  003AD0  6E1E               	movwf	i1___ftmul@f2,c
 11355  003AD2  0EA6               	movlw	166
 11356  003AD4  6E1F               	movwf	i1___ftmul@f2+1,c
 11357  003AD6  0E3F               	movlw	63
 11358  003AD8  6E20               	movwf	i1___ftmul@f2+2,c
 11359  003ADA  EC27  F003         	call	i1___ftmul	;wreg free
 11360  003ADE  C01B  F033         	movff	?i1___ftmul,i1IR_LoadCode@High2
 11361  003AE2  C01C  F034         	movff	?i1___ftmul+1,i1IR_LoadCode@High2+1
 11362  003AE6  C01D  F035         	movff	?i1___ftmul+2,i1IR_LoadCode@High2+2
 11363                           
 11364                           ;IR.c: 148: LowBound = Low1;
 11365  003AEA  C029  F037         	movff	i1IR_LoadCode@Low1,i1IR_LoadCode@LowBound
 11366  003AEE  C02A  F038         	movff	i1IR_LoadCode@Low1+1,i1IR_LoadCode@LowBound+1
 11367  003AF2  C02B  F039         	movff	i1IR_LoadCode@Low1+2,i1IR_LoadCode@LowBound+2
 11368                           
 11369                           ;IR.c: 149: if(Low2 < LowBound)
 11370  003AF6  C030  F00C         	movff	i1IR_LoadCode@Low2,i1___ftge@ff1
 11371  003AFA  C031  F00D         	movff	i1IR_LoadCode@Low2+1,i1___ftge@ff1+1
 11372  003AFE  C032  F00E         	movff	i1IR_LoadCode@Low2+2,i1___ftge@ff1+2
 11373  003B02  C037  F00F         	movff	i1IR_LoadCode@LowBound,i1___ftge@ff2
 11374  003B06  C038  F010         	movff	i1IR_LoadCode@LowBound+1,i1___ftge@ff2+1
 11375  003B0A  C039  F011         	movff	i1IR_LoadCode@LowBound+2,i1___ftge@ff2+2
 11376  003B0E  EC6D  F009         	call	i1___ftge	;wreg free
 11377  003B12  E206               	bc	i1l5641
 11378                           
 11379                           ;IR.c: 150: {
 11380                           ;IR.c: 151: LowBound = Low2;
 11381  003B14  C030  F037         	movff	i1IR_LoadCode@Low2,i1IR_LoadCode@LowBound
 11382  003B18  C031  F038         	movff	i1IR_LoadCode@Low2+1,i1IR_LoadCode@LowBound+1
 11383  003B1C  C032  F039         	movff	i1IR_LoadCode@Low2+2,i1IR_LoadCode@LowBound+2
 11384  003B20                     i1l5641:
 11385                           
 11386                           ;IR.c: 152: }
 11387                           ;IR.c: 153: if(LowBound < 6000)
 11388  003B20  C037  F00C         	movff	i1IR_LoadCode@LowBound,i1___ftge@ff1
 11389  003B24  C038  F00D         	movff	i1IR_LoadCode@LowBound+1,i1___ftge@ff1+1
 11390  003B28  C039  F00E         	movff	i1IR_LoadCode@LowBound+2,i1___ftge@ff1+2
 11391  003B2C  0E80               	movlw	128
 11392  003B2E  6E0F               	movwf	i1___ftge@ff2,c
 11393  003B30  0EBB               	movlw	187
 11394  003B32  6E10               	movwf	i1___ftge@ff2+1,c
 11395  003B34  0E45               	movlw	69
 11396  003B36  6E11               	movwf	i1___ftge@ff2+2,c
 11397  003B38  EC6D  F009         	call	i1___ftge	;wreg free
 11398  003B3C  E206               	bc	i1l5645
 11399                           
 11400                           ;IR.c: 154: {
 11401                           ;IR.c: 155: LowBound = 6000;
 11402  003B3E  0E80               	movlw	128
 11403  003B40  6E37               	movwf	i1IR_LoadCode@LowBound,c
 11404  003B42  0EBB               	movlw	187
 11405  003B44  6E38               	movwf	i1IR_LoadCode@LowBound+1,c
 11406  003B46  0E45               	movlw	69
 11407  003B48  6E39               	movwf	i1IR_LoadCode@LowBound+2,c
 11408  003B4A                     i1l5645:
 11409                           
 11410                           ;IR.c: 156: }
 11411                           ;IR.c: 158: HighBound = High1;
 11412  003B4A  C02C  F03A         	movff	i1IR_LoadCode@High1,i1IR_LoadCode@HighBound
 11413  003B4E  C02D  F03B         	movff	i1IR_LoadCode@High1+1,i1IR_LoadCode@HighBound+1
 11414  003B52  C02E  F03C         	movff	i1IR_LoadCode@High1+2,i1IR_LoadCode@HighBound+2
 11415                           
 11416                           ;IR.c: 159: if(High2 < HighBound)
 11417  003B56  C033  F00C         	movff	i1IR_LoadCode@High2,i1___ftge@ff1
 11418  003B5A  C034  F00D         	movff	i1IR_LoadCode@High2+1,i1___ftge@ff1+1
 11419  003B5E  C035  F00E         	movff	i1IR_LoadCode@High2+2,i1___ftge@ff1+2
 11420  003B62  C03A  F00F         	movff	i1IR_LoadCode@HighBound,i1___ftge@ff2
 11421  003B66  C03B  F010         	movff	i1IR_LoadCode@HighBound+1,i1___ftge@ff2+1
 11422  003B6A  C03C  F011         	movff	i1IR_LoadCode@HighBound+2,i1___ftge@ff2+2
 11423  003B6E  EC6D  F009         	call	i1___ftge	;wreg free
 11424  003B72  E206               	bc	i1l5651
 11425                           
 11426                           ;IR.c: 160: {
 11427                           ;IR.c: 161: HighBound = High2;
 11428  003B74  C033  F03A         	movff	i1IR_LoadCode@High2,i1IR_LoadCode@HighBound
 11429  003B78  C034  F03B         	movff	i1IR_LoadCode@High2+1,i1IR_LoadCode@HighBound+1
 11430  003B7C  C035  F03C         	movff	i1IR_LoadCode@High2+2,i1IR_LoadCode@HighBound+2
 11431  003B80                     i1l5651:
 11432                           
 11433                           ;IR.c: 162: }
 11434                           ;IR.c: 163: if(HighBound < 10000)
 11435  003B80  C03A  F00C         	movff	i1IR_LoadCode@HighBound,i1___ftge@ff1
 11436  003B84  C03B  F00D         	movff	i1IR_LoadCode@HighBound+1,i1___ftge@ff1+1
 11437  003B88  C03C  F00E         	movff	i1IR_LoadCode@HighBound+2,i1___ftge@ff1+2
 11438  003B8C  0E40               	movlw	64
 11439  003B8E  6E0F               	movwf	i1___ftge@ff2,c
 11440  003B90  0E1C               	movlw	28
 11441  003B92  6E10               	movwf	i1___ftge@ff2+1,c
 11442  003B94  0E46               	movlw	70
 11443  003B96  6E11               	movwf	i1___ftge@ff2+2,c
 11444  003B98  EC6D  F009         	call	i1___ftge	;wreg free
 11445  003B9C  E206               	bc	i1l5655
 11446                           
 11447                           ;IR.c: 164: {
 11448                           ;IR.c: 165: HighBound = 10000;
 11449  003B9E  0E40               	movlw	64
 11450  003BA0  6E3A               	movwf	i1IR_LoadCode@HighBound,c
 11451  003BA2  0E1C               	movlw	28
 11452  003BA4  6E3B               	movwf	i1IR_LoadCode@HighBound+1,c
 11453  003BA6  0E46               	movlw	70
 11454  003BA8  6E3C               	movwf	i1IR_LoadCode@HighBound+2,c
 11455  003BAA                     i1l5655:
 11456                           
 11457                           ;IR.c: 166: }
 11458                           ;IR.c: 168: IR_SyncLow = (unsigned int) LowBound;
 11459  003BAA  C037  F001         	movff	i1IR_LoadCode@LowBound,i1___fttol@f1
 11460  003BAE  C038  F002         	movff	i1IR_LoadCode@LowBound+1,i1___fttol@f1+1
 11461  003BB2  C039  F003         	movff	i1IR_LoadCode@LowBound+2,i1___fttol@f1+2
 11462  003BB6  EC1F  F005         	call	i1___fttol	;wreg free
 11463  003BBA  C001  F060         	movff	?i1___fttol,_IR_SyncLow
 11464  003BBE  C002  F061         	movff	?i1___fttol+1,_IR_SyncLow+1
 11465                           
 11466                           ;IR.c: 169: IR_SyncHigh = (unsigned int) HighBound;
 11467  003BC2  C03A  F001         	movff	i1IR_LoadCode@HighBound,i1___fttol@f1
 11468  003BC6  C03B  F002         	movff	i1IR_LoadCode@HighBound+1,i1___fttol@f1+1
 11469  003BCA  C03C  F003         	movff	i1IR_LoadCode@HighBound+2,i1___fttol@f1+2
 11470  003BCE  EC1F  F005         	call	i1___fttol	;wreg free
 11471  003BD2  C001  F05E         	movff	?i1___fttol,_IR_SyncHigh
 11472  003BD6  C002  F05F         	movff	?i1___fttol+1,_IR_SyncHigh+1
 11473                           
 11474                           ;IR.c: 171: CodeSize1 = IR_CalculateCodesize(&IR_SavedTiming0[0]);
 11475  003BDA  6A01               	clrf	i1IR_CalculateCodesize@Code,c
 11476  003BDC  0E24               	movlw	36
 11477  003BDE  6E02               	movwf	i1IR_CalculateCodesize@Code+1,c
 11478  003BE0  6A03               	clrf	i1IR_CalculateCodesize@Code+2,c
 11479  003BE2  EC4A  F00A         	call	i1_IR_CalculateCodesize	;wreg free
 11480  003BE6  6E2F               	movwf	i1IR_LoadCode@CodeSize1,c
 11481                           
 11482                           ;IR.c: 172: CodeSize2 = IR_CalculateCodesize(&IR_SavedTiming1[0]);
 11483  003BE8  0EC0               	movlw	192
 11484  003BEA  6E01               	movwf	i1IR_CalculateCodesize@Code,c
 11485  003BEC  0E24               	movlw	36
 11486  003BEE  6E02               	movwf	i1IR_CalculateCodesize@Code+1,c
 11487  003BF0  6A03               	clrf	i1IR_CalculateCodesize@Code+2,c
 11488  003BF2  EC4A  F00A         	call	i1_IR_CalculateCodesize	;wreg free
 11489  003BF6  6E36               	movwf	i1IR_LoadCode@CodeSize2,c
 11490                           
 11491                           ;IR.c: 174: IR_CodeSize = CodeSize1;
 11492  003BF8  C02F  F06A         	movff	i1IR_LoadCode@CodeSize1,_IR_CodeSize
 11493                           
 11494                           ;IR.c: 175: if(IR_CodeSize < CodeSize2)
 11495  003BFC  5036               	movf	i1IR_LoadCode@CodeSize2,w,c
 11496  003BFE  5C6A               	subwf	_IR_CodeSize,w,c
 11497  003C00  E202               	bc	i1l5669
 11498                           
 11499                           ;IR.c: 176: {
 11500                           ;IR.c: 177: IR_CodeSize = CodeSize2;
 11501  003C02  C036  F06A         	movff	i1IR_LoadCode@CodeSize2,_IR_CodeSize
 11502  003C06                     i1l5669:
 11503                           
 11504                           ;IR.c: 178: }
 11505                           ;IR.c: 179: if(IR_CodeSize < 40)
 11506  003C06  0E28               	movlw	40
 11507  003C08  606A               	cpfslt	_IR_CodeSize,c
 11508  003C0A  0C28               	retlw	40
 11509                           
 11510                           ;IR.c: 180: {
 11511                           ;IR.c: 181: IR_CodeSize = 40;
 11512  003C0C  6E6A               	movwf	_IR_CodeSize,c
 11513  003C0E  0C28               	retlw	40	;funcret
 11514  003C10                     __end_ofi1_IR_LoadCode:
 11515                           	opt stack 0
 11516                           tblptru	equ	0xFF8
 11517                           tblptrh	equ	0xFF7
 11518                           tblptrl	equ	0xFF6
 11519                           tablat	equ	0xFF5
 11520                           prodh	equ	0xFF4
 11521                           prodl	equ	0xFF3
 11522                           intcon	equ	0xFF2
 11523                           intcon2	equ	0xFF1
 11524                           intcon3	equ	0xFF0
 11525                           postinc0	equ	0xFEE
 11526                           wreg	equ	0xFE8
 11527                           postdec1	equ	0xFE5
 11528                           fsr1l	equ	0xFE1
 11529                           bsr	equ	0xFE0
 11530                           postinc2	equ	0xFDE
 11531                           postdec2	equ	0xFDD
 11532                           plusw2	equ	0xFDB
 11533                           fsr2h	equ	0xFDA
 11534                           fsr2l	equ	0xFD9
 11535                           status	equ	0xFD8
 11536                           
 11537 ;; *************** function i1___fttol *****************
 11538 ;; Defined at:
 11539 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
 11540 ;; Parameters:    Size  Location     Type
 11541 ;;  f1              3    0[COMRAM] float 
 11542 ;; Auto vars:     Size  Location     Type
 11543 ;;  __fttol         4   10[COMRAM] unsigned long 
 11544 ;;  __fttol         1   14[COMRAM] unsigned char 
 11545 ;;  __fttol         1    9[COMRAM] unsigned char 
 11546 ;; Return value:  Size  Location     Type
 11547 ;;                  4    0[COMRAM] long 
 11548 ;; Registers used:
 11549 ;;		wreg, status,2, status,0
 11550 ;; Tracked objects:
 11551 ;;		On entry : 0/1
 11552 ;;		On exit  : 0/0
 11553 ;;		Unchanged: 0/0
 11554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11555 ;;      Params:         4       0       0       0       0
 11556 ;;      Locals:         6       0       0       0       0
 11557 ;;      Temps:          5       0       0       0       0
 11558 ;;      Totals:        15       0       0       0       0
 11559 ;;Total ram usage:       15 bytes
 11560 ;; Hardware stack levels used:    1
 11561 ;; Hardware stack levels required when called:    6
 11562 ;; This function calls:
 11563 ;;		Nothing
 11564 ;; This function is called by:
 11565 ;;		i1_IR_LoadCode
 11566 ;; This function uses a non-reentrant model
 11567 ;;
 11568                           
 11569                           	psect	text75
 11570  000A3E                     __ptext75:
 11571                           	opt stack 0
 11572  000A3E                     i1___fttol:
 11573                           	opt stack 15
 11574                           
 11575                           ;incstack = 0
 11576  000A3E  C003  F005         	movff	i1___fttol@f1+2,??i1___fttol
 11577  000A42  6A06               	clrf	(??i1___fttol+1)& (0+255),c
 11578  000A44  6A07               	clrf	(??i1___fttol+2)& (0+255),c
 11579  000A46  3402               	rlcf	i1___fttol@f1+1,w,c
 11580  000A48  3605               	rlcf	??i1___fttol& (0+255),f,c
 11581  000A4A  E301               	bnc	u467_21
 11582  000A4C  8006               	bsf	(??i1___fttol+1)& (0+255),0,c
 11583  000A4E                     u467_21:
 11584  000A4E  5005               	movf	??i1___fttol,w,c
 11585  000A50  6E0F               	movwf	i1___fttol@exp1,c
 11586  000A52  500F               	movf	i1___fttol@exp1,w,c
 11587  000A54  E105               	bnz	i1l4995
 11588  000A56                     i1l4993:
 11589  000A56  6A01               	clrf	?i1___fttol,c
 11590  000A58  6A02               	clrf	?i1___fttol+1,c
 11591  000A5A  6A03               	clrf	?i1___fttol+2,c
 11592  000A5C  6A04               	clrf	?i1___fttol+3,c
 11593  000A5E  0012               	return	
 11594  000A60                     i1l4995:
 11595  000A60  0E17               	movlw	23
 11596  000A62  6E05               	movwf	??i1___fttol& (0+255),c
 11597  000A64  C001  F006         	movff	i1___fttol@f1,??i1___fttol+1
 11598  000A68  C002  F007         	movff	i1___fttol@f1+1,??i1___fttol+2
 11599  000A6C  C003  F008         	movff	i1___fttol@f1+2,??i1___fttol+3
 11600  000A70  2805               	incf	??i1___fttol,w,c
 11601  000A72  6E09               	movwf	(??i1___fttol+4)& (0+255),c
 11602  000A74  D004               	goto	i1u469_20
 11603  000A76                     i1u469_25:
 11604  000A76  90D8               	bcf	status,0,c
 11605  000A78  3208               	rrcf	??i1___fttol+3,f,c
 11606  000A7A  3207               	rrcf	??i1___fttol+2,f,c
 11607  000A7C  3206               	rrcf	??i1___fttol+1,f,c
 11608  000A7E                     i1u469_20:
 11609  000A7E  2E09               	decfsz	(??i1___fttol+4)& (0+255),f,c
 11610  000A80  D7FA               	goto	i1u469_25
 11611  000A82  5006               	movf	??i1___fttol+1,w,c
 11612  000A84  6E0A               	movwf	i1___fttol@sign1,c
 11613  000A86  8E02               	bsf	i1___fttol@f1+1,7,c
 11614  000A88  6A03               	clrf	i1___fttol@f1+2,c
 11615  000A8A  5001               	movf	i1___fttol@f1,w,c
 11616  000A8C  6E0B               	movwf	i1___fttol@lval,c
 11617  000A8E  5002               	movf	i1___fttol@f1+1,w,c
 11618  000A90  6E0C               	movwf	i1___fttol@lval+1,c
 11619  000A92  5003               	movf	i1___fttol@f1+2,w,c
 11620  000A94  6E0D               	movwf	i1___fttol@lval+2,c
 11621  000A96  6A0E               	clrf	i1___fttol@lval+3,c
 11622  000A98  0E8E               	movlw	142
 11623  000A9A  5E0F               	subwf	i1___fttol@exp1,f,c
 11624  000A9C  AE0F               	btfss	i1___fttol@exp1,7,c
 11625  000A9E  D00C               	goto	i1l5015
 11626  000AA0  500F               	movf	i1___fttol@exp1,w,c
 11627  000AA2  0A80               	xorlw	128
 11628  000AA4  0F8F               	addlw	143
 11629  000AA6  E3D7               	bnc	i1l4993
 11630  000AA8                     i1l5011:
 11631  000AA8  90D8               	bcf	status,0,c
 11632  000AAA  320E               	rrcf	i1___fttol@lval+3,f,c
 11633  000AAC  320D               	rrcf	i1___fttol@lval+2,f,c
 11634  000AAE  320C               	rrcf	i1___fttol@lval+1,f,c
 11635  000AB0  320B               	rrcf	i1___fttol@lval,f,c
 11636  000AB2  3E0F               	incfsz	i1___fttol@exp1,f,c
 11637  000AB4  D7F9               	goto	i1l5011
 11638  000AB6  D00C               	goto	i1l5023
 11639  000AB8                     i1l5015:
 11640  000AB8  0E17               	movlw	23
 11641  000ABA  640F               	cpfsgt	i1___fttol@exp1,c
 11642  000ABC  D007               	goto	i1l5021
 11643  000ABE  D7CB               	goto	i1l4993
 11644  000AC0                     i1l5019:
 11645  000AC0  90D8               	bcf	status,0,c
 11646  000AC2  360B               	rlcf	i1___fttol@lval,f,c
 11647  000AC4  360C               	rlcf	i1___fttol@lval+1,f,c
 11648  000AC6  360D               	rlcf	i1___fttol@lval+2,f,c
 11649  000AC8  360E               	rlcf	i1___fttol@lval+3,f,c
 11650  000ACA  060F               	decf	i1___fttol@exp1,f,c
 11651  000ACC                     i1l5021:
 11652  000ACC  500F               	movf	i1___fttol@exp1,w,c
 11653  000ACE  E1F8               	bnz	i1l5019
 11654  000AD0                     i1l5023:
 11655  000AD0  500A               	movf	i1___fttol@sign1,w,c
 11656  000AD2  E008               	bz	i1l5027
 11657  000AD4  1E0E               	comf	i1___fttol@lval+3,f,c
 11658  000AD6  1E0D               	comf	i1___fttol@lval+2,f,c
 11659  000AD8  1E0C               	comf	i1___fttol@lval+1,f,c
 11660  000ADA  6C0B               	negf	i1___fttol@lval,c
 11661  000ADC  0E00               	movlw	0
 11662  000ADE  220C               	addwfc	i1___fttol@lval+1,f,c
 11663  000AE0  220D               	addwfc	i1___fttol@lval+2,f,c
 11664  000AE2  220E               	addwfc	i1___fttol@lval+3,f,c
 11665  000AE4                     i1l5027:
 11666  000AE4  C00B  F001         	movff	i1___fttol@lval,?i1___fttol
 11667  000AE8  C00C  F002         	movff	i1___fttol@lval+1,?i1___fttol+1
 11668  000AEC  C00D  F003         	movff	i1___fttol@lval+2,?i1___fttol+2
 11669  000AF0  C00E  F004         	movff	i1___fttol@lval+3,?i1___fttol+3
 11670  000AF4  0012               	return		;funcret
 11671  000AF6                     __end_ofi1___fttol:
 11672                           	opt stack 0
 11673                           tblptru	equ	0xFF8
 11674                           tblptrh	equ	0xFF7
 11675                           tblptrl	equ	0xFF6
 11676                           tablat	equ	0xFF5
 11677                           prodh	equ	0xFF4
 11678                           prodl	equ	0xFF3
 11679                           intcon	equ	0xFF2
 11680                           intcon2	equ	0xFF1
 11681                           intcon3	equ	0xFF0
 11682                           postinc0	equ	0xFEE
 11683                           wreg	equ	0xFE8
 11684                           postdec1	equ	0xFE5
 11685                           fsr1l	equ	0xFE1
 11686                           bsr	equ	0xFE0
 11687                           postinc2	equ	0xFDE
 11688                           postdec2	equ	0xFDD
 11689                           plusw2	equ	0xFDB
 11690                           fsr2h	equ	0xFDA
 11691                           fsr2l	equ	0xFD9
 11692                           status	equ	0xFD8
 11693                           
 11694 ;; *************** function i1___ftge *****************
 11695 ;; Defined at:
 11696 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
 11697 ;; Parameters:    Size  Location     Type
 11698 ;;  ff1             3   11[COMRAM] float 
 11699 ;;  ff2             3   14[COMRAM] float 
 11700 ;; Auto vars:     Size  Location     Type
 11701 ;;		None
 11702 ;; Return value:  Size  Location     Type
 11703 ;;		None               void
 11704 ;; Registers used:
 11705 ;;		wreg, status,2, status,0
 11706 ;; Tracked objects:
 11707 ;;		On entry : 0/1
 11708 ;;		On exit  : 0/0
 11709 ;;		Unchanged: 0/0
 11710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11711 ;;      Params:         6       0       0       0       0
 11712 ;;      Locals:         0       0       0       0       0
 11713 ;;      Temps:          3       0       0       0       0
 11714 ;;      Totals:         9       0       0       0       0
 11715 ;;Total ram usage:        9 bytes
 11716 ;; Hardware stack levels used:    1
 11717 ;; Hardware stack levels required when called:    6
 11718 ;; This function calls:
 11719 ;;		Nothing
 11720 ;; This function is called by:
 11721 ;;		_IR_CheckCode
 11722 ;;		i1_IR_LoadCode
 11723 ;; This function uses a non-reentrant model
 11724 ;;
 11725                           
 11726                           	psect	text76
 11727  0012DA                     __ptext76:
 11728                           	opt stack 0
 11729  0012DA                     i1___ftge:
 11730                           	opt stack 16
 11731                           
 11732                           ;incstack = 0
 11733  0012DA  AE0E               	btfss	i1___ftge@ff1+2,7,c
 11734  0012DC  D00D               	goto	i1l4883
 11735  0012DE  6A12               	clrf	??i1___ftge& (0+255),c
 11736  0012E0  6A13               	clrf	(??i1___ftge+1)& (0+255),c
 11737  0012E2  0E80               	movlw	128
 11738  0012E4  6E14               	movwf	(??i1___ftge+2)& (0+255),c
 11739  0012E6  500C               	movf	i1___ftge@ff1,w,c
 11740  0012E8  5C12               	subwf	??i1___ftge,w,c
 11741  0012EA  6E0C               	movwf	i1___ftge@ff1,c
 11742  0012EC  500D               	movf	i1___ftge@ff1+1,w,c
 11743  0012EE  5813               	subwfb	??i1___ftge+1,w,c
 11744  0012F0  6E0D               	movwf	i1___ftge@ff1+1,c
 11745  0012F2  500E               	movf	i1___ftge@ff1+2,w,c
 11746  0012F4  5814               	subwfb	??i1___ftge+2,w,c
 11747  0012F6  6E0E               	movwf	i1___ftge@ff1+2,c
 11748  0012F8                     i1l4883:
 11749  0012F8  AE11               	btfss	i1___ftge@ff2+2,7,c
 11750  0012FA  D00D               	goto	i1l4887
 11751  0012FC  6A12               	clrf	??i1___ftge& (0+255),c
 11752  0012FE  6A13               	clrf	(??i1___ftge+1)& (0+255),c
 11753  001300  0E80               	movlw	128
 11754  001302  6E14               	movwf	(??i1___ftge+2)& (0+255),c
 11755  001304  500F               	movf	i1___ftge@ff2,w,c
 11756  001306  5C12               	subwf	??i1___ftge,w,c
 11757  001308  6E0F               	movwf	i1___ftge@ff2,c
 11758  00130A  5010               	movf	i1___ftge@ff2+1,w,c
 11759  00130C  5813               	subwfb	??i1___ftge+1,w,c
 11760  00130E  6E10               	movwf	i1___ftge@ff2+1,c
 11761  001310  5011               	movf	i1___ftge@ff2+2,w,c
 11762  001312  5814               	subwfb	??i1___ftge+2,w,c
 11763  001314  6E11               	movwf	i1___ftge@ff2+2,c
 11764  001316                     i1l4887:
 11765  001316  0E80               	movlw	128
 11766  001318  1A0E               	xorwf	i1___ftge@ff1+2,f,c
 11767  00131A  1A11               	xorwf	i1___ftge@ff2+2,f,c
 11768  00131C  500F               	movf	i1___ftge@ff2,w,c
 11769  00131E  5C0C               	subwf	i1___ftge@ff1,w,c
 11770  001320  5010               	movf	i1___ftge@ff2+1,w,c
 11771  001322  580D               	subwfb	i1___ftge@ff1+1,w,c
 11772  001324  5011               	movf	i1___ftge@ff2+2,w,c
 11773  001326  580E               	subwfb	i1___ftge@ff1+2,w,c
 11774  001328  E202               	bc	i1l4893
 11775  00132A  90D8               	bcf	status,0,c
 11776  00132C  0012               	return	
 11777  00132E                     i1l4893:
 11778  00132E  80D8               	bsf	status,0,c
 11779  001330  0012               	return		;funcret
 11780  001332                     __end_ofi1___ftge:
 11781                           	opt stack 0
 11782                           tblptru	equ	0xFF8
 11783                           tblptrh	equ	0xFF7
 11784                           tblptrl	equ	0xFF6
 11785                           tablat	equ	0xFF5
 11786                           prodh	equ	0xFF4
 11787                           prodl	equ	0xFF3
 11788                           intcon	equ	0xFF2
 11789                           intcon2	equ	0xFF1
 11790                           intcon3	equ	0xFF0
 11791                           postinc0	equ	0xFEE
 11792                           wreg	equ	0xFE8
 11793                           postdec1	equ	0xFE5
 11794                           fsr1l	equ	0xFE1
 11795                           bsr	equ	0xFE0
 11796                           postinc2	equ	0xFDE
 11797                           postdec2	equ	0xFDD
 11798                           plusw2	equ	0xFDB
 11799                           fsr2h	equ	0xFDA
 11800                           fsr2l	equ	0xFD9
 11801                           status	equ	0xFD8
 11802                           
 11803 ;; *************** function i1_IR_CalculateCodesize *****************
 11804 ;; Defined at:
 11805 ;;		line 190 in file "IR.c"
 11806 ;; Parameters:    Size  Location     Type
 11807 ;;  Code            3    0[COMRAM] PTR const unsigned int 
 11808 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), 
 11809 ;; Auto vars:     Size  Location     Type
 11810 ;;  IR_Calculate    1    6[COMRAM] unsigned char 
 11811 ;; Return value:  Size  Location     Type
 11812 ;;                  1    wreg      unsigned char 
 11813 ;; Registers used:
 11814 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11815 ;; Tracked objects:
 11816 ;;		On entry : 0/1
 11817 ;;		On exit  : 0/0
 11818 ;;		Unchanged: 0/0
 11819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11820 ;;      Params:         3       0       0       0       0
 11821 ;;      Locals:         1       0       0       0       0
 11822 ;;      Temps:          3       0       0       0       0
 11823 ;;      Totals:         7       0       0       0       0
 11824 ;;Total ram usage:        7 bytes
 11825 ;; Hardware stack levels used:    1
 11826 ;; Hardware stack levels required when called:    6
 11827 ;; This function calls:
 11828 ;;		Nothing
 11829 ;; This function is called by:
 11830 ;;		i1_IR_LoadCode
 11831 ;; This function uses a non-reentrant model
 11832 ;;
 11833                           
 11834                           	psect	text77
 11835  001494                     __ptext77:
 11836                           	opt stack 0
 11837  001494                     i1_IR_CalculateCodesize:
 11838                           	opt stack 15
 11839                           
 11840                           ;IR.c: 192: unsigned char i;
 11841                           ;IR.c: 194: for(i=0; i<96;i++)
 11842                           
 11843                           ;incstack = 0
 11844  001494  6A07               	clrf	i1IR_CalculateCodesize@i,c
 11845  001496                     i1l4747:
 11846                           
 11847                           ;IR.c: 195: {
 11848                           ;IR.c: 196: if(Code[i] == 0)
 11849  001496  5007               	movf	i1IR_CalculateCodesize@i,w,c
 11850  001498  0D02               	mullw	2
 11851  00149A  50F3               	movf	prodl,w,c
 11852  00149C  2401               	addwf	i1IR_CalculateCodesize@Code,w,c
 11853  00149E  6E04               	movwf	??i1_IR_CalculateCodesize& (0+255),c
 11854  0014A0  50F4               	movf	prodh,w,c
 11855  0014A2  2002               	addwfc	i1IR_CalculateCodesize@Code+1,w,c
 11856  0014A4  6E05               	movwf	(??i1_IR_CalculateCodesize+1)& (0+255),c
 11857  0014A6  0E00               	movlw	0
 11858  0014A8  2003               	addwfc	i1IR_CalculateCodesize@Code+2,w,c
 11859  0014AA  6E06               	movwf	(??i1_IR_CalculateCodesize+2)& (0+255),c
 11860  0014AC  C004  FFF6         	movff	??i1_IR_CalculateCodesize,tblptrl
 11861  0014B0  C005  FFF7         	movff	??i1_IR_CalculateCodesize+1,tblptrh
 11862  0014B4  C006  FFF8         	movff	??i1_IR_CalculateCodesize+2,tblptru
 11863  0014B8  0009               	tblrd		*+
 11864  0014BA  50F5               	movf	tablat,w,c
 11865  0014BC  0009               	tblrd		*+
 11866  0014BE  10F5               	iorwf	tablat,w,c
 11867  0014C0  E102               	bnz	i1l4753
 11868                           
 11869                           ;IR.c: 197: {
 11870                           ;IR.c: 198: return i;
 11871  0014C2  5007               	movf	i1IR_CalculateCodesize@i,w,c
 11872  0014C4  0012               	return	
 11873  0014C6                     i1l4753:
 11874  0014C6  2A07               	incf	i1IR_CalculateCodesize@i,f,c
 11875  0014C8  0E5F               	movlw	95
 11876  0014CA  6407               	cpfsgt	i1IR_CalculateCodesize@i,c
 11877  0014CC  D7E4               	goto	i1l4747
 11878  0014CE  0C60               	retlw	96
 11879  0014D0                     __end_ofi1_IR_CalculateCodesize:
 11880                           	opt stack 0
 11881                           tblptru	equ	0xFF8
 11882                           tblptrh	equ	0xFF7
 11883                           tblptrl	equ	0xFF6
 11884                           tablat	equ	0xFF5
 11885                           prodh	equ	0xFF4
 11886                           prodl	equ	0xFF3
 11887                           intcon	equ	0xFF2
 11888                           intcon2	equ	0xFF1
 11889                           intcon3	equ	0xFF0
 11890                           postinc0	equ	0xFEE
 11891                           wreg	equ	0xFE8
 11892                           postdec1	equ	0xFE5
 11893                           fsr1l	equ	0xFE1
 11894                           bsr	equ	0xFE0
 11895                           postinc2	equ	0xFDE
 11896                           postdec2	equ	0xFDD
 11897                           plusw2	equ	0xFDB
 11898                           fsr2h	equ	0xFDA
 11899                           fsr2l	equ	0xFD9
 11900                           status	equ	0xFD8
 11901                           
 11902 ;; *************** function _FSH_Write_IR_RF *****************
 11903 ;; Defined at:
 11904 ;;		line 196 in file "FLASH.c"
 11905 ;; Parameters:    Size  Location     Type
 11906 ;;		None
 11907 ;; Auto vars:     Size  Location     Type
 11908 ;;  RAMaddress      2   32[COMRAM] PTR unsigned int 
 11909 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), 
 11910 ;;  i               2   29[COMRAM] unsigned int 
 11911 ;;  FlashWastein    2   25[COMRAM] unsigned int 
 11912 ;;  WriteTries      1   31[COMRAM] unsigned char 
 11913 ;;  status          1   28[COMRAM] unsigned char 
 11914 ;;  j               1   27[COMRAM] unsigned char 
 11915 ;;  lowint          1   24[COMRAM] unsigned char 
 11916 ;;  highint         1   23[COMRAM] unsigned char 
 11917 ;; Return value:  Size  Location     Type
 11918 ;;                  1    wreg      unsigned char 
 11919 ;; Registers used:
 11920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11921 ;; Tracked objects:
 11922 ;;		On entry : F/1
 11923 ;;		On exit  : 0/0
 11924 ;;		Unchanged: 0/0
 11925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11926 ;;      Params:         0       0       0       0       0
 11927 ;;      Locals:        11       0       0       0       0
 11928 ;;      Temps:          6       0       0       0       0
 11929 ;;      Totals:        17       0       0       0       0
 11930 ;;Total ram usage:       17 bytes
 11931 ;; Hardware stack levels used:    1
 11932 ;; Hardware stack levels required when called:    9
 11933 ;; This function calls:
 11934 ;;		_FSH_AddressToBlock
 11935 ;;		_FSH_EraseBlock
 11936 ;;		_FSH_VerifyWriteIntArray
 11937 ;;		_FSH_WriteIntArray
 11938 ;;		_IR_ResetData
 11939 ;;		_MSC_BufferCopyIntConst
 11940 ;;		_RF_ResetData
 11941 ;; This function is called by:
 11942 ;;		_IR_CheckCode
 11943 ;; This function uses a non-reentrant model
 11944 ;;
 11945                           
 11946                           	psect	text78
 11947  003354                     __ptext78:
 11948                           	opt stack 0
 11949  003354                     _FSH_Write_IR_RF:
 11950                           	opt stack 13
 11951                           
 11952                           ; BSR set to: 1
 11953                           ;FLASH.c: 198: unsigned int i;
 11954                           ;FLASH.c: 199: unsigned char j;
 11955                           ;FLASH.c: 200: unsigned char WriteTries;
 11956                           ;FLASH.c: 201: unsigned int *RAMaddress;
 11957                           ;FLASH.c: 202: unsigned char status = 0;
 11958                           
 11959                           ;incstack = 0
 11960  003354  6A1D               	clrf	FSH_Write_IR_RF@status,c
 11961                           
 11962                           ; BSR set to: 1
 11963                           ;FLASH.c: 204: unsigned char highint = INTCONbits.GIE;
 11964  003356  0E00               	movlw	0
 11965  003358  BEF2               	btfsc	intcon,7,c	;volatile
 11966  00335A  0E01               	movlw	1
 11967  00335C  6E18               	movwf	FSH_Write_IR_RF@highint,c
 11968                           
 11969                           ;FLASH.c: 205: unsigned char lowint = INTCONbits.PEIE;
 11970  00335E  0E00               	movlw	0
 11971  003360  BCF2               	btfsc	intcon,6,c	;volatile
 11972  003362  0E01               	movlw	1
 11973  003364  6E19               	movwf	FSH_Write_IR_RF@lowint,c
 11974                           
 11975                           ; BSR set to: 1
 11976                           ;FLASH.c: 207: INTCONbits.GIE = 0;
 11977  003366  9EF2               	bcf	intcon,7,c	;volatile
 11978                           
 11979                           ; BSR set to: 1
 11980                           ;FLASH.c: 208: INTCONbits.PEIE = 0;
 11981  003368  9CF2               	bcf	intcon,6,c	;volatile
 11982                           
 11983                           ; BSR set to: 1
 11984                           ;FLASH.c: 210: if(IR_Saved == 90 && RF_Saved == 90)
 11985  00336A  0E5A               	movlw	90
 11986  00336C  19AC               	xorwf	_IR_Saved& (0+255),w,b
 11987  00336E  E107               	bnz	i1l5201
 11988                           
 11989                           ; BSR set to: 1
 11990  003370  0E5A               	movlw	90
 11991  003372  19AD               	xorwf	_RF_Saved& (0+255),w,b
 11992  003374  E104               	bnz	i1l5201
 11993  003376                     i1l5197:
 11994                           
 11995                           ; BSR set to: 1
 11996                           ;FLASH.c: 211: {
 11997                           ;FLASH.c: 213: IR_Saved = 91;
 11998  003376  0E5B               	movlw	91
 11999  003378  6FAC               	movwf	_IR_Saved& (0+255),b
 12000                           
 12001                           ;FLASH.c: 214: RF_Saved = 91;
 12002  00337A  6FAD               	movwf	_RF_Saved& (0+255),b
 12003                           
 12004                           ;FLASH.c: 215: goto END;
 12005  00337C  D1FA               	goto	i1l971
 12006  00337E                     i1l5201:
 12007                           
 12008                           ; BSR set to: 1
 12009                           ;FLASH.c: 217: else if(IR_Saved != 90 && RF_Saved != 90)
 12010  00337E  0E5A               	movlw	90
 12011  003380  19AC               	xorwf	_IR_Saved& (0+255),w,b
 12012  003382  E003               	bz	i1l5207
 12013                           
 12014                           ; BSR set to: 1
 12015  003384  0E5A               	movlw	90
 12016  003386  19AD               	xorwf	_RF_Saved& (0+255),w,b
 12017  003388  E1F6               	bnz	i1l5197
 12018  00338A                     i1l5207:
 12019                           
 12020                           ; BSR set to: 1
 12021                           ;FLASH.c: 223: }
 12022                           ;FLASH.c: 225: if(IR_Saved == 90)
 12023  00338A  0E5A               	movlw	90
 12024  00338C  19AC               	xorwf	_IR_Saved& (0+255),w,b
 12025  00338E  E137               	bnz	i1l5221
 12026                           
 12027                           ; BSR set to: 1
 12028                           ;FLASH.c: 226: {
 12029                           ;FLASH.c: 228: RF_ResetData();
 12030  003390  ECCC  F00D         	call	_RF_ResetData	;wreg free
 12031                           
 12032                           ; BSR set to: 0
 12033                           ;FLASH.c: 229: MSC_BufferCopyIntConst(&RF_SavedTiming,&RF_DataTiming, 64, 0);
 12034  003394  0E80               	movlw	128
 12035  003396  6E07               	movwf	MSC_BufferCopyIntConst@from,c
 12036  003398  0E25               	movlw	37
 12037  00339A  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 12038  00339C  6A09               	clrf	MSC_BufferCopyIntConst@from+2,c
 12039  00339E  0E07               	movlw	low _RF_DataTiming
 12040  0033A0  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 12041  0033A2  0E01               	movlw	high _RF_DataTiming
 12042  0033A4  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 12043  0033A6  6A0D               	clrf	MSC_BufferCopyIntConst@count+1,c
 12044  0033A8  0E40               	movlw	64
 12045  0033AA  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 12046  0033AC  6A0F               	clrf	MSC_BufferCopyIntConst@shift+1,c
 12047  0033AE  6A0E               	clrf	MSC_BufferCopyIntConst@shift,c
 12048  0033B0  ECC6  F006         	call	_MSC_BufferCopyIntConst	;wreg free
 12049                           
 12050                           ;FLASH.c: 230: if(IRProgramCodeNumber == 0)
 12051  0033B4  5068               	movf	_IRProgramCodeNumber,w,c
 12052  0033B6  E111               	bnz	i1l5217
 12053  0033B8                     i1l5215:
 12054                           
 12055                           ;FLASH.c: 231: {
 12056                           ;FLASH.c: 232: MSC_BufferCopyIntConst(&IR_SavedTiming1,&IR_DataHolder1, 96, 0);
 12057  0033B8  0EC0               	movlw	192
 12058  0033BA  6E07               	movwf	MSC_BufferCopyIntConst@from,c
 12059  0033BC  0E24               	movlw	36
 12060  0033BE  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 12061  0033C0  6A09               	clrf	MSC_BufferCopyIntConst@from+2,c
 12062  0033C2  0E00               	movlw	low _IR_DataHolder1
 12063  0033C4  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 12064  0033C6  0E03               	movlw	high _IR_DataHolder1
 12065  0033C8  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 12066  0033CA  6A0D               	clrf	MSC_BufferCopyIntConst@count+1,c
 12067  0033CC  0E60               	movlw	96
 12068  0033CE  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 12069  0033D0  6A0F               	clrf	MSC_BufferCopyIntConst@shift+1,c
 12070  0033D2  6A0E               	clrf	MSC_BufferCopyIntConst@shift,c
 12071  0033D4  ECC6  F006         	call	_MSC_BufferCopyIntConst	;wreg free
 12072                           
 12073                           ;FLASH.c: 233: }
 12074  0033D8  D024               	goto	i1l5227
 12075  0033DA                     i1l5217:
 12076                           
 12077                           ;FLASH.c: 234: else if(IRProgramCodeNumber == 1)
 12078  0033DA  0468               	decf	_IRProgramCodeNumber,w,c
 12079  0033DC  E122               	bnz	i1l5227
 12080                           
 12081                           ;FLASH.c: 235: {
 12082                           ;FLASH.c: 236: MSC_BufferCopyIntConst(&IR_SavedTiming0,&IR_DataHolder1, 96, 0);
 12083  0033DE  6A07               	clrf	MSC_BufferCopyIntConst@from,c
 12084  0033E0  0E24               	movlw	36
 12085  0033E2  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 12086  0033E4  6A09               	clrf	MSC_BufferCopyIntConst@from+2,c
 12087  0033E6  0E00               	movlw	low _IR_DataHolder1
 12088  0033E8  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 12089  0033EA  0E03               	movlw	high _IR_DataHolder1
 12090  0033EC  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 12091  0033EE  6A0D               	clrf	MSC_BufferCopyIntConst@count+1,c
 12092  0033F0  0E60               	movlw	96
 12093  0033F2  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 12094  0033F4  6A0F               	clrf	MSC_BufferCopyIntConst@shift+1,c
 12095  0033F6  6A0E               	clrf	MSC_BufferCopyIntConst@shift,c
 12096  0033F8  ECC6  F006         	call	_MSC_BufferCopyIntConst	;wreg free
 12097  0033FC  D012               	goto	i1l5227
 12098  0033FE                     i1l5221:
 12099                           
 12100                           ; BSR set to: 1
 12101                           ;FLASH.c: 239: else
 12102                           ;FLASH.c: 240: {
 12103                           ;FLASH.c: 242: IR_ResetData();
 12104  0033FE  ECD0  F00D         	call	_IR_ResetData	;wreg free
 12105                           
 12106                           ;FLASH.c: 243: MSC_BufferCopyIntConst(&IR_SavedTiming0,&IR_DataTiming, 96, 0);
 12107  003402  6A07               	clrf	MSC_BufferCopyIntConst@from,c
 12108  003404  0E24               	movlw	36
 12109  003406  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 12110  003408  6A09               	clrf	MSC_BufferCopyIntConst@from+2,c
 12111  00340A  0E00               	movlw	low _IR_DataTiming
 12112  00340C  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 12113  00340E  0E02               	movlw	high _IR_DataTiming
 12114  003410  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 12115  003412  6A0D               	clrf	MSC_BufferCopyIntConst@count+1,c
 12116  003414  0E60               	movlw	96
 12117  003416  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 12118  003418  6A0F               	clrf	MSC_BufferCopyIntConst@shift+1,c
 12119  00341A  6A0E               	clrf	MSC_BufferCopyIntConst@shift,c
 12120  00341C  ECC6  F006         	call	_MSC_BufferCopyIntConst	;wreg free
 12121  003420  D7CB               	goto	i1l5215
 12122  003422                     i1l5227:
 12123                           
 12124                           ;FLASH.c: 245: }
 12125                           ;FLASH.c: 247: FSH_EraseBlock(&IR_SavedTiming0[0]);
 12126  003422  6A05               	clrf	FSH_EraseBlock@Address,c
 12127  003424  0E24               	movlw	36
 12128  003426  6E06               	movwf	FSH_EraseBlock@Address+1,c
 12129  003428  6A07               	clrf	FSH_EraseBlock@Address+2,c
 12130  00342A  6A08               	clrf	FSH_EraseBlock@Address+3,c
 12131  00342C  ECA7  F008         	call	_FSH_EraseBlock	;wreg free
 12132                           
 12133                           ;FLASH.c: 252: WriteTries = 1;
 12134  003430  0E01               	movlw	1
 12135  003432  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12136  003434                     i1l979:
 12137                           
 12138                           ;FLASH.c: 256: if(IR_Saved == 90)
 12139  003434  0E5A               	movlw	90
 12140  003436  0101               	movlb	1	; () banked
 12141  003438  19AC               	xorwf	_IR_Saved& (0+255),w,b
 12142  00343A  E102               	bnz	i1l5233
 12143                           
 12144                           ; BSR set to: 1
 12145                           ;FLASH.c: 257: {
 12146                           ;FLASH.c: 258: if(IRProgramCodeNumber == 0)
 12147  00343C  5068               	movf	_IRProgramCodeNumber,w,c
 12148  00343E  E104               	bnz	i1l5235
 12149  003440                     i1l5233:
 12150                           
 12151                           ; BSR set to: 1
 12152                           ;FLASH.c: 259: {
 12153                           ;FLASH.c: 260: RAMaddress = &IR_DataTiming[0];
 12154  003440  0E00               	movlw	low _IR_DataTiming
 12155  003442  6E21               	movwf	FSH_Write_IR_RF@RAMaddress,c
 12156  003444  0E02               	movlw	high _IR_DataTiming
 12157  003446  D003               	goto	L5
 12158  003448                     i1l5235:
 12159                           
 12160                           ; BSR set to: 1
 12161                           ;FLASH.c: 262: else
 12162                           ;FLASH.c: 263: {
 12163                           ;FLASH.c: 264: RAMaddress = &IR_DataHolder1[0];
 12164  003448  0E00               	movlw	low _IR_DataHolder1
 12165  00344A  6E21               	movwf	FSH_Write_IR_RF@RAMaddress,c
 12166  00344C  0E03               	movlw	high _IR_DataHolder1
 12167  00344E                     L5:
 12168  00344E  6E22               	movwf	FSH_Write_IR_RF@RAMaddress+1,c
 12169                           
 12170                           ; BSR set to: 1
 12171                           ;FLASH.c: 270: }
 12172                           ;FLASH.c: 273: FSH_WriteIntArray(&IR_SavedTiming0[0], RAMaddress);
 12173  003450  6A05               	clrf	FSH_WriteIntArray@ConstArray,c
 12174  003452  0E24               	movlw	36
 12175  003454  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12176  003456  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12177  003458  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12178  00345C  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12179  003460  EC28  F006         	call	_FSH_WriteIntArray	;wreg free
 12180                           
 12181                           ;FLASH.c: 276: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[0],RAMaddress))
 12182  003464  6A01               	clrf	FSH_VerifyWriteIntArray@ConstArray,c
 12183  003466  0E24               	movlw	36
 12184  003468  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12185  00346A  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12186  00346C  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12187  003470  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12188  003474  ECE0  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12189  003478  0900               	iorlw	0
 12190  00347A  E106               	bnz	i1l5251
 12191                           
 12192                           ;FLASH.c: 277: {
 12193                           ;FLASH.c: 278: WriteTries++;
 12194  00347C  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12195                           
 12196                           ;FLASH.c: 279: if(WriteTries > 10)
 12197  00347E  0E0A               	movlw	10
 12198  003480  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12199  003482  D7D8               	goto	i1l979
 12200  003484                     i1l5247:
 12201                           
 12202                           ;FLASH.c: 280: {
 12203                           ;FLASH.c: 281: status = 0;
 12204  003484  6A1D               	clrf	FSH_Write_IR_RF@status,c
 12205                           
 12206                           ;FLASH.c: 282: goto END;
 12207  003486  D175               	goto	i1l971
 12208  003488                     i1l5251:
 12209                           
 12210                           ;FLASH.c: 287: }
 12211                           ;FLASH.c: 288: }
 12212                           ;FLASH.c: 291: WriteTries = 1;
 12213  003488  0E01               	movlw	1
 12214  00348A  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12215                           
 12216                           ;FLASH.c: 292: RAMaddress+=32;
 12217  00348C  0E40               	movlw	64
 12218  00348E  2621               	addwf	FSH_Write_IR_RF@RAMaddress,f,c
 12219  003490  0E00               	movlw	0
 12220  003492  2222               	addwfc	FSH_Write_IR_RF@RAMaddress+1,f,c
 12221  003494                     i1l5255:
 12222                           
 12223                           ;FLASH.c: 296: FSH_WriteIntArray(&IR_SavedTiming0[32], RAMaddress);
 12224  003494  0E40               	movlw	64
 12225  003496  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12226  003498  0E24               	movlw	36
 12227  00349A  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12228  00349C  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12229  00349E  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12230  0034A2  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12231  0034A6  EC28  F006         	call	_FSH_WriteIntArray	;wreg free
 12232                           
 12233                           ;FLASH.c: 299: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[32], RAMaddress))
 12234  0034AA  0E40               	movlw	64
 12235  0034AC  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12236  0034AE  0E24               	movlw	36
 12237  0034B0  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12238  0034B2  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12239  0034B4  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12240  0034B8  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12241  0034BC  ECE0  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12242  0034C0  0900               	iorlw	0
 12243  0034C2  E105               	bnz	i1l5267
 12244                           
 12245                           ;FLASH.c: 300: {
 12246                           ;FLASH.c: 301: WriteTries++;
 12247  0034C4  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12248                           
 12249                           ;FLASH.c: 302: if(WriteTries > 10)
 12250  0034C6  0E0A               	movlw	10
 12251  0034C8  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12252  0034CA  D7E4               	goto	i1l5255
 12253  0034CC  D7DB               	goto	i1l5247
 12254  0034CE                     i1l5267:
 12255                           
 12256                           ;FLASH.c: 310: }
 12257                           ;FLASH.c: 311: }
 12258                           ;FLASH.c: 314: WriteTries = 1;
 12259  0034CE  0E01               	movlw	1
 12260  0034D0  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12261                           
 12262                           ;FLASH.c: 315: RAMaddress+=32;
 12263  0034D2  0E40               	movlw	64
 12264  0034D4  2621               	addwf	FSH_Write_IR_RF@RAMaddress,f,c
 12265  0034D6  0E00               	movlw	0
 12266  0034D8  2222               	addwfc	FSH_Write_IR_RF@RAMaddress+1,f,c
 12267  0034DA                     i1l5271:
 12268                           
 12269                           ;FLASH.c: 320: FSH_WriteIntArray(&IR_SavedTiming0[64], RAMaddress);
 12270  0034DA  0E80               	movlw	128
 12271  0034DC  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12272  0034DE  0E24               	movlw	36
 12273  0034E0  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12274  0034E2  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12275  0034E4  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12276  0034E8  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12277  0034EC  EC28  F006         	call	_FSH_WriteIntArray	;wreg free
 12278                           
 12279                           ;FLASH.c: 323: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[64],RAMaddress))
 12280  0034F0  0E80               	movlw	128
 12281  0034F2  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12282  0034F4  0E24               	movlw	36
 12283  0034F6  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12284  0034F8  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12285  0034FA  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12286  0034FE  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12287  003502  ECE0  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12288  003506  0900               	iorlw	0
 12289  003508  E105               	bnz	i1l5283
 12290                           
 12291                           ;FLASH.c: 324: {
 12292                           ;FLASH.c: 325: WriteTries++;
 12293  00350A  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12294                           
 12295                           ;FLASH.c: 326: if(WriteTries > 10)
 12296  00350C  0E0A               	movlw	10
 12297  00350E  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12298  003510  D7E4               	goto	i1l5271
 12299  003512  D7B8               	goto	i1l5247
 12300  003514                     i1l5283:
 12301                           
 12302                           ;FLASH.c: 334: }
 12303                           ;FLASH.c: 335: }
 12304                           ;FLASH.c: 338: WriteTries = 1;
 12305  003514  0E01               	movlw	1
 12306  003516  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12307  003518                     i1l5285:
 12308                           
 12309                           ;FLASH.c: 342: if(IR_Saved == 90)
 12310  003518  0E5A               	movlw	90
 12311  00351A  0101               	movlb	1	; () banked
 12312  00351C  19AC               	xorwf	_IR_Saved& (0+255),w,b
 12313  00351E  E106               	bnz	i1l5291
 12314                           
 12315                           ; BSR set to: 1
 12316                           ;FLASH.c: 343: {
 12317                           ;FLASH.c: 344: if(IRProgramCodeNumber == 1)
 12318  003520  0468               	decf	_IRProgramCodeNumber,w,c
 12319  003522  E104               	bnz	i1l5291
 12320                           
 12321                           ; BSR set to: 1
 12322                           ;FLASH.c: 345: {
 12323                           ;FLASH.c: 346: RAMaddress = &IR_DataTiming[0];
 12324  003524  0E00               	movlw	low _IR_DataTiming
 12325  003526  6E21               	movwf	FSH_Write_IR_RF@RAMaddress,c
 12326  003528  0E02               	movlw	high _IR_DataTiming
 12327  00352A  D003               	goto	L6
 12328  00352C                     i1l5291:
 12329                           
 12330                           ; BSR set to: 1
 12331                           ;FLASH.c: 348: else
 12332                           ;FLASH.c: 349: {
 12333                           ;FLASH.c: 350: RAMaddress = &IR_DataHolder1[0];
 12334  00352C  0E00               	movlw	low _IR_DataHolder1
 12335  00352E  6E21               	movwf	FSH_Write_IR_RF@RAMaddress,c
 12336  003530  0E03               	movlw	high _IR_DataHolder1
 12337  003532                     L6:
 12338  003532  6E22               	movwf	FSH_Write_IR_RF@RAMaddress+1,c
 12339                           
 12340                           ; BSR set to: 1
 12341                           ;FLASH.c: 356: }
 12342                           ;FLASH.c: 359: FSH_WriteIntArray(&IR_SavedTiming1[0], RAMaddress);
 12343  003534  0EC0               	movlw	192
 12344  003536  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12345  003538  0E24               	movlw	36
 12346  00353A  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12347  00353C  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12348  00353E  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12349  003542  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12350  003546  EC28  F006         	call	_FSH_WriteIntArray	;wreg free
 12351                           
 12352                           ;FLASH.c: 362: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[0], RAMaddress))
 12353  00354A  0EC0               	movlw	192
 12354  00354C  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12355  00354E  0E24               	movlw	36
 12356  003550  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12357  003552  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12358  003554  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12359  003558  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12360  00355C  ECE0  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12361  003560  0900               	iorlw	0
 12362  003562  E105               	bnz	i1l5307
 12363                           
 12364                           ;FLASH.c: 363: {
 12365                           ;FLASH.c: 364: WriteTries++;
 12366  003564  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12367                           
 12368                           ;FLASH.c: 365: if(WriteTries > 10)
 12369  003566  0E0A               	movlw	10
 12370  003568  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12371  00356A  D7D6               	goto	i1l5285
 12372  00356C  D78B               	goto	i1l5247
 12373  00356E                     i1l5307:
 12374                           
 12375                           ;FLASH.c: 373: }
 12376                           ;FLASH.c: 374: }
 12377                           ;FLASH.c: 377: WriteTries = 1;
 12378  00356E  0E01               	movlw	1
 12379  003570  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12380                           
 12381                           ;FLASH.c: 378: RAMaddress+=32;
 12382  003572  0E40               	movlw	64
 12383  003574  2621               	addwf	FSH_Write_IR_RF@RAMaddress,f,c
 12384  003576  0E00               	movlw	0
 12385  003578  2222               	addwfc	FSH_Write_IR_RF@RAMaddress+1,f,c
 12386  00357A                     i1l5311:
 12387                           
 12388                           ;FLASH.c: 383: FSH_WriteIntArray(&IR_SavedTiming1[32], RAMaddress);
 12389  00357A  6A05               	clrf	FSH_WriteIntArray@ConstArray,c
 12390  00357C  0E25               	movlw	37
 12391  00357E  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12392  003580  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12393  003582  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12394  003586  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12395  00358A  EC28  F006         	call	_FSH_WriteIntArray	;wreg free
 12396                           
 12397                           ;FLASH.c: 386: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[32], RAMaddress))
 12398  00358E  6A01               	clrf	FSH_VerifyWriteIntArray@ConstArray,c
 12399  003590  0E25               	movlw	37
 12400  003592  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12401  003594  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12402  003596  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12403  00359A  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12404  00359E  ECE0  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12405  0035A2  0900               	iorlw	0
 12406  0035A4  E105               	bnz	i1l5323
 12407                           
 12408                           ;FLASH.c: 387: {
 12409                           ;FLASH.c: 388: WriteTries++;
 12410  0035A6  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12411                           
 12412                           ;FLASH.c: 389: if(WriteTries > 10)
 12413  0035A8  0E0A               	movlw	10
 12414  0035AA  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12415  0035AC  D7E6               	goto	i1l5311
 12416  0035AE  D76A               	goto	i1l5247
 12417  0035B0                     i1l5323:
 12418                           
 12419                           ;FLASH.c: 397: }
 12420                           ;FLASH.c: 398: }
 12421                           ;FLASH.c: 401: WriteTries = 1;
 12422  0035B0  0E01               	movlw	1
 12423  0035B2  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12424                           
 12425                           ;FLASH.c: 402: RAMaddress+=32;
 12426  0035B4  0E40               	movlw	64
 12427  0035B6  2621               	addwf	FSH_Write_IR_RF@RAMaddress,f,c
 12428  0035B8  0E00               	movlw	0
 12429  0035BA  2222               	addwfc	FSH_Write_IR_RF@RAMaddress+1,f,c
 12430  0035BC                     i1l5327:
 12431                           
 12432                           ;FLASH.c: 407: FSH_WriteIntArray(&IR_SavedTiming1[64], RAMaddress);
 12433  0035BC  0E40               	movlw	64
 12434  0035BE  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12435  0035C0  0E25               	movlw	37
 12436  0035C2  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12437  0035C4  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12438  0035C6  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12439  0035CA  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12440  0035CE  EC28  F006         	call	_FSH_WriteIntArray	;wreg free
 12441                           
 12442                           ;FLASH.c: 410: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[64], RAMaddress))
 12443  0035D2  0E40               	movlw	64
 12444  0035D4  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12445  0035D6  0E25               	movlw	37
 12446  0035D8  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12447  0035DA  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12448  0035DC  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12449  0035E0  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12450  0035E4  ECE0  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12451  0035E8  0900               	iorlw	0
 12452  0035EA  E105               	bnz	i1l5339
 12453                           
 12454                           ;FLASH.c: 411: {
 12455                           ;FLASH.c: 412: WriteTries++;
 12456  0035EC  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12457                           
 12458                           ;FLASH.c: 413: if(WriteTries > 10)
 12459  0035EE  0E0A               	movlw	10
 12460  0035F0  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12461  0035F2  D7E4               	goto	i1l5327
 12462  0035F4  D747               	goto	i1l5247
 12463  0035F6                     i1l5339:
 12464                           
 12465                           ;FLASH.c: 421: }
 12466                           ;FLASH.c: 422: }
 12467                           ;FLASH.c: 425: WriteTries = 1;
 12468  0035F6  0E01               	movlw	1
 12469  0035F8  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12470  0035FA                     i1l5341:
 12471                           
 12472                           ;FLASH.c: 430: FSH_WriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]);
 12473  0035FA  0E80               	movlw	128
 12474  0035FC  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12475  0035FE  0E25               	movlw	37
 12476  003600  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12477  003602  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12478  003604  0E07               	movlw	low _RF_DataTiming
 12479  003606  6E08               	movwf	FSH_WriteIntArray@Array,c
 12480  003608  0E01               	movlw	high _RF_DataTiming
 12481  00360A  6E09               	movwf	FSH_WriteIntArray@Array+1,c
 12482  00360C  EC28  F006         	call	_FSH_WriteIntArray	;wreg free
 12483                           
 12484                           ;FLASH.c: 433: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]))
 12485  003610  0E80               	movlw	128
 12486  003612  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12487  003614  0E25               	movlw	37
 12488  003616  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12489  003618  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12490  00361A  0E07               	movlw	low _RF_DataTiming
 12491  00361C  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 12492  00361E  0E01               	movlw	high _RF_DataTiming
 12493  003620  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 12494  003622  ECE0  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12495  003626  0900               	iorlw	0
 12496  003628  E105               	bnz	i1l5353
 12497                           
 12498                           ;FLASH.c: 434: {
 12499                           ;FLASH.c: 435: WriteTries++;
 12500  00362A  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12501                           
 12502                           ;FLASH.c: 436: if(WriteTries > 10)
 12503  00362C  0E0A               	movlw	10
 12504  00362E  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12505  003630  D7E4               	goto	i1l5341
 12506  003632  D728               	goto	i1l5247
 12507  003634                     i1l5353:
 12508                           
 12509                           ;FLASH.c: 444: }
 12510                           ;FLASH.c: 445: }
 12511                           ;FLASH.c: 448: WriteTries = 1;
 12512  003634  0E01               	movlw	1
 12513  003636  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12514  003638                     i1l5355:
 12515                           
 12516                           ;FLASH.c: 453: FSH_WriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]);
 12517  003638  0EC0               	movlw	192
 12518  00363A  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12519  00363C  0E25               	movlw	37
 12520  00363E  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12521  003640  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12522  003642  0E47               	movlw	low (_RF_DataTiming+64)
 12523  003644  6E08               	movwf	FSH_WriteIntArray@Array,c
 12524  003646  0E01               	movlw	high (_RF_DataTiming+64)
 12525  003648  6E09               	movwf	FSH_WriteIntArray@Array+1,c
 12526  00364A  EC28  F006         	call	_FSH_WriteIntArray	;wreg free
 12527                           
 12528                           ;FLASH.c: 456: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]))
 12529  00364E  0EC0               	movlw	192
 12530  003650  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12531  003652  0E25               	movlw	37
 12532  003654  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12533  003656  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12534  003658  0E47               	movlw	low (_RF_DataTiming+64)
 12535  00365A  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 12536  00365C  0E01               	movlw	high (_RF_DataTiming+64)
 12537  00365E  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 12538  003660  ECE0  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12539  003664  0900               	iorlw	0
 12540  003666  E105               	bnz	i1l5367
 12541                           
 12542                           ;FLASH.c: 457: {
 12543                           ;FLASH.c: 458: WriteTries++;
 12544  003668  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12545                           
 12546                           ;FLASH.c: 459: if(WriteTries > 10)
 12547  00366A  0E0A               	movlw	10
 12548  00366C  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12549  00366E  D7E4               	goto	i1l5355
 12550  003670  D709               	goto	i1l5247
 12551  003672                     i1l5367:
 12552                           
 12553                           ;FLASH.c: 467: }
 12554                           ;FLASH.c: 468: }
 12555                           ;FLASH.c: 471: for(j=8;j<16;j++)
 12556  003672  0E08               	movlw	8
 12557  003674  6E1C               	movwf	FSH_Write_IR_RF@j,c
 12558  003676                     i1l5369:
 12559  003676  0E0F               	movlw	15
 12560  003678  641C               	cpfsgt	FSH_Write_IR_RF@j,c
 12561  00367A  D001               	goto	i1l5373
 12562  00367C  D078               	goto	i1l5421
 12563  00367E                     i1l5373:
 12564                           
 12565                           ;FLASH.c: 472: {
 12566                           ;FLASH.c: 473: WriteTries = 1;
 12567  00367E  0E01               	movlw	1
 12568  003680  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12569  003682                     i1l5375:
 12570                           
 12571                           ;FLASH.c: 476: i=0;
 12572  003682  6A1E               	clrf	FSH_Write_IR_RF@i,c
 12573  003684  6A1F               	clrf	FSH_Write_IR_RF@i+1,c
 12574                           
 12575                           ;FLASH.c: 477: FlashWasteindex = i + 64*(j-8);
 12576  003686  501C               	movf	FSH_Write_IR_RF@j,w,c
 12577  003688  6E12               	movwf	??_FSH_Write_IR_RF& (0+255),c
 12578  00368A  6A13               	clrf	(??_FSH_Write_IR_RF+1)& (0+255),c
 12579  00368C  0E06               	movlw	6
 12580  00368E                     i1u517_25:
 12581  00368E  90D8               	bcf	status,0,c
 12582  003690  3612               	rlcf	??_FSH_Write_IR_RF,f,c
 12583  003692  3613               	rlcf	??_FSH_Write_IR_RF+1,f,c
 12584  003694  2EE8               	decfsz	wreg,f,c
 12585  003696  D7FB               	goto	i1u517_25
 12586  003698  501E               	movf	FSH_Write_IR_RF@i,w,c
 12587  00369A  2612               	addwf	??_FSH_Write_IR_RF,f,c
 12588  00369C  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 12589  00369E  2213               	addwfc	??_FSH_Write_IR_RF+1,f,c
 12590  0036A0  0E00               	movlw	0
 12591  0036A2  2412               	addwf	??_FSH_Write_IR_RF,w,c
 12592  0036A4  6E1A               	movwf	FSH_Write_IR_RF@FlashWasteindex,c
 12593  0036A6  0EFE               	movlw	254
 12594  0036A8  2013               	addwfc	??_FSH_Write_IR_RF+1,w,c
 12595  0036AA  6E1B               	movwf	FSH_Write_IR_RF@FlashWasteindex+1,c
 12596                           
 12597                           ;FLASH.c: 478: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 12598  0036AC  6A12               	clrf	??_FSH_Write_IR_RF& (0+255),c
 12599  0036AE  0E26               	movlw	38
 12600  0036B0  6E13               	movwf	(??_FSH_Write_IR_RF+1)& (0+255),c
 12601  0036B2  6A14               	clrf	(??_FSH_Write_IR_RF+2)& (0+255),c
 12602  0036B4  501A               	movf	FSH_Write_IR_RF@FlashWasteindex,w,c
 12603  0036B6  2412               	addwf	??_FSH_Write_IR_RF,w,c
 12604  0036B8  6E15               	movwf	(??_FSH_Write_IR_RF+3)& (0+255),c
 12605  0036BA  501B               	movf	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 12606  0036BC  2013               	addwfc	??_FSH_Write_IR_RF+1,w,c
 12607  0036BE  6E16               	movwf	(??_FSH_Write_IR_RF+4)& (0+255),c
 12608  0036C0  0E00               	movlw	0
 12609  0036C2  2014               	addwfc	??_FSH_Write_IR_RF+2,w,c
 12610  0036C4  6E17               	movwf	(??_FSH_Write_IR_RF+5)& (0+255),c
 12611  0036C6  5015               	movf	??_FSH_Write_IR_RF+3,w,c
 12612  0036C8  6E01               	movwf	FSH_AddressToBlock@Address,c
 12613  0036CA  5016               	movf	??_FSH_Write_IR_RF+4,w,c
 12614  0036CC  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 12615  0036CE  5017               	movf	??_FSH_Write_IR_RF+5,w,c
 12616  0036D0  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 12617  0036D2  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 12618  0036D4  EC6D  F00B         	call	_FSH_AddressToBlock	;wreg free
 12619                           
 12620                           ;FLASH.c: 479: for(i = 0; i<64; i++)
 12621  0036D8  6A1E               	clrf	FSH_Write_IR_RF@i,c
 12622  0036DA  6A1F               	clrf	FSH_Write_IR_RF@i+1,c
 12623  0036DC                     i1l5383:
 12624  0036DC  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 12625  0036DE  E109               	bnz	i1l5393
 12626  0036E0  0E40               	movlw	64
 12627  0036E2  5C1E               	subwf	FSH_Write_IR_RF@i,w,c
 12628  0036E4  E206               	bc	i1l5393
 12629                           
 12630                           ;FLASH.c: 480: {
 12631                           ;FLASH.c: 482: TABLAT = 0xDA;
 12632  0036E6  0EDA               	movlw	218
 12633  0036E8  6EF5               	movwf	tablat,c	;volatile
 12634  0036EA  000D               	tblwt		*+	;# 
 12635  0036EC  4A1E               	infsnz	FSH_Write_IR_RF@i,f,c
 12636  0036EE  2A1F               	incf	FSH_Write_IR_RF@i+1,f,c
 12637  0036F0  D7F5               	goto	i1l5383
 12638  0036F2                     i1l5393:
 12639                           
 12640                           ;FLASH.c: 484: }
 12641                           ;FLASH.c: 485: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 12642  0036F2  6A12               	clrf	??_FSH_Write_IR_RF& (0+255),c
 12643  0036F4  0E26               	movlw	38
 12644  0036F6  6E13               	movwf	(??_FSH_Write_IR_RF+1)& (0+255),c
 12645  0036F8  6A14               	clrf	(??_FSH_Write_IR_RF+2)& (0+255),c
 12646  0036FA  501A               	movf	FSH_Write_IR_RF@FlashWasteindex,w,c
 12647  0036FC  2412               	addwf	??_FSH_Write_IR_RF,w,c
 12648  0036FE  6E15               	movwf	(??_FSH_Write_IR_RF+3)& (0+255),c
 12649  003700  501B               	movf	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 12650  003702  2013               	addwfc	??_FSH_Write_IR_RF+1,w,c
 12651  003704  6E16               	movwf	(??_FSH_Write_IR_RF+4)& (0+255),c
 12652  003706  0E00               	movlw	0
 12653  003708  2014               	addwfc	??_FSH_Write_IR_RF+2,w,c
 12654  00370A  6E17               	movwf	(??_FSH_Write_IR_RF+5)& (0+255),c
 12655  00370C  5015               	movf	??_FSH_Write_IR_RF+3,w,c
 12656  00370E  6E01               	movwf	FSH_AddressToBlock@Address,c
 12657  003710  5016               	movf	??_FSH_Write_IR_RF+4,w,c
 12658  003712  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 12659  003714  5017               	movf	??_FSH_Write_IR_RF+5,w,c
 12660  003716  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 12661  003718  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 12662  00371A  EC6D  F00B         	call	_FSH_AddressToBlock	;wreg free
 12663                           
 12664                           ;FLASH.c: 487: EECON1bits.FREE = 0;
 12665  00371E  98A6               	bcf	4006,4,c	;volatile
 12666  003720  84A6               	bsf	4006,2,c	;# 
 12667  003722  9EF2               	bcf	intcon,7,c	;# 
 12668  003724  0E55               	movlw	85	;# 
 12669  003726  6EA7               	movwf	4007,c	;# 
 12670  003728  0EAA               	movlw	170	;# 
 12671  00372A  6EA7               	movwf	4007,c	;# 
 12672  00372C  82A6               	bsf	4006,1,c	;# 
 12673                           
 12674                           ;FLASH.c: 498: for(i=0; i<64;i++)
 12675  00372E  6A1E               	clrf	FSH_Write_IR_RF@i,c
 12676  003730  6A1F               	clrf	FSH_Write_IR_RF@i+1,c
 12677  003732                     i1l5399:
 12678  003732  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 12679  003734  E11A               	bnz	i1l5417
 12680  003736  0E40               	movlw	64
 12681  003738  5C1E               	subwf	FSH_Write_IR_RF@i,w,c
 12682  00373A  E217               	bc	i1l5417
 12683                           
 12684                           ;FLASH.c: 499: {
 12685                           ;FLASH.c: 500: if(FlashWaste[FlashWasteindex] != 0xDA)
 12686  00373C  0E00               	movlw	0
 12687  00373E  241A               	addwf	FSH_Write_IR_RF@FlashWasteindex,w,c
 12688  003740  6EF6               	movwf	tblptrl,c
 12689  003742  0E26               	movlw	38
 12690  003744  201B               	addwfc	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 12691  003746  6EF7               	movwf	tblptrh,c
 12692  003748  6AF8               	clrf	tblptru,c
 12693  00374A  0E00               	movlw	0
 12694  00374C  22F8               	addwfc	tblptru,f,c
 12695  00374E  0008               	tblrd		*
 12696  003750  50F5               	movf	tablat,w,c
 12697  003752  0ADA               	xorlw	218
 12698  003754  E005               	bz	i1l5413
 12699                           
 12700                           ;FLASH.c: 501: {
 12701                           ;FLASH.c: 502: WriteTries++;
 12702  003756  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12703                           
 12704                           ;FLASH.c: 503: if(WriteTries > 10)
 12705  003758  0E0A               	movlw	10
 12706  00375A  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12707  00375C  D792               	goto	i1l5375
 12708  00375E  D692               	goto	i1l5247
 12709  003760                     i1l5413:
 12710                           
 12711                           ;FLASH.c: 511: }
 12712                           ;FLASH.c: 512: }
 12713                           ;FLASH.c: 513: FlashWasteindex++;
 12714  003760  4A1A               	infsnz	FSH_Write_IR_RF@FlashWasteindex,f,c
 12715  003762  2A1B               	incf	FSH_Write_IR_RF@FlashWasteindex+1,f,c
 12716  003764  4A1E               	infsnz	FSH_Write_IR_RF@i,f,c
 12717  003766  2A1F               	incf	FSH_Write_IR_RF@i+1,f,c
 12718  003768  D7E4               	goto	i1l5399
 12719  00376A                     i1l5417:
 12720  00376A  2A1C               	incf	FSH_Write_IR_RF@j,f,c
 12721  00376C  D784               	goto	i1l5369
 12722  00376E                     i1l5421:
 12723                           
 12724                           ;FLASH.c: 514: }
 12725                           ;FLASH.c: 515: }
 12726                           ;FLASH.c: 516: status = 1;
 12727  00376E  0E01               	movlw	1
 12728  003770  6E1D               	movwf	FSH_Write_IR_RF@status,c
 12729  003772                     i1l971:
 12730                           
 12731                           ;FLASH.c: 519: if(highint)
 12732  003772  5018               	movf	FSH_Write_IR_RF@highint,w,c
 12733  003774  E001               	bz	i1l5425
 12734                           
 12735                           ;FLASH.c: 520: {
 12736                           ;FLASH.c: 521: INTCONbits.GIE = 1;
 12737  003776  8EF2               	bsf	intcon,7,c	;volatile
 12738  003778                     i1l5425:
 12739                           
 12740                           ;FLASH.c: 522: }
 12741                           ;FLASH.c: 523: if(lowint)
 12742  003778  5019               	movf	FSH_Write_IR_RF@lowint,w,c
 12743  00377A  E001               	bz	i1l5429
 12744                           
 12745                           ;FLASH.c: 524: {
 12746                           ;FLASH.c: 525: INTCONbits.PEIE = 1;
 12747  00377C  8CF2               	bsf	intcon,6,c	;volatile
 12748  00377E                     i1l5429:
 12749                           
 12750                           ;FLASH.c: 526: }
 12751                           ;FLASH.c: 527: return status;
 12752  00377E  501D               	movf	FSH_Write_IR_RF@status,w,c
 12753  003780  0012               	return		;funcret
 12754  003782                     __end_of_FSH_Write_IR_RF:
 12755                           	opt stack 0
 12756                           tblptru	equ	0xFF8
 12757                           tblptrh	equ	0xFF7
 12758                           tblptrl	equ	0xFF6
 12759                           tablat	equ	0xFF5
 12760                           prodh	equ	0xFF4
 12761                           prodl	equ	0xFF3
 12762                           intcon	equ	0xFF2
 12763                           intcon2	equ	0xFF1
 12764                           intcon3	equ	0xFF0
 12765                           postinc0	equ	0xFEE
 12766                           wreg	equ	0xFE8
 12767                           postdec1	equ	0xFE5
 12768                           fsr1l	equ	0xFE1
 12769                           bsr	equ	0xFE0
 12770                           postinc2	equ	0xFDE
 12771                           postdec2	equ	0xFDD
 12772                           plusw2	equ	0xFDB
 12773                           fsr2h	equ	0xFDA
 12774                           fsr2l	equ	0xFD9
 12775                           status	equ	0xFD8
 12776                           
 12777 ;; *************** function _RF_ResetData *****************
 12778 ;; Defined at:
 12779 ;;		line 116 in file "RF.c"
 12780 ;; Parameters:    Size  Location     Type
 12781 ;;		None
 12782 ;; Auto vars:     Size  Location     Type
 12783 ;;		None
 12784 ;; Return value:  Size  Location     Type
 12785 ;;		None               void
 12786 ;; Registers used:
 12787 ;;		None
 12788 ;; Tracked objects:
 12789 ;;		On entry : F/1
 12790 ;;		On exit  : F/0
 12791 ;;		Unchanged: 0/0
 12792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12793 ;;      Params:         0       0       0       0       0
 12794 ;;      Locals:         0       0       0       0       0
 12795 ;;      Temps:          0       0       0       0       0
 12796 ;;      Totals:         0       0       0       0       0
 12797 ;;Total ram usage:        0 bytes
 12798 ;; Hardware stack levels used:    1
 12799 ;; Hardware stack levels required when called:    6
 12800 ;; This function calls:
 12801 ;;		Nothing
 12802 ;; This function is called by:
 12803 ;;		_FSH_Write_IR_RF
 12804 ;; This function uses a non-reentrant model
 12805 ;;
 12806                           
 12807                           	psect	text79
 12808  001B98                     __ptext79:
 12809                           	opt stack 0
 12810  001B98                     _RF_ResetData:
 12811                           	opt stack 15
 12812                           
 12813                           ; BSR set to: 1
 12814                           ;RF.c: 118: RF_DataPlace = 0;
 12815                           
 12816                           ;incstack = 0
 12817  001B98  0100               	movlb	0	; () banked
 12818  001B9A  6BC9               	clrf	_RF_DataPlace& (0+255),b
 12819                           
 12820                           ;RF.c: 119: RFStarted = 0;
 12821  001B9C  6BC7               	clrf	_RFStarted& (0+255),b
 12822                           
 12823                           ; BSR set to: 0
 12824  001B9E  0012               	return		;funcret
 12825  001BA0                     __end_of_RF_ResetData:
 12826                           	opt stack 0
 12827                           tblptru	equ	0xFF8
 12828                           tblptrh	equ	0xFF7
 12829                           tblptrl	equ	0xFF6
 12830                           tablat	equ	0xFF5
 12831                           prodh	equ	0xFF4
 12832                           prodl	equ	0xFF3
 12833                           intcon	equ	0xFF2
 12834                           intcon2	equ	0xFF1
 12835                           intcon3	equ	0xFF0
 12836                           postinc0	equ	0xFEE
 12837                           wreg	equ	0xFE8
 12838                           postdec1	equ	0xFE5
 12839                           fsr1l	equ	0xFE1
 12840                           bsr	equ	0xFE0
 12841                           postinc2	equ	0xFDE
 12842                           postdec2	equ	0xFDD
 12843                           plusw2	equ	0xFDB
 12844                           fsr2h	equ	0xFDA
 12845                           fsr2l	equ	0xFD9
 12846                           status	equ	0xFD8
 12847                           
 12848 ;; *************** function _MSC_BufferCopyIntConst *****************
 12849 ;; Defined at:
 12850 ;;		line 150 in file "MISC.c"
 12851 ;; Parameters:    Size  Location     Type
 12852 ;;  from            3    6[COMRAM] PTR const unsigned int 
 12853 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 12854 ;;  to              2    9[COMRAM] PTR unsigned int 
 12855 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 12856 ;;  count           2   11[COMRAM] unsigned int 
 12857 ;;  shift           2   13[COMRAM] unsigned int 
 12858 ;; Auto vars:     Size  Location     Type
 12859 ;;  i               2   15[COMRAM] unsigned int 
 12860 ;; Return value:  Size  Location     Type
 12861 ;;		None               void
 12862 ;; Registers used:
 12863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12864 ;; Tracked objects:
 12865 ;;		On entry : 0/0
 12866 ;;		On exit  : 0/0
 12867 ;;		Unchanged: 0/0
 12868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12869 ;;      Params:         9       0       0       0       0
 12870 ;;      Locals:         2       0       0       0       0
 12871 ;;      Temps:          0       0       0       0       0
 12872 ;;      Totals:        11       0       0       0       0
 12873 ;;Total ram usage:       11 bytes
 12874 ;; Hardware stack levels used:    1
 12875 ;; Hardware stack levels required when called:    7
 12876 ;; This function calls:
 12877 ;;		i1_MSC_CleanBufferInt
 12878 ;; This function is called by:
 12879 ;;		_FSH_Write_IR_RF
 12880 ;; This function uses a non-reentrant model
 12881 ;;
 12882                           
 12883                           	psect	text80
 12884  000D8C                     __ptext80:
 12885                           	opt stack 0
 12886  000D8C                     _MSC_BufferCopyIntConst:
 12887                           	opt stack 14
 12888                           
 12889                           ;MISC.c: 153: MSC_CleanBufferInt(to,count);
 12890                           
 12891                           ; BSR set to: 0
 12892                           ;incstack = 0
 12893  000D8C  C00A  F001         	movff	MSC_BufferCopyIntConst@to,i1MSC_CleanBufferInt@data
 12894  000D90  C00B  F002         	movff	MSC_BufferCopyIntConst@to+1,i1MSC_CleanBufferInt@data+1
 12895  000D94  C00C  F003         	movff	MSC_BufferCopyIntConst@count,i1MSC_CleanBufferInt@count
 12896  000D98  C00D  F004         	movff	MSC_BufferCopyIntConst@count+1,i1MSC_CleanBufferInt@count+1
 12897  000D9C  ECE6  F00A         	call	i1_MSC_CleanBufferInt	;wreg free
 12898                           
 12899                           ;MISC.c: 154: for(i = shift; i>0; i--)
 12900  000DA0  C00E  F010         	movff	MSC_BufferCopyIntConst@shift,MSC_BufferCopyIntConst@i
 12901  000DA4  C00F  F011         	movff	MSC_BufferCopyIntConst@shift+1,MSC_BufferCopyIntConst@i+1
 12902  000DA8                     i1l4533:
 12903  000DA8  5010               	movf	MSC_BufferCopyIntConst@i,w,c
 12904  000DAA  1011               	iorwf	MSC_BufferCopyIntConst@i+1,w,c
 12905  000DAC  E02B               	bz	i1l4553
 12906                           
 12907                           ;MISC.c: 155: {
 12908                           ;MISC.c: 156: *to = ' ';
 12909  000DAE  C00A  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
 12910  000DB2  C00B  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
 12911  000DB6  0E20               	movlw	32
 12912  000DB8  6EDE               	movwf	postinc2,c
 12913  000DBA  6ADD               	clrf	postdec2,c
 12914                           
 12915                           ;MISC.c: 157: to++;
 12916  000DBC  0E02               	movlw	2
 12917  000DBE  260A               	addwf	MSC_BufferCopyIntConst@to,f,c
 12918  000DC0  0E00               	movlw	0
 12919  000DC2  220B               	addwfc	MSC_BufferCopyIntConst@to+1,f,c
 12920  000DC4  0610               	decf	MSC_BufferCopyIntConst@i,f,c
 12921  000DC6  A0D8               	btfss	status,0,c
 12922  000DC8  0611               	decf	MSC_BufferCopyIntConst@i+1,f,c
 12923  000DCA  D7EE               	goto	i1l4533
 12924  000DCC                     i1l4545:
 12925                           
 12926                           ;MISC.c: 160: {
 12927                           ;MISC.c: 161: *to = *from;
 12928  000DCC  C007  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
 12929  000DD0  C008  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
 12930  000DD4  C009  FFF8         	movff	MSC_BufferCopyIntConst@from+2,tblptru
 12931  000DD8  C00A  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
 12932  000DDC  C00B  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
 12933  000DE0  0009               	tblrd		*+
 12934  000DE2  CFF5 FFDE          	movff	tablat,postinc2
 12935  000DE6  0008               	tblrd		*
 12936  000DE8  CFF5 FFDD          	movff	tablat,postdec2
 12937                           
 12938                           ;MISC.c: 162: from++;
 12939  000DEC  0E02               	movlw	2
 12940  000DEE  2607               	addwf	MSC_BufferCopyIntConst@from,f,c
 12941  000DF0  0E00               	movlw	0
 12942  000DF2  2208               	addwfc	MSC_BufferCopyIntConst@from+1,f,c
 12943  000DF4  2209               	addwfc	MSC_BufferCopyIntConst@from+2,f,c
 12944                           
 12945                           ;MISC.c: 163: to++;
 12946  000DF6  0E02               	movlw	2
 12947  000DF8  260A               	addwf	MSC_BufferCopyIntConst@to,f,c
 12948  000DFA  0E00               	movlw	0
 12949  000DFC  220B               	addwfc	MSC_BufferCopyIntConst@to+1,f,c
 12950                           
 12951                           ;MISC.c: 164: count--;
 12952  000DFE  060C               	decf	MSC_BufferCopyIntConst@count,f,c
 12953  000E00  A0D8               	btfss	status,0,c
 12954  000E02  060D               	decf	MSC_BufferCopyIntConst@count+1,f,c
 12955  000E04                     i1l4553:
 12956  000E04  C007  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
 12957  000E08  C008  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
 12958  000E0C  C009  FFF8         	movff	MSC_BufferCopyIntConst@from+2,tblptru
 12959  000E10  0009               	tblrd		*+
 12960  000E12  50F5               	movf	tablat,w,c
 12961  000E14  0009               	tblrd		*+
 12962  000E16  10F5               	iorwf	tablat,w,c
 12963  000E18  B4D8               	btfsc	status,2,c
 12964  000E1A  0012               	return	
 12965  000E1C  500C               	movf	MSC_BufferCopyIntConst@count,w,c
 12966  000E1E  100D               	iorwf	MSC_BufferCopyIntConst@count+1,w,c
 12967  000E20  E1D5               	bnz	i1l4545
 12968  000E22  0012               	return		;funcret
 12969  000E24                     __end_of_MSC_BufferCopyIntConst:
 12970                           	opt stack 0
 12971                           tblptru	equ	0xFF8
 12972                           tblptrh	equ	0xFF7
 12973                           tblptrl	equ	0xFF6
 12974                           tablat	equ	0xFF5
 12975                           prodh	equ	0xFF4
 12976                           prodl	equ	0xFF3
 12977                           intcon	equ	0xFF2
 12978                           intcon2	equ	0xFF1
 12979                           intcon3	equ	0xFF0
 12980                           postinc0	equ	0xFEE
 12981                           wreg	equ	0xFE8
 12982                           postdec1	equ	0xFE5
 12983                           fsr1l	equ	0xFE1
 12984                           bsr	equ	0xFE0
 12985                           postinc2	equ	0xFDE
 12986                           postdec2	equ	0xFDD
 12987                           plusw2	equ	0xFDB
 12988                           fsr2h	equ	0xFDA
 12989                           fsr2l	equ	0xFD9
 12990                           status	equ	0xFD8
 12991                           
 12992 ;; *************** function i1_MSC_CleanBufferInt *****************
 12993 ;; Defined at:
 12994 ;;		line 90 in file "MISC.c"
 12995 ;; Parameters:    Size  Location     Type
 12996 ;;  data            2    0[COMRAM] PTR unsigned int 
 12997 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 12998 ;;  count           2    2[COMRAM] unsigned int 
 12999 ;; Auto vars:     Size  Location     Type
 13000 ;;  MSC_CleanBuf    2    4[COMRAM] unsigned int 
 13001 ;; Return value:  Size  Location     Type
 13002 ;;		None               void
 13003 ;; Registers used:
 13004 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13005 ;; Tracked objects:
 13006 ;;		On entry : 0/0
 13007 ;;		On exit  : 0/0
 13008 ;;		Unchanged: 0/0
 13009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13010 ;;      Params:         4       0       0       0       0
 13011 ;;      Locals:         2       0       0       0       0
 13012 ;;      Temps:          0       0       0       0       0
 13013 ;;      Totals:         6       0       0       0       0
 13014 ;;Total ram usage:        6 bytes
 13015 ;; Hardware stack levels used:    1
 13016 ;; Hardware stack levels required when called:    6
 13017 ;; This function calls:
 13018 ;;		Nothing
 13019 ;; This function is called by:
 13020 ;;		_MSC_BufferCopyIntConst
 13021 ;; This function uses a non-reentrant model
 13022 ;;
 13023                           
 13024                           	psect	text81
 13025  0015CC                     __ptext81:
 13026                           	opt stack 0
 13027  0015CC                     i1_MSC_CleanBufferInt:
 13028                           	opt stack 14
 13029                           
 13030                           ;MISC.c: 92: unsigned int i=0;
 13031                           
 13032                           ;incstack = 0
 13033  0015CC  6A05               	clrf	i1MSC_CleanBufferInt@i,c
 13034  0015CE  6A06               	clrf	i1MSC_CleanBufferInt@i+1,c
 13035                           
 13036                           ;MISC.c: 93: for(i=0; i<count;i++)
 13037  0015D0  6A05               	clrf	i1MSC_CleanBufferInt@i,c
 13038  0015D2  6A06               	clrf	i1MSC_CleanBufferInt@i+1,c
 13039  0015D4  D00D               	goto	i1l4359
 13040  0015D6                     i1l4355:
 13041                           
 13042                           ;MISC.c: 94: {
 13043                           ;MISC.c: 95: data[i]= 0;
 13044  0015D6  90D8               	bcf	status,0,c
 13045  0015D8  3405               	rlcf	i1MSC_CleanBufferInt@i,w,c
 13046  0015DA  6ED9               	movwf	fsr2l,c
 13047  0015DC  3406               	rlcf	i1MSC_CleanBufferInt@i+1,w,c
 13048  0015DE  6EDA               	movwf	fsr2h,c
 13049  0015E0  5001               	movf	i1MSC_CleanBufferInt@data,w,c
 13050  0015E2  26D9               	addwf	fsr2l,f,c
 13051  0015E4  5002               	movf	i1MSC_CleanBufferInt@data+1,w,c
 13052  0015E6  22DA               	addwfc	fsr2h,f,c
 13053  0015E8  6ADE               	clrf	postinc2,c
 13054  0015EA  6ADD               	clrf	postdec2,c
 13055  0015EC  4A05               	infsnz	i1MSC_CleanBufferInt@i,f,c
 13056  0015EE  2A06               	incf	i1MSC_CleanBufferInt@i+1,f,c
 13057  0015F0                     i1l4359:
 13058  0015F0  5003               	movf	i1MSC_CleanBufferInt@count,w,c
 13059  0015F2  5C05               	subwf	i1MSC_CleanBufferInt@i,w,c
 13060  0015F4  5004               	movf	i1MSC_CleanBufferInt@count+1,w,c
 13061  0015F6  5806               	subwfb	i1MSC_CleanBufferInt@i+1,w,c
 13062  0015F8  E3EE               	bnc	i1l4355
 13063  0015FA  0012               	return		;funcret
 13064  0015FC                     __end_ofi1_MSC_CleanBufferInt:
 13065                           	opt stack 0
 13066                           tblptru	equ	0xFF8
 13067                           tblptrh	equ	0xFF7
 13068                           tblptrl	equ	0xFF6
 13069                           tablat	equ	0xFF5
 13070                           prodh	equ	0xFF4
 13071                           prodl	equ	0xFF3
 13072                           intcon	equ	0xFF2
 13073                           intcon2	equ	0xFF1
 13074                           intcon3	equ	0xFF0
 13075                           postinc0	equ	0xFEE
 13076                           wreg	equ	0xFE8
 13077                           postdec1	equ	0xFE5
 13078                           fsr1l	equ	0xFE1
 13079                           bsr	equ	0xFE0
 13080                           postinc2	equ	0xFDE
 13081                           postdec2	equ	0xFDD
 13082                           plusw2	equ	0xFDB
 13083                           fsr2h	equ	0xFDA
 13084                           fsr2l	equ	0xFD9
 13085                           status	equ	0xFD8
 13086                           
 13087 ;; *************** function _IR_ResetData *****************
 13088 ;; Defined at:
 13089 ;;		line 109 in file "IR.c"
 13090 ;; Parameters:    Size  Location     Type
 13091 ;;		None
 13092 ;; Auto vars:     Size  Location     Type
 13093 ;;		None
 13094 ;; Return value:  Size  Location     Type
 13095 ;;		None               void
 13096 ;; Registers used:
 13097 ;;		wreg, status,2, cstack
 13098 ;; Tracked objects:
 13099 ;;		On entry : 0/1
 13100 ;;		On exit  : 0/0
 13101 ;;		Unchanged: 0/0
 13102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13103 ;;      Params:         0       0       0       0       0
 13104 ;;      Locals:         0       0       0       0       0
 13105 ;;      Temps:          0       0       0       0       0
 13106 ;;      Totals:         0       0       0       0       0
 13107 ;;Total ram usage:        0 bytes
 13108 ;; Hardware stack levels used:    1
 13109 ;; Hardware stack levels required when called:    8
 13110 ;; This function calls:
 13111 ;;		i1_RF_Enable
 13112 ;; This function is called by:
 13113 ;;		_low_isr
 13114 ;;		_FSH_Write_IR_RF
 13115 ;; This function uses a non-reentrant model
 13116 ;;
 13117                           
 13118                           	psect	text82
 13119  001BA0                     __ptext82:
 13120                           	opt stack 0
 13121  001BA0                     _IR_ResetData:
 13122                           	opt stack 15
 13123                           
 13124                           ;IR.c: 111: IR_DataPlace = 0;
 13125                           
 13126                           ;incstack = 0
 13127  001BA0  6A6B               	clrf	_IR_DataPlace,c
 13128                           
 13129                           ;IR.c: 112: IRStarted = 0;
 13130  001BA2  6A69               	clrf	_IRStarted,c
 13131                           
 13132                           ;IR.c: 113: RF_Enable();
 13133  001BA4  EFFD  F00C         	goto	i1_RF_Enable	;wreg free
 13134  001BA8                     __end_of_IR_ResetData:
 13135                           	opt stack 0
 13136                           tblptru	equ	0xFF8
 13137                           tblptrh	equ	0xFF7
 13138                           tblptrl	equ	0xFF6
 13139                           tablat	equ	0xFF5
 13140                           prodh	equ	0xFF4
 13141                           prodl	equ	0xFF3
 13142                           intcon	equ	0xFF2
 13143                           intcon2	equ	0xFF1
 13144                           intcon3	equ	0xFF0
 13145                           postinc0	equ	0xFEE
 13146                           wreg	equ	0xFE8
 13147                           postdec1	equ	0xFE5
 13148                           fsr1l	equ	0xFE1
 13149                           bsr	equ	0xFE0
 13150                           postinc2	equ	0xFDE
 13151                           postdec2	equ	0xFDD
 13152                           plusw2	equ	0xFDB
 13153                           fsr2h	equ	0xFDA
 13154                           fsr2l	equ	0xFD9
 13155                           status	equ	0xFD8
 13156                           
 13157 ;; *************** function i1_RF_Enable *****************
 13158 ;; Defined at:
 13159 ;;		line 101 in file "RF.c"
 13160 ;; Parameters:    Size  Location     Type
 13161 ;;		None
 13162 ;; Auto vars:     Size  Location     Type
 13163 ;;		None
 13164 ;; Return value:  Size  Location     Type
 13165 ;;		None               void
 13166 ;; Registers used:
 13167 ;;		wreg, status,2, cstack
 13168 ;; Tracked objects:
 13169 ;;		On entry : 0/1
 13170 ;;		On exit  : 0/0
 13171 ;;		Unchanged: 0/0
 13172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13173 ;;      Params:         0       0       0       0       0
 13174 ;;      Locals:         0       0       0       0       0
 13175 ;;      Temps:          0       0       0       0       0
 13176 ;;      Totals:         0       0       0       0       0
 13177 ;;Total ram usage:        0 bytes
 13178 ;; Hardware stack levels used:    1
 13179 ;; Hardware stack levels required when called:    7
 13180 ;; This function calls:
 13181 ;;		i1_RF_DataInt
 13182 ;;		i1_TMR_Timer0Int
 13183 ;; This function is called by:
 13184 ;;		_IR_ResetData
 13185 ;; This function uses a non-reentrant model
 13186 ;;
 13187                           
 13188                           	psect	text83
 13189  0019FA                     __ptext83:
 13190                           	opt stack 0
 13191  0019FA                     i1_RF_Enable:
 13192                           	opt stack 15
 13193                           
 13194                           ;RF.c: 103: INTCON3bits.INT1IF = 0;
 13195                           
 13196                           ;incstack = 0
 13197  0019FA  90F0               	bcf	intcon3,0,c	;volatile
 13198                           
 13199                           ;RF.c: 104: INTCON3bits.INT2IF = 0;
 13200  0019FC  92F0               	bcf	intcon3,1,c	;volatile
 13201                           
 13202                           ;RF.c: 105: INTCONbits.TMR0IF = 0;
 13203  0019FE  94F2               	bcf	intcon,2,c	;volatile
 13204                           
 13205                           ;RF.c: 106: RF_DataInt(1);
 13206  001A00  0E01               	movlw	1
 13207  001A02  EC06  F00D         	call	i1_RF_DataInt
 13208                           
 13209                           ;RF.c: 107: TMR_Timer0Int(1);
 13210  001A06  0E01               	movlw	1
 13211  001A08  EFB5  F00D         	goto	i1_TMR_Timer0Int
 13212  001A0C                     __end_ofi1_RF_Enable:
 13213                           	opt stack 0
 13214                           tblptru	equ	0xFF8
 13215                           tblptrh	equ	0xFF7
 13216                           tblptrl	equ	0xFF6
 13217                           tablat	equ	0xFF5
 13218                           prodh	equ	0xFF4
 13219                           prodl	equ	0xFF3
 13220                           intcon	equ	0xFF2
 13221                           intcon2	equ	0xFF1
 13222                           intcon3	equ	0xFF0
 13223                           postinc0	equ	0xFEE
 13224                           wreg	equ	0xFE8
 13225                           postdec1	equ	0xFE5
 13226                           fsr1l	equ	0xFE1
 13227                           bsr	equ	0xFE0
 13228                           postinc2	equ	0xFDE
 13229                           postdec2	equ	0xFDD
 13230                           plusw2	equ	0xFDB
 13231                           fsr2h	equ	0xFDA
 13232                           fsr2l	equ	0xFD9
 13233                           status	equ	0xFD8
 13234                           
 13235 ;; *************** function i1_TMR_Timer0Int *****************
 13236 ;; Defined at:
 13237 ;;		line 332 in file "TIMERS.c"
 13238 ;; Parameters:    Size  Location     Type
 13239 ;;  state           1    wreg     unsigned char 
 13240 ;; Auto vars:     Size  Location     Type
 13241 ;;  state           1    0[COMRAM] unsigned char 
 13242 ;; Return value:  Size  Location     Type
 13243 ;;		None               void
 13244 ;; Registers used:
 13245 ;;		wreg, status,2
 13246 ;; Tracked objects:
 13247 ;;		On entry : 0/0
 13248 ;;		On exit  : 0/0
 13249 ;;		Unchanged: 0/0
 13250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13251 ;;      Params:         0       0       0       0       0
 13252 ;;      Locals:         1       0       0       0       0
 13253 ;;      Temps:          0       0       0       0       0
 13254 ;;      Totals:         1       0       0       0       0
 13255 ;;Total ram usage:        1 bytes
 13256 ;; Hardware stack levels used:    1
 13257 ;; Hardware stack levels required when called:    6
 13258 ;; This function calls:
 13259 ;;		Nothing
 13260 ;; This function is called by:
 13261 ;;		_RF_Disable
 13262 ;;		i1_RF_Enable
 13263 ;; This function uses a non-reentrant model
 13264 ;;
 13265                           
 13266                           	psect	text84
 13267  001B6A                     __ptext84:
 13268                           	opt stack 0
 13269  001B6A                     i1_TMR_Timer0Int:
 13270                           	opt stack 16
 13271                           
 13272                           ;incstack = 0
 13273                           ;i1TMR_Timer0Int@state stored from wreg
 13274  001B6A  6E01               	movwf	i1TMR_Timer0Int@state,c
 13275                           
 13276                           ;TIMERS.c: 334: if(state)
 13277  001B6C  5001               	movf	i1TMR_Timer0Int@state,w,c
 13278  001B6E  E002               	bz	i1l873
 13279                           
 13280                           ;TIMERS.c: 335: {
 13281                           ;TIMERS.c: 337: INTCONbits.TMR0IE = 1;
 13282  001B70  8AF2               	bsf	intcon,5,c	;volatile
 13283                           
 13284                           ;TIMERS.c: 338: }
 13285  001B72  0012               	return	
 13286  001B74                     i1l873:
 13287                           
 13288                           ;TIMERS.c: 339: else
 13289                           ;TIMERS.c: 340: {
 13290                           ;TIMERS.c: 342: INTCONbits.TMR0IE = 0;
 13291  001B74  9AF2               	bcf	intcon,5,c	;volatile
 13292  001B76  0012               	return		;funcret
 13293  001B78                     __end_ofi1_TMR_Timer0Int:
 13294                           	opt stack 0
 13295                           tblptru	equ	0xFF8
 13296                           tblptrh	equ	0xFF7
 13297                           tblptrl	equ	0xFF6
 13298                           tablat	equ	0xFF5
 13299                           prodh	equ	0xFF4
 13300                           prodl	equ	0xFF3
 13301                           intcon	equ	0xFF2
 13302                           intcon2	equ	0xFF1
 13303                           intcon3	equ	0xFF0
 13304                           postinc0	equ	0xFEE
 13305                           wreg	equ	0xFE8
 13306                           postdec1	equ	0xFE5
 13307                           fsr1l	equ	0xFE1
 13308                           bsr	equ	0xFE0
 13309                           postinc2	equ	0xFDE
 13310                           postdec2	equ	0xFDD
 13311                           plusw2	equ	0xFDB
 13312                           fsr2h	equ	0xFDA
 13313                           fsr2l	equ	0xFD9
 13314                           status	equ	0xFD8
 13315                           
 13316 ;; *************** function i1_RF_DataInt *****************
 13317 ;; Defined at:
 13318 ;;		line 254 in file "RF.c"
 13319 ;; Parameters:    Size  Location     Type
 13320 ;;  state           1    wreg     unsigned char 
 13321 ;; Auto vars:     Size  Location     Type
 13322 ;;  state           1    0[COMRAM] unsigned char 
 13323 ;; Return value:  Size  Location     Type
 13324 ;;		None               void
 13325 ;; Registers used:
 13326 ;;		wreg, status,2
 13327 ;; Tracked objects:
 13328 ;;		On entry : 0/1
 13329 ;;		On exit  : 0/0
 13330 ;;		Unchanged: 0/0
 13331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13332 ;;      Params:         0       0       0       0       0
 13333 ;;      Locals:         1       0       0       0       0
 13334 ;;      Temps:          0       0       0       0       0
 13335 ;;      Totals:         1       0       0       0       0
 13336 ;;Total ram usage:        1 bytes
 13337 ;; Hardware stack levels used:    1
 13338 ;; Hardware stack levels required when called:    6
 13339 ;; This function calls:
 13340 ;;		Nothing
 13341 ;; This function is called by:
 13342 ;;		_low_isr
 13343 ;;		_RF_Disable
 13344 ;;		i1_RF_Enable
 13345 ;; This function uses a non-reentrant model
 13346 ;;
 13347                           
 13348                           	psect	text85
 13349  001A0C                     __ptext85:
 13350                           	opt stack 0
 13351  001A0C                     i1_RF_DataInt:
 13352                           	opt stack 17
 13353                           
 13354                           ;incstack = 0
 13355                           ;i1RF_DataInt@state stored from wreg
 13356  001A0C  6E01               	movwf	i1RF_DataInt@state,c
 13357                           
 13358                           ;RF.c: 257: if(state)
 13359  001A0E  5001               	movf	i1RF_DataInt@state,w,c
 13360  001A10  E003               	bz	i1l469
 13361                           
 13362                           ;RF.c: 258: {
 13363                           ;RF.c: 260: INTCON3bits.INT1E = 1;
 13364  001A12  86F0               	bsf	intcon3,3,c	;volatile
 13365                           
 13366                           ;RF.c: 261: INTCON3bits.INT2E = 1;
 13367  001A14  88F0               	bsf	intcon3,4,c	;volatile
 13368                           
 13369                           ;RF.c: 262: }
 13370  001A16  0012               	return	
 13371  001A18                     i1l469:
 13372                           
 13373                           ;RF.c: 263: else
 13374                           ;RF.c: 264: {
 13375                           ;RF.c: 266: INTCON3bits.INT1E = 0;
 13376  001A18  96F0               	bcf	intcon3,3,c	;volatile
 13377                           
 13378                           ;RF.c: 267: INTCON3bits.INT2E = 0;
 13379  001A1A  98F0               	bcf	intcon3,4,c	;volatile
 13380  001A1C  0012               	return		;funcret
 13381  001A1E                     __end_ofi1_RF_DataInt:
 13382                           	opt stack 0
 13383                           tblptru	equ	0xFF8
 13384                           tblptrh	equ	0xFF7
 13385                           tblptrl	equ	0xFF6
 13386                           tablat	equ	0xFF5
 13387                           prodh	equ	0xFF4
 13388                           prodl	equ	0xFF3
 13389                           intcon	equ	0xFF2
 13390                           intcon2	equ	0xFF1
 13391                           intcon3	equ	0xFF0
 13392                           postinc0	equ	0xFEE
 13393                           wreg	equ	0xFE8
 13394                           postdec1	equ	0xFE5
 13395                           fsr1l	equ	0xFE1
 13396                           bsr	equ	0xFE0
 13397                           postinc2	equ	0xFDE
 13398                           postdec2	equ	0xFDD
 13399                           plusw2	equ	0xFDB
 13400                           fsr2h	equ	0xFDA
 13401                           fsr2l	equ	0xFD9
 13402                           status	equ	0xFD8
 13403                           
 13404 ;; *************** function _FSH_WriteIntArray *****************
 13405 ;; Defined at:
 13406 ;;		line 125 in file "FLASH.c"
 13407 ;; Parameters:    Size  Location     Type
 13408 ;;  ConstArray      3    4[COMRAM] PTR const unsigned int 
 13409 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 13410 ;;  Array           2    7[COMRAM] PTR unsigned int 
 13411 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 13412 ;; Auto vars:     Size  Location     Type
 13413 ;;  address         4   12[COMRAM] unsigned long 
 13414 ;;  i               1   11[COMRAM] unsigned char 
 13415 ;; Return value:  Size  Location     Type
 13416 ;;		None               void
 13417 ;; Registers used:
 13418 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13419 ;; Tracked objects:
 13420 ;;		On entry : 0/1
 13421 ;;		On exit  : 0/0
 13422 ;;		Unchanged: 0/0
 13423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13424 ;;      Params:         5       0       0       0       0
 13425 ;;      Locals:         5       0       0       0       0
 13426 ;;      Temps:          2       0       0       0       0
 13427 ;;      Totals:        12       0       0       0       0
 13428 ;;Total ram usage:       12 bytes
 13429 ;; Hardware stack levels used:    1
 13430 ;; Hardware stack levels required when called:    7
 13431 ;; This function calls:
 13432 ;;		_FSH_AddressToBlock
 13433 ;; This function is called by:
 13434 ;;		_FSH_Write_IR_RF
 13435 ;; This function uses a non-reentrant model
 13436 ;;
 13437                           
 13438                           	psect	text86
 13439  000C50                     __ptext86:
 13440                           	opt stack 0
 13441  000C50                     _FSH_WriteIntArray:
 13442                           	opt stack 14
 13443                           
 13444                           ;FLASH.c: 127: unsigned char i;
 13445                           ;FLASH.c: 128: unsigned long address = ConstArray;
 13446                           
 13447                           ;incstack = 0
 13448  000C50  5005               	movf	FSH_WriteIntArray@ConstArray,w,c
 13449  000C52  6E0D               	movwf	FSH_WriteIntArray@address,c
 13450  000C54  5006               	movf	FSH_WriteIntArray@ConstArray+1,w,c
 13451  000C56  6E0E               	movwf	FSH_WriteIntArray@address+1,c
 13452  000C58  5007               	movf	FSH_WriteIntArray@ConstArray+2,w,c
 13453  000C5A  6E0F               	movwf	FSH_WriteIntArray@address+2,c
 13454  000C5C  6A10               	clrf	FSH_WriteIntArray@address+3,c
 13455                           
 13456                           ;FLASH.c: 131: FSH_AddressToBlock(address);
 13457  000C5E  C00D  F001         	movff	FSH_WriteIntArray@address,FSH_AddressToBlock@Address
 13458  000C62  C00E  F002         	movff	FSH_WriteIntArray@address+1,FSH_AddressToBlock@Address+1
 13459  000C66  C00F  F003         	movff	FSH_WriteIntArray@address+2,FSH_AddressToBlock@Address+2
 13460  000C6A  C010  F004         	movff	FSH_WriteIntArray@address+3,FSH_AddressToBlock@Address+3
 13461  000C6E  EC6D  F00B         	call	_FSH_AddressToBlock	;wreg free
 13462                           
 13463                           ;FLASH.c: 133: if(address < 0x2400 || address >= 0x2800)
 13464  000C72  5010               	movf	FSH_WriteIntArray@address+3,w,c
 13465  000C74  100F               	iorwf	FSH_WriteIntArray@address+2,w,c
 13466  000C76  E103               	bnz	i1u412_20
 13467  000C78  0E24               	movlw	36
 13468  000C7A  5C0E               	subwf	FSH_WriteIntArray@address+1,w,c
 13469  000C7C  E306               	bnc	i1l957
 13470  000C7E                     i1u412_20:
 13471  000C7E  5010               	movf	FSH_WriteIntArray@address+3,w,c
 13472  000C80  100F               	iorwf	FSH_WriteIntArray@address+2,w,c
 13473  000C82  E103               	bnz	i1u413_20
 13474  000C84  0E28               	movlw	40
 13475  000C86  5C0E               	subwf	FSH_WriteIntArray@address+1,w,c
 13476  000C88  E301               	bnc	i1l955
 13477  000C8A                     i1u413_20:
 13478  000C8A                     i1l957:
 13479  000C8A  00FF               	reset		;# 
 13480  000C8C                     i1l955:
 13481                           
 13482                           ;FLASH.c: 137: }
 13483                           ;FLASH.c: 139: for(i = 0; i<32; i++)
 13484  000C8C  6A0C               	clrf	FSH_WriteIntArray@i,c
 13485  000C8E                     i1l4629:
 13486                           
 13487                           ;FLASH.c: 140: {
 13488                           ;FLASH.c: 142: TABLAT = *Array;
 13489  000C8E  C008  FFD9         	movff	FSH_WriteIntArray@Array,fsr2l
 13490  000C92  C009  FFDA         	movff	FSH_WriteIntArray@Array+1,fsr2h
 13491  000C96  50DF               	movf	indf2,w,c
 13492  000C98  6EF5               	movwf	tablat,c	;volatile
 13493  000C9A  000D               	tblwt		*+	;# 
 13494                           
 13495                           ;FLASH.c: 144: TABLAT = *Array >> 8;
 13496  000C9C  C008  FFD9         	movff	FSH_WriteIntArray@Array,fsr2l
 13497  000CA0  C009  FFDA         	movff	FSH_WriteIntArray@Array+1,fsr2h
 13498  000CA4  CFDE F00A          	movff	postinc2,??_FSH_WriteIntArray
 13499  000CA8  CFDD F00B          	movff	postdec2,??_FSH_WriteIntArray+1
 13500  000CAC  C00B  F00A         	movff	??_FSH_WriteIntArray+1,??_FSH_WriteIntArray
 13501  000CB0  6A0B               	clrf	??_FSH_WriteIntArray+1,c
 13502  000CB2  500A               	movf	??_FSH_WriteIntArray,w,c
 13503  000CB4  6EF5               	movwf	tablat,c	;volatile
 13504  000CB6  000D               	tblwt		*+	;# 
 13505                           
 13506                           ;FLASH.c: 146: Array++;
 13507  000CB8  0E02               	movlw	2
 13508  000CBA  2608               	addwf	FSH_WriteIntArray@Array,f,c
 13509  000CBC  0E00               	movlw	0
 13510  000CBE  2209               	addwfc	FSH_WriteIntArray@Array+1,f,c
 13511  000CC0  2A0C               	incf	FSH_WriteIntArray@i,f,c
 13512  000CC2  0E1F               	movlw	31
 13513  000CC4  640C               	cpfsgt	FSH_WriteIntArray@i,c
 13514  000CC6  D7E3               	goto	i1l4629
 13515                           
 13516                           ;FLASH.c: 147: }
 13517                           ;FLASH.c: 150: FSH_AddressToBlock(address);
 13518  000CC8  C00D  F001         	movff	FSH_WriteIntArray@address,FSH_AddressToBlock@Address
 13519  000CCC  C00E  F002         	movff	FSH_WriteIntArray@address+1,FSH_AddressToBlock@Address+1
 13520  000CD0  C00F  F003         	movff	FSH_WriteIntArray@address+2,FSH_AddressToBlock@Address+2
 13521  000CD4  C010  F004         	movff	FSH_WriteIntArray@address+3,FSH_AddressToBlock@Address+3
 13522  000CD8  EC6D  F00B         	call	_FSH_AddressToBlock	;wreg free
 13523                           
 13524                           ;FLASH.c: 152: EECON1bits.WRERR = 0;
 13525  000CDC  96A6               	bcf	4006,3,c	;volatile
 13526                           
 13527                           ;FLASH.c: 153: EECON1bits.FREE = 0;
 13528  000CDE  98A6               	bcf	4006,4,c	;volatile
 13529  000CE0  84A6               	bsf	4006,2,c	;# 
 13530  000CE2  9EF2               	bcf	intcon,7,c	;# 
 13531  000CE4  0E55               	movlw	85	;# 
 13532  000CE6  6EA7               	movwf	4007,c	;# 
 13533  000CE8  0EAA               	movlw	170	;# 
 13534  000CEA  6EA7               	movwf	4007,c	;# 
 13535  000CEC  82A6               	bsf	4006,1,c	;# 
 13536  000CEE  0CAA               	retlw	170	;funcret
 13537  000CF0                     __end_of_FSH_WriteIntArray:
 13538                           	opt stack 0
 13539                           tblptru	equ	0xFF8
 13540                           tblptrh	equ	0xFF7
 13541                           tblptrl	equ	0xFF6
 13542                           tablat	equ	0xFF5
 13543                           prodh	equ	0xFF4
 13544                           prodl	equ	0xFF3
 13545                           intcon	equ	0xFF2
 13546                           intcon2	equ	0xFF1
 13547                           intcon3	equ	0xFF0
 13548                           postinc0	equ	0xFEE
 13549                           wreg	equ	0xFE8
 13550                           postdec1	equ	0xFE5
 13551                           fsr1l	equ	0xFE1
 13552                           bsr	equ	0xFE0
 13553                           indf2	equ	0xFDF
 13554                           postinc2	equ	0xFDE
 13555                           postdec2	equ	0xFDD
 13556                           plusw2	equ	0xFDB
 13557                           fsr2h	equ	0xFDA
 13558                           fsr2l	equ	0xFD9
 13559                           status	equ	0xFD8
 13560                           
 13561 ;; *************** function _FSH_VerifyWriteIntArray *****************
 13562 ;; Defined at:
 13563 ;;		line 169 in file "FLASH.c"
 13564 ;; Parameters:    Size  Location     Type
 13565 ;;  ConstArray      3    0[COMRAM] PTR const unsigned int 
 13566 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 13567 ;;  Array           2    3[COMRAM] PTR unsigned int 
 13568 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 13569 ;; Auto vars:     Size  Location     Type
 13570 ;;  data            2    8[COMRAM] unsigned int 
 13571 ;;  i               1   11[COMRAM] unsigned char 
 13572 ;;  failcount       1   10[COMRAM] unsigned char 
 13573 ;; Return value:  Size  Location     Type
 13574 ;;                  1    wreg      unsigned char 
 13575 ;; Registers used:
 13576 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 13577 ;; Tracked objects:
 13578 ;;		On entry : 0/1
 13579 ;;		On exit  : 0/0
 13580 ;;		Unchanged: 0/0
 13581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13582 ;;      Params:         5       0       0       0       0
 13583 ;;      Locals:         4       0       0       0       0
 13584 ;;      Temps:          3       0       0       0       0
 13585 ;;      Totals:        12       0       0       0       0
 13586 ;;Total ram usage:       12 bytes
 13587 ;; Hardware stack levels used:    1
 13588 ;; Hardware stack levels required when called:    6
 13589 ;; This function calls:
 13590 ;;		Nothing
 13591 ;; This function is called by:
 13592 ;;		_FSH_Write_IR_RF
 13593 ;; This function uses a non-reentrant model
 13594 ;;
 13595                           
 13596                           	psect	text87
 13597  0011C0                     __ptext87:
 13598                           	opt stack 0
 13599  0011C0                     _FSH_VerifyWriteIntArray:
 13600                           	opt stack 15
 13601                           
 13602                           ;FLASH.c: 171: unsigned char i;
 13603                           ;FLASH.c: 172: unsigned int data;
 13604                           ;FLASH.c: 173: unsigned char failcount = 0;
 13605                           
 13606                           ;incstack = 0
 13607  0011C0  6A0B               	clrf	FSH_VerifyWriteIntArray@failcount,c
 13608                           
 13609                           ;FLASH.c: 175: for(i = 0; i<32; i++)
 13610  0011C2  6A0C               	clrf	FSH_VerifyWriteIntArray@i,c
 13611  0011C4                     i1l4649:
 13612                           
 13613                           ;FLASH.c: 176: {
 13614                           ;FLASH.c: 177: data = ConstArray[i];
 13615  0011C4  500C               	movf	FSH_VerifyWriteIntArray@i,w,c
 13616  0011C6  0D02               	mullw	2
 13617  0011C8  50F3               	movf	prodl,w,c
 13618  0011CA  2401               	addwf	FSH_VerifyWriteIntArray@ConstArray,w,c
 13619  0011CC  6E06               	movwf	??_FSH_VerifyWriteIntArray& (0+255),c
 13620  0011CE  50F4               	movf	prodh,w,c
 13621  0011D0  2002               	addwfc	FSH_VerifyWriteIntArray@ConstArray+1,w,c
 13622  0011D2  6E07               	movwf	(??_FSH_VerifyWriteIntArray+1)& (0+255),c
 13623  0011D4  0E00               	movlw	0
 13624  0011D6  2003               	addwfc	FSH_VerifyWriteIntArray@ConstArray+2,w,c
 13625  0011D8  6E08               	movwf	(??_FSH_VerifyWriteIntArray+2)& (0+255),c
 13626  0011DA  C006  FFF6         	movff	??_FSH_VerifyWriteIntArray,tblptrl
 13627  0011DE  C007  FFF7         	movff	??_FSH_VerifyWriteIntArray+1,tblptrh
 13628  0011E2  C008  FFF8         	movff	??_FSH_VerifyWriteIntArray+2,tblptru
 13629  0011E6  0009               	tblrd		*+
 13630  0011E8  CFF5 F009          	movff	tablat,FSH_VerifyWriteIntArray@data
 13631  0011EC  000A               	tblrd		*-
 13632  0011EE  CFF5 F00A          	movff	tablat,FSH_VerifyWriteIntArray@data+1
 13633                           
 13634                           ;FLASH.c: 178: if(data != Array[i])
 13635  0011F2  500C               	movf	FSH_VerifyWriteIntArray@i,w,c
 13636  0011F4  0D02               	mullw	2
 13637  0011F6  50F3               	movf	prodl,w,c
 13638  0011F8  2404               	addwf	FSH_VerifyWriteIntArray@Array,w,c
 13639  0011FA  6ED9               	movwf	fsr2l,c
 13640  0011FC  50F4               	movf	prodh,w,c
 13641  0011FE  2005               	addwfc	FSH_VerifyWriteIntArray@Array+1,w,c
 13642  001200  6EDA               	movwf	fsr2h,c
 13643  001202  5009               	movf	FSH_VerifyWriteIntArray@data,w,c
 13644  001204  18DE               	xorwf	postinc2,w,c
 13645  001206  E103               	bnz	i1u415_20
 13646  001208  500A               	movf	FSH_VerifyWriteIntArray@data+1,w,c
 13647  00120A  18DE               	xorwf	postinc2,w,c
 13648  00120C  E001               	bz	i1l965
 13649  00120E                     i1u415_20:
 13650                           
 13651                           ;FLASH.c: 179: {
 13652                           ;FLASH.c: 180: failcount++;
 13653  00120E  2A0B               	incf	FSH_VerifyWriteIntArray@failcount,f,c
 13654  001210                     i1l965:
 13655  001210  2A0C               	incf	FSH_VerifyWriteIntArray@i,f,c
 13656  001212  0E1F               	movlw	31
 13657  001214  640C               	cpfsgt	FSH_VerifyWriteIntArray@i,c
 13658  001216  D7D6               	goto	i1l4649
 13659                           
 13660                           ;FLASH.c: 181: }
 13661                           ;FLASH.c: 182: }
 13662                           ;FLASH.c: 183: if(failcount)
 13663  001218  500B               	movf	FSH_VerifyWriteIntArray@failcount,w,c
 13664  00121A  E001               	bz	i1l4663
 13665                           
 13666                           ;FLASH.c: 184: {
 13667                           ;FLASH.c: 185: return 0;
 13668  00121C  0C00               	retlw	0
 13669  00121E                     i1l4663:
 13670                           
 13671                           ;FLASH.c: 186: }
 13672                           ;FLASH.c: 187: return 1;
 13673  00121E  0C01               	retlw	1	;funcret
 13674  001220                     __end_of_FSH_VerifyWriteIntArray:
 13675                           	opt stack 0
 13676                           tblptru	equ	0xFF8
 13677                           tblptrh	equ	0xFF7
 13678                           tblptrl	equ	0xFF6
 13679                           tablat	equ	0xFF5
 13680                           prodh	equ	0xFF4
 13681                           prodl	equ	0xFF3
 13682                           intcon	equ	0xFF2
 13683                           intcon2	equ	0xFF1
 13684                           intcon3	equ	0xFF0
 13685                           postinc0	equ	0xFEE
 13686                           wreg	equ	0xFE8
 13687                           postdec1	equ	0xFE5
 13688                           fsr1l	equ	0xFE1
 13689                           bsr	equ	0xFE0
 13690                           indf2	equ	0xFDF
 13691                           postinc2	equ	0xFDE
 13692                           postdec2	equ	0xFDD
 13693                           plusw2	equ	0xFDB
 13694                           fsr2h	equ	0xFDA
 13695                           fsr2l	equ	0xFD9
 13696                           status	equ	0xFD8
 13697                           
 13698 ;; *************** function _FSH_EraseBlock *****************
 13699 ;; Defined at:
 13700 ;;		line 72 in file "FLASH.c"
 13701 ;; Parameters:    Size  Location     Type
 13702 ;;  Address         4    4[COMRAM] unsigned long 
 13703 ;; Auto vars:     Size  Location     Type
 13704 ;;  WriteTries      1   10[COMRAM] unsigned char 
 13705 ;;  lowint          1    9[COMRAM] unsigned char 
 13706 ;;  highint         1    8[COMRAM] unsigned char 
 13707 ;; Return value:  Size  Location     Type
 13708 ;;		None               void
 13709 ;; Registers used:
 13710 ;;		wreg, status,2, status,0, cstack
 13711 ;; Tracked objects:
 13712 ;;		On entry : 0/0
 13713 ;;		On exit  : 0/0
 13714 ;;		Unchanged: 0/0
 13715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13716 ;;      Params:         4       0       0       0       0
 13717 ;;      Locals:         3       0       0       0       0
 13718 ;;      Temps:          0       0       0       0       0
 13719 ;;      Totals:         7       0       0       0       0
 13720 ;;Total ram usage:        7 bytes
 13721 ;; Hardware stack levels used:    1
 13722 ;; Hardware stack levels required when called:    7
 13723 ;; This function calls:
 13724 ;;		_FSH_AddressToBlock
 13725 ;; This function is called by:
 13726 ;;		_FSH_Write_IR_RF
 13727 ;; This function uses a non-reentrant model
 13728 ;;
 13729                           
 13730                           	psect	text88
 13731  00114E                     __ptext88:
 13732                           	opt stack 0
 13733  00114E                     _FSH_EraseBlock:
 13734                           	opt stack 14
 13735                           
 13736                           ;FLASH.c: 74: unsigned char highint = INTCONbits.GIE;
 13737                           
 13738                           ;incstack = 0
 13739  00114E  0E00               	movlw	0
 13740  001150  BEF2               	btfsc	intcon,7,c	;volatile
 13741  001152  0E01               	movlw	1
 13742  001154  6E09               	movwf	FSH_EraseBlock@highint,c
 13743                           
 13744                           ;FLASH.c: 75: unsigned char lowint = INTCONbits.PEIE;
 13745  001156  0E00               	movlw	0
 13746  001158  BCF2               	btfsc	intcon,6,c	;volatile
 13747  00115A  0E01               	movlw	1
 13748  00115C  6E0A               	movwf	FSH_EraseBlock@lowint,c
 13749                           
 13750                           ;FLASH.c: 76: unsigned char WriteTries;
 13751                           ;FLASH.c: 78: if(Address < 0x2400 || Address >= 0x2800)
 13752  00115E  5008               	movf	FSH_EraseBlock@Address+3,w,c
 13753  001160  1007               	iorwf	FSH_EraseBlock@Address+2,w,c
 13754  001162  E103               	bnz	i1u406_20
 13755  001164  0E24               	movlw	36
 13756  001166  5C06               	subwf	FSH_EraseBlock@Address+1,w,c
 13757  001168  E306               	bnc	i1l946
 13758  00116A                     i1u406_20:
 13759  00116A  5008               	movf	FSH_EraseBlock@Address+3,w,c
 13760  00116C  1007               	iorwf	FSH_EraseBlock@Address+2,w,c
 13761  00116E  E103               	bnz	i1u407_20
 13762  001170  0E28               	movlw	40
 13763  001172  5C06               	subwf	FSH_EraseBlock@Address+1,w,c
 13764  001174  E301               	bnc	i1l944
 13765  001176                     i1u407_20:
 13766  001176                     i1l946:
 13767  001176  00FF               	reset		;# 
 13768  001178                     i1l944:
 13769                           
 13770                           ;FLASH.c: 82: }
 13771                           ;FLASH.c: 84: INTCONbits.GIE = 0;
 13772  001178  9EF2               	bcf	intcon,7,c	;volatile
 13773                           
 13774                           ;FLASH.c: 85: INTCONbits.PEIE = 0;
 13775  00117A  9CF2               	bcf	intcon,6,c	;volatile
 13776  00117C                     i1l4597:
 13777                           
 13778                           ;FLASH.c: 88: FSH_AddressToBlock(Address);
 13779  00117C  C005  F001         	movff	FSH_EraseBlock@Address,FSH_AddressToBlock@Address
 13780  001180  C006  F002         	movff	FSH_EraseBlock@Address+1,FSH_AddressToBlock@Address+1
 13781  001184  C007  F003         	movff	FSH_EraseBlock@Address+2,FSH_AddressToBlock@Address+2
 13782  001188  C008  F004         	movff	FSH_EraseBlock@Address+3,FSH_AddressToBlock@Address+3
 13783  00118C  EC6D  F00B         	call	_FSH_AddressToBlock	;wreg free
 13784                           
 13785                           ;FLASH.c: 90: WriteTries = 1;
 13786  001190  0E01               	movlw	1
 13787  001192  6E0B               	movwf	FSH_EraseBlock@WriteTries,c
 13788  001194  84A6               	bsf	4006,2,c	;# 
 13789  001196  88A6               	bsf	4006,4,c	;# 
 13790  001198  9EF2               	bcf	intcon,7,c	;# 
 13791  00119A  0E55               	movlw	85	;# 
 13792  00119C  6EA7               	movwf	4007,c	;# 
 13793  00119E  0EAA               	movlw	170	;# 
 13794  0011A0  6EA7               	movwf	4007,c	;# 
 13795  0011A2  82A6               	bsf	4006,1,c	;# 
 13796                           
 13797                           ;FLASH.c: 101: if(EECON1bits.WRERR)
 13798  0011A4  A6A6               	btfss	4006,3,c	;volatile
 13799  0011A6  D005               	goto	i1l4609
 13800                           
 13801                           ;FLASH.c: 102: {
 13802                           ;FLASH.c: 103: WriteTries++;
 13803  0011A8  2A0B               	incf	FSH_EraseBlock@WriteTries,f,c
 13804                           
 13805                           ;FLASH.c: 104: if(WriteTries < 10)
 13806  0011AA  0E0A               	movlw	10
 13807  0011AC  600B               	cpfslt	FSH_EraseBlock@WriteTries,c
 13808  0011AE  D001               	goto	i1l4609
 13809  0011B0  D7E5               	goto	i1l4597
 13810  0011B2                     i1l4609:
 13811                           
 13812                           ;FLASH.c: 107: }
 13813                           ;FLASH.c: 108: }
 13814                           ;FLASH.c: 110: if(highint)
 13815  0011B2  5009               	movf	FSH_EraseBlock@highint,w,c
 13816  0011B4  E001               	bz	i1l4613
 13817                           
 13818                           ;FLASH.c: 111: {
 13819                           ;FLASH.c: 112: INTCONbits.GIE = 1;
 13820  0011B6  8EF2               	bsf	intcon,7,c	;volatile
 13821  0011B8                     i1l4613:
 13822                           
 13823                           ;FLASH.c: 113: }
 13824                           ;FLASH.c: 114: if(lowint)
 13825  0011B8  500A               	movf	FSH_EraseBlock@lowint,w,c
 13826  0011BA  A4D8               	btfss	status,2,c
 13827                           
 13828                           ;FLASH.c: 115: {
 13829                           ;FLASH.c: 116: INTCONbits.PEIE = 1;
 13830  0011BC  8CF2               	bsf	intcon,6,c	;volatile
 13831  0011BE  0012               	return		;funcret
 13832  0011C0                     __end_of_FSH_EraseBlock:
 13833                           	opt stack 0
 13834                           tblptru	equ	0xFF8
 13835                           tblptrh	equ	0xFF7
 13836                           tblptrl	equ	0xFF6
 13837                           tablat	equ	0xFF5
 13838                           prodh	equ	0xFF4
 13839                           prodl	equ	0xFF3
 13840                           intcon	equ	0xFF2
 13841                           intcon2	equ	0xFF1
 13842                           intcon3	equ	0xFF0
 13843                           postinc0	equ	0xFEE
 13844                           wreg	equ	0xFE8
 13845                           postdec1	equ	0xFE5
 13846                           fsr1l	equ	0xFE1
 13847                           bsr	equ	0xFE0
 13848                           indf2	equ	0xFDF
 13849                           postinc2	equ	0xFDE
 13850                           postdec2	equ	0xFDD
 13851                           plusw2	equ	0xFDB
 13852                           fsr2h	equ	0xFDA
 13853                           fsr2l	equ	0xFD9
 13854                           status	equ	0xFD8
 13855                           
 13856 ;; *************** function _FSH_AddressToBlock *****************
 13857 ;; Defined at:
 13858 ;;		line 536 in file "FLASH.c"
 13859 ;; Parameters:    Size  Location     Type
 13860 ;;  Address         4    0[COMRAM] unsigned long 
 13861 ;; Auto vars:     Size  Location     Type
 13862 ;;		None
 13863 ;; Return value:  Size  Location     Type
 13864 ;;		None               void
 13865 ;; Registers used:
 13866 ;;		wreg, status,2, status,0
 13867 ;; Tracked objects:
 13868 ;;		On entry : 0/1
 13869 ;;		On exit  : 0/0
 13870 ;;		Unchanged: 0/0
 13871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13872 ;;      Params:         4       0       0       0       0
 13873 ;;      Locals:         0       0       0       0       0
 13874 ;;      Temps:          0       0       0       0       0
 13875 ;;      Totals:         4       0       0       0       0
 13876 ;;Total ram usage:        4 bytes
 13877 ;; Hardware stack levels used:    1
 13878 ;; Hardware stack levels required when called:    6
 13879 ;; This function calls:
 13880 ;;		Nothing
 13881 ;; This function is called by:
 13882 ;;		_FSH_EraseBlock
 13883 ;;		_FSH_WriteIntArray
 13884 ;;		_FSH_Write_IR_RF
 13885 ;; This function uses a non-reentrant model
 13886 ;;
 13887                           
 13888                           	psect	text89
 13889  0016DA                     __ptext89:
 13890                           	opt stack 0
 13891  0016DA                     _FSH_AddressToBlock:
 13892                           	opt stack 14
 13893                           
 13894                           ;FLASH.c: 538: if(Address > 0x3600)
 13895                           
 13896                           ;incstack = 0
 13897  0016DA  5004               	movf	FSH_AddressToBlock@Address+3,w,c
 13898  0016DC  1003               	iorwf	FSH_AddressToBlock@Address+2,w,c
 13899  0016DE  E104               	bnz	i1u370_20
 13900  0016E0  0401               	decf	FSH_AddressToBlock@Address,w,c
 13901  0016E2  0E36               	movlw	54
 13902  0016E4  5802               	subwfb	FSH_AddressToBlock@Address+1,w,c
 13903  0016E6  E305               	bnc	i1l4339
 13904  0016E8                     i1u370_20:
 13905                           
 13906                           ;FLASH.c: 539: {
 13907                           ;FLASH.c: 540: Address = 0x3600;
 13908  0016E8  6A01               	clrf	FSH_AddressToBlock@Address,c
 13909  0016EA  0E36               	movlw	54
 13910  0016EC  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 13911  0016EE  6A03               	clrf	FSH_AddressToBlock@Address+2,c
 13912  0016F0  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 13913  0016F2                     i1l4339:
 13914                           
 13915                           ;FLASH.c: 541: }
 13916                           ;FLASH.c: 542: TBLPTRU = (Address & 0x002F0000) >> 16;
 13917  0016F2  5003               	movf	FSH_AddressToBlock@Address+2,w,c
 13918  0016F4  0B2F               	andlw	47
 13919  0016F6  6EF8               	movwf	tblptru,c	;volatile
 13920                           
 13921                           ;FLASH.c: 543: TBLPTRH = (Address & 0x0000FF00) >> 8;
 13922  0016F8  C002  FFF7         	movff	FSH_AddressToBlock@Address+1,tblptrh	;volatile
 13923                           
 13924                           ;FLASH.c: 544: TBLPTRL = (Address & 0x000000FF);
 13925  0016FC  C001  FFF6         	movff	FSH_AddressToBlock@Address,tblptrl	;volatile
 13926  001700  0012               	return		;funcret
 13927  001702                     __end_of_FSH_AddressToBlock:
 13928                           	opt stack 0
 13929                           tblptru	equ	0xFF8
 13930                           tblptrh	equ	0xFF7
 13931                           tblptrl	equ	0xFF6
 13932                           tablat	equ	0xFF5
 13933                           prodh	equ	0xFF4
 13934                           prodl	equ	0xFF3
 13935                           intcon	equ	0xFF2
 13936                           intcon2	equ	0xFF1
 13937                           intcon3	equ	0xFF0
 13938                           postinc0	equ	0xFEE
 13939                           wreg	equ	0xFE8
 13940                           postdec1	equ	0xFE5
 13941                           fsr1l	equ	0xFE1
 13942                           bsr	equ	0xFE0
 13943                           indf2	equ	0xFDF
 13944                           postinc2	equ	0xFDE
 13945                           postdec2	equ	0xFDD
 13946                           plusw2	equ	0xFDB
 13947                           fsr2h	equ	0xFDA
 13948                           fsr2l	equ	0xFD9
 13949                           status	equ	0xFD8
 13950                           
 13951 ;; *************** function _ADC_CalculateVoltage *****************
 13952 ;; Defined at:
 13953 ;;		line 79 in file "ADC.c"
 13954 ;; Parameters:    Size  Location     Type
 13955 ;;		None
 13956 ;; Auto vars:     Size  Location     Type
 13957 ;;  Voltage         3   40[COMRAM] unsigned long 
 13958 ;;  ADCcounts       2   43[COMRAM] unsigned int 
 13959 ;; Return value:  Size  Location     Type
 13960 ;;		None               void
 13961 ;; Registers used:
 13962 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13963 ;; Tracked objects:
 13964 ;;		On entry : 0/0
 13965 ;;		On exit  : 0/0
 13966 ;;		Unchanged: 0/0
 13967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13968 ;;      Params:         0       0       0       0       0
 13969 ;;      Locals:         5       0       0       0       0
 13970 ;;      Temps:          0       0       0       0       0
 13971 ;;      Totals:         5       0       0       0       0
 13972 ;;Total ram usage:        5 bytes
 13973 ;; Hardware stack levels used:    1
 13974 ;; Hardware stack levels required when called:    8
 13975 ;; This function calls:
 13976 ;;		___ftdiv
 13977 ;;		i1_ADC_ChangeChannel
 13978 ;;		i1___ftmul
 13979 ;;		i1___lwtoft
 13980 ;; This function is called by:
 13981 ;;		_low_isr
 13982 ;; This function uses a non-reentrant model
 13983 ;;
 13984                           
 13985                           	psect	text90
 13986  000AF6                     __ptext90:
 13987                           	opt stack 0
 13988  000AF6                     _ADC_CalculateVoltage:
 13989                           	opt stack 15
 13990                           
 13991                           ;ADC.c: 81: unsigned int ADCcounts = 0;
 13992                           
 13993                           ;incstack = 0
 13994  000AF6  6A2C               	clrf	ADC_CalculateVoltage@ADCcounts,c
 13995  000AF8  6A2D               	clrf	ADC_CalculateVoltage@ADCcounts+1,c
 13996                           
 13997                           ;ADC.c: 82: double Voltage;
 13998                           ;ADC.c: 84: ADCcounts = ADRESH;
 13999  000AFA  CFC4 F02C          	movff	4036,ADC_CalculateVoltage@ADCcounts	;volatile
 14000  000AFE  6A2D               	clrf	ADC_CalculateVoltage@ADCcounts+1,c
 14001                           
 14002                           ;ADC.c: 85: ADCcounts <<= 8;
 14003  000B00  502C               	movf	ADC_CalculateVoltage@ADCcounts,w,c
 14004  000B02  6E2D               	movwf	ADC_CalculateVoltage@ADCcounts+1,c
 14005  000B04  6A2C               	clrf	ADC_CalculateVoltage@ADCcounts,c
 14006                           
 14007                           ;ADC.c: 86: ADCcounts += ADRESL;
 14008  000B06  50C3               	movf	4035,w,c	;volatile
 14009  000B08  262C               	addwf	ADC_CalculateVoltage@ADCcounts,f,c
 14010  000B0A  0E00               	movlw	0
 14011  000B0C  222D               	addwfc	ADC_CalculateVoltage@ADCcounts+1,f,c
 14012                           
 14013                           ;ADC.c: 88: Voltage = ((double)ADCcounts / (1 << 10)) * 3.3;
 14014  000B0E  6A0F               	clrf	___ftdiv@f2,c
 14015  000B10  0E80               	movlw	128
 14016  000B12  6E10               	movwf	___ftdiv@f2+1,c
 14017  000B14  0E44               	movlw	68
 14018  000B16  6E11               	movwf	___ftdiv@f2+2,c
 14019  000B18  C02C  F009         	movff	ADC_CalculateVoltage@ADCcounts,i1___lwtoft@c
 14020  000B1C  C02D  F00A         	movff	ADC_CalculateVoltage@ADCcounts+1,i1___lwtoft@c+1
 14021  000B20  ECB9  F00B         	call	i1___lwtoft	;wreg free
 14022  000B24  C009  F00C         	movff	?i1___lwtoft,___ftdiv@f1
 14023  000B28  C00A  F00D         	movff	?i1___lwtoft+1,___ftdiv@f1+1
 14024  000B2C  C00B  F00E         	movff	?i1___lwtoft+2,___ftdiv@f1+2
 14025  000B30  EC65  F004         	call	___ftdiv	;wreg free
 14026  000B34  C00C  F01B         	movff	?___ftdiv,i1___ftmul@f1
 14027  000B38  C00D  F01C         	movff	?___ftdiv+1,i1___ftmul@f1+1
 14028  000B3C  C00E  F01D         	movff	?___ftdiv+2,i1___ftmul@f1+2
 14029  000B40  0E33               	movlw	51
 14030  000B42  6E1E               	movwf	i1___ftmul@f2,c
 14031  000B44  0E53               	movlw	83
 14032  000B46  6E1F               	movwf	i1___ftmul@f2+1,c
 14033  000B48  0E40               	movlw	64
 14034  000B4A  6E20               	movwf	i1___ftmul@f2+2,c
 14035  000B4C  EC27  F003         	call	i1___ftmul	;wreg free
 14036  000B50  C01B  F029         	movff	?i1___ftmul,ADC_CalculateVoltage@Voltage
 14037  000B54  C01C  F02A         	movff	?i1___ftmul+1,ADC_CalculateVoltage@Voltage+1
 14038  000B58  C01D  F02B         	movff	?i1___ftmul+2,ADC_CalculateVoltage@Voltage+2
 14039                           
 14040                           ;ADC.c: 89: if(ADC_CurrentSource == 10)
 14041  000B5C  0E0A               	movlw	10
 14042  000B5E  186D               	xorwf	_ADC_CurrentSource,w,c
 14043  000B60  E122               	bnz	i1l6235
 14044                           
 14045                           ;ADC.c: 90: {
 14046                           ;ADC.c: 91: Rail_VIN = Voltage * (200000.0 + 500000.0) / 200000.0;
 14047  000B62  0EE6               	movlw	230
 14048  000B64  6E1E               	movwf	i1___ftmul@f2,c
 14049  000B66  0E2A               	movlw	42
 14050  000B68  6E1F               	movwf	i1___ftmul@f2+1,c
 14051  000B6A  0E49               	movlw	73
 14052  000B6C  6E20               	movwf	i1___ftmul@f2+2,c
 14053  000B6E  C029  F01B         	movff	ADC_CalculateVoltage@Voltage,i1___ftmul@f1
 14054  000B72  C02A  F01C         	movff	ADC_CalculateVoltage@Voltage+1,i1___ftmul@f1+1
 14055  000B76  C02B  F01D         	movff	ADC_CalculateVoltage@Voltage+2,i1___ftmul@f1+2
 14056  000B7A  EC27  F003         	call	i1___ftmul	;wreg free
 14057  000B7E  C01B  F00C         	movff	?i1___ftmul,___ftdiv@f1
 14058  000B82  C01C  F00D         	movff	?i1___ftmul+1,___ftdiv@f1+1
 14059  000B86  C01D  F00E         	movff	?i1___ftmul+2,___ftdiv@f1+2
 14060  000B8A  0E50               	movlw	80
 14061  000B8C  6E0F               	movwf	___ftdiv@f2,c
 14062  000B8E  0E43               	movlw	67
 14063  000B90  6E10               	movwf	___ftdiv@f2+1,c
 14064  000B92  0E48               	movlw	72
 14065  000B94  6E11               	movwf	___ftdiv@f2+2,c
 14066  000B96  EC65  F004         	call	___ftdiv	;wreg free
 14067  000B9A  C00C  F1A9         	movff	?___ftdiv,_Rail_VIN
 14068  000B9E  C00D  F1AA         	movff	?___ftdiv+1,_Rail_VIN+1
 14069  000BA2  C00E  F1AB         	movff	?___ftdiv+2,_Rail_VIN+2
 14070  000BA6                     i1l6235:
 14071                           
 14072                           ;ADC.c: 92: __nop();
 14073  000BA6  F000               	nop	
 14074                           
 14075                           ;ADC.c: 98: }
 14076                           ;ADC.c: 99: ADC_ChangeChannel();
 14077                           
 14078                           ;ADC.c: 93: }
 14079  000BA8  EF7F  F00C         	goto	i1_ADC_ChangeChannel	;wreg free
 14080  000BAC                     __end_of_ADC_CalculateVoltage:
 14081                           	opt stack 0
 14082                           tblptru	equ	0xFF8
 14083                           tblptrh	equ	0xFF7
 14084                           tblptrl	equ	0xFF6
 14085                           tablat	equ	0xFF5
 14086                           prodh	equ	0xFF4
 14087                           prodl	equ	0xFF3
 14088                           intcon	equ	0xFF2
 14089                           intcon2	equ	0xFF1
 14090                           intcon3	equ	0xFF0
 14091                           postinc0	equ	0xFEE
 14092                           wreg	equ	0xFE8
 14093                           postdec1	equ	0xFE5
 14094                           fsr1l	equ	0xFE1
 14095                           bsr	equ	0xFE0
 14096                           indf2	equ	0xFDF
 14097                           postinc2	equ	0xFDE
 14098                           postdec2	equ	0xFDD
 14099                           plusw2	equ	0xFDB
 14100                           fsr2h	equ	0xFDA
 14101                           fsr2l	equ	0xFD9
 14102                           status	equ	0xFD8
 14103                           
 14104 ;; *************** function i1___lwtoft *****************
 14105 ;; Defined at:
 14106 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
 14107 ;; Parameters:    Size  Location     Type
 14108 ;;  c               2    8[COMRAM] unsigned int 
 14109 ;; Auto vars:     Size  Location     Type
 14110 ;;		None
 14111 ;; Return value:  Size  Location     Type
 14112 ;;                  3    8[COMRAM] float 
 14113 ;; Registers used:
 14114 ;;		wreg, status,2, status,0, cstack
 14115 ;; Tracked objects:
 14116 ;;		On entry : 0/1
 14117 ;;		On exit  : 0/0
 14118 ;;		Unchanged: 0/0
 14119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14120 ;;      Params:         3       0       0       0       0
 14121 ;;      Locals:         0       0       0       0       0
 14122 ;;      Temps:          0       0       0       0       0
 14123 ;;      Totals:         3       0       0       0       0
 14124 ;;Total ram usage:        3 bytes
 14125 ;; Hardware stack levels used:    1
 14126 ;; Hardware stack levels required when called:    7
 14127 ;; This function calls:
 14128 ;;		i1___ftpack
 14129 ;; This function is called by:
 14130 ;;		_IR_CheckCode
 14131 ;;		_ADC_CalculateVoltage
 14132 ;;		i1_IR_LoadCode
 14133 ;; This function uses a non-reentrant model
 14134 ;;
 14135                           
 14136                           	psect	text91
 14137  001772                     __ptext91:
 14138                           	opt stack 0
 14139  001772                     i1___lwtoft:
 14140                           	opt stack 15
 14141                           
 14142                           ;incstack = 0
 14143  001772  C009  F001         	movff	i1___lwtoft@c,i1___ftpack@arg
 14144  001776  C00A  F002         	movff	i1___lwtoft@c+1,i1___ftpack@arg+1
 14145  00177A  6A03               	clrf	i1___ftpack@arg+2,c
 14146  00177C  0E8E               	movlw	142
 14147  00177E  6E04               	movwf	i1___ftpack@exp,c
 14148  001780  0E00               	movlw	0
 14149  001782  6E05               	movwf	i1___ftpack@sign,c
 14150  001784  ECA4  F007         	call	i1___ftpack	;wreg free
 14151  001788  C001  F009         	movff	?i1___ftpack,?i1___lwtoft
 14152  00178C  C002  F00A         	movff	?i1___ftpack+1,?i1___lwtoft+1
 14153  001790  C003  F00B         	movff	?i1___ftpack+2,?i1___lwtoft+2
 14154  001794  0012               	return		;funcret
 14155  001796                     __end_ofi1___lwtoft:
 14156                           	opt stack 0
 14157                           tblptru	equ	0xFF8
 14158                           tblptrh	equ	0xFF7
 14159                           tblptrl	equ	0xFF6
 14160                           tablat	equ	0xFF5
 14161                           prodh	equ	0xFF4
 14162                           prodl	equ	0xFF3
 14163                           intcon	equ	0xFF2
 14164                           intcon2	equ	0xFF1
 14165                           intcon3	equ	0xFF0
 14166                           postinc0	equ	0xFEE
 14167                           wreg	equ	0xFE8
 14168                           postdec1	equ	0xFE5
 14169                           fsr1l	equ	0xFE1
 14170                           bsr	equ	0xFE0
 14171                           indf2	equ	0xFDF
 14172                           postinc2	equ	0xFDE
 14173                           postdec2	equ	0xFDD
 14174                           plusw2	equ	0xFDB
 14175                           fsr2h	equ	0xFDA
 14176                           fsr2l	equ	0xFD9
 14177                           status	equ	0xFD8
 14178                           
 14179 ;; *************** function i1___ftmul *****************
 14180 ;; Defined at:
 14181 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
 14182 ;; Parameters:    Size  Location     Type
 14183 ;;  f1              3   26[COMRAM] float 
 14184 ;;  f2              3   29[COMRAM] float 
 14185 ;; Auto vars:     Size  Location     Type
 14186 ;;  __ftmul         3   37[COMRAM] unsigned um
 14187 ;;  __ftmul         1   36[COMRAM] unsigned char 
 14188 ;;  __ftmul         1   35[COMRAM] unsigned char 
 14189 ;;  __ftmul         1    0        unsigned char 
 14190 ;; Return value:  Size  Location     Type
 14191 ;;                  3   26[COMRAM] float 
 14192 ;; Registers used:
 14193 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14194 ;; Tracked objects:
 14195 ;;		On entry : 0/1
 14196 ;;		On exit  : 0/0
 14197 ;;		Unchanged: 0/0
 14198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14199 ;;      Params:         6       0       0       0       0
 14200 ;;      Locals:         5       0       0       0       0
 14201 ;;      Temps:          3       0       0       0       0
 14202 ;;      Totals:        14       0       0       0       0
 14203 ;;Total ram usage:       14 bytes
 14204 ;; Hardware stack levels used:    1
 14205 ;; Hardware stack levels required when called:    7
 14206 ;; This function calls:
 14207 ;;		i1___ftpack
 14208 ;; This function is called by:
 14209 ;;		_IR_CheckCode
 14210 ;;		_ADC_CalculateVoltage
 14211 ;;		i1_IR_LoadCode
 14212 ;; This function uses a non-reentrant model
 14213 ;;
 14214                           
 14215                           	psect	text92
 14216  00064E                     __ptext92:
 14217                           	opt stack 0
 14218  00064E                     i1___ftmul:
 14219                           	opt stack 15
 14220                           
 14221                           ;incstack = 0
 14222  00064E  C01D  F021         	movff	i1___ftmul@f1+2,??i1___ftmul
 14223  000652  6A22               	clrf	(??i1___ftmul+1)& (0+255),c
 14224  000654  6A23               	clrf	(??i1___ftmul+2)& (0+255),c
 14225  000656  341C               	rlcf	i1___ftmul@f1+1,w,c
 14226  000658  3621               	rlcf	??i1___ftmul& (0+255),f,c
 14227  00065A  E301               	bnc	u457_21
 14228  00065C  8022               	bsf	(??i1___ftmul+1)& (0+255),0,c
 14229  00065E                     u457_21:
 14230  00065E  5021               	movf	??i1___ftmul,w,c
 14231  000660  6E24               	movwf	i1___ftmul@exp,c
 14232  000662  5024               	movf	i1___ftmul@exp,w,c
 14233  000664  E104               	bnz	i1l4919
 14234  000666  6A1B               	clrf	?i1___ftmul,c
 14235  000668  6A1C               	clrf	?i1___ftmul+1,c
 14236  00066A  6A1D               	clrf	?i1___ftmul+2,c
 14237  00066C  0012               	return	
 14238  00066E                     i1l4919:
 14239  00066E  C020  F021         	movff	i1___ftmul@f2+2,??i1___ftmul
 14240  000672  6A22               	clrf	(??i1___ftmul+1)& (0+255),c
 14241  000674  6A23               	clrf	(??i1___ftmul+2)& (0+255),c
 14242  000676  341F               	rlcf	i1___ftmul@f2+1,w,c
 14243  000678  3621               	rlcf	??i1___ftmul& (0+255),f,c
 14244  00067A  E301               	bnc	u459_21
 14245  00067C  8022               	bsf	(??i1___ftmul+1)& (0+255),0,c
 14246  00067E                     u459_21:
 14247  00067E  5021               	movf	??i1___ftmul,w,c
 14248  000680  6E25               	movwf	i1___ftmul@sign,c
 14249  000682  5025               	movf	i1___ftmul@sign,w,c
 14250  000684  E104               	bnz	i1l4923
 14251  000686  6A1B               	clrf	?i1___ftmul,c
 14252  000688  6A1C               	clrf	?i1___ftmul+1,c
 14253  00068A  6A1D               	clrf	?i1___ftmul+2,c
 14254  00068C  0012               	return	
 14255  00068E                     i1l4923:
 14256  00068E  5025               	movf	i1___ftmul@sign,w,c
 14257  000690  0F7B               	addlw	123
 14258  000692  2624               	addwf	i1___ftmul@exp,f,c
 14259  000694  C01D  F025         	movff	i1___ftmul@f1+2,i1___ftmul@sign
 14260  000698  5020               	movf	i1___ftmul@f2+2,w,c
 14261  00069A  1A25               	xorwf	i1___ftmul@sign,f,c
 14262  00069C  0E80               	movlw	128
 14263  00069E  1625               	andwf	i1___ftmul@sign,f,c
 14264  0006A0  8E1C               	bsf	i1___ftmul@f1+1,7,c
 14265  0006A2  8E1F               	bsf	i1___ftmul@f2+1,7,c
 14266  0006A4  6A20               	clrf	i1___ftmul@f2+2,c
 14267  0006A6  6A1D               	clrf	i1___ftmul@f1+2,c
 14268  0006A8  501B               	movf	i1___ftmul@f1,w,c
 14269  0006AA  021E               	mulwf	i1___ftmul@f2,c
 14270  0006AC  CFF4 FFF3          	movff	prodh,prodl
 14271  0006B0  6AF4               	clrf	prodh,c
 14272  0006B2  CFF3 F026          	movff	prodl,i1___ftmul@f3_as_product
 14273  0006B6  CFF4 F027          	movff	prodh,i1___ftmul@f3_as_product+1
 14274  0006BA  6A28               	clrf	i1___ftmul@f3_as_product+2,c
 14275  0006BC  501B               	movf	i1___ftmul@f1,w,c
 14276  0006BE  021F               	mulwf	i1___ftmul@f2+1,c
 14277  0006C0  50F3               	movf	prodl,w,c
 14278  0006C2  2626               	addwf	i1___ftmul@f3_as_product,f,c
 14279  0006C4  50F4               	movf	prodh,w,c
 14280  0006C6  2227               	addwfc	i1___ftmul@f3_as_product+1,f,c
 14281  0006C8  0E00               	movlw	0
 14282  0006CA  2228               	addwfc	i1___ftmul@f3_as_product+2,f,c
 14283  0006CC  501C               	movf	i1___ftmul@f1+1,w,c
 14284  0006CE  021E               	mulwf	i1___ftmul@f2,c
 14285  0006D0  50F3               	movf	prodl,w,c
 14286  0006D2  2626               	addwf	i1___ftmul@f3_as_product,f,c
 14287  0006D4  50F4               	movf	prodh,w,c
 14288  0006D6  2227               	addwfc	i1___ftmul@f3_as_product+1,f,c
 14289  0006D8  0E00               	movlw	0
 14290  0006DA  2228               	addwfc	i1___ftmul@f3_as_product+2,f,c
 14291  0006DC  501C               	movf	i1___ftmul@f1+1,w,c
 14292  0006DE  021F               	mulwf	i1___ftmul@f2+1,c
 14293  0006E0  50F3               	movf	prodl,w,c
 14294  0006E2  2627               	addwf	i1___ftmul@f3_as_product+1,f,c
 14295  0006E4  50F4               	movf	prodh,w,c
 14296  0006E6  2228               	addwfc	i1___ftmul@f3_as_product+2,f,c
 14297  0006E8  AE28               	btfss	i1___ftmul@f3_as_product+2,7,c
 14298  0006EA  D005               	goto	i1l1397
 14299  0006EC  90D8               	bcf	status,0,c
 14300  0006EE  3228               	rrcf	i1___ftmul@f3_as_product+2,f,c
 14301  0006F0  3227               	rrcf	i1___ftmul@f3_as_product+1,f,c
 14302  0006F2  3226               	rrcf	i1___ftmul@f3_as_product,f,c
 14303  0006F4  2A24               	incf	i1___ftmul@exp,f,c
 14304  0006F6                     i1l1397:
 14305  0006F6  90D8               	bcf	status,0,c
 14306  0006F8  3228               	rrcf	i1___ftmul@f3_as_product+2,f,c
 14307  0006FA  3227               	rrcf	i1___ftmul@f3_as_product+1,f,c
 14308  0006FC  3226               	rrcf	i1___ftmul@f3_as_product,f,c
 14309  0006FE  C026  F001         	movff	i1___ftmul@f3_as_product,i1___ftpack@arg
 14310  000702  C027  F002         	movff	i1___ftmul@f3_as_product+1,i1___ftpack@arg+1
 14311  000706  C028  F003         	movff	i1___ftmul@f3_as_product+2,i1___ftpack@arg+2
 14312  00070A  C024  F004         	movff	i1___ftmul@exp,i1___ftpack@exp
 14313  00070E  C025  F005         	movff	i1___ftmul@sign,i1___ftpack@sign
 14314  000712  ECA4  F007         	call	i1___ftpack	;wreg free
 14315  000716  C001  F01B         	movff	?i1___ftpack,?i1___ftmul
 14316  00071A  C002  F01C         	movff	?i1___ftpack+1,?i1___ftmul+1
 14317  00071E  C003  F01D         	movff	?i1___ftpack+2,?i1___ftmul+2
 14318  000722  0012               	return		;funcret
 14319  000724                     __end_ofi1___ftmul:
 14320                           	opt stack 0
 14321                           tblptru	equ	0xFF8
 14322                           tblptrh	equ	0xFF7
 14323                           tblptrl	equ	0xFF6
 14324                           tablat	equ	0xFF5
 14325                           prodh	equ	0xFF4
 14326                           prodl	equ	0xFF3
 14327                           intcon	equ	0xFF2
 14328                           intcon2	equ	0xFF1
 14329                           intcon3	equ	0xFF0
 14330                           postinc0	equ	0xFEE
 14331                           wreg	equ	0xFE8
 14332                           postdec1	equ	0xFE5
 14333                           fsr1l	equ	0xFE1
 14334                           bsr	equ	0xFE0
 14335                           indf2	equ	0xFDF
 14336                           postinc2	equ	0xFDE
 14337                           postdec2	equ	0xFDD
 14338                           plusw2	equ	0xFDB
 14339                           fsr2h	equ	0xFDA
 14340                           fsr2l	equ	0xFD9
 14341                           status	equ	0xFD8
 14342                           
 14343 ;; *************** function i1_ADC_ChangeChannel *****************
 14344 ;; Defined at:
 14345 ;;		line 107 in file "ADC.c"
 14346 ;; Parameters:    Size  Location     Type
 14347 ;;		None
 14348 ;; Auto vars:     Size  Location     Type
 14349 ;;		None
 14350 ;; Return value:  Size  Location     Type
 14351 ;;		None               void
 14352 ;; Registers used:
 14353 ;;		wreg, status,2, status,0
 14354 ;; Tracked objects:
 14355 ;;		On entry : 0/0
 14356 ;;		On exit  : 0/0
 14357 ;;		Unchanged: 0/0
 14358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14359 ;;      Params:         0       0       0       0       0
 14360 ;;      Locals:         0       0       0       0       0
 14361 ;;      Temps:          0       0       0       0       0
 14362 ;;      Totals:         0       0       0       0       0
 14363 ;;Total ram usage:        0 bytes
 14364 ;; Hardware stack levels used:    1
 14365 ;; Hardware stack levels required when called:    6
 14366 ;; This function calls:
 14367 ;;		Nothing
 14368 ;; This function is called by:
 14369 ;;		_ADC_CalculateVoltage
 14370 ;; This function uses a non-reentrant model
 14371 ;;
 14372                           
 14373                           	psect	text93
 14374  0018FE                     __ptext93:
 14375                           	opt stack 0
 14376  0018FE                     i1_ADC_ChangeChannel:
 14377                           	opt stack 16
 14378                           
 14379                           ;ADC.c: 109: if(ADC_CurrentSource == 10)
 14380                           
 14381                           ;incstack = 0
 14382  0018FE  0E0A               	movlw	10
 14383  001900  186D               	xorwf	_ADC_CurrentSource,w,c
 14384  001902  E107               	bnz	i1l5953
 14385                           
 14386                           ;ADC.c: 110: {
 14387                           ;ADC.c: 111: ADC_CurrentSource = 11;
 14388  001904  0E0B               	movlw	11
 14389  001906  6E6D               	movwf	_ADC_CurrentSource,c
 14390                           
 14391                           ;ADC.c: 112: ADCON0bits.CHS = 1;
 14392  001908  50C2               	movf	4034,w,c	;volatile
 14393  00190A  0BC3               	andlw	-61
 14394  00190C  0904               	iorlw	4
 14395  00190E  6EC2               	movwf	4034,c	;volatile
 14396                           
 14397                           ;ADC.c: 113: }
 14398  001910  0012               	return	
 14399  001912                     i1l5953:
 14400                           
 14401                           ;ADC.c: 114: else
 14402                           ;ADC.c: 115: {
 14403                           ;ADC.c: 116: ADC_CurrentSource = 10;
 14404  001912  0E0A               	movlw	10
 14405  001914  6E6D               	movwf	_ADC_CurrentSource,c
 14406                           
 14407                           ;ADC.c: 117: ADCON0bits.CHS = 0;
 14408  001916  0EC3               	movlw	-61
 14409  001918  16C2               	andwf	4034,f,c	;volatile
 14410  00191A  0CC3               	retlw	195	;funcret
 14411  00191C                     __end_ofi1_ADC_ChangeChannel:
 14412                           	opt stack 0
 14413                           tblptru	equ	0xFF8
 14414                           tblptrh	equ	0xFF7
 14415                           tblptrl	equ	0xFF6
 14416                           tablat	equ	0xFF5
 14417                           prodh	equ	0xFF4
 14418                           prodl	equ	0xFF3
 14419                           intcon	equ	0xFF2
 14420                           intcon2	equ	0xFF1
 14421                           intcon3	equ	0xFF0
 14422                           postinc0	equ	0xFEE
 14423                           wreg	equ	0xFE8
 14424                           postdec1	equ	0xFE5
 14425                           fsr1l	equ	0xFE1
 14426                           bsr	equ	0xFE0
 14427                           indf2	equ	0xFDF
 14428                           postinc2	equ	0xFDE
 14429                           postdec2	equ	0xFDD
 14430                           plusw2	equ	0xFDB
 14431                           fsr2h	equ	0xFDA
 14432                           fsr2l	equ	0xFD9
 14433                           status	equ	0xFD8
 14434                           
 14435 ;; *************** function ___ftdiv *****************
 14436 ;; Defined at:
 14437 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
 14438 ;; Parameters:    Size  Location     Type
 14439 ;;  f1              3   11[COMRAM] float 
 14440 ;;  f2              3   14[COMRAM] float 
 14441 ;; Auto vars:     Size  Location     Type
 14442 ;;  f3              3   21[COMRAM] float 
 14443 ;;  sign            1   25[COMRAM] unsigned char 
 14444 ;;  exp             1   24[COMRAM] unsigned char 
 14445 ;;  cntr            1   20[COMRAM] unsigned char 
 14446 ;; Return value:  Size  Location     Type
 14447 ;;                  3   11[COMRAM] float 
 14448 ;; Registers used:
 14449 ;;		wreg, status,2, status,0, cstack
 14450 ;; Tracked objects:
 14451 ;;		On entry : 0/0
 14452 ;;		On exit  : 0/0
 14453 ;;		Unchanged: 0/0
 14454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14455 ;;      Params:         6       0       0       0       0
 14456 ;;      Locals:         6       0       0       0       0
 14457 ;;      Temps:          3       0       0       0       0
 14458 ;;      Totals:        15       0       0       0       0
 14459 ;;Total ram usage:       15 bytes
 14460 ;; Hardware stack levels used:    1
 14461 ;; Hardware stack levels required when called:    7
 14462 ;; This function calls:
 14463 ;;		i1___ftpack
 14464 ;; This function is called by:
 14465 ;;		_ADC_CalculateVoltage
 14466 ;; This function uses a non-reentrant model
 14467 ;;
 14468                           
 14469                           	psect	text94
 14470  0008CA                     __ptext94:
 14471                           	opt stack 0
 14472  0008CA                     ___ftdiv:
 14473                           	opt stack 15
 14474                           
 14475                           ;incstack = 0
 14476  0008CA  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
 14477  0008CE  6A13               	clrf	(??___ftdiv+1)& (0+255),c
 14478  0008D0  6A14               	clrf	(??___ftdiv+2)& (0+255),c
 14479  0008D2  340D               	rlcf	___ftdiv@f1+1,w,c
 14480  0008D4  3612               	rlcf	??___ftdiv& (0+255),f,c
 14481  0008D6  E301               	bnc	u529_21
 14482  0008D8  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
 14483  0008DA                     u529_21:
 14484  0008DA  5012               	movf	??___ftdiv,w,c
 14485  0008DC  6E19               	movwf	___ftdiv@exp,c
 14486  0008DE  5019               	movf	___ftdiv@exp,w,c
 14487  0008E0  E104               	bnz	i1l5481
 14488  0008E2  6A0C               	clrf	?___ftdiv,c
 14489  0008E4  6A0D               	clrf	?___ftdiv+1,c
 14490  0008E6  6A0E               	clrf	?___ftdiv+2,c
 14491  0008E8  0012               	return	
 14492  0008EA                     i1l5481:
 14493  0008EA  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
 14494  0008EE  6A13               	clrf	(??___ftdiv+1)& (0+255),c
 14495  0008F0  6A14               	clrf	(??___ftdiv+2)& (0+255),c
 14496  0008F2  3410               	rlcf	___ftdiv@f2+1,w,c
 14497  0008F4  3612               	rlcf	??___ftdiv& (0+255),f,c
 14498  0008F6  E301               	bnc	u531_21
 14499  0008F8  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
 14500  0008FA                     u531_21:
 14501  0008FA  5012               	movf	??___ftdiv,w,c
 14502  0008FC  6E1A               	movwf	___ftdiv@sign,c
 14503  0008FE  501A               	movf	___ftdiv@sign,w,c
 14504  000900  E104               	bnz	i1l1381
 14505  000902  6A0C               	clrf	?___ftdiv,c
 14506  000904  6A0D               	clrf	?___ftdiv+1,c
 14507  000906  6A0E               	clrf	?___ftdiv+2,c
 14508  000908  0012               	return	
 14509  00090A                     i1l1381:
 14510  00090A  6A16               	clrf	___ftdiv@f3,c
 14511  00090C  6A17               	clrf	___ftdiv@f3+1,c
 14512  00090E  6A18               	clrf	___ftdiv@f3+2,c
 14513  000910  501A               	movf	___ftdiv@sign,w,c
 14514  000912  0F89               	addlw	137
 14515  000914  5E19               	subwf	___ftdiv@exp,f,c
 14516  000916  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
 14517  00091A  5011               	movf	___ftdiv@f2+2,w,c
 14518  00091C  1A1A               	xorwf	___ftdiv@sign,f,c
 14519  00091E  0E80               	movlw	128
 14520  000920  161A               	andwf	___ftdiv@sign,f,c
 14521  000922  8E0D               	bsf	___ftdiv@f1+1,7,c
 14522  000924  6A0E               	clrf	___ftdiv@f1+2,c
 14523  000926  8E10               	bsf	___ftdiv@f2+1,7,c
 14524  000928  6A11               	clrf	___ftdiv@f2+2,c
 14525  00092A  0E18               	movlw	24
 14526  00092C  6E15               	movwf	___ftdiv@cntr,c
 14527  00092E                     i1l5499:
 14528  00092E  90D8               	bcf	status,0,c
 14529  000930  3616               	rlcf	___ftdiv@f3,f,c
 14530  000932  3617               	rlcf	___ftdiv@f3+1,f,c
 14531  000934  3618               	rlcf	___ftdiv@f3+2,f,c
 14532  000936  500F               	movf	___ftdiv@f2,w,c
 14533  000938  5C0C               	subwf	___ftdiv@f1,w,c
 14534  00093A  5010               	movf	___ftdiv@f2+1,w,c
 14535  00093C  580D               	subwfb	___ftdiv@f1+1,w,c
 14536  00093E  5011               	movf	___ftdiv@f2+2,w,c
 14537  000940  580E               	subwfb	___ftdiv@f1+2,w,c
 14538  000942  E307               	bnc	i1l1383
 14539  000944  500F               	movf	___ftdiv@f2,w,c
 14540  000946  5E0C               	subwf	___ftdiv@f1,f,c
 14541  000948  5010               	movf	___ftdiv@f2+1,w,c
 14542  00094A  5A0D               	subwfb	___ftdiv@f1+1,f,c
 14543  00094C  5011               	movf	___ftdiv@f2+2,w,c
 14544  00094E  5A0E               	subwfb	___ftdiv@f1+2,f,c
 14545  000950  8016               	bsf	___ftdiv@f3,0,c
 14546  000952                     i1l1383:
 14547  000952  90D8               	bcf	status,0,c
 14548  000954  360C               	rlcf	___ftdiv@f1,f,c
 14549  000956  360D               	rlcf	___ftdiv@f1+1,f,c
 14550  000958  360E               	rlcf	___ftdiv@f1+2,f,c
 14551  00095A  2E15               	decfsz	___ftdiv@cntr,f,c
 14552  00095C  D7E8               	goto	i1l5499
 14553  00095E  C016  F001         	movff	___ftdiv@f3,i1___ftpack@arg
 14554  000962  C017  F002         	movff	___ftdiv@f3+1,i1___ftpack@arg+1
 14555  000966  C018  F003         	movff	___ftdiv@f3+2,i1___ftpack@arg+2
 14556  00096A  C019  F004         	movff	___ftdiv@exp,i1___ftpack@exp
 14557  00096E  C01A  F005         	movff	___ftdiv@sign,i1___ftpack@sign
 14558  000972  ECA4  F007         	call	i1___ftpack	;wreg free
 14559  000976  C001  F00C         	movff	?i1___ftpack,?___ftdiv
 14560  00097A  C002  F00D         	movff	?i1___ftpack+1,?___ftdiv+1
 14561  00097E  C003  F00E         	movff	?i1___ftpack+2,?___ftdiv+2
 14562  000982  0012               	return		;funcret
 14563  000984                     __end_of___ftdiv:
 14564                           	opt stack 0
 14565                           tblptru	equ	0xFF8
 14566                           tblptrh	equ	0xFF7
 14567                           tblptrl	equ	0xFF6
 14568                           tablat	equ	0xFF5
 14569                           prodh	equ	0xFF4
 14570                           prodl	equ	0xFF3
 14571                           intcon	equ	0xFF2
 14572                           intcon2	equ	0xFF1
 14573                           intcon3	equ	0xFF0
 14574                           postinc0	equ	0xFEE
 14575                           wreg	equ	0xFE8
 14576                           postdec1	equ	0xFE5
 14577                           fsr1l	equ	0xFE1
 14578                           bsr	equ	0xFE0
 14579                           indf2	equ	0xFDF
 14580                           postinc2	equ	0xFDE
 14581                           postdec2	equ	0xFDD
 14582                           plusw2	equ	0xFDB
 14583                           fsr2h	equ	0xFDA
 14584                           fsr2l	equ	0xFD9
 14585                           status	equ	0xFD8
 14586                           
 14587 ;; *************** function i1___ftpack *****************
 14588 ;; Defined at:
 14589 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 14590 ;; Parameters:    Size  Location     Type
 14591 ;;  arg             3    0[COMRAM] unsigned um
 14592 ;;  exp             1    3[COMRAM] unsigned char 
 14593 ;;  sign            1    4[COMRAM] unsigned char 
 14594 ;; Auto vars:     Size  Location     Type
 14595 ;;		None
 14596 ;; Return value:  Size  Location     Type
 14597 ;;                  3    0[COMRAM] float 
 14598 ;; Registers used:
 14599 ;;		wreg, status,2, status,0
 14600 ;; Tracked objects:
 14601 ;;		On entry : 0/1
 14602 ;;		On exit  : 0/0
 14603 ;;		Unchanged: 0/0
 14604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14605 ;;      Params:         5       0       0       0       0
 14606 ;;      Locals:         0       0       0       0       0
 14607 ;;      Temps:          3       0       0       0       0
 14608 ;;      Totals:         8       0       0       0       0
 14609 ;;Total ram usage:        8 bytes
 14610 ;; Hardware stack levels used:    1
 14611 ;; Hardware stack levels required when called:    6
 14612 ;; This function calls:
 14613 ;;		Nothing
 14614 ;; This function is called by:
 14615 ;;		___ftdiv
 14616 ;;		i1___ftmul
 14617 ;;		i1___lwtoft
 14618 ;; This function uses a non-reentrant model
 14619 ;;
 14620                           
 14621                           	psect	text95
 14622  000F48                     __ptext95:
 14623                           	opt stack 0
 14624  000F48                     i1___ftpack:
 14625                           	opt stack 15
 14626                           
 14627                           ;incstack = 0
 14628  000F48  5004               	movf	i1___ftpack@exp,w,c
 14629  000F4A  E004               	bz	i1l1313
 14630  000F4C  5001               	movf	i1___ftpack@arg,w,c
 14631  000F4E  1002               	iorwf	i1___ftpack@arg+1,w,c
 14632  000F50  1003               	iorwf	i1___ftpack@arg+2,w,c
 14633  000F52  E109               	bnz	i1l4385
 14634  000F54                     i1l1313:
 14635  000F54  6A01               	clrf	?i1___ftpack,c
 14636  000F56  6A02               	clrf	?i1___ftpack+1,c
 14637  000F58  6A03               	clrf	?i1___ftpack+2,c
 14638  000F5A  0012               	return	
 14639  000F5C                     i1l4383:
 14640  000F5C  2A04               	incf	i1___ftpack@exp,f,c
 14641  000F5E  90D8               	bcf	status,0,c
 14642  000F60  3203               	rrcf	i1___ftpack@arg+2,f,c
 14643  000F62  3202               	rrcf	i1___ftpack@arg+1,f,c
 14644  000F64  3201               	rrcf	i1___ftpack@arg,f,c
 14645  000F66                     i1l4385:
 14646  000F66  6A06               	clrf	??i1___ftpack& (0+255),c
 14647  000F68  6A07               	clrf	(??i1___ftpack+1)& (0+255),c
 14648  000F6A  0EFE               	movlw	254
 14649  000F6C  1403               	andwf	i1___ftpack@arg+2,w,c
 14650  000F6E  6E08               	movwf	(??i1___ftpack+2)& (0+255),c
 14651  000F70  5006               	movf	??i1___ftpack,w,c
 14652  000F72  1007               	iorwf	??i1___ftpack+1,w,c
 14653  000F74  1008               	iorwf	??i1___ftpack+2,w,c
 14654  000F76  E00A               	bz	i1l4391
 14655  000F78  D7F1               	goto	i1l4383
 14656  000F7A                     i1l4387:
 14657  000F7A  2A04               	incf	i1___ftpack@exp,f,c
 14658  000F7C  2A01               	incf	i1___ftpack@arg,f,c
 14659  000F7E  0E00               	movlw	0
 14660  000F80  2202               	addwfc	i1___ftpack@arg+1,f,c
 14661  000F82  2203               	addwfc	i1___ftpack@arg+2,f,c
 14662  000F84  90D8               	bcf	status,0,c
 14663  000F86  3203               	rrcf	i1___ftpack@arg+2,f,c
 14664  000F88  3202               	rrcf	i1___ftpack@arg+1,f,c
 14665  000F8A  3201               	rrcf	i1___ftpack@arg,f,c
 14666  000F8C                     i1l4391:
 14667  000F8C  6A06               	clrf	??i1___ftpack& (0+255),c
 14668  000F8E  6A07               	clrf	(??i1___ftpack+1)& (0+255),c
 14669  000F90  5003               	movf	i1___ftpack@arg+2,w,c
 14670  000F92  6E08               	movwf	(??i1___ftpack+2)& (0+255),c
 14671  000F94  5006               	movf	??i1___ftpack,w,c
 14672  000F96  1007               	iorwf	??i1___ftpack+1,w,c
 14673  000F98  1008               	iorwf	??i1___ftpack+2,w,c
 14674  000F9A  E006               	bz	i1l4395
 14675  000F9C  D7EE               	goto	i1l4387
 14676  000F9E                     i1l4393:
 14677  000F9E  0604               	decf	i1___ftpack@exp,f,c
 14678  000FA0  90D8               	bcf	status,0,c
 14679  000FA2  3601               	rlcf	i1___ftpack@arg,f,c
 14680  000FA4  3602               	rlcf	i1___ftpack@arg+1,f,c
 14681  000FA6  3603               	rlcf	i1___ftpack@arg+2,f,c
 14682  000FA8                     i1l4395:
 14683  000FA8  BE02               	btfsc	i1___ftpack@arg+1,7,c
 14684  000FAA  D003               	goto	i1l1325
 14685  000FAC  0E02               	movlw	2
 14686  000FAE  6004               	cpfslt	i1___ftpack@exp,c
 14687  000FB0  D7F6               	goto	i1l4393
 14688  000FB2                     i1l1325:
 14689  000FB2  A004               	btfss	i1___ftpack@exp,0,c
 14690  000FB4  9E02               	bcf	i1___ftpack@arg+1,7,c
 14691  000FB6  90D8               	bcf	status,0,c
 14692  000FB8  3204               	rrcf	i1___ftpack@exp,f,c
 14693  000FBA  5004               	movf	i1___ftpack@exp,w,c
 14694  000FBC  1203               	iorwf	i1___ftpack@arg+2,f,c
 14695  000FBE  5005               	movf	i1___ftpack@sign,w,c
 14696  000FC0  E001               	bz	i1l4409
 14697  000FC2  8E03               	bsf	i1___ftpack@arg+2,7,c
 14698  000FC4                     i1l4409:
 14699  000FC4  C001  F001         	movff	i1___ftpack@arg,?i1___ftpack
 14700  000FC8  C002  F002         	movff	i1___ftpack@arg+1,?i1___ftpack+1
 14701  000FCC  C003  F003         	movff	i1___ftpack@arg+2,?i1___ftpack+2
 14702  000FD0  0012               	return		;funcret
 14703  000FD2                     __end_ofi1___ftpack:
 14704                           	opt stack 0
 14705                           tblptru	equ	0xFF8
 14706                           tblptrh	equ	0xFF7
 14707                           tblptrl	equ	0xFF6
 14708                           tablat	equ	0xFF5
 14709                           prodh	equ	0xFF4
 14710                           prodl	equ	0xFF3
 14711                           intcon	equ	0xFF2
 14712                           intcon2	equ	0xFF1
 14713                           intcon3	equ	0xFF0
 14714                           postinc0	equ	0xFEE
 14715                           wreg	equ	0xFE8
 14716                           postdec1	equ	0xFE5
 14717                           fsr1l	equ	0xFE1
 14718                           bsr	equ	0xFE0
 14719                           indf2	equ	0xFDF
 14720                           postinc2	equ	0xFDE
 14721                           postdec2	equ	0xFDD
 14722                           plusw2	equ	0xFDB
 14723                           fsr2h	equ	0xFDA
 14724                           fsr2l	equ	0xFD9
 14725                           status	equ	0xFD8
 14726                           
 14727 ;; *************** function _high_isr *****************
 14728 ;; Defined at:
 14729 ;;		line 48 in file "INTERRUPTS.c"
 14730 ;; Parameters:    Size  Location     Type
 14731 ;;		None
 14732 ;; Auto vars:     Size  Location     Type
 14733 ;;  RFtemp          2   51[BANK0 ] unsigned int 
 14734 ;; Return value:  Size  Location     Type
 14735 ;;		None               void
 14736 ;; Registers used:
 14737 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14738 ;; Tracked objects:
 14739 ;;		On entry : 0/0
 14740 ;;		On exit  : 0/0
 14741 ;;		Unchanged: 0/0
 14742 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14743 ;;      Params:         0       0       0       0       0
 14744 ;;      Locals:         0       2       0       0       0
 14745 ;;      Temps:          0       8       0       0       0
 14746 ;;      Totals:         0      10       0       0       0
 14747 ;;Total ram usage:       10 bytes
 14748 ;; Hardware stack levels used:    1
 14749 ;; Hardware stack levels required when called:    5
 14750 ;; This function calls:
 14751 ;;		_RF_CheckCode
 14752 ;;		_TMR_Timer0Start
 14753 ;;		_TMR_Timer0Status
 14754 ;;		i2_RF_Disable
 14755 ;;		i2_RF_ResetData
 14756 ;;		i2_SYS_ActivityTimerReset
 14757 ;;		i2_TMR_ResetTimer0
 14758 ;;		i2_TMR_Timer0
 14759 ;; This function is called by:
 14760 ;;		Interrupt level 2
 14761 ;; This function uses a non-reentrant model
 14762 ;;
 14763                           
 14764                           	psect	intcode
 14765  000008                     __pintcode:
 14766                           	opt stack 0
 14767  000008                     _high_isr:
 14768                           	opt stack 13
 14769                           
 14770                           ;incstack = 0
 14771  000008  826E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14772  00000A  CFD9 F0AB          	movff	fsr2l,??_high_isr
 14773  00000E  CFDA F0AC          	movff	fsr2h,??_high_isr+1
 14774  000012  EFAE  F001         	goto	int_func
 14775                           tblptru	equ	0xFF8
 14776                           tblptrh	equ	0xFF7
 14777                           tblptrl	equ	0xFF6
 14778                           tablat	equ	0xFF5
 14779                           prodh	equ	0xFF4
 14780                           prodl	equ	0xFF3
 14781                           intcon	equ	0xFF2
 14782                           intcon2	equ	0xFF1
 14783                           intcon3	equ	0xFF0
 14784                           postinc0	equ	0xFEE
 14785                           wreg	equ	0xFE8
 14786                           postdec1	equ	0xFE5
 14787                           fsr1l	equ	0xFE1
 14788                           bsr	equ	0xFE0
 14789                           indf2	equ	0xFDF
 14790                           postinc2	equ	0xFDE
 14791                           postdec2	equ	0xFDD
 14792                           plusw2	equ	0xFDB
 14793                           fsr2h	equ	0xFDA
 14794                           fsr2l	equ	0xFD9
 14795                           status	equ	0xFD8
 14796                           
 14797                           	psect	intcode_body
 14798  00035C                     __pintcode_body:
 14799                           	opt stack 13
 14800  00035C                     int_func:
 14801                           	opt stack 13
 14802  00035C  CFF3 F0AD          	movff	prodl,??_high_isr+2
 14803  000360  CFF4 F0AE          	movff	prodh,??_high_isr+3
 14804  000364  CFF6 F0AF          	movff	tblptrl,??_high_isr+4
 14805  000368  CFF7 F0B0          	movff	tblptrh,??_high_isr+5
 14806  00036C  CFF8 F0B1          	movff	tblptru,??_high_isr+6
 14807  000370  CFF5 F0B2          	movff	tablat,??_high_isr+7
 14808                           
 14809                           ;INTERRUPTS.c: 52: if(INTCON3bits.INT1IF || INTCON3bits.INT2IF)
 14810  000374  B0F0               	btfsc	intcon3,0,c	;volatile
 14811  000376  D002               	goto	i2l6541
 14812  000378  A2F0               	btfss	intcon3,1,c	;volatile
 14813  00037A  D05A               	goto	i2l194
 14814  00037C                     i2l6541:
 14815                           
 14816                           ;INTERRUPTS.c: 53: {
 14817                           ;INTERRUPTS.c: 55: if(!TMR_Timer0Status())
 14818  00037C  ECE2  F00D         	call	_TMR_Timer0Status	;wreg free
 14819  000380  0900               	iorlw	0
 14820  000382  E103               	bnz	i2l197
 14821                           
 14822                           ;INTERRUPTS.c: 56: {
 14823                           ;INTERRUPTS.c: 58: TMR_Timer0Start();
 14824  000384  EC81  F00D         	call	_TMR_Timer0Start	;wreg free
 14825                           
 14826                           ;INTERRUPTS.c: 59: }
 14827  000388  D050               	goto	i2l6585
 14828  00038A                     i2l197:
 14829                           
 14830                           ;INTERRUPTS.c: 60: else
 14831                           ;INTERRUPTS.c: 61: {
 14832                           ;INTERRUPTS.c: 62: RFtemp = TMR0L;
 14833  00038A  CFD6 F0B3          	movff	4054,high_isr@RFtemp	;volatile
 14834  00038E  0100               	movlb	0	; () banked
 14835  000390  6BB4               	clrf	(high_isr@RFtemp+1)& (0+255),b
 14836                           
 14837                           ; BSR set to: 0
 14838                           ;INTERRUPTS.c: 63: RFtemp += (unsigned int)TMR0H << 8;
 14839  000392  50D7               	movf	4055,w,c	;volatile
 14840  000394  27B4               	addwf	(high_isr@RFtemp+1)& (0+255),f,b
 14841                           
 14842                           ; BSR set to: 0
 14843                           ;INTERRUPTS.c: 64: TMR_ResetTimer0();
 14844  000396  EC60  F00C         	call	i2_TMR_ResetTimer0	;wreg free
 14845                           
 14846                           ; BSR set to: 0
 14847                           ;INTERRUPTS.c: 65: if(!RFStarted)
 14848  00039A  51C7               	movf	_RFStarted& (0+255),w,b
 14849  00039C  E11D               	bnz	i2l199
 14850                           
 14851                           ; BSR set to: 0
 14852                           ;INTERRUPTS.c: 66: {
 14853                           ;INTERRUPTS.c: 67: if(System_State == 8)
 14854  00039E  0E08               	movlw	8
 14855  0003A0  0101               	movlb	1	; () banked
 14856  0003A2  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
 14857  0003A4  E10E               	bnz	i2l6559
 14858                           
 14859                           ; BSR set to: 1
 14860                           ;INTERRUPTS.c: 68: {
 14861                           ;INTERRUPTS.c: 69: if(RFtemp >= RF_SyncLow && RFtemp <= RF_SyncHigh)
 14862  0003A6  0100               	movlb	0	; () banked
 14863  0003A8  51C2               	movf	_RF_SyncLow& (0+255),w,b
 14864  0003AA  5DB3               	subwf	high_isr@RFtemp& (0+255),w,b
 14865  0003AC  51C3               	movf	(_RF_SyncLow+1)& (0+255),w,b
 14866  0003AE  59B4               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14867  0003B0  E313               	bnc	i2l199
 14868                           
 14869                           ; BSR set to: 0
 14870  0003B2  51B3               	movf	high_isr@RFtemp& (0+255),w,b
 14871  0003B4  5DC0               	subwf	_RF_SyncHigh& (0+255),w,b
 14872  0003B6  51B4               	movf	(high_isr@RFtemp+1)& (0+255),w,b
 14873  0003B8  59C1               	subwfb	(_RF_SyncHigh+1)& (0+255),w,b
 14874  0003BA  E30E               	bnc	i2l199
 14875  0003BC                     i2l6557:
 14876                           
 14877                           ; BSR set to: 0
 14878                           ;INTERRUPTS.c: 70: {
 14879                           ;INTERRUPTS.c: 71: RFStarted = 1;
 14880  0003BC  0E01               	movlw	1
 14881  0003BE  6FC7               	movwf	_RFStarted& (0+255),b
 14882  0003C0  D00B               	goto	i2l199
 14883  0003C2                     i2l6559:
 14884                           
 14885                           ; BSR set to: 1
 14886                           ;INTERRUPTS.c: 74: else
 14887                           ;INTERRUPTS.c: 75: {
 14888                           ;INTERRUPTS.c: 76: if(RFtemp >= 300 && RFtemp <= 2000)
 14889  0003C2  0E2C               	movlw	44
 14890  0003C4  0100               	movlb	0	; () banked
 14891  0003C6  5DB3               	subwf	high_isr@RFtemp& (0+255),w,b
 14892  0003C8  0E01               	movlw	1
 14893  0003CA  59B4               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14894  0003CC  E305               	bnc	i2l199
 14895                           
 14896                           ; BSR set to: 0
 14897  0003CE  0ED1               	movlw	209
 14898  0003D0  5DB3               	subwf	high_isr@RFtemp& (0+255),w,b
 14899  0003D2  0E07               	movlw	7
 14900  0003D4  59B4               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14901  0003D6  E3F2               	bnc	i2l6557
 14902  0003D8                     i2l199:
 14903                           
 14904                           ; BSR set to: 0
 14905                           ;INTERRUPTS.c: 79: }
 14906                           ;INTERRUPTS.c: 80: }
 14907                           ;INTERRUPTS.c: 81: }
 14908                           ;INTERRUPTS.c: 82: if(RFStarted)
 14909  0003D8  51C7               	movf	_RFStarted& (0+255),w,b
 14910  0003DA  E027               	bz	i2l6585
 14911  0003DC                     i17L__ptext97:
 14912                           	opt stack 0
 14913  0003DC                     i17Li2_SYS_ActivityTimerReset:
 14914                           	opt stack 0
 14915  0003DC                     i17Li2l6377:
 14916                           	opt stack 17
 14917                           
 14918                           ; BSR set to: 0
 14919                           ;SYSTEM.c: 62: Activity_Timer = 0;
 14920  0003DC  6A5A               	clrf	_Activity_Timer,c
 14921  0003DE  6A5B               	clrf	_Activity_Timer+1,c
 14922  0003E0  6A5C               	clrf	_Activity_Timer+2,c
 14923  0003E2  6A5D               	clrf	_Activity_Timer+3,c
 14924  0003E4                     i17Li2l339:
 14925                           	opt stack 13
 14926                           
 14927                           ; BSR set to: 0
 14928                           ;INTERRUPTS.c: 85: if(RF_DataPlace < 64)
 14929  0003E4  0E40               	movlw	64
 14930  0003E6  61C9               	cpfslt	_RF_DataPlace& (0+255),b
 14931  0003E8  D020               	goto	i2l6585
 14932                           
 14933                           ; BSR set to: 0
 14934                           ;INTERRUPTS.c: 86: {
 14935                           ;INTERRUPTS.c: 87: RF_DataTiming[RF_DataPlace] = RFtemp;
 14936  0003EA  51C9               	movf	_RF_DataPlace& (0+255),w,b
 14937  0003EC  0D02               	mullw	2
 14938  0003EE  0E07               	movlw	low _RF_DataTiming
 14939  0003F0  24F3               	addwf	prodl,w,c
 14940  0003F2  6ED9               	movwf	fsr2l,c
 14941  0003F4  0E01               	movlw	high _RF_DataTiming
 14942  0003F6  20F4               	addwfc	prodh,w,c
 14943  0003F8  6EDA               	movwf	fsr2h,c
 14944  0003FA  C0B3  FFDE         	movff	high_isr@RFtemp,postinc2
 14945  0003FE  C0B4  FFDD         	movff	high_isr@RFtemp+1,postdec2
 14946                           
 14947                           ; BSR set to: 0
 14948                           ;INTERRUPTS.c: 88: RF_DataPlace++;
 14949  000402  2BC9               	incf	_RF_DataPlace& (0+255),f,b
 14950                           
 14951                           ; BSR set to: 0
 14952                           ;INTERRUPTS.c: 89: if(RF_DataPlace >= RF_CodeSize)
 14953  000404  51C8               	movf	_RF_CodeSize& (0+255),w,b
 14954  000406  5DC9               	subwf	_RF_DataPlace& (0+255),w,b
 14955  000408  E310               	bnc	i2l6585
 14956                           
 14957                           ; BSR set to: 0
 14958                           ;INTERRUPTS.c: 90: {
 14959                           ;INTERRUPTS.c: 91: if(!RF_Data)
 14960  00040A  0101               	movlb	1	; () banked
 14961  00040C  5105               	movf	_RF_Data& (0+255),w,b	;volatile
 14962  00040E  E108               	bnz	i2l207
 14963                           
 14964                           ; BSR set to: 1
 14965                           ;INTERRUPTS.c: 92: {
 14966                           ;INTERRUPTS.c: 93: RF_Data = RF_CheckCode();
 14967  000410  EC08  F01E         	call	_RF_CheckCode	;wreg free
 14968  000414  0101               	movlb	1	; () banked
 14969  000416  6F05               	movwf	_RF_Data& (0+255),b	;volatile
 14970                           
 14971                           ; BSR set to: 1
 14972                           ;INTERRUPTS.c: 94: if(RF_Data)
 14973  000418  5105               	movf	_RF_Data& (0+255),w,b	;volatile
 14974  00041A  E002               	bz	i2l207
 14975                           
 14976                           ; BSR set to: 1
 14977                           ;INTERRUPTS.c: 95: {
 14978                           ;INTERRUPTS.c: 96: RF_Disable();
 14979  00041C  EC0F  F00D         	call	i2_RF_Disable	;wreg free
 14980  000420                     i2l207:
 14981                           
 14982                           ;INTERRUPTS.c: 97: }
 14983                           ;INTERRUPTS.c: 98: }
 14984                           ;INTERRUPTS.c: 99: TMR_Timer0(0);
 14985  000420  0E00               	movlw	0
 14986  000422  EC89  F00D         	call	i2_TMR_Timer0
 14987                           
 14988                           ; BSR set to: 0
 14989                           ;INTERRUPTS.c: 100: RF_ResetData();
 14990  000426  ECD4  F00D         	call	i2_RF_ResetData	;wreg free
 14991  00042A                     i2l6585:
 14992                           
 14993                           ; BSR set to: 0
 14994                           ;INTERRUPTS.c: 101: }
 14995                           ;INTERRUPTS.c: 102: }
 14996                           ;INTERRUPTS.c: 103: }
 14997                           ;INTERRUPTS.c: 104: }
 14998                           ;INTERRUPTS.c: 105: INTCON3bits.INT1IF = 0;
 14999  00042A  90F0               	bcf	intcon3,0,c	;volatile
 15000                           
 15001                           ; BSR set to: 0
 15002                           ;INTERRUPTS.c: 106: INTCON3bits.INT2IF = 0;
 15003  00042C  92F0               	bcf	intcon3,1,c	;volatile
 15004                           
 15005                           ;INTERRUPTS.c: 107: }
 15006  00042E  D00C               	goto	i2l212
 15007  000430                     i2l194:
 15008                           
 15009                           ;INTERRUPTS.c: 108: else if(INTCONbits.TMR0IF)
 15010  000430  A4F2               	btfss	intcon,2,c	;volatile
 15011  000432  D009               	goto	i2l210
 15012                           
 15013                           ;INTERRUPTS.c: 109: {
 15014                           ;INTERRUPTS.c: 111: TMR_Timer0(0);
 15015  000434  0E00               	movlw	0
 15016  000436  EC89  F00D         	call	i2_TMR_Timer0
 15017                           
 15018                           ;INTERRUPTS.c: 112: TMR_ResetTimer0();
 15019  00043A  EC60  F00C         	call	i2_TMR_ResetTimer0	;wreg free
 15020                           
 15021                           ; BSR set to: 0
 15022                           ;INTERRUPTS.c: 113: RF_ResetData();
 15023  00043E  ECD4  F00D         	call	i2_RF_ResetData	;wreg free
 15024                           
 15025                           ; BSR set to: 0
 15026                           ;INTERRUPTS.c: 114: INTCONbits.TMR0IF = 0;
 15027  000442  94F2               	bcf	intcon,2,c	;volatile
 15028                           
 15029                           ;INTERRUPTS.c: 115: }
 15030  000444  D001               	goto	i2l212
 15031  000446                     i2l210:
 15032                           
 15033                           ;INTERRUPTS.c: 116: else
 15034                           ;INTERRUPTS.c: 117: {
 15035                           ;INTERRUPTS.c: 119: __nop();
 15036  000446  F000               	nop	
 15037  000448                     i2l212:
 15038  000448  C0B2  FFF5         	movff	??_high_isr+7,tablat
 15039  00044C  C0B1  FFF8         	movff	??_high_isr+6,tblptru
 15040  000450  C0B0  FFF7         	movff	??_high_isr+5,tblptrh
 15041  000454  C0AF  FFF6         	movff	??_high_isr+4,tblptrl
 15042  000458  C0AE  FFF4         	movff	??_high_isr+3,prodh
 15043  00045C  C0AD  FFF3         	movff	??_high_isr+2,prodl
 15044  000460  C0AC  FFDA         	movff	??_high_isr+1,fsr2h
 15045  000464  C0AB  FFD9         	movff	??_high_isr,fsr2l
 15046  000468  926E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15047  00046A  0011               	retfie		f
 15048  00046C                     __end_of_high_isr:
 15049                           	opt stack 0
 15050                           tblptru	equ	0xFF8
 15051                           tblptrh	equ	0xFF7
 15052                           tblptrl	equ	0xFF6
 15053                           tablat	equ	0xFF5
 15054                           prodh	equ	0xFF4
 15055                           prodl	equ	0xFF3
 15056                           intcon	equ	0xFF2
 15057                           intcon2	equ	0xFF1
 15058                           intcon3	equ	0xFF0
 15059                           postinc0	equ	0xFEE
 15060                           wreg	equ	0xFE8
 15061                           postdec1	equ	0xFE5
 15062                           fsr1l	equ	0xFE1
 15063                           bsr	equ	0xFE0
 15064                           indf2	equ	0xFDF
 15065                           postinc2	equ	0xFDE
 15066                           postdec2	equ	0xFDD
 15067                           plusw2	equ	0xFDB
 15068                           fsr2h	equ	0xFDA
 15069                           fsr2l	equ	0xFD9
 15070                           status	equ	0xFD8
 15071                           
 15072 ;; *************** function i2_SYS_ActivityTimerReset *****************
 15073 ;; Defined at:
 15074 ;;		line 60 in file "SYSTEM.c"
 15075 ;; Parameters:    Size  Location     Type
 15076 ;;		None
 15077 ;; Auto vars:     Size  Location     Type
 15078 ;;		None
 15079 ;; Return value:  Size  Location     Type
 15080 ;;		None               void
 15081 ;; Registers used:
 15082 ;;		None
 15083 ;; Tracked objects:
 15084 ;;		On entry : F/0
 15085 ;;		On exit  : F/0
 15086 ;;		Unchanged: F/0
 15087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15088 ;;      Params:         0       0       0       0       0
 15089 ;;      Locals:         0       0       0       0       0
 15090 ;;      Temps:          0       0       0       0       0
 15091 ;;      Totals:         0       0       0       0       0
 15092 ;;Total ram usage:        0 bytes
 15093 ;; Hardware stack levels used:    1
 15094 ;; This function calls:
 15095 ;;		Nothing
 15096 ;; This function is called by:
 15097 ;;		_high_isr
 15098 ;; This function uses a non-reentrant model
 15099 ;;
 15100                           
 15101                           	psect	text97
 15102  000000                     __ptext97:
 15103                           	opt stack 0
 15104  000000                     __end_ofi2_SYS_ActivityTimerReset:
 15105                           	opt stack 0
 15106                           tblptru	equ	0xFF8
 15107                           tblptrh	equ	0xFF7
 15108                           tblptrl	equ	0xFF6
 15109                           tablat	equ	0xFF5
 15110                           prodh	equ	0xFF4
 15111                           prodl	equ	0xFF3
 15112                           intcon	equ	0xFF2
 15113                           intcon2	equ	0xFF1
 15114                           intcon3	equ	0xFF0
 15115                           postinc0	equ	0xFEE
 15116                           wreg	equ	0xFE8
 15117                           postdec1	equ	0xFE5
 15118                           fsr1l	equ	0xFE1
 15119                           bsr	equ	0xFE0
 15120                           indf2	equ	0xFDF
 15121                           postinc2	equ	0xFDE
 15122                           postdec2	equ	0xFDD
 15123                           plusw2	equ	0xFDB
 15124                           fsr2h	equ	0xFDA
 15125                           fsr2l	equ	0xFD9
 15126                           status	equ	0xFD8
 15127                           
 15128 ;; *************** function i2_RF_Disable *****************
 15129 ;; Defined at:
 15130 ;;		line 90 in file "RF.c"
 15131 ;; Parameters:    Size  Location     Type
 15132 ;;		None
 15133 ;; Auto vars:     Size  Location     Type
 15134 ;;		None
 15135 ;; Return value:  Size  Location     Type
 15136 ;;		None               void
 15137 ;; Registers used:
 15138 ;;		wreg, status,2, cstack
 15139 ;; Tracked objects:
 15140 ;;		On entry : F/1
 15141 ;;		On exit  : F/0
 15142 ;;		Unchanged: 0/0
 15143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15144 ;;      Params:         0       0       0       0       0
 15145 ;;      Locals:         0       0       0       0       0
 15146 ;;      Temps:          0       0       0       0       0
 15147 ;;      Totals:         0       0       0       0       0
 15148 ;;Total ram usage:        0 bytes
 15149 ;; Hardware stack levels used:    1
 15150 ;; Hardware stack levels required when called:    1
 15151 ;; This function calls:
 15152 ;;		i2_RF_DataInt
 15153 ;;		i2_TMR_Timer0
 15154 ;;		i2_TMR_Timer0Int
 15155 ;; This function is called by:
 15156 ;;		_high_isr
 15157 ;; This function uses a non-reentrant model
 15158 ;;
 15159                           
 15160                           	psect	text98
 15161  001A1E                     __ptext98:
 15162                           	opt stack 0
 15163  001A1E                     i2_RF_Disable:
 15164                           	opt stack 16
 15165                           
 15166                           ; BSR set to: 1
 15167                           ;RF.c: 92: RF_DataInt(0);
 15168                           
 15169                           ; BSR set to: 0
 15170                           ;incstack = 0
 15171  001A1E  0E00               	movlw	0
 15172  001A20  ECE1  F00C         	call	i2_RF_DataInt
 15173                           
 15174                           ;RF.c: 93: TMR_Timer0Int(0);
 15175  001A24  0E00               	movlw	0
 15176  001A26  EC91  F00D         	call	i2_TMR_Timer0Int
 15177                           
 15178                           ;RF.c: 94: TMR_Timer0(0);
 15179  001A2A  0E00               	movlw	0
 15180  001A2C  EF89  F00D         	goto	i2_TMR_Timer0
 15181  001A30                     __end_ofi2_RF_Disable:
 15182                           	opt stack 0
 15183                           tblptru	equ	0xFF8
 15184                           tblptrh	equ	0xFF7
 15185                           tblptrl	equ	0xFF6
 15186                           tablat	equ	0xFF5
 15187                           prodh	equ	0xFF4
 15188                           prodl	equ	0xFF3
 15189                           intcon	equ	0xFF2
 15190                           intcon2	equ	0xFF1
 15191                           intcon3	equ	0xFF0
 15192                           postinc0	equ	0xFEE
 15193                           wreg	equ	0xFE8
 15194                           postdec1	equ	0xFE5
 15195                           fsr1l	equ	0xFE1
 15196                           bsr	equ	0xFE0
 15197                           indf2	equ	0xFDF
 15198                           postinc2	equ	0xFDE
 15199                           postdec2	equ	0xFDD
 15200                           plusw2	equ	0xFDB
 15201                           fsr2h	equ	0xFDA
 15202                           fsr2l	equ	0xFD9
 15203                           status	equ	0xFD8
 15204                           
 15205 ;; *************** function _TMR_Timer0Status *****************
 15206 ;; Defined at:
 15207 ;;		line 180 in file "TIMERS.c"
 15208 ;; Parameters:    Size  Location     Type
 15209 ;;		None
 15210 ;; Auto vars:     Size  Location     Type
 15211 ;;		None
 15212 ;; Return value:  Size  Location     Type
 15213 ;;                  1    wreg      unsigned char 
 15214 ;; Registers used:
 15215 ;;		wreg
 15216 ;; Tracked objects:
 15217 ;;		On entry : 0/0
 15218 ;;		On exit  : 0/0
 15219 ;;		Unchanged: 0/0
 15220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15221 ;;      Params:         0       0       0       0       0
 15222 ;;      Locals:         0       0       0       0       0
 15223 ;;      Temps:          0       0       0       0       0
 15224 ;;      Totals:         0       0       0       0       0
 15225 ;;Total ram usage:        0 bytes
 15226 ;; Hardware stack levels used:    1
 15227 ;; This function calls:
 15228 ;;		Nothing
 15229 ;; This function is called by:
 15230 ;;		_high_isr
 15231 ;; This function uses a non-reentrant model
 15232 ;;
 15233                           
 15234                           	psect	text99
 15235  001BC4                     __ptext99:
 15236                           	opt stack 0
 15237  001BC4                     _TMR_Timer0Status:
 15238                           	opt stack 17
 15239                           
 15240                           ;TIMERS.c: 182: if(T0CONbits.TMR0ON)
 15241                           
 15242                           ; BSR set to: 0
 15243                           ;incstack = 0
 15244  001BC4  BED5               	btfsc	4053,7,c	;volatile
 15245                           
 15246                           ;TIMERS.c: 183: {
 15247                           ;TIMERS.c: 185: return 1;
 15248  001BC6  0C01               	retlw	1
 15249                           
 15250                           ;TIMERS.c: 186: }
 15251                           ;TIMERS.c: 187: return 0;
 15252  001BC8  0C00               	retlw	0	;funcret
 15253  001BCA                     __end_of_TMR_Timer0Status:
 15254                           	opt stack 0
 15255                           tblptru	equ	0xFF8
 15256                           tblptrh	equ	0xFF7
 15257                           tblptrl	equ	0xFF6
 15258                           tablat	equ	0xFF5
 15259                           prodh	equ	0xFF4
 15260                           prodl	equ	0xFF3
 15261                           intcon	equ	0xFF2
 15262                           intcon2	equ	0xFF1
 15263                           intcon3	equ	0xFF0
 15264                           postinc0	equ	0xFEE
 15265                           wreg	equ	0xFE8
 15266                           postdec1	equ	0xFE5
 15267                           fsr1l	equ	0xFE1
 15268                           bsr	equ	0xFE0
 15269                           indf2	equ	0xFDF
 15270                           postinc2	equ	0xFDE
 15271                           postdec2	equ	0xFDD
 15272                           plusw2	equ	0xFDB
 15273                           fsr2h	equ	0xFDA
 15274                           fsr2l	equ	0xFD9
 15275                           status	equ	0xFD8
 15276                           
 15277 ;; *************** function _TMR_Timer0Start *****************
 15278 ;; Defined at:
 15279 ;;		line 118 in file "TIMERS.c"
 15280 ;; Parameters:    Size  Location     Type
 15281 ;;		None
 15282 ;; Auto vars:     Size  Location     Type
 15283 ;;		None
 15284 ;; Return value:  Size  Location     Type
 15285 ;;		None               void
 15286 ;; Registers used:
 15287 ;;		wreg, status,2, cstack
 15288 ;; Tracked objects:
 15289 ;;		On entry : 0/0
 15290 ;;		On exit  : F/0
 15291 ;;		Unchanged: 0/0
 15292 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15293 ;;      Params:         0       0       0       0       0
 15294 ;;      Locals:         0       0       0       0       0
 15295 ;;      Temps:          0       0       0       0       0
 15296 ;;      Totals:         0       0       0       0       0
 15297 ;;Total ram usage:        0 bytes
 15298 ;; Hardware stack levels used:    1
 15299 ;; Hardware stack levels required when called:    2
 15300 ;; This function calls:
 15301 ;;		i2_TMR_ResetTimer0
 15302 ;;		i2_TMR_Timer0
 15303 ;; This function is called by:
 15304 ;;		_high_isr
 15305 ;; This function uses a non-reentrant model
 15306 ;;
 15307                           
 15308                           	psect	text100
 15309  001B02                     __ptext100:
 15310                           	opt stack 0
 15311  001B02                     _TMR_Timer0Start:
 15312                           	opt stack 15
 15313                           
 15314                           ;TIMERS.c: 120: TMR_Timer0(0);
 15315                           
 15316                           ;incstack = 0
 15317  001B02  0E00               	movlw	0
 15318  001B04  EC89  F00D         	call	i2_TMR_Timer0
 15319                           
 15320                           ;TIMERS.c: 121: TMR_ResetTimer0();
 15321  001B08  EC60  F00C         	call	i2_TMR_ResetTimer0	;wreg free
 15322                           
 15323                           ;TIMERS.c: 122: TMR_Timer0(1);
 15324  001B0C  0E01               	movlw	1
 15325  001B0E  EF89  F00D         	goto	i2_TMR_Timer0
 15326  001B12                     __end_of_TMR_Timer0Start:
 15327                           	opt stack 0
 15328                           tblptru	equ	0xFF8
 15329                           tblptrh	equ	0xFF7
 15330                           tblptrl	equ	0xFF6
 15331                           tablat	equ	0xFF5
 15332                           prodh	equ	0xFF4
 15333                           prodl	equ	0xFF3
 15334                           intcon	equ	0xFF2
 15335                           intcon2	equ	0xFF1
 15336                           intcon3	equ	0xFF0
 15337                           postinc0	equ	0xFEE
 15338                           wreg	equ	0xFE8
 15339                           postdec1	equ	0xFE5
 15340                           fsr1l	equ	0xFE1
 15341                           bsr	equ	0xFE0
 15342                           indf2	equ	0xFDF
 15343                           postinc2	equ	0xFDE
 15344                           postdec2	equ	0xFDD
 15345                           plusw2	equ	0xFDB
 15346                           fsr2h	equ	0xFDA
 15347                           fsr2l	equ	0xFD9
 15348                           status	equ	0xFD8
 15349                           
 15350 ;; *************** function i2_TMR_ResetTimer0 *****************
 15351 ;; Defined at:
 15352 ;;		line 268 in file "TIMERS.c"
 15353 ;; Parameters:    Size  Location     Type
 15354 ;;		None
 15355 ;; Auto vars:     Size  Location     Type
 15356 ;;  TMR_ResetTim    1    1[BANK0 ] unsigned char 
 15357 ;; Return value:  Size  Location     Type
 15358 ;;		None               void
 15359 ;; Registers used:
 15360 ;;		wreg, status,2, cstack
 15361 ;; Tracked objects:
 15362 ;;		On entry : F/0
 15363 ;;		On exit  : F/0
 15364 ;;		Unchanged: 0/0
 15365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15366 ;;      Params:         0       0       0       0       0
 15367 ;;      Locals:         0       1       0       0       0
 15368 ;;      Temps:          0       0       0       0       0
 15369 ;;      Totals:         0       1       0       0       0
 15370 ;;Total ram usage:        1 bytes
 15371 ;; Hardware stack levels used:    1
 15372 ;; Hardware stack levels required when called:    1
 15373 ;; This function calls:
 15374 ;;		i2_TMR_Timer0
 15375 ;; This function is called by:
 15376 ;;		_high_isr
 15377 ;;		_TMR_Timer0Start
 15378 ;; This function uses a non-reentrant model
 15379 ;;
 15380                           
 15381                           	psect	text101
 15382  0018C0                     __ptext101:
 15383                           	opt stack 0
 15384  0018C0                     i2_TMR_ResetTimer0:
 15385                           	opt stack 16
 15386                           
 15387                           ; BSR set to: 0
 15388                           ;TIMERS.c: 270: unsigned char TimerOn = T0CONbits.TMR0ON;
 15389                           
 15390                           ; BSR set to: 0
 15391                           ;incstack = 0
 15392  0018C0  0E00               	movlw	0
 15393  0018C2  BED5               	btfsc	4053,7,c	;volatile
 15394  0018C4  0E01               	movlw	1
 15395  0018C6  6F81               	movwf	i2TMR_ResetTimer0@TimerOn& (0+255),b
 15396                           
 15397                           ; BSR set to: 0
 15398                           ;TIMERS.c: 272: TMR_Timer0(0);
 15399  0018C8  0E00               	movlw	0
 15400  0018CA  EC89  F00D         	call	i2_TMR_Timer0
 15401                           
 15402                           ; BSR set to: 0
 15403                           ;TIMERS.c: 273: TMR0H = 0;
 15404  0018CE  6AD7               	clrf	4055,c	;volatile
 15405                           
 15406                           ; BSR set to: 0
 15407                           ;TIMERS.c: 274: TMR0L = 2;
 15408  0018D0  0E02               	movlw	2
 15409  0018D2  6ED6               	movwf	4054,c	;volatile
 15410                           
 15411                           ; BSR set to: 0
 15412                           ;TIMERS.c: 275: if(TimerOn)
 15413  0018D4  5181               	movf	i2TMR_ResetTimer0@TimerOn& (0+255),w,b
 15414  0018D6  B4D8               	btfsc	status,2,c
 15415  0018D8  0012               	return	
 15416                           
 15417                           ; BSR set to: 0
 15418                           ;TIMERS.c: 276: {
 15419                           ;TIMERS.c: 277: TMR_Timer0(1);
 15420  0018DA  0E01               	movlw	1
 15421  0018DC  EF89  F00D         	goto	i2_TMR_Timer0
 15422  0018E0                     __end_ofi2_TMR_ResetTimer0:
 15423                           	opt stack 0
 15424                           tblptru	equ	0xFF8
 15425                           tblptrh	equ	0xFF7
 15426                           tblptrl	equ	0xFF6
 15427                           tablat	equ	0xFF5
 15428                           prodh	equ	0xFF4
 15429                           prodl	equ	0xFF3
 15430                           intcon	equ	0xFF2
 15431                           intcon2	equ	0xFF1
 15432                           intcon3	equ	0xFF0
 15433                           postinc0	equ	0xFEE
 15434                           wreg	equ	0xFE8
 15435                           postdec1	equ	0xFE5
 15436                           fsr1l	equ	0xFE1
 15437                           bsr	equ	0xFE0
 15438                           indf2	equ	0xFDF
 15439                           postinc2	equ	0xFDE
 15440                           postdec2	equ	0xFDD
 15441                           plusw2	equ	0xFDB
 15442                           fsr2h	equ	0xFDA
 15443                           fsr2l	equ	0xFD9
 15444                           status	equ	0xFD8
 15445                           
 15446 ;; *************** function i2_TMR_Timer0 *****************
 15447 ;; Defined at:
 15448 ;;		line 211 in file "TIMERS.c"
 15449 ;; Parameters:    Size  Location     Type
 15450 ;;  state           1    wreg     unsigned char 
 15451 ;; Auto vars:     Size  Location     Type
 15452 ;;  state           1    0[BANK0 ] unsigned char 
 15453 ;; Return value:  Size  Location     Type
 15454 ;;		None               void
 15455 ;; Registers used:
 15456 ;;		wreg, status,2
 15457 ;; Tracked objects:
 15458 ;;		On entry : 0/1
 15459 ;;		On exit  : F/0
 15460 ;;		Unchanged: 0/0
 15461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15462 ;;      Params:         0       0       0       0       0
 15463 ;;      Locals:         0       1       0       0       0
 15464 ;;      Temps:          0       0       0       0       0
 15465 ;;      Totals:         0       1       0       0       0
 15466 ;;Total ram usage:        1 bytes
 15467 ;; Hardware stack levels used:    1
 15468 ;; This function calls:
 15469 ;;		Nothing
 15470 ;; This function is called by:
 15471 ;;		_high_isr
 15472 ;;		_TMR_Timer0Start
 15473 ;;		i2_RF_Disable
 15474 ;;		i2_TMR_ResetTimer0
 15475 ;; This function uses a non-reentrant model
 15476 ;;
 15477                           
 15478                           	psect	text102
 15479  001B12                     __ptext102:
 15480                           	opt stack 0
 15481  001B12                     i2_TMR_Timer0:
 15482                           	opt stack 17
 15483                           
 15484                           ; BSR set to: 0
 15485                           ;incstack = 0
 15486                           ;i2TMR_Timer0@state stored from wreg
 15487  001B12  0100               	movlb	0	; () banked
 15488  001B14  6F80               	movwf	i2TMR_Timer0@state& (0+255),b
 15489                           
 15490                           ;TIMERS.c: 213: if(state)
 15491  001B16  5180               	movf	i2TMR_Timer0@state& (0+255),w,b
 15492  001B18  E002               	bz	i2l843
 15493                           
 15494                           ; BSR set to: 0
 15495                           ;TIMERS.c: 214: {
 15496                           ;TIMERS.c: 216: T0CONbits.TMR0ON = 1;
 15497  001B1A  8ED5               	bsf	4053,7,c	;volatile
 15498                           
 15499                           ;TIMERS.c: 217: }
 15500  001B1C  0012               	return	
 15501  001B1E                     i2l843:
 15502                           
 15503                           ; BSR set to: 0
 15504                           ;TIMERS.c: 218: else
 15505                           ;TIMERS.c: 219: {
 15506                           ;TIMERS.c: 221: T0CONbits.TMR0ON = 0;
 15507  001B1E  9ED5               	bcf	4053,7,c	;volatile
 15508                           
 15509                           ; BSR set to: 0
 15510  001B20  0012               	return		;funcret
 15511  001B22                     __end_ofi2_TMR_Timer0:
 15512                           	opt stack 0
 15513                           tblptru	equ	0xFF8
 15514                           tblptrh	equ	0xFF7
 15515                           tblptrl	equ	0xFF6
 15516                           tablat	equ	0xFF5
 15517                           prodh	equ	0xFF4
 15518                           prodl	equ	0xFF3
 15519                           intcon	equ	0xFF2
 15520                           intcon2	equ	0xFF1
 15521                           intcon3	equ	0xFF0
 15522                           postinc0	equ	0xFEE
 15523                           wreg	equ	0xFE8
 15524                           postdec1	equ	0xFE5
 15525                           fsr1l	equ	0xFE1
 15526                           bsr	equ	0xFE0
 15527                           indf2	equ	0xFDF
 15528                           postinc2	equ	0xFDE
 15529                           postdec2	equ	0xFDD
 15530                           plusw2	equ	0xFDB
 15531                           fsr2h	equ	0xFDA
 15532                           fsr2l	equ	0xFD9
 15533                           status	equ	0xFD8
 15534                           
 15535 ;; *************** function _RF_CheckCode *****************
 15536 ;; Defined at:
 15537 ;;		line 175 in file "RF.c"
 15538 ;; Parameters:    Size  Location     Type
 15539 ;;		None
 15540 ;; Auto vars:     Size  Location     Type
 15541 ;;  High            3   39[BANK0 ] unsigned char 
 15542 ;;  Low             3   36[BANK0 ] unsigned char 
 15543 ;;  i               1   42[BANK0 ] unsigned char 
 15544 ;; Return value:  Size  Location     Type
 15545 ;;                  1    wreg      unsigned char 
 15546 ;; Registers used:
 15547 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15548 ;; Tracked objects:
 15549 ;;		On entry : F/1
 15550 ;;		On exit  : E/0
 15551 ;;		Unchanged: 0/0
 15552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15553 ;;      Params:         0       0       0       0       0
 15554 ;;      Locals:         0       7       0       0       0
 15555 ;;      Temps:          0       2       0       0       0
 15556 ;;      Totals:         0       9       0       0       0
 15557 ;;Total ram usage:        9 bytes
 15558 ;; Hardware stack levels used:    1
 15559 ;; Hardware stack levels required when called:    4
 15560 ;; This function calls:
 15561 ;;		i2_FSH_Write_IR_RF
 15562 ;;		i2_RF_LoadCode
 15563 ;;		i2___ftge
 15564 ;;		i2___ftmul
 15565 ;;		i2___lwtoft
 15566 ;; This function is called by:
 15567 ;;		_high_isr
 15568 ;; This function uses a non-reentrant model
 15569 ;;
 15570                           
 15571                           	psect	text103
 15572  003C10                     __ptext103:
 15573                           	opt stack 0
 15574  003C10                     _RF_CheckCode:
 15575                           	opt stack 13
 15576                           
 15577                           ; BSR set to: 1
 15578                           ;RF.c: 179: double High = 0.0;
 15579                           
 15580                           ; BSR set to: 0
 15581                           ;incstack = 0
 15582  003C10  0100               	movlb	0	; () banked
 15583  003C12  6BA7               	clrf	RF_CheckCode@High& (0+255),b
 15584  003C14  6BA8               	clrf	(RF_CheckCode@High+1)& (0+255),b
 15585  003C16  6BA9               	clrf	(RF_CheckCode@High+2)& (0+255),b
 15586                           
 15587                           ; BSR set to: 0
 15588                           ;RF.c: 181: if(System_State == 8)
 15589  003C18  0E08               	movlw	8
 15590  003C1A  0101               	movlb	1	; () banked
 15591  003C1C  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
 15592  003C1E  E001 D0DB          	bnz	i2l6167
 15593                           
 15594                           ; BSR set to: 1
 15595                           ;RF.c: 182: {
 15596                           ;RF.c: 183: for(i=0; i<RF_CodeSize;i++)
 15597  003C22  0100               	movlb	0	; () banked
 15598  003C24  6BAA               	clrf	RF_CheckCode@i& (0+255),b
 15599  003C26  D0D3               	goto	i2l6159
 15600  003C28                     i2l6143:
 15601                           
 15602                           ; BSR set to: 0
 15603                           ;RF.c: 184: {
 15604                           ;RF.c: 185: if(i == 0)
 15605  003C28  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15606  003C2A  E149               	bnz	i2l6147
 15607                           
 15608                           ; BSR set to: 0
 15609                           ;RF.c: 186: {
 15610                           ;RF.c: 187: Low = (double)RF_SavedTiming[i] * (1.0 - 0.02);
 15611  003C2C  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15612  003C2E  0D02               	mullw	2
 15613  003C30  0E80               	movlw	128
 15614  003C32  24F3               	addwf	prodl,w,c
 15615  003C34  6EF6               	movwf	tblptrl,c
 15616  003C36  0E25               	movlw	37
 15617  003C38  20F4               	addwfc	prodh,w,c
 15618  003C3A  6EF7               	movwf	tblptrh,c
 15619  003C3C  6AF8               	clrf	tblptru,c
 15620  003C3E  0E00               	movlw	0
 15621  003C40  22F8               	addwfc	tblptru,f,c
 15622  003C42  0009               	tblrd		*+
 15623  003C44  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15624  003C48  000A               	tblrd		*-
 15625  003C4A  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15626  003C4E  ECCB  F00B         	call	i2___lwtoft	;wreg free
 15627  003C52  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15628  003C56  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15629  003C5A  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15630  003C5E  0EE1               	movlw	225
 15631  003C60  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15632  003C62  0E7A               	movlw	122
 15633  003C64  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15634  003C66  0E3F               	movlw	63
 15635  003C68  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15636  003C6A  EC92  F003         	call	i2___ftmul	;wreg free
 15637  003C6E  C08B  F0A4         	movff	?i2___ftmul,RF_CheckCode@Low
 15638  003C72  C08C  F0A5         	movff	?i2___ftmul+1,RF_CheckCode@Low+1
 15639  003C76  C08D  F0A6         	movff	?i2___ftmul+2,RF_CheckCode@Low+2
 15640                           
 15641                           ;RF.c: 188: High = (double)RF_SavedTiming[i] * (1.0 + 0.02);
 15642  003C7A  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15643  003C7C  0D02               	mullw	2
 15644  003C7E  0E80               	movlw	128
 15645  003C80  24F3               	addwf	prodl,w,c
 15646  003C82  6EF6               	movwf	tblptrl,c
 15647  003C84  0E25               	movlw	37
 15648  003C86  20F4               	addwfc	prodh,w,c
 15649  003C88  6EF7               	movwf	tblptrh,c
 15650  003C8A  6AF8               	clrf	tblptru,c
 15651  003C8C  0E00               	movlw	0
 15652  003C8E  22F8               	addwfc	tblptru,f,c
 15653  003C90  0009               	tblrd		*+
 15654  003C92  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15655  003C96  000A               	tblrd		*-
 15656  003C98  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15657  003C9C  ECCB  F00B         	call	i2___lwtoft	;wreg free
 15658  003CA0  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15659  003CA4  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15660  003CA8  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15661  003CAC  0E8F               	movlw	143
 15662  003CAE  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15663  003CB0  0E82               	movlw	130
 15664  003CB2  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15665  003CB4  0E3F               	movlw	63
 15666  003CB6  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15667  003CB8  EC92  F003         	call	i2___ftmul	;wreg free
 15668  003CBC  D045               	goto	L7
 15669  003CBE                     i2l6147:
 15670                           
 15671                           ; BSR set to: 0
 15672                           ;RF.c: 190: else
 15673                           ;RF.c: 191: {
 15674                           ;RF.c: 192: Low = (double)RF_SavedTiming[i] * (1.0 - 0.5);
 15675  003CBE  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15676  003CC0  0D02               	mullw	2
 15677  003CC2  0E80               	movlw	128
 15678  003CC4  24F3               	addwf	prodl,w,c
 15679  003CC6  6EF6               	movwf	tblptrl,c
 15680  003CC8  0E25               	movlw	37
 15681  003CCA  20F4               	addwfc	prodh,w,c
 15682  003CCC  6EF7               	movwf	tblptrh,c
 15683  003CCE  6AF8               	clrf	tblptru,c
 15684  003CD0  0E00               	movlw	0
 15685  003CD2  22F8               	addwfc	tblptru,f,c
 15686  003CD4  0009               	tblrd		*+
 15687  003CD6  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15688  003CDA  000A               	tblrd		*-
 15689  003CDC  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15690  003CE0  ECCB  F00B         	call	i2___lwtoft	;wreg free
 15691  003CE4  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15692  003CE8  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15693  003CEC  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15694  003CF0  6B8E               	clrf	i2___ftmul@f2& (0+255),b
 15695  003CF2  6B8F               	clrf	(i2___ftmul@f2+1)& (0+255),b
 15696  003CF4  0E3F               	movlw	63
 15697  003CF6  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15698  003CF8  EC92  F003         	call	i2___ftmul	;wreg free
 15699  003CFC  C08B  F0A4         	movff	?i2___ftmul,RF_CheckCode@Low
 15700  003D00  C08C  F0A5         	movff	?i2___ftmul+1,RF_CheckCode@Low+1
 15701  003D04  C08D  F0A6         	movff	?i2___ftmul+2,RF_CheckCode@Low+2
 15702                           
 15703                           ;RF.c: 193: High = (double)RF_SavedTiming[i] * (1.0 + 0.5);
 15704  003D08  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15705  003D0A  0D02               	mullw	2
 15706  003D0C  0E80               	movlw	128
 15707  003D0E  24F3               	addwf	prodl,w,c
 15708  003D10  6EF6               	movwf	tblptrl,c
 15709  003D12  0E25               	movlw	37
 15710  003D14  20F4               	addwfc	prodh,w,c
 15711  003D16  6EF7               	movwf	tblptrh,c
 15712  003D18  6AF8               	clrf	tblptru,c
 15713  003D1A  0E00               	movlw	0
 15714  003D1C  22F8               	addwfc	tblptru,f,c
 15715  003D1E  0009               	tblrd		*+
 15716  003D20  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15717  003D24  000A               	tblrd		*-
 15718  003D26  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15719  003D2A  ECCB  F00B         	call	i2___lwtoft	;wreg free
 15720  003D2E  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15721  003D32  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15722  003D36  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15723  003D3A  6B8E               	clrf	i2___ftmul@f2& (0+255),b
 15724  003D3C  0EC0               	movlw	192
 15725  003D3E  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15726  003D40  0E3F               	movlw	63
 15727  003D42  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15728  003D44  EC92  F003         	call	i2___ftmul	;wreg free
 15729  003D48                     L7:
 15730  003D48  C08B  F0A7         	movff	?i2___ftmul,RF_CheckCode@High
 15731  003D4C  C08C  F0A8         	movff	?i2___ftmul+1,RF_CheckCode@High+1
 15732  003D50  C08D  F0A9         	movff	?i2___ftmul+2,RF_CheckCode@High+2
 15733                           
 15734                           ; BSR set to: 0
 15735                           ;RF.c: 194: }
 15736                           ;RF.c: 196: if((double)RF_DataTiming[i] < Low || (double)RF_DataTiming[i] > High )
 15737  003D54  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15738  003D56  0D02               	mullw	2
 15739  003D58  0E07               	movlw	low _RF_DataTiming
 15740  003D5A  24F3               	addwf	prodl,w,c
 15741  003D5C  6ED9               	movwf	fsr2l,c
 15742  003D5E  0E01               	movlw	high _RF_DataTiming
 15743  003D60  20F4               	addwfc	prodh,w,c
 15744  003D62  6EDA               	movwf	fsr2h,c
 15745  003D64  CFDE F088          	movff	postinc2,i2___lwtoft@c
 15746  003D68  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 15747  003D6C  ECCB  F00B         	call	i2___lwtoft	;wreg free
 15748  003D70  C088  F08B         	movff	?i2___lwtoft,i2___ftge@ff1
 15749  003D74  C089  F08C         	movff	?i2___lwtoft+1,i2___ftge@ff1+1
 15750  003D78  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftge@ff1+2
 15751  003D7C  C0A4  F08E         	movff	RF_CheckCode@Low,i2___ftge@ff2
 15752  003D80  C0A5  F08F         	movff	RF_CheckCode@Low+1,i2___ftge@ff2+1
 15753  003D84  C0A6  F090         	movff	RF_CheckCode@Low+2,i2___ftge@ff2+2
 15754  003D88  EC99  F009         	call	i2___ftge	;wreg free
 15755  003D8C  A0D8               	btfss	status,0,c
 15756  003D8E  0C00               	retlw	0
 15757                           
 15758                           ; BSR set to: 0
 15759  003D90  C0A7  F08B         	movff	RF_CheckCode@High,i2___ftge@ff1
 15760  003D94  C0A8  F08C         	movff	RF_CheckCode@High+1,i2___ftge@ff1+1
 15761  003D98  C0A9  F08D         	movff	RF_CheckCode@High+2,i2___ftge@ff1+2
 15762  003D9C  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15763  003D9E  0D02               	mullw	2
 15764  003DA0  0E07               	movlw	low _RF_DataTiming
 15765  003DA2  24F3               	addwf	prodl,w,c
 15766  003DA4  6ED9               	movwf	fsr2l,c
 15767  003DA6  0E01               	movlw	high _RF_DataTiming
 15768  003DA8  20F4               	addwfc	prodh,w,c
 15769  003DAA  6EDA               	movwf	fsr2h,c
 15770  003DAC  CFDE F088          	movff	postinc2,i2___lwtoft@c
 15771  003DB0  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 15772  003DB4  ECCB  F00B         	call	i2___lwtoft	;wreg free
 15773  003DB8  C088  F08E         	movff	?i2___lwtoft,i2___ftge@ff2
 15774  003DBC  C089  F08F         	movff	?i2___lwtoft+1,i2___ftge@ff2+1
 15775  003DC0  C08A  F090         	movff	?i2___lwtoft+2,i2___ftge@ff2+2
 15776  003DC4  EC99  F009         	call	i2___ftge	;wreg free
 15777  003DC8  E201               	bc	i2l6157
 15778                           
 15779                           ;RF.c: 197: {
 15780                           ;RF.c: 198: return 0;
 15781  003DCA  0C00               	retlw	0
 15782  003DCC                     i2l6157:
 15783                           
 15784                           ; BSR set to: 0
 15785  003DCC  2BAA               	incf	RF_CheckCode@i& (0+255),f,b
 15786  003DCE                     i2l6159:
 15787                           
 15788                           ; BSR set to: 0
 15789  003DCE  51C8               	movf	_RF_CodeSize& (0+255),w,b
 15790  003DD0  5DAA               	subwf	RF_CheckCode@i& (0+255),w,b
 15791  003DD2  E201 D729          	bnc	i2l6143
 15792                           
 15793                           ; BSR set to: 0
 15794                           ;RF.c: 199: }
 15795                           ;RF.c: 200: }
 15796                           ;RF.c: 201: return 1;
 15797  003DD6  0C01               	retlw	1
 15798  003DD8                     i2l6167:
 15799                           
 15800                           ; BSR set to: 1
 15801                           ;RF.c: 203: else
 15802                           ;RF.c: 204: {
 15803                           ;RF.c: 205: if(RF_DataPlace >= 20)
 15804  003DD8  0E13               	movlw	19
 15805  003DDA  0100               	movlb	0	; () banked
 15806  003DDC  65C9               	cpfsgt	_RF_DataPlace& (0+255),b
 15807  003DDE  0C00               	retlw	0
 15808                           
 15809                           ; BSR set to: 0
 15810                           ;RF.c: 206: {
 15811                           ;RF.c: 207: for(i=0;i<RF_DataPlace;i++)
 15812  003DE0  6BAA               	clrf	RF_CheckCode@i& (0+255),b
 15813  003DE2  D010               	goto	i2l6179
 15814  003DE4                     i2l6171:
 15815                           
 15816                           ; BSR set to: 0
 15817                           ;RF.c: 208: {
 15818                           ;RF.c: 209: if(RF_DataTiming[i] < 5)
 15819  003DE4  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15820  003DE6  0D02               	mullw	2
 15821  003DE8  0E07               	movlw	low _RF_DataTiming
 15822  003DEA  24F3               	addwf	prodl,w,c
 15823  003DEC  6ED9               	movwf	fsr2l,c
 15824  003DEE  0E01               	movlw	high _RF_DataTiming
 15825  003DF0  20F4               	addwfc	prodh,w,c
 15826  003DF2  6EDA               	movwf	fsr2h,c
 15827  003DF4  0E01               	movlw	1
 15828  003DF6  50DB               	movf	plusw2,w,c
 15829  003DF8  E104               	bnz	i2l6177
 15830  003DFA  0E05               	movlw	5
 15831  003DFC  5CDE               	subwf	postinc2,w,c
 15832  003DFE  E201               	bc	i2l6177
 15833  003E00  0C00               	retlw	0
 15834  003E02                     i2l6177:
 15835                           
 15836                           ; BSR set to: 0
 15837  003E02  2BAA               	incf	RF_CheckCode@i& (0+255),f,b
 15838  003E04                     i2l6179:
 15839                           
 15840                           ; BSR set to: 0
 15841  003E04  51C9               	movf	_RF_DataPlace& (0+255),w,b
 15842  003E06  5DAA               	subwf	RF_CheckCode@i& (0+255),w,b
 15843  003E08  E3ED               	bnc	i2l6171
 15844                           
 15845                           ; BSR set to: 0
 15846                           ;RF.c: 213: }
 15847                           ;RF.c: 214: }
 15848                           ;RF.c: 216: for(i=RF_DataPlace;i<64;i++)
 15849  003E0A  C0C9  F0AA         	movff	_RF_DataPlace,RF_CheckCode@i
 15850  003E0E                     i2l6181:
 15851                           
 15852                           ; BSR set to: 0
 15853  003E0E  0E3F               	movlw	63
 15854  003E10  65AA               	cpfsgt	RF_CheckCode@i& (0+255),b
 15855  003E12  D001               	goto	i2l6185
 15856  003E14  D00C               	goto	i2l6191
 15857  003E16                     i2l6185:
 15858                           
 15859                           ; BSR set to: 0
 15860                           ;RF.c: 217: {
 15861                           ;RF.c: 219: RF_DataTiming[i] = 0;
 15862  003E16  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15863  003E18  0D02               	mullw	2
 15864  003E1A  0E07               	movlw	low _RF_DataTiming
 15865  003E1C  24F3               	addwf	prodl,w,c
 15866  003E1E  6ED9               	movwf	fsr2l,c
 15867  003E20  0E01               	movlw	high _RF_DataTiming
 15868  003E22  20F4               	addwfc	prodh,w,c
 15869  003E24  6EDA               	movwf	fsr2h,c
 15870  003E26  6ADE               	clrf	postinc2,c
 15871  003E28  6ADD               	clrf	postdec2,c
 15872                           
 15873                           ; BSR set to: 0
 15874  003E2A  2BAA               	incf	RF_CheckCode@i& (0+255),f,b
 15875  003E2C  D7F0               	goto	i2l6181
 15876  003E2E                     i2l6191:
 15877                           
 15878                           ; BSR set to: 0
 15879                           ;RF.c: 220: }
 15880                           ;RF.c: 223: RF_Saved = 90;
 15881  003E2E  0E5A               	movlw	90
 15882  003E30  0101               	movlb	1	; () banked
 15883  003E32  6FAD               	movwf	_RF_Saved& (0+255),b
 15884                           
 15885                           ; BSR set to: 1
 15886                           ;RF.c: 224: Flash_Status = FSH_Write_IR_RF();
 15887  003E34  EC82  F017         	call	i2_FSH_Write_IR_RF	;wreg free
 15888  003E38  0101               	movlb	1	; () banked
 15889  003E3A  6F03               	movwf	_Flash_Status& (0+255),b
 15890                           
 15891                           ; BSR set to: 1
 15892                           ;RF.c: 225: if(Flash_Status)
 15893  003E3C  5103               	movf	_Flash_Status& (0+255),w,b
 15894  003E3E  E002               	bz	i2l6199
 15895                           
 15896                           ; BSR set to: 1
 15897                           ;RF.c: 226: {
 15898                           ;RF.c: 227: RF_LoadCode();
 15899  003E40  EC36  F002         	call	i2_RF_LoadCode	;wreg free
 15900  003E44                     i2l6199:
 15901                           
 15902                           ;RF.c: 228: }
 15903                           ;RF.c: 229: System_State = 8;
 15904  003E44  0E08               	movlw	8
 15905  003E46  0101               	movlb	1	; () banked
 15906  003E48  6FAE               	movwf	_System_State& (0+255),b	;volatile
 15907  003E4A  0C00               	retlw	0
 15908  003E4C                     __end_of_RF_CheckCode:
 15909                           	opt stack 0
 15910                           tblptru	equ	0xFF8
 15911                           tblptrh	equ	0xFF7
 15912                           tblptrl	equ	0xFF6
 15913                           tablat	equ	0xFF5
 15914                           prodh	equ	0xFF4
 15915                           prodl	equ	0xFF3
 15916                           intcon	equ	0xFF2
 15917                           intcon2	equ	0xFF1
 15918                           intcon3	equ	0xFF0
 15919                           postinc0	equ	0xFEE
 15920                           wreg	equ	0xFE8
 15921                           postdec1	equ	0xFE5
 15922                           fsr1l	equ	0xFE1
 15923                           bsr	equ	0xFE0
 15924                           indf2	equ	0xFDF
 15925                           postinc2	equ	0xFDE
 15926                           postdec2	equ	0xFDD
 15927                           plusw2	equ	0xFDB
 15928                           fsr2h	equ	0xFDA
 15929                           fsr2l	equ	0xFD9
 15930                           status	equ	0xFD8
 15931                           
 15932 ;; *************** function i2_RF_LoadCode *****************
 15933 ;; Defined at:
 15934 ;;		line 127 in file "RF.c"
 15935 ;; Parameters:    Size  Location     Type
 15936 ;;		None
 15937 ;; Auto vars:     Size  Location     Type
 15938 ;;  RF_LoadCode     3   28[BANK0 ] unsigned char 
 15939 ;;  RF_LoadCode     3   25[BANK0 ] unsigned char 
 15940 ;; Return value:  Size  Location     Type
 15941 ;;		None               void
 15942 ;; Registers used:
 15943 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15944 ;; Tracked objects:
 15945 ;;		On entry : F/1
 15946 ;;		On exit  : F/0
 15947 ;;		Unchanged: 0/0
 15948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15949 ;;      Params:         0       0       0       0       0
 15950 ;;      Locals:         0       6       0       0       0
 15951 ;;      Temps:          0       0       0       0       0
 15952 ;;      Totals:         0       6       0       0       0
 15953 ;;Total ram usage:        6 bytes
 15954 ;; Hardware stack levels used:    1
 15955 ;; Hardware stack levels required when called:    2
 15956 ;; This function calls:
 15957 ;;		i2_RF_CalculateCodesize
 15958 ;;		i2___ftge
 15959 ;;		i2___ftmul
 15960 ;;		i2___fttol
 15961 ;;		i2___lwtoft
 15962 ;; This function is called by:
 15963 ;;		_RF_CheckCode
 15964 ;; This function uses a non-reentrant model
 15965 ;;
 15966                           
 15967                           	psect	text104
 15968  00046C                     __ptext104:
 15969                           	opt stack 0
 15970  00046C                     i2_RF_LoadCode:
 15971                           	opt stack 14
 15972                           
 15973                           ; BSR set to: 1
 15974                           ;RF.c: 130: double High = 0.0;
 15975                           
 15976                           ;incstack = 0
 15977  00046C  0100               	movlb	0	; () banked
 15978  00046E  6B9C               	clrf	i2RF_LoadCode@High& (0+255),b
 15979  000470  6B9D               	clrf	(i2RF_LoadCode@High+1)& (0+255),b
 15980  000472  6B9E               	clrf	(i2RF_LoadCode@High+2)& (0+255),b
 15981                           
 15982                           ; BSR set to: 0
 15983                           ;RF.c: 132: Low = (double)RF_SavedTiming[0] * (1.0 - 0.02);
 15984  000474  0E80               	movlw	128
 15985  000476  6EF6               	movwf	tblptrl,c
 15986  000478                     	if	1	;There is more than 1 active tblptr byte
 15987  000478  0E25               	movlw	37
 15988  00047A  6EF7               	movwf	tblptrh,c
 15989  00047C                     	endif
 15990  00047C                     	if	0	;There are less than 3 active tblptr bytes
 15991  00047C                     	endif
 15992  00047C  0009               	tblrd		*+
 15993  00047E  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15994  000482  000A               	tblrd		*-
 15995  000484  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15996  000488  ECCB  F00B         	call	i2___lwtoft	;wreg free
 15997  00048C  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15998  000490  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15999  000494  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 16000  000498  0EE1               	movlw	225
 16001  00049A  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 16002  00049C  0E7A               	movlw	122
 16003  00049E  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 16004  0004A0  0E3F               	movlw	63
 16005  0004A2  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 16006  0004A4  EC92  F003         	call	i2___ftmul	;wreg free
 16007  0004A8  C08B  F099         	movff	?i2___ftmul,i2RF_LoadCode@Low
 16008  0004AC  C08C  F09A         	movff	?i2___ftmul+1,i2RF_LoadCode@Low+1
 16009  0004B0  C08D  F09B         	movff	?i2___ftmul+2,i2RF_LoadCode@Low+2
 16010                           
 16011                           ;RF.c: 133: High = (double)RF_SavedTiming[0] * (1.0 + 0.02);
 16012  0004B4  0E80               	movlw	128
 16013  0004B6  6EF6               	movwf	tblptrl,c
 16014  0004B8                     	if	1	;There is more than 1 active tblptr byte
 16015  0004B8  0E25               	movlw	37
 16016  0004BA  6EF7               	movwf	tblptrh,c
 16017  0004BC                     	endif
 16018  0004BC                     	if	0	;There are less than 3 active tblptr bytes
 16019  0004BC                     	endif
 16020  0004BC  0009               	tblrd		*+
 16021  0004BE  CFF5 F088          	movff	tablat,i2___lwtoft@c
 16022  0004C2  000A               	tblrd		*-
 16023  0004C4  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 16024  0004C8  ECCB  F00B         	call	i2___lwtoft	;wreg free
 16025  0004CC  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 16026  0004D0  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 16027  0004D4  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 16028  0004D8  0E8F               	movlw	143
 16029  0004DA  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 16030  0004DC  0E82               	movlw	130
 16031  0004DE  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 16032  0004E0  0E3F               	movlw	63
 16033  0004E2  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 16034  0004E4  EC92  F003         	call	i2___ftmul	;wreg free
 16035  0004E8  C08B  F09C         	movff	?i2___ftmul,i2RF_LoadCode@High
 16036  0004EC  C08C  F09D         	movff	?i2___ftmul+1,i2RF_LoadCode@High+1
 16037  0004F0  C08D  F09E         	movff	?i2___ftmul+2,i2RF_LoadCode@High+2
 16038                           
 16039                           ; BSR set to: 0
 16040                           ;RF.c: 135: if(Low < 300)
 16041  0004F4  C099  F08B         	movff	i2RF_LoadCode@Low,i2___ftge@ff1
 16042  0004F8  C09A  F08C         	movff	i2RF_LoadCode@Low+1,i2___ftge@ff1+1
 16043  0004FC  C09B  F08D         	movff	i2RF_LoadCode@Low+2,i2___ftge@ff1+2
 16044  000500  6B8E               	clrf	i2___ftge@ff2& (0+255),b
 16045  000502  0E96               	movlw	150
 16046  000504  6F8F               	movwf	(i2___ftge@ff2+1)& (0+255),b
 16047  000506  0E43               	movlw	67
 16048  000508  6F90               	movwf	(i2___ftge@ff2+2)& (0+255),b
 16049  00050A  EC99  F009         	call	i2___ftge	;wreg free
 16050  00050E  E205               	bc	i2l5621
 16051                           
 16052                           ; BSR set to: 0
 16053                           ;RF.c: 136: {
 16054                           ;RF.c: 137: Low = 300;
 16055  000510  6B99               	clrf	i2RF_LoadCode@Low& (0+255),b
 16056  000512  0E96               	movlw	150
 16057  000514  6F9A               	movwf	(i2RF_LoadCode@Low+1)& (0+255),b
 16058  000516  0E43               	movlw	67
 16059  000518  6F9B               	movwf	(i2RF_LoadCode@Low+2)& (0+255),b
 16060  00051A                     i2l5621:
 16061                           
 16062                           ; BSR set to: 0
 16063                           ;RF.c: 138: }
 16064                           ;RF.c: 139: if(High > 2000)
 16065  00051A  6B8B               	clrf	i2___ftge@ff1& (0+255),b
 16066  00051C  0EFA               	movlw	250
 16067  00051E  6F8C               	movwf	(i2___ftge@ff1+1)& (0+255),b
 16068  000520  0E44               	movlw	68
 16069  000522  6F8D               	movwf	(i2___ftge@ff1+2)& (0+255),b
 16070  000524  C09C  F08E         	movff	i2RF_LoadCode@High,i2___ftge@ff2
 16071  000528  C09D  F08F         	movff	i2RF_LoadCode@High+1,i2___ftge@ff2+1
 16072  00052C  C09E  F090         	movff	i2RF_LoadCode@High+2,i2___ftge@ff2+2
 16073  000530  EC99  F009         	call	i2___ftge	;wreg free
 16074  000534  E205               	bc	i2l5625
 16075                           
 16076                           ; BSR set to: 0
 16077                           ;RF.c: 140: {
 16078                           ;RF.c: 141: High = 2000;
 16079  000536  6B9C               	clrf	i2RF_LoadCode@High& (0+255),b
 16080  000538  0EFA               	movlw	250
 16081  00053A  6F9D               	movwf	(i2RF_LoadCode@High+1)& (0+255),b
 16082  00053C  0E44               	movlw	68
 16083  00053E  6F9E               	movwf	(i2RF_LoadCode@High+2)& (0+255),b
 16084  000540                     i2l5625:
 16085                           
 16086                           ; BSR set to: 0
 16087                           ;RF.c: 142: }
 16088                           ;RF.c: 144: RF_SyncLow = (unsigned int) Low;
 16089  000540  C099  F080         	movff	i2RF_LoadCode@Low,i2___fttol@f1
 16090  000544  C09A  F081         	movff	i2RF_LoadCode@Low+1,i2___fttol@f1+1
 16091  000548  C09B  F082         	movff	i2RF_LoadCode@Low+2,i2___fttol@f1+2
 16092  00054C  ECC2  F004         	call	i2___fttol	;wreg free
 16093  000550  C080  F0C2         	movff	?i2___fttol,_RF_SyncLow
 16094  000554  C081  F0C3         	movff	?i2___fttol+1,_RF_SyncLow+1
 16095                           
 16096                           ; BSR set to: 0
 16097                           ;RF.c: 145: RF_SyncHigh = (unsigned int) High;
 16098  000558  C09C  F080         	movff	i2RF_LoadCode@High,i2___fttol@f1
 16099  00055C  C09D  F081         	movff	i2RF_LoadCode@High+1,i2___fttol@f1+1
 16100  000560  C09E  F082         	movff	i2RF_LoadCode@High+2,i2___fttol@f1+2
 16101  000564  ECC2  F004         	call	i2___fttol	;wreg free
 16102  000568  C080  F0C0         	movff	?i2___fttol,_RF_SyncHigh
 16103  00056C  C081  F0C1         	movff	?i2___fttol+1,_RF_SyncHigh+1
 16104                           
 16105                           ; BSR set to: 0
 16106                           ;RF.c: 147: RF_CodeSize = RF_CalculateCodesize();
 16107  000570  ECFE  F00A         	call	i2_RF_CalculateCodesize	;wreg free
 16108  000574  6FC8               	movwf	_RF_CodeSize& (0+255),b
 16109                           
 16110                           ; BSR set to: 0
 16111  000576  0012               	return		;funcret
 16112  000578                     __end_ofi2_RF_LoadCode:
 16113                           	opt stack 0
 16114                           tblptru	equ	0xFF8
 16115                           tblptrh	equ	0xFF7
 16116                           tblptrl	equ	0xFF6
 16117                           tablat	equ	0xFF5
 16118                           prodh	equ	0xFF4
 16119                           prodl	equ	0xFF3
 16120                           intcon	equ	0xFF2
 16121                           intcon2	equ	0xFF1
 16122                           intcon3	equ	0xFF0
 16123                           postinc0	equ	0xFEE
 16124                           wreg	equ	0xFE8
 16125                           postdec1	equ	0xFE5
 16126                           fsr1l	equ	0xFE1
 16127                           bsr	equ	0xFE0
 16128                           indf2	equ	0xFDF
 16129                           postinc2	equ	0xFDE
 16130                           postdec2	equ	0xFDD
 16131                           plusw2	equ	0xFDB
 16132                           fsr2h	equ	0xFDA
 16133                           fsr2l	equ	0xFD9
 16134                           status	equ	0xFD8
 16135                           
 16136 ;; *************** function i2___lwtoft *****************
 16137 ;; Defined at:
 16138 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
 16139 ;; Parameters:    Size  Location     Type
 16140 ;;  c               2    8[BANK0 ] unsigned int 
 16141 ;; Auto vars:     Size  Location     Type
 16142 ;;		None
 16143 ;; Return value:  Size  Location     Type
 16144 ;;                  3    8[BANK0 ] float 
 16145 ;; Registers used:
 16146 ;;		wreg, status,2, status,0, cstack
 16147 ;; Tracked objects:
 16148 ;;		On entry : F/0
 16149 ;;		On exit  : F/0
 16150 ;;		Unchanged: 0/0
 16151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16152 ;;      Params:         0       3       0       0       0
 16153 ;;      Locals:         0       0       0       0       0
 16154 ;;      Temps:          0       0       0       0       0
 16155 ;;      Totals:         0       3       0       0       0
 16156 ;;Total ram usage:        3 bytes
 16157 ;; Hardware stack levels used:    1
 16158 ;; Hardware stack levels required when called:    1
 16159 ;; This function calls:
 16160 ;;		i2___ftpack
 16161 ;; This function is called by:
 16162 ;;		_RF_CheckCode
 16163 ;;		i2_RF_LoadCode
 16164 ;; This function uses a non-reentrant model
 16165 ;;
 16166                           
 16167                           	psect	text105
 16168  001796                     __ptext105:
 16169                           	opt stack 0
 16170  001796                     i2___lwtoft:
 16171                           	opt stack 15
 16172                           
 16173                           ; BSR set to: 0
 16174                           
 16175                           ; BSR set to: 0
 16176                           ;incstack = 0
 16177  001796  C088  F080         	movff	i2___lwtoft@c,i2___ftpack@arg
 16178  00179A  C089  F081         	movff	i2___lwtoft@c+1,i2___ftpack@arg+1
 16179  00179E  6B82               	clrf	(i2___ftpack@arg+2)& (0+255),b
 16180  0017A0  0E8E               	movlw	142
 16181  0017A2  6F83               	movwf	i2___ftpack@exp& (0+255),b
 16182  0017A4  0E00               	movlw	0
 16183  0017A6  6F84               	movwf	i2___ftpack@sign& (0+255),b
 16184  0017A8  ECE9  F007         	call	i2___ftpack	;wreg free
 16185  0017AC  C080  F088         	movff	?i2___ftpack,?i2___lwtoft
 16186  0017B0  C081  F089         	movff	?i2___ftpack+1,?i2___lwtoft+1
 16187  0017B4  C082  F08A         	movff	?i2___ftpack+2,?i2___lwtoft+2
 16188                           
 16189                           ; BSR set to: 0
 16190  0017B8  0012               	return		;funcret
 16191  0017BA                     __end_ofi2___lwtoft:
 16192                           	opt stack 0
 16193                           tblptru	equ	0xFF8
 16194                           tblptrh	equ	0xFF7
 16195                           tblptrl	equ	0xFF6
 16196                           tablat	equ	0xFF5
 16197                           prodh	equ	0xFF4
 16198                           prodl	equ	0xFF3
 16199                           intcon	equ	0xFF2
 16200                           intcon2	equ	0xFF1
 16201                           intcon3	equ	0xFF0
 16202                           postinc0	equ	0xFEE
 16203                           wreg	equ	0xFE8
 16204                           postdec1	equ	0xFE5
 16205                           fsr1l	equ	0xFE1
 16206                           bsr	equ	0xFE0
 16207                           indf2	equ	0xFDF
 16208                           postinc2	equ	0xFDE
 16209                           postdec2	equ	0xFDD
 16210                           plusw2	equ	0xFDB
 16211                           fsr2h	equ	0xFDA
 16212                           fsr2l	equ	0xFD9
 16213                           status	equ	0xFD8
 16214                           
 16215 ;; *************** function i2___fttol *****************
 16216 ;; Defined at:
 16217 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
 16218 ;; Parameters:    Size  Location     Type
 16219 ;;  f1              3    0[BANK0 ] float 
 16220 ;; Auto vars:     Size  Location     Type
 16221 ;;  __fttol         4   10[BANK0 ] unsigned long 
 16222 ;;  __fttol         1   14[BANK0 ] unsigned char 
 16223 ;;  __fttol         1    9[BANK0 ] unsigned char 
 16224 ;; Return value:  Size  Location     Type
 16225 ;;                  4    0[BANK0 ] long 
 16226 ;; Registers used:
 16227 ;;		wreg, status,2, status,0
 16228 ;; Tracked objects:
 16229 ;;		On entry : F/0
 16230 ;;		On exit  : F/0
 16231 ;;		Unchanged: 0/0
 16232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16233 ;;      Params:         0       4       0       0       0
 16234 ;;      Locals:         0       6       0       0       0
 16235 ;;      Temps:          0       5       0       0       0
 16236 ;;      Totals:         0      15       0       0       0
 16237 ;;Total ram usage:       15 bytes
 16238 ;; Hardware stack levels used:    1
 16239 ;; This function calls:
 16240 ;;		Nothing
 16241 ;; This function is called by:
 16242 ;;		i2_RF_LoadCode
 16243 ;; This function uses a non-reentrant model
 16244 ;;
 16245                           
 16246                           	psect	text106
 16247  000984                     __ptext106:
 16248                           	opt stack 0
 16249  000984                     i2___fttol:
 16250                           	opt stack 15
 16251                           
 16252                           ; BSR set to: 0
 16253                           
 16254                           ; BSR set to: 0
 16255                           ;incstack = 0
 16256  000984  C082  F084         	movff	i2___fttol@f1+2,??i2___fttol
 16257  000988  6B85               	clrf	(??i2___fttol+1)& (0+255),b
 16258  00098A  6B86               	clrf	(??i2___fttol+2)& (0+255),b
 16259  00098C  3581               	rlcf	(i2___fttol@f1+1)& (0+255),w,b
 16260  00098E  3784               	rlcf	??i2___fttol& (0+255),f,b
 16261  000990  E301               	bnc	u475_41
 16262  000992  8185               	bsf	(??i2___fttol+1)& (0+255),0,b
 16263  000994                     u475_41:
 16264  000994  5184               	movf	??i2___fttol& (0+255),w,b
 16265  000996  6F8E               	movwf	i2___fttol@exp1& (0+255),b
 16266  000998  518E               	movf	i2___fttol@exp1& (0+255),w,b
 16267  00099A  E105               	bnz	i2l5035
 16268  00099C                     i2l5033:
 16269                           
 16270                           ; BSR set to: 0
 16271  00099C  6B80               	clrf	?i2___fttol& (0+255),b
 16272  00099E  6B81               	clrf	(?i2___fttol+1)& (0+255),b
 16273  0009A0  6B82               	clrf	(?i2___fttol+2)& (0+255),b
 16274  0009A2  6B83               	clrf	(?i2___fttol+3)& (0+255),b
 16275  0009A4  0012               	return	
 16276  0009A6                     i2l5035:
 16277                           
 16278                           ; BSR set to: 0
 16279  0009A6  0E17               	movlw	23
 16280  0009A8  6F84               	movwf	??i2___fttol& (0+255),b
 16281  0009AA  C080  F085         	movff	i2___fttol@f1,??i2___fttol+1
 16282  0009AE  C081  F086         	movff	i2___fttol@f1+1,??i2___fttol+2
 16283  0009B2  C082  F087         	movff	i2___fttol@f1+2,??i2___fttol+3
 16284  0009B6  2984               	incf	??i2___fttol& (0+255),w,b
 16285  0009B8  6F88               	movwf	(??i2___fttol+4)& (0+255),b
 16286  0009BA  D004               	goto	i2u477_40
 16287  0009BC                     i2u477_45:
 16288  0009BC  90D8               	bcf	status,0,c
 16289  0009BE  3387               	rrcf	(??i2___fttol+3)& (0+255),f,b
 16290  0009C0  3386               	rrcf	(??i2___fttol+2)& (0+255),f,b
 16291  0009C2  3385               	rrcf	(??i2___fttol+1)& (0+255),f,b
 16292  0009C4                     i2u477_40:
 16293  0009C4  2F88               	decfsz	(??i2___fttol+4)& (0+255),f,b
 16294  0009C6  D7FA               	goto	i2u477_45
 16295  0009C8  0100               	movlb	0	; () banked
 16296  0009CA  5185               	movf	(??i2___fttol+1)& (0+255),w,b
 16297  0009CC  6F89               	movwf	i2___fttol@sign1& (0+255),b
 16298                           
 16299                           ; BSR set to: 0
 16300  0009CE  8F81               	bsf	(i2___fttol@f1+1)& (0+255),7,b
 16301                           
 16302                           ; BSR set to: 0
 16303  0009D0  6B82               	clrf	(i2___fttol@f1+2)& (0+255),b
 16304                           
 16305                           ; BSR set to: 0
 16306  0009D2  5180               	movf	i2___fttol@f1& (0+255),w,b
 16307  0009D4  6F8A               	movwf	i2___fttol@lval& (0+255),b
 16308  0009D6  5181               	movf	(i2___fttol@f1+1)& (0+255),w,b
 16309  0009D8  6F8B               	movwf	(i2___fttol@lval+1)& (0+255),b
 16310  0009DA  5182               	movf	(i2___fttol@f1+2)& (0+255),w,b
 16311  0009DC  6F8C               	movwf	(i2___fttol@lval+2)& (0+255),b
 16312  0009DE  6B8D               	clrf	(i2___fttol@lval+3)& (0+255),b
 16313                           
 16314                           ; BSR set to: 0
 16315  0009E0  0E8E               	movlw	142
 16316  0009E2  5F8E               	subwf	i2___fttol@exp1& (0+255),f,b
 16317                           
 16318                           ; BSR set to: 0
 16319  0009E4  AF8E               	btfss	i2___fttol@exp1& (0+255),7,b
 16320  0009E6  D00C               	goto	i2l5055
 16321                           
 16322                           ; BSR set to: 0
 16323  0009E8  518E               	movf	i2___fttol@exp1& (0+255),w,b
 16324  0009EA  0A80               	xorlw	128
 16325  0009EC  0F8F               	addlw	143
 16326  0009EE  E3D6               	bnc	i2l5033
 16327  0009F0                     i2l5051:
 16328                           
 16329                           ; BSR set to: 0
 16330  0009F0  90D8               	bcf	status,0,c
 16331  0009F2  338D               	rrcf	(i2___fttol@lval+3)& (0+255),f,b
 16332  0009F4  338C               	rrcf	(i2___fttol@lval+2)& (0+255),f,b
 16333  0009F6  338B               	rrcf	(i2___fttol@lval+1)& (0+255),f,b
 16334  0009F8  338A               	rrcf	i2___fttol@lval& (0+255),f,b
 16335                           
 16336                           ; BSR set to: 0
 16337  0009FA  3F8E               	incfsz	i2___fttol@exp1& (0+255),f,b
 16338  0009FC  D7F9               	goto	i2l5051
 16339  0009FE  D00C               	goto	i2l5063
 16340  000A00                     i2l5055:
 16341                           
 16342                           ; BSR set to: 0
 16343  000A00  0E17               	movlw	23
 16344  000A02  658E               	cpfsgt	i2___fttol@exp1& (0+255),b
 16345  000A04  D007               	goto	i2l5061
 16346  000A06  D7CA               	goto	i2l5033
 16347  000A08                     i2l5059:
 16348                           
 16349                           ; BSR set to: 0
 16350  000A08  90D8               	bcf	status,0,c
 16351  000A0A  378A               	rlcf	i2___fttol@lval& (0+255),f,b
 16352  000A0C  378B               	rlcf	(i2___fttol@lval+1)& (0+255),f,b
 16353  000A0E  378C               	rlcf	(i2___fttol@lval+2)& (0+255),f,b
 16354  000A10  378D               	rlcf	(i2___fttol@lval+3)& (0+255),f,b
 16355  000A12  078E               	decf	i2___fttol@exp1& (0+255),f,b
 16356  000A14                     i2l5061:
 16357                           
 16358                           ; BSR set to: 0
 16359  000A14  518E               	movf	i2___fttol@exp1& (0+255),w,b
 16360  000A16  E1F8               	bnz	i2l5059
 16361  000A18                     i2l5063:
 16362                           
 16363                           ; BSR set to: 0
 16364  000A18  5189               	movf	i2___fttol@sign1& (0+255),w,b
 16365  000A1A  E008               	bz	i2l5067
 16366                           
 16367                           ; BSR set to: 0
 16368  000A1C  1F8D               	comf	(i2___fttol@lval+3)& (0+255),f,b
 16369  000A1E  1F8C               	comf	(i2___fttol@lval+2)& (0+255),f,b
 16370  000A20  1F8B               	comf	(i2___fttol@lval+1)& (0+255),f,b
 16371  000A22  6D8A               	negf	i2___fttol@lval& (0+255),b
 16372  000A24  0E00               	movlw	0
 16373  000A26  238B               	addwfc	(i2___fttol@lval+1)& (0+255),f,b
 16374  000A28  238C               	addwfc	(i2___fttol@lval+2)& (0+255),f,b
 16375  000A2A  238D               	addwfc	(i2___fttol@lval+3)& (0+255),f,b
 16376  000A2C                     i2l5067:
 16377                           
 16378                           ; BSR set to: 0
 16379  000A2C  C08A  F080         	movff	i2___fttol@lval,?i2___fttol
 16380  000A30  C08B  F081         	movff	i2___fttol@lval+1,?i2___fttol+1
 16381  000A34  C08C  F082         	movff	i2___fttol@lval+2,?i2___fttol+2
 16382  000A38  C08D  F083         	movff	i2___fttol@lval+3,?i2___fttol+3
 16383                           
 16384                           ; BSR set to: 0
 16385  000A3C  0012               	return		;funcret
 16386  000A3E                     __end_ofi2___fttol:
 16387                           	opt stack 0
 16388                           tblptru	equ	0xFF8
 16389                           tblptrh	equ	0xFF7
 16390                           tblptrl	equ	0xFF6
 16391                           tablat	equ	0xFF5
 16392                           prodh	equ	0xFF4
 16393                           prodl	equ	0xFF3
 16394                           intcon	equ	0xFF2
 16395                           intcon2	equ	0xFF1
 16396                           intcon3	equ	0xFF0
 16397                           postinc0	equ	0xFEE
 16398                           wreg	equ	0xFE8
 16399                           postdec1	equ	0xFE5
 16400                           fsr1l	equ	0xFE1
 16401                           bsr	equ	0xFE0
 16402                           indf2	equ	0xFDF
 16403                           postinc2	equ	0xFDE
 16404                           postdec2	equ	0xFDD
 16405                           plusw2	equ	0xFDB
 16406                           fsr2h	equ	0xFDA
 16407                           fsr2l	equ	0xFD9
 16408                           status	equ	0xFD8
 16409                           
 16410 ;; *************** function i2___ftmul *****************
 16411 ;; Defined at:
 16412 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
 16413 ;; Parameters:    Size  Location     Type
 16414 ;;  f1              3   11[BANK0 ] float 
 16415 ;;  f2              3   14[BANK0 ] float 
 16416 ;; Auto vars:     Size  Location     Type
 16417 ;;  __ftmul         3   22[BANK0 ] unsigned um
 16418 ;;  __ftmul         1   21[BANK0 ] unsigned char 
 16419 ;;  __ftmul         1   20[BANK0 ] unsigned char 
 16420 ;;  __ftmul         1    0        unsigned char 
 16421 ;; Return value:  Size  Location     Type
 16422 ;;                  3   11[BANK0 ] float 
 16423 ;; Registers used:
 16424 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 16425 ;; Tracked objects:
 16426 ;;		On entry : F/0
 16427 ;;		On exit  : F/0
 16428 ;;		Unchanged: 0/0
 16429 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16430 ;;      Params:         0       6       0       0       0
 16431 ;;      Locals:         0       5       0       0       0
 16432 ;;      Temps:          0       3       0       0       0
 16433 ;;      Totals:         0      14       0       0       0
 16434 ;;Total ram usage:       14 bytes
 16435 ;; Hardware stack levels used:    1
 16436 ;; Hardware stack levels required when called:    1
 16437 ;; This function calls:
 16438 ;;		i2___ftpack
 16439 ;; This function is called by:
 16440 ;;		_RF_CheckCode
 16441 ;;		i2_RF_LoadCode
 16442 ;; This function uses a non-reentrant model
 16443 ;;
 16444                           
 16445                           	psect	text107
 16446  000724                     __ptext107:
 16447                           	opt stack 0
 16448  000724                     i2___ftmul:
 16449                           	opt stack 15
 16450                           
 16451                           ; BSR set to: 0
 16452                           
 16453                           ; BSR set to: 0
 16454                           ;incstack = 0
 16455  000724  C08D  F091         	movff	i2___ftmul@f1+2,??i2___ftmul
 16456  000728  6B92               	clrf	(??i2___ftmul+1)& (0+255),b
 16457  00072A  6B93               	clrf	(??i2___ftmul+2)& (0+255),b
 16458  00072C  358C               	rlcf	(i2___ftmul@f1+1)& (0+255),w,b
 16459  00072E  3791               	rlcf	??i2___ftmul& (0+255),f,b
 16460  000730  E301               	bnc	u462_41
 16461  000732  8192               	bsf	(??i2___ftmul+1)& (0+255),0,b
 16462  000734                     u462_41:
 16463  000734  5191               	movf	??i2___ftmul& (0+255),w,b
 16464  000736  6F94               	movwf	i2___ftmul@exp& (0+255),b
 16465  000738  5194               	movf	i2___ftmul@exp& (0+255),w,b
 16466  00073A  E104               	bnz	i2l4957
 16467                           
 16468                           ; BSR set to: 0
 16469  00073C  6B8B               	clrf	?i2___ftmul& (0+255),b
 16470  00073E  6B8C               	clrf	(?i2___ftmul+1)& (0+255),b
 16471  000740  6B8D               	clrf	(?i2___ftmul+2)& (0+255),b
 16472  000742  0012               	return	
 16473  000744                     i2l4957:
 16474                           
 16475                           ; BSR set to: 0
 16476  000744  C090  F091         	movff	i2___ftmul@f2+2,??i2___ftmul
 16477  000748  6B92               	clrf	(??i2___ftmul+1)& (0+255),b
 16478  00074A  6B93               	clrf	(??i2___ftmul+2)& (0+255),b
 16479  00074C  358F               	rlcf	(i2___ftmul@f2+1)& (0+255),w,b
 16480  00074E  3791               	rlcf	??i2___ftmul& (0+255),f,b
 16481  000750  E301               	bnc	u464_41
 16482  000752  8192               	bsf	(??i2___ftmul+1)& (0+255),0,b
 16483  000754                     u464_41:
 16484  000754  5191               	movf	??i2___ftmul& (0+255),w,b
 16485  000756  6F95               	movwf	i2___ftmul@sign& (0+255),b
 16486  000758  5195               	movf	i2___ftmul@sign& (0+255),w,b
 16487  00075A  E104               	bnz	i2l4961
 16488                           
 16489                           ; BSR set to: 0
 16490  00075C  6B8B               	clrf	?i2___ftmul& (0+255),b
 16491  00075E  6B8C               	clrf	(?i2___ftmul+1)& (0+255),b
 16492  000760  6B8D               	clrf	(?i2___ftmul+2)& (0+255),b
 16493  000762  0012               	return	
 16494  000764                     i2l4961:
 16495                           
 16496                           ; BSR set to: 0
 16497  000764  5195               	movf	i2___ftmul@sign& (0+255),w,b
 16498  000766  0F7B               	addlw	123
 16499  000768  2794               	addwf	i2___ftmul@exp& (0+255),f,b
 16500                           
 16501                           ; BSR set to: 0
 16502  00076A  C08D  F095         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 16503  00076E  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 16504  000770  1B95               	xorwf	i2___ftmul@sign& (0+255),f,b
 16505  000772  0E80               	movlw	128
 16506  000774  1795               	andwf	i2___ftmul@sign& (0+255),f,b
 16507                           
 16508                           ; BSR set to: 0
 16509  000776  8F8C               	bsf	(i2___ftmul@f1+1)& (0+255),7,b
 16510                           
 16511                           ; BSR set to: 0
 16512  000778  8F8F               	bsf	(i2___ftmul@f2+1)& (0+255),7,b
 16513                           
 16514                           ; BSR set to: 0
 16515  00077A  6B90               	clrf	(i2___ftmul@f2+2)& (0+255),b
 16516                           
 16517                           ; BSR set to: 0
 16518                           
 16519                           ; BSR set to: 0
 16520  00077C  6B8D               	clrf	(i2___ftmul@f1+2)& (0+255),b
 16521                           
 16522                           ; BSR set to: 0
 16523  00077E  518B               	movf	i2___ftmul@f1& (0+255),w,b
 16524  000780  038E               	mulwf	i2___ftmul@f2& (0+255),b
 16525  000782  CFF4 FFF3          	movff	prodh,prodl
 16526  000786  6AF4               	clrf	prodh,c
 16527  000788  CFF3 F096          	movff	prodl,i2___ftmul@f3_as_product
 16528  00078C  CFF4 F097          	movff	prodh,i2___ftmul@f3_as_product+1
 16529  000790  6B98               	clrf	(i2___ftmul@f3_as_product+2)& (0+255),b
 16530                           
 16531                           ; BSR set to: 0
 16532  000792  518B               	movf	i2___ftmul@f1& (0+255),w,b
 16533  000794  038F               	mulwf	(i2___ftmul@f2+1)& (0+255),b
 16534  000796  50F3               	movf	prodl,w,c
 16535  000798  2796               	addwf	i2___ftmul@f3_as_product& (0+255),f,b
 16536  00079A  50F4               	movf	prodh,w,c
 16537  00079C  2397               	addwfc	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16538  00079E  0E00               	movlw	0
 16539  0007A0  2398               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16540                           
 16541                           ; BSR set to: 0
 16542  0007A2  518C               	movf	(i2___ftmul@f1+1)& (0+255),w,b
 16543  0007A4  038E               	mulwf	i2___ftmul@f2& (0+255),b
 16544  0007A6  50F3               	movf	prodl,w,c
 16545  0007A8  2796               	addwf	i2___ftmul@f3_as_product& (0+255),f,b
 16546  0007AA  50F4               	movf	prodh,w,c
 16547  0007AC  2397               	addwfc	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16548  0007AE  0E00               	movlw	0
 16549  0007B0  2398               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16550                           
 16551                           ; BSR set to: 0
 16552  0007B2  518C               	movf	(i2___ftmul@f1+1)& (0+255),w,b
 16553  0007B4  038F               	mulwf	(i2___ftmul@f2+1)& (0+255),b
 16554  0007B6  50F3               	movf	prodl,w,c
 16555  0007B8  2797               	addwf	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16556  0007BA  50F4               	movf	prodh,w,c
 16557  0007BC  2398               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16558                           
 16559                           ; BSR set to: 0
 16560  0007BE  AF98               	btfss	(i2___ftmul@f3_as_product+2)& (0+255),7,b
 16561  0007C0  D005               	goto	i2l1397
 16562                           
 16563                           ; BSR set to: 0
 16564  0007C2  90D8               	bcf	status,0,c
 16565  0007C4  3398               	rrcf	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16566  0007C6  3397               	rrcf	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16567  0007C8  3396               	rrcf	i2___ftmul@f3_as_product& (0+255),f,b
 16568  0007CA  2B94               	incf	i2___ftmul@exp& (0+255),f,b
 16569  0007CC                     i2l1397:
 16570                           
 16571                           ; BSR set to: 0
 16572  0007CC  90D8               	bcf	status,0,c
 16573  0007CE  3398               	rrcf	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16574  0007D0  3397               	rrcf	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16575  0007D2  3396               	rrcf	i2___ftmul@f3_as_product& (0+255),f,b
 16576                           
 16577                           ; BSR set to: 0
 16578  0007D4  C096  F080         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 16579  0007D8  C097  F081         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 16580  0007DC  C098  F082         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 16581  0007E0  C094  F083         	movff	i2___ftmul@exp,i2___ftpack@exp
 16582  0007E4  C095  F084         	movff	i2___ftmul@sign,i2___ftpack@sign
 16583  0007E8  ECE9  F007         	call	i2___ftpack	;wreg free
 16584  0007EC  C080  F08B         	movff	?i2___ftpack,?i2___ftmul
 16585  0007F0  C081  F08C         	movff	?i2___ftpack+1,?i2___ftmul+1
 16586  0007F4  C082  F08D         	movff	?i2___ftpack+2,?i2___ftmul+2
 16587                           
 16588                           ; BSR set to: 0
 16589  0007F8  0012               	return		;funcret
 16590  0007FA                     __end_ofi2___ftmul:
 16591                           	opt stack 0
 16592                           tblptru	equ	0xFF8
 16593                           tblptrh	equ	0xFF7
 16594                           tblptrl	equ	0xFF6
 16595                           tablat	equ	0xFF5
 16596                           prodh	equ	0xFF4
 16597                           prodl	equ	0xFF3
 16598                           intcon	equ	0xFF2
 16599                           intcon2	equ	0xFF1
 16600                           intcon3	equ	0xFF0
 16601                           postinc0	equ	0xFEE
 16602                           wreg	equ	0xFE8
 16603                           postdec1	equ	0xFE5
 16604                           fsr1l	equ	0xFE1
 16605                           bsr	equ	0xFE0
 16606                           indf2	equ	0xFDF
 16607                           postinc2	equ	0xFDE
 16608                           postdec2	equ	0xFDD
 16609                           plusw2	equ	0xFDB
 16610                           fsr2h	equ	0xFDA
 16611                           fsr2l	equ	0xFD9
 16612                           status	equ	0xFD8
 16613                           
 16614 ;; *************** function i2___ftpack *****************
 16615 ;; Defined at:
 16616 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 16617 ;; Parameters:    Size  Location     Type
 16618 ;;  arg             3    0[BANK0 ] unsigned um
 16619 ;;  exp             1    3[BANK0 ] unsigned char 
 16620 ;;  sign            1    4[BANK0 ] unsigned char 
 16621 ;; Auto vars:     Size  Location     Type
 16622 ;;		None
 16623 ;; Return value:  Size  Location     Type
 16624 ;;                  3    0[BANK0 ] float 
 16625 ;; Registers used:
 16626 ;;		wreg, status,2, status,0
 16627 ;; Tracked objects:
 16628 ;;		On entry : F/0
 16629 ;;		On exit  : F/0
 16630 ;;		Unchanged: 0/0
 16631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16632 ;;      Params:         0       5       0       0       0
 16633 ;;      Locals:         0       0       0       0       0
 16634 ;;      Temps:          0       3       0       0       0
 16635 ;;      Totals:         0       8       0       0       0
 16636 ;;Total ram usage:        8 bytes
 16637 ;; Hardware stack levels used:    1
 16638 ;; This function calls:
 16639 ;;		Nothing
 16640 ;; This function is called by:
 16641 ;;		i2___ftmul
 16642 ;;		i2___lwtoft
 16643 ;; This function uses a non-reentrant model
 16644 ;;
 16645                           
 16646                           	psect	text108
 16647  000FD2                     __ptext108:
 16648                           	opt stack 0
 16649  000FD2                     i2___ftpack:
 16650                           	opt stack 15
 16651                           
 16652                           ; BSR set to: 0
 16653                           
 16654                           ; BSR set to: 0
 16655                           ;incstack = 0
 16656  000FD2  5183               	movf	i2___ftpack@exp& (0+255),w,b
 16657  000FD4  E004               	bz	i2l1313
 16658                           
 16659                           ; BSR set to: 0
 16660  000FD6  5180               	movf	i2___ftpack@arg& (0+255),w,b
 16661  000FD8  1181               	iorwf	(i2___ftpack@arg+1)& (0+255),w,b
 16662  000FDA  1182               	iorwf	(i2___ftpack@arg+2)& (0+255),w,b
 16663  000FDC  E109               	bnz	i2l4419
 16664  000FDE                     i2l1313:
 16665                           
 16666                           ; BSR set to: 0
 16667  000FDE  6B80               	clrf	?i2___ftpack& (0+255),b
 16668  000FE0  6B81               	clrf	(?i2___ftpack+1)& (0+255),b
 16669  000FE2  6B82               	clrf	(?i2___ftpack+2)& (0+255),b
 16670  000FE4  0012               	return	
 16671  000FE6                     i2l4417:
 16672                           
 16673                           ; BSR set to: 0
 16674  000FE6  2B83               	incf	i2___ftpack@exp& (0+255),f,b
 16675  000FE8  90D8               	bcf	status,0,c
 16676  000FEA  3382               	rrcf	(i2___ftpack@arg+2)& (0+255),f,b
 16677  000FEC  3381               	rrcf	(i2___ftpack@arg+1)& (0+255),f,b
 16678  000FEE  3380               	rrcf	i2___ftpack@arg& (0+255),f,b
 16679  000FF0                     i2l4419:
 16680                           
 16681                           ; BSR set to: 0
 16682  000FF0  6B85               	clrf	??i2___ftpack& (0+255),b
 16683  000FF2  6B86               	clrf	(??i2___ftpack+1)& (0+255),b
 16684  000FF4  0EFE               	movlw	254
 16685  000FF6  1582               	andwf	(i2___ftpack@arg+2)& (0+255),w,b
 16686  000FF8  6F87               	movwf	(??i2___ftpack+2)& (0+255),b
 16687  000FFA  5185               	movf	??i2___ftpack& (0+255),w,b
 16688  000FFC  1186               	iorwf	(??i2___ftpack+1)& (0+255),w,b
 16689  000FFE  1187               	iorwf	(??i2___ftpack+2)& (0+255),w,b
 16690  001000  E00A               	bz	i2l4425
 16691  001002  D7F1               	goto	i2l4417
 16692  001004                     i2l4421:
 16693                           
 16694                           ; BSR set to: 0
 16695  001004  2B83               	incf	i2___ftpack@exp& (0+255),f,b
 16696                           
 16697                           ; BSR set to: 0
 16698  001006  2B80               	incf	i2___ftpack@arg& (0+255),f,b
 16699  001008  0E00               	movlw	0
 16700  00100A  2381               	addwfc	(i2___ftpack@arg+1)& (0+255),f,b
 16701  00100C  2382               	addwfc	(i2___ftpack@arg+2)& (0+255),f,b
 16702  00100E  90D8               	bcf	status,0,c
 16703  001010  3382               	rrcf	(i2___ftpack@arg+2)& (0+255),f,b
 16704  001012  3381               	rrcf	(i2___ftpack@arg+1)& (0+255),f,b
 16705  001014  3380               	rrcf	i2___ftpack@arg& (0+255),f,b
 16706  001016                     i2l4425:
 16707                           
 16708                           ; BSR set to: 0
 16709  001016  6B85               	clrf	??i2___ftpack& (0+255),b
 16710  001018  6B86               	clrf	(??i2___ftpack+1)& (0+255),b
 16711  00101A  5182               	movf	(i2___ftpack@arg+2)& (0+255),w,b
 16712  00101C  6F87               	movwf	(??i2___ftpack+2)& (0+255),b
 16713  00101E  5185               	movf	??i2___ftpack& (0+255),w,b
 16714  001020  1186               	iorwf	(??i2___ftpack+1)& (0+255),w,b
 16715  001022  1187               	iorwf	(??i2___ftpack+2)& (0+255),w,b
 16716  001024  E006               	bz	i2l4429
 16717  001026  D7EE               	goto	i2l4421
 16718  001028                     i2l4427:
 16719                           
 16720                           ; BSR set to: 0
 16721  001028  0783               	decf	i2___ftpack@exp& (0+255),f,b
 16722  00102A  90D8               	bcf	status,0,c
 16723  00102C  3780               	rlcf	i2___ftpack@arg& (0+255),f,b
 16724  00102E  3781               	rlcf	(i2___ftpack@arg+1)& (0+255),f,b
 16725  001030  3782               	rlcf	(i2___ftpack@arg+2)& (0+255),f,b
 16726  001032                     i2l4429:
 16727                           
 16728                           ; BSR set to: 0
 16729  001032  BF81               	btfsc	(i2___ftpack@arg+1)& (0+255),7,b
 16730  001034  D003               	goto	i2l1325
 16731                           
 16732                           ; BSR set to: 0
 16733  001036  0E02               	movlw	2
 16734  001038  6183               	cpfslt	i2___ftpack@exp& (0+255),b
 16735  00103A  D7F6               	goto	i2l4427
 16736  00103C                     i2l1325:
 16737                           
 16738                           ; BSR set to: 0
 16739  00103C  A183               	btfss	i2___ftpack@exp& (0+255),0,b
 16740                           
 16741                           ; BSR set to: 0
 16742  00103E  9F81               	bcf	(i2___ftpack@arg+1)& (0+255),7,b
 16743                           
 16744                           ; BSR set to: 0
 16745  001040  90D8               	bcf	status,0,c
 16746  001042  3383               	rrcf	i2___ftpack@exp& (0+255),f,b
 16747                           
 16748                           ; BSR set to: 0
 16749  001044  5183               	movf	i2___ftpack@exp& (0+255),w,b
 16750  001046  1382               	iorwf	(i2___ftpack@arg+2)& (0+255),f,b
 16751                           
 16752                           ; BSR set to: 0
 16753  001048  5184               	movf	i2___ftpack@sign& (0+255),w,b
 16754  00104A  E001               	bz	i2l4443
 16755                           
 16756                           ; BSR set to: 0
 16757  00104C  8F82               	bsf	(i2___ftpack@arg+2)& (0+255),7,b
 16758  00104E                     i2l4443:
 16759                           
 16760                           ; BSR set to: 0
 16761  00104E  C080  F080         	movff	i2___ftpack@arg,?i2___ftpack
 16762  001052  C081  F081         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 16763  001056  C082  F082         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 16764                           
 16765                           ; BSR set to: 0
 16766  00105A  0012               	return		;funcret
 16767  00105C                     __end_ofi2___ftpack:
 16768                           	opt stack 0
 16769                           tblptru	equ	0xFF8
 16770                           tblptrh	equ	0xFF7
 16771                           tblptrl	equ	0xFF6
 16772                           tablat	equ	0xFF5
 16773                           prodh	equ	0xFF4
 16774                           prodl	equ	0xFF3
 16775                           intcon	equ	0xFF2
 16776                           intcon2	equ	0xFF1
 16777                           intcon3	equ	0xFF0
 16778                           postinc0	equ	0xFEE
 16779                           wreg	equ	0xFE8
 16780                           postdec1	equ	0xFE5
 16781                           fsr1l	equ	0xFE1
 16782                           bsr	equ	0xFE0
 16783                           indf2	equ	0xFDF
 16784                           postinc2	equ	0xFDE
 16785                           postdec2	equ	0xFDD
 16786                           plusw2	equ	0xFDB
 16787                           fsr2h	equ	0xFDA
 16788                           fsr2l	equ	0xFD9
 16789                           status	equ	0xFD8
 16790                           
 16791 ;; *************** function i2___ftge *****************
 16792 ;; Defined at:
 16793 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
 16794 ;; Parameters:    Size  Location     Type
 16795 ;;  ff1             3   11[BANK0 ] float 
 16796 ;;  ff2             3   14[BANK0 ] float 
 16797 ;; Auto vars:     Size  Location     Type
 16798 ;;		None
 16799 ;; Return value:  Size  Location     Type
 16800 ;;		None               void
 16801 ;; Registers used:
 16802 ;;		wreg, status,2, status,0
 16803 ;; Tracked objects:
 16804 ;;		On entry : F/0
 16805 ;;		On exit  : F/0
 16806 ;;		Unchanged: 0/0
 16807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16808 ;;      Params:         0       6       0       0       0
 16809 ;;      Locals:         0       0       0       0       0
 16810 ;;      Temps:          0       3       0       0       0
 16811 ;;      Totals:         0       9       0       0       0
 16812 ;;Total ram usage:        9 bytes
 16813 ;; Hardware stack levels used:    1
 16814 ;; This function calls:
 16815 ;;		Nothing
 16816 ;; This function is called by:
 16817 ;;		_RF_CheckCode
 16818 ;;		i2_RF_LoadCode
 16819 ;; This function uses a non-reentrant model
 16820 ;;
 16821                           
 16822                           	psect	text109
 16823  001332                     __ptext109:
 16824                           	opt stack 0
 16825  001332                     i2___ftge:
 16826                           	opt stack 16
 16827                           
 16828                           ; BSR set to: 0
 16829                           
 16830                           ; BSR set to: 0
 16831                           ;incstack = 0
 16832  001332  AF8D               	btfss	(i2___ftge@ff1+2)& (0+255),7,b
 16833  001334  D00D               	goto	i2l4901
 16834                           
 16835                           ; BSR set to: 0
 16836  001336  6B91               	clrf	??i2___ftge& (0+255),b
 16837  001338  6B92               	clrf	(??i2___ftge+1)& (0+255),b
 16838  00133A  0E80               	movlw	128
 16839  00133C  6F93               	movwf	(??i2___ftge+2)& (0+255),b
 16840  00133E  518B               	movf	i2___ftge@ff1& (0+255),w,b
 16841  001340  5D91               	subwf	??i2___ftge& (0+255),w,b
 16842  001342  6F8B               	movwf	i2___ftge@ff1& (0+255),b
 16843  001344  518C               	movf	(i2___ftge@ff1+1)& (0+255),w,b
 16844  001346  5992               	subwfb	(??i2___ftge+1)& (0+255),w,b
 16845  001348  6F8C               	movwf	(i2___ftge@ff1+1)& (0+255),b
 16846  00134A  518D               	movf	(i2___ftge@ff1+2)& (0+255),w,b
 16847  00134C  5993               	subwfb	(??i2___ftge+2)& (0+255),w,b
 16848  00134E  6F8D               	movwf	(i2___ftge@ff1+2)& (0+255),b
 16849  001350                     i2l4901:
 16850                           
 16851                           ; BSR set to: 0
 16852  001350  AF90               	btfss	(i2___ftge@ff2+2)& (0+255),7,b
 16853  001352  D00D               	goto	i2l4905
 16854                           
 16855                           ; BSR set to: 0
 16856  001354  6B91               	clrf	??i2___ftge& (0+255),b
 16857  001356  6B92               	clrf	(??i2___ftge+1)& (0+255),b
 16858  001358  0E80               	movlw	128
 16859  00135A  6F93               	movwf	(??i2___ftge+2)& (0+255),b
 16860  00135C  518E               	movf	i2___ftge@ff2& (0+255),w,b
 16861  00135E  5D91               	subwf	??i2___ftge& (0+255),w,b
 16862  001360  6F8E               	movwf	i2___ftge@ff2& (0+255),b
 16863  001362  518F               	movf	(i2___ftge@ff2+1)& (0+255),w,b
 16864  001364  5992               	subwfb	(??i2___ftge+1)& (0+255),w,b
 16865  001366  6F8F               	movwf	(i2___ftge@ff2+1)& (0+255),b
 16866  001368  5190               	movf	(i2___ftge@ff2+2)& (0+255),w,b
 16867  00136A  5993               	subwfb	(??i2___ftge+2)& (0+255),w,b
 16868  00136C  6F90               	movwf	(i2___ftge@ff2+2)& (0+255),b
 16869  00136E                     i2l4905:
 16870                           
 16871                           ; BSR set to: 0
 16872  00136E  0E80               	movlw	128
 16873  001370  1B8D               	xorwf	(i2___ftge@ff1+2)& (0+255),f,b
 16874                           
 16875                           ; BSR set to: 0
 16876  001372  1B90               	xorwf	(i2___ftge@ff2+2)& (0+255),f,b
 16877  001374  518E               	movf	i2___ftge@ff2& (0+255),w,b
 16878  001376  5D8B               	subwf	i2___ftge@ff1& (0+255),w,b
 16879  001378  518F               	movf	(i2___ftge@ff2+1)& (0+255),w,b
 16880  00137A  598C               	subwfb	(i2___ftge@ff1+1)& (0+255),w,b
 16881  00137C  5190               	movf	(i2___ftge@ff2+2)& (0+255),w,b
 16882  00137E  598D               	subwfb	(i2___ftge@ff1+2)& (0+255),w,b
 16883  001380  E202               	bc	i2l4911
 16884                           
 16885                           ; BSR set to: 0
 16886  001382  90D8               	bcf	status,0,c
 16887  001384  0012               	return	
 16888  001386                     i2l4911:
 16889                           
 16890                           ; BSR set to: 0
 16891  001386  80D8               	bsf	status,0,c
 16892                           
 16893                           ; BSR set to: 0
 16894  001388  0012               	return		;funcret
 16895  00138A                     __end_ofi2___ftge:
 16896                           	opt stack 0
 16897                           tblptru	equ	0xFF8
 16898                           tblptrh	equ	0xFF7
 16899                           tblptrl	equ	0xFF6
 16900                           tablat	equ	0xFF5
 16901                           prodh	equ	0xFF4
 16902                           prodl	equ	0xFF3
 16903                           intcon	equ	0xFF2
 16904                           intcon2	equ	0xFF1
 16905                           intcon3	equ	0xFF0
 16906                           postinc0	equ	0xFEE
 16907                           wreg	equ	0xFE8
 16908                           postdec1	equ	0xFE5
 16909                           fsr1l	equ	0xFE1
 16910                           bsr	equ	0xFE0
 16911                           indf2	equ	0xFDF
 16912                           postinc2	equ	0xFDE
 16913                           postdec2	equ	0xFDD
 16914                           plusw2	equ	0xFDB
 16915                           fsr2h	equ	0xFDA
 16916                           fsr2l	equ	0xFD9
 16917                           status	equ	0xFD8
 16918                           
 16919 ;; *************** function i2_RF_CalculateCodesize *****************
 16920 ;; Defined at:
 16921 ;;		line 155 in file "RF.c"
 16922 ;; Parameters:    Size  Location     Type
 16923 ;;		None
 16924 ;; Auto vars:     Size  Location     Type
 16925 ;;  RF_Calculate    1    0[BANK0 ] unsigned char 
 16926 ;; Return value:  Size  Location     Type
 16927 ;;                  1    wreg      unsigned char 
 16928 ;; Registers used:
 16929 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16930 ;; Tracked objects:
 16931 ;;		On entry : F/0
 16932 ;;		On exit  : F/0
 16933 ;;		Unchanged: 0/0
 16934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16935 ;;      Params:         0       0       0       0       0
 16936 ;;      Locals:         0       1       0       0       0
 16937 ;;      Temps:          0       0       0       0       0
 16938 ;;      Totals:         0       1       0       0       0
 16939 ;;Total ram usage:        1 bytes
 16940 ;; Hardware stack levels used:    1
 16941 ;; This function calls:
 16942 ;;		Nothing
 16943 ;; This function is called by:
 16944 ;;		i2_RF_LoadCode
 16945 ;; This function uses a non-reentrant model
 16946 ;;
 16947                           
 16948                           	psect	text110
 16949  0015FC                     __ptext110:
 16950                           	opt stack 0
 16951  0015FC                     i2_RF_CalculateCodesize:
 16952                           	opt stack 15
 16953                           
 16954                           ; BSR set to: 0
 16955                           ;RF.c: 157: unsigned char i;
 16956                           ;RF.c: 159: for(i=0; i<64;i++)
 16957                           
 16958                           ; BSR set to: 0
 16959                           ;incstack = 0
 16960  0015FC  6B80               	clrf	i2RF_CalculateCodesize@i& (0+255),b
 16961  0015FE                     i2l4723:
 16962                           
 16963                           ; BSR set to: 0
 16964                           ;RF.c: 160: {
 16965                           ;RF.c: 161: if(RF_SavedTiming[i] == 0)
 16966  0015FE  5180               	movf	i2RF_CalculateCodesize@i& (0+255),w,b
 16967  001600  0D02               	mullw	2
 16968  001602  0E80               	movlw	128
 16969  001604  24F3               	addwf	prodl,w,c
 16970  001606  6EF6               	movwf	tblptrl,c
 16971  001608  0E25               	movlw	37
 16972  00160A  20F4               	addwfc	prodh,w,c
 16973  00160C  6EF7               	movwf	tblptrh,c
 16974  00160E  6AF8               	clrf	tblptru,c
 16975  001610  0E00               	movlw	0
 16976  001612  22F8               	addwfc	tblptru,f,c
 16977  001614  0009               	tblrd		*+
 16978  001616  50F5               	movf	tablat,w,c
 16979  001618  0009               	tblrd		*+
 16980  00161A  10F5               	iorwf	tablat,w,c
 16981  00161C  E102               	bnz	i2l4729
 16982                           
 16983                           ; BSR set to: 0
 16984                           ;RF.c: 162: {
 16985                           ;RF.c: 163: return i;
 16986  00161E  5180               	movf	i2RF_CalculateCodesize@i& (0+255),w,b
 16987  001620  0012               	return	
 16988  001622                     i2l4729:
 16989                           
 16990                           ; BSR set to: 0
 16991  001622  2B80               	incf	i2RF_CalculateCodesize@i& (0+255),f,b
 16992                           
 16993                           ; BSR set to: 0
 16994  001624  0E3F               	movlw	63
 16995  001626  6580               	cpfsgt	i2RF_CalculateCodesize@i& (0+255),b
 16996  001628  D7EA               	goto	i2l4723
 16997  00162A  0C40               	retlw	64
 16998  00162C                     __end_ofi2_RF_CalculateCodesize:
 16999                           	opt stack 0
 17000                           tblptru	equ	0xFF8
 17001                           tblptrh	equ	0xFF7
 17002                           tblptrl	equ	0xFF6
 17003                           tablat	equ	0xFF5
 17004                           prodh	equ	0xFF4
 17005                           prodl	equ	0xFF3
 17006                           intcon	equ	0xFF2
 17007                           intcon2	equ	0xFF1
 17008                           intcon3	equ	0xFF0
 17009                           postinc0	equ	0xFEE
 17010                           wreg	equ	0xFE8
 17011                           postdec1	equ	0xFE5
 17012                           fsr1l	equ	0xFE1
 17013                           bsr	equ	0xFE0
 17014                           indf2	equ	0xFDF
 17015                           postinc2	equ	0xFDE
 17016                           postdec2	equ	0xFDD
 17017                           plusw2	equ	0xFDB
 17018                           fsr2h	equ	0xFDA
 17019                           fsr2l	equ	0xFD9
 17020                           status	equ	0xFD8
 17021                           
 17022 ;; *************** function i2_FSH_Write_IR_RF *****************
 17023 ;; Defined at:
 17024 ;;		line 196 in file "FLASH.c"
 17025 ;; Parameters:    Size  Location     Type
 17026 ;;		None
 17027 ;; Auto vars:     Size  Location     Type
 17028 ;;  FSH_Write_IR    2   32[BANK0 ] PTR unsigned int 
 17029 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), 
 17030 ;;  FSH_Write_IR    2   29[BANK0 ] unsigned int 
 17031 ;;  FSH_Write_IR    2   25[BANK0 ] unsigned int 
 17032 ;;  FSH_Write_IR    1   31[BANK0 ] unsigned char 
 17033 ;;  FSH_Write_IR    1   28[BANK0 ] unsigned char 
 17034 ;;  FSH_Write_IR    1   27[BANK0 ] unsigned char 
 17035 ;;  FSH_Write_IR    1   24[BANK0 ] unsigned char 
 17036 ;;  FSH_Write_IR    1   23[BANK0 ] unsigned char 
 17037 ;; Return value:  Size  Location     Type
 17038 ;;                  1    wreg      unsigned char 
 17039 ;; Registers used:
 17040 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17041 ;; Tracked objects:
 17042 ;;		On entry : F/1
 17043 ;;		On exit  : F/0
 17044 ;;		Unchanged: 0/0
 17045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17046 ;;      Params:         0       0       0       0       0
 17047 ;;      Locals:         0      11       0       0       0
 17048 ;;      Temps:          0       6       0       0       0
 17049 ;;      Totals:         0      17       0       0       0
 17050 ;;Total ram usage:       17 bytes
 17051 ;; Hardware stack levels used:    1
 17052 ;; Hardware stack levels required when called:    3
 17053 ;; This function calls:
 17054 ;;		i2_FSH_AddressToBlock
 17055 ;;		i2_FSH_EraseBlock
 17056 ;;		i2_FSH_VerifyWriteIntArray
 17057 ;;		i2_FSH_WriteIntArray
 17058 ;;		i2_IR_ResetData
 17059 ;;		i2_MSC_BufferCopyIntConst
 17060 ;;		i2_RF_ResetData
 17061 ;; This function is called by:
 17062 ;;		_RF_CheckCode
 17063 ;; This function uses a non-reentrant model
 17064 ;;
 17065                           
 17066                           	psect	text111
 17067  002F04                     __ptext111:
 17068                           	opt stack 0
 17069  002F04                     i2_FSH_Write_IR_RF:
 17070                           	opt stack 13
 17071                           
 17072                           ; BSR set to: 1
 17073                           ;FLASH.c: 198: unsigned int i;
 17074                           ;FLASH.c: 199: unsigned char j;
 17075                           ;FLASH.c: 200: unsigned char WriteTries;
 17076                           ;FLASH.c: 201: unsigned int *RAMaddress;
 17077                           ;FLASH.c: 202: unsigned char status = 0;
 17078                           
 17079                           ; BSR set to: 0
 17080                           ;incstack = 0
 17081  002F04  0100               	movlb	0	; () banked
 17082  002F06  6B9C               	clrf	i2FSH_Write_IR_RF@status& (0+255),b
 17083                           
 17084                           ; BSR set to: 0
 17085                           ;FLASH.c: 204: unsigned char highint = INTCONbits.GIE;
 17086  002F08  0E00               	movlw	0
 17087  002F0A  BEF2               	btfsc	intcon,7,c	;volatile
 17088  002F0C  0E01               	movlw	1
 17089  002F0E  6F97               	movwf	i2FSH_Write_IR_RF@highint& (0+255),b
 17090                           
 17091                           ;FLASH.c: 205: unsigned char lowint = INTCONbits.PEIE;
 17092  002F10  0E00               	movlw	0
 17093  002F12  BCF2               	btfsc	intcon,6,c	;volatile
 17094  002F14  0E01               	movlw	1
 17095  002F16  6F98               	movwf	i2FSH_Write_IR_RF@lowint& (0+255),b
 17096                           
 17097                           ; BSR set to: 0
 17098                           ;FLASH.c: 207: INTCONbits.GIE = 0;
 17099  002F18  9EF2               	bcf	intcon,7,c	;volatile
 17100                           
 17101                           ; BSR set to: 0
 17102                           ;FLASH.c: 208: INTCONbits.PEIE = 0;
 17103  002F1A  9CF2               	bcf	intcon,6,c	;volatile
 17104                           
 17105                           ; BSR set to: 0
 17106                           ;FLASH.c: 210: if(IR_Saved == 90 && RF_Saved == 90)
 17107  002F1C  0E5A               	movlw	90
 17108  002F1E  0101               	movlb	1	; () banked
 17109  002F20  19AC               	xorwf	_IR_Saved& (0+255),w,b
 17110  002F22  E107               	bnz	i2l5717
 17111                           
 17112                           ; BSR set to: 1
 17113  002F24  0E5A               	movlw	90
 17114  002F26  19AD               	xorwf	_RF_Saved& (0+255),w,b
 17115  002F28  E104               	bnz	i2l5717
 17116  002F2A                     i2l5713:
 17117                           
 17118                           ; BSR set to: 1
 17119                           ;FLASH.c: 211: {
 17120                           ;FLASH.c: 213: IR_Saved = 91;
 17121  002F2A  0E5B               	movlw	91
 17122  002F2C  6FAC               	movwf	_IR_Saved& (0+255),b
 17123                           
 17124                           ;FLASH.c: 214: RF_Saved = 91;
 17125  002F2E  6FAD               	movwf	_RF_Saved& (0+255),b
 17126                           
 17127                           ;FLASH.c: 215: goto END;
 17128  002F30  D208               	goto	i2l971
 17129  002F32                     i2l5717:
 17130                           
 17131                           ; BSR set to: 1
 17132                           ;FLASH.c: 217: else if(IR_Saved != 90 && RF_Saved != 90)
 17133  002F32  0E5A               	movlw	90
 17134  002F34  19AC               	xorwf	_IR_Saved& (0+255),w,b
 17135  002F36  E003               	bz	i2l5723
 17136                           
 17137                           ; BSR set to: 1
 17138  002F38  0E5A               	movlw	90
 17139  002F3A  19AD               	xorwf	_RF_Saved& (0+255),w,b
 17140  002F3C  E1F6               	bnz	i2l5713
 17141  002F3E                     i2l5723:
 17142                           
 17143                           ; BSR set to: 1
 17144                           ;FLASH.c: 223: }
 17145                           ;FLASH.c: 225: if(IR_Saved == 90)
 17146  002F3E  0E5A               	movlw	90
 17147  002F40  19AC               	xorwf	_IR_Saved& (0+255),w,b
 17148  002F42  E137               	bnz	i2l5737
 17149                           
 17150                           ; BSR set to: 1
 17151                           ;FLASH.c: 226: {
 17152                           ;FLASH.c: 228: RF_ResetData();
 17153  002F44  ECD4  F00D         	call	i2_RF_ResetData	;wreg free
 17154                           
 17155                           ; BSR set to: 0
 17156                           ;FLASH.c: 229: MSC_BufferCopyIntConst(&RF_SavedTiming,&RF_DataTiming, 64, 0);
 17157  002F48  0E80               	movlw	128
 17158  002F4A  6F86               	movwf	i2MSC_BufferCopyIntConst@from& (0+255),b
 17159  002F4C  0E25               	movlw	37
 17160  002F4E  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 17161  002F50  6B88               	clrf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 17162  002F52  0E07               	movlw	low _RF_DataTiming
 17163  002F54  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 17164  002F56  0E01               	movlw	high _RF_DataTiming
 17165  002F58  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 17166  002F5A  6B8C               	clrf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 17167  002F5C  0E40               	movlw	64
 17168  002F5E  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 17169  002F60  6B8E               	clrf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 17170  002F62  6B8D               	clrf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 17171  002F64  EC12  F007         	call	i2_MSC_BufferCopyIntConst	;wreg free
 17172                           
 17173                           ; BSR set to: 0
 17174                           ;FLASH.c: 230: if(IRProgramCodeNumber == 0)
 17175  002F68  5068               	movf	_IRProgramCodeNumber,w,c
 17176  002F6A  E111               	bnz	i2l5733
 17177  002F6C                     i2l5731:
 17178                           
 17179                           ; BSR set to: 0
 17180                           ;FLASH.c: 231: {
 17181                           ;FLASH.c: 232: MSC_BufferCopyIntConst(&IR_SavedTiming1,&IR_DataHolder1, 96, 0);
 17182  002F6C  0EC0               	movlw	192
 17183  002F6E  6F86               	movwf	i2MSC_BufferCopyIntConst@from& (0+255),b
 17184  002F70  0E24               	movlw	36
 17185  002F72  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 17186  002F74  6B88               	clrf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 17187  002F76  0E00               	movlw	low _IR_DataHolder1
 17188  002F78  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 17189  002F7A  0E03               	movlw	high _IR_DataHolder1
 17190  002F7C  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 17191  002F7E  6B8C               	clrf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 17192  002F80  0E60               	movlw	96
 17193  002F82  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 17194  002F84  6B8E               	clrf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 17195  002F86  6B8D               	clrf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 17196  002F88  EC12  F007         	call	i2_MSC_BufferCopyIntConst	;wreg free
 17197                           
 17198                           ;FLASH.c: 233: }
 17199  002F8C  D024               	goto	i2l5743
 17200  002F8E                     i2l5733:
 17201                           
 17202                           ; BSR set to: 0
 17203                           ;FLASH.c: 234: else if(IRProgramCodeNumber == 1)
 17204  002F8E  0468               	decf	_IRProgramCodeNumber,w,c
 17205  002F90  E122               	bnz	i2l5743
 17206                           
 17207                           ; BSR set to: 0
 17208                           ;FLASH.c: 235: {
 17209                           ;FLASH.c: 236: MSC_BufferCopyIntConst(&IR_SavedTiming0,&IR_DataHolder1, 96, 0);
 17210  002F92  6B86               	clrf	i2MSC_BufferCopyIntConst@from& (0+255),b
 17211  002F94  0E24               	movlw	36
 17212  002F96  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 17213  002F98  6B88               	clrf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 17214  002F9A  0E00               	movlw	low _IR_DataHolder1
 17215  002F9C  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 17216  002F9E  0E03               	movlw	high _IR_DataHolder1
 17217  002FA0  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 17218  002FA2  6B8C               	clrf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 17219  002FA4  0E60               	movlw	96
 17220  002FA6  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 17221  002FA8  6B8E               	clrf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 17222  002FAA  6B8D               	clrf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 17223  002FAC  EC12  F007         	call	i2_MSC_BufferCopyIntConst	;wreg free
 17224  002FB0  D012               	goto	i2l5743
 17225  002FB2                     i2l5737:
 17226                           
 17227                           ; BSR set to: 1
 17228                           ;FLASH.c: 239: else
 17229                           ;FLASH.c: 240: {
 17230                           ;FLASH.c: 242: IR_ResetData();
 17231  002FB2  ECD8  F00D         	call	i2_IR_ResetData	;wreg free
 17232                           
 17233                           ; BSR set to: 0
 17234                           ;FLASH.c: 243: MSC_BufferCopyIntConst(&IR_SavedTiming0,&IR_DataTiming, 96, 0);
 17235  002FB6  6B86               	clrf	i2MSC_BufferCopyIntConst@from& (0+255),b
 17236  002FB8  0E24               	movlw	36
 17237  002FBA  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 17238  002FBC  6B88               	clrf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 17239  002FBE  0E00               	movlw	low _IR_DataTiming
 17240  002FC0  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 17241  002FC2  0E02               	movlw	high _IR_DataTiming
 17242  002FC4  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 17243  002FC6  6B8C               	clrf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 17244  002FC8  0E60               	movlw	96
 17245  002FCA  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 17246  002FCC  6B8E               	clrf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 17247  002FCE  6B8D               	clrf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 17248  002FD0  EC12  F007         	call	i2_MSC_BufferCopyIntConst	;wreg free
 17249  002FD4  D7CB               	goto	i2l5731
 17250  002FD6                     i2l5743:
 17251                           
 17252                           ; BSR set to: 0
 17253                           ;FLASH.c: 245: }
 17254                           ;FLASH.c: 247: FSH_EraseBlock(&IR_SavedTiming0[0]);
 17255  002FD6  6B84               	clrf	i2FSH_EraseBlock@Address& (0+255),b
 17256  002FD8  0E24               	movlw	36
 17257  002FDA  6F85               	movwf	(i2FSH_EraseBlock@Address+1)& (0+255),b
 17258  002FDC  6B86               	clrf	(i2FSH_EraseBlock@Address+2)& (0+255),b
 17259  002FDE  6B87               	clrf	(i2FSH_EraseBlock@Address+3)& (0+255),b
 17260  002FE0  EC6C  F008         	call	i2_FSH_EraseBlock	;wreg free
 17261                           
 17262                           ; BSR set to: 0
 17263                           ;FLASH.c: 252: WriteTries = 1;
 17264  002FE4  0E01               	movlw	1
 17265  002FE6  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17266  002FE8                     i2l979:
 17267                           
 17268                           ; BSR set to: 0
 17269                           ;FLASH.c: 256: if(IR_Saved == 90)
 17270  002FE8  0E5A               	movlw	90
 17271  002FEA  0101               	movlb	1	; () banked
 17272  002FEC  19AC               	xorwf	_IR_Saved& (0+255),w,b
 17273  002FEE  E102               	bnz	i2l5749
 17274                           
 17275                           ; BSR set to: 1
 17276                           ;FLASH.c: 257: {
 17277                           ;FLASH.c: 258: if(IRProgramCodeNumber == 0)
 17278  002FF0  5068               	movf	_IRProgramCodeNumber,w,c
 17279  002FF2  E105               	bnz	i2l5751
 17280  002FF4                     i2l5749:
 17281                           
 17282                           ; BSR set to: 1
 17283                           ;FLASH.c: 259: {
 17284                           ;FLASH.c: 260: RAMaddress = &IR_DataTiming[0];
 17285  002FF4  0E00               	movlw	low _IR_DataTiming
 17286  002FF6  0100               	movlb	0	; () banked
 17287  002FF8  6FA0               	movwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),b
 17288  002FFA  0E02               	movlw	high _IR_DataTiming
 17289  002FFC  D004               	goto	L8
 17290  002FFE                     i2l5751:
 17291                           
 17292                           ; BSR set to: 1
 17293                           ;FLASH.c: 262: else
 17294                           ;FLASH.c: 263: {
 17295                           ;FLASH.c: 264: RAMaddress = &IR_DataHolder1[0];
 17296  002FFE  0E00               	movlw	low _IR_DataHolder1
 17297  003000  0100               	movlb	0	; () banked
 17298  003002  6FA0               	movwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),b
 17299  003004  0E03               	movlw	high _IR_DataHolder1
 17300  003006                     L8:
 17301  003006  6FA1               	movwf	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),b
 17302                           
 17303                           ; BSR set to: 0
 17304                           ;FLASH.c: 270: }
 17305                           ;FLASH.c: 273: FSH_WriteIntArray(&IR_SavedTiming0[0], RAMaddress);
 17306  003008  6B84               	clrf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17307  00300A  0E24               	movlw	36
 17308  00300C  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17309  00300E  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17310  003010  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17311  003014  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17312  003018  ECD6  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17313                           
 17314                           ;FLASH.c: 276: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[0],RAMaddress))
 17315  00301C  0100               	movlb	0	; () banked
 17316  00301E  6B80               	clrf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17317  003020  0E24               	movlw	36
 17318  003022  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17319  003024  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17320  003026  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17321  00302A  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17322  00302E  EC10  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17323  003032  0900               	iorlw	0
 17324  003034  E106               	bnz	i2l5767
 17325                           
 17326                           ; BSR set to: 0
 17327                           ;FLASH.c: 277: {
 17328                           ;FLASH.c: 278: WriteTries++;
 17329  003036  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17330                           
 17331                           ; BSR set to: 0
 17332                           ;FLASH.c: 279: if(WriteTries > 10)
 17333  003038  0E0A               	movlw	10
 17334  00303A  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17335  00303C  D7D5               	goto	i2l979
 17336  00303E                     i2l5763:
 17337                           
 17338                           ; BSR set to: 0
 17339                           ;FLASH.c: 280: {
 17340                           ;FLASH.c: 281: status = 0;
 17341  00303E  6B9C               	clrf	i2FSH_Write_IR_RF@status& (0+255),b
 17342                           
 17343                           ;FLASH.c: 282: goto END;
 17344  003040  D180               	goto	i2l971
 17345  003042                     i2l5767:
 17346                           
 17347                           ; BSR set to: 0
 17348                           ;FLASH.c: 287: }
 17349                           ;FLASH.c: 288: }
 17350                           ;FLASH.c: 291: WriteTries = 1;
 17351  003042  0E01               	movlw	1
 17352  003044  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17353                           
 17354                           ; BSR set to: 0
 17355                           ;FLASH.c: 292: RAMaddress+=32;
 17356  003046  0E40               	movlw	64
 17357  003048  27A0               	addwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),f,b
 17358  00304A  0E00               	movlw	0
 17359  00304C  23A1               	addwfc	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),f,b
 17360  00304E                     i2l5771:
 17361                           
 17362                           ; BSR set to: 0
 17363                           ;FLASH.c: 296: FSH_WriteIntArray(&IR_SavedTiming0[32], RAMaddress);
 17364  00304E  0E40               	movlw	64
 17365  003050  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17366  003052  0E24               	movlw	36
 17367  003054  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17368  003056  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17369  003058  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17370  00305C  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17371  003060  ECD6  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17372                           
 17373                           ;FLASH.c: 299: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[32], RAMaddress))
 17374  003064  0E40               	movlw	64
 17375  003066  0100               	movlb	0	; () banked
 17376  003068  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17377  00306A  0E24               	movlw	36
 17378  00306C  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17379  00306E  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17380  003070  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17381  003074  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17382  003078  EC10  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17383  00307C  0900               	iorlw	0
 17384  00307E  E105               	bnz	i2l5783
 17385                           
 17386                           ; BSR set to: 0
 17387                           ;FLASH.c: 300: {
 17388                           ;FLASH.c: 301: WriteTries++;
 17389  003080  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17390                           
 17391                           ; BSR set to: 0
 17392                           ;FLASH.c: 302: if(WriteTries > 10)
 17393  003082  0E0A               	movlw	10
 17394  003084  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17395  003086  D7E3               	goto	i2l5771
 17396  003088  D7DA               	goto	i2l5763
 17397  00308A                     i2l5783:
 17398                           
 17399                           ; BSR set to: 0
 17400                           ;FLASH.c: 310: }
 17401                           ;FLASH.c: 311: }
 17402                           ;FLASH.c: 314: WriteTries = 1;
 17403  00308A  0E01               	movlw	1
 17404  00308C  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17405                           
 17406                           ; BSR set to: 0
 17407                           ;FLASH.c: 315: RAMaddress+=32;
 17408  00308E  0E40               	movlw	64
 17409  003090  27A0               	addwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),f,b
 17410  003092  0E00               	movlw	0
 17411  003094  23A1               	addwfc	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),f,b
 17412  003096                     i2l5787:
 17413                           
 17414                           ; BSR set to: 0
 17415                           ;FLASH.c: 320: FSH_WriteIntArray(&IR_SavedTiming0[64], RAMaddress);
 17416  003096  0E80               	movlw	128
 17417  003098  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17418  00309A  0E24               	movlw	36
 17419  00309C  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17420  00309E  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17421  0030A0  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17422  0030A4  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17423  0030A8  ECD6  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17424                           
 17425                           ;FLASH.c: 323: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[64],RAMaddress))
 17426  0030AC  0E80               	movlw	128
 17427  0030AE  0100               	movlb	0	; () banked
 17428  0030B0  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17429  0030B2  0E24               	movlw	36
 17430  0030B4  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17431  0030B6  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17432  0030B8  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17433  0030BC  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17434  0030C0  EC10  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17435  0030C4  0900               	iorlw	0
 17436  0030C6  E105               	bnz	i2l5799
 17437                           
 17438                           ; BSR set to: 0
 17439                           ;FLASH.c: 324: {
 17440                           ;FLASH.c: 325: WriteTries++;
 17441  0030C8  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17442                           
 17443                           ; BSR set to: 0
 17444                           ;FLASH.c: 326: if(WriteTries > 10)
 17445  0030CA  0E0A               	movlw	10
 17446  0030CC  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17447  0030CE  D7E3               	goto	i2l5787
 17448  0030D0  D7B6               	goto	i2l5763
 17449  0030D2                     i2l5799:
 17450                           
 17451                           ; BSR set to: 0
 17452                           ;FLASH.c: 334: }
 17453                           ;FLASH.c: 335: }
 17454                           ;FLASH.c: 338: WriteTries = 1;
 17455  0030D2  0E01               	movlw	1
 17456  0030D4  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17457  0030D6                     i2l5801:
 17458                           
 17459                           ; BSR set to: 0
 17460                           ;FLASH.c: 342: if(IR_Saved == 90)
 17461  0030D6  0E5A               	movlw	90
 17462  0030D8  0101               	movlb	1	; () banked
 17463  0030DA  19AC               	xorwf	_IR_Saved& (0+255),w,b
 17464  0030DC  E107               	bnz	i2l5807
 17465                           
 17466                           ; BSR set to: 1
 17467                           ;FLASH.c: 343: {
 17468                           ;FLASH.c: 344: if(IRProgramCodeNumber == 1)
 17469  0030DE  0468               	decf	_IRProgramCodeNumber,w,c
 17470  0030E0  E105               	bnz	i2l5807
 17471                           
 17472                           ; BSR set to: 1
 17473                           ;FLASH.c: 345: {
 17474                           ;FLASH.c: 346: RAMaddress = &IR_DataTiming[0];
 17475  0030E2  0E00               	movlw	low _IR_DataTiming
 17476  0030E4  0100               	movlb	0	; () banked
 17477  0030E6  6FA0               	movwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),b
 17478  0030E8  0E02               	movlw	high _IR_DataTiming
 17479  0030EA  D004               	goto	L9
 17480  0030EC                     i2l5807:
 17481                           
 17482                           ; BSR set to: 1
 17483                           ;FLASH.c: 348: else
 17484                           ;FLASH.c: 349: {
 17485                           ;FLASH.c: 350: RAMaddress = &IR_DataHolder1[0];
 17486  0030EC  0E00               	movlw	low _IR_DataHolder1
 17487  0030EE  0100               	movlb	0	; () banked
 17488  0030F0  6FA0               	movwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),b
 17489  0030F2  0E03               	movlw	high _IR_DataHolder1
 17490  0030F4                     L9:
 17491  0030F4  6FA1               	movwf	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),b
 17492                           
 17493                           ; BSR set to: 0
 17494                           ;FLASH.c: 356: }
 17495                           ;FLASH.c: 359: FSH_WriteIntArray(&IR_SavedTiming1[0], RAMaddress);
 17496  0030F6  0EC0               	movlw	192
 17497  0030F8  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17498  0030FA  0E24               	movlw	36
 17499  0030FC  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17500  0030FE  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17501  003100  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17502  003104  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17503  003108  ECD6  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17504                           
 17505                           ;FLASH.c: 362: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[0], RAMaddress))
 17506  00310C  0EC0               	movlw	192
 17507  00310E  0100               	movlb	0	; () banked
 17508  003110  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17509  003112  0E24               	movlw	36
 17510  003114  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17511  003116  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17512  003118  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17513  00311C  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17514  003120  EC10  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17515  003124  0900               	iorlw	0
 17516  003126  E105               	bnz	i2l5823
 17517                           
 17518                           ; BSR set to: 0
 17519                           ;FLASH.c: 363: {
 17520                           ;FLASH.c: 364: WriteTries++;
 17521  003128  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17522                           
 17523                           ; BSR set to: 0
 17524                           ;FLASH.c: 365: if(WriteTries > 10)
 17525  00312A  0E0A               	movlw	10
 17526  00312C  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17527  00312E  D7D3               	goto	i2l5801
 17528  003130  D786               	goto	i2l5763
 17529  003132                     i2l5823:
 17530                           
 17531                           ; BSR set to: 0
 17532                           ;FLASH.c: 373: }
 17533                           ;FLASH.c: 374: }
 17534                           ;FLASH.c: 377: WriteTries = 1;
 17535  003132  0E01               	movlw	1
 17536  003134  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17537                           
 17538                           ; BSR set to: 0
 17539                           ;FLASH.c: 378: RAMaddress+=32;
 17540  003136  0E40               	movlw	64
 17541  003138  27A0               	addwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),f,b
 17542  00313A  0E00               	movlw	0
 17543  00313C  23A1               	addwfc	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),f,b
 17544  00313E                     i2l5827:
 17545                           
 17546                           ; BSR set to: 0
 17547                           ;FLASH.c: 383: FSH_WriteIntArray(&IR_SavedTiming1[32], RAMaddress);
 17548  00313E  6B84               	clrf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17549  003140  0E25               	movlw	37
 17550  003142  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17551  003144  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17552  003146  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17553  00314A  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17554  00314E  ECD6  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17555                           
 17556                           ;FLASH.c: 386: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[32], RAMaddress))
 17557  003152  0100               	movlb	0	; () banked
 17558  003154  6B80               	clrf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17559  003156  0E25               	movlw	37
 17560  003158  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17561  00315A  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17562  00315C  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17563  003160  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17564  003164  EC10  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17565  003168  0900               	iorlw	0
 17566  00316A  E105               	bnz	i2l5839
 17567                           
 17568                           ; BSR set to: 0
 17569                           ;FLASH.c: 387: {
 17570                           ;FLASH.c: 388: WriteTries++;
 17571  00316C  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17572                           
 17573                           ; BSR set to: 0
 17574                           ;FLASH.c: 389: if(WriteTries > 10)
 17575  00316E  0E0A               	movlw	10
 17576  003170  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17577  003172  D7E5               	goto	i2l5827
 17578  003174  D764               	goto	i2l5763
 17579  003176                     i2l5839:
 17580                           
 17581                           ; BSR set to: 0
 17582                           ;FLASH.c: 397: }
 17583                           ;FLASH.c: 398: }
 17584                           ;FLASH.c: 401: WriteTries = 1;
 17585  003176  0E01               	movlw	1
 17586  003178  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17587                           
 17588                           ; BSR set to: 0
 17589                           ;FLASH.c: 402: RAMaddress+=32;
 17590  00317A  0E40               	movlw	64
 17591  00317C  27A0               	addwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),f,b
 17592  00317E  0E00               	movlw	0
 17593  003180  23A1               	addwfc	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),f,b
 17594  003182                     i2l5843:
 17595                           
 17596                           ; BSR set to: 0
 17597                           ;FLASH.c: 407: FSH_WriteIntArray(&IR_SavedTiming1[64], RAMaddress);
 17598  003182  0E40               	movlw	64
 17599  003184  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17600  003186  0E25               	movlw	37
 17601  003188  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17602  00318A  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17603  00318C  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17604  003190  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17605  003194  ECD6  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17606                           
 17607                           ;FLASH.c: 410: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[64], RAMaddress))
 17608  003198  0E40               	movlw	64
 17609  00319A  0100               	movlb	0	; () banked
 17610  00319C  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17611  00319E  0E25               	movlw	37
 17612  0031A0  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17613  0031A2  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17614  0031A4  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17615  0031A8  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17616  0031AC  EC10  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17617  0031B0  0900               	iorlw	0
 17618  0031B2  E105               	bnz	i2l5855
 17619                           
 17620                           ; BSR set to: 0
 17621                           ;FLASH.c: 411: {
 17622                           ;FLASH.c: 412: WriteTries++;
 17623  0031B4  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17624                           
 17625                           ; BSR set to: 0
 17626                           ;FLASH.c: 413: if(WriteTries > 10)
 17627  0031B6  0E0A               	movlw	10
 17628  0031B8  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17629  0031BA  D7E3               	goto	i2l5843
 17630  0031BC  D740               	goto	i2l5763
 17631  0031BE                     i2l5855:
 17632                           
 17633                           ; BSR set to: 0
 17634                           ;FLASH.c: 421: }
 17635                           ;FLASH.c: 422: }
 17636                           ;FLASH.c: 425: WriteTries = 1;
 17637  0031BE  0E01               	movlw	1
 17638  0031C0  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17639  0031C2                     i2l5857:
 17640                           
 17641                           ; BSR set to: 0
 17642                           ;FLASH.c: 430: FSH_WriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]);
 17643  0031C2  0E80               	movlw	128
 17644  0031C4  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17645  0031C6  0E25               	movlw	37
 17646  0031C8  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17647  0031CA  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17648  0031CC  0E07               	movlw	low _RF_DataTiming
 17649  0031CE  6F87               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17650  0031D0  0E01               	movlw	high _RF_DataTiming
 17651  0031D2  6F88               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17652  0031D4  ECD6  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17653                           
 17654                           ;FLASH.c: 433: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]))
 17655  0031D8  0E80               	movlw	128
 17656  0031DA  0100               	movlb	0	; () banked
 17657  0031DC  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17658  0031DE  0E25               	movlw	37
 17659  0031E0  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17660  0031E2  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17661  0031E4  0E07               	movlw	low _RF_DataTiming
 17662  0031E6  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17663  0031E8  0E01               	movlw	high _RF_DataTiming
 17664  0031EA  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17665  0031EC  EC10  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17666  0031F0  0900               	iorlw	0
 17667  0031F2  E105               	bnz	i2l5869
 17668                           
 17669                           ; BSR set to: 0
 17670                           ;FLASH.c: 434: {
 17671                           ;FLASH.c: 435: WriteTries++;
 17672  0031F4  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17673                           
 17674                           ; BSR set to: 0
 17675                           ;FLASH.c: 436: if(WriteTries > 10)
 17676  0031F6  0E0A               	movlw	10
 17677  0031F8  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17678  0031FA  D7E3               	goto	i2l5857
 17679  0031FC  D720               	goto	i2l5763
 17680  0031FE                     i2l5869:
 17681                           
 17682                           ; BSR set to: 0
 17683                           ;FLASH.c: 444: }
 17684                           ;FLASH.c: 445: }
 17685                           ;FLASH.c: 448: WriteTries = 1;
 17686  0031FE  0E01               	movlw	1
 17687  003200  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17688  003202                     i2l5871:
 17689                           
 17690                           ; BSR set to: 0
 17691                           ;FLASH.c: 453: FSH_WriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]);
 17692  003202  0EC0               	movlw	192
 17693  003204  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17694  003206  0E25               	movlw	37
 17695  003208  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17696  00320A  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17697  00320C  0E47               	movlw	low (_RF_DataTiming+64)
 17698  00320E  6F87               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17699  003210  0E01               	movlw	high (_RF_DataTiming+64)
 17700  003212  6F88               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17701  003214  ECD6  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17702                           
 17703                           ;FLASH.c: 456: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]))
 17704  003218  0EC0               	movlw	192
 17705  00321A  0100               	movlb	0	; () banked
 17706  00321C  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17707  00321E  0E25               	movlw	37
 17708  003220  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17709  003222  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17710  003224  0E47               	movlw	low (_RF_DataTiming+64)
 17711  003226  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17712  003228  0E01               	movlw	high (_RF_DataTiming+64)
 17713  00322A  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17714  00322C  EC10  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17715  003230  0900               	iorlw	0
 17716  003232  E105               	bnz	i2l5883
 17717                           
 17718                           ; BSR set to: 0
 17719                           ;FLASH.c: 457: {
 17720                           ;FLASH.c: 458: WriteTries++;
 17721  003234  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17722                           
 17723                           ; BSR set to: 0
 17724                           ;FLASH.c: 459: if(WriteTries > 10)
 17725  003236  0E0A               	movlw	10
 17726  003238  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17727  00323A  D7E3               	goto	i2l5871
 17728  00323C  D700               	goto	i2l5763
 17729  00323E                     i2l5883:
 17730                           
 17731                           ; BSR set to: 0
 17732                           ;FLASH.c: 467: }
 17733                           ;FLASH.c: 468: }
 17734                           ;FLASH.c: 471: for(j=8;j<16;j++)
 17735  00323E  0E08               	movlw	8
 17736  003240  6F9B               	movwf	i2FSH_Write_IR_RF@j& (0+255),b
 17737  003242                     i2l5885:
 17738                           
 17739                           ; BSR set to: 0
 17740  003242  0E0F               	movlw	15
 17741  003244  659B               	cpfsgt	i2FSH_Write_IR_RF@j& (0+255),b
 17742  003246  D001               	goto	i2l5889
 17743  003248  D07A               	goto	i2l5937
 17744  00324A                     i2l5889:
 17745                           
 17746                           ; BSR set to: 0
 17747                           ;FLASH.c: 472: {
 17748                           ;FLASH.c: 473: WriteTries = 1;
 17749  00324A  0E01               	movlw	1
 17750  00324C  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17751  00324E                     i2l5891:
 17752                           
 17753                           ; BSR set to: 0
 17754                           ;FLASH.c: 476: i=0;
 17755  00324E  6B9D               	clrf	i2FSH_Write_IR_RF@i& (0+255),b
 17756  003250  6B9E               	clrf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 17757                           
 17758                           ; BSR set to: 0
 17759                           ;FLASH.c: 477: FlashWasteindex = i + 64*(j-8);
 17760  003252  519B               	movf	i2FSH_Write_IR_RF@j& (0+255),w,b
 17761  003254  6F91               	movwf	??i2_FSH_Write_IR_RF& (0+255),b
 17762  003256  6B92               	clrf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 17763  003258  0E06               	movlw	6
 17764  00325A                     i2u589_45:
 17765  00325A  90D8               	bcf	status,0,c
 17766  00325C  3791               	rlcf	??i2_FSH_Write_IR_RF& (0+255),f,b
 17767  00325E  3792               	rlcf	(??i2_FSH_Write_IR_RF+1)& (0+255),f,b
 17768  003260  2EE8               	decfsz	wreg,f,c
 17769  003262  D7FB               	goto	i2u589_45
 17770  003264  519D               	movf	i2FSH_Write_IR_RF@i& (0+255),w,b
 17771  003266  2791               	addwf	??i2_FSH_Write_IR_RF& (0+255),f,b
 17772  003268  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17773  00326A  2392               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),f,b
 17774  00326C  0E00               	movlw	0
 17775  00326E  2591               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 17776  003270  6F99               	movwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),b
 17777  003272  0EFE               	movlw	254
 17778  003274  2192               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 17779  003276  6F9A               	movwf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),b
 17780                           
 17781                           ; BSR set to: 0
 17782                           ;FLASH.c: 478: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 17783  003278  6B91               	clrf	??i2_FSH_Write_IR_RF& (0+255),b
 17784  00327A  0E26               	movlw	38
 17785  00327C  6F92               	movwf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 17786  00327E  6B93               	clrf	(??i2_FSH_Write_IR_RF+2)& (0+255),b
 17787  003280  5199               	movf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 17788  003282  2591               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 17789  003284  6F94               	movwf	(??i2_FSH_Write_IR_RF+3)& (0+255),b
 17790  003286  519A               	movf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 17791  003288  2192               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 17792  00328A  6F95               	movwf	(??i2_FSH_Write_IR_RF+4)& (0+255),b
 17793  00328C  0E00               	movlw	0
 17794  00328E  2193               	addwfc	(??i2_FSH_Write_IR_RF+2)& (0+255),w,b
 17795  003290  6F96               	movwf	(??i2_FSH_Write_IR_RF+5)& (0+255),b
 17796  003292  5194               	movf	(??i2_FSH_Write_IR_RF+3)& (0+255),w,b
 17797  003294  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 17798  003296  5195               	movf	(??i2_FSH_Write_IR_RF+4)& (0+255),w,b
 17799  003298  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 17800  00329A  5196               	movf	(??i2_FSH_Write_IR_RF+5)& (0+255),w,b
 17801  00329C  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 17802  00329E  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 17803  0032A0  EC58  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 17804                           
 17805                           ; BSR set to: 0
 17806                           ;FLASH.c: 479: for(i = 0; i<64; i++)
 17807  0032A4  6B9D               	clrf	i2FSH_Write_IR_RF@i& (0+255),b
 17808  0032A6  6B9E               	clrf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 17809  0032A8                     i2l5899:
 17810                           
 17811                           ; BSR set to: 0
 17812  0032A8  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17813  0032AA  E10A               	bnz	i2l5909
 17814  0032AC  0E40               	movlw	64
 17815  0032AE  5D9D               	subwf	i2FSH_Write_IR_RF@i& (0+255),w,b
 17816  0032B0  E207               	bc	i2l5909
 17817                           
 17818                           ; BSR set to: 0
 17819                           ;FLASH.c: 480: {
 17820                           ;FLASH.c: 482: TABLAT = 0xDA;
 17821  0032B2  0EDA               	movlw	218
 17822  0032B4  6EF5               	movwf	tablat,c	;volatile
 17823  0032B6  000D               	tblwt		*+	;# 
 17824  0032B8  0100               	movlb	0	; () banked
 17825  0032BA  4B9D               	infsnz	i2FSH_Write_IR_RF@i& (0+255),f,b
 17826  0032BC  2B9E               	incf	(i2FSH_Write_IR_RF@i+1)& (0+255),f,b
 17827  0032BE  D7F4               	goto	i2l5899
 17828  0032C0                     i2l5909:
 17829                           
 17830                           ; BSR set to: 0
 17831                           ;FLASH.c: 484: }
 17832                           ;FLASH.c: 485: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 17833  0032C0  6B91               	clrf	??i2_FSH_Write_IR_RF& (0+255),b
 17834  0032C2  0E26               	movlw	38
 17835  0032C4  6F92               	movwf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 17836  0032C6  6B93               	clrf	(??i2_FSH_Write_IR_RF+2)& (0+255),b
 17837  0032C8  5199               	movf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 17838  0032CA  2591               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 17839  0032CC  6F94               	movwf	(??i2_FSH_Write_IR_RF+3)& (0+255),b
 17840  0032CE  519A               	movf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 17841  0032D0  2192               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 17842  0032D2  6F95               	movwf	(??i2_FSH_Write_IR_RF+4)& (0+255),b
 17843  0032D4  0E00               	movlw	0
 17844  0032D6  2193               	addwfc	(??i2_FSH_Write_IR_RF+2)& (0+255),w,b
 17845  0032D8  6F96               	movwf	(??i2_FSH_Write_IR_RF+5)& (0+255),b
 17846  0032DA  5194               	movf	(??i2_FSH_Write_IR_RF+3)& (0+255),w,b
 17847  0032DC  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 17848  0032DE  5195               	movf	(??i2_FSH_Write_IR_RF+4)& (0+255),w,b
 17849  0032E0  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 17850  0032E2  5196               	movf	(??i2_FSH_Write_IR_RF+5)& (0+255),w,b
 17851  0032E4  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 17852  0032E6  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 17853  0032E8  EC58  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 17854                           
 17855                           ; BSR set to: 0
 17856                           ;FLASH.c: 487: EECON1bits.FREE = 0;
 17857  0032EC  98A6               	bcf	4006,4,c	;volatile
 17858  0032EE  84A6               	bsf	4006,2,c	;# 
 17859  0032F0  9EF2               	bcf	intcon,7,c	;# 
 17860  0032F2  0E55               	movlw	85	;# 
 17861  0032F4  6EA7               	movwf	4007,c	;# 
 17862  0032F6  0EAA               	movlw	170	;# 
 17863  0032F8  6EA7               	movwf	4007,c	;# 
 17864  0032FA  82A6               	bsf	4006,1,c	;# 
 17865                           
 17866                           ;FLASH.c: 498: for(i=0; i<64;i++)
 17867  0032FC  0100               	movlb	0	; () banked
 17868  0032FE  6B9D               	clrf	i2FSH_Write_IR_RF@i& (0+255),b
 17869  003300  6B9E               	clrf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 17870  003302                     i2l5915:
 17871                           
 17872                           ; BSR set to: 0
 17873  003302  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17874  003304  E11A               	bnz	i2l5933
 17875  003306  0E40               	movlw	64
 17876  003308  5D9D               	subwf	i2FSH_Write_IR_RF@i& (0+255),w,b
 17877  00330A  E217               	bc	i2l5933
 17878                           
 17879                           ; BSR set to: 0
 17880                           ;FLASH.c: 499: {
 17881                           ;FLASH.c: 500: if(FlashWaste[FlashWasteindex] != 0xDA)
 17882  00330C  0E00               	movlw	0
 17883  00330E  2599               	addwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 17884  003310  6EF6               	movwf	tblptrl,c
 17885  003312  0E26               	movlw	38
 17886  003314  219A               	addwfc	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 17887  003316  6EF7               	movwf	tblptrh,c
 17888  003318  6AF8               	clrf	tblptru,c
 17889  00331A  0E00               	movlw	0
 17890  00331C  22F8               	addwfc	tblptru,f,c
 17891  00331E  0008               	tblrd		*
 17892  003320  50F5               	movf	tablat,w,c
 17893  003322  0ADA               	xorlw	218
 17894  003324  E005               	bz	i2l5929
 17895                           
 17896                           ; BSR set to: 0
 17897                           ;FLASH.c: 501: {
 17898                           ;FLASH.c: 502: WriteTries++;
 17899  003326  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17900                           
 17901                           ; BSR set to: 0
 17902                           ;FLASH.c: 503: if(WriteTries > 10)
 17903  003328  0E0A               	movlw	10
 17904  00332A  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17905  00332C  D790               	goto	i2l5891
 17906  00332E  D687               	goto	i2l5763
 17907  003330                     i2l5929:
 17908                           
 17909                           ; BSR set to: 0
 17910                           ;FLASH.c: 511: }
 17911                           ;FLASH.c: 512: }
 17912                           ;FLASH.c: 513: FlashWasteindex++;
 17913  003330  4B99               	infsnz	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),f,b
 17914  003332  2B9A               	incf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),f,b
 17915  003334  4B9D               	infsnz	i2FSH_Write_IR_RF@i& (0+255),f,b
 17916  003336  2B9E               	incf	(i2FSH_Write_IR_RF@i+1)& (0+255),f,b
 17917  003338  D7E4               	goto	i2l5915
 17918  00333A                     i2l5933:
 17919                           
 17920                           ; BSR set to: 0
 17921  00333A  2B9B               	incf	i2FSH_Write_IR_RF@j& (0+255),f,b
 17922  00333C  D782               	goto	i2l5885
 17923  00333E                     i2l5937:
 17924                           
 17925                           ; BSR set to: 0
 17926                           ;FLASH.c: 514: }
 17927                           ;FLASH.c: 515: }
 17928                           ;FLASH.c: 516: status = 1;
 17929  00333E  0E01               	movlw	1
 17930  003340  6F9C               	movwf	i2FSH_Write_IR_RF@status& (0+255),b
 17931  003342                     i2l971:
 17932                           
 17933                           ;FLASH.c: 519: if(highint)
 17934  003342  0100               	movlb	0	; () banked
 17935  003344  5197               	movf	i2FSH_Write_IR_RF@highint& (0+255),w,b
 17936  003346  E001               	bz	i2l5941
 17937                           
 17938                           ; BSR set to: 0
 17939                           ;FLASH.c: 520: {
 17940                           ;FLASH.c: 521: INTCONbits.GIE = 1;
 17941  003348  8EF2               	bsf	intcon,7,c	;volatile
 17942  00334A                     i2l5941:
 17943                           
 17944                           ; BSR set to: 0
 17945                           ;FLASH.c: 522: }
 17946                           ;FLASH.c: 523: if(lowint)
 17947  00334A  5198               	movf	i2FSH_Write_IR_RF@lowint& (0+255),w,b
 17948  00334C  E001               	bz	i2l5945
 17949                           
 17950                           ; BSR set to: 0
 17951                           ;FLASH.c: 524: {
 17952                           ;FLASH.c: 525: INTCONbits.PEIE = 1;
 17953  00334E  8CF2               	bsf	intcon,6,c	;volatile
 17954  003350                     i2l5945:
 17955                           
 17956                           ; BSR set to: 0
 17957                           ;FLASH.c: 526: }
 17958                           ;FLASH.c: 527: return status;
 17959  003350  519C               	movf	i2FSH_Write_IR_RF@status& (0+255),w,b
 17960                           
 17961                           ; BSR set to: 0
 17962  003352  0012               	return		;funcret
 17963  003354                     __end_ofi2_FSH_Write_IR_RF:
 17964                           	opt stack 0
 17965                           tblptru	equ	0xFF8
 17966                           tblptrh	equ	0xFF7
 17967                           tblptrl	equ	0xFF6
 17968                           tablat	equ	0xFF5
 17969                           prodh	equ	0xFF4
 17970                           prodl	equ	0xFF3
 17971                           intcon	equ	0xFF2
 17972                           intcon2	equ	0xFF1
 17973                           intcon3	equ	0xFF0
 17974                           postinc0	equ	0xFEE
 17975                           wreg	equ	0xFE8
 17976                           postdec1	equ	0xFE5
 17977                           fsr1l	equ	0xFE1
 17978                           bsr	equ	0xFE0
 17979                           indf2	equ	0xFDF
 17980                           postinc2	equ	0xFDE
 17981                           postdec2	equ	0xFDD
 17982                           plusw2	equ	0xFDB
 17983                           fsr2h	equ	0xFDA
 17984                           fsr2l	equ	0xFD9
 17985                           status	equ	0xFD8
 17986                           
 17987 ;; *************** function i2_RF_ResetData *****************
 17988 ;; Defined at:
 17989 ;;		line 116 in file "RF.c"
 17990 ;; Parameters:    Size  Location     Type
 17991 ;;		None
 17992 ;; Auto vars:     Size  Location     Type
 17993 ;;		None
 17994 ;; Return value:  Size  Location     Type
 17995 ;;		None               void
 17996 ;; Registers used:
 17997 ;;		None
 17998 ;; Tracked objects:
 17999 ;;		On entry : E/0
 18000 ;;		On exit  : F/0
 18001 ;;		Unchanged: 0/0
 18002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18003 ;;      Params:         0       0       0       0       0
 18004 ;;      Locals:         0       0       0       0       0
 18005 ;;      Temps:          0       0       0       0       0
 18006 ;;      Totals:         0       0       0       0       0
 18007 ;;Total ram usage:        0 bytes
 18008 ;; Hardware stack levels used:    1
 18009 ;; This function calls:
 18010 ;;		Nothing
 18011 ;; This function is called by:
 18012 ;;		_high_isr
 18013 ;;		i2_FSH_Write_IR_RF
 18014 ;; This function uses a non-reentrant model
 18015 ;;
 18016                           
 18017                           	psect	text112
 18018  001BA8                     __ptext112:
 18019                           	opt stack 0
 18020  001BA8                     i2_RF_ResetData:
 18021                           	opt stack 17
 18022                           
 18023                           ;RF.c: 118: RF_DataPlace = 0;
 18024                           
 18025                           ; BSR set to: 0
 18026                           ;incstack = 0
 18027  001BA8  0100               	movlb	0	; () banked
 18028  001BAA  6BC9               	clrf	_RF_DataPlace& (0+255),b
 18029                           
 18030                           ;RF.c: 119: RFStarted = 0;
 18031  001BAC  6BC7               	clrf	_RFStarted& (0+255),b
 18032                           
 18033                           ; BSR set to: 0
 18034  001BAE  0012               	return		;funcret
 18035  001BB0                     __end_ofi2_RF_ResetData:
 18036                           	opt stack 0
 18037                           tblptru	equ	0xFF8
 18038                           tblptrh	equ	0xFF7
 18039                           tblptrl	equ	0xFF6
 18040                           tablat	equ	0xFF5
 18041                           prodh	equ	0xFF4
 18042                           prodl	equ	0xFF3
 18043                           intcon	equ	0xFF2
 18044                           intcon2	equ	0xFF1
 18045                           intcon3	equ	0xFF0
 18046                           postinc0	equ	0xFEE
 18047                           wreg	equ	0xFE8
 18048                           postdec1	equ	0xFE5
 18049                           fsr1l	equ	0xFE1
 18050                           bsr	equ	0xFE0
 18051                           indf2	equ	0xFDF
 18052                           postinc2	equ	0xFDE
 18053                           postdec2	equ	0xFDD
 18054                           plusw2	equ	0xFDB
 18055                           fsr2h	equ	0xFDA
 18056                           fsr2l	equ	0xFD9
 18057                           status	equ	0xFD8
 18058                           
 18059 ;; *************** function i2_MSC_BufferCopyIntConst *****************
 18060 ;; Defined at:
 18061 ;;		line 150 in file "MISC.c"
 18062 ;; Parameters:    Size  Location     Type
 18063 ;;  from            3    6[BANK0 ] PTR const unsigned int 
 18064 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 18065 ;;  to              2    9[BANK0 ] PTR unsigned int 
 18066 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 18067 ;;  count           2   11[BANK0 ] unsigned int 
 18068 ;;  shift           2   13[BANK0 ] unsigned int 
 18069 ;; Auto vars:     Size  Location     Type
 18070 ;;  MSC_BufferCo    2   15[BANK0 ] unsigned int 
 18071 ;; Return value:  Size  Location     Type
 18072 ;;		None               void
 18073 ;; Registers used:
 18074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18075 ;; Tracked objects:
 18076 ;;		On entry : F/0
 18077 ;;		On exit  : F/0
 18078 ;;		Unchanged: 0/0
 18079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18080 ;;      Params:         0       9       0       0       0
 18081 ;;      Locals:         0       2       0       0       0
 18082 ;;      Temps:          0       0       0       0       0
 18083 ;;      Totals:         0      11       0       0       0
 18084 ;;Total ram usage:       11 bytes
 18085 ;; Hardware stack levels used:    1
 18086 ;; Hardware stack levels required when called:    1
 18087 ;; This function calls:
 18088 ;;		i2_MSC_CleanBufferInt
 18089 ;; This function is called by:
 18090 ;;		i2_FSH_Write_IR_RF
 18091 ;; This function uses a non-reentrant model
 18092 ;;
 18093                           
 18094                           	psect	text113
 18095  000E24                     __ptext113:
 18096                           	opt stack 0
 18097  000E24                     i2_MSC_BufferCopyIntConst:
 18098                           	opt stack 14
 18099                           
 18100                           ; BSR set to: 0
 18101                           ;MISC.c: 153: MSC_CleanBufferInt(to,count);
 18102                           
 18103                           ; BSR set to: 0
 18104                           
 18105                           ; BSR set to: 0
 18106                           ;incstack = 0
 18107  000E24  C089  F080         	movff	i2MSC_BufferCopyIntConst@to,i2MSC_CleanBufferInt@data
 18108  000E28  C08A  F081         	movff	i2MSC_BufferCopyIntConst@to+1,i2MSC_CleanBufferInt@data+1
 18109  000E2C  C08B  F082         	movff	i2MSC_BufferCopyIntConst@count,i2MSC_CleanBufferInt@count
 18110  000E30  C08C  F083         	movff	i2MSC_BufferCopyIntConst@count+1,i2MSC_CleanBufferInt@count+1
 18111  000E34  EC16  F00B         	call	i2_MSC_CleanBufferInt	;wreg free
 18112                           
 18113                           ; BSR set to: 0
 18114                           ;MISC.c: 154: for(i = shift; i>0; i--)
 18115  000E38  C08D  F08F         	movff	i2MSC_BufferCopyIntConst@shift,i2MSC_BufferCopyIntConst@i
 18116  000E3C  C08E  F090         	movff	i2MSC_BufferCopyIntConst@shift+1,i2MSC_BufferCopyIntConst@i+1
 18117  000E40                     i2l4767:
 18118                           
 18119                           ; BSR set to: 0
 18120  000E40  518F               	movf	i2MSC_BufferCopyIntConst@i& (0+255),w,b
 18121  000E42  1190               	iorwf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),w,b
 18122  000E44  E02B               	bz	i2l4787
 18123                           
 18124                           ; BSR set to: 0
 18125                           ;MISC.c: 155: {
 18126                           ;MISC.c: 156: *to = ' ';
 18127  000E46  C089  FFD9         	movff	i2MSC_BufferCopyIntConst@to,fsr2l
 18128  000E4A  C08A  FFDA         	movff	i2MSC_BufferCopyIntConst@to+1,fsr2h
 18129  000E4E  0E20               	movlw	32
 18130  000E50  6EDE               	movwf	postinc2,c
 18131  000E52  6ADD               	clrf	postdec2,c
 18132                           
 18133                           ; BSR set to: 0
 18134                           ;MISC.c: 157: to++;
 18135  000E54  0E02               	movlw	2
 18136  000E56  2789               	addwf	i2MSC_BufferCopyIntConst@to& (0+255),f,b
 18137  000E58  0E00               	movlw	0
 18138  000E5A  238A               	addwfc	(i2MSC_BufferCopyIntConst@to+1)& (0+255),f,b
 18139                           
 18140                           ; BSR set to: 0
 18141  000E5C  078F               	decf	i2MSC_BufferCopyIntConst@i& (0+255),f,b
 18142  000E5E  A0D8               	btfss	status,0,c
 18143  000E60  0790               	decf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),f,b
 18144  000E62  D7EE               	goto	i2l4767
 18145  000E64                     i2l4779:
 18146                           
 18147                           ; BSR set to: 0
 18148                           ;MISC.c: 160: {
 18149                           ;MISC.c: 161: *to = *from;
 18150  000E64  C086  FFF6         	movff	i2MSC_BufferCopyIntConst@from,tblptrl
 18151  000E68  C087  FFF7         	movff	i2MSC_BufferCopyIntConst@from+1,tblptrh
 18152  000E6C  C088  FFF8         	movff	i2MSC_BufferCopyIntConst@from+2,tblptru
 18153  000E70  C089  FFD9         	movff	i2MSC_BufferCopyIntConst@to,fsr2l
 18154  000E74  C08A  FFDA         	movff	i2MSC_BufferCopyIntConst@to+1,fsr2h
 18155  000E78  0009               	tblrd		*+
 18156  000E7A  CFF5 FFDE          	movff	tablat,postinc2
 18157  000E7E  0008               	tblrd		*
 18158  000E80  CFF5 FFDD          	movff	tablat,postdec2
 18159                           
 18160                           ; BSR set to: 0
 18161                           ;MISC.c: 162: from++;
 18162  000E84  0E02               	movlw	2
 18163  000E86  2786               	addwf	i2MSC_BufferCopyIntConst@from& (0+255),f,b
 18164  000E88  0E00               	movlw	0
 18165  000E8A  2387               	addwfc	(i2MSC_BufferCopyIntConst@from+1)& (0+255),f,b
 18166  000E8C  2388               	addwfc	(i2MSC_BufferCopyIntConst@from+2)& (0+255),f,b
 18167                           
 18168                           ; BSR set to: 0
 18169                           ;MISC.c: 163: to++;
 18170  000E8E  0E02               	movlw	2
 18171  000E90  2789               	addwf	i2MSC_BufferCopyIntConst@to& (0+255),f,b
 18172  000E92  0E00               	movlw	0
 18173  000E94  238A               	addwfc	(i2MSC_BufferCopyIntConst@to+1)& (0+255),f,b
 18174                           
 18175                           ; BSR set to: 0
 18176                           ;MISC.c: 164: count--;
 18177  000E96  078B               	decf	i2MSC_BufferCopyIntConst@count& (0+255),f,b
 18178  000E98  A0D8               	btfss	status,0,c
 18179  000E9A  078C               	decf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),f,b
 18180  000E9C                     i2l4787:
 18181                           
 18182                           ; BSR set to: 0
 18183  000E9C  C086  FFF6         	movff	i2MSC_BufferCopyIntConst@from,tblptrl
 18184  000EA0  C087  FFF7         	movff	i2MSC_BufferCopyIntConst@from+1,tblptrh
 18185  000EA4  C088  FFF8         	movff	i2MSC_BufferCopyIntConst@from+2,tblptru
 18186  000EA8  0009               	tblrd		*+
 18187  000EAA  50F5               	movf	tablat,w,c
 18188  000EAC  0009               	tblrd		*+
 18189  000EAE  10F5               	iorwf	tablat,w,c
 18190  000EB0  B4D8               	btfsc	status,2,c
 18191  000EB2  0012               	return	
 18192                           
 18193                           ; BSR set to: 0
 18194  000EB4  518B               	movf	i2MSC_BufferCopyIntConst@count& (0+255),w,b
 18195  000EB6  118C               	iorwf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),w,b
 18196  000EB8  E1D5               	bnz	i2l4779
 18197                           
 18198                           ; BSR set to: 0
 18199  000EBA  0012               	return		;funcret
 18200  000EBC                     __end_ofi2_MSC_BufferCopyIntConst:
 18201                           	opt stack 0
 18202                           tblptru	equ	0xFF8
 18203                           tblptrh	equ	0xFF7
 18204                           tblptrl	equ	0xFF6
 18205                           tablat	equ	0xFF5
 18206                           prodh	equ	0xFF4
 18207                           prodl	equ	0xFF3
 18208                           intcon	equ	0xFF2
 18209                           intcon2	equ	0xFF1
 18210                           intcon3	equ	0xFF0
 18211                           postinc0	equ	0xFEE
 18212                           wreg	equ	0xFE8
 18213                           postdec1	equ	0xFE5
 18214                           fsr1l	equ	0xFE1
 18215                           bsr	equ	0xFE0
 18216                           indf2	equ	0xFDF
 18217                           postinc2	equ	0xFDE
 18218                           postdec2	equ	0xFDD
 18219                           plusw2	equ	0xFDB
 18220                           fsr2h	equ	0xFDA
 18221                           fsr2l	equ	0xFD9
 18222                           status	equ	0xFD8
 18223                           
 18224 ;; *************** function i2_MSC_CleanBufferInt *****************
 18225 ;; Defined at:
 18226 ;;		line 90 in file "MISC.c"
 18227 ;; Parameters:    Size  Location     Type
 18228 ;;  data            2    0[BANK0 ] PTR unsigned int 
 18229 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 18230 ;;  count           2    2[BANK0 ] unsigned int 
 18231 ;; Auto vars:     Size  Location     Type
 18232 ;;  MSC_CleanBuf    2    4[BANK0 ] unsigned int 
 18233 ;; Return value:  Size  Location     Type
 18234 ;;		None               void
 18235 ;; Registers used:
 18236 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18237 ;; Tracked objects:
 18238 ;;		On entry : F/0
 18239 ;;		On exit  : F/0
 18240 ;;		Unchanged: 0/0
 18241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18242 ;;      Params:         0       4       0       0       0
 18243 ;;      Locals:         0       2       0       0       0
 18244 ;;      Temps:          0       0       0       0       0
 18245 ;;      Totals:         0       6       0       0       0
 18246 ;;Total ram usage:        6 bytes
 18247 ;; Hardware stack levels used:    1
 18248 ;; This function calls:
 18249 ;;		Nothing
 18250 ;; This function is called by:
 18251 ;;		i2_MSC_BufferCopyIntConst
 18252 ;; This function uses a non-reentrant model
 18253 ;;
 18254                           
 18255                           	psect	text114
 18256  00162C                     __ptext114:
 18257                           	opt stack 0
 18258  00162C                     i2_MSC_CleanBufferInt:
 18259                           	opt stack 14
 18260                           
 18261                           ; BSR set to: 0
 18262                           ;MISC.c: 92: unsigned int i=0;
 18263                           
 18264                           ; BSR set to: 0
 18265                           ;incstack = 0
 18266  00162C  6B84               	clrf	i2MSC_CleanBufferInt@i& (0+255),b
 18267  00162E  6B85               	clrf	(i2MSC_CleanBufferInt@i+1)& (0+255),b
 18268                           
 18269                           ;MISC.c: 93: for(i=0; i<count;i++)
 18270  001630  6B84               	clrf	i2MSC_CleanBufferInt@i& (0+255),b
 18271  001632  6B85               	clrf	(i2MSC_CleanBufferInt@i+1)& (0+255),b
 18272  001634  D00D               	goto	i2l4367
 18273  001636                     i2l4363:
 18274                           
 18275                           ; BSR set to: 0
 18276                           ;MISC.c: 94: {
 18277                           ;MISC.c: 95: data[i]= 0;
 18278  001636  90D8               	bcf	status,0,c
 18279  001638  3584               	rlcf	i2MSC_CleanBufferInt@i& (0+255),w,b
 18280  00163A  6ED9               	movwf	fsr2l,c
 18281  00163C  3585               	rlcf	(i2MSC_CleanBufferInt@i+1)& (0+255),w,b
 18282  00163E  6EDA               	movwf	fsr2h,c
 18283  001640  5180               	movf	i2MSC_CleanBufferInt@data& (0+255),w,b
 18284  001642  26D9               	addwf	fsr2l,f,c
 18285  001644  5181               	movf	(i2MSC_CleanBufferInt@data+1)& (0+255),w,b
 18286  001646  22DA               	addwfc	fsr2h,f,c
 18287  001648  6ADE               	clrf	postinc2,c
 18288  00164A  6ADD               	clrf	postdec2,c
 18289                           
 18290                           ; BSR set to: 0
 18291  00164C  4B84               	infsnz	i2MSC_CleanBufferInt@i& (0+255),f,b
 18292  00164E  2B85               	incf	(i2MSC_CleanBufferInt@i+1)& (0+255),f,b
 18293  001650                     i2l4367:
 18294                           
 18295                           ; BSR set to: 0
 18296  001650  5182               	movf	i2MSC_CleanBufferInt@count& (0+255),w,b
 18297  001652  5D84               	subwf	i2MSC_CleanBufferInt@i& (0+255),w,b
 18298  001654  5183               	movf	(i2MSC_CleanBufferInt@count+1)& (0+255),w,b
 18299  001656  5985               	subwfb	(i2MSC_CleanBufferInt@i+1)& (0+255),w,b
 18300  001658  E3EE               	bnc	i2l4363
 18301                           
 18302                           ; BSR set to: 0
 18303  00165A  0012               	return		;funcret
 18304  00165C                     __end_ofi2_MSC_CleanBufferInt:
 18305                           	opt stack 0
 18306                           tblptru	equ	0xFF8
 18307                           tblptrh	equ	0xFF7
 18308                           tblptrl	equ	0xFF6
 18309                           tablat	equ	0xFF5
 18310                           prodh	equ	0xFF4
 18311                           prodl	equ	0xFF3
 18312                           intcon	equ	0xFF2
 18313                           intcon2	equ	0xFF1
 18314                           intcon3	equ	0xFF0
 18315                           postinc0	equ	0xFEE
 18316                           wreg	equ	0xFE8
 18317                           postdec1	equ	0xFE5
 18318                           fsr1l	equ	0xFE1
 18319                           bsr	equ	0xFE0
 18320                           indf2	equ	0xFDF
 18321                           postinc2	equ	0xFDE
 18322                           postdec2	equ	0xFDD
 18323                           plusw2	equ	0xFDB
 18324                           fsr2h	equ	0xFDA
 18325                           fsr2l	equ	0xFD9
 18326                           status	equ	0xFD8
 18327                           
 18328 ;; *************** function i2_IR_ResetData *****************
 18329 ;; Defined at:
 18330 ;;		line 109 in file "IR.c"
 18331 ;; Parameters:    Size  Location     Type
 18332 ;;		None
 18333 ;; Auto vars:     Size  Location     Type
 18334 ;;		None
 18335 ;; Return value:  Size  Location     Type
 18336 ;;		None               void
 18337 ;; Registers used:
 18338 ;;		wreg, status,2, cstack
 18339 ;; Tracked objects:
 18340 ;;		On entry : F/1
 18341 ;;		On exit  : F/0
 18342 ;;		Unchanged: 0/0
 18343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18344 ;;      Params:         0       0       0       0       0
 18345 ;;      Locals:         0       0       0       0       0
 18346 ;;      Temps:          0       0       0       0       0
 18347 ;;      Totals:         0       0       0       0       0
 18348 ;;Total ram usage:        0 bytes
 18349 ;; Hardware stack levels used:    1
 18350 ;; Hardware stack levels required when called:    2
 18351 ;; This function calls:
 18352 ;;		i2_RF_Enable
 18353 ;; This function is called by:
 18354 ;;		i2_FSH_Write_IR_RF
 18355 ;; This function uses a non-reentrant model
 18356 ;;
 18357                           
 18358                           	psect	text115
 18359  001BB0                     __ptext115:
 18360                           	opt stack 0
 18361  001BB0                     i2_IR_ResetData:
 18362                           	opt stack 13
 18363                           
 18364                           ; BSR set to: 1
 18365                           ;IR.c: 111: IR_DataPlace = 0;
 18366                           
 18367                           ; BSR set to: 0
 18368                           ;incstack = 0
 18369  001BB0  6A6B               	clrf	_IR_DataPlace,c
 18370                           
 18371                           ;IR.c: 112: IRStarted = 0;
 18372  001BB2  6A69               	clrf	_IRStarted,c
 18373                           
 18374                           ; BSR set to: 1
 18375                           ;IR.c: 113: RF_Enable();
 18376  001BB4  EF18  F00D         	goto	i2_RF_Enable	;wreg free
 18377  001BB8                     __end_ofi2_IR_ResetData:
 18378                           	opt stack 0
 18379                           tblptru	equ	0xFF8
 18380                           tblptrh	equ	0xFF7
 18381                           tblptrl	equ	0xFF6
 18382                           tablat	equ	0xFF5
 18383                           prodh	equ	0xFF4
 18384                           prodl	equ	0xFF3
 18385                           intcon	equ	0xFF2
 18386                           intcon2	equ	0xFF1
 18387                           intcon3	equ	0xFF0
 18388                           postinc0	equ	0xFEE
 18389                           wreg	equ	0xFE8
 18390                           postdec1	equ	0xFE5
 18391                           fsr1l	equ	0xFE1
 18392                           bsr	equ	0xFE0
 18393                           indf2	equ	0xFDF
 18394                           postinc2	equ	0xFDE
 18395                           postdec2	equ	0xFDD
 18396                           plusw2	equ	0xFDB
 18397                           fsr2h	equ	0xFDA
 18398                           fsr2l	equ	0xFD9
 18399                           status	equ	0xFD8
 18400                           
 18401 ;; *************** function i2_RF_Enable *****************
 18402 ;; Defined at:
 18403 ;;		line 101 in file "RF.c"
 18404 ;; Parameters:    Size  Location     Type
 18405 ;;		None
 18406 ;; Auto vars:     Size  Location     Type
 18407 ;;		None
 18408 ;; Return value:  Size  Location     Type
 18409 ;;		None               void
 18410 ;; Registers used:
 18411 ;;		wreg, status,2, cstack
 18412 ;; Tracked objects:
 18413 ;;		On entry : F/1
 18414 ;;		On exit  : F/0
 18415 ;;		Unchanged: 0/0
 18416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18417 ;;      Params:         0       0       0       0       0
 18418 ;;      Locals:         0       0       0       0       0
 18419 ;;      Temps:          0       0       0       0       0
 18420 ;;      Totals:         0       0       0       0       0
 18421 ;;Total ram usage:        0 bytes
 18422 ;; Hardware stack levels used:    1
 18423 ;; Hardware stack levels required when called:    1
 18424 ;; This function calls:
 18425 ;;		i2_RF_DataInt
 18426 ;;		i2_TMR_Timer0Int
 18427 ;; This function is called by:
 18428 ;;		i2_IR_ResetData
 18429 ;; This function uses a non-reentrant model
 18430 ;;
 18431                           
 18432                           	psect	text116
 18433  001A30                     __ptext116:
 18434                           	opt stack 0
 18435  001A30                     i2_RF_Enable:
 18436                           	opt stack 13
 18437                           
 18438                           ; BSR set to: 1
 18439                           ;RF.c: 103: INTCON3bits.INT1IF = 0;
 18440                           
 18441                           ; BSR set to: 0
 18442                           ;incstack = 0
 18443  001A30  90F0               	bcf	intcon3,0,c	;volatile
 18444                           
 18445                           ;RF.c: 104: INTCON3bits.INT2IF = 0;
 18446  001A32  92F0               	bcf	intcon3,1,c	;volatile
 18447                           
 18448                           ;RF.c: 105: INTCONbits.TMR0IF = 0;
 18449  001A34  94F2               	bcf	intcon,2,c	;volatile
 18450                           
 18451                           ; BSR set to: 1
 18452                           ;RF.c: 106: RF_DataInt(1);
 18453  001A36  0E01               	movlw	1
 18454  001A38  ECE1  F00C         	call	i2_RF_DataInt
 18455                           
 18456                           ;RF.c: 107: TMR_Timer0Int(1);
 18457  001A3C  0E01               	movlw	1
 18458  001A3E  EF91  F00D         	goto	i2_TMR_Timer0Int
 18459  001A42                     __end_ofi2_RF_Enable:
 18460                           	opt stack 0
 18461                           tblptru	equ	0xFF8
 18462                           tblptrh	equ	0xFF7
 18463                           tblptrl	equ	0xFF6
 18464                           tablat	equ	0xFF5
 18465                           prodh	equ	0xFF4
 18466                           prodl	equ	0xFF3
 18467                           intcon	equ	0xFF2
 18468                           intcon2	equ	0xFF1
 18469                           intcon3	equ	0xFF0
 18470                           postinc0	equ	0xFEE
 18471                           wreg	equ	0xFE8
 18472                           postdec1	equ	0xFE5
 18473                           fsr1l	equ	0xFE1
 18474                           bsr	equ	0xFE0
 18475                           indf2	equ	0xFDF
 18476                           postinc2	equ	0xFDE
 18477                           postdec2	equ	0xFDD
 18478                           plusw2	equ	0xFDB
 18479                           fsr2h	equ	0xFDA
 18480                           fsr2l	equ	0xFD9
 18481                           status	equ	0xFD8
 18482                           
 18483 ;; *************** function i2_TMR_Timer0Int *****************
 18484 ;; Defined at:
 18485 ;;		line 332 in file "TIMERS.c"
 18486 ;; Parameters:    Size  Location     Type
 18487 ;;  state           1    wreg     unsigned char 
 18488 ;; Auto vars:     Size  Location     Type
 18489 ;;  state           1    0[BANK0 ] unsigned char 
 18490 ;; Return value:  Size  Location     Type
 18491 ;;		None               void
 18492 ;; Registers used:
 18493 ;;		wreg, status,2
 18494 ;; Tracked objects:
 18495 ;;		On entry : F/0
 18496 ;;		On exit  : F/0
 18497 ;;		Unchanged: 0/0
 18498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18499 ;;      Params:         0       0       0       0       0
 18500 ;;      Locals:         0       1       0       0       0
 18501 ;;      Temps:          0       0       0       0       0
 18502 ;;      Totals:         0       1       0       0       0
 18503 ;;Total ram usage:        1 bytes
 18504 ;; Hardware stack levels used:    1
 18505 ;; This function calls:
 18506 ;;		Nothing
 18507 ;; This function is called by:
 18508 ;;		i2_RF_Disable
 18509 ;;		i2_RF_Enable
 18510 ;; This function uses a non-reentrant model
 18511 ;;
 18512                           
 18513                           	psect	text117
 18514  001B22                     __ptext117:
 18515                           	opt stack 0
 18516  001B22                     i2_TMR_Timer0Int:
 18517                           	opt stack 16
 18518                           
 18519                           ; BSR set to: 0
 18520                           ;incstack = 0
 18521                           ;i2TMR_Timer0Int@state stored from wreg
 18522  001B22  6F80               	movwf	i2TMR_Timer0Int@state& (0+255),b
 18523                           
 18524                           ;TIMERS.c: 334: if(state)
 18525  001B24  0100               	movlb	0	; () banked
 18526  001B26  5180               	movf	i2TMR_Timer0Int@state& (0+255),w,b
 18527  001B28  E002               	bz	i2l873
 18528                           
 18529                           ; BSR set to: 0
 18530                           ;TIMERS.c: 335: {
 18531                           ;TIMERS.c: 337: INTCONbits.TMR0IE = 1;
 18532  001B2A  8AF2               	bsf	intcon,5,c	;volatile
 18533                           
 18534                           ;TIMERS.c: 338: }
 18535  001B2C  0012               	return	
 18536  001B2E                     i2l873:
 18537                           
 18538                           ; BSR set to: 0
 18539                           ;TIMERS.c: 339: else
 18540                           ;TIMERS.c: 340: {
 18541                           ;TIMERS.c: 342: INTCONbits.TMR0IE = 0;
 18542  001B2E  9AF2               	bcf	intcon,5,c	;volatile
 18543                           
 18544                           ; BSR set to: 0
 18545  001B30  0012               	return		;funcret
 18546  001B32                     __end_ofi2_TMR_Timer0Int:
 18547                           	opt stack 0
 18548                           tblptru	equ	0xFF8
 18549                           tblptrh	equ	0xFF7
 18550                           tblptrl	equ	0xFF6
 18551                           tablat	equ	0xFF5
 18552                           prodh	equ	0xFF4
 18553                           prodl	equ	0xFF3
 18554                           intcon	equ	0xFF2
 18555                           intcon2	equ	0xFF1
 18556                           intcon3	equ	0xFF0
 18557                           postinc0	equ	0xFEE
 18558                           wreg	equ	0xFE8
 18559                           postdec1	equ	0xFE5
 18560                           fsr1l	equ	0xFE1
 18561                           bsr	equ	0xFE0
 18562                           indf2	equ	0xFDF
 18563                           postinc2	equ	0xFDE
 18564                           postdec2	equ	0xFDD
 18565                           plusw2	equ	0xFDB
 18566                           fsr2h	equ	0xFDA
 18567                           fsr2l	equ	0xFD9
 18568                           status	equ	0xFD8
 18569                           
 18570 ;; *************** function i2_RF_DataInt *****************
 18571 ;; Defined at:
 18572 ;;		line 254 in file "RF.c"
 18573 ;; Parameters:    Size  Location     Type
 18574 ;;  state           1    wreg     unsigned char 
 18575 ;; Auto vars:     Size  Location     Type
 18576 ;;  state           1    0[BANK0 ] unsigned char 
 18577 ;; Return value:  Size  Location     Type
 18578 ;;		None               void
 18579 ;; Registers used:
 18580 ;;		wreg, status,2
 18581 ;; Tracked objects:
 18582 ;;		On entry : F/1
 18583 ;;		On exit  : F/0
 18584 ;;		Unchanged: 0/0
 18585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18586 ;;      Params:         0       0       0       0       0
 18587 ;;      Locals:         0       1       0       0       0
 18588 ;;      Temps:          0       0       0       0       0
 18589 ;;      Totals:         0       1       0       0       0
 18590 ;;Total ram usage:        1 bytes
 18591 ;; Hardware stack levels used:    1
 18592 ;; This function calls:
 18593 ;;		Nothing
 18594 ;; This function is called by:
 18595 ;;		i2_RF_Disable
 18596 ;;		i2_RF_Enable
 18597 ;; This function uses a non-reentrant model
 18598 ;;
 18599                           
 18600                           	psect	text118
 18601  0019C2                     __ptext118:
 18602                           	opt stack 0
 18603  0019C2                     i2_RF_DataInt:
 18604                           	opt stack 16
 18605                           
 18606                           ; BSR set to: 0
 18607                           ;incstack = 0
 18608                           ;i2RF_DataInt@state stored from wreg
 18609  0019C2  0100               	movlb	0	; () banked
 18610  0019C4  6F80               	movwf	i2RF_DataInt@state& (0+255),b
 18611                           
 18612                           ;RF.c: 257: if(state)
 18613  0019C6  5180               	movf	i2RF_DataInt@state& (0+255),w,b
 18614  0019C8  E003               	bz	i2l469
 18615                           
 18616                           ; BSR set to: 0
 18617                           ;RF.c: 258: {
 18618                           ;RF.c: 260: INTCON3bits.INT1E = 1;
 18619  0019CA  86F0               	bsf	intcon3,3,c	;volatile
 18620                           
 18621                           ;RF.c: 261: INTCON3bits.INT2E = 1;
 18622  0019CC  88F0               	bsf	intcon3,4,c	;volatile
 18623                           
 18624                           ;RF.c: 262: }
 18625  0019CE  0012               	return	
 18626  0019D0                     i2l469:
 18627                           
 18628                           ; BSR set to: 0
 18629                           ;RF.c: 263: else
 18630                           ;RF.c: 264: {
 18631                           ;RF.c: 266: INTCON3bits.INT1E = 0;
 18632  0019D0  96F0               	bcf	intcon3,3,c	;volatile
 18633                           
 18634                           ;RF.c: 267: INTCON3bits.INT2E = 0;
 18635  0019D2  98F0               	bcf	intcon3,4,c	;volatile
 18636                           
 18637                           ; BSR set to: 0
 18638  0019D4  0012               	return		;funcret
 18639  0019D6                     __end_ofi2_RF_DataInt:
 18640                           	opt stack 0
 18641                           tblptru	equ	0xFF8
 18642                           tblptrh	equ	0xFF7
 18643                           tblptrl	equ	0xFF6
 18644                           tablat	equ	0xFF5
 18645                           prodh	equ	0xFF4
 18646                           prodl	equ	0xFF3
 18647                           intcon	equ	0xFF2
 18648                           intcon2	equ	0xFF1
 18649                           intcon3	equ	0xFF0
 18650                           postinc0	equ	0xFEE
 18651                           wreg	equ	0xFE8
 18652                           postdec1	equ	0xFE5
 18653                           fsr1l	equ	0xFE1
 18654                           bsr	equ	0xFE0
 18655                           indf2	equ	0xFDF
 18656                           postinc2	equ	0xFDE
 18657                           postdec2	equ	0xFDD
 18658                           plusw2	equ	0xFDB
 18659                           fsr2h	equ	0xFDA
 18660                           fsr2l	equ	0xFD9
 18661                           status	equ	0xFD8
 18662                           
 18663 ;; *************** function i2_FSH_WriteIntArray *****************
 18664 ;; Defined at:
 18665 ;;		line 125 in file "FLASH.c"
 18666 ;; Parameters:    Size  Location     Type
 18667 ;;  ConstArray      3    4[BANK0 ] PTR const unsigned int 
 18668 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 18669 ;;  Array           2    7[BANK0 ] PTR unsigned int 
 18670 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 18671 ;; Auto vars:     Size  Location     Type
 18672 ;;  FSH_WriteInt    4   12[BANK0 ] unsigned long 
 18673 ;;  FSH_WriteInt    1   11[BANK0 ] unsigned char 
 18674 ;; Return value:  Size  Location     Type
 18675 ;;		None               void
 18676 ;; Registers used:
 18677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18678 ;; Tracked objects:
 18679 ;;		On entry : F/0
 18680 ;;		On exit  : 0/0
 18681 ;;		Unchanged: 0/0
 18682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18683 ;;      Params:         0       5       0       0       0
 18684 ;;      Locals:         0       5       0       0       0
 18685 ;;      Temps:          0       2       0       0       0
 18686 ;;      Totals:         0      12       0       0       0
 18687 ;;Total ram usage:       12 bytes
 18688 ;; Hardware stack levels used:    1
 18689 ;; Hardware stack levels required when called:    1
 18690 ;; This function calls:
 18691 ;;		i2_FSH_AddressToBlock
 18692 ;; This function is called by:
 18693 ;;		i2_FSH_Write_IR_RF
 18694 ;; This function uses a non-reentrant model
 18695 ;;
 18696                           
 18697                           	psect	text119
 18698  000BAC                     __ptext119:
 18699                           	opt stack 0
 18700  000BAC                     i2_FSH_WriteIntArray:
 18701                           	opt stack 14
 18702                           
 18703                           ; BSR set to: 0
 18704                           ;FLASH.c: 127: unsigned char i;
 18705                           ;FLASH.c: 128: unsigned long address = ConstArray;
 18706                           
 18707                           ; BSR set to: 0
 18708                           ;incstack = 0
 18709  000BAC  5184               	movf	i2FSH_WriteIntArray@ConstArray& (0+255),w,b
 18710  000BAE  6F8C               	movwf	i2FSH_WriteIntArray@address& (0+255),b
 18711  000BB0  5185               	movf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),w,b
 18712  000BB2  6F8D               	movwf	(i2FSH_WriteIntArray@address+1)& (0+255),b
 18713  000BB4  5186               	movf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),w,b
 18714  000BB6  6F8E               	movwf	(i2FSH_WriteIntArray@address+2)& (0+255),b
 18715  000BB8  6B8F               	clrf	(i2FSH_WriteIntArray@address+3)& (0+255),b
 18716                           
 18717                           ; BSR set to: 0
 18718                           ;FLASH.c: 131: FSH_AddressToBlock(address);
 18719  000BBA  C08C  F080         	movff	i2FSH_WriteIntArray@address,i2FSH_AddressToBlock@Address
 18720  000BBE  C08D  F081         	movff	i2FSH_WriteIntArray@address+1,i2FSH_AddressToBlock@Address+1
 18721  000BC2  C08E  F082         	movff	i2FSH_WriteIntArray@address+2,i2FSH_AddressToBlock@Address+2
 18722  000BC6  C08F  F083         	movff	i2FSH_WriteIntArray@address+3,i2FSH_AddressToBlock@Address+3
 18723  000BCA  EC58  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 18724                           
 18725                           ; BSR set to: 0
 18726                           ;FLASH.c: 133: if(address < 0x2400 || address >= 0x2800)
 18727  000BCE  518F               	movf	(i2FSH_WriteIntArray@address+3)& (0+255),w,b
 18728  000BD0  118E               	iorwf	(i2FSH_WriteIntArray@address+2)& (0+255),w,b
 18729  000BD2  E103               	bnz	i2u445_40
 18730  000BD4  0E24               	movlw	36
 18731  000BD6  5D8D               	subwf	(i2FSH_WriteIntArray@address+1)& (0+255),w,b
 18732  000BD8  E306               	bnc	i2l957
 18733  000BDA                     i2u445_40:
 18734                           
 18735                           ; BSR set to: 0
 18736  000BDA  518F               	movf	(i2FSH_WriteIntArray@address+3)& (0+255),w,b
 18737  000BDC  118E               	iorwf	(i2FSH_WriteIntArray@address+2)& (0+255),w,b
 18738  000BDE  E103               	bnz	i2u446_40
 18739  000BE0  0E28               	movlw	40
 18740  000BE2  5D8D               	subwf	(i2FSH_WriteIntArray@address+1)& (0+255),w,b
 18741  000BE4  E301               	bnc	i2l955
 18742  000BE6                     i2u446_40:
 18743  000BE6                     i2l957:
 18744                           
 18745                           ; BSR set to: 0
 18746  000BE6  00FF               	reset		;# 
 18747  000BE8                     i2l955:
 18748                           
 18749                           ;FLASH.c: 137: }
 18750                           ;FLASH.c: 139: for(i = 0; i<32; i++)
 18751  000BE8  0100               	movlb	0	; () banked
 18752  000BEA  6B8B               	clrf	i2FSH_WriteIntArray@i& (0+255),b
 18753  000BEC                     i2l4841:
 18754                           
 18755                           ; BSR set to: 0
 18756                           ;FLASH.c: 140: {
 18757                           ;FLASH.c: 142: TABLAT = *Array;
 18758  000BEC  C087  FFD9         	movff	i2FSH_WriteIntArray@Array,fsr2l
 18759  000BF0  C088  FFDA         	movff	i2FSH_WriteIntArray@Array+1,fsr2h
 18760  000BF4  50DF               	movf	indf2,w,c
 18761  000BF6  6EF5               	movwf	tablat,c	;volatile
 18762  000BF8  000D               	tblwt		*+	;# 
 18763                           
 18764                           ;FLASH.c: 144: TABLAT = *Array >> 8;
 18765  000BFA  C087  FFD9         	movff	i2FSH_WriteIntArray@Array,fsr2l
 18766  000BFE  C088  FFDA         	movff	i2FSH_WriteIntArray@Array+1,fsr2h
 18767  000C02  CFDE F089          	movff	postinc2,??i2_FSH_WriteIntArray
 18768  000C06  CFDD F08A          	movff	postdec2,??i2_FSH_WriteIntArray+1
 18769  000C0A  C08A  F089         	movff	??i2_FSH_WriteIntArray+1,??i2_FSH_WriteIntArray
 18770  000C0E  0100               	movlb	0	; () banked
 18771  000C10  6B8A               	clrf	(??i2_FSH_WriteIntArray+1)& (0+255),b
 18772  000C12  5189               	movf	??i2_FSH_WriteIntArray& (0+255),w,b
 18773  000C14  6EF5               	movwf	tablat,c	;volatile
 18774  000C16  000D               	tblwt		*+	;# 
 18775                           
 18776                           ;FLASH.c: 146: Array++;
 18777  000C18  0E02               	movlw	2
 18778  000C1A  2787               	addwf	i2FSH_WriteIntArray@Array& (0+255),f,b
 18779  000C1C  0E00               	movlw	0
 18780  000C1E  2388               	addwfc	(i2FSH_WriteIntArray@Array+1)& (0+255),f,b
 18781                           
 18782                           ; BSR set to: 0
 18783  000C20  2B8B               	incf	i2FSH_WriteIntArray@i& (0+255),f,b
 18784                           
 18785                           ; BSR set to: 0
 18786  000C22  0E1F               	movlw	31
 18787  000C24  658B               	cpfsgt	i2FSH_WriteIntArray@i& (0+255),b
 18788  000C26  D7E2               	goto	i2l4841
 18789                           
 18790                           ; BSR set to: 0
 18791                           ;FLASH.c: 147: }
 18792                           ;FLASH.c: 150: FSH_AddressToBlock(address);
 18793  000C28  C08C  F080         	movff	i2FSH_WriteIntArray@address,i2FSH_AddressToBlock@Address
 18794  000C2C  C08D  F081         	movff	i2FSH_WriteIntArray@address+1,i2FSH_AddressToBlock@Address+1
 18795  000C30  C08E  F082         	movff	i2FSH_WriteIntArray@address+2,i2FSH_AddressToBlock@Address+2
 18796  000C34  C08F  F083         	movff	i2FSH_WriteIntArray@address+3,i2FSH_AddressToBlock@Address+3
 18797  000C38  EC58  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 18798                           
 18799                           ; BSR set to: 0
 18800                           ;FLASH.c: 152: EECON1bits.WRERR = 0;
 18801  000C3C  96A6               	bcf	4006,3,c	;volatile
 18802                           
 18803                           ; BSR set to: 0
 18804                           ;FLASH.c: 153: EECON1bits.FREE = 0;
 18805  000C3E  98A6               	bcf	4006,4,c	;volatile
 18806  000C40  84A6               	bsf	4006,2,c	;# 
 18807  000C42  9EF2               	bcf	intcon,7,c	;# 
 18808  000C44  0E55               	movlw	85	;# 
 18809  000C46  6EA7               	movwf	4007,c	;# 
 18810  000C48  0EAA               	movlw	170	;# 
 18811  000C4A  6EA7               	movwf	4007,c	;# 
 18812  000C4C  82A6               	bsf	4006,1,c	;# 
 18813  000C4E  0CAA               	retlw	170	;funcret
 18814  000C50                     __end_ofi2_FSH_WriteIntArray:
 18815                           	opt stack 0
 18816                           tblptru	equ	0xFF8
 18817                           tblptrh	equ	0xFF7
 18818                           tblptrl	equ	0xFF6
 18819                           tablat	equ	0xFF5
 18820                           prodh	equ	0xFF4
 18821                           prodl	equ	0xFF3
 18822                           intcon	equ	0xFF2
 18823                           intcon2	equ	0xFF1
 18824                           intcon3	equ	0xFF0
 18825                           postinc0	equ	0xFEE
 18826                           wreg	equ	0xFE8
 18827                           postdec1	equ	0xFE5
 18828                           fsr1l	equ	0xFE1
 18829                           bsr	equ	0xFE0
 18830                           indf2	equ	0xFDF
 18831                           postinc2	equ	0xFDE
 18832                           postdec2	equ	0xFDD
 18833                           plusw2	equ	0xFDB
 18834                           fsr2h	equ	0xFDA
 18835                           fsr2l	equ	0xFD9
 18836                           status	equ	0xFD8
 18837                           
 18838 ;; *************** function i2_FSH_VerifyWriteIntArray *****************
 18839 ;; Defined at:
 18840 ;;		line 169 in file "FLASH.c"
 18841 ;; Parameters:    Size  Location     Type
 18842 ;;  ConstArray      3    0[BANK0 ] PTR const unsigned int 
 18843 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 18844 ;;  Array           2    3[BANK0 ] PTR unsigned int 
 18845 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 18846 ;; Auto vars:     Size  Location     Type
 18847 ;;  FSH_VerifyWr    2    8[BANK0 ] unsigned int 
 18848 ;;  FSH_VerifyWr    1   11[BANK0 ] unsigned char 
 18849 ;;  FSH_VerifyWr    1   10[BANK0 ] unsigned char 
 18850 ;; Return value:  Size  Location     Type
 18851 ;;                  1    wreg      unsigned char 
 18852 ;; Registers used:
 18853 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18854 ;; Tracked objects:
 18855 ;;		On entry : F/0
 18856 ;;		On exit  : F/0
 18857 ;;		Unchanged: 0/0
 18858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18859 ;;      Params:         0       5       0       0       0
 18860 ;;      Locals:         0       4       0       0       0
 18861 ;;      Temps:          0       3       0       0       0
 18862 ;;      Totals:         0      12       0       0       0
 18863 ;;Total ram usage:       12 bytes
 18864 ;; Hardware stack levels used:    1
 18865 ;; This function calls:
 18866 ;;		Nothing
 18867 ;; This function is called by:
 18868 ;;		i2_FSH_Write_IR_RF
 18869 ;; This function uses a non-reentrant model
 18870 ;;
 18871                           
 18872                           	psect	text120
 18873  001220                     __ptext120:
 18874                           	opt stack 0
 18875  001220                     i2_FSH_VerifyWriteIntArray:
 18876                           	opt stack 15
 18877                           
 18878                           ; BSR set to: 0
 18879                           ;FLASH.c: 171: unsigned char i;
 18880                           ;FLASH.c: 172: unsigned int data;
 18881                           ;FLASH.c: 173: unsigned char failcount = 0;
 18882                           
 18883                           ;incstack = 0
 18884  001220  6B8A               	clrf	i2FSH_VerifyWriteIntArray@failcount& (0+255),b
 18885                           
 18886                           ;FLASH.c: 175: for(i = 0; i<32; i++)
 18887  001222  6B8B               	clrf	i2FSH_VerifyWriteIntArray@i& (0+255),b
 18888  001224                     i2l4861:
 18889                           
 18890                           ; BSR set to: 0
 18891                           ;FLASH.c: 176: {
 18892                           ;FLASH.c: 177: data = ConstArray[i];
 18893  001224  518B               	movf	i2FSH_VerifyWriteIntArray@i& (0+255),w,b
 18894  001226  0D02               	mullw	2
 18895  001228  50F3               	movf	prodl,w,c
 18896  00122A  2580               	addwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),w,b
 18897  00122C  6F85               	movwf	??i2_FSH_VerifyWriteIntArray& (0+255),b
 18898  00122E  50F4               	movf	prodh,w,c
 18899  001230  2181               	addwfc	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),w,b
 18900  001232  6F86               	movwf	(??i2_FSH_VerifyWriteIntArray+1)& (0+255),b
 18901  001234  0E00               	movlw	0
 18902  001236  2182               	addwfc	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),w,b
 18903  001238  6F87               	movwf	(??i2_FSH_VerifyWriteIntArray+2)& (0+255),b
 18904  00123A  C085  FFF6         	movff	??i2_FSH_VerifyWriteIntArray,tblptrl
 18905  00123E  C086  FFF7         	movff	??i2_FSH_VerifyWriteIntArray+1,tblptrh
 18906  001242  C087  FFF8         	movff	??i2_FSH_VerifyWriteIntArray+2,tblptru
 18907  001246  0009               	tblrd		*+
 18908  001248  CFF5 F088          	movff	tablat,i2FSH_VerifyWriteIntArray@data
 18909  00124C  000A               	tblrd		*-
 18910  00124E  CFF5 F089          	movff	tablat,i2FSH_VerifyWriteIntArray@data+1
 18911                           
 18912                           ; BSR set to: 0
 18913                           ;FLASH.c: 178: if(data != Array[i])
 18914  001252  518B               	movf	i2FSH_VerifyWriteIntArray@i& (0+255),w,b
 18915  001254  0D02               	mullw	2
 18916  001256  50F3               	movf	prodl,w,c
 18917  001258  2583               	addwf	i2FSH_VerifyWriteIntArray@Array& (0+255),w,b
 18918  00125A  6ED9               	movwf	fsr2l,c
 18919  00125C  50F4               	movf	prodh,w,c
 18920  00125E  2184               	addwfc	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),w,b
 18921  001260  6EDA               	movwf	fsr2h,c
 18922  001262  5188               	movf	i2FSH_VerifyWriteIntArray@data& (0+255),w,b
 18923  001264  18DE               	xorwf	postinc2,w,c
 18924  001266  E103               	bnz	i2u448_40
 18925  001268  5189               	movf	(i2FSH_VerifyWriteIntArray@data+1)& (0+255),w,b
 18926  00126A  18DE               	xorwf	postinc2,w,c
 18927  00126C  E001               	bz	i2l965
 18928  00126E                     i2u448_40:
 18929                           
 18930                           ; BSR set to: 0
 18931                           ;FLASH.c: 179: {
 18932                           ;FLASH.c: 180: failcount++;
 18933  00126E  2B8A               	incf	i2FSH_VerifyWriteIntArray@failcount& (0+255),f,b
 18934  001270                     i2l965:
 18935                           
 18936                           ; BSR set to: 0
 18937  001270  2B8B               	incf	i2FSH_VerifyWriteIntArray@i& (0+255),f,b
 18938                           
 18939                           ; BSR set to: 0
 18940  001272  0E1F               	movlw	31
 18941  001274  658B               	cpfsgt	i2FSH_VerifyWriteIntArray@i& (0+255),b
 18942  001276  D7D6               	goto	i2l4861
 18943                           
 18944                           ; BSR set to: 0
 18945                           ;FLASH.c: 181: }
 18946                           ;FLASH.c: 182: }
 18947                           ;FLASH.c: 183: if(failcount)
 18948  001278  518A               	movf	i2FSH_VerifyWriteIntArray@failcount& (0+255),w,b
 18949  00127A  E001               	bz	i2l4875
 18950                           
 18951                           ; BSR set to: 0
 18952                           ;FLASH.c: 184: {
 18953                           ;FLASH.c: 185: return 0;
 18954  00127C  0C00               	retlw	0
 18955  00127E                     i2l4875:
 18956                           
 18957                           ; BSR set to: 0
 18958                           
 18959                           ; BSR set to: 0
 18960                           ;FLASH.c: 186: }
 18961                           ;FLASH.c: 187: return 1;
 18962  00127E  0C01               	retlw	1	;funcret
 18963  001280                     __end_ofi2_FSH_VerifyWriteIntArray:
 18964                           	opt stack 0
 18965                           tblptru	equ	0xFF8
 18966                           tblptrh	equ	0xFF7
 18967                           tblptrl	equ	0xFF6
 18968                           tablat	equ	0xFF5
 18969                           prodh	equ	0xFF4
 18970                           prodl	equ	0xFF3
 18971                           intcon	equ	0xFF2
 18972                           intcon2	equ	0xFF1
 18973                           intcon3	equ	0xFF0
 18974                           postinc0	equ	0xFEE
 18975                           wreg	equ	0xFE8
 18976                           postdec1	equ	0xFE5
 18977                           fsr1l	equ	0xFE1
 18978                           bsr	equ	0xFE0
 18979                           indf2	equ	0xFDF
 18980                           postinc2	equ	0xFDE
 18981                           postdec2	equ	0xFDD
 18982                           plusw2	equ	0xFDB
 18983                           fsr2h	equ	0xFDA
 18984                           fsr2l	equ	0xFD9
 18985                           status	equ	0xFD8
 18986                           
 18987 ;; *************** function i2_FSH_EraseBlock *****************
 18988 ;; Defined at:
 18989 ;;		line 72 in file "FLASH.c"
 18990 ;; Parameters:    Size  Location     Type
 18991 ;;  Address         4    4[BANK0 ] unsigned long 
 18992 ;; Auto vars:     Size  Location     Type
 18993 ;;  FSH_EraseBlo    1   10[BANK0 ] unsigned char 
 18994 ;;  FSH_EraseBlo    1    9[BANK0 ] unsigned char 
 18995 ;;  FSH_EraseBlo    1    8[BANK0 ] unsigned char 
 18996 ;; Return value:  Size  Location     Type
 18997 ;;		None               void
 18998 ;; Registers used:
 18999 ;;		wreg, status,2, status,0, cstack
 19000 ;; Tracked objects:
 19001 ;;		On entry : F/0
 19002 ;;		On exit  : F/0
 19003 ;;		Unchanged: 0/0
 19004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 19005 ;;      Params:         0       4       0       0       0
 19006 ;;      Locals:         0       3       0       0       0
 19007 ;;      Temps:          0       0       0       0       0
 19008 ;;      Totals:         0       7       0       0       0
 19009 ;;Total ram usage:        7 bytes
 19010 ;; Hardware stack levels used:    1
 19011 ;; Hardware stack levels required when called:    1
 19012 ;; This function calls:
 19013 ;;		i2_FSH_AddressToBlock
 19014 ;; This function is called by:
 19015 ;;		i2_FSH_Write_IR_RF
 19016 ;; This function uses a non-reentrant model
 19017 ;;
 19018                           
 19019                           	psect	text121
 19020  0010D8                     __ptext121:
 19021                           	opt stack 0
 19022  0010D8                     i2_FSH_EraseBlock:
 19023                           	opt stack 14
 19024                           
 19025                           ; BSR set to: 0
 19026                           ;FLASH.c: 74: unsigned char highint = INTCONbits.GIE;
 19027                           
 19028                           ; BSR set to: 0
 19029                           ;incstack = 0
 19030  0010D8  0E00               	movlw	0
 19031  0010DA  BEF2               	btfsc	intcon,7,c	;volatile
 19032  0010DC  0E01               	movlw	1
 19033  0010DE  6F88               	movwf	i2FSH_EraseBlock@highint& (0+255),b
 19034                           
 19035                           ;FLASH.c: 75: unsigned char lowint = INTCONbits.PEIE;
 19036  0010E0  0E00               	movlw	0
 19037  0010E2  BCF2               	btfsc	intcon,6,c	;volatile
 19038  0010E4  0E01               	movlw	1
 19039  0010E6  6F89               	movwf	i2FSH_EraseBlock@lowint& (0+255),b
 19040                           
 19041                           ; BSR set to: 0
 19042                           ;FLASH.c: 76: unsigned char WriteTries;
 19043                           ;FLASH.c: 78: if(Address < 0x2400 || Address >= 0x2800)
 19044  0010E8  5187               	movf	(i2FSH_EraseBlock@Address+3)& (0+255),w,b
 19045  0010EA  1186               	iorwf	(i2FSH_EraseBlock@Address+2)& (0+255),w,b
 19046  0010EC  E103               	bnz	i2u439_40
 19047  0010EE  0E24               	movlw	36
 19048  0010F0  5D85               	subwf	(i2FSH_EraseBlock@Address+1)& (0+255),w,b
 19049  0010F2  E306               	bnc	i2l946
 19050  0010F4                     i2u439_40:
 19051                           
 19052                           ; BSR set to: 0
 19053  0010F4  5187               	movf	(i2FSH_EraseBlock@Address+3)& (0+255),w,b
 19054  0010F6  1186               	iorwf	(i2FSH_EraseBlock@Address+2)& (0+255),w,b
 19055  0010F8  E103               	bnz	i2u440_40
 19056  0010FA  0E28               	movlw	40
 19057  0010FC  5D85               	subwf	(i2FSH_EraseBlock@Address+1)& (0+255),w,b
 19058  0010FE  E301               	bnc	i2l944
 19059  001100                     i2u440_40:
 19060  001100                     i2l946:
 19061                           
 19062                           ; BSR set to: 0
 19063  001100  00FF               	reset		;# 
 19064  001102                     i2l944:
 19065                           
 19066                           ;FLASH.c: 82: }
 19067                           ;FLASH.c: 84: INTCONbits.GIE = 0;
 19068  001102  9EF2               	bcf	intcon,7,c	;volatile
 19069                           
 19070                           ;FLASH.c: 85: INTCONbits.PEIE = 0;
 19071  001104  9CF2               	bcf	intcon,6,c	;volatile
 19072  001106                     i2l4809:
 19073                           
 19074                           ;FLASH.c: 88: FSH_AddressToBlock(Address);
 19075  001106  C084  F080         	movff	i2FSH_EraseBlock@Address,i2FSH_AddressToBlock@Address
 19076  00110A  C085  F081         	movff	i2FSH_EraseBlock@Address+1,i2FSH_AddressToBlock@Address+1
 19077  00110E  C086  F082         	movff	i2FSH_EraseBlock@Address+2,i2FSH_AddressToBlock@Address+2
 19078  001112  C087  F083         	movff	i2FSH_EraseBlock@Address+3,i2FSH_AddressToBlock@Address+3
 19079  001116  EC58  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 19080                           
 19081                           ; BSR set to: 0
 19082                           ;FLASH.c: 90: WriteTries = 1;
 19083  00111A  0E01               	movlw	1
 19084  00111C  6F8A               	movwf	i2FSH_EraseBlock@WriteTries& (0+255),b
 19085  00111E  84A6               	bsf	4006,2,c	;# 
 19086  001120  88A6               	bsf	4006,4,c	;# 
 19087  001122  9EF2               	bcf	intcon,7,c	;# 
 19088  001124  0E55               	movlw	85	;# 
 19089  001126  6EA7               	movwf	4007,c	;# 
 19090  001128  0EAA               	movlw	170	;# 
 19091  00112A  6EA7               	movwf	4007,c	;# 
 19092  00112C  82A6               	bsf	4006,1,c	;# 
 19093                           
 19094                           ;FLASH.c: 101: if(EECON1bits.WRERR)
 19095  00112E  A6A6               	btfss	4006,3,c	;volatile
 19096  001130  D006               	goto	i2l4821
 19097                           
 19098                           ;FLASH.c: 102: {
 19099                           ;FLASH.c: 103: WriteTries++;
 19100  001132  0100               	movlb	0	; () banked
 19101  001134  2B8A               	incf	i2FSH_EraseBlock@WriteTries& (0+255),f,b
 19102                           
 19103                           ; BSR set to: 0
 19104                           ;FLASH.c: 104: if(WriteTries < 10)
 19105  001136  0E0A               	movlw	10
 19106  001138  618A               	cpfslt	i2FSH_EraseBlock@WriteTries& (0+255),b
 19107  00113A  D001               	goto	i2l4821
 19108  00113C  D7E4               	goto	i2l4809
 19109  00113E                     i2l4821:
 19110                           
 19111                           ;FLASH.c: 107: }
 19112                           ;FLASH.c: 108: }
 19113                           ;FLASH.c: 110: if(highint)
 19114  00113E  0100               	movlb	0	; () banked
 19115  001140  5188               	movf	i2FSH_EraseBlock@highint& (0+255),w,b
 19116  001142  E001               	bz	i2l4825
 19117                           
 19118                           ; BSR set to: 0
 19119                           ;FLASH.c: 111: {
 19120                           ;FLASH.c: 112: INTCONbits.GIE = 1;
 19121  001144  8EF2               	bsf	intcon,7,c	;volatile
 19122  001146                     i2l4825:
 19123                           
 19124                           ; BSR set to: 0
 19125                           ;FLASH.c: 113: }
 19126                           ;FLASH.c: 114: if(lowint)
 19127  001146  5189               	movf	i2FSH_EraseBlock@lowint& (0+255),w,b
 19128  001148  A4D8               	btfss	status,2,c
 19129                           
 19130                           ; BSR set to: 0
 19131                           ;FLASH.c: 115: {
 19132                           ;FLASH.c: 116: INTCONbits.PEIE = 1;
 19133  00114A  8CF2               	bsf	intcon,6,c	;volatile
 19134                           
 19135                           ; BSR set to: 0
 19136  00114C  0012               	return		;funcret
 19137  00114E                     __end_ofi2_FSH_EraseBlock:
 19138                           	opt stack 0
 19139                           tblptru	equ	0xFF8
 19140                           tblptrh	equ	0xFF7
 19141                           tblptrl	equ	0xFF6
 19142                           tablat	equ	0xFF5
 19143                           prodh	equ	0xFF4
 19144                           prodl	equ	0xFF3
 19145                           intcon	equ	0xFF2
 19146                           intcon2	equ	0xFF1
 19147                           intcon3	equ	0xFF0
 19148                           postinc0	equ	0xFEE
 19149                           wreg	equ	0xFE8
 19150                           postdec1	equ	0xFE5
 19151                           fsr1l	equ	0xFE1
 19152                           bsr	equ	0xFE0
 19153                           indf2	equ	0xFDF
 19154                           postinc2	equ	0xFDE
 19155                           postdec2	equ	0xFDD
 19156                           plusw2	equ	0xFDB
 19157                           fsr2h	equ	0xFDA
 19158                           fsr2l	equ	0xFD9
 19159                           status	equ	0xFD8
 19160                           
 19161 ;; *************** function i2_FSH_AddressToBlock *****************
 19162 ;; Defined at:
 19163 ;;		line 536 in file "FLASH.c"
 19164 ;; Parameters:    Size  Location     Type
 19165 ;;  Address         4    0[BANK0 ] unsigned long 
 19166 ;; Auto vars:     Size  Location     Type
 19167 ;;		None
 19168 ;; Return value:  Size  Location     Type
 19169 ;;		None               void
 19170 ;; Registers used:
 19171 ;;		wreg, status,2, status,0
 19172 ;; Tracked objects:
 19173 ;;		On entry : 0/0
 19174 ;;		On exit  : F/0
 19175 ;;		Unchanged: 0/0
 19176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 19177 ;;      Params:         0       4       0       0       0
 19178 ;;      Locals:         0       0       0       0       0
 19179 ;;      Temps:          0       0       0       0       0
 19180 ;;      Totals:         0       4       0       0       0
 19181 ;;Total ram usage:        4 bytes
 19182 ;; Hardware stack levels used:    1
 19183 ;; This function calls:
 19184 ;;		Nothing
 19185 ;; This function is called by:
 19186 ;;		i2_FSH_EraseBlock
 19187 ;;		i2_FSH_WriteIntArray
 19188 ;;		i2_FSH_Write_IR_RF
 19189 ;; This function uses a non-reentrant model
 19190 ;;
 19191                           
 19192                           	psect	text122
 19193  0016B0                     __ptext122:
 19194                           	opt stack 0
 19195  0016B0                     i2_FSH_AddressToBlock:
 19196                           	opt stack 14
 19197                           
 19198                           ;FLASH.c: 538: if(Address > 0x3600)
 19199                           
 19200                           ; BSR set to: 0
 19201                           ;incstack = 0
 19202  0016B0  0100               	movlb	0	; () banked
 19203  0016B2  5183               	movf	(i2FSH_AddressToBlock@Address+3)& (0+255),w,b
 19204  0016B4  1182               	iorwf	(i2FSH_AddressToBlock@Address+2)& (0+255),w,b
 19205  0016B6  E104               	bnz	i2u373_40
 19206  0016B8  0580               	decf	i2FSH_AddressToBlock@Address& (0+255),w,b
 19207  0016BA  0E36               	movlw	54
 19208  0016BC  5981               	subwfb	(i2FSH_AddressToBlock@Address+1)& (0+255),w,b
 19209  0016BE  E305               	bnc	i2l4373
 19210  0016C0                     i2u373_40:
 19211                           
 19212                           ; BSR set to: 0
 19213                           ;FLASH.c: 539: {
 19214                           ;FLASH.c: 540: Address = 0x3600;
 19215  0016C0  6B80               	clrf	i2FSH_AddressToBlock@Address& (0+255),b
 19216  0016C2  0E36               	movlw	54
 19217  0016C4  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 19218  0016C6  6B82               	clrf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 19219  0016C8  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 19220  0016CA                     i2l4373:
 19221                           
 19222                           ; BSR set to: 0
 19223                           ;FLASH.c: 541: }
 19224                           ;FLASH.c: 542: TBLPTRU = (Address & 0x002F0000) >> 16;
 19225  0016CA  5182               	movf	(i2FSH_AddressToBlock@Address+2)& (0+255),w,b
 19226  0016CC  0B2F               	andlw	47
 19227  0016CE  6EF8               	movwf	tblptru,c	;volatile
 19228                           
 19229                           ; BSR set to: 0
 19230                           ;FLASH.c: 543: TBLPTRH = (Address & 0x0000FF00) >> 8;
 19231  0016D0  C081  FFF7         	movff	i2FSH_AddressToBlock@Address+1,tblptrh	;volatile
 19232                           
 19233                           ; BSR set to: 0
 19234                           ;FLASH.c: 544: TBLPTRL = (Address & 0x000000FF);
 19235  0016D4  C080  FFF6         	movff	i2FSH_AddressToBlock@Address,tblptrl	;volatile
 19236                           
 19237                           ; BSR set to: 0
 19238  0016D8  0012               	return		;funcret
 19239  0016DA                     __end_ofi2_FSH_AddressToBlock:
 19240                           	opt stack 0
 19241                           tblptru	equ	0xFF8
 19242                           tblptrh	equ	0xFF7
 19243                           tblptrl	equ	0xFF6
 19244                           tablat	equ	0xFF5
 19245                           prodh	equ	0xFF4
 19246                           prodl	equ	0xFF3
 19247                           intcon	equ	0xFF2
 19248                           intcon2	equ	0xFF1
 19249                           intcon3	equ	0xFF0
 19250                           postinc0	equ	0xFEE
 19251                           wreg	equ	0xFE8
 19252                           postdec1	equ	0xFE5
 19253                           fsr1l	equ	0xFE1
 19254                           bsr	equ	0xFE0
 19255                           indf2	equ	0xFDF
 19256                           postinc2	equ	0xFDE
 19257                           postdec2	equ	0xFDD
 19258                           plusw2	equ	0xFDB
 19259                           fsr2h	equ	0xFDA
 19260                           fsr2l	equ	0xFD9
 19261                           status	equ	0xFD8
 19262                           
 19263                           	psect	mediumconst
 19264  002800                     __pmediumconst:
 19265                           	opt stack 0
 19266  002800  00                 	db	0
 19267  002801  00                 	db	0	; dummy byte at the end
 19268  0000                     tblptru	equ	0xFF8
 19269                           tblptrh	equ	0xFF7
 19270                           tblptrl	equ	0xFF6
 19271                           tablat	equ	0xFF5
 19272                           prodh	equ	0xFF4
 19273                           prodl	equ	0xFF3
 19274                           intcon	equ	0xFF2
 19275                           intcon2	equ	0xFF1
 19276                           intcon3	equ	0xFF0
 19277                           postinc0	equ	0xFEE
 19278                           wreg	equ	0xFE8
 19279                           postdec1	equ	0xFE5
 19280                           fsr1l	equ	0xFE1
 19281                           bsr	equ	0xFE0
 19282                           indf2	equ	0xFDF
 19283                           postinc2	equ	0xFDE
 19284                           postdec2	equ	0xFDD
 19285                           plusw2	equ	0xFDB
 19286                           fsr2h	equ	0xFDA
 19287                           fsr2l	equ	0xFD9
 19288                           status	equ	0xFD8
 19289                           tblptru	equ	0xFF8
 19290                           tblptrh	equ	0xFF7
 19291                           tblptrl	equ	0xFF6
 19292                           tablat	equ	0xFF5
 19293                           prodh	equ	0xFF4
 19294                           prodl	equ	0xFF3
 19295                           intcon	equ	0xFF2
 19296                           intcon2	equ	0xFF1
 19297                           intcon3	equ	0xFF0
 19298                           postinc0	equ	0xFEE
 19299                           wreg	equ	0xFE8
 19300                           postdec1	equ	0xFE5
 19301                           fsr1l	equ	0xFE1
 19302                           bsr	equ	0xFE0
 19303                           indf2	equ	0xFDF
 19304                           postinc2	equ	0xFDE
 19305                           postdec2	equ	0xFDD
 19306                           plusw2	equ	0xFDB
 19307                           fsr2h	equ	0xFDA
 19308                           fsr2l	equ	0xFD9
 19309                           status	equ	0xFD8
 19310                           
 19311                           	psect	param0
 19312  0000                     tblptru	equ	0xFF8
 19313                           tblptrh	equ	0xFF7
 19314                           tblptrl	equ	0xFF6
 19315                           tablat	equ	0xFF5
 19316                           prodh	equ	0xFF4
 19317                           prodl	equ	0xFF3
 19318                           intcon	equ	0xFF2
 19319                           intcon2	equ	0xFF1
 19320                           intcon3	equ	0xFF0
 19321                           postinc0	equ	0xFEE
 19322                           wreg	equ	0xFE8
 19323                           postdec1	equ	0xFE5
 19324                           fsr1l	equ	0xFE1
 19325                           bsr	equ	0xFE0
 19326                           indf2	equ	0xFDF
 19327                           postinc2	equ	0xFDE
 19328                           postdec2	equ	0xFDD
 19329                           plusw2	equ	0xFDB
 19330                           fsr2h	equ	0xFDA
 19331                           fsr2l	equ	0xFD9
 19332                           status	equ	0xFD8
 19333                           
 19334                           	psect	temp
 19335  00006E                     btemp:
 19336                           	opt stack 0
 19337  00006E                     	ds	1
 19338  0000                     int$flags	set	btemp
 19339                           tblptru	equ	0xFF8
 19340                           tblptrh	equ	0xFF7
 19341                           tblptrl	equ	0xFF6
 19342                           tablat	equ	0xFF5
 19343                           prodh	equ	0xFF4
 19344                           prodl	equ	0xFF3
 19345                           intcon	equ	0xFF2
 19346                           intcon2	equ	0xFF1
 19347                           intcon3	equ	0xFF0
 19348                           postinc0	equ	0xFEE
 19349                           wreg	equ	0xFE8
 19350                           postdec1	equ	0xFE5
 19351                           fsr1l	equ	0xFE1
 19352                           bsr	equ	0xFE0
 19353                           indf2	equ	0xFDF
 19354                           postinc2	equ	0xFDE
 19355                           postdec2	equ	0xFDD
 19356                           plusw2	equ	0xFDB
 19357                           fsr2h	equ	0xFDA
 19358                           fsr2l	equ	0xFD9
 19359                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         548
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     89     109
    BANK0           128     64      74
    BANK1           256     34     175
    BANK2           256      0     192
    BANK3           256      0     192

Pointer List with Targets:

    FSH_Write_IR_RF@RAMaddress	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), 

    FSH_VerifyWriteIntArray@Array	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), RF_DataTiming(BANK1[128]), 

    FSH_VerifyWriteIntArray@ConstArray	PTR const unsigned int  size(3) Largest target is 192
		 -> IR_SavedTiming1(CODE[192]), IR_SavedTiming0(CODE[192]), RF_SavedTiming(CODE[128]), 

    FSH_WriteIntArray@Array	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), RF_DataTiming(BANK1[128]), 

    FSH_WriteIntArray@ConstArray	PTR const unsigned int  size(3) Largest target is 192
		 -> IR_SavedTiming1(CODE[192]), IR_SavedTiming0(CODE[192]), RF_SavedTiming(CODE[128]), 

    MSC_BufferCopyIntConst@from	PTR const unsigned int  size(3) Largest target is 192
		 -> IR_SavedTiming1(CODE[192]), IR_SavedTiming0(CODE[192]), RF_SavedTiming(CODE[128]), 

    MSC_BufferCopyIntConst@to	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), RF_DataTiming(BANK1[128]), 

    MSC_CleanBufferInt@data	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), RF_DataTiming(BANK1[128]), 

    IR_CalculateCodesize@Code	PTR const unsigned int  size(3) Largest target is 192
		 -> IR_SavedTiming1(CODE[192]), IR_SavedTiming0(CODE[192]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    _low_isr->_IR_CheckCode
    _TMR_Timer2Start->_TMR_ResetTimer2
    _TMR_ResetTimer2->i1_TMR_Timer2
    _TMR_Timer1Start->i1_TMR_ResetTimer1
    i1_TMR_ResetTimer1->i1_TMR_Timer1
    _RF_Disable->i1_RF_DataInt
    _RF_Disable->i1_TMR_Timer0
    _RF_Disable->i1_TMR_Timer0Int
    _IR_CheckCode->i1_IR_LoadCode
    i1_IR_LoadCode->i1___ftmul
    i1___ftge->i1___lwtoft
    _FSH_Write_IR_RF->_MSC_BufferCopyIntConst
    _MSC_BufferCopyIntConst->i1_MSC_CleanBufferInt
    i1_RF_Enable->i1_RF_DataInt
    i1_RF_Enable->i1_TMR_Timer0Int
    _FSH_WriteIntArray->_FSH_AddressToBlock
    _FSH_EraseBlock->_FSH_AddressToBlock
    _ADC_CalculateVoltage->i1___ftmul
    i1___lwtoft->i1___ftpack
    i1___ftmul->___ftdiv
    ___ftdiv->i1___lwtoft

Critical Paths under _main in BANK0

    _main->_MSC_BlinkLED
    _SYS_EnableInt->_BUT_IR_PinChangeInt
    _SYS_EnableInt->_RF_DataInt
    _RF_LoadCode->___lwtoft
    _RF_Enable->_RF_DataInt
    _RF_Enable->_TMR_Timer0Int
    _MTR_Rotate->_MSC_DelayMS
    _MSC_BlinkLED->_MSC_DelayMS
    _MSC_DelayMS->_MSC_DelayNOP
    _InitTimer2->_TMR_Timer2
    _InitTimer2->_TMR_Timer2Int
    _InitTimer1->_TMR_Timer1Function
    _TMR_Timer1Function->_TMR_ResetTimer1
    _TMR_ResetTimer1->_TMR_Timer1
    _InitTimer0->_TMR_ResetTimer0
    _TMR_ResetTimer0->_TMR_Timer0
    _InitRF->_MSC_CleanBufferInt
    _InitLDO->_LDO_Pass
    _InitIR->_MSC_CleanBufferInt
    _InitButton->_BUT_IR_PinChangeInt
    _InitButton->_BUT_ReadButton
    _InitADC->_ADC_ConversionInt
    _InitADC->_ADC_Module
    _IR_LoadCode->___lwtoft
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft

Critical Paths under _high_isr in BANK0

    _high_isr->_RF_CheckCode
    i2_RF_Disable->i2_RF_DataInt
    i2_RF_Disable->i2_TMR_Timer0
    i2_RF_Disable->i2_TMR_Timer0Int
    _TMR_Timer0Start->i2_TMR_ResetTimer0
    i2_TMR_ResetTimer0->i2_TMR_Timer0
    _RF_CheckCode->i2_FSH_Write_IR_RF
    i2_RF_LoadCode->i2___ftmul
    i2___lwtoft->i2___ftpack
    i2___ftmul->i2___lwtoft
    i2___ftge->i2___lwtoft
    i2_FSH_Write_IR_RF->i2_MSC_BufferCopyIntConst
    i2_MSC_BufferCopyIntConst->i2_MSC_CleanBufferInt
    i2_RF_Enable->i2_RF_DataInt
    i2_RF_Enable->i2_TMR_Timer0Int
    i2_FSH_WriteIntArray->i2_FSH_AddressToBlock
    i2_FSH_EraseBlock->i2_FSH_AddressToBlock

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_IR_LoadCode
    _RF_LoadCode->___ftmul
    _MTR_Rotate->_MSC_DelayMS
    _MSC_BlinkLED->_MSC_DelayMS
    _IR_LoadCode->___ftmul

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   29053
                          _ADC_Start
                        _IR_LoadCode
                           _Init_App
                        _Init_System
                       _MSC_BlinkLED
                        _MSC_DelayMS
                         _MTR_Rotate
                          _RF_Enable
                        _RF_LoadCode
                  _SYS_ActivityTimer
            _SYS_ConfigureOscillator
                     _SYS_DisableInt
                      _SYS_EnableInt
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _SYS_DisableInt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYS_ConfigureOscillator                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYS_ActivityTimer                                    0     0      0      44
             _SYS_ActivityTimerReset
                      _SYS_EnableInt
                          _SYS_Sleep
 ---------------------------------------------------------------------------------
 (2) _SYS_Sleep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYS_EnableInt                                        0     0      0      44
                _BUT_IR_PinChangeInt
                         _RF_DataInt
 ---------------------------------------------------------------------------------
 (2) _SYS_ActivityTimerReset                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_LoadCode                                          6     6      0   10982
                                             14 BANK1      6     6      0
               _RF_CalculateCodesize
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _RF_CalculateCodesize                                 1     1      0      90
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _RF_Enable                                            0     0      0      44
                         _RF_DataInt
                      _TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (1) _MTR_Rotate                                           0     0      0     719
                        _MSC_DelayMS
                            _MTR_IN1
                            _MTR_IN2
 ---------------------------------------------------------------------------------
 (2) _MTR_IN2                                              1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTR_IN1                                              1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MSC_BlinkLED                                         8     4      4    1544
                                             62 BANK0      2     2      0
                                              4 BANK1      6     2      4
                        _MSC_DelayMS
 ---------------------------------------------------------------------------------
 (2) _MSC_DelayMS                                          9     5      4     675
                                             57 BANK0      5     1      4
                                              0 BANK1      4     4      0
                       _MSC_DelayNOP
 ---------------------------------------------------------------------------------
 (3) _MSC_DelayNOP                                         4     2      2     145
                                             53 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0    1876
                     _BUT_ReadButton
                    _IR_ReadReceiver
                            _InitADC
                         _InitButton
                          _InitFlash
                             _InitIR
                            _InitLDO
                          _InitMOTOR
                             _InitRF
                         _InitTimers
 ---------------------------------------------------------------------------------
 (2) _InitTimers                                           0     0      0     333
                         _InitTimer0
                         _InitTimer1
                         _InitTimer2
 ---------------------------------------------------------------------------------
 (3) _InitTimer2                                           0     0      0      44
                         _TMR_Timer2
                      _TMR_Timer2Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2Int                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer1                                           0     0      0     200
                    _TMR_ResetTimer1
                         _TMR_Timer1
                 _TMR_Timer1Function
                      _TMR_Timer1Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer1Int                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer1Function                                   1     1      0     111
                                             55 BANK0      1     1      0
                    _TMR_ResetTimer1
                         _TMR_Timer1
                      _TMR_Timer1Osc
 ---------------------------------------------------------------------------------
 (5) _TMR_Timer1Osc                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _TMR_ResetTimer1                                      1     1      0      45
                                             54 BANK0      1     1      0
                         _TMR_Timer1
 ---------------------------------------------------------------------------------
 (5) _TMR_Timer1                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer0                                           0     0      0      89
                    _TMR_ResetTimer0
                         _TMR_Timer0
                      _TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (2) _TMR_Timer0Int                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_ResetTimer0                                      1     1      0      45
                                             54 BANK0      1     1      0
                         _TMR_Timer0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer0                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitRF                                               0     0      0     759
                 _MSC_CleanBufferInt
                         _RF_DataInt
                        _RF_Receiver
                    _RF_SetBandwidth
                      _RF_SetSquelch
 ---------------------------------------------------------------------------------
 (3) _RF_SetSquelch                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_SetBandwidth                                      1     1      0      66
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_Receiver                                          1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RF_DataInt                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitMOTOR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitLDO                                              0     0      0      22
                           _LDO_Pass
 ---------------------------------------------------------------------------------
 (3) _LDO_Pass                                             1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitIR                                               0     0      0     627
                 _MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (3) _MSC_CleanBufferInt                                   6     2      4     627
                                             53 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _InitFlash                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitButton                                           0     0      0      45
                _BUT_IR_PinChangeInt
                     _BUT_ReadButton
 ---------------------------------------------------------------------------------
 (3) _BUT_ReadButton                                       1     1      0      23
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BUT_IR_PinChangeInt                                  1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitADC                                              0     0      0      44
                  _ADC_ChangeChannel
                  _ADC_ConversionInt
                         _ADC_Module
 ---------------------------------------------------------------------------------
 (3) _ADC_Module                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionInt                                    1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ChangeChannel                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IR_ReadReceiver                                      1     1      0      23
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_App                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_LoadCode                                         20    20      0   11509
                                             14 BANK1     20    20      0
               _IR_CalculateCodesize
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3271
                                             61 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     679
                                             53 BANK0      9     5      4
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5184
                                              0 BANK1     14     8      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1953
                                             53 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6    1616
                                             53 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _IR_CalculateCodesize                                 7     4      3     240
                                             53 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (1) _ADC_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                             15    15      0   19896
                                             75 COMRAM    14    14      0
               _ADC_CalculateVoltage
                       _IR_CheckCode
                       _IR_ResetData
                         _RF_Disable
                    _TMR_Timer1Start
                   _TMR_Timer1Status
                    _TMR_Timer2Start
              i1_BUT_IR_PinChangeInt
                   i1_BUT_ReadButton
                  i1_IR_ReadReceiver
                       i1_RF_DataInt
           i1_SYS_ActivityTimerReset
                  i1_TMR_ResetTimer1
                       i1_TMR_Timer1
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) i1_SYS_ActivityTimerReset                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_IR_ReadReceiver                                    1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_BUT_ReadButton                                     1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_BUT_IR_PinChangeInt                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer2Start                                      2     0      2     345
                                              2 COMRAM     2     0      2
                    _TMR_ResetTimer2
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (9) _TMR_ResetTimer2                                      1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) i1_TMR_Timer2                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer1Status                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer1Start                                      0     0      0      67
                  i1_TMR_ResetTimer1
                       i1_TMR_Timer1
 ---------------------------------------------------------------------------------
 (8) i1_TMR_ResetTimer1                                    1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer1
 ---------------------------------------------------------------------------------
 (8) i1_TMR_Timer1                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _RF_Disable                                           0     0      0      66
                       i1_RF_DataInt
                       i1_TMR_Timer0
                    i1_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (9) i1_TMR_Timer0                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _IR_CheckCode                                        15    15      0   15021
                                             60 COMRAM    15    15      0
                    _FSH_Write_IR_RF
                      i1_IR_LoadCode
                           i1___ftge
                          i1___ftmul
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (9) i1_IR_LoadCode                                       20    20      0    4241
                                             40 COMRAM    20    20      0
             i1_IR_CalculateCodesize
                           i1___ftge
                          i1___ftmul
                          i1___fttol
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (10) i1___fttol                                          15    11      4     304
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (9) i1___ftge                                             9     3      6     552
                                             11 COMRAM     9     3      6
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i1_IR_CalculateCodesize                              7     4      3     164
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (9) _FSH_Write_IR_RF                                     17    17      0    6385
                                             17 COMRAM    17    17      0
                 _FSH_AddressToBlock
                     _FSH_EraseBlock
            _FSH_VerifyWriteIntArray
                  _FSH_WriteIntArray
                       _IR_ResetData
             _MSC_BufferCopyIntConst
                       _RF_ResetData
 ---------------------------------------------------------------------------------
 (10) _RF_ResetData                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _MSC_BufferCopyIntConst                             11     2      9    1650
                                              6 COMRAM    11     2      9
               i1_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (11) i1_MSC_CleanBufferInt                                6     2      4     143
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _IR_ResetData                                         0     0      0      44
                        i1_RF_Enable
 ---------------------------------------------------------------------------------
 (9) i1_RF_Enable                                          0     0      0      44
                       i1_RF_DataInt
                    i1_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (9) i1_TMR_Timer0Int                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_RF_DataInt                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _FSH_WriteIntArray                                  12     7      5    1639
                                              4 COMRAM    12     7      5
                 _FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (10) _FSH_VerifyWriteIntArray                            12     7      5    1205
                                              0 COMRAM    12     7      5
 ---------------------------------------------------------------------------------
 (10) _FSH_EraseBlock                                      7     3      4     613
                                              4 COMRAM     7     3      4
                 _FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (11) _FSH_AddressToBlock                                  4     0      4     413
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (8) _ADC_CalculateVoltage                                 5     5      0    4038
                                             40 COMRAM     5     5      0
                            ___ftdiv
                i1_ADC_ChangeChannel
                          i1___ftmul
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (9) i1___lwtoft                                           3     0      3    1059
                                              8 COMRAM     3     0      3
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (9) i1___ftmul                                           15     9      6    1814
                                             26 COMRAM    14     8      6
                            ___ftdiv (ARG)
                         i1___ftpack
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) i1_ADC_ChangeChannel                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    1105
                                             11 COMRAM    15     9      6
                         i1___ftpack
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _high_isr                                           10    10      0    9078
                                             43 BANK0     10    10      0
                       _RF_CheckCode
                    _TMR_Timer0Start
                   _TMR_Timer0Status
                       i2_RF_Disable
                     i2_RF_ResetData
           i2_SYS_ActivityTimerReset
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_SYS_ActivityTimerReset                            0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_RF_Disable                                        0     0      0      66
                       i2_RF_DataInt
                       i2_TMR_Timer0
                    i2_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (14) _TMR_Timer0Status                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR_Timer0Start                                     0     0      0      67
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_TMR_ResetTimer0                                   1     1      0      45
                                              1 BANK0      1     1      0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_TMR_Timer0                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (14) _RF_CheckCode                                        9     9      0    8765
                                             34 BANK0      9     9      0
                  i2_FSH_Write_IR_RF
                      i2_RF_LoadCode
                           i2___ftge
                          i2___ftmul
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (15) i2_RF_LoadCode                                       6     6      0    2561
                                             25 BANK0      6     6      0
             i2_RF_CalculateCodesize
                           i2___ftge
                          i2___ftmul
                          i2___fttol
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (15) i2___lwtoft                                          3     0      3     617
                                              8 BANK0      3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (16) i2___fttol                                          15    11      4     304
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (15) i2___ftmul                                          15     9      6    1112
                                             11 BANK0     14     8      6
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (16) i2___ftpack                                          8     3      5     387
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (15) i2___ftge                                            9     3      6     344
                                             11 BANK0      9     3      6
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (16) i2_RF_CalculateCodesize                              1     1      0      90
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (15) i2_FSH_Write_IR_RF                                  17    17      0    3789
                                             17 BANK0     17    17      0
               i2_FSH_AddressToBlock
                   i2_FSH_EraseBlock
          i2_FSH_VerifyWriteIntArray
                i2_FSH_WriteIntArray
                     i2_IR_ResetData
           i2_MSC_BufferCopyIntConst
                     i2_RF_ResetData
 ---------------------------------------------------------------------------------
 (14) i2_RF_ResetData                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i2_MSC_BufferCopyIntConst                           11     2      9     890
                                              6 BANK0     11     2      9
               i2_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (17) i2_MSC_CleanBufferInt                                6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (16) i2_IR_ResetData                                      0     0      0      44
                        i2_RF_Enable
 ---------------------------------------------------------------------------------
 (17) i2_RF_Enable                                         0     0      0      44
                       i2_RF_DataInt
                    i2_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (15) i2_TMR_Timer0Int                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (15) i2_RF_DataInt                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (16) i2_FSH_WriteIntArray                                12     7      5     837
                                              4 BANK0     12     7      5
               i2_FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (16) i2_FSH_VerifyWriteIntArray                          12     7      5     597
                                              0 BANK0     12     7      5
 ---------------------------------------------------------------------------------
 (16) i2_FSH_EraseBlock                                    7     3      4     381
                                              4 BANK0      7     3      4
               i2_FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (17) i2_FSH_AddressToBlock                                4     0      4     219
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Start
   _IR_LoadCode
     _IR_CalculateCodesize
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lwtoft
       ___ftpack
   _Init_App
   _Init_System
     _BUT_ReadButton
     _IR_ReadReceiver
     _InitADC
       _ADC_ChangeChannel
       _ADC_ConversionInt
       _ADC_Module
     _InitButton
       _BUT_IR_PinChangeInt
       _BUT_ReadButton
     _InitFlash
     _InitIR
       _MSC_CleanBufferInt
     _InitLDO
       _LDO_Pass
     _InitMOTOR
     _InitRF
       _MSC_CleanBufferInt
       _RF_DataInt
       _RF_Receiver
       _RF_SetBandwidth
       _RF_SetSquelch
     _InitTimers
       _InitTimer0
         _TMR_ResetTimer0
           _TMR_Timer0
         _TMR_Timer0
         _TMR_Timer0Int
       _InitTimer1
         _TMR_ResetTimer1
           _TMR_Timer1
         _TMR_Timer1
         _TMR_Timer1Function
           _TMR_ResetTimer1
             _TMR_Timer1
           _TMR_Timer1
           _TMR_Timer1Osc
         _TMR_Timer1Int
       _InitTimer2
         _TMR_Timer2
         _TMR_Timer2Int
   _MSC_BlinkLED
     _MSC_DelayMS
       _MSC_DelayNOP
   _MSC_DelayMS
     _MSC_DelayNOP
   _MTR_Rotate
     _MSC_DelayMS
       _MSC_DelayNOP
     _MTR_IN1
     _MTR_IN2
   _RF_Enable
     _RF_DataInt
     _TMR_Timer0Int
   _RF_LoadCode
     _RF_CalculateCodesize
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lwtoft
       ___ftpack
   _SYS_ActivityTimer
     _SYS_ActivityTimerReset
     _SYS_EnableInt
       _BUT_IR_PinChangeInt
       _RF_DataInt
     _SYS_Sleep
   _SYS_ConfigureOscillator
   _SYS_DisableInt
   _SYS_EnableInt
     _BUT_IR_PinChangeInt
     _RF_DataInt
   ___ftge

 _low_isr (ROOT)
   _ADC_CalculateVoltage
     ___ftdiv
       i1___ftpack
       i1___lwtoft (ARG)
         i1___ftpack
     i1_ADC_ChangeChannel
     i1___ftmul
       ___ftdiv (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftpack (ARG)
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack
   _IR_CheckCode
     _FSH_Write_IR_RF
       _FSH_AddressToBlock
       _FSH_EraseBlock
         _FSH_AddressToBlock
       _FSH_VerifyWriteIntArray
       _FSH_WriteIntArray
         _FSH_AddressToBlock
       _IR_ResetData
         i1_RF_Enable
           i1_RF_DataInt
           i1_TMR_Timer0Int
       _MSC_BufferCopyIntConst
         i1_MSC_CleanBufferInt
       _RF_ResetData
     i1_IR_LoadCode
       i1_IR_CalculateCodesize
       i1___ftge
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftmul
         ___ftdiv (ARG)
           i1___ftpack
           i1___lwtoft (ARG)
             i1___ftpack
         i1___ftpack (ARG)
         i1___lwtoft (ARG)
           i1___ftpack
       i1___fttol
       i1___lwtoft
         i1___ftpack
     i1___ftge
       i1___lwtoft (ARG)
         i1___ftpack
     i1___ftmul
       ___ftdiv (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftpack (ARG)
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack
   _IR_ResetData
     i1_RF_Enable
       i1_RF_DataInt
       i1_TMR_Timer0Int
   _RF_Disable
     i1_RF_DataInt
     i1_TMR_Timer0
     i1_TMR_Timer0Int
   _TMR_Timer1Start
     i1_TMR_ResetTimer1
       i1_TMR_Timer1
     i1_TMR_Timer1
   _TMR_Timer1Status
   _TMR_Timer2Start
     _TMR_ResetTimer2
       i1_TMR_Timer2
     i1_TMR_Timer2
   i1_BUT_IR_PinChangeInt
   i1_BUT_ReadButton
   i1_IR_ReadReceiver
   i1_RF_DataInt
   i1_SYS_ActivityTimerReset
   i1_TMR_ResetTimer1
     i1_TMR_Timer1
   i1_TMR_Timer1
   i1_TMR_Timer2

 _high_isr (ROOT)
   _RF_CheckCode
     i2_FSH_Write_IR_RF
       i2_FSH_AddressToBlock
       i2_FSH_EraseBlock
         i2_FSH_AddressToBlock
       i2_FSH_VerifyWriteIntArray
       i2_FSH_WriteIntArray
         i2_FSH_AddressToBlock
       i2_IR_ResetData
         i2_RF_Enable
           i2_RF_DataInt
           i2_TMR_Timer0Int
       i2_MSC_BufferCopyIntConst
         i2_MSC_CleanBufferInt
       i2_RF_ResetData
     i2_RF_LoadCode
       i2_RF_CalculateCodesize
       i2___ftge
         i2___lwtoft (ARG)
           i2___ftpack
       i2___ftmul
         i2___ftpack
         i2___lwtoft (ARG)
           i2___ftpack
       i2___fttol
       i2___lwtoft
         i2___ftpack
     i2___ftge
       i2___lwtoft (ARG)
         i2___ftpack
     i2___ftmul
       i2___ftpack
       i2___lwtoft (ARG)
         i2___ftpack
     i2___lwtoft
       i2___ftpack
   _TMR_Timer0Start
     i2_TMR_ResetTimer0
       i2_TMR_Timer0
     i2_TMR_Timer0
   _TMR_Timer0Status
   i2_RF_Disable
     i2_RF_DataInt
     i2_TMR_Timer0
     i2_TMR_Timer0Int
   i2_RF_ResetData
   i2_SYS_ActivityTimerReset
   i2_TMR_ResetTimer0
     i2_TMR_Timer0
   i2_TMR_Timer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3FF      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0      C0      10       75.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C0       8       75.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     22      AF       6       68.4%
BITBANK0            80      0       0       3        0.0%
BANK0               80     40      4A       4       57.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     59      6D       1       86.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2E6      11        0.0%
DATA                 0      0     2E6      13        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Sep 06 08:23:05 2015

            MSC_BufferCopyIntConst@i 0010              __end_of_IR_ReadReceiver 17FE  
           MSC_BufferCopyIntConst@to 000A            __size_ofi2_FSH_EraseBlock 0076  
                         _RF_SyncLow 00C2                   TMR_Timer0Int@state 00B5  
                         i1___ftpack 0F48                          _RF_SyncHigh 00C0  
                                 l78 3FBC                      ?_SYS_DisableInt 0001  
          i2MSC_CleanBufferInt@count 0082                                   bsr 000FE0  
                         i1___lwtoft 1772                   __size_of_ADC_Start 0004  
                   i2RF_LoadCode@Low 0099                  i2_FSH_WriteIntArray 0BAC  
                 TMR_Timer1Int@state 00B5           ??i1_SYS_ActivityTimerReset 0001  
                         i2___ftpack 0FD2                         __CFG_CP0$OFF 000000  
                         _TMR_Timer0 1A92                           _TMR_Timer1 1A72  
                         _TMR_Timer2 1A52                                  l510 0014  
                                l342 0004                                  l505 0014  
                                l345 0010                                  l354 1B92  
                                l339 0008                                  l348 0004  
                                l517 0D66                                  l571 17EC  
                                l645 0014                                  l469 19BC  
                                l647 0016                                  l744 1ACE  
                                l666 1922                                  l739 17CA  
                                l843 1A9E                                  l853 1A5E  
                                l848 1A7E                                  l873 1A8E  
                                l883 1A4E                           i2___lwtoft 1796  
                                l878 1A6E                                  l888 1978  
                                _PR2 000FCB     FSH_VerifyWriteIntArray@failcount 000B  
 i2FSH_VerifyWriteIntArray@failcount 008A                         i1___ftge@ff1 000C  
                       i1___ftge@ff2 000F                  __size_of_ADC_Module 0010  
                 TMR_Timer2Int@state 00B5                ??i1_ADC_ChangeChannel 0001  
                  i2RF_LoadCode@High 009C                                  prod 000FF3  
                                wreg 000FE8                         i1___ftmul@f1 001B  
                       i1___ftmul@f2 001E                      IR_CheckCode@Low 0048  
                 TMR_Timer1Osc@state 00B5               ?i1_BUT_IR_PinChangeInt 0001  
   __size_of_FSH_VerifyWriteIntArray 0060                         i1___fttol@f1 0001  
       FSH_VerifyWriteIntArray@Array 0004                       ?_RF_SetSquelch 0001  
                       ___ftdiv@cntr 0015                         ___ftdiv@sign 001A  
                               l1313 0ECA                                 l1325 0F28  
                               l1087 1ADE                                 l1099 1AEE  
              ?i2_MSC_CleanBufferInt 0080                                 l1397 0620  
                               l5105 17F2                                 l4321 1678  
                               l5109 17FA                                 l4503 15A6  
                               l4513 1AAE                                 l5081 000C  
                               l6121 144C                                 l4507 15C0  
                               l4515 0002                                 l5171 150A  
                               l5083 000E                                 l5163 0000  
                               l4517 000E                                 l5093 0000  
                               l4711 0F3A                                 l4463 17D8  
                               l4519 0010                                 l5079 0000  
                               l5433 0002                                 l5441 000E  
                               l5177 152E                                 l7009 3FCA  
                               l5451 145A                                 l4459 17D0  
                               l4491 1694                                 l5435 000E  
                               l5443 0012                                 l4485 1ABE  
                               l5437 0012                                 l4671 18F4  
                               l4495 169E                                 l5439 0002  
                               l6095 0000                                 l5457 148A  
                               l5555 12A0                                 l4499 16AA  
                               l5565 12D6                                 l4693 0F02  
                               l4685 0ED2                                 l5559 12BE  
                               l4695 0F14                                 l4687 0EDC  
                               l4697 0F1E                                 l4689 0EF0  
                               l6821 08B8                                 l6813 0894  
                               l6805 087C                                 l6741 1396  
                               l6901 0D30                                 l6751 0598  
                               l6815 08A0                                 l6817 08A4  
                               l6809 088C                                 l6737 192A  
                               l6745 13AE                                 l6833 02FA  
                               l6755 05B8                                 l6931 3E9A  
                               l6853 38D8                                 l6837 0324  
                               l6933 3E9E                                 l6863 393A  
                               l6951 3EE4                                 l6919 3E72  
                               l6881 39CA                                 l6857 3904  
                               l6945 3ECE                                 l6937 3EB0  
                               l6787 0816                                 l6867 3966  
                               l6963 3F08                                 l6947 3ED2  
                               l6939 3EB4                                 l6789 0822  
                               l6893 13FA                                 l6957 3EFC  
                               l6887 13DE                                 l6991 3F8C  
                               l6983 3F3E                                 l6993 3F92  
                               l6987 3F7A                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u4010 000E                                 u4011 000C  
                               u5240 000E                                 u5241 000C  
                               u5250 000E                                 u5251 000C  
                               u7200 0842                                 u6080 142C  
                               u7131 0588                                 u7205 083A  
                               u7151 05A8                                 u7500 3FDC  
                               u7181 080C             FSH_VerifyWriteIntArray@i 000C  
                               _TMR2 000FCC                     ?_RF_SetBandwidth 0001  
               ?i2_FSH_WriteIntArray 0084          ADC_CalculateVoltage@Voltage 0029  
             __size_of_TMR_Timer0Int 0010               __size_of_TMR_Timer1Int 0010  
             __size_of_TMR_Timer2Int 0010               __size_of_TMR_Timer1Osc 0018  
        __size_of_FSH_AddressToBlock 0028                    ??i1_TMR_Timer0Int 0001  
                    __end_of_MTR_IN1 0000                      __end_of_MTR_IN2 0000  
  __size_ofi2_SYS_ActivityTimerReset 0000                                 _main 3E4C  
          ?i2_SYS_ActivityTimerReset 0001               _SYS_ActivityTimerReset 0000  
                       ___ftpack@arg 00B5                         ___ftpack@exp 00B8  
                       i1___lwtoft@c 0009                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 006E  
                       i2___ftge@ff1 008B                         i2___ftge@ff2 008E  
                    _IR_SavedTiming0 2400                      _IR_SavedTiming1 24C0  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0240                        __CFG_IESO$OFF 000000  
                      __CFG_FOSC2$ON 000000             ??i1_IR_CalculateCodesize 0004  
               i2_FSH_AddressToBlock 16B0                     IR_CheckCode@High 0045  
              i1MSC_CleanBufferInt@i 0005                         i2___ftmul@f1 008B  
                       i2___ftmul@f2 008E                         ___param_bank 000000  
         __size_of_SYS_ActivityTimer 003C                         ___ftmul@sign 0191  
                    __end_of_InitADC 1772                      __end_of_InitLDO 19AE  
                       i2___fttol@f1 0080                     IR_CheckCode@data 0043  
                      i1___ftmul@exp 0024                                EECON1 000FA6  
                              EECON2 000FA7         __end_of_ADC_CalculateVoltage 0BAC  
                       ___fttol@exp1 018C                        ??_Init_System 00BB  
                    _FSH_Write_IR_RF 3354                         ___fttol@lval 0188  
        __size_of_TMR_Timer1Function 002A                                INTCON 000FF2  
            i1___ftmul@f3_as_product 0026                                ?_main 0001  
                   __end_of_LDO_Pass 0000                      __end_of___ftdiv 0984  
                       i2___lwtoft@c 0088                      __end_of___ftmul 064E  
                    __end_of___fttol 08CA                           _FlashWaste 2600  
                              i1l223 015E                                i1l215 0162  
                              i1l224 015C                                i1l225 00CA  
                              i1l226 0158                                i1l245 01AE  
                              i1l238 01A2                                i1l254 0210  
                              i1l247 020E                                i2l210 0446  
                              i1l339 0008                                i2l212 0448  
                              i2l207 0420                                i1l609 2B30  
                              i1l571 180E                                i1l469 1A18  
                              i1l744 1B3C                                i2l194 0430  
                              i2l339 0008                                i1l843 1B66  
                              i1l739 173A                                i2l197 038A  
                              i1l853 1B4A                                i2l199 03D8  
                              i1l944 1178                                i1l848 1B58  
                              i1l873 1B74                                i1l946 1176  
                              i1l955 0C8C                                i1l971 3772  
                              i2l469 19D0                                i1l965 1210  
                              i1l957 0C8A                                i2l843 1B1E  
                              i1l979 3434                                i2l944 1102  
                              i2l873 1B2E                                i2l946 1100  
                              i2l955 0BE8                                i2l971 3342  
                              i2l965 1270                                i2l957 0BE6  
                              i2l979 2FE8                                _TMR0H 000FD7  
                              _TMR1H 000FCF                                _TMR0L 000FD6  
                              _TMR1L 000FCE                                _PORTB 000F81  
            i2FSH_Write_IR_RF@lowint 0098                       i2_IR_ResetData 1BB0  
            i2FSH_Write_IR_RF@status 009C                  BUT_ReadButton@value 00B5  
                     __CFG_FCMEN$OFF 000000                  _IRProgramCodeNumber 0068  
                      ___ftpack@sign 00B9                   RF_SetSquelch@state 00B5  
              i1IR_LoadCode@LowBound 0037                   __size_of_RF_Enable 0012  
                        ?_RF_DataInt 0001                ??i2_FSH_WriteIntArray 0089  
              __end_ofi2_RF_LoadCode 0578                     __end_ofi1___ftge 1332  
                    __end_of_low_isr 0240                                tablat 000FF5  
                   __end_ofi2___ftge 138A                    __end_of_ADC_Start 1BD6  
                        ?_RF_Disable 0001                                plusw2 000FDB  
                              status 000FD8                   __size_ofi1___ftmul 00D6  
                 __size_ofi1___fttol 00B8                          ?_MTR_Rotate 0001  
       i2MSC_BufferCopyIntConst@from 0086                FSH_EraseBlock@Address 0005  
           ??_MSC_BufferCopyIntConst 0010                       i1___ftpack@arg 0001  
                 __size_ofi2___ftmul 00D6                       i1___ftpack@exp 0004  
                 __size_ofi2___fttol 00BA                ?i2_FSH_AddressToBlock 0080  
                         _InitButton 1B84                      __initialization 105C  
                         _InitTimer0 1840                           _InitTimer1 1936  
                         _InitTimer2 1950                           _InitTimers 1B78  
                       __end_of_main 3FE6                     ?_IR_ReadReceiver 0001  
                      i2___ftmul@exp 0094                     _ButtonValue_prev 00C4  
       __end_ofi1_MSC_CleanBufferInt 15FC                          ?i1___ftpack 0001  
                       ?i1_RF_Enable 0001         _IR_SavedTiming0_absconstaddr 002400  
                     i1___ftmul@sign 0025                     __end_of_Init_App 1506  
                      _TMR_Timer0Int 1A82                        _TMR_Timer1Int 1A62  
                        ?i1___lwtoft 0009                        _TMR_Timer2Int 1A42  
                      _TMR_Timer1Osc 1968                       i1___fttol@exp1 000F  
                        ?i2___ftpack 0080                   __size_of_SYS_Sleep 0000  
                     i1___fttol@lval 000B                          ?_TMR_Timer0 0001  
                        ?_TMR_Timer1 0001                          ?_TMR_Timer2 0001  
                       ?_MSC_DelayMS 00B9                               ??_main 00C0  
             __end_ofi2_IR_ResetData 1BB8                        ___fttol@sign1 0187  
                        ?i2___lwtoft 0088                        __activetblptr 000002  
                       ?i2_RF_Enable 0001                    _ADC_ConversionInt 1AE2  
                TMR_Timer2Start@time 0003                  __end_of_Init_System 156A  
                  i1_TMR_ResetTimer1 18A0                      ??_RF_SetSquelch 00B5  
                    _ADC_SampleCount 0100                   ?_ADC_ConversionInt 0001  
      i2FSH_VerifyWriteIntArray@data 0088                FSH_EraseBlock@highint 0009  
            __size_of_FSH_EraseBlock 0072             __size_ofi2_TMR_Timer0Int 0010  
             ??i2_MSC_CleanBufferInt 0084                            ??_MTR_IN1 00B5  
                          ??_MTR_IN2 00B5               i1IR_LoadCode@CodeSize1 002F  
             i1IR_LoadCode@CodeSize2 0036                   ?i1_TMR_ResetTimer1 0001  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
           i2FSH_Write_IR_RF@highint 0097              __end_of_IR_SavedTiming0 24C0  
            __end_of_IR_SavedTiming1 2580                     __end_of___ftpack 0F48  
                     RF_LoadCode@Low 0195             __size_of_TMR_ResetTimer0 0020  
           __size_of_TMR_ResetTimer1 0020             __size_of_TMR_ResetTimer2 0020  
                   _TMR_Timer0Status 1BC4                   __size_of_InitMOTOR 0004  
                   _TMR_Timer1Status 1BBE                               i1l1313 0F54  
                             i1l1325 0FB2                               i1l1381 090A  
                             i1l1383 0952                               i1l5011 0AA8  
                             i1l1397 06F6                               i1l5021 0ACC  
                             i1l5023 0AD0                               i1l5015 0AB8  
                             i1l5201 337E                               i1l5027 0AE4  
                             i1l5019 0AC0                               i1l5221 33FE  
                             i1l5311 357A                               i1l5215 33B8  
                             i1l5207 338A                               i2l1313 0FDE  
                             i1l4409 0FC4                               i1l5233 3440  
                             i1l5217 33DA                               i1l4339 16F2  
                             i1l4355 15D6                               i1l5323 35B0  
                             i1l5307 356E                               i1l5251 3488  
                             i1l5235 3448                               i1l5227 3422  
                             i2l1325 103C                               i1l4613 11B8  
                             i1l4533 0DA8                               i1l5413 3760  
                             i1l5421 376E                               i1l5341 35FA  
                             i1l4391 0F8C                               i1l4383 0F5C  
                             i1l4359 15F0                               i1l5327 35BC  
                             i1l5271 34DA                               i1l5255 3494  
                             i1l5247 3484                               i1l4393 0F9E  
                             i1l4385 0F66                               i1l4609 11B2  
                             i1l4545 0DCC                               i1l4553 0E04  
                             i1l5425 3778                               i1l5417 376A  
                             i1l5353 3634                               i1l6321 2E2E  
                             i1l6313 2E18                               i1l4395 0FA8  
                             i1l4387 0F7A                               i1l6235 0BA6  
                             i1l5355 3638                               i1l5339 35F6  
                             i1l5291 352C                               i1l5283 3514  
                             i1l5267 34CE                               i1l6307 2DF2  
                             i1l6315 2E1A                               i1l6411 1740  
                             i1l4629 0C8E                               i1l5429 377E  
                             i1l5373 367E                               i1l5285 3518  
                             i1l5197 3376                               i1l6341 2EBE  
                             i1l6333 2E80                               i1l6253 28F8  
                             i1l6245 2816                               i1l6317 2E24  
                             i1l4663 121E                               i1l5383 36DC  
                             i1l5375 3682                               i1l5367 3672  
                             i1l6351 2EDE                               i1l6271 2B00  
                             i1l6415 174A                               i1l5481 08EA  
                             i1l4649 11C4                               i1l5393 36F2  
                             i1l5369 3676                               i1l4753 14C6  
                             i1l5641 3B20                               i1l6345 2EC6  
                             i1l6337 2EB2                               i1l6329 2E4C  
                             i1l6281 2B34                               i1l6265 2ADE  
                             i1l4923 068E                               i1l4747 1496  
                             i1l5651 3B80                               i1l6363 2EF8  
                             i1l6339 2EB4                               i1l6291 2CBE  
                             i1l6259 29CE                               i2l1397 07CC  
                             i1l4597 117C                               i1l5645 3B4A  
                             i1l6365 2EFC                               i1l6285 2BE8  
                             i1l6277 2B26                               i1l6613 0084  
                     __CFG_WDTEN$OFF 000000                               i1l4919 066E  
                             i1l5399 3732                               i1l5655 3BAA  
                             i1l6279 2B28                               i1l6391 1814  
                             i1l6375 0000                               i1l6711 01DE  
                             i1l6623 00A4                               i2l5033 099C  
                             i1l6297 2DCE                               i1l6713 01E8  
                             i1l6617 0096                               i2l5051 09F0  
                             i2l5035 09A6                               i1l5499 092E  
                             i1l4883 12F8                               i1l6395 181C  
                             i1l6651 0104                               i1l6627 00B4  
                             i2l4421 1004                               i2l5061 0A14  
                             i1l4893 132E                               i1l5669 3C06  
                             i1l6629 00B8                               i2l5063 0A18  
                             i2l5055 0A00                               i1l4887 1316  
                             i1l6719 01F2                               i2l4425 1016  
                             i2l4417 0FE6                               i1l5953 1912  
                             i1l4993 0A56                               i1l6649 00FE  
                             i2l4363 1636                               i2l4443 104E  
                             i2l4427 1028                               i2l4419 0FF0  
                             i2l5067 0A2C                               i2l5059 0A08  
                             i1l4995 0A60                               i1l6691 019E  
                             i1l6683 0180                               i1l6659 0120  
                             i2l4373 16CA                               i2l4429 1032  
                             i2l4367 1650                               i2l6143 3C28  
                             i2l4723 15FE                               i2l6171 3DE4  
                             i2l6147 3CBE                               i2l4821 113E  
                             i2l4901 1350                               i2l5621 051A  
                             i2l6181 3E0E                               i2l6157 3DCC  
                             i2l4911 1386                               i2l6191 3E2E  
                             i2l6159 3DCE                               i2l6167 3DD8  
                             i2l4825 1146                               i2l4809 1106  
                             i2l4841 0BEC                               i2l5801 30D6  
                             i2l5713 2F2A                               i2l4729 1622  
                             i2l4905 136E                               i2l5625 0540  
                             i2l6185 3E16                               i2l6177 3E02  
                             i2l5731 2F6C                               i2l5723 2F3E  
                             i2l6179 3E04                               i2l4861 1224  
                             i2l5733 2F8E                               i2l5717 2F32  
                             i2l6541 037C                               i2l4767 0E40  
                             i2l5823 3132                               i2l5807 30EC  
                             i2l5751 2FFE                               i2l5743 2FD6  
                             i2l6199 3E44                               i2l5737 2FB2  
                             i2l4961 0764                               i2l6377 0000  
                             i2l4875 127E                               i2l4779 0E64  
                             i2l4787 0E9C                               i2l5915 3302  
                             i2l5843 3182                               i2l5827 313E  
                             i2l5771 304E                               i2l5763 303E  
                             i2l5941 334A                               i2l5933 333A  
                             i2l5909 32C0                               i2l5749 2FF4  
                             i2l4957 0744                               i2l6557 03BC  
                             _TABLAT 000FF5                               i2l5871 3202  
                             i2l5855 31BE                               i2l5839 3176  
                             i2l5783 308A                               i2l5767 3042  
                             i2l6559 03C2                               i2l5945 3350  
                             i2l5929 3330                               i2l5937 333E  
                             i2l5857 31C2                               i2l6585 042A  
                             i2l5891 324E                               i2l5883 323E  
                             i2l5787 3096                               i2l5885 3242  
                             i2l5869 31FE                               i2l5799 30D2  
                             i2l5889 324A                               i2l5899 32A8  
             i1IR_LoadCode@HighBound 003A                     __end_of___lwtoft 1728  
                             u531_21 08FA                               u462_41 0734  
                             u464_41 0754                               u529_21 08DA  
                             u457_21 065E                               _OSCCON 000FD3  
                             u459_21 067E                               u467_21 0A4E  
                             u475_41 0994                   __size_of_InitFlash 0004  
                ??_ADC_ConversionInt 00B5                         ??_ADC_Module 00B5  
                       _System_State 01AE                  ??i1_TMR_ResetTimer1 0002  
             i2FSH_EraseBlock@lowint 0089                            ??_InitADC 00B6  
                          ??_InitLDO 00B6                         ?_IR_LoadCode 0001  
            __end_of_FSH_Write_IR_RF 3782             __size_of_TMR_Timer0Start 0010  
           __size_of_TMR_Timer1Start 0010                               _InitIR 19D6  
                             _InitRF 156A             __size_of_TMR_Timer2Start 0018  
                     i2_RF_ResetData 1BA8         __end_of_IR_CalculateCodesize 1494  
       __end_of_RF_CalculateCodesize 1538           MSC_BufferCopyIntConst@from 0007  
                     __CFG_XINST$OFF 000000      __size_ofi1_IR_CalculateCodesize 003C  
                         _Timer2Post 0062                     __end_of_high_isr 046C  
                  ?i1_BUT_ReadButton 0001                               ___ftge 1280  
             i1IR_ReadReceiver@value 0001                     i2_FSH_EraseBlock 10D8  
            __size_of_BUT_ReadButton 0022                       __CFG_STVREN$ON 000000  
                          ??___ftdiv 0012                            ??___ftmul 018D  
                          ??___fttol 00B9         __size_of_BUT_IR_PinChangeInt 0010  
                     ?_TMR_Timer0Int 0001                       ?_TMR_Timer1Int 0001  
                     ?_TMR_Timer2Int 0001             i2MSC_CleanBufferInt@data 0080  
                     ?_TMR_Timer1Osc 0001                   ??i1_BUT_ReadButton 0001  
                  __end_of_RF_Enable 3FF8                               clear_0 1062  
                             clear_1 106E                               clear_2 107A  
                             clear_3 1086                               clear_4 1092  
                __size_of_RF_DataInt 0014            __end_of_ADC_ConversionInt 1AF2  
                    ?i2_IR_ResetData 0001              ?i2_RF_CalculateCodesize 0001  
                __size_of_RF_Disable 0012            __end_ofi1_TMR_ResetTimer1 18C0  
              ___ftmul@f3_as_product 0192                    __end_ofi1___ftmul 0724  
                  __end_ofi1___fttol 0AF6                         __pdataCOMRAM 006D  
 __size_ofi2_FSH_VerifyWriteIntArray 0060                   __end_of_ADC_Module 1AE2  
                __size_of_MTR_Rotate 009C                    __end_ofi2___ftmul 07FA  
                  __end_ofi2___fttol 0A3E           ?i2_FSH_VerifyWriteIntArray 0080  
            _FSH_VerifyWriteIntArray 11C0                         __mediumconst 2800  
                          ??_low_isr 004C                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                     _IR_DataHolder1 0300                 IR_LoadCode@CodeSize1 019B  
               IR_LoadCode@CodeSize2 01A2                         ?_RF_LoadCode 0001  
               _ADC_CalculateVoltage 0AF6                  __size_ofi1___ftpack 008A  
                  i2_TMR_ResetTimer0 18C0                      __CFG_FOSC$HSPLL 000000  
            __p_RF_SavedTiming_const 2580                      TMR_Timer0@state 00B5  
                    TMR_Timer1@state 00B5          i2FSH_Write_IR_RF@WriteTries 009F  
                         __accesstop 0080              __end_of__initialization 10CA  
                __size_ofi1___lwtoft 0024                      TMR_Timer2@state 00B5  
                  __end_of_SYS_Sleep 0000                 IR_LoadCode@HighBound 01A6  
                       ?_RF_Receiver 0001                  __size_ofi2___ftpack 008A  
             __end_ofi2_RF_ResetData 1BB0                   ?i2_TMR_ResetTimer0 0001  
                         ___ftge@ff1 00B5                           ___ftge@ff2 00B8  
                __size_of_TMR_Timer0 0010                  __size_of_TMR_Timer1 0010  
                __size_of_TMR_Timer2 0010                      i1___ftpack@sign 0005  
             ??i2_FSH_AddressToBlock 0084                        ___rparam_used 000000  
                         ___ftdiv@f1 000C                           ___ftdiv@f2 000F  
                         ___ftdiv@f3 0016                            ?_LDO_Pass 0001  
                __size_ofi2___lwtoft 0024             FSH_EraseBlock@WriteTries 000B  
                     i2___ftpack@arg 0080      __size_of_MSC_BufferCopyIntConst 0098  
                     i2___ftpack@exp 0083                    i1RF_DataInt@state 0001  
                   ??_SYS_DisableInt 00B5                       high_isr@RFtemp 00B3  
                        ?_InitButton 0001                           ___ftmul@f1 0187  
                         ___ftmul@f2 018A                           ___fttol@f1 00B5  
                     __pcstackCOMRAM 0001                          ?_InitTimer0 0001  
                        ?_InitTimer1 0001                          ?_InitTimer2 0001  
                        ?_InitTimers 0001                  ??i2_TMR_ResetTimer0 0081  
                       __pidataBANK1 1BB8                 IR_ReadReceiver@value 00B5  
       _IR_SavedTiming1_absconstaddr 0024C0                       i2___ftmul@sign 0095  
                      ?i1_RF_DataInt 0001              _FlashWaste_absconstaddr 002600  
                        _Init_System 1538       __end_ofi2_RF_CalculateCodesize 162C  
                  __end_of_InitMOTOR 1BCE                          _Button_Data 0102  
                     i2___fttol@exp1 008E                            ?i1___ftge 000C  
                  __end_of_InitFlash 1BD2                           ___lwtoft@c 00BD  
                     i2___fttol@lval 008A           __end_of_MSC_CleanBufferInt 15CC  
                          ?i2___ftge 008B              ??i1_BUT_IR_PinChangeInt 0001  
           ?_SYS_ConfigureOscillator 0001     __end_ofi2_SYS_ActivityTimerReset 0000  
                    i1_TMR_Timer0Int 1B6A               i1_IR_CalculateCodesize 1494  
  __end_ofi2_FSH_VerifyWriteIntArray 1280                      i1___fttol@sign1 000A  
                   RF_Receiver@state 00B5                 i2FSH_WriteIntArray@i 008B  
                      ?_MSC_DelayNOP 00B5            __end_ofi2_TMR_ResetTimer0 18E0  
                      ?_MSC_BlinkLED 018B              ?_SYS_ActivityTimerReset 0001  
              ?_ADC_CalculateVoltage 0001                 i1_MSC_CleanBufferInt 15CC  
                      ?i2_RF_DataInt 0001                           __pbssBANK0 00C0  
                         __pbssBANK1 0100                           __pbssBANK2 0200  
                         __pbssBANK3 0300                    _FSH_WriteIntArray 0C50  
                          ?_Init_App 0001                     RF_CheckCode@High 00A7  
                      ?i2_RF_Disable 0001                        ?i1_TMR_Timer0 0001  
                      ?i1_TMR_Timer1 0001                        ?i1_TMR_Timer2 0001  
                  i1IR_LoadCode@Low1 0029                    i1IR_LoadCode@Low2 0030  
            i2FSH_EraseBlock@Address 0084                    ??i2_TMR_Timer0Int 0080  
           i1TMR_ResetTimer1@TimerOn 0002                      ?i2_RF_ResetData 0001  
                 ?_FSH_WriteIntArray 0005                           ??_LDO_Pass 00B5  
                  ??_TMR_ResetTimer0 00B6                    ??_TMR_ResetTimer1 00B6  
                  ??_TMR_ResetTimer2 0002                     ?_FSH_Write_IR_RF 0001  
                            ?_InitIR 0001                              ?_InitRF 0001  
     i2FSH_VerifyWriteIntArray@Array 0083                      ??_TMR_Timer0Int 00B5  
                    ??_TMR_Timer1Int 00B5                      ??_TMR_Timer2Int 00B5  
                    ??_TMR_Timer1Osc 00B5                              ?___ftge 00B5  
                ??_FSH_WriteIntArray 000A                       ??i1_RF_DataInt 0001  
                      ?_IR_CheckCode 0001               __size_of_SYS_EnableInt 0000  
        __end_ofi1_ADC_ChangeChannel 191C                    ??_TMR_Timer0Start 0082  
                  ??_TMR_Timer1Start 0003                    ??_TMR_Timer2Start 0005  
                  i2RF_DataInt@state 0080                            ?___ftpack 00B5  
               __size_ofi1_RF_Enable 0012                           ??i1___ftge 0012  
                    RF_LoadCode@High 0198                        ?i2_TMR_Timer0 0001  
         __size_of_ADC_ConversionInt 0010            ??_FSH_VerifyWriteIntArray 0006  
                         ??i2___ftge 0091                            ?___lwtoft 00BD  
         __size_ofi1_TMR_ResetTimer1 0020    __size_ofi2_MSC_BufferCopyIntConst 0098  
          ?i2_MSC_BufferCopyIntConst 0086               _MSC_BufferCopyIntConst 0D8C  
                       _Flash_Status 0103                 __size_of_MSC_DelayMS 004E  
                      MSC_DelayMS@US 00B9              i2FSH_EraseBlock@highint 0088  
                      MSC_DelayNOP@i 00B7               __size_ofi1_IR_LoadCode 023C  
                            _TBLPTRH 000FF7                              _TBLPTRL 000FF6  
                            _TBLPTRU 000FF8                 _IR_CalculateCodesize 1458  
                     _FSH_EraseBlock 114E            i2MSC_BufferCopyIntConst@i 008F  
               _RF_CalculateCodesize 1506                 __size_ofi2_RF_Enable 0012  
                     ??_MSC_DelayNOP 00B7       __end_of_SYS_ActivityTimerReset 0000  
                            _IR_Data 0104                  __size_of_InitButton 000C  
                     ??_MSC_BlinkLED 00BE                              _MTR_IN1 0000  
                            _MTR_IN2 0000                              _RF_Data 0105  
                __size_of_InitTimer0 0020                  __size_of_InitTimer1 001A  
                __size_of_InitTimer2 0018                        MSC_BlinkLED@i 018F  
         __end_of_FSH_AddressToBlock 1702            __end_of_FSH_WriteIntArray 0CF0  
                __size_of_InitTimers 000C                       ??i2_RF_DataInt 0080  
                          ?_high_isr 0001                ?i1_MSC_CleanBufferInt 0001  
                       ??_RF_DataInt 00B5                       ??i2_RF_Disable 0081  
  __size_ofi1_SYS_ActivityTimerReset 0000                       ??i1_TMR_Timer0 0001  
                     ??i1_TMR_Timer1 0001                       ??i1_TMR_Timer2 0001  
                  _ADC_CurrentSource 006D                         ??_RF_Disable 0002  
          ?i1_SYS_ActivityTimerReset 0001                           ??_Init_App 00B5  
                    _Timer2PostCount 0064                      ADC_Module@state 00B5  
                            _InitADC 174E                         ??_MTR_Rotate 00BE  
                            _InitLDO 1998          MSC_BufferCopyIntConst@count 000C  
                          _ADC_Start 1BD2                              __Hparam 0000  
        MSC_BufferCopyIntConst@shift 000E                      __size_of_InitIR 0012  
                    __size_of_InitRF 0032                              __Lparam 0000  
           __size_of_RF_SetBandwidth 002A           __end_of_TMR_Timer1Function 1686  
              i2MSC_CleanBufferInt@i 0084                 __size_of_IR_LoadCode 0252  
                     _BUT_ReadButton 17BA                       ??_IR_CheckCode 003D  
                    __size_of___ftge 005A                         ??i1___ftpack 0006  
               i2TMR_Timer0Int@state 0080                              ___ftdiv 08CA  
                            ___ftmul 0578                              ___fttol 07FA  
            __end_ofi1_TMR_Timer0Int 1B78      __end_of_SYS_ConfigureOscillator 1B98  
                       ??i1___lwtoft 000C             __end_of_TMR_Timer0Status 1BCA  
           __end_of_TMR_Timer1Status 1BC4                              __pcinit 105C  
                     ??i2_TMR_Timer0 0080                         ??i2___ftpack 0085  
                         ??___ftpack 00BA                        ?_IR_ResetData 0001  
            i2___ftmul@f3_as_product 0096                              __ramtop 0400  
                       ??_TMR_Timer0 00B5                         ??_TMR_Timer1 00B5  
                       ??_TMR_Timer2 00B5                              __ptext0 3E4C  
                            __ptext1 0000                              __ptext2 1B90  
                            __ptext3 141C                              __ptext4 0000  
                            __ptext5 0000                              __ptext6 0000  
                            __ptext7 0244                              __ptext8 1506  
                            __ptext9 3FE6                   __end_of_RF_DataInt 19C2  
                       ??i2___lwtoft 008B                           ??___lwtoft 00C0  
                          _T0CONbits 000FD5                            _T1CONbits 000FCD  
                 __end_of_RF_Disable 19FA                            _T2CONbits 000FCA  
             __end_of_FSH_EraseBlock 11C0          __end_ofi2_FSH_WriteIntArray 0C50  
              ?_IR_CalculateCodesize 00B5                ?_RF_CalculateCodesize 0001  
                 __end_of_MTR_Rotate 0D8C                              _low_isr 0018  
        FSH_WriteIntArray@ConstArray 0005               ??_ADC_CalculateVoltage 0029  
           BUT_IR_PinChangeInt@state 00B5           __size_ofi2_TMR_ResetTimer0 0020  
           __end_ofi2_FSH_EraseBlock 114E             __p_IR_SavedTiming0_const 2400  
                      _SYS_EnableInt 0000             __p_IR_SavedTiming1_const 24C0  
           i2_SYS_ActivityTimerReset 0000                           ??_high_isr 00AB  
                     __pintcode_body 035C                  _BUT_IR_PinChangeInt 1AC2  
                      ?_RF_CheckCode 0001                 end_of_initialization 10CA  
                 __end_ofi1___ftpack 0FD2                        __Lmediumconst 2800  
                   IR_LoadCode@High1 0198                     IR_LoadCode@High2 019F  
               __size_of_RF_LoadCode 0118                              int_func 035C  
                 __end_ofi1___lwtoft 1796                   __end_ofi2___ftpack 105C  
                 __end_of_TMR_Timer0 1AA2                   __end_of_TMR_Timer1 1A82  
                 __end_of_TMR_Timer2 1A62                           ?_ADC_Start 0001  
             __end_of_BUT_ReadButton 17DC                 __size_of_RF_Receiver 0010  
          FSH_Write_IR_RF@RAMaddress 0021                   __end_ofi2___lwtoft 17BA  
                      i1_IR_LoadCode 39D4                     FSH_Write_IR_RF@i 001E  
                   FSH_Write_IR_RF@j 001C              i1IR_CalculateCodesize@i 0007  
             FSH_WriteIntArray@Array 0008                              postdec1 000FE5  
                            postdec2 000FDD                     ??i2_IR_ResetData 0081  
                            postinc0 000FEE                              postinc2 000FDE  
             TMR_Timer1Function@mode 00B7                 ?_BUT_IR_PinChangeInt 0001  
                  i1_IR_ReadReceiver 17FE                       ??_IR_ResetData 0002  
                __p_FlashWaste_const 2600            FSH_AddressToBlock@Address 0001  
             __size_ofi2_RF_LoadCode 010C                   ?i1_IR_ReadReceiver 0001  
         i1BUT_IR_PinChangeInt@state 0001                            _IRStarted 0069  
           __size_of_IR_ReadReceiver 0022                            _RF_Enable 3FE6  
                    ?_FSH_EraseBlock 0005                            _TRISAbits 000F92  
        ??i2_FSH_VerifyWriteIntArray 0085                            _TRISBbits 000F93  
                          _TRISCbits 000F94            __size_ofi1_BUT_ReadButton 0026  
                ??i1_IR_ReadReceiver 0001                       ?_SYS_EnableInt 0001  
                          _RFStarted 00C7               ??i1_MSC_CleanBufferInt 0005  
                          i1___ftmul 064E                            i1___fttol 0A3E  
              __end_of_RF_SetSquelch 1AB2                       ??_RF_CheckCode 00A2  
         __size_of_FSH_WriteIntArray 00A0                        IR_CheckCode@i 004B  
                          i2___ftmul 0724                            i2___fttol 0984  
               __end_ofi1_RF_DataInt 1A1E        __size_ofi2_MSC_CleanBufferInt 0030  
                      ?_RF_ResetData 0001                          ___ftdiv@exp 0019  
                     ?i1_IR_LoadCode 0001                      i2___ftpack@sign 0084  
                    ?_BUT_ReadButton 0001                         ??_InitButton 00B6  
                 __end_of_FlashWaste 2800                            _SYS_Sleep 0000  
                        ___ftmul@exp 0190                         ??_InitTimer0 00B7  
                       ??_InitTimer1 00B8                         ??_InitTimer2 00B6  
                     __end_of_InitIR 19E8                       __end_of_InitRF 159C  
                  __size_of_LDO_Pass 0000                         ??_InitTimers 00B8  
          __end_ofi1_IR_ReadReceiver 1820          _RF_SavedTiming_absconstaddr 002580  
               __end_of_MSC_DelayNOP 1936                ??_BUT_IR_PinChangeInt 00B5  
           i1MSC_CleanBufferInt@data 0001                 __end_of_MSC_BlinkLED 141C  
                     __end_of___ftge 12DA                         ?_Init_System 0001  
               __end_ofi2_RF_DataInt 19D6                     ?i1_TMR_Timer0Int 0001  
                      __pidataCOMRAM 1BD6                 __end_ofi2_RF_Disable 1A30  
                  ??_RF_SetBandwidth 00B5                 __end_ofi1_TMR_Timer0 1B6A  
               __end_ofi1_TMR_Timer1 1B5C                 __end_ofi1_TMR_Timer2 1B4E  
                      low_isr@IRtemp 0058              ?i1_IR_CalculateCodesize 0001  
      ADC_CalculateVoltage@ADCcounts 002C                           ?_RF_Enable 0001  
             ??_IR_CalculateCodesize 00B8               ??_RF_CalculateCodesize 00B5  
                          _InitMOTOR 1BCA                         _ButtonChange 0066  
                  __size_ofi1___ftge 0058                i1BUT_ReadButton@value 0001  
                start_initialization 105C                    __size_ofi2___ftge 0058  
     __size_ofi1_BUT_IR_PinChangeInt 000E                    _ADC_ChangeChannel 18E0  
                          _InitFlash 1BCE               ADC_ConversionInt@state 00B5  
      __end_ofi1_BUT_IR_PinChangeInt 1B40                      i2_TMR_Timer0Int 1B22  
                         ?i1___ftmul 001B                           ?i1___fttol 0001  
                    _TMR_ResetTimer0 1860                      i2___fttol@sign1 0089  
                    _TMR_ResetTimer1 1820                      _TMR_ResetTimer2 1880  
                 ?_ADC_ChangeChannel 0001                   __end_of_InitButton 1B90  
                   ??i2_RF_ResetData 0080                 __end_of_IR_CheckCode 2F04  
                         ?i2___ftmul 008B                           ?i2___fttol 0080  
                 __end_of_InitTimer0 1860                   __end_of_InitTimer1 1950  
                 __end_of_InitTimer2 1968                   __end_of_InitTimers 1B84  
                 _MSC_CleanBufferInt 159C                       ??_RF_ResetData 0001  
                      i2_RF_LoadCode 046C                 __end_ofi2_TMR_Timer0 1B22  
   __size_of_SYS_ConfigureOscillator 0008                  ??_ADC_ChangeChannel 00B5  
                    _TMR_Timer0Start 1B02                      _TMR_Timer1Start 1AF2  
                    _TMR_Timer2Start 1980                 FSH_EraseBlock@lowint 000A  
                  __size_of_Init_App 0036                          ??_ADC_Start 00B5  
                           ??_InitIR 00BB                             ??_InitRF 00BB  
                ?_MSC_CleanBufferInt 00B5            i2_FSH_VerifyWriteIntArray 1220  
                         ?_SYS_Sleep 0001        __size_ofi2_FSH_AddressToBlock 002A  
                          _Timer2Use 006C     __end_ofi2_MSC_BufferCopyIntConst 0EBC  
             TMR_ResetTimer0@TimerOn 00B6                  MSC_CleanBufferInt@i 00B9  
                           ??___ftge 00BB               TMR_ResetTimer1@TimerOn 00B6  
              IR_CalculateCodesize@i 00BB               TMR_ResetTimer2@TimerOn 0002  
                        __pdataBANK1 01A9                RF_CalculateCodesize@i 00B5  
     __end_ofi1_IR_CalculateCodesize 14D0              ?_MSC_BufferCopyIntConst 0007  
   __end_ofi1_SYS_ActivityTimerReset 0000            __end_of_ADC_ChangeChannel 18FE  
                  __size_of___ftpack 008C                           ?_InitMOTOR 0001  
                      _IR_DataTiming 0200                 ??_MSC_CleanBufferInt 00B9  
                        __pbssCOMRAM 005A                      ??_SYS_EnableInt 00B6  
                         ?_InitFlash 0001                    __size_of___lwtoft 0026  
                      __pcstackBANK0 0080                        __pcstackBANK1 0187  
                 i1IR_LoadCode@High1 002C                   i1IR_LoadCode@High2 0033  
                           ?_MTR_IN1 0001                             ?_MTR_IN2 0001  
         i2FSH_WriteIntArray@address 008C                    ??_IR_ReadReceiver 00B5  
                __CFG_CCP2MX$DEFAULT 000000                       ?i2_RF_LoadCode 0001  
                IR_LoadCode@LowBound 01A3              MSC_CleanBufferInt@count 00B7  
               __end_of_IR_ResetData 1BA8                    __size_of_high_isr 0464  
                    ??i1_IR_LoadCode 0029                             ?_InitADC 0001  
                           ?_InitLDO 0001                      RF_CheckCode@Low 00A4  
                 _FSH_AddressToBlock 16DA                  _System_State_Change 0106  
         __size_ofi1_IR_ReadReceiver 0022                            __pintcode 0008  
          i1MSC_CleanBufferInt@count 0003                        __pmediumconst 2800  
                    RF_DataInt@state 00B5                        ??i1_RF_Enable 0002  
                          __ptext100 1B02                            __ptext101 18C0  
                          __ptext110 15FC                            __ptext102 1B12  
                          __ptext111 2F04                            __ptext103 3C10  
                          __ptext120 1220                            __ptext112 1BA8  
                          __ptext104 046C                            __ptext121 10D8  
                          __ptext113 0E24                            __ptext105 1796  
                          __ptext122 16B0                            __ptext114 162C  
                          __ptext106 0984                            __ptext115 1BB0  
                          __ptext107 0724                            __ptext116 1A30  
                          __ptext108 0FD2                            __ptext117 1B22  
                          __ptext109 1332                            __ptext118 19C2  
                          __ptext119 0BAC                             ?___ftdiv 000C  
                           ?___ftmul 0187                             ?___fttol 00B5  
     __end_of_MSC_BufferCopyIntConst 0E24                __end_of_TMR_Timer0Int 1A92  
              __end_of_TMR_Timer1Int 1A72                __end_of_TMR_Timer2Int 1A52  
               __end_of_RF_CheckCode 3E4C                __end_of_TMR_Timer1Osc 1980  
                        __pintcodelo 0018             __size_of_FSH_Write_IR_RF 042E  
                       MSC_DelayMS@i 0187              __end_ofi2_TMR_Timer0Int 1B32  
                  ?_TMR_Timer0Status 0001                  ?_FSH_AddressToBlock 0001  
                  ?_TMR_Timer1Status 0001                        ??_MSC_DelayMS 00BD  
         ??i2_SYS_ActivityTimerReset 0080              __size_of_SYS_DisableInt 0000  
            __end_of_TMR_ResetTimer0 1880              __end_of_TMR_ResetTimer1 1840  
            __end_of_TMR_ResetTimer2 18A0                        ??i2_RF_Enable 0081  
                 ??_TMR_Timer0Status 0080                          ??_RF_Enable 00B6  
                 ??_TMR_Timer1Status 0001                   _TMR_Timer1Function 165C  
       __size_ofi1_ADC_ChangeChannel 001E                __size_ofi1_RF_DataInt 0012  
                           ?_low_isr 0001                     i1_BUT_ReadButton 1728  
                        ??i1___ftmul 0021                          ??i1___fttol 0005  
            __end_of_TMR_Timer0Start 1B12              __end_of_TMR_Timer1Start 1B02  
            __end_of_TMR_Timer2Start 1998                          ??i2___ftmul 0091  
                        ??i2___fttol 0084                    ?i2_FSH_EraseBlock 0084  
                ?_TMR_Timer1Function 0001                 ??_FSH_AddressToBlock 0005  
                           _DC_Motor 00C5                   ??i2_FSH_EraseBlock 0088  
                RF_SetBandwidth@band 00B5                        ??_IR_LoadCode 00C0  
              __size_of_MSC_DelayNOP 001A                        LDO_Pass@state 00B5  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
                           _LDO_Pass 0000                __size_of_MSC_BlinkLED 0044  
        FSH_VerifyWriteIntArray@data 0009                      IR_LoadCode@Low1 0195  
                    IR_LoadCode@Low2 019C                             i1u412_20 0C7E  
                           i1u413_20 0C8A                             i1u406_20 116A  
                           i1u407_20 1176                             i1u415_20 120E  
                           i1u370_20 16E8                             i1u517_25 368E  
                        ??_SYS_Sleep 00B5                __size_ofi2_RF_DataInt 0014  
           ??i2_RF_CalculateCodesize 0080                             i1u469_20 0A7E  
                           i1u469_25 0A76                             i2u440_40 1100  
                           _PIR1bits 000F9E                             i2u373_40 16C0  
                           i2u445_40 0BDA                             i2u446_40 0BE6  
                           i2u439_40 10F4                             _IRChange 0067  
                           i2u448_40 126E                             i2u477_40 09C4  
                           i2u477_45 09BC                             i2u589_45 325A  
                           _RCONbits 000FD0           i2MSC_BufferCopyIntConst@to 0089  
              __size_ofi2_RF_Disable 0012                     __CFG_WDTPS$32768 000000  
              __size_ofi1_TMR_Timer0 000E                __size_ofi1_TMR_Timer1 000E  
              __size_ofi1_TMR_Timer2 000E                 i1TMR_Timer0Int@state 0001  
           ?_FSH_VerifyWriteIntArray 0001                 ??_TMR_Timer1Function 00B7  
                           _IR_Saved 01AC                     ??_FSH_EraseBlock 0009  
                       i1_RF_DataInt 1A0C             i2_MSC_BufferCopyIntConst 0E24  
                           _RF_Saved 01AD                 __end_of_RF_ResetData 1BA0  
                  i2_FSH_Write_IR_RF 2F04                             i1___ftge 12DA  
                         _ADCON0bits 000FC2                           _ADCON1bits 000FC1  
                         _ADCON2bits 000FC0                             i2___ftge 1332  
               __size_of_Init_System 0032           __size_of_ADC_ChangeChannel 001E  
                __end_ofi1_RF_Enable 1A0C                   ?i2_FSH_Write_IR_RF 0001  
                        ??_InitMOTOR 00B5                __size_of_IR_CheckCode 0702  
                        ??_InitFlash 00B5                  __end_of_MSC_DelayMS 13D8  
           i1_SYS_ActivityTimerReset 0000                      ??i2_RF_LoadCode 0099  
              __size_ofi2_TMR_Timer0 0010                         _MSC_DelayNOP 191C  
                        _INTCON2bits 000FF1                        ??_RF_LoadCode 00C0  
                __end_ofi2_RF_Enable 1A42                          _INTCON3bits 000FF0  
                ??i2_FSH_Write_IR_RF 0091                            copy_data0 10AC  
                   __size_of_MTR_IN1 0000                     __size_of_MTR_IN2 0000  
                       _MSC_BlinkLED 13D8           i2FSH_VerifyWriteIntArray@i 008B  
      __size_of_ADC_CalculateVoltage 00B6                         i2_RF_DataInt 19C2  
            _SYS_ConfigureOscillator 1B90                     ??_BUT_ReadButton 00B5  
       __size_ofi2_FSH_WriteIntArray 00A4                             _Init_App 14D0  
                      ??_RF_Receiver 00B5                         i2_RF_Disable 1A1E  
                           _Rail_VIN 01A9       FSH_Write_IR_RF@FlashWasteindex 001A  
   i2FSH_Write_IR_RF@FlashWasteindex 0099                           _ADC_Module 1AD2  
             FSH_Write_IR_RF@highint 0018                         i1_TMR_Timer0 1B5C  
                       i1_TMR_Timer1 1B4E                         i1_TMR_Timer2 1B40  
          FSH_Write_IR_RF@WriteTries 0020                           _EECON1bits 000FA6  
                           __Hparam0 0000                     __size_of_InitADC 0024  
                   __size_of_InitLDO 0016                      _RF_SetBandwidth 1686  
                           __Lparam0 0000              i2RF_CalculateCodesize@i 0080  
       __end_ofi2_MSC_CleanBufferInt 165C                  __end_of_IR_LoadCode 39D4  
          __end_ofi2_FSH_Write_IR_RF 3354                         _IR_CheckCode 2802  
                       _IR_DataPlace 006B                     __size_of___ftdiv 00BA  
                   __size_of___ftmul 00D6                     __size_of___fttol 00D0  
                 i2FSH_Write_IR_RF@i 009D                   i2FSH_Write_IR_RF@j 009B  
                           ___ftpack 0EBC                     ?i2_TMR_Timer0Int 0001  
           ??_SYS_ActivityTimerReset 00B5                         i2_TMR_Timer0 1B12  
                           ___lwtoft 1702               MSC_CleanBufferInt@data 00B5  
  FSH_VerifyWriteIntArray@ConstArray 0001  i2FSH_VerifyWriteIntArray@ConstArray 0080  
                   ?_TMR_ResetTimer0 0001                     ?_TMR_ResetTimer1 0001  
                   ?_TMR_ResetTimer2 0001                  low_isr@button_state 0057  
                      _RF_DataTiming 0107                    ??_FSH_Write_IR_RF 0012  
              __size_of_IR_ResetData 0008                     __size_of_low_isr 0228  
                           __ptext10 0CF0                             __ptext11 0000  
                           __ptext20 1A52                             __ptext12 0000  
                           __ptext21 1936                             __ptext13 13D8  
                           __ptext30 1A92                             __ptext22 1A62  
                           __ptext14 138A                             __ptext31 156A  
                           __ptext23 165C                             __ptext15 191C  
                           __ptext40 159C                             __ptext32 1AA2  
                           __ptext24 1968                             __ptext16 1538  
                           __ptext41 1BCE                             __ptext33 1686  
                           __ptext25 1820                             __ptext17 1B78  
                           __ptext50 14D0                             __ptext42 1B84  
                           __ptext34 1AB2                             __ptext26 1A72  
                           __ptext18 1950                             __ptext51 3782  
                           __ptext43 17BA                             __ptext35 19AE  
                           __ptext27 1840                             __ptext19 1A42  
                           __ptext60 0000                             __ptext52 1702  
                           __ptext44 1AC2                             __ptext36 1BCA  
                           __ptext28 1A82                             __ptext61 17FE  
                           __ptext53 07FA                             __ptext45 174E  
                           __ptext37 1998                             __ptext29 1860  
                           __ptext70 1B4E                             __ptext62 1728  
                           __ptext54 0578                             __ptext46 1AD2  
                           __ptext38 0000                             __ptext71 19E8  
                           __ptext63 1B32                             __ptext55 0EBC  
                           __ptext47 1AE2                             __ptext39 19D6  
                           __ptext80 0D8C                             __ptext72 1B5C  
                           __ptext64 1980                             __ptext56 1280  
                           __ptext48 18E0                             __ptext81 15CC  
                           __ptext73 2802                             __ptext65 1880  
                           __ptext57 1458                             __ptext49 17DC  
                           __ptext90 0AF6                             __ptext82 1BA0  
                           __ptext74 39D4                             __ptext66 1B40  
                           __ptext58 1BD2                             __ptext91 1772  
                           __ptext83 19FA                             __ptext75 0A3E  
                           __ptext67 1BBE                             __ptext92 064E  
                           __ptext84 1B6A                             __ptext76 12DA  
                           __ptext68 1AF2                             __ptext93 18FE  
                           __ptext85 1A0C                             __ptext77 1494  
                           __ptext69 18A0                             __ptext94 08CA  
                           __ptext86 0C50                             __ptext78 3354  
                           __ptext95 0F48                             __ptext87 11C0  
                           __ptext79 1B98                             __ptext88 114E  
                           __ptext97 0000                             __ptext89 16DA  
                           __ptext98 1A1E                             __ptext99 1BC4  
      i2MSC_BufferCopyIntConst@count 008B        i2MSC_BufferCopyIntConst@shift 008D  
                  i1TMR_Timer0@state 0001                     ?_TMR_Timer0Start 0001  
                   ?_TMR_Timer1Start 0001                             _high_isr 0008  
                  i1TMR_Timer1@state 0001                     ?_TMR_Timer2Start 0003  
                  i1TMR_Timer2@state 0001        __size_ofi1_MSC_CleanBufferInt 0030  
                      __size_of_main 019A          __end_of_BUT_IR_PinChangeInt 1AD2  
                     _Activity_Timer 005A             i2FSH_WriteIntArray@Array 0087  
                __end_of_RF_LoadCode 035C      __end_of_FSH_VerifyWriteIntArray 1220  
              __size_of_RF_CheckCode 023C             IR_CalculateCodesize@Code 00B5  
    __size_ofi2_RF_CalculateCodesize 0030                         MTR_IN1@state 00B5  
                __end_of_RF_Receiver 1AC2                         MTR_IN2@state 00B5  
                           int$flags 006E        i2FSH_WriteIntArray@ConstArray 0084  
                        i1_RF_Enable 19FA                    _SYS_ActivityTimer 141C  
             __size_of_RF_SetSquelch 0010                   ?_SYS_ActivityTimer 0001  
                       _IR_ResetData 1BA0                       _SYS_DisableInt 0000  
                    _IR_ReadReceiver 17DC                          _MSC_DelayMS 138A  
                       _IRValue_prev 00C6                          i2_RF_Enable 1A30  
                        _OSCTUNEbits 000F9B                           _INTCONbits 000FF2  
       __end_ofi2_FSH_AddressToBlock 16DA              __size_ofi2_IR_ResetData 0008  
              FSH_Write_IR_RF@lowint 0019             __size_ofi1_TMR_Timer0Int 000E  
      __size_of_IR_CalculateCodesize 003C                  ??_SYS_ActivityTimer 00B6  
      __size_of_RF_CalculateCodesize 0032                FSH_Write_IR_RF@status 001D  
          ??_SYS_ConfigureOscillator 00B5                     MSC_DelayNOP@NOPs 00B5  
                 FSH_WriteIntArray@i 000C                i1_BUT_IR_PinChangeInt 1B32  
           FSH_WriteIntArray@address 000D                         _RF_CheckCode 3C10  
         i1IR_CalculateCodesize@Code 0001                             intlevel1 0000  
                           intlevel2 0000                          _IR_CodeSize 006A  
            __end_of_RF_SetBandwidth 16B0                         _RF_DataPlace 00C9  
                      RF_CheckCode@i 00AA                          ?_ADC_Module 0001  
                  i2TMR_Timer0@state 0080          i2FSH_Write_IR_RF@RAMaddress 00A0  
                        _IR_LoadCode 3782                  i1_ADC_ChangeChannel 18FE  
                         _OSCCONbits 000FD3             __end_ofi1_BUT_ReadButton 174E  
          __end_of_SYS_ActivityTimer 1458                       _RF_SavedTiming 2580  
              __size_of_RF_ResetData 0008           __size_ofi2_FSH_Write_IR_RF 0450  
             __end_of_SYS_DisableInt 0000          i2FSH_AddressToBlock@Address 0080  
    __size_of_SYS_ActivityTimerReset 0000                          _IR_SyncHigh 005E  
               ?i1_ADC_ChangeChannel 0001                          _RF_CodeSize 00C8  
        __size_of_MSC_CleanBufferInt 0030               i2_RF_CalculateCodesize 15FC  
              __end_of_SYS_EnableInt 0000                        _RF_SetSquelch 1AA2  
                        _RF_LoadCode 0244                           _RF_DataInt 19AE  
               i2_MSC_CleanBufferInt 162C            __size_of_TMR_Timer0Status 0006  
          __size_of_TMR_Timer1Status 0006                           _IR_SyncLow 0060  
                  MSC_BlinkLED@blink 018B                           _RF_Disable 19E8  
                  MSC_BlinkLED@speed 018D                         _RF_ResetData 1B98  
                        _RF_Receiver 1AB2             i2TMR_ResetTimer0@TimerOn 0081  
                         _MTR_Rotate 0CF0           i2FSH_EraseBlock@WriteTries 008A  
              __end_ofi1_IR_LoadCode 3C10           ??i2_MSC_BufferCopyIntConst 008F  
             __end_of_RF_SavedTiming 2600              __size_ofi2_RF_ResetData 0008  
