

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Thu Aug 27 18:59:10 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F24J10
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	text55,global,reloc=2,class=CODE,delta=1
    75                           	psect	text56,global,reloc=2,class=CODE,delta=1
    76                           	psect	text57,global,reloc=2,class=CODE,delta=1
    77                           	psect	text58,global,reloc=2,class=CODE,delta=1
    78                           	psect	text59,global,reloc=2,class=CODE,delta=1
    79                           	psect	text60,global,reloc=2,class=CODE,delta=1
    80                           	psect	text61,global,reloc=2,class=CODE,delta=1
    81                           	psect	text62,global,reloc=2,class=CODE,delta=1
    82                           	psect	text63,global,reloc=2,class=CODE,delta=1
    83                           	psect	text64,global,reloc=2,class=CODE,delta=1
    84                           	psect	text65,global,reloc=2,class=CODE,delta=1
    85                           	psect	text66,global,reloc=2,class=CODE,delta=1
    86                           	psect	text67,global,reloc=2,class=CODE,delta=1
    87                           	psect	text68,global,reloc=2,class=CODE,delta=1
    88                           	psect	text69,global,reloc=2,class=CODE,delta=1
    89                           	psect	text70,global,reloc=2,class=CODE,delta=1
    90                           	psect	text71,global,reloc=2,class=CODE,delta=1
    91                           	psect	text72,global,reloc=2,class=CODE,delta=1
    92                           	psect	text73,global,reloc=2,class=CODE,delta=1
    93                           	psect	text74,global,reloc=2,class=CODE,delta=1
    94                           	psect	text75,global,reloc=2,class=CODE,delta=1
    95                           	psect	text76,global,reloc=2,class=CODE,delta=1
    96                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    97                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    98                           	psect	text78,global,reloc=2,class=CODE,delta=1
    99                           	psect	text79,global,reloc=2,class=CODE,delta=1
   100                           	psect	text80,global,reloc=2,class=CODE,delta=1
   101                           	psect	text81,global,reloc=2,class=CODE,delta=1
   102                           	psect	text82,global,reloc=2,class=CODE,delta=1
   103                           	psect	text83,global,reloc=2,class=CODE,delta=1
   104                           	psect	text84,global,reloc=2,class=CODE,delta=1
   105                           	psect	text85,global,reloc=2,class=CODE,delta=1
   106                           	psect	text86,global,reloc=2,class=CODE,delta=1
   107                           	psect	text87,global,reloc=2,class=CODE,delta=1
   108                           	psect	text88,global,reloc=2,class=CODE,delta=1
   109                           	psect	text89,global,reloc=2,class=CODE,delta=1
   110                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   111                           	psect	param0,global,class=BANK0,space=1,delta=1
   112  0000                     
   113                           	psect	idataCOMRAM
   114  002204                     __pidataCOMRAM:
   115                           	opt stack 0
   116                           
   117                           ;initializer for _ADC_CurrentSource
   118  002204  0A                 	db	10
   119                           
   120                           	psect	idataBANK0
   121  0021F4                     __pidataBANK0:
   122                           	opt stack 0
   123                           
   124                           ;initializer for _Rail_VIN
   125  0021F4  00                 	db	0
   126  0021F5  90                 	db	144
   127  0021F6  40                 	db	64
   128                           
   129                           ;initializer for _IR_Saved
   130  0021F7  5C                 	db	92
   131                           
   132                           ;initializer for _RF_Saved
   133  0021F8  5C                 	db	92
   134                           
   135                           ;initializer for _System_State
   136  0021F9  08                 	db	8
   137                           
   138                           	psect	mediumconst
   139  003ECA                     __pmediumconst:
   140                           	opt stack 0
   141  003ECA  00                 	db	0
   142  003ECB                     _PCB_Version:
   143                           	opt stack 0
   144  003ECB  50                 	db	80
   145  003ECC  43                 	db	67
   146  003ECD  42                 	db	66
   147  003ECE  20                 	db	32
   148  003ECF  72                 	db	114
   149  003ED0  65                 	db	101
   150  003ED1  76                 	db	118
   151  003ED2  41                 	db	65
   152  003ED3  00                 	db	0
   153  003ED4                     __end_of_PCB_Version:
   154                           	opt stack 0
   155  003ED4                     _PIONEER_PLUS_Timing:
   156                           	opt stack 0
   157  003ED4  2198               	dw	8600
   158  003ED6  1068               	dw	4200
   159  003ED8  01C2               	dw	450
   160  003EDA  04B0               	dw	1200
   161  003EDC  01C2               	dw	450
   162  003EDE  01C2               	dw	450
   163  003EE0  01C2               	dw	450
   164  003EE2  04B0               	dw	1200
   165  003EE4  01C2               	dw	450
   166  003EE6  04B0               	dw	1200
   167  003EE8  01C2               	dw	450
   168  003EEA  01C2               	dw	450
   169  003EEC  01C2               	dw	450
   170  003EEE  04B0               	dw	1200
   171  003EF0  01C2               	dw	450
   172  003EF2  01C2               	dw	450
   173  003EF4  01C2               	dw	450
   174  003EF6  04B0               	dw	1200
   175  003EF8  01C2               	dw	450
   176  003EFA  01C2               	dw	450
   177  003EFC  01C2               	dw	450
   178  003EFE  04B0               	dw	1200
   179  003F00  01C2               	dw	450
   180  003F02  01C2               	dw	450
   181  003F04  01C2               	dw	450
   182  003F06  01C2               	dw	450
   183  003F08  01C2               	dw	450
   184  003F0A  04B0               	dw	1200
   185  003F0C  01C2               	dw	450
   186  003F0E  01C2               	dw	450
   187  003F10  01C2               	dw	450
   188  003F12  04B0               	dw	1200
   189  003F14  01C2               	dw	450
   190  003F16  01C2               	dw	450
   191  003F18  01C2               	dw	450
   192  003F1A  01C2               	dw	450
   193  003F1C  01C2               	dw	450
   194  003F1E  04B0               	dw	1200
   195  003F20  01C2               	dw	450
   196  003F22  01C2               	dw	450
   197  003F24  01C2               	dw	450
   198  003F26  04B0               	dw	1200
   199  003F28  01C2               	dw	450
   200  003F2A  01C2               	dw	450
   201  003F2C  01C2               	dw	450
   202  003F2E  01C2               	dw	450
   203  003F30  01C2               	dw	450
   204  003F32  01C2               	dw	450
   205  003F34  01C2               	dw	450
   206  003F36  01C2               	dw	450
   207  003F38  01C2               	dw	450
   208  003F3A  04B0               	dw	1200
   209  003F3C  01C2               	dw	450
   210  003F3E  01C2               	dw	450
   211  003F40  01C2               	dw	450
   212  003F42  04B0               	dw	1200
   213  003F44  01C2               	dw	450
   214  003F46  01C2               	dw	450
   215  003F48  01C2               	dw	450
   216  003F4A  04B0               	dw	1200
   217  003F4C  01C2               	dw	450
   218  003F4E  04B0               	dw	1200
   219  003F50  01C2               	dw	450
   220  003F52  04B0               	dw	1200
   221  003F54  01C2               	dw	450
   222  003F56  04B0               	dw	1200
   223  003F58  01C2               	dw	450
   224  003F5A                     __end_of_PIONEER_PLUS_Timing:
   225                           	opt stack 0
   226  003F5A                     _CONF1_ChanE_Timing:
   227                           	opt stack 0
   228  003F5A  0342               	dw	834
   229  003F5C  0015               	dw	21
   230  003F5E  0050               	dw	80
   231  003F60  0016               	dw	22
   232  003F62  0050               	dw	80
   233  003F64  0015               	dw	21
   234  003F66  004E               	dw	78
   235  003F68  004F               	dw	79
   236  003F6A  001A               	dw	26
   237  003F6C  0016               	dw	22
   238  003F6E  004E               	dw	78
   239  003F70  004E               	dw	78
   240  003F72  001B               	dw	27
   241  003F74  0015               	dw	21
   242  003F76  004F               	dw	79
   243  003F78  004C               	dw	76
   244  003F7A  0019               	dw	25
   245  003F7C  0017               	dw	23
   246  003F7E  004F               	dw	79
   247  003F80  004B               	dw	75
   248  003F82  001B               	dw	27
   249  003F84  0015               	dw	21
   250  003F86  0051               	dw	81
   251  003F88  004B               	dw	75
   252  003F8A  0019               	dw	25
   253  003F8C  0016               	dw	22
   254  003F8E  0051               	dw	81
   255  003F90  0016               	dw	22
   256  003F92  004F               	dw	79
   257  003F94  0016               	dw	22
   258  003F96  0050               	dw	80
   259  003F98  0018               	dw	24
   260  003F9A  004F               	dw	79
   261  003F9C  004D               	dw	77
   262  003F9E  0019               	dw	25
   263  003FA0  004C               	dw	76
   264  003FA2  001B               	dw	27
   265  003FA4  0015               	dw	21
   266  003FA6  0050               	dw	80
   267  003FA8  0015               	dw	21
   268  003FAA  0051               	dw	81
   269  003FAC  0015               	dw	21
   270  003FAE  0050               	dw	80
   271  003FB0  0016               	dw	22
   272  003FB2  0050               	dw	80
   273  003FB4  0016               	dw	22
   274  003FB6  0051               	dw	81
   275  003FB8  0016               	dw	22
   276  003FBA  004F               	dw	79
   277  003FBC  0016               	dw	22
   278  003FBE                     __end_of_CONF1_ChanE_Timing:
   279                           	opt stack 0
   280  003FBE  00                 	db	0
   281  003FBF  80                 	db	128
   282  003FC0  3F                 	db	63
   283  003FC1  72                 	db	114
   284  003FC2  31                 	db	49
   285  003FC3  3F                 	db	63
   286  003FC4  FE                 	db	254
   287  003FC5  75                 	db	117
   288  003FC6  3E                 	db	62
   289  003FC7  58                 	db	88
   290  003FC8  63                 	db	99
   291  003FC9  3D                 	db	61
   292  003FCA  95                 	db	149
   293  003FCB  1D                 	db	29
   294  003FCC  3C                 	db	60
   295  003FCD  C5                 	db	197
   296  003FCE  AE                 	db	174
   297  003FCF  3A                 	db	58
   298  003FD0  79                 	db	121
   299  003FD1  21                 	db	33
   300  003FD2  39                 	db	57
   301  003FD3  94                 	db	148
   302  003FD4  80                 	db	128
   303  003FD5  37                 	db	55
   304  003FD6  93                 	db	147
   305  003FD7  A7                 	db	167
   306  003FD8  35                 	db	53
   307  003FD9  56                 	db	86
   308  003FDA  15                 	db	21
   309  003FDB  34                 	db	52
   310  003FDC                     __end_ofexp@coeff:
   311                           	opt stack 0
   312  003FDC  00                 	db	0
   313  003FDD  00                 	db	0
   314  003FDE  00                 	db	0
   315  003FDF  00                 	db	0
   316  003FE0  80                 	db	128
   317  003FE1  3F                 	db	63
   318  003FE2  F0                 	db	240
   319  003FE3  FF                 	db	255
   320  003FE4  BE                 	db	190
   321  003FE5  E2                 	db	226
   322  003FE6  A9                 	db	169
   323  003FE7  3E                 	db	62
   324  003FE8  83                 	db	131
   325  003FE9  76                 	db	118
   326  003FEA  BE                 	db	190
   327  003FEB  AE                 	db	174
   328  003FEC  2B                 	db	43
   329  003FED  3E                 	db	62
   330  003FEE  3C                 	db	60
   331  003FEF  C3                 	db	195
   332  003FF0  BD                 	db	189
   333  003FF1  D2                 	db	210
   334  003FF2  13                 	db	19
   335  003FF3  3D                 	db	61
   336  003FF4  78                 	db	120
   337  003FF5  D3                 	db	211
   338  003FF6  BB                 	db	187
   339  003FF7                     __end_oflog@coeff:
   340                           	opt stack 0
   341  0000                     _ADCON0bits	set	4034
   342  0000                     _ADCON1bits	set	4033
   343  0000                     _ADCON2bits	set	4032
   344  0000                     _ADRESH	set	4036
   345  0000                     _ADRESL	set	4035
   346  0000                     _INTCON2bits	set	4081
   347  0000                     _INTCON3bits	set	4080
   348  0000                     _INTCONbits	set	4082
   349  0000                     _IPR1bits	set	3999
   350  0000                     _LATA	set	3977
   351  0000                     _LATB	set	3978
   352  0000                     _LATC	set	3979
   353  0000                     _OSCCONbits	set	4051
   354  0000                     _OSCTUNEbits	set	3995
   355  0000                     _PIE1bits	set	3997
   356  0000                     _PIR1bits	set	3998
   357  0000                     _PORTB	set	3969
   358  0000                     _PR2	set	4043
   359  0000                     _RCONbits	set	4048
   360  0000                     _T0CONbits	set	4053
   361  0000                     _T1CONbits	set	4045
   362  0000                     _T2CONbits	set	4042
   363  0000                     _TMR0H	set	4055
   364  0000                     _TMR0L	set	4054
   365  0000                     _TMR1H	set	4047
   366  0000                     _TMR1L	set	4046
   367  0000                     _TMR2	set	4044
   368  0000                     _TRISAbits	set	3986
   369  0000                     _TRISBbits	set	3987
   370  0000                     _TRISCbits	set	3988
   371                           
   372                           ; #config settings
   373  003FF7  00                 	db	0	; dummy byte at the end
   374  0000                     
   375                           	psect	cinit
   376  001848                     __pcinit:
   377                           	opt stack 0
   378  001848                     start_initialization:
   379                           	opt stack 0
   380  001848                     __initialization:
   381                           	opt stack 0
   382                           
   383                           ; Clear objects allocated to BANK3 (160 bytes)
   384  001848  EE03  F000         	lfsr	0,__pbssBANK3
   385  00184C  0EA0               	movlw	160
   386  00184E                     clear_0:
   387  00184E  6AEE               	clrf	postinc0,c
   388  001850  06E8               	decf	wreg,f,c
   389  001852  E1FD               	bnz	clear_0
   390                           
   391                           ; Clear objects allocated to BANK2 (240 bytes)
   392  001854  EE02  F000         	lfsr	0,__pbssBANK2
   393  001858  0EF0               	movlw	240
   394  00185A                     clear_1:
   395  00185A  6AEE               	clrf	postinc0,c
   396  00185C  06E8               	decf	wreg,f,c
   397  00185E  E1FD               	bnz	clear_1
   398                           
   399                           ; Clear objects allocated to BANK1 (160 bytes)
   400  001860  EE01  F000         	lfsr	0,__pbssBANK1
   401  001864  0EA0               	movlw	160
   402  001866                     clear_2:
   403  001866  6AEE               	clrf	postinc0,c
   404  001868  06E8               	decf	wreg,f,c
   405  00186A  E1FD               	bnz	clear_2
   406                           
   407                           ; Clear objects allocated to BANK0 (16 bytes)
   408  00186C  EE00  F0B9         	lfsr	0,__pbssBANK0
   409  001870  0E10               	movlw	16
   410  001872                     clear_3:
   411  001872  6AEE               	clrf	postinc0,c
   412  001874  06E8               	decf	wreg,f,c
   413  001876  E1FD               	bnz	clear_3
   414                           
   415                           ; Clear objects allocated to COMRAM (19 bytes)
   416  001878  EE00  F048         	lfsr	0,__pbssCOMRAM
   417  00187C  0E13               	movlw	19
   418  00187E                     clear_4:
   419  00187E  6AEE               	clrf	postinc0,c
   420  001880  06E8               	decf	wreg,f,c
   421  001882  E1FD               	bnz	clear_4
   422                           
   423                           ; Initialize objects allocated to BANK0 (6 bytes)
   424                           ; load TBLPTR registers with __pidataBANK0
   425  001884  0EF4               	movlw	low __pidataBANK0
   426  001886  6EF6               	movwf	tblptrl,c
   427  001888  0E21               	movlw	high __pidataBANK0
   428  00188A  6EF7               	movwf	tblptrh,c
   429  00188C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   430  00188E  6EF8               	movwf	tblptru,c
   431  001890  EE00  F0C9         	lfsr	0,__pdataBANK0
   432  001894  EE10 F006          	lfsr	1,6
   433  001898                     copy_data0:
   434  001898  0009               	tblrd		*+
   435  00189A  CFF5 FFEE          	movff	tablat,postinc0
   436  00189E  50E5               	movf	postdec1,w,c
   437  0018A0  50E1               	movf	fsr1l,w,c
   438  0018A2  E1FA               	bnz	copy_data0
   439                           
   440                           ; Initialize objects allocated to COMRAM (1 bytes)
   441                           ; load TBLPTR registers with __pidataCOMRAM
   442  0018A4  0E04               	movlw	low __pidataCOMRAM
   443  0018A6  6EF6               	movwf	tblptrl,c
   444  0018A8  0E22               	movlw	high __pidataCOMRAM
   445  0018AA  6EF7               	movwf	tblptrh,c
   446  0018AC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   447  0018AE  6EF8               	movwf	tblptru,c
   448  0018B0  0009               	tblrd		*+	;fetch initializer
   449  0018B2  CFF5 F05B          	movff	tablat,__pdataCOMRAM
   450  0018B6                     end_of_initialization:
   451                           	opt stack 0
   452  0018B6                     __end_of__initialization:
   453                           	opt stack 0
   454  0018B6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   455  0018B8  6EF8               	movwf	tblptru,c
   456  0018BA  0100               	movlb	0
   457  0018BC  EFE2  F003         	goto	_main	;jump to C main() function
   458                           tblptru	equ	0xFF8
   459                           tblptrh	equ	0xFF7
   460                           tblptrl	equ	0xFF6
   461                           tablat	equ	0xFF5
   462                           postinc0	equ	0xFEE
   463                           wreg	equ	0xFE8
   464                           postdec1	equ	0xFE5
   465                           fsr1l	equ	0xFE1
   466                           
   467                           	psect	bssCOMRAM
   468  000048                     __pbssCOMRAM:
   469                           	opt stack 0
   470  000048                     _Rail_RSSI:
   471                           	opt stack 0
   472  000048                     	ds	3
   473  00004B                     _IR_SyncHigh:
   474                           	opt stack 0
   475  00004B                     	ds	2
   476  00004D                     _IR_SyncLow:
   477                           	opt stack 0
   478  00004D                     	ds	2
   479  00004F                     _Timer2Post:
   480                           	opt stack 0
   481  00004F                     	ds	2
   482  000051                     _Timer2PostCount:
   483                           	opt stack 0
   484  000051                     	ds	2
   485  000053                     _errno:
   486                           	opt stack 0
   487  000053                     	ds	2
   488  000055                     _ButtonChange:
   489                           	opt stack 0
   490  000055                     	ds	1
   491  000056                     _IRChange:
   492                           	opt stack 0
   493  000056                     	ds	1
   494  000057                     _IRStarted:
   495                           	opt stack 0
   496  000057                     	ds	1
   497  000058                     _IR_CodeSize:
   498                           	opt stack 0
   499  000058                     	ds	1
   500  000059                     _IR_DataPlace:
   501                           	opt stack 0
   502  000059                     	ds	1
   503  00005A                     _Timer2Use:
   504                           	opt stack 0
   505  00005A                     	ds	1
   506                           tblptru	equ	0xFF8
   507                           tblptrh	equ	0xFF7
   508                           tblptrl	equ	0xFF6
   509                           tablat	equ	0xFF5
   510                           postinc0	equ	0xFEE
   511                           wreg	equ	0xFE8
   512                           postdec1	equ	0xFE5
   513                           fsr1l	equ	0xFE1
   514                           
   515                           	psect	dataCOMRAM
   516  00005B                     __pdataCOMRAM:
   517                           	opt stack 0
   518  00005B                     _ADC_CurrentSource:
   519                           	opt stack 0
   520  00005B                     	ds	1
   521                           tblptru	equ	0xFF8
   522                           tblptrh	equ	0xFF7
   523                           tblptrl	equ	0xFF6
   524                           tablat	equ	0xFF5
   525                           postinc0	equ	0xFEE
   526                           wreg	equ	0xFE8
   527                           postdec1	equ	0xFE5
   528                           fsr1l	equ	0xFE1
   529                           
   530                           	psect	bssBANK0
   531  0000B9                     __pbssBANK0:
   532                           	opt stack 0
   533  0000B9                     _ADC_SampleCount:
   534                           	opt stack 0
   535  0000B9                     	ds	2
   536  0000BB                     _RF_SyncHigh:
   537                           	opt stack 0
   538  0000BB                     	ds	2
   539  0000BD                     _RF_SyncLow:
   540                           	opt stack 0
   541  0000BD                     	ds	2
   542  0000BF                     _ButtonValue_prev:
   543                           	opt stack 0
   544  0000BF                     	ds	1
   545  0000C0                     _Button_Data:
   546                           	opt stack 0
   547  0000C0                     	ds	1
   548  0000C1                     _DC_Motor:
   549                           	opt stack 0
   550  0000C1                     	ds	1
   551  0000C2                     _IRValue_prev:
   552                           	opt stack 0
   553  0000C2                     	ds	1
   554  0000C3                     _IR_Data:
   555                           	opt stack 0
   556  0000C3                     	ds	1
   557  0000C4                     _RFStarted:
   558                           	opt stack 0
   559  0000C4                     	ds	1
   560  0000C5                     _RF_CodeSize:
   561                           	opt stack 0
   562  0000C5                     	ds	1
   563  0000C6                     _RF_Data:
   564                           	opt stack 0
   565  0000C6                     	ds	1
   566  0000C7                     _RF_DataPlace:
   567                           	opt stack 0
   568  0000C7                     	ds	1
   569  0000C8                     _System_State_Change:
   570                           	opt stack 0
   571  0000C8                     	ds	1
   572                           tblptru	equ	0xFF8
   573                           tblptrh	equ	0xFF7
   574                           tblptrl	equ	0xFF6
   575                           tablat	equ	0xFF5
   576                           postinc0	equ	0xFEE
   577                           wreg	equ	0xFE8
   578                           postdec1	equ	0xFE5
   579                           fsr1l	equ	0xFE1
   580                           
   581                           	psect	dataBANK0
   582  0000C9                     __pdataBANK0:
   583                           	opt stack 0
   584  0000C9                     _Rail_VIN:
   585                           	opt stack 0
   586  0000C9                     	ds	3
   587  0000CC                     _IR_Saved:
   588                           	opt stack 0
   589  0000CC                     	ds	1
   590  0000CD                     _RF_Saved:
   591                           	opt stack 0
   592  0000CD                     	ds	1
   593  0000CE                     _System_State:
   594                           	opt stack 0
   595  0000CE                     	ds	1
   596                           tblptru	equ	0xFF8
   597                           tblptrh	equ	0xFF7
   598                           tblptrl	equ	0xFF6
   599                           tablat	equ	0xFF5
   600                           postinc0	equ	0xFEE
   601                           wreg	equ	0xFE8
   602                           postdec1	equ	0xFE5
   603                           fsr1l	equ	0xFE1
   604                           
   605                           	psect	bssBANK1
   606  000100                     __pbssBANK1:
   607                           	opt stack 0
   608  000100                     _IR_SavedTiming:
   609                           	opt stack 0
   610  000100                     	ds	160
   611                           tblptru	equ	0xFF8
   612                           tblptrh	equ	0xFF7
   613                           tblptrl	equ	0xFF6
   614                           tablat	equ	0xFF5
   615                           postinc0	equ	0xFEE
   616                           wreg	equ	0xFE8
   617                           postdec1	equ	0xFE5
   618                           fsr1l	equ	0xFE1
   619                           
   620                           	psect	bssBANK2
   621  000200                     __pbssBANK2:
   622                           	opt stack 0
   623  000200                     _RF_DataTiming:
   624                           	opt stack 0
   625  000200                     	ds	120
   626  000278                     _RF_SavedTiming:
   627                           	opt stack 0
   628  000278                     	ds	120
   629                           tblptru	equ	0xFF8
   630                           tblptrh	equ	0xFF7
   631                           tblptrl	equ	0xFF6
   632                           tablat	equ	0xFF5
   633                           postinc0	equ	0xFEE
   634                           wreg	equ	0xFE8
   635                           postdec1	equ	0xFE5
   636                           fsr1l	equ	0xFE1
   637                           
   638                           	psect	bssBANK3
   639  000300                     __pbssBANK3:
   640                           	opt stack 0
   641  000300                     _IR_DataTiming:
   642                           	opt stack 0
   643  000300                     	ds	160
   644                           tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           postinc0	equ	0xFEE
   649                           wreg	equ	0xFE8
   650                           postdec1	equ	0xFE5
   651                           fsr1l	equ	0xFE1
   652                           
   653                           	psect	cstackBANK1
   654  0001A0                     __pcstackBANK1:
   655                           	opt stack 0
   656  0001A0                     ??_MSC_DelayMS:
   657  0001A0                     ??___ftge:
   658  0001A0                     ??___fttol:
   659  0001A0                     MSC_BufferCopyIntConst@from:
   660                           	opt stack 0
   661                           
   662                           ; 2 bytes @ 0x0
   663  0001A0                     	ds	1
   664  0001A1                     MSC_DelayMS@i:
   665                           	opt stack 0
   666                           
   667                           ; 4 bytes @ 0x1
   668  0001A1                     	ds	1
   669  0001A2                     MSC_BufferCopyIntConst@to:
   670                           	opt stack 0
   671                           
   672                           ; 2 bytes @ 0x2
   673  0001A2                     	ds	2
   674  0001A4                     MSC_BufferCopyIntConst@count:
   675                           	opt stack 0
   676                           
   677                           ; 2 bytes @ 0x4
   678  0001A4                     	ds	1
   679  0001A5                     ___fttol@sign1:
   680                           	opt stack 0
   681  0001A5                     MSC_BlinkLED@blink:
   682                           	opt stack 0
   683                           
   684                           ; 2 bytes @ 0x5
   685  0001A5                     	ds	1
   686  0001A6                     MSC_BufferCopyIntConst@shift:
   687                           	opt stack 0
   688  0001A6                     ___fttol@lval:
   689                           	opt stack 0
   690                           
   691                           ; 4 bytes @ 0x6
   692  0001A6                     	ds	1
   693  0001A7                     ??_MSC_BlinkLED:
   694                           
   695                           ; 0 bytes @ 0x7
   696  0001A7                     	ds	2
   697  0001A9                     MSC_BlinkLED@i:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x9
   701  0001A9                     	ds	1
   702  0001AA                     ___fttol@exp1:
   703                           	opt stack 0
   704                           
   705                           ; 1 bytes @ 0xA
   706  0001AA                     	ds	1
   707  0001AB                     RF_LoadDefaultCode@Low:
   708                           	opt stack 0
   709  0001AB                     IR_LoadDefaultCode@Low:
   710                           	opt stack 0
   711                           
   712                           ; 3 bytes @ 0xB
   713  0001AB                     	ds	3
   714  0001AE                     RF_LoadDefaultCode@High:
   715                           	opt stack 0
   716  0001AE                     IR_LoadDefaultCode@High:
   717                           	opt stack 0
   718                           
   719                           ; 3 bytes @ 0xE
   720  0001AE                     	ds	3
   721                           tblptru	equ	0xFF8
   722                           tblptrh	equ	0xFF7
   723                           tblptrl	equ	0xFF6
   724                           tablat	equ	0xFF5
   725                           postinc0	equ	0xFEE
   726                           wreg	equ	0xFE8
   727                           postdec1	equ	0xFE5
   728                           fsr1l	equ	0xFE1
   729                           
   730                           	psect	cstackBANK0
   731  000080                     __pcstackBANK0:
   732                           	opt stack 0
   733  000080                     ?i2___ftpack:
   734                           	opt stack 0
   735  000080                     i2TMR_Timer0@state:
   736                           	opt stack 0
   737  000080                     i2MSC_CleanBufferInt@data:
   738                           	opt stack 0
   739  000080                     i2___ftpack@arg:
   740                           	opt stack 0
   741                           
   742                           ; 3 bytes @ 0x0
   743  000080                     	ds	1
   744  000081                     i2TMR_ResetTimer0@TimerOn:
   745                           	opt stack 0
   746                           
   747                           ; 1 bytes @ 0x1
   748  000081                     	ds	1
   749  000082                     i2MSC_CleanBufferInt@count:
   750                           	opt stack 0
   751                           
   752                           ; 2 bytes @ 0x2
   753  000082                     	ds	1
   754  000083                     i2___ftpack@exp:
   755                           	opt stack 0
   756                           
   757                           ; 1 bytes @ 0x3
   758  000083                     	ds	1
   759  000084                     i2___ftpack@sign:
   760                           	opt stack 0
   761  000084                     i2MSC_CleanBufferInt@i:
   762                           	opt stack 0
   763                           
   764                           ; 2 bytes @ 0x4
   765  000084                     	ds	1
   766  000085                     ??i2___ftpack:
   767                           
   768                           ; 0 bytes @ 0x5
   769  000085                     	ds	1
   770  000086                     i2MSC_BufferCopyInt@from:
   771                           	opt stack 0
   772                           
   773                           ; 2 bytes @ 0x6
   774  000086                     	ds	2
   775  000088                     ?i2___lwtoft:
   776                           	opt stack 0
   777  000088                     i2MSC_BufferCopyInt@to:
   778                           	opt stack 0
   779  000088                     i2___lwtoft@c:
   780                           	opt stack 0
   781                           
   782                           ; 2 bytes @ 0x8
   783  000088                     	ds	2
   784  00008A                     i2MSC_BufferCopyInt@count:
   785                           	opt stack 0
   786                           
   787                           ; 2 bytes @ 0xA
   788  00008A                     	ds	1
   789  00008B                     ?i2___ftmul:
   790                           	opt stack 0
   791  00008B                     i2___ftge@ff1:
   792                           	opt stack 0
   793  00008B                     i2___ftmul@f1:
   794                           	opt stack 0
   795                           
   796                           ; 3 bytes @ 0xB
   797  00008B                     	ds	1
   798  00008C                     i2MSC_BufferCopyInt@shift:
   799                           	opt stack 0
   800                           
   801                           ; 2 bytes @ 0xC
   802  00008C                     	ds	2
   803  00008E                     i2___ftge@ff2:
   804                           	opt stack 0
   805  00008E                     i2___ftmul@f2:
   806                           	opt stack 0
   807                           
   808                           ; 3 bytes @ 0xE
   809  00008E                     	ds	2
   810  000090                     i2MSC_BufferCopyInt@i:
   811                           	opt stack 0
   812                           
   813                           ; 2 bytes @ 0x10
   814  000090                     	ds	1
   815  000091                     ??i2___ftge:
   816  000091                     ??i2___ftmul:
   817                           
   818                           ; 0 bytes @ 0x11
   819  000091                     	ds	3
   820  000094                     i2___ftmul@exp:
   821                           	opt stack 0
   822                           
   823                           ; 1 bytes @ 0x14
   824  000094                     	ds	1
   825  000095                     i2___ftmul@f3_as_product:
   826                           	opt stack 0
   827                           
   828                           ; 3 bytes @ 0x15
   829  000095                     	ds	3
   830  000098                     i2___ftmul@cntr:
   831                           	opt stack 0
   832                           
   833                           ; 1 bytes @ 0x18
   834  000098                     	ds	1
   835  000099                     i2___ftmul@sign:
   836                           	opt stack 0
   837                           
   838                           ; 1 bytes @ 0x19
   839  000099                     	ds	1
   840  00009A                     RF_CheckCode@Low:
   841                           	opt stack 0
   842                           
   843                           ; 3 bytes @ 0x1A
   844  00009A                     	ds	3
   845  00009D                     RF_CheckCode@High:
   846                           	opt stack 0
   847                           
   848                           ; 3 bytes @ 0x1D
   849  00009D                     	ds	3
   850  0000A0                     RF_CheckCode@i:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x20
   854  0000A0                     	ds	1
   855  0000A1                     ??_high_isr:
   856                           
   857                           ; 0 bytes @ 0x21
   858  0000A1                     	ds	14
   859  0000AF                     high_isr@RFtemp:
   860                           	opt stack 0
   861                           
   862                           ; 2 bytes @ 0x2F
   863  0000AF                     	ds	2
   864  0000B1                     ?___fttol:
   865                           	opt stack 0
   866  0000B1                     RF_DataInt@state:
   867                           	opt stack 0
   868  0000B1                     RF_Receiver@state:
   869                           	opt stack 0
   870  0000B1                     RF_SetBandwidth@band:
   871                           	opt stack 0
   872  0000B1                     RF_SetSquelch@state:
   873                           	opt stack 0
   874  0000B1                     MTR_IN1@state:
   875                           	opt stack 0
   876  0000B1                     MTR_IN2@state:
   877                           	opt stack 0
   878  0000B1                     IR_ReadReceiver@value:
   879                           	opt stack 0
   880  0000B1                     LDO_Pass@state:
   881                           	opt stack 0
   882  0000B1                     BUT_IR_PinChangeInt@state:
   883                           	opt stack 0
   884  0000B1                     BUT_ReadButton@value:
   885                           	opt stack 0
   886  0000B1                     TMR_Timer0@state:
   887                           	opt stack 0
   888  0000B1                     TMR_Timer1@state:
   889                           	opt stack 0
   890  0000B1                     TMR_Timer2@state:
   891                           	opt stack 0
   892  0000B1                     TMR_Timer0Int@state:
   893                           	opt stack 0
   894  0000B1                     TMR_Timer1Int@state:
   895                           	opt stack 0
   896  0000B1                     TMR_Timer2Int@state:
   897                           	opt stack 0
   898  0000B1                     TMR_Timer1Osc@state:
   899                           	opt stack 0
   900  0000B1                     ADC_Module@state:
   901                           	opt stack 0
   902  0000B1                     ADC_ConversionInt@state:
   903                           	opt stack 0
   904  0000B1                     MSC_DelayNOP@NOPs:
   905                           	opt stack 0
   906  0000B1                     MSC_CleanBufferInt@data:
   907                           	opt stack 0
   908  0000B1                     ___ftge@ff1:
   909                           	opt stack 0
   910  0000B1                     ___fttol@f1:
   911                           	opt stack 0
   912                           
   913                           ; 3 bytes @ 0x31
   914  0000B1                     	ds	1
   915  0000B2                     TMR_ResetTimer0@TimerOn:
   916                           	opt stack 0
   917  0000B2                     TMR_ResetTimer1@TimerOn:
   918                           	opt stack 0
   919                           
   920                           ; 1 bytes @ 0x32
   921  0000B2                     	ds	1
   922  0000B3                     TMR_Timer1Function@mode:
   923                           	opt stack 0
   924  0000B3                     MSC_DelayNOP@i:
   925                           	opt stack 0
   926  0000B3                     MSC_CleanBufferInt@count:
   927                           	opt stack 0
   928                           
   929                           ; 2 bytes @ 0x33
   930  0000B3                     	ds	1
   931  0000B4                     ___ftge@ff2:
   932                           	opt stack 0
   933                           
   934                           ; 3 bytes @ 0x34
   935  0000B4                     	ds	1
   936  0000B5                     MSC_CleanBufferInt@i:
   937                           	opt stack 0
   938  0000B5                     MSC_DelayMS@US:
   939                           	opt stack 0
   940                           
   941                           ; 4 bytes @ 0x35
   942  0000B5                     	ds	2
   943  0000B7                     MSC_BufferCopyIntConst@i:
   944                           	opt stack 0
   945                           
   946                           ; 2 bytes @ 0x37
   947  0000B7                     	ds	2
   948  0000B9                     tblptru	equ	0xFF8
   949                           tblptrh	equ	0xFF7
   950                           tblptrl	equ	0xFF6
   951                           tablat	equ	0xFF5
   952                           postinc0	equ	0xFEE
   953                           wreg	equ	0xFE8
   954                           postdec1	equ	0xFE5
   955                           fsr1l	equ	0xFE1
   956                           
   957                           ; 0 bytes @ 0x39
   958                           
   959                           	psect	cstackCOMRAM
   960  000001                     __pcstackCOMRAM:
   961                           	opt stack 0
   962  000001                     ?___ftpack:
   963                           	opt stack 0
   964  000001                     i1RF_DataInt@state:
   965                           	opt stack 0
   966  000001                     i1IR_ReadReceiver@value:
   967                           	opt stack 0
   968  000001                     i1BUT_IR_PinChangeInt@state:
   969                           	opt stack 0
   970  000001                     i1BUT_ReadButton@value:
   971                           	opt stack 0
   972  000001                     i1TMR_Timer0@state:
   973                           	opt stack 0
   974  000001                     i1TMR_Timer1@state:
   975                           	opt stack 0
   976  000001                     i1TMR_Timer2@state:
   977                           	opt stack 0
   978  000001                     i1TMR_Timer0Int@state:
   979                           	opt stack 0
   980  000001                     i1MSC_CleanBufferInt@data:
   981                           	opt stack 0
   982  000001                     ___ftpack@arg:
   983                           	opt stack 0
   984                           
   985                           ; 3 bytes @ 0x0
   986  000001                     	ds	1
   987  000002                     TMR_ResetTimer2@TimerOn:
   988                           	opt stack 0
   989  000002                     i1TMR_ResetTimer1@TimerOn:
   990                           	opt stack 0
   991                           
   992                           ; 1 bytes @ 0x1
   993  000002                     	ds	1
   994  000003                     TMR_Timer2Start@time:
   995                           	opt stack 0
   996  000003                     i1MSC_CleanBufferInt@count:
   997                           	opt stack 0
   998                           
   999                           ; 2 bytes @ 0x2
  1000  000003                     	ds	1
  1001  000004                     ___ftpack@exp:
  1002                           	opt stack 0
  1003                           
  1004                           ; 1 bytes @ 0x3
  1005  000004                     	ds	1
  1006  000005                     ___ftpack@sign:
  1007                           	opt stack 0
  1008  000005                     i1MSC_CleanBufferInt@i:
  1009                           	opt stack 0
  1010                           
  1011                           ; 2 bytes @ 0x4
  1012  000005                     	ds	1
  1013  000006                     ??___ftpack:
  1014                           
  1015                           ; 0 bytes @ 0x5
  1016  000006                     	ds	1
  1017  000007                     MSC_BufferCopyInt@from:
  1018                           	opt stack 0
  1019                           
  1020                           ; 2 bytes @ 0x6
  1021  000007                     	ds	2
  1022  000009                     ?___lwtoft:
  1023                           	opt stack 0
  1024  000009                     MSC_BufferCopyInt@to:
  1025                           	opt stack 0
  1026  000009                     ___lwtoft@c:
  1027                           	opt stack 0
  1028                           
  1029                           ; 2 bytes @ 0x8
  1030  000009                     	ds	2
  1031  00000B                     MSC_BufferCopyInt@count:
  1032                           	opt stack 0
  1033                           
  1034                           ; 2 bytes @ 0xA
  1035  00000B                     	ds	1
  1036  00000C                     ?___ftdiv:
  1037                           	opt stack 0
  1038  00000C                     ___ftdiv@f1:
  1039                           	opt stack 0
  1040  00000C                     i1___ftge@ff1:
  1041                           	opt stack 0
  1042                           
  1043                           ; 3 bytes @ 0xB
  1044  00000C                     	ds	1
  1045  00000D                     MSC_BufferCopyInt@shift:
  1046                           	opt stack 0
  1047                           
  1048                           ; 2 bytes @ 0xC
  1049  00000D                     	ds	2
  1050  00000F                     ___ftdiv@f2:
  1051                           	opt stack 0
  1052  00000F                     i1___ftge@ff2:
  1053                           	opt stack 0
  1054                           
  1055                           ; 3 bytes @ 0xE
  1056  00000F                     	ds	2
  1057  000011                     MSC_BufferCopyInt@i:
  1058                           	opt stack 0
  1059                           
  1060                           ; 2 bytes @ 0x10
  1061  000011                     	ds	1
  1062  000012                     ??___ftdiv:
  1063  000012                     ??i1___ftge:
  1064                           
  1065                           ; 0 bytes @ 0x11
  1066  000012                     	ds	3
  1067  000015                     ___ftdiv@cntr:
  1068                           	opt stack 0
  1069                           
  1070                           ; 1 bytes @ 0x14
  1071  000015                     	ds	1
  1072  000016                     ___ftdiv@f3:
  1073                           	opt stack 0
  1074                           
  1075                           ; 3 bytes @ 0x15
  1076  000016                     	ds	3
  1077  000019                     ___ftdiv@exp:
  1078                           	opt stack 0
  1079                           
  1080                           ; 1 bytes @ 0x18
  1081  000019                     	ds	1
  1082  00001A                     ___ftdiv@sign:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x19
  1086  00001A                     	ds	1
  1087  00001B                     ?___ftmul:
  1088                           	opt stack 0
  1089  00001B                     ___ftmul@f1:
  1090                           	opt stack 0
  1091                           
  1092                           ; 3 bytes @ 0x1A
  1093  00001B                     	ds	3
  1094  00001E                     ___ftmul@f2:
  1095                           	opt stack 0
  1096                           
  1097                           ; 3 bytes @ 0x1D
  1098  00001E                     	ds	3
  1099  000021                     ??___ftmul:
  1100                           
  1101                           ; 0 bytes @ 0x20
  1102  000021                     	ds	3
  1103  000024                     ___ftmul@exp:
  1104                           	opt stack 0
  1105                           
  1106                           ; 1 bytes @ 0x23
  1107  000024                     	ds	1
  1108  000025                     ___ftmul@f3_as_product:
  1109                           	opt stack 0
  1110                           
  1111                           ; 3 bytes @ 0x24
  1112  000025                     	ds	3
  1113  000028                     ___ftmul@cntr:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0x27
  1117  000028                     	ds	1
  1118  000029                     ___ftmul@sign:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0x28
  1122  000029                     	ds	1
  1123  00002A                     ADC_CalculateVoltage@ADCcounts:
  1124                           	opt stack 0
  1125                           
  1126                           ; 2 bytes @ 0x29
  1127  00002A                     	ds	2
  1128  00002C                     IR_CheckCode@Low:
  1129                           	opt stack 0
  1130  00002C                     ADC_CalculateVoltage@Voltage:
  1131                           	opt stack 0
  1132                           
  1133                           ; 3 bytes @ 0x2B
  1134  00002C                     	ds	3
  1135  00002F                     IR_CheckCode@High:
  1136                           	opt stack 0
  1137                           
  1138                           ; 3 bytes @ 0x2E
  1139  00002F                     	ds	3
  1140  000032                     IR_CheckCode@i:
  1141                           	opt stack 0
  1142                           
  1143                           ; 1 bytes @ 0x31
  1144  000032                     	ds	1
  1145  000033                     ??_low_isr:
  1146                           
  1147                           ; 0 bytes @ 0x32
  1148  000033                     	ds	17
  1149  000044                     low_isr@IR_state:
  1150                           	opt stack 0
  1151                           
  1152                           ; 1 bytes @ 0x43
  1153  000044                     	ds	1
  1154  000045                     low_isr@button_state:
  1155                           	opt stack 0
  1156                           
  1157                           ; 1 bytes @ 0x44
  1158  000045                     	ds	1
  1159  000046                     low_isr@IRtemp:
  1160                           	opt stack 0
  1161                           
  1162                           ; 2 bytes @ 0x45
  1163  000046                     	ds	2
  1164                           tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           postinc0	equ	0xFEE
  1169                           wreg	equ	0xFE8
  1170                           postdec1	equ	0xFE5
  1171                           fsr1l	equ	0xFE1
  1172                           
  1173 ;;
  1174 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1175 ;;
  1176 ;; *************** function _main *****************
  1177 ;; Defined at:
  1178 ;;		line 73 in file "main.c"
  1179 ;; Parameters:    Size  Location     Type
  1180 ;;		None
  1181 ;; Auto vars:     Size  Location     Type
  1182 ;;		None
  1183 ;; Return value:  Size  Location     Type
  1184 ;;                  2   46[None  ] int 
  1185 ;; Registers used:
  1186 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1187 ;; Tracked objects:
  1188 ;;		On entry : 0/0
  1189 ;;		On exit  : 0/0
  1190 ;;		Unchanged: 0/0
  1191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  1192 ;;      Params:         0       0       0       0       0
  1193 ;;      Locals:         0       0       0       0       0
  1194 ;;      Temps:          0       0       0       0       0
  1195 ;;      Totals:         0       0       0       0       0
  1196 ;;Total ram usage:        0 bytes
  1197 ;; Hardware stack levels required when called:   14
  1198 ;; This function calls:
  1199 ;;		_ADC_Start
  1200 ;;		_IR_LoadDefaultCode
  1201 ;;		_Init_App
  1202 ;;		_Init_System
  1203 ;;		_MSC_BlinkLED
  1204 ;;		_MSC_DelayMS
  1205 ;;		_MTR_Rotate
  1206 ;;		_RF_LoadDefaultCode
  1207 ;;		_SYS_ConfigureOscillator
  1208 ;;		___ftge
  1209 ;; This function is called by:
  1210 ;;		Startup code after reset
  1211 ;; This function uses a non-reentrant model
  1212 ;;
  1213                           
  1214                           	psect	text0
  1215  0007C4                     __ptext0:
  1216                           	opt stack 0
  1217  0007C4                     _main:
  1218                           	opt stack 17
  1219                           
  1220                           ;main.c: 76: SYS_ConfigureOscillator();
  1221                           
  1222                           ;incstack = 0
  1223  0007C4  ECF1  F010         	call	_SYS_ConfigureOscillator	;wreg free
  1224                           
  1225                           ;main.c: 77: Init_App();
  1226  0007C8  EC84  F00D         	call	_Init_App	;wreg free
  1227                           
  1228                           ;main.c: 78: Init_System();
  1229  0007CC  EC2D  F00E         	call	_Init_System	;wreg free
  1230                           
  1231                           ;main.c: 81: if(RF_Saved == 92)
  1232  0007D0  0E5C               	movlw	92
  1233  0007D2  0100               	movlb	0	; () banked
  1234  0007D4  19CD               	xorwf	_RF_Saved& (0+255),w,b
  1235  0007D6  A4D8               	btfss	status,2,c
  1236  0007D8  D00A               	goto	l5738
  1237                           
  1238                           ; BSR set to: 0
  1239                           ;main.c: 82: {
  1240                           ;main.c: 83: RF_LoadDefaultCode();
  1241  0007DA  ECDA  F00A         	call	_RF_LoadDefaultCode	;wreg free
  1242                           
  1243                           ;main.c: 84: MSC_BlinkLED(10);
  1244  0007DE  0E00               	movlw	0
  1245  0007E0  0101               	movlb	1	; () banked
  1246  0007E2  6FA6               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  1247  0007E4  0E0A               	movlw	10
  1248  0007E6  6FA5               	movwf	MSC_BlinkLED@blink& (0+255),b
  1249  0007E8  EC1C  F00D         	call	_MSC_BlinkLED	;wreg free
  1250                           
  1251                           ;main.c: 85: }
  1252  0007EC  D008               	goto	l5740
  1253  0007EE                     l5738:
  1254                           
  1255                           ;main.c: 86: else
  1256                           ;main.c: 87: {
  1257                           ;main.c: 88: MSC_BlinkLED(4);
  1258  0007EE  0E00               	movlw	0
  1259  0007F0  0101               	movlb	1	; () banked
  1260  0007F2  6FA6               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  1261  0007F4  0E04               	movlw	4
  1262  0007F6  6FA5               	movwf	MSC_BlinkLED@blink& (0+255),b
  1263  0007F8  EC1C  F00D         	call	_MSC_BlinkLED	;wreg free
  1264  0007FC  D000               	goto	l5740
  1265  0007FE                     l5740:
  1266                           
  1267                           ;main.c: 89: }
  1268                           ;main.c: 90: (LATC &= ~0x10);
  1269  0007FE  988B               	bcf	3979,4,c	;volatile
  1270                           
  1271                           ;main.c: 91: MSC_DelayMS(1000);
  1272  000800  0EE8               	movlw	232
  1273  000802  0100               	movlb	0	; () banked
  1274  000804  6FB5               	movwf	MSC_DelayMS@US& (0+255),b
  1275  000806  0E03               	movlw	3
  1276  000808  6FB6               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  1277  00080A  0E00               	movlw	0
  1278  00080C  6FB7               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  1279  00080E  0E00               	movlw	0
  1280  000810  6FB8               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  1281  000812  EC94  F00C         	call	_MSC_DelayMS	;wreg free
  1282                           
  1283                           ;main.c: 94: if(IR_Saved == 92)
  1284  000816  0E5C               	movlw	92
  1285  000818  0100               	movlb	0	; () banked
  1286  00081A  19CC               	xorwf	_IR_Saved& (0+255),w,b
  1287  00081C  A4D8               	btfss	status,2,c
  1288  00081E  D00A               	goto	l5750
  1289                           
  1290                           ; BSR set to: 0
  1291                           ;main.c: 95: {
  1292                           ;main.c: 96: IR_LoadDefaultCode();
  1293  000820  EC32  F00B         	call	_IR_LoadDefaultCode	;wreg free
  1294                           
  1295                           ;main.c: 97: MSC_BlinkLED(10);
  1296  000824  0E00               	movlw	0
  1297  000826  0101               	movlb	1	; () banked
  1298  000828  6FA6               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  1299  00082A  0E0A               	movlw	10
  1300  00082C  6FA5               	movwf	MSC_BlinkLED@blink& (0+255),b
  1301  00082E  EC1C  F00D         	call	_MSC_BlinkLED	;wreg free
  1302                           
  1303                           ;main.c: 98: }
  1304  000832  D008               	goto	l5752
  1305  000834                     l5750:
  1306                           
  1307                           ;main.c: 99: else
  1308                           ;main.c: 100: {
  1309                           ;main.c: 101: MSC_BlinkLED(4);
  1310  000834  0E00               	movlw	0
  1311  000836  0101               	movlb	1	; () banked
  1312  000838  6FA6               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  1313  00083A  0E04               	movlw	4
  1314  00083C  6FA5               	movwf	MSC_BlinkLED@blink& (0+255),b
  1315  00083E  EC1C  F00D         	call	_MSC_BlinkLED	;wreg free
  1316  000842  D000               	goto	l5752
  1317  000844                     l5752:
  1318                           
  1319                           ;main.c: 102: }
  1320                           ;main.c: 103: (LATC &= ~0x10);
  1321  000844  988B               	bcf	3979,4,c	;volatile
  1322  000846  D000               	goto	l5754
  1323  000848                     l5754:
  1324                           
  1325                           ;main.c: 106: {
  1326                           ;main.c: 107: if(System_State == 8)
  1327  000848  0E08               	movlw	8
  1328  00084A  0100               	movlb	0	; () banked
  1329  00084C  19CE               	xorwf	_System_State& (0+255),w,b
  1330  00084E  A4D8               	btfss	status,2,c
  1331  000850  D079               	goto	l5800
  1332                           
  1333                           ; BSR set to: 0
  1334                           ;main.c: 108: {
  1335                           ;main.c: 110: if(System_State_Change)
  1336  000852  0100               	movlb	0	; () banked
  1337  000854  51C8               	movf	_System_State_Change& (0+255),w,b
  1338  000856  B4D8               	btfsc	status,2,c
  1339  000858  D025               	goto	l5774
  1340                           
  1341                           ; BSR set to: 0
  1342                           ;main.c: 111: {
  1343                           ;main.c: 113: (LATC &= ~0x10);
  1344  00085A  988B               	bcf	3979,4,c	;volatile
  1345                           
  1346                           ; BSR set to: 0
  1347                           ;main.c: 114: if(RF_Saved == 90)
  1348  00085C  0E5A               	movlw	90
  1349  00085E  0100               	movlb	0	; () banked
  1350  000860  19CD               	xorwf	_RF_Saved& (0+255),w,b
  1351  000862  A4D8               	btfss	status,2,c
  1352  000864  D00B               	goto	l5766
  1353                           
  1354                           ; BSR set to: 0
  1355                           ;main.c: 115: {
  1356                           ;main.c: 116: MSC_BlinkLED(4);
  1357  000866  0E00               	movlw	0
  1358  000868  0101               	movlb	1	; () banked
  1359  00086A  6FA6               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  1360  00086C  0E04               	movlw	4
  1361  00086E  6FA5               	movwf	MSC_BlinkLED@blink& (0+255),b
  1362  000870  EC1C  F00D         	call	_MSC_BlinkLED	;wreg free
  1363                           
  1364                           ;main.c: 117: RF_Saved = 91;
  1365  000874  0E5B               	movlw	91
  1366  000876  0100               	movlb	0	; () banked
  1367  000878  6FCD               	movwf	_RF_Saved& (0+255),b
  1368  00087A  D000               	goto	l5766
  1369  00087C                     l5766:
  1370                           
  1371                           ; BSR set to: 0
  1372                           ;main.c: 118: }
  1373                           ;main.c: 119: if(IR_Saved == 90)
  1374  00087C  0E5A               	movlw	90
  1375  00087E  0100               	movlb	0	; () banked
  1376  000880  19CC               	xorwf	_IR_Saved& (0+255),w,b
  1377  000882  A4D8               	btfss	status,2,c
  1378  000884  D00B               	goto	l5772
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;main.c: 120: {
  1382                           ;main.c: 121: MSC_BlinkLED(4);
  1383  000886  0E00               	movlw	0
  1384  000888  0101               	movlb	1	; () banked
  1385  00088A  6FA6               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  1386  00088C  0E04               	movlw	4
  1387  00088E  6FA5               	movwf	MSC_BlinkLED@blink& (0+255),b
  1388  000890  EC1C  F00D         	call	_MSC_BlinkLED	;wreg free
  1389                           
  1390                           ;main.c: 122: IR_Saved = 91;
  1391  000894  0E5B               	movlw	91
  1392  000896  0100               	movlb	0	; () banked
  1393  000898  6FCC               	movwf	_IR_Saved& (0+255),b
  1394  00089A  D000               	goto	l5772
  1395  00089C                     l5772:
  1396                           
  1397                           ; BSR set to: 0
  1398                           ;main.c: 123: }
  1399                           ;main.c: 124: System_State_Change = 0;
  1400  00089C  0E00               	movlw	0
  1401  00089E  0100               	movlb	0	; () banked
  1402  0008A0  6FC8               	movwf	_System_State_Change& (0+255),b
  1403  0008A2  D000               	goto	l5774
  1404  0008A4                     l5774:
  1405                           
  1406                           ; BSR set to: 0
  1407                           ;main.c: 125: }
  1408                           ;main.c: 126: if(RF_Data || IR_Data || Button_Data)
  1409  0008A4  0100               	movlb	0	; () banked
  1410  0008A6  51C6               	movf	_RF_Data& (0+255),w,b	;volatile
  1411  0008A8  A4D8               	btfss	status,2,c
  1412  0008AA  D008               	goto	l5780
  1413                           
  1414                           ; BSR set to: 0
  1415  0008AC  0100               	movlb	0	; () banked
  1416  0008AE  51C3               	movf	_IR_Data& (0+255),w,b	;volatile
  1417  0008B0  A4D8               	btfss	status,2,c
  1418  0008B2  D004               	goto	l5780
  1419                           
  1420                           ; BSR set to: 0
  1421  0008B4  0100               	movlb	0	; () banked
  1422  0008B6  51C0               	movf	_Button_Data& (0+255),w,b	;volatile
  1423  0008B8  B4D8               	btfsc	status,2,c
  1424  0008BA  D00E               	goto	l5792
  1425  0008BC                     l5780:
  1426                           
  1427                           ; BSR set to: 0
  1428                           ;main.c: 127: {
  1429                           ;main.c: 128: (LATC |= 0x10);
  1430  0008BC  888B               	bsf	3979,4,c	;volatile
  1431                           
  1432                           ; BSR set to: 0
  1433                           ;main.c: 129: MTR_Rotate();
  1434  0008BE  EC60  F00C         	call	_MTR_Rotate	;wreg free
  1435                           
  1436                           ;main.c: 130: RF_Data = 0;
  1437  0008C2  0E00               	movlw	0
  1438  0008C4  0100               	movlb	0	; () banked
  1439  0008C6  6FC6               	movwf	_RF_Data& (0+255),b	;volatile
  1440                           
  1441                           ; BSR set to: 0
  1442                           ;main.c: 131: IR_Data = 0;
  1443  0008C8  0E00               	movlw	0
  1444  0008CA  0100               	movlb	0	; () banked
  1445  0008CC  6FC3               	movwf	_IR_Data& (0+255),b	;volatile
  1446                           
  1447                           ; BSR set to: 0
  1448                           ;main.c: 132: Button_Data = 0;
  1449  0008CE  0E00               	movlw	0
  1450  0008D0  0100               	movlb	0	; () banked
  1451  0008D2  6FC0               	movwf	_Button_Data& (0+255),b	;volatile
  1452                           
  1453                           ; BSR set to: 0
  1454                           ;main.c: 133: (LATC &= ~0x10);
  1455  0008D4  988B               	bcf	3979,4,c	;volatile
  1456  0008D6  D000               	goto	l5792
  1457  0008D8                     l5792:
  1458                           
  1459                           ; BSR set to: 0
  1460                           ;main.c: 134: }
  1461                           ;main.c: 135: if(Rail_VIN < 3.5 || Rail_VIN > 5.5 )
  1462  0008D8  C0C9  F0B1         	movff	_Rail_VIN,___ftge@ff1
  1463  0008DC  C0CA  F0B2         	movff	_Rail_VIN+1,___ftge@ff1+1
  1464  0008E0  C0CB  F0B3         	movff	_Rail_VIN+2,___ftge@ff1+2
  1465  0008E4  0E00               	movlw	0
  1466  0008E6  0100               	movlb	0	; () banked
  1467  0008E8  6FB4               	movwf	___ftge@ff2& (0+255),b
  1468  0008EA  0E60               	movlw	96
  1469  0008EC  0100               	movlb	0	; () banked
  1470  0008EE  6FB5               	movwf	(___ftge@ff2+1)& (0+255),b
  1471  0008F0  0E40               	movlw	64
  1472  0008F2  0100               	movlb	0	; () banked
  1473  0008F4  6FB6               	movwf	(___ftge@ff2+2)& (0+255),b
  1474  0008F6  EC8E  F008         	call	___ftge	;wreg free
  1475  0008FA  0100               	movlb	0	; () banked
  1476  0008FC  A0D8               	btfss	status,0,c
  1477  0008FE  D014               	goto	l5796
  1478                           
  1479                           ; BSR set to: 0
  1480  000900  0E00               	movlw	0
  1481  000902  0100               	movlb	0	; () banked
  1482  000904  6FB1               	movwf	___ftge@ff1& (0+255),b
  1483  000906  0EB0               	movlw	176
  1484  000908  0100               	movlb	0	; () banked
  1485  00090A  6FB2               	movwf	(___ftge@ff1+1)& (0+255),b
  1486  00090C  0E40               	movlw	64
  1487  00090E  0100               	movlb	0	; () banked
  1488  000910  6FB3               	movwf	(___ftge@ff1+2)& (0+255),b
  1489  000912  C0C9  F0B4         	movff	_Rail_VIN,___ftge@ff2
  1490  000916  C0CA  F0B5         	movff	_Rail_VIN+1,___ftge@ff2+1
  1491  00091A  C0CB  F0B6         	movff	_Rail_VIN+2,___ftge@ff2+2
  1492  00091E  EC8E  F008         	call	___ftge	;wreg free
  1493  000922  0100               	movlb	0	; () banked
  1494  000924  B0D8               	btfsc	status,0,c
  1495  000926  D03B               	goto	l5812
  1496  000928                     l5796:
  1497                           
  1498                           ; BSR set to: 0
  1499                           ;main.c: 136: {
  1500                           ;main.c: 137: MSC_DelayMS(100);
  1501  000928  0E64               	movlw	100
  1502  00092A  0100               	movlb	0	; () banked
  1503  00092C  6FB5               	movwf	MSC_DelayMS@US& (0+255),b
  1504  00092E  0E00               	movlw	0
  1505  000930  6FB6               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  1506  000932  0E00               	movlw	0
  1507  000934  6FB7               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  1508  000936  0E00               	movlw	0
  1509  000938  6FB8               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  1510  00093A  EC94  F00C         	call	_MSC_DelayMS	;wreg free
  1511                           
  1512                           ;main.c: 138: (LATC ^= 0x10);
  1513  00093E  0E10               	movlw	16
  1514  000940  1A8B               	xorwf	3979,f,c	;volatile
  1515                           
  1516                           ;main.c: 139: }
  1517                           ;main.c: 140: }
  1518  000942  D02D               	goto	l5812
  1519  000944                     l5800:
  1520                           
  1521                           ;main.c: 141: else if(System_State == 10)
  1522  000944  0E0A               	movlw	10
  1523  000946  0100               	movlb	0	; () banked
  1524  000948  19CE               	xorwf	_System_State& (0+255),w,b
  1525  00094A  A4D8               	btfss	status,2,c
  1526  00094C  D028               	goto	l5812
  1527                           
  1528                           ; BSR set to: 0
  1529                           ;main.c: 142: {
  1530                           ;main.c: 144: MSC_DelayMS(25);
  1531  00094E  0E19               	movlw	25
  1532  000950  0100               	movlb	0	; () banked
  1533  000952  6FB5               	movwf	MSC_DelayMS@US& (0+255),b
  1534  000954  0E00               	movlw	0
  1535  000956  6FB6               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  1536  000958  0E00               	movlw	0
  1537  00095A  6FB7               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  1538  00095C  0E00               	movlw	0
  1539  00095E  6FB8               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  1540  000960  EC94  F00C         	call	_MSC_DelayMS	;wreg free
  1541                           
  1542                           ;main.c: 145: (LATC ^= 0x10);
  1543  000964  0E10               	movlw	16
  1544  000966  1A8B               	xorwf	3979,f,c	;volatile
  1545                           
  1546                           ;main.c: 146: if(RF_Data)
  1547  000968  0100               	movlb	0	; () banked
  1548  00096A  51C6               	movf	_RF_Data& (0+255),w,b	;volatile
  1549  00096C  B4D8               	btfsc	status,2,c
  1550  00096E  D009               	goto	l64
  1551                           
  1552                           ; BSR set to: 0
  1553                           ;main.c: 147: {
  1554                           ;main.c: 149: RF_Data = 0;
  1555  000970  0E00               	movlw	0
  1556  000972  0100               	movlb	0	; () banked
  1557  000974  6FC6               	movwf	_RF_Data& (0+255),b	;volatile
  1558                           
  1559                           ;main.c: 150: System_State = 8;
  1560  000976  0E08               	movlw	8
  1561  000978  0100               	movlb	0	; () banked
  1562  00097A  6FCE               	movwf	_System_State& (0+255),b
  1563                           
  1564                           ;main.c: 151: System_State_Change = 1;
  1565  00097C  0E01               	movlw	1
  1566  00097E  0100               	movlb	0	; () banked
  1567  000980  6FC8               	movwf	_System_State_Change& (0+255),b
  1568  000982                     l64:
  1569                           
  1570                           ; BSR set to: 0
  1571                           ;main.c: 152: }
  1572                           ;main.c: 153: if(IR_Data)
  1573  000982  0100               	movlb	0	; () banked
  1574  000984  51C3               	movf	_IR_Data& (0+255),w,b	;volatile
  1575  000986  B4D8               	btfsc	status,2,c
  1576  000988  D00A               	goto	l5812
  1577                           
  1578                           ; BSR set to: 0
  1579                           ;main.c: 154: {
  1580                           ;main.c: 156: IR_Data = 0;
  1581  00098A  0E00               	movlw	0
  1582  00098C  0100               	movlb	0	; () banked
  1583  00098E  6FC3               	movwf	_IR_Data& (0+255),b	;volatile
  1584                           
  1585                           ;main.c: 157: System_State = 8;
  1586  000990  0E08               	movlw	8
  1587  000992  0100               	movlb	0	; () banked
  1588  000994  6FCE               	movwf	_System_State& (0+255),b
  1589                           
  1590                           ;main.c: 158: System_State_Change = 1;
  1591  000996  0E01               	movlw	1
  1592  000998  0100               	movlb	0	; () banked
  1593  00099A  6FC8               	movwf	_System_State_Change& (0+255),b
  1594                           
  1595                           ; BSR set to: 0
  1596                           
  1597                           ; BSR set to: 0
  1598  00099C  D000               	goto	l5812
  1599  00099E                     l5812:
  1600                           
  1601                           ;main.c: 159: }
  1602                           ;main.c: 160: }
  1603                           ;main.c: 162: ADC_SampleCount++;
  1604  00099E  0100               	movlb	0	; () banked
  1605  0009A0  4BB9               	infsnz	_ADC_SampleCount& (0+255),f,b
  1606  0009A2  2BBA               	incf	(_ADC_SampleCount+1)& (0+255),f,b
  1607                           
  1608                           ; BSR set to: 0
  1609                           ;main.c: 163: if(ADC_SampleCount > 10)
  1610  0009A4  0100               	movlb	0	; () banked
  1611  0009A6  51BA               	movf	(_ADC_SampleCount+1)& (0+255),w,b
  1612  0009A8  E105               	bnz	u6100
  1613  0009AA  0E0B               	movlw	11
  1614  0009AC  0100               	movlb	0	; () banked
  1615  0009AE  5DB9               	subwf	_ADC_SampleCount& (0+255),w,b
  1616  0009B0  A0D8               	btfss	status,0,c
  1617  0009B2  D74A               	goto	l5754
  1618  0009B4                     u6100:
  1619                           
  1620                           ; BSR set to: 0
  1621                           ;main.c: 164: {
  1622                           ;main.c: 165: ADC_Start();
  1623  0009B4  ECFF  F010         	call	_ADC_Start	;wreg free
  1624                           
  1625                           ;main.c: 166: ADC_SampleCount = 0;
  1626  0009B8  0E00               	movlw	0
  1627  0009BA  0100               	movlb	0	; () banked
  1628  0009BC  6FBA               	movwf	(_ADC_SampleCount+1)& (0+255),b
  1629  0009BE  0E00               	movlw	0
  1630  0009C0  6FB9               	movwf	_ADC_SampleCount& (0+255),b
  1631                           
  1632                           ; BSR set to: 0
  1633                           
  1634                           ; BSR set to: 0
  1635  0009C2  D742               	goto	l5754
  1636                           
  1637                           ; BSR set to: 0
  1638                           
  1639                           ; BSR set to: 0
  1640  0009C4  EF5A  F001         	goto	start
  1641  0009C8                     __end_of_main:
  1642                           	opt stack 0
  1643                           tblptru	equ	0xFF8
  1644                           tblptrh	equ	0xFF7
  1645                           tblptrl	equ	0xFF6
  1646                           tablat	equ	0xFF5
  1647                           postinc0	equ	0xFEE
  1648                           wreg	equ	0xFE8
  1649                           postdec1	equ	0xFE5
  1650                           fsr1l	equ	0xFE1
  1651                           status	equ	0xFD8
  1652                           
  1653 ;; *************** function ___ftge *****************
  1654 ;; Defined at:
  1655 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;  ff1             3   49[BANK0 ] float 
  1658 ;;  ff2             3   52[BANK0 ] float 
  1659 ;; Auto vars:     Size  Location     Type
  1660 ;;		None
  1661 ;; Return value:  Size  Location     Type
  1662 ;;		None               void
  1663 ;; Registers used:
  1664 ;;		wreg, status,2, status,0
  1665 ;; Tracked objects:
  1666 ;;		On entry : 0/0
  1667 ;;		On exit  : 0/0
  1668 ;;		Unchanged: 0/0
  1669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  1670 ;;      Params:         0       6       0       0       0
  1671 ;;      Locals:         0       0       0       0       0
  1672 ;;      Temps:          0       0       3       0       0
  1673 ;;      Totals:         0       6       3       0       0
  1674 ;;Total ram usage:        9 bytes
  1675 ;; Hardware stack levels used:    1
  1676 ;; Hardware stack levels required when called:    8
  1677 ;; This function calls:
  1678 ;;		Nothing
  1679 ;; This function is called by:
  1680 ;;		_main
  1681 ;; This function uses a non-reentrant model
  1682 ;;
  1683                           
  1684                           	psect	text1
  1685  00111C                     __ptext1:
  1686                           	opt stack 0
  1687  00111C                     ___ftge:
  1688                           	opt stack 22
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;incstack = 0
  1692  00111C  0100               	movlb	0	; () banked
  1693  00111E  AFB3               	btfss	(___ftge@ff1+2)& (0+255),7,b
  1694  001120  D01E               	goto	l5712
  1695                           
  1696                           ; BSR set to: 0
  1697  001122  C0B1  F1A0         	movff	___ftge@ff1,??___ftge
  1698  001126  C0B2  F1A1         	movff	___ftge@ff1+1,??___ftge+1
  1699  00112A  C0B3  F1A2         	movff	___ftge@ff1+2,??___ftge+2
  1700  00112E  0101               	movlb	1	; () banked
  1701  001130  1FA0               	comf	??___ftge& (0+255),f,b
  1702  001132  1FA1               	comf	(??___ftge+1)& (0+255),f,b
  1703  001134  1FA2               	comf	(??___ftge+2)& (0+255),f,b
  1704  001136  2BA0               	incf	??___ftge& (0+255),f,b
  1705  001138  0E00               	movlw	0
  1706  00113A  23A1               	addwfc	(??___ftge+1)& (0+255),f,b
  1707  00113C  23A2               	addwfc	(??___ftge+2)& (0+255),f,b
  1708  00113E  0E00               	movlw	0
  1709  001140  0101               	movlb	1	; () banked
  1710  001142  25A0               	addwf	??___ftge& (0+255),w,b
  1711  001144  0100               	movlb	0	; () banked
  1712  001146  6FB1               	movwf	___ftge@ff1& (0+255),b
  1713  001148  0E00               	movlw	0
  1714  00114A  0101               	movlb	1	; () banked
  1715  00114C  21A1               	addwfc	(??___ftge+1)& (0+255),w,b
  1716  00114E  0100               	movlb	0	; () banked
  1717  001150  6FB2               	movwf	(___ftge@ff1+1)& (0+255),b
  1718  001152  0E80               	movlw	128
  1719  001154  0101               	movlb	1	; () banked
  1720  001156  21A2               	addwfc	(??___ftge+2)& (0+255),w,b
  1721  001158  0100               	movlb	0	; () banked
  1722  00115A  6FB3               	movwf	(___ftge@ff1+2)& (0+255),b
  1723  00115C  D000               	goto	l5712
  1724  00115E                     l5712:
  1725                           
  1726                           ; BSR set to: 0
  1727  00115E  0100               	movlb	0	; () banked
  1728  001160  AFB6               	btfss	(___ftge@ff2+2)& (0+255),7,b
  1729  001162  D01E               	goto	l5716
  1730                           
  1731                           ; BSR set to: 0
  1732  001164  C0B4  F1A0         	movff	___ftge@ff2,??___ftge
  1733  001168  C0B5  F1A1         	movff	___ftge@ff2+1,??___ftge+1
  1734  00116C  C0B6  F1A2         	movff	___ftge@ff2+2,??___ftge+2
  1735  001170  0101               	movlb	1	; () banked
  1736  001172  1FA0               	comf	??___ftge& (0+255),f,b
  1737  001174  1FA1               	comf	(??___ftge+1)& (0+255),f,b
  1738  001176  1FA2               	comf	(??___ftge+2)& (0+255),f,b
  1739  001178  2BA0               	incf	??___ftge& (0+255),f,b
  1740  00117A  0E00               	movlw	0
  1741  00117C  23A1               	addwfc	(??___ftge+1)& (0+255),f,b
  1742  00117E  23A2               	addwfc	(??___ftge+2)& (0+255),f,b
  1743  001180  0E00               	movlw	0
  1744  001182  0101               	movlb	1	; () banked
  1745  001184  25A0               	addwf	??___ftge& (0+255),w,b
  1746  001186  0100               	movlb	0	; () banked
  1747  001188  6FB4               	movwf	___ftge@ff2& (0+255),b
  1748  00118A  0E00               	movlw	0
  1749  00118C  0101               	movlb	1	; () banked
  1750  00118E  21A1               	addwfc	(??___ftge+1)& (0+255),w,b
  1751  001190  0100               	movlb	0	; () banked
  1752  001192  6FB5               	movwf	(___ftge@ff2+1)& (0+255),b
  1753  001194  0E80               	movlw	128
  1754  001196  0101               	movlb	1	; () banked
  1755  001198  21A2               	addwfc	(??___ftge+2)& (0+255),w,b
  1756  00119A  0100               	movlb	0	; () banked
  1757  00119C  6FB6               	movwf	(___ftge@ff2+2)& (0+255),b
  1758  00119E  D000               	goto	l5716
  1759  0011A0                     l5716:
  1760                           
  1761                           ; BSR set to: 0
  1762  0011A0  0E00               	movlw	0
  1763  0011A2  0100               	movlb	0	; () banked
  1764  0011A4  1BB1               	xorwf	___ftge@ff1& (0+255),f,b
  1765  0011A6  0E00               	movlw	0
  1766  0011A8  0100               	movlb	0	; () banked
  1767  0011AA  1BB2               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  1768  0011AC  0E80               	movlw	128
  1769  0011AE  0100               	movlb	0	; () banked
  1770  0011B0  1BB3               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  1771                           
  1772                           ; BSR set to: 0
  1773  0011B2  0E00               	movlw	0
  1774  0011B4  0100               	movlb	0	; () banked
  1775  0011B6  1BB4               	xorwf	___ftge@ff2& (0+255),f,b
  1776  0011B8  0E00               	movlw	0
  1777  0011BA  0100               	movlb	0	; () banked
  1778  0011BC  1BB5               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  1779  0011BE  0E80               	movlw	128
  1780  0011C0  0100               	movlb	0	; () banked
  1781  0011C2  1BB6               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  1782  0011C4  0100               	movlb	0	; () banked
  1783  0011C6  51B4               	movf	___ftge@ff2& (0+255),w,b
  1784  0011C8  0100               	movlb	0	; () banked
  1785  0011CA  5DB1               	subwf	___ftge@ff1& (0+255),w,b
  1786  0011CC  0100               	movlb	0	; () banked
  1787  0011CE  51B5               	movf	(___ftge@ff2+1)& (0+255),w,b
  1788  0011D0  0100               	movlb	0	; () banked
  1789  0011D2  59B2               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  1790  0011D4  0100               	movlb	0	; () banked
  1791  0011D6  51B6               	movf	(___ftge@ff2+2)& (0+255),w,b
  1792  0011D8  0100               	movlb	0	; () banked
  1793  0011DA  59B3               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  1794  0011DC  B0D8               	btfsc	status,0,c
  1795  0011DE  D002               	goto	l5722
  1796                           
  1797                           ; BSR set to: 0
  1798  0011E0  90D8               	bcf	status,0,c
  1799  0011E2  0012               	return	
  1800  0011E4                     l5722:
  1801                           
  1802                           ; BSR set to: 0
  1803  0011E4  80D8               	bsf	status,0,c
  1804                           
  1805                           ; BSR set to: 0
  1806  0011E6  0012               	return	
  1807                           
  1808                           ; BSR set to: 0
  1809                           
  1810                           ; BSR set to: 0
  1811  0011E8  0012               	return		;funcret
  1812  0011EA                     __end_of___ftge:
  1813                           	opt stack 0
  1814                           tblptru	equ	0xFF8
  1815                           tblptrh	equ	0xFF7
  1816                           tblptrl	equ	0xFF6
  1817                           tablat	equ	0xFF5
  1818                           postinc0	equ	0xFEE
  1819                           wreg	equ	0xFE8
  1820                           postdec1	equ	0xFE5
  1821                           fsr1l	equ	0xFE1
  1822                           status	equ	0xFD8
  1823                           
  1824 ;; *************** function _SYS_ConfigureOscillator *****************
  1825 ;; Defined at:
  1826 ;;		line 54 in file "SYSTEM.c"
  1827 ;; Parameters:    Size  Location     Type
  1828 ;;		None
  1829 ;; Auto vars:     Size  Location     Type
  1830 ;;		None
  1831 ;; Return value:  Size  Location     Type
  1832 ;;		None               void
  1833 ;; Registers used:
  1834 ;;		None
  1835 ;; Tracked objects:
  1836 ;;		On entry : 0/0
  1837 ;;		On exit  : 0/0
  1838 ;;		Unchanged: 0/0
  1839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  1840 ;;      Params:         0       0       0       0       0
  1841 ;;      Locals:         0       0       0       0       0
  1842 ;;      Temps:          0       0       0       0       0
  1843 ;;      Totals:         0       0       0       0       0
  1844 ;;Total ram usage:        0 bytes
  1845 ;; Hardware stack levels used:    1
  1846 ;; Hardware stack levels required when called:    8
  1847 ;; This function calls:
  1848 ;;		Nothing
  1849 ;; This function is called by:
  1850 ;;		_main
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854                           	psect	text2
  1855  0021E2                     __ptext2:
  1856                           	opt stack 0
  1857  0021E2                     _SYS_ConfigureOscillator:
  1858                           	opt stack 22
  1859                           
  1860                           ;SYSTEM.c: 57: OSCTUNEbits.PLLEN = 1;
  1861                           
  1862                           ; BSR set to: 0
  1863                           ;incstack = 0
  1864  0021E2  8C9B               	bsf	3995,6,c	;volatile
  1865                           
  1866                           ;SYSTEM.c: 58: while(!OSCCONbits.OSTS);
  1867  0021E4  D000               	goto	l299
  1868  0021E6                     l299:
  1869  0021E6  A6D3               	btfss	4051,3,c	;volatile
  1870  0021E8  D7FE               	goto	l299
  1871  0021EA  0012               	return		;funcret
  1872  0021EC                     __end_of_SYS_ConfigureOscillator:
  1873                           	opt stack 0
  1874                           tblptru	equ	0xFF8
  1875                           tblptrh	equ	0xFF7
  1876                           tblptrl	equ	0xFF6
  1877                           tablat	equ	0xFF5
  1878                           postinc0	equ	0xFEE
  1879                           wreg	equ	0xFE8
  1880                           postdec1	equ	0xFE5
  1881                           fsr1l	equ	0xFE1
  1882                           status	equ	0xFD8
  1883                           
  1884 ;; *************** function _RF_LoadDefaultCode *****************
  1885 ;; Defined at:
  1886 ;;		line 249 in file "RF.c"
  1887 ;; Parameters:    Size  Location     Type
  1888 ;;		None
  1889 ;; Auto vars:     Size  Location     Type
  1890 ;;  High            3   14[BANK1 ] float 
  1891 ;;  Low             3   11[BANK1 ] float 
  1892 ;; Return value:  Size  Location     Type
  1893 ;;		None               void
  1894 ;; Registers used:
  1895 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1896 ;; Tracked objects:
  1897 ;;		On entry : 0/0
  1898 ;;		On exit  : 0/0
  1899 ;;		Unchanged: 0/0
  1900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  1901 ;;      Params:         0       0       0       0       0
  1902 ;;      Locals:         0       0       6       0       0
  1903 ;;      Temps:          0       0       0       0       0
  1904 ;;      Totals:         0       0       6       0       0
  1905 ;;Total ram usage:        6 bytes
  1906 ;; Hardware stack levels used:    1
  1907 ;; Hardware stack levels required when called:   10
  1908 ;; This function calls:
  1909 ;;		_MSC_BufferCopyIntConst
  1910 ;;		___fttol
  1911 ;; This function is called by:
  1912 ;;		_main
  1913 ;; This function uses a non-reentrant model
  1914 ;;
  1915                           
  1916                           	psect	text3
  1917  0015B4                     __ptext3:
  1918                           	opt stack 0
  1919  0015B4                     _RF_LoadDefaultCode:
  1920                           	opt stack 20
  1921                           
  1922                           ;RF.c: 251: double Low = 0.0;
  1923                           
  1924                           ;incstack = 0
  1925  0015B4  0E00               	movlw	0
  1926  0015B6  0101               	movlb	1	; () banked
  1927  0015B8  6FAB               	movwf	RF_LoadDefaultCode@Low& (0+255),b
  1928  0015BA  0E00               	movlw	0
  1929  0015BC  0101               	movlb	1	; () banked
  1930  0015BE  6FAC               	movwf	(RF_LoadDefaultCode@Low+1)& (0+255),b
  1931  0015C0  0E00               	movlw	0
  1932  0015C2  0101               	movlb	1	; () banked
  1933  0015C4  6FAD               	movwf	(RF_LoadDefaultCode@Low+2)& (0+255),b
  1934                           
  1935                           ;RF.c: 252: double High = 0.0;
  1936  0015C6  0E00               	movlw	0
  1937  0015C8  0101               	movlb	1	; () banked
  1938  0015CA  6FAE               	movwf	RF_LoadDefaultCode@High& (0+255),b
  1939  0015CC  0E00               	movlw	0
  1940  0015CE  0101               	movlb	1	; () banked
  1941  0015D0  6FAF               	movwf	(RF_LoadDefaultCode@High+1)& (0+255),b
  1942  0015D2  0E00               	movlw	0
  1943  0015D4  0101               	movlb	1	; () banked
  1944  0015D6  6FB0               	movwf	(RF_LoadDefaultCode@High+2)& (0+255),b
  1945                           
  1946                           ;RF.c: 254: Low = (double)850 * (1.0 - 0.05);
  1947  0015D8  0EE0               	movlw	224
  1948  0015DA  0101               	movlb	1	; () banked
  1949  0015DC  6FAB               	movwf	RF_LoadDefaultCode@Low& (0+255),b
  1950  0015DE  0E49               	movlw	73
  1951  0015E0  0101               	movlb	1	; () banked
  1952  0015E2  6FAC               	movwf	(RF_LoadDefaultCode@Low+1)& (0+255),b
  1953  0015E4  0E44               	movlw	68
  1954  0015E6  0101               	movlb	1	; () banked
  1955  0015E8  6FAD               	movwf	(RF_LoadDefaultCode@Low+2)& (0+255),b
  1956                           
  1957                           ;RF.c: 255: High = (double)850 * (1.0 + 0.05);
  1958  0015EA  0E20               	movlw	32
  1959  0015EC  0101               	movlb	1	; () banked
  1960  0015EE  6FAE               	movwf	RF_LoadDefaultCode@High& (0+255),b
  1961  0015F0  0E5F               	movlw	95
  1962  0015F2  0101               	movlb	1	; () banked
  1963  0015F4  6FAF               	movwf	(RF_LoadDefaultCode@High+1)& (0+255),b
  1964  0015F6  0E44               	movlw	68
  1965  0015F8  0101               	movlb	1	; () banked
  1966  0015FA  6FB0               	movwf	(RF_LoadDefaultCode@High+2)& (0+255),b
  1967                           
  1968                           ; BSR set to: 1
  1969                           ;RF.c: 257: RF_SyncLow = (unsigned int) Low;
  1970  0015FC  C1AB  F0B1         	movff	RF_LoadDefaultCode@Low,___fttol@f1
  1971  001600  C1AC  F0B2         	movff	RF_LoadDefaultCode@Low+1,___fttol@f1+1
  1972  001604  C1AD  F0B3         	movff	RF_LoadDefaultCode@Low+2,___fttol@f1+2
  1973  001608  EC5E  F006         	call	___fttol	;wreg free
  1974  00160C  C0B1  F0BD         	movff	?___fttol,_RF_SyncLow
  1975  001610  C0B2  F0BE         	movff	?___fttol+1,_RF_SyncLow+1
  1976                           
  1977                           ;RF.c: 258: RF_SyncHigh = (unsigned int) High;
  1978  001614  C1AE  F0B1         	movff	RF_LoadDefaultCode@High,___fttol@f1
  1979  001618  C1AF  F0B2         	movff	RF_LoadDefaultCode@High+1,___fttol@f1+1
  1980  00161C  C1B0  F0B3         	movff	RF_LoadDefaultCode@High+2,___fttol@f1+2
  1981  001620  EC5E  F006         	call	___fttol	;wreg free
  1982  001624  C0B1  F0BB         	movff	?___fttol,_RF_SyncHigh
  1983  001628  C0B2  F0BC         	movff	?___fttol+1,_RF_SyncHigh+1
  1984                           
  1985                           ;RF.c: 260: MSC_BufferCopyIntConst(&CONF1_ChanE_Timing,&RF_SavedTiming,50,0);
  1986  00162C  0E5A               	movlw	low _CONF1_ChanE_Timing
  1987  00162E  0101               	movlb	1	; () banked
  1988  001630  6FA0               	movwf	MSC_BufferCopyIntConst@from& (0+255),b
  1989  001632  0E3F               	movlw	high _CONF1_ChanE_Timing
  1990  001634  0101               	movlb	1	; () banked
  1991  001636  6FA1               	movwf	(MSC_BufferCopyIntConst@from+1)& (0+255),b
  1992  001638  0E78               	movlw	low _RF_SavedTiming
  1993  00163A  0101               	movlb	1	; () banked
  1994  00163C  6FA2               	movwf	MSC_BufferCopyIntConst@to& (0+255),b
  1995  00163E  0E02               	movlw	high _RF_SavedTiming
  1996  001640  0101               	movlb	1	; () banked
  1997  001642  6FA3               	movwf	(MSC_BufferCopyIntConst@to+1)& (0+255),b
  1998  001644  0E00               	movlw	0
  1999  001646  0101               	movlb	1	; () banked
  2000  001648  6FA5               	movwf	(MSC_BufferCopyIntConst@count+1)& (0+255),b
  2001  00164A  0E32               	movlw	50
  2002  00164C  6FA4               	movwf	MSC_BufferCopyIntConst@count& (0+255),b
  2003  00164E  0E00               	movlw	0
  2004  001650  0101               	movlb	1	; () banked
  2005  001652  6FA7               	movwf	(MSC_BufferCopyIntConst@shift+1)& (0+255),b
  2006  001654  0E00               	movlw	0
  2007  001656  6FA6               	movwf	MSC_BufferCopyIntConst@shift& (0+255),b
  2008  001658  EC22  F00A         	call	_MSC_BufferCopyIntConst	;wreg free
  2009                           
  2010                           ;RF.c: 261: RF_CodeSize = 50;
  2011  00165C  0E32               	movlw	50
  2012  00165E  0100               	movlb	0	; () banked
  2013  001660  6FC5               	movwf	_RF_CodeSize& (0+255),b
  2014                           
  2015                           ; BSR set to: 0
  2016  001662  0012               	return		;funcret
  2017  001664                     __end_of_RF_LoadDefaultCode:
  2018                           	opt stack 0
  2019                           tblptru	equ	0xFF8
  2020                           tblptrh	equ	0xFF7
  2021                           tblptrl	equ	0xFF6
  2022                           tablat	equ	0xFF5
  2023                           postinc0	equ	0xFEE
  2024                           wreg	equ	0xFE8
  2025                           postdec1	equ	0xFE5
  2026                           fsr1l	equ	0xFE1
  2027                           status	equ	0xFD8
  2028                           
  2029 ;; *************** function _MTR_Rotate *****************
  2030 ;; Defined at:
  2031 ;;		line 104 in file "MOTOR.c"
  2032 ;; Parameters:    Size  Location     Type
  2033 ;;		None
  2034 ;; Auto vars:     Size  Location     Type
  2035 ;;		None
  2036 ;; Return value:  Size  Location     Type
  2037 ;;		None               void
  2038 ;; Registers used:
  2039 ;;		wreg, status,2, status,0, cstack
  2040 ;; Tracked objects:
  2041 ;;		On entry : 0/0
  2042 ;;		On exit  : 0/0
  2043 ;;		Unchanged: 0/0
  2044 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2045 ;;      Params:         0       0       0       0       0
  2046 ;;      Locals:         0       0       0       0       0
  2047 ;;      Temps:          0       0       0       0       0
  2048 ;;      Totals:         0       0       0       0       0
  2049 ;;Total ram usage:        0 bytes
  2050 ;; Hardware stack levels used:    1
  2051 ;; Hardware stack levels required when called:   10
  2052 ;; This function calls:
  2053 ;;		_MSC_DelayMS
  2054 ;;		_MTR_IN1
  2055 ;;		_MTR_IN2
  2056 ;; This function is called by:
  2057 ;;		_main
  2058 ;; This function uses a non-reentrant model
  2059 ;;
  2060                           
  2061                           	psect	text4
  2062  0018C0                     __ptext4:
  2063                           	opt stack 0
  2064  0018C0                     _MTR_Rotate:
  2065                           	opt stack 20
  2066                           
  2067                           ;MOTOR.c: 106: if(DC_Motor == 0)
  2068                           
  2069                           ; BSR set to: 0
  2070                           ;incstack = 0
  2071  0018C0  0100               	movlb	0	; () banked
  2072  0018C2  51C1               	movf	_DC_Motor& (0+255),w,b
  2073  0018C4  0100               	movlb	0	; () banked
  2074  0018C6  A4D8               	btfss	status,2,c
  2075  0018C8  D013               	goto	l5700
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;MOTOR.c: 107: {
  2079                           ;MOTOR.c: 108: MTR_IN1(0);
  2080  0018CA  0E00               	movlw	0
  2081  0018CC  ECC2  F00F         	call	_MTR_IN1
  2082                           
  2083                           ;MOTOR.c: 109: MTR_IN2(1);
  2084  0018D0  0E01               	movlw	1
  2085  0018D2  ECB6  F00F         	call	_MTR_IN2
  2086                           
  2087                           ;MOTOR.c: 110: MSC_DelayMS(100);
  2088  0018D6  0E64               	movlw	100
  2089  0018D8  0100               	movlb	0	; () banked
  2090  0018DA  6FB5               	movwf	MSC_DelayMS@US& (0+255),b
  2091  0018DC  0E00               	movlw	0
  2092  0018DE  6FB6               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  2093  0018E0  0E00               	movlw	0
  2094  0018E2  6FB7               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  2095  0018E4  0E00               	movlw	0
  2096  0018E6  6FB8               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  2097  0018E8  EC94  F00C         	call	_MSC_DelayMS	;wreg free
  2098                           
  2099                           ;MOTOR.c: 111: DC_Motor = 1;
  2100  0018EC  0E01               	movlw	1
  2101  0018EE  D012               	goto	L1
  2102  0018F0                     l5700:
  2103                           
  2104                           ; BSR set to: 0
  2105                           ;MOTOR.c: 113: else
  2106                           ;MOTOR.c: 114: {
  2107                           ;MOTOR.c: 115: MTR_IN1(1);
  2108  0018F0  0E01               	movlw	1
  2109  0018F2  ECC2  F00F         	call	_MTR_IN1
  2110                           
  2111                           ;MOTOR.c: 116: MTR_IN2(0);
  2112  0018F6  0E00               	movlw	0
  2113  0018F8  ECB6  F00F         	call	_MTR_IN2
  2114                           
  2115                           ;MOTOR.c: 117: MSC_DelayMS(100);
  2116  0018FC  0E64               	movlw	100
  2117  0018FE  0100               	movlb	0	; () banked
  2118  001900  6FB5               	movwf	MSC_DelayMS@US& (0+255),b
  2119  001902  0E00               	movlw	0
  2120  001904  6FB6               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  2121  001906  0E00               	movlw	0
  2122  001908  6FB7               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  2123  00190A  0E00               	movlw	0
  2124  00190C  6FB8               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  2125  00190E  EC94  F00C         	call	_MSC_DelayMS	;wreg free
  2126                           
  2127                           ;MOTOR.c: 118: DC_Motor = 0;
  2128  001912  0E00               	movlw	0
  2129  001914                     L1:
  2130  001914  0100               	movlb	0	; () banked
  2131  001916  6FC1               	movwf	_DC_Motor& (0+255),b
  2132  001918  D000               	goto	l5704
  2133  00191A                     l5704:
  2134                           
  2135                           ; BSR set to: 0
  2136                           ;MOTOR.c: 119: }
  2137                           ;MOTOR.c: 120: MTR_IN1(0);
  2138  00191A  0E00               	movlw	0
  2139  00191C  ECC2  F00F         	call	_MTR_IN1
  2140                           
  2141                           ;MOTOR.c: 121: MTR_IN2(0);
  2142  001920  0E00               	movlw	0
  2143  001922  ECB6  F00F         	call	_MTR_IN2
  2144  001926  0012               	return		;funcret
  2145  001928                     __end_of_MTR_Rotate:
  2146                           	opt stack 0
  2147                           tblptru	equ	0xFF8
  2148                           tblptrh	equ	0xFF7
  2149                           tblptrl	equ	0xFF6
  2150                           tablat	equ	0xFF5
  2151                           postinc0	equ	0xFEE
  2152                           wreg	equ	0xFE8
  2153                           postdec1	equ	0xFE5
  2154                           fsr1l	equ	0xFE1
  2155                           status	equ	0xFD8
  2156                           
  2157 ;; *************** function _MTR_IN2 *****************
  2158 ;; Defined at:
  2159 ;;		line 71 in file "MOTOR.c"
  2160 ;; Parameters:    Size  Location     Type
  2161 ;;  state           1    wreg     unsigned char 
  2162 ;; Auto vars:     Size  Location     Type
  2163 ;;  state           1   49[BANK0 ] unsigned char 
  2164 ;; Return value:  Size  Location     Type
  2165 ;;		None               void
  2166 ;; Registers used:
  2167 ;;		wreg, status,2, status,0
  2168 ;; Tracked objects:
  2169 ;;		On entry : 0/0
  2170 ;;		On exit  : 0/0
  2171 ;;		Unchanged: 0/0
  2172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2173 ;;      Params:         0       0       0       0       0
  2174 ;;      Locals:         0       1       0       0       0
  2175 ;;      Temps:          0       0       0       0       0
  2176 ;;      Totals:         0       1       0       0       0
  2177 ;;Total ram usage:        1 bytes
  2178 ;; Hardware stack levels used:    1
  2179 ;; Hardware stack levels required when called:    8
  2180 ;; This function calls:
  2181 ;;		Nothing
  2182 ;; This function is called by:
  2183 ;;		_MTR_Rotate
  2184 ;; This function uses a non-reentrant model
  2185 ;;
  2186                           
  2187                           	psect	text5
  2188  001F6C                     __ptext5:
  2189                           	opt stack 0
  2190  001F6C                     _MTR_IN2:
  2191                           	opt stack 21
  2192                           
  2193                           ;incstack = 0
  2194                           ;MTR_IN2@state stored from wreg
  2195  001F6C  0100               	movlb	0	; () banked
  2196  001F6E  6FB1               	movwf	MTR_IN2@state& (0+255),b
  2197                           
  2198                           ; BSR set to: 0
  2199                           ;MOTOR.c: 73: if(state)
  2200  001F70  0100               	movlb	0	; () banked
  2201  001F72  51B1               	movf	MTR_IN2@state& (0+255),w,b
  2202  001F74  0100               	movlb	0	; () banked
  2203  001F76  B4D8               	btfsc	status,2,c
  2204  001F78  D002               	goto	l4546
  2205                           
  2206                           ; BSR set to: 0
  2207                           ;MOTOR.c: 74: {
  2208                           ;MOTOR.c: 75: LATC |= 0x04;
  2209  001F7A  848B               	bsf	3979,2,c	;volatile
  2210                           
  2211                           ;MOTOR.c: 76: }
  2212  001F7C  0012               	return	
  2213  001F7E                     l4546:
  2214                           
  2215                           ; BSR set to: 0
  2216                           ;MOTOR.c: 77: else
  2217                           ;MOTOR.c: 78: {
  2218                           ;MOTOR.c: 79: LATC &= ~0x04;
  2219  001F7E  948B               	bcf	3979,2,c	;volatile
  2220  001F80  0012               	return	
  2221                           
  2222                           ; BSR set to: 0
  2223                           
  2224                           ; BSR set to: 0
  2225  001F82  0012               	return		;funcret
  2226  001F84                     __end_of_MTR_IN2:
  2227                           	opt stack 0
  2228                           tblptru	equ	0xFF8
  2229                           tblptrh	equ	0xFF7
  2230                           tblptrl	equ	0xFF6
  2231                           tablat	equ	0xFF5
  2232                           postinc0	equ	0xFEE
  2233                           wreg	equ	0xFE8
  2234                           postdec1	equ	0xFE5
  2235                           fsr1l	equ	0xFE1
  2236                           status	equ	0xFD8
  2237                           
  2238 ;; *************** function _MTR_IN1 *****************
  2239 ;; Defined at:
  2240 ;;		line 54 in file "MOTOR.c"
  2241 ;; Parameters:    Size  Location     Type
  2242 ;;  state           1    wreg     unsigned char 
  2243 ;; Auto vars:     Size  Location     Type
  2244 ;;  state           1   49[BANK0 ] unsigned char 
  2245 ;; Return value:  Size  Location     Type
  2246 ;;		None               void
  2247 ;; Registers used:
  2248 ;;		wreg, status,2, status,0
  2249 ;; Tracked objects:
  2250 ;;		On entry : 0/0
  2251 ;;		On exit  : 0/0
  2252 ;;		Unchanged: 0/0
  2253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2254 ;;      Params:         0       0       0       0       0
  2255 ;;      Locals:         0       1       0       0       0
  2256 ;;      Temps:          0       0       0       0       0
  2257 ;;      Totals:         0       1       0       0       0
  2258 ;;Total ram usage:        1 bytes
  2259 ;; Hardware stack levels used:    1
  2260 ;; Hardware stack levels required when called:    8
  2261 ;; This function calls:
  2262 ;;		Nothing
  2263 ;; This function is called by:
  2264 ;;		_MTR_Rotate
  2265 ;; This function uses a non-reentrant model
  2266 ;;
  2267                           
  2268                           	psect	text6
  2269  001F84                     __ptext6:
  2270                           	opt stack 0
  2271  001F84                     _MTR_IN1:
  2272                           	opt stack 21
  2273                           
  2274                           ; BSR set to: 0
  2275                           ;incstack = 0
  2276                           ;MTR_IN1@state stored from wreg
  2277  001F84  0100               	movlb	0	; () banked
  2278  001F86  6FB1               	movwf	MTR_IN1@state& (0+255),b
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;MOTOR.c: 56: if(state)
  2282  001F88  0100               	movlb	0	; () banked
  2283  001F8A  51B1               	movf	MTR_IN1@state& (0+255),w,b
  2284  001F8C  0100               	movlb	0	; () banked
  2285  001F8E  B4D8               	btfsc	status,2,c
  2286  001F90  D002               	goto	l4540
  2287                           
  2288                           ; BSR set to: 0
  2289                           ;MOTOR.c: 57: {
  2290                           ;MOTOR.c: 58: LATB |= 0x08;
  2291  001F92  868A               	bsf	3978,3,c	;volatile
  2292                           
  2293                           ;MOTOR.c: 59: }
  2294  001F94  0012               	return	
  2295  001F96                     l4540:
  2296                           
  2297                           ; BSR set to: 0
  2298                           ;MOTOR.c: 60: else
  2299                           ;MOTOR.c: 61: {
  2300                           ;MOTOR.c: 62: LATB &= ~0x08;
  2301  001F96  968A               	bcf	3978,3,c	;volatile
  2302  001F98  0012               	return	
  2303                           
  2304                           ; BSR set to: 0
  2305                           
  2306                           ; BSR set to: 0
  2307  001F9A  0012               	return		;funcret
  2308  001F9C                     __end_of_MTR_IN1:
  2309                           	opt stack 0
  2310                           tblptru	equ	0xFF8
  2311                           tblptrh	equ	0xFF7
  2312                           tblptrl	equ	0xFF6
  2313                           tablat	equ	0xFF5
  2314                           postinc0	equ	0xFEE
  2315                           wreg	equ	0xFE8
  2316                           postdec1	equ	0xFE5
  2317                           fsr1l	equ	0xFE1
  2318                           status	equ	0xFD8
  2319                           
  2320 ;; *************** function _MSC_BlinkLED *****************
  2321 ;; Defined at:
  2322 ;;		line 1158 in file "MISC.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  blink           2    5[BANK1 ] unsigned int 
  2325 ;; Auto vars:     Size  Location     Type
  2326 ;;  i               2    9[BANK1 ] unsigned int 
  2327 ;; Return value:  Size  Location     Type
  2328 ;;		None               void
  2329 ;; Registers used:
  2330 ;;		wreg, status,2, status,0, cstack
  2331 ;; Tracked objects:
  2332 ;;		On entry : 0/0
  2333 ;;		On exit  : 0/0
  2334 ;;		Unchanged: 0/0
  2335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2336 ;;      Params:         0       0       2       0       0
  2337 ;;      Locals:         0       0       2       0       0
  2338 ;;      Temps:          0       0       2       0       0
  2339 ;;      Totals:         0       0       6       0       0
  2340 ;;Total ram usage:        6 bytes
  2341 ;; Hardware stack levels used:    1
  2342 ;; Hardware stack levels required when called:   10
  2343 ;; This function calls:
  2344 ;;		_MSC_DelayMS
  2345 ;; This function is called by:
  2346 ;;		_main
  2347 ;; This function uses a non-reentrant model
  2348 ;;
  2349                           
  2350                           	psect	text7
  2351  001A38                     __ptext7:
  2352                           	opt stack 0
  2353  001A38                     _MSC_BlinkLED:
  2354                           	opt stack 20
  2355                           
  2356                           ;MISC.c: 1160: unsigned int i;
  2357                           ;MISC.c: 1162: for(i=0;i<(blink<<1);i++)
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;incstack = 0
  2361  001A38  0E00               	movlw	0
  2362  001A3A  0101               	movlb	1	; () banked
  2363  001A3C  6FAA               	movwf	(MSC_BlinkLED@i+1)& (0+255),b
  2364  001A3E  0E00               	movlw	0
  2365  001A40  6FA9               	movwf	MSC_BlinkLED@i& (0+255),b
  2366  001A42  D011               	goto	l5682
  2367  001A44                     l5676:
  2368                           
  2369                           ; BSR set to: 1
  2370                           ;MISC.c: 1163: {
  2371                           ;MISC.c: 1164: MSC_DelayMS(50);
  2372  001A44  0E32               	movlw	50
  2373  001A46  0100               	movlb	0	; () banked
  2374  001A48  6FB5               	movwf	MSC_DelayMS@US& (0+255),b
  2375  001A4A  0E00               	movlw	0
  2376  001A4C  6FB6               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  2377  001A4E  0E00               	movlw	0
  2378  001A50  6FB7               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  2379  001A52  0E00               	movlw	0
  2380  001A54  6FB8               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  2381  001A56  EC94  F00C         	call	_MSC_DelayMS	;wreg free
  2382                           
  2383                           ;MISC.c: 1165: (LATC ^= 0x10);
  2384  001A5A  0E10               	movlw	16
  2385  001A5C  1A8B               	xorwf	3979,f,c	;volatile
  2386  001A5E  0101               	movlb	1	; () banked
  2387  001A60  4BA9               	infsnz	MSC_BlinkLED@i& (0+255),f,b
  2388  001A62  2BAA               	incf	(MSC_BlinkLED@i+1)& (0+255),f,b
  2389  001A64  D000               	goto	l5682
  2390  001A66                     l5682:
  2391                           
  2392                           ; BSR set to: 1
  2393  001A66  C1A5  F1A7         	movff	MSC_BlinkLED@blink,??_MSC_BlinkLED
  2394  001A6A  C1A6  F1A8         	movff	MSC_BlinkLED@blink+1,??_MSC_BlinkLED+1
  2395  001A6E  90D8               	bcf	status,0,c
  2396  001A70  0101               	movlb	1	; () banked
  2397  001A72  37A7               	rlcf	??_MSC_BlinkLED& (0+255),f,b
  2398  001A74  37A8               	rlcf	(??_MSC_BlinkLED+1)& (0+255),f,b
  2399  001A76  0101               	movlb	1	; () banked
  2400  001A78  51A7               	movf	??_MSC_BlinkLED& (0+255),w,b
  2401  001A7A  0101               	movlb	1	; () banked
  2402  001A7C  5DA9               	subwf	MSC_BlinkLED@i& (0+255),w,b
  2403  001A7E  0101               	movlb	1	; () banked
  2404  001A80  51A8               	movf	(??_MSC_BlinkLED+1)& (0+255),w,b
  2405  001A82  0101               	movlb	1	; () banked
  2406  001A84  59AA               	subwfb	(MSC_BlinkLED@i+1)& (0+255),w,b
  2407  001A86  A0D8               	btfss	status,0,c
  2408  001A88  D7DD               	goto	l5676
  2409                           
  2410                           ; BSR set to: 1
  2411                           
  2412                           ; BSR set to: 1
  2413  001A8A  0012               	return		;funcret
  2414  001A8C                     __end_of_MSC_BlinkLED:
  2415                           	opt stack 0
  2416                           tblptru	equ	0xFF8
  2417                           tblptrh	equ	0xFF7
  2418                           tblptrl	equ	0xFF6
  2419                           tablat	equ	0xFF5
  2420                           postinc0	equ	0xFEE
  2421                           wreg	equ	0xFE8
  2422                           postdec1	equ	0xFE5
  2423                           fsr1l	equ	0xFE1
  2424                           status	equ	0xFD8
  2425                           
  2426 ;; *************** function _MSC_DelayMS *****************
  2427 ;; Defined at:
  2428 ;;		line 47 in file "MISC.c"
  2429 ;; Parameters:    Size  Location     Type
  2430 ;;  US              4   53[BANK0 ] long 
  2431 ;; Auto vars:     Size  Location     Type
  2432 ;;  i               4    1[BANK1 ] long 
  2433 ;; Return value:  Size  Location     Type
  2434 ;;		None               void
  2435 ;; Registers used:
  2436 ;;		wreg, status,2, status,0, cstack
  2437 ;; Tracked objects:
  2438 ;;		On entry : 0/0
  2439 ;;		On exit  : 0/0
  2440 ;;		Unchanged: 0/0
  2441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2442 ;;      Params:         0       4       0       0       0
  2443 ;;      Locals:         0       0       4       0       0
  2444 ;;      Temps:          0       0       1       0       0
  2445 ;;      Totals:         0       4       5       0       0
  2446 ;;Total ram usage:        9 bytes
  2447 ;; Hardware stack levels used:    1
  2448 ;; Hardware stack levels required when called:    9
  2449 ;; This function calls:
  2450 ;;		_MSC_DelayNOP
  2451 ;; This function is called by:
  2452 ;;		_main
  2453 ;;		_MTR_Rotate
  2454 ;;		_MSC_BlinkLED
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           	psect	text8
  2459  001928                     __ptext8:
  2460                           	opt stack 0
  2461  001928                     _MSC_DelayMS:
  2462                           	opt stack 20
  2463                           
  2464                           ;MISC.c: 49: long i;
  2465                           ;MISC.c: 51: for(i=0; i<US; i++)
  2466                           
  2467                           ; BSR set to: 1
  2468                           ;incstack = 0
  2469  001928  0E00               	movlw	0
  2470  00192A  0101               	movlb	1	; () banked
  2471  00192C  6FA1               	movwf	MSC_DelayMS@i& (0+255),b
  2472  00192E  0E00               	movlw	0
  2473  001930  6FA2               	movwf	(MSC_DelayMS@i+1)& (0+255),b
  2474  001932  0E00               	movlw	0
  2475  001934  6FA3               	movwf	(MSC_DelayMS@i+2)& (0+255),b
  2476  001936  0E00               	movlw	0
  2477  001938  6FA4               	movwf	(MSC_DelayMS@i+3)& (0+255),b
  2478  00193A  D00F               	goto	l5542
  2479  00193C                     l5538:
  2480                           
  2481                           ; BSR set to: 1
  2482                           ;MISC.c: 52: {
  2483                           ;MISC.c: 53: MSC_DelayNOP(466);
  2484  00193C  0E01               	movlw	1
  2485  00193E  0100               	movlb	0	; () banked
  2486  001940  6FB2               	movwf	(MSC_DelayNOP@NOPs+1)& (0+255),b
  2487  001942  0ED2               	movlw	210
  2488  001944  6FB1               	movwf	MSC_DelayNOP@NOPs& (0+255),b
  2489  001946  EC5F  F00E         	call	_MSC_DelayNOP	;wreg free
  2490  00194A  0E01               	movlw	1
  2491  00194C  0101               	movlb	1	; () banked
  2492  00194E  27A1               	addwf	MSC_DelayMS@i& (0+255),f,b
  2493  001950  0E00               	movlw	0
  2494  001952  23A2               	addwfc	(MSC_DelayMS@i+1)& (0+255),f,b
  2495  001954  23A3               	addwfc	(MSC_DelayMS@i+2)& (0+255),f,b
  2496  001956  23A4               	addwfc	(MSC_DelayMS@i+3)& (0+255),f,b
  2497  001958  D000               	goto	l5542
  2498  00195A                     l5542:
  2499                           
  2500                           ; BSR set to: 1
  2501  00195A  0100               	movlb	0	; () banked
  2502  00195C  51B5               	movf	MSC_DelayMS@US& (0+255),w,b
  2503  00195E  0101               	movlb	1	; () banked
  2504  001960  5DA1               	subwf	MSC_DelayMS@i& (0+255),w,b
  2505  001962  0100               	movlb	0	; () banked
  2506  001964  51B6               	movf	(MSC_DelayMS@US+1)& (0+255),w,b
  2507  001966  0101               	movlb	1	; () banked
  2508  001968  59A2               	subwfb	(MSC_DelayMS@i+1)& (0+255),w,b
  2509  00196A  0100               	movlb	0	; () banked
  2510  00196C  51B7               	movf	(MSC_DelayMS@US+2)& (0+255),w,b
  2511  00196E  0101               	movlb	1	; () banked
  2512  001970  59A3               	subwfb	(MSC_DelayMS@i+2)& (0+255),w,b
  2513  001972  0101               	movlb	1	; () banked
  2514  001974  51A4               	movf	(MSC_DelayMS@i+3)& (0+255),w,b
  2515  001976  0A80               	xorlw	128
  2516  001978  0101               	movlb	1	; () banked
  2517  00197A  6FA0               	movwf	??_MSC_DelayMS& (0+255),b
  2518  00197C  0100               	movlb	0	; () banked
  2519  00197E  51B8               	movf	(MSC_DelayMS@US+3)& (0+255),w,b
  2520  001980  0A80               	xorlw	128
  2521  001982  0101               	movlb	1	; () banked
  2522  001984  59A0               	subwfb	??_MSC_DelayMS& (0+255),w,b
  2523  001986  A0D8               	btfss	status,0,c
  2524  001988  D7D9               	goto	l5538
  2525                           
  2526                           ; BSR set to: 1
  2527                           
  2528                           ; BSR set to: 1
  2529  00198A  0012               	return		;funcret
  2530  00198C                     __end_of_MSC_DelayMS:
  2531                           	opt stack 0
  2532                           tblptru	equ	0xFF8
  2533                           tblptrh	equ	0xFF7
  2534                           tblptrl	equ	0xFF6
  2535                           tablat	equ	0xFF5
  2536                           postinc0	equ	0xFEE
  2537                           wreg	equ	0xFE8
  2538                           postdec1	equ	0xFE5
  2539                           fsr1l	equ	0xFE1
  2540                           status	equ	0xFD8
  2541                           
  2542 ;; *************** function _MSC_DelayNOP *****************
  2543 ;; Defined at:
  2544 ;;		line 62 in file "MISC.c"
  2545 ;; Parameters:    Size  Location     Type
  2546 ;;  NOPs            2   49[BANK0 ] unsigned int 
  2547 ;; Auto vars:     Size  Location     Type
  2548 ;;  i               2   51[BANK0 ] unsigned int 
  2549 ;; Return value:  Size  Location     Type
  2550 ;;		None               void
  2551 ;; Registers used:
  2552 ;;		wreg, status,2, status,0
  2553 ;; Tracked objects:
  2554 ;;		On entry : 0/0
  2555 ;;		On exit  : 0/0
  2556 ;;		Unchanged: 0/0
  2557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2558 ;;      Params:         0       2       0       0       0
  2559 ;;      Locals:         0       2       0       0       0
  2560 ;;      Temps:          0       0       0       0       0
  2561 ;;      Totals:         0       4       0       0       0
  2562 ;;Total ram usage:        4 bytes
  2563 ;; Hardware stack levels used:    1
  2564 ;; Hardware stack levels required when called:    8
  2565 ;; This function calls:
  2566 ;;		Nothing
  2567 ;; This function is called by:
  2568 ;;		_MSC_DelayMS
  2569 ;; This function uses a non-reentrant model
  2570 ;;
  2571                           
  2572                           	psect	text9
  2573  001CBE                     __ptext9:
  2574                           	opt stack 0
  2575  001CBE                     _MSC_DelayNOP:
  2576                           	opt stack 20
  2577                           
  2578                           ;MISC.c: 64: unsigned int i;
  2579                           ;MISC.c: 65: for(i=0; i<NOPs; i++)
  2580                           
  2581                           ; BSR set to: 1
  2582                           ;incstack = 0
  2583  001CBE  0E00               	movlw	0
  2584  001CC0  0100               	movlb	0	; () banked
  2585  001CC2  6FB4               	movwf	(MSC_DelayNOP@i+1)& (0+255),b
  2586  001CC4  0E00               	movlw	0
  2587  001CC6  6FB3               	movwf	MSC_DelayNOP@i& (0+255),b
  2588  001CC8  D005               	goto	l5534
  2589  001CCA                     l545:
  2590                           
  2591                           ; BSR set to: 0
  2592                           ;MISC.c: 66: {
  2593                           ;MISC.c: 67: __nop();
  2594  001CCA  F000               	nop	
  2595  001CCC  0100               	movlb	0	; () banked
  2596  001CCE  4BB3               	infsnz	MSC_DelayNOP@i& (0+255),f,b
  2597  001CD0  2BB4               	incf	(MSC_DelayNOP@i+1)& (0+255),f,b
  2598  001CD2  D000               	goto	l5534
  2599  001CD4                     l5534:
  2600                           
  2601                           ; BSR set to: 0
  2602  001CD4  0100               	movlb	0	; () banked
  2603  001CD6  51B1               	movf	MSC_DelayNOP@NOPs& (0+255),w,b
  2604  001CD8  0100               	movlb	0	; () banked
  2605  001CDA  5DB3               	subwf	MSC_DelayNOP@i& (0+255),w,b
  2606  001CDC  0100               	movlb	0	; () banked
  2607  001CDE  51B2               	movf	(MSC_DelayNOP@NOPs+1)& (0+255),w,b
  2608  001CE0  0100               	movlb	0	; () banked
  2609  001CE2  59B4               	subwfb	(MSC_DelayNOP@i+1)& (0+255),w,b
  2610  001CE4  A0D8               	btfss	status,0,c
  2611  001CE6  D7F1               	goto	l545
  2612                           
  2613                           ; BSR set to: 0
  2614                           
  2615                           ; BSR set to: 0
  2616  001CE8  0012               	return		;funcret
  2617  001CEA                     __end_of_MSC_DelayNOP:
  2618                           	opt stack 0
  2619                           tblptru	equ	0xFF8
  2620                           tblptrh	equ	0xFF7
  2621                           tblptrl	equ	0xFF6
  2622                           tablat	equ	0xFF5
  2623                           postinc0	equ	0xFEE
  2624                           wreg	equ	0xFE8
  2625                           postdec1	equ	0xFE5
  2626                           fsr1l	equ	0xFE1
  2627                           status	equ	0xFD8
  2628                           
  2629 ;; *************** function _Init_System *****************
  2630 ;; Defined at:
  2631 ;;		line 153 in file "USER.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;		None
  2634 ;; Auto vars:     Size  Location     Type
  2635 ;;		None
  2636 ;; Return value:  Size  Location     Type
  2637 ;;		None               void
  2638 ;; Registers used:
  2639 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2640 ;; Tracked objects:
  2641 ;;		On entry : 0/0
  2642 ;;		On exit  : 0/0
  2643 ;;		Unchanged: 0/0
  2644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2645 ;;      Params:         0       0       0       0       0
  2646 ;;      Locals:         0       0       0       0       0
  2647 ;;      Temps:          0       0       0       0       0
  2648 ;;      Totals:         0       0       0       0       0
  2649 ;;Total ram usage:        0 bytes
  2650 ;; Hardware stack levels used:    1
  2651 ;; Hardware stack levels required when called:   13
  2652 ;; This function calls:
  2653 ;;		_BUT_ReadButton
  2654 ;;		_IR_ReadReceiver
  2655 ;;		_InitADC
  2656 ;;		_InitButton
  2657 ;;		_InitFlash
  2658 ;;		_InitIR
  2659 ;;		_InitLDO
  2660 ;;		_InitMOTOR
  2661 ;;		_InitRF
  2662 ;;		_InitTimers
  2663 ;; This function is called by:
  2664 ;;		_main
  2665 ;; This function uses a non-reentrant model
  2666 ;;
  2667                           
  2668                           	psect	text10
  2669  001C5A                     __ptext10:
  2670                           	opt stack 0
  2671  001C5A                     _Init_System:
  2672                           	opt stack 17
  2673                           
  2674                           ;USER.c: 155: InitTimers();
  2675                           
  2676                           ; BSR set to: 0
  2677                           ;incstack = 0
  2678  001C5A  ECC7  F010         	call	_InitTimers	;wreg free
  2679                           
  2680                           ;USER.c: 156: InitRF();
  2681  001C5E  EC66  F00D         	call	_InitRF	;wreg free
  2682                           
  2683                           ;USER.c: 157: InitButton();
  2684  001C62  ECCE  F010         	call	_InitButton	;wreg free
  2685                           
  2686                           ;USER.c: 158: InitIR();
  2687  001C66  EC8E  F00F         	call	_InitIR	;wreg free
  2688                           
  2689                           ;USER.c: 159: InitLDO();
  2690  001C6A  ECF6  F010         	call	_InitLDO	;wreg free
  2691                           
  2692                           ;USER.c: 160: InitMOTOR();
  2693  001C6E  ECFD  F010         	call	_InitMOTOR	;wreg free
  2694                           
  2695                           ;USER.c: 161: InitFlash();
  2696  001C72  EC01  F011         	call	_InitFlash	;wreg free
  2697                           
  2698                           ;USER.c: 162: InitADC();
  2699  001C76  ECE2  F00E         	call	_InitADC	;wreg free
  2700                           
  2701                           ;USER.c: 164: BUT_ReadButton();
  2702  001C7A  ECBF  F00D         	call	_BUT_ReadButton	;wreg free
  2703                           
  2704                           ;USER.c: 165: IR_ReadReceiver();
  2705  001C7E  ECDB  F00D         	call	_IR_ReadReceiver	;wreg free
  2706                           
  2707                           ;USER.c: 166: INTCONbits.RBIF = 0;
  2708  001C82  90F2               	bcf	intcon,0,c	;volatile
  2709                           
  2710                           ;USER.c: 169: RCONbits.IPEN = 1;
  2711  001C84  8ED0               	bsf	4048,7,c	;volatile
  2712                           
  2713                           ;USER.c: 170: INTCONbits.GIE = 1;
  2714  001C86  8EF2               	bsf	intcon,7,c	;volatile
  2715                           
  2716                           ;USER.c: 171: INTCONbits.PEIE = 1;
  2717  001C88  8CF2               	bsf	intcon,6,c	;volatile
  2718  001C8A  0012               	return		;funcret
  2719  001C8C                     __end_of_Init_System:
  2720                           	opt stack 0
  2721                           tblptru	equ	0xFF8
  2722                           tblptrh	equ	0xFF7
  2723                           tblptrl	equ	0xFF6
  2724                           tablat	equ	0xFF5
  2725                           intcon	equ	0xFF2
  2726                           postinc0	equ	0xFEE
  2727                           wreg	equ	0xFE8
  2728                           postdec1	equ	0xFE5
  2729                           fsr1l	equ	0xFE1
  2730                           status	equ	0xFD8
  2731                           
  2732 ;; *************** function _InitTimers *****************
  2733 ;; Defined at:
  2734 ;;		line 304 in file "TIMERS.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;		None
  2737 ;; Auto vars:     Size  Location     Type
  2738 ;;		None
  2739 ;; Return value:  Size  Location     Type
  2740 ;;		None               void
  2741 ;; Registers used:
  2742 ;;		wreg, status,2, status,0, cstack
  2743 ;; Tracked objects:
  2744 ;;		On entry : 0/0
  2745 ;;		On exit  : 0/0
  2746 ;;		Unchanged: 0/0
  2747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2748 ;;      Params:         0       0       0       0       0
  2749 ;;      Locals:         0       0       0       0       0
  2750 ;;      Temps:          0       0       0       0       0
  2751 ;;      Totals:         0       0       0       0       0
  2752 ;;Total ram usage:        0 bytes
  2753 ;; Hardware stack levels used:    1
  2754 ;; Hardware stack levels required when called:   12
  2755 ;; This function calls:
  2756 ;;		_InitTimer0
  2757 ;;		_InitTimer1
  2758 ;;		_InitTimer2
  2759 ;; This function is called by:
  2760 ;;		_Init_System
  2761 ;; This function uses a non-reentrant model
  2762 ;;
  2763                           
  2764                           	psect	text11
  2765  00218E                     __ptext11:
  2766                           	opt stack 0
  2767  00218E                     _InitTimers:
  2768                           	opt stack 17
  2769                           
  2770                           ;TIMERS.c: 306: InitTimer0();
  2771                           
  2772                           ;incstack = 0
  2773  00218E  EC42  F00F         	call	_InitTimer0	;wreg free
  2774                           
  2775                           ;TIMERS.c: 307: InitTimer1();
  2776  002192  EC72  F00F         	call	_InitTimer1	;wreg free
  2777                           
  2778                           ;TIMERS.c: 308: InitTimer2();
  2779  002196  EC63  F00F         	call	_InitTimer2	;wreg free
  2780  00219A  0012               	return		;funcret
  2781  00219C                     __end_of_InitTimers:
  2782                           	opt stack 0
  2783                           tblptru	equ	0xFF8
  2784                           tblptrh	equ	0xFF7
  2785                           tblptrl	equ	0xFF6
  2786                           tablat	equ	0xFF5
  2787                           intcon	equ	0xFF2
  2788                           postinc0	equ	0xFEE
  2789                           wreg	equ	0xFE8
  2790                           postdec1	equ	0xFE5
  2791                           fsr1l	equ	0xFE1
  2792                           status	equ	0xFD8
  2793                           
  2794 ;; *************** function _InitTimer2 *****************
  2795 ;; Defined at:
  2796 ;;		line 348 in file "TIMERS.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;		None
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;		None
  2801 ;; Return value:  Size  Location     Type
  2802 ;;		None               void
  2803 ;; Registers used:
  2804 ;;		wreg, status,2, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2810 ;;      Params:         0       0       0       0       0
  2811 ;;      Locals:         0       0       0       0       0
  2812 ;;      Temps:          0       0       0       0       0
  2813 ;;      Totals:         0       0       0       0       0
  2814 ;;Total ram usage:        0 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    9
  2817 ;; This function calls:
  2818 ;;		_TMR_Timer2
  2819 ;;		_TMR_Timer2Int
  2820 ;; This function is called by:
  2821 ;;		_InitTimers
  2822 ;; This function uses a non-reentrant model
  2823 ;;
  2824                           
  2825                           	psect	text12
  2826  001EC6                     __ptext12:
  2827                           	opt stack 0
  2828  001EC6                     _InitTimer2:
  2829                           	opt stack 19
  2830                           
  2831                           ;TIMERS.c: 350: TMR_Timer2(0);
  2832                           
  2833                           ;incstack = 0
  2834  001EC6  0E00               	movlw	0
  2835  001EC8  ECDA  F00F         	call	_TMR_Timer2
  2836                           
  2837                           ;TIMERS.c: 351: T2CONbits.TOUTPS = 0b1111;
  2838  001ECC  86CA               	bsf	4042,3,c	;volatile
  2839  001ECE  88CA               	bsf	4042,4,c	;volatile
  2840  001ED0  8ACA               	bsf	4042,5,c	;volatile
  2841  001ED2  8CCA               	bsf	4042,6,c	;volatile
  2842                           
  2843                           ;TIMERS.c: 352: T2CONbits.T2CKPS = 0b11;
  2844  001ED4  0E03               	movlw	3
  2845  001ED6  12CA               	iorwf	4042,f,c	;volatile
  2846                           
  2847                           ;TIMERS.c: 353: IPR1bits.TMR2IP = 0;
  2848  001ED8  929F               	bcf	3999,1,c	;volatile
  2849                           
  2850                           ;TIMERS.c: 354: PR2 = 0xFF;
  2851  001EDA  68CB               	setf	4043,c	;volatile
  2852                           
  2853                           ;TIMERS.c: 355: TMR_Timer2Int(1);
  2854  001EDC  0E01               	movlw	1
  2855  001EDE  ECCE  F00F         	call	_TMR_Timer2Int
  2856  001EE2  0012               	return		;funcret
  2857  001EE4                     __end_of_InitTimer2:
  2858                           	opt stack 0
  2859                           tblptru	equ	0xFF8
  2860                           tblptrh	equ	0xFF7
  2861                           tblptrl	equ	0xFF6
  2862                           tablat	equ	0xFF5
  2863                           intcon	equ	0xFF2
  2864                           postinc0	equ	0xFEE
  2865                           wreg	equ	0xFE8
  2866                           postdec1	equ	0xFE5
  2867                           fsr1l	equ	0xFE1
  2868                           status	equ	0xFD8
  2869                           
  2870 ;; *************** function _TMR_Timer2Int *****************
  2871 ;; Defined at:
  2872 ;;		line 246 in file "TIMERS.c"
  2873 ;; Parameters:    Size  Location     Type
  2874 ;;  state           1    wreg     unsigned char 
  2875 ;; Auto vars:     Size  Location     Type
  2876 ;;  state           1   49[BANK0 ] unsigned char 
  2877 ;; Return value:  Size  Location     Type
  2878 ;;		None               void
  2879 ;; Registers used:
  2880 ;;		wreg, status,2
  2881 ;; Tracked objects:
  2882 ;;		On entry : 0/0
  2883 ;;		On exit  : 0/0
  2884 ;;		Unchanged: 0/0
  2885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2886 ;;      Params:         0       0       0       0       0
  2887 ;;      Locals:         0       1       0       0       0
  2888 ;;      Temps:          0       0       0       0       0
  2889 ;;      Totals:         0       1       0       0       0
  2890 ;;Total ram usage:        1 bytes
  2891 ;; Hardware stack levels used:    1
  2892 ;; Hardware stack levels required when called:    8
  2893 ;; This function calls:
  2894 ;;		Nothing
  2895 ;; This function is called by:
  2896 ;;		_InitTimer2
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900                           	psect	text13
  2901  001F9C                     __ptext13:
  2902                           	opt stack 0
  2903  001F9C                     _TMR_Timer2Int:
  2904                           	opt stack 19
  2905                           
  2906                           ;incstack = 0
  2907                           ;TMR_Timer2Int@state stored from wreg
  2908  001F9C  0100               	movlb	0	; () banked
  2909  001F9E  6FB1               	movwf	TMR_Timer2Int@state& (0+255),b
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;TIMERS.c: 248: if(state)
  2913  001FA0  0100               	movlb	0	; () banked
  2914  001FA2  51B1               	movf	TMR_Timer2Int@state& (0+255),w,b
  2915  001FA4  0100               	movlb	0	; () banked
  2916  001FA6  B4D8               	btfsc	status,2,c
  2917  001FA8  D002               	goto	l1023
  2918                           
  2919                           ; BSR set to: 0
  2920                           ;TIMERS.c: 249: {
  2921                           ;TIMERS.c: 251: PIE1bits.TMR2IE = 1;
  2922  001FAA  829D               	bsf	3997,1,c	;volatile
  2923                           
  2924                           ;TIMERS.c: 252: }
  2925  001FAC  0012               	return	
  2926  001FAE                     l1023:
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;TIMERS.c: 253: else
  2930                           ;TIMERS.c: 254: {
  2931                           ;TIMERS.c: 256: PIE1bits.TMR2IE = 0;
  2932  001FAE  929D               	bcf	3997,1,c	;volatile
  2933  001FB0  0012               	return	
  2934                           
  2935                           ; BSR set to: 0
  2936                           
  2937                           ; BSR set to: 0
  2938  001FB2  0012               	return		;funcret
  2939  001FB4                     __end_of_TMR_Timer2Int:
  2940                           	opt stack 0
  2941                           tblptru	equ	0xFF8
  2942                           tblptrh	equ	0xFF7
  2943                           tblptrl	equ	0xFF6
  2944                           tablat	equ	0xFF5
  2945                           intcon	equ	0xFF2
  2946                           postinc0	equ	0xFEE
  2947                           wreg	equ	0xFE8
  2948                           postdec1	equ	0xFE5
  2949                           fsr1l	equ	0xFE1
  2950                           status	equ	0xFD8
  2951                           
  2952 ;; *************** function _TMR_Timer2 *****************
  2953 ;; Defined at:
  2954 ;;		line 125 in file "TIMERS.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  state           1    wreg     unsigned char 
  2957 ;; Auto vars:     Size  Location     Type
  2958 ;;  state           1   49[BANK0 ] unsigned char 
  2959 ;; Return value:  Size  Location     Type
  2960 ;;		None               void
  2961 ;; Registers used:
  2962 ;;		wreg, status,2
  2963 ;; Tracked objects:
  2964 ;;		On entry : 0/0
  2965 ;;		On exit  : 0/0
  2966 ;;		Unchanged: 0/0
  2967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2968 ;;      Params:         0       0       0       0       0
  2969 ;;      Locals:         0       1       0       0       0
  2970 ;;      Temps:          0       0       0       0       0
  2971 ;;      Totals:         0       1       0       0       0
  2972 ;;Total ram usage:        1 bytes
  2973 ;; Hardware stack levels used:    1
  2974 ;; Hardware stack levels required when called:    8
  2975 ;; This function calls:
  2976 ;;		Nothing
  2977 ;; This function is called by:
  2978 ;;		_InitTimer2
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           	psect	text14
  2983  001FB4                     __ptext14:
  2984                           	opt stack 0
  2985  001FB4                     _TMR_Timer2:
  2986                           	opt stack 19
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;incstack = 0
  2990                           ;TMR_Timer2@state stored from wreg
  2991  001FB4  0100               	movlb	0	; () banked
  2992  001FB6  6FB1               	movwf	TMR_Timer2@state& (0+255),b
  2993                           
  2994                           ; BSR set to: 0
  2995                           ;TIMERS.c: 127: if(state)
  2996  001FB8  0100               	movlb	0	; () banked
  2997  001FBA  51B1               	movf	TMR_Timer2@state& (0+255),w,b
  2998  001FBC  0100               	movlb	0	; () banked
  2999  001FBE  B4D8               	btfsc	status,2,c
  3000  001FC0  D002               	goto	l993
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;TIMERS.c: 128: {
  3004                           ;TIMERS.c: 130: T2CONbits.TMR2ON = 1;
  3005  001FC2  84CA               	bsf	4042,2,c	;volatile
  3006                           
  3007                           ;TIMERS.c: 131: }
  3008  001FC4  0012               	return	
  3009  001FC6                     l993:
  3010                           
  3011                           ; BSR set to: 0
  3012                           ;TIMERS.c: 132: else
  3013                           ;TIMERS.c: 133: {
  3014                           ;TIMERS.c: 135: T2CONbits.TMR2ON = 0;
  3015  001FC6  94CA               	bcf	4042,2,c	;volatile
  3016  001FC8  0012               	return	
  3017                           
  3018                           ; BSR set to: 0
  3019                           
  3020                           ; BSR set to: 0
  3021  001FCA  0012               	return		;funcret
  3022  001FCC                     __end_of_TMR_Timer2:
  3023                           	opt stack 0
  3024                           tblptru	equ	0xFF8
  3025                           tblptrh	equ	0xFF7
  3026                           tblptrl	equ	0xFF6
  3027                           tablat	equ	0xFF5
  3028                           intcon	equ	0xFF2
  3029                           postinc0	equ	0xFEE
  3030                           wreg	equ	0xFE8
  3031                           postdec1	equ	0xFE5
  3032                           fsr1l	equ	0xFE1
  3033                           status	equ	0xFD8
  3034                           
  3035 ;; *************** function _InitTimer1 *****************
  3036 ;; Defined at:
  3037 ;;		line 333 in file "TIMERS.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;		None
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;		None
  3042 ;; Return value:  Size  Location     Type
  3043 ;;		None               void
  3044 ;; Registers used:
  3045 ;;		wreg, status,2, status,0, cstack
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3051 ;;      Params:         0       0       0       0       0
  3052 ;;      Locals:         0       0       0       0       0
  3053 ;;      Temps:          0       0       0       0       0
  3054 ;;      Totals:         0       0       0       0       0
  3055 ;;Total ram usage:        0 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:   11
  3058 ;; This function calls:
  3059 ;;		_TMR_ResetTimer1
  3060 ;;		_TMR_Timer1
  3061 ;;		_TMR_Timer1Function
  3062 ;;		_TMR_Timer1Int
  3063 ;; This function is called by:
  3064 ;;		_InitTimers
  3065 ;; This function uses a non-reentrant model
  3066 ;;
  3067                           
  3068                           	psect	text15
  3069  001EE4                     __ptext15:
  3070                           	opt stack 0
  3071  001EE4                     _InitTimer1:
  3072                           	opt stack 17
  3073                           
  3074                           ;TIMERS.c: 335: TMR_Timer1(0);
  3075                           
  3076                           ; BSR set to: 0
  3077                           ;incstack = 0
  3078  001EE4  0E00               	movlw	0
  3079  001EE6  ECF2  F00F         	call	_TMR_Timer1
  3080                           
  3081                           ;TIMERS.c: 336: TMR_ResetTimer1();
  3082  001EEA  EC75  F00E         	call	_TMR_ResetTimer1	;wreg free
  3083                           
  3084                           ;TIMERS.c: 337: T1CONbits.RD16 = 1;
  3085  001EEE  8ECD               	bsf	4045,7,c	;volatile
  3086                           
  3087                           ;TIMERS.c: 338: TMR_Timer1Function(16);
  3088  001EF0  0E10               	movlw	16
  3089  001EF2  EC46  F00E         	call	_TMR_Timer1Function
  3090                           
  3091                           ;TIMERS.c: 339: IPR1bits.TMR1IP = 0;
  3092  001EF6  909F               	bcf	3999,0,c	;volatile
  3093                           
  3094                           ;TIMERS.c: 340: TMR_Timer1Int(1);
  3095  001EF8  0E01               	movlw	1
  3096  001EFA  ECE6  F00F         	call	_TMR_Timer1Int
  3097  001EFE  0012               	return		;funcret
  3098  001F00                     __end_of_InitTimer1:
  3099                           	opt stack 0
  3100                           tblptru	equ	0xFF8
  3101                           tblptrh	equ	0xFF7
  3102                           tblptrl	equ	0xFF6
  3103                           tablat	equ	0xFF5
  3104                           intcon	equ	0xFF2
  3105                           postinc0	equ	0xFEE
  3106                           wreg	equ	0xFE8
  3107                           postdec1	equ	0xFE5
  3108                           fsr1l	equ	0xFE1
  3109                           status	equ	0xFD8
  3110                           
  3111 ;; *************** function _TMR_Timer1Int *****************
  3112 ;; Defined at:
  3113 ;;		line 227 in file "TIMERS.c"
  3114 ;; Parameters:    Size  Location     Type
  3115 ;;  state           1    wreg     unsigned char 
  3116 ;; Auto vars:     Size  Location     Type
  3117 ;;  state           1   49[BANK0 ] unsigned char 
  3118 ;; Return value:  Size  Location     Type
  3119 ;;		None               void
  3120 ;; Registers used:
  3121 ;;		wreg, status,2
  3122 ;; Tracked objects:
  3123 ;;		On entry : 0/0
  3124 ;;		On exit  : 0/0
  3125 ;;		Unchanged: 0/0
  3126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3127 ;;      Params:         0       0       0       0       0
  3128 ;;      Locals:         0       1       0       0       0
  3129 ;;      Temps:          0       0       0       0       0
  3130 ;;      Totals:         0       1       0       0       0
  3131 ;;Total ram usage:        1 bytes
  3132 ;; Hardware stack levels used:    1
  3133 ;; Hardware stack levels required when called:    8
  3134 ;; This function calls:
  3135 ;;		Nothing
  3136 ;; This function is called by:
  3137 ;;		_InitTimer1
  3138 ;; This function uses a non-reentrant model
  3139 ;;
  3140                           
  3141                           	psect	text16
  3142  001FCC                     __ptext16:
  3143                           	opt stack 0
  3144  001FCC                     _TMR_Timer1Int:
  3145                           	opt stack 19
  3146                           
  3147                           ;incstack = 0
  3148                           ;TMR_Timer1Int@state stored from wreg
  3149  001FCC  0100               	movlb	0	; () banked
  3150  001FCE  6FB1               	movwf	TMR_Timer1Int@state& (0+255),b
  3151                           
  3152                           ; BSR set to: 0
  3153                           ;TIMERS.c: 229: if(state)
  3154  001FD0  0100               	movlb	0	; () banked
  3155  001FD2  51B1               	movf	TMR_Timer1Int@state& (0+255),w,b
  3156  001FD4  0100               	movlb	0	; () banked
  3157  001FD6  B4D8               	btfsc	status,2,c
  3158  001FD8  D002               	goto	l1018
  3159                           
  3160                           ; BSR set to: 0
  3161                           ;TIMERS.c: 230: {
  3162                           ;TIMERS.c: 232: PIE1bits.TMR1IE = 1;
  3163  001FDA  809D               	bsf	3997,0,c	;volatile
  3164                           
  3165                           ;TIMERS.c: 233: }
  3166  001FDC  0012               	return	
  3167  001FDE                     l1018:
  3168                           
  3169                           ; BSR set to: 0
  3170                           ;TIMERS.c: 234: else
  3171                           ;TIMERS.c: 235: {
  3172                           ;TIMERS.c: 237: PIE1bits.TMR1IE = 0;
  3173  001FDE  909D               	bcf	3997,0,c	;volatile
  3174  001FE0  0012               	return	
  3175                           
  3176                           ; BSR set to: 0
  3177                           
  3178                           ; BSR set to: 0
  3179  001FE2  0012               	return		;funcret
  3180  001FE4                     __end_of_TMR_Timer1Int:
  3181                           	opt stack 0
  3182                           tblptru	equ	0xFF8
  3183                           tblptrh	equ	0xFF7
  3184                           tblptrl	equ	0xFF6
  3185                           tablat	equ	0xFF5
  3186                           intcon	equ	0xFF2
  3187                           postinc0	equ	0xFEE
  3188                           wreg	equ	0xFE8
  3189                           postdec1	equ	0xFE5
  3190                           fsr1l	equ	0xFE1
  3191                           status	equ	0xFD8
  3192                           
  3193 ;; *************** function _TMR_Timer1Function *****************
  3194 ;; Defined at:
  3195 ;;		line 402 in file "TIMERS.c"
  3196 ;; Parameters:    Size  Location     Type
  3197 ;;  mode            1    wreg     unsigned char 
  3198 ;; Auto vars:     Size  Location     Type
  3199 ;;  mode            1   51[BANK0 ] unsigned char 
  3200 ;; Return value:  Size  Location     Type
  3201 ;;		None               void
  3202 ;; Registers used:
  3203 ;;		wreg, status,2, status,0, cstack
  3204 ;; Tracked objects:
  3205 ;;		On entry : 0/0
  3206 ;;		On exit  : 0/0
  3207 ;;		Unchanged: 0/0
  3208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3209 ;;      Params:         0       0       0       0       0
  3210 ;;      Locals:         0       1       0       0       0
  3211 ;;      Temps:          0       0       0       0       0
  3212 ;;      Totals:         0       1       0       0       0
  3213 ;;Total ram usage:        1 bytes
  3214 ;; Hardware stack levels used:    1
  3215 ;; Hardware stack levels required when called:   10
  3216 ;; This function calls:
  3217 ;;		_TMR_ResetTimer1
  3218 ;;		_TMR_Timer1
  3219 ;;		_TMR_Timer1Osc
  3220 ;; This function is called by:
  3221 ;;		_InitTimer1
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           	psect	text17
  3226  001C8C                     __ptext17:
  3227                           	opt stack 0
  3228  001C8C                     _TMR_Timer1Function:
  3229                           	opt stack 17
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;incstack = 0
  3233                           ;TMR_Timer1Function@mode stored from wreg
  3234  001C8C  0100               	movlb	0	; () banked
  3235  001C8E  6FB3               	movwf	TMR_Timer1Function@mode& (0+255),b
  3236                           
  3237                           ; BSR set to: 0
  3238                           ;TIMERS.c: 404: TMR_Timer1(0);
  3239  001C90  0E00               	movlw	0
  3240  001C92  ECF2  F00F         	call	_TMR_Timer1
  3241                           
  3242                           ;TIMERS.c: 405: if(mode == 15)
  3243  001C96  0E0F               	movlw	15
  3244  001C98  0100               	movlb	0	; () banked
  3245  001C9A  19B3               	xorwf	TMR_Timer1Function@mode& (0+255),w,b
  3246  001C9C  A4D8               	btfss	status,2,c
  3247  001C9E  D006               	goto	l4162
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;TIMERS.c: 406: {
  3251                           ;TIMERS.c: 407: T1CONbits.T1CKPS = 0b00;
  3252  001CA0  0ECF               	movlw	-49
  3253  001CA2  16CD               	andwf	4045,f,c	;volatile
  3254                           
  3255                           ; BSR set to: 0
  3256                           ;TIMERS.c: 408: TMR_Timer1Osc(1);
  3257  001CA4  0E01               	movlw	1
  3258  001CA6  EC53  F00F         	call	_TMR_Timer1Osc
  3259                           
  3260                           ;TIMERS.c: 409: }
  3261  001CAA  D006               	goto	l4166
  3262  001CAC                     l4162:
  3263                           
  3264                           ;TIMERS.c: 410: else
  3265                           ;TIMERS.c: 411: {
  3266                           ;TIMERS.c: 412: T1CONbits.T1CKPS = 0b11;
  3267  001CAC  0E30               	movlw	48
  3268  001CAE  12CD               	iorwf	4045,f,c	;volatile
  3269                           
  3270                           ;TIMERS.c: 413: TMR_Timer1Osc(0);
  3271  001CB0  0E00               	movlw	0
  3272  001CB2  EC53  F00F         	call	_TMR_Timer1Osc
  3273  001CB6  D000               	goto	l4166
  3274  001CB8                     l4166:
  3275                           
  3276                           ;TIMERS.c: 414: }
  3277                           ;TIMERS.c: 415: TMR_ResetTimer1();
  3278  001CB8  EC75  F00E         	call	_TMR_ResetTimer1	;wreg free
  3279  001CBC  0012               	return		;funcret
  3280  001CBE                     __end_of_TMR_Timer1Function:
  3281                           	opt stack 0
  3282                           tblptru	equ	0xFF8
  3283                           tblptrh	equ	0xFF7
  3284                           tblptrl	equ	0xFF6
  3285                           tablat	equ	0xFF5
  3286                           intcon	equ	0xFF2
  3287                           postinc0	equ	0xFEE
  3288                           wreg	equ	0xFE8
  3289                           postdec1	equ	0xFE5
  3290                           fsr1l	equ	0xFE1
  3291                           status	equ	0xFD8
  3292                           
  3293 ;; *************** function _TMR_Timer1Osc *****************
  3294 ;; Defined at:
  3295 ;;		line 265 in file "TIMERS.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;  state           1    wreg     unsigned char 
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;  state           1   49[BANK0 ] unsigned char 
  3300 ;; Return value:  Size  Location     Type
  3301 ;;		None               void
  3302 ;; Registers used:
  3303 ;;		wreg, status,2
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3309 ;;      Params:         0       0       0       0       0
  3310 ;;      Locals:         0       1       0       0       0
  3311 ;;      Temps:          0       0       0       0       0
  3312 ;;      Totals:         0       1       0       0       0
  3313 ;;Total ram usage:        1 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; Hardware stack levels required when called:    8
  3316 ;; This function calls:
  3317 ;;		Nothing
  3318 ;; This function is called by:
  3319 ;;		_TMR_Timer1Function
  3320 ;; This function uses a non-reentrant model
  3321 ;;
  3322                           
  3323                           	psect	text18
  3324  001EA6                     __ptext18:
  3325                           	opt stack 0
  3326  001EA6                     _TMR_Timer1Osc:
  3327                           	opt stack 18
  3328                           
  3329                           ;incstack = 0
  3330                           ;TMR_Timer1Osc@state stored from wreg
  3331  001EA6  0100               	movlb	0	; () banked
  3332  001EA8  6FB1               	movwf	TMR_Timer1Osc@state& (0+255),b
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;TIMERS.c: 267: if(state)
  3336  001EAA  0100               	movlb	0	; () banked
  3337  001EAC  51B1               	movf	TMR_Timer1Osc@state& (0+255),w,b
  3338  001EAE  0100               	movlb	0	; () banked
  3339  001EB0  B4D8               	btfsc	status,2,c
  3340  001EB2  D004               	goto	l1028
  3341                           
  3342                           ; BSR set to: 0
  3343                           ;TIMERS.c: 268: {
  3344                           ;TIMERS.c: 269: T1CONbits.T1RUN = 1;
  3345  001EB4  8CCD               	bsf	4045,6,c	;volatile
  3346                           
  3347                           ;TIMERS.c: 270: T1CONbits.T1OSCEN = 1;
  3348  001EB6  86CD               	bsf	4045,3,c	;volatile
  3349                           
  3350                           ;TIMERS.c: 271: T1CONbits.TMR1CS = 1;
  3351  001EB8  82CD               	bsf	4045,1,c	;volatile
  3352                           
  3353                           ;TIMERS.c: 272: }
  3354  001EBA  0012               	return	
  3355  001EBC                     l1028:
  3356                           
  3357                           ; BSR set to: 0
  3358                           ;TIMERS.c: 273: else
  3359                           ;TIMERS.c: 274: {
  3360                           ;TIMERS.c: 275: T1CONbits.T1RUN = 0;
  3361  001EBC  9CCD               	bcf	4045,6,c	;volatile
  3362                           
  3363                           ;TIMERS.c: 276: T1CONbits.T1OSCEN = 0;
  3364  001EBE  96CD               	bcf	4045,3,c	;volatile
  3365                           
  3366                           ;TIMERS.c: 277: T1CONbits.TMR1CS = 0;
  3367  001EC0  92CD               	bcf	4045,1,c	;volatile
  3368  001EC2  0012               	return	
  3369                           
  3370                           ; BSR set to: 0
  3371                           
  3372                           ; BSR set to: 0
  3373  001EC4  0012               	return		;funcret
  3374  001EC6                     __end_of_TMR_Timer1Osc:
  3375                           	opt stack 0
  3376                           tblptru	equ	0xFF8
  3377                           tblptrh	equ	0xFF7
  3378                           tblptrl	equ	0xFF6
  3379                           tablat	equ	0xFF5
  3380                           intcon	equ	0xFF2
  3381                           postinc0	equ	0xFEE
  3382                           wreg	equ	0xFE8
  3383                           postdec1	equ	0xFE5
  3384                           fsr1l	equ	0xFE1
  3385                           status	equ	0xFD8
  3386                           
  3387 ;; *************** function _TMR_ResetTimer1 *****************
  3388 ;; Defined at:
  3389 ;;		line 162 in file "TIMERS.c"
  3390 ;; Parameters:    Size  Location     Type
  3391 ;;		None
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  TimerOn         1   50[BANK0 ] unsigned char 
  3394 ;; Return value:  Size  Location     Type
  3395 ;;		None               void
  3396 ;; Registers used:
  3397 ;;		wreg, status,2, cstack
  3398 ;; Tracked objects:
  3399 ;;		On entry : 0/0
  3400 ;;		On exit  : 0/0
  3401 ;;		Unchanged: 0/0
  3402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3403 ;;      Params:         0       0       0       0       0
  3404 ;;      Locals:         0       1       0       0       0
  3405 ;;      Temps:          0       0       0       0       0
  3406 ;;      Totals:         0       1       0       0       0
  3407 ;;Total ram usage:        1 bytes
  3408 ;; Hardware stack levels used:    1
  3409 ;; Hardware stack levels required when called:    9
  3410 ;; This function calls:
  3411 ;;		_TMR_Timer1
  3412 ;; This function is called by:
  3413 ;;		_InitTimer1
  3414 ;;		_TMR_Timer1Function
  3415 ;; This function uses a non-reentrant model
  3416 ;;
  3417                           
  3418                           	psect	text19
  3419  001CEA                     __ptext19:
  3420                           	opt stack 0
  3421  001CEA                     _TMR_ResetTimer1:
  3422                           	opt stack 17
  3423                           
  3424                           ;TIMERS.c: 164: unsigned char TimerOn = T1CONbits.TMR1ON;
  3425                           
  3426                           ; BSR set to: 0
  3427                           ;incstack = 0
  3428  001CEA  0E00               	movlw	0
  3429  001CEC  B0CD               	btfsc	4045,0,c	;volatile
  3430  001CEE  0E01               	movlw	1
  3431  001CF0  0100               	movlb	0	; () banked
  3432  001CF2  6FB2               	movwf	TMR_ResetTimer1@TimerOn& (0+255),b
  3433                           
  3434                           ; BSR set to: 0
  3435                           ;TIMERS.c: 166: TMR_Timer1(0);
  3436  001CF4  0E00               	movlw	0
  3437  001CF6  ECF2  F00F         	call	_TMR_Timer1
  3438                           
  3439                           ;TIMERS.c: 167: TMR1H = 0;
  3440  001CFA  0E00               	movlw	0
  3441  001CFC  6ECF               	movwf	4047,c	;volatile
  3442                           
  3443                           ;TIMERS.c: 168: TMR1L = 2;
  3444  001CFE  0E02               	movlw	2
  3445  001D00  6ECE               	movwf	4046,c	;volatile
  3446                           
  3447                           ;TIMERS.c: 169: if(TimerOn)
  3448  001D02  0100               	movlb	0	; () banked
  3449  001D04  51B2               	movf	TMR_ResetTimer1@TimerOn& (0+255),w,b
  3450  001D06  0100               	movlb	0	; () banked
  3451  001D08  B4D8               	btfsc	status,2,c
  3452  001D0A  0012               	return	
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;TIMERS.c: 170: {
  3456                           ;TIMERS.c: 171: TMR_Timer1(1);
  3457  001D0C  0E01               	movlw	1
  3458  001D0E  ECF2  F00F         	call	_TMR_Timer1
  3459  001D12  0012               	return	
  3460  001D14  0012               	return		;funcret
  3461  001D16                     __end_of_TMR_ResetTimer1:
  3462                           	opt stack 0
  3463                           tblptru	equ	0xFF8
  3464                           tblptrh	equ	0xFF7
  3465                           tblptrl	equ	0xFF6
  3466                           tablat	equ	0xFF5
  3467                           intcon	equ	0xFF2
  3468                           postinc0	equ	0xFEE
  3469                           wreg	equ	0xFE8
  3470                           postdec1	equ	0xFE5
  3471                           fsr1l	equ	0xFE1
  3472                           status	equ	0xFD8
  3473                           
  3474 ;; *************** function _TMR_Timer1 *****************
  3475 ;; Defined at:
  3476 ;;		line 106 in file "TIMERS.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;  state           1    wreg     unsigned char 
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  state           1   49[BANK0 ] unsigned char 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;		None               void
  3483 ;; Registers used:
  3484 ;;		wreg, status,2
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3490 ;;      Params:         0       0       0       0       0
  3491 ;;      Locals:         0       1       0       0       0
  3492 ;;      Temps:          0       0       0       0       0
  3493 ;;      Totals:         0       1       0       0       0
  3494 ;;Total ram usage:        1 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    8
  3497 ;; This function calls:
  3498 ;;		Nothing
  3499 ;; This function is called by:
  3500 ;;		_TMR_ResetTimer1
  3501 ;;		_InitTimer1
  3502 ;;		_TMR_Timer1Function
  3503 ;; This function uses a non-reentrant model
  3504 ;;
  3505                           
  3506                           	psect	text20
  3507  001FE4                     __ptext20:
  3508                           	opt stack 0
  3509  001FE4                     _TMR_Timer1:
  3510                           	opt stack 18
  3511                           
  3512                           ;incstack = 0
  3513                           ;TMR_Timer1@state stored from wreg
  3514  001FE4  0100               	movlb	0	; () banked
  3515  001FE6  6FB1               	movwf	TMR_Timer1@state& (0+255),b
  3516                           
  3517                           ; BSR set to: 0
  3518                           ;TIMERS.c: 108: if(state)
  3519  001FE8  0100               	movlb	0	; () banked
  3520  001FEA  51B1               	movf	TMR_Timer1@state& (0+255),w,b
  3521  001FEC  0100               	movlb	0	; () banked
  3522  001FEE  B4D8               	btfsc	status,2,c
  3523  001FF0  D002               	goto	l988
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;TIMERS.c: 109: {
  3527                           ;TIMERS.c: 111: T1CONbits.TMR1ON = 1;
  3528  001FF2  80CD               	bsf	4045,0,c	;volatile
  3529                           
  3530                           ;TIMERS.c: 112: }
  3531  001FF4  0012               	return	
  3532  001FF6                     l988:
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;TIMERS.c: 113: else
  3536                           ;TIMERS.c: 114: {
  3537                           ;TIMERS.c: 116: T1CONbits.TMR1ON = 0;
  3538  001FF6  90CD               	bcf	4045,0,c	;volatile
  3539  001FF8  0012               	return	
  3540                           
  3541                           ; BSR set to: 0
  3542                           
  3543                           ; BSR set to: 0
  3544  001FFA  0012               	return		;funcret
  3545  001FFC                     __end_of_TMR_Timer1:
  3546                           	opt stack 0
  3547                           tblptru	equ	0xFF8
  3548                           tblptrh	equ	0xFF7
  3549                           tblptrl	equ	0xFF6
  3550                           tablat	equ	0xFF5
  3551                           intcon	equ	0xFF2
  3552                           postinc0	equ	0xFEE
  3553                           wreg	equ	0xFE8
  3554                           postdec1	equ	0xFE5
  3555                           fsr1l	equ	0xFE1
  3556                           status	equ	0xFD8
  3557                           
  3558 ;; *************** function _InitTimer0 *****************
  3559 ;; Defined at:
  3560 ;;		line 316 in file "TIMERS.c"
  3561 ;; Parameters:    Size  Location     Type
  3562 ;;		None
  3563 ;; Auto vars:     Size  Location     Type
  3564 ;;		None
  3565 ;; Return value:  Size  Location     Type
  3566 ;;		None               void
  3567 ;; Registers used:
  3568 ;;		wreg, status,2, cstack
  3569 ;; Tracked objects:
  3570 ;;		On entry : 0/0
  3571 ;;		On exit  : 0/0
  3572 ;;		Unchanged: 0/0
  3573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3574 ;;      Params:         0       0       0       0       0
  3575 ;;      Locals:         0       0       0       0       0
  3576 ;;      Temps:          0       0       0       0       0
  3577 ;;      Totals:         0       0       0       0       0
  3578 ;;Total ram usage:        0 bytes
  3579 ;; Hardware stack levels used:    1
  3580 ;; Hardware stack levels required when called:   10
  3581 ;; This function calls:
  3582 ;;		_TMR_ResetTimer0
  3583 ;;		_TMR_Timer0
  3584 ;;		_TMR_Timer0Int
  3585 ;; This function is called by:
  3586 ;;		_InitTimers
  3587 ;; This function uses a non-reentrant model
  3588 ;;
  3589                           
  3590                           	psect	text21
  3591  001E84                     __ptext21:
  3592                           	opt stack 0
  3593  001E84                     _InitTimer0:
  3594                           	opt stack 18
  3595                           
  3596                           ;TIMERS.c: 318: TMR_Timer0(0);
  3597                           
  3598                           ; BSR set to: 0
  3599                           ;incstack = 0
  3600  001E84  0E00               	movlw	0
  3601  001E86  EC0A  F010         	call	_TMR_Timer0
  3602                           
  3603                           ;TIMERS.c: 319: TMR_ResetTimer0();
  3604  001E8A  EC8B  F00E         	call	_TMR_ResetTimer0	;wreg free
  3605                           
  3606                           ;TIMERS.c: 320: T0CONbits.T08BIT = 0;
  3607  001E8E  9CD5               	bcf	4053,6,c	;volatile
  3608                           
  3609                           ;TIMERS.c: 321: T0CONbits.T0CS = 0;
  3610  001E90  9AD5               	bcf	4053,5,c	;volatile
  3611                           
  3612                           ;TIMERS.c: 322: T0CONbits.PSA = 0;
  3613  001E92  96D5               	bcf	4053,3,c	;volatile
  3614                           
  3615                           ;TIMERS.c: 323: T0CONbits.T0PS = 0b101;
  3616  001E94  50D5               	movf	4053,w,c	;volatile
  3617  001E96  0BF8               	andlw	-8
  3618  001E98  0905               	iorlw	5
  3619  001E9A  6ED5               	movwf	4053,c	;volatile
  3620                           
  3621                           ;TIMERS.c: 324: INTCON2bits.TMR0IP = 1;
  3622  001E9C  84F1               	bsf	intcon2,2,c	;volatile
  3623                           
  3624                           ;TIMERS.c: 325: TMR_Timer0Int(1);
  3625  001E9E  0E01               	movlw	1
  3626  001EA0  ECFE  F00F         	call	_TMR_Timer0Int
  3627  001EA4  0012               	return		;funcret
  3628  001EA6                     __end_of_InitTimer0:
  3629                           	opt stack 0
  3630                           tblptru	equ	0xFF8
  3631                           tblptrh	equ	0xFF7
  3632                           tblptrl	equ	0xFF6
  3633                           tablat	equ	0xFF5
  3634                           intcon	equ	0xFF2
  3635                           intcon2	equ	0xFF1
  3636                           postinc0	equ	0xFEE
  3637                           wreg	equ	0xFE8
  3638                           postdec1	equ	0xFE5
  3639                           fsr1l	equ	0xFE1
  3640                           status	equ	0xFD8
  3641                           
  3642 ;; *************** function _TMR_Timer0Int *****************
  3643 ;; Defined at:
  3644 ;;		line 208 in file "TIMERS.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;  state           1    wreg     unsigned char 
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;  state           1   49[BANK0 ] unsigned char 
  3649 ;; Return value:  Size  Location     Type
  3650 ;;		None               void
  3651 ;; Registers used:
  3652 ;;		wreg, status,2
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3658 ;;      Params:         0       0       0       0       0
  3659 ;;      Locals:         0       1       0       0       0
  3660 ;;      Temps:          0       0       0       0       0
  3661 ;;      Totals:         0       1       0       0       0
  3662 ;;Total ram usage:        1 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    8
  3665 ;; This function calls:
  3666 ;;		Nothing
  3667 ;; This function is called by:
  3668 ;;		_InitTimer0
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           	psect	text22
  3673  001FFC                     __ptext22:
  3674                           	opt stack 0
  3675  001FFC                     _TMR_Timer0Int:
  3676                           	opt stack 19
  3677                           
  3678                           ;incstack = 0
  3679                           ;TMR_Timer0Int@state stored from wreg
  3680  001FFC  0100               	movlb	0	; () banked
  3681  001FFE  6FB1               	movwf	TMR_Timer0Int@state& (0+255),b
  3682                           
  3683                           ; BSR set to: 0
  3684                           ;TIMERS.c: 210: if(state)
  3685  002000  0100               	movlb	0	; () banked
  3686  002002  51B1               	movf	TMR_Timer0Int@state& (0+255),w,b
  3687  002004  0100               	movlb	0	; () banked
  3688  002006  B4D8               	btfsc	status,2,c
  3689  002008  D002               	goto	l1013
  3690                           
  3691                           ; BSR set to: 0
  3692                           ;TIMERS.c: 211: {
  3693                           ;TIMERS.c: 213: INTCONbits.TMR0IE = 1;
  3694  00200A  8AF2               	bsf	intcon,5,c	;volatile
  3695                           
  3696                           ;TIMERS.c: 214: }
  3697  00200C  0012               	return	
  3698  00200E                     l1013:
  3699                           
  3700                           ; BSR set to: 0
  3701                           ;TIMERS.c: 215: else
  3702                           ;TIMERS.c: 216: {
  3703                           ;TIMERS.c: 218: INTCONbits.TMR0IE = 0;
  3704  00200E  9AF2               	bcf	intcon,5,c	;volatile
  3705  002010  0012               	return	
  3706                           
  3707                           ; BSR set to: 0
  3708                           
  3709                           ; BSR set to: 0
  3710  002012  0012               	return		;funcret
  3711  002014                     __end_of_TMR_Timer0Int:
  3712                           	opt stack 0
  3713                           tblptru	equ	0xFF8
  3714                           tblptrh	equ	0xFF7
  3715                           tblptrl	equ	0xFF6
  3716                           tablat	equ	0xFF5
  3717                           intcon	equ	0xFF2
  3718                           intcon2	equ	0xFF1
  3719                           postinc0	equ	0xFEE
  3720                           wreg	equ	0xFE8
  3721                           postdec1	equ	0xFE5
  3722                           fsr1l	equ	0xFE1
  3723                           status	equ	0xFD8
  3724                           
  3725 ;; *************** function _TMR_ResetTimer0 *****************
  3726 ;; Defined at:
  3727 ;;		line 144 in file "TIMERS.c"
  3728 ;; Parameters:    Size  Location     Type
  3729 ;;		None
  3730 ;; Auto vars:     Size  Location     Type
  3731 ;;  TimerOn         1   50[BANK0 ] unsigned char 
  3732 ;; Return value:  Size  Location     Type
  3733 ;;		None               void
  3734 ;; Registers used:
  3735 ;;		wreg, status,2, cstack
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3741 ;;      Params:         0       0       0       0       0
  3742 ;;      Locals:         0       1       0       0       0
  3743 ;;      Temps:          0       0       0       0       0
  3744 ;;      Totals:         0       1       0       0       0
  3745 ;;Total ram usage:        1 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; Hardware stack levels required when called:    9
  3748 ;; This function calls:
  3749 ;;		_TMR_Timer0
  3750 ;; This function is called by:
  3751 ;;		_InitTimer0
  3752 ;; This function uses a non-reentrant model
  3753 ;;
  3754                           
  3755                           	psect	text23
  3756  001D16                     __ptext23:
  3757                           	opt stack 0
  3758  001D16                     _TMR_ResetTimer0:
  3759                           	opt stack 18
  3760                           
  3761                           ;TIMERS.c: 146: unsigned char TimerOn = T0CONbits.TMR0ON;
  3762                           
  3763                           ; BSR set to: 0
  3764                           ;incstack = 0
  3765  001D16  0E00               	movlw	0
  3766  001D18  BED5               	btfsc	4053,7,c	;volatile
  3767  001D1A  0E01               	movlw	1
  3768  001D1C  0100               	movlb	0	; () banked
  3769  001D1E  6FB2               	movwf	TMR_ResetTimer0@TimerOn& (0+255),b
  3770                           
  3771                           ; BSR set to: 0
  3772                           ;TIMERS.c: 148: TMR_Timer0(0);
  3773  001D20  0E00               	movlw	0
  3774  001D22  EC0A  F010         	call	_TMR_Timer0
  3775                           
  3776                           ;TIMERS.c: 149: TMR0H = 0;
  3777  001D26  0E00               	movlw	0
  3778  001D28  6ED7               	movwf	4055,c	;volatile
  3779                           
  3780                           ;TIMERS.c: 150: TMR0L = 2;
  3781  001D2A  0E02               	movlw	2
  3782  001D2C  6ED6               	movwf	4054,c	;volatile
  3783                           
  3784                           ;TIMERS.c: 151: if(TimerOn)
  3785  001D2E  0100               	movlb	0	; () banked
  3786  001D30  51B2               	movf	TMR_ResetTimer0@TimerOn& (0+255),w,b
  3787  001D32  0100               	movlb	0	; () banked
  3788  001D34  B4D8               	btfsc	status,2,c
  3789  001D36  0012               	return	
  3790                           
  3791                           ; BSR set to: 0
  3792                           ;TIMERS.c: 152: {
  3793                           ;TIMERS.c: 153: TMR_Timer0(1);
  3794  001D38  0E01               	movlw	1
  3795  001D3A  EC0A  F010         	call	_TMR_Timer0
  3796  001D3E  0012               	return	
  3797  001D40  0012               	return		;funcret
  3798  001D42                     __end_of_TMR_ResetTimer0:
  3799                           	opt stack 0
  3800                           tblptru	equ	0xFF8
  3801                           tblptrh	equ	0xFF7
  3802                           tblptrl	equ	0xFF6
  3803                           tablat	equ	0xFF5
  3804                           intcon	equ	0xFF2
  3805                           intcon2	equ	0xFF1
  3806                           postinc0	equ	0xFEE
  3807                           wreg	equ	0xFE8
  3808                           postdec1	equ	0xFE5
  3809                           fsr1l	equ	0xFE1
  3810                           status	equ	0xFD8
  3811                           
  3812 ;; *************** function _TMR_Timer0 *****************
  3813 ;; Defined at:
  3814 ;;		line 87 in file "TIMERS.c"
  3815 ;; Parameters:    Size  Location     Type
  3816 ;;  state           1    wreg     unsigned char 
  3817 ;; Auto vars:     Size  Location     Type
  3818 ;;  state           1   49[BANK0 ] unsigned char 
  3819 ;; Return value:  Size  Location     Type
  3820 ;;		None               void
  3821 ;; Registers used:
  3822 ;;		wreg, status,2
  3823 ;; Tracked objects:
  3824 ;;		On entry : 0/0
  3825 ;;		On exit  : 0/0
  3826 ;;		Unchanged: 0/0
  3827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3828 ;;      Params:         0       0       0       0       0
  3829 ;;      Locals:         0       1       0       0       0
  3830 ;;      Temps:          0       0       0       0       0
  3831 ;;      Totals:         0       1       0       0       0
  3832 ;;Total ram usage:        1 bytes
  3833 ;; Hardware stack levels used:    1
  3834 ;; Hardware stack levels required when called:    8
  3835 ;; This function calls:
  3836 ;;		Nothing
  3837 ;; This function is called by:
  3838 ;;		_TMR_ResetTimer0
  3839 ;;		_InitTimer0
  3840 ;; This function uses a non-reentrant model
  3841 ;;
  3842                           
  3843                           	psect	text24
  3844  002014                     __ptext24:
  3845                           	opt stack 0
  3846  002014                     _TMR_Timer0:
  3847                           	opt stack 19
  3848                           
  3849                           ;incstack = 0
  3850                           ;TMR_Timer0@state stored from wreg
  3851  002014  0100               	movlb	0	; () banked
  3852  002016  6FB1               	movwf	TMR_Timer0@state& (0+255),b
  3853                           
  3854                           ; BSR set to: 0
  3855                           ;TIMERS.c: 89: if(state)
  3856  002018  0100               	movlb	0	; () banked
  3857  00201A  51B1               	movf	TMR_Timer0@state& (0+255),w,b
  3858  00201C  0100               	movlb	0	; () banked
  3859  00201E  B4D8               	btfsc	status,2,c
  3860  002020  D002               	goto	l983
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;TIMERS.c: 90: {
  3864                           ;TIMERS.c: 92: T0CONbits.TMR0ON = 1;
  3865  002022  8ED5               	bsf	4053,7,c	;volatile
  3866                           
  3867                           ;TIMERS.c: 93: }
  3868  002024  0012               	return	
  3869  002026                     l983:
  3870                           
  3871                           ; BSR set to: 0
  3872                           ;TIMERS.c: 94: else
  3873                           ;TIMERS.c: 95: {
  3874                           ;TIMERS.c: 97: T0CONbits.TMR0ON = 0;
  3875  002026  9ED5               	bcf	4053,7,c	;volatile
  3876  002028  0012               	return	
  3877                           
  3878                           ; BSR set to: 0
  3879                           
  3880                           ; BSR set to: 0
  3881  00202A  0012               	return		;funcret
  3882  00202C                     __end_of_TMR_Timer0:
  3883                           	opt stack 0
  3884                           tblptru	equ	0xFF8
  3885                           tblptrh	equ	0xFF7
  3886                           tblptrl	equ	0xFF6
  3887                           tablat	equ	0xFF5
  3888                           intcon	equ	0xFF2
  3889                           intcon2	equ	0xFF1
  3890                           postinc0	equ	0xFEE
  3891                           wreg	equ	0xFE8
  3892                           postdec1	equ	0xFE5
  3893                           fsr1l	equ	0xFE1
  3894                           status	equ	0xFD8
  3895                           
  3896 ;; *************** function _InitRF *****************
  3897 ;; Defined at:
  3898 ;;		line 177 in file "RF.c"
  3899 ;; Parameters:    Size  Location     Type
  3900 ;;		None
  3901 ;; Auto vars:     Size  Location     Type
  3902 ;;		None
  3903 ;; Return value:  Size  Location     Type
  3904 ;;		None               void
  3905 ;; Registers used:
  3906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3907 ;; Tracked objects:
  3908 ;;		On entry : 0/0
  3909 ;;		On exit  : 0/0
  3910 ;;		Unchanged: 0/0
  3911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3912 ;;      Params:         0       0       0       0       0
  3913 ;;      Locals:         0       0       0       0       0
  3914 ;;      Temps:          0       0       0       0       0
  3915 ;;      Totals:         0       0       0       0       0
  3916 ;;Total ram usage:        0 bytes
  3917 ;; Hardware stack levels used:    1
  3918 ;; Hardware stack levels required when called:    9
  3919 ;; This function calls:
  3920 ;;		_MSC_CleanBufferInt
  3921 ;;		_RF_DataInt
  3922 ;;		_RF_Receiver
  3923 ;;		_RF_SetBandwidth
  3924 ;;		_RF_SetSquelch
  3925 ;; This function is called by:
  3926 ;;		_Init_System
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text25
  3931  001ACC                     __ptext25:
  3932                           	opt stack 0
  3933  001ACC                     _InitRF:
  3934                           	opt stack 20
  3935                           
  3936                           ;RF.c: 179: RF_Receiver(1);
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;incstack = 0
  3940  001ACC  0E01               	movlw	1
  3941  001ACE  EC22  F010         	call	_RF_Receiver
  3942                           
  3943                           ;RF.c: 180: RF_SetBandwidth(2);
  3944  001AD2  0E02               	movlw	2
  3945  001AD4  ECA2  F00D         	call	_RF_SetBandwidth
  3946                           
  3947                           ;RF.c: 181: MSC_CleanBufferInt(&RF_DataTiming,60);
  3948  001AD8  0E00               	movlw	low _RF_DataTiming
  3949  001ADA  0100               	movlb	0	; () banked
  3950  001ADC  6FB1               	movwf	MSC_CleanBufferInt@data& (0+255),b
  3951  001ADE  0E02               	movlw	high _RF_DataTiming
  3952  001AE0  0100               	movlb	0	; () banked
  3953  001AE2  6FB2               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  3954  001AE4  0E00               	movlw	0
  3955  001AE6  0100               	movlb	0	; () banked
  3956  001AE8  6FB4               	movwf	(MSC_CleanBufferInt@count+1)& (0+255),b
  3957  001AEA  0E3C               	movlw	60
  3958  001AEC  6FB3               	movwf	MSC_CleanBufferInt@count& (0+255),b
  3959  001AEE  ECC6  F00C         	call	_MSC_CleanBufferInt	;wreg free
  3960                           
  3961                           ;RF.c: 182: RF_SetSquelch(1);
  3962  001AF2  0E01               	movlw	1
  3963  001AF4  EC16  F010         	call	_RF_SetSquelch
  3964                           
  3965                           ;RF.c: 183: INTCON3bits.INT1P = 1;
  3966  001AF8  8CF0               	bsf	intcon3,6,c	;volatile
  3967                           
  3968                           ;RF.c: 184: INTCON3bits.INT2P = 1;
  3969  001AFA  8EF0               	bsf	intcon3,7,c	;volatile
  3970                           
  3971                           ;RF.c: 185: INTCON2bits.INTEDG1 = 1;
  3972  001AFC  8AF1               	bsf	intcon2,5,c	;volatile
  3973                           
  3974                           ;RF.c: 186: INTCON2bits.INTEDG2 = 0;
  3975  001AFE  98F1               	bcf	intcon2,4,c	;volatile
  3976                           
  3977                           ;RF.c: 187: RF_DataInt(1);
  3978  001B00  0E01               	movlw	1
  3979  001B02  EC80  F00F         	call	_RF_DataInt
  3980  001B06  0012               	return		;funcret
  3981  001B08                     __end_of_InitRF:
  3982                           	opt stack 0
  3983                           tblptru	equ	0xFF8
  3984                           tblptrh	equ	0xFF7
  3985                           tblptrl	equ	0xFF6
  3986                           tablat	equ	0xFF5
  3987                           intcon	equ	0xFF2
  3988                           intcon2	equ	0xFF1
  3989                           intcon3	equ	0xFF0
  3990                           postinc0	equ	0xFEE
  3991                           wreg	equ	0xFE8
  3992                           postdec1	equ	0xFE5
  3993                           fsr1l	equ	0xFE1
  3994                           status	equ	0xFD8
  3995                           
  3996 ;; *************** function _RF_SetSquelch *****************
  3997 ;; Defined at:
  3998 ;;		line 153 in file "RF.c"
  3999 ;; Parameters:    Size  Location     Type
  4000 ;;  state           1    wreg     unsigned char 
  4001 ;; Auto vars:     Size  Location     Type
  4002 ;;  state           1   49[BANK0 ] unsigned char 
  4003 ;; Return value:  Size  Location     Type
  4004 ;;		None               void
  4005 ;; Registers used:
  4006 ;;		wreg, status,2, status,0
  4007 ;; Tracked objects:
  4008 ;;		On entry : 0/0
  4009 ;;		On exit  : 0/0
  4010 ;;		Unchanged: 0/0
  4011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4012 ;;      Params:         0       0       0       0       0
  4013 ;;      Locals:         0       1       0       0       0
  4014 ;;      Temps:          0       0       0       0       0
  4015 ;;      Totals:         0       1       0       0       0
  4016 ;;Total ram usage:        1 bytes
  4017 ;; Hardware stack levels used:    1
  4018 ;; Hardware stack levels required when called:    8
  4019 ;; This function calls:
  4020 ;;		Nothing
  4021 ;; This function is called by:
  4022 ;;		_InitRF
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           	psect	text26
  4027  00202C                     __ptext26:
  4028                           	opt stack 0
  4029  00202C                     _RF_SetSquelch:
  4030                           	opt stack 20
  4031                           
  4032                           ;incstack = 0
  4033                           ;RF_SetSquelch@state stored from wreg
  4034  00202C  0100               	movlb	0	; () banked
  4035  00202E  6FB1               	movwf	RF_SetSquelch@state& (0+255),b
  4036                           
  4037                           ; BSR set to: 0
  4038                           ;RF.c: 155: if(!state)
  4039  002030  0100               	movlb	0	; () banked
  4040  002032  51B1               	movf	RF_SetSquelch@state& (0+255),w,b
  4041  002034  0100               	movlb	0	; () banked
  4042  002036  A4D8               	btfss	status,2,c
  4043  002038  D002               	goto	l4218
  4044                           
  4045                           ; BSR set to: 0
  4046                           ;RF.c: 156: {
  4047                           ;RF.c: 158: LATA |= 0x20;
  4048  00203A  8A89               	bsf	3977,5,c	;volatile
  4049                           
  4050                           ;RF.c: 159: }
  4051  00203C  0012               	return	
  4052  00203E                     l4218:
  4053                           
  4054                           ; BSR set to: 0
  4055                           ;RF.c: 160: else
  4056                           ;RF.c: 161: {
  4057                           ;RF.c: 163: LATA &= ~0x20;
  4058  00203E  9A89               	bcf	3977,5,c	;volatile
  4059  002040  0012               	return	
  4060                           
  4061                           ; BSR set to: 0
  4062                           
  4063                           ; BSR set to: 0
  4064  002042  0012               	return		;funcret
  4065  002044                     __end_of_RF_SetSquelch:
  4066                           	opt stack 0
  4067                           tblptru	equ	0xFF8
  4068                           tblptrh	equ	0xFF7
  4069                           tblptrl	equ	0xFF6
  4070                           tablat	equ	0xFF5
  4071                           intcon	equ	0xFF2
  4072                           intcon2	equ	0xFF1
  4073                           intcon3	equ	0xFF0
  4074                           postinc0	equ	0xFEE
  4075                           wreg	equ	0xFE8
  4076                           postdec1	equ	0xFE5
  4077                           fsr1l	equ	0xFE1
  4078                           status	equ	0xFD8
  4079                           
  4080 ;; *************** function _RF_SetBandwidth *****************
  4081 ;; Defined at:
  4082 ;;		line 119 in file "RF.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;  band            1    wreg     unsigned char 
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;  band            1   49[BANK0 ] unsigned char 
  4087 ;; Return value:  Size  Location     Type
  4088 ;;		None               void
  4089 ;; Registers used:
  4090 ;;		wreg, status,2, status,0
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4096 ;;      Params:         0       0       0       0       0
  4097 ;;      Locals:         0       1       0       0       0
  4098 ;;      Temps:          0       0       0       0       0
  4099 ;;      Totals:         0       1       0       0       0
  4100 ;;Total ram usage:        1 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    8
  4103 ;; This function calls:
  4104 ;;		Nothing
  4105 ;; This function is called by:
  4106 ;;		_InitRF
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           	psect	text27
  4111  001B44                     __ptext27:
  4112                           	opt stack 0
  4113  001B44                     _RF_SetBandwidth:
  4114                           	opt stack 20
  4115                           
  4116                           ; BSR set to: 0
  4117                           ;incstack = 0
  4118                           ;RF_SetBandwidth@band stored from wreg
  4119  001B44  0100               	movlb	0	; () banked
  4120  001B46  6FB1               	movwf	RF_SetBandwidth@band& (0+255),b
  4121                           
  4122                           ; BSR set to: 0
  4123                           ;RF.c: 121: if(band == 0)
  4124  001B48  0100               	movlb	0	; () banked
  4125  001B4A  51B1               	movf	RF_SetBandwidth@band& (0+255),w,b
  4126  001B4C  0100               	movlb	0	; () banked
  4127  001B4E  A4D8               	btfss	status,2,c
  4128  001B50  D003               	goto	l4204
  4129                           
  4130                           ; BSR set to: 0
  4131                           ;RF.c: 122: {
  4132                           ;RF.c: 124: LATC &= ~0x40;
  4133  001B52  9C8B               	bcf	3979,6,c	;volatile
  4134                           
  4135                           ;RF.c: 125: LATC &= ~0x80;
  4136  001B54  9E8B               	bcf	3979,7,c	;volatile
  4137                           
  4138                           ;RF.c: 126: }
  4139  001B56  0012               	return	
  4140  001B58                     l4204:
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;RF.c: 127: else if(band == 1)
  4144  001B58  0100               	movlb	0	; () banked
  4145  001B5A  05B1               	decf	RF_SetBandwidth@band& (0+255),w,b
  4146  001B5C  A4D8               	btfss	status,2,c
  4147  001B5E  D003               	goto	l4208
  4148                           
  4149                           ; BSR set to: 0
  4150                           ;RF.c: 128: {
  4151                           ;RF.c: 130: LATC |= 0x40;
  4152  001B60  8C8B               	bsf	3979,6,c	;volatile
  4153                           
  4154                           ;RF.c: 131: LATC &= ~0x80;
  4155  001B62  9E8B               	bcf	3979,7,c	;volatile
  4156                           
  4157                           ;RF.c: 132: }
  4158  001B64  0012               	return	
  4159  001B66                     l4208:
  4160                           
  4161                           ; BSR set to: 0
  4162                           ;RF.c: 133: else if(band == 2)
  4163  001B66  0E02               	movlw	2
  4164  001B68  0100               	movlb	0	; () banked
  4165  001B6A  19B1               	xorwf	RF_SetBandwidth@band& (0+255),w,b
  4166  001B6C  A4D8               	btfss	status,2,c
  4167  001B6E  D003               	goto	l4212
  4168                           
  4169                           ; BSR set to: 0
  4170                           ;RF.c: 134: {
  4171                           ;RF.c: 136: LATC &= ~0x40;
  4172  001B70  9C8B               	bcf	3979,6,c	;volatile
  4173                           
  4174                           ;RF.c: 137: LATC |= 0x80;
  4175  001B72  8E8B               	bsf	3979,7,c	;volatile
  4176                           
  4177                           ;RF.c: 138: }
  4178  001B74  0012               	return	
  4179  001B76                     l4212:
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;RF.c: 139: else
  4183                           ;RF.c: 140: {
  4184                           ;RF.c: 142: LATC |= 0x40;
  4185  001B76  8C8B               	bsf	3979,6,c	;volatile
  4186                           
  4187                           ;RF.c: 143: LATC |= 0x80;
  4188  001B78  8E8B               	bsf	3979,7,c	;volatile
  4189                           
  4190                           ; BSR set to: 0
  4191                           
  4192                           ; BSR set to: 0
  4193  001B7A  0012               	return	
  4194                           
  4195                           ; BSR set to: 0
  4196                           
  4197                           ; BSR set to: 0
  4198  001B7C  0012               	return		;funcret
  4199  001B7E                     __end_of_RF_SetBandwidth:
  4200                           	opt stack 0
  4201                           tblptru	equ	0xFF8
  4202                           tblptrh	equ	0xFF7
  4203                           tblptrl	equ	0xFF6
  4204                           tablat	equ	0xFF5
  4205                           intcon	equ	0xFF2
  4206                           intcon2	equ	0xFF1
  4207                           intcon3	equ	0xFF0
  4208                           postinc0	equ	0xFEE
  4209                           wreg	equ	0xFE8
  4210                           postdec1	equ	0xFE5
  4211                           fsr1l	equ	0xFE1
  4212                           status	equ	0xFD8
  4213                           
  4214 ;; *************** function _RF_Receiver *****************
  4215 ;; Defined at:
  4216 ;;		line 100 in file "RF.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;  state           1    wreg     unsigned char 
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;  state           1   49[BANK0 ] unsigned char 
  4221 ;; Return value:  Size  Location     Type
  4222 ;;		None               void
  4223 ;; Registers used:
  4224 ;;		wreg, status,2, status,0
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4230 ;;      Params:         0       0       0       0       0
  4231 ;;      Locals:         0       1       0       0       0
  4232 ;;      Temps:          0       0       0       0       0
  4233 ;;      Totals:         0       1       0       0       0
  4234 ;;Total ram usage:        1 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; Hardware stack levels required when called:    8
  4237 ;; This function calls:
  4238 ;;		Nothing
  4239 ;; This function is called by:
  4240 ;;		_InitRF
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text28
  4245  002044                     __ptext28:
  4246                           	opt stack 0
  4247  002044                     _RF_Receiver:
  4248                           	opt stack 20
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;incstack = 0
  4252                           ;RF_Receiver@state stored from wreg
  4253  002044  0100               	movlb	0	; () banked
  4254  002046  6FB1               	movwf	RF_Receiver@state& (0+255),b
  4255                           
  4256                           ; BSR set to: 0
  4257                           ;RF.c: 102: if(!state)
  4258  002048  0100               	movlb	0	; () banked
  4259  00204A  51B1               	movf	RF_Receiver@state& (0+255),w,b
  4260  00204C  0100               	movlb	0	; () banked
  4261  00204E  A4D8               	btfss	status,2,c
  4262  002050  D002               	goto	l4198
  4263                           
  4264                           ; BSR set to: 0
  4265                           ;RF.c: 103: {
  4266                           ;RF.c: 105: LATA |= 0x04;
  4267  002052  8489               	bsf	3977,2,c	;volatile
  4268                           
  4269                           ;RF.c: 106: }
  4270  002054  0012               	return	
  4271  002056                     l4198:
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;RF.c: 107: else
  4275                           ;RF.c: 108: {
  4276                           ;RF.c: 110: LATA &= ~0x04;
  4277  002056  9489               	bcf	3977,2,c	;volatile
  4278  002058  0012               	return	
  4279                           
  4280                           ; BSR set to: 0
  4281                           
  4282                           ; BSR set to: 0
  4283  00205A  0012               	return		;funcret
  4284  00205C                     __end_of_RF_Receiver:
  4285                           	opt stack 0
  4286                           tblptru	equ	0xFF8
  4287                           tblptrh	equ	0xFF7
  4288                           tblptrl	equ	0xFF6
  4289                           tablat	equ	0xFF5
  4290                           intcon	equ	0xFF2
  4291                           intcon2	equ	0xFF1
  4292                           intcon3	equ	0xFF0
  4293                           postinc0	equ	0xFEE
  4294                           wreg	equ	0xFE8
  4295                           postdec1	equ	0xFE5
  4296                           fsr1l	equ	0xFE1
  4297                           status	equ	0xFD8
  4298                           
  4299 ;; *************** function _RF_DataInt *****************
  4300 ;; Defined at:
  4301 ;;		line 78 in file "RF.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;  state           1    wreg     unsigned char 
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;  state           1   49[BANK0 ] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;		None               void
  4308 ;; Registers used:
  4309 ;;		wreg, status,2
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4315 ;;      Params:         0       0       0       0       0
  4316 ;;      Locals:         0       1       0       0       0
  4317 ;;      Temps:          0       0       0       0       0
  4318 ;;      Totals:         0       1       0       0       0
  4319 ;;Total ram usage:        1 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    8
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_InitRF
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           	psect	text29
  4330  001F00                     __ptext29:
  4331                           	opt stack 0
  4332  001F00                     _RF_DataInt:
  4333                           	opt stack 20
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;incstack = 0
  4337                           ;RF_DataInt@state stored from wreg
  4338  001F00  0100               	movlb	0	; () banked
  4339  001F02  6FB1               	movwf	RF_DataInt@state& (0+255),b
  4340                           
  4341                           ; BSR set to: 0
  4342                           ;RF.c: 80: if(state)
  4343  001F04  0100               	movlb	0	; () banked
  4344  001F06  51B1               	movf	RF_DataInt@state& (0+255),w,b
  4345  001F08  0100               	movlb	0	; () banked
  4346  001F0A  B4D8               	btfsc	status,2,c
  4347  001F0C  D003               	goto	l355
  4348                           
  4349                           ; BSR set to: 0
  4350                           ;RF.c: 81: {
  4351                           ;RF.c: 83: INTCON3bits.INT1E = 1;
  4352  001F0E  86F0               	bsf	intcon3,3,c	;volatile
  4353                           
  4354                           ;RF.c: 84: INTCON3bits.INT2E = 1;
  4355  001F10  88F0               	bsf	intcon3,4,c	;volatile
  4356                           
  4357                           ;RF.c: 85: }
  4358  001F12  0012               	return	
  4359  001F14                     l355:
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;RF.c: 86: else
  4363                           ;RF.c: 87: {
  4364                           ;RF.c: 89: INTCON3bits.INT1E = 0;
  4365  001F14  96F0               	bcf	intcon3,3,c	;volatile
  4366                           
  4367                           ;RF.c: 90: INTCON3bits.INT2E = 0;
  4368  001F16  98F0               	bcf	intcon3,4,c	;volatile
  4369  001F18  0012               	return	
  4370                           
  4371                           ; BSR set to: 0
  4372                           
  4373                           ; BSR set to: 0
  4374  001F1A  0012               	return		;funcret
  4375  001F1C                     __end_of_RF_DataInt:
  4376                           	opt stack 0
  4377                           tblptru	equ	0xFF8
  4378                           tblptrh	equ	0xFF7
  4379                           tblptrl	equ	0xFF6
  4380                           tablat	equ	0xFF5
  4381                           intcon	equ	0xFF2
  4382                           intcon2	equ	0xFF1
  4383                           intcon3	equ	0xFF0
  4384                           postinc0	equ	0xFEE
  4385                           wreg	equ	0xFE8
  4386                           postdec1	equ	0xFE5
  4387                           fsr1l	equ	0xFE1
  4388                           status	equ	0xFD8
  4389                           
  4390 ;; *************** function _InitMOTOR *****************
  4391 ;; Defined at:
  4392 ;;		line 92 in file "MOTOR.c"
  4393 ;; Parameters:    Size  Location     Type
  4394 ;;		None
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;		None
  4397 ;; Return value:  Size  Location     Type
  4398 ;;		None               void
  4399 ;; Registers used:
  4400 ;;		None
  4401 ;; Tracked objects:
  4402 ;;		On entry : 0/0
  4403 ;;		On exit  : 0/0
  4404 ;;		Unchanged: 0/0
  4405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4406 ;;      Params:         0       0       0       0       0
  4407 ;;      Locals:         0       0       0       0       0
  4408 ;;      Temps:          0       0       0       0       0
  4409 ;;      Totals:         0       0       0       0       0
  4410 ;;Total ram usage:        0 bytes
  4411 ;; Hardware stack levels used:    1
  4412 ;; Hardware stack levels required when called:    8
  4413 ;; This function calls:
  4414 ;;		Nothing
  4415 ;; This function is called by:
  4416 ;;		_Init_System
  4417 ;; This function uses a non-reentrant model
  4418 ;;
  4419                           
  4420                           	psect	text30
  4421  0021FA                     __ptext30:
  4422                           	opt stack 0
  4423  0021FA                     _InitMOTOR:
  4424                           	opt stack 21
  4425                           
  4426                           ;MOTOR.c: 95: __nop();
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;incstack = 0
  4430  0021FA  F000               	nop	
  4431  0021FC  0012               	return		;funcret
  4432  0021FE                     __end_of_InitMOTOR:
  4433                           	opt stack 0
  4434                           tblptru	equ	0xFF8
  4435                           tblptrh	equ	0xFF7
  4436                           tblptrl	equ	0xFF6
  4437                           tablat	equ	0xFF5
  4438                           intcon	equ	0xFF2
  4439                           intcon2	equ	0xFF1
  4440                           intcon3	equ	0xFF0
  4441                           postinc0	equ	0xFEE
  4442                           wreg	equ	0xFE8
  4443                           postdec1	equ	0xFE5
  4444                           fsr1l	equ	0xFE1
  4445                           status	equ	0xFD8
  4446                           
  4447 ;; *************** function _InitLDO *****************
  4448 ;; Defined at:
  4449 ;;		line 75 in file "LDO.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;		None
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;		None
  4454 ;; Return value:  Size  Location     Type
  4455 ;;		None               void
  4456 ;; Registers used:
  4457 ;;		wreg, status,2, status,0, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4463 ;;      Params:         0       0       0       0       0
  4464 ;;      Locals:         0       0       0       0       0
  4465 ;;      Temps:          0       0       0       0       0
  4466 ;;      Totals:         0       0       0       0       0
  4467 ;;Total ram usage:        0 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    9
  4470 ;; This function calls:
  4471 ;;		_LDO_Pass
  4472 ;; This function is called by:
  4473 ;;		_Init_System
  4474 ;; This function uses a non-reentrant model
  4475 ;;
  4476                           
  4477                           	psect	text31
  4478  0021EC                     __ptext31:
  4479                           	opt stack 0
  4480  0021EC                     _InitLDO:
  4481                           	opt stack 20
  4482                           
  4483                           ;LDO.c: 77: LDO_Pass(0);
  4484                           
  4485                           ;incstack = 0
  4486  0021EC  0E00               	movlw	0
  4487  0021EE  EC9C  F00F         	call	_LDO_Pass
  4488  0021F2  0012               	return		;funcret
  4489  0021F4                     __end_of_InitLDO:
  4490                           	opt stack 0
  4491                           tblptru	equ	0xFF8
  4492                           tblptrh	equ	0xFF7
  4493                           tblptrl	equ	0xFF6
  4494                           tablat	equ	0xFF5
  4495                           intcon	equ	0xFF2
  4496                           intcon2	equ	0xFF1
  4497                           intcon3	equ	0xFF0
  4498                           postinc0	equ	0xFEE
  4499                           wreg	equ	0xFE8
  4500                           postdec1	equ	0xFE5
  4501                           fsr1l	equ	0xFE1
  4502                           status	equ	0xFD8
  4503                           
  4504 ;; *************** function _LDO_Pass *****************
  4505 ;; Defined at:
  4506 ;;		line 52 in file "LDO.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  state           1    wreg     unsigned char 
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;  state           1   49[BANK0 ] unsigned char 
  4511 ;; Return value:  Size  Location     Type
  4512 ;;		None               void
  4513 ;; Registers used:
  4514 ;;		wreg, status,2, status,0
  4515 ;; Tracked objects:
  4516 ;;		On entry : 0/0
  4517 ;;		On exit  : 0/0
  4518 ;;		Unchanged: 0/0
  4519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4520 ;;      Params:         0       0       0       0       0
  4521 ;;      Locals:         0       1       0       0       0
  4522 ;;      Temps:          0       0       0       0       0
  4523 ;;      Totals:         0       1       0       0       0
  4524 ;;Total ram usage:        1 bytes
  4525 ;; Hardware stack levels used:    1
  4526 ;; Hardware stack levels required when called:    8
  4527 ;; This function calls:
  4528 ;;		Nothing
  4529 ;; This function is called by:
  4530 ;;		_InitLDO
  4531 ;; This function uses a non-reentrant model
  4532 ;;
  4533                           
  4534                           	psect	text32
  4535  001F38                     __ptext32:
  4536                           	opt stack 0
  4537  001F38                     _LDO_Pass:
  4538                           	opt stack 20
  4539                           
  4540                           ;incstack = 0
  4541                           ;LDO_Pass@state stored from wreg
  4542  001F38  0100               	movlb	0	; () banked
  4543  001F3A  6FB1               	movwf	LDO_Pass@state& (0+255),b
  4544                           
  4545                           ; BSR set to: 0
  4546                           ;LDO.c: 54: if(state)
  4547  001F3C  0100               	movlb	0	; () banked
  4548  001F3E  51B1               	movf	LDO_Pass@state& (0+255),w,b
  4549  001F40  0100               	movlb	0	; () banked
  4550  001F42  B4D8               	btfsc	status,2,c
  4551  001F44  D003               	goto	l520
  4552                           
  4553                           ; BSR set to: 0
  4554                           ;LDO.c: 55: {
  4555                           ;LDO.c: 57: TRISCbits.TRISC5 = 0;
  4556  001F46  9A94               	bcf	3988,5,c	;volatile
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;LDO.c: 58: LATC &= ~0x20;
  4560  001F48  9A8B               	bcf	3979,5,c	;volatile
  4561                           
  4562                           ;LDO.c: 59: }
  4563  001F4A  0012               	return	
  4564  001F4C                     l520:
  4565                           
  4566                           ; BSR set to: 0
  4567                           ;LDO.c: 60: else
  4568                           ;LDO.c: 61: {
  4569                           ;LDO.c: 63: TRISCbits.TRISC5 = 1;
  4570  001F4C  8A94               	bsf	3988,5,c	;volatile
  4571  001F4E  0012               	return	
  4572                           
  4573                           ; BSR set to: 0
  4574                           
  4575                           ; BSR set to: 0
  4576  001F50  0012               	return		;funcret
  4577  001F52                     __end_of_LDO_Pass:
  4578                           	opt stack 0
  4579                           tblptru	equ	0xFF8
  4580                           tblptrh	equ	0xFF7
  4581                           tblptrl	equ	0xFF6
  4582                           tablat	equ	0xFF5
  4583                           intcon	equ	0xFF2
  4584                           intcon2	equ	0xFF1
  4585                           intcon3	equ	0xFF0
  4586                           postinc0	equ	0xFEE
  4587                           wreg	equ	0xFE8
  4588                           postdec1	equ	0xFE5
  4589                           fsr1l	equ	0xFE1
  4590                           status	equ	0xFD8
  4591                           
  4592 ;; *************** function _InitIR *****************
  4593 ;; Defined at:
  4594 ;;		line 69 in file "IR.c"
  4595 ;; Parameters:    Size  Location     Type
  4596 ;;		None
  4597 ;; Auto vars:     Size  Location     Type
  4598 ;;		None
  4599 ;; Return value:  Size  Location     Type
  4600 ;;		None               void
  4601 ;; Registers used:
  4602 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4603 ;; Tracked objects:
  4604 ;;		On entry : 0/0
  4605 ;;		On exit  : 0/0
  4606 ;;		Unchanged: 0/0
  4607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4608 ;;      Params:         0       0       0       0       0
  4609 ;;      Locals:         0       0       0       0       0
  4610 ;;      Temps:          0       0       0       0       0
  4611 ;;      Totals:         0       0       0       0       0
  4612 ;;Total ram usage:        0 bytes
  4613 ;; Hardware stack levels used:    1
  4614 ;; Hardware stack levels required when called:    9
  4615 ;; This function calls:
  4616 ;;		_MSC_CleanBufferInt
  4617 ;; This function is called by:
  4618 ;;		_Init_System
  4619 ;; This function uses a non-reentrant model
  4620 ;;
  4621                           
  4622                           	psect	text33
  4623  001F1C                     __ptext33:
  4624                           	opt stack 0
  4625  001F1C                     _InitIR:
  4626                           	opt stack 20
  4627                           
  4628                           ;IR.c: 71: MSC_CleanBufferInt(&IR_DataTiming,80);
  4629                           
  4630                           ; BSR set to: 0
  4631                           ;incstack = 0
  4632  001F1C  0E00               	movlw	low _IR_DataTiming
  4633  001F1E  0100               	movlb	0	; () banked
  4634  001F20  6FB1               	movwf	MSC_CleanBufferInt@data& (0+255),b
  4635  001F22  0E03               	movlw	high _IR_DataTiming
  4636  001F24  0100               	movlb	0	; () banked
  4637  001F26  6FB2               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  4638  001F28  0E00               	movlw	0
  4639  001F2A  0100               	movlb	0	; () banked
  4640  001F2C  6FB4               	movwf	(MSC_CleanBufferInt@count+1)& (0+255),b
  4641  001F2E  0E50               	movlw	80
  4642  001F30  6FB3               	movwf	MSC_CleanBufferInt@count& (0+255),b
  4643  001F32  ECC6  F00C         	call	_MSC_CleanBufferInt	;wreg free
  4644  001F36  0012               	return		;funcret
  4645  001F38                     __end_of_InitIR:
  4646                           	opt stack 0
  4647                           tblptru	equ	0xFF8
  4648                           tblptrh	equ	0xFF7
  4649                           tblptrl	equ	0xFF6
  4650                           tablat	equ	0xFF5
  4651                           intcon	equ	0xFF2
  4652                           intcon2	equ	0xFF1
  4653                           intcon3	equ	0xFF0
  4654                           postinc0	equ	0xFEE
  4655                           wreg	equ	0xFE8
  4656                           postdec1	equ	0xFE5
  4657                           fsr1l	equ	0xFE1
  4658                           status	equ	0xFD8
  4659                           
  4660 ;; *************** function _InitFlash *****************
  4661 ;; Defined at:
  4662 ;;		line 55 in file "FLASH.c"
  4663 ;; Parameters:    Size  Location     Type
  4664 ;;		None
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;		None
  4667 ;; Return value:  Size  Location     Type
  4668 ;;		None               void
  4669 ;; Registers used:
  4670 ;;		None
  4671 ;; Tracked objects:
  4672 ;;		On entry : 0/0
  4673 ;;		On exit  : 0/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4676 ;;      Params:         0       0       0       0       0
  4677 ;;      Locals:         0       0       0       0       0
  4678 ;;      Temps:          0       0       0       0       0
  4679 ;;      Totals:         0       0       0       0       0
  4680 ;;Total ram usage:        0 bytes
  4681 ;; Hardware stack levels used:    1
  4682 ;; Hardware stack levels required when called:    8
  4683 ;; This function calls:
  4684 ;;		Nothing
  4685 ;; This function is called by:
  4686 ;;		_Init_System
  4687 ;; This function uses a non-reentrant model
  4688 ;;
  4689                           
  4690                           	psect	text34
  4691  002202                     __ptext34:
  4692                           	opt stack 0
  4693  002202                     _InitFlash:
  4694                           	opt stack 21
  4695                           
  4696                           ;incstack = 0
  4697  002202  0012               	return		;funcret
  4698  002204                     __end_of_InitFlash:
  4699                           	opt stack 0
  4700                           tblptru	equ	0xFF8
  4701                           tblptrh	equ	0xFF7
  4702                           tblptrl	equ	0xFF6
  4703                           tablat	equ	0xFF5
  4704                           intcon	equ	0xFF2
  4705                           intcon2	equ	0xFF1
  4706                           intcon3	equ	0xFF0
  4707                           postinc0	equ	0xFEE
  4708                           wreg	equ	0xFE8
  4709                           postdec1	equ	0xFE5
  4710                           fsr1l	equ	0xFE1
  4711                           status	equ	0xFD8
  4712                           
  4713 ;; *************** function _InitButton *****************
  4714 ;; Defined at:
  4715 ;;		line 78 in file "BUTTON.c"
  4716 ;; Parameters:    Size  Location     Type
  4717 ;;		None
  4718 ;; Auto vars:     Size  Location     Type
  4719 ;;		None
  4720 ;; Return value:  Size  Location     Type
  4721 ;;		None               void
  4722 ;; Registers used:
  4723 ;;		wreg, status,2, status,0, cstack
  4724 ;; Tracked objects:
  4725 ;;		On entry : 0/0
  4726 ;;		On exit  : 0/0
  4727 ;;		Unchanged: 0/0
  4728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4729 ;;      Params:         0       0       0       0       0
  4730 ;;      Locals:         0       0       0       0       0
  4731 ;;      Temps:          0       0       0       0       0
  4732 ;;      Totals:         0       0       0       0       0
  4733 ;;Total ram usage:        0 bytes
  4734 ;; Hardware stack levels used:    1
  4735 ;; Hardware stack levels required when called:    9
  4736 ;; This function calls:
  4737 ;;		_BUT_IR_PinChangeInt
  4738 ;;		_BUT_ReadButton
  4739 ;; This function is called by:
  4740 ;;		_Init_System
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text35
  4745  00219C                     __ptext35:
  4746                           	opt stack 0
  4747  00219C                     _InitButton:
  4748                           	opt stack 20
  4749                           
  4750                           ;BUTTON.c: 81: INTCON2bits.RBIP = 0;
  4751                           
  4752                           ;incstack = 0
  4753  00219C  90F1               	bcf	intcon2,0,c	;volatile
  4754                           
  4755                           ;BUTTON.c: 82: BUT_ReadButton();
  4756  00219E  ECBF  F00D         	call	_BUT_ReadButton	;wreg free
  4757                           
  4758                           ;BUTTON.c: 83: BUT_IR_PinChangeInt(1);
  4759  0021A2  0E01               	movlw	1
  4760  0021A4  EC2E  F010         	call	_BUT_IR_PinChangeInt
  4761  0021A8  0012               	return		;funcret
  4762  0021AA                     __end_of_InitButton:
  4763                           	opt stack 0
  4764                           tblptru	equ	0xFF8
  4765                           tblptrh	equ	0xFF7
  4766                           tblptrl	equ	0xFF6
  4767                           tablat	equ	0xFF5
  4768                           intcon	equ	0xFF2
  4769                           intcon2	equ	0xFF1
  4770                           intcon3	equ	0xFF0
  4771                           postinc0	equ	0xFEE
  4772                           wreg	equ	0xFE8
  4773                           postdec1	equ	0xFE5
  4774                           fsr1l	equ	0xFE1
  4775                           status	equ	0xFD8
  4776                           
  4777 ;; *************** function _BUT_ReadButton *****************
  4778 ;; Defined at:
  4779 ;;		line 92 in file "BUTTON.c"
  4780 ;; Parameters:    Size  Location     Type
  4781 ;;		None
  4782 ;; Auto vars:     Size  Location     Type
  4783 ;;  value           1   49[BANK0 ] unsigned char 
  4784 ;; Return value:  Size  Location     Type
  4785 ;;                  1    wreg      unsigned char 
  4786 ;; Registers used:
  4787 ;;		wreg, status,2, status,0
  4788 ;; Tracked objects:
  4789 ;;		On entry : 0/0
  4790 ;;		On exit  : 0/0
  4791 ;;		Unchanged: 0/0
  4792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4793 ;;      Params:         0       0       0       0       0
  4794 ;;      Locals:         0       1       0       0       0
  4795 ;;      Temps:          0       0       0       0       0
  4796 ;;      Totals:         0       1       0       0       0
  4797 ;;Total ram usage:        1 bytes
  4798 ;; Hardware stack levels used:    1
  4799 ;; Hardware stack levels required when called:    8
  4800 ;; This function calls:
  4801 ;;		Nothing
  4802 ;; This function is called by:
  4803 ;;		_Init_System
  4804 ;;		_InitButton
  4805 ;; This function uses a non-reentrant model
  4806 ;;
  4807                           
  4808                           	psect	text36
  4809  001B7E                     __ptext36:
  4810                           	opt stack 0
  4811  001B7E                     _BUT_ReadButton:
  4812                           	opt stack 20
  4813                           
  4814                           ;BUTTON.c: 94: unsigned char value = PORTB;
  4815                           
  4816                           ;incstack = 0
  4817  001B7E  CF81 F0B1          	movff	3969,BUT_ReadButton@value	;volatile
  4818                           
  4819                           ;BUTTON.c: 95: if((value & 0x20) == 0)
  4820  001B82  0100               	movlb	0	; () banked
  4821  001B84  BBB1               	btfsc	BUT_ReadButton@value& (0+255),5,b
  4822  001B86  D00B               	goto	l4178
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;BUTTON.c: 96: {
  4826                           ;BUTTON.c: 98: if(ButtonValue_prev == 0)
  4827  001B88  0100               	movlb	0	; () banked
  4828  001B8A  51BF               	movf	_ButtonValue_prev& (0+255),w,b
  4829  001B8C  A4D8               	btfss	status,2,c
  4830  001B8E  D002               	goto	l930
  4831                           
  4832                           ; BSR set to: 0
  4833                           ;BUTTON.c: 99: {
  4834                           ;BUTTON.c: 100: ButtonChange = 1;
  4835  001B90  0E01               	movlw	1
  4836  001B92  6E55               	movwf	_ButtonChange,c
  4837  001B94                     l930:
  4838                           
  4839                           ; BSR set to: 0
  4840                           ;BUTTON.c: 101: }
  4841                           ;BUTTON.c: 102: ButtonValue_prev = 1;
  4842  001B94  0E01               	movlw	1
  4843  001B96  0100               	movlb	0	; () banked
  4844  001B98  6FBF               	movwf	_ButtonValue_prev& (0+255),b
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;BUTTON.c: 103: return 1;
  4848  001B9A  0E01               	movlw	1
  4849                           
  4850                           ; BSR set to: 0
  4851  001B9C  0012               	return	
  4852  001B9E                     l4178:
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;BUTTON.c: 104: }
  4856                           ;BUTTON.c: 107: if(ButtonValue_prev == 1)
  4857  001B9E  0100               	movlb	0	; () banked
  4858  001BA0  05BF               	decf	_ButtonValue_prev& (0+255),w,b
  4859  001BA2  A4D8               	btfss	status,2,c
  4860  001BA4  D002               	goto	l932
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;BUTTON.c: 108: {
  4864                           ;BUTTON.c: 109: ButtonChange = 1;
  4865  001BA6  0E01               	movlw	1
  4866  001BA8  6E55               	movwf	_ButtonChange,c
  4867  001BAA                     l932:
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;BUTTON.c: 110: }
  4871                           ;BUTTON.c: 111: ButtonValue_prev = 0;
  4872  001BAA  0E00               	movlw	0
  4873  001BAC  0100               	movlb	0	; () banked
  4874  001BAE  6FBF               	movwf	_ButtonValue_prev& (0+255),b
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;BUTTON.c: 112: return 0;
  4878  001BB0  0E00               	movlw	0
  4879  001BB2  0012               	return	
  4880                           
  4881                           ; BSR set to: 0
  4882                           
  4883                           ; BSR set to: 0
  4884  001BB4  0012               	return		;funcret
  4885  001BB6                     __end_of_BUT_ReadButton:
  4886                           	opt stack 0
  4887                           tblptru	equ	0xFF8
  4888                           tblptrh	equ	0xFF7
  4889                           tblptrl	equ	0xFF6
  4890                           tablat	equ	0xFF5
  4891                           intcon	equ	0xFF2
  4892                           intcon2	equ	0xFF1
  4893                           intcon3	equ	0xFF0
  4894                           postinc0	equ	0xFEE
  4895                           wreg	equ	0xFE8
  4896                           postdec1	equ	0xFE5
  4897                           fsr1l	equ	0xFE1
  4898                           status	equ	0xFD8
  4899                           
  4900 ;; *************** function _BUT_IR_PinChangeInt *****************
  4901 ;; Defined at:
  4902 ;;		line 55 in file "BUTTON.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;  state           1    wreg     unsigned char 
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;  state           1   49[BANK0 ] unsigned char 
  4907 ;; Return value:  Size  Location     Type
  4908 ;;		None               void
  4909 ;; Registers used:
  4910 ;;		wreg, status,2
  4911 ;; Tracked objects:
  4912 ;;		On entry : 0/0
  4913 ;;		On exit  : 0/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4916 ;;      Params:         0       0       0       0       0
  4917 ;;      Locals:         0       1       0       0       0
  4918 ;;      Temps:          0       0       0       0       0
  4919 ;;      Totals:         0       1       0       0       0
  4920 ;;Total ram usage:        1 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    8
  4923 ;; This function calls:
  4924 ;;		Nothing
  4925 ;; This function is called by:
  4926 ;;		_InitButton
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           	psect	text37
  4931  00205C                     __ptext37:
  4932                           	opt stack 0
  4933  00205C                     _BUT_IR_PinChangeInt:
  4934                           	opt stack 20
  4935                           
  4936                           ; BSR set to: 0
  4937                           ;incstack = 0
  4938                           ;BUT_IR_PinChangeInt@state stored from wreg
  4939  00205C  0100               	movlb	0	; () banked
  4940  00205E  6FB1               	movwf	BUT_IR_PinChangeInt@state& (0+255),b
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;BUTTON.c: 57: if(state)
  4944  002060  0100               	movlb	0	; () banked
  4945  002062  51B1               	movf	BUT_IR_PinChangeInt@state& (0+255),w,b
  4946  002064  0100               	movlb	0	; () banked
  4947  002066  B4D8               	btfsc	status,2,c
  4948  002068  D002               	goto	l921
  4949                           
  4950                           ; BSR set to: 0
  4951                           ;BUTTON.c: 58: {
  4952                           ;BUTTON.c: 60: INTCONbits.RBIE = 1;
  4953  00206A  86F2               	bsf	intcon,3,c	;volatile
  4954                           
  4955                           ;BUTTON.c: 61: }
  4956  00206C  0012               	return	
  4957  00206E                     l921:
  4958                           
  4959                           ; BSR set to: 0
  4960                           ;BUTTON.c: 62: else
  4961                           ;BUTTON.c: 63: {
  4962                           ;BUTTON.c: 65: INTCONbits.RBIE = 0;
  4963  00206E  96F2               	bcf	intcon,3,c	;volatile
  4964  002070  0012               	return	
  4965                           
  4966                           ; BSR set to: 0
  4967                           
  4968                           ; BSR set to: 0
  4969  002072  0012               	return		;funcret
  4970  002074                     __end_of_BUT_IR_PinChangeInt:
  4971                           	opt stack 0
  4972                           tblptru	equ	0xFF8
  4973                           tblptrh	equ	0xFF7
  4974                           tblptrl	equ	0xFF6
  4975                           tablat	equ	0xFF5
  4976                           intcon	equ	0xFF2
  4977                           intcon2	equ	0xFF1
  4978                           intcon3	equ	0xFF0
  4979                           postinc0	equ	0xFEE
  4980                           wreg	equ	0xFE8
  4981                           postdec1	equ	0xFE5
  4982                           fsr1l	equ	0xFE1
  4983                           status	equ	0xFD8
  4984                           
  4985 ;; *************** function _InitADC *****************
  4986 ;; Defined at:
  4987 ;;		line 122 in file "ADC.c"
  4988 ;; Parameters:    Size  Location     Type
  4989 ;;		None
  4990 ;; Auto vars:     Size  Location     Type
  4991 ;;		None
  4992 ;; Return value:  Size  Location     Type
  4993 ;;		None               void
  4994 ;; Registers used:
  4995 ;;		wreg, status,2, status,0, cstack
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5001 ;;      Params:         0       0       0       0       0
  5002 ;;      Locals:         0       0       0       0       0
  5003 ;;      Temps:          0       0       0       0       0
  5004 ;;      Totals:         0       0       0       0       0
  5005 ;;Total ram usage:        0 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:    9
  5008 ;; This function calls:
  5009 ;;		_ADC_ChangeChannel
  5010 ;;		_ADC_ConversionInt
  5011 ;;		_ADC_Module
  5012 ;; This function is called by:
  5013 ;;		_Init_System
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text38
  5018  001DC4                     __ptext38:
  5019                           	opt stack 0
  5020  001DC4                     _InitADC:
  5021                           	opt stack 20
  5022                           
  5023                           ;ADC.c: 124: ADCON1bits.VCFG1 = 0;
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;incstack = 0
  5027  001DC4  9AC1               	bcf	4033,5,c	;volatile
  5028                           
  5029                           ;ADC.c: 125: ADCON1bits.VCFG0 = 0;
  5030  001DC6  98C1               	bcf	4033,4,c	;volatile
  5031                           
  5032                           ;ADC.c: 126: ADCON2bits.ADFM = 1;
  5033  001DC8  8EC0               	bsf	4032,7,c	;volatile
  5034                           
  5035                           ;ADC.c: 127: ADCON2bits.ACQT = 0b111;
  5036  001DCA  86C0               	bsf	4032,3,c	;volatile
  5037  001DCC  88C0               	bsf	4032,4,c	;volatile
  5038  001DCE  8AC0               	bsf	4032,5,c	;volatile
  5039                           
  5040                           ;ADC.c: 128: ADCON2bits.ADCS = 0b110;
  5041  001DD0  50C0               	movf	4032,w,c	;volatile
  5042  001DD2  0BF8               	andlw	-8
  5043  001DD4  0906               	iorlw	6
  5044  001DD6  6EC0               	movwf	4032,c	;volatile
  5045                           
  5046                           ;ADC.c: 129: IPR1bits.ADIP = 0;
  5047  001DD8  9C9F               	bcf	3999,6,c	;volatile
  5048                           
  5049                           ;ADC.c: 130: ADC_ChangeChannel();
  5050  001DDA  ECF6  F00E         	call	_ADC_ChangeChannel	;wreg free
  5051                           
  5052                           ;ADC.c: 131: ADC_ConversionInt(1);
  5053  001DDE  0E01               	movlw	1
  5054  001DE0  EC46  F010         	call	_ADC_ConversionInt
  5055                           
  5056                           ;ADC.c: 132: ADC_Module(1);
  5057  001DE4  0E01               	movlw	1
  5058  001DE6  EC3A  F010         	call	_ADC_Module
  5059  001DEA  0012               	return		;funcret
  5060  001DEC                     __end_of_InitADC:
  5061                           	opt stack 0
  5062                           tblptru	equ	0xFF8
  5063                           tblptrh	equ	0xFF7
  5064                           tblptrl	equ	0xFF6
  5065                           tablat	equ	0xFF5
  5066                           intcon	equ	0xFF2
  5067                           intcon2	equ	0xFF1
  5068                           intcon3	equ	0xFF0
  5069                           postinc0	equ	0xFEE
  5070                           wreg	equ	0xFE8
  5071                           postdec1	equ	0xFE5
  5072                           fsr1l	equ	0xFE1
  5073                           status	equ	0xFD8
  5074                           
  5075 ;; *************** function _ADC_Module *****************
  5076 ;; Defined at:
  5077 ;;		line 56 in file "ADC.c"
  5078 ;; Parameters:    Size  Location     Type
  5079 ;;  state           1    wreg     unsigned char 
  5080 ;; Auto vars:     Size  Location     Type
  5081 ;;  state           1   49[BANK0 ] unsigned char 
  5082 ;; Return value:  Size  Location     Type
  5083 ;;		None               void
  5084 ;; Registers used:
  5085 ;;		wreg, status,2
  5086 ;; Tracked objects:
  5087 ;;		On entry : 0/0
  5088 ;;		On exit  : 0/0
  5089 ;;		Unchanged: 0/0
  5090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5091 ;;      Params:         0       0       0       0       0
  5092 ;;      Locals:         0       1       0       0       0
  5093 ;;      Temps:          0       0       0       0       0
  5094 ;;      Totals:         0       1       0       0       0
  5095 ;;Total ram usage:        1 bytes
  5096 ;; Hardware stack levels used:    1
  5097 ;; Hardware stack levels required when called:    8
  5098 ;; This function calls:
  5099 ;;		Nothing
  5100 ;; This function is called by:
  5101 ;;		_InitADC
  5102 ;; This function uses a non-reentrant model
  5103 ;;
  5104                           
  5105                           	psect	text39
  5106  002074                     __ptext39:
  5107                           	opt stack 0
  5108  002074                     _ADC_Module:
  5109                           	opt stack 20
  5110                           
  5111                           ;incstack = 0
  5112                           ;ADC_Module@state stored from wreg
  5113  002074  0100               	movlb	0	; () banked
  5114  002076  6FB1               	movwf	ADC_Module@state& (0+255),b
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;ADC.c: 58: if(state)
  5118  002078  0100               	movlb	0	; () banked
  5119  00207A  51B1               	movf	ADC_Module@state& (0+255),w,b
  5120  00207C  0100               	movlb	0	; () banked
  5121  00207E  B4D8               	btfsc	status,2,c
  5122  002080  D002               	goto	l1092
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;ADC.c: 59: {
  5126                           ;ADC.c: 61: ADCON0bits.ADON = 1;
  5127  002082  80C2               	bsf	4034,0,c	;volatile
  5128                           
  5129                           ;ADC.c: 62: }
  5130  002084  0012               	return	
  5131  002086                     l1092:
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;ADC.c: 63: else
  5135                           ;ADC.c: 64: {
  5136                           ;ADC.c: 66: ADCON0bits.ADON = 0;
  5137  002086  90C2               	bcf	4034,0,c	;volatile
  5138  002088  0012               	return	
  5139                           
  5140                           ; BSR set to: 0
  5141                           
  5142                           ; BSR set to: 0
  5143  00208A  0012               	return		;funcret
  5144  00208C                     __end_of_ADC_Module:
  5145                           	opt stack 0
  5146                           tblptru	equ	0xFF8
  5147                           tblptrh	equ	0xFF7
  5148                           tblptrl	equ	0xFF6
  5149                           tablat	equ	0xFF5
  5150                           intcon	equ	0xFF2
  5151                           intcon2	equ	0xFF1
  5152                           intcon3	equ	0xFF0
  5153                           postinc0	equ	0xFEE
  5154                           wreg	equ	0xFE8
  5155                           postdec1	equ	0xFE5
  5156                           fsr1l	equ	0xFE1
  5157                           status	equ	0xFD8
  5158                           
  5159 ;; *************** function _ADC_ConversionInt *****************
  5160 ;; Defined at:
  5161 ;;		line 99 in file "ADC.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;  state           1    wreg     unsigned char 
  5164 ;; Auto vars:     Size  Location     Type
  5165 ;;  state           1   49[BANK0 ] unsigned char 
  5166 ;; Return value:  Size  Location     Type
  5167 ;;		None               void
  5168 ;; Registers used:
  5169 ;;		wreg, status,2
  5170 ;; Tracked objects:
  5171 ;;		On entry : 0/0
  5172 ;;		On exit  : 0/0
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5175 ;;      Params:         0       0       0       0       0
  5176 ;;      Locals:         0       1       0       0       0
  5177 ;;      Temps:          0       0       0       0       0
  5178 ;;      Totals:         0       1       0       0       0
  5179 ;;Total ram usage:        1 bytes
  5180 ;; Hardware stack levels used:    1
  5181 ;; Hardware stack levels required when called:    8
  5182 ;; This function calls:
  5183 ;;		Nothing
  5184 ;; This function is called by:
  5185 ;;		_InitADC
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           	psect	text40
  5190  00208C                     __ptext40:
  5191                           	opt stack 0
  5192  00208C                     _ADC_ConversionInt:
  5193                           	opt stack 20
  5194                           
  5195                           ; BSR set to: 0
  5196                           ;incstack = 0
  5197                           ;ADC_ConversionInt@state stored from wreg
  5198  00208C  0100               	movlb	0	; () banked
  5199  00208E  6FB1               	movwf	ADC_ConversionInt@state& (0+255),b
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;ADC.c: 101: if(state)
  5203  002090  0100               	movlb	0	; () banked
  5204  002092  51B1               	movf	ADC_ConversionInt@state& (0+255),w,b
  5205  002094  0100               	movlb	0	; () banked
  5206  002096  B4D8               	btfsc	status,2,c
  5207  002098  D002               	goto	l1104
  5208                           
  5209                           ; BSR set to: 0
  5210                           ;ADC.c: 102: {
  5211                           ;ADC.c: 104: PIE1bits.ADIE = 1;
  5212  00209A  8C9D               	bsf	3997,6,c	;volatile
  5213                           
  5214                           ;ADC.c: 105: }
  5215  00209C  0012               	return	
  5216  00209E                     l1104:
  5217                           
  5218                           ; BSR set to: 0
  5219                           ;ADC.c: 106: else
  5220                           ;ADC.c: 107: {
  5221                           ;ADC.c: 109: PIE1bits.ADIE = 0;
  5222  00209E  9C9D               	bcf	3997,6,c	;volatile
  5223  0020A0  0012               	return	
  5224                           
  5225                           ; BSR set to: 0
  5226                           
  5227                           ; BSR set to: 0
  5228  0020A2  0012               	return		;funcret
  5229  0020A4                     __end_of_ADC_ConversionInt:
  5230                           	opt stack 0
  5231                           tblptru	equ	0xFF8
  5232                           tblptrh	equ	0xFF7
  5233                           tblptrl	equ	0xFF6
  5234                           tablat	equ	0xFF5
  5235                           intcon	equ	0xFF2
  5236                           intcon2	equ	0xFF1
  5237                           intcon3	equ	0xFF0
  5238                           postinc0	equ	0xFEE
  5239                           wreg	equ	0xFE8
  5240                           postdec1	equ	0xFE5
  5241                           fsr1l	equ	0xFE1
  5242                           status	equ	0xFD8
  5243                           
  5244 ;; *************** function _ADC_ChangeChannel *****************
  5245 ;; Defined at:
  5246 ;;		line 166 in file "ADC.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;		None
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;		None
  5251 ;; Return value:  Size  Location     Type
  5252 ;;		None               void
  5253 ;; Registers used:
  5254 ;;		wreg, status,2, status,0
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5260 ;;      Params:         0       0       0       0       0
  5261 ;;      Locals:         0       0       0       0       0
  5262 ;;      Temps:          0       0       0       0       0
  5263 ;;      Totals:         0       0       0       0       0
  5264 ;;Total ram usage:        0 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:    8
  5267 ;; This function calls:
  5268 ;;		Nothing
  5269 ;; This function is called by:
  5270 ;;		_InitADC
  5271 ;; This function uses a non-reentrant model
  5272 ;;
  5273                           
  5274                           	psect	text41
  5275  001DEC                     __ptext41:
  5276                           	opt stack 0
  5277  001DEC                     _ADC_ChangeChannel:
  5278                           	opt stack 20
  5279                           
  5280                           ;ADC.c: 168: if(ADC_CurrentSource == 10)
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;incstack = 0
  5284  001DEC  0E0A               	movlw	10
  5285  001DEE  185B               	xorwf	_ADC_CurrentSource,w,c
  5286  001DF0  A4D8               	btfss	status,2,c
  5287  001DF2  D007               	goto	l4288
  5288                           
  5289                           ;ADC.c: 169: {
  5290                           ;ADC.c: 170: ADC_CurrentSource = 11;
  5291  001DF4  0E0B               	movlw	11
  5292  001DF6  6E5B               	movwf	_ADC_CurrentSource,c
  5293                           
  5294                           ;ADC.c: 171: ADCON0bits.CHS = 1;
  5295  001DF8  50C2               	movf	4034,w,c	;volatile
  5296  001DFA  0BC3               	andlw	-61
  5297  001DFC  0904               	iorlw	4
  5298  001DFE  6EC2               	movwf	4034,c	;volatile
  5299                           
  5300                           ;ADC.c: 172: }
  5301  001E00  0012               	return	
  5302  001E02                     l4288:
  5303                           
  5304                           ;ADC.c: 173: else
  5305                           ;ADC.c: 174: {
  5306                           ;ADC.c: 175: ADC_CurrentSource = 10;
  5307  001E02  0E0A               	movlw	10
  5308  001E04  6E5B               	movwf	_ADC_CurrentSource,c
  5309                           
  5310                           ;ADC.c: 176: ADCON0bits.CHS = 0;
  5311  001E06  94C2               	bcf	4034,2,c	;volatile
  5312  001E08  96C2               	bcf	4034,3,c	;volatile
  5313  001E0A  98C2               	bcf	4034,4,c	;volatile
  5314  001E0C  9AC2               	bcf	4034,5,c	;volatile
  5315  001E0E  0012               	return	
  5316  001E10  0012               	return		;funcret
  5317  001E12                     __end_of_ADC_ChangeChannel:
  5318                           	opt stack 0
  5319                           tblptru	equ	0xFF8
  5320                           tblptrh	equ	0xFF7
  5321                           tblptrl	equ	0xFF6
  5322                           tablat	equ	0xFF5
  5323                           intcon	equ	0xFF2
  5324                           intcon2	equ	0xFF1
  5325                           intcon3	equ	0xFF0
  5326                           postinc0	equ	0xFEE
  5327                           wreg	equ	0xFE8
  5328                           postdec1	equ	0xFE5
  5329                           fsr1l	equ	0xFE1
  5330                           status	equ	0xFD8
  5331                           
  5332 ;; *************** function _IR_ReadReceiver *****************
  5333 ;; Defined at:
  5334 ;;		line 79 in file "IR.c"
  5335 ;; Parameters:    Size  Location     Type
  5336 ;;		None
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;  value           1   49[BANK0 ] unsigned char 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  1    wreg      unsigned char 
  5341 ;; Registers used:
  5342 ;;		wreg, status,2, status,0
  5343 ;; Tracked objects:
  5344 ;;		On entry : 0/0
  5345 ;;		On exit  : 0/0
  5346 ;;		Unchanged: 0/0
  5347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5348 ;;      Params:         0       0       0       0       0
  5349 ;;      Locals:         0       1       0       0       0
  5350 ;;      Temps:          0       0       0       0       0
  5351 ;;      Totals:         0       1       0       0       0
  5352 ;;Total ram usage:        1 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    8
  5355 ;; This function calls:
  5356 ;;		Nothing
  5357 ;; This function is called by:
  5358 ;;		_Init_System
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361                           
  5362                           	psect	text42
  5363  001BB6                     __ptext42:
  5364                           	opt stack 0
  5365  001BB6                     _IR_ReadReceiver:
  5366                           	opt stack 21
  5367                           
  5368                           ;IR.c: 81: unsigned char value = PORTB;
  5369                           
  5370                           ;incstack = 0
  5371  001BB6  CF81 F0B1          	movff	3969,IR_ReadReceiver@value	;volatile
  5372                           
  5373                           ;IR.c: 83: if(value & 0x10)
  5374  001BBA  0100               	movlb	0	; () banked
  5375  001BBC  A9B1               	btfss	IR_ReadReceiver@value& (0+255),4,b
  5376  001BBE  D00B               	goto	l4418
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;IR.c: 84: {
  5380                           ;IR.c: 85: if(IRValue_prev == 0)
  5381  001BC0  0100               	movlb	0	; () banked
  5382  001BC2  51C2               	movf	_IRValue_prev& (0+255),w,b
  5383  001BC4  A4D8               	btfss	status,2,c
  5384  001BC6  D002               	goto	l481
  5385                           
  5386                           ; BSR set to: 0
  5387                           ;IR.c: 86: {
  5388                           ;IR.c: 87: IRChange = 1;
  5389  001BC8  0E01               	movlw	1
  5390  001BCA  6E56               	movwf	_IRChange,c
  5391  001BCC                     l481:
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;IR.c: 88: }
  5395                           ;IR.c: 89: IRValue_prev = 1;
  5396  001BCC  0E01               	movlw	1
  5397  001BCE  0100               	movlb	0	; () banked
  5398  001BD0  6FC2               	movwf	_IRValue_prev& (0+255),b
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;IR.c: 90: return 1;
  5402  001BD2  0E01               	movlw	1
  5403                           
  5404                           ; BSR set to: 0
  5405  001BD4  0012               	return	
  5406  001BD6                     l4418:
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;IR.c: 91: }
  5410                           ;IR.c: 93: if(IRValue_prev == 1)
  5411  001BD6  0100               	movlb	0	; () banked
  5412  001BD8  05C2               	decf	_IRValue_prev& (0+255),w,b
  5413  001BDA  A4D8               	btfss	status,2,c
  5414  001BDC  D002               	goto	l483
  5415                           
  5416                           ; BSR set to: 0
  5417                           ;IR.c: 94: {
  5418                           ;IR.c: 95: IRChange = 1;
  5419  001BDE  0E01               	movlw	1
  5420  001BE0  6E56               	movwf	_IRChange,c
  5421  001BE2                     l483:
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;IR.c: 96: }
  5425                           ;IR.c: 97: IRValue_prev = 0;
  5426  001BE2  0E00               	movlw	0
  5427  001BE4  0100               	movlb	0	; () banked
  5428  001BE6  6FC2               	movwf	_IRValue_prev& (0+255),b
  5429                           
  5430                           ; BSR set to: 0
  5431                           ;IR.c: 98: return 0;
  5432  001BE8  0E00               	movlw	0
  5433  001BEA  0012               	return	
  5434                           
  5435                           ; BSR set to: 0
  5436                           
  5437                           ; BSR set to: 0
  5438  001BEC  0012               	return		;funcret
  5439  001BEE                     __end_of_IR_ReadReceiver:
  5440                           	opt stack 0
  5441                           tblptru	equ	0xFF8
  5442                           tblptrh	equ	0xFF7
  5443                           tblptrl	equ	0xFF6
  5444                           tablat	equ	0xFF5
  5445                           intcon	equ	0xFF2
  5446                           intcon2	equ	0xFF1
  5447                           intcon3	equ	0xFF0
  5448                           postinc0	equ	0xFEE
  5449                           wreg	equ	0xFE8
  5450                           postdec1	equ	0xFE5
  5451                           fsr1l	equ	0xFE1
  5452                           status	equ	0xFD8
  5453                           
  5454 ;; *************** function _Init_App *****************
  5455 ;; Defined at:
  5456 ;;		line 72 in file "USER.c"
  5457 ;; Parameters:    Size  Location     Type
  5458 ;;		None
  5459 ;; Auto vars:     Size  Location     Type
  5460 ;;		None
  5461 ;; Return value:  Size  Location     Type
  5462 ;;		None               void
  5463 ;; Registers used:
  5464 ;;		wreg, status,2
  5465 ;; Tracked objects:
  5466 ;;		On entry : 0/0
  5467 ;;		On exit  : 0/0
  5468 ;;		Unchanged: 0/0
  5469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5470 ;;      Params:         0       0       0       0       0
  5471 ;;      Locals:         0       0       0       0       0
  5472 ;;      Temps:          0       0       0       0       0
  5473 ;;      Totals:         0       0       0       0       0
  5474 ;;Total ram usage:        0 bytes
  5475 ;; Hardware stack levels used:    1
  5476 ;; Hardware stack levels required when called:    8
  5477 ;; This function calls:
  5478 ;;		Nothing
  5479 ;; This function is called by:
  5480 ;;		_main
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           	psect	text43
  5485  001B08                     __ptext43:
  5486                           	opt stack 0
  5487  001B08                     _Init_App:
  5488                           	opt stack 22
  5489                           
  5490                           ;USER.c: 74: LATA = 0;
  5491                           
  5492                           ; BSR set to: 0
  5493                           ;incstack = 0
  5494  001B08  0E00               	movlw	0
  5495  001B0A  6E89               	movwf	3977,c	;volatile
  5496                           
  5497                           ;USER.c: 75: LATB = 0;
  5498  001B0C  0E00               	movlw	0
  5499  001B0E  6E8A               	movwf	3978,c	;volatile
  5500                           
  5501                           ;USER.c: 76: LATC = 0;
  5502  001B10  0E00               	movlw	0
  5503  001B12  6E8B               	movwf	3979,c	;volatile
  5504                           
  5505                           ;USER.c: 78: ADCON1bits.PCFG = 0b1101;
  5506  001B14  50C1               	movf	4033,w,c	;volatile
  5507  001B16  0BF0               	andlw	-16
  5508  001B18  090D               	iorlw	13
  5509  001B1A  6EC1               	movwf	4033,c	;volatile
  5510                           
  5511                           ;USER.c: 81: TRISCbits.TRISC0 = 1;
  5512  001B1C  8094               	bsf	3988,0,c	;volatile
  5513                           
  5514                           ;USER.c: 82: TRISCbits.TRISC1 = 1;
  5515  001B1E  8294               	bsf	3988,1,c	;volatile
  5516                           
  5517                           ;USER.c: 85: TRISAbits.TRISA0 = 1;
  5518  001B20  8092               	bsf	3986,0,c	;volatile
  5519                           
  5520                           ;USER.c: 89: TRISAbits.TRISA1 = 1;
  5521  001B22  8292               	bsf	3986,1,c	;volatile
  5522                           
  5523                           ;USER.c: 92: TRISAbits.TRISA2 = 0;
  5524  001B24  9492               	bcf	3986,2,c	;volatile
  5525                           
  5526                           ;USER.c: 95: TRISAbits.TRISA5 = 0;
  5527  001B26  9A92               	bcf	3986,5,c	;volatile
  5528                           
  5529                           ;USER.c: 98: TRISBbits.TRISB1 = 1;
  5530  001B28  8293               	bsf	3987,1,c	;volatile
  5531                           
  5532                           ;USER.c: 99: TRISBbits.TRISB2 = 1;
  5533  001B2A  8493               	bsf	3987,2,c	;volatile
  5534                           
  5535                           ;USER.c: 103: TRISBbits.TRISB3 = 0;
  5536  001B2C  9693               	bcf	3987,3,c	;volatile
  5537                           
  5538                           ;USER.c: 106: TRISCbits.TRISC2 = 0;
  5539  001B2E  9494               	bcf	3988,2,c	;volatile
  5540                           
  5541                           ;USER.c: 110: TRISCbits.TRISC3 = 1;
  5542  001B30  8694               	bsf	3988,3,c	;volatile
  5543                           
  5544                           ;USER.c: 113: TRISCbits.TRISC5 = 1;
  5545  001B32  8A94               	bsf	3988,5,c	;volatile
  5546                           
  5547                           ;USER.c: 117: TRISCbits.TRISC4 = 0;
  5548  001B34  9894               	bcf	3988,4,c	;volatile
  5549                           
  5550                           ;USER.c: 121: TRISBbits.TRISB0 = 1;
  5551  001B36  8093               	bsf	3987,0,c	;volatile
  5552                           
  5553                           ;USER.c: 122: TRISBbits.TRISB4 = 1;
  5554  001B38  8893               	bsf	3987,4,c	;volatile
  5555                           
  5556                           ;USER.c: 126: TRISBbits.TRISB5 = 1;
  5557  001B3A  8A93               	bsf	3987,5,c	;volatile
  5558                           
  5559                           ;USER.c: 130: TRISAbits.TRISA3 = 1;
  5560  001B3C  8692               	bsf	3986,3,c	;volatile
  5561                           
  5562                           ;USER.c: 142: TRISCbits.TRISC6 = 0;
  5563  001B3E  9C94               	bcf	3988,6,c	;volatile
  5564                           
  5565                           ;USER.c: 143: TRISCbits.TRISC7 = 0;
  5566  001B40  9E94               	bcf	3988,7,c	;volatile
  5567  001B42  0012               	return		;funcret
  5568  001B44                     __end_of_Init_App:
  5569                           	opt stack 0
  5570                           tblptru	equ	0xFF8
  5571                           tblptrh	equ	0xFF7
  5572                           tblptrl	equ	0xFF6
  5573                           tablat	equ	0xFF5
  5574                           intcon	equ	0xFF2
  5575                           intcon2	equ	0xFF1
  5576                           intcon3	equ	0xFF0
  5577                           postinc0	equ	0xFEE
  5578                           wreg	equ	0xFE8
  5579                           postdec1	equ	0xFE5
  5580                           fsr1l	equ	0xFE1
  5581                           status	equ	0xFD8
  5582                           
  5583 ;; *************** function _IR_LoadDefaultCode *****************
  5584 ;; Defined at:
  5585 ;;		line 145 in file "IR.c"
  5586 ;; Parameters:    Size  Location     Type
  5587 ;;		None
  5588 ;; Auto vars:     Size  Location     Type
  5589 ;;  High            3   14[BANK1 ] unsigned char 
  5590 ;;  Low             3   11[BANK1 ] unsigned char 
  5591 ;; Return value:  Size  Location     Type
  5592 ;;		None               void
  5593 ;; Registers used:
  5594 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5600 ;;      Params:         0       0       0       0       0
  5601 ;;      Locals:         0       0       6       0       0
  5602 ;;      Temps:          0       0       0       0       0
  5603 ;;      Totals:         0       0       6       0       0
  5604 ;;Total ram usage:        6 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:   10
  5607 ;; This function calls:
  5608 ;;		_MSC_BufferCopyIntConst
  5609 ;;		___fttol
  5610 ;; This function is called by:
  5611 ;;		_main
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           	psect	text44
  5616  001664                     __ptext44:
  5617                           	opt stack 0
  5618  001664                     _IR_LoadDefaultCode:
  5619                           	opt stack 20
  5620                           
  5621                           ;IR.c: 147: double Low = 0.0;
  5622                           
  5623                           ;incstack = 0
  5624  001664  0E00               	movlw	0
  5625  001666  0101               	movlb	1	; () banked
  5626  001668  6FAB               	movwf	IR_LoadDefaultCode@Low& (0+255),b
  5627  00166A  0E00               	movlw	0
  5628  00166C  0101               	movlb	1	; () banked
  5629  00166E  6FAC               	movwf	(IR_LoadDefaultCode@Low+1)& (0+255),b
  5630  001670  0E00               	movlw	0
  5631  001672  0101               	movlb	1	; () banked
  5632  001674  6FAD               	movwf	(IR_LoadDefaultCode@Low+2)& (0+255),b
  5633                           
  5634                           ;IR.c: 148: double High = 0.0;
  5635  001676  0E00               	movlw	0
  5636  001678  0101               	movlb	1	; () banked
  5637  00167A  6FAE               	movwf	IR_LoadDefaultCode@High& (0+255),b
  5638  00167C  0E00               	movlw	0
  5639  00167E  0101               	movlb	1	; () banked
  5640  001680  6FAF               	movwf	(IR_LoadDefaultCode@High+1)& (0+255),b
  5641  001682  0E00               	movlw	0
  5642  001684  0101               	movlb	1	; () banked
  5643  001686  6FB0               	movwf	(IR_LoadDefaultCode@High+2)& (0+255),b
  5644                           
  5645                           ;IR.c: 150: Low = (double)8800 * (1.0 - 0.2);
  5646  001688  0E00               	movlw	0
  5647  00168A  0101               	movlb	1	; () banked
  5648  00168C  6FAB               	movwf	IR_LoadDefaultCode@Low& (0+255),b
  5649  00168E  0EDC               	movlw	220
  5650  001690  0101               	movlb	1	; () banked
  5651  001692  6FAC               	movwf	(IR_LoadDefaultCode@Low+1)& (0+255),b
  5652  001694  0E45               	movlw	69
  5653  001696  0101               	movlb	1	; () banked
  5654  001698  6FAD               	movwf	(IR_LoadDefaultCode@Low+2)& (0+255),b
  5655                           
  5656                           ;IR.c: 151: High = (double)8800 * (1.0 + 0.2);
  5657  00169A  0E00               	movlw	0
  5658  00169C  0101               	movlb	1	; () banked
  5659  00169E  6FAE               	movwf	IR_LoadDefaultCode@High& (0+255),b
  5660  0016A0  0E25               	movlw	37
  5661  0016A2  0101               	movlb	1	; () banked
  5662  0016A4  6FAF               	movwf	(IR_LoadDefaultCode@High+1)& (0+255),b
  5663  0016A6  0E46               	movlw	70
  5664  0016A8  0101               	movlb	1	; () banked
  5665  0016AA  6FB0               	movwf	(IR_LoadDefaultCode@High+2)& (0+255),b
  5666                           
  5667                           ; BSR set to: 1
  5668                           ;IR.c: 153: IR_SyncLow = (unsigned int) Low;
  5669  0016AC  C1AB  F0B1         	movff	IR_LoadDefaultCode@Low,___fttol@f1
  5670  0016B0  C1AC  F0B2         	movff	IR_LoadDefaultCode@Low+1,___fttol@f1+1
  5671  0016B4  C1AD  F0B3         	movff	IR_LoadDefaultCode@Low+2,___fttol@f1+2
  5672  0016B8  EC5E  F006         	call	___fttol	;wreg free
  5673  0016BC  C0B1  F04D         	movff	?___fttol,_IR_SyncLow
  5674  0016C0  C0B2  F04E         	movff	?___fttol+1,_IR_SyncLow+1
  5675                           
  5676                           ;IR.c: 154: IR_SyncHigh = (unsigned int) High;
  5677  0016C4  C1AE  F0B1         	movff	IR_LoadDefaultCode@High,___fttol@f1
  5678  0016C8  C1AF  F0B2         	movff	IR_LoadDefaultCode@High+1,___fttol@f1+1
  5679  0016CC  C1B0  F0B3         	movff	IR_LoadDefaultCode@High+2,___fttol@f1+2
  5680  0016D0  EC5E  F006         	call	___fttol	;wreg free
  5681  0016D4  C0B1  F04B         	movff	?___fttol,_IR_SyncHigh
  5682  0016D8  C0B2  F04C         	movff	?___fttol+1,_IR_SyncHigh+1
  5683                           
  5684                           ;IR.c: 156: MSC_BufferCopyIntConst(&PIONEER_PLUS_Timing,&IR_SavedTiming,67,0);
  5685  0016DC  0ED4               	movlw	low _PIONEER_PLUS_Timing
  5686  0016DE  0101               	movlb	1	; () banked
  5687  0016E0  6FA0               	movwf	MSC_BufferCopyIntConst@from& (0+255),b
  5688  0016E2  0E3E               	movlw	high _PIONEER_PLUS_Timing
  5689  0016E4  0101               	movlb	1	; () banked
  5690  0016E6  6FA1               	movwf	(MSC_BufferCopyIntConst@from+1)& (0+255),b
  5691  0016E8  0E00               	movlw	low _IR_SavedTiming
  5692  0016EA  0101               	movlb	1	; () banked
  5693  0016EC  6FA2               	movwf	MSC_BufferCopyIntConst@to& (0+255),b
  5694  0016EE  0E01               	movlw	high _IR_SavedTiming
  5695  0016F0  0101               	movlb	1	; () banked
  5696  0016F2  6FA3               	movwf	(MSC_BufferCopyIntConst@to+1)& (0+255),b
  5697  0016F4  0E00               	movlw	0
  5698  0016F6  0101               	movlb	1	; () banked
  5699  0016F8  6FA5               	movwf	(MSC_BufferCopyIntConst@count+1)& (0+255),b
  5700  0016FA  0E43               	movlw	67
  5701  0016FC  6FA4               	movwf	MSC_BufferCopyIntConst@count& (0+255),b
  5702  0016FE  0E00               	movlw	0
  5703  001700  0101               	movlb	1	; () banked
  5704  001702  6FA7               	movwf	(MSC_BufferCopyIntConst@shift+1)& (0+255),b
  5705  001704  0E00               	movlw	0
  5706  001706  6FA6               	movwf	MSC_BufferCopyIntConst@shift& (0+255),b
  5707  001708  EC22  F00A         	call	_MSC_BufferCopyIntConst	;wreg free
  5708                           
  5709                           ;IR.c: 157: IR_CodeSize = 67;
  5710  00170C  0E43               	movlw	67
  5711  00170E  6E58               	movwf	_IR_CodeSize,c
  5712  001710  0012               	return		;funcret
  5713  001712                     __end_of_IR_LoadDefaultCode:
  5714                           	opt stack 0
  5715                           tblptru	equ	0xFF8
  5716                           tblptrh	equ	0xFF7
  5717                           tblptrl	equ	0xFF6
  5718                           tablat	equ	0xFF5
  5719                           intcon	equ	0xFF2
  5720                           intcon2	equ	0xFF1
  5721                           intcon3	equ	0xFF0
  5722                           postinc0	equ	0xFEE
  5723                           wreg	equ	0xFE8
  5724                           postdec1	equ	0xFE5
  5725                           fsr1l	equ	0xFE1
  5726                           status	equ	0xFD8
  5727                           
  5728 ;; *************** function ___fttol *****************
  5729 ;; Defined at:
  5730 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  5731 ;; Parameters:    Size  Location     Type
  5732 ;;  f1              3   49[BANK0 ] float 
  5733 ;; Auto vars:     Size  Location     Type
  5734 ;;  lval            4    6[BANK1 ] unsigned long 
  5735 ;;  exp1            1   10[BANK1 ] unsigned char 
  5736 ;;  sign1           1    5[BANK1 ] unsigned char 
  5737 ;; Return value:  Size  Location     Type
  5738 ;;                  4   49[BANK0 ] long 
  5739 ;; Registers used:
  5740 ;;		wreg, status,2, status,0
  5741 ;; Tracked objects:
  5742 ;;		On entry : 0/0
  5743 ;;		On exit  : 0/0
  5744 ;;		Unchanged: 0/0
  5745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5746 ;;      Params:         0       4       0       0       0
  5747 ;;      Locals:         0       0       6       0       0
  5748 ;;      Temps:          0       0       5       0       0
  5749 ;;      Totals:         0       4      11       0       0
  5750 ;;Total ram usage:       15 bytes
  5751 ;; Hardware stack levels used:    1
  5752 ;; Hardware stack levels required when called:    8
  5753 ;; This function calls:
  5754 ;;		Nothing
  5755 ;; This function is called by:
  5756 ;;		_RF_LoadDefaultCode
  5757 ;;		_IR_LoadDefaultCode
  5758 ;;		_RF_CalculateNewCode
  5759 ;;		_IR_CalculateNewCode
  5760 ;;		_MSC_Round
  5761 ;;		_MSC_DB_Round
  5762 ;;		_MSC_LG_Round
  5763 ;;		_MSC_Scale
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           	psect	text45
  5768  000CBC                     __ptext45:
  5769                           	opt stack 0
  5770  000CBC                     ___fttol:
  5771                           	opt stack 21
  5772                           
  5773                           ;incstack = 0
  5774  000CBC  C0B3  F1A0         	movff	___fttol@f1+2,??___fttol
  5775  000CC0  0101               	movlb	1	; () banked
  5776  000CC2  6BA1               	clrf	(??___fttol+1)& (0+255),b
  5777  000CC4  6BA2               	clrf	(??___fttol+2)& (0+255),b
  5778  000CC6  0100               	movlb	0	; () banked
  5779  000CC8  35B2               	rlcf	(___fttol@f1+1)& (0+255),w,b
  5780  000CCA  0101               	movlb	1	; () banked
  5781  000CCC  37A0               	rlcf	??___fttol& (0+255),f,b
  5782  000CCE  E301               	bnc	u5831
  5783  000CD0  81A1               	bsf	(??___fttol+1)& (0+255),0,b
  5784  000CD2                     u5831:
  5785  000CD2  0101               	movlb	1	; () banked
  5786  000CD4  51A0               	movf	??___fttol& (0+255),w,b
  5787  000CD6  0101               	movlb	1	; () banked
  5788  000CD8  6FAA               	movwf	___fttol@exp1& (0+255),b
  5789  000CDA  0101               	movlb	1	; () banked
  5790  000CDC  51AA               	movf	___fttol@exp1& (0+255),w,b
  5791  000CDE  A4D8               	btfss	status,2,c
  5792  000CE0  D00A               	goto	l5598
  5793                           
  5794                           ; BSR set to: 1
  5795  000CE2  0E00               	movlw	0
  5796  000CE4  0100               	movlb	0	; () banked
  5797  000CE6  6FB1               	movwf	?___fttol& (0+255),b
  5798  000CE8  0E00               	movlw	0
  5799  000CEA  6FB2               	movwf	(?___fttol+1)& (0+255),b
  5800  000CEC  0E00               	movlw	0
  5801  000CEE  6FB3               	movwf	(?___fttol+2)& (0+255),b
  5802  000CF0  0E00               	movlw	0
  5803  000CF2  6FB4               	movwf	(?___fttol+3)& (0+255),b
  5804                           
  5805                           ; BSR set to: 0
  5806  000CF4  0012               	return	
  5807  000CF6                     l5598:
  5808  000CF6  0E17               	movlw	23
  5809  000CF8  0101               	movlb	1	; () banked
  5810  000CFA  6FA0               	movwf	??___fttol& (0+255),b
  5811  000CFC  C0B1  F1A1         	movff	___fttol@f1,??___fttol+1
  5812  000D00  C0B2  F1A2         	movff	___fttol@f1+1,??___fttol+2
  5813  000D04  C0B3  F1A3         	movff	___fttol@f1+2,??___fttol+3
  5814  000D08  0101               	movlb	1	; () banked
  5815  000D0A  29A0               	incf	??___fttol& (0+255),w,b
  5816  000D0C  0101               	movlb	1	; () banked
  5817  000D0E  6FA4               	movwf	(??___fttol+4)& (0+255),b
  5818  000D10  D005               	goto	u5850
  5819  000D12                     u5855:
  5820  000D12  0101               	movlb	1	; () banked
  5821  000D14  90D8               	bcf	status,0,c
  5822  000D16  33A3               	rrcf	(??___fttol+3)& (0+255),f,b
  5823  000D18  33A2               	rrcf	(??___fttol+2)& (0+255),f,b
  5824  000D1A  33A1               	rrcf	(??___fttol+1)& (0+255),f,b
  5825  000D1C                     u5850:
  5826  000D1C  0101               	movlb	1	; () banked
  5827  000D1E  2FA4               	decfsz	(??___fttol+4)& (0+255),f,b
  5828  000D20  D7F8               	goto	u5855
  5829  000D22  0101               	movlb	1	; () banked
  5830  000D24  51A1               	movf	(??___fttol+1)& (0+255),w,b
  5831  000D26  0101               	movlb	1	; () banked
  5832  000D28  6FA5               	movwf	___fttol@sign1& (0+255),b
  5833                           
  5834                           ; BSR set to: 1
  5835  000D2A  0100               	movlb	0	; () banked
  5836  000D2C  8FB2               	bsf	(___fttol@f1+1)& (0+255),7,b
  5837                           
  5838                           ; BSR set to: 0
  5839  000D2E  0EFF               	movlw	255
  5840  000D30  0100               	movlb	0	; () banked
  5841  000D32  17B1               	andwf	___fttol@f1& (0+255),f,b
  5842  000D34  0EFF               	movlw	255
  5843  000D36  0100               	movlb	0	; () banked
  5844  000D38  17B2               	andwf	(___fttol@f1+1)& (0+255),f,b
  5845  000D3A  0E00               	movlw	0
  5846  000D3C  0100               	movlb	0	; () banked
  5847  000D3E  17B3               	andwf	(___fttol@f1+2)& (0+255),f,b
  5848                           
  5849                           ; BSR set to: 0
  5850  000D40  0100               	movlb	0	; () banked
  5851  000D42  51B1               	movf	___fttol@f1& (0+255),w,b
  5852  000D44  0101               	movlb	1	; () banked
  5853  000D46  6FA6               	movwf	___fttol@lval& (0+255),b
  5854  000D48  0100               	movlb	0	; () banked
  5855  000D4A  51B2               	movf	(___fttol@f1+1)& (0+255),w,b
  5856  000D4C  0101               	movlb	1	; () banked
  5857  000D4E  6FA7               	movwf	(___fttol@lval+1)& (0+255),b
  5858  000D50  0100               	movlb	0	; () banked
  5859  000D52  51B3               	movf	(___fttol@f1+2)& (0+255),w,b
  5860  000D54  0101               	movlb	1	; () banked
  5861  000D56  6FA8               	movwf	(___fttol@lval+2)& (0+255),b
  5862  000D58  0101               	movlb	1	; () banked
  5863  000D5A  6BA9               	clrf	(___fttol@lval+3)& (0+255),b
  5864                           
  5865                           ; BSR set to: 1
  5866  000D5C  0E8E               	movlw	142
  5867  000D5E  0101               	movlb	1	; () banked
  5868  000D60  5FAA               	subwf	___fttol@exp1& (0+255),f,b
  5869                           
  5870                           ; BSR set to: 1
  5871  000D62  0101               	movlb	1	; () banked
  5872  000D64  AFAA               	btfss	___fttol@exp1& (0+255),7,b
  5873  000D66  D01B               	goto	l5620
  5874                           
  5875                           ; BSR set to: 1
  5876  000D68  0101               	movlb	1	; () banked
  5877  000D6A  51AA               	movf	___fttol@exp1& (0+255),w,b
  5878  000D6C  0A80               	xorlw	128
  5879  000D6E  0F8F               	addlw	143
  5880  000D70  B0D8               	btfsc	status,0,c
  5881  000D72  D00B               	goto	l5616
  5882                           
  5883                           ; BSR set to: 1
  5884  000D74  0E00               	movlw	0
  5885  000D76  0100               	movlb	0	; () banked
  5886  000D78  6FB1               	movwf	?___fttol& (0+255),b
  5887  000D7A  0E00               	movlw	0
  5888  000D7C  6FB2               	movwf	(?___fttol+1)& (0+255),b
  5889  000D7E  0E00               	movlw	0
  5890  000D80  6FB3               	movwf	(?___fttol+2)& (0+255),b
  5891  000D82  0E00               	movlw	0
  5892  000D84  6FB4               	movwf	(?___fttol+3)& (0+255),b
  5893                           
  5894                           ; BSR set to: 0
  5895  000D86  0012               	return	
  5896                           
  5897                           ; BSR set to: 0
  5898  000D88  D000               	goto	l5616
  5899  000D8A                     l5616:
  5900  000D8A  0101               	movlb	1	; () banked
  5901  000D8C  90D8               	bcf	status,0,c
  5902  000D8E  33A9               	rrcf	(___fttol@lval+3)& (0+255),f,b
  5903  000D90  33A8               	rrcf	(___fttol@lval+2)& (0+255),f,b
  5904  000D92  33A7               	rrcf	(___fttol@lval+1)& (0+255),f,b
  5905  000D94  33A6               	rrcf	___fttol@lval& (0+255),f,b
  5906                           
  5907                           ; BSR set to: 1
  5908  000D96  0101               	movlb	1	; () banked
  5909  000D98  3FAA               	incfsz	___fttol@exp1& (0+255),f,b
  5910  000D9A  D7F7               	goto	l5616
  5911                           
  5912                           ; BSR set to: 1
  5913  000D9C  D01F               	goto	l5630
  5914  000D9E                     l5620:
  5915                           
  5916                           ; BSR set to: 1
  5917  000D9E  0E17               	movlw	23
  5918  000DA0  0101               	movlb	1	; () banked
  5919  000DA2  65AA               	cpfsgt	___fttol@exp1& (0+255),b
  5920  000DA4  D014               	goto	l5628
  5921                           
  5922                           ; BSR set to: 1
  5923  000DA6  0E00               	movlw	0
  5924  000DA8  0100               	movlb	0	; () banked
  5925  000DAA  6FB1               	movwf	?___fttol& (0+255),b
  5926  000DAC  0E00               	movlw	0
  5927  000DAE  6FB2               	movwf	(?___fttol+1)& (0+255),b
  5928  000DB0  0E00               	movlw	0
  5929  000DB2  6FB3               	movwf	(?___fttol+2)& (0+255),b
  5930  000DB4  0E00               	movlw	0
  5931  000DB6  6FB4               	movwf	(?___fttol+3)& (0+255),b
  5932                           
  5933                           ; BSR set to: 0
  5934  000DB8  0012               	return	
  5935                           
  5936                           ; BSR set to: 0
  5937  000DBA  D009               	goto	l5628
  5938  000DBC                     l5626:
  5939  000DBC  0101               	movlb	1	; () banked
  5940  000DBE  90D8               	bcf	status,0,c
  5941  000DC0  37A6               	rlcf	___fttol@lval& (0+255),f,b
  5942  000DC2  37A7               	rlcf	(___fttol@lval+1)& (0+255),f,b
  5943  000DC4  37A8               	rlcf	(___fttol@lval+2)& (0+255),f,b
  5944  000DC6  37A9               	rlcf	(___fttol@lval+3)& (0+255),f,b
  5945  000DC8  0101               	movlb	1	; () banked
  5946  000DCA  07AA               	decf	___fttol@exp1& (0+255),f,b
  5947  000DCC  D000               	goto	l5628
  5948  000DCE                     l5628:
  5949  000DCE  0101               	movlb	1	; () banked
  5950  000DD0  51AA               	movf	___fttol@exp1& (0+255),w,b
  5951  000DD2  0101               	movlb	1	; () banked
  5952  000DD4  B4D8               	btfsc	status,2,c
  5953  000DD6  D002               	goto	l5630
  5954  000DD8  D7F1               	goto	l5626
  5955                           
  5956                           ; BSR set to: 1
  5957  000DDA  D000               	goto	l5630
  5958  000DDC                     l5630:
  5959                           
  5960                           ; BSR set to: 1
  5961  000DDC  0101               	movlb	1	; () banked
  5962  000DDE  51A5               	movf	___fttol@sign1& (0+255),w,b
  5963  000DE0  0101               	movlb	1	; () banked
  5964  000DE2  B4D8               	btfsc	status,2,c
  5965  000DE4  D00A               	goto	l5634
  5966                           
  5967                           ; BSR set to: 1
  5968  000DE6  0101               	movlb	1	; () banked
  5969  000DE8  1FA9               	comf	(___fttol@lval+3)& (0+255),f,b
  5970  000DEA  1FA8               	comf	(___fttol@lval+2)& (0+255),f,b
  5971  000DEC  1FA7               	comf	(___fttol@lval+1)& (0+255),f,b
  5972  000DEE  6DA6               	negf	___fttol@lval& (0+255),b
  5973  000DF0  0E00               	movlw	0
  5974  000DF2  23A7               	addwfc	(___fttol@lval+1)& (0+255),f,b
  5975  000DF4  23A8               	addwfc	(___fttol@lval+2)& (0+255),f,b
  5976  000DF6  23A9               	addwfc	(___fttol@lval+3)& (0+255),f,b
  5977  000DF8  D000               	goto	l5634
  5978  000DFA                     l5634:
  5979                           
  5980                           ; BSR set to: 1
  5981  000DFA  C1A6  F0B1         	movff	___fttol@lval,?___fttol
  5982  000DFE  C1A7  F0B2         	movff	___fttol@lval+1,?___fttol+1
  5983  000E02  C1A8  F0B3         	movff	___fttol@lval+2,?___fttol+2
  5984  000E06  C1A9  F0B4         	movff	___fttol@lval+3,?___fttol+3
  5985  000E0A  0012               	return	
  5986                           
  5987                           ; BSR set to: 1
  5988  000E0C  0012               	return		;funcret
  5989  000E0E                     __end_of___fttol:
  5990                           	opt stack 0
  5991                           tblptru	equ	0xFF8
  5992                           tblptrh	equ	0xFF7
  5993                           tblptrl	equ	0xFF6
  5994                           tablat	equ	0xFF5
  5995                           intcon	equ	0xFF2
  5996                           intcon2	equ	0xFF1
  5997                           intcon3	equ	0xFF0
  5998                           postinc0	equ	0xFEE
  5999                           wreg	equ	0xFE8
  6000                           postdec1	equ	0xFE5
  6001                           fsr1l	equ	0xFE1
  6002                           status	equ	0xFD8
  6003                           
  6004 ;; *************** function _MSC_BufferCopyIntConst *****************
  6005 ;; Defined at:
  6006 ;;		line 238 in file "MISC.c"
  6007 ;; Parameters:    Size  Location     Type
  6008 ;;  from            2    0[BANK1 ] PTR const unsigned int 
  6009 ;;		 -> PIONEER_PLUS_Timing(134), CONF1_ChanE_Timing(100), 
  6010 ;;  to              2    2[BANK1 ] PTR unsigned int 
  6011 ;;		 -> IR_SavedTiming(160), RF_SavedTiming(120), 
  6012 ;;  count           2    4[BANK1 ] unsigned int 
  6013 ;;  shift           2    6[BANK1 ] unsigned int 
  6014 ;; Auto vars:     Size  Location     Type
  6015 ;;  i               2   55[BANK0 ] unsigned int 
  6016 ;; Return value:  Size  Location     Type
  6017 ;;		None               void
  6018 ;; Registers used:
  6019 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6020 ;; Tracked objects:
  6021 ;;		On entry : 0/0
  6022 ;;		On exit  : 0/0
  6023 ;;		Unchanged: 0/0
  6024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6025 ;;      Params:         0       0       8       0       0
  6026 ;;      Locals:         0       2       0       0       0
  6027 ;;      Temps:          0       0       0       0       0
  6028 ;;      Totals:         0       2       8       0       0
  6029 ;;Total ram usage:       10 bytes
  6030 ;; Hardware stack levels used:    1
  6031 ;; Hardware stack levels required when called:    9
  6032 ;; This function calls:
  6033 ;;		_MSC_CleanBufferInt
  6034 ;; This function is called by:
  6035 ;;		_RF_LoadDefaultCode
  6036 ;;		_IR_LoadDefaultCode
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           	psect	text46
  6041  001444                     __ptext46:
  6042                           	opt stack 0
  6043  001444                     _MSC_BufferCopyIntConst:
  6044                           	opt stack 20
  6045                           
  6046                           ;MISC.c: 240: unsigned int i=0;
  6047                           
  6048                           ;incstack = 0
  6049  001444  0E00               	movlw	0
  6050  001446  0100               	movlb	0	; () banked
  6051  001448  6FB8               	movwf	(MSC_BufferCopyIntConst@i+1)& (0+255),b
  6052  00144A  0E00               	movlw	0
  6053  00144C  6FB7               	movwf	MSC_BufferCopyIntConst@i& (0+255),b
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;MISC.c: 241: MSC_CleanBufferInt(to,count);
  6057  00144E  C1A2  F0B1         	movff	MSC_BufferCopyIntConst@to,MSC_CleanBufferInt@data
  6058  001452  C1A3  F0B2         	movff	MSC_BufferCopyIntConst@to+1,MSC_CleanBufferInt@data+1
  6059  001456  C1A4  F0B3         	movff	MSC_BufferCopyIntConst@count,MSC_CleanBufferInt@count
  6060  00145A  C1A5  F0B4         	movff	MSC_BufferCopyIntConst@count+1,MSC_CleanBufferInt@count+1
  6061  00145E  ECC6  F00C         	call	_MSC_CleanBufferInt	;wreg free
  6062                           
  6063                           ;MISC.c: 242: for(i = shift; i>0; i--)
  6064  001462  C1A6  F0B7         	movff	MSC_BufferCopyIntConst@shift,MSC_BufferCopyIntConst@i
  6065  001466  C1A7  F0B8         	movff	MSC_BufferCopyIntConst@shift+1,MSC_BufferCopyIntConst@i+1
  6066  00146A                     l5568:
  6067  00146A  0100               	movlb	0	; () banked
  6068  00146C  51B7               	movf	MSC_BufferCopyIntConst@i& (0+255),w,b
  6069  00146E  0100               	movlb	0	; () banked
  6070  001470  11B8               	iorwf	(MSC_BufferCopyIntConst@i+1)& (0+255),w,b
  6071  001472  B4D8               	btfsc	status,2,c
  6072  001474  D032               	goto	l5588
  6073  001476  D001               	goto	l5572
  6074                           
  6075                           ; BSR set to: 0
  6076  001478  D030               	goto	l5588
  6077  00147A                     l5572:
  6078                           
  6079                           ; BSR set to: 0
  6080                           ;MISC.c: 243: {
  6081                           ;MISC.c: 244: *to = ' ';
  6082  00147A  C1A2  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
  6083  00147E  C1A3  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
  6084  001482  0E20               	movlw	32
  6085  001484  6EDE               	movwf	postinc2,c
  6086  001486  0E00               	movlw	0
  6087  001488  6EDD               	movwf	postdec2,c
  6088                           
  6089                           ; BSR set to: 0
  6090                           ;MISC.c: 245: to++;
  6091  00148A  0E02               	movlw	2
  6092  00148C  0101               	movlb	1	; () banked
  6093  00148E  27A2               	addwf	MSC_BufferCopyIntConst@to& (0+255),f,b
  6094  001490  0E00               	movlw	0
  6095  001492  23A3               	addwfc	(MSC_BufferCopyIntConst@to+1)& (0+255),f,b
  6096                           
  6097                           ; BSR set to: 1
  6098  001494  0100               	movlb	0	; () banked
  6099  001496  07B7               	decf	MSC_BufferCopyIntConst@i& (0+255),f,b
  6100  001498  A0D8               	btfss	status,0,c
  6101  00149A  07B8               	decf	(MSC_BufferCopyIntConst@i+1)& (0+255),f,b
  6102  00149C  D7E6               	goto	l5568
  6103                           
  6104                           ; BSR set to: 0
  6105                           ;MISC.c: 246: }
  6106                           ;MISC.c: 247: while(*from != 0 && count >0)
  6107                           
  6108                           ; BSR set to: 0
  6109  00149E  D01D               	goto	l5588
  6110  0014A0                     l5580:
  6111                           
  6112                           ;MISC.c: 248: {
  6113                           ;MISC.c: 249: *to = *from;
  6114  0014A0  C1A0  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
  6115  0014A4  C1A1  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
  6116  0014A8                     	if	0	;tblptru may be non-zero
  6117  0014A8                     	endif
  6118  0014A8                     	if	0	;tblptru may be non-zero
  6119  0014A8                     	endif
  6120  0014A8  C1A2  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
  6121  0014AC  C1A3  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
  6122  0014B0  0009               	tblrd		*+
  6123  0014B2  CFF5 FFDE          	movff	tablat,postinc2
  6124  0014B6  0008               	tblrd		*
  6125  0014B8  CFF5 FFDD          	movff	tablat,postdec2
  6126                           
  6127                           ;MISC.c: 250: from++;
  6128  0014BC  0E02               	movlw	2
  6129  0014BE  0101               	movlb	1	; () banked
  6130  0014C0  27A0               	addwf	MSC_BufferCopyIntConst@from& (0+255),f,b
  6131  0014C2  0E00               	movlw	0
  6132  0014C4  23A1               	addwfc	(MSC_BufferCopyIntConst@from+1)& (0+255),f,b
  6133                           
  6134                           ; BSR set to: 1
  6135                           ;MISC.c: 251: to++;
  6136  0014C6  0E02               	movlw	2
  6137  0014C8  0101               	movlb	1	; () banked
  6138  0014CA  27A2               	addwf	MSC_BufferCopyIntConst@to& (0+255),f,b
  6139  0014CC  0E00               	movlw	0
  6140  0014CE  23A3               	addwfc	(MSC_BufferCopyIntConst@to+1)& (0+255),f,b
  6141                           
  6142                           ; BSR set to: 1
  6143                           ;MISC.c: 252: count--;
  6144  0014D0  0101               	movlb	1	; () banked
  6145  0014D2  07A4               	decf	MSC_BufferCopyIntConst@count& (0+255),f,b
  6146  0014D4  A0D8               	btfss	status,0,c
  6147  0014D6  07A5               	decf	(MSC_BufferCopyIntConst@count+1)& (0+255),f,b
  6148  0014D8  D000               	goto	l5588
  6149  0014DA                     l5588:
  6150  0014DA  C1A0  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
  6151  0014DE  C1A1  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
  6152  0014E2                     	if	0	;tblptru may be non-zero
  6153  0014E2                     	endif
  6154  0014E2                     	if	0	;tblptru may be non-zero
  6155  0014E2                     	endif
  6156  0014E2  0009               	tblrd		*+
  6157  0014E4  50F5               	movf	tablat,w,c
  6158  0014E6  0009               	tblrd		*+
  6159  0014E8  10F5               	iorwf	tablat,w,c
  6160  0014EA  B4D8               	btfsc	status,2,c
  6161  0014EC  0012               	return	
  6162  0014EE  0101               	movlb	1	; () banked
  6163  0014F0  51A4               	movf	MSC_BufferCopyIntConst@count& (0+255),w,b
  6164  0014F2  0101               	movlb	1	; () banked
  6165  0014F4  11A5               	iorwf	(MSC_BufferCopyIntConst@count+1)& (0+255),w,b
  6166  0014F6  B4D8               	btfsc	status,2,c
  6167  0014F8  0012               	return	
  6168  0014FA  D7D2               	goto	l5580
  6169                           
  6170                           ; BSR set to: 1
  6171  0014FC  0012               	return	
  6172                           
  6173                           ; BSR set to: 1
  6174  0014FE  0012               	return		;funcret
  6175  001500                     __end_of_MSC_BufferCopyIntConst:
  6176                           	opt stack 0
  6177                           tblptru	equ	0xFF8
  6178                           tblptrh	equ	0xFF7
  6179                           tblptrl	equ	0xFF6
  6180                           tablat	equ	0xFF5
  6181                           intcon	equ	0xFF2
  6182                           intcon2	equ	0xFF1
  6183                           intcon3	equ	0xFF0
  6184                           postinc0	equ	0xFEE
  6185                           wreg	equ	0xFE8
  6186                           postdec1	equ	0xFE5
  6187                           fsr1l	equ	0xFE1
  6188                           postinc2	equ	0xFDE
  6189                           postdec2	equ	0xFDD
  6190                           fsr2h	equ	0xFDA
  6191                           fsr2l	equ	0xFD9
  6192                           status	equ	0xFD8
  6193                           
  6194 ;; *************** function _MSC_CleanBufferInt *****************
  6195 ;; Defined at:
  6196 ;;		line 166 in file "MISC.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  data            2   49[BANK0 ] PTR unsigned int 
  6199 ;;		 -> IR_SavedTiming(160), RF_SavedTiming(120), IR_DataTiming(160), RF_DataTiming(120), 
  6200 ;;  count           2   51[BANK0 ] unsigned int 
  6201 ;; Auto vars:     Size  Location     Type
  6202 ;;  i               2   53[BANK0 ] unsigned int 
  6203 ;; Return value:  Size  Location     Type
  6204 ;;		None               void
  6205 ;; Registers used:
  6206 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6207 ;; Tracked objects:
  6208 ;;		On entry : 0/0
  6209 ;;		On exit  : 0/0
  6210 ;;		Unchanged: 0/0
  6211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6212 ;;      Params:         0       4       0       0       0
  6213 ;;      Locals:         0       2       0       0       0
  6214 ;;      Temps:          0       0       0       0       0
  6215 ;;      Totals:         0       6       0       0       0
  6216 ;;Total ram usage:        6 bytes
  6217 ;; Hardware stack levels used:    1
  6218 ;; Hardware stack levels required when called:    8
  6219 ;; This function calls:
  6220 ;;		Nothing
  6221 ;; This function is called by:
  6222 ;;		_InitRF
  6223 ;;		_InitIR
  6224 ;;		_MSC_BufferCopyIntConst
  6225 ;; This function uses a non-reentrant model
  6226 ;;
  6227                           
  6228                           	psect	text47
  6229  00198C                     __ptext47:
  6230                           	opt stack 0
  6231  00198C                     _MSC_CleanBufferInt:
  6232                           	opt stack 20
  6233                           
  6234                           ;MISC.c: 168: unsigned int i=0;
  6235                           
  6236                           ;incstack = 0
  6237  00198C  0E00               	movlw	0
  6238  00198E  0100               	movlb	0	; () banked
  6239  001990  6FB6               	movwf	(MSC_CleanBufferInt@i+1)& (0+255),b
  6240  001992  0E00               	movlw	0
  6241  001994  6FB5               	movwf	MSC_CleanBufferInt@i& (0+255),b
  6242                           
  6243                           ;MISC.c: 169: for(i=0; i<count;i++)
  6244  001996  0E00               	movlw	0
  6245  001998  0100               	movlb	0	; () banked
  6246  00199A  6FB6               	movwf	(MSC_CleanBufferInt@i+1)& (0+255),b
  6247  00199C  0E00               	movlw	0
  6248  00199E  6FB5               	movwf	MSC_CleanBufferInt@i& (0+255),b
  6249  0019A0  D015               	goto	l5528
  6250  0019A2                     l5524:
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;MISC.c: 170: {
  6254                           ;MISC.c: 171: data[i]= 0;
  6255  0019A2  90D8               	bcf	status,0,c
  6256  0019A4  0100               	movlb	0	; () banked
  6257  0019A6  35B5               	rlcf	MSC_CleanBufferInt@i& (0+255),w,b
  6258  0019A8  6ED9               	movwf	fsr2l,c
  6259  0019AA  0100               	movlb	0	; () banked
  6260  0019AC  35B6               	rlcf	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  6261  0019AE  6EDA               	movwf	fsr2h,c
  6262  0019B0  0100               	movlb	0	; () banked
  6263  0019B2  51B1               	movf	MSC_CleanBufferInt@data& (0+255),w,b
  6264  0019B4  26D9               	addwf	fsr2l,f,c
  6265  0019B6  0100               	movlb	0	; () banked
  6266  0019B8  51B2               	movf	(MSC_CleanBufferInt@data+1)& (0+255),w,b
  6267  0019BA  22DA               	addwfc	fsr2h,f,c
  6268  0019BC  0E00               	movlw	0
  6269  0019BE  6EDE               	movwf	postinc2,c
  6270  0019C0  0E00               	movlw	0
  6271  0019C2  6EDD               	movwf	postdec2,c
  6272                           
  6273                           ; BSR set to: 0
  6274  0019C4  0100               	movlb	0	; () banked
  6275  0019C6  4BB5               	infsnz	MSC_CleanBufferInt@i& (0+255),f,b
  6276  0019C8  2BB6               	incf	(MSC_CleanBufferInt@i+1)& (0+255),f,b
  6277  0019CA  D000               	goto	l5528
  6278  0019CC                     l5528:
  6279                           
  6280                           ; BSR set to: 0
  6281  0019CC  0100               	movlb	0	; () banked
  6282  0019CE  51B3               	movf	MSC_CleanBufferInt@count& (0+255),w,b
  6283  0019D0  0100               	movlb	0	; () banked
  6284  0019D2  5DB5               	subwf	MSC_CleanBufferInt@i& (0+255),w,b
  6285  0019D4  0100               	movlb	0	; () banked
  6286  0019D6  51B4               	movf	(MSC_CleanBufferInt@count+1)& (0+255),w,b
  6287  0019D8  0100               	movlb	0	; () banked
  6288  0019DA  59B6               	subwfb	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  6289  0019DC  A0D8               	btfss	status,0,c
  6290  0019DE  D7E1               	goto	l5524
  6291                           
  6292                           ; BSR set to: 0
  6293                           
  6294                           ; BSR set to: 0
  6295  0019E0  0012               	return		;funcret
  6296  0019E2                     __end_of_MSC_CleanBufferInt:
  6297                           	opt stack 0
  6298                           tblptru	equ	0xFF8
  6299                           tblptrh	equ	0xFF7
  6300                           tblptrl	equ	0xFF6
  6301                           tablat	equ	0xFF5
  6302                           intcon	equ	0xFF2
  6303                           intcon2	equ	0xFF1
  6304                           intcon3	equ	0xFF0
  6305                           postinc0	equ	0xFEE
  6306                           wreg	equ	0xFE8
  6307                           postdec1	equ	0xFE5
  6308                           fsr1l	equ	0xFE1
  6309                           postinc2	equ	0xFDE
  6310                           postdec2	equ	0xFDD
  6311                           fsr2h	equ	0xFDA
  6312                           fsr2l	equ	0xFD9
  6313                           status	equ	0xFD8
  6314                           
  6315 ;; *************** function _ADC_Start *****************
  6316 ;; Defined at:
  6317 ;;		line 75 in file "ADC.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;		None
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;		None
  6322 ;; Return value:  Size  Location     Type
  6323 ;;		None               void
  6324 ;; Registers used:
  6325 ;;		None
  6326 ;; Tracked objects:
  6327 ;;		On entry : 0/0
  6328 ;;		On exit  : 0/0
  6329 ;;		Unchanged: 0/0
  6330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6331 ;;      Params:         0       0       0       0       0
  6332 ;;      Locals:         0       0       0       0       0
  6333 ;;      Temps:          0       0       0       0       0
  6334 ;;      Totals:         0       0       0       0       0
  6335 ;;Total ram usage:        0 bytes
  6336 ;; Hardware stack levels used:    1
  6337 ;; Hardware stack levels required when called:    8
  6338 ;; This function calls:
  6339 ;;		Nothing
  6340 ;; This function is called by:
  6341 ;;		_main
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           	psect	text48
  6346  0021FE                     __ptext48:
  6347                           	opt stack 0
  6348  0021FE                     _ADC_Start:
  6349                           	opt stack 22
  6350                           
  6351                           ;ADC.c: 77: ADCON0bits.GO = 1;
  6352                           
  6353                           ; BSR set to: 0
  6354                           ;incstack = 0
  6355  0021FE  82C2               	bsf	4034,1,c	;volatile
  6356  002200  0012               	return		;funcret
  6357  002202                     __end_of_ADC_Start:
  6358                           	opt stack 0
  6359                           tblptru	equ	0xFF8
  6360                           tblptrh	equ	0xFF7
  6361                           tblptrl	equ	0xFF6
  6362                           tablat	equ	0xFF5
  6363                           intcon	equ	0xFF2
  6364                           intcon2	equ	0xFF1
  6365                           intcon3	equ	0xFF0
  6366                           postinc0	equ	0xFEE
  6367                           wreg	equ	0xFE8
  6368                           postdec1	equ	0xFE5
  6369                           fsr1l	equ	0xFE1
  6370                           postinc2	equ	0xFDE
  6371                           postdec2	equ	0xFDD
  6372                           fsr2h	equ	0xFDA
  6373                           fsr2l	equ	0xFD9
  6374                           status	equ	0xFD8
  6375                           
  6376 ;; *************** function _low_isr *****************
  6377 ;; Defined at:
  6378 ;;		line 127 in file "INTERRUPTS.c"
  6379 ;; Parameters:    Size  Location     Type
  6380 ;;		None
  6381 ;; Auto vars:     Size  Location     Type
  6382 ;;  IRtemp          2   69[COMRAM] unsigned int 
  6383 ;;  button_state    1   68[COMRAM] unsigned char 
  6384 ;;  IR_state        1   67[COMRAM] unsigned char 
  6385 ;; Return value:  Size  Location     Type
  6386 ;;		None               void
  6387 ;; Registers used:
  6388 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6394 ;;      Params:         0       0       0       0       0
  6395 ;;      Locals:         4       0       0       0       0
  6396 ;;      Temps:         17       0       0       0       0
  6397 ;;      Totals:        21       0       0       0       0
  6398 ;;Total ram usage:       21 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:    7
  6401 ;; This function calls:
  6402 ;;		_ADC_CalculateVoltage
  6403 ;;		_IR_CheckCode
  6404 ;;		_IR_CleanBuffer
  6405 ;;		_IR_ResetData
  6406 ;;		_RF_Disable
  6407 ;;		_TMR_Timer1Start
  6408 ;;		_TMR_Timer1Status
  6409 ;;		_TMR_Timer2Start
  6410 ;;		i1_BUT_IR_PinChangeInt
  6411 ;;		i1_BUT_ReadButton
  6412 ;;		i1_IR_ReadReceiver
  6413 ;;		i1_TMR_ResetTimer1
  6414 ;;		i1_TMR_Timer1
  6415 ;;		i1_TMR_Timer2
  6416 ;; This function is called by:
  6417 ;;		Interrupt level 1
  6418 ;; This function uses a non-reentrant model
  6419 ;;
  6420                           
  6421                           	psect	intcodelo
  6422  000018                     __pintcodelo:
  6423                           	opt stack 0
  6424  000018                     _low_isr:
  6425                           	opt stack 17
  6426                           
  6427                           ;incstack = 0
  6428  000018  CFD8 F033          	movff	status,??_low_isr
  6429  00001C  CFE8 F034          	movff	wreg,??_low_isr+1
  6430  000020  CFE0 F035          	movff	bsr,??_low_isr+2
  6431  000024  CFFA F036          	movff	pclath,??_low_isr+3
  6432  000028  CFFB F037          	movff	pclatu,??_low_isr+4
  6433  00002C  CFE9 F038          	movff	fsr0l,??_low_isr+5
  6434  000030  CFEA F039          	movff	fsr0h,??_low_isr+6
  6435  000034  CFE1 F03A          	movff	fsr1l,??_low_isr+7
  6436  000038  CFE2 F03B          	movff	fsr1h,??_low_isr+8
  6437  00003C  CFD9 F03C          	movff	fsr2l,??_low_isr+9
  6438  000040  CFDA F03D          	movff	fsr2h,??_low_isr+10
  6439  000044  CFF3 F03E          	movff	prodl,??_low_isr+11
  6440  000048  CFF4 F03F          	movff	prodh,??_low_isr+12
  6441  00004C  CFF6 F040          	movff	tblptrl,??_low_isr+13
  6442  000050  CFF7 F041          	movff	tblptrh,??_low_isr+14
  6443  000054  CFF8 F042          	movff	tblptru,??_low_isr+15
  6444  000058  CFF5 F043          	movff	tablat,??_low_isr+16
  6445                           
  6446                           ;INTERRUPTS.c: 129: unsigned char button_state;
  6447                           ;INTERRUPTS.c: 130: unsigned char IR_state;
  6448                           ;INTERRUPTS.c: 131: unsigned int IRtemp = 0;
  6449  00005C  0E00               	movlw	0
  6450  00005E  6E47               	movwf	low_isr@IRtemp+1,c
  6451  000060  0E00               	movlw	0
  6452  000062  6E46               	movwf	low_isr@IRtemp,c
  6453                           
  6454                           ;INTERRUPTS.c: 133: if(INTCONbits.RBIF)
  6455  000064  A0F2               	btfss	intcon,0,c	;volatile
  6456  000066  D0BC               	goto	i1l197
  6457                           
  6458                           ;INTERRUPTS.c: 134: {
  6459                           ;INTERRUPTS.c: 139: button_state = BUT_ReadButton();
  6460  000068  EC12  F00E         	call	i1_BUT_ReadButton	;wreg free
  6461  00006C  6E45               	movwf	low_isr@button_state,c
  6462                           
  6463                           ;INTERRUPTS.c: 140: IR_state = IR_ReadReceiver();
  6464  00006E  ECF7  F00D         	call	i1_IR_ReadReceiver	;wreg free
  6465  000072  6E44               	movwf	low_isr@IR_state,c
  6466                           
  6467                           ;INTERRUPTS.c: 141: if(ButtonChange)
  6468  000074  5055               	movf	_ButtonChange,w,c
  6469  000076  B4D8               	btfsc	status,2,c
  6470  000078  D03D               	goto	i1l5348
  6471                           
  6472                           ;INTERRUPTS.c: 142: {
  6473                           ;INTERRUPTS.c: 144: BUT_IR_PinChangeInt(0);
  6474  00007A  0E00               	movlw	0
  6475  00007C  EC88  F010         	call	i1_BUT_IR_PinChangeInt
  6476                           
  6477                           ;INTERRUPTS.c: 145: TMR_Timer2(0);
  6478  000080  0E00               	movlw	0
  6479  000082  EC91  F010         	call	i1_TMR_Timer2
  6480                           
  6481                           ;INTERRUPTS.c: 146: if(button_state)
  6482  000086  5045               	movf	low_isr@button_state,w,c
  6483  000088  B4D8               	btfsc	status,2,c
  6484  00008A  D017               	goto	i1l5336
  6485                           
  6486                           ;INTERRUPTS.c: 147: {
  6487                           ;INTERRUPTS.c: 149: if(System_State == 8)
  6488  00008C  0E08               	movlw	8
  6489  00008E  0100               	movlb	0	; () banked
  6490  000090  19CE               	xorwf	_System_State& (0+255),w,b
  6491  000092  A4D8               	btfss	status,2,c
  6492  000094  D009               	goto	i1l5332
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;INTERRUPTS.c: 150: {
  6496                           ;INTERRUPTS.c: 151: Timer2Use = 17;
  6497  000096  0E11               	movlw	17
  6498  000098  6E5A               	movwf	_Timer2Use,c
  6499                           
  6500                           ; BSR set to: 0
  6501                           ;INTERRUPTS.c: 152: TMR_Timer2Start(400);
  6502  00009A  0E01               	movlw	1
  6503  00009C  6E04               	movwf	TMR_Timer2Start@time+1,c
  6504  00009E  0E90               	movlw	144
  6505  0000A0  6E03               	movwf	TMR_Timer2Start@time,c
  6506  0000A2  ECA9  F00F         	call	_TMR_Timer2Start	;wreg free
  6507                           
  6508                           ;INTERRUPTS.c: 153: }
  6509  0000A6  D023               	goto	i1l5346
  6510  0000A8                     i1l5332:
  6511                           
  6512                           ;INTERRUPTS.c: 154: else
  6513                           ;INTERRUPTS.c: 155: {
  6514                           ;INTERRUPTS.c: 156: Timer2Use = 19;
  6515  0000A8  0E13               	movlw	19
  6516  0000AA  6E5A               	movwf	_Timer2Use,c
  6517                           
  6518                           ;INTERRUPTS.c: 157: TMR_Timer2Start(8);
  6519  0000AC  0E00               	movlw	0
  6520  0000AE  6E04               	movwf	TMR_Timer2Start@time+1,c
  6521  0000B0  0E08               	movlw	8
  6522  0000B2  6E03               	movwf	TMR_Timer2Start@time,c
  6523  0000B4  ECA9  F00F         	call	_TMR_Timer2Start	;wreg free
  6524                           
  6525                           ;INTERRUPTS.c: 158: }
  6526                           ;INTERRUPTS.c: 159: }
  6527  0000B8  D01A               	goto	i1l5346
  6528  0000BA                     i1l5336:
  6529                           
  6530                           ;INTERRUPTS.c: 160: else
  6531                           ;INTERRUPTS.c: 161: {
  6532                           ;INTERRUPTS.c: 162: if(System_State != 10)
  6533  0000BA  0E0A               	movlw	10
  6534  0000BC  0100               	movlb	0	; () banked
  6535  0000BE  19CE               	xorwf	_System_State& (0+255),w,b
  6536  0000C0  B4D8               	btfsc	status,2,c
  6537  0000C2  D00C               	goto	i1l5342
  6538                           
  6539                           ; BSR set to: 0
  6540                           ;INTERRUPTS.c: 163: {
  6541                           ;INTERRUPTS.c: 165: Button_Data = 1;
  6542  0000C4  0E01               	movlw	1
  6543  0000C6  0100               	movlb	0	; () banked
  6544  0000C8  6FC0               	movwf	_Button_Data& (0+255),b	;volatile
  6545                           
  6546                           ;INTERRUPTS.c: 166: Timer2Use = 19;
  6547  0000CA  0E13               	movlw	19
  6548  0000CC  6E5A               	movwf	_Timer2Use,c
  6549                           
  6550                           ; BSR set to: 0
  6551                           ;INTERRUPTS.c: 167: TMR_Timer2Start(8);
  6552  0000CE  0E00               	movlw	0
  6553  0000D0  6E04               	movwf	TMR_Timer2Start@time+1,c
  6554  0000D2  0E08               	movlw	8
  6555  0000D4  6E03               	movwf	TMR_Timer2Start@time,c
  6556  0000D6  ECA9  F00F         	call	_TMR_Timer2Start	;wreg free
  6557                           
  6558                           ;INTERRUPTS.c: 168: }
  6559  0000DA  D009               	goto	i1l5346
  6560  0000DC                     i1l5342:
  6561                           
  6562                           ;INTERRUPTS.c: 169: else
  6563                           ;INTERRUPTS.c: 170: {
  6564                           ;INTERRUPTS.c: 171: Timer2Use = 18;
  6565  0000DC  0E12               	movlw	18
  6566  0000DE  6E5A               	movwf	_Timer2Use,c
  6567                           
  6568                           ;INTERRUPTS.c: 172: TMR_Timer2Start(500);
  6569  0000E0  0E01               	movlw	1
  6570  0000E2  6E04               	movwf	TMR_Timer2Start@time+1,c
  6571  0000E4  0EF4               	movlw	244
  6572  0000E6  6E03               	movwf	TMR_Timer2Start@time,c
  6573  0000E8  ECA9  F00F         	call	_TMR_Timer2Start	;wreg free
  6574  0000EC  D000               	goto	i1l5346
  6575  0000EE                     i1l5346:
  6576                           
  6577                           ;INTERRUPTS.c: 173: }
  6578                           ;INTERRUPTS.c: 174: }
  6579                           ;INTERRUPTS.c: 175: ButtonChange = 0;
  6580  0000EE  0E00               	movlw	0
  6581  0000F0  6E55               	movwf	_ButtonChange,c
  6582                           
  6583                           ;INTERRUPTS.c: 176: }
  6584  0000F2  D074               	goto	i1l205
  6585  0000F4                     i1l5348:
  6586                           
  6587                           ;INTERRUPTS.c: 177: else if(IRChange)
  6588  0000F4  5056               	movf	_IRChange,w,c
  6589  0000F6  B4D8               	btfsc	status,2,c
  6590  0000F8  D06F               	goto	i1l206
  6591                           
  6592                           ;INTERRUPTS.c: 178: {
  6593                           ;INTERRUPTS.c: 180: if(!TMR_Timer1Status())
  6594  0000FA  ECD5  F010         	call	_TMR_Timer1Status	;wreg free
  6595  0000FE  0900               	iorlw	0
  6596  000100  A4D8               	btfss	status,2,c
  6597  000102  D003               	goto	i1l207
  6598                           
  6599                           ;INTERRUPTS.c: 181: {
  6600                           ;INTERRUPTS.c: 183: TMR_Timer1Start();
  6601  000104  EC9A  F010         	call	_TMR_Timer1Start	;wreg free
  6602                           
  6603                           ;INTERRUPTS.c: 184: }
  6604  000108  D060               	goto	i1l5396
  6605  00010A                     i1l207:
  6606                           
  6607                           ;INTERRUPTS.c: 185: else
  6608                           ;INTERRUPTS.c: 186: {
  6609                           ;INTERRUPTS.c: 187: IRtemp = TMR1L;
  6610  00010A  CFCE F046          	movff	4046,low_isr@IRtemp	;volatile
  6611  00010E  6A47               	clrf	low_isr@IRtemp+1,c
  6612                           
  6613                           ;INTERRUPTS.c: 188: IRtemp += (unsigned int)TMR1H << 8;
  6614  000110  50CF               	movf	4047,w,c	;volatile
  6615  000112  2647               	addwf	low_isr@IRtemp+1,f,c
  6616                           
  6617                           ;INTERRUPTS.c: 189: TMR_ResetTimer1();
  6618  000114  EC09  F00F         	call	i1_TMR_ResetTimer1	;wreg free
  6619                           
  6620                           ;INTERRUPTS.c: 190: if(!IRStarted)
  6621  000118  5057               	movf	_IRStarted,w,c
  6622  00011A  A4D8               	btfss	status,2,c
  6623  00011C  D023               	goto	i1l209
  6624                           
  6625                           ;INTERRUPTS.c: 191: {
  6626                           ;INTERRUPTS.c: 192: if(System_State == 8)
  6627  00011E  0E08               	movlw	8
  6628  000120  0100               	movlb	0	; () banked
  6629  000122  19CE               	xorwf	_System_State& (0+255),w,b
  6630  000124  A4D8               	btfss	status,2,c
  6631  000126  D00F               	goto	i1l5368
  6632                           
  6633                           ; BSR set to: 0
  6634                           ;INTERRUPTS.c: 193: {
  6635                           ;INTERRUPTS.c: 194: if(IRtemp >= IR_SyncLow && IRtemp <= IR_SyncHigh)
  6636  000128  504D               	movf	_IR_SyncLow,w,c
  6637  00012A  5C46               	subwf	low_isr@IRtemp,w,c
  6638  00012C  504E               	movf	_IR_SyncLow+1,w,c
  6639  00012E  5847               	subwfb	low_isr@IRtemp+1,w,c
  6640  000130  A0D8               	btfss	status,0,c
  6641  000132  D018               	goto	i1l209
  6642                           
  6643                           ; BSR set to: 0
  6644  000134  5046               	movf	low_isr@IRtemp,w,c
  6645  000136  5C4B               	subwf	_IR_SyncHigh,w,c
  6646  000138  5047               	movf	low_isr@IRtemp+1,w,c
  6647  00013A  584C               	subwfb	_IR_SyncHigh+1,w,c
  6648  00013C  A0D8               	btfss	status,0,c
  6649  00013E  D012               	goto	i1l209
  6650                           
  6651                           ; BSR set to: 0
  6652                           ;INTERRUPTS.c: 195: {
  6653                           ;INTERRUPTS.c: 196: IRStarted = 1;
  6654  000140  0E01               	movlw	1
  6655  000142  6E57               	movwf	_IRStarted,c
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;INTERRUPTS.c: 197: }
  6659                           ;INTERRUPTS.c: 198: }
  6660  000144  D00F               	goto	i1l209
  6661  000146                     i1l5368:
  6662                           
  6663                           ; BSR set to: 0
  6664                           ;INTERRUPTS.c: 199: else
  6665                           ;INTERRUPTS.c: 200: {
  6666                           ;INTERRUPTS.c: 201: if(IRtemp >= 2000 && IRtemp <= 16000)
  6667  000146  0ED0               	movlw	208
  6668  000148  5C46               	subwf	low_isr@IRtemp,w,c
  6669  00014A  0E07               	movlw	7
  6670  00014C  5847               	subwfb	low_isr@IRtemp+1,w,c
  6671  00014E  A0D8               	btfss	status,0,c
  6672  000150  D009               	goto	i1l209
  6673                           
  6674                           ; BSR set to: 0
  6675  000152  0E81               	movlw	129
  6676  000154  5C46               	subwf	low_isr@IRtemp,w,c
  6677  000156  0E3E               	movlw	62
  6678  000158  5847               	subwfb	low_isr@IRtemp+1,w,c
  6679  00015A  B0D8               	btfsc	status,0,c
  6680  00015C  D003               	goto	i1l209
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;INTERRUPTS.c: 202: {
  6684                           ;INTERRUPTS.c: 203: IRStarted = 1;
  6685  00015E  0E01               	movlw	1
  6686  000160  6E57               	movwf	_IRStarted,c
  6687                           
  6688                           ; BSR set to: 0
  6689  000162  D000               	goto	i1l209
  6690  000164                     i1l209:
  6691                           
  6692                           ;INTERRUPTS.c: 204: }
  6693                           ;INTERRUPTS.c: 205: }
  6694                           ;INTERRUPTS.c: 206: }
  6695                           ;INTERRUPTS.c: 207: if(IRStarted)
  6696  000164  5057               	movf	_IRStarted,w,c
  6697  000166  B4D8               	btfsc	status,2,c
  6698  000168  D030               	goto	i1l5396
  6699                           
  6700                           ;INTERRUPTS.c: 208: {
  6701                           ;INTERRUPTS.c: 209: RF_Disable();
  6702  00016A  EC74  F010         	call	_RF_Disable	;wreg free
  6703                           
  6704                           ;INTERRUPTS.c: 210: if(IR_DataPlace < 80)
  6705  00016E  0E50               	movlw	80
  6706  000170  6059               	cpfslt	_IR_DataPlace,c
  6707  000172  D025               	goto	i1l5394
  6708                           
  6709                           ;INTERRUPTS.c: 211: {
  6710                           ;INTERRUPTS.c: 212: IR_DataTiming[IR_DataPlace] = IRtemp;
  6711  000174  5059               	movf	_IR_DataPlace,w,c
  6712  000176  0D02               	mullw	2
  6713  000178  0E00               	movlw	low _IR_DataTiming
  6714  00017A  24F3               	addwf	prodl,w,c
  6715  00017C  6ED9               	movwf	fsr2l,c
  6716  00017E  0E03               	movlw	high _IR_DataTiming
  6717  000180  20F4               	addwfc	prodh,w,c
  6718  000182  6EDA               	movwf	fsr2h,c
  6719  000184  C046  FFDE         	movff	low_isr@IRtemp,postinc2
  6720  000188  C047  FFDD         	movff	low_isr@IRtemp+1,postdec2
  6721                           
  6722                           ;INTERRUPTS.c: 213: IR_DataPlace++;
  6723  00018C  2A59               	incf	_IR_DataPlace,f,c
  6724                           
  6725                           ;INTERRUPTS.c: 214: if(System_State == 8)
  6726  00018E  0E08               	movlw	8
  6727  000190  0100               	movlb	0	; () banked
  6728  000192  19CE               	xorwf	_System_State& (0+255),w,b
  6729  000194  A4D8               	btfss	status,2,c
  6730  000196  D019               	goto	i1l5396
  6731                           
  6732                           ; BSR set to: 0
  6733                           ;INTERRUPTS.c: 215: {
  6734                           ;INTERRUPTS.c: 216: if(IR_DataPlace >= IR_CodeSize)
  6735  000198  5058               	movf	_IR_CodeSize,w,c
  6736  00019A  5C59               	subwf	_IR_DataPlace,w,c
  6737  00019C  A0D8               	btfss	status,0,c
  6738  00019E  D015               	goto	i1l5396
  6739                           
  6740                           ; BSR set to: 0
  6741                           ;INTERRUPTS.c: 217: {
  6742                           ;INTERRUPTS.c: 218: if(!IR_Data)
  6743  0001A0  0100               	movlb	0	; () banked
  6744  0001A2  51C3               	movf	_IR_Data& (0+255),w,b	;volatile
  6745  0001A4  A4D8               	btfss	status,2,c
  6746  0001A6  D005               	goto	i1l5390
  6747                           
  6748                           ; BSR set to: 0
  6749                           ;INTERRUPTS.c: 219: {
  6750                           ;INTERRUPTS.c: 220: IR_Data = IR_CheckCode();
  6751  0001A8  EC5C  F001         	call	_IR_CheckCode	;wreg free
  6752  0001AC  0100               	movlb	0	; () banked
  6753  0001AE  6FC3               	movwf	_IR_Data& (0+255),b	;volatile
  6754  0001B0  D000               	goto	i1l5390
  6755  0001B2                     i1l5390:
  6756                           
  6757                           ; BSR set to: 0
  6758                           ;INTERRUPTS.c: 221: }
  6759                           ;INTERRUPTS.c: 222: TMR_Timer1(0);
  6760  0001B2  0E00               	movlw	0
  6761  0001B4  ECA3  F010         	call	i1_TMR_Timer1
  6762                           
  6763                           ;INTERRUPTS.c: 223: IR_ResetData();
  6764  0001B8  ECDC  F010         	call	_IR_ResetData	;wreg free
  6765                           
  6766                           ;INTERRUPTS.c: 224: }
  6767                           ;INTERRUPTS.c: 225: }
  6768                           ;INTERRUPTS.c: 226: }
  6769  0001BC  D006               	goto	i1l5396
  6770  0001BE                     i1l5394:
  6771                           
  6772                           ;INTERRUPTS.c: 227: else
  6773                           ;INTERRUPTS.c: 228: {
  6774                           ;INTERRUPTS.c: 230: TMR_Timer1(0);
  6775  0001BE  0E00               	movlw	0
  6776  0001C0  ECA3  F010         	call	i1_TMR_Timer1
  6777                           
  6778                           ;INTERRUPTS.c: 231: IR_ResetData();
  6779  0001C4  ECDC  F010         	call	_IR_ResetData	;wreg free
  6780  0001C8  D000               	goto	i1l5396
  6781  0001CA                     i1l5396:
  6782                           
  6783                           ;INTERRUPTS.c: 232: }
  6784                           ;INTERRUPTS.c: 233: }
  6785                           ;INTERRUPTS.c: 234: }
  6786                           ;INTERRUPTS.c: 235: IRChange = 0;
  6787  0001CA  0E00               	movlw	0
  6788  0001CC  6E56               	movwf	_IRChange,c
  6789                           
  6790                           ;INTERRUPTS.c: 236: IR_ReadReceiver();
  6791  0001CE  ECF7  F00D         	call	i1_IR_ReadReceiver	;wreg free
  6792                           
  6793                           ;INTERRUPTS.c: 237: IR_ReadReceiver();
  6794  0001D2  ECF7  F00D         	call	i1_IR_ReadReceiver	;wreg free
  6795                           
  6796                           ;INTERRUPTS.c: 238: }
  6797  0001D6  D002               	goto	i1l205
  6798  0001D8                     i1l206:
  6799                           
  6800                           ;INTERRUPTS.c: 239: else
  6801                           ;INTERRUPTS.c: 240: {
  6802                           ;INTERRUPTS.c: 242: __nop();
  6803  0001D8  F000               	nop	
  6804  0001DA  D000               	goto	i1l205
  6805  0001DC                     i1l205:
  6806                           
  6807                           ;INTERRUPTS.c: 243: }
  6808                           ;INTERRUPTS.c: 244: INTCONbits.RBIF = 0;
  6809  0001DC  90F2               	bcf	intcon,0,c	;volatile
  6810                           
  6811                           ;INTERRUPTS.c: 245: }
  6812  0001DE  D047               	goto	i1l236
  6813  0001E0                     i1l197:
  6814                           
  6815                           ;INTERRUPTS.c: 246: else if(PIR1bits.TMR2IF)
  6816  0001E0  A29E               	btfss	3998,1,c	;volatile
  6817  0001E2  D023               	goto	i1l222
  6818                           
  6819                           ;INTERRUPTS.c: 247: {
  6820                           ;INTERRUPTS.c: 249: if(Timer2PostCount >= Timer2Post)
  6821  0001E4  504F               	movf	_Timer2Post,w,c
  6822  0001E6  5C51               	subwf	_Timer2PostCount,w,c
  6823  0001E8  5050               	movf	_Timer2Post+1,w,c
  6824  0001EA  5852               	subwfb	_Timer2PostCount+1,w,c
  6825  0001EC  A0D8               	btfss	status,0,c
  6826  0001EE  D018               	goto	i1l5416
  6827                           
  6828                           ;INTERRUPTS.c: 250: {
  6829                           ;INTERRUPTS.c: 251: TMR_Timer2(0);
  6830  0001F0  0E00               	movlw	0
  6831  0001F2  EC91  F010         	call	i1_TMR_Timer2
  6832                           
  6833                           ;INTERRUPTS.c: 252: if(Timer2Use == 17)
  6834  0001F6  0E11               	movlw	17
  6835  0001F8  185A               	xorwf	_Timer2Use,w,c
  6836  0001FA  A4D8               	btfss	status,2,c
  6837  0001FC  D002               	goto	i1l5410
  6838                           
  6839                           ;INTERRUPTS.c: 253: {
  6840                           ;INTERRUPTS.c: 255: System_State = 10;
  6841  0001FE  0E0A               	movlw	10
  6842  000200  D005               	goto	L2
  6843  000202                     i1l5410:
  6844                           
  6845                           ;INTERRUPTS.c: 258: else if(Timer2Use == 18)
  6846  000202  0E12               	movlw	18
  6847  000204  185A               	xorwf	_Timer2Use,w,c
  6848  000206  A4D8               	btfss	status,2,c
  6849  000208  D007               	goto	i1l5414
  6850                           
  6851                           ;INTERRUPTS.c: 259: {
  6852                           ;INTERRUPTS.c: 260: System_State = 8;
  6853  00020A  0E08               	movlw	8
  6854  00020C                     L2:
  6855  00020C  0100               	movlb	0	; () banked
  6856  00020E  6FCE               	movwf	_System_State& (0+255),b
  6857                           
  6858                           ;INTERRUPTS.c: 261: System_State_Change = 1;
  6859  000210  0E01               	movlw	1
  6860  000212  0100               	movlb	0	; () banked
  6861  000214  6FC8               	movwf	_System_State_Change& (0+255),b
  6862                           
  6863                           ;INTERRUPTS.c: 262: }
  6864  000216  D007               	goto	i1l5418
  6865  000218                     i1l5414:
  6866                           
  6867                           ;INTERRUPTS.c: 263: else
  6868                           ;INTERRUPTS.c: 264: {
  6869                           ;INTERRUPTS.c: 265: BUT_IR_PinChangeInt(1);
  6870  000218  0E01               	movlw	1
  6871  00021A  EC88  F010         	call	i1_BUT_IR_PinChangeInt
  6872                           
  6873                           ;INTERRUPTS.c: 266: }
  6874                           ;INTERRUPTS.c: 267: }
  6875  00021E  D003               	goto	i1l5418
  6876  000220                     i1l5416:
  6877                           
  6878                           ;INTERRUPTS.c: 268: else
  6879                           ;INTERRUPTS.c: 269: {
  6880                           ;INTERRUPTS.c: 270: Timer2PostCount++;
  6881  000220  4A51               	infsnz	_Timer2PostCount,f,c
  6882  000222  2A52               	incf	_Timer2PostCount+1,f,c
  6883  000224  D000               	goto	i1l5418
  6884  000226                     i1l5418:
  6885                           
  6886                           ;INTERRUPTS.c: 271: }
  6887                           ;INTERRUPTS.c: 272: PIR1bits.TMR2IF = 0;
  6888  000226  929E               	bcf	3998,1,c	;volatile
  6889                           
  6890                           ;INTERRUPTS.c: 273: }
  6891  000228  D022               	goto	i1l236
  6892  00022A                     i1l222:
  6893                           
  6894                           ;INTERRUPTS.c: 274: else if(PIR1bits.ADIF)
  6895  00022A  AC9E               	btfss	3998,6,c	;volatile
  6896  00022C  D004               	goto	i1l230
  6897                           
  6898                           ;INTERRUPTS.c: 275: {
  6899                           ;INTERRUPTS.c: 277: ADC_CalculateVoltage();
  6900  00022E  EC5C  F009         	call	_ADC_CalculateVoltage	;wreg free
  6901                           
  6902                           ;INTERRUPTS.c: 278: PIR1bits.ADIF = 0;
  6903  000232  9C9E               	bcf	3998,6,c	;volatile
  6904                           
  6905                           ;INTERRUPTS.c: 279: }
  6906  000234  D01C               	goto	i1l236
  6907  000236                     i1l230:
  6908                           
  6909                           ;INTERRUPTS.c: 280: else if(PIR1bits.TMR1IF)
  6910  000236  A09E               	btfss	3998,0,c	;volatile
  6911  000238  D018               	goto	i1l232
  6912                           
  6913                           ;INTERRUPTS.c: 281: {
  6914                           ;INTERRUPTS.c: 283: TMR_Timer1(0);
  6915  00023A  0E00               	movlw	0
  6916  00023C  ECA3  F010         	call	i1_TMR_Timer1
  6917                           
  6918                           ;INTERRUPTS.c: 284: if(System_State == 10)
  6919  000240  0E0A               	movlw	10
  6920  000242  0100               	movlb	0	; () banked
  6921  000244  19CE               	xorwf	_System_State& (0+255),w,b
  6922  000246  A4D8               	btfss	status,2,c
  6923  000248  D008               	goto	i1l5432
  6924                           
  6925                           ; BSR set to: 0
  6926                           ;INTERRUPTS.c: 285: {
  6927                           ;INTERRUPTS.c: 286: if(IR_DataPlace >= 40)
  6928  00024A  0E27               	movlw	39
  6929  00024C  6459               	cpfsgt	_IR_DataPlace,c
  6930  00024E  D005               	goto	i1l5432
  6931                           
  6932                           ; BSR set to: 0
  6933                           ;INTERRUPTS.c: 287: {
  6934                           ;INTERRUPTS.c: 289: IR_Data = IR_CheckCode();
  6935  000250  EC5C  F001         	call	_IR_CheckCode	;wreg free
  6936  000254  0100               	movlb	0	; () banked
  6937  000256  6FC3               	movwf	_IR_Data& (0+255),b	;volatile
  6938                           
  6939                           ; BSR set to: 0
  6940  000258  D000               	goto	i1l5432
  6941  00025A                     i1l5432:
  6942                           
  6943                           ; BSR set to: 0
  6944                           ;INTERRUPTS.c: 290: }
  6945                           ;INTERRUPTS.c: 291: }
  6946                           ;INTERRUPTS.c: 292: TMR_ResetTimer1();
  6947  00025A  EC09  F00F         	call	i1_TMR_ResetTimer1	;wreg free
  6948                           
  6949                           ;INTERRUPTS.c: 293: IR_ResetData();
  6950  00025E  ECDC  F010         	call	_IR_ResetData	;wreg free
  6951                           
  6952                           ;INTERRUPTS.c: 294: IR_CleanBuffer();
  6953  000262  EC69  F010         	call	_IR_CleanBuffer	;wreg free
  6954                           
  6955                           ;INTERRUPTS.c: 295: PIR1bits.TMR1IF = 0;
  6956  000266  909E               	bcf	3998,0,c	;volatile
  6957                           
  6958                           ;INTERRUPTS.c: 296: }
  6959  000268  D002               	goto	i1l236
  6960  00026A                     i1l232:
  6961                           
  6962                           ;INTERRUPTS.c: 297: else
  6963                           ;INTERRUPTS.c: 298: {
  6964                           ;INTERRUPTS.c: 300: __nop();
  6965  00026A  F000               	nop	
  6966  00026C  D000               	goto	i1l236
  6967  00026E                     i1l236:
  6968  00026E  C043  FFF5         	movff	??_low_isr+16,tablat
  6969  000272  C042  FFF8         	movff	??_low_isr+15,tblptru
  6970  000276  C041  FFF7         	movff	??_low_isr+14,tblptrh
  6971  00027A  C040  FFF6         	movff	??_low_isr+13,tblptrl
  6972  00027E  C03F  FFF4         	movff	??_low_isr+12,prodh
  6973  000282  C03E  FFF3         	movff	??_low_isr+11,prodl
  6974  000286  C03D  FFDA         	movff	??_low_isr+10,fsr2h
  6975  00028A  C03C  FFD9         	movff	??_low_isr+9,fsr2l
  6976  00028E  C03B  FFE2         	movff	??_low_isr+8,fsr1h
  6977  000292  C03A  FFE1         	movff	??_low_isr+7,fsr1l
  6978  000296  C039  FFEA         	movff	??_low_isr+6,fsr0h
  6979  00029A  C038  FFE9         	movff	??_low_isr+5,fsr0l
  6980  00029E  C037  FFFB         	movff	??_low_isr+4,pclatu
  6981  0002A2  C036  FFFA         	movff	??_low_isr+3,pclath
  6982  0002A6  C035  FFE0         	movff	??_low_isr+2,bsr
  6983  0002AA  C034  FFE8         	movff	??_low_isr+1,wreg
  6984  0002AE  C033  FFD8         	movff	??_low_isr,status
  6985  0002B2  0010               	retfie	
  6986  0002B4                     __end_of_low_isr:
  6987                           	opt stack 0
  6988                           pclatu	equ	0xFFB
  6989                           pclath	equ	0xFFA
  6990                           tblptru	equ	0xFF8
  6991                           tblptrh	equ	0xFF7
  6992                           tblptrl	equ	0xFF6
  6993                           tablat	equ	0xFF5
  6994                           prodh	equ	0xFF4
  6995                           prodl	equ	0xFF3
  6996                           intcon	equ	0xFF2
  6997                           intcon2	equ	0xFF1
  6998                           intcon3	equ	0xFF0
  6999                           postinc0	equ	0xFEE
  7000                           fsr0h	equ	0xFEA
  7001                           fsr0l	equ	0xFE9
  7002                           wreg	equ	0xFE8
  7003                           postdec1	equ	0xFE5
  7004                           fsr1h	equ	0xFE2
  7005                           fsr1l	equ	0xFE1
  7006                           bsr	equ	0xFE0
  7007                           postinc2	equ	0xFDE
  7008                           postdec2	equ	0xFDD
  7009                           fsr2h	equ	0xFDA
  7010                           fsr2l	equ	0xFD9
  7011                           status	equ	0xFD8
  7012                           
  7013 ;; *************** function i1_IR_ReadReceiver *****************
  7014 ;; Defined at:
  7015 ;;		line 79 in file "IR.c"
  7016 ;; Parameters:    Size  Location     Type
  7017 ;;		None
  7018 ;; Auto vars:     Size  Location     Type
  7019 ;;  IR_ReadRecei    1    0[COMRAM] unsigned char 
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  1    wreg      unsigned char 
  7022 ;; Registers used:
  7023 ;;		wreg, status,2, status,0
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/0
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7029 ;;      Params:         0       0       0       0       0
  7030 ;;      Locals:         1       0       0       0       0
  7031 ;;      Temps:          0       0       0       0       0
  7032 ;;      Totals:         1       0       0       0       0
  7033 ;;Total ram usage:        1 bytes
  7034 ;; Hardware stack levels used:    1
  7035 ;; Hardware stack levels required when called:    4
  7036 ;; This function calls:
  7037 ;;		Nothing
  7038 ;; This function is called by:
  7039 ;;		_low_isr
  7040 ;; This function uses a non-reentrant model
  7041 ;;
  7042                           
  7043                           	psect	text50
  7044  001BEE                     __ptext50:
  7045                           	opt stack 0
  7046  001BEE                     i1_IR_ReadReceiver:
  7047                           	opt stack 19
  7048                           
  7049                           ;IR.c: 81: unsigned char value = PORTB;
  7050                           
  7051                           ;incstack = 0
  7052  001BEE  CF81 F001          	movff	3969,i1IR_ReadReceiver@value	;volatile
  7053                           
  7054                           ;IR.c: 83: if(value & 0x10)
  7055  001BF2  A801               	btfss	i1IR_ReadReceiver@value,4,c
  7056  001BF4  D00B               	goto	i1l5134
  7057                           
  7058                           ;IR.c: 84: {
  7059                           ;IR.c: 85: if(IRValue_prev == 0)
  7060  001BF6  0100               	movlb	0	; () banked
  7061  001BF8  51C2               	movf	_IRValue_prev& (0+255),w,b
  7062  001BFA  A4D8               	btfss	status,2,c
  7063  001BFC  D002               	goto	i1l481
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;IR.c: 86: {
  7067                           ;IR.c: 87: IRChange = 1;
  7068  001BFE  0E01               	movlw	1
  7069  001C00  6E56               	movwf	_IRChange,c
  7070  001C02                     i1l481:
  7071                           
  7072                           ; BSR set to: 0
  7073                           ;IR.c: 88: }
  7074                           ;IR.c: 89: IRValue_prev = 1;
  7075  001C02  0E01               	movlw	1
  7076  001C04  0100               	movlb	0	; () banked
  7077  001C06  6FC2               	movwf	_IRValue_prev& (0+255),b
  7078                           
  7079                           ; BSR set to: 0
  7080                           ;IR.c: 90: return 1;
  7081  001C08  0E01               	movlw	1
  7082                           
  7083                           ; BSR set to: 0
  7084  001C0A  0012               	return	
  7085  001C0C                     i1l5134:
  7086                           
  7087                           ;IR.c: 91: }
  7088                           ;IR.c: 93: if(IRValue_prev == 1)
  7089  001C0C  0100               	movlb	0	; () banked
  7090  001C0E  05C2               	decf	_IRValue_prev& (0+255),w,b
  7091  001C10  A4D8               	btfss	status,2,c
  7092  001C12  D002               	goto	i1l483
  7093                           
  7094                           ; BSR set to: 0
  7095                           ;IR.c: 94: {
  7096                           ;IR.c: 95: IRChange = 1;
  7097  001C14  0E01               	movlw	1
  7098  001C16  6E56               	movwf	_IRChange,c
  7099  001C18                     i1l483:
  7100                           
  7101                           ; BSR set to: 0
  7102                           ;IR.c: 96: }
  7103                           ;IR.c: 97: IRValue_prev = 0;
  7104  001C18  0E00               	movlw	0
  7105  001C1A  0100               	movlb	0	; () banked
  7106  001C1C  6FC2               	movwf	_IRValue_prev& (0+255),b
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;IR.c: 98: return 0;
  7110  001C1E  0E00               	movlw	0
  7111  001C20  0012               	return	
  7112                           
  7113                           ; BSR set to: 0
  7114                           
  7115                           ; BSR set to: 0
  7116  001C22  0012               	return		;funcret
  7117  001C24                     __end_ofi1_IR_ReadReceiver:
  7118                           	opt stack 0
  7119                           pclatu	equ	0xFFB
  7120                           pclath	equ	0xFFA
  7121                           tblptru	equ	0xFF8
  7122                           tblptrh	equ	0xFF7
  7123                           tblptrl	equ	0xFF6
  7124                           tablat	equ	0xFF5
  7125                           prodh	equ	0xFF4
  7126                           prodl	equ	0xFF3
  7127                           intcon	equ	0xFF2
  7128                           intcon2	equ	0xFF1
  7129                           intcon3	equ	0xFF0
  7130                           postinc0	equ	0xFEE
  7131                           fsr0h	equ	0xFEA
  7132                           fsr0l	equ	0xFE9
  7133                           wreg	equ	0xFE8
  7134                           postdec1	equ	0xFE5
  7135                           fsr1h	equ	0xFE2
  7136                           fsr1l	equ	0xFE1
  7137                           bsr	equ	0xFE0
  7138                           postinc2	equ	0xFDE
  7139                           postdec2	equ	0xFDD
  7140                           fsr2h	equ	0xFDA
  7141                           fsr2l	equ	0xFD9
  7142                           status	equ	0xFD8
  7143                           
  7144 ;; *************** function i1_BUT_ReadButton *****************
  7145 ;; Defined at:
  7146 ;;		line 92 in file "BUTTON.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;		None
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;  BUT_ReadButt    1    0[COMRAM] unsigned char 
  7151 ;; Return value:  Size  Location     Type
  7152 ;;                  1    wreg      unsigned char 
  7153 ;; Registers used:
  7154 ;;		wreg, status,2, status,0
  7155 ;; Tracked objects:
  7156 ;;		On entry : 0/0
  7157 ;;		On exit  : 0/0
  7158 ;;		Unchanged: 0/0
  7159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7160 ;;      Params:         0       0       0       0       0
  7161 ;;      Locals:         1       0       0       0       0
  7162 ;;      Temps:          0       0       0       0       0
  7163 ;;      Totals:         1       0       0       0       0
  7164 ;;Total ram usage:        1 bytes
  7165 ;; Hardware stack levels used:    1
  7166 ;; Hardware stack levels required when called:    4
  7167 ;; This function calls:
  7168 ;;		Nothing
  7169 ;; This function is called by:
  7170 ;;		_low_isr
  7171 ;; This function uses a non-reentrant model
  7172 ;;
  7173                           
  7174                           	psect	text51
  7175  001C24                     __ptext51:
  7176                           	opt stack 0
  7177  001C24                     i1_BUT_ReadButton:
  7178                           	opt stack 19
  7179                           
  7180                           ;BUTTON.c: 94: unsigned char value = PORTB;
  7181                           
  7182                           ; BSR set to: 0
  7183                           ;incstack = 0
  7184  001C24  CF81 F001          	movff	3969,i1BUT_ReadButton@value	;volatile
  7185                           
  7186                           ;BUTTON.c: 95: if((value & 0x20) == 0)
  7187  001C28  BA01               	btfsc	i1BUT_ReadButton@value,5,c
  7188  001C2A  D00B               	goto	i1l5156
  7189                           
  7190                           ;BUTTON.c: 96: {
  7191                           ;BUTTON.c: 98: if(ButtonValue_prev == 0)
  7192  001C2C  0100               	movlb	0	; () banked
  7193  001C2E  51BF               	movf	_ButtonValue_prev& (0+255),w,b
  7194  001C30  A4D8               	btfss	status,2,c
  7195  001C32  D002               	goto	i1l930
  7196                           
  7197                           ; BSR set to: 0
  7198                           ;BUTTON.c: 99: {
  7199                           ;BUTTON.c: 100: ButtonChange = 1;
  7200  001C34  0E01               	movlw	1
  7201  001C36  6E55               	movwf	_ButtonChange,c
  7202  001C38                     i1l930:
  7203                           
  7204                           ; BSR set to: 0
  7205                           ;BUTTON.c: 101: }
  7206                           ;BUTTON.c: 102: ButtonValue_prev = 1;
  7207  001C38  0E01               	movlw	1
  7208  001C3A  0100               	movlb	0	; () banked
  7209  001C3C  6FBF               	movwf	_ButtonValue_prev& (0+255),b
  7210                           
  7211                           ; BSR set to: 0
  7212                           ;BUTTON.c: 103: return 1;
  7213  001C3E  0E01               	movlw	1
  7214                           
  7215                           ; BSR set to: 0
  7216  001C40  0012               	return	
  7217  001C42                     i1l5156:
  7218                           
  7219                           ;BUTTON.c: 104: }
  7220                           ;BUTTON.c: 107: if(ButtonValue_prev == 1)
  7221  001C42  0100               	movlb	0	; () banked
  7222  001C44  05BF               	decf	_ButtonValue_prev& (0+255),w,b
  7223  001C46  A4D8               	btfss	status,2,c
  7224  001C48  D002               	goto	i1l932
  7225                           
  7226                           ; BSR set to: 0
  7227                           ;BUTTON.c: 108: {
  7228                           ;BUTTON.c: 109: ButtonChange = 1;
  7229  001C4A  0E01               	movlw	1
  7230  001C4C  6E55               	movwf	_ButtonChange,c
  7231  001C4E                     i1l932:
  7232                           
  7233                           ; BSR set to: 0
  7234                           ;BUTTON.c: 110: }
  7235                           ;BUTTON.c: 111: ButtonValue_prev = 0;
  7236  001C4E  0E00               	movlw	0
  7237  001C50  0100               	movlb	0	; () banked
  7238  001C52  6FBF               	movwf	_ButtonValue_prev& (0+255),b
  7239                           
  7240                           ; BSR set to: 0
  7241                           ;BUTTON.c: 112: return 0;
  7242  001C54  0E00               	movlw	0
  7243  001C56  0012               	return	
  7244                           
  7245                           ; BSR set to: 0
  7246                           
  7247                           ; BSR set to: 0
  7248  001C58  0012               	return		;funcret
  7249  001C5A                     __end_ofi1_BUT_ReadButton:
  7250                           	opt stack 0
  7251                           pclatu	equ	0xFFB
  7252                           pclath	equ	0xFFA
  7253                           tblptru	equ	0xFF8
  7254                           tblptrh	equ	0xFF7
  7255                           tblptrl	equ	0xFF6
  7256                           tablat	equ	0xFF5
  7257                           prodh	equ	0xFF4
  7258                           prodl	equ	0xFF3
  7259                           intcon	equ	0xFF2
  7260                           intcon2	equ	0xFF1
  7261                           intcon3	equ	0xFF0
  7262                           postinc0	equ	0xFEE
  7263                           fsr0h	equ	0xFEA
  7264                           fsr0l	equ	0xFE9
  7265                           wreg	equ	0xFE8
  7266                           postdec1	equ	0xFE5
  7267                           fsr1h	equ	0xFE2
  7268                           fsr1l	equ	0xFE1
  7269                           bsr	equ	0xFE0
  7270                           postinc2	equ	0xFDE
  7271                           postdec2	equ	0xFDD
  7272                           fsr2h	equ	0xFDA
  7273                           fsr2l	equ	0xFD9
  7274                           status	equ	0xFD8
  7275                           
  7276 ;; *************** function i1_BUT_IR_PinChangeInt *****************
  7277 ;; Defined at:
  7278 ;;		line 55 in file "BUTTON.c"
  7279 ;; Parameters:    Size  Location     Type
  7280 ;;  state           1    wreg     unsigned char 
  7281 ;; Auto vars:     Size  Location     Type
  7282 ;;  state           1    0[COMRAM] unsigned char 
  7283 ;; Return value:  Size  Location     Type
  7284 ;;		None               void
  7285 ;; Registers used:
  7286 ;;		wreg, status,2
  7287 ;; Tracked objects:
  7288 ;;		On entry : 0/0
  7289 ;;		On exit  : 0/0
  7290 ;;		Unchanged: 0/0
  7291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7292 ;;      Params:         0       0       0       0       0
  7293 ;;      Locals:         1       0       0       0       0
  7294 ;;      Temps:          0       0       0       0       0
  7295 ;;      Totals:         1       0       0       0       0
  7296 ;;Total ram usage:        1 bytes
  7297 ;; Hardware stack levels used:    1
  7298 ;; Hardware stack levels required when called:    4
  7299 ;; This function calls:
  7300 ;;		Nothing
  7301 ;; This function is called by:
  7302 ;;		_low_isr
  7303 ;; This function uses a non-reentrant model
  7304 ;;
  7305                           
  7306                           	psect	text52
  7307  002110                     __ptext52:
  7308                           	opt stack 0
  7309  002110                     i1_BUT_IR_PinChangeInt:
  7310                           	opt stack 19
  7311                           
  7312                           ; BSR set to: 0
  7313                           ;incstack = 0
  7314                           ;i1BUT_IR_PinChangeInt@state stored from wreg
  7315  002110  6E01               	movwf	i1BUT_IR_PinChangeInt@state,c
  7316                           
  7317                           ;BUTTON.c: 57: if(state)
  7318  002112  5001               	movf	i1BUT_IR_PinChangeInt@state,w,c
  7319  002114  B4D8               	btfsc	status,2,c
  7320  002116  D002               	goto	i1l921
  7321                           
  7322                           ;BUTTON.c: 58: {
  7323                           ;BUTTON.c: 60: INTCONbits.RBIE = 1;
  7324  002118  86F2               	bsf	intcon,3,c	;volatile
  7325                           
  7326                           ;BUTTON.c: 61: }
  7327  00211A  0012               	return	
  7328  00211C                     i1l921:
  7329                           
  7330                           ;BUTTON.c: 62: else
  7331                           ;BUTTON.c: 63: {
  7332                           ;BUTTON.c: 65: INTCONbits.RBIE = 0;
  7333  00211C  96F2               	bcf	intcon,3,c	;volatile
  7334  00211E  0012               	return	
  7335  002120  0012               	return		;funcret
  7336  002122                     __end_ofi1_BUT_IR_PinChangeInt:
  7337                           	opt stack 0
  7338                           pclatu	equ	0xFFB
  7339                           pclath	equ	0xFFA
  7340                           tblptru	equ	0xFF8
  7341                           tblptrh	equ	0xFF7
  7342                           tblptrl	equ	0xFF6
  7343                           tablat	equ	0xFF5
  7344                           prodh	equ	0xFF4
  7345                           prodl	equ	0xFF3
  7346                           intcon	equ	0xFF2
  7347                           intcon2	equ	0xFF1
  7348                           intcon3	equ	0xFF0
  7349                           postinc0	equ	0xFEE
  7350                           fsr0h	equ	0xFEA
  7351                           fsr0l	equ	0xFE9
  7352                           wreg	equ	0xFE8
  7353                           postdec1	equ	0xFE5
  7354                           fsr1h	equ	0xFE2
  7355                           fsr1l	equ	0xFE1
  7356                           bsr	equ	0xFE0
  7357                           postinc2	equ	0xFDE
  7358                           postdec2	equ	0xFDD
  7359                           fsr2h	equ	0xFDA
  7360                           fsr2l	equ	0xFD9
  7361                           status	equ	0xFD8
  7362                           
  7363 ;; *************** function _TMR_Timer2Start *****************
  7364 ;; Defined at:
  7365 ;;		line 387 in file "TIMERS.c"
  7366 ;; Parameters:    Size  Location     Type
  7367 ;;  time            2    2[COMRAM] unsigned int 
  7368 ;; Auto vars:     Size  Location     Type
  7369 ;;		None
  7370 ;; Return value:  Size  Location     Type
  7371 ;;		None               void
  7372 ;; Registers used:
  7373 ;;		wreg, status,2, cstack
  7374 ;; Tracked objects:
  7375 ;;		On entry : 0/0
  7376 ;;		On exit  : 0/0
  7377 ;;		Unchanged: 0/0
  7378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7379 ;;      Params:         2       0       0       0       0
  7380 ;;      Locals:         0       0       0       0       0
  7381 ;;      Temps:          0       0       0       0       0
  7382 ;;      Totals:         2       0       0       0       0
  7383 ;;Total ram usage:        2 bytes
  7384 ;; Hardware stack levels used:    1
  7385 ;; Hardware stack levels required when called:    6
  7386 ;; This function calls:
  7387 ;;		_TMR_ResetTimer2
  7388 ;;		i1_TMR_Timer2
  7389 ;; This function is called by:
  7390 ;;		_low_isr
  7391 ;; This function uses a non-reentrant model
  7392 ;;
  7393                           
  7394                           	psect	text53
  7395  001F52                     __ptext53:
  7396                           	opt stack 0
  7397  001F52                     _TMR_Timer2Start:
  7398                           	opt stack 17
  7399                           
  7400                           ;TIMERS.c: 389: TMR_Timer2(0);
  7401                           
  7402                           ;incstack = 0
  7403  001F52  0E00               	movlw	0
  7404  001F54  EC91  F010         	call	i1_TMR_Timer2
  7405                           
  7406                           ;TIMERS.c: 390: Timer2Post = time;
  7407  001F58  C003  F04F         	movff	TMR_Timer2Start@time,_Timer2Post
  7408  001F5C  C004  F050         	movff	TMR_Timer2Start@time+1,_Timer2Post+1
  7409                           
  7410                           ;TIMERS.c: 391: TMR_ResetTimer2();
  7411  001F60  ECCD  F00E         	call	_TMR_ResetTimer2	;wreg free
  7412                           
  7413                           ;TIMERS.c: 392: TMR_Timer2(1);
  7414  001F64  0E01               	movlw	1
  7415  001F66  EC91  F010         	call	i1_TMR_Timer2
  7416  001F6A  0012               	return		;funcret
  7417  001F6C                     __end_of_TMR_Timer2Start:
  7418                           	opt stack 0
  7419                           pclatu	equ	0xFFB
  7420                           pclath	equ	0xFFA
  7421                           tblptru	equ	0xFF8
  7422                           tblptrh	equ	0xFF7
  7423                           tblptrl	equ	0xFF6
  7424                           tablat	equ	0xFF5
  7425                           prodh	equ	0xFF4
  7426                           prodl	equ	0xFF3
  7427                           intcon	equ	0xFF2
  7428                           intcon2	equ	0xFF1
  7429                           intcon3	equ	0xFF0
  7430                           postinc0	equ	0xFEE
  7431                           fsr0h	equ	0xFEA
  7432                           fsr0l	equ	0xFE9
  7433                           wreg	equ	0xFE8
  7434                           postdec1	equ	0xFE5
  7435                           fsr1h	equ	0xFE2
  7436                           fsr1l	equ	0xFE1
  7437                           bsr	equ	0xFE0
  7438                           postinc2	equ	0xFDE
  7439                           postdec2	equ	0xFDD
  7440                           fsr2h	equ	0xFDA
  7441                           fsr2l	equ	0xFD9
  7442                           status	equ	0xFD8
  7443                           
  7444 ;; *************** function _TMR_ResetTimer2 *****************
  7445 ;; Defined at:
  7446 ;;		line 180 in file "TIMERS.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;		None
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;  TimerOn         1    1[COMRAM] unsigned char 
  7451 ;; Return value:  Size  Location     Type
  7452 ;;		None               void
  7453 ;; Registers used:
  7454 ;;		wreg, status,2, cstack
  7455 ;; Tracked objects:
  7456 ;;		On entry : 0/0
  7457 ;;		On exit  : 0/0
  7458 ;;		Unchanged: 0/0
  7459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7460 ;;      Params:         0       0       0       0       0
  7461 ;;      Locals:         1       0       0       0       0
  7462 ;;      Temps:          0       0       0       0       0
  7463 ;;      Totals:         1       0       0       0       0
  7464 ;;Total ram usage:        1 bytes
  7465 ;; Hardware stack levels used:    1
  7466 ;; Hardware stack levels required when called:    5
  7467 ;; This function calls:
  7468 ;;		i1_TMR_Timer2
  7469 ;; This function is called by:
  7470 ;;		_TMR_Timer2Start
  7471 ;; This function uses a non-reentrant model
  7472 ;;
  7473                           
  7474                           	psect	text54
  7475  001D9A                     __ptext54:
  7476                           	opt stack 0
  7477  001D9A                     _TMR_ResetTimer2:
  7478                           	opt stack 17
  7479                           
  7480                           ;TIMERS.c: 182: unsigned char TimerOn = T2CONbits.TMR2ON;
  7481                           
  7482                           ;incstack = 0
  7483  001D9A  0E00               	movlw	0
  7484  001D9C  B4CA               	btfsc	4042,2,c	;volatile
  7485  001D9E  0E01               	movlw	1
  7486  001DA0  6E02               	movwf	TMR_ResetTimer2@TimerOn,c
  7487                           
  7488                           ;TIMERS.c: 184: TMR_Timer2(0);
  7489  001DA2  0E00               	movlw	0
  7490  001DA4  EC91  F010         	call	i1_TMR_Timer2
  7491                           
  7492                           ;TIMERS.c: 185: Timer2PostCount = 0;
  7493  001DA8  0E00               	movlw	0
  7494  001DAA  6E52               	movwf	_Timer2PostCount+1,c
  7495  001DAC  0E00               	movlw	0
  7496  001DAE  6E51               	movwf	_Timer2PostCount,c
  7497                           
  7498                           ;TIMERS.c: 186: TMR2 = 0;
  7499  001DB0  0E00               	movlw	0
  7500  001DB2  6ECC               	movwf	4044,c	;volatile
  7501                           
  7502                           ;TIMERS.c: 187: if(TimerOn)
  7503  001DB4  5002               	movf	TMR_ResetTimer2@TimerOn,w,c
  7504  001DB6  B4D8               	btfsc	status,2,c
  7505  001DB8  0012               	return	
  7506                           
  7507                           ;TIMERS.c: 188: {
  7508                           ;TIMERS.c: 189: TMR_Timer2(1);
  7509  001DBA  0E01               	movlw	1
  7510  001DBC  EC91  F010         	call	i1_TMR_Timer2
  7511  001DC0  0012               	return	
  7512  001DC2  0012               	return		;funcret
  7513  001DC4                     __end_of_TMR_ResetTimer2:
  7514                           	opt stack 0
  7515                           pclatu	equ	0xFFB
  7516                           pclath	equ	0xFFA
  7517                           tblptru	equ	0xFF8
  7518                           tblptrh	equ	0xFF7
  7519                           tblptrl	equ	0xFF6
  7520                           tablat	equ	0xFF5
  7521                           prodh	equ	0xFF4
  7522                           prodl	equ	0xFF3
  7523                           intcon	equ	0xFF2
  7524                           intcon2	equ	0xFF1
  7525                           intcon3	equ	0xFF0
  7526                           postinc0	equ	0xFEE
  7527                           fsr0h	equ	0xFEA
  7528                           fsr0l	equ	0xFE9
  7529                           wreg	equ	0xFE8
  7530                           postdec1	equ	0xFE5
  7531                           fsr1h	equ	0xFE2
  7532                           fsr1l	equ	0xFE1
  7533                           bsr	equ	0xFE0
  7534                           postinc2	equ	0xFDE
  7535                           postdec2	equ	0xFDD
  7536                           fsr2h	equ	0xFDA
  7537                           fsr2l	equ	0xFD9
  7538                           status	equ	0xFD8
  7539                           
  7540 ;; *************** function i1_TMR_Timer2 *****************
  7541 ;; Defined at:
  7542 ;;		line 125 in file "TIMERS.c"
  7543 ;; Parameters:    Size  Location     Type
  7544 ;;  state           1    wreg     unsigned char 
  7545 ;; Auto vars:     Size  Location     Type
  7546 ;;  state           1    0[COMRAM] unsigned char 
  7547 ;; Return value:  Size  Location     Type
  7548 ;;		None               void
  7549 ;; Registers used:
  7550 ;;		wreg, status,2
  7551 ;; Tracked objects:
  7552 ;;		On entry : 0/0
  7553 ;;		On exit  : 0/0
  7554 ;;		Unchanged: 0/0
  7555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7556 ;;      Params:         0       0       0       0       0
  7557 ;;      Locals:         1       0       0       0       0
  7558 ;;      Temps:          0       0       0       0       0
  7559 ;;      Totals:         1       0       0       0       0
  7560 ;;Total ram usage:        1 bytes
  7561 ;; Hardware stack levels used:    1
  7562 ;; Hardware stack levels required when called:    4
  7563 ;; This function calls:
  7564 ;;		Nothing
  7565 ;; This function is called by:
  7566 ;;		_low_isr
  7567 ;;		_TMR_ResetTimer2
  7568 ;;		_TMR_Timer2Start
  7569 ;; This function uses a non-reentrant model
  7570 ;;
  7571                           
  7572                           	psect	text55
  7573  002122                     __ptext55:
  7574                           	opt stack 0
  7575  002122                     i1_TMR_Timer2:
  7576                           	opt stack 19
  7577                           
  7578                           ;incstack = 0
  7579                           ;i1TMR_Timer2@state stored from wreg
  7580  002122  6E01               	movwf	i1TMR_Timer2@state,c
  7581                           
  7582                           ;TIMERS.c: 127: if(state)
  7583  002124  5001               	movf	i1TMR_Timer2@state,w,c
  7584  002126  B4D8               	btfsc	status,2,c
  7585  002128  D002               	goto	i1l993
  7586                           
  7587                           ;TIMERS.c: 128: {
  7588                           ;TIMERS.c: 130: T2CONbits.TMR2ON = 1;
  7589  00212A  84CA               	bsf	4042,2,c	;volatile
  7590                           
  7591                           ;TIMERS.c: 131: }
  7592  00212C  0012               	return	
  7593  00212E                     i1l993:
  7594                           
  7595                           ;TIMERS.c: 132: else
  7596                           ;TIMERS.c: 133: {
  7597                           ;TIMERS.c: 135: T2CONbits.TMR2ON = 0;
  7598  00212E  94CA               	bcf	4042,2,c	;volatile
  7599  002130  0012               	return	
  7600  002132  0012               	return		;funcret
  7601  002134                     __end_ofi1_TMR_Timer2:
  7602                           	opt stack 0
  7603                           pclatu	equ	0xFFB
  7604                           pclath	equ	0xFFA
  7605                           tblptru	equ	0xFF8
  7606                           tblptrh	equ	0xFF7
  7607                           tblptrl	equ	0xFF6
  7608                           tablat	equ	0xFF5
  7609                           prodh	equ	0xFF4
  7610                           prodl	equ	0xFF3
  7611                           intcon	equ	0xFF2
  7612                           intcon2	equ	0xFF1
  7613                           intcon3	equ	0xFF0
  7614                           postinc0	equ	0xFEE
  7615                           fsr0h	equ	0xFEA
  7616                           fsr0l	equ	0xFE9
  7617                           wreg	equ	0xFE8
  7618                           postdec1	equ	0xFE5
  7619                           fsr1h	equ	0xFE2
  7620                           fsr1l	equ	0xFE1
  7621                           bsr	equ	0xFE0
  7622                           postinc2	equ	0xFDE
  7623                           postdec2	equ	0xFDD
  7624                           fsr2h	equ	0xFDA
  7625                           fsr2l	equ	0xFD9
  7626                           status	equ	0xFD8
  7627                           
  7628 ;; *************** function _TMR_Timer1Status *****************
  7629 ;; Defined at:
  7630 ;;		line 72 in file "TIMERS.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;		None
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;		None
  7635 ;; Return value:  Size  Location     Type
  7636 ;;                  1    wreg      unsigned char 
  7637 ;; Registers used:
  7638 ;;		wreg
  7639 ;; Tracked objects:
  7640 ;;		On entry : 0/0
  7641 ;;		On exit  : 0/0
  7642 ;;		Unchanged: 0/0
  7643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7644 ;;      Params:         0       0       0       0       0
  7645 ;;      Locals:         0       0       0       0       0
  7646 ;;      Temps:          0       0       0       0       0
  7647 ;;      Totals:         0       0       0       0       0
  7648 ;;Total ram usage:        0 bytes
  7649 ;; Hardware stack levels used:    1
  7650 ;; Hardware stack levels required when called:    4
  7651 ;; This function calls:
  7652 ;;		Nothing
  7653 ;; This function is called by:
  7654 ;;		_low_isr
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           	psect	text56
  7659  0021AA                     __ptext56:
  7660                           	opt stack 0
  7661  0021AA                     _TMR_Timer1Status:
  7662                           	opt stack 19
  7663                           
  7664                           ;TIMERS.c: 74: if(T1CONbits.TMR1ON)
  7665                           
  7666                           ;incstack = 0
  7667  0021AA  A0CD               	btfss	4045,0,c	;volatile
  7668  0021AC  D002               	goto	i1l5034
  7669                           
  7670                           ;TIMERS.c: 75: {
  7671                           ;TIMERS.c: 77: return 1;
  7672  0021AE  0E01               	movlw	1
  7673  0021B0  0012               	return	
  7674  0021B2                     i1l5034:
  7675                           
  7676                           ;TIMERS.c: 78: }
  7677                           ;TIMERS.c: 79: return 0;
  7678  0021B2  0E00               	movlw	0
  7679  0021B4  0012               	return	
  7680  0021B6  0012               	return		;funcret
  7681  0021B8                     __end_of_TMR_Timer1Status:
  7682                           	opt stack 0
  7683                           pclatu	equ	0xFFB
  7684                           pclath	equ	0xFFA
  7685                           tblptru	equ	0xFF8
  7686                           tblptrh	equ	0xFF7
  7687                           tblptrl	equ	0xFF6
  7688                           tablat	equ	0xFF5
  7689                           prodh	equ	0xFF4
  7690                           prodl	equ	0xFF3
  7691                           intcon	equ	0xFF2
  7692                           intcon2	equ	0xFF1
  7693                           intcon3	equ	0xFF0
  7694                           postinc0	equ	0xFEE
  7695                           fsr0h	equ	0xFEA
  7696                           fsr0l	equ	0xFE9
  7697                           wreg	equ	0xFE8
  7698                           postdec1	equ	0xFE5
  7699                           fsr1h	equ	0xFE2
  7700                           fsr1l	equ	0xFE1
  7701                           bsr	equ	0xFE0
  7702                           postinc2	equ	0xFDE
  7703                           postdec2	equ	0xFDD
  7704                           fsr2h	equ	0xFDA
  7705                           fsr2l	equ	0xFD9
  7706                           status	equ	0xFD8
  7707                           
  7708 ;; *************** function _TMR_Timer1Start *****************
  7709 ;; Defined at:
  7710 ;;		line 375 in file "TIMERS.c"
  7711 ;; Parameters:    Size  Location     Type
  7712 ;;		None
  7713 ;; Auto vars:     Size  Location     Type
  7714 ;;		None
  7715 ;; Return value:  Size  Location     Type
  7716 ;;		None               void
  7717 ;; Registers used:
  7718 ;;		wreg, status,2, cstack
  7719 ;; Tracked objects:
  7720 ;;		On entry : 0/0
  7721 ;;		On exit  : 0/0
  7722 ;;		Unchanged: 0/0
  7723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7724 ;;      Params:         0       0       0       0       0
  7725 ;;      Locals:         0       0       0       0       0
  7726 ;;      Temps:          0       0       0       0       0
  7727 ;;      Totals:         0       0       0       0       0
  7728 ;;Total ram usage:        0 bytes
  7729 ;; Hardware stack levels used:    1
  7730 ;; Hardware stack levels required when called:    6
  7731 ;; This function calls:
  7732 ;;		i1_TMR_ResetTimer1
  7733 ;;		i1_TMR_Timer1
  7734 ;; This function is called by:
  7735 ;;		_low_isr
  7736 ;; This function uses a non-reentrant model
  7737 ;;
  7738                           
  7739                           	psect	text57
  7740  002134                     __ptext57:
  7741                           	opt stack 0
  7742  002134                     _TMR_Timer1Start:
  7743                           	opt stack 17
  7744                           
  7745                           ;TIMERS.c: 377: TMR_Timer1(0);
  7746                           
  7747                           ;incstack = 0
  7748  002134  0E00               	movlw	0
  7749  002136  ECA3  F010         	call	i1_TMR_Timer1
  7750                           
  7751                           ;TIMERS.c: 378: TMR_ResetTimer1();
  7752  00213A  EC09  F00F         	call	i1_TMR_ResetTimer1	;wreg free
  7753                           
  7754                           ;TIMERS.c: 379: TMR_Timer1(1);
  7755  00213E  0E01               	movlw	1
  7756  002140  ECA3  F010         	call	i1_TMR_Timer1
  7757  002144  0012               	return		;funcret
  7758  002146                     __end_of_TMR_Timer1Start:
  7759                           	opt stack 0
  7760                           pclatu	equ	0xFFB
  7761                           pclath	equ	0xFFA
  7762                           tblptru	equ	0xFF8
  7763                           tblptrh	equ	0xFF7
  7764                           tblptrl	equ	0xFF6
  7765                           tablat	equ	0xFF5
  7766                           prodh	equ	0xFF4
  7767                           prodl	equ	0xFF3
  7768                           intcon	equ	0xFF2
  7769                           intcon2	equ	0xFF1
  7770                           intcon3	equ	0xFF0
  7771                           postinc0	equ	0xFEE
  7772                           fsr0h	equ	0xFEA
  7773                           fsr0l	equ	0xFE9
  7774                           wreg	equ	0xFE8
  7775                           postdec1	equ	0xFE5
  7776                           fsr1h	equ	0xFE2
  7777                           fsr1l	equ	0xFE1
  7778                           bsr	equ	0xFE0
  7779                           postinc2	equ	0xFDE
  7780                           postdec2	equ	0xFDD
  7781                           fsr2h	equ	0xFDA
  7782                           fsr2l	equ	0xFD9
  7783                           status	equ	0xFD8
  7784                           
  7785 ;; *************** function i1_TMR_ResetTimer1 *****************
  7786 ;; Defined at:
  7787 ;;		line 162 in file "TIMERS.c"
  7788 ;; Parameters:    Size  Location     Type
  7789 ;;		None
  7790 ;; Auto vars:     Size  Location     Type
  7791 ;;  TMR_ResetTim    1    1[COMRAM] unsigned char 
  7792 ;; Return value:  Size  Location     Type
  7793 ;;		None               void
  7794 ;; Registers used:
  7795 ;;		wreg, status,2, cstack
  7796 ;; Tracked objects:
  7797 ;;		On entry : 0/0
  7798 ;;		On exit  : 0/0
  7799 ;;		Unchanged: 0/0
  7800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7801 ;;      Params:         0       0       0       0       0
  7802 ;;      Locals:         1       0       0       0       0
  7803 ;;      Temps:          0       0       0       0       0
  7804 ;;      Totals:         1       0       0       0       0
  7805 ;;Total ram usage:        1 bytes
  7806 ;; Hardware stack levels used:    1
  7807 ;; Hardware stack levels required when called:    5
  7808 ;; This function calls:
  7809 ;;		i1_TMR_Timer1
  7810 ;; This function is called by:
  7811 ;;		_low_isr
  7812 ;;		_TMR_Timer1Start
  7813 ;; This function uses a non-reentrant model
  7814 ;;
  7815                           
  7816                           	psect	text58
  7817  001E12                     __ptext58:
  7818                           	opt stack 0
  7819  001E12                     i1_TMR_ResetTimer1:
  7820                           	opt stack 18
  7821                           
  7822                           ;TIMERS.c: 164: unsigned char TimerOn = T1CONbits.TMR1ON;
  7823                           
  7824                           ;incstack = 0
  7825  001E12  0E00               	movlw	0
  7826  001E14  B0CD               	btfsc	4045,0,c	;volatile
  7827  001E16  0E01               	movlw	1
  7828  001E18  6E02               	movwf	i1TMR_ResetTimer1@TimerOn,c
  7829                           
  7830                           ;TIMERS.c: 166: TMR_Timer1(0);
  7831  001E1A  0E00               	movlw	0
  7832  001E1C  ECA3  F010         	call	i1_TMR_Timer1
  7833                           
  7834                           ;TIMERS.c: 167: TMR1H = 0;
  7835  001E20  0E00               	movlw	0
  7836  001E22  6ECF               	movwf	4047,c	;volatile
  7837                           
  7838                           ;TIMERS.c: 168: TMR1L = 2;
  7839  001E24  0E02               	movlw	2
  7840  001E26  6ECE               	movwf	4046,c	;volatile
  7841                           
  7842                           ;TIMERS.c: 169: if(TimerOn)
  7843  001E28  5002               	movf	i1TMR_ResetTimer1@TimerOn,w,c
  7844  001E2A  B4D8               	btfsc	status,2,c
  7845  001E2C  0012               	return	
  7846                           
  7847                           ;TIMERS.c: 170: {
  7848                           ;TIMERS.c: 171: TMR_Timer1(1);
  7849  001E2E  0E01               	movlw	1
  7850  001E30  ECA3  F010         	call	i1_TMR_Timer1
  7851  001E34  0012               	return	
  7852  001E36  0012               	return		;funcret
  7853  001E38                     __end_ofi1_TMR_ResetTimer1:
  7854                           	opt stack 0
  7855                           pclatu	equ	0xFFB
  7856                           pclath	equ	0xFFA
  7857                           tblptru	equ	0xFF8
  7858                           tblptrh	equ	0xFF7
  7859                           tblptrl	equ	0xFF6
  7860                           tablat	equ	0xFF5
  7861                           prodh	equ	0xFF4
  7862                           prodl	equ	0xFF3
  7863                           intcon	equ	0xFF2
  7864                           intcon2	equ	0xFF1
  7865                           intcon3	equ	0xFF0
  7866                           postinc0	equ	0xFEE
  7867                           fsr0h	equ	0xFEA
  7868                           fsr0l	equ	0xFE9
  7869                           wreg	equ	0xFE8
  7870                           postdec1	equ	0xFE5
  7871                           fsr1h	equ	0xFE2
  7872                           fsr1l	equ	0xFE1
  7873                           bsr	equ	0xFE0
  7874                           postinc2	equ	0xFDE
  7875                           postdec2	equ	0xFDD
  7876                           fsr2h	equ	0xFDA
  7877                           fsr2l	equ	0xFD9
  7878                           status	equ	0xFD8
  7879                           
  7880 ;; *************** function i1_TMR_Timer1 *****************
  7881 ;; Defined at:
  7882 ;;		line 106 in file "TIMERS.c"
  7883 ;; Parameters:    Size  Location     Type
  7884 ;;  state           1    wreg     unsigned char 
  7885 ;; Auto vars:     Size  Location     Type
  7886 ;;  state           1    0[COMRAM] unsigned char 
  7887 ;; Return value:  Size  Location     Type
  7888 ;;		None               void
  7889 ;; Registers used:
  7890 ;;		wreg, status,2
  7891 ;; Tracked objects:
  7892 ;;		On entry : 0/0
  7893 ;;		On exit  : 0/0
  7894 ;;		Unchanged: 0/0
  7895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7896 ;;      Params:         0       0       0       0       0
  7897 ;;      Locals:         1       0       0       0       0
  7898 ;;      Temps:          0       0       0       0       0
  7899 ;;      Totals:         1       0       0       0       0
  7900 ;;Total ram usage:        1 bytes
  7901 ;; Hardware stack levels used:    1
  7902 ;; Hardware stack levels required when called:    4
  7903 ;; This function calls:
  7904 ;;		Nothing
  7905 ;; This function is called by:
  7906 ;;		_low_isr
  7907 ;;		_TMR_Timer1Start
  7908 ;;		i1_TMR_ResetTimer1
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           	psect	text59
  7913  002146                     __ptext59:
  7914                           	opt stack 0
  7915  002146                     i1_TMR_Timer1:
  7916                           	opt stack 19
  7917                           
  7918                           ;incstack = 0
  7919                           ;i1TMR_Timer1@state stored from wreg
  7920  002146  6E01               	movwf	i1TMR_Timer1@state,c
  7921                           
  7922                           ;TIMERS.c: 108: if(state)
  7923  002148  5001               	movf	i1TMR_Timer1@state,w,c
  7924  00214A  B4D8               	btfsc	status,2,c
  7925  00214C  D002               	goto	i1l988
  7926                           
  7927                           ;TIMERS.c: 109: {
  7928                           ;TIMERS.c: 111: T1CONbits.TMR1ON = 1;
  7929  00214E  80CD               	bsf	4045,0,c	;volatile
  7930                           
  7931                           ;TIMERS.c: 112: }
  7932  002150  0012               	return	
  7933  002152                     i1l988:
  7934                           
  7935                           ;TIMERS.c: 113: else
  7936                           ;TIMERS.c: 114: {
  7937                           ;TIMERS.c: 116: T1CONbits.TMR1ON = 0;
  7938  002152  90CD               	bcf	4045,0,c	;volatile
  7939  002154  0012               	return	
  7940  002156  0012               	return		;funcret
  7941  002158                     __end_ofi1_TMR_Timer1:
  7942                           	opt stack 0
  7943                           pclatu	equ	0xFFB
  7944                           pclath	equ	0xFFA
  7945                           tblptru	equ	0xFF8
  7946                           tblptrh	equ	0xFF7
  7947                           tblptrl	equ	0xFF6
  7948                           tablat	equ	0xFF5
  7949                           prodh	equ	0xFF4
  7950                           prodl	equ	0xFF3
  7951                           intcon	equ	0xFF2
  7952                           intcon2	equ	0xFF1
  7953                           intcon3	equ	0xFF0
  7954                           postinc0	equ	0xFEE
  7955                           fsr0h	equ	0xFEA
  7956                           fsr0l	equ	0xFE9
  7957                           wreg	equ	0xFE8
  7958                           postdec1	equ	0xFE5
  7959                           fsr1h	equ	0xFE2
  7960                           fsr1l	equ	0xFE1
  7961                           bsr	equ	0xFE0
  7962                           postinc2	equ	0xFDE
  7963                           postdec2	equ	0xFDD
  7964                           fsr2h	equ	0xFDA
  7965                           fsr2l	equ	0xFD9
  7966                           status	equ	0xFD8
  7967                           
  7968 ;; *************** function _RF_Disable *****************
  7969 ;; Defined at:
  7970 ;;		line 195 in file "RF.c"
  7971 ;; Parameters:    Size  Location     Type
  7972 ;;		None
  7973 ;; Auto vars:     Size  Location     Type
  7974 ;;		None
  7975 ;; Return value:  Size  Location     Type
  7976 ;;		None               void
  7977 ;; Registers used:
  7978 ;;		wreg, status,2, cstack
  7979 ;; Tracked objects:
  7980 ;;		On entry : 0/0
  7981 ;;		On exit  : 0/0
  7982 ;;		Unchanged: 0/0
  7983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7984 ;;      Params:         0       0       0       0       0
  7985 ;;      Locals:         0       0       0       0       0
  7986 ;;      Temps:          0       0       0       0       0
  7987 ;;      Totals:         0       0       0       0       0
  7988 ;;Total ram usage:        0 bytes
  7989 ;; Hardware stack levels used:    1
  7990 ;; Hardware stack levels required when called:    5
  7991 ;; This function calls:
  7992 ;;		i1_RF_DataInt
  7993 ;;		i1_TMR_Timer0
  7994 ;;		i1_TMR_Timer0Int
  7995 ;; This function is called by:
  7996 ;;		_low_isr
  7997 ;; This function uses a non-reentrant model
  7998 ;;
  7999                           
  8000                           	psect	text60
  8001  0020E8                     __ptext60:
  8002                           	opt stack 0
  8003  0020E8                     _RF_Disable:
  8004                           	opt stack 18
  8005                           
  8006                           ;RF.c: 197: RF_DataInt(0);
  8007                           
  8008                           ;incstack = 0
  8009  0020E8  0E00               	movlw	0
  8010  0020EA  EC5E  F010         	call	i1_RF_DataInt
  8011                           
  8012                           ;RF.c: 198: TMR_Timer0Int(0);
  8013  0020EE  0E00               	movlw	0
  8014  0020F0  ECB5  F010         	call	i1_TMR_Timer0Int
  8015                           
  8016                           ;RF.c: 199: TMR_Timer0(0);
  8017  0020F4  0E00               	movlw	0
  8018  0020F6  ECAC  F010         	call	i1_TMR_Timer0
  8019  0020FA  0012               	return		;funcret
  8020  0020FC                     __end_of_RF_Disable:
  8021                           	opt stack 0
  8022                           pclatu	equ	0xFFB
  8023                           pclath	equ	0xFFA
  8024                           tblptru	equ	0xFF8
  8025                           tblptrh	equ	0xFF7
  8026                           tblptrl	equ	0xFF6
  8027                           tablat	equ	0xFF5
  8028                           prodh	equ	0xFF4
  8029                           prodl	equ	0xFF3
  8030                           intcon	equ	0xFF2
  8031                           intcon2	equ	0xFF1
  8032                           intcon3	equ	0xFF0
  8033                           postinc0	equ	0xFEE
  8034                           fsr0h	equ	0xFEA
  8035                           fsr0l	equ	0xFE9
  8036                           wreg	equ	0xFE8
  8037                           postdec1	equ	0xFE5
  8038                           fsr1h	equ	0xFE2
  8039                           fsr1l	equ	0xFE1
  8040                           bsr	equ	0xFE0
  8041                           postinc2	equ	0xFDE
  8042                           postdec2	equ	0xFDD
  8043                           fsr2h	equ	0xFDA
  8044                           fsr2l	equ	0xFD9
  8045                           status	equ	0xFD8
  8046                           
  8047 ;; *************** function i1_TMR_Timer0 *****************
  8048 ;; Defined at:
  8049 ;;		line 87 in file "TIMERS.c"
  8050 ;; Parameters:    Size  Location     Type
  8051 ;;  state           1    wreg     unsigned char 
  8052 ;; Auto vars:     Size  Location     Type
  8053 ;;  state           1    0[COMRAM] unsigned char 
  8054 ;; Return value:  Size  Location     Type
  8055 ;;		None               void
  8056 ;; Registers used:
  8057 ;;		wreg, status,2
  8058 ;; Tracked objects:
  8059 ;;		On entry : 0/0
  8060 ;;		On exit  : 0/0
  8061 ;;		Unchanged: 0/0
  8062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8063 ;;      Params:         0       0       0       0       0
  8064 ;;      Locals:         1       0       0       0       0
  8065 ;;      Temps:          0       0       0       0       0
  8066 ;;      Totals:         1       0       0       0       0
  8067 ;;Total ram usage:        1 bytes
  8068 ;; Hardware stack levels used:    1
  8069 ;; Hardware stack levels required when called:    4
  8070 ;; This function calls:
  8071 ;;		Nothing
  8072 ;; This function is called by:
  8073 ;;		_RF_Disable
  8074 ;; This function uses a non-reentrant model
  8075 ;;
  8076                           
  8077                           	psect	text61
  8078  002158                     __ptext61:
  8079                           	opt stack 0
  8080  002158                     i1_TMR_Timer0:
  8081                           	opt stack 18
  8082                           
  8083                           ;incstack = 0
  8084                           ;i1TMR_Timer0@state stored from wreg
  8085  002158  6E01               	movwf	i1TMR_Timer0@state,c
  8086                           
  8087                           ;TIMERS.c: 89: if(state)
  8088  00215A  5001               	movf	i1TMR_Timer0@state,w,c
  8089  00215C  B4D8               	btfsc	status,2,c
  8090  00215E  D002               	goto	i1l983
  8091                           
  8092                           ;TIMERS.c: 90: {
  8093                           ;TIMERS.c: 92: T0CONbits.TMR0ON = 1;
  8094  002160  8ED5               	bsf	4053,7,c	;volatile
  8095                           
  8096                           ;TIMERS.c: 93: }
  8097  002162  0012               	return	
  8098  002164                     i1l983:
  8099                           
  8100                           ;TIMERS.c: 94: else
  8101                           ;TIMERS.c: 95: {
  8102                           ;TIMERS.c: 97: T0CONbits.TMR0ON = 0;
  8103  002164  9ED5               	bcf	4053,7,c	;volatile
  8104  002166  0012               	return	
  8105  002168  0012               	return		;funcret
  8106  00216A                     __end_ofi1_TMR_Timer0:
  8107                           	opt stack 0
  8108                           pclatu	equ	0xFFB
  8109                           pclath	equ	0xFFA
  8110                           tblptru	equ	0xFF8
  8111                           tblptrh	equ	0xFF7
  8112                           tblptrl	equ	0xFF6
  8113                           tablat	equ	0xFF5
  8114                           prodh	equ	0xFF4
  8115                           prodl	equ	0xFF3
  8116                           intcon	equ	0xFF2
  8117                           intcon2	equ	0xFF1
  8118                           intcon3	equ	0xFF0
  8119                           postinc0	equ	0xFEE
  8120                           fsr0h	equ	0xFEA
  8121                           fsr0l	equ	0xFE9
  8122                           wreg	equ	0xFE8
  8123                           postdec1	equ	0xFE5
  8124                           fsr1h	equ	0xFE2
  8125                           fsr1l	equ	0xFE1
  8126                           bsr	equ	0xFE0
  8127                           postinc2	equ	0xFDE
  8128                           postdec2	equ	0xFDD
  8129                           fsr2h	equ	0xFDA
  8130                           fsr2l	equ	0xFD9
  8131                           status	equ	0xFD8
  8132                           
  8133 ;; *************** function _IR_ResetData *****************
  8134 ;; Defined at:
  8135 ;;		line 106 in file "IR.c"
  8136 ;; Parameters:    Size  Location     Type
  8137 ;;		None
  8138 ;; Auto vars:     Size  Location     Type
  8139 ;;		None
  8140 ;; Return value:  Size  Location     Type
  8141 ;;		None               void
  8142 ;; Registers used:
  8143 ;;		wreg, status,2, cstack
  8144 ;; Tracked objects:
  8145 ;;		On entry : 0/0
  8146 ;;		On exit  : 0/0
  8147 ;;		Unchanged: 0/0
  8148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8149 ;;      Params:         0       0       0       0       0
  8150 ;;      Locals:         0       0       0       0       0
  8151 ;;      Temps:          0       0       0       0       0
  8152 ;;      Totals:         0       0       0       0       0
  8153 ;;Total ram usage:        0 bytes
  8154 ;; Hardware stack levels used:    1
  8155 ;; Hardware stack levels required when called:    6
  8156 ;; This function calls:
  8157 ;;		_RF_Enable
  8158 ;; This function is called by:
  8159 ;;		_low_isr
  8160 ;; This function uses a non-reentrant model
  8161 ;;
  8162                           
  8163                           	psect	text62
  8164  0021B8                     __ptext62:
  8165                           	opt stack 0
  8166  0021B8                     _IR_ResetData:
  8167                           	opt stack 17
  8168                           
  8169                           ;IR.c: 108: IR_DataPlace = 0;
  8170                           
  8171                           ;incstack = 0
  8172  0021B8  0E00               	movlw	0
  8173  0021BA  6E59               	movwf	_IR_DataPlace,c
  8174                           
  8175                           ;IR.c: 109: IRStarted = 0;
  8176  0021BC  0E00               	movlw	0
  8177  0021BE  6E57               	movwf	_IRStarted,c
  8178                           
  8179                           ;IR.c: 110: RF_Enable();
  8180  0021C0  EC7E  F010         	call	_RF_Enable	;wreg free
  8181  0021C4  0012               	return		;funcret
  8182  0021C6                     __end_of_IR_ResetData:
  8183                           	opt stack 0
  8184                           pclatu	equ	0xFFB
  8185                           pclath	equ	0xFFA
  8186                           tblptru	equ	0xFF8
  8187                           tblptrh	equ	0xFF7
  8188                           tblptrl	equ	0xFF6
  8189                           tablat	equ	0xFF5
  8190                           prodh	equ	0xFF4
  8191                           prodl	equ	0xFF3
  8192                           intcon	equ	0xFF2
  8193                           intcon2	equ	0xFF1
  8194                           intcon3	equ	0xFF0
  8195                           postinc0	equ	0xFEE
  8196                           fsr0h	equ	0xFEA
  8197                           fsr0l	equ	0xFE9
  8198                           wreg	equ	0xFE8
  8199                           postdec1	equ	0xFE5
  8200                           fsr1h	equ	0xFE2
  8201                           fsr1l	equ	0xFE1
  8202                           bsr	equ	0xFE0
  8203                           postinc2	equ	0xFDE
  8204                           postdec2	equ	0xFDD
  8205                           fsr2h	equ	0xFDA
  8206                           fsr2l	equ	0xFD9
  8207                           status	equ	0xFD8
  8208                           
  8209 ;; *************** function _RF_Enable *****************
  8210 ;; Defined at:
  8211 ;;		line 206 in file "RF.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;		None
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;		None
  8216 ;; Return value:  Size  Location     Type
  8217 ;;		None               void
  8218 ;; Registers used:
  8219 ;;		wreg, status,2, cstack
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8225 ;;      Params:         0       0       0       0       0
  8226 ;;      Locals:         0       0       0       0       0
  8227 ;;      Temps:          0       0       0       0       0
  8228 ;;      Totals:         0       0       0       0       0
  8229 ;;Total ram usage:        0 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    5
  8232 ;; This function calls:
  8233 ;;		i1_RF_DataInt
  8234 ;;		i1_TMR_Timer0Int
  8235 ;; This function is called by:
  8236 ;;		_IR_ResetData
  8237 ;; This function uses a non-reentrant model
  8238 ;;
  8239                           
  8240                           	psect	text63
  8241  0020FC                     __ptext63:
  8242                           	opt stack 0
  8243  0020FC                     _RF_Enable:
  8244                           	opt stack 17
  8245                           
  8246                           ;RF.c: 208: INTCON3bits.INT1IF = 0;
  8247                           
  8248                           ;incstack = 0
  8249  0020FC  90F0               	bcf	intcon3,0,c	;volatile
  8250                           
  8251                           ;RF.c: 209: INTCON3bits.INT2IF = 0;
  8252  0020FE  92F0               	bcf	intcon3,1,c	;volatile
  8253                           
  8254                           ;RF.c: 210: INTCONbits.TMR0IF = 0;
  8255  002100  94F2               	bcf	intcon,2,c	;volatile
  8256                           
  8257                           ;RF.c: 211: RF_DataInt(1);
  8258  002102  0E01               	movlw	1
  8259  002104  EC5E  F010         	call	i1_RF_DataInt
  8260                           
  8261                           ;RF.c: 212: TMR_Timer0Int(1);
  8262  002108  0E01               	movlw	1
  8263  00210A  ECB5  F010         	call	i1_TMR_Timer0Int
  8264  00210E  0012               	return		;funcret
  8265  002110                     __end_of_RF_Enable:
  8266                           	opt stack 0
  8267                           pclatu	equ	0xFFB
  8268                           pclath	equ	0xFFA
  8269                           tblptru	equ	0xFF8
  8270                           tblptrh	equ	0xFF7
  8271                           tblptrl	equ	0xFF6
  8272                           tablat	equ	0xFF5
  8273                           prodh	equ	0xFF4
  8274                           prodl	equ	0xFF3
  8275                           intcon	equ	0xFF2
  8276                           intcon2	equ	0xFF1
  8277                           intcon3	equ	0xFF0
  8278                           postinc0	equ	0xFEE
  8279                           fsr0h	equ	0xFEA
  8280                           fsr0l	equ	0xFE9
  8281                           wreg	equ	0xFE8
  8282                           postdec1	equ	0xFE5
  8283                           fsr1h	equ	0xFE2
  8284                           fsr1l	equ	0xFE1
  8285                           bsr	equ	0xFE0
  8286                           postinc2	equ	0xFDE
  8287                           postdec2	equ	0xFDD
  8288                           fsr2h	equ	0xFDA
  8289                           fsr2l	equ	0xFD9
  8290                           status	equ	0xFD8
  8291                           
  8292 ;; *************** function i1_TMR_Timer0Int *****************
  8293 ;; Defined at:
  8294 ;;		line 208 in file "TIMERS.c"
  8295 ;; Parameters:    Size  Location     Type
  8296 ;;  state           1    wreg     unsigned char 
  8297 ;; Auto vars:     Size  Location     Type
  8298 ;;  state           1    0[COMRAM] unsigned char 
  8299 ;; Return value:  Size  Location     Type
  8300 ;;		None               void
  8301 ;; Registers used:
  8302 ;;		wreg, status,2
  8303 ;; Tracked objects:
  8304 ;;		On entry : 0/0
  8305 ;;		On exit  : 0/0
  8306 ;;		Unchanged: 0/0
  8307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8308 ;;      Params:         0       0       0       0       0
  8309 ;;      Locals:         1       0       0       0       0
  8310 ;;      Temps:          0       0       0       0       0
  8311 ;;      Totals:         1       0       0       0       0
  8312 ;;Total ram usage:        1 bytes
  8313 ;; Hardware stack levels used:    1
  8314 ;; Hardware stack levels required when called:    4
  8315 ;; This function calls:
  8316 ;;		Nothing
  8317 ;; This function is called by:
  8318 ;;		_RF_Disable
  8319 ;;		_RF_Enable
  8320 ;; This function uses a non-reentrant model
  8321 ;;
  8322                           
  8323                           	psect	text64
  8324  00216A                     __ptext64:
  8325                           	opt stack 0
  8326  00216A                     i1_TMR_Timer0Int:
  8327                           	opt stack 18
  8328                           
  8329                           ;incstack = 0
  8330                           ;i1TMR_Timer0Int@state stored from wreg
  8331  00216A  6E01               	movwf	i1TMR_Timer0Int@state,c
  8332                           
  8333                           ;TIMERS.c: 210: if(state)
  8334  00216C  5001               	movf	i1TMR_Timer0Int@state,w,c
  8335  00216E  B4D8               	btfsc	status,2,c
  8336  002170  D002               	goto	i1l1013
  8337                           
  8338                           ;TIMERS.c: 211: {
  8339                           ;TIMERS.c: 213: INTCONbits.TMR0IE = 1;
  8340  002172  8AF2               	bsf	intcon,5,c	;volatile
  8341                           
  8342                           ;TIMERS.c: 214: }
  8343  002174  0012               	return	
  8344  002176                     i1l1013:
  8345                           
  8346                           ;TIMERS.c: 215: else
  8347                           ;TIMERS.c: 216: {
  8348                           ;TIMERS.c: 218: INTCONbits.TMR0IE = 0;
  8349  002176  9AF2               	bcf	intcon,5,c	;volatile
  8350  002178  0012               	return	
  8351  00217A  0012               	return		;funcret
  8352  00217C                     __end_ofi1_TMR_Timer0Int:
  8353                           	opt stack 0
  8354                           pclatu	equ	0xFFB
  8355                           pclath	equ	0xFFA
  8356                           tblptru	equ	0xFF8
  8357                           tblptrh	equ	0xFF7
  8358                           tblptrl	equ	0xFF6
  8359                           tablat	equ	0xFF5
  8360                           prodh	equ	0xFF4
  8361                           prodl	equ	0xFF3
  8362                           intcon	equ	0xFF2
  8363                           intcon2	equ	0xFF1
  8364                           intcon3	equ	0xFF0
  8365                           postinc0	equ	0xFEE
  8366                           fsr0h	equ	0xFEA
  8367                           fsr0l	equ	0xFE9
  8368                           wreg	equ	0xFE8
  8369                           postdec1	equ	0xFE5
  8370                           fsr1h	equ	0xFE2
  8371                           fsr1l	equ	0xFE1
  8372                           bsr	equ	0xFE0
  8373                           postinc2	equ	0xFDE
  8374                           postdec2	equ	0xFDD
  8375                           fsr2h	equ	0xFDA
  8376                           fsr2l	equ	0xFD9
  8377                           status	equ	0xFD8
  8378                           
  8379 ;; *************** function i1_RF_DataInt *****************
  8380 ;; Defined at:
  8381 ;;		line 78 in file "RF.c"
  8382 ;; Parameters:    Size  Location     Type
  8383 ;;  state           1    wreg     unsigned char 
  8384 ;; Auto vars:     Size  Location     Type
  8385 ;;  state           1    0[COMRAM] unsigned char 
  8386 ;; Return value:  Size  Location     Type
  8387 ;;		None               void
  8388 ;; Registers used:
  8389 ;;		wreg, status,2
  8390 ;; Tracked objects:
  8391 ;;		On entry : 0/0
  8392 ;;		On exit  : 0/0
  8393 ;;		Unchanged: 0/0
  8394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8395 ;;      Params:         0       0       0       0       0
  8396 ;;      Locals:         1       0       0       0       0
  8397 ;;      Temps:          0       0       0       0       0
  8398 ;;      Totals:         1       0       0       0       0
  8399 ;;Total ram usage:        1 bytes
  8400 ;; Hardware stack levels used:    1
  8401 ;; Hardware stack levels required when called:    4
  8402 ;; This function calls:
  8403 ;;		Nothing
  8404 ;; This function is called by:
  8405 ;;		_RF_Disable
  8406 ;;		_RF_Enable
  8407 ;; This function uses a non-reentrant model
  8408 ;;
  8409                           
  8410                           	psect	text65
  8411  0020BC                     __ptext65:
  8412                           	opt stack 0
  8413  0020BC                     i1_RF_DataInt:
  8414                           	opt stack 18
  8415                           
  8416                           ;incstack = 0
  8417                           ;i1RF_DataInt@state stored from wreg
  8418  0020BC  6E01               	movwf	i1RF_DataInt@state,c
  8419                           
  8420                           ;RF.c: 80: if(state)
  8421  0020BE  5001               	movf	i1RF_DataInt@state,w,c
  8422  0020C0  B4D8               	btfsc	status,2,c
  8423  0020C2  D003               	goto	i1l355
  8424                           
  8425                           ;RF.c: 81: {
  8426                           ;RF.c: 83: INTCON3bits.INT1E = 1;
  8427  0020C4  86F0               	bsf	intcon3,3,c	;volatile
  8428                           
  8429                           ;RF.c: 84: INTCON3bits.INT2E = 1;
  8430  0020C6  88F0               	bsf	intcon3,4,c	;volatile
  8431                           
  8432                           ;RF.c: 85: }
  8433  0020C8  0012               	return	
  8434  0020CA                     i1l355:
  8435                           
  8436                           ;RF.c: 86: else
  8437                           ;RF.c: 87: {
  8438                           ;RF.c: 89: INTCON3bits.INT1E = 0;
  8439  0020CA  96F0               	bcf	intcon3,3,c	;volatile
  8440                           
  8441                           ;RF.c: 90: INTCON3bits.INT2E = 0;
  8442  0020CC  98F0               	bcf	intcon3,4,c	;volatile
  8443  0020CE  0012               	return	
  8444  0020D0  0012               	return		;funcret
  8445  0020D2                     __end_ofi1_RF_DataInt:
  8446                           	opt stack 0
  8447                           pclatu	equ	0xFFB
  8448                           pclath	equ	0xFFA
  8449                           tblptru	equ	0xFF8
  8450                           tblptrh	equ	0xFF7
  8451                           tblptrl	equ	0xFF6
  8452                           tablat	equ	0xFF5
  8453                           prodh	equ	0xFF4
  8454                           prodl	equ	0xFF3
  8455                           intcon	equ	0xFF2
  8456                           intcon2	equ	0xFF1
  8457                           intcon3	equ	0xFF0
  8458                           postinc0	equ	0xFEE
  8459                           fsr0h	equ	0xFEA
  8460                           fsr0l	equ	0xFE9
  8461                           wreg	equ	0xFE8
  8462                           postdec1	equ	0xFE5
  8463                           fsr1h	equ	0xFE2
  8464                           fsr1l	equ	0xFE1
  8465                           bsr	equ	0xFE0
  8466                           postinc2	equ	0xFDE
  8467                           postdec2	equ	0xFDD
  8468                           fsr2h	equ	0xFDA
  8469                           fsr2l	equ	0xFD9
  8470                           status	equ	0xFD8
  8471                           
  8472 ;; *************** function _IR_CleanBuffer *****************
  8473 ;; Defined at:
  8474 ;;		line 118 in file "IR.c"
  8475 ;; Parameters:    Size  Location     Type
  8476 ;;		None
  8477 ;; Auto vars:     Size  Location     Type
  8478 ;;		None
  8479 ;; Return value:  Size  Location     Type
  8480 ;;		None               void
  8481 ;; Registers used:
  8482 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8483 ;; Tracked objects:
  8484 ;;		On entry : 0/0
  8485 ;;		On exit  : 0/0
  8486 ;;		Unchanged: 0/0
  8487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8488 ;;      Params:         0       0       0       0       0
  8489 ;;      Locals:         0       0       0       0       0
  8490 ;;      Temps:          0       0       0       0       0
  8491 ;;      Totals:         0       0       0       0       0
  8492 ;;Total ram usage:        0 bytes
  8493 ;; Hardware stack levels used:    1
  8494 ;; Hardware stack levels required when called:    5
  8495 ;; This function calls:
  8496 ;;		i1_MSC_CleanBufferInt
  8497 ;; This function is called by:
  8498 ;;		_low_isr
  8499 ;; This function uses a non-reentrant model
  8500 ;;
  8501                           
  8502                           	psect	text66
  8503  0020D2                     __ptext66:
  8504                           	opt stack 0
  8505  0020D2                     _IR_CleanBuffer:
  8506                           	opt stack 18
  8507                           
  8508                           ;IR.c: 120: MSC_CleanBufferInt(&IR_DataTiming,80);
  8509                           
  8510                           ;incstack = 0
  8511  0020D2  0E00               	movlw	low _IR_DataTiming
  8512  0020D4  6E01               	movwf	i1MSC_CleanBufferInt@data,c
  8513  0020D6  0E03               	movlw	high _IR_DataTiming
  8514  0020D8  6E02               	movwf	i1MSC_CleanBufferInt@data+1,c
  8515  0020DA  0E00               	movlw	0
  8516  0020DC  6E04               	movwf	i1MSC_CleanBufferInt@count+1,c
  8517  0020DE  0E50               	movlw	80
  8518  0020E0  6E03               	movwf	i1MSC_CleanBufferInt@count,c
  8519  0020E2  EC46  F00D         	call	i1_MSC_CleanBufferInt	;wreg free
  8520  0020E6  0012               	return		;funcret
  8521  0020E8                     __end_of_IR_CleanBuffer:
  8522                           	opt stack 0
  8523                           pclatu	equ	0xFFB
  8524                           pclath	equ	0xFFA
  8525                           tblptru	equ	0xFF8
  8526                           tblptrh	equ	0xFF7
  8527                           tblptrl	equ	0xFF6
  8528                           tablat	equ	0xFF5
  8529                           prodh	equ	0xFF4
  8530                           prodl	equ	0xFF3
  8531                           intcon	equ	0xFF2
  8532                           intcon2	equ	0xFF1
  8533                           intcon3	equ	0xFF0
  8534                           postinc0	equ	0xFEE
  8535                           fsr0h	equ	0xFEA
  8536                           fsr0l	equ	0xFE9
  8537                           wreg	equ	0xFE8
  8538                           postdec1	equ	0xFE5
  8539                           fsr1h	equ	0xFE2
  8540                           fsr1l	equ	0xFE1
  8541                           bsr	equ	0xFE0
  8542                           postinc2	equ	0xFDE
  8543                           postdec2	equ	0xFDD
  8544                           fsr2h	equ	0xFDA
  8545                           fsr2l	equ	0xFD9
  8546                           status	equ	0xFD8
  8547                           
  8548 ;; *************** function _IR_CheckCode *****************
  8549 ;; Defined at:
  8550 ;;		line 166 in file "IR.c"
  8551 ;; Parameters:    Size  Location     Type
  8552 ;;		None
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;  High            3   46[COMRAM] unsigned char 
  8555 ;;  Low             3   43[COMRAM] unsigned char 
  8556 ;;  i               1   49[COMRAM] unsigned char 
  8557 ;; Return value:  Size  Location     Type
  8558 ;;                  1    wreg      unsigned char 
  8559 ;; Registers used:
  8560 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8561 ;; Tracked objects:
  8562 ;;		On entry : 0/0
  8563 ;;		On exit  : 0/0
  8564 ;;		Unchanged: 0/0
  8565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8566 ;;      Params:         0       0       0       0       0
  8567 ;;      Locals:         7       0       0       0       0
  8568 ;;      Temps:          2       0       0       0       0
  8569 ;;      Totals:         9       0       0       0       0
  8570 ;;Total ram usage:        9 bytes
  8571 ;; Hardware stack levels used:    1
  8572 ;; Hardware stack levels required when called:    6
  8573 ;; This function calls:
  8574 ;;		_MSC_BufferCopyInt
  8575 ;;		___ftmul
  8576 ;;		___lwtoft
  8577 ;;		i1___ftge
  8578 ;; This function is called by:
  8579 ;;		_low_isr
  8580 ;; This function uses a non-reentrant model
  8581 ;;
  8582                           
  8583                           	psect	text67
  8584  0002B8                     __ptext67:
  8585                           	opt stack 0
  8586  0002B8                     _IR_CheckCode:
  8587                           	opt stack 17
  8588                           
  8589                           ;IR.c: 168: unsigned char i;
  8590                           ;IR.c: 169: double Low = 0.0;
  8591                           
  8592                           ;incstack = 0
  8593  0002B8  0E00               	movlw	0
  8594  0002BA  6E2C               	movwf	IR_CheckCode@Low,c
  8595  0002BC  0E00               	movlw	0
  8596  0002BE  6E2D               	movwf	IR_CheckCode@Low+1,c
  8597  0002C0  0E00               	movlw	0
  8598  0002C2  6E2E               	movwf	IR_CheckCode@Low+2,c
  8599                           
  8600                           ;IR.c: 170: double High = 0.0;
  8601  0002C4  0E00               	movlw	0
  8602  0002C6  6E2F               	movwf	IR_CheckCode@High,c
  8603  0002C8  0E00               	movlw	0
  8604  0002CA  6E30               	movwf	IR_CheckCode@High+1,c
  8605  0002CC  0E00               	movlw	0
  8606  0002CE  6E31               	movwf	IR_CheckCode@High+2,c
  8607                           
  8608                           ;IR.c: 172: if(System_State == 8)
  8609  0002D0  0E08               	movlw	8
  8610  0002D2  0100               	movlb	0	; () banked
  8611  0002D4  19CE               	xorwf	_System_State& (0+255),w,b
  8612  0002D6  A4D8               	btfss	status,2,c
  8613  0002D8  D136               	goto	i1l5076
  8614                           
  8615                           ; BSR set to: 0
  8616                           ;IR.c: 173: {
  8617                           ;IR.c: 174: for(i=0; i<IR_CodeSize;i++)
  8618  0002DA  0E00               	movlw	0
  8619  0002DC  6E32               	movwf	IR_CheckCode@i,c
  8620  0002DE  D12D               	goto	i1l5068
  8621  0002E0                     i1l5048:
  8622                           
  8623                           ;IR.c: 175: {
  8624                           ;IR.c: 176: if(IR_SavedTiming[i] > 4000)
  8625  0002E0  5032               	movf	IR_CheckCode@i,w,c
  8626  0002E2  0D02               	mullw	2
  8627  0002E4  0E00               	movlw	low _IR_SavedTiming
  8628  0002E6  24F3               	addwf	prodl,w,c
  8629  0002E8  6ED9               	movwf	fsr2l,c
  8630  0002EA  0E01               	movlw	high _IR_SavedTiming
  8631  0002EC  20F4               	addwfc	prodh,w,c
  8632  0002EE  6EDA               	movwf	fsr2h,c
  8633  0002F0  0EA1               	movlw	161
  8634  0002F2  5CDE               	subwf	postinc2,w,c
  8635  0002F4  0E0F               	movlw	15
  8636  0002F6  58DE               	subwfb	postinc2,w,c
  8637  0002F8  A0D8               	btfss	status,0,c
  8638  0002FA  D03F               	goto	i1l5052
  8639                           
  8640                           ;IR.c: 177: {
  8641                           ;IR.c: 178: Low = (double)IR_SavedTiming[i] * (1.0 - 0.2);
  8642  0002FC  5032               	movf	IR_CheckCode@i,w,c
  8643  0002FE  0D02               	mullw	2
  8644  000300  0E00               	movlw	low _IR_SavedTiming
  8645  000302  24F3               	addwf	prodl,w,c
  8646  000304  6ED9               	movwf	fsr2l,c
  8647  000306  0E01               	movlw	high _IR_SavedTiming
  8648  000308  20F4               	addwfc	prodh,w,c
  8649  00030A  6EDA               	movwf	fsr2h,c
  8650  00030C  CFDE F009          	movff	postinc2,___lwtoft@c
  8651  000310  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  8652  000314  EC2F  F00F         	call	___lwtoft	;wreg free
  8653  000318  C009  F01B         	movff	?___lwtoft,___ftmul@f1
  8654  00031C  C00A  F01C         	movff	?___lwtoft+1,___ftmul@f1+1
  8655  000320  C00B  F01D         	movff	?___lwtoft+2,___ftmul@f1+2
  8656  000324  0ECD               	movlw	205
  8657  000326  6E1E               	movwf	___ftmul@f2,c
  8658  000328  0E4C               	movlw	76
  8659  00032A  6E1F               	movwf	___ftmul@f2+1,c
  8660  00032C  0E3F               	movlw	63
  8661  00032E  6E20               	movwf	___ftmul@f2+2,c
  8662  000330  EC97  F007         	call	___ftmul	;wreg free
  8663  000334  C01B  F02C         	movff	?___ftmul,IR_CheckCode@Low
  8664  000338  C01C  F02D         	movff	?___ftmul+1,IR_CheckCode@Low+1
  8665  00033C  C01D  F02E         	movff	?___ftmul+2,IR_CheckCode@Low+2
  8666                           
  8667                           ;IR.c: 179: High = (double)IR_SavedTiming[i] * (1.0 + 0.2);
  8668  000340  5032               	movf	IR_CheckCode@i,w,c
  8669  000342  0D02               	mullw	2
  8670  000344  0E00               	movlw	low _IR_SavedTiming
  8671  000346  24F3               	addwf	prodl,w,c
  8672  000348  6ED9               	movwf	fsr2l,c
  8673  00034A  0E01               	movlw	high _IR_SavedTiming
  8674  00034C  20F4               	addwfc	prodh,w,c
  8675  00034E  6EDA               	movwf	fsr2h,c
  8676  000350  CFDE F009          	movff	postinc2,___lwtoft@c
  8677  000354  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  8678  000358  EC2F  F00F         	call	___lwtoft	;wreg free
  8679  00035C  C009  F01B         	movff	?___lwtoft,___ftmul@f1
  8680  000360  C00A  F01C         	movff	?___lwtoft+1,___ftmul@f1+1
  8681  000364  C00B  F01D         	movff	?___lwtoft+2,___ftmul@f1+2
  8682  000368  0E9A               	movlw	154
  8683  00036A  6E1E               	movwf	___ftmul@f2,c
  8684  00036C  0E99               	movlw	153
  8685  00036E  6E1F               	movwf	___ftmul@f2+1,c
  8686  000370  0E3F               	movlw	63
  8687  000372  6E20               	movwf	___ftmul@f2+2,c
  8688  000374  EC97  F007         	call	___ftmul	;wreg free
  8689  000378  D099               	goto	L4
  8690  00037A                     i1l5052:
  8691                           
  8692                           ;IR.c: 181: else if(IR_SavedTiming[i] <= 4000 && IR_SavedTiming[i] > 1000)
  8693  00037A  5032               	movf	IR_CheckCode@i,w,c
  8694  00037C  0D02               	mullw	2
  8695  00037E  0E00               	movlw	low _IR_SavedTiming
  8696  000380  24F3               	addwf	prodl,w,c
  8697  000382  6ED9               	movwf	fsr2l,c
  8698  000384  0E01               	movlw	high _IR_SavedTiming
  8699  000386  20F4               	addwfc	prodh,w,c
  8700  000388  6EDA               	movwf	fsr2h,c
  8701  00038A  0EA1               	movlw	161
  8702  00038C  5CDE               	subwf	postinc2,w,c
  8703  00038E  0E0F               	movlw	15
  8704  000390  58DE               	subwfb	postinc2,w,c
  8705  000392  B0D8               	btfsc	status,0,c
  8706  000394  D04D               	goto	i1l5058
  8707  000396  5032               	movf	IR_CheckCode@i,w,c
  8708  000398  0D02               	mullw	2
  8709  00039A  0E00               	movlw	low _IR_SavedTiming
  8710  00039C  24F3               	addwf	prodl,w,c
  8711  00039E  6ED9               	movwf	fsr2l,c
  8712  0003A0  0E01               	movlw	high _IR_SavedTiming
  8713  0003A2  20F4               	addwfc	prodh,w,c
  8714  0003A4  6EDA               	movwf	fsr2h,c
  8715  0003A6  0EE9               	movlw	233
  8716  0003A8  5CDE               	subwf	postinc2,w,c
  8717  0003AA  0E03               	movlw	3
  8718  0003AC  58DE               	subwfb	postinc2,w,c
  8719  0003AE  A0D8               	btfss	status,0,c
  8720  0003B0  D03F               	goto	i1l5058
  8721                           
  8722                           ;IR.c: 182: {
  8723                           ;IR.c: 183: Low = (double)IR_SavedTiming[i] * (1.0 - 0.75);
  8724  0003B2  5032               	movf	IR_CheckCode@i,w,c
  8725  0003B4  0D02               	mullw	2
  8726  0003B6  0E00               	movlw	low _IR_SavedTiming
  8727  0003B8  24F3               	addwf	prodl,w,c
  8728  0003BA  6ED9               	movwf	fsr2l,c
  8729  0003BC  0E01               	movlw	high _IR_SavedTiming
  8730  0003BE  20F4               	addwfc	prodh,w,c
  8731  0003C0  6EDA               	movwf	fsr2h,c
  8732  0003C2  CFDE F009          	movff	postinc2,___lwtoft@c
  8733  0003C6  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  8734  0003CA  EC2F  F00F         	call	___lwtoft	;wreg free
  8735  0003CE  C009  F01B         	movff	?___lwtoft,___ftmul@f1
  8736  0003D2  C00A  F01C         	movff	?___lwtoft+1,___ftmul@f1+1
  8737  0003D6  C00B  F01D         	movff	?___lwtoft+2,___ftmul@f1+2
  8738  0003DA  0E00               	movlw	0
  8739  0003DC  6E1E               	movwf	___ftmul@f2,c
  8740  0003DE  0E80               	movlw	128
  8741  0003E0  6E1F               	movwf	___ftmul@f2+1,c
  8742  0003E2  0E3E               	movlw	62
  8743  0003E4  6E20               	movwf	___ftmul@f2+2,c
  8744  0003E6  EC97  F007         	call	___ftmul	;wreg free
  8745  0003EA  C01B  F02C         	movff	?___ftmul,IR_CheckCode@Low
  8746  0003EE  C01C  F02D         	movff	?___ftmul+1,IR_CheckCode@Low+1
  8747  0003F2  C01D  F02E         	movff	?___ftmul+2,IR_CheckCode@Low+2
  8748                           
  8749                           ;IR.c: 184: High = (double)IR_SavedTiming[i] * (1.0 + 0.75);
  8750  0003F6  5032               	movf	IR_CheckCode@i,w,c
  8751  0003F8  0D02               	mullw	2
  8752  0003FA  0E00               	movlw	low _IR_SavedTiming
  8753  0003FC  24F3               	addwf	prodl,w,c
  8754  0003FE  6ED9               	movwf	fsr2l,c
  8755  000400  0E01               	movlw	high _IR_SavedTiming
  8756  000402  20F4               	addwfc	prodh,w,c
  8757  000404  6EDA               	movwf	fsr2h,c
  8758  000406  CFDE F009          	movff	postinc2,___lwtoft@c
  8759  00040A  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  8760  00040E  EC2F  F00F         	call	___lwtoft	;wreg free
  8761  000412  C009  F01B         	movff	?___lwtoft,___ftmul@f1
  8762  000416  C00A  F01C         	movff	?___lwtoft+1,___ftmul@f1+1
  8763  00041A  C00B  F01D         	movff	?___lwtoft+2,___ftmul@f1+2
  8764  00041E  0E00               	movlw	0
  8765  000420  6E1E               	movwf	___ftmul@f2,c
  8766  000422  0EE0               	movlw	224
  8767  000424  6E1F               	movwf	___ftmul@f2+1,c
  8768  000426  0E3F               	movlw	63
  8769  000428  6E20               	movwf	___ftmul@f2+2,c
  8770  00042A  EC97  F007         	call	___ftmul	;wreg free
  8771  00042E  D03E               	goto	L4
  8772  000430                     i1l5058:
  8773                           
  8774                           ;IR.c: 186: else
  8775                           ;IR.c: 187: {
  8776                           ;IR.c: 188: Low = (double)IR_SavedTiming[i] * (1.0 - 1.1);
  8777  000430  5032               	movf	IR_CheckCode@i,w,c
  8778  000432  0D02               	mullw	2
  8779  000434  0E00               	movlw	low _IR_SavedTiming
  8780  000436  24F3               	addwf	prodl,w,c
  8781  000438  6ED9               	movwf	fsr2l,c
  8782  00043A  0E01               	movlw	high _IR_SavedTiming
  8783  00043C  20F4               	addwfc	prodh,w,c
  8784  00043E  6EDA               	movwf	fsr2h,c
  8785  000440  CFDE F009          	movff	postinc2,___lwtoft@c
  8786  000444  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  8787  000448  EC2F  F00F         	call	___lwtoft	;wreg free
  8788  00044C  C009  F01B         	movff	?___lwtoft,___ftmul@f1
  8789  000450  C00A  F01C         	movff	?___lwtoft+1,___ftmul@f1+1
  8790  000454  C00B  F01D         	movff	?___lwtoft+2,___ftmul@f1+2
  8791  000458  0ECD               	movlw	205
  8792  00045A  6E1E               	movwf	___ftmul@f2,c
  8793  00045C  0ECC               	movlw	204
  8794  00045E  6E1F               	movwf	___ftmul@f2+1,c
  8795  000460  0EBD               	movlw	189
  8796  000462  6E20               	movwf	___ftmul@f2+2,c
  8797  000464  EC97  F007         	call	___ftmul	;wreg free
  8798  000468  C01B  F02C         	movff	?___ftmul,IR_CheckCode@Low
  8799  00046C  C01C  F02D         	movff	?___ftmul+1,IR_CheckCode@Low+1
  8800  000470  C01D  F02E         	movff	?___ftmul+2,IR_CheckCode@Low+2
  8801                           
  8802                           ;IR.c: 189: High = (double)IR_SavedTiming[i] * (1.0 + 1.1);
  8803  000474  5032               	movf	IR_CheckCode@i,w,c
  8804  000476  0D02               	mullw	2
  8805  000478  0E00               	movlw	low _IR_SavedTiming
  8806  00047A  24F3               	addwf	prodl,w,c
  8807  00047C  6ED9               	movwf	fsr2l,c
  8808  00047E  0E01               	movlw	high _IR_SavedTiming
  8809  000480  20F4               	addwfc	prodh,w,c
  8810  000482  6EDA               	movwf	fsr2h,c
  8811  000484  CFDE F009          	movff	postinc2,___lwtoft@c
  8812  000488  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  8813  00048C  EC2F  F00F         	call	___lwtoft	;wreg free
  8814  000490  C009  F01B         	movff	?___lwtoft,___ftmul@f1
  8815  000494  C00A  F01C         	movff	?___lwtoft+1,___ftmul@f1+1
  8816  000498  C00B  F01D         	movff	?___lwtoft+2,___ftmul@f1+2
  8817  00049C  0E66               	movlw	102
  8818  00049E  6E1E               	movwf	___ftmul@f2,c
  8819  0004A0  0E06               	movlw	6
  8820  0004A2  6E1F               	movwf	___ftmul@f2+1,c
  8821  0004A4  0E40               	movlw	64
  8822  0004A6  6E20               	movwf	___ftmul@f2+2,c
  8823  0004A8  EC97  F007         	call	___ftmul	;wreg free
  8824  0004AC                     L4:
  8825  0004AC  C01B  F02F         	movff	?___ftmul,IR_CheckCode@High
  8826  0004B0  C01C  F030         	movff	?___ftmul+1,IR_CheckCode@High+1
  8827  0004B4  C01D  F031         	movff	?___ftmul+2,IR_CheckCode@High+2
  8828  0004B8  D000               	goto	i1l502
  8829  0004BA                     i1l502:
  8830                           
  8831                           ;IR.c: 190: }
  8832                           ;IR.c: 192: if((double)IR_DataTiming[i] < Low || (double)IR_DataTiming[i] > High )
  8833  0004BA  5032               	movf	IR_CheckCode@i,w,c
  8834  0004BC  0D02               	mullw	2
  8835  0004BE  0E00               	movlw	low _IR_DataTiming
  8836  0004C0  24F3               	addwf	prodl,w,c
  8837  0004C2  6ED9               	movwf	fsr2l,c
  8838  0004C4  0E03               	movlw	high _IR_DataTiming
  8839  0004C6  20F4               	addwfc	prodh,w,c
  8840  0004C8  6EDA               	movwf	fsr2h,c
  8841  0004CA  CFDE F009          	movff	postinc2,___lwtoft@c
  8842  0004CE  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  8843  0004D2  EC2F  F00F         	call	___lwtoft	;wreg free
  8844  0004D6  C009  F00C         	movff	?___lwtoft,i1___ftge@ff1
  8845  0004DA  C00A  F00D         	movff	?___lwtoft+1,i1___ftge@ff1+1
  8846  0004DE  C00B  F00E         	movff	?___lwtoft+2,i1___ftge@ff1+2
  8847  0004E2  C02C  F00F         	movff	IR_CheckCode@Low,i1___ftge@ff2
  8848  0004E6  C02D  F010         	movff	IR_CheckCode@Low+1,i1___ftge@ff2+1
  8849  0004EA  C02E  F011         	movff	IR_CheckCode@Low+2,i1___ftge@ff2+2
  8850  0004EE  ECD9  F00B         	call	i1___ftge	;wreg free
  8851  0004F2  A0D8               	btfss	status,0,c
  8852  0004F4  D01E               	goto	i1l5062
  8853  0004F6  C02F  F00C         	movff	IR_CheckCode@High,i1___ftge@ff1
  8854  0004FA  C030  F00D         	movff	IR_CheckCode@High+1,i1___ftge@ff1+1
  8855  0004FE  C031  F00E         	movff	IR_CheckCode@High+2,i1___ftge@ff1+2
  8856  000502  5032               	movf	IR_CheckCode@i,w,c
  8857  000504  0D02               	mullw	2
  8858  000506  0E00               	movlw	low _IR_DataTiming
  8859  000508  24F3               	addwf	prodl,w,c
  8860  00050A  6ED9               	movwf	fsr2l,c
  8861  00050C  0E03               	movlw	high _IR_DataTiming
  8862  00050E  20F4               	addwfc	prodh,w,c
  8863  000510  6EDA               	movwf	fsr2h,c
  8864  000512  CFDE F009          	movff	postinc2,___lwtoft@c
  8865  000516  CFDD F00A          	movff	postdec2,___lwtoft@c+1
  8866  00051A  EC2F  F00F         	call	___lwtoft	;wreg free
  8867  00051E  C009  F00F         	movff	?___lwtoft,i1___ftge@ff2
  8868  000522  C00A  F010         	movff	?___lwtoft+1,i1___ftge@ff2+1
  8869  000526  C00B  F011         	movff	?___lwtoft+2,i1___ftge@ff2+2
  8870  00052A  ECD9  F00B         	call	i1___ftge	;wreg free
  8871  00052E  B0D8               	btfsc	status,0,c
  8872  000530  D002               	goto	i1l5066
  8873  000532                     i1l5062:
  8874                           
  8875                           ;IR.c: 193: {
  8876                           ;IR.c: 194: return 0;
  8877  000532  0E00               	movlw	0
  8878  000534  0012               	return	
  8879  000536                     i1l5066:
  8880  000536  2A32               	incf	IR_CheckCode@i,f,c
  8881  000538  D000               	goto	i1l5068
  8882  00053A                     i1l5068:
  8883  00053A  5058               	movf	_IR_CodeSize,w,c
  8884  00053C  5C32               	subwf	IR_CheckCode@i,w,c
  8885  00053E  A0D8               	btfss	status,0,c
  8886  000540  D6CF               	goto	i1l5048
  8887                           
  8888                           ;IR.c: 195: }
  8889                           ;IR.c: 196: }
  8890                           ;IR.c: 197: return 1;
  8891  000542  0E01               	movlw	1
  8892                           
  8893                           ;IR.c: 198: }
  8894  000544  0012               	return	
  8895  000546                     i1l5076:
  8896                           
  8897                           ;IR.c: 199: else
  8898                           ;IR.c: 200: {
  8899                           ;IR.c: 201: if(IR_DataPlace >= 40)
  8900  000546  0E27               	movlw	39
  8901  000548  6459               	cpfsgt	_IR_DataPlace,c
  8902  00054A  D016               	goto	i1l5082
  8903                           
  8904                           ;IR.c: 202: {
  8905                           ;IR.c: 204: MSC_BufferCopyInt(&IR_DataTiming,&IR_SavedTiming,80,0);
  8906  00054C  0E00               	movlw	low _IR_DataTiming
  8907  00054E  6E07               	movwf	MSC_BufferCopyInt@from,c
  8908  000550  0E03               	movlw	high _IR_DataTiming
  8909  000552  6E08               	movwf	MSC_BufferCopyInt@from+1,c
  8910  000554  0E00               	movlw	low _IR_SavedTiming
  8911  000556  6E09               	movwf	MSC_BufferCopyInt@to,c
  8912  000558  0E01               	movlw	high _IR_SavedTiming
  8913  00055A  6E0A               	movwf	MSC_BufferCopyInt@to+1,c
  8914  00055C  0E00               	movlw	0
  8915  00055E  6E0C               	movwf	MSC_BufferCopyInt@count+1,c
  8916  000560  0E50               	movlw	80
  8917  000562  6E0B               	movwf	MSC_BufferCopyInt@count,c
  8918  000564  0E00               	movlw	0
  8919  000566  6E0E               	movwf	MSC_BufferCopyInt@shift+1,c
  8920  000568  0E00               	movlw	0
  8921  00056A  6E0D               	movwf	MSC_BufferCopyInt@shift,c
  8922  00056C  EC89  F00B         	call	_MSC_BufferCopyInt	;wreg free
  8923                           
  8924                           ;IR.c: 205: IR_Saved = 90;
  8925  000570  0E5A               	movlw	90
  8926  000572  0100               	movlb	0	; () banked
  8927  000574  6FCC               	movwf	_IR_Saved& (0+255),b
  8928  000576  D000               	goto	i1l5082
  8929  000578                     i1l5082:
  8930                           
  8931                           ;IR.c: 206: }
  8932                           ;IR.c: 207: return 1;
  8933  000578  0E01               	movlw	1
  8934  00057A  0012               	return	
  8935  00057C  0012               	return		;funcret
  8936  00057E                     __end_of_IR_CheckCode:
  8937                           	opt stack 0
  8938                           pclatu	equ	0xFFB
  8939                           pclath	equ	0xFFA
  8940                           tblptru	equ	0xFF8
  8941                           tblptrh	equ	0xFF7
  8942                           tblptrl	equ	0xFF6
  8943                           tablat	equ	0xFF5
  8944                           prodh	equ	0xFF4
  8945                           prodl	equ	0xFF3
  8946                           intcon	equ	0xFF2
  8947                           intcon2	equ	0xFF1
  8948                           intcon3	equ	0xFF0
  8949                           postinc0	equ	0xFEE
  8950                           fsr0h	equ	0xFEA
  8951                           fsr0l	equ	0xFE9
  8952                           wreg	equ	0xFE8
  8953                           postdec1	equ	0xFE5
  8954                           fsr1h	equ	0xFE2
  8955                           fsr1l	equ	0xFE1
  8956                           bsr	equ	0xFE0
  8957                           postinc2	equ	0xFDE
  8958                           postdec2	equ	0xFDD
  8959                           fsr2h	equ	0xFDA
  8960                           fsr2l	equ	0xFD9
  8961                           status	equ	0xFD8
  8962                           
  8963 ;; *************** function i1___ftge *****************
  8964 ;; Defined at:
  8965 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  8966 ;; Parameters:    Size  Location     Type
  8967 ;;  ff1             3   11[COMRAM] float 
  8968 ;;  ff2             3   14[COMRAM] float 
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;		None
  8971 ;; Return value:  Size  Location     Type
  8972 ;;		None               void
  8973 ;; Registers used:
  8974 ;;		wreg, status,2, status,0
  8975 ;; Tracked objects:
  8976 ;;		On entry : 0/0
  8977 ;;		On exit  : 0/0
  8978 ;;		Unchanged: 0/0
  8979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8980 ;;      Params:         6       0       0       0       0
  8981 ;;      Locals:         0       0       0       0       0
  8982 ;;      Temps:          3       0       0       0       0
  8983 ;;      Totals:         9       0       0       0       0
  8984 ;;Total ram usage:        9 bytes
  8985 ;; Hardware stack levels used:    1
  8986 ;; Hardware stack levels required when called:    4
  8987 ;; This function calls:
  8988 ;;		Nothing
  8989 ;; This function is called by:
  8990 ;;		_IR_CheckCode
  8991 ;; This function uses a non-reentrant model
  8992 ;;
  8993                           
  8994                           	psect	text68
  8995  0017B2                     __ptext68:
  8996                           	opt stack 0
  8997  0017B2                     i1___ftge:
  8998                           	opt stack 18
  8999                           
  9000                           ;incstack = 0
  9001  0017B2  AE0E               	btfss	i1___ftge@ff1+2,7,c
  9002  0017B4  D017               	goto	i1l4774
  9003  0017B6  C00C  F012         	movff	i1___ftge@ff1,??i1___ftge
  9004  0017BA  C00D  F013         	movff	i1___ftge@ff1+1,??i1___ftge+1
  9005  0017BE  C00E  F014         	movff	i1___ftge@ff1+2,??i1___ftge+2
  9006  0017C2  1E12               	comf	??i1___ftge,f,c
  9007  0017C4  1E13               	comf	??i1___ftge+1,f,c
  9008  0017C6  1E14               	comf	??i1___ftge+2,f,c
  9009  0017C8  2A12               	incf	??i1___ftge,f,c
  9010  0017CA  0E00               	movlw	0
  9011  0017CC  2213               	addwfc	??i1___ftge+1,f,c
  9012  0017CE  2214               	addwfc	??i1___ftge+2,f,c
  9013  0017D0  0E00               	movlw	0
  9014  0017D2  2412               	addwf	??i1___ftge,w,c
  9015  0017D4  6E0C               	movwf	i1___ftge@ff1,c
  9016  0017D6  0E00               	movlw	0
  9017  0017D8  2013               	addwfc	??i1___ftge+1,w,c
  9018  0017DA  6E0D               	movwf	i1___ftge@ff1+1,c
  9019  0017DC  0E80               	movlw	128
  9020  0017DE  2014               	addwfc	??i1___ftge+2,w,c
  9021  0017E0  6E0E               	movwf	i1___ftge@ff1+2,c
  9022  0017E2  D000               	goto	i1l4774
  9023  0017E4                     i1l4774:
  9024  0017E4  AE11               	btfss	i1___ftge@ff2+2,7,c
  9025  0017E6  D017               	goto	i1l4778
  9026  0017E8  C00F  F012         	movff	i1___ftge@ff2,??i1___ftge
  9027  0017EC  C010  F013         	movff	i1___ftge@ff2+1,??i1___ftge+1
  9028  0017F0  C011  F014         	movff	i1___ftge@ff2+2,??i1___ftge+2
  9029  0017F4  1E12               	comf	??i1___ftge,f,c
  9030  0017F6  1E13               	comf	??i1___ftge+1,f,c
  9031  0017F8  1E14               	comf	??i1___ftge+2,f,c
  9032  0017FA  2A12               	incf	??i1___ftge,f,c
  9033  0017FC  0E00               	movlw	0
  9034  0017FE  2213               	addwfc	??i1___ftge+1,f,c
  9035  001800  2214               	addwfc	??i1___ftge+2,f,c
  9036  001802  0E00               	movlw	0
  9037  001804  2412               	addwf	??i1___ftge,w,c
  9038  001806  6E0F               	movwf	i1___ftge@ff2,c
  9039  001808  0E00               	movlw	0
  9040  00180A  2013               	addwfc	??i1___ftge+1,w,c
  9041  00180C  6E10               	movwf	i1___ftge@ff2+1,c
  9042  00180E  0E80               	movlw	128
  9043  001810  2014               	addwfc	??i1___ftge+2,w,c
  9044  001812  6E11               	movwf	i1___ftge@ff2+2,c
  9045  001814  D000               	goto	i1l4778
  9046  001816                     i1l4778:
  9047  001816  0E00               	movlw	0
  9048  001818  1A0C               	xorwf	i1___ftge@ff1,f,c
  9049  00181A  0E00               	movlw	0
  9050  00181C  1A0D               	xorwf	i1___ftge@ff1+1,f,c
  9051  00181E  0E80               	movlw	128
  9052  001820  1A0E               	xorwf	i1___ftge@ff1+2,f,c
  9053  001822  0E00               	movlw	0
  9054  001824  1A0F               	xorwf	i1___ftge@ff2,f,c
  9055  001826  0E00               	movlw	0
  9056  001828  1A10               	xorwf	i1___ftge@ff2+1,f,c
  9057  00182A  0E80               	movlw	128
  9058  00182C  1A11               	xorwf	i1___ftge@ff2+2,f,c
  9059  00182E  500F               	movf	i1___ftge@ff2,w,c
  9060  001830  5C0C               	subwf	i1___ftge@ff1,w,c
  9061  001832  5010               	movf	i1___ftge@ff2+1,w,c
  9062  001834  580D               	subwfb	i1___ftge@ff1+1,w,c
  9063  001836  5011               	movf	i1___ftge@ff2+2,w,c
  9064  001838  580E               	subwfb	i1___ftge@ff1+2,w,c
  9065  00183A  B0D8               	btfsc	status,0,c
  9066  00183C  D002               	goto	i1l4784
  9067  00183E  90D8               	bcf	status,0,c
  9068  001840  0012               	return	
  9069  001842                     i1l4784:
  9070  001842  80D8               	bsf	status,0,c
  9071  001844  0012               	return	
  9072  001846  0012               	return		;funcret
  9073  001848                     __end_ofi1___ftge:
  9074                           	opt stack 0
  9075                           pclatu	equ	0xFFB
  9076                           pclath	equ	0xFFA
  9077                           tblptru	equ	0xFF8
  9078                           tblptrh	equ	0xFF7
  9079                           tblptrl	equ	0xFF6
  9080                           tablat	equ	0xFF5
  9081                           prodh	equ	0xFF4
  9082                           prodl	equ	0xFF3
  9083                           intcon	equ	0xFF2
  9084                           intcon2	equ	0xFF1
  9085                           intcon3	equ	0xFF0
  9086                           postinc0	equ	0xFEE
  9087                           fsr0h	equ	0xFEA
  9088                           fsr0l	equ	0xFE9
  9089                           wreg	equ	0xFE8
  9090                           postdec1	equ	0xFE5
  9091                           fsr1h	equ	0xFE2
  9092                           fsr1l	equ	0xFE1
  9093                           bsr	equ	0xFE0
  9094                           postinc2	equ	0xFDE
  9095                           postdec2	equ	0xFDD
  9096                           fsr2h	equ	0xFDA
  9097                           fsr2l	equ	0xFD9
  9098                           status	equ	0xFD8
  9099                           
  9100 ;; *************** function _MSC_BufferCopyInt *****************
  9101 ;; Defined at:
  9102 ;;		line 215 in file "MISC.c"
  9103 ;; Parameters:    Size  Location     Type
  9104 ;;  from            2    6[COMRAM] PTR unsigned int 
  9105 ;;		 -> IR_DataTiming(160), RF_DataTiming(120), 
  9106 ;;  to              2    8[COMRAM] PTR unsigned int 
  9107 ;;		 -> IR_SavedTiming(160), RF_SavedTiming(120), 
  9108 ;;  count           2   10[COMRAM] unsigned int 
  9109 ;;  shift           2   12[COMRAM] unsigned int 
  9110 ;; Auto vars:     Size  Location     Type
  9111 ;;  i               2   16[COMRAM] unsigned int 
  9112 ;; Return value:  Size  Location     Type
  9113 ;;		None               void
  9114 ;; Registers used:
  9115 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9116 ;; Tracked objects:
  9117 ;;		On entry : 0/0
  9118 ;;		On exit  : 0/0
  9119 ;;		Unchanged: 0/0
  9120 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9121 ;;      Params:         8       0       0       0       0
  9122 ;;      Locals:         2       0       0       0       0
  9123 ;;      Temps:          2       0       0       0       0
  9124 ;;      Totals:        12       0       0       0       0
  9125 ;;Total ram usage:       12 bytes
  9126 ;; Hardware stack levels used:    1
  9127 ;; Hardware stack levels required when called:    5
  9128 ;; This function calls:
  9129 ;;		i1_MSC_CleanBufferInt
  9130 ;; This function is called by:
  9131 ;;		_IR_CheckCode
  9132 ;; This function uses a non-reentrant model
  9133 ;;
  9134                           
  9135                           	psect	text69
  9136  001712                     __ptext69:
  9137                           	opt stack 0
  9138  001712                     _MSC_BufferCopyInt:
  9139                           	opt stack 17
  9140                           
  9141                           ;MISC.c: 217: unsigned int i=0;
  9142                           
  9143                           ;incstack = 0
  9144  001712  0E00               	movlw	0
  9145  001714  6E12               	movwf	MSC_BufferCopyInt@i+1,c
  9146  001716  0E00               	movlw	0
  9147  001718  6E11               	movwf	MSC_BufferCopyInt@i,c
  9148                           
  9149                           ;MISC.c: 218: MSC_CleanBufferInt(to,count);
  9150  00171A  C009  F001         	movff	MSC_BufferCopyInt@to,i1MSC_CleanBufferInt@data
  9151  00171E  C00A  F002         	movff	MSC_BufferCopyInt@to+1,i1MSC_CleanBufferInt@data+1
  9152  001722  C00B  F003         	movff	MSC_BufferCopyInt@count,i1MSC_CleanBufferInt@count
  9153  001726  C00C  F004         	movff	MSC_BufferCopyInt@count+1,i1MSC_CleanBufferInt@count+1
  9154  00172A  EC46  F00D         	call	i1_MSC_CleanBufferInt	;wreg free
  9155                           
  9156                           ;MISC.c: 219: for(i = shift; i>0; i--)
  9157  00172E  C00D  F011         	movff	MSC_BufferCopyInt@shift,MSC_BufferCopyInt@i
  9158  001732  C00E  F012         	movff	MSC_BufferCopyInt@shift+1,MSC_BufferCopyInt@i+1
  9159  001736                     i1l4512:
  9160  001736  5011               	movf	MSC_BufferCopyInt@i,w,c
  9161  001738  1012               	iorwf	MSC_BufferCopyInt@i+1,w,c
  9162  00173A  B4D8               	btfsc	status,2,c
  9163  00173C  D02B               	goto	i1l4532
  9164  00173E  D001               	goto	i1l4516
  9165  001740  D029               	goto	i1l4532
  9166  001742                     i1l4516:
  9167                           
  9168                           ;MISC.c: 220: {
  9169                           ;MISC.c: 221: *to = ' ';
  9170  001742  C009  FFD9         	movff	MSC_BufferCopyInt@to,fsr2l
  9171  001746  C00A  FFDA         	movff	MSC_BufferCopyInt@to+1,fsr2h
  9172  00174A  0E20               	movlw	32
  9173  00174C  6EDE               	movwf	postinc2,c
  9174  00174E  0E00               	movlw	0
  9175  001750  6EDD               	movwf	postdec2,c
  9176                           
  9177                           ;MISC.c: 222: to++;
  9178  001752  0E02               	movlw	2
  9179  001754  2609               	addwf	MSC_BufferCopyInt@to,f,c
  9180  001756  0E00               	movlw	0
  9181  001758  220A               	addwfc	MSC_BufferCopyInt@to+1,f,c
  9182  00175A  0611               	decf	MSC_BufferCopyInt@i,f,c
  9183  00175C  A0D8               	btfss	status,0,c
  9184  00175E  0612               	decf	MSC_BufferCopyInt@i+1,f,c
  9185  001760  D7EA               	goto	i1l4512
  9186                           
  9187                           ;MISC.c: 223: }
  9188                           ;MISC.c: 224: while(*from != 0 && count >0)
  9189  001762  D018               	goto	i1l4532
  9190  001764                     i1l4524:
  9191                           
  9192                           ;MISC.c: 225: {
  9193                           ;MISC.c: 226: *to = *from;
  9194  001764  C007  FFD9         	movff	MSC_BufferCopyInt@from,fsr2l
  9195  001768  C008  FFDA         	movff	MSC_BufferCopyInt@from+1,fsr2h
  9196  00176C  C009  FFE1         	movff	MSC_BufferCopyInt@to,fsr1l
  9197  001770  C00A  FFE2         	movff	MSC_BufferCopyInt@to+1,fsr1h
  9198  001774  CFDE FFE6          	movff	postinc2,postinc1
  9199  001778  CFDD FFE5          	movff	postdec2,postdec1
  9200                           
  9201                           ;MISC.c: 227: from++;
  9202  00177C  0E02               	movlw	2
  9203  00177E  2607               	addwf	MSC_BufferCopyInt@from,f,c
  9204  001780  0E00               	movlw	0
  9205  001782  2208               	addwfc	MSC_BufferCopyInt@from+1,f,c
  9206                           
  9207                           ;MISC.c: 228: to++;
  9208  001784  0E02               	movlw	2
  9209  001786  2609               	addwf	MSC_BufferCopyInt@to,f,c
  9210  001788  0E00               	movlw	0
  9211  00178A  220A               	addwfc	MSC_BufferCopyInt@to+1,f,c
  9212                           
  9213                           ;MISC.c: 229: count--;
  9214  00178C  060B               	decf	MSC_BufferCopyInt@count,f,c
  9215  00178E  A0D8               	btfss	status,0,c
  9216  001790  060C               	decf	MSC_BufferCopyInt@count+1,f,c
  9217  001792  D000               	goto	i1l4532
  9218  001794                     i1l4532:
  9219  001794  C007  FFD9         	movff	MSC_BufferCopyInt@from,fsr2l
  9220  001798  C008  FFDA         	movff	MSC_BufferCopyInt@from+1,fsr2h
  9221  00179C  50DE               	movf	postinc2,w,c
  9222  00179E  10DE               	iorwf	postinc2,w,c
  9223  0017A0  B4D8               	btfsc	status,2,c
  9224  0017A2  0012               	return	
  9225  0017A4  500B               	movf	MSC_BufferCopyInt@count,w,c
  9226  0017A6  100C               	iorwf	MSC_BufferCopyInt@count+1,w,c
  9227  0017A8  B4D8               	btfsc	status,2,c
  9228  0017AA  0012               	return	
  9229  0017AC  D7DB               	goto	i1l4524
  9230  0017AE  0012               	return	
  9231  0017B0  0012               	return		;funcret
  9232  0017B2                     __end_of_MSC_BufferCopyInt:
  9233                           	opt stack 0
  9234                           pclatu	equ	0xFFB
  9235                           pclath	equ	0xFFA
  9236                           tblptru	equ	0xFF8
  9237                           tblptrh	equ	0xFF7
  9238                           tblptrl	equ	0xFF6
  9239                           tablat	equ	0xFF5
  9240                           prodh	equ	0xFF4
  9241                           prodl	equ	0xFF3
  9242                           intcon	equ	0xFF2
  9243                           intcon2	equ	0xFF1
  9244                           intcon3	equ	0xFF0
  9245                           postinc0	equ	0xFEE
  9246                           fsr0h	equ	0xFEA
  9247                           fsr0l	equ	0xFE9
  9248                           wreg	equ	0xFE8
  9249                           postinc1	equ	0xFE6
  9250                           postdec1	equ	0xFE5
  9251                           fsr1h	equ	0xFE2
  9252                           fsr1l	equ	0xFE1
  9253                           bsr	equ	0xFE0
  9254                           postinc2	equ	0xFDE
  9255                           postdec2	equ	0xFDD
  9256                           fsr2h	equ	0xFDA
  9257                           fsr2l	equ	0xFD9
  9258                           status	equ	0xFD8
  9259                           
  9260 ;; *************** function i1_MSC_CleanBufferInt *****************
  9261 ;; Defined at:
  9262 ;;		line 166 in file "MISC.c"
  9263 ;; Parameters:    Size  Location     Type
  9264 ;;  data            2    0[COMRAM] PTR unsigned int 
  9265 ;;		 -> IR_SavedTiming(160), RF_SavedTiming(120), IR_DataTiming(160), RF_DataTiming(120), 
  9266 ;;  count           2    2[COMRAM] unsigned int 
  9267 ;; Auto vars:     Size  Location     Type
  9268 ;;  MSC_CleanBuf    2    4[COMRAM] unsigned int 
  9269 ;; Return value:  Size  Location     Type
  9270 ;;		None               void
  9271 ;; Registers used:
  9272 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9273 ;; Tracked objects:
  9274 ;;		On entry : 0/0
  9275 ;;		On exit  : 0/0
  9276 ;;		Unchanged: 0/0
  9277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9278 ;;      Params:         4       0       0       0       0
  9279 ;;      Locals:         2       0       0       0       0
  9280 ;;      Temps:          0       0       0       0       0
  9281 ;;      Totals:         6       0       0       0       0
  9282 ;;Total ram usage:        6 bytes
  9283 ;; Hardware stack levels used:    1
  9284 ;; Hardware stack levels required when called:    4
  9285 ;; This function calls:
  9286 ;;		Nothing
  9287 ;; This function is called by:
  9288 ;;		_IR_CleanBuffer
  9289 ;;		_MSC_BufferCopyInt
  9290 ;; This function uses a non-reentrant model
  9291 ;;
  9292                           
  9293                           	psect	text70
  9294  001A8C                     __ptext70:
  9295                           	opt stack 0
  9296  001A8C                     i1_MSC_CleanBufferInt:
  9297                           	opt stack 18
  9298                           
  9299                           ;MISC.c: 168: unsigned int i=0;
  9300                           
  9301                           ;incstack = 0
  9302  001A8C  0E00               	movlw	0
  9303  001A8E  6E06               	movwf	i1MSC_CleanBufferInt@i+1,c
  9304  001A90  0E00               	movlw	0
  9305  001A92  6E05               	movwf	i1MSC_CleanBufferInt@i,c
  9306                           
  9307                           ;MISC.c: 169: for(i=0; i<count;i++)
  9308  001A94  0E00               	movlw	0
  9309  001A96  6E06               	movwf	i1MSC_CleanBufferInt@i+1,c
  9310  001A98  0E00               	movlw	0
  9311  001A9A  6E05               	movwf	i1MSC_CleanBufferInt@i,c
  9312  001A9C  D010               	goto	i1l4338
  9313  001A9E                     i1l4334:
  9314                           
  9315                           ;MISC.c: 170: {
  9316                           ;MISC.c: 171: data[i]= 0;
  9317  001A9E  90D8               	bcf	status,0,c
  9318  001AA0  3405               	rlcf	i1MSC_CleanBufferInt@i,w,c
  9319  001AA2  6ED9               	movwf	fsr2l,c
  9320  001AA4  3406               	rlcf	i1MSC_CleanBufferInt@i+1,w,c
  9321  001AA6  6EDA               	movwf	fsr2h,c
  9322  001AA8  5001               	movf	i1MSC_CleanBufferInt@data,w,c
  9323  001AAA  26D9               	addwf	fsr2l,f,c
  9324  001AAC  5002               	movf	i1MSC_CleanBufferInt@data+1,w,c
  9325  001AAE  22DA               	addwfc	fsr2h,f,c
  9326  001AB0  0E00               	movlw	0
  9327  001AB2  6EDE               	movwf	postinc2,c
  9328  001AB4  0E00               	movlw	0
  9329  001AB6  6EDD               	movwf	postdec2,c
  9330  001AB8  4A05               	infsnz	i1MSC_CleanBufferInt@i,f,c
  9331  001ABA  2A06               	incf	i1MSC_CleanBufferInt@i+1,f,c
  9332  001ABC  D000               	goto	i1l4338
  9333  001ABE                     i1l4338:
  9334  001ABE  5003               	movf	i1MSC_CleanBufferInt@count,w,c
  9335  001AC0  5C05               	subwf	i1MSC_CleanBufferInt@i,w,c
  9336  001AC2  5004               	movf	i1MSC_CleanBufferInt@count+1,w,c
  9337  001AC4  5806               	subwfb	i1MSC_CleanBufferInt@i+1,w,c
  9338  001AC6  A0D8               	btfss	status,0,c
  9339  001AC8  D7EA               	goto	i1l4334
  9340  001ACA  0012               	return		;funcret
  9341  001ACC                     __end_ofi1_MSC_CleanBufferInt:
  9342                           	opt stack 0
  9343                           pclatu	equ	0xFFB
  9344                           pclath	equ	0xFFA
  9345                           tblptru	equ	0xFF8
  9346                           tblptrh	equ	0xFF7
  9347                           tblptrl	equ	0xFF6
  9348                           tablat	equ	0xFF5
  9349                           prodh	equ	0xFF4
  9350                           prodl	equ	0xFF3
  9351                           intcon	equ	0xFF2
  9352                           intcon2	equ	0xFF1
  9353                           intcon3	equ	0xFF0
  9354                           postinc0	equ	0xFEE
  9355                           fsr0h	equ	0xFEA
  9356                           fsr0l	equ	0xFE9
  9357                           wreg	equ	0xFE8
  9358                           postinc1	equ	0xFE6
  9359                           postdec1	equ	0xFE5
  9360                           fsr1h	equ	0xFE2
  9361                           fsr1l	equ	0xFE1
  9362                           bsr	equ	0xFE0
  9363                           postinc2	equ	0xFDE
  9364                           postdec2	equ	0xFDD
  9365                           fsr2h	equ	0xFDA
  9366                           fsr2l	equ	0xFD9
  9367                           status	equ	0xFD8
  9368                           
  9369 ;; *************** function _ADC_CalculateVoltage *****************
  9370 ;; Defined at:
  9371 ;;		line 140 in file "ADC.c"
  9372 ;; Parameters:    Size  Location     Type
  9373 ;;		None
  9374 ;; Auto vars:     Size  Location     Type
  9375 ;;  Voltage         3   43[COMRAM] unsigned int 
  9376 ;;  ADCcounts       2   41[COMRAM] unsigned int 
  9377 ;; Return value:  Size  Location     Type
  9378 ;;		None               void
  9379 ;; Registers used:
  9380 ;;		wreg, status,2, status,0, cstack
  9381 ;; Tracked objects:
  9382 ;;		On entry : 0/0
  9383 ;;		On exit  : 0/0
  9384 ;;		Unchanged: 0/0
  9385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9386 ;;      Params:         0       0       0       0       0
  9387 ;;      Locals:         5       0       0       0       0
  9388 ;;      Temps:          0       0       0       0       0
  9389 ;;      Totals:         5       0       0       0       0
  9390 ;;Total ram usage:        5 bytes
  9391 ;; Hardware stack levels used:    1
  9392 ;; Hardware stack levels required when called:    6
  9393 ;; This function calls:
  9394 ;;		___ftdiv
  9395 ;;		___ftmul
  9396 ;;		___lwtoft
  9397 ;;		i1_ADC_ChangeChannel
  9398 ;; This function is called by:
  9399 ;;		_low_isr
  9400 ;; This function uses a non-reentrant model
  9401 ;;
  9402                           
  9403                           	psect	text71
  9404  0012B8                     __ptext71:
  9405                           	opt stack 0
  9406  0012B8                     _ADC_CalculateVoltage:
  9407                           	opt stack 17
  9408                           
  9409                           ;ADC.c: 142: unsigned int ADCcounts;
  9410                           ;ADC.c: 143: double Voltage;
  9411                           ;ADC.c: 145: ADCcounts = ADRESH;
  9412                           
  9413                           ;incstack = 0
  9414  0012B8  CFC4 F02A          	movff	4036,ADC_CalculateVoltage@ADCcounts	;volatile
  9415  0012BC  6A2B               	clrf	ADC_CalculateVoltage@ADCcounts+1,c
  9416                           
  9417                           ;ADC.c: 146: ADCcounts <<= 8;
  9418  0012BE  502A               	movf	ADC_CalculateVoltage@ADCcounts,w,c
  9419  0012C0  6E2B               	movwf	ADC_CalculateVoltage@ADCcounts+1,c
  9420  0012C2  6A2A               	clrf	ADC_CalculateVoltage@ADCcounts,c
  9421                           
  9422                           ;ADC.c: 147: ADCcounts += ADRESL;
  9423  0012C4  50C3               	movf	4035,w,c	;volatile
  9424  0012C6  262A               	addwf	ADC_CalculateVoltage@ADCcounts,f,c
  9425  0012C8  0E00               	movlw	0
  9426  0012CA  222B               	addwfc	ADC_CalculateVoltage@ADCcounts+1,f,c
  9427                           
  9428                           ;ADC.c: 149: Voltage = ((double)ADCcounts / (1 << 10)) * 3.3;
  9429  0012CC  0E00               	movlw	0
  9430  0012CE  6E0F               	movwf	___ftdiv@f2,c
  9431  0012D0  0E80               	movlw	128
  9432  0012D2  6E10               	movwf	___ftdiv@f2+1,c
  9433  0012D4  0E44               	movlw	68
  9434  0012D6  6E11               	movwf	___ftdiv@f2+2,c
  9435  0012D8  C02A  F009         	movff	ADC_CalculateVoltage@ADCcounts,___lwtoft@c
  9436  0012DC  C02B  F00A         	movff	ADC_CalculateVoltage@ADCcounts+1,___lwtoft@c+1
  9437  0012E0  EC2F  F00F         	call	___lwtoft	;wreg free
  9438  0012E4  C009  F00C         	movff	?___lwtoft,___ftdiv@f1
  9439  0012E8  C00A  F00D         	movff	?___lwtoft+1,___ftdiv@f1+1
  9440  0012EC  C00B  F00E         	movff	?___lwtoft+2,___ftdiv@f1+2
  9441  0012F0  EC18  F008         	call	___ftdiv	;wreg free
  9442  0012F4  C00C  F01B         	movff	?___ftdiv,___ftmul@f1
  9443  0012F8  C00D  F01C         	movff	?___ftdiv+1,___ftmul@f1+1
  9444  0012FC  C00E  F01D         	movff	?___ftdiv+2,___ftmul@f1+2
  9445  001300  0E33               	movlw	51
  9446  001302  6E1E               	movwf	___ftmul@f2,c
  9447  001304  0E53               	movlw	83
  9448  001306  6E1F               	movwf	___ftmul@f2+1,c
  9449  001308  0E40               	movlw	64
  9450  00130A  6E20               	movwf	___ftmul@f2+2,c
  9451  00130C  EC97  F007         	call	___ftmul	;wreg free
  9452  001310  C01B  F02C         	movff	?___ftmul,ADC_CalculateVoltage@Voltage
  9453  001314  C01C  F02D         	movff	?___ftmul+1,ADC_CalculateVoltage@Voltage+1
  9454  001318  C01D  F02E         	movff	?___ftmul+2,ADC_CalculateVoltage@Voltage+2
  9455                           
  9456                           ;ADC.c: 150: if(ADC_CurrentSource == 10)
  9457  00131C  0E0A               	movlw	10
  9458  00131E  185B               	xorwf	_ADC_CurrentSource,w,c
  9459  001320  A4D8               	btfss	status,2,c
  9460  001322  D023               	goto	i1l1112
  9461                           
  9462                           ;ADC.c: 151: {
  9463                           ;ADC.c: 152: Rail_VIN = Voltage * (200000.0 + 500000.0) / 200000.0;
  9464  001324  0EE6               	movlw	230
  9465  001326  6E1E               	movwf	___ftmul@f2,c
  9466  001328  0E2A               	movlw	42
  9467  00132A  6E1F               	movwf	___ftmul@f2+1,c
  9468  00132C  0E49               	movlw	73
  9469  00132E  6E20               	movwf	___ftmul@f2+2,c
  9470  001330  C02C  F01B         	movff	ADC_CalculateVoltage@Voltage,___ftmul@f1
  9471  001334  C02D  F01C         	movff	ADC_CalculateVoltage@Voltage+1,___ftmul@f1+1
  9472  001338  C02E  F01D         	movff	ADC_CalculateVoltage@Voltage+2,___ftmul@f1+2
  9473  00133C  EC97  F007         	call	___ftmul	;wreg free
  9474  001340  C01B  F00C         	movff	?___ftmul,___ftdiv@f1
  9475  001344  C01C  F00D         	movff	?___ftmul+1,___ftdiv@f1+1
  9476  001348  C01D  F00E         	movff	?___ftmul+2,___ftdiv@f1+2
  9477  00134C  0E50               	movlw	80
  9478  00134E  6E0F               	movwf	___ftdiv@f2,c
  9479  001350  0E43               	movlw	67
  9480  001352  6E10               	movwf	___ftdiv@f2+1,c
  9481  001354  0E48               	movlw	72
  9482  001356  6E11               	movwf	___ftdiv@f2+2,c
  9483  001358  EC18  F008         	call	___ftdiv	;wreg free
  9484  00135C  C00C  F0C9         	movff	?___ftdiv,_Rail_VIN
  9485  001360  C00D  F0CA         	movff	?___ftdiv+1,_Rail_VIN+1
  9486  001364  C00E  F0CB         	movff	?___ftdiv+2,_Rail_VIN+2
  9487                           
  9488                           ;ADC.c: 153: }
  9489  001368  D007               	goto	i1l5102
  9490  00136A                     i1l1112:
  9491                           
  9492                           ;ADC.c: 154: else
  9493                           ;ADC.c: 155: {
  9494                           ;ADC.c: 156: Rail_RSSI = Voltage;
  9495  00136A  C02C  F048         	movff	ADC_CalculateVoltage@Voltage,_Rail_RSSI
  9496  00136E  C02D  F049         	movff	ADC_CalculateVoltage@Voltage+1,_Rail_RSSI+1
  9497  001372  C02E  F04A         	movff	ADC_CalculateVoltage@Voltage+2,_Rail_RSSI+2
  9498  001376  D000               	goto	i1l5102
  9499  001378                     i1l5102:
  9500                           
  9501                           ;ADC.c: 157: }
  9502                           ;ADC.c: 158: ADC_ChangeChannel();
  9503  001378  EC1C  F00F         	call	i1_ADC_ChangeChannel	;wreg free
  9504  00137C  0012               	return		;funcret
  9505  00137E                     __end_of_ADC_CalculateVoltage:
  9506                           	opt stack 0
  9507                           pclatu	equ	0xFFB
  9508                           pclath	equ	0xFFA
  9509                           tblptru	equ	0xFF8
  9510                           tblptrh	equ	0xFF7
  9511                           tblptrl	equ	0xFF6
  9512                           tablat	equ	0xFF5
  9513                           prodh	equ	0xFF4
  9514                           prodl	equ	0xFF3
  9515                           intcon	equ	0xFF2
  9516                           intcon2	equ	0xFF1
  9517                           intcon3	equ	0xFF0
  9518                           postinc0	equ	0xFEE
  9519                           fsr0h	equ	0xFEA
  9520                           fsr0l	equ	0xFE9
  9521                           wreg	equ	0xFE8
  9522                           postinc1	equ	0xFE6
  9523                           postdec1	equ	0xFE5
  9524                           fsr1h	equ	0xFE2
  9525                           fsr1l	equ	0xFE1
  9526                           bsr	equ	0xFE0
  9527                           postinc2	equ	0xFDE
  9528                           postdec2	equ	0xFDD
  9529                           fsr2h	equ	0xFDA
  9530                           fsr2l	equ	0xFD9
  9531                           status	equ	0xFD8
  9532                           
  9533 ;; *************** function i1_ADC_ChangeChannel *****************
  9534 ;; Defined at:
  9535 ;;		line 166 in file "ADC.c"
  9536 ;; Parameters:    Size  Location     Type
  9537 ;;		None
  9538 ;; Auto vars:     Size  Location     Type
  9539 ;;		None
  9540 ;; Return value:  Size  Location     Type
  9541 ;;		None               void
  9542 ;; Registers used:
  9543 ;;		wreg, status,2, status,0
  9544 ;; Tracked objects:
  9545 ;;		On entry : 0/0
  9546 ;;		On exit  : 0/0
  9547 ;;		Unchanged: 0/0
  9548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9549 ;;      Params:         0       0       0       0       0
  9550 ;;      Locals:         0       0       0       0       0
  9551 ;;      Temps:          0       0       0       0       0
  9552 ;;      Totals:         0       0       0       0       0
  9553 ;;Total ram usage:        0 bytes
  9554 ;; Hardware stack levels used:    1
  9555 ;; Hardware stack levels required when called:    4
  9556 ;; This function calls:
  9557 ;;		Nothing
  9558 ;; This function is called by:
  9559 ;;		_ADC_CalculateVoltage
  9560 ;; This function uses a non-reentrant model
  9561 ;;
  9562                           
  9563                           	psect	text72
  9564  001E38                     __ptext72:
  9565                           	opt stack 0
  9566  001E38                     i1_ADC_ChangeChannel:
  9567                           	opt stack 18
  9568                           
  9569                           ;ADC.c: 168: if(ADC_CurrentSource == 10)
  9570                           
  9571                           ;incstack = 0
  9572  001E38  0E0A               	movlw	10
  9573  001E3A  185B               	xorwf	_ADC_CurrentSource,w,c
  9574  001E3C  A4D8               	btfss	status,2,c
  9575  001E3E  D007               	goto	i1l4766
  9576                           
  9577                           ;ADC.c: 169: {
  9578                           ;ADC.c: 170: ADC_CurrentSource = 11;
  9579  001E40  0E0B               	movlw	11
  9580  001E42  6E5B               	movwf	_ADC_CurrentSource,c
  9581                           
  9582                           ;ADC.c: 171: ADCON0bits.CHS = 1;
  9583  001E44  50C2               	movf	4034,w,c	;volatile
  9584  001E46  0BC3               	andlw	-61
  9585  001E48  0904               	iorlw	4
  9586  001E4A  6EC2               	movwf	4034,c	;volatile
  9587                           
  9588                           ;ADC.c: 172: }
  9589  001E4C  0012               	return	
  9590  001E4E                     i1l4766:
  9591                           
  9592                           ;ADC.c: 173: else
  9593                           ;ADC.c: 174: {
  9594                           ;ADC.c: 175: ADC_CurrentSource = 10;
  9595  001E4E  0E0A               	movlw	10
  9596  001E50  6E5B               	movwf	_ADC_CurrentSource,c
  9597                           
  9598                           ;ADC.c: 176: ADCON0bits.CHS = 0;
  9599  001E52  94C2               	bcf	4034,2,c	;volatile
  9600  001E54  96C2               	bcf	4034,3,c	;volatile
  9601  001E56  98C2               	bcf	4034,4,c	;volatile
  9602  001E58  9AC2               	bcf	4034,5,c	;volatile
  9603  001E5A  0012               	return	
  9604  001E5C  0012               	return		;funcret
  9605  001E5E                     __end_ofi1_ADC_ChangeChannel:
  9606                           	opt stack 0
  9607                           pclatu	equ	0xFFB
  9608                           pclath	equ	0xFFA
  9609                           tblptru	equ	0xFF8
  9610                           tblptrh	equ	0xFF7
  9611                           tblptrl	equ	0xFF6
  9612                           tablat	equ	0xFF5
  9613                           prodh	equ	0xFF4
  9614                           prodl	equ	0xFF3
  9615                           intcon	equ	0xFF2
  9616                           intcon2	equ	0xFF1
  9617                           intcon3	equ	0xFF0
  9618                           postinc0	equ	0xFEE
  9619                           fsr0h	equ	0xFEA
  9620                           fsr0l	equ	0xFE9
  9621                           wreg	equ	0xFE8
  9622                           postinc1	equ	0xFE6
  9623                           postdec1	equ	0xFE5
  9624                           fsr1h	equ	0xFE2
  9625                           fsr1l	equ	0xFE1
  9626                           bsr	equ	0xFE0
  9627                           postinc2	equ	0xFDE
  9628                           postdec2	equ	0xFDD
  9629                           fsr2h	equ	0xFDA
  9630                           fsr2l	equ	0xFD9
  9631                           status	equ	0xFD8
  9632                           
  9633 ;; *************** function ___lwtoft *****************
  9634 ;; Defined at:
  9635 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  9636 ;; Parameters:    Size  Location     Type
  9637 ;;  c               2    8[COMRAM] unsigned int 
  9638 ;; Auto vars:     Size  Location     Type
  9639 ;;		None
  9640 ;; Return value:  Size  Location     Type
  9641 ;;                  3    8[COMRAM] float 
  9642 ;; Registers used:
  9643 ;;		wreg, status,2, status,0, cstack
  9644 ;; Tracked objects:
  9645 ;;		On entry : 0/0
  9646 ;;		On exit  : 0/0
  9647 ;;		Unchanged: 0/0
  9648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9649 ;;      Params:         3       0       0       0       0
  9650 ;;      Locals:         0       0       0       0       0
  9651 ;;      Temps:          0       0       0       0       0
  9652 ;;      Totals:         3       0       0       0       0
  9653 ;;Total ram usage:        3 bytes
  9654 ;; Hardware stack levels used:    1
  9655 ;; Hardware stack levels required when called:    5
  9656 ;; This function calls:
  9657 ;;		___ftpack
  9658 ;; This function is called by:
  9659 ;;		_IR_CheckCode
  9660 ;;		_ADC_CalculateVoltage
  9661 ;;		_RF_CalculateNewCode
  9662 ;;		_IR_CalculateNewCode
  9663 ;; This function uses a non-reentrant model
  9664 ;;
  9665                           
  9666                           	psect	text73
  9667  001E5E                     __ptext73:
  9668                           	opt stack 0
  9669  001E5E                     ___lwtoft:
  9670                           	opt stack 17
  9671                           
  9672                           ;incstack = 0
  9673  001E5E  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  9674  001E62  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  9675  001E66  6A03               	clrf	___ftpack@arg+2,c
  9676  001E68  0E8E               	movlw	142
  9677  001E6A  6E04               	movwf	___ftpack@exp,c
  9678  001E6C  0E00               	movlw	0
  9679  001E6E  6E05               	movwf	___ftpack@sign,c
  9680  001E70  ECBF  F009         	call	___ftpack	;wreg free
  9681  001E74  C001  F009         	movff	?___ftpack,?___lwtoft
  9682  001E78  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  9683  001E7C  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  9684  001E80  0012               	return	
  9685  001E82  0012               	return		;funcret
  9686  001E84                     __end_of___lwtoft:
  9687                           	opt stack 0
  9688                           pclatu	equ	0xFFB
  9689                           pclath	equ	0xFFA
  9690                           tblptru	equ	0xFF8
  9691                           tblptrh	equ	0xFF7
  9692                           tblptrl	equ	0xFF6
  9693                           tablat	equ	0xFF5
  9694                           prodh	equ	0xFF4
  9695                           prodl	equ	0xFF3
  9696                           intcon	equ	0xFF2
  9697                           intcon2	equ	0xFF1
  9698                           intcon3	equ	0xFF0
  9699                           postinc0	equ	0xFEE
  9700                           fsr0h	equ	0xFEA
  9701                           fsr0l	equ	0xFE9
  9702                           wreg	equ	0xFE8
  9703                           postinc1	equ	0xFE6
  9704                           postdec1	equ	0xFE5
  9705                           fsr1h	equ	0xFE2
  9706                           fsr1l	equ	0xFE1
  9707                           bsr	equ	0xFE0
  9708                           postinc2	equ	0xFDE
  9709                           postdec2	equ	0xFDD
  9710                           fsr2h	equ	0xFDA
  9711                           fsr2l	equ	0xFD9
  9712                           status	equ	0xFD8
  9713                           
  9714 ;; *************** function ___ftmul *****************
  9715 ;; Defined at:
  9716 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  9717 ;; Parameters:    Size  Location     Type
  9718 ;;  f1              3   26[COMRAM] float 
  9719 ;;  f2              3   29[COMRAM] float 
  9720 ;; Auto vars:     Size  Location     Type
  9721 ;;  f3_as_produc    3   36[COMRAM] unsigned um
  9722 ;;  sign            1   40[COMRAM] unsigned char 
  9723 ;;  cntr            1   39[COMRAM] unsigned char 
  9724 ;;  exp             1   35[COMRAM] unsigned char 
  9725 ;; Return value:  Size  Location     Type
  9726 ;;                  3   26[COMRAM] float 
  9727 ;; Registers used:
  9728 ;;		wreg, status,2, status,0, cstack
  9729 ;; Tracked objects:
  9730 ;;		On entry : 0/0
  9731 ;;		On exit  : 0/0
  9732 ;;		Unchanged: 0/0
  9733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9734 ;;      Params:         6       0       0       0       0
  9735 ;;      Locals:         6       0       0       0       0
  9736 ;;      Temps:          3       0       0       0       0
  9737 ;;      Totals:        15       0       0       0       0
  9738 ;;Total ram usage:       15 bytes
  9739 ;; Hardware stack levels used:    1
  9740 ;; Hardware stack levels required when called:    5
  9741 ;; This function calls:
  9742 ;;		___ftpack
  9743 ;; This function is called by:
  9744 ;;		_IR_CheckCode
  9745 ;;		_ADC_CalculateVoltage
  9746 ;;		_RF_CalculateNewCode
  9747 ;;		_IR_CalculateNewCode
  9748 ;;		_MSC_Scale
  9749 ;; This function uses a non-reentrant model
  9750 ;;
  9751                           
  9752                           	psect	text74
  9753  000F2E                     __ptext74:
  9754                           	opt stack 0
  9755  000F2E                     ___ftmul:
  9756                           	opt stack 17
  9757                           
  9758                           ;incstack = 0
  9759  000F2E  C01D  F021         	movff	___ftmul@f1+2,??___ftmul
  9760  000F32  6A22               	clrf	(??___ftmul+1)& (0+255),c
  9761  000F34  6A23               	clrf	(??___ftmul+2)& (0+255),c
  9762  000F36  341C               	rlcf	___ftmul@f1+1,w,c
  9763  000F38  3621               	rlcf	??___ftmul& (0+255),f,c
  9764  000F3A  E301               	bnc	u452_21
  9765  000F3C  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  9766  000F3E                     u452_21:
  9767  000F3E  5021               	movf	??___ftmul,w,c
  9768  000F40  6E24               	movwf	___ftmul@exp,c
  9769  000F42  5024               	movf	___ftmul@exp,w,c
  9770  000F44  A4D8               	btfss	status,2,c
  9771  000F46  D007               	goto	i1l4612
  9772  000F48  0E00               	movlw	0
  9773  000F4A  6E1B               	movwf	?___ftmul,c
  9774  000F4C  0E00               	movlw	0
  9775  000F4E  6E1C               	movwf	?___ftmul+1,c
  9776  000F50  0E00               	movlw	0
  9777  000F52  6E1D               	movwf	?___ftmul+2,c
  9778  000F54  0012               	return	
  9779  000F56                     i1l4612:
  9780  000F56  C020  F021         	movff	___ftmul@f2+2,??___ftmul
  9781  000F5A  6A22               	clrf	(??___ftmul+1)& (0+255),c
  9782  000F5C  6A23               	clrf	(??___ftmul+2)& (0+255),c
  9783  000F5E  341F               	rlcf	___ftmul@f2+1,w,c
  9784  000F60  3621               	rlcf	??___ftmul& (0+255),f,c
  9785  000F62  E301               	bnc	u454_21
  9786  000F64  8022               	bsf	(??___ftmul+1)& (0+255),0,c
  9787  000F66                     u454_21:
  9788  000F66  5021               	movf	??___ftmul,w,c
  9789  000F68  6E29               	movwf	___ftmul@sign,c
  9790  000F6A  5029               	movf	___ftmul@sign,w,c
  9791  000F6C  A4D8               	btfss	status,2,c
  9792  000F6E  D007               	goto	i1l4618
  9793  000F70  0E00               	movlw	0
  9794  000F72  6E1B               	movwf	?___ftmul,c
  9795  000F74  0E00               	movlw	0
  9796  000F76  6E1C               	movwf	?___ftmul+1,c
  9797  000F78  0E00               	movlw	0
  9798  000F7A  6E1D               	movwf	?___ftmul+2,c
  9799  000F7C  0012               	return	
  9800  000F7E                     i1l4618:
  9801  000F7E  5029               	movf	___ftmul@sign,w,c
  9802  000F80  0F7B               	addlw	123
  9803  000F82  2624               	addwf	___ftmul@exp,f,c
  9804  000F84  C01D  F029         	movff	___ftmul@f1+2,___ftmul@sign
  9805  000F88  5020               	movf	___ftmul@f2+2,w,c
  9806  000F8A  1A29               	xorwf	___ftmul@sign,f,c
  9807  000F8C  0E80               	movlw	128
  9808  000F8E  1629               	andwf	___ftmul@sign,f,c
  9809  000F90  8E1C               	bsf	___ftmul@f1+1,7,c
  9810  000F92  8E1F               	bsf	___ftmul@f2+1,7,c
  9811  000F94  0EFF               	movlw	255
  9812  000F96  161E               	andwf	___ftmul@f2,f,c
  9813  000F98  0EFF               	movlw	255
  9814  000F9A  161F               	andwf	___ftmul@f2+1,f,c
  9815  000F9C  0E00               	movlw	0
  9816  000F9E  1620               	andwf	___ftmul@f2+2,f,c
  9817  000FA0  0E00               	movlw	0
  9818  000FA2  6E25               	movwf	___ftmul@f3_as_product,c
  9819  000FA4  0E00               	movlw	0
  9820  000FA6  6E26               	movwf	___ftmul@f3_as_product+1,c
  9821  000FA8  0E00               	movlw	0
  9822  000FAA  6E27               	movwf	___ftmul@f3_as_product+2,c
  9823  000FAC  0E07               	movlw	7
  9824  000FAE  6E28               	movwf	___ftmul@cntr,c
  9825  000FB0  D000               	goto	i1l4632
  9826  000FB2                     i1l4632:
  9827  000FB2  A01B               	btfss	___ftmul@f1,0,c
  9828  000FB4  D007               	goto	i1l4636
  9829  000FB6  501E               	movf	___ftmul@f2,w,c
  9830  000FB8  2625               	addwf	___ftmul@f3_as_product,f,c
  9831  000FBA  501F               	movf	___ftmul@f2+1,w,c
  9832  000FBC  2226               	addwfc	___ftmul@f3_as_product+1,f,c
  9833  000FBE  5020               	movf	___ftmul@f2+2,w,c
  9834  000FC0  2227               	addwfc	___ftmul@f3_as_product+2,f,c
  9835  000FC2  D000               	goto	i1l4636
  9836  000FC4                     i1l4636:
  9837  000FC4  90D8               	bcf	status,0,c
  9838  000FC6  321D               	rrcf	___ftmul@f1+2,f,c
  9839  000FC8  321C               	rrcf	___ftmul@f1+1,f,c
  9840  000FCA  321B               	rrcf	___ftmul@f1,f,c
  9841  000FCC  90D8               	bcf	status,0,c
  9842  000FCE  361E               	rlcf	___ftmul@f2,f,c
  9843  000FD0  361F               	rlcf	___ftmul@f2+1,f,c
  9844  000FD2  3620               	rlcf	___ftmul@f2+2,f,c
  9845  000FD4  2E28               	decfsz	___ftmul@cntr,f,c
  9846  000FD6  D7ED               	goto	i1l4632
  9847  000FD8  D000               	goto	i1l4640
  9848  000FDA                     i1l4640:
  9849  000FDA  0E09               	movlw	9
  9850  000FDC  6E28               	movwf	___ftmul@cntr,c
  9851  000FDE  D000               	goto	i1l4642
  9852  000FE0                     i1l4642:
  9853  000FE0  A01B               	btfss	___ftmul@f1,0,c
  9854  000FE2  D007               	goto	i1l4646
  9855  000FE4  501E               	movf	___ftmul@f2,w,c
  9856  000FE6  2625               	addwf	___ftmul@f3_as_product,f,c
  9857  000FE8  501F               	movf	___ftmul@f2+1,w,c
  9858  000FEA  2226               	addwfc	___ftmul@f3_as_product+1,f,c
  9859  000FEC  5020               	movf	___ftmul@f2+2,w,c
  9860  000FEE  2227               	addwfc	___ftmul@f3_as_product+2,f,c
  9861  000FF0  D000               	goto	i1l4646
  9862  000FF2                     i1l4646:
  9863  000FF2  90D8               	bcf	status,0,c
  9864  000FF4  321D               	rrcf	___ftmul@f1+2,f,c
  9865  000FF6  321C               	rrcf	___ftmul@f1+1,f,c
  9866  000FF8  321B               	rrcf	___ftmul@f1,f,c
  9867  000FFA  90D8               	bcf	status,0,c
  9868  000FFC  3227               	rrcf	___ftmul@f3_as_product+2,f,c
  9869  000FFE  3226               	rrcf	___ftmul@f3_as_product+1,f,c
  9870  001000  3225               	rrcf	___ftmul@f3_as_product,f,c
  9871  001002  2E28               	decfsz	___ftmul@cntr,f,c
  9872  001004  D7ED               	goto	i1l4642
  9873  001006  D000               	goto	i1l4650
  9874  001008                     i1l4650:
  9875  001008  C025  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  9876  00100C  C026  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  9877  001010  C027  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  9878  001014  C024  F004         	movff	___ftmul@exp,___ftpack@exp
  9879  001018  C029  F005         	movff	___ftmul@sign,___ftpack@sign
  9880  00101C  ECBF  F009         	call	___ftpack	;wreg free
  9881  001020  C001  F01B         	movff	?___ftpack,?___ftmul
  9882  001024  C002  F01C         	movff	?___ftpack+1,?___ftmul+1
  9883  001028  C003  F01D         	movff	?___ftpack+2,?___ftmul+2
  9884  00102C  0012               	return	
  9885  00102E  0012               	return		;funcret
  9886  001030                     __end_of___ftmul:
  9887                           	opt stack 0
  9888                           pclatu	equ	0xFFB
  9889                           pclath	equ	0xFFA
  9890                           tblptru	equ	0xFF8
  9891                           tblptrh	equ	0xFF7
  9892                           tblptrl	equ	0xFF6
  9893                           tablat	equ	0xFF5
  9894                           prodh	equ	0xFF4
  9895                           prodl	equ	0xFF3
  9896                           intcon	equ	0xFF2
  9897                           intcon2	equ	0xFF1
  9898                           intcon3	equ	0xFF0
  9899                           postinc0	equ	0xFEE
  9900                           fsr0h	equ	0xFEA
  9901                           fsr0l	equ	0xFE9
  9902                           wreg	equ	0xFE8
  9903                           postinc1	equ	0xFE6
  9904                           postdec1	equ	0xFE5
  9905                           fsr1h	equ	0xFE2
  9906                           fsr1l	equ	0xFE1
  9907                           bsr	equ	0xFE0
  9908                           postinc2	equ	0xFDE
  9909                           postdec2	equ	0xFDD
  9910                           fsr2h	equ	0xFDA
  9911                           fsr2l	equ	0xFD9
  9912                           status	equ	0xFD8
  9913                           
  9914 ;; *************** function ___ftdiv *****************
  9915 ;; Defined at:
  9916 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;  f1              3   11[COMRAM] float 
  9919 ;;  f2              3   14[COMRAM] float 
  9920 ;; Auto vars:     Size  Location     Type
  9921 ;;  f3              3   21[COMRAM] float 
  9922 ;;  sign            1   25[COMRAM] unsigned char 
  9923 ;;  exp             1   24[COMRAM] unsigned char 
  9924 ;;  cntr            1   20[COMRAM] unsigned char 
  9925 ;; Return value:  Size  Location     Type
  9926 ;;                  3   11[COMRAM] float 
  9927 ;; Registers used:
  9928 ;;		wreg, status,2, status,0, cstack
  9929 ;; Tracked objects:
  9930 ;;		On entry : 0/0
  9931 ;;		On exit  : 0/0
  9932 ;;		Unchanged: 0/0
  9933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9934 ;;      Params:         6       0       0       0       0
  9935 ;;      Locals:         6       0       0       0       0
  9936 ;;      Temps:          3       0       0       0       0
  9937 ;;      Totals:        15       0       0       0       0
  9938 ;;Total ram usage:       15 bytes
  9939 ;; Hardware stack levels used:    1
  9940 ;; Hardware stack levels required when called:    5
  9941 ;; This function calls:
  9942 ;;		___ftpack
  9943 ;; This function is called by:
  9944 ;;		_ADC_CalculateVoltage
  9945 ;;		_MSC_Scale
  9946 ;; This function uses a non-reentrant model
  9947 ;;
  9948                           
  9949                           	psect	text75
  9950  001030                     __ptext75:
  9951                           	opt stack 0
  9952  001030                     ___ftdiv:
  9953                           	opt stack 17
  9954                           
  9955                           ;incstack = 0
  9956  001030  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
  9957  001034  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  9958  001036  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  9959  001038  340D               	rlcf	___ftdiv@f1+1,w,c
  9960  00103A  3612               	rlcf	??___ftdiv& (0+255),f,c
  9961  00103C  E301               	bnc	u447_21
  9962  00103E  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  9963  001040                     u447_21:
  9964  001040  5012               	movf	??___ftdiv,w,c
  9965  001042  6E19               	movwf	___ftdiv@exp,c
  9966  001044  5019               	movf	___ftdiv@exp,w,c
  9967  001046  A4D8               	btfss	status,2,c
  9968  001048  D007               	goto	i1l4566
  9969  00104A  0E00               	movlw	0
  9970  00104C  6E0C               	movwf	?___ftdiv,c
  9971  00104E  0E00               	movlw	0
  9972  001050  6E0D               	movwf	?___ftdiv+1,c
  9973  001052  0E00               	movlw	0
  9974  001054  6E0E               	movwf	?___ftdiv+2,c
  9975  001056  0012               	return	
  9976  001058                     i1l4566:
  9977  001058  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
  9978  00105C  6A13               	clrf	(??___ftdiv+1)& (0+255),c
  9979  00105E  6A14               	clrf	(??___ftdiv+2)& (0+255),c
  9980  001060  3410               	rlcf	___ftdiv@f2+1,w,c
  9981  001062  3612               	rlcf	??___ftdiv& (0+255),f,c
  9982  001064  E301               	bnc	u449_21
  9983  001066  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
  9984  001068                     u449_21:
  9985  001068  5012               	movf	??___ftdiv,w,c
  9986  00106A  6E1A               	movwf	___ftdiv@sign,c
  9987  00106C  501A               	movf	___ftdiv@sign,w,c
  9988  00106E  A4D8               	btfss	status,2,c
  9989  001070  D007               	goto	i1l4572
  9990  001072  0E00               	movlw	0
  9991  001074  6E0C               	movwf	?___ftdiv,c
  9992  001076  0E00               	movlw	0
  9993  001078  6E0D               	movwf	?___ftdiv+1,c
  9994  00107A  0E00               	movlw	0
  9995  00107C  6E0E               	movwf	?___ftdiv+2,c
  9996  00107E  0012               	return	
  9997  001080                     i1l4572:
  9998  001080  0E00               	movlw	0
  9999  001082  6E16               	movwf	___ftdiv@f3,c
 10000  001084  0E00               	movlw	0
 10001  001086  6E17               	movwf	___ftdiv@f3+1,c
 10002  001088  0E00               	movlw	0
 10003  00108A  6E18               	movwf	___ftdiv@f3+2,c
 10004  00108C  501A               	movf	___ftdiv@sign,w,c
 10005  00108E  0F89               	addlw	137
 10006  001090  5E19               	subwf	___ftdiv@exp,f,c
 10007  001092  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
 10008  001096  5011               	movf	___ftdiv@f2+2,w,c
 10009  001098  1A1A               	xorwf	___ftdiv@sign,f,c
 10010  00109A  0E80               	movlw	128
 10011  00109C  161A               	andwf	___ftdiv@sign,f,c
 10012  00109E  8E0D               	bsf	___ftdiv@f1+1,7,c
 10013  0010A0  0EFF               	movlw	255
 10014  0010A2  160C               	andwf	___ftdiv@f1,f,c
 10015  0010A4  0EFF               	movlw	255
 10016  0010A6  160D               	andwf	___ftdiv@f1+1,f,c
 10017  0010A8  0E00               	movlw	0
 10018  0010AA  160E               	andwf	___ftdiv@f1+2,f,c
 10019  0010AC  8E10               	bsf	___ftdiv@f2+1,7,c
 10020  0010AE  0EFF               	movlw	255
 10021  0010B0  160F               	andwf	___ftdiv@f2,f,c
 10022  0010B2  0EFF               	movlw	255
 10023  0010B4  1610               	andwf	___ftdiv@f2+1,f,c
 10024  0010B6  0E00               	movlw	0
 10025  0010B8  1611               	andwf	___ftdiv@f2+2,f,c
 10026  0010BA  0E18               	movlw	24
 10027  0010BC  6E15               	movwf	___ftdiv@cntr,c
 10028  0010BE  D000               	goto	i1l4592
 10029  0010C0                     i1l4592:
 10030  0010C0  90D8               	bcf	status,0,c
 10031  0010C2  3616               	rlcf	___ftdiv@f3,f,c
 10032  0010C4  3617               	rlcf	___ftdiv@f3+1,f,c
 10033  0010C6  3618               	rlcf	___ftdiv@f3+2,f,c
 10034  0010C8  500F               	movf	___ftdiv@f2,w,c
 10035  0010CA  5C0C               	subwf	___ftdiv@f1,w,c
 10036  0010CC  5010               	movf	___ftdiv@f2+1,w,c
 10037  0010CE  580D               	subwfb	___ftdiv@f1+1,w,c
 10038  0010D0  5011               	movf	___ftdiv@f2+2,w,c
 10039  0010D2  580E               	subwfb	___ftdiv@f1+2,w,c
 10040  0010D4  A0D8               	btfss	status,0,c
 10041  0010D6  D007               	goto	i1l1505
 10042  0010D8  500F               	movf	___ftdiv@f2,w,c
 10043  0010DA  5E0C               	subwf	___ftdiv@f1,f,c
 10044  0010DC  5010               	movf	___ftdiv@f2+1,w,c
 10045  0010DE  5A0D               	subwfb	___ftdiv@f1+1,f,c
 10046  0010E0  5011               	movf	___ftdiv@f2+2,w,c
 10047  0010E2  5A0E               	subwfb	___ftdiv@f1+2,f,c
 10048  0010E4  8016               	bsf	___ftdiv@f3,0,c
 10049  0010E6                     i1l1505:
 10050  0010E6  90D8               	bcf	status,0,c
 10051  0010E8  360C               	rlcf	___ftdiv@f1,f,c
 10052  0010EA  360D               	rlcf	___ftdiv@f1+1,f,c
 10053  0010EC  360E               	rlcf	___ftdiv@f1+2,f,c
 10054  0010EE  2E15               	decfsz	___ftdiv@cntr,f,c
 10055  0010F0  D7E7               	goto	i1l4592
 10056  0010F2  D000               	goto	i1l4602
 10057  0010F4                     i1l4602:
 10058  0010F4  C016  F001         	movff	___ftdiv@f3,___ftpack@arg
 10059  0010F8  C017  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 10060  0010FC  C018  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 10061  001100  C019  F004         	movff	___ftdiv@exp,___ftpack@exp
 10062  001104  C01A  F005         	movff	___ftdiv@sign,___ftpack@sign
 10063  001108  ECBF  F009         	call	___ftpack	;wreg free
 10064  00110C  C001  F00C         	movff	?___ftpack,?___ftdiv
 10065  001110  C002  F00D         	movff	?___ftpack+1,?___ftdiv+1
 10066  001114  C003  F00E         	movff	?___ftpack+2,?___ftdiv+2
 10067  001118  0012               	return	
 10068  00111A  0012               	return		;funcret
 10069  00111C                     __end_of___ftdiv:
 10070                           	opt stack 0
 10071                           pclatu	equ	0xFFB
 10072                           pclath	equ	0xFFA
 10073                           tblptru	equ	0xFF8
 10074                           tblptrh	equ	0xFF7
 10075                           tblptrl	equ	0xFF6
 10076                           tablat	equ	0xFF5
 10077                           prodh	equ	0xFF4
 10078                           prodl	equ	0xFF3
 10079                           intcon	equ	0xFF2
 10080                           intcon2	equ	0xFF1
 10081                           intcon3	equ	0xFF0
 10082                           postinc0	equ	0xFEE
 10083                           fsr0h	equ	0xFEA
 10084                           fsr0l	equ	0xFE9
 10085                           wreg	equ	0xFE8
 10086                           postinc1	equ	0xFE6
 10087                           postdec1	equ	0xFE5
 10088                           fsr1h	equ	0xFE2
 10089                           fsr1l	equ	0xFE1
 10090                           bsr	equ	0xFE0
 10091                           postinc2	equ	0xFDE
 10092                           postdec2	equ	0xFDD
 10093                           fsr2h	equ	0xFDA
 10094                           fsr2l	equ	0xFD9
 10095                           status	equ	0xFD8
 10096                           
 10097 ;; *************** function ___ftpack *****************
 10098 ;; Defined at:
 10099 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 10100 ;; Parameters:    Size  Location     Type
 10101 ;;  arg             3    0[COMRAM] unsigned um
 10102 ;;  exp             1    3[COMRAM] unsigned char 
 10103 ;;  sign            1    4[COMRAM] unsigned char 
 10104 ;; Auto vars:     Size  Location     Type
 10105 ;;		None
 10106 ;; Return value:  Size  Location     Type
 10107 ;;                  3    0[COMRAM] float 
 10108 ;; Registers used:
 10109 ;;		wreg, status,2, status,0
 10110 ;; Tracked objects:
 10111 ;;		On entry : 0/0
 10112 ;;		On exit  : 0/0
 10113 ;;		Unchanged: 0/0
 10114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10115 ;;      Params:         5       0       0       0       0
 10116 ;;      Locals:         0       0       0       0       0
 10117 ;;      Temps:          3       0       0       0       0
 10118 ;;      Totals:         8       0       0       0       0
 10119 ;;Total ram usage:        8 bytes
 10120 ;; Hardware stack levels used:    1
 10121 ;; Hardware stack levels required when called:    4
 10122 ;; This function calls:
 10123 ;;		Nothing
 10124 ;; This function is called by:
 10125 ;;		___ftdiv
 10126 ;;		___ftmul
 10127 ;;		___lwtoft
 10128 ;; This function uses a non-reentrant model
 10129 ;;
 10130                           
 10131                           	psect	text76
 10132  00137E                     __ptext76:
 10133                           	opt stack 0
 10134  00137E                     ___ftpack:
 10135                           	opt stack 17
 10136                           
 10137                           ;incstack = 0
 10138  00137E  5004               	movf	___ftpack@exp,w,c
 10139  001380  B4D8               	btfsc	status,2,c
 10140  001382  D005               	goto	i1l4296
 10141  001384  5001               	movf	___ftpack@arg,w,c
 10142  001386  1002               	iorwf	___ftpack@arg+1,w,c
 10143  001388  1003               	iorwf	___ftpack@arg+2,w,c
 10144  00138A  A4D8               	btfss	status,2,c
 10145  00138C  D00E               	goto	i1l4302
 10146  00138E                     i1l4296:
 10147  00138E  0E00               	movlw	0
 10148  001390  6E01               	movwf	?___ftpack,c
 10149  001392  0E00               	movlw	0
 10150  001394  6E02               	movwf	?___ftpack+1,c
 10151  001396  0E00               	movlw	0
 10152  001398  6E03               	movwf	?___ftpack+2,c
 10153  00139A  0012               	return	
 10154  00139C  D006               	goto	i1l4302
 10155  00139E                     i1l4300:
 10156  00139E  2A04               	incf	___ftpack@exp,f,c
 10157  0013A0  90D8               	bcf	status,0,c
 10158  0013A2  3203               	rrcf	___ftpack@arg+2,f,c
 10159  0013A4  3202               	rrcf	___ftpack@arg+1,f,c
 10160  0013A6  3201               	rrcf	___ftpack@arg,f,c
 10161  0013A8  D000               	goto	i1l4302
 10162  0013AA                     i1l4302:
 10163  0013AA  0E00               	movlw	0
 10164  0013AC  1401               	andwf	___ftpack@arg,w,c
 10165  0013AE  6E06               	movwf	??___ftpack& (0+255),c
 10166  0013B0  0E00               	movlw	0
 10167  0013B2  1402               	andwf	___ftpack@arg+1,w,c
 10168  0013B4  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10169  0013B6  0EFE               	movlw	254
 10170  0013B8  1403               	andwf	___ftpack@arg+2,w,c
 10171  0013BA  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10172  0013BC  5006               	movf	??___ftpack,w,c
 10173  0013BE  1007               	iorwf	??___ftpack+1,w,c
 10174  0013C0  1008               	iorwf	??___ftpack+2,w,c
 10175  0013C2  B4D8               	btfsc	status,2,c
 10176  0013C4  D00E               	goto	i1l4308
 10177  0013C6  D7EB               	goto	i1l4300
 10178  0013C8  D00C               	goto	i1l4308
 10179  0013CA                     i1l4304:
 10180  0013CA  2A04               	incf	___ftpack@exp,f,c
 10181  0013CC  0E01               	movlw	1
 10182  0013CE  2601               	addwf	___ftpack@arg,f,c
 10183  0013D0  0E00               	movlw	0
 10184  0013D2  2202               	addwfc	___ftpack@arg+1,f,c
 10185  0013D4  0E00               	movlw	0
 10186  0013D6  2203               	addwfc	___ftpack@arg+2,f,c
 10187  0013D8  90D8               	bcf	status,0,c
 10188  0013DA  3203               	rrcf	___ftpack@arg+2,f,c
 10189  0013DC  3202               	rrcf	___ftpack@arg+1,f,c
 10190  0013DE  3201               	rrcf	___ftpack@arg,f,c
 10191  0013E0  D000               	goto	i1l4308
 10192  0013E2                     i1l4308:
 10193  0013E2  0E00               	movlw	0
 10194  0013E4  1401               	andwf	___ftpack@arg,w,c
 10195  0013E6  6E06               	movwf	??___ftpack& (0+255),c
 10196  0013E8  0E00               	movlw	0
 10197  0013EA  1402               	andwf	___ftpack@arg+1,w,c
 10198  0013EC  6E07               	movwf	(??___ftpack+1)& (0+255),c
 10199  0013EE  0EFF               	movlw	255
 10200  0013F0  1403               	andwf	___ftpack@arg+2,w,c
 10201  0013F2  6E08               	movwf	(??___ftpack+2)& (0+255),c
 10202  0013F4  5006               	movf	??___ftpack,w,c
 10203  0013F6  1007               	iorwf	??___ftpack+1,w,c
 10204  0013F8  1008               	iorwf	??___ftpack+2,w,c
 10205  0013FA  B4D8               	btfsc	status,2,c
 10206  0013FC  D008               	goto	i1l4312
 10207  0013FE  D7E5               	goto	i1l4304
 10208  001400  D006               	goto	i1l4312
 10209  001402                     i1l4310:
 10210  001402  0604               	decf	___ftpack@exp,f,c
 10211  001404  90D8               	bcf	status,0,c
 10212  001406  3601               	rlcf	___ftpack@arg,f,c
 10213  001408  3602               	rlcf	___ftpack@arg+1,f,c
 10214  00140A  3603               	rlcf	___ftpack@arg+2,f,c
 10215  00140C  D000               	goto	i1l4312
 10216  00140E                     i1l4312:
 10217  00140E  BE02               	btfsc	___ftpack@arg+1,7,c
 10218  001410  D004               	goto	i1l1441
 10219  001412  0E02               	movlw	2
 10220  001414  6004               	cpfslt	___ftpack@exp,c
 10221  001416  D7F5               	goto	i1l4310
 10222  001418  D000               	goto	i1l1441
 10223  00141A                     i1l1441:
 10224  00141A  B004               	btfsc	___ftpack@exp,0,c
 10225  00141C  D002               	goto	i1l4318
 10226  00141E  9E02               	bcf	___ftpack@arg+1,7,c
 10227  001420  D000               	goto	i1l4318
 10228  001422                     i1l4318:
 10229  001422  90D8               	bcf	status,0,c
 10230  001424  3204               	rrcf	___ftpack@exp,f,c
 10231  001426  5004               	movf	___ftpack@exp,w,c
 10232  001428  1203               	iorwf	___ftpack@arg+2,f,c
 10233  00142A  5005               	movf	___ftpack@sign,w,c
 10234  00142C  B4D8               	btfsc	status,2,c
 10235  00142E  D002               	goto	i1l4324
 10236  001430  8E03               	bsf	___ftpack@arg+2,7,c
 10237  001432  D000               	goto	i1l4324
 10238  001434                     i1l4324:
 10239  001434  C001  F001         	movff	___ftpack@arg,?___ftpack
 10240  001438  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 10241  00143C  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 10242  001440  0012               	return	
 10243  001442  0012               	return		;funcret
 10244  001444                     __end_of___ftpack:
 10245                           	opt stack 0
 10246                           pclatu	equ	0xFFB
 10247                           pclath	equ	0xFFA
 10248                           tblptru	equ	0xFF8
 10249                           tblptrh	equ	0xFF7
 10250                           tblptrl	equ	0xFF6
 10251                           tablat	equ	0xFF5
 10252                           prodh	equ	0xFF4
 10253                           prodl	equ	0xFF3
 10254                           intcon	equ	0xFF2
 10255                           intcon2	equ	0xFF1
 10256                           intcon3	equ	0xFF0
 10257                           postinc0	equ	0xFEE
 10258                           fsr0h	equ	0xFEA
 10259                           fsr0l	equ	0xFE9
 10260                           wreg	equ	0xFE8
 10261                           postinc1	equ	0xFE6
 10262                           postdec1	equ	0xFE5
 10263                           fsr1h	equ	0xFE2
 10264                           fsr1l	equ	0xFE1
 10265                           bsr	equ	0xFE0
 10266                           postinc2	equ	0xFDE
 10267                           postdec2	equ	0xFDD
 10268                           fsr2h	equ	0xFDA
 10269                           fsr2l	equ	0xFD9
 10270                           status	equ	0xFD8
 10271                           
 10272 ;; *************** function _high_isr *****************
 10273 ;; Defined at:
 10274 ;;		line 48 in file "INTERRUPTS.c"
 10275 ;; Parameters:    Size  Location     Type
 10276 ;;		None
 10277 ;; Auto vars:     Size  Location     Type
 10278 ;;  RFtemp          2   47[BANK0 ] unsigned int 
 10279 ;; Return value:  Size  Location     Type
 10280 ;;		None               void
 10281 ;; Registers used:
 10282 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10283 ;; Tracked objects:
 10284 ;;		On entry : 0/0
 10285 ;;		On exit  : 0/0
 10286 ;;		Unchanged: 0/0
 10287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10288 ;;      Params:         0       0       0       0       0
 10289 ;;      Locals:         0       2       0       0       0
 10290 ;;      Temps:          0      14       0       0       0
 10291 ;;      Totals:         0      16       0       0       0
 10292 ;;Total ram usage:       16 bytes
 10293 ;; Hardware stack levels used:    1
 10294 ;; Hardware stack levels required when called:    3
 10295 ;; This function calls:
 10296 ;;		_RF_CheckCode
 10297 ;;		_RF_ResetData
 10298 ;;		_TMR_Timer0Start
 10299 ;;		_TMR_Timer0Status
 10300 ;;		i2_TMR_ResetTimer0
 10301 ;;		i2_TMR_Timer0
 10302 ;; This function is called by:
 10303 ;;		Interrupt level 2
 10304 ;; This function uses a non-reentrant model
 10305 ;;
 10306                           
 10307                           	psect	intcode
 10308  000008                     __pintcode:
 10309                           	opt stack 0
 10310  000008                     _high_isr:
 10311                           	opt stack 17
 10312                           
 10313                           ;incstack = 0
 10314  000008  CFFA F0A1          	movff	pclath,??_high_isr
 10315  00000C  CFFB F0A2          	movff	pclatu,??_high_isr+1
 10316  000010  CFE9 F0A3          	movff	fsr0l,??_high_isr+2
 10317  000014  EFE4  F004         	goto	int_func
 10318                           pclatu	equ	0xFFB
 10319                           pclath	equ	0xFFA
 10320                           tblptru	equ	0xFF8
 10321                           tblptrh	equ	0xFF7
 10322                           tblptrl	equ	0xFF6
 10323                           tablat	equ	0xFF5
 10324                           prodh	equ	0xFF4
 10325                           prodl	equ	0xFF3
 10326                           intcon	equ	0xFF2
 10327                           intcon2	equ	0xFF1
 10328                           intcon3	equ	0xFF0
 10329                           postinc0	equ	0xFEE
 10330                           fsr0h	equ	0xFEA
 10331                           fsr0l	equ	0xFE9
 10332                           wreg	equ	0xFE8
 10333                           postinc1	equ	0xFE6
 10334                           postdec1	equ	0xFE5
 10335                           fsr1h	equ	0xFE2
 10336                           fsr1l	equ	0xFE1
 10337                           bsr	equ	0xFE0
 10338                           postinc2	equ	0xFDE
 10339                           postdec2	equ	0xFDD
 10340                           fsr2h	equ	0xFDA
 10341                           fsr2l	equ	0xFD9
 10342                           status	equ	0xFD8
 10343                           
 10344                           	psect	intcode_body
 10345  0009C8                     __pintcode_body:
 10346                           	opt stack 17
 10347  0009C8                     int_func:
 10348                           	opt stack 17
 10349  0009C8  CFEA F0A4          	movff	fsr0h,??_high_isr+3
 10350  0009CC  CFE1 F0A5          	movff	fsr1l,??_high_isr+4
 10351  0009D0  CFE2 F0A6          	movff	fsr1h,??_high_isr+5
 10352  0009D4  CFD9 F0A7          	movff	fsr2l,??_high_isr+6
 10353  0009D8  CFDA F0A8          	movff	fsr2h,??_high_isr+7
 10354  0009DC  CFF3 F0A9          	movff	prodl,??_high_isr+8
 10355  0009E0  CFF4 F0AA          	movff	prodh,??_high_isr+9
 10356  0009E4  CFF6 F0AB          	movff	tblptrl,??_high_isr+10
 10357  0009E8  CFF7 F0AC          	movff	tblptrh,??_high_isr+11
 10358  0009EC  CFF8 F0AD          	movff	tblptru,??_high_isr+12
 10359  0009F0  CFF5 F0AE          	movff	tablat,??_high_isr+13
 10360                           
 10361                           ;INTERRUPTS.c: 50: unsigned int RFtemp = 0;
 10362  0009F4  0E00               	movlw	0
 10363  0009F6  0100               	movlb	0	; () banked
 10364  0009F8  6FB0               	movwf	(high_isr@RFtemp+1)& (0+255),b
 10365  0009FA  0E00               	movlw	0
 10366  0009FC  6FAF               	movwf	high_isr@RFtemp& (0+255),b
 10367                           
 10368                           ; BSR set to: 0
 10369                           ;INTERRUPTS.c: 52: if(INTCON3bits.INT1IF || INTCON3bits.INT2IF)
 10370  0009FE  B0F0               	btfsc	intcon3,0,c	;volatile
 10371  000A00  D002               	goto	i2l5264
 10372                           
 10373                           ; BSR set to: 0
 10374  000A02  A2F0               	btfss	intcon3,1,c	;volatile
 10375  000A04  D07B               	goto	i2l176
 10376  000A06                     i2l5264:
 10377                           
 10378                           ; BSR set to: 0
 10379                           ;INTERRUPTS.c: 53: {
 10380                           ;INTERRUPTS.c: 55: if(!TMR_Timer0Status())
 10381  000A06  ECE3  F010         	call	_TMR_Timer0Status	;wreg free
 10382  000A0A  0900               	iorlw	0
 10383  000A0C  A4D8               	btfss	status,2,c
 10384  000A0E  D003               	goto	i2l179
 10385                           
 10386                           ;INTERRUPTS.c: 56: {
 10387                           ;INTERRUPTS.c: 58: TMR_Timer0Start();
 10388  000A10  ECBE  F010         	call	_TMR_Timer0Start	;wreg free
 10389                           
 10390                           ;INTERRUPTS.c: 59: }
 10391  000A14  D070               	goto	i2l5306
 10392  000A16                     i2l179:
 10393                           
 10394                           ;INTERRUPTS.c: 60: else
 10395                           ;INTERRUPTS.c: 61: {
 10396                           ;INTERRUPTS.c: 62: RFtemp = TMR0L;
 10397  000A16  CFD6 F0AF          	movff	4054,high_isr@RFtemp	;volatile
 10398  000A1A  0100               	movlb	0	; () banked
 10399  000A1C  6BB0               	clrf	(high_isr@RFtemp+1)& (0+255),b
 10400                           
 10401                           ; BSR set to: 0
 10402                           ;INTERRUPTS.c: 63: RFtemp += (unsigned int)TMR0H << 8;
 10403  000A1E  50D7               	movf	4055,w,c	;volatile
 10404  000A20  0100               	movlb	0	; () banked
 10405  000A22  27B0               	addwf	(high_isr@RFtemp+1)& (0+255),f,b
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;INTERRUPTS.c: 64: TMR_ResetTimer0();
 10409  000A24  ECA1  F00E         	call	i2_TMR_ResetTimer0	;wreg free
 10410                           
 10411                           ;INTERRUPTS.c: 65: if(!RFStarted)
 10412  000A28  0100               	movlb	0	; () banked
 10413  000A2A  51C4               	movf	_RFStarted& (0+255),w,b
 10414  000A2C  A4D8               	btfss	status,2,c
 10415  000A2E  D031               	goto	i2l181
 10416                           
 10417                           ; BSR set to: 0
 10418                           ;INTERRUPTS.c: 66: {
 10419                           ;INTERRUPTS.c: 67: if(System_State == 8)
 10420  000A30  0E08               	movlw	8
 10421  000A32  0100               	movlb	0	; () banked
 10422  000A34  19CE               	xorwf	_System_State& (0+255),w,b
 10423  000A36  A4D8               	btfss	status,2,c
 10424  000A38  D018               	goto	i2l5282
 10425                           
 10426                           ; BSR set to: 0
 10427                           ;INTERRUPTS.c: 68: {
 10428                           ;INTERRUPTS.c: 69: if(RFtemp >= RF_SyncLow && RFtemp <= RF_SyncHigh)
 10429  000A3A  0100               	movlb	0	; () banked
 10430  000A3C  51BD               	movf	_RF_SyncLow& (0+255),w,b
 10431  000A3E  0100               	movlb	0	; () banked
 10432  000A40  5DAF               	subwf	high_isr@RFtemp& (0+255),w,b
 10433  000A42  0100               	movlb	0	; () banked
 10434  000A44  51BE               	movf	(_RF_SyncLow+1)& (0+255),w,b
 10435  000A46  0100               	movlb	0	; () banked
 10436  000A48  59B0               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 10437  000A4A  A0D8               	btfss	status,0,c
 10438  000A4C  D022               	goto	i2l181
 10439                           
 10440                           ; BSR set to: 0
 10441  000A4E  0100               	movlb	0	; () banked
 10442  000A50  51AF               	movf	high_isr@RFtemp& (0+255),w,b
 10443  000A52  0100               	movlb	0	; () banked
 10444  000A54  5DBB               	subwf	_RF_SyncHigh& (0+255),w,b
 10445  000A56  0100               	movlb	0	; () banked
 10446  000A58  51B0               	movf	(high_isr@RFtemp+1)& (0+255),w,b
 10447  000A5A  0100               	movlb	0	; () banked
 10448  000A5C  59BC               	subwfb	(_RF_SyncHigh+1)& (0+255),w,b
 10449  000A5E  A0D8               	btfss	status,0,c
 10450  000A60  D018               	goto	i2l181
 10451                           
 10452                           ; BSR set to: 0
 10453                           ;INTERRUPTS.c: 70: {
 10454                           ;INTERRUPTS.c: 71: RFStarted = 1;
 10455  000A62  0E01               	movlw	1
 10456  000A64  0100               	movlb	0	; () banked
 10457  000A66  6FC4               	movwf	_RFStarted& (0+255),b
 10458                           
 10459                           ; BSR set to: 0
 10460                           ;INTERRUPTS.c: 72: }
 10461                           ;INTERRUPTS.c: 73: }
 10462  000A68  D014               	goto	i2l181
 10463  000A6A                     i2l5282:
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;INTERRUPTS.c: 74: else
 10467                           ;INTERRUPTS.c: 75: {
 10468                           ;INTERRUPTS.c: 76: if(RFtemp >= 400 && RFtemp <= 1000)
 10469  000A6A  0E90               	movlw	144
 10470  000A6C  0100               	movlb	0	; () banked
 10471  000A6E  5DAF               	subwf	high_isr@RFtemp& (0+255),w,b
 10472  000A70  0E01               	movlw	1
 10473  000A72  0100               	movlb	0	; () banked
 10474  000A74  59B0               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 10475  000A76  A0D8               	btfss	status,0,c
 10476  000A78  D00C               	goto	i2l181
 10477                           
 10478                           ; BSR set to: 0
 10479  000A7A  0EE9               	movlw	233
 10480  000A7C  0100               	movlb	0	; () banked
 10481  000A7E  5DAF               	subwf	high_isr@RFtemp& (0+255),w,b
 10482  000A80  0E03               	movlw	3
 10483  000A82  0100               	movlb	0	; () banked
 10484  000A84  59B0               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 10485  000A86  B0D8               	btfsc	status,0,c
 10486  000A88  D004               	goto	i2l181
 10487                           
 10488                           ; BSR set to: 0
 10489                           ;INTERRUPTS.c: 77: {
 10490                           ;INTERRUPTS.c: 78: RFStarted = 1;
 10491  000A8A  0E01               	movlw	1
 10492  000A8C  0100               	movlb	0	; () banked
 10493  000A8E  6FC4               	movwf	_RFStarted& (0+255),b
 10494                           
 10495                           ; BSR set to: 0
 10496  000A90  D000               	goto	i2l181
 10497  000A92                     i2l181:
 10498                           
 10499                           ; BSR set to: 0
 10500                           ;INTERRUPTS.c: 79: }
 10501                           ;INTERRUPTS.c: 80: }
 10502                           ;INTERRUPTS.c: 81: }
 10503                           ;INTERRUPTS.c: 82: if(RFStarted)
 10504  000A92  0100               	movlb	0	; () banked
 10505  000A94  51C4               	movf	_RFStarted& (0+255),w,b
 10506  000A96  B4D8               	btfsc	status,2,c
 10507  000A98  D02E               	goto	i2l5306
 10508                           
 10509                           ; BSR set to: 0
 10510                           ;INTERRUPTS.c: 83: {
 10511                           ;INTERRUPTS.c: 84: if(RF_DataPlace < 60)
 10512  000A9A  0E3C               	movlw	60
 10513  000A9C  0100               	movlb	0	; () banked
 10514  000A9E  61C7               	cpfslt	_RF_DataPlace& (0+255),b
 10515  000AA0  D024               	goto	i2l5304
 10516                           
 10517                           ; BSR set to: 0
 10518                           ;INTERRUPTS.c: 85: {
 10519                           ;INTERRUPTS.c: 86: RF_DataTiming[RF_DataPlace] = RFtemp;
 10520  000AA2  0100               	movlb	0	; () banked
 10521  000AA4  51C7               	movf	_RF_DataPlace& (0+255),w,b
 10522  000AA6  0D02               	mullw	2
 10523  000AA8  0E00               	movlw	low _RF_DataTiming
 10524  000AAA  24F3               	addwf	prodl,w,c
 10525  000AAC  6ED9               	movwf	fsr2l,c
 10526  000AAE  0E02               	movlw	high _RF_DataTiming
 10527  000AB0  20F4               	addwfc	prodh,w,c
 10528  000AB2  6EDA               	movwf	fsr2h,c
 10529  000AB4  C0AF  FFDE         	movff	high_isr@RFtemp,postinc2
 10530  000AB8  C0B0  FFDD         	movff	high_isr@RFtemp+1,postdec2
 10531                           
 10532                           ; BSR set to: 0
 10533                           ;INTERRUPTS.c: 87: RF_DataPlace++;
 10534  000ABC  0100               	movlb	0	; () banked
 10535  000ABE  2BC7               	incf	_RF_DataPlace& (0+255),f,b
 10536                           
 10537                           ; BSR set to: 0
 10538                           ;INTERRUPTS.c: 88: if(RF_DataPlace >= RF_CodeSize)
 10539  000AC0  0100               	movlb	0	; () banked
 10540  000AC2  51C5               	movf	_RF_CodeSize& (0+255),w,b
 10541  000AC4  0100               	movlb	0	; () banked
 10542  000AC6  5DC7               	subwf	_RF_DataPlace& (0+255),w,b
 10543  000AC8  A0D8               	btfss	status,0,c
 10544  000ACA  D015               	goto	i2l5306
 10545                           
 10546                           ; BSR set to: 0
 10547                           ;INTERRUPTS.c: 89: {
 10548                           ;INTERRUPTS.c: 90: if(!RF_Data)
 10549  000ACC  0100               	movlb	0	; () banked
 10550  000ACE  51C6               	movf	_RF_Data& (0+255),w,b	;volatile
 10551  000AD0  A4D8               	btfss	status,2,c
 10552  000AD2  D005               	goto	i2l5300
 10553                           
 10554                           ; BSR set to: 0
 10555                           ;INTERRUPTS.c: 91: {
 10556                           ;INTERRUPTS.c: 92: RF_Data = RF_CheckCode();
 10557  000AD4  ECBF  F002         	call	_RF_CheckCode	;wreg free
 10558  000AD8  0100               	movlb	0	; () banked
 10559  000ADA  6FC6               	movwf	_RF_Data& (0+255),b	;volatile
 10560  000ADC  D000               	goto	i2l5300
 10561  000ADE                     i2l5300:
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;INTERRUPTS.c: 93: }
 10565                           ;INTERRUPTS.c: 94: TMR_Timer0(0);
 10566  000ADE  0E00               	movlw	0
 10567  000AE0  EC52  F010         	call	i2_TMR_Timer0
 10568                           
 10569                           ;INTERRUPTS.c: 95: RF_ResetData();
 10570  000AE4  ECEA  F010         	call	_RF_ResetData	;wreg free
 10571                           
 10572                           ;INTERRUPTS.c: 96: }
 10573                           ;INTERRUPTS.c: 97: }
 10574  000AE8  D006               	goto	i2l5306
 10575  000AEA                     i2l5304:
 10576                           
 10577                           ;INTERRUPTS.c: 98: else
 10578                           ;INTERRUPTS.c: 99: {
 10579                           ;INTERRUPTS.c: 101: TMR_Timer0(0);
 10580  000AEA  0E00               	movlw	0
 10581  000AEC  EC52  F010         	call	i2_TMR_Timer0
 10582                           
 10583                           ;INTERRUPTS.c: 102: RF_ResetData();
 10584  000AF0  ECEA  F010         	call	_RF_ResetData	;wreg free
 10585  000AF4  D000               	goto	i2l5306
 10586  000AF6                     i2l5306:
 10587                           
 10588                           ;INTERRUPTS.c: 103: }
 10589                           ;INTERRUPTS.c: 104: }
 10590                           ;INTERRUPTS.c: 105: }
 10591                           ;INTERRUPTS.c: 106: INTCON3bits.INT1IF = 0;
 10592  000AF6  90F0               	bcf	intcon3,0,c	;volatile
 10593                           
 10594                           ;INTERRUPTS.c: 107: INTCON3bits.INT2IF = 0;
 10595  000AF8  92F0               	bcf	intcon3,1,c	;volatile
 10596                           
 10597                           ;INTERRUPTS.c: 108: }
 10598  000AFA  D00D               	goto	i2l194
 10599  000AFC                     i2l176:
 10600                           
 10601                           ; BSR set to: 0
 10602                           ;INTERRUPTS.c: 109: else if(INTCONbits.TMR0IF)
 10603  000AFC  A4F2               	btfss	intcon,2,c	;volatile
 10604  000AFE  D009               	goto	i2l192
 10605                           
 10606                           ; BSR set to: 0
 10607                           ;INTERRUPTS.c: 110: {
 10608                           ;INTERRUPTS.c: 112: TMR_Timer0(0);
 10609  000B00  0E00               	movlw	0
 10610  000B02  EC52  F010         	call	i2_TMR_Timer0
 10611                           
 10612                           ;INTERRUPTS.c: 113: TMR_ResetTimer0();
 10613  000B06  ECA1  F00E         	call	i2_TMR_ResetTimer0	;wreg free
 10614                           
 10615                           ;INTERRUPTS.c: 114: RF_ResetData();
 10616  000B0A  ECEA  F010         	call	_RF_ResetData	;wreg free
 10617                           
 10618                           ;INTERRUPTS.c: 115: INTCONbits.TMR0IF = 0;
 10619  000B0E  94F2               	bcf	intcon,2,c	;volatile
 10620                           
 10621                           ;INTERRUPTS.c: 116: }
 10622  000B10  D002               	goto	i2l194
 10623  000B12                     i2l192:
 10624                           
 10625                           ; BSR set to: 0
 10626                           ;INTERRUPTS.c: 117: else
 10627                           ;INTERRUPTS.c: 118: {
 10628                           ;INTERRUPTS.c: 120: __nop();
 10629  000B12  F000               	nop	
 10630  000B14  D000               	goto	i2l194
 10631  000B16                     i2l194:
 10632  000B16  C0AE  FFF5         	movff	??_high_isr+13,tablat
 10633  000B1A  C0AD  FFF8         	movff	??_high_isr+12,tblptru
 10634  000B1E  C0AC  FFF7         	movff	??_high_isr+11,tblptrh
 10635  000B22  C0AB  FFF6         	movff	??_high_isr+10,tblptrl
 10636  000B26  C0AA  FFF4         	movff	??_high_isr+9,prodh
 10637  000B2A  C0A9  FFF3         	movff	??_high_isr+8,prodl
 10638  000B2E  C0A8  FFDA         	movff	??_high_isr+7,fsr2h
 10639  000B32  C0A7  FFD9         	movff	??_high_isr+6,fsr2l
 10640  000B36  C0A6  FFE2         	movff	??_high_isr+5,fsr1h
 10641  000B3A  C0A5  FFE1         	movff	??_high_isr+4,fsr1l
 10642  000B3E  C0A4  FFEA         	movff	??_high_isr+3,fsr0h
 10643  000B42  C0A3  FFE9         	movff	??_high_isr+2,fsr0l
 10644  000B46  C0A2  FFFB         	movff	??_high_isr+1,pclatu
 10645  000B4A  C0A1  FFFA         	movff	??_high_isr,pclath
 10646  000B4E  0011               	retfie		f
 10647  000B50                     __end_of_high_isr:
 10648                           	opt stack 0
 10649                           pclatu	equ	0xFFB
 10650                           pclath	equ	0xFFA
 10651                           tblptru	equ	0xFF8
 10652                           tblptrh	equ	0xFF7
 10653                           tblptrl	equ	0xFF6
 10654                           tablat	equ	0xFF5
 10655                           prodh	equ	0xFF4
 10656                           prodl	equ	0xFF3
 10657                           intcon	equ	0xFF2
 10658                           intcon2	equ	0xFF1
 10659                           intcon3	equ	0xFF0
 10660                           postinc0	equ	0xFEE
 10661                           fsr0h	equ	0xFEA
 10662                           fsr0l	equ	0xFE9
 10663                           wreg	equ	0xFE8
 10664                           postinc1	equ	0xFE6
 10665                           postdec1	equ	0xFE5
 10666                           fsr1h	equ	0xFE2
 10667                           fsr1l	equ	0xFE1
 10668                           bsr	equ	0xFE0
 10669                           postinc2	equ	0xFDE
 10670                           postdec2	equ	0xFDD
 10671                           fsr2h	equ	0xFDA
 10672                           fsr2l	equ	0xFD9
 10673                           status	equ	0xFD8
 10674                           
 10675 ;; *************** function _TMR_Timer0Status *****************
 10676 ;; Defined at:
 10677 ;;		line 56 in file "TIMERS.c"
 10678 ;; Parameters:    Size  Location     Type
 10679 ;;		None
 10680 ;; Auto vars:     Size  Location     Type
 10681 ;;		None
 10682 ;; Return value:  Size  Location     Type
 10683 ;;                  1    wreg      unsigned char 
 10684 ;; Registers used:
 10685 ;;		wreg
 10686 ;; Tracked objects:
 10687 ;;		On entry : 0/0
 10688 ;;		On exit  : 0/0
 10689 ;;		Unchanged: 0/0
 10690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10691 ;;      Params:         0       0       0       0       0
 10692 ;;      Locals:         0       0       0       0       0
 10693 ;;      Temps:          0       0       0       0       0
 10694 ;;      Totals:         0       0       0       0       0
 10695 ;;Total ram usage:        0 bytes
 10696 ;; Hardware stack levels used:    1
 10697 ;; This function calls:
 10698 ;;		Nothing
 10699 ;; This function is called by:
 10700 ;;		_high_isr
 10701 ;; This function uses a non-reentrant model
 10702 ;;
 10703                           
 10704                           	psect	text78
 10705  0021C6                     __ptext78:
 10706                           	opt stack 0
 10707  0021C6                     _TMR_Timer0Status:
 10708                           	opt stack 19
 10709                           
 10710                           ;TIMERS.c: 58: if(T0CONbits.TMR0ON)
 10711                           
 10712                           ;incstack = 0
 10713  0021C6  AED5               	btfss	4053,7,c	;volatile
 10714  0021C8  D002               	goto	i2l4978
 10715                           
 10716                           ;TIMERS.c: 59: {
 10717                           ;TIMERS.c: 61: return 1;
 10718  0021CA  0E01               	movlw	1
 10719  0021CC  0012               	return	
 10720  0021CE                     i2l4978:
 10721                           
 10722                           ;TIMERS.c: 62: }
 10723                           ;TIMERS.c: 63: return 0;
 10724  0021CE  0E00               	movlw	0
 10725  0021D0  0012               	return	
 10726  0021D2  0012               	return		;funcret
 10727  0021D4                     __end_of_TMR_Timer0Status:
 10728                           	opt stack 0
 10729                           pclatu	equ	0xFFB
 10730                           pclath	equ	0xFFA
 10731                           tblptru	equ	0xFF8
 10732                           tblptrh	equ	0xFF7
 10733                           tblptrl	equ	0xFF6
 10734                           tablat	equ	0xFF5
 10735                           prodh	equ	0xFF4
 10736                           prodl	equ	0xFF3
 10737                           intcon	equ	0xFF2
 10738                           intcon2	equ	0xFF1
 10739                           intcon3	equ	0xFF0
 10740                           postinc0	equ	0xFEE
 10741                           fsr0h	equ	0xFEA
 10742                           fsr0l	equ	0xFE9
 10743                           wreg	equ	0xFE8
 10744                           postinc1	equ	0xFE6
 10745                           postdec1	equ	0xFE5
 10746                           fsr1h	equ	0xFE2
 10747                           fsr1l	equ	0xFE1
 10748                           bsr	equ	0xFE0
 10749                           postinc2	equ	0xFDE
 10750                           postdec2	equ	0xFDD
 10751                           fsr2h	equ	0xFDA
 10752                           fsr2l	equ	0xFD9
 10753                           status	equ	0xFD8
 10754                           
 10755 ;; *************** function _TMR_Timer0Start *****************
 10756 ;; Defined at:
 10757 ;;		line 363 in file "TIMERS.c"
 10758 ;; Parameters:    Size  Location     Type
 10759 ;;		None
 10760 ;; Auto vars:     Size  Location     Type
 10761 ;;		None
 10762 ;; Return value:  Size  Location     Type
 10763 ;;		None               void
 10764 ;; Registers used:
 10765 ;;		wreg, status,2, cstack
 10766 ;; Tracked objects:
 10767 ;;		On entry : 0/0
 10768 ;;		On exit  : 0/0
 10769 ;;		Unchanged: 0/0
 10770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10771 ;;      Params:         0       0       0       0       0
 10772 ;;      Locals:         0       0       0       0       0
 10773 ;;      Temps:          0       0       0       0       0
 10774 ;;      Totals:         0       0       0       0       0
 10775 ;;Total ram usage:        0 bytes
 10776 ;; Hardware stack levels used:    1
 10777 ;; Hardware stack levels required when called:    2
 10778 ;; This function calls:
 10779 ;;		i2_TMR_ResetTimer0
 10780 ;;		i2_TMR_Timer0
 10781 ;; This function is called by:
 10782 ;;		_high_isr
 10783 ;; This function uses a non-reentrant model
 10784 ;;
 10785                           
 10786                           	psect	text79
 10787  00217C                     __ptext79:
 10788                           	opt stack 0
 10789  00217C                     _TMR_Timer0Start:
 10790                           	opt stack 17
 10791                           
 10792                           ;TIMERS.c: 365: TMR_Timer0(0);
 10793                           
 10794                           ;incstack = 0
 10795  00217C  0E00               	movlw	0
 10796  00217E  EC52  F010         	call	i2_TMR_Timer0
 10797                           
 10798                           ;TIMERS.c: 366: TMR_ResetTimer0();
 10799  002182  ECA1  F00E         	call	i2_TMR_ResetTimer0	;wreg free
 10800                           
 10801                           ;TIMERS.c: 367: TMR_Timer0(1);
 10802  002186  0E01               	movlw	1
 10803  002188  EC52  F010         	call	i2_TMR_Timer0
 10804  00218C  0012               	return		;funcret
 10805  00218E                     __end_of_TMR_Timer0Start:
 10806                           	opt stack 0
 10807                           pclatu	equ	0xFFB
 10808                           pclath	equ	0xFFA
 10809                           tblptru	equ	0xFF8
 10810                           tblptrh	equ	0xFF7
 10811                           tblptrl	equ	0xFF6
 10812                           tablat	equ	0xFF5
 10813                           prodh	equ	0xFF4
 10814                           prodl	equ	0xFF3
 10815                           intcon	equ	0xFF2
 10816                           intcon2	equ	0xFF1
 10817                           intcon3	equ	0xFF0
 10818                           postinc0	equ	0xFEE
 10819                           fsr0h	equ	0xFEA
 10820                           fsr0l	equ	0xFE9
 10821                           wreg	equ	0xFE8
 10822                           postinc1	equ	0xFE6
 10823                           postdec1	equ	0xFE5
 10824                           fsr1h	equ	0xFE2
 10825                           fsr1l	equ	0xFE1
 10826                           bsr	equ	0xFE0
 10827                           postinc2	equ	0xFDE
 10828                           postdec2	equ	0xFDD
 10829                           fsr2h	equ	0xFDA
 10830                           fsr2l	equ	0xFD9
 10831                           status	equ	0xFD8
 10832                           
 10833 ;; *************** function i2_TMR_ResetTimer0 *****************
 10834 ;; Defined at:
 10835 ;;		line 144 in file "TIMERS.c"
 10836 ;; Parameters:    Size  Location     Type
 10837 ;;		None
 10838 ;; Auto vars:     Size  Location     Type
 10839 ;;  TMR_ResetTim    1    1[BANK0 ] unsigned char 
 10840 ;; Return value:  Size  Location     Type
 10841 ;;		None               void
 10842 ;; Registers used:
 10843 ;;		wreg, status,2, cstack
 10844 ;; Tracked objects:
 10845 ;;		On entry : 0/0
 10846 ;;		On exit  : 0/0
 10847 ;;		Unchanged: 0/0
 10848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10849 ;;      Params:         0       0       0       0       0
 10850 ;;      Locals:         0       1       0       0       0
 10851 ;;      Temps:          0       0       0       0       0
 10852 ;;      Totals:         0       1       0       0       0
 10853 ;;Total ram usage:        1 bytes
 10854 ;; Hardware stack levels used:    1
 10855 ;; Hardware stack levels required when called:    1
 10856 ;; This function calls:
 10857 ;;		i2_TMR_Timer0
 10858 ;; This function is called by:
 10859 ;;		_high_isr
 10860 ;;		_TMR_Timer0Start
 10861 ;; This function uses a non-reentrant model
 10862 ;;
 10863                           
 10864                           	psect	text80
 10865  001D42                     __ptext80:
 10866                           	opt stack 0
 10867  001D42                     i2_TMR_ResetTimer0:
 10868                           	opt stack 18
 10869                           
 10870                           ;TIMERS.c: 146: unsigned char TimerOn = T0CONbits.TMR0ON;
 10871                           
 10872                           ;incstack = 0
 10873  001D42  0E00               	movlw	0
 10874  001D44  BED5               	btfsc	4053,7,c	;volatile
 10875  001D46  0E01               	movlw	1
 10876  001D48  0100               	movlb	0	; () banked
 10877  001D4A  6F81               	movwf	i2TMR_ResetTimer0@TimerOn& (0+255),b
 10878                           
 10879                           ; BSR set to: 0
 10880                           ;TIMERS.c: 148: TMR_Timer0(0);
 10881  001D4C  0E00               	movlw	0
 10882  001D4E  EC52  F010         	call	i2_TMR_Timer0
 10883                           
 10884                           ;TIMERS.c: 149: TMR0H = 0;
 10885  001D52  0E00               	movlw	0
 10886  001D54  6ED7               	movwf	4055,c	;volatile
 10887                           
 10888                           ;TIMERS.c: 150: TMR0L = 2;
 10889  001D56  0E02               	movlw	2
 10890  001D58  6ED6               	movwf	4054,c	;volatile
 10891                           
 10892                           ;TIMERS.c: 151: if(TimerOn)
 10893  001D5A  0100               	movlb	0	; () banked
 10894  001D5C  5181               	movf	i2TMR_ResetTimer0@TimerOn& (0+255),w,b
 10895  001D5E  0100               	movlb	0	; () banked
 10896  001D60  B4D8               	btfsc	status,2,c
 10897  001D62  0012               	return	
 10898                           
 10899                           ; BSR set to: 0
 10900                           ;TIMERS.c: 152: {
 10901                           ;TIMERS.c: 153: TMR_Timer0(1);
 10902  001D64  0E01               	movlw	1
 10903  001D66  EC52  F010         	call	i2_TMR_Timer0
 10904  001D6A  0012               	return	
 10905  001D6C  0012               	return		;funcret
 10906  001D6E                     __end_ofi2_TMR_ResetTimer0:
 10907                           	opt stack 0
 10908                           pclatu	equ	0xFFB
 10909                           pclath	equ	0xFFA
 10910                           tblptru	equ	0xFF8
 10911                           tblptrh	equ	0xFF7
 10912                           tblptrl	equ	0xFF6
 10913                           tablat	equ	0xFF5
 10914                           prodh	equ	0xFF4
 10915                           prodl	equ	0xFF3
 10916                           intcon	equ	0xFF2
 10917                           intcon2	equ	0xFF1
 10918                           intcon3	equ	0xFF0
 10919                           postinc0	equ	0xFEE
 10920                           fsr0h	equ	0xFEA
 10921                           fsr0l	equ	0xFE9
 10922                           wreg	equ	0xFE8
 10923                           postinc1	equ	0xFE6
 10924                           postdec1	equ	0xFE5
 10925                           fsr1h	equ	0xFE2
 10926                           fsr1l	equ	0xFE1
 10927                           bsr	equ	0xFE0
 10928                           postinc2	equ	0xFDE
 10929                           postdec2	equ	0xFDD
 10930                           fsr2h	equ	0xFDA
 10931                           fsr2l	equ	0xFD9
 10932                           status	equ	0xFD8
 10933                           
 10934 ;; *************** function i2_TMR_Timer0 *****************
 10935 ;; Defined at:
 10936 ;;		line 87 in file "TIMERS.c"
 10937 ;; Parameters:    Size  Location     Type
 10938 ;;  state           1    wreg     unsigned char 
 10939 ;; Auto vars:     Size  Location     Type
 10940 ;;  state           1    0[BANK0 ] unsigned char 
 10941 ;; Return value:  Size  Location     Type
 10942 ;;		None               void
 10943 ;; Registers used:
 10944 ;;		wreg, status,2
 10945 ;; Tracked objects:
 10946 ;;		On entry : 0/0
 10947 ;;		On exit  : 0/0
 10948 ;;		Unchanged: 0/0
 10949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10950 ;;      Params:         0       0       0       0       0
 10951 ;;      Locals:         0       1       0       0       0
 10952 ;;      Temps:          0       0       0       0       0
 10953 ;;      Totals:         0       1       0       0       0
 10954 ;;Total ram usage:        1 bytes
 10955 ;; Hardware stack levels used:    1
 10956 ;; This function calls:
 10957 ;;		Nothing
 10958 ;; This function is called by:
 10959 ;;		_high_isr
 10960 ;;		_TMR_Timer0Start
 10961 ;;		i2_TMR_ResetTimer0
 10962 ;; This function uses a non-reentrant model
 10963 ;;
 10964                           
 10965                           	psect	text81
 10966  0020A4                     __ptext81:
 10967                           	opt stack 0
 10968  0020A4                     i2_TMR_Timer0:
 10969                           	opt stack 19
 10970                           
 10971                           ;incstack = 0
 10972                           ;i2TMR_Timer0@state stored from wreg
 10973  0020A4  0100               	movlb	0	; () banked
 10974  0020A6  6F80               	movwf	i2TMR_Timer0@state& (0+255),b
 10975                           
 10976                           ; BSR set to: 0
 10977                           ;TIMERS.c: 89: if(state)
 10978  0020A8  0100               	movlb	0	; () banked
 10979  0020AA  5180               	movf	i2TMR_Timer0@state& (0+255),w,b
 10980  0020AC  0100               	movlb	0	; () banked
 10981  0020AE  B4D8               	btfsc	status,2,c
 10982  0020B0  D002               	goto	i2l983
 10983                           
 10984                           ; BSR set to: 0
 10985                           ;TIMERS.c: 90: {
 10986                           ;TIMERS.c: 92: T0CONbits.TMR0ON = 1;
 10987  0020B2  8ED5               	bsf	4053,7,c	;volatile
 10988                           
 10989                           ;TIMERS.c: 93: }
 10990  0020B4  0012               	return	
 10991  0020B6                     i2l983:
 10992                           
 10993                           ; BSR set to: 0
 10994                           ;TIMERS.c: 94: else
 10995                           ;TIMERS.c: 95: {
 10996                           ;TIMERS.c: 97: T0CONbits.TMR0ON = 0;
 10997  0020B6  9ED5               	bcf	4053,7,c	;volatile
 10998  0020B8  0012               	return	
 10999                           
 11000                           ; BSR set to: 0
 11001                           
 11002                           ; BSR set to: 0
 11003  0020BA  0012               	return		;funcret
 11004  0020BC                     __end_ofi2_TMR_Timer0:
 11005                           	opt stack 0
 11006                           pclatu	equ	0xFFB
 11007                           pclath	equ	0xFFA
 11008                           tblptru	equ	0xFF8
 11009                           tblptrh	equ	0xFF7
 11010                           tblptrl	equ	0xFF6
 11011                           tablat	equ	0xFF5
 11012                           prodh	equ	0xFF4
 11013                           prodl	equ	0xFF3
 11014                           intcon	equ	0xFF2
 11015                           intcon2	equ	0xFF1
 11016                           intcon3	equ	0xFF0
 11017                           postinc0	equ	0xFEE
 11018                           fsr0h	equ	0xFEA
 11019                           fsr0l	equ	0xFE9
 11020                           wreg	equ	0xFE8
 11021                           postinc1	equ	0xFE6
 11022                           postdec1	equ	0xFE5
 11023                           fsr1h	equ	0xFE2
 11024                           fsr1l	equ	0xFE1
 11025                           bsr	equ	0xFE0
 11026                           postinc2	equ	0xFDE
 11027                           postdec2	equ	0xFDD
 11028                           fsr2h	equ	0xFDA
 11029                           fsr2l	equ	0xFD9
 11030                           status	equ	0xFD8
 11031                           
 11032 ;; *************** function _RF_ResetData *****************
 11033 ;; Defined at:
 11034 ;;		line 221 in file "RF.c"
 11035 ;; Parameters:    Size  Location     Type
 11036 ;;		None
 11037 ;; Auto vars:     Size  Location     Type
 11038 ;;		None
 11039 ;; Return value:  Size  Location     Type
 11040 ;;		None               void
 11041 ;; Registers used:
 11042 ;;		wreg, status,2
 11043 ;; Tracked objects:
 11044 ;;		On entry : 0/0
 11045 ;;		On exit  : 0/0
 11046 ;;		Unchanged: 0/0
 11047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11048 ;;      Params:         0       0       0       0       0
 11049 ;;      Locals:         0       0       0       0       0
 11050 ;;      Temps:          0       0       0       0       0
 11051 ;;      Totals:         0       0       0       0       0
 11052 ;;Total ram usage:        0 bytes
 11053 ;; Hardware stack levels used:    1
 11054 ;; This function calls:
 11055 ;;		Nothing
 11056 ;; This function is called by:
 11057 ;;		_high_isr
 11058 ;; This function uses a non-reentrant model
 11059 ;;
 11060                           
 11061                           	psect	text82
 11062  0021D4                     __ptext82:
 11063                           	opt stack 0
 11064  0021D4                     _RF_ResetData:
 11065                           	opt stack 19
 11066                           
 11067                           ;RF.c: 223: RF_DataPlace = 0;
 11068                           
 11069                           ; BSR set to: 0
 11070                           ;incstack = 0
 11071  0021D4  0E00               	movlw	0
 11072  0021D6  0100               	movlb	0	; () banked
 11073  0021D8  6FC7               	movwf	_RF_DataPlace& (0+255),b
 11074                           
 11075                           ;RF.c: 224: RFStarted = 0;
 11076  0021DA  0E00               	movlw	0
 11077  0021DC  0100               	movlb	0	; () banked
 11078  0021DE  6FC4               	movwf	_RFStarted& (0+255),b
 11079                           
 11080                           ; BSR set to: 0
 11081  0021E0  0012               	return		;funcret
 11082  0021E2                     __end_of_RF_ResetData:
 11083                           	opt stack 0
 11084                           pclatu	equ	0xFFB
 11085                           pclath	equ	0xFFA
 11086                           tblptru	equ	0xFF8
 11087                           tblptrh	equ	0xFF7
 11088                           tblptrl	equ	0xFF6
 11089                           tablat	equ	0xFF5
 11090                           prodh	equ	0xFF4
 11091                           prodl	equ	0xFF3
 11092                           intcon	equ	0xFF2
 11093                           intcon2	equ	0xFF1
 11094                           intcon3	equ	0xFF0
 11095                           postinc0	equ	0xFEE
 11096                           fsr0h	equ	0xFEA
 11097                           fsr0l	equ	0xFE9
 11098                           wreg	equ	0xFE8
 11099                           postinc1	equ	0xFE6
 11100                           postdec1	equ	0xFE5
 11101                           fsr1h	equ	0xFE2
 11102                           fsr1l	equ	0xFE1
 11103                           bsr	equ	0xFE0
 11104                           postinc2	equ	0xFDE
 11105                           postdec2	equ	0xFDD
 11106                           fsr2h	equ	0xFDA
 11107                           fsr2l	equ	0xFD9
 11108                           status	equ	0xFD8
 11109                           
 11110 ;; *************** function _RF_CheckCode *****************
 11111 ;; Defined at:
 11112 ;;		line 270 in file "RF.c"
 11113 ;; Parameters:    Size  Location     Type
 11114 ;;		None
 11115 ;; Auto vars:     Size  Location     Type
 11116 ;;  High            3   29[BANK0 ] unsigned char 
 11117 ;;  Low             3   26[BANK0 ] unsigned char 
 11118 ;;  i               1   32[BANK0 ] unsigned char 
 11119 ;; Return value:  Size  Location     Type
 11120 ;;                  1    wreg      unsigned char 
 11121 ;; Registers used:
 11122 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11123 ;; Tracked objects:
 11124 ;;		On entry : 0/0
 11125 ;;		On exit  : 0/0
 11126 ;;		Unchanged: 0/0
 11127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11128 ;;      Params:         0       0       0       0       0
 11129 ;;      Locals:         0       7       0       0       0
 11130 ;;      Temps:          0       0       0       0       0
 11131 ;;      Totals:         0       7       0       0       0
 11132 ;;Total ram usage:        7 bytes
 11133 ;; Hardware stack levels used:    1
 11134 ;; Hardware stack levels required when called:    2
 11135 ;; This function calls:
 11136 ;;		i2_MSC_BufferCopyInt
 11137 ;;		i2___ftge
 11138 ;;		i2___ftmul
 11139 ;;		i2___lwtoft
 11140 ;; This function is called by:
 11141 ;;		_high_isr
 11142 ;; This function uses a non-reentrant model
 11143 ;;
 11144                           
 11145                           	psect	text83
 11146  00057E                     __ptext83:
 11147                           	opt stack 0
 11148  00057E                     _RF_CheckCode:
 11149                           	opt stack 17
 11150                           
 11151                           ;RF.c: 272: unsigned char i;
 11152                           ;RF.c: 273: double Low = 0.0;
 11153                           
 11154                           ; BSR set to: 0
 11155                           ;incstack = 0
 11156  00057E  0E00               	movlw	0
 11157  000580  0100               	movlb	0	; () banked
 11158  000582  6F9A               	movwf	RF_CheckCode@Low& (0+255),b
 11159  000584  0E00               	movlw	0
 11160  000586  0100               	movlb	0	; () banked
 11161  000588  6F9B               	movwf	(RF_CheckCode@Low+1)& (0+255),b
 11162  00058A  0E00               	movlw	0
 11163  00058C  0100               	movlb	0	; () banked
 11164  00058E  6F9C               	movwf	(RF_CheckCode@Low+2)& (0+255),b
 11165                           
 11166                           ;RF.c: 274: double High = 0.0;
 11167  000590  0E00               	movlw	0
 11168  000592  0100               	movlb	0	; () banked
 11169  000594  6F9D               	movwf	RF_CheckCode@High& (0+255),b
 11170  000596  0E00               	movlw	0
 11171  000598  0100               	movlb	0	; () banked
 11172  00059A  6F9E               	movwf	(RF_CheckCode@High+1)& (0+255),b
 11173  00059C  0E00               	movlw	0
 11174  00059E  0100               	movlb	0	; () banked
 11175  0005A0  6F9F               	movwf	(RF_CheckCode@High+2)& (0+255),b
 11176                           
 11177                           ; BSR set to: 0
 11178                           ;RF.c: 276: if(System_State == 8)
 11179  0005A2  0E08               	movlw	8
 11180  0005A4  0100               	movlb	0	; () banked
 11181  0005A6  19CE               	xorwf	_System_State& (0+255),w,b
 11182  0005A8  A4D8               	btfss	status,2,c
 11183  0005AA  D0E9               	goto	i2l5012
 11184                           
 11185                           ; BSR set to: 0
 11186                           ;RF.c: 277: {
 11187                           ;RF.c: 278: for(i=0; i<RF_CodeSize;i++)
 11188  0005AC  0E00               	movlw	0
 11189  0005AE  0100               	movlb	0	; () banked
 11190  0005B0  6FA0               	movwf	RF_CheckCode@i& (0+255),b
 11191  0005B2  D0DD               	goto	i2l5004
 11192  0005B4                     i2l4990:
 11193                           
 11194                           ; BSR set to: 0
 11195                           ;RF.c: 279: {
 11196                           ;RF.c: 280: if(i == 0)
 11197  0005B4  0100               	movlb	0	; () banked
 11198  0005B6  51A0               	movf	RF_CheckCode@i& (0+255),w,b
 11199  0005B8  0100               	movlb	0	; () banked
 11200  0005BA  A4D8               	btfss	status,2,c
 11201  0005BC  D047               	goto	i2l4994
 11202                           
 11203                           ; BSR set to: 0
 11204                           ;RF.c: 281: {
 11205                           ;RF.c: 282: Low = (double)RF_SavedTiming[i] * (1.0 - 0.05);
 11206  0005BE  0100               	movlb	0	; () banked
 11207  0005C0  51A0               	movf	RF_CheckCode@i& (0+255),w,b
 11208  0005C2  0D02               	mullw	2
 11209  0005C4  0E78               	movlw	low _RF_SavedTiming
 11210  0005C6  24F3               	addwf	prodl,w,c
 11211  0005C8  6ED9               	movwf	fsr2l,c
 11212  0005CA  0E02               	movlw	high _RF_SavedTiming
 11213  0005CC  20F4               	addwfc	prodh,w,c
 11214  0005CE  6EDA               	movwf	fsr2h,c
 11215  0005D0  CFDE F088          	movff	postinc2,i2___lwtoft@c
 11216  0005D4  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 11217  0005D8  ECB7  F00E         	call	i2___lwtoft	;wreg free
 11218  0005DC  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 11219  0005E0  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 11220  0005E4  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 11221  0005E8  0E33               	movlw	51
 11222  0005EA  0100               	movlb	0	; () banked
 11223  0005EC  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 11224  0005EE  0E73               	movlw	115
 11225  0005F0  0100               	movlb	0	; () banked
 11226  0005F2  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 11227  0005F4  0E3F               	movlw	63
 11228  0005F6  0100               	movlb	0	; () banked
 11229  0005F8  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 11230  0005FA  ECA8  F005         	call	i2___ftmul	;wreg free
 11231  0005FE  C08B  F09A         	movff	?i2___ftmul,RF_CheckCode@Low
 11232  000602  C08C  F09B         	movff	?i2___ftmul+1,RF_CheckCode@Low+1
 11233  000606  C08D  F09C         	movff	?i2___ftmul+2,RF_CheckCode@Low+2
 11234                           
 11235                           ;RF.c: 283: High = (double)RF_SavedTiming[i] * (1.0 + 0.05);
 11236  00060A  0100               	movlb	0	; () banked
 11237  00060C  51A0               	movf	RF_CheckCode@i& (0+255),w,b
 11238  00060E  0D02               	mullw	2
 11239  000610  0E78               	movlw	low _RF_SavedTiming
 11240  000612  24F3               	addwf	prodl,w,c
 11241  000614  6ED9               	movwf	fsr2l,c
 11242  000616  0E02               	movlw	high _RF_SavedTiming
 11243  000618  20F4               	addwfc	prodh,w,c
 11244  00061A  6EDA               	movwf	fsr2h,c
 11245  00061C  CFDE F088          	movff	postinc2,i2___lwtoft@c
 11246  000620  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 11247  000624  ECB7  F00E         	call	i2___lwtoft	;wreg free
 11248  000628  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 11249  00062C  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 11250  000630  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 11251  000634  0E66               	movlw	102
 11252  000636  0100               	movlb	0	; () banked
 11253  000638  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 11254  00063A  0E86               	movlw	134
 11255  00063C  0100               	movlb	0	; () banked
 11256  00063E  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 11257  000640  0E3F               	movlw	63
 11258  000642  0100               	movlb	0	; () banked
 11259  000644  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 11260  000646  ECA8  F005         	call	i2___ftmul	;wreg free
 11261  00064A  D046               	goto	L5
 11262  00064C                     i2l4994:
 11263                           
 11264                           ;RF.c: 285: else
 11265                           ;RF.c: 286: {
 11266                           ;RF.c: 287: Low = (double)RF_SavedTiming[i] * (1.0 - 0.5);
 11267  00064C  0100               	movlb	0	; () banked
 11268  00064E  51A0               	movf	RF_CheckCode@i& (0+255),w,b
 11269  000650  0D02               	mullw	2
 11270  000652  0E78               	movlw	low _RF_SavedTiming
 11271  000654  24F3               	addwf	prodl,w,c
 11272  000656  6ED9               	movwf	fsr2l,c
 11273  000658  0E02               	movlw	high _RF_SavedTiming
 11274  00065A  20F4               	addwfc	prodh,w,c
 11275  00065C  6EDA               	movwf	fsr2h,c
 11276  00065E  CFDE F088          	movff	postinc2,i2___lwtoft@c
 11277  000662  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 11278  000666  ECB7  F00E         	call	i2___lwtoft	;wreg free
 11279  00066A  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 11280  00066E  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 11281  000672  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 11282  000676  0E00               	movlw	0
 11283  000678  0100               	movlb	0	; () banked
 11284  00067A  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 11285  00067C  0E00               	movlw	0
 11286  00067E  0100               	movlb	0	; () banked
 11287  000680  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 11288  000682  0E3F               	movlw	63
 11289  000684  0100               	movlb	0	; () banked
 11290  000686  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 11291  000688  ECA8  F005         	call	i2___ftmul	;wreg free
 11292  00068C  C08B  F09A         	movff	?i2___ftmul,RF_CheckCode@Low
 11293  000690  C08C  F09B         	movff	?i2___ftmul+1,RF_CheckCode@Low+1
 11294  000694  C08D  F09C         	movff	?i2___ftmul+2,RF_CheckCode@Low+2
 11295                           
 11296                           ;RF.c: 288: High = (double)RF_SavedTiming[i] * (1.0 + 0.5);
 11297  000698  0100               	movlb	0	; () banked
 11298  00069A  51A0               	movf	RF_CheckCode@i& (0+255),w,b
 11299  00069C  0D02               	mullw	2
 11300  00069E  0E78               	movlw	low _RF_SavedTiming
 11301  0006A0  24F3               	addwf	prodl,w,c
 11302  0006A2  6ED9               	movwf	fsr2l,c
 11303  0006A4  0E02               	movlw	high _RF_SavedTiming
 11304  0006A6  20F4               	addwfc	prodh,w,c
 11305  0006A8  6EDA               	movwf	fsr2h,c
 11306  0006AA  CFDE F088          	movff	postinc2,i2___lwtoft@c
 11307  0006AE  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 11308  0006B2  ECB7  F00E         	call	i2___lwtoft	;wreg free
 11309  0006B6  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 11310  0006BA  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 11311  0006BE  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 11312  0006C2  0E00               	movlw	0
 11313  0006C4  0100               	movlb	0	; () banked
 11314  0006C6  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 11315  0006C8  0EC0               	movlw	192
 11316  0006CA  0100               	movlb	0	; () banked
 11317  0006CC  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 11318  0006CE  0E3F               	movlw	63
 11319  0006D0  0100               	movlb	0	; () banked
 11320  0006D2  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 11321  0006D4  ECA8  F005         	call	i2___ftmul	;wreg free
 11322  0006D8                     L5:
 11323  0006D8  C08B  F09D         	movff	?i2___ftmul,RF_CheckCode@High
 11324  0006DC  C08C  F09E         	movff	?i2___ftmul+1,RF_CheckCode@High+1
 11325  0006E0  C08D  F09F         	movff	?i2___ftmul+2,RF_CheckCode@High+2
 11326                           
 11327                           ;RF.c: 289: }
 11328                           ;RF.c: 291: if((double)RF_DataTiming[i] < Low || (double)RF_DataTiming[i] > High )
 11329  0006E4  0100               	movlb	0	; () banked
 11330  0006E6  51A0               	movf	RF_CheckCode@i& (0+255),w,b
 11331  0006E8  0D02               	mullw	2
 11332  0006EA  0E00               	movlw	low _RF_DataTiming
 11333  0006EC  24F3               	addwf	prodl,w,c
 11334  0006EE  6ED9               	movwf	fsr2l,c
 11335  0006F0  0E02               	movlw	high _RF_DataTiming
 11336  0006F2  20F4               	addwfc	prodh,w,c
 11337  0006F4  6EDA               	movwf	fsr2h,c
 11338  0006F6  CFDE F088          	movff	postinc2,i2___lwtoft@c
 11339  0006FA  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 11340  0006FE  ECB7  F00E         	call	i2___lwtoft	;wreg free
 11341  000702  C088  F08B         	movff	?i2___lwtoft,i2___ftge@ff1
 11342  000706  C089  F08C         	movff	?i2___lwtoft+1,i2___ftge@ff1+1
 11343  00070A  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftge@ff1+2
 11344  00070E  C09A  F08E         	movff	RF_CheckCode@Low,i2___ftge@ff2
 11345  000712  C09B  F08F         	movff	RF_CheckCode@Low+1,i2___ftge@ff2+1
 11346  000716  C09C  F090         	movff	RF_CheckCode@Low+2,i2___ftge@ff2+2
 11347  00071A  ECF5  F008         	call	i2___ftge	;wreg free
 11348  00071E  0100               	movlb	0	; () banked
 11349  000720  A0D8               	btfss	status,0,c
 11350  000722  D020               	goto	i2l4998
 11351                           
 11352                           ; BSR set to: 0
 11353  000724  C09D  F08B         	movff	RF_CheckCode@High,i2___ftge@ff1
 11354  000728  C09E  F08C         	movff	RF_CheckCode@High+1,i2___ftge@ff1+1
 11355  00072C  C09F  F08D         	movff	RF_CheckCode@High+2,i2___ftge@ff1+2
 11356  000730  0100               	movlb	0	; () banked
 11357  000732  51A0               	movf	RF_CheckCode@i& (0+255),w,b
 11358  000734  0D02               	mullw	2
 11359  000736  0E00               	movlw	low _RF_DataTiming
 11360  000738  24F3               	addwf	prodl,w,c
 11361  00073A  6ED9               	movwf	fsr2l,c
 11362  00073C  0E02               	movlw	high _RF_DataTiming
 11363  00073E  20F4               	addwfc	prodh,w,c
 11364  000740  6EDA               	movwf	fsr2h,c
 11365  000742  CFDE F088          	movff	postinc2,i2___lwtoft@c
 11366  000746  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 11367  00074A  ECB7  F00E         	call	i2___lwtoft	;wreg free
 11368  00074E  C088  F08E         	movff	?i2___lwtoft,i2___ftge@ff2
 11369  000752  C089  F08F         	movff	?i2___lwtoft+1,i2___ftge@ff2+1
 11370  000756  C08A  F090         	movff	?i2___lwtoft+2,i2___ftge@ff2+2
 11371  00075A  ECF5  F008         	call	i2___ftge	;wreg free
 11372  00075E  0100               	movlb	0	; () banked
 11373  000760  B0D8               	btfsc	status,0,c
 11374  000762  D002               	goto	i2l5002
 11375  000764                     i2l4998:
 11376                           
 11377                           ; BSR set to: 0
 11378                           ;RF.c: 292: {
 11379                           ;RF.c: 293: return 0;
 11380  000764  0E00               	movlw	0
 11381                           
 11382                           ; BSR set to: 0
 11383  000766  0012               	return	
 11384  000768                     i2l5002:
 11385                           
 11386                           ; BSR set to: 0
 11387  000768  0100               	movlb	0	; () banked
 11388  00076A  2BA0               	incf	RF_CheckCode@i& (0+255),f,b
 11389  00076C  D000               	goto	i2l5004
 11390  00076E                     i2l5004:
 11391                           
 11392                           ; BSR set to: 0
 11393  00076E  0100               	movlb	0	; () banked
 11394  000770  51C5               	movf	_RF_CodeSize& (0+255),w,b
 11395  000772  0100               	movlb	0	; () banked
 11396  000774  5DA0               	subwf	RF_CheckCode@i& (0+255),w,b
 11397  000776  A0D8               	btfss	status,0,c
 11398  000778  D71D               	goto	i2l4990
 11399                           
 11400                           ; BSR set to: 0
 11401                           ;RF.c: 294: }
 11402                           ;RF.c: 295: }
 11403                           ;RF.c: 296: return 1;
 11404                           
 11405                           ; BSR set to: 0
 11406  00077A  0E01               	movlw	1
 11407                           
 11408                           ; BSR set to: 0
 11409                           ;RF.c: 297: }
 11410                           
 11411                           ; BSR set to: 0
 11412  00077C  0012               	return	
 11413  00077E                     i2l5012:
 11414                           
 11415                           ; BSR set to: 0
 11416                           ;RF.c: 298: else
 11417                           ;RF.c: 299: {
 11418                           ;RF.c: 300: if(RF_DataPlace >= 20)
 11419  00077E  0E13               	movlw	19
 11420  000780  0100               	movlb	0	; () banked
 11421  000782  65C7               	cpfsgt	_RF_DataPlace& (0+255),b
 11422  000784  D01C               	goto	i2l5018
 11423                           
 11424                           ; BSR set to: 0
 11425                           ;RF.c: 301: {
 11426                           ;RF.c: 303: MSC_BufferCopyInt(&RF_DataTiming,&RF_SavedTiming,60,0);
 11427  000786  0E00               	movlw	low _RF_DataTiming
 11428  000788  0100               	movlb	0	; () banked
 11429  00078A  6F86               	movwf	i2MSC_BufferCopyInt@from& (0+255),b
 11430  00078C  0E02               	movlw	high _RF_DataTiming
 11431  00078E  0100               	movlb	0	; () banked
 11432  000790  6F87               	movwf	(i2MSC_BufferCopyInt@from+1)& (0+255),b
 11433  000792  0E78               	movlw	low _RF_SavedTiming
 11434  000794  0100               	movlb	0	; () banked
 11435  000796  6F88               	movwf	i2MSC_BufferCopyInt@to& (0+255),b
 11436  000798  0E02               	movlw	high _RF_SavedTiming
 11437  00079A  0100               	movlb	0	; () banked
 11438  00079C  6F89               	movwf	(i2MSC_BufferCopyInt@to+1)& (0+255),b
 11439  00079E  0E00               	movlw	0
 11440  0007A0  0100               	movlb	0	; () banked
 11441  0007A2  6F8B               	movwf	(i2MSC_BufferCopyInt@count+1)& (0+255),b
 11442  0007A4  0E3C               	movlw	60
 11443  0007A6  6F8A               	movwf	i2MSC_BufferCopyInt@count& (0+255),b
 11444  0007A8  0E00               	movlw	0
 11445  0007AA  0100               	movlb	0	; () banked
 11446  0007AC  6F8D               	movwf	(i2MSC_BufferCopyInt@shift+1)& (0+255),b
 11447  0007AE  0E00               	movlw	0
 11448  0007B0  6F8C               	movwf	i2MSC_BufferCopyInt@shift& (0+255),b
 11449  0007B2  EC80  F00A         	call	i2_MSC_BufferCopyInt	;wreg free
 11450                           
 11451                           ;RF.c: 304: RF_Saved = 90;
 11452  0007B6  0E5A               	movlw	90
 11453  0007B8  0100               	movlb	0	; () banked
 11454  0007BA  6FCD               	movwf	_RF_Saved& (0+255),b
 11455  0007BC  D000               	goto	i2l5018
 11456  0007BE                     i2l5018:
 11457                           
 11458                           ; BSR set to: 0
 11459                           ;RF.c: 305: }
 11460                           ;RF.c: 306: return 1;
 11461  0007BE  0E01               	movlw	1
 11462                           
 11463                           ; BSR set to: 0
 11464  0007C0  0012               	return	
 11465                           
 11466                           ; BSR set to: 0
 11467                           
 11468                           ; BSR set to: 0
 11469  0007C2  0012               	return		;funcret
 11470  0007C4                     __end_of_RF_CheckCode:
 11471                           	opt stack 0
 11472                           pclatu	equ	0xFFB
 11473                           pclath	equ	0xFFA
 11474                           tblptru	equ	0xFF8
 11475                           tblptrh	equ	0xFF7
 11476                           tblptrl	equ	0xFF6
 11477                           tablat	equ	0xFF5
 11478                           prodh	equ	0xFF4
 11479                           prodl	equ	0xFF3
 11480                           intcon	equ	0xFF2
 11481                           intcon2	equ	0xFF1
 11482                           intcon3	equ	0xFF0
 11483                           postinc0	equ	0xFEE
 11484                           fsr0h	equ	0xFEA
 11485                           fsr0l	equ	0xFE9
 11486                           wreg	equ	0xFE8
 11487                           postinc1	equ	0xFE6
 11488                           postdec1	equ	0xFE5
 11489                           fsr1h	equ	0xFE2
 11490                           fsr1l	equ	0xFE1
 11491                           bsr	equ	0xFE0
 11492                           postinc2	equ	0xFDE
 11493                           postdec2	equ	0xFDD
 11494                           fsr2h	equ	0xFDA
 11495                           fsr2l	equ	0xFD9
 11496                           status	equ	0xFD8
 11497                           
 11498 ;; *************** function i2___lwtoft *****************
 11499 ;; Defined at:
 11500 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
 11501 ;; Parameters:    Size  Location     Type
 11502 ;;  c               2    8[BANK0 ] unsigned int 
 11503 ;; Auto vars:     Size  Location     Type
 11504 ;;		None
 11505 ;; Return value:  Size  Location     Type
 11506 ;;                  3    8[BANK0 ] float 
 11507 ;; Registers used:
 11508 ;;		wreg, status,2, status,0, cstack
 11509 ;; Tracked objects:
 11510 ;;		On entry : 0/0
 11511 ;;		On exit  : 0/0
 11512 ;;		Unchanged: 0/0
 11513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11514 ;;      Params:         0       3       0       0       0
 11515 ;;      Locals:         0       0       0       0       0
 11516 ;;      Temps:          0       0       0       0       0
 11517 ;;      Totals:         0       3       0       0       0
 11518 ;;Total ram usage:        3 bytes
 11519 ;; Hardware stack levels used:    1
 11520 ;; Hardware stack levels required when called:    1
 11521 ;; This function calls:
 11522 ;;		i2___ftpack
 11523 ;; This function is called by:
 11524 ;;		_RF_CheckCode
 11525 ;; This function uses a non-reentrant model
 11526 ;;
 11527                           
 11528                           	psect	text84
 11529  001D6E                     __ptext84:
 11530                           	opt stack 0
 11531  001D6E                     i2___lwtoft:
 11532                           	opt stack 17
 11533                           
 11534                           ; BSR set to: 0
 11535                           ;incstack = 0
 11536  001D6E  C088  F080         	movff	i2___lwtoft@c,i2___ftpack@arg
 11537  001D72  C089  F081         	movff	i2___lwtoft@c+1,i2___ftpack@arg+1
 11538  001D76  0100               	movlb	0	; () banked
 11539  001D78  6B82               	clrf	(i2___ftpack@arg+2)& (0+255),b
 11540  001D7A  0E8E               	movlw	142
 11541  001D7C  0100               	movlb	0	; () banked
 11542  001D7E  6F83               	movwf	i2___ftpack@exp& (0+255),b
 11543  001D80  0E00               	movlw	0
 11544  001D82  0100               	movlb	0	; () banked
 11545  001D84  6F84               	movwf	i2___ftpack@sign& (0+255),b
 11546  001D86  EC07  F007         	call	i2___ftpack	;wreg free
 11547  001D8A  C080  F088         	movff	?i2___ftpack,?i2___lwtoft
 11548  001D8E  C081  F089         	movff	?i2___ftpack+1,?i2___lwtoft+1
 11549  001D92  C082  F08A         	movff	?i2___ftpack+2,?i2___lwtoft+2
 11550  001D96  0012               	return	
 11551  001D98  0012               	return		;funcret
 11552  001D9A                     __end_ofi2___lwtoft:
 11553                           	opt stack 0
 11554                           pclatu	equ	0xFFB
 11555                           pclath	equ	0xFFA
 11556                           tblptru	equ	0xFF8
 11557                           tblptrh	equ	0xFF7
 11558                           tblptrl	equ	0xFF6
 11559                           tablat	equ	0xFF5
 11560                           prodh	equ	0xFF4
 11561                           prodl	equ	0xFF3
 11562                           intcon	equ	0xFF2
 11563                           intcon2	equ	0xFF1
 11564                           intcon3	equ	0xFF0
 11565                           postinc0	equ	0xFEE
 11566                           fsr0h	equ	0xFEA
 11567                           fsr0l	equ	0xFE9
 11568                           wreg	equ	0xFE8
 11569                           postinc1	equ	0xFE6
 11570                           postdec1	equ	0xFE5
 11571                           fsr1h	equ	0xFE2
 11572                           fsr1l	equ	0xFE1
 11573                           bsr	equ	0xFE0
 11574                           postinc2	equ	0xFDE
 11575                           postdec2	equ	0xFDD
 11576                           fsr2h	equ	0xFDA
 11577                           fsr2l	equ	0xFD9
 11578                           status	equ	0xFD8
 11579                           
 11580 ;; *************** function i2___ftmul *****************
 11581 ;; Defined at:
 11582 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 11583 ;; Parameters:    Size  Location     Type
 11584 ;;  f1              3   11[BANK0 ] float 
 11585 ;;  f2              3   14[BANK0 ] float 
 11586 ;; Auto vars:     Size  Location     Type
 11587 ;;  __ftmul         3   21[BANK0 ] unsigned um
 11588 ;;  __ftmul         1   25[BANK0 ] unsigned char 
 11589 ;;  __ftmul         1   24[BANK0 ] unsigned char 
 11590 ;;  __ftmul         1   20[BANK0 ] unsigned char 
 11591 ;; Return value:  Size  Location     Type
 11592 ;;                  3   11[BANK0 ] float 
 11593 ;; Registers used:
 11594 ;;		wreg, status,2, status,0, cstack
 11595 ;; Tracked objects:
 11596 ;;		On entry : 0/0
 11597 ;;		On exit  : 0/0
 11598 ;;		Unchanged: 0/0
 11599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11600 ;;      Params:         0       6       0       0       0
 11601 ;;      Locals:         0       6       0       0       0
 11602 ;;      Temps:          0       3       0       0       0
 11603 ;;      Totals:         0      15       0       0       0
 11604 ;;Total ram usage:       15 bytes
 11605 ;; Hardware stack levels used:    1
 11606 ;; Hardware stack levels required when called:    1
 11607 ;; This function calls:
 11608 ;;		i2___ftpack
 11609 ;; This function is called by:
 11610 ;;		_RF_CheckCode
 11611 ;; This function uses a non-reentrant model
 11612 ;;
 11613                           
 11614                           	psect	text85
 11615  000B50                     __ptext85:
 11616                           	opt stack 0
 11617  000B50                     i2___ftmul:
 11618                           	opt stack 17
 11619                           
 11620                           ;incstack = 0
 11621  000B50  C08D  F091         	movff	i2___ftmul@f1+2,??i2___ftmul
 11622  000B54  0100               	movlb	0	; () banked
 11623  000B56  6B92               	clrf	(??i2___ftmul+1)& (0+255),b
 11624  000B58  6B93               	clrf	(??i2___ftmul+2)& (0+255),b
 11625  000B5A  0100               	movlb	0	; () banked
 11626  000B5C  358C               	rlcf	(i2___ftmul@f1+1)& (0+255),w,b
 11627  000B5E  0100               	movlb	0	; () banked
 11628  000B60  3791               	rlcf	??i2___ftmul& (0+255),f,b
 11629  000B62  E301               	bnc	u480_41
 11630  000B64  8192               	bsf	(??i2___ftmul+1)& (0+255),0,b
 11631  000B66                     u480_41:
 11632  000B66  0100               	movlb	0	; () banked
 11633  000B68  5191               	movf	??i2___ftmul& (0+255),w,b
 11634  000B6A  0100               	movlb	0	; () banked
 11635  000B6C  6F94               	movwf	i2___ftmul@exp& (0+255),b
 11636  000B6E  0100               	movlb	0	; () banked
 11637  000B70  5194               	movf	i2___ftmul@exp& (0+255),w,b
 11638  000B72  A4D8               	btfss	status,2,c
 11639  000B74  D00A               	goto	i2l4812
 11640                           
 11641                           ; BSR set to: 0
 11642  000B76  0E00               	movlw	0
 11643  000B78  0100               	movlb	0	; () banked
 11644  000B7A  6F8B               	movwf	?i2___ftmul& (0+255),b
 11645  000B7C  0E00               	movlw	0
 11646  000B7E  0100               	movlb	0	; () banked
 11647  000B80  6F8C               	movwf	(?i2___ftmul+1)& (0+255),b
 11648  000B82  0E00               	movlw	0
 11649  000B84  0100               	movlb	0	; () banked
 11650  000B86  6F8D               	movwf	(?i2___ftmul+2)& (0+255),b
 11651                           
 11652                           ; BSR set to: 0
 11653  000B88  0012               	return	
 11654  000B8A                     i2l4812:
 11655                           
 11656                           ; BSR set to: 0
 11657  000B8A  C090  F091         	movff	i2___ftmul@f2+2,??i2___ftmul
 11658  000B8E  0100               	movlb	0	; () banked
 11659  000B90  6B92               	clrf	(??i2___ftmul+1)& (0+255),b
 11660  000B92  6B93               	clrf	(??i2___ftmul+2)& (0+255),b
 11661  000B94  0100               	movlb	0	; () banked
 11662  000B96  358F               	rlcf	(i2___ftmul@f2+1)& (0+255),w,b
 11663  000B98  0100               	movlb	0	; () banked
 11664  000B9A  3791               	rlcf	??i2___ftmul& (0+255),f,b
 11665  000B9C  E301               	bnc	u482_41
 11666  000B9E  8192               	bsf	(??i2___ftmul+1)& (0+255),0,b
 11667  000BA0                     u482_41:
 11668  000BA0  0100               	movlb	0	; () banked
 11669  000BA2  5191               	movf	??i2___ftmul& (0+255),w,b
 11670  000BA4  0100               	movlb	0	; () banked
 11671  000BA6  6F99               	movwf	i2___ftmul@sign& (0+255),b
 11672  000BA8  0100               	movlb	0	; () banked
 11673  000BAA  5199               	movf	i2___ftmul@sign& (0+255),w,b
 11674  000BAC  A4D8               	btfss	status,2,c
 11675  000BAE  D00A               	goto	i2l4818
 11676                           
 11677                           ; BSR set to: 0
 11678  000BB0  0E00               	movlw	0
 11679  000BB2  0100               	movlb	0	; () banked
 11680  000BB4  6F8B               	movwf	?i2___ftmul& (0+255),b
 11681  000BB6  0E00               	movlw	0
 11682  000BB8  0100               	movlb	0	; () banked
 11683  000BBA  6F8C               	movwf	(?i2___ftmul+1)& (0+255),b
 11684  000BBC  0E00               	movlw	0
 11685  000BBE  0100               	movlb	0	; () banked
 11686  000BC0  6F8D               	movwf	(?i2___ftmul+2)& (0+255),b
 11687                           
 11688                           ; BSR set to: 0
 11689  000BC2  0012               	return	
 11690  000BC4                     i2l4818:
 11691                           
 11692                           ; BSR set to: 0
 11693  000BC4  0100               	movlb	0	; () banked
 11694  000BC6  5199               	movf	i2___ftmul@sign& (0+255),w,b
 11695  000BC8  0F7B               	addlw	123
 11696  000BCA  0100               	movlb	0	; () banked
 11697  000BCC  2794               	addwf	i2___ftmul@exp& (0+255),f,b
 11698                           
 11699                           ; BSR set to: 0
 11700  000BCE  C08D  F099         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 11701  000BD2  0100               	movlb	0	; () banked
 11702  000BD4  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 11703  000BD6  0100               	movlb	0	; () banked
 11704  000BD8  1B99               	xorwf	i2___ftmul@sign& (0+255),f,b
 11705  000BDA  0E80               	movlw	128
 11706  000BDC  0100               	movlb	0	; () banked
 11707  000BDE  1799               	andwf	i2___ftmul@sign& (0+255),f,b
 11708                           
 11709                           ; BSR set to: 0
 11710  000BE0  0100               	movlb	0	; () banked
 11711  000BE2  8F8C               	bsf	(i2___ftmul@f1+1)& (0+255),7,b
 11712                           
 11713                           ; BSR set to: 0
 11714  000BE4  0100               	movlb	0	; () banked
 11715  000BE6  8F8F               	bsf	(i2___ftmul@f2+1)& (0+255),7,b
 11716                           
 11717                           ; BSR set to: 0
 11718  000BE8  0EFF               	movlw	255
 11719  000BEA  0100               	movlb	0	; () banked
 11720  000BEC  178E               	andwf	i2___ftmul@f2& (0+255),f,b
 11721  000BEE  0EFF               	movlw	255
 11722  000BF0  0100               	movlb	0	; () banked
 11723  000BF2  178F               	andwf	(i2___ftmul@f2+1)& (0+255),f,b
 11724  000BF4  0E00               	movlw	0
 11725  000BF6  0100               	movlb	0	; () banked
 11726  000BF8  1790               	andwf	(i2___ftmul@f2+2)& (0+255),f,b
 11727                           
 11728                           ; BSR set to: 0
 11729  000BFA  0E00               	movlw	0
 11730  000BFC  0100               	movlb	0	; () banked
 11731  000BFE  6F95               	movwf	i2___ftmul@f3_as_product& (0+255),b
 11732  000C00  0E00               	movlw	0
 11733  000C02  0100               	movlb	0	; () banked
 11734  000C04  6F96               	movwf	(i2___ftmul@f3_as_product+1)& (0+255),b
 11735  000C06  0E00               	movlw	0
 11736  000C08  0100               	movlb	0	; () banked
 11737  000C0A  6F97               	movwf	(i2___ftmul@f3_as_product+2)& (0+255),b
 11738                           
 11739                           ; BSR set to: 0
 11740  000C0C  0E07               	movlw	7
 11741  000C0E  0100               	movlb	0	; () banked
 11742  000C10  6F98               	movwf	i2___ftmul@cntr& (0+255),b
 11743  000C12  D000               	goto	i2l4832
 11744  000C14                     i2l4832:
 11745                           
 11746                           ; BSR set to: 0
 11747  000C14  0100               	movlb	0	; () banked
 11748  000C16  A18B               	btfss	i2___ftmul@f1& (0+255),0,b
 11749  000C18  D00D               	goto	i2l4836
 11750                           
 11751                           ; BSR set to: 0
 11752  000C1A  0100               	movlb	0	; () banked
 11753  000C1C  518E               	movf	i2___ftmul@f2& (0+255),w,b
 11754  000C1E  0100               	movlb	0	; () banked
 11755  000C20  2795               	addwf	i2___ftmul@f3_as_product& (0+255),f,b
 11756  000C22  0100               	movlb	0	; () banked
 11757  000C24  518F               	movf	(i2___ftmul@f2+1)& (0+255),w,b
 11758  000C26  0100               	movlb	0	; () banked
 11759  000C28  2396               	addwfc	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 11760  000C2A  0100               	movlb	0	; () banked
 11761  000C2C  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 11762  000C2E  0100               	movlb	0	; () banked
 11763  000C30  2397               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 11764  000C32  D000               	goto	i2l4836
 11765  000C34                     i2l4836:
 11766                           
 11767                           ; BSR set to: 0
 11768  000C34  0100               	movlb	0	; () banked
 11769  000C36  90D8               	bcf	status,0,c
 11770  000C38  338D               	rrcf	(i2___ftmul@f1+2)& (0+255),f,b
 11771  000C3A  338C               	rrcf	(i2___ftmul@f1+1)& (0+255),f,b
 11772  000C3C  338B               	rrcf	i2___ftmul@f1& (0+255),f,b
 11773  000C3E  0100               	movlb	0	; () banked
 11774  000C40  90D8               	bcf	status,0,c
 11775  000C42  378E               	rlcf	i2___ftmul@f2& (0+255),f,b
 11776  000C44  378F               	rlcf	(i2___ftmul@f2+1)& (0+255),f,b
 11777  000C46  3790               	rlcf	(i2___ftmul@f2+2)& (0+255),f,b
 11778                           
 11779                           ; BSR set to: 0
 11780  000C48  0100               	movlb	0	; () banked
 11781  000C4A  2F98               	decfsz	i2___ftmul@cntr& (0+255),f,b
 11782  000C4C  D7E3               	goto	i2l4832
 11783  000C4E  D000               	goto	i2l4840
 11784  000C50                     i2l4840:
 11785                           
 11786                           ; BSR set to: 0
 11787  000C50  0E09               	movlw	9
 11788  000C52  0100               	movlb	0	; () banked
 11789  000C54  6F98               	movwf	i2___ftmul@cntr& (0+255),b
 11790  000C56  D000               	goto	i2l4842
 11791  000C58                     i2l4842:
 11792                           
 11793                           ; BSR set to: 0
 11794  000C58  0100               	movlb	0	; () banked
 11795  000C5A  A18B               	btfss	i2___ftmul@f1& (0+255),0,b
 11796  000C5C  D00D               	goto	i2l4846
 11797                           
 11798                           ; BSR set to: 0
 11799  000C5E  0100               	movlb	0	; () banked
 11800  000C60  518E               	movf	i2___ftmul@f2& (0+255),w,b
 11801  000C62  0100               	movlb	0	; () banked
 11802  000C64  2795               	addwf	i2___ftmul@f3_as_product& (0+255),f,b
 11803  000C66  0100               	movlb	0	; () banked
 11804  000C68  518F               	movf	(i2___ftmul@f2+1)& (0+255),w,b
 11805  000C6A  0100               	movlb	0	; () banked
 11806  000C6C  2396               	addwfc	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 11807  000C6E  0100               	movlb	0	; () banked
 11808  000C70  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 11809  000C72  0100               	movlb	0	; () banked
 11810  000C74  2397               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 11811  000C76  D000               	goto	i2l4846
 11812  000C78                     i2l4846:
 11813                           
 11814                           ; BSR set to: 0
 11815  000C78  0100               	movlb	0	; () banked
 11816  000C7A  90D8               	bcf	status,0,c
 11817  000C7C  338D               	rrcf	(i2___ftmul@f1+2)& (0+255),f,b
 11818  000C7E  338C               	rrcf	(i2___ftmul@f1+1)& (0+255),f,b
 11819  000C80  338B               	rrcf	i2___ftmul@f1& (0+255),f,b
 11820  000C82  0100               	movlb	0	; () banked
 11821  000C84  90D8               	bcf	status,0,c
 11822  000C86  3397               	rrcf	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 11823  000C88  3396               	rrcf	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 11824  000C8A  3395               	rrcf	i2___ftmul@f3_as_product& (0+255),f,b
 11825                           
 11826                           ; BSR set to: 0
 11827  000C8C  0100               	movlb	0	; () banked
 11828  000C8E  2F98               	decfsz	i2___ftmul@cntr& (0+255),f,b
 11829  000C90  D7E3               	goto	i2l4842
 11830  000C92  D000               	goto	i2l4850
 11831  000C94                     i2l4850:
 11832                           
 11833                           ; BSR set to: 0
 11834  000C94  C095  F080         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 11835  000C98  C096  F081         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 11836  000C9C  C097  F082         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 11837  000CA0  C094  F083         	movff	i2___ftmul@exp,i2___ftpack@exp
 11838  000CA4  C099  F084         	movff	i2___ftmul@sign,i2___ftpack@sign
 11839  000CA8  EC07  F007         	call	i2___ftpack	;wreg free
 11840  000CAC  C080  F08B         	movff	?i2___ftpack,?i2___ftmul
 11841  000CB0  C081  F08C         	movff	?i2___ftpack+1,?i2___ftmul+1
 11842  000CB4  C082  F08D         	movff	?i2___ftpack+2,?i2___ftmul+2
 11843  000CB8  0012               	return	
 11844  000CBA  0012               	return		;funcret
 11845  000CBC                     __end_ofi2___ftmul:
 11846                           	opt stack 0
 11847                           pclatu	equ	0xFFB
 11848                           pclath	equ	0xFFA
 11849                           tblptru	equ	0xFF8
 11850                           tblptrh	equ	0xFF7
 11851                           tblptrl	equ	0xFF6
 11852                           tablat	equ	0xFF5
 11853                           prodh	equ	0xFF4
 11854                           prodl	equ	0xFF3
 11855                           intcon	equ	0xFF2
 11856                           intcon2	equ	0xFF1
 11857                           intcon3	equ	0xFF0
 11858                           postinc0	equ	0xFEE
 11859                           fsr0h	equ	0xFEA
 11860                           fsr0l	equ	0xFE9
 11861                           wreg	equ	0xFE8
 11862                           postinc1	equ	0xFE6
 11863                           postdec1	equ	0xFE5
 11864                           fsr1h	equ	0xFE2
 11865                           fsr1l	equ	0xFE1
 11866                           bsr	equ	0xFE0
 11867                           postinc2	equ	0xFDE
 11868                           postdec2	equ	0xFDD
 11869                           fsr2h	equ	0xFDA
 11870                           fsr2l	equ	0xFD9
 11871                           status	equ	0xFD8
 11872                           
 11873 ;; *************** function i2___ftpack *****************
 11874 ;; Defined at:
 11875 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 11876 ;; Parameters:    Size  Location     Type
 11877 ;;  arg             3    0[BANK0 ] unsigned um
 11878 ;;  exp             1    3[BANK0 ] unsigned char 
 11879 ;;  sign            1    4[BANK0 ] unsigned char 
 11880 ;; Auto vars:     Size  Location     Type
 11881 ;;		None
 11882 ;; Return value:  Size  Location     Type
 11883 ;;                  3    0[BANK0 ] float 
 11884 ;; Registers used:
 11885 ;;		wreg, status,2, status,0
 11886 ;; Tracked objects:
 11887 ;;		On entry : 0/0
 11888 ;;		On exit  : 0/0
 11889 ;;		Unchanged: 0/0
 11890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11891 ;;      Params:         0       5       0       0       0
 11892 ;;      Locals:         0       0       0       0       0
 11893 ;;      Temps:          0       3       0       0       0
 11894 ;;      Totals:         0       8       0       0       0
 11895 ;;Total ram usage:        8 bytes
 11896 ;; Hardware stack levels used:    1
 11897 ;; This function calls:
 11898 ;;		Nothing
 11899 ;; This function is called by:
 11900 ;;		i2___ftmul
 11901 ;;		i2___lwtoft
 11902 ;; This function uses a non-reentrant model
 11903 ;;
 11904                           
 11905                           	psect	text86
 11906  000E0E                     __ptext86:
 11907                           	opt stack 0
 11908  000E0E                     i2___ftpack:
 11909                           	opt stack 17
 11910                           
 11911                           ;incstack = 0
 11912  000E0E  0100               	movlb	0	; () banked
 11913  000E10  5183               	movf	i2___ftpack@exp& (0+255),w,b
 11914  000E12  0100               	movlb	0	; () banked
 11915  000E14  B4D8               	btfsc	status,2,c
 11916  000E16  D008               	goto	i2l4368
 11917                           
 11918                           ; BSR set to: 0
 11919  000E18  0100               	movlb	0	; () banked
 11920  000E1A  5180               	movf	i2___ftpack@arg& (0+255),w,b
 11921  000E1C  0100               	movlb	0	; () banked
 11922  000E1E  1181               	iorwf	(i2___ftpack@arg+1)& (0+255),w,b
 11923  000E20  0100               	movlb	0	; () banked
 11924  000E22  1182               	iorwf	(i2___ftpack@arg+2)& (0+255),w,b
 11925  000E24  A4D8               	btfss	status,2,c
 11926  000E26  D013               	goto	i2l4374
 11927  000E28                     i2l4368:
 11928                           
 11929                           ; BSR set to: 0
 11930  000E28  0E00               	movlw	0
 11931  000E2A  0100               	movlb	0	; () banked
 11932  000E2C  6F80               	movwf	?i2___ftpack& (0+255),b
 11933  000E2E  0E00               	movlw	0
 11934  000E30  0100               	movlb	0	; () banked
 11935  000E32  6F81               	movwf	(?i2___ftpack+1)& (0+255),b
 11936  000E34  0E00               	movlw	0
 11937  000E36  0100               	movlb	0	; () banked
 11938  000E38  6F82               	movwf	(?i2___ftpack+2)& (0+255),b
 11939                           
 11940                           ; BSR set to: 0
 11941  000E3A  0012               	return	
 11942                           
 11943                           ; BSR set to: 0
 11944  000E3C  D008               	goto	i2l4374
 11945  000E3E                     i2l4372:
 11946                           
 11947                           ; BSR set to: 0
 11948  000E3E  0100               	movlb	0	; () banked
 11949  000E40  2B83               	incf	i2___ftpack@exp& (0+255),f,b
 11950  000E42  0100               	movlb	0	; () banked
 11951  000E44  90D8               	bcf	status,0,c
 11952  000E46  3382               	rrcf	(i2___ftpack@arg+2)& (0+255),f,b
 11953  000E48  3381               	rrcf	(i2___ftpack@arg+1)& (0+255),f,b
 11954  000E4A  3380               	rrcf	i2___ftpack@arg& (0+255),f,b
 11955  000E4C  D000               	goto	i2l4374
 11956  000E4E                     i2l4374:
 11957                           
 11958                           ; BSR set to: 0
 11959  000E4E  0E00               	movlw	0
 11960  000E50  0100               	movlb	0	; () banked
 11961  000E52  1580               	andwf	i2___ftpack@arg& (0+255),w,b
 11962  000E54  0100               	movlb	0	; () banked
 11963  000E56  6F85               	movwf	??i2___ftpack& (0+255),b
 11964  000E58  0E00               	movlw	0
 11965  000E5A  0100               	movlb	0	; () banked
 11966  000E5C  1581               	andwf	(i2___ftpack@arg+1)& (0+255),w,b
 11967  000E5E  0100               	movlb	0	; () banked
 11968  000E60  6F86               	movwf	(??i2___ftpack+1)& (0+255),b
 11969  000E62  0EFE               	movlw	254
 11970  000E64  0100               	movlb	0	; () banked
 11971  000E66  1582               	andwf	(i2___ftpack@arg+2)& (0+255),w,b
 11972  000E68  0100               	movlb	0	; () banked
 11973  000E6A  6F87               	movwf	(??i2___ftpack+2)& (0+255),b
 11974  000E6C  0100               	movlb	0	; () banked
 11975  000E6E  5185               	movf	??i2___ftpack& (0+255),w,b
 11976  000E70  0100               	movlb	0	; () banked
 11977  000E72  1186               	iorwf	(??i2___ftpack+1)& (0+255),w,b
 11978  000E74  0100               	movlb	0	; () banked
 11979  000E76  1187               	iorwf	(??i2___ftpack+2)& (0+255),w,b
 11980  000E78  B4D8               	btfsc	status,2,c
 11981  000E7A  D013               	goto	i2l4380
 11982  000E7C  D7E0               	goto	i2l4372
 11983                           
 11984                           ; BSR set to: 0
 11985  000E7E  D011               	goto	i2l4380
 11986  000E80                     i2l4376:
 11987                           
 11988                           ; BSR set to: 0
 11989  000E80  0100               	movlb	0	; () banked
 11990  000E82  2B83               	incf	i2___ftpack@exp& (0+255),f,b
 11991                           
 11992                           ; BSR set to: 0
 11993  000E84  0E01               	movlw	1
 11994  000E86  0100               	movlb	0	; () banked
 11995  000E88  2780               	addwf	i2___ftpack@arg& (0+255),f,b
 11996  000E8A  0E00               	movlw	0
 11997  000E8C  0100               	movlb	0	; () banked
 11998  000E8E  2381               	addwfc	(i2___ftpack@arg+1)& (0+255),f,b
 11999  000E90  0E00               	movlw	0
 12000  000E92  0100               	movlb	0	; () banked
 12001  000E94  2382               	addwfc	(i2___ftpack@arg+2)& (0+255),f,b
 12002  000E96  0100               	movlb	0	; () banked
 12003  000E98  90D8               	bcf	status,0,c
 12004  000E9A  3382               	rrcf	(i2___ftpack@arg+2)& (0+255),f,b
 12005  000E9C  3381               	rrcf	(i2___ftpack@arg+1)& (0+255),f,b
 12006  000E9E  3380               	rrcf	i2___ftpack@arg& (0+255),f,b
 12007  000EA0  D000               	goto	i2l4380
 12008  000EA2                     i2l4380:
 12009                           
 12010                           ; BSR set to: 0
 12011  000EA2  0E00               	movlw	0
 12012  000EA4  0100               	movlb	0	; () banked
 12013  000EA6  1580               	andwf	i2___ftpack@arg& (0+255),w,b
 12014  000EA8  0100               	movlb	0	; () banked
 12015  000EAA  6F85               	movwf	??i2___ftpack& (0+255),b
 12016  000EAC  0E00               	movlw	0
 12017  000EAE  0100               	movlb	0	; () banked
 12018  000EB0  1581               	andwf	(i2___ftpack@arg+1)& (0+255),w,b
 12019  000EB2  0100               	movlb	0	; () banked
 12020  000EB4  6F86               	movwf	(??i2___ftpack+1)& (0+255),b
 12021  000EB6  0EFF               	movlw	255
 12022  000EB8  0100               	movlb	0	; () banked
 12023  000EBA  1582               	andwf	(i2___ftpack@arg+2)& (0+255),w,b
 12024  000EBC  0100               	movlb	0	; () banked
 12025  000EBE  6F87               	movwf	(??i2___ftpack+2)& (0+255),b
 12026  000EC0  0100               	movlb	0	; () banked
 12027  000EC2  5185               	movf	??i2___ftpack& (0+255),w,b
 12028  000EC4  0100               	movlb	0	; () banked
 12029  000EC6  1186               	iorwf	(??i2___ftpack+1)& (0+255),w,b
 12030  000EC8  0100               	movlb	0	; () banked
 12031  000ECA  1187               	iorwf	(??i2___ftpack+2)& (0+255),w,b
 12032  000ECC  B4D8               	btfsc	status,2,c
 12033  000ECE  D00A               	goto	i2l4384
 12034  000ED0  D7D7               	goto	i2l4376
 12035                           
 12036                           ; BSR set to: 0
 12037  000ED2  D008               	goto	i2l4384
 12038  000ED4                     i2l4382:
 12039                           
 12040                           ; BSR set to: 0
 12041  000ED4  0100               	movlb	0	; () banked
 12042  000ED6  0783               	decf	i2___ftpack@exp& (0+255),f,b
 12043  000ED8  0100               	movlb	0	; () banked
 12044  000EDA  90D8               	bcf	status,0,c
 12045  000EDC  3780               	rlcf	i2___ftpack@arg& (0+255),f,b
 12046  000EDE  3781               	rlcf	(i2___ftpack@arg+1)& (0+255),f,b
 12047  000EE0  3782               	rlcf	(i2___ftpack@arg+2)& (0+255),f,b
 12048  000EE2  D000               	goto	i2l4384
 12049  000EE4                     i2l4384:
 12050                           
 12051                           ; BSR set to: 0
 12052  000EE4  0100               	movlb	0	; () banked
 12053  000EE6  BF81               	btfsc	(i2___ftpack@arg+1)& (0+255),7,b
 12054  000EE8  D005               	goto	i2l1441
 12055                           
 12056                           ; BSR set to: 0
 12057  000EEA  0E02               	movlw	2
 12058  000EEC  0100               	movlb	0	; () banked
 12059  000EEE  6183               	cpfslt	i2___ftpack@exp& (0+255),b
 12060  000EF0  D7F1               	goto	i2l4382
 12061  000EF2  D000               	goto	i2l1441
 12062  000EF4                     i2l1441:
 12063                           
 12064                           ; BSR set to: 0
 12065  000EF4  0100               	movlb	0	; () banked
 12066  000EF6  B183               	btfsc	i2___ftpack@exp& (0+255),0,b
 12067  000EF8  D003               	goto	i2l4390
 12068                           
 12069                           ; BSR set to: 0
 12070  000EFA  0100               	movlb	0	; () banked
 12071  000EFC  9F81               	bcf	(i2___ftpack@arg+1)& (0+255),7,b
 12072  000EFE  D000               	goto	i2l4390
 12073  000F00                     i2l4390:
 12074                           
 12075                           ; BSR set to: 0
 12076  000F00  0100               	movlb	0	; () banked
 12077  000F02  90D8               	bcf	status,0,c
 12078  000F04  3383               	rrcf	i2___ftpack@exp& (0+255),f,b
 12079  000F06  0100               	movlb	0	; () banked
 12080  000F08  5183               	movf	i2___ftpack@exp& (0+255),w,b
 12081  000F0A  0100               	movlb	0	; () banked
 12082  000F0C  1382               	iorwf	(i2___ftpack@arg+2)& (0+255),f,b
 12083                           
 12084                           ; BSR set to: 0
 12085  000F0E  0100               	movlb	0	; () banked
 12086  000F10  5184               	movf	i2___ftpack@sign& (0+255),w,b
 12087  000F12  0100               	movlb	0	; () banked
 12088  000F14  B4D8               	btfsc	status,2,c
 12089  000F16  D003               	goto	i2l4396
 12090                           
 12091                           ; BSR set to: 0
 12092  000F18  0100               	movlb	0	; () banked
 12093  000F1A  8F82               	bsf	(i2___ftpack@arg+2)& (0+255),7,b
 12094  000F1C  D000               	goto	i2l4396
 12095  000F1E                     i2l4396:
 12096                           
 12097                           ; BSR set to: 0
 12098  000F1E  C080  F080         	movff	i2___ftpack@arg,?i2___ftpack
 12099  000F22  C081  F081         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 12100  000F26  C082  F082         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 12101  000F2A  0012               	return	
 12102                           
 12103                           ; BSR set to: 0
 12104                           
 12105                           ; BSR set to: 0
 12106  000F2C  0012               	return		;funcret
 12107  000F2E                     __end_ofi2___ftpack:
 12108                           	opt stack 0
 12109                           pclatu	equ	0xFFB
 12110                           pclath	equ	0xFFA
 12111                           tblptru	equ	0xFF8
 12112                           tblptrh	equ	0xFF7
 12113                           tblptrl	equ	0xFF6
 12114                           tablat	equ	0xFF5
 12115                           prodh	equ	0xFF4
 12116                           prodl	equ	0xFF3
 12117                           intcon	equ	0xFF2
 12118                           intcon2	equ	0xFF1
 12119                           intcon3	equ	0xFF0
 12120                           postinc0	equ	0xFEE
 12121                           fsr0h	equ	0xFEA
 12122                           fsr0l	equ	0xFE9
 12123                           wreg	equ	0xFE8
 12124                           postinc1	equ	0xFE6
 12125                           postdec1	equ	0xFE5
 12126                           fsr1h	equ	0xFE2
 12127                           fsr1l	equ	0xFE1
 12128                           bsr	equ	0xFE0
 12129                           postinc2	equ	0xFDE
 12130                           postdec2	equ	0xFDD
 12131                           fsr2h	equ	0xFDA
 12132                           fsr2l	equ	0xFD9
 12133                           status	equ	0xFD8
 12134                           
 12135 ;; *************** function i2___ftge *****************
 12136 ;; Defined at:
 12137 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 12138 ;; Parameters:    Size  Location     Type
 12139 ;;  ff1             3   11[BANK0 ] float 
 12140 ;;  ff2             3   14[BANK0 ] float 
 12141 ;; Auto vars:     Size  Location     Type
 12142 ;;		None
 12143 ;; Return value:  Size  Location     Type
 12144 ;;		None               void
 12145 ;; Registers used:
 12146 ;;		wreg, status,2, status,0
 12147 ;; Tracked objects:
 12148 ;;		On entry : 0/0
 12149 ;;		On exit  : 0/0
 12150 ;;		Unchanged: 0/0
 12151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12152 ;;      Params:         0       6       0       0       0
 12153 ;;      Locals:         0       0       0       0       0
 12154 ;;      Temps:          0       3       0       0       0
 12155 ;;      Totals:         0       9       0       0       0
 12156 ;;Total ram usage:        9 bytes
 12157 ;; Hardware stack levels used:    1
 12158 ;; This function calls:
 12159 ;;		Nothing
 12160 ;; This function is called by:
 12161 ;;		_RF_CheckCode
 12162 ;; This function uses a non-reentrant model
 12163 ;;
 12164                           
 12165                           	psect	text87
 12166  0011EA                     __ptext87:
 12167                           	opt stack 0
 12168  0011EA                     i2___ftge:
 12169                           	opt stack 18
 12170                           
 12171                           ; BSR set to: 0
 12172                           ;incstack = 0
 12173  0011EA  0100               	movlb	0	; () banked
 12174  0011EC  AF8D               	btfss	(i2___ftge@ff1+2)& (0+255),7,b
 12175  0011EE  D01E               	goto	i2l4792
 12176                           
 12177                           ; BSR set to: 0
 12178  0011F0  C08B  F091         	movff	i2___ftge@ff1,??i2___ftge
 12179  0011F4  C08C  F092         	movff	i2___ftge@ff1+1,??i2___ftge+1
 12180  0011F8  C08D  F093         	movff	i2___ftge@ff1+2,??i2___ftge+2
 12181  0011FC  0100               	movlb	0	; () banked
 12182  0011FE  1F91               	comf	??i2___ftge& (0+255),f,b
 12183  001200  1F92               	comf	(??i2___ftge+1)& (0+255),f,b
 12184  001202  1F93               	comf	(??i2___ftge+2)& (0+255),f,b
 12185  001204  2B91               	incf	??i2___ftge& (0+255),f,b
 12186  001206  0E00               	movlw	0
 12187  001208  2392               	addwfc	(??i2___ftge+1)& (0+255),f,b
 12188  00120A  2393               	addwfc	(??i2___ftge+2)& (0+255),f,b
 12189  00120C  0E00               	movlw	0
 12190  00120E  0100               	movlb	0	; () banked
 12191  001210  2591               	addwf	??i2___ftge& (0+255),w,b
 12192  001212  0100               	movlb	0	; () banked
 12193  001214  6F8B               	movwf	i2___ftge@ff1& (0+255),b
 12194  001216  0E00               	movlw	0
 12195  001218  0100               	movlb	0	; () banked
 12196  00121A  2192               	addwfc	(??i2___ftge+1)& (0+255),w,b
 12197  00121C  0100               	movlb	0	; () banked
 12198  00121E  6F8C               	movwf	(i2___ftge@ff1+1)& (0+255),b
 12199  001220  0E80               	movlw	128
 12200  001222  0100               	movlb	0	; () banked
 12201  001224  2193               	addwfc	(??i2___ftge+2)& (0+255),w,b
 12202  001226  0100               	movlb	0	; () banked
 12203  001228  6F8D               	movwf	(i2___ftge@ff1+2)& (0+255),b
 12204  00122A  D000               	goto	i2l4792
 12205  00122C                     i2l4792:
 12206                           
 12207                           ; BSR set to: 0
 12208  00122C  0100               	movlb	0	; () banked
 12209  00122E  AF90               	btfss	(i2___ftge@ff2+2)& (0+255),7,b
 12210  001230  D01E               	goto	i2l4796
 12211                           
 12212                           ; BSR set to: 0
 12213  001232  C08E  F091         	movff	i2___ftge@ff2,??i2___ftge
 12214  001236  C08F  F092         	movff	i2___ftge@ff2+1,??i2___ftge+1
 12215  00123A  C090  F093         	movff	i2___ftge@ff2+2,??i2___ftge+2
 12216  00123E  0100               	movlb	0	; () banked
 12217  001240  1F91               	comf	??i2___ftge& (0+255),f,b
 12218  001242  1F92               	comf	(??i2___ftge+1)& (0+255),f,b
 12219  001244  1F93               	comf	(??i2___ftge+2)& (0+255),f,b
 12220  001246  2B91               	incf	??i2___ftge& (0+255),f,b
 12221  001248  0E00               	movlw	0
 12222  00124A  2392               	addwfc	(??i2___ftge+1)& (0+255),f,b
 12223  00124C  2393               	addwfc	(??i2___ftge+2)& (0+255),f,b
 12224  00124E  0E00               	movlw	0
 12225  001250  0100               	movlb	0	; () banked
 12226  001252  2591               	addwf	??i2___ftge& (0+255),w,b
 12227  001254  0100               	movlb	0	; () banked
 12228  001256  6F8E               	movwf	i2___ftge@ff2& (0+255),b
 12229  001258  0E00               	movlw	0
 12230  00125A  0100               	movlb	0	; () banked
 12231  00125C  2192               	addwfc	(??i2___ftge+1)& (0+255),w,b
 12232  00125E  0100               	movlb	0	; () banked
 12233  001260  6F8F               	movwf	(i2___ftge@ff2+1)& (0+255),b
 12234  001262  0E80               	movlw	128
 12235  001264  0100               	movlb	0	; () banked
 12236  001266  2193               	addwfc	(??i2___ftge+2)& (0+255),w,b
 12237  001268  0100               	movlb	0	; () banked
 12238  00126A  6F90               	movwf	(i2___ftge@ff2+2)& (0+255),b
 12239  00126C  D000               	goto	i2l4796
 12240  00126E                     i2l4796:
 12241                           
 12242                           ; BSR set to: 0
 12243  00126E  0E00               	movlw	0
 12244  001270  0100               	movlb	0	; () banked
 12245  001272  1B8B               	xorwf	i2___ftge@ff1& (0+255),f,b
 12246  001274  0E00               	movlw	0
 12247  001276  0100               	movlb	0	; () banked
 12248  001278  1B8C               	xorwf	(i2___ftge@ff1+1)& (0+255),f,b
 12249  00127A  0E80               	movlw	128
 12250  00127C  0100               	movlb	0	; () banked
 12251  00127E  1B8D               	xorwf	(i2___ftge@ff1+2)& (0+255),f,b
 12252                           
 12253                           ; BSR set to: 0
 12254  001280  0E00               	movlw	0
 12255  001282  0100               	movlb	0	; () banked
 12256  001284  1B8E               	xorwf	i2___ftge@ff2& (0+255),f,b
 12257  001286  0E00               	movlw	0
 12258  001288  0100               	movlb	0	; () banked
 12259  00128A  1B8F               	xorwf	(i2___ftge@ff2+1)& (0+255),f,b
 12260  00128C  0E80               	movlw	128
 12261  00128E  0100               	movlb	0	; () banked
 12262  001290  1B90               	xorwf	(i2___ftge@ff2+2)& (0+255),f,b
 12263  001292  0100               	movlb	0	; () banked
 12264  001294  518E               	movf	i2___ftge@ff2& (0+255),w,b
 12265  001296  0100               	movlb	0	; () banked
 12266  001298  5D8B               	subwf	i2___ftge@ff1& (0+255),w,b
 12267  00129A  0100               	movlb	0	; () banked
 12268  00129C  518F               	movf	(i2___ftge@ff2+1)& (0+255),w,b
 12269  00129E  0100               	movlb	0	; () banked
 12270  0012A0  598C               	subwfb	(i2___ftge@ff1+1)& (0+255),w,b
 12271  0012A2  0100               	movlb	0	; () banked
 12272  0012A4  5190               	movf	(i2___ftge@ff2+2)& (0+255),w,b
 12273  0012A6  0100               	movlb	0	; () banked
 12274  0012A8  598D               	subwfb	(i2___ftge@ff1+2)& (0+255),w,b
 12275  0012AA  B0D8               	btfsc	status,0,c
 12276  0012AC  D002               	goto	i2l4802
 12277                           
 12278                           ; BSR set to: 0
 12279  0012AE  90D8               	bcf	status,0,c
 12280  0012B0  0012               	return	
 12281  0012B2                     i2l4802:
 12282                           
 12283                           ; BSR set to: 0
 12284  0012B2  80D8               	bsf	status,0,c
 12285                           
 12286                           ; BSR set to: 0
 12287  0012B4  0012               	return	
 12288                           
 12289                           ; BSR set to: 0
 12290                           
 12291                           ; BSR set to: 0
 12292  0012B6  0012               	return		;funcret
 12293  0012B8                     __end_ofi2___ftge:
 12294                           	opt stack 0
 12295                           pclatu	equ	0xFFB
 12296                           pclath	equ	0xFFA
 12297                           tblptru	equ	0xFF8
 12298                           tblptrh	equ	0xFF7
 12299                           tblptrl	equ	0xFF6
 12300                           tablat	equ	0xFF5
 12301                           prodh	equ	0xFF4
 12302                           prodl	equ	0xFF3
 12303                           intcon	equ	0xFF2
 12304                           intcon2	equ	0xFF1
 12305                           intcon3	equ	0xFF0
 12306                           postinc0	equ	0xFEE
 12307                           fsr0h	equ	0xFEA
 12308                           fsr0l	equ	0xFE9
 12309                           wreg	equ	0xFE8
 12310                           postinc1	equ	0xFE6
 12311                           postdec1	equ	0xFE5
 12312                           fsr1h	equ	0xFE2
 12313                           fsr1l	equ	0xFE1
 12314                           bsr	equ	0xFE0
 12315                           postinc2	equ	0xFDE
 12316                           postdec2	equ	0xFDD
 12317                           fsr2h	equ	0xFDA
 12318                           fsr2l	equ	0xFD9
 12319                           status	equ	0xFD8
 12320                           
 12321 ;; *************** function i2_MSC_BufferCopyInt *****************
 12322 ;; Defined at:
 12323 ;;		line 215 in file "MISC.c"
 12324 ;; Parameters:    Size  Location     Type
 12325 ;;  from            2    6[BANK0 ] PTR unsigned int 
 12326 ;;		 -> IR_DataTiming(160), RF_DataTiming(120), 
 12327 ;;  to              2    8[BANK0 ] PTR unsigned int 
 12328 ;;		 -> IR_SavedTiming(160), RF_SavedTiming(120), 
 12329 ;;  count           2   10[BANK0 ] unsigned int 
 12330 ;;  shift           2   12[BANK0 ] unsigned int 
 12331 ;; Auto vars:     Size  Location     Type
 12332 ;;  MSC_BufferCo    2   16[BANK0 ] unsigned int 
 12333 ;; Return value:  Size  Location     Type
 12334 ;;		None               void
 12335 ;; Registers used:
 12336 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 12337 ;; Tracked objects:
 12338 ;;		On entry : 0/0
 12339 ;;		On exit  : 0/0
 12340 ;;		Unchanged: 0/0
 12341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12342 ;;      Params:         0       8       0       0       0
 12343 ;;      Locals:         0       2       0       0       0
 12344 ;;      Temps:          0       2       0       0       0
 12345 ;;      Totals:         0      12       0       0       0
 12346 ;;Total ram usage:       12 bytes
 12347 ;; Hardware stack levels used:    1
 12348 ;; Hardware stack levels required when called:    1
 12349 ;; This function calls:
 12350 ;;		i2_MSC_CleanBufferInt
 12351 ;; This function is called by:
 12352 ;;		_RF_CheckCode
 12353 ;; This function uses a non-reentrant model
 12354 ;;
 12355                           
 12356                           	psect	text88
 12357  001500                     __ptext88:
 12358                           	opt stack 0
 12359  001500                     i2_MSC_BufferCopyInt:
 12360                           	opt stack 17
 12361                           
 12362                           ;MISC.c: 217: unsigned int i=0;
 12363                           
 12364                           ; BSR set to: 0
 12365                           ;incstack = 0
 12366  001500  0E00               	movlw	0
 12367  001502  0100               	movlb	0	; () banked
 12368  001504  6F91               	movwf	(i2MSC_BufferCopyInt@i+1)& (0+255),b
 12369  001506  0E00               	movlw	0
 12370  001508  6F90               	movwf	i2MSC_BufferCopyInt@i& (0+255),b
 12371                           
 12372                           ; BSR set to: 0
 12373                           ;MISC.c: 218: MSC_CleanBufferInt(to,count);
 12374  00150A  C088  F080         	movff	i2MSC_BufferCopyInt@to,i2MSC_CleanBufferInt@data
 12375  00150E  C089  F081         	movff	i2MSC_BufferCopyInt@to+1,i2MSC_CleanBufferInt@data+1
 12376  001512  C08A  F082         	movff	i2MSC_BufferCopyInt@count,i2MSC_CleanBufferInt@count
 12377  001516  C08B  F083         	movff	i2MSC_BufferCopyInt@count+1,i2MSC_CleanBufferInt@count+1
 12378  00151A  ECF1  F00C         	call	i2_MSC_CleanBufferInt	;wreg free
 12379                           
 12380                           ;MISC.c: 219: for(i = shift; i>0; i--)
 12381  00151E  C08C  F090         	movff	i2MSC_BufferCopyInt@shift,i2MSC_BufferCopyInt@i
 12382  001522  C08D  F091         	movff	i2MSC_BufferCopyInt@shift+1,i2MSC_BufferCopyInt@i+1
 12383  001526                     i2l4710:
 12384  001526  0100               	movlb	0	; () banked
 12385  001528  5190               	movf	i2MSC_BufferCopyInt@i& (0+255),w,b
 12386  00152A  0100               	movlb	0	; () banked
 12387  00152C  1191               	iorwf	(i2MSC_BufferCopyInt@i+1)& (0+255),w,b
 12388  00152E  B4D8               	btfsc	status,2,c
 12389  001530  D030               	goto	i2l4730
 12390  001532  D001               	goto	i2l4714
 12391                           
 12392                           ; BSR set to: 0
 12393  001534  D02E               	goto	i2l4730
 12394  001536                     i2l4714:
 12395                           
 12396                           ; BSR set to: 0
 12397                           ;MISC.c: 220: {
 12398                           ;MISC.c: 221: *to = ' ';
 12399  001536  C088  FFD9         	movff	i2MSC_BufferCopyInt@to,fsr2l
 12400  00153A  C089  FFDA         	movff	i2MSC_BufferCopyInt@to+1,fsr2h
 12401  00153E  0E20               	movlw	32
 12402  001540  6EDE               	movwf	postinc2,c
 12403  001542  0E00               	movlw	0
 12404  001544  6EDD               	movwf	postdec2,c
 12405                           
 12406                           ; BSR set to: 0
 12407                           ;MISC.c: 222: to++;
 12408  001546  0E02               	movlw	2
 12409  001548  0100               	movlb	0	; () banked
 12410  00154A  2788               	addwf	i2MSC_BufferCopyInt@to& (0+255),f,b
 12411  00154C  0E00               	movlw	0
 12412  00154E  2389               	addwfc	(i2MSC_BufferCopyInt@to+1)& (0+255),f,b
 12413                           
 12414                           ; BSR set to: 0
 12415  001550  0100               	movlb	0	; () banked
 12416  001552  0790               	decf	i2MSC_BufferCopyInt@i& (0+255),f,b
 12417  001554  A0D8               	btfss	status,0,c
 12418  001556  0791               	decf	(i2MSC_BufferCopyInt@i+1)& (0+255),f,b
 12419  001558  D7E6               	goto	i2l4710
 12420                           
 12421                           ; BSR set to: 0
 12422                           ;MISC.c: 223: }
 12423                           ;MISC.c: 224: while(*from != 0 && count >0)
 12424                           
 12425                           ; BSR set to: 0
 12426  00155A  D01B               	goto	i2l4730
 12427  00155C                     i2l4722:
 12428                           
 12429                           ; BSR set to: 0
 12430                           ;MISC.c: 225: {
 12431                           ;MISC.c: 226: *to = *from;
 12432  00155C  C086  FFD9         	movff	i2MSC_BufferCopyInt@from,fsr2l
 12433  001560  C087  FFDA         	movff	i2MSC_BufferCopyInt@from+1,fsr2h
 12434  001564  C088  FFE1         	movff	i2MSC_BufferCopyInt@to,fsr1l
 12435  001568  C089  FFE2         	movff	i2MSC_BufferCopyInt@to+1,fsr1h
 12436  00156C  CFDE FFE6          	movff	postinc2,postinc1
 12437  001570  CFDD FFE5          	movff	postdec2,postdec1
 12438                           
 12439                           ; BSR set to: 0
 12440                           ;MISC.c: 227: from++;
 12441  001574  0E02               	movlw	2
 12442  001576  0100               	movlb	0	; () banked
 12443  001578  2786               	addwf	i2MSC_BufferCopyInt@from& (0+255),f,b
 12444  00157A  0E00               	movlw	0
 12445  00157C  2387               	addwfc	(i2MSC_BufferCopyInt@from+1)& (0+255),f,b
 12446                           
 12447                           ; BSR set to: 0
 12448                           ;MISC.c: 228: to++;
 12449  00157E  0E02               	movlw	2
 12450  001580  0100               	movlb	0	; () banked
 12451  001582  2788               	addwf	i2MSC_BufferCopyInt@to& (0+255),f,b
 12452  001584  0E00               	movlw	0
 12453  001586  2389               	addwfc	(i2MSC_BufferCopyInt@to+1)& (0+255),f,b
 12454                           
 12455                           ; BSR set to: 0
 12456                           ;MISC.c: 229: count--;
 12457  001588  0100               	movlb	0	; () banked
 12458  00158A  078A               	decf	i2MSC_BufferCopyInt@count& (0+255),f,b
 12459  00158C  A0D8               	btfss	status,0,c
 12460  00158E  078B               	decf	(i2MSC_BufferCopyInt@count+1)& (0+255),f,b
 12461  001590  D000               	goto	i2l4730
 12462  001592                     i2l4730:
 12463                           
 12464                           ; BSR set to: 0
 12465  001592  C086  FFD9         	movff	i2MSC_BufferCopyInt@from,fsr2l
 12466  001596  C087  FFDA         	movff	i2MSC_BufferCopyInt@from+1,fsr2h
 12467  00159A  50DE               	movf	postinc2,w,c
 12468  00159C  10DE               	iorwf	postinc2,w,c
 12469  00159E  B4D8               	btfsc	status,2,c
 12470  0015A0  0012               	return	
 12471                           
 12472                           ; BSR set to: 0
 12473  0015A2  0100               	movlb	0	; () banked
 12474  0015A4  518A               	movf	i2MSC_BufferCopyInt@count& (0+255),w,b
 12475  0015A6  0100               	movlb	0	; () banked
 12476  0015A8  118B               	iorwf	(i2MSC_BufferCopyInt@count+1)& (0+255),w,b
 12477  0015AA  B4D8               	btfsc	status,2,c
 12478  0015AC  0012               	return	
 12479  0015AE  D7D6               	goto	i2l4722
 12480                           
 12481                           ; BSR set to: 0
 12482  0015B0  0012               	return	
 12483                           
 12484                           ; BSR set to: 0
 12485                           
 12486                           ; BSR set to: 0
 12487  0015B2  0012               	return		;funcret
 12488  0015B4                     __end_ofi2_MSC_BufferCopyInt:
 12489                           	opt stack 0
 12490                           pclatu	equ	0xFFB
 12491                           pclath	equ	0xFFA
 12492                           tblptru	equ	0xFF8
 12493                           tblptrh	equ	0xFF7
 12494                           tblptrl	equ	0xFF6
 12495                           tablat	equ	0xFF5
 12496                           prodh	equ	0xFF4
 12497                           prodl	equ	0xFF3
 12498                           intcon	equ	0xFF2
 12499                           intcon2	equ	0xFF1
 12500                           intcon3	equ	0xFF0
 12501                           postinc0	equ	0xFEE
 12502                           fsr0h	equ	0xFEA
 12503                           fsr0l	equ	0xFE9
 12504                           wreg	equ	0xFE8
 12505                           postinc1	equ	0xFE6
 12506                           postdec1	equ	0xFE5
 12507                           fsr1h	equ	0xFE2
 12508                           fsr1l	equ	0xFE1
 12509                           bsr	equ	0xFE0
 12510                           postinc2	equ	0xFDE
 12511                           postdec2	equ	0xFDD
 12512                           fsr2h	equ	0xFDA
 12513                           fsr2l	equ	0xFD9
 12514                           status	equ	0xFD8
 12515                           
 12516 ;; *************** function i2_MSC_CleanBufferInt *****************
 12517 ;; Defined at:
 12518 ;;		line 166 in file "MISC.c"
 12519 ;; Parameters:    Size  Location     Type
 12520 ;;  data            2    0[BANK0 ] PTR unsigned int 
 12521 ;;		 -> IR_SavedTiming(160), RF_SavedTiming(120), IR_DataTiming(160), RF_DataTiming(120), 
 12522 ;;  count           2    2[BANK0 ] unsigned int 
 12523 ;; Auto vars:     Size  Location     Type
 12524 ;;  MSC_CleanBuf    2    4[BANK0 ] unsigned int 
 12525 ;; Return value:  Size  Location     Type
 12526 ;;		None               void
 12527 ;; Registers used:
 12528 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12529 ;; Tracked objects:
 12530 ;;		On entry : 0/0
 12531 ;;		On exit  : 0/0
 12532 ;;		Unchanged: 0/0
 12533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12534 ;;      Params:         0       4       0       0       0
 12535 ;;      Locals:         0       2       0       0       0
 12536 ;;      Temps:          0       0       0       0       0
 12537 ;;      Totals:         0       6       0       0       0
 12538 ;;Total ram usage:        6 bytes
 12539 ;; Hardware stack levels used:    1
 12540 ;; This function calls:
 12541 ;;		Nothing
 12542 ;; This function is called by:
 12543 ;;		i2_MSC_BufferCopyInt
 12544 ;; This function uses a non-reentrant model
 12545 ;;
 12546                           
 12547                           	psect	text89
 12548  0019E2                     __ptext89:
 12549                           	opt stack 0
 12550  0019E2                     i2_MSC_CleanBufferInt:
 12551                           	opt stack 17
 12552                           
 12553                           ;MISC.c: 168: unsigned int i=0;
 12554                           
 12555                           ; BSR set to: 0
 12556                           ;incstack = 0
 12557  0019E2  0E00               	movlw	0
 12558  0019E4  0100               	movlb	0	; () banked
 12559  0019E6  6F85               	movwf	(i2MSC_CleanBufferInt@i+1)& (0+255),b
 12560  0019E8  0E00               	movlw	0
 12561  0019EA  6F84               	movwf	i2MSC_CleanBufferInt@i& (0+255),b
 12562                           
 12563                           ;MISC.c: 169: for(i=0; i<count;i++)
 12564  0019EC  0E00               	movlw	0
 12565  0019EE  0100               	movlb	0	; () banked
 12566  0019F0  6F85               	movwf	(i2MSC_CleanBufferInt@i+1)& (0+255),b
 12567  0019F2  0E00               	movlw	0
 12568  0019F4  6F84               	movwf	i2MSC_CleanBufferInt@i& (0+255),b
 12569  0019F6  D015               	goto	i2l4346
 12570  0019F8                     i2l4342:
 12571                           
 12572                           ; BSR set to: 0
 12573                           ;MISC.c: 170: {
 12574                           ;MISC.c: 171: data[i]= 0;
 12575  0019F8  90D8               	bcf	status,0,c
 12576  0019FA  0100               	movlb	0	; () banked
 12577  0019FC  3584               	rlcf	i2MSC_CleanBufferInt@i& (0+255),w,b
 12578  0019FE  6ED9               	movwf	fsr2l,c
 12579  001A00  0100               	movlb	0	; () banked
 12580  001A02  3585               	rlcf	(i2MSC_CleanBufferInt@i+1)& (0+255),w,b
 12581  001A04  6EDA               	movwf	fsr2h,c
 12582  001A06  0100               	movlb	0	; () banked
 12583  001A08  5180               	movf	i2MSC_CleanBufferInt@data& (0+255),w,b
 12584  001A0A  26D9               	addwf	fsr2l,f,c
 12585  001A0C  0100               	movlb	0	; () banked
 12586  001A0E  5181               	movf	(i2MSC_CleanBufferInt@data+1)& (0+255),w,b
 12587  001A10  22DA               	addwfc	fsr2h,f,c
 12588  001A12  0E00               	movlw	0
 12589  001A14  6EDE               	movwf	postinc2,c
 12590  001A16  0E00               	movlw	0
 12591  001A18  6EDD               	movwf	postdec2,c
 12592                           
 12593                           ; BSR set to: 0
 12594  001A1A  0100               	movlb	0	; () banked
 12595  001A1C  4B84               	infsnz	i2MSC_CleanBufferInt@i& (0+255),f,b
 12596  001A1E  2B85               	incf	(i2MSC_CleanBufferInt@i+1)& (0+255),f,b
 12597  001A20  D000               	goto	i2l4346
 12598  001A22                     i2l4346:
 12599                           
 12600                           ; BSR set to: 0
 12601  001A22  0100               	movlb	0	; () banked
 12602  001A24  5182               	movf	i2MSC_CleanBufferInt@count& (0+255),w,b
 12603  001A26  0100               	movlb	0	; () banked
 12604  001A28  5D84               	subwf	i2MSC_CleanBufferInt@i& (0+255),w,b
 12605  001A2A  0100               	movlb	0	; () banked
 12606  001A2C  5183               	movf	(i2MSC_CleanBufferInt@count+1)& (0+255),w,b
 12607  001A2E  0100               	movlb	0	; () banked
 12608  001A30  5985               	subwfb	(i2MSC_CleanBufferInt@i+1)& (0+255),w,b
 12609  001A32  A0D8               	btfss	status,0,c
 12610  001A34  D7E1               	goto	i2l4342
 12611                           
 12612                           ; BSR set to: 0
 12613                           
 12614                           ; BSR set to: 0
 12615  001A36  0012               	return		;funcret
 12616  001A38                     __end_ofi2_MSC_CleanBufferInt:
 12617                           	opt stack 0
 12618                           pclatu	equ	0xFFB
 12619                           pclath	equ	0xFFA
 12620                           tblptru	equ	0xFF8
 12621                           tblptrh	equ	0xFF7
 12622                           tblptrl	equ	0xFF6
 12623                           tablat	equ	0xFF5
 12624                           prodh	equ	0xFF4
 12625                           prodl	equ	0xFF3
 12626                           intcon	equ	0xFF2
 12627                           intcon2	equ	0xFF1
 12628                           intcon3	equ	0xFF0
 12629                           postinc0	equ	0xFEE
 12630                           fsr0h	equ	0xFEA
 12631                           fsr0l	equ	0xFE9
 12632                           wreg	equ	0xFE8
 12633                           postinc1	equ	0xFE6
 12634                           postdec1	equ	0xFE5
 12635                           fsr1h	equ	0xFE2
 12636                           fsr1l	equ	0xFE1
 12637                           bsr	equ	0xFE0
 12638                           postinc2	equ	0xFDE
 12639                           postdec2	equ	0xFDD
 12640                           fsr2h	equ	0xFDA
 12641                           fsr2l	equ	0xFD9
 12642                           status	equ	0xFD8
 12643                           pclatu	equ	0xFFB
 12644                           pclath	equ	0xFFA
 12645                           tblptru	equ	0xFF8
 12646                           tblptrh	equ	0xFF7
 12647                           tblptrl	equ	0xFF6
 12648                           tablat	equ	0xFF5
 12649                           prodh	equ	0xFF4
 12650                           prodl	equ	0xFF3
 12651                           intcon	equ	0xFF2
 12652                           intcon2	equ	0xFF1
 12653                           intcon3	equ	0xFF0
 12654                           postinc0	equ	0xFEE
 12655                           fsr0h	equ	0xFEA
 12656                           fsr0l	equ	0xFE9
 12657                           wreg	equ	0xFE8
 12658                           postinc1	equ	0xFE6
 12659                           postdec1	equ	0xFE5
 12660                           fsr1h	equ	0xFE2
 12661                           fsr1l	equ	0xFE1
 12662                           bsr	equ	0xFE0
 12663                           postinc2	equ	0xFDE
 12664                           postdec2	equ	0xFDD
 12665                           fsr2h	equ	0xFDA
 12666                           fsr2l	equ	0xFD9
 12667                           status	equ	0xFD8
 12668                           
 12669                           	psect	param0
 12670  0000                     pclatu	equ	0xFFB
 12671                           pclath	equ	0xFFA
 12672                           tblptru	equ	0xFF8
 12673                           tblptrh	equ	0xFF7
 12674                           tblptrl	equ	0xFF6
 12675                           tablat	equ	0xFF5
 12676                           prodh	equ	0xFF4
 12677                           prodl	equ	0xFF3
 12678                           intcon	equ	0xFF2
 12679                           intcon2	equ	0xFF1
 12680                           intcon3	equ	0xFF0
 12681                           postinc0	equ	0xFEE
 12682                           fsr0h	equ	0xFEA
 12683                           fsr0l	equ	0xFE9
 12684                           wreg	equ	0xFE8
 12685                           postinc1	equ	0xFE6
 12686                           postdec1	equ	0xFE5
 12687                           fsr1h	equ	0xFE2
 12688                           fsr1l	equ	0xFE1
 12689                           bsr	equ	0xFE0
 12690                           postinc2	equ	0xFDE
 12691                           postdec2	equ	0xFDD
 12692                           fsr2h	equ	0xFDA
 12693                           fsr2l	equ	0xFD9
 12694                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    300
    Data        7
    BSS         595
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     71      91
    BANK0           128     57      79
    BANK1           256     17     177
    BANK2           256      0     240
    BANK3           256      0     160

Pointer List with Targets:

    MSC_BufferCopyIntConst@from	PTR const unsigned int  size(2) Largest target is 134
		 -> PIONEER_PLUS_Timing(CODE[134]), CONF1_ChanE_Timing(CODE[100]), 

    MSC_BufferCopyIntConst@to	PTR unsigned int  size(2) Largest target is 160
		 -> IR_SavedTiming(BANK1[160]), RF_SavedTiming(BANK2[120]), 

    MSC_BufferCopyInt@from	PTR unsigned int  size(2) Largest target is 160
		 -> IR_DataTiming(BANK3[160]), RF_DataTiming(BANK2[120]), 

    MSC_BufferCopyInt@to	PTR unsigned int  size(2) Largest target is 160
		 -> IR_SavedTiming(BANK1[160]), RF_SavedTiming(BANK2[120]), 

    MSC_CleanBufferInt@data	PTR unsigned int  size(2) Largest target is 160
		 -> IR_SavedTiming(BANK1[160]), RF_SavedTiming(BANK2[120]), IR_DataTiming(BANK3[160]), RF_DataTiming(BANK2[120]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    _low_isr->_IR_CheckCode
    _TMR_Timer2Start->_TMR_ResetTimer2
    _TMR_ResetTimer2->i1_TMR_Timer2
    _TMR_Timer1Start->i1_TMR_ResetTimer1
    i1_TMR_ResetTimer1->i1_TMR_Timer1
    _RF_Disable->i1_RF_DataInt
    _RF_Disable->i1_TMR_Timer0
    _RF_Disable->i1_TMR_Timer0Int
    _RF_Enable->i1_RF_DataInt
    _RF_Enable->i1_TMR_Timer0Int
    _IR_CleanBuffer->i1_MSC_CleanBufferInt
    _IR_CheckCode->___ftmul
    i1___ftge->___lwtoft
    _MSC_BufferCopyInt->i1_MSC_CleanBufferInt
    _ADC_CalculateVoltage->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___ftdiv
    ___ftdiv->___lwtoft

Critical Paths under _main in BANK0

    _main->_MSC_DelayMS
    _RF_LoadDefaultCode->_MSC_BufferCopyIntConst
    _MTR_Rotate->_MSC_DelayMS
    _MSC_BlinkLED->_MSC_DelayMS
    _MSC_DelayMS->_MSC_DelayNOP
    _InitTimer2->_TMR_Timer2
    _InitTimer2->_TMR_Timer2Int
    _InitTimer1->_TMR_Timer1Function
    _TMR_Timer1Function->_TMR_ResetTimer1
    _TMR_ResetTimer1->_TMR_Timer1
    _InitTimer0->_TMR_ResetTimer0
    _TMR_ResetTimer0->_TMR_Timer0
    _InitRF->_MSC_CleanBufferInt
    _InitLDO->_LDO_Pass
    _InitIR->_MSC_CleanBufferInt
    _InitButton->_BUT_IR_PinChangeInt
    _InitButton->_BUT_ReadButton
    _InitADC->_ADC_ConversionInt
    _InitADC->_ADC_Module
    _IR_LoadDefaultCode->_MSC_BufferCopyIntConst
    _MSC_BufferCopyIntConst->_MSC_CleanBufferInt

Critical Paths under _high_isr in BANK0

    _high_isr->_RF_CheckCode
    _TMR_Timer0Start->i2_TMR_ResetTimer0
    i2_TMR_ResetTimer0->i2_TMR_Timer0
    _RF_CheckCode->i2___ftmul
    i2___lwtoft->i2___ftpack
    i2___ftmul->i2___lwtoft
    i2___ftge->i2___lwtoft
    i2_MSC_BufferCopyInt->i2_MSC_CleanBufferInt

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_IR_LoadDefaultCode
    _main->_RF_LoadDefaultCode
    _RF_LoadDefaultCode->___fttol
    _MTR_Rotate->_MSC_DelayMS
    _MSC_BlinkLED->_MSC_DelayMS
    _IR_LoadDefaultCode->___fttol

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10949
                          _ADC_Start
                 _IR_LoadDefaultCode
                           _Init_App
                        _Init_System
                       _MSC_BlinkLED
                        _MSC_DelayMS
                         _MTR_Rotate
                 _RF_LoadDefaultCode
            _SYS_ConfigureOscillator
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6    1058
                                             49 BANK0      6     0      6
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _SYS_ConfigureOscillator                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_LoadDefaultCode                                   6     6      0    2854
                                             11 BANK1      6     6      0
             _MSC_BufferCopyIntConst
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _MTR_Rotate                                           0     0      0     635
                        _MSC_DelayMS
                            _MTR_IN1
                            _MTR_IN2
 ---------------------------------------------------------------------------------
 (2) _MTR_IN2                                              1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTR_IN1                                              1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MSC_BlinkLED                                         6     4      2    1049
                                              5 BANK1      6     4      2
                        _MSC_DelayMS
 ---------------------------------------------------------------------------------
 (2) _MSC_DelayMS                                          9     5      4     591
                                             53 BANK0      4     0      4
                                              0 BANK1      5     5      0
                       _MSC_DelayNOP
 ---------------------------------------------------------------------------------
 (3) _MSC_DelayNOP                                         4     2      2     133
                                             49 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0    1908
                     _BUT_ReadButton
                    _IR_ReadReceiver
                            _InitADC
                         _InitButton
                          _InitFlash
                             _InitIR
                            _InitLDO
                          _InitMOTOR
                             _InitRF
                         _InitTimers
 ---------------------------------------------------------------------------------
 (2) _InitTimers                                           0     0      0     333
                         _InitTimer0
                         _InitTimer1
                         _InitTimer2
 ---------------------------------------------------------------------------------
 (3) _InitTimer2                                           0     0      0      44
                         _TMR_Timer2
                      _TMR_Timer2Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2Int                                        1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2                                           1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer1                                           0     0      0     200
                    _TMR_ResetTimer1
                         _TMR_Timer1
                 _TMR_Timer1Function
                      _TMR_Timer1Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer1Int                                        1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer1Function                                   1     1      0     111
                                             51 BANK0      1     1      0
                    _TMR_ResetTimer1
                         _TMR_Timer1
                      _TMR_Timer1Osc
 ---------------------------------------------------------------------------------
 (5) _TMR_Timer1Osc                                        1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _TMR_ResetTimer1                                      1     1      0      45
                                             50 BANK0      1     1      0
                         _TMR_Timer1
 ---------------------------------------------------------------------------------
 (5) _TMR_Timer1                                           1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer0                                           0     0      0      89
                    _TMR_ResetTimer0
                         _TMR_Timer0
                      _TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer0Int                                        1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_ResetTimer0                                      1     1      0      45
                                             50 BANK0      1     1      0
                         _TMR_Timer0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer0                                           1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitRF                                               0     0      0     775
                 _MSC_CleanBufferInt
                         _RF_DataInt
                        _RF_Receiver
                    _RF_SetBandwidth
                      _RF_SetSquelch
 ---------------------------------------------------------------------------------
 (3) _RF_SetSquelch                                        1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_SetBandwidth                                      1     1      0      66
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_Receiver                                          1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_DataInt                                           1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitMOTOR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitLDO                                              0     0      0      22
                           _LDO_Pass
 ---------------------------------------------------------------------------------
 (3) _LDO_Pass                                             1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitIR                                               0     0      0     643
                 _MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (2) _InitFlash                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitButton                                           0     0      0      45
                _BUT_IR_PinChangeInt
                     _BUT_ReadButton
 ---------------------------------------------------------------------------------
 (3) _BUT_ReadButton                                       1     1      0      23
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _BUT_IR_PinChangeInt                                  1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitADC                                              0     0      0      44
                  _ADC_ChangeChannel
                  _ADC_ConversionInt
                         _ADC_Module
 ---------------------------------------------------------------------------------
 (3) _ADC_Module                                           1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionInt                                    1     1      0      22
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ChangeChannel                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IR_ReadReceiver                                      1     1      0      23
                                             49 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_App                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_LoadDefaultCode                                   6     6      0    2854
                                             11 BANK1      6     6      0
             _MSC_BufferCopyIntConst
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1286
                                             49 BANK0      4     0      4
                                              0 BANK1     11    11      0
 ---------------------------------------------------------------------------------
 (2) _MSC_BufferCopyIntConst                              10     2      8    1494
                                             55 BANK0      2     2      0
                                              0 BANK1      8     0      8
                 _MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (3) _MSC_CleanBufferInt                                   6     2      4     643
                                             49 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _ADC_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                             21    21      0   18141
                                             50 COMRAM    21    21      0
               _ADC_CalculateVoltage
                       _IR_CheckCode
                     _IR_CleanBuffer
                       _IR_ResetData
                         _RF_Disable
                    _TMR_Timer1Start
                   _TMR_Timer1Status
                    _TMR_Timer2Start
              i1_BUT_IR_PinChangeInt
                   i1_BUT_ReadButton
                  i1_IR_ReadReceiver
                  i1_TMR_ResetTimer1
                       i1_TMR_Timer1
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) i1_IR_ReadReceiver                                    1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_BUT_ReadButton                                     1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_BUT_IR_PinChangeInt                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer2Start                                      2     0      2     301
                                              2 COMRAM     2     0      2
                    _TMR_ResetTimer2
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (9) _TMR_ResetTimer2                                      1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) i1_TMR_Timer2                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer1Status                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer1Start                                      0     0      0      67
                  i1_TMR_ResetTimer1
                       i1_TMR_Timer1
 ---------------------------------------------------------------------------------
 (8) i1_TMR_ResetTimer1                                    1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer1
 ---------------------------------------------------------------------------------
 (8) i1_TMR_Timer1                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _RF_Disable                                           0     0      0      66
                       i1_RF_DataInt
                       i1_TMR_Timer0
                    i1_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (9) i1_TMR_Timer0                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _IR_ResetData                                         0     0      0      44
                          _RF_Enable
 ---------------------------------------------------------------------------------
 (9) _RF_Enable                                            0     0      0      44
                       i1_RF_DataInt
                    i1_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (9) i1_TMR_Timer0Int                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1_RF_DataInt                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _IR_CleanBuffer                                       0     0      0     195
               i1_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (8) _IR_CheckCode                                         9     9      0    7989
                                             41 COMRAM     9     9      0
                  _MSC_BufferCopyInt
                            ___ftmul
                           ___lwtoft
                           i1___ftge
 ---------------------------------------------------------------------------------
 (9) i1___ftge                                             9     3      6     240
                                             11 COMRAM     9     3      6
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) _MSC_BufferCopyInt                                   12     4      8     742
                                              6 COMRAM    12     4      8
               i1_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (9) i1_MSC_CleanBufferInt                                 6     2      4     195
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _ADC_CalculateVoltage                                 5     5      0    9185
                                             41 COMRAM     5     5      0
                            ___ftdiv
                            ___ftmul
                           ___lwtoft
                i1_ADC_ChangeChannel
 ---------------------------------------------------------------------------------
 (9) i1_ADC_ChangeChannel                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) ___lwtoft                                             3     0      3    2541
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             15     9      6    4148
                                             26 COMRAM    15     9      6
                            ___ftdiv (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2426
                                             11 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    1668
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _high_isr                                           16    16      0    2675
                                             33 BANK0     16    16      0
                       _RF_CheckCode
                       _RF_ResetData
                    _TMR_Timer0Start
                   _TMR_Timer0Status
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (12) _TMR_Timer0Status                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _TMR_Timer0Start                                     0     0      0      67
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (12) i2_TMR_ResetTimer0                                   1     1      0      45
                                              1 BANK0      1     1      0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (12) i2_TMR_Timer0                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (12) _RF_ResetData                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (12) _RF_CheckCode                                        7     7      0    2428
                                             26 BANK0      7     7      0
                i2_MSC_BufferCopyInt
                           i2___ftge
                          i2___ftmul
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (13) i2___lwtoft                                          3     0      3     565
                                              8 BANK0      3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (13) i2___ftmul                                          15     9      6     921
                                             11 BANK0     15     9      6
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (14) i2___ftpack                                          8     3      5     387
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (13) i2___ftge                                            9     3      6     240
                                             11 BANK0      9     3      6
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (13) i2_MSC_BufferCopyInt                                12     4      8     474
                                              6 BANK0     12     4      8
               i2_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (14) i2_MSC_CleanBufferInt                                6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Start
   _IR_LoadDefaultCode
     _MSC_BufferCopyIntConst
       _MSC_CleanBufferInt
     ___fttol
   _Init_App
   _Init_System
     _BUT_ReadButton
     _IR_ReadReceiver
     _InitADC
       _ADC_ChangeChannel
       _ADC_ConversionInt
       _ADC_Module
     _InitButton
       _BUT_IR_PinChangeInt
       _BUT_ReadButton
     _InitFlash
     _InitIR
       _MSC_CleanBufferInt
     _InitLDO
       _LDO_Pass
     _InitMOTOR
     _InitRF
       _MSC_CleanBufferInt
       _RF_DataInt
       _RF_Receiver
       _RF_SetBandwidth
       _RF_SetSquelch
     _InitTimers
       _InitTimer0
         _TMR_ResetTimer0
           _TMR_Timer0
         _TMR_Timer0
         _TMR_Timer0Int
       _InitTimer1
         _TMR_ResetTimer1
           _TMR_Timer1
         _TMR_Timer1
         _TMR_Timer1Function
           _TMR_ResetTimer1
             _TMR_Timer1
           _TMR_Timer1
           _TMR_Timer1Osc
         _TMR_Timer1Int
       _InitTimer2
         _TMR_Timer2
         _TMR_Timer2Int
   _MSC_BlinkLED
     _MSC_DelayMS
       _MSC_DelayNOP
   _MSC_DelayMS
     _MSC_DelayNOP
   _MTR_Rotate
     _MSC_DelayMS
       _MSC_DelayNOP
     _MTR_IN1
     _MTR_IN2
   _RF_LoadDefaultCode
     _MSC_BufferCopyIntConst
       _MSC_CleanBufferInt
     ___fttol
   _SYS_ConfigureOscillator
   ___ftge

 _low_isr (ROOT)
   _ADC_CalculateVoltage
     ___ftdiv
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     i1_ADC_ChangeChannel
   _IR_CheckCode
     _MSC_BufferCopyInt
       i1_MSC_CleanBufferInt
     ___ftmul
       ___ftdiv (ARG)
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
     i1___ftge
       ___lwtoft (ARG)
         ___ftpack
   _IR_CleanBuffer
     i1_MSC_CleanBufferInt
   _IR_ResetData
     _RF_Enable
       i1_RF_DataInt
       i1_TMR_Timer0Int
   _RF_Disable
     i1_RF_DataInt
     i1_TMR_Timer0
     i1_TMR_Timer0Int
   _TMR_Timer1Start
     i1_TMR_ResetTimer1
       i1_TMR_Timer1
     i1_TMR_Timer1
   _TMR_Timer1Status
   _TMR_Timer2Start
     _TMR_ResetTimer2
       i1_TMR_Timer2
     i1_TMR_Timer2
   i1_BUT_IR_PinChangeInt
   i1_BUT_ReadButton
   i1_IR_ReadReceiver
   i1_TMR_ResetTimer1
     i1_TMR_Timer1
   i1_TMR_Timer1
   i1_TMR_Timer2

 _high_isr (ROOT)
   _RF_CheckCode
     i2_MSC_BufferCopyInt
       i2_MSC_CleanBufferInt
     i2___ftge
       i2___lwtoft (ARG)
         i2___ftpack
     i2___ftmul
       i2___ftpack
       i2___lwtoft (ARG)
         i2___ftpack
     i2___lwtoft
       i2___ftpack
   _RF_ResetData
   _TMR_Timer0Start
     i2_TMR_ResetTimer0
       i2_TMR_Timer0
     i2_TMR_Timer0
   _TMR_Timer0Status
   i2_TMR_ResetTimer0
     i2_TMR_Timer0
   i2_TMR_Timer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3FF      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0      A0      10       62.5%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      F0       8       93.8%
BITBANK1           100      0       0       5        0.0%
BANK1              100     11      B1       6       69.1%
BITBANK0            80      0       0       3        0.0%
BANK0               80     39      4F       4       61.7%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     47      5B       1       71.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2EB      11        0.0%
DATA                 0      0     2EB      13        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Thu Aug 27 18:59:10 2015

         MSC_BufferCopyIntConst@i 00B7           __end_of_IR_ReadReceiver 1BEE  
        MSC_BufferCopyIntConst@to 01A2                        _RF_SyncLow 00BD  
              TMR_Timer0Int@state 00B1                       _RF_SyncHigh 00BB  
                              l64 0982         i2MSC_CleanBufferInt@count 0082  
                              bsr 000FE0                __size_of_ADC_Start 0004  
              TMR_Timer1Int@state 00B1                        i2___ftpack 0E0E  
                    __CFG_CP0$OFF 000000                        _TMR_Timer0 2014  
                      _TMR_Timer1 1FE4                        _TMR_Timer2 1FB4  
                             l520 1F4C                               l355 1F14  
                             l481 1BCC                               l545 1CCA  
                             l483 1BE2                               l299 21E6  
                             l921 206E                               l930 1B94  
                             l932 1BAA                        i2___lwtoft 1D6E  
                             l983 2026                               l993 1FC6  
                             l988 1FF6                               _PR2 000FCB  
                    i1___ftge@ff1 000C                      i1___ftge@ff2 000F  
             __size_of_ADC_Module 0018                TMR_Timer2Int@state 00B1  
           ??i1_ADC_ChangeChannel 0001                               prod 000FF3  
                             wreg 000FE8                   IR_CheckCode@Low 002C  
              TMR_Timer1Osc@state 00B1            ?i1_BUT_IR_PinChangeInt 0001  
                  ?_RF_SetSquelch 0001                      ___ftdiv@cntr 0015  
                    ___ftdiv@sign 001A                              l1013 200E  
                            l1023 1FAE                              l1104 209E  
                            l1018 1FDE                              l1028 1EBC  
                            l1092 2086             ?i2_MSC_CleanBufferInt 0080  
                            l4212 1B76                              l4204 1B58  
                            l4208 1B66                              l4218 203E  
                            l4162 1CAC                              l4166 1CB8  
                            l4418 1BD6                              l4178 1B9E  
                            l4540 1F96                              l4198 2056  
                            l4288 1E02                              l4546 1F7E  
                            l5524 19A2                              l5620 0D9E  
                            l5700 18F0                              l5630 0DDC  
                            l5534 1CD4                              l5542 195A  
                            l5528 19CC                              l5616 0D8A  
                            l5704 191A                              l5712 115E  
                            l5800 0944                              l5634 0DFA  
                            l5626 0DBC                              l5538 193C  
                            l5722 11E4                              l5580 14A0  
                            l5572 147A                              l5628 0DCE  
                            l5716 11A0                              l5812 099E  
                            l5740 07FE                              l5750 0834  
                            l5568 146A                              l5752 0844  
                            l5682 1A66                              l5754 0848  
                            l5738 07EE                              l5588 14DA  
                            l5676 1A44                              l5780 08BC  
                            l5772 089C                              l5598 0CF6  
                            l5766 087C                              l5774 08A4  
                            l5792 08D8                              l5796 0928  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              u6100 09B4  
                            u5831 0CD2                              u5850 0D1C  
                            u5855 0D12                              _TMR2 000FCC  
                ?_RF_SetBandwidth 0001       ADC_CalculateVoltage@Voltage 002C  
          __size_of_TMR_Timer0Int 0018            __size_of_TMR_Timer1Int 0018  
          __size_of_TMR_Timer2Int 0018            __size_of_TMR_Timer1Osc 0020  
               ??i1_TMR_Timer0Int 0001                   __end_of_MTR_IN1 1F9C  
                 __end_of_MTR_IN2 1F84                              _main 07C4  
                    ___ftpack@arg 0001                      ___ftpack@exp 0004  
                            fsr0h 000FEA                              fsr1h 000FE2  
                            fsr0l 000FE9                              fsr2h 000FDA  
                            fsr1l 000FE1                              fsr2l 000FD9  
                            pclat 000FFA                      i2___ftge@ff1 008B  
                    i2___ftge@ff2 008E                              prodh 000FF4  
                            prodl 000FF3                              start 02B4  
                   __CFG_IESO$OFF 000000                     __CFG_FOSC2$ON 000000  
              MSC_BufferCopyInt@i 0011                  IR_CheckCode@High 002F  
                    ___ftmul@cntr 0028             i1MSC_CleanBufferInt@i 0005  
                    i2___ftmul@f1 008B                      i2___ftmul@f2 008E  
                    ___param_bank 000000                      ___ftmul@sign 0029  
                 __end_of_InitADC 1DEC                   __end_of_InitLDO 21F4  
    __end_of_ADC_CalculateVoltage 137E                      ___fttol@exp1 01AA  
                   ??_Init_System 00B7                      ___fttol@lval 01A6  
         __size_of_IR_CleanBuffer 0016       __size_of_TMR_Timer1Function 0032  
      __end_of_CONF1_ChanE_Timing 3FBE                             ?_main 0001  
                __end_of_LDO_Pass 1F52                   __end_of___ftdiv 111C  
                    i2___lwtoft@c 0088                   __end_of___ftmul 1030  
                 __end_of___fttol 0E0E                             i1l205 01DC  
                           i1l230 0236                             i1l222 022A  
                           i1l206 01D8                             i1l207 010A  
                           i1l232 026A                             i1l209 0164  
                           i1l236 026E                             i1l502 04BA  
                           i1l355 20CA                             i1l197 01E0  
                           i1l481 1C02                             i1l483 1C18  
                           i2l181 0A92                             i2l192 0B12  
                           i2l176 0AFC                             i1l921 211C  
                           i2l194 0B16                             i1l930 1C38  
                           i2l179 0A16                             i1l932 1C4E  
                           i1l983 2164                             i1l993 212E  
                           i1l988 2152                             i2l983 20B6  
              _RF_LoadDefaultCode 15B4                             _TMR0H 000FD7  
                           _TMR1H 000FCF                             _TMR0L 000FD6  
                           _TMR1L 000FCE                             _PORTB 000F81  
             BUT_ReadButton@value 00B1                    __CFG_FCMEN$OFF 000000  
               _MSC_BufferCopyInt 1712                             _errno 0053  
             ?_RF_LoadDefaultCode 0001                     ___ftpack@sign 0005  
              RF_SetSquelch@state 00B1                __size_of_RF_Enable 0014  
                     ?_RF_DataInt 0001                  __end_ofi1___ftge 1848  
                 __end_of_low_isr 02B4                ?_MSC_BufferCopyInt 0007  
                           tablat 000FF5                  __end_ofi2___ftge 12B8  
               __end_of_ADC_Start 2202                       ?_RF_Disable 0001  
                           status 000FD8                       ?_MTR_Rotate 0001  
             MSC_BufferCopyInt@to 0009          ??_MSC_BufferCopyIntConst 00B7  
              __size_ofi2___ftmul 016C               ??_MSC_BufferCopyInt 000F  
                      _InitButton 219C                   __initialization 1848  
                      _InitTimer0 1E84                        _InitTimer1 1EE4  
                      _InitTimer2 1EC6                        _InitTimers 218E  
                    __end_of_main 09C8                  ?_IR_ReadReceiver 0001  
                   i2___ftmul@exp 0094              ??_RF_LoadDefaultCode 00B9  
                _ButtonValue_prev 00BF      __end_ofi1_MSC_CleanBufferInt 1ACC  
                __end_of_Init_App 1B44                     _TMR_Timer0Int 1FFC  
                   _TMR_Timer1Int 1FCC                     _TMR_Timer2Int 1F9C  
                   _TMR_Timer1Osc 1EA6                       ?i2___ftpack 0080  
                     ?_TMR_Timer0 0001                       ?_TMR_Timer1 0001  
                     ?_TMR_Timer2 0001                      ?_MSC_DelayMS 00B5  
                          ??_main 00B9                     ___fttol@sign1 01A5  
                     ?i2___lwtoft 0088                     __activetblptr 000002  
               _ADC_ConversionInt 208C               TMR_Timer2Start@time 0003  
             __end_of_Init_System 1C8C                 i1_TMR_ResetTimer1 1E12  
       __end_of_MSC_BufferCopyInt 17B2                   ??_RF_SetSquelch 00B1  
                 _ADC_SampleCount 00B9                ?_ADC_ConversionInt 0001  
          ??i2_MSC_CleanBufferInt 0084                         ??_MTR_IN1 00B1  
                       ??_MTR_IN2 00B1                ?i1_TMR_ResetTimer1 0001  
                          _ADRESH 000FC4                            _ADRESL 000FC3  
                __end_of___ftpack 1444          __size_of_TMR_ResetTimer0 002C  
        __size_of_TMR_ResetTimer1 002C          __size_of_TMR_ResetTimer2 002A  
                _TMR_Timer0Status 21C6                __size_of_InitMOTOR 0004  
                          i1l1013 2176                            i1l1112 136A  
                _TMR_Timer1Status 21AA                            i1l1441 141A  
                          i1l1505 10E6                            i1l4300 139E  
                          i1l4310 1402                            i1l4302 13AA  
                          i1l5102 1378                            i1l4312 140E  
                          i1l4304 13CA                            i1l5034 21B2  
                          i1l4324 1434                            i1l4308 13E2  
                          i1l5052 037A                            i1l4318 1422  
                          i1l4334 1A9E                            i1l5062 0532  
                          i1l5134 1C0C                            i1l4512 1736  
                          i1l5048 02E0                            i1l4602 10F4  
                          i1l4338 1ABE                            i1l5082 0578  
                          i1l5066 0536                            i1l5058 0430  
                          i1l5410 0202                            i1l4612 0F56  
                          i1l4524 1764                            i1l4532 1794  
                          i1l4516 1742                            i1l5068 053A  
                          i1l5076 0546                            i1l5156 1C42  
                          i1l5332 00A8                            i1l5414 0218  
                          i1l5342 00DC                            i1l4296 138E  
                          i1l4640 0FDA                            i1l4632 0FB2  
                          i1l5432 025A                            i1l5416 0220  
                          i1l5336 00BA                            i2l1441 0EF4  
                          i1l4650 1008                            i1l4642 0FE0  
                          i1l4618 0F7E                            i1l5418 0226  
                          i1l5346 00EE                            i1l4572 1080  
                          i1l4636 0FC4                            i1l5348 00F4  
                          i1l4566 1058                            i1l4646 0FF2  
                          i1l5390 01B2                            i1l4592 10C0  
                          i1l5368 0146                            i2l5002 0768  
                          i1l5394 01BE                            i2l5004 076E  
                          i2l5012 077E                            i1l5396 01CA  
                          i1l4766 1E4E                            i1l4774 17E4  
                  __CFG_WDTEN$OFF 000000                            i1l4784 1842  
                          i2l5018 07BE                            i1l4778 1816  
                          i2l5300 0ADE                            i2l4342 19F8  
                          i2l5304 0AEA                            i2l4346 1A22  
                          i2l5306 0AF6                            i2l4380 0EA2  
                          i2l4372 0E3E                            i2l4710 1526  
                          i2l4390 0F00                            i2l4382 0ED4  
                          i2l4374 0E4E                            i2l4384 0EE4  
                          i2l4376 0E80                            i2l4368 0E28  
                          i2l5264 0A06                            i2l4722 155C  
                          i2l4730 1592                            i2l4714 1536  
                          i2l4802 12B2                            i2l5282 0A6A  
                          i2l4396 0F1E                            i2l4812 0B8A  
                          i2l4840 0C50                            i2l4832 0C14  
                          i2l4850 0C94                            i2l4842 0C58  
                          i2l4818 0BC4                            i2l4836 0C34  
                          i2l4846 0C78                            i2l4792 122C  
                          i2l4796 126E                            i2l4990 05B4  
                          i2l4994 064C                            i2l4978 21CE  
                          i2l4998 0764                  __end_of___lwtoft 1E84  
                          u452_21 0F3E                            u454_21 0F66  
                          u447_21 1040                            u480_41 0B66  
                          u449_21 1068                            u482_41 0BA0  
              __size_of_InitFlash 0002               ??_ADC_ConversionInt 00B1  
                    ??_ADC_Module 00B1                      _System_State 00CE  
             ??i1_TMR_ResetTimer1 0002                         ??_InitADC 00B2  
                       ??_InitLDO 00B2          __size_of_TMR_Timer0Start 0012  
        __size_of_TMR_Timer1Start 0012                            _InitIR 1F1C  
                          _InitRF 1ACC          __size_of_TMR_Timer2Start 001A  
      MSC_BufferCopyIntConst@from 01A0                    __CFG_XINST$OFF 000000  
                      _Timer2Post 004F                   low_isr@IR_state 0044  
                __end_of_high_isr 0B50                 ?i1_BUT_ReadButton 0001  
                          ___ftge 111C            i1IR_ReadReceiver@value 0001  
         __size_of_BUT_ReadButton 0038                    __CFG_STVREN$ON 000000  
                       ??___ftdiv 0012                         ??___ftmul 0021  
                       ??___fttol 01A0      __size_of_BUT_IR_PinChangeInt 0018  
                  ?_TMR_Timer0Int 0001                    ?_TMR_Timer1Int 0001  
                  ?_TMR_Timer2Int 0001          i2MSC_CleanBufferInt@data 0080  
                  ?_TMR_Timer1Osc 0001                ??i1_BUT_ReadButton 0001  
               __end_of_RF_Enable 2110            IR_LoadDefaultCode@High 01AE  
                          clear_0 184E                            clear_1 185A  
                          clear_2 1866                            clear_3 1872  
                          clear_4 187E               __size_of_RF_DataInt 001C  
     __end_ofi2_MSC_BufferCopyInt 15B4         __end_of_ADC_ConversionInt 20A4  
          RF_LoadDefaultCode@High 01AE               __size_of_RF_Disable 0014  
       __end_ofi1_TMR_ResetTimer1 1E38             ___ftmul@f3_as_product 0025  
                    __pdataCOMRAM 005B                __end_of_ADC_Module 208C  
             __size_of_MTR_Rotate 0068                 __end_ofi2___ftmul 0CBC  
                    __mediumconst 3ECA                         ??_low_isr 0033  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8              _ADC_CalculateVoltage 12B8  
               i2_TMR_ResetTimer0 1D42                   __CFG_FOSC$HSPLL 000000  
                __end_ofexp@coeff 3FDC                  __end_oflog@coeff 3FF7  
                 TMR_Timer0@state 00B1                   TMR_Timer1@state 00B1  
                      __accesstop 0080           __end_of__initialization 18B6  
                 TMR_Timer2@state 00B1                      ?_RF_Receiver 0001  
             __size_ofi2___ftpack 0120                ?i2_TMR_ResetTimer0 0001  
                      ___ftge@ff1 00B1                        ___ftge@ff2 00B4  
             __size_of_TMR_Timer0 0018               __size_of_TMR_Timer1 0018  
             __size_of_TMR_Timer2 0018                     ___rparam_used 000000  
                      ___ftdiv@f1 000C                        ___ftdiv@f2 000F  
                      ___ftdiv@f3 0016                         ?_LDO_Pass 0001  
             __size_ofi2___lwtoft 002C                    i2___ftpack@arg 0080  
 __size_of_MSC_BufferCopyIntConst 00BC                    i2___ftpack@exp 0083  
               i1RF_DataInt@state 0001                    high_isr@RFtemp 00AF  
                     ?_InitButton 0001                        ___ftmul@f1 001B  
                      ___ftmul@f2 001E                        ___fttol@f1 00B1  
                  __pcstackCOMRAM 0001                       ?_InitTimer0 0001  
                     ?_InitTimer1 0001                       ?_InitTimer2 0001  
                     ?_InitTimers 0001               ??i2_TMR_ResetTimer0 0081  
                    __pidataBANK0 21F4                    _IR_CleanBuffer 20D2  
            IR_ReadReceiver@value 00B1                    i2___ftmul@cntr 0098  
                  i2___ftmul@sign 0099                     ?i1_RF_DataInt 0001  
                     _Init_System 1C5A                 __end_of_InitMOTOR 21FE  
                     _Button_Data 00C0                         ?i1___ftge 000C  
               __end_of_InitFlash 2204                        ___lwtoft@c 0009  
      __end_of_MSC_CleanBufferInt 19E2                         ?i2___ftge 008B  
         ??i1_BUT_IR_PinChangeInt 0001          ?_SYS_ConfigureOscillator 0001  
                 i1_TMR_Timer0Int 216A        __size_of_MSC_BufferCopyInt 00A0  
      __end_of_IR_LoadDefaultCode 1712                  RF_Receiver@state 00B1  
                   ?_MSC_DelayNOP 00B1         __end_ofi2_TMR_ResetTimer0 1D6E  
                   ?_MSC_BlinkLED 01A5             ?_ADC_CalculateVoltage 0001  
            i1_MSC_CleanBufferInt 1A8C                        __pbssBANK0 00B9  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
                      __pbssBANK3 0300                         ?_Init_App 0001  
                RF_CheckCode@High 009D                     ?i1_TMR_Timer0 0001  
                   ?i1_TMR_Timer1 0001                     ?i1_TMR_Timer2 0001  
        i1TMR_ResetTimer1@TimerOn 0002                        ??_LDO_Pass 00B1  
               ??_TMR_ResetTimer0 00B2                 ??_TMR_ResetTimer1 00B2  
               ??_TMR_ResetTimer2 0002                           ?_InitIR 0001  
                         ?_InitRF 0001            __end_of_IR_CleanBuffer 20E8  
                 ??_TMR_Timer0Int 00B1                   ??_TMR_Timer1Int 00B1  
                 ??_TMR_Timer2Int 00B1                   ??_TMR_Timer1Osc 00B1  
                         ?___ftge 00B1                    ??i1_RF_DataInt 0001  
                   ?_IR_CheckCode 0001       __end_ofi1_ADC_ChangeChannel 1E5E  
               ??_TMR_Timer0Start 0082                 ??_TMR_Timer1Start 0003  
               ??_TMR_Timer2Start 0005                         ?___ftpack 0001  
                      ??i1___ftge 0012                     ?i2_TMR_Timer0 0001  
      __size_of_ADC_ConversionInt 0018                        ??i2___ftge 0091  
                       ?___lwtoft 0009        __size_ofi1_TMR_ResetTimer1 0026  
          _MSC_BufferCopyIntConst 1444              __size_of_MSC_DelayMS 0064  
                   MSC_DelayMS@US 00B5                     MSC_DelayNOP@i 00B3  
                  ??_MSC_DelayNOP 00B3                           _IR_Data 00C3  
             __size_of_InitButton 000E                    ??_MSC_BlinkLED 01A7  
                         _MTR_IN1 1F84                           _MTR_IN2 1F6C  
                         _RF_Data 00C6               __size_of_InitTimer0 0022  
             __size_of_InitTimer1 001C               __size_of_InitTimer2 001E  
                   MSC_BlinkLED@i 01A9               __size_of_InitTimers 000E  
                       ?_high_isr 0001             ?i1_MSC_CleanBufferInt 0001  
              _CONF1_ChanE_Timing 3F5A                      ??_RF_DataInt 00B1  
                  ??i1_TMR_Timer0 0001                    ??i1_TMR_Timer1 0001  
                  ??i1_TMR_Timer2 0001                 _ADC_CurrentSource 005B  
                    ??_RF_Disable 0002                        ??_Init_App 00B1  
        i2MSC_BufferCopyInt@count 008A                   _Timer2PostCount 0051  
        i2MSC_BufferCopyInt@shift 008C                   ADC_Module@state 00B1  
                         _InitADC 1DC4                      ??_MTR_Rotate 00B9  
                         _InitLDO 21EC       MSC_BufferCopyIntConst@count 01A4  
                       _ADC_Start 21FE                           __Hparam 0000  
     MSC_BufferCopyIntConst@shift 01A6                   __size_of_InitIR 001C  
                 __size_of_InitRF 003C                           __Lparam 0000  
                 ?_IR_CleanBuffer 0001          __size_of_RF_SetBandwidth 003A  
      __end_of_TMR_Timer1Function 1CBE             i2MSC_CleanBufferInt@i 0084  
                  _BUT_ReadButton 1B7E                    ??_IR_CheckCode 002A  
                 __size_of___ftge 00CE                           ___ftdiv 1030  
                         ___ftmul 0F2E                           ___fttol 0CBC  
         __end_ofi1_TMR_Timer0Int 217C   __end_of_SYS_ConfigureOscillator 21EC  
        __end_of_TMR_Timer0Status 21D4          __end_of_TMR_Timer1Status 21B8  
                         __pcinit 1848                    ??i2_TMR_Timer0 0080  
                    ??i2___ftpack 0085                        ??___ftpack 0006  
                   ?_IR_ResetData 0001           i2___ftmul@f3_as_product 0095  
                         __ramtop 0400                      ??_TMR_Timer0 00B1  
                    ??_TMR_Timer1 00B1                      ??_TMR_Timer2 00B1  
                         __ptext0 07C4                           __ptext1 111C  
                         __ptext2 21E2                           __ptext3 15B4  
                         __ptext4 18C0                           __ptext5 1F6C  
                         __ptext6 1F84                           __ptext7 1A38  
                         __ptext8 1928                           __ptext9 1CBE  
              __end_of_RF_DataInt 1F1C                      ??i2___lwtoft 008B  
                      ??___lwtoft 000C                         _T0CONbits 000FD5  
                       _T1CONbits 000FCD                __end_of_RF_Disable 20FC  
                       _T2CONbits 000FCA                __end_of_MTR_Rotate 1928  
                         _low_isr 0018            ??_ADC_CalculateVoltage 002A  
        BUT_IR_PinChangeInt@state 00B1        __size_ofi2_TMR_ResetTimer0 002C  
                      ??_high_isr 00A1                    __pintcode_body 09C8  
             _BUT_IR_PinChangeInt 205C                     ?_RF_CheckCode 0001  
            end_of_initialization 18B6                     __Lmediumconst 3ECA  
                         int_func 09C8                __end_ofi2___ftpack 0F2E  
              __end_of_TMR_Timer0 202C                __end_of_TMR_Timer1 1FFC  
              __end_of_TMR_Timer2 1FCC              i2MSC_BufferCopyInt@i 0090  
                      ?_ADC_Start 0001            __end_of_BUT_ReadButton 1BB6  
            __size_of_RF_Receiver 0018                __end_ofi2___lwtoft 1D9A  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE            TMR_Timer1Function@mode 00B3  
            ?_BUT_IR_PinChangeInt 0001       __size_of_RF_LoadDefaultCode 00B0  
               i1_IR_ReadReceiver 1BEE                    ??_IR_ResetData 0002  
              ?i1_IR_ReadReceiver 0001        i1BUT_IR_PinChangeInt@state 0001  
                       _IRStarted 0057          __size_of_IR_ReadReceiver 0038  
                       _RF_Enable 20FC                         _TRISAbits 000F92  
           MSC_BufferCopyInt@from 0007                         _TRISBbits 000F93  
                       _TRISCbits 000F94         __size_ofi1_BUT_ReadButton 0036  
             ??i1_IR_ReadReceiver 0001                         _RFStarted 00C4  
          ??i1_MSC_CleanBufferInt 0005             __end_of_RF_SetSquelch 2044  
                  ??_RF_CheckCode 009A                     IR_CheckCode@i 0032  
                       i2___ftmul 0B50              __end_ofi1_RF_DataInt 20D2  
   __size_ofi2_MSC_CleanBufferInt 0056                     ?_RF_ResetData 0001  
                     ___ftdiv@exp 0019                   i2___ftpack@sign 0084  
                 ?_BUT_ReadButton 0001                    _IR_SavedTiming 0100  
                    ??_InitButton 00B2                       ___ftmul@exp 0024  
                    ??_InitTimer0 00B3                      ??_InitTimer1 00B4  
                    ??_InitTimer2 00B2                    __end_of_InitIR 1F38  
                  __end_of_InitRF 1B08                 __size_of_LDO_Pass 001A  
                    ??_InitTimers 00B4         __end_ofi1_IR_ReadReceiver 1C24  
            __end_of_MSC_DelayNOP 1CEA             ??_BUT_IR_PinChangeInt 00B1  
        i1MSC_CleanBufferInt@data 0001              __end_of_MSC_BlinkLED 1A8C  
                  __end_of___ftge 11EA                      ?_Init_System 0001  
                ?i1_TMR_Timer0Int 0001                     __pidataCOMRAM 2204  
               ??_RF_SetBandwidth 00B1              __end_ofi1_TMR_Timer0 216A  
            __end_ofi1_TMR_Timer1 2158              __end_ofi1_TMR_Timer2 2134  
                   low_isr@IRtemp 0046     ADC_CalculateVoltage@ADCcounts 002A  
                      ?_RF_Enable 0001                         _InitMOTOR 21FA  
                    _ButtonChange 0055                 __size_ofi1___ftge 0096  
           i1BUT_ReadButton@value 0001               start_initialization 1848  
               __size_ofi2___ftge 00CE    __size_ofi1_BUT_IR_PinChangeInt 0012  
               _ADC_ChangeChannel 1DEC                         _InitFlash 2202  
          ADC_ConversionInt@state 00B1     __end_ofi1_BUT_IR_PinChangeInt 2122  
    __size_ofi2_MSC_BufferCopyInt 00B4                         _Rail_RSSI 0048  
                 _TMR_ResetTimer0 1D16                   _TMR_ResetTimer1 1CEA  
                 _TMR_ResetTimer2 1D9A                ?_ADC_ChangeChannel 0001  
              __end_of_InitButton 21AA              __end_of_IR_CheckCode 057E  
                      ?i2___ftmul 008B               _PIONEER_PLUS_Timing 3ED4  
              __end_of_InitTimer0 1EA6                __end_of_InitTimer1 1F00  
              __end_of_InitTimer2 1EE4                __end_of_InitTimers 219C  
              _MSC_CleanBufferInt 198C                    ??_RF_ResetData 0080  
            __end_ofi2_TMR_Timer0 20BC  __size_of_SYS_ConfigureOscillator 000A  
             ??_ADC_ChangeChannel 00B1                   _TMR_Timer0Start 217C  
                 _TMR_Timer1Start 2134                   _TMR_Timer2Start 1F52  
              _IR_LoadDefaultCode 1664                 __size_of_Init_App 003C  
                     ??_ADC_Start 00B1                          ??_InitIR 00B7  
                        ??_InitRF 00B7               ?_MSC_CleanBufferInt 00B1  
                       _Timer2Use 005A            TMR_ResetTimer0@TimerOn 00B2  
             MSC_CleanBufferInt@i 00B5                          ??___ftge 01A0  
          TMR_ResetTimer1@TimerOn 00B2             IR_LoadDefaultCode@Low 01AB  
             ?_IR_LoadDefaultCode 0001            TMR_ResetTimer2@TimerOn 0002  
           RF_LoadDefaultCode@Low 01AB                       __pdataBANK0 00C9  
         ?_MSC_BufferCopyIntConst 01A0         __end_of_ADC_ChangeChannel 1E12  
               __size_of___ftpack 00C6                        ?_InitMOTOR 0001  
                   _IR_DataTiming 0300              ??_MSC_CleanBufferInt 00B5  
                     __pbssCOMRAM 0048                        ?_InitFlash 0001  
               __size_of___lwtoft 0026                     __pcstackBANK0 0080  
                   __pcstackBANK1 01A0                          ?_MTR_IN1 0001  
                        ?_MTR_IN2 0001              ??_IR_LoadDefaultCode 00B9  
               ??_IR_ReadReceiver 00B1               __CFG_CCP2MX$DEFAULT 000000  
         MSC_CleanBufferInt@count 00B3              __end_of_IR_ResetData 21C6  
               __size_of_high_isr 0B48                  ??_IR_CleanBuffer 0007  
                        ?_InitADC 0001                          ?_InitLDO 0001  
                 RF_CheckCode@Low 009A               _System_State_Change 00C8  
      __size_ofi1_IR_ReadReceiver 0036                         __pintcode 0008  
       i1MSC_CleanBufferInt@count 0003                     __pmediumconst 3ECA  
                 RF_DataInt@state 00B1                          ?___ftdiv 000C  
                        ?___ftmul 001B                          ?___fttol 00B1  
  __end_of_MSC_BufferCopyIntConst 1500             __end_of_TMR_Timer0Int 2014  
           __end_of_TMR_Timer1Int 1FE4             __end_of_TMR_Timer2Int 1FB4  
            __end_of_RF_CheckCode 07C4             __end_of_TMR_Timer1Osc 1EC6  
                     __pintcodelo 0018                      MSC_DelayMS@i 01A1  
               ?_TMR_Timer0Status 0001                 ?_TMR_Timer1Status 0001  
                   ??_MSC_DelayMS 01A0           __end_of_TMR_ResetTimer0 1D42  
         __end_of_TMR_ResetTimer1 1D16           __end_of_TMR_ResetTimer2 1DC4  
              ??_TMR_Timer0Status 0080                       ??_RF_Enable 0002  
              ??_TMR_Timer1Status 0001           i2MSC_BufferCopyInt@from 0086  
              _TMR_Timer1Function 1C8C      __size_ofi1_ADC_ChangeChannel 0026  
           __size_ofi1_RF_DataInt 0016                          ?_low_isr 0001  
                i1_BUT_ReadButton 1C24               __end_of_PCB_Version 3ED4  
         __end_of_TMR_Timer0Start 218E           __end_of_TMR_Timer1Start 2146  
         __end_of_TMR_Timer2Start 1F6C                       ??i2___ftmul 0091  
             ?_TMR_Timer1Function 0001                          _DC_Motor 00C1  
             RF_SetBandwidth@band 00B1             __size_of_MSC_DelayNOP 002C  
                   LDO_Pass@state 00B1                          _IPR1bits 000F9F  
                        _PIE1bits 000F9D                          _LDO_Pass 1F38  
           __size_of_MSC_BlinkLED 0054                          _PIR1bits 000F9E  
                        _IRChange 0056                          _RCONbits 000FD0  
                __CFG_WDTPS$32768 000000             __size_ofi1_TMR_Timer0 0012  
           __size_ofi1_TMR_Timer1 0012             __size_ofi1_TMR_Timer2 0012  
            i1TMR_Timer0Int@state 0001              ??_TMR_Timer1Function 00B3  
                        _IR_Saved 00CC                      i1_RF_DataInt 20BC  
                        _RF_Saved 00CD              __end_of_RF_ResetData 21E2  
                        i1___ftge 17B2                        _ADCON0bits 000FC2  
                      _ADCON1bits 000FC1                        _ADCON2bits 000FC0  
                        i2___ftge 11EA              __size_of_Init_System 0032  
      __size_of_ADC_ChangeChannel 0026                       ??_InitMOTOR 00B1  
           __size_of_IR_CheckCode 02C6                       ??_InitFlash 00B1  
             __end_of_MSC_DelayMS 198C             __size_ofi2_TMR_Timer0 0018  
                    _MSC_DelayNOP 1CBE                       _INTCON2bits 000FF1  
                     _INTCON3bits 000FF0                         copy_data0 1898  
                __size_of_MTR_IN1 0018                  __size_of_MTR_IN2 0018  
                    _MSC_BlinkLED 1A38     __size_of_ADC_CalculateVoltage 00C6  
         _SYS_ConfigureOscillator 21E2                  ??_BUT_ReadButton 00B1  
                        _Init_App 1B08                     ??_RF_Receiver 00B1  
                        _Rail_VIN 00C9                        _ADC_Module 2074  
                    i1_TMR_Timer0 2158                      i1_TMR_Timer1 2146  
                    i1_TMR_Timer2 2122                          __Hparam0 0000  
                __size_of_InitADC 0028                  __size_of_InitLDO 0008  
                 _RF_SetBandwidth 1B44                          __Lparam0 0000  
      __end_of_RF_LoadDefaultCode 1664               i2_MSC_BufferCopyInt 1500  
    __end_ofi2_MSC_CleanBufferInt 1A38                      _IR_CheckCode 02B8  
                    _IR_DataPlace 0059                  __size_of___ftdiv 00EC  
                __size_of___ftmul 0102                  __size_of___fttol 0152  
                        ___ftpack 137E                      i2_TMR_Timer0 20A4  
                     _PCB_Version 3ECB                          ___lwtoft 1E5E  
          MSC_CleanBufferInt@data 00B1                  ?_TMR_ResetTimer0 0001  
                ?_TMR_ResetTimer1 0001                  ?_TMR_ResetTimer2 0001  
             low_isr@button_state 0045                     _RF_DataTiming 0200  
           __size_of_IR_ResetData 000E              ?i2_MSC_BufferCopyInt 0086  
                __size_of_low_isr 029C                          __ptext10 1C5A  
                        __ptext11 218E                          __ptext20 1FE4  
                        __ptext12 1EC6                          __ptext21 1E84  
                        __ptext13 1F9C                          __ptext30 21FA  
                        __ptext22 1FFC                          __ptext14 1FB4  
                        __ptext31 21EC                          __ptext23 1D16  
                        __ptext15 1EE4                          __ptext40 208C  
                        __ptext32 1F38                          __ptext24 2014  
                        __ptext16 1FCC                          __ptext41 1DEC  
                        __ptext33 1F1C                          __ptext25 1ACC  
                        __ptext17 1C8C                          __ptext50 1BEE  
                        __ptext42 1BB6                          __ptext34 2202  
                        __ptext26 202C                          __ptext18 1EA6  
                        __ptext51 1C24                          __ptext43 1B08  
                        __ptext35 219C                          __ptext27 1B44  
                        __ptext19 1CEA                          __ptext60 20E8  
                        __ptext52 2110                          __ptext44 1664  
                        __ptext36 1B7E                          __ptext28 2044  
                        __ptext61 2158                          __ptext53 1F52  
                        __ptext45 0CBC                          __ptext37 205C  
                        __ptext29 1F00                          __ptext70 1A8C  
                        __ptext62 21B8                          __ptext54 1D9A  
                        __ptext46 1444                          __ptext38 1DC4  
                        __ptext71 12B8                          __ptext63 20FC  
                        __ptext55 2122                          __ptext47 198C  
                        __ptext39 2074                          __ptext80 1D42  
                        __ptext72 1E38                          __ptext64 216A  
                        __ptext56 21AA                          __ptext48 21FE  
                        __ptext81 20A4                          __ptext73 1E5E  
                        __ptext65 20BC                          __ptext57 2134  
                        __ptext82 21D4                          __ptext74 0F2E  
                        __ptext66 20D2                          __ptext58 1E12  
                        __ptext83 057E                          __ptext75 1030  
                        __ptext67 02B8                          __ptext59 2146  
                        __ptext84 1D6E                          __ptext76 137E  
                        __ptext68 17B2                          __ptext85 0B50  
                        __ptext69 1712                          __ptext86 0E0E  
                        __ptext78 21C6                          __ptext87 11EA  
                        __ptext79 217C                          __ptext88 1500  
                        __ptext89 19E2                 i1TMR_Timer0@state 0001  
                ?_TMR_Timer0Start 0001                  ?_TMR_Timer1Start 0001  
                        _high_isr 0008                 i1TMR_Timer1@state 0001  
                ?_TMR_Timer2Start 0003                 i1TMR_Timer2@state 0001  
   __size_ofi1_MSC_CleanBufferInt 0040                     __size_of_main 0204  
     __end_of_BUT_IR_PinChangeInt 2074             __size_of_RF_CheckCode 0246  
                    MTR_IN1@state 00B1               __end_of_RF_Receiver 205C  
                    MTR_IN2@state 00B1            __size_of_RF_SetSquelch 0018  
                    _IR_ResetData 21B8                   _IR_ReadReceiver 1BB6  
                     _MSC_DelayMS 1928                          exp@coeff 3FBE  
                        log@coeff 3FDC                      _IRValue_prev 00C2  
                     _OSCTUNEbits 000F9B                        _INTCONbits 000FF2  
        __size_ofi1_TMR_Timer0Int 0012             ??i2_MSC_BufferCopyInt 008E  
       ??_SYS_ConfigureOscillator 00B1                  MSC_DelayNOP@NOPs 00B1  
           i1_BUT_IR_PinChangeInt 2110                      _RF_CheckCode 057E  
                        intlevel1 0000                          intlevel2 0000  
                     _IR_CodeSize 0058           __end_of_RF_SetBandwidth 1B7E  
                    _RF_DataPlace 00C7                     RF_CheckCode@i 00A0  
                     ?_ADC_Module 0001             i2MSC_BufferCopyInt@to 0088  
               i2TMR_Timer0@state 0080               i1_ADC_ChangeChannel 1E38  
                      _OSCCONbits 000FD3          __end_ofi1_BUT_ReadButton 1C5A  
                  _RF_SavedTiming 0278             __size_of_RF_ResetData 000E  
                     _IR_SyncHigh 004B              ?i1_ADC_ChangeChannel 0001  
                     _RF_CodeSize 00C5       __size_of_MSC_CleanBufferInt 0056  
     __size_of_IR_LoadDefaultCode 00AE                     _RF_SetSquelch 202C  
                      _RF_DataInt 1F00              i2_MSC_CleanBufferInt 19E2  
       __size_of_TMR_Timer0Status 000E         __size_of_TMR_Timer1Status 000E  
                      _IR_SyncLow 004D                 MSC_BlinkLED@blink 01A5  
                      _RF_Disable 20E8                      _RF_ResetData 21D4  
                     _RF_Receiver 2044          i2TMR_ResetTimer0@TimerOn 0081  
                      _MTR_Rotate 18C0       __end_of_PIONEER_PLUS_Timing 3F5A  
          MSC_BufferCopyInt@count 000B            MSC_BufferCopyInt@shift 000D  
