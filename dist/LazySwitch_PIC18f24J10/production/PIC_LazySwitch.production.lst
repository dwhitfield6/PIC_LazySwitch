

Microchip Technology PIC18 PRO Macro Assembler V1.35 build -356382666 
                                                                                               Wed Oct 21 16:16:20 2015

Microchip Technology Omniscient Code Generator v1.35 (PRO mode) build 201507080246
     1                           	processor	18F24J10
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	_FlashWaste_const,global,ovrld,reloc=2,class=CODE,delta=1
     8                           	psect	_IR_SavedTiming0_const,global,ovrld,reloc=2,class=CODE,delta=1
     9                           	psect	_IR_SavedTiming1_const,global,ovrld,reloc=2,class=CODE,delta=1
    10                           	psect	_RF_SavedTiming_const,global,ovrld,reloc=2,class=CODE,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	text95,global,reloc=2,class=CODE,delta=1
   118                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   119                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
   147                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   148                           	psect	param0,global,class=BANK0,space=1,delta=1
   149                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   150  0000                     
   151                           	psect	idataCOMRAM
   152  001BE6                     __pidataCOMRAM:
   153                           	opt stack 0
   154                           
   155                           ;initializer for _ADC_CurrentSource
   156  001BE6  0A                 	db	10
   157                           
   158                           	psect	idataBANK1
   159  001BC8                     __pidataBANK1:
   160                           	opt stack 0
   161                           
   162                           ;initializer for _Rail_VIN
   163  001BC8  00                 	db	0
   164  001BC9  90                 	db	144
   165  001BCA  40                 	db	64
   166                           
   167                           ;initializer for _IR_Saved
   168  001BCB  5B                 	db	91
   169                           
   170                           ;initializer for _RF_Saved
   171  001BCC  5B                 	db	91
   172                           
   173                           ;initializer for _System_State
   174  001BCD  08                 	db	8
   175  0000                     _FlashWaste_absconstaddr	set	9728
   176  0000                     _IR_SavedTiming0_absconstaddr	set	9216
   177  0000                     _IR_SavedTiming1_absconstaddr	set	9408
   178  0000                     _RF_SavedTiming_absconstaddr	set	9600
   179  0000                     _FlashWaste_absconstaddr	set	9728
   180                           
   181                           	psect	_FlashWaste_const
   182  002600                     __p_FlashWaste_const:
   183                           	opt stack 0
   184  002600                     _FlashWaste:
   185                           	opt stack 0
   186  002600  DA                 	db	218
   187  002601  DA                 	db	218
   188  002602  DA                 	db	218
   189  002603  DA                 	db	218
   190  002604  DA                 	db	218
   191  002605  DA                 	db	218
   192  002606  DA                 	db	218
   193  002607  DA                 	db	218
   194  002608  DA                 	db	218
   195  002609  DA                 	db	218
   196  00260A  DA                 	db	218
   197  00260B  DA                 	db	218
   198  00260C  DA                 	db	218
   199  00260D  DA                 	db	218
   200  00260E  DA                 	db	218
   201  00260F  DA                 	db	218
   202  002610  DA                 	db	218
   203  002611  DA                 	db	218
   204  002612  DA                 	db	218
   205  002613  DA                 	db	218
   206  002614  DA                 	db	218
   207  002615  DA                 	db	218
   208  002616  DA                 	db	218
   209  002617  DA                 	db	218
   210  002618  DA                 	db	218
   211  002619  DA                 	db	218
   212  00261A  DA                 	db	218
   213  00261B  DA                 	db	218
   214  00261C  DA                 	db	218
   215  00261D  DA                 	db	218
   216  00261E  DA                 	db	218
   217  00261F  DA                 	db	218
   218  002620  DA                 	db	218
   219  002621  DA                 	db	218
   220  002622  DA                 	db	218
   221  002623  DA                 	db	218
   222  002624  DA                 	db	218
   223  002625  DA                 	db	218
   224  002626  DA                 	db	218
   225  002627  DA                 	db	218
   226  002628  DA                 	db	218
   227  002629  DA                 	db	218
   228  00262A  DA                 	db	218
   229  00262B  DA                 	db	218
   230  00262C  DA                 	db	218
   231  00262D  DA                 	db	218
   232  00262E  DA                 	db	218
   233  00262F  DA                 	db	218
   234  002630  DA                 	db	218
   235  002631  DA                 	db	218
   236  002632  DA                 	db	218
   237  002633  DA                 	db	218
   238  002634  DA                 	db	218
   239  002635  DA                 	db	218
   240  002636  DA                 	db	218
   241  002637  DA                 	db	218
   242  002638  DA                 	db	218
   243  002639  DA                 	db	218
   244  00263A  DA                 	db	218
   245  00263B  DA                 	db	218
   246  00263C  DA                 	db	218
   247  00263D  DA                 	db	218
   248  00263E  DA                 	db	218
   249  00263F  DA                 	db	218
   250  002640  DA                 	db	218
   251  002641  DA                 	db	218
   252  002642  DA                 	db	218
   253  002643  DA                 	db	218
   254  002644  DA                 	db	218
   255  002645  DA                 	db	218
   256  002646  DA                 	db	218
   257  002647  DA                 	db	218
   258  002648  DA                 	db	218
   259  002649  DA                 	db	218
   260  00264A  DA                 	db	218
   261  00264B  DA                 	db	218
   262  00264C  DA                 	db	218
   263  00264D  DA                 	db	218
   264  00264E  DA                 	db	218
   265  00264F  DA                 	db	218
   266  002650  DA                 	db	218
   267  002651  DA                 	db	218
   268  002652  DA                 	db	218
   269  002653  DA                 	db	218
   270  002654  DA                 	db	218
   271  002655  DA                 	db	218
   272  002656  DA                 	db	218
   273  002657  DA                 	db	218
   274  002658  DA                 	db	218
   275  002659  DA                 	db	218
   276  00265A  DA                 	db	218
   277  00265B  DA                 	db	218
   278  00265C  DA                 	db	218
   279  00265D  DA                 	db	218
   280  00265E  DA                 	db	218
   281  00265F  DA                 	db	218
   282  002660  DA                 	db	218
   283  002661  DA                 	db	218
   284  002662  DA                 	db	218
   285  002663  DA                 	db	218
   286  002664  DA                 	db	218
   287  002665  DA                 	db	218
   288  002666  DA                 	db	218
   289  002667  DA                 	db	218
   290  002668  DA                 	db	218
   291  002669  DA                 	db	218
   292  00266A  DA                 	db	218
   293  00266B  DA                 	db	218
   294  00266C  DA                 	db	218
   295  00266D  DA                 	db	218
   296  00266E  DA                 	db	218
   297  00266F  DA                 	db	218
   298  002670  DA                 	db	218
   299  002671  DA                 	db	218
   300  002672  DA                 	db	218
   301  002673  DA                 	db	218
   302  002674  DA                 	db	218
   303  002675  DA                 	db	218
   304  002676  DA                 	db	218
   305  002677  DA                 	db	218
   306  002678  DA                 	db	218
   307  002679  DA                 	db	218
   308  00267A  DA                 	db	218
   309  00267B  DA                 	db	218
   310  00267C  DA                 	db	218
   311  00267D  DA                 	db	218
   312  00267E  DA                 	db	218
   313  00267F  DA                 	db	218
   314  002680  DA                 	db	218
   315  002681  DA                 	db	218
   316  002682  DA                 	db	218
   317  002683  DA                 	db	218
   318  002684  DA                 	db	218
   319  002685  DA                 	db	218
   320  002686  DA                 	db	218
   321  002687  DA                 	db	218
   322  002688  DA                 	db	218
   323  002689  DA                 	db	218
   324  00268A  DA                 	db	218
   325  00268B  DA                 	db	218
   326  00268C  DA                 	db	218
   327  00268D  DA                 	db	218
   328  00268E  DA                 	db	218
   329  00268F  DA                 	db	218
   330  002690  DA                 	db	218
   331  002691  DA                 	db	218
   332  002692  DA                 	db	218
   333  002693  DA                 	db	218
   334  002694  DA                 	db	218
   335  002695  DA                 	db	218
   336  002696  DA                 	db	218
   337  002697  DA                 	db	218
   338  002698  DA                 	db	218
   339  002699  DA                 	db	218
   340  00269A  DA                 	db	218
   341  00269B  DA                 	db	218
   342  00269C  DA                 	db	218
   343  00269D  DA                 	db	218
   344  00269E  DA                 	db	218
   345  00269F  DA                 	db	218
   346  0026A0  DA                 	db	218
   347  0026A1  DA                 	db	218
   348  0026A2  DA                 	db	218
   349  0026A3  DA                 	db	218
   350  0026A4  DA                 	db	218
   351  0026A5  DA                 	db	218
   352  0026A6  DA                 	db	218
   353  0026A7  DA                 	db	218
   354  0026A8  DA                 	db	218
   355  0026A9  DA                 	db	218
   356  0026AA  DA                 	db	218
   357  0026AB  DA                 	db	218
   358  0026AC  DA                 	db	218
   359  0026AD  DA                 	db	218
   360  0026AE  DA                 	db	218
   361  0026AF  DA                 	db	218
   362  0026B0  DA                 	db	218
   363  0026B1  DA                 	db	218
   364  0026B2  DA                 	db	218
   365  0026B3  DA                 	db	218
   366  0026B4  DA                 	db	218
   367  0026B5  DA                 	db	218
   368  0026B6  DA                 	db	218
   369  0026B7  DA                 	db	218
   370  0026B8  DA                 	db	218
   371  0026B9  DA                 	db	218
   372  0026BA  DA                 	db	218
   373  0026BB  DA                 	db	218
   374  0026BC  DA                 	db	218
   375  0026BD  DA                 	db	218
   376  0026BE  DA                 	db	218
   377  0026BF  DA                 	db	218
   378  0026C0  DA                 	db	218
   379  0026C1  DA                 	db	218
   380  0026C2  DA                 	db	218
   381  0026C3  DA                 	db	218
   382  0026C4  DA                 	db	218
   383  0026C5  DA                 	db	218
   384  0026C6  DA                 	db	218
   385  0026C7  DA                 	db	218
   386  0026C8  DA                 	db	218
   387  0026C9  DA                 	db	218
   388  0026CA  DA                 	db	218
   389  0026CB  DA                 	db	218
   390  0026CC  DA                 	db	218
   391  0026CD  DA                 	db	218
   392  0026CE  DA                 	db	218
   393  0026CF  DA                 	db	218
   394  0026D0  DA                 	db	218
   395  0026D1  DA                 	db	218
   396  0026D2  DA                 	db	218
   397  0026D3  DA                 	db	218
   398  0026D4  DA                 	db	218
   399  0026D5  DA                 	db	218
   400  0026D6  DA                 	db	218
   401  0026D7  DA                 	db	218
   402  0026D8  DA                 	db	218
   403  0026D9  DA                 	db	218
   404  0026DA  DA                 	db	218
   405  0026DB  DA                 	db	218
   406  0026DC  DA                 	db	218
   407  0026DD  DA                 	db	218
   408  0026DE  DA                 	db	218
   409  0026DF  DA                 	db	218
   410  0026E0  DA                 	db	218
   411  0026E1  DA                 	db	218
   412  0026E2  DA                 	db	218
   413  0026E3  DA                 	db	218
   414  0026E4  DA                 	db	218
   415  0026E5  DA                 	db	218
   416  0026E6  DA                 	db	218
   417  0026E7  DA                 	db	218
   418  0026E8  DA                 	db	218
   419  0026E9  DA                 	db	218
   420  0026EA  DA                 	db	218
   421  0026EB  DA                 	db	218
   422  0026EC  DA                 	db	218
   423  0026ED  DA                 	db	218
   424  0026EE  DA                 	db	218
   425  0026EF  DA                 	db	218
   426  0026F0  DA                 	db	218
   427  0026F1  DA                 	db	218
   428  0026F2  DA                 	db	218
   429  0026F3  DA                 	db	218
   430  0026F4  DA                 	db	218
   431  0026F5  DA                 	db	218
   432  0026F6  DA                 	db	218
   433  0026F7  DA                 	db	218
   434  0026F8  DA                 	db	218
   435  0026F9  DA                 	db	218
   436  0026FA  DA                 	db	218
   437  0026FB  DA                 	db	218
   438  0026FC  DA                 	db	218
   439  0026FD  DA                 	db	218
   440  0026FE  DA                 	db	218
   441  0026FF  DA                 	db	218
   442  002700  DA                 	db	218
   443  002701  DA                 	db	218
   444  002702  DA                 	db	218
   445  002703  DA                 	db	218
   446  002704  DA                 	db	218
   447  002705  DA                 	db	218
   448  002706  DA                 	db	218
   449  002707  DA                 	db	218
   450  002708  DA                 	db	218
   451  002709  DA                 	db	218
   452  00270A  DA                 	db	218
   453  00270B  DA                 	db	218
   454  00270C  DA                 	db	218
   455  00270D  DA                 	db	218
   456  00270E  DA                 	db	218
   457  00270F  DA                 	db	218
   458  002710  DA                 	db	218
   459  002711  DA                 	db	218
   460  002712  DA                 	db	218
   461  002713  DA                 	db	218
   462  002714  DA                 	db	218
   463  002715  DA                 	db	218
   464  002716  DA                 	db	218
   465  002717  DA                 	db	218
   466  002718  DA                 	db	218
   467  002719  DA                 	db	218
   468  00271A  DA                 	db	218
   469  00271B  DA                 	db	218
   470  00271C  DA                 	db	218
   471  00271D  DA                 	db	218
   472  00271E  DA                 	db	218
   473  00271F  DA                 	db	218
   474  002720  DA                 	db	218
   475  002721  DA                 	db	218
   476  002722  DA                 	db	218
   477  002723  DA                 	db	218
   478  002724  DA                 	db	218
   479  002725  DA                 	db	218
   480  002726  DA                 	db	218
   481  002727  DA                 	db	218
   482  002728  DA                 	db	218
   483  002729  DA                 	db	218
   484  00272A  DA                 	db	218
   485  00272B  DA                 	db	218
   486  00272C  DA                 	db	218
   487  00272D  DA                 	db	218
   488  00272E  DA                 	db	218
   489  00272F  DA                 	db	218
   490  002730  DA                 	db	218
   491  002731  DA                 	db	218
   492  002732  DA                 	db	218
   493  002733  DA                 	db	218
   494  002734  DA                 	db	218
   495  002735  DA                 	db	218
   496  002736  DA                 	db	218
   497  002737  DA                 	db	218
   498  002738  DA                 	db	218
   499  002739  DA                 	db	218
   500  00273A  DA                 	db	218
   501  00273B  DA                 	db	218
   502  00273C  DA                 	db	218
   503  00273D  DA                 	db	218
   504  00273E  DA                 	db	218
   505  00273F  DA                 	db	218
   506  002740  DA                 	db	218
   507  002741  DA                 	db	218
   508  002742  DA                 	db	218
   509  002743  DA                 	db	218
   510  002744  DA                 	db	218
   511  002745  DA                 	db	218
   512  002746  DA                 	db	218
   513  002747  DA                 	db	218
   514  002748  DA                 	db	218
   515  002749  DA                 	db	218
   516  00274A  DA                 	db	218
   517  00274B  DA                 	db	218
   518  00274C  DA                 	db	218
   519  00274D  DA                 	db	218
   520  00274E  DA                 	db	218
   521  00274F  DA                 	db	218
   522  002750  DA                 	db	218
   523  002751  DA                 	db	218
   524  002752  DA                 	db	218
   525  002753  DA                 	db	218
   526  002754  DA                 	db	218
   527  002755  DA                 	db	218
   528  002756  DA                 	db	218
   529  002757  DA                 	db	218
   530  002758  DA                 	db	218
   531  002759  DA                 	db	218
   532  00275A  DA                 	db	218
   533  00275B  DA                 	db	218
   534  00275C  DA                 	db	218
   535  00275D  DA                 	db	218
   536  00275E  DA                 	db	218
   537  00275F  DA                 	db	218
   538  002760  DA                 	db	218
   539  002761  DA                 	db	218
   540  002762  DA                 	db	218
   541  002763  DA                 	db	218
   542  002764  DA                 	db	218
   543  002765  DA                 	db	218
   544  002766  DA                 	db	218
   545  002767  DA                 	db	218
   546  002768  DA                 	db	218
   547  002769  DA                 	db	218
   548  00276A  DA                 	db	218
   549  00276B  DA                 	db	218
   550  00276C  DA                 	db	218
   551  00276D  DA                 	db	218
   552  00276E  DA                 	db	218
   553  00276F  DA                 	db	218
   554  002770  DA                 	db	218
   555  002771  DA                 	db	218
   556  002772  DA                 	db	218
   557  002773  DA                 	db	218
   558  002774  DA                 	db	218
   559  002775  DA                 	db	218
   560  002776  DA                 	db	218
   561  002777  DA                 	db	218
   562  002778  DA                 	db	218
   563  002779  DA                 	db	218
   564  00277A  DA                 	db	218
   565  00277B  DA                 	db	218
   566  00277C  DA                 	db	218
   567  00277D  DA                 	db	218
   568  00277E  DA                 	db	218
   569  00277F  DA                 	db	218
   570  002780  DA                 	db	218
   571  002781  DA                 	db	218
   572  002782  DA                 	db	218
   573  002783  DA                 	db	218
   574  002784  DA                 	db	218
   575  002785  DA                 	db	218
   576  002786  DA                 	db	218
   577  002787  DA                 	db	218
   578  002788  DA                 	db	218
   579  002789  DA                 	db	218
   580  00278A  DA                 	db	218
   581  00278B  DA                 	db	218
   582  00278C  DA                 	db	218
   583  00278D  DA                 	db	218
   584  00278E  DA                 	db	218
   585  00278F  DA                 	db	218
   586  002790  DA                 	db	218
   587  002791  DA                 	db	218
   588  002792  DA                 	db	218
   589  002793  DA                 	db	218
   590  002794  DA                 	db	218
   591  002795  DA                 	db	218
   592  002796  DA                 	db	218
   593  002797  DA                 	db	218
   594  002798  DA                 	db	218
   595  002799  DA                 	db	218
   596  00279A  DA                 	db	218
   597  00279B  DA                 	db	218
   598  00279C  DA                 	db	218
   599  00279D  DA                 	db	218
   600  00279E  DA                 	db	218
   601  00279F  DA                 	db	218
   602  0027A0  DA                 	db	218
   603  0027A1  DA                 	db	218
   604  0027A2  DA                 	db	218
   605  0027A3  DA                 	db	218
   606  0027A4  DA                 	db	218
   607  0027A5  DA                 	db	218
   608  0027A6  DA                 	db	218
   609  0027A7  DA                 	db	218
   610  0027A8  DA                 	db	218
   611  0027A9  DA                 	db	218
   612  0027AA  DA                 	db	218
   613  0027AB  DA                 	db	218
   614  0027AC  DA                 	db	218
   615  0027AD  DA                 	db	218
   616  0027AE  DA                 	db	218
   617  0027AF  DA                 	db	218
   618  0027B0  DA                 	db	218
   619  0027B1  DA                 	db	218
   620  0027B2  DA                 	db	218
   621  0027B3  DA                 	db	218
   622  0027B4  DA                 	db	218
   623  0027B5  DA                 	db	218
   624  0027B6  DA                 	db	218
   625  0027B7  DA                 	db	218
   626  0027B8  DA                 	db	218
   627  0027B9  DA                 	db	218
   628  0027BA  DA                 	db	218
   629  0027BB  DA                 	db	218
   630  0027BC  DA                 	db	218
   631  0027BD  DA                 	db	218
   632  0027BE  DA                 	db	218
   633  0027BF  DA                 	db	218
   634  0027C0  DA                 	db	218
   635  0027C1  DA                 	db	218
   636  0027C2  DA                 	db	218
   637  0027C3  DA                 	db	218
   638  0027C4  DA                 	db	218
   639  0027C5  DA                 	db	218
   640  0027C6  DA                 	db	218
   641  0027C7  DA                 	db	218
   642  0027C8  DA                 	db	218
   643  0027C9  DA                 	db	218
   644  0027CA  DA                 	db	218
   645  0027CB  DA                 	db	218
   646  0027CC  DA                 	db	218
   647  0027CD  DA                 	db	218
   648  0027CE  DA                 	db	218
   649  0027CF  DA                 	db	218
   650  0027D0  DA                 	db	218
   651  0027D1  DA                 	db	218
   652  0027D2  DA                 	db	218
   653  0027D3  DA                 	db	218
   654  0027D4  DA                 	db	218
   655  0027D5  DA                 	db	218
   656  0027D6  DA                 	db	218
   657  0027D7  DA                 	db	218
   658  0027D8  DA                 	db	218
   659  0027D9  DA                 	db	218
   660  0027DA  DA                 	db	218
   661  0027DB  DA                 	db	218
   662  0027DC  DA                 	db	218
   663  0027DD  DA                 	db	218
   664  0027DE  DA                 	db	218
   665  0027DF  DA                 	db	218
   666  0027E0  DA                 	db	218
   667  0027E1  DA                 	db	218
   668  0027E2  DA                 	db	218
   669  0027E3  DA                 	db	218
   670  0027E4  DA                 	db	218
   671  0027E5  DA                 	db	218
   672  0027E6  DA                 	db	218
   673  0027E7  DA                 	db	218
   674  0027E8  DA                 	db	218
   675  0027E9  DA                 	db	218
   676  0027EA  DA                 	db	218
   677  0027EB  DA                 	db	218
   678  0027EC  DA                 	db	218
   679  0027ED  DA                 	db	218
   680  0027EE  DA                 	db	218
   681  0027EF  DA                 	db	218
   682  0027F0  DA                 	db	218
   683  0027F1  DA                 	db	218
   684  0027F2  DA                 	db	218
   685  0027F3  DA                 	db	218
   686  0027F4  DA                 	db	218
   687  0027F5  DA                 	db	218
   688  0027F6  DA                 	db	218
   689  0027F7  DA                 	db	218
   690  0027F8  DA                 	db	218
   691  0027F9  DA                 	db	218
   692  0027FA  DA                 	db	218
   693  0027FB  DA                 	db	218
   694  0027FC  DA                 	db	218
   695  0027FD  DA                 	db	218
   696  0027FE  DA                 	db	218
   697  0027FF  DA                 	db	218
   698  002800                     __end_of_FlashWaste:
   699                           	opt stack 0
   700  0000                     _IR_SavedTiming0_absconstaddr	set	9216
   701                           
   702                           	psect	_IR_SavedTiming0_const
   703  002400                     __p_IR_SavedTiming0_const:
   704                           	opt stack 0
   705  002400                     _IR_SavedTiming0:
   706                           	opt stack 0
   707  002400  2198               	dw	8600
   708  002402  1068               	dw	4200
   709  002404  01C2               	dw	450
   710  002406  04B0               	dw	1200
   711  002408  01C2               	dw	450
   712  00240A  01C2               	dw	450
   713  00240C  01C2               	dw	450
   714  00240E  04B0               	dw	1200
   715  002410  01C2               	dw	450
   716  002412  04B0               	dw	1200
   717  002414  01C2               	dw	450
   718  002416  01C2               	dw	450
   719  002418  01C2               	dw	450
   720  00241A  04B0               	dw	1200
   721  00241C  01C2               	dw	450
   722  00241E  01C2               	dw	450
   723  002420  01C2               	dw	450
   724  002422  04B0               	dw	1200
   725  002424  01C2               	dw	450
   726  002426  01C2               	dw	450
   727  002428  01C2               	dw	450
   728  00242A  04B0               	dw	1200
   729  00242C  01C2               	dw	450
   730  00242E  01C2               	dw	450
   731  002430  01C2               	dw	450
   732  002432  01C2               	dw	450
   733  002434  01C2               	dw	450
   734  002436  04B0               	dw	1200
   735  002438  01C2               	dw	450
   736  00243A  01C2               	dw	450
   737  00243C  01C2               	dw	450
   738  00243E  04B0               	dw	1200
   739  002440  01C2               	dw	450
   740  002442  01C2               	dw	450
   741  002444  01C2               	dw	450
   742  002446  01C2               	dw	450
   743  002448  01C2               	dw	450
   744  00244A  04B0               	dw	1200
   745  00244C  01C2               	dw	450
   746  00244E  01C2               	dw	450
   747  002450  01C2               	dw	450
   748  002452  04B0               	dw	1200
   749  002454  01C2               	dw	450
   750  002456  01C2               	dw	450
   751  002458  01C2               	dw	450
   752  00245A  01C2               	dw	450
   753  00245C  01C2               	dw	450
   754  00245E  01C2               	dw	450
   755  002460  01C2               	dw	450
   756  002462  01C2               	dw	450
   757  002464  01C2               	dw	450
   758  002466  04B0               	dw	1200
   759  002468  01C2               	dw	450
   760  00246A  01C2               	dw	450
   761  00246C  01C2               	dw	450
   762  00246E  04B0               	dw	1200
   763  002470  01C2               	dw	450
   764  002472  01C2               	dw	450
   765  002474  01C2               	dw	450
   766  002476  04B0               	dw	1200
   767  002478  01C2               	dw	450
   768  00247A  04B0               	dw	1200
   769  00247C  01C2               	dw	450
   770  00247E  04B0               	dw	1200
   771  002480  01C2               	dw	450
   772  002482  04B0               	dw	1200
   773  002484  01C2               	dw	450
   774  002486  0000               	dw	0
   775  002488  0000               	dw	0
   776  00248A  0000               	dw	0
   777  00248C  0000               	dw	0
   778  00248E  0000               	dw	0
   779  002490  0000               	dw	0
   780  002492  0000               	dw	0
   781  002494  0000               	dw	0
   782  002496  0000               	dw	0
   783  002498  0000               	dw	0
   784  00249A  0000               	dw	0
   785  00249C  0000               	dw	0
   786  00249E  0000               	dw	0
   787  0024A0  0000               	dw	0
   788  0024A2  0000               	dw	0
   789  0024A4  0000               	dw	0
   790  0024A6  0000               	dw	0
   791  0024A8  0000               	dw	0
   792  0024AA  0000               	dw	0
   793  0024AC  0000               	dw	0
   794  0024AE  0000               	dw	0
   795  0024B0  0000               	dw	0
   796  0024B2  0000               	dw	0
   797  0024B4  0000               	dw	0
   798  0024B6  0000               	dw	0
   799  0024B8  0000               	dw	0
   800  0024BA  0000               	dw	0
   801  0024BC  0000               	dw	0
   802  0024BE  0000               	dw	0
   803  0024C0                     __end_of_IR_SavedTiming0:
   804                           	opt stack 0
   805  0000                     _IR_SavedTiming1_absconstaddr	set	9408
   806                           
   807                           	psect	_IR_SavedTiming1_const
   808  0024C0                     __p_IR_SavedTiming1_const:
   809                           	opt stack 0
   810  0024C0                     _IR_SavedTiming1:
   811                           	opt stack 0
   812  0024C0  2198               	dw	8600
   813  0024C2  1068               	dw	4200
   814  0024C4  01C2               	dw	450
   815  0024C6  01C2               	dw	450
   816  0024C8  01C2               	dw	450
   817  0024CA  01C2               	dw	450
   818  0024CC  01C2               	dw	450
   819  0024CE  01C2               	dw	450
   820  0024D0  01C2               	dw	450
   821  0024D2  04B0               	dw	1200
   822  0024D4  01C2               	dw	450
   823  0024D6  04B0               	dw	1200
   824  0024D8  01C2               	dw	450
   825  0024DA  04B0               	dw	1200
   826  0024DC  01C2               	dw	450
   827  0024DE  01C2               	dw	450
   828  0024E0  01C2               	dw	450
   829  0024E2  01C2               	dw	450
   830  0024E4  01C2               	dw	450
   831  0024E6  04B0               	dw	1200
   832  0024E8  01C2               	dw	450
   833  0024EA  04B0               	dw	1200
   834  0024EC  01C2               	dw	450
   835  0024EE  04B0               	dw	1200
   836  0024F0  01C2               	dw	450
   837  0024F2  01C2               	dw	450
   838  0024F4  01C2               	dw	450
   839  0024F6  01C2               	dw	450
   840  0024F8  01C2               	dw	450
   841  0024FA  01C2               	dw	450
   842  0024FC  01C2               	dw	450
   843  0024FE  04B0               	dw	1200
   844  002500  01C2               	dw	450
   845  002502  04B0               	dw	1200
   846  002504  01C2               	dw	450
   847  002506  01C2               	dw	450
   848  002508  01C2               	dw	450
   849  00250A  04B0               	dw	1200
   850  00250C  01C2               	dw	450
   851  00250E  01C2               	dw	450
   852  002510  01C2               	dw	450
   853  002512  04B0               	dw	1200
   854  002514  01C2               	dw	450
   855  002516  01C2               	dw	450
   856  002518  01C2               	dw	450
   857  00251A  01C2               	dw	450
   858  00251C  01C2               	dw	450
   859  00251E  01C2               	dw	450
   860  002520  01C2               	dw	450
   861  002522  01C2               	dw	450
   862  002524  01C2               	dw	450
   863  002526  04B0               	dw	1200
   864  002528  01C2               	dw	450
   865  00252A  01C2               	dw	450
   866  00252C  01C2               	dw	450
   867  00252E  04B0               	dw	1200
   868  002530  01C2               	dw	450
   869  002532  01C2               	dw	450
   870  002534  01C2               	dw	450
   871  002536  04B0               	dw	1200
   872  002538  01C2               	dw	450
   873  00253A  04B0               	dw	1200
   874  00253C  01C2               	dw	450
   875  00253E  04B0               	dw	1200
   876  002540  01C2               	dw	450
   877  002542  04B0               	dw	1200
   878  002544  01C2               	dw	450
   879  002546  0000               	dw	0
   880  002548  0000               	dw	0
   881  00254A  0000               	dw	0
   882  00254C  0000               	dw	0
   883  00254E  0000               	dw	0
   884  002550  0000               	dw	0
   885  002552  0000               	dw	0
   886  002554  0000               	dw	0
   887  002556  0000               	dw	0
   888  002558  0000               	dw	0
   889  00255A  0000               	dw	0
   890  00255C  0000               	dw	0
   891  00255E  0000               	dw	0
   892  002560  0000               	dw	0
   893  002562  0000               	dw	0
   894  002564  0000               	dw	0
   895  002566  0000               	dw	0
   896  002568  0000               	dw	0
   897  00256A  0000               	dw	0
   898  00256C  0000               	dw	0
   899  00256E  0000               	dw	0
   900  002570  0000               	dw	0
   901  002572  0000               	dw	0
   902  002574  0000               	dw	0
   903  002576  0000               	dw	0
   904  002578  0000               	dw	0
   905  00257A  0000               	dw	0
   906  00257C  0000               	dw	0
   907  00257E  0000               	dw	0
   908  002580                     __end_of_IR_SavedTiming1:
   909                           	opt stack 0
   910  0000                     _RF_SavedTiming_absconstaddr	set	9600
   911                           
   912                           	psect	_RF_SavedTiming_const
   913  002580                     __p_RF_SavedTiming_const:
   914                           	opt stack 0
   915  002580                     _RF_SavedTiming:
   916                           	opt stack 0
   917  002580  0342               	dw	834
   918  002582  0015               	dw	21
   919  002584  0050               	dw	80
   920  002586  0016               	dw	22
   921  002588  0050               	dw	80
   922  00258A  0015               	dw	21
   923  00258C  004E               	dw	78
   924  00258E  004F               	dw	79
   925  002590  001A               	dw	26
   926  002592  0016               	dw	22
   927  002594  004E               	dw	78
   928  002596  004E               	dw	78
   929  002598  001B               	dw	27
   930  00259A  0015               	dw	21
   931  00259C  004F               	dw	79
   932  00259E  004C               	dw	76
   933  0025A0  0019               	dw	25
   934  0025A2  0017               	dw	23
   935  0025A4  004F               	dw	79
   936  0025A6  004B               	dw	75
   937  0025A8  001B               	dw	27
   938  0025AA  0015               	dw	21
   939  0025AC  0051               	dw	81
   940  0025AE  004B               	dw	75
   941  0025B0  0019               	dw	25
   942  0025B2  0016               	dw	22
   943  0025B4  0051               	dw	81
   944  0025B6  0016               	dw	22
   945  0025B8  004F               	dw	79
   946  0025BA  0016               	dw	22
   947  0025BC  0050               	dw	80
   948  0025BE  0018               	dw	24
   949  0025C0  004F               	dw	79
   950  0025C2  004D               	dw	77
   951  0025C4  0019               	dw	25
   952  0025C6  004C               	dw	76
   953  0025C8  001B               	dw	27
   954  0025CA  0015               	dw	21
   955  0025CC  0050               	dw	80
   956  0025CE  0015               	dw	21
   957  0025D0  0051               	dw	81
   958  0025D2  0015               	dw	21
   959  0025D4  0050               	dw	80
   960  0025D6  0016               	dw	22
   961  0025D8  0050               	dw	80
   962  0025DA  0016               	dw	22
   963  0025DC  0051               	dw	81
   964  0025DE  0016               	dw	22
   965  0025E0  004F               	dw	79
   966  0025E2  0016               	dw	22
   967  0025E4  00                 	db	0
   968  0025E5  00                 	db	0
   969  0025E6  00                 	db	0
   970  0025E7  00                 	db	0
   971  0025E8  00                 	db	0
   972  0025E9  00                 	db	0
   973  0025EA  00                 	db	0
   974  0025EB  00                 	db	0
   975  0025EC  00                 	db	0
   976  0025ED  00                 	db	0
   977  0025EE  00                 	db	0
   978  0025EF  00                 	db	0
   979  0025F0  00                 	db	0
   980  0025F1  00                 	db	0
   981  0025F2  00                 	db	0
   982  0025F3  00                 	db	0
   983  0025F4  00                 	db	0
   984  0025F5  00                 	db	0
   985  0025F6  00                 	db	0
   986  0025F7  00                 	db	0
   987  0025F8  00                 	db	0
   988  0025F9  00                 	db	0
   989  0025FA  00                 	db	0
   990  0025FB  00                 	db	0
   991  0025FC  00                 	db	0
   992  0025FD  00                 	db	0
   993  0025FE  00                 	db	0
   994  0025FF  00                 	db	0
   995  002600                     __end_of_RF_SavedTiming:
   996                           	opt stack 0
   997  0000                     _ADCON0bits	set	4034
   998  0000                     _ADCON1bits	set	4033
   999  0000                     _ADCON2bits	set	4032
  1000  0000                     _ADRESH	set	4036
  1001  0000                     _ADRESL	set	4035
  1002  0000                     _EECON1bits	set	4006
  1003  0000                     _INTCON2bits	set	4081
  1004  0000                     _INTCON3bits	set	4080
  1005  0000                     _INTCONbits	set	4082
  1006  0000                     _IPR1bits	set	3999
  1007  0000                     _LATA	set	3977
  1008  0000                     _LATB	set	3978
  1009  0000                     _LATC	set	3979
  1010  0000                     _OSCCON	set	4051
  1011  0000                     _OSCCONbits	set	4051
  1012  0000                     _OSCTUNEbits	set	3995
  1013  0000                     _PIE1bits	set	3997
  1014  0000                     _PIR1bits	set	3998
  1015  0000                     _PORTB	set	3969
  1016  0000                     _PR2	set	4043
  1017  0000                     _RCONbits	set	4048
  1018  0000                     _T0CONbits	set	4053
  1019  0000                     _T1CONbits	set	4045
  1020  0000                     _T2CONbits	set	4042
  1021  0000                     _TABLAT	set	4085
  1022  0000                     _TBLPTRH	set	4087
  1023  0000                     _TBLPTRL	set	4086
  1024  0000                     _TBLPTRU	set	4088
  1025  0000                     _TMR0H	set	4055
  1026  0000                     _TMR0L	set	4054
  1027  0000                     _TMR1H	set	4047
  1028  0000                     _TMR1L	set	4046
  1029  0000                     _TMR2	set	4044
  1030  0000                     _TRISAbits	set	3986
  1031  0000                     _TRISBbits	set	3987
  1032  0000                     _TRISCbits	set	3988
  1033                           
  1034                           ; #config settings
  1035  0000                     
  1036                           	psect	cinit
  1037  00106C                     __pcinit:
  1038                           	opt stack 0
  1039  00106C                     start_initialization:
  1040                           	opt stack 0
  1041  00106C                     __initialization:
  1042                           	opt stack 0
  1043                           
  1044                           ; Clear objects allocated to BANK3 (192 bytes)
  1045  00106C  EE03  F000         	lfsr	0,__pbssBANK3
  1046  001070  0EC0               	movlw	192
  1047  001072                     clear_0:
  1048  001072  6AEE               	clrf	postinc0,c
  1049  001074  06E8               	decf	wreg,f,c
  1050  001076  E1FD               	bnz	clear_0
  1051                           
  1052                           ; Clear objects allocated to BANK2 (192 bytes)
  1053  001078  EE02  F000         	lfsr	0,__pbssBANK2
  1054  00107C  0EC0               	movlw	192
  1055  00107E                     clear_1:
  1056  00107E  6AEE               	clrf	postinc0,c
  1057  001080  06E8               	decf	wreg,f,c
  1058  001082  E1FD               	bnz	clear_1
  1059                           
  1060                           ; Clear objects allocated to BANK1 (135 bytes)
  1061  001084  EE01  F000         	lfsr	0,__pbssBANK1
  1062  001088  0E87               	movlw	135
  1063  00108A                     clear_2:
  1064  00108A  6AEE               	clrf	postinc0,c
  1065  00108C  06E8               	decf	wreg,f,c
  1066  00108E  E1FD               	bnz	clear_2
  1067                           
  1068                           ; Clear objects allocated to BANK0 (10 bytes)
  1069  001090  EE00  F0C0         	lfsr	0,__pbssBANK0
  1070  001094  0E0A               	movlw	10
  1071  001096                     clear_3:
  1072  001096  6AEE               	clrf	postinc0,c
  1073  001098  06E8               	decf	wreg,f,c
  1074  00109A  E1FD               	bnz	clear_3
  1075                           
  1076                           ; Clear objects allocated to COMRAM (19 bytes)
  1077  00109C  EE00  F05A         	lfsr	0,__pbssCOMRAM
  1078  0010A0  0E13               	movlw	19
  1079  0010A2                     clear_4:
  1080  0010A2  6AEE               	clrf	postinc0,c
  1081  0010A4  06E8               	decf	wreg,f,c
  1082  0010A6  E1FD               	bnz	clear_4
  1083                           
  1084                           ; Initialize objects allocated to BANK1 (6 bytes)
  1085                           ; load TBLPTR registers with __pidataBANK1
  1086  0010A8  0EC8               	movlw	low __pidataBANK1
  1087  0010AA  6EF6               	movwf	tblptrl,c
  1088  0010AC  0E1B               	movlw	high __pidataBANK1
  1089  0010AE  6EF7               	movwf	tblptrh,c
  1090  0010B0  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1091  0010B2  6EF8               	movwf	tblptru,c
  1092  0010B4  EE01  F0A9         	lfsr	0,__pdataBANK1
  1093  0010B8  EE10 F006          	lfsr	1,6
  1094  0010BC                     copy_data0:
  1095  0010BC  0009               	tblrd		*+
  1096  0010BE  CFF5 FFEE          	movff	tablat,postinc0
  1097  0010C2  50E5               	movf	postdec1,w,c
  1098  0010C4  50E1               	movf	fsr1l,w,c
  1099  0010C6  E1FA               	bnz	copy_data0
  1100                           
  1101                           ; Initialize objects allocated to COMRAM (1 bytes)
  1102                           ; load TBLPTR registers with __pidataCOMRAM
  1103  0010C8  0EE6               	movlw	low __pidataCOMRAM
  1104  0010CA  6EF6               	movwf	tblptrl,c
  1105  0010CC  0E1B               	movlw	high __pidataCOMRAM
  1106  0010CE  6EF7               	movwf	tblptrh,c
  1107  0010D0  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1108  0010D2  6EF8               	movwf	tblptru,c
  1109  0010D4  0009               	tblrd		*+	;fetch initializer
  1110  0010D6  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1111  0010DA                     end_of_initialization:
  1112                           	opt stack 0
  1113  0010DA                     __end_of__initialization:
  1114                           	opt stack 0
  1115  0010DA  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1116  0010DC  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1117  0010DE  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1118  0010E0  6EF8               	movwf	tblptru,c
  1119  0010E2  0100               	movlb	0
  1120  0010E4  EF26  F01F         	goto	_main	;jump to C main() function
  1121                           tblptru	equ	0xFF8
  1122                           tblptrh	equ	0xFF7
  1123                           tblptrl	equ	0xFF6
  1124                           tablat	equ	0xFF5
  1125                           postinc0	equ	0xFEE
  1126                           wreg	equ	0xFE8
  1127                           postdec1	equ	0xFE5
  1128                           fsr1l	equ	0xFE1
  1129                           
  1130                           	psect	bssCOMRAM
  1131  00005A                     __pbssCOMRAM:
  1132                           	opt stack 0
  1133  00005A                     _Activity_Timer:
  1134                           	opt stack 0
  1135  00005A                     	ds	4
  1136  00005E                     _IR_SyncHigh:
  1137                           	opt stack 0
  1138  00005E                     	ds	2
  1139  000060                     _IR_SyncLow:
  1140                           	opt stack 0
  1141  000060                     	ds	2
  1142  000062                     _Timer2Post:
  1143                           	opt stack 0
  1144  000062                     	ds	2
  1145  000064                     _Timer2PostCount:
  1146                           	opt stack 0
  1147  000064                     	ds	2
  1148  000066                     _ButtonChange:
  1149                           	opt stack 0
  1150  000066                     	ds	1
  1151  000067                     _IRChange:
  1152                           	opt stack 0
  1153  000067                     	ds	1
  1154  000068                     _IRProgramCodeNumber:
  1155                           	opt stack 0
  1156  000068                     	ds	1
  1157  000069                     _IRStarted:
  1158                           	opt stack 0
  1159  000069                     	ds	1
  1160  00006A                     _IR_CodeSize:
  1161                           	opt stack 0
  1162  00006A                     	ds	1
  1163  00006B                     _IR_DataPlace:
  1164                           	opt stack 0
  1165  00006B                     	ds	1
  1166  00006C                     _Timer2Use:
  1167                           	opt stack 0
  1168  00006C                     	ds	1
  1169                           tblptru	equ	0xFF8
  1170                           tblptrh	equ	0xFF7
  1171                           tblptrl	equ	0xFF6
  1172                           tablat	equ	0xFF5
  1173                           postinc0	equ	0xFEE
  1174                           wreg	equ	0xFE8
  1175                           postdec1	equ	0xFE5
  1176                           fsr1l	equ	0xFE1
  1177                           
  1178                           	psect	dataCOMRAM
  1179  00006D                     __pdataCOMRAM:
  1180                           	opt stack 0
  1181  00006D                     _ADC_CurrentSource:
  1182                           	opt stack 0
  1183  00006D                     	ds	1
  1184                           tblptru	equ	0xFF8
  1185                           tblptrh	equ	0xFF7
  1186                           tblptrl	equ	0xFF6
  1187                           tablat	equ	0xFF5
  1188                           postinc0	equ	0xFEE
  1189                           wreg	equ	0xFE8
  1190                           postdec1	equ	0xFE5
  1191                           fsr1l	equ	0xFE1
  1192                           
  1193                           	psect	bssBANK0
  1194  0000C0                     __pbssBANK0:
  1195                           	opt stack 0
  1196  0000C0                     _RF_SyncHigh:
  1197                           	opt stack 0
  1198  0000C0                     	ds	2
  1199  0000C2                     _RF_SyncLow:
  1200                           	opt stack 0
  1201  0000C2                     	ds	2
  1202  0000C4                     _ButtonValue_prev:
  1203                           	opt stack 0
  1204  0000C4                     	ds	1
  1205  0000C5                     _DC_Motor:
  1206                           	opt stack 0
  1207  0000C5                     	ds	1
  1208  0000C6                     _IRValue_prev:
  1209                           	opt stack 0
  1210  0000C6                     	ds	1
  1211  0000C7                     _RFStarted:
  1212                           	opt stack 0
  1213  0000C7                     	ds	1
  1214  0000C8                     _RF_CodeSize:
  1215                           	opt stack 0
  1216  0000C8                     	ds	1
  1217  0000C9                     _RF_DataPlace:
  1218                           	opt stack 0
  1219  0000C9                     	ds	1
  1220                           tblptru	equ	0xFF8
  1221                           tblptrh	equ	0xFF7
  1222                           tblptrl	equ	0xFF6
  1223                           tablat	equ	0xFF5
  1224                           postinc0	equ	0xFEE
  1225                           wreg	equ	0xFE8
  1226                           postdec1	equ	0xFE5
  1227                           fsr1l	equ	0xFE1
  1228                           
  1229                           	psect	bssBANK1
  1230  000100                     __pbssBANK1:
  1231                           	opt stack 0
  1232  000100                     _ADC_SampleCount:
  1233                           	opt stack 0
  1234  000100                     	ds	2
  1235  000102                     _Button_Data:
  1236                           	opt stack 0
  1237  000102                     	ds	1
  1238  000103                     _Flash_Status:
  1239                           	opt stack 0
  1240  000103                     	ds	1
  1241  000104                     _IR_Data:
  1242                           	opt stack 0
  1243  000104                     	ds	1
  1244  000105                     _RF_Data:
  1245                           	opt stack 0
  1246  000105                     	ds	1
  1247  000106                     _System_State_Change:
  1248                           	opt stack 0
  1249  000106                     	ds	1
  1250  000107                     _RF_DataTiming:
  1251                           	opt stack 0
  1252  000107                     	ds	128
  1253                           tblptru	equ	0xFF8
  1254                           tblptrh	equ	0xFF7
  1255                           tblptrl	equ	0xFF6
  1256                           tablat	equ	0xFF5
  1257                           postinc0	equ	0xFEE
  1258                           wreg	equ	0xFE8
  1259                           postdec1	equ	0xFE5
  1260                           fsr1l	equ	0xFE1
  1261                           
  1262                           	psect	dataBANK1
  1263  0001A9                     __pdataBANK1:
  1264                           	opt stack 0
  1265  0001A9                     _Rail_VIN:
  1266                           	opt stack 0
  1267  0001A9                     	ds	3
  1268  0001AC                     _IR_Saved:
  1269                           	opt stack 0
  1270  0001AC                     	ds	1
  1271  0001AD                     _RF_Saved:
  1272                           	opt stack 0
  1273  0001AD                     	ds	1
  1274  0001AE                     _System_State:
  1275                           	opt stack 0
  1276  0001AE                     	ds	1
  1277                           tblptru	equ	0xFF8
  1278                           tblptrh	equ	0xFF7
  1279                           tblptrl	equ	0xFF6
  1280                           tablat	equ	0xFF5
  1281                           postinc0	equ	0xFEE
  1282                           wreg	equ	0xFE8
  1283                           postdec1	equ	0xFE5
  1284                           fsr1l	equ	0xFE1
  1285                           
  1286                           	psect	bssBANK2
  1287  000200                     __pbssBANK2:
  1288                           	opt stack 0
  1289  000200                     _IR_DataTiming:
  1290                           	opt stack 0
  1291  000200                     	ds	192
  1292                           tblptru	equ	0xFF8
  1293                           tblptrh	equ	0xFF7
  1294                           tblptrl	equ	0xFF6
  1295                           tablat	equ	0xFF5
  1296                           postinc0	equ	0xFEE
  1297                           wreg	equ	0xFE8
  1298                           postdec1	equ	0xFE5
  1299                           fsr1l	equ	0xFE1
  1300                           
  1301                           	psect	bssBANK3
  1302  000300                     __pbssBANK3:
  1303                           	opt stack 0
  1304  000300                     _IR_DataHolder1:
  1305                           	opt stack 0
  1306  000300                     	ds	192
  1307                           tblptru	equ	0xFF8
  1308                           tblptrh	equ	0xFF7
  1309                           tblptrl	equ	0xFF6
  1310                           tablat	equ	0xFF5
  1311                           postinc0	equ	0xFEE
  1312                           wreg	equ	0xFE8
  1313                           postdec1	equ	0xFE5
  1314                           fsr1l	equ	0xFE1
  1315                           
  1316                           	psect	cstackBANK1
  1317  000187                     __pcstackBANK1:
  1318                           	opt stack 0
  1319  000187                     ?___ftmul:
  1320                           	opt stack 0
  1321  000187                     ___fttol@sign1:
  1322                           	opt stack 0
  1323  000187                     ___ftmul@f1:
  1324                           	opt stack 0
  1325  000187                     MSC_DelayMS@i:
  1326                           	opt stack 0
  1327                           
  1328                           ; 4 bytes @ 0x0
  1329  000187                     	ds	1
  1330  000188                     ___fttol@lval:
  1331                           	opt stack 0
  1332                           
  1333                           ; 4 bytes @ 0x1
  1334  000188                     	ds	2
  1335  00018A                     ___ftmul@f2:
  1336                           	opt stack 0
  1337                           
  1338                           ; 3 bytes @ 0x3
  1339  00018A                     	ds	1
  1340  00018B                     MSC_BlinkLED@blink:
  1341                           	opt stack 0
  1342                           
  1343                           ; 2 bytes @ 0x4
  1344  00018B                     	ds	1
  1345  00018C                     ___fttol@exp1:
  1346                           	opt stack 0
  1347                           
  1348                           ; 1 bytes @ 0x5
  1349  00018C                     	ds	1
  1350  00018D                     ??___ftmul:
  1351  00018D                     MSC_BlinkLED@speed:
  1352                           	opt stack 0
  1353                           
  1354                           ; 2 bytes @ 0x6
  1355  00018D                     	ds	2
  1356  00018F                     MSC_BlinkLED@i:
  1357                           	opt stack 0
  1358                           
  1359                           ; 2 bytes @ 0x8
  1360  00018F                     	ds	1
  1361  000190                     ___ftmul@exp:
  1362                           	opt stack 0
  1363                           
  1364                           ; 1 bytes @ 0x9
  1365  000190                     	ds	1
  1366  000191                     ___ftmul@sign:
  1367                           	opt stack 0
  1368                           
  1369                           ; 1 bytes @ 0xA
  1370  000191                     	ds	1
  1371  000192                     ___ftmul@f3_as_product:
  1372                           	opt stack 0
  1373                           
  1374                           ; 3 bytes @ 0xB
  1375  000192                     	ds	3
  1376  000195                     RF_LoadCode@Low:
  1377                           	opt stack 0
  1378  000195                     IR_LoadCode@Low1:
  1379                           	opt stack 0
  1380                           
  1381                           ; 3 bytes @ 0xE
  1382  000195                     	ds	3
  1383  000198                     RF_LoadCode@High:
  1384                           	opt stack 0
  1385  000198                     IR_LoadCode@High1:
  1386                           	opt stack 0
  1387                           
  1388                           ; 3 bytes @ 0x11
  1389  000198                     	ds	3
  1390  00019B                     IR_LoadCode@CodeSize1:
  1391                           	opt stack 0
  1392                           
  1393                           ; 1 bytes @ 0x14
  1394  00019B                     	ds	1
  1395  00019C                     IR_LoadCode@Low2:
  1396                           	opt stack 0
  1397                           
  1398                           ; 3 bytes @ 0x15
  1399  00019C                     	ds	3
  1400  00019F                     IR_LoadCode@High2:
  1401                           	opt stack 0
  1402                           
  1403                           ; 3 bytes @ 0x18
  1404  00019F                     	ds	3
  1405  0001A2                     IR_LoadCode@CodeSize2:
  1406                           	opt stack 0
  1407                           
  1408                           ; 1 bytes @ 0x1B
  1409  0001A2                     	ds	1
  1410  0001A3                     IR_LoadCode@LowBound:
  1411                           	opt stack 0
  1412                           
  1413                           ; 3 bytes @ 0x1C
  1414  0001A3                     	ds	3
  1415  0001A6                     IR_LoadCode@HighBound:
  1416                           	opt stack 0
  1417                           
  1418                           ; 3 bytes @ 0x1F
  1419  0001A6                     	ds	3
  1420                           tblptru	equ	0xFF8
  1421                           tblptrh	equ	0xFF7
  1422                           tblptrl	equ	0xFF6
  1423                           tablat	equ	0xFF5
  1424                           postinc0	equ	0xFEE
  1425                           wreg	equ	0xFE8
  1426                           postdec1	equ	0xFE5
  1427                           fsr1l	equ	0xFE1
  1428                           
  1429                           	psect	cstackBANK0
  1430  000080                     __pcstackBANK0:
  1431                           	opt stack 0
  1432  000080                     ?i2___ftpack:
  1433                           	opt stack 0
  1434  000080                     ?i2___fttol:
  1435                           	opt stack 0
  1436  000080                     i2RF_CalculateCodesize@i:
  1437                           	opt stack 0
  1438  000080                     i2RF_DataInt@state:
  1439                           	opt stack 0
  1440  000080                     i2TMR_Timer0@state:
  1441                           	opt stack 0
  1442  000080                     i2TMR_Timer0Int@state:
  1443                           	opt stack 0
  1444  000080                     i2MSC_CleanBufferInt@data:
  1445                           	opt stack 0
  1446  000080                     i2FSH_VerifyWriteIntArray@ConstArray:
  1447                           	opt stack 0
  1448  000080                     i2___ftpack@arg:
  1449                           	opt stack 0
  1450  000080                     i2___fttol@f1:
  1451                           	opt stack 0
  1452  000080                     i2FSH_AddressToBlock@Address:
  1453                           	opt stack 0
  1454                           
  1455                           ; 4 bytes @ 0x0
  1456  000080                     	ds	1
  1457  000081                     i2TMR_ResetTimer0@TimerOn:
  1458                           	opt stack 0
  1459                           
  1460                           ; 1 bytes @ 0x1
  1461  000081                     	ds	1
  1462  000082                     i2MSC_CleanBufferInt@count:
  1463                           	opt stack 0
  1464                           
  1465                           ; 2 bytes @ 0x2
  1466  000082                     	ds	1
  1467  000083                     i2___ftpack@exp:
  1468                           	opt stack 0
  1469  000083                     i2FSH_VerifyWriteIntArray@Array:
  1470                           	opt stack 0
  1471                           
  1472                           ; 2 bytes @ 0x3
  1473  000083                     	ds	1
  1474  000084                     ??i2___fttol:
  1475  000084                     i2___ftpack@sign:
  1476                           	opt stack 0
  1477  000084                     i2MSC_CleanBufferInt@i:
  1478                           	opt stack 0
  1479  000084                     i2FSH_WriteIntArray@ConstArray:
  1480                           	opt stack 0
  1481  000084                     i2FSH_EraseBlock@Address:
  1482                           	opt stack 0
  1483                           
  1484                           ; 4 bytes @ 0x4
  1485  000084                     	ds	1
  1486  000085                     ??i2_FSH_VerifyWriteIntArray:
  1487  000085                     ??i2___ftpack:
  1488                           
  1489                           ; 0 bytes @ 0x5
  1490  000085                     	ds	1
  1491  000086                     i2MSC_BufferCopyIntConst@from:
  1492                           	opt stack 0
  1493                           
  1494                           ; 3 bytes @ 0x6
  1495  000086                     	ds	1
  1496  000087                     i2FSH_WriteIntArray@Array:
  1497                           	opt stack 0
  1498                           
  1499                           ; 2 bytes @ 0x7
  1500  000087                     	ds	1
  1501  000088                     ?i2___lwtoft:
  1502                           	opt stack 0
  1503  000088                     i2FSH_EraseBlock@highint:
  1504                           	opt stack 0
  1505  000088                     i2FSH_VerifyWriteIntArray@data:
  1506                           	opt stack 0
  1507  000088                     i2___lwtoft@c:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x8
  1511  000088                     	ds	1
  1512  000089                     ??i2_FSH_WriteIntArray:
  1513  000089                     i2FSH_EraseBlock@lowint:
  1514                           	opt stack 0
  1515  000089                     i2___fttol@sign1:
  1516                           	opt stack 0
  1517  000089                     i2MSC_BufferCopyIntConst@to:
  1518                           	opt stack 0
  1519                           
  1520                           ; 2 bytes @ 0x9
  1521  000089                     	ds	1
  1522  00008A                     i2FSH_EraseBlock@WriteTries:
  1523                           	opt stack 0
  1524  00008A                     i2FSH_VerifyWriteIntArray@failcount:
  1525                           	opt stack 0
  1526  00008A                     i2___fttol@lval:
  1527                           	opt stack 0
  1528                           
  1529                           ; 4 bytes @ 0xA
  1530  00008A                     	ds	1
  1531  00008B                     ?i2___ftmul:
  1532                           	opt stack 0
  1533  00008B                     i2FSH_WriteIntArray@i:
  1534                           	opt stack 0
  1535  00008B                     i2FSH_VerifyWriteIntArray@i:
  1536                           	opt stack 0
  1537  00008B                     i2MSC_BufferCopyIntConst@count:
  1538                           	opt stack 0
  1539  00008B                     i2___ftge@ff1:
  1540                           	opt stack 0
  1541  00008B                     i2___ftmul@f1:
  1542                           	opt stack 0
  1543                           
  1544                           ; 3 bytes @ 0xB
  1545  00008B                     	ds	1
  1546  00008C                     i2FSH_WriteIntArray@address:
  1547                           	opt stack 0
  1548                           
  1549                           ; 4 bytes @ 0xC
  1550  00008C                     	ds	1
  1551  00008D                     i2MSC_BufferCopyIntConst@shift:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0xD
  1555  00008D                     	ds	1
  1556  00008E                     i2___fttol@exp1:
  1557                           	opt stack 0
  1558  00008E                     i2___ftge@ff2:
  1559                           	opt stack 0
  1560  00008E                     i2___ftmul@f2:
  1561                           	opt stack 0
  1562                           
  1563                           ; 3 bytes @ 0xE
  1564  00008E                     	ds	1
  1565  00008F                     i2MSC_BufferCopyIntConst@i:
  1566                           	opt stack 0
  1567                           
  1568                           ; 2 bytes @ 0xF
  1569  00008F                     	ds	2
  1570  000091                     ??i2_FSH_Write_IR_RF:
  1571  000091                     ??i2___ftge:
  1572  000091                     ??i2___ftmul:
  1573                           
  1574                           ; 0 bytes @ 0x11
  1575  000091                     	ds	3
  1576  000094                     i2___ftmul@exp:
  1577                           	opt stack 0
  1578                           
  1579                           ; 1 bytes @ 0x14
  1580  000094                     	ds	1
  1581  000095                     i2___ftmul@sign:
  1582                           	opt stack 0
  1583                           
  1584                           ; 1 bytes @ 0x15
  1585  000095                     	ds	1
  1586  000096                     i2___ftmul@f3_as_product:
  1587                           	opt stack 0
  1588                           
  1589                           ; 3 bytes @ 0x16
  1590  000096                     	ds	1
  1591  000097                     i2FSH_Write_IR_RF@highint:
  1592                           	opt stack 0
  1593                           
  1594                           ; 1 bytes @ 0x17
  1595  000097                     	ds	1
  1596  000098                     i2FSH_Write_IR_RF@lowint:
  1597                           	opt stack 0
  1598                           
  1599                           ; 1 bytes @ 0x18
  1600  000098                     	ds	1
  1601  000099                     i2FSH_Write_IR_RF@FlashWasteindex:
  1602                           	opt stack 0
  1603  000099                     i2RF_LoadCode@Low:
  1604                           	opt stack 0
  1605                           
  1606                           ; 3 bytes @ 0x19
  1607  000099                     	ds	2
  1608  00009B                     i2FSH_Write_IR_RF@j:
  1609                           	opt stack 0
  1610                           
  1611                           ; 1 bytes @ 0x1B
  1612  00009B                     	ds	1
  1613  00009C                     i2FSH_Write_IR_RF@status:
  1614                           	opt stack 0
  1615  00009C                     i2RF_LoadCode@High:
  1616                           	opt stack 0
  1617                           
  1618                           ; 3 bytes @ 0x1C
  1619  00009C                     	ds	1
  1620  00009D                     i2FSH_Write_IR_RF@i:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x1D
  1624  00009D                     	ds	2
  1625  00009F                     i2FSH_Write_IR_RF@WriteTries:
  1626                           	opt stack 0
  1627                           
  1628                           ; 1 bytes @ 0x1F
  1629  00009F                     	ds	1
  1630  0000A0                     i2FSH_Write_IR_RF@RAMaddress:
  1631                           	opt stack 0
  1632                           
  1633                           ; 2 bytes @ 0x20
  1634  0000A0                     	ds	2
  1635  0000A2                     
  1636                           ; 0 bytes @ 0x22
  1637  0000A2                     	ds	2
  1638  0000A4                     RF_CheckCode@Low:
  1639                           	opt stack 0
  1640                           
  1641                           ; 3 bytes @ 0x24
  1642  0000A4                     	ds	3
  1643  0000A7                     RF_CheckCode@High:
  1644                           	opt stack 0
  1645                           
  1646                           ; 3 bytes @ 0x27
  1647  0000A7                     	ds	3
  1648  0000AA                     RF_CheckCode@i:
  1649                           	opt stack 0
  1650                           
  1651                           ; 1 bytes @ 0x2A
  1652  0000AA                     	ds	1
  1653  0000AB                     ??_high_isr:
  1654                           
  1655                           ; 0 bytes @ 0x2B
  1656  0000AB                     	ds	8
  1657  0000B3                     high_isr@RFtemp:
  1658                           	opt stack 0
  1659                           
  1660                           ; 2 bytes @ 0x33
  1661  0000B3                     	ds	2
  1662  0000B5                     ?___ftpack:
  1663                           	opt stack 0
  1664  0000B5                     ?___fttol:
  1665                           	opt stack 0
  1666  0000B5                     RF_CalculateCodesize@i:
  1667                           	opt stack 0
  1668  0000B5                     RF_DataInt@state:
  1669                           	opt stack 0
  1670  0000B5                     RF_Receiver@state:
  1671                           	opt stack 0
  1672  0000B5                     RF_SetBandwidth@band:
  1673                           	opt stack 0
  1674  0000B5                     RF_SetSquelch@state:
  1675                           	opt stack 0
  1676  0000B5                     MTR_IN1@state:
  1677                           	opt stack 0
  1678  0000B5                     MTR_IN2@state:
  1679                           	opt stack 0
  1680  0000B5                     IR_ReadReceiver@value:
  1681                           	opt stack 0
  1682  0000B5                     LDO_Pass@state:
  1683                           	opt stack 0
  1684  0000B5                     BUT_ReadButton@value:
  1685                           	opt stack 0
  1686  0000B5                     BUT_IR_PinChangeInt@state:
  1687                           	opt stack 0
  1688  0000B5                     TMR_Timer0@state:
  1689                           	opt stack 0
  1690  0000B5                     TMR_Timer1@state:
  1691                           	opt stack 0
  1692  0000B5                     TMR_Timer2@state:
  1693                           	opt stack 0
  1694  0000B5                     TMR_Timer0Int@state:
  1695                           	opt stack 0
  1696  0000B5                     TMR_Timer1Int@state:
  1697                           	opt stack 0
  1698  0000B5                     TMR_Timer2Int@state:
  1699                           	opt stack 0
  1700  0000B5                     TMR_Timer1Osc@state:
  1701                           	opt stack 0
  1702  0000B5                     ADC_Module@state:
  1703                           	opt stack 0
  1704  0000B5                     ADC_ConversionInt@state:
  1705                           	opt stack 0
  1706  0000B5                     MSC_DelayNOP@NOPs:
  1707                           	opt stack 0
  1708  0000B5                     MSC_CleanBufferInt@data:
  1709                           	opt stack 0
  1710  0000B5                     IR_CalculateCodesize@Code:
  1711                           	opt stack 0
  1712  0000B5                     ___ftpack@arg:
  1713                           	opt stack 0
  1714  0000B5                     ___ftge@ff1:
  1715                           	opt stack 0
  1716  0000B5                     ___fttol@f1:
  1717                           	opt stack 0
  1718                           
  1719                           ; 3 bytes @ 0x35
  1720  0000B5                     	ds	1
  1721  0000B6                     TMR_ResetTimer0@TimerOn:
  1722                           	opt stack 0
  1723  0000B6                     TMR_ResetTimer1@TimerOn:
  1724                           	opt stack 0
  1725                           
  1726                           ; 1 bytes @ 0x36
  1727  0000B6                     	ds	1
  1728  0000B7                     TMR_Timer1Function@mode:
  1729                           	opt stack 0
  1730  0000B7                     MSC_DelayNOP@i:
  1731                           	opt stack 0
  1732  0000B7                     MSC_CleanBufferInt@count:
  1733                           	opt stack 0
  1734                           
  1735                           ; 2 bytes @ 0x37
  1736  0000B7                     	ds	1
  1737  0000B8                     ??_IR_CalculateCodesize:
  1738  0000B8                     ___ftpack@exp:
  1739                           	opt stack 0
  1740  0000B8                     ___ftge@ff2:
  1741                           	opt stack 0
  1742                           
  1743                           ; 3 bytes @ 0x38
  1744  0000B8                     	ds	1
  1745  0000B9                     ??___fttol:
  1746  0000B9                     ___ftpack@sign:
  1747                           	opt stack 0
  1748  0000B9                     MSC_CleanBufferInt@i:
  1749                           	opt stack 0
  1750  0000B9                     MSC_DelayMS@US:
  1751                           	opt stack 0
  1752                           
  1753                           ; 4 bytes @ 0x39
  1754  0000B9                     	ds	1
  1755  0000BA                     ??___ftpack:
  1756                           
  1757                           ; 0 bytes @ 0x3A
  1758  0000BA                     	ds	1
  1759  0000BB                     ??___ftge:
  1760  0000BB                     IR_CalculateCodesize@i:
  1761                           	opt stack 0
  1762                           
  1763                           ; 1 bytes @ 0x3B
  1764  0000BB                     	ds	2
  1765  0000BD                     ??_MSC_DelayMS:
  1766  0000BD                     ?___lwtoft:
  1767                           	opt stack 0
  1768  0000BD                     ___lwtoft@c:
  1769                           	opt stack 0
  1770                           
  1771                           ; 2 bytes @ 0x3D
  1772  0000BD                     	ds	1
  1773  0000BE                     ??_MSC_BlinkLED:
  1774  0000BE                     
  1775                           ; 0 bytes @ 0x3E
  1776  0000BE                     	ds	2
  1777  0000C0                     tblptru	equ	0xFF8
  1778                           tblptrh	equ	0xFF7
  1779                           tblptrl	equ	0xFF6
  1780                           tablat	equ	0xFF5
  1781                           postinc0	equ	0xFEE
  1782                           wreg	equ	0xFE8
  1783                           postdec1	equ	0xFE5
  1784                           fsr1l	equ	0xFE1
  1785                           
  1786                           ; 0 bytes @ 0x40
  1787                           
  1788                           	psect	cstackCOMRAM
  1789  000001                     __pcstackCOMRAM:
  1790                           	opt stack 0
  1791  000001                     ?i1___ftpack:
  1792                           	opt stack 0
  1793  000001                     ?i1___fttol:
  1794                           	opt stack 0
  1795  000001                     i1RF_DataInt@state:
  1796                           	opt stack 0
  1797  000001                     i1IR_ReadReceiver@value:
  1798                           	opt stack 0
  1799  000001                     i1BUT_ReadButton@value:
  1800                           	opt stack 0
  1801  000001                     i1BUT_IR_PinChangeInt@state:
  1802                           	opt stack 0
  1803  000001                     i1TMR_Timer0@state:
  1804                           	opt stack 0
  1805  000001                     i1TMR_Timer1@state:
  1806                           	opt stack 0
  1807  000001                     i1TMR_Timer2@state:
  1808                           	opt stack 0
  1809  000001                     i1TMR_Timer0Int@state:
  1810                           	opt stack 0
  1811  000001                     i1MSC_CleanBufferInt@data:
  1812                           	opt stack 0
  1813  000001                     FSH_VerifyWriteIntArray@ConstArray:
  1814                           	opt stack 0
  1815  000001                     i1IR_CalculateCodesize@Code:
  1816                           	opt stack 0
  1817  000001                     i1___ftpack@arg:
  1818                           	opt stack 0
  1819  000001                     i1___fttol@f1:
  1820                           	opt stack 0
  1821  000001                     FSH_AddressToBlock@Address:
  1822                           	opt stack 0
  1823                           
  1824                           ; 4 bytes @ 0x0
  1825  000001                     	ds	1
  1826  000002                     TMR_ResetTimer2@TimerOn:
  1827                           	opt stack 0
  1828  000002                     i1TMR_ResetTimer1@TimerOn:
  1829                           	opt stack 0
  1830                           
  1831                           ; 1 bytes @ 0x1
  1832  000002                     	ds	1
  1833  000003                     TMR_Timer2Start@time:
  1834                           	opt stack 0
  1835  000003                     i1MSC_CleanBufferInt@count:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0x2
  1839  000003                     	ds	1
  1840  000004                     ??i1_IR_CalculateCodesize:
  1841  000004                     i1___ftpack@exp:
  1842                           	opt stack 0
  1843  000004                     FSH_VerifyWriteIntArray@Array:
  1844                           	opt stack 0
  1845                           
  1846                           ; 2 bytes @ 0x3
  1847  000004                     	ds	1
  1848  000005                     ??i1___fttol:
  1849  000005                     i1___ftpack@sign:
  1850                           	opt stack 0
  1851  000005                     i1MSC_CleanBufferInt@i:
  1852                           	opt stack 0
  1853  000005                     FSH_WriteIntArray@ConstArray:
  1854                           	opt stack 0
  1855  000005                     FSH_EraseBlock@Address:
  1856                           	opt stack 0
  1857                           
  1858                           ; 4 bytes @ 0x4
  1859  000005                     	ds	1
  1860  000006                     ??_FSH_VerifyWriteIntArray:
  1861  000006                     ??i1___ftpack:
  1862                           
  1863                           ; 0 bytes @ 0x5
  1864  000006                     	ds	1
  1865  000007                     i1IR_CalculateCodesize@i:
  1866                           	opt stack 0
  1867  000007                     MSC_BufferCopyIntConst@from:
  1868                           	opt stack 0
  1869                           
  1870                           ; 3 bytes @ 0x6
  1871  000007                     	ds	1
  1872  000008                     FSH_WriteIntArray@Array:
  1873                           	opt stack 0
  1874                           
  1875                           ; 2 bytes @ 0x7
  1876  000008                     	ds	1
  1877  000009                     ?i1___lwtoft:
  1878                           	opt stack 0
  1879  000009                     FSH_EraseBlock@highint:
  1880                           	opt stack 0
  1881  000009                     FSH_VerifyWriteIntArray@data:
  1882                           	opt stack 0
  1883  000009                     i1___lwtoft@c:
  1884                           	opt stack 0
  1885                           
  1886                           ; 2 bytes @ 0x8
  1887  000009                     	ds	1
  1888  00000A                     ??_FSH_WriteIntArray:
  1889  00000A                     FSH_EraseBlock@lowint:
  1890                           	opt stack 0
  1891  00000A                     i1___fttol@sign1:
  1892                           	opt stack 0
  1893  00000A                     MSC_BufferCopyIntConst@to:
  1894                           	opt stack 0
  1895                           
  1896                           ; 2 bytes @ 0x9
  1897  00000A                     	ds	1
  1898  00000B                     FSH_EraseBlock@WriteTries:
  1899                           	opt stack 0
  1900  00000B                     FSH_VerifyWriteIntArray@failcount:
  1901                           	opt stack 0
  1902  00000B                     i1___fttol@lval:
  1903                           	opt stack 0
  1904                           
  1905                           ; 4 bytes @ 0xA
  1906  00000B                     	ds	1
  1907  00000C                     ?___ftdiv:
  1908                           	opt stack 0
  1909  00000C                     FSH_WriteIntArray@i:
  1910                           	opt stack 0
  1911  00000C                     FSH_VerifyWriteIntArray@i:
  1912                           	opt stack 0
  1913  00000C                     MSC_BufferCopyIntConst@count:
  1914                           	opt stack 0
  1915  00000C                     ___ftdiv@f1:
  1916                           	opt stack 0
  1917  00000C                     i1___ftge@ff1:
  1918                           	opt stack 0
  1919                           
  1920                           ; 3 bytes @ 0xB
  1921  00000C                     	ds	1
  1922  00000D                     FSH_WriteIntArray@address:
  1923                           	opt stack 0
  1924                           
  1925                           ; 4 bytes @ 0xC
  1926  00000D                     	ds	1
  1927  00000E                     MSC_BufferCopyIntConst@shift:
  1928                           	opt stack 0
  1929                           
  1930                           ; 2 bytes @ 0xD
  1931  00000E                     	ds	1
  1932  00000F                     i1___fttol@exp1:
  1933                           	opt stack 0
  1934  00000F                     ___ftdiv@f2:
  1935                           	opt stack 0
  1936  00000F                     i1___ftge@ff2:
  1937                           	opt stack 0
  1938                           
  1939                           ; 3 bytes @ 0xE
  1940  00000F                     	ds	1
  1941  000010                     MSC_BufferCopyIntConst@i:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0xF
  1945  000010                     	ds	2
  1946  000012                     ??_FSH_Write_IR_RF:
  1947  000012                     ??___ftdiv:
  1948  000012                     ??i1___ftge:
  1949                           
  1950                           ; 0 bytes @ 0x11
  1951  000012                     	ds	3
  1952  000015                     ___ftdiv@cntr:
  1953                           	opt stack 0
  1954                           
  1955                           ; 1 bytes @ 0x14
  1956  000015                     	ds	1
  1957  000016                     ___ftdiv@f3:
  1958                           	opt stack 0
  1959                           
  1960                           ; 3 bytes @ 0x15
  1961  000016                     	ds	2
  1962  000018                     FSH_Write_IR_RF@highint:
  1963                           	opt stack 0
  1964                           
  1965                           ; 1 bytes @ 0x17
  1966  000018                     	ds	1
  1967  000019                     FSH_Write_IR_RF@lowint:
  1968                           	opt stack 0
  1969  000019                     ___ftdiv@exp:
  1970                           	opt stack 0
  1971                           
  1972                           ; 1 bytes @ 0x18
  1973  000019                     	ds	1
  1974  00001A                     ___ftdiv@sign:
  1975                           	opt stack 0
  1976  00001A                     FSH_Write_IR_RF@FlashWasteindex:
  1977                           	opt stack 0
  1978                           
  1979                           ; 2 bytes @ 0x19
  1980  00001A                     	ds	1
  1981  00001B                     ?i1___ftmul:
  1982                           	opt stack 0
  1983  00001B                     i1___ftmul@f1:
  1984                           	opt stack 0
  1985                           
  1986                           ; 3 bytes @ 0x1A
  1987  00001B                     	ds	1
  1988  00001C                     FSH_Write_IR_RF@j:
  1989                           	opt stack 0
  1990                           
  1991                           ; 1 bytes @ 0x1B
  1992  00001C                     	ds	1
  1993  00001D                     FSH_Write_IR_RF@status:
  1994                           	opt stack 0
  1995                           
  1996                           ; 1 bytes @ 0x1C
  1997  00001D                     	ds	1
  1998  00001E                     FSH_Write_IR_RF@i:
  1999                           	opt stack 0
  2000  00001E                     i1___ftmul@f2:
  2001                           	opt stack 0
  2002                           
  2003                           ; 3 bytes @ 0x1D
  2004  00001E                     	ds	2
  2005  000020                     FSH_Write_IR_RF@WriteTries:
  2006                           	opt stack 0
  2007                           
  2008                           ; 1 bytes @ 0x1F
  2009  000020                     	ds	1
  2010  000021                     ??i1___ftmul:
  2011  000021                     FSH_Write_IR_RF@RAMaddress:
  2012                           	opt stack 0
  2013                           
  2014                           ; 2 bytes @ 0x20
  2015  000021                     	ds	3
  2016  000024                     i1___ftmul@exp:
  2017                           	opt stack 0
  2018                           
  2019                           ; 1 bytes @ 0x23
  2020  000024                     	ds	1
  2021  000025                     i1___ftmul@sign:
  2022                           	opt stack 0
  2023                           
  2024                           ; 1 bytes @ 0x24
  2025  000025                     	ds	1
  2026  000026                     i1___ftmul@f3_as_product:
  2027                           	opt stack 0
  2028                           
  2029                           ; 3 bytes @ 0x25
  2030  000026                     	ds	3
  2031  000029                     ADC_CalculateVoltage@Voltage:
  2032                           	opt stack 0
  2033  000029                     i1IR_LoadCode@Low1:
  2034                           	opt stack 0
  2035                           
  2036                           ; 3 bytes @ 0x28
  2037  000029                     	ds	3
  2038  00002C                     ADC_CalculateVoltage@ADCcounts:
  2039                           	opt stack 0
  2040  00002C                     i1IR_LoadCode@High1:
  2041                           	opt stack 0
  2042                           
  2043                           ; 3 bytes @ 0x2B
  2044  00002C                     	ds	3
  2045  00002F                     i1IR_LoadCode@CodeSize1:
  2046                           	opt stack 0
  2047                           
  2048                           ; 1 bytes @ 0x2E
  2049  00002F                     	ds	1
  2050  000030                     i1IR_LoadCode@Low2:
  2051                           	opt stack 0
  2052                           
  2053                           ; 3 bytes @ 0x2F
  2054  000030                     	ds	3
  2055  000033                     i1IR_LoadCode@High2:
  2056                           	opt stack 0
  2057                           
  2058                           ; 3 bytes @ 0x32
  2059  000033                     	ds	3
  2060  000036                     i1IR_LoadCode@CodeSize2:
  2061                           	opt stack 0
  2062                           
  2063                           ; 1 bytes @ 0x35
  2064  000036                     	ds	1
  2065  000037                     i1IR_LoadCode@LowBound:
  2066                           	opt stack 0
  2067                           
  2068                           ; 3 bytes @ 0x36
  2069  000037                     	ds	3
  2070  00003A                     i1IR_LoadCode@HighBound:
  2071                           	opt stack 0
  2072                           
  2073                           ; 3 bytes @ 0x39
  2074  00003A                     	ds	3
  2075  00003D                     ??_IR_CheckCode:
  2076                           
  2077                           ; 0 bytes @ 0x3C
  2078  00003D                     	ds	6
  2079  000043                     IR_CheckCode@data:
  2080                           	opt stack 0
  2081                           
  2082                           ; 2 bytes @ 0x42
  2083  000043                     	ds	2
  2084  000045                     IR_CheckCode@High:
  2085                           	opt stack 0
  2086                           
  2087                           ; 3 bytes @ 0x44
  2088  000045                     	ds	3
  2089  000048                     IR_CheckCode@Low:
  2090                           	opt stack 0
  2091                           
  2092                           ; 3 bytes @ 0x47
  2093  000048                     	ds	3
  2094  00004B                     IR_CheckCode@i:
  2095                           	opt stack 0
  2096                           
  2097                           ; 1 bytes @ 0x4A
  2098  00004B                     	ds	1
  2099  00004C                     ??_low_isr:
  2100                           
  2101                           ; 0 bytes @ 0x4B
  2102  00004C                     	ds	11
  2103  000057                     low_isr@button_state:
  2104                           	opt stack 0
  2105                           
  2106                           ; 1 bytes @ 0x56
  2107  000057                     	ds	1
  2108  000058                     low_isr@IRtemp:
  2109                           	opt stack 0
  2110                           
  2111                           ; 2 bytes @ 0x57
  2112  000058                     	ds	2
  2113                           tblptru	equ	0xFF8
  2114                           tblptrh	equ	0xFF7
  2115                           tblptrl	equ	0xFF6
  2116                           tablat	equ	0xFF5
  2117                           postinc0	equ	0xFEE
  2118                           wreg	equ	0xFE8
  2119                           postdec1	equ	0xFE5
  2120                           fsr1l	equ	0xFE1
  2121                           
  2122 ;;
  2123 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2124 ;;
  2125 ;; *************** function _main *****************
  2126 ;; Defined at:
  2127 ;;		line 92 in file "main.c"
  2128 ;; Parameters:    Size  Location     Type
  2129 ;;		None
  2130 ;; Auto vars:     Size  Location     Type
  2131 ;;		None
  2132 ;; Return value:  Size  Location     Type
  2133 ;;                  2   60[None  ] int 
  2134 ;; Registers used:
  2135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2136 ;; Tracked objects:
  2137 ;;		On entry : 0/0
  2138 ;;		On exit  : F/1
  2139 ;;		Unchanged: 0/0
  2140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2141 ;;      Params:         0       0       0       0       0
  2142 ;;      Locals:         0       0       0       0       0
  2143 ;;      Temps:          0       0       0       0       0
  2144 ;;      Totals:         0       0       0       0       0
  2145 ;;Total ram usage:        0 bytes
  2146 ;; Hardware stack levels required when called:   18
  2147 ;; This function calls:
  2148 ;;		_ADC_Start
  2149 ;;		_IR_LoadCode
  2150 ;;		_Init_App
  2151 ;;		_Init_System
  2152 ;;		_MSC_BlinkLED
  2153 ;;		_MSC_DelayMS
  2154 ;;		_MTR_Rotate
  2155 ;;		_RF_Enable
  2156 ;;		_RF_LoadCode
  2157 ;;		_SYS_ActivityTimer
  2158 ;;		_SYS_ConfigureOscillator
  2159 ;;		_SYS_DisableInt
  2160 ;;		_SYS_EnableInt
  2161 ;;		___ftge
  2162 ;; This function is called by:
  2163 ;;		Startup code after reset
  2164 ;; This function uses a non-reentrant model
  2165 ;;
  2166                           
  2167                           	psect	text0
  2168  003E4C                     __ptext0:
  2169                           	opt stack 0
  2170  003E4C                     _main:
  2171                           	opt stack 13
  2172                           
  2173                           ;main.c: 95: SYS_ConfigureOscillator();
  2174                           
  2175                           ;incstack = 0
  2176  003E4C  ECD0  F00D         	call	_SYS_ConfigureOscillator	;wreg free
  2177                           
  2178                           ;main.c: 96: Init_App();
  2179  003E50  EC70  F00A         	call	_Init_App	;wreg free
  2180                           
  2181                           ;main.c: 97: Init_System();
  2182  003E54  ECA4  F00A         	call	_Init_System	;wreg free
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;main.c: 100: RF_LoadCode();
  2186  003E58  EC26  F001         	call	_RF_LoadCode	;wreg free
  2187                           
  2188                           ; BSR set to: 0
  2189                           ;main.c: 101: IR_LoadCode();
  2190  003E5C  ECC1  F01B         	call	_IR_LoadCode	;wreg free
  2191                           
  2192                           ; BSR set to: 1
  2193                           ;main.c: 102: MSC_BlinkLED(4,50);
  2194  003E60  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2195  003E62  0E04               	movlw	4
  2196  003E64  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2197  003E66  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2198  003E68  0E32               	movlw	50
  2199  003E6A  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2200  003E6C  ECF4  F009         	call	_MSC_BlinkLED	;wreg free
  2201                           
  2202                           ; BSR set to: 1
  2203                           ;main.c: 103: (LATC &= ~0x10);
  2204  003E70  988B               	bcf	3979,4,c	;volatile
  2205  003E72                     l6947:
  2206                           
  2207                           ; BSR set to: 1
  2208                           ;main.c: 106: {
  2209                           ;main.c: 107: if(System_State == 8)
  2210  003E72  0E08               	movlw	8
  2211  003E74  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  2212  003E76  E001 D08C          	bnz	l7021
  2213                           
  2214                           ; BSR set to: 1
  2215                           ;main.c: 108: {
  2216                           ;main.c: 110: if(System_State_Change)
  2217  003E7A  5106               	movf	_System_State_Change& (0+255),w,b	;volatile
  2218  003E7C  E03F               	bz	l6985
  2219                           
  2220                           ; BSR set to: 1
  2221                           ;main.c: 111: {
  2222                           ;main.c: 113: (LATC &= ~0x10);
  2223  003E7E  988B               	bcf	3979,4,c	;volatile
  2224                           
  2225                           ; BSR set to: 1
  2226                           ;main.c: 114: if(RF_Saved == 90)
  2227  003E80  0E5A               	movlw	90
  2228  003E82  19AD               	xorwf	_RF_Saved& (0+255),w,b
  2229  003E84  E117               	bnz	l6967
  2230                           
  2231                           ; BSR set to: 1
  2232                           ;main.c: 115: {
  2233                           ;main.c: 116: if(Flash_Status == 1)
  2234  003E86  0503               	decf	_Flash_Status& (0+255),w,b
  2235  003E88  E10A               	bnz	l6961
  2236                           
  2237                           ; BSR set to: 1
  2238                           ;main.c: 117: {
  2239                           ;main.c: 118: MSC_BlinkLED(4,50);
  2240  003E8A  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2241  003E8C  0E04               	movlw	4
  2242  003E8E  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2243  003E90  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2244  003E92  0E32               	movlw	50
  2245  003E94  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2246  003E96  ECF4  F009         	call	_MSC_BlinkLED	;wreg free
  2247  003E9A                     l6959:
  2248                           
  2249                           ; BSR set to: 1
  2250                           ;main.c: 119: (LATC &= ~0x10);
  2251  003E9A  988B               	bcf	3979,4,c	;volatile
  2252                           
  2253                           ;main.c: 120: }
  2254  003E9C  D009               	goto	l6965
  2255  003E9E                     l6961:
  2256                           
  2257                           ; BSR set to: 1
  2258                           ;main.c: 121: else
  2259                           ;main.c: 122: {
  2260                           ;main.c: 123: MSC_BlinkLED(6,75);
  2261  003E9E  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2262  003EA0  0E06               	movlw	6
  2263  003EA2  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2264  003EA4  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2265  003EA6  0E4B               	movlw	75
  2266  003EA8  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2267  003EAA  ECF4  F009         	call	_MSC_BlinkLED	;wreg free
  2268  003EAE  D7F5               	goto	l6959
  2269  003EB0                     l6965:
  2270                           
  2271                           ; BSR set to: 1
  2272                           ;main.c: 125: }
  2273                           ;main.c: 126: RF_Saved = 91;
  2274  003EB0  0E5B               	movlw	91
  2275  003EB2  6FAD               	movwf	_RF_Saved& (0+255),b
  2276  003EB4                     l6967:
  2277                           
  2278                           ; BSR set to: 1
  2279                           ;main.c: 127: }
  2280                           ;main.c: 128: if(IR_Saved == 90)
  2281  003EB4  0E5A               	movlw	90
  2282  003EB6  19AC               	xorwf	_IR_Saved& (0+255),w,b
  2283  003EB8  E117               	bnz	i1L__ptext5
  2284                           
  2285                           ; BSR set to: 1
  2286                           ;main.c: 129: {
  2287                           ;main.c: 130: if(Flash_Status == 1)
  2288  003EBA  0503               	decf	_Flash_Status& (0+255),w,b
  2289  003EBC  E10A               	bnz	l6975
  2290                           
  2291                           ; BSR set to: 1
  2292                           ;main.c: 131: {
  2293                           ;main.c: 132: MSC_BlinkLED(4,50);
  2294  003EBE  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2295  003EC0  0E04               	movlw	4
  2296  003EC2  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2297  003EC4  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2298  003EC6  0E32               	movlw	50
  2299  003EC8  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2300  003ECA  ECF4  F009         	call	_MSC_BlinkLED	;wreg free
  2301  003ECE                     l6973:
  2302                           
  2303                           ; BSR set to: 1
  2304                           ;main.c: 133: (LATC &= ~0x10);
  2305  003ECE  988B               	bcf	3979,4,c	;volatile
  2306                           
  2307                           ;main.c: 134: }
  2308  003ED0  D009               	goto	l6979
  2309  003ED2                     l6975:
  2310                           
  2311                           ; BSR set to: 1
  2312                           ;main.c: 135: else
  2313                           ;main.c: 136: {
  2314                           ;main.c: 137: MSC_BlinkLED(6,75);
  2315  003ED2  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2316  003ED4  0E06               	movlw	6
  2317  003ED6  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2318  003ED8  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2319  003EDA  0E4B               	movlw	75
  2320  003EDC  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2321  003EDE  ECF4  F009         	call	_MSC_BlinkLED	;wreg free
  2322  003EE2  D7F5               	goto	l6973
  2323  003EE4                     l6979:
  2324                           
  2325                           ; BSR set to: 1
  2326                           ;main.c: 139: }
  2327                           ;main.c: 140: IR_Saved = 91;
  2328  003EE4  0E5B               	movlw	91
  2329  003EE6  6FAC               	movwf	_IR_Saved& (0+255),b
  2330  003EE8                     i1L__ptext5:
  2331                           	opt stack 0
  2332  003EE8                     i1L_SYS_EnableInt:
  2333                           	opt stack 0
  2334  003EE8                     i1Ll5095:
  2335                           	opt stack 17
  2336                           
  2337                           ;SYSTEM.c: 83: BUT_IR_PinChangeInt(1);
  2338  003EE8  0E01               	movlw	1
  2339  003EEA  EC69  F00D         	call	_BUT_IR_PinChangeInt
  2340                           
  2341                           ;SYSTEM.c: 84: RF_DataInt(1);
  2342  003EEE  0E01               	movlw	1
  2343  003EF0  ECDF  F00C         	call	_RF_DataInt
  2344  003EF4                     i1Ll5097:
  2345                           	opt stack 17
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;SYSTEM.c: 85: INTCONbits.PEIE = 1;
  2349  003EF4  8CF2               	bsf	intcon,6,c	;volatile
  2350  003EF6                     i1Ll5099:
  2351                           	opt stack 17
  2352                           
  2353                           ; BSR set to: 0
  2354                           ;SYSTEM.c: 86: INTCONbits.GIE = 1;
  2355  003EF6  8EF2               	bsf	intcon,7,c	;volatile
  2356  003EF8                     i1Ll349:
  2357                           	opt stack 13
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;main.c: 143: System_State_Change = 0;
  2361  003EF8  0101               	movlb	1	; () banked
  2362  003EFA  6B06               	clrf	_System_State_Change& (0+255),b	;volatile
  2363  003EFC                     l6985:
  2364                           
  2365                           ; BSR set to: 1
  2366                           ;main.c: 144: }
  2367                           ;main.c: 145: if(RF_Data || IR_Data || Button_Data)
  2368  003EFC  5105               	movf	_RF_Data& (0+255),w,b	;volatile
  2369  003EFE  E104               	bnz	l6991
  2370                           
  2371                           ; BSR set to: 1
  2372  003F00  5104               	movf	_IR_Data& (0+255),w,b	;volatile
  2373  003F02  E102               	bnz	l6991
  2374                           
  2375                           ; BSR set to: 1
  2376  003F04  5102               	movf	_Button_Data& (0+255),w,b	;volatile
  2377  003F06  E01B               	bz	l7011
  2378  003F08                     l6991:
  2379                           
  2380                           ; BSR set to: 1
  2381                           ;main.c: 146: {
  2382                           ;main.c: 147: (LATC |= 0x10);
  2383  003F08  888B               	bsf	3979,4,c	;volatile
  2384  003F0A                     i2L__ptext1:
  2385                           	opt stack 0
  2386  003F0A                     i2L_SYS_DisableInt:
  2387                           	opt stack 0
  2388  003F0A                     i2Ll6111:
  2389                           	opt stack 18
  2390                           
  2391                           ; BSR set to: 1
  2392                           ;SYSTEM.c: 72: INTCONbits.GIE = 0;
  2393  003F0A  9EF2               	bcf	intcon,7,c	;volatile
  2394                           
  2395                           ;SYSTEM.c: 73: INTCONbits.PEIE = 0;
  2396  003F0C  9CF2               	bcf	intcon,6,c	;volatile
  2397  003F0E                     i2Ll346:
  2398                           	opt stack 13
  2399                           
  2400                           ; BSR set to: 1
  2401                           ;main.c: 149: MTR_Rotate();
  2402  003F0E  EC80  F006         	call	_MTR_Rotate	;wreg free
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;main.c: 150: MSC_DelayMS(200);
  2406  003F12  0EC8               	movlw	200
  2407  003F14  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  2408  003F16  6BBA               	clrf	(MSC_DelayMS@US+1)& (0+255),b
  2409  003F18  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  2410  003F1A  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  2411  003F1C  ECCD  F009         	call	_MSC_DelayMS	;wreg free
  2412  003F20                     i3L__ptext5:
  2413                           	opt stack 0
  2414  003F20                     i3L_SYS_EnableInt:
  2415                           	opt stack 0
  2416  003F20                     i3Ll5095:
  2417                           	opt stack 17
  2418                           
  2419                           ;SYSTEM.c: 83: BUT_IR_PinChangeInt(1);
  2420  003F20  0E01               	movlw	1
  2421  003F22  EC69  F00D         	call	_BUT_IR_PinChangeInt
  2422                           
  2423                           ;SYSTEM.c: 84: RF_DataInt(1);
  2424  003F26  0E01               	movlw	1
  2425  003F28  ECDF  F00C         	call	_RF_DataInt
  2426  003F2C                     i3Ll5097:
  2427                           	opt stack 17
  2428                           
  2429                           ; BSR set to: 0
  2430                           ;SYSTEM.c: 85: INTCONbits.PEIE = 1;
  2431  003F2C  8CF2               	bsf	intcon,6,c	;volatile
  2432  003F2E                     i3Ll5099:
  2433                           	opt stack 17
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;SYSTEM.c: 86: INTCONbits.GIE = 1;
  2437  003F2E  8EF2               	bsf	intcon,7,c	;volatile
  2438  003F30                     i3Ll349:
  2439                           	opt stack 13
  2440                           
  2441                           ; BSR set to: 0
  2442                           ;main.c: 152: RF_Data = 0;
  2443  003F30  0101               	movlb	1	; () banked
  2444  003F32  6B05               	clrf	_RF_Data& (0+255),b	;volatile
  2445                           
  2446                           ; BSR set to: 1
  2447                           ;main.c: 153: IR_Data = 0;
  2448  003F34  6B04               	clrf	_IR_Data& (0+255),b	;volatile
  2449                           
  2450                           ; BSR set to: 1
  2451                           ;main.c: 154: Button_Data = 0;
  2452  003F36  6B02               	clrf	_Button_Data& (0+255),b	;volatile
  2453                           
  2454                           ; BSR set to: 1
  2455                           ;main.c: 155: (LATC &= ~0x10);
  2456  003F38  988B               	bcf	3979,4,c	;volatile
  2457                           
  2458                           ; BSR set to: 1
  2459                           ;main.c: 156: RF_Enable();
  2460  003F3A  ECF3  F01F         	call	_RF_Enable	;wreg free
  2461  003F3E                     l7011:
  2462                           
  2463                           ;main.c: 157: }
  2464                           ;main.c: 158: if(Rail_VIN < 3.4 || Rail_VIN > 5.5 )
  2465  003F3E  C1A9  F0B5         	movff	_Rail_VIN,___ftge@ff1
  2466  003F42  C1AA  F0B6         	movff	_Rail_VIN+1,___ftge@ff1+1
  2467  003F46  C1AB  F0B7         	movff	_Rail_VIN+2,___ftge@ff1+2
  2468  003F4A  0E9A               	movlw	154
  2469  003F4C  0100               	movlb	0	; () banked
  2470  003F4E  6FB8               	movwf	___ftge@ff2& (0+255),b
  2471  003F50  0E59               	movlw	89
  2472  003F52  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  2473  003F54  0E40               	movlw	64
  2474  003F56  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  2475  003F58  EC48  F009         	call	___ftge	;wreg free
  2476  003F5C  E30E               	bnc	l7015
  2477                           
  2478                           ; BSR set to: 0
  2479  003F5E  6BB5               	clrf	___ftge@ff1& (0+255),b
  2480  003F60  0EB0               	movlw	176
  2481  003F62  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  2482  003F64  0E40               	movlw	64
  2483  003F66  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  2484  003F68  C1A9  F0B8         	movff	_Rail_VIN,___ftge@ff2
  2485  003F6C  C1AA  F0B9         	movff	_Rail_VIN+1,___ftge@ff2+1
  2486  003F70  C1AB  F0BA         	movff	_Rail_VIN+2,___ftge@ff2+2
  2487  003F74  EC48  F009         	call	___ftge	;wreg free
  2488  003F78  E209               	bc	l7019
  2489  003F7A                     l7015:
  2490                           
  2491                           ; BSR set to: 0
  2492                           ;main.c: 159: {
  2493                           ;main.c: 160: MSC_DelayMS(100);
  2494  003F7A  0E64               	movlw	100
  2495  003F7C  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  2496  003F7E  6BBA               	clrf	(MSC_DelayMS@US+1)& (0+255),b
  2497  003F80  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  2498  003F82  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  2499  003F84  ECCD  F009         	call	_MSC_DelayMS	;wreg free
  2500                           
  2501                           ; BSR set to: 0
  2502                           ;main.c: 161: (LATC ^= 0x10);
  2503  003F88  0E10               	movlw	16
  2504  003F8A  1A8B               	xorwf	3979,f,c	;volatile
  2505  003F8C                     l7019:
  2506                           
  2507                           ; BSR set to: 0
  2508                           ;main.c: 162: }
  2509                           ;main.c: 163: SYS_ActivityTimer();
  2510  003F8C  EC16  F00A         	call	_SYS_ActivityTimer	;wreg free
  2511                           
  2512                           ;main.c: 164: }
  2513  003F90  D01C               	goto	l7037
  2514  003F92                     l7021:
  2515                           
  2516                           ; BSR set to: 1
  2517                           ;main.c: 165: else if(System_State == 10)
  2518  003F92  0E0A               	movlw	10
  2519  003F94  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  2520  003F96  E119               	bnz	l7037
  2521                           
  2522                           ; BSR set to: 1
  2523                           ;main.c: 166: {
  2524                           ;main.c: 168: MSC_DelayMS(25);
  2525  003F98  0E19               	movlw	25
  2526  003F9A  0100               	movlb	0	; () banked
  2527  003F9C  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  2528  003F9E  6BBA               	clrf	(MSC_DelayMS@US+1)& (0+255),b
  2529  003FA0  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  2530  003FA2  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  2531  003FA4  ECCD  F009         	call	_MSC_DelayMS	;wreg free
  2532                           
  2533                           ; BSR set to: 0
  2534                           ;main.c: 169: (LATC ^= 0x10);
  2535  003FA8  0E10               	movlw	16
  2536  003FAA  1A8B               	xorwf	3979,f,c	;volatile
  2537                           
  2538                           ; BSR set to: 0
  2539                           ;main.c: 170: if(RF_Data)
  2540  003FAC  0101               	movlb	1	; () banked
  2541  003FAE  5105               	movf	_RF_Data& (0+255),w,b	;volatile
  2542  003FB0  E005               	bz	l78
  2543                           
  2544                           ; BSR set to: 1
  2545                           ;main.c: 171: {
  2546                           ;main.c: 173: RF_Data = 0;
  2547  003FB2  6B05               	clrf	_RF_Data& (0+255),b	;volatile
  2548                           
  2549                           ; BSR set to: 1
  2550                           ;main.c: 174: System_State = 8;
  2551  003FB4  0E08               	movlw	8
  2552  003FB6  6FAE               	movwf	_System_State& (0+255),b	;volatile
  2553                           
  2554                           ;main.c: 175: System_State_Change = 1;
  2555  003FB8  0E01               	movlw	1
  2556  003FBA  6F06               	movwf	_System_State_Change& (0+255),b	;volatile
  2557  003FBC                     l78:
  2558                           
  2559                           ; BSR set to: 1
  2560                           ;main.c: 176: }
  2561                           ;main.c: 177: if(IR_Data)
  2562  003FBC  5104               	movf	_IR_Data& (0+255),w,b	;volatile
  2563  003FBE  E005               	bz	l7037
  2564                           
  2565                           ; BSR set to: 1
  2566                           ;main.c: 178: {
  2567                           ;main.c: 180: IR_Data = 0;
  2568  003FC0  6B04               	clrf	_IR_Data& (0+255),b	;volatile
  2569                           
  2570                           ; BSR set to: 1
  2571                           ;main.c: 181: System_State = 8;
  2572  003FC2  0E08               	movlw	8
  2573  003FC4  6FAE               	movwf	_System_State& (0+255),b	;volatile
  2574                           
  2575                           ;main.c: 182: System_State_Change = 1;
  2576  003FC6  0E01               	movlw	1
  2577  003FC8  6F06               	movwf	_System_State_Change& (0+255),b	;volatile
  2578  003FCA                     l7037:
  2579                           
  2580                           ;main.c: 183: }
  2581                           ;main.c: 184: }
  2582                           ;main.c: 186: ADC_SampleCount++;
  2583  003FCA  0101               	movlb	1	; () banked
  2584  003FCC  4B00               	infsnz	_ADC_SampleCount& (0+255),f,b
  2585  003FCE  2B01               	incf	(_ADC_SampleCount+1)& (0+255),f,b
  2586                           
  2587                           ; BSR set to: 1
  2588                           ;main.c: 187: if(ADC_SampleCount > 10)
  2589  003FD0  5101               	movf	(_ADC_SampleCount+1)& (0+255),w,b
  2590  003FD2  E104               	bnz	u7640
  2591  003FD4  0E0B               	movlw	11
  2592  003FD6  5D00               	subwf	_ADC_SampleCount& (0+255),w,b
  2593  003FD8  E201 D74B          	bnc	l6947
  2594  003FDC                     u7640:
  2595                           
  2596                           ; BSR set to: 1
  2597                           ;main.c: 188: {
  2598                           ;main.c: 189: ADC_Start();
  2599  003FDC  ECF1  F00D         	call	_ADC_Start	;wreg free
  2600                           
  2601                           ; BSR set to: 1
  2602                           ;main.c: 190: ADC_SampleCount = 0;
  2603  003FE0  6B00               	clrf	_ADC_SampleCount& (0+255),b
  2604  003FE2  6B01               	clrf	(_ADC_SampleCount+1)& (0+255),b
  2605  003FE4  D746               	goto	l6947
  2606  003FE6                     __end_of_main:
  2607                           	opt stack 0
  2608                           tblptru	equ	0xFF8
  2609                           tblptrh	equ	0xFF7
  2610                           tblptrl	equ	0xFF6
  2611                           tablat	equ	0xFF5
  2612                           intcon	equ	0xFF2
  2613                           postinc0	equ	0xFEE
  2614                           wreg	equ	0xFE8
  2615                           postdec1	equ	0xFE5
  2616                           fsr1l	equ	0xFE1
  2617                           
  2618 ;; *************** function _SYS_DisableInt *****************
  2619 ;; Defined at:
  2620 ;;		line 70 in file "SYSTEM.c"
  2621 ;; Parameters:    Size  Location     Type
  2622 ;;		None
  2623 ;; Auto vars:     Size  Location     Type
  2624 ;;		None
  2625 ;; Return value:  Size  Location     Type
  2626 ;;		None               void
  2627 ;; Registers used:
  2628 ;;		None
  2629 ;; Tracked objects:
  2630 ;;		On entry : F/1
  2631 ;;		On exit  : F/1
  2632 ;;		Unchanged: F/0
  2633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2634 ;;      Params:         0       0       0       0       0
  2635 ;;      Locals:         0       0       0       0       0
  2636 ;;      Temps:          0       0       0       0       0
  2637 ;;      Totals:         0       0       0       0       0
  2638 ;;Total ram usage:        0 bytes
  2639 ;; Hardware stack levels used:    1
  2640 ;; Hardware stack levels required when called:   12
  2641 ;; This function calls:
  2642 ;;		Nothing
  2643 ;; This function is called by:
  2644 ;;		_main
  2645 ;; This function uses a non-reentrant model
  2646 ;;
  2647                           
  2648                           	psect	text1
  2649  000000                     __ptext1:
  2650                           	opt stack 0
  2651  000000                     _SYS_DisableInt:
  2652                           	opt stack 0
  2653  000000                     __end_of_SYS_DisableInt:
  2654                           	opt stack 0
  2655                           tblptru	equ	0xFF8
  2656                           tblptrh	equ	0xFF7
  2657                           tblptrl	equ	0xFF6
  2658                           tablat	equ	0xFF5
  2659                           intcon	equ	0xFF2
  2660                           postinc0	equ	0xFEE
  2661                           wreg	equ	0xFE8
  2662                           postdec1	equ	0xFE5
  2663                           fsr1l	equ	0xFE1
  2664                           
  2665 ;; *************** function _SYS_ConfigureOscillator *****************
  2666 ;; Defined at:
  2667 ;;		line 116 in file "SYSTEM.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;		None
  2672 ;; Return value:  Size  Location     Type
  2673 ;;		None               void
  2674 ;; Registers used:
  2675 ;;		None
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2681 ;;      Params:         0       0       0       0       0
  2682 ;;      Locals:         0       0       0       0       0
  2683 ;;      Temps:          0       0       0       0       0
  2684 ;;      Totals:         0       0       0       0       0
  2685 ;;Total ram usage:        0 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:   12
  2688 ;; This function calls:
  2689 ;;		Nothing
  2690 ;; This function is called by:
  2691 ;;		_main
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           	psect	text2
  2696  001BA0                     __ptext2:
  2697                           	opt stack 0
  2698  001BA0                     _SYS_ConfigureOscillator:
  2699                           	opt stack 18
  2700                           
  2701                           ;SYSTEM.c: 119: OSCTUNEbits.PLLEN = 1;
  2702                           
  2703                           ; BSR set to: 1
  2704                           ;incstack = 0
  2705  001BA0  8C9B               	bsf	3995,6,c	;volatile
  2706  001BA2                     l358:
  2707  001BA2  B6D3               	btfsc	4051,3,c	;volatile
  2708  001BA4  0012               	return		;funcret
  2709  001BA6  D7FD               	goto	l358
  2710  001BA8                     __end_of_SYS_ConfigureOscillator:
  2711                           	opt stack 0
  2712                           tblptru	equ	0xFF8
  2713                           tblptrh	equ	0xFF7
  2714                           tblptrl	equ	0xFF6
  2715                           tablat	equ	0xFF5
  2716                           intcon	equ	0xFF2
  2717                           postinc0	equ	0xFEE
  2718                           wreg	equ	0xFE8
  2719                           postdec1	equ	0xFE5
  2720                           fsr1l	equ	0xFE1
  2721                           
  2722 ;; *************** function _SYS_ActivityTimer *****************
  2723 ;; Defined at:
  2724 ;;		line 129 in file "SYSTEM.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;		None
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;		None
  2729 ;; Return value:  Size  Location     Type
  2730 ;;		None               void
  2731 ;; Registers used:
  2732 ;;		wreg, status,2, status,0, cstack
  2733 ;; Tracked objects:
  2734 ;;		On entry : F/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2738 ;;      Params:         0       0       0       0       0
  2739 ;;      Locals:         0       0       0       0       0
  2740 ;;      Temps:          0       0       0       0       0
  2741 ;;      Totals:         0       0       0       0       0
  2742 ;;Total ram usage:        0 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:   14
  2745 ;; This function calls:
  2746 ;;		_SYS_ActivityTimerReset
  2747 ;;		_SYS_EnableInt
  2748 ;;		_SYS_Sleep
  2749 ;; This function is called by:
  2750 ;;		_main
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text3
  2755  00142C                     __ptext3:
  2756                           	opt stack 0
  2757  00142C                     _SYS_ActivityTimer:
  2758                           	opt stack 16
  2759                           
  2760                           ; BSR set to: 0
  2761                           ;SYSTEM.c: 131: if(Activity_Timer > 1000L)
  2762                           
  2763                           ;incstack = 0
  2764  00142C  505D               	movf	_Activity_Timer+3,w,c
  2765  00142E  105C               	iorwf	_Activity_Timer+2,w,c
  2766  001430  E105               	bnz	u6150
  2767  001432  0EE9               	movlw	233
  2768  001434  5C5A               	subwf	_Activity_Timer,w,c
  2769  001436  0E03               	movlw	3
  2770  001438  585B               	subwfb	_Activity_Timer+1,w,c
  2771  00143A  E310               	bnc	l6137
  2772  00143C                     u6150:
  2773  00143C                     i4L__ptext6:
  2774                           	opt stack 0
  2775  00143C                     i4L_SYS_ActivityTimerReset:
  2776                           	opt stack 0
  2777  00143C                     i4Ll5109:
  2778                           	opt stack 17
  2779                           
  2780                           ; BSR set to: 0
  2781                           ;SYSTEM.c: 62: Activity_Timer = 0;
  2782  00143C  6A5A               	clrf	_Activity_Timer,c
  2783  00143E  6A5B               	clrf	_Activity_Timer+1,c
  2784  001440  6A5C               	clrf	_Activity_Timer+2,c
  2785  001442  6A5D               	clrf	_Activity_Timer+3,c
  2786  001444                     i4Ll343:
  2787                           	opt stack 16
  2788                           
  2789                           ; BSR set to: 0
  2790                           ;SYSTEM.c: 134: (LATC &= ~0x10);
  2791  001444  988B               	bcf	3979,4,c	;volatile
  2792  001446                     i5L__ptext5:
  2793                           	opt stack 0
  2794  001446                     i5L_SYS_EnableInt:
  2795                           	opt stack 0
  2796  001446                     i5Ll5095:
  2797                           	opt stack 17
  2798                           
  2799                           ;SYSTEM.c: 83: BUT_IR_PinChangeInt(1);
  2800  001446  0E01               	movlw	1
  2801  001448  EC69  F00D         	call	_BUT_IR_PinChangeInt
  2802                           
  2803                           ;SYSTEM.c: 84: RF_DataInt(1);
  2804  00144C  0E01               	movlw	1
  2805  00144E  ECDF  F00C         	call	_RF_DataInt
  2806  001452                     i5Ll5097:
  2807                           	opt stack 17
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;SYSTEM.c: 85: INTCONbits.PEIE = 1;
  2811  001452  8CF2               	bsf	intcon,6,c	;volatile
  2812  001454                     i5Ll5099:
  2813                           	opt stack 17
  2814                           
  2815                           ; BSR set to: 0
  2816                           ;SYSTEM.c: 86: INTCONbits.GIE = 1;
  2817  001454  8EF2               	bsf	intcon,7,c	;volatile
  2818  001456                     i5Ll349:
  2819                           	opt stack 0
  2820  001456                     i6L__ptext4:
  2821                           	opt stack 0
  2822  001456                     i6L_SYS_Sleep:
  2823                           	opt stack 0
  2824  001456                     i6Ll5179:
  2825                           	opt stack 17
  2826                           
  2827                           ; BSR set to: 0
  2828                           ;SYSTEM.c: 96: OSCCON &= ~0b10000000;
  2829  001456  9ED3               	bcf	4051,7,c	;volatile
  2830  001458  0003               	sleep		;# 
  2831  00145A                     i6Ll352:
  2832                           	opt stack 0
  2833  00145A  0012               	return	
  2834  00145C                     l6137:
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;SYSTEM.c: 138: else
  2838                           ;SYSTEM.c: 139: {
  2839                           ;SYSTEM.c: 140: Activity_Timer++;
  2840  00145C  2A5A               	incf	_Activity_Timer,f,c
  2841  00145E  0E00               	movlw	0
  2842  001460  225B               	addwfc	_Activity_Timer+1,f,c
  2843  001462  225C               	addwfc	_Activity_Timer+2,f,c
  2844  001464  225D               	addwfc	_Activity_Timer+3,f,c
  2845  001466  0C00               	retlw	0	;funcret
  2846  001468                     __end_of_SYS_ActivityTimer:
  2847                           	opt stack 0
  2848                           tblptru	equ	0xFF8
  2849                           tblptrh	equ	0xFF7
  2850                           tblptrl	equ	0xFF6
  2851                           tablat	equ	0xFF5
  2852                           intcon	equ	0xFF2
  2853                           postinc0	equ	0xFEE
  2854                           wreg	equ	0xFE8
  2855                           postdec1	equ	0xFE5
  2856                           fsr1l	equ	0xFE1
  2857                           
  2858 ;; *************** function _SYS_Sleep *****************
  2859 ;; Defined at:
  2860 ;;		line 94 in file "SYSTEM.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;		None
  2863 ;; Auto vars:     Size  Location     Type
  2864 ;;		None
  2865 ;; Return value:  Size  Location     Type
  2866 ;;		None               void
  2867 ;; Registers used:
  2868 ;;		status,2, status,0
  2869 ;; Tracked objects:
  2870 ;;		On entry : F/0
  2871 ;;		On exit  : 0/0
  2872 ;;		Unchanged: 0/0
  2873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2874 ;;      Params:         0       0       0       0       0
  2875 ;;      Locals:         0       0       0       0       0
  2876 ;;      Temps:          0       0       0       0       0
  2877 ;;      Totals:         0       0       0       0       0
  2878 ;;Total ram usage:        0 bytes
  2879 ;; Hardware stack levels used:    1
  2880 ;; Hardware stack levels required when called:   12
  2881 ;; This function calls:
  2882 ;;		Nothing
  2883 ;; This function is called by:
  2884 ;;		_SYS_ActivityTimer
  2885 ;; This function uses a non-reentrant model
  2886 ;;
  2887                           
  2888                           	psect	text4
  2889  000000                     __ptext4:
  2890                           	opt stack 0
  2891  000000                     _SYS_Sleep:
  2892                           	opt stack 0
  2893  000000                     __end_of_SYS_Sleep:
  2894                           	opt stack 0
  2895                           tblptru	equ	0xFF8
  2896                           tblptrh	equ	0xFF7
  2897                           tblptrl	equ	0xFF6
  2898                           tablat	equ	0xFF5
  2899                           intcon	equ	0xFF2
  2900                           postinc0	equ	0xFEE
  2901                           wreg	equ	0xFE8
  2902                           postdec1	equ	0xFE5
  2903                           fsr1l	equ	0xFE1
  2904                           
  2905 ;; *************** function _SYS_EnableInt *****************
  2906 ;; Defined at:
  2907 ;;		line 81 in file "SYSTEM.c"
  2908 ;; Parameters:    Size  Location     Type
  2909 ;;		None
  2910 ;; Auto vars:     Size  Location     Type
  2911 ;;		None
  2912 ;; Return value:  Size  Location     Type
  2913 ;;		None               void
  2914 ;; Registers used:
  2915 ;;		wreg, status,2, cstack
  2916 ;; Tracked objects:
  2917 ;;		On entry : E/1
  2918 ;;		On exit  : F/0
  2919 ;;		Unchanged: 0/0
  2920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2921 ;;      Params:         0       0       0       0       0
  2922 ;;      Locals:         0       0       0       0       0
  2923 ;;      Temps:          0       0       0       0       0
  2924 ;;      Totals:         0       0       0       0       0
  2925 ;;Total ram usage:        0 bytes
  2926 ;; Hardware stack levels used:    1
  2927 ;; Hardware stack levels required when called:   13
  2928 ;; This function calls:
  2929 ;;		_BUT_IR_PinChangeInt
  2930 ;;		_RF_DataInt
  2931 ;; This function is called by:
  2932 ;;		_main
  2933 ;;		_SYS_ActivityTimer
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text5
  2938  000000                     __ptext5:
  2939                           	opt stack 0
  2940  000000                     _SYS_EnableInt:
  2941                           	opt stack 0
  2942  000000                     __end_of_SYS_EnableInt:
  2943                           	opt stack 0
  2944                           tblptru	equ	0xFF8
  2945                           tblptrh	equ	0xFF7
  2946                           tblptrl	equ	0xFF6
  2947                           tablat	equ	0xFF5
  2948                           intcon	equ	0xFF2
  2949                           postinc0	equ	0xFEE
  2950                           wreg	equ	0xFE8
  2951                           postdec1	equ	0xFE5
  2952                           fsr1l	equ	0xFE1
  2953                           
  2954 ;; *************** function _SYS_ActivityTimerReset *****************
  2955 ;; Defined at:
  2956 ;;		line 60 in file "SYSTEM.c"
  2957 ;; Parameters:    Size  Location     Type
  2958 ;;		None
  2959 ;; Auto vars:     Size  Location     Type
  2960 ;;		None
  2961 ;; Return value:  Size  Location     Type
  2962 ;;		None               void
  2963 ;; Registers used:
  2964 ;;		None
  2965 ;; Tracked objects:
  2966 ;;		On entry : F/0
  2967 ;;		On exit  : F/0
  2968 ;;		Unchanged: F/0
  2969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2970 ;;      Params:         0       0       0       0       0
  2971 ;;      Locals:         0       0       0       0       0
  2972 ;;      Temps:          0       0       0       0       0
  2973 ;;      Totals:         0       0       0       0       0
  2974 ;;Total ram usage:        0 bytes
  2975 ;; Hardware stack levels used:    1
  2976 ;; Hardware stack levels required when called:   12
  2977 ;; This function calls:
  2978 ;;		Nothing
  2979 ;; This function is called by:
  2980 ;;		_SYS_ActivityTimer
  2981 ;; This function uses a non-reentrant model
  2982 ;;
  2983                           
  2984                           	psect	text6
  2985  000000                     __ptext6:
  2986                           	opt stack 0
  2987  000000                     _SYS_ActivityTimerReset:
  2988                           	opt stack 0
  2989  000000                     __end_of_SYS_ActivityTimerReset:
  2990                           	opt stack 0
  2991                           tblptru	equ	0xFF8
  2992                           tblptrh	equ	0xFF7
  2993                           tblptrl	equ	0xFF6
  2994                           tablat	equ	0xFF5
  2995                           intcon	equ	0xFF2
  2996                           postinc0	equ	0xFEE
  2997                           wreg	equ	0xFE8
  2998                           postdec1	equ	0xFE5
  2999                           fsr1l	equ	0xFE1
  3000                           
  3001 ;; *************** function _RF_LoadCode *****************
  3002 ;; Defined at:
  3003 ;;		line 127 in file "RF.c"
  3004 ;; Parameters:    Size  Location     Type
  3005 ;;		None
  3006 ;; Auto vars:     Size  Location     Type
  3007 ;;  High            3   17[BANK1 ] int 
  3008 ;;  Low             3   14[BANK1 ] int 
  3009 ;; Return value:  Size  Location     Type
  3010 ;;		None               void
  3011 ;; Registers used:
  3012 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3013 ;; Tracked objects:
  3014 ;;		On entry : F/0
  3015 ;;		On exit  : F/0
  3016 ;;		Unchanged: 0/0
  3017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3018 ;;      Params:         0       0       0       0       0
  3019 ;;      Locals:         0       0       6       0       0
  3020 ;;      Temps:          0       0       0       0       0
  3021 ;;      Totals:         0       0       6       0       0
  3022 ;;Total ram usage:        6 bytes
  3023 ;; Hardware stack levels used:    1
  3024 ;; Hardware stack levels required when called:   14
  3025 ;; This function calls:
  3026 ;;		_RF_CalculateCodesize
  3027 ;;		___ftge
  3028 ;;		___ftmul
  3029 ;;		___fttol
  3030 ;;		___lwtoft
  3031 ;; This function is called by:
  3032 ;;		_main
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           	psect	text7
  3037  00024C                     __ptext7:
  3038                           	opt stack 0
  3039  00024C                     _RF_LoadCode:
  3040                           	opt stack 16
  3041                           
  3042                           ; BSR set to: 0
  3043                           ;RF.c: 130: double High = 0.0;
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;incstack = 0
  3047  00024C  0101               	movlb	1	; () banked
  3048  00024E  6B98               	clrf	RF_LoadCode@High& (0+255),b
  3049  000250  6B99               	clrf	(RF_LoadCode@High+1)& (0+255),b
  3050  000252  6B9A               	clrf	(RF_LoadCode@High+2)& (0+255),b
  3051                           
  3052                           ; BSR set to: 1
  3053                           ;RF.c: 132: Low = (double)RF_SavedTiming[0] * (1.0 - 0.02);
  3054  000254  0E80               	movlw	128
  3055  000256  6EF6               	movwf	tblptrl,c
  3056  000258                     	if	1	;There is more than 1 active tblptr byte
  3057  000258  0E25               	movlw	37
  3058  00025A  6EF7               	movwf	tblptrh,c
  3059  00025C                     	endif
  3060  00025C                     	if	0	;There are less than 3 active tblptr bytes
  3061  00025C                     	endif
  3062  00025C  0009               	tblrd		*+
  3063  00025E  CFF5 F0BD          	movff	tablat,___lwtoft@c
  3064  000262  000A               	tblrd		*-
  3065  000264  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  3066  000268  EC89  F00B         	call	___lwtoft	;wreg free
  3067  00026C  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  3068  000270  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  3069  000274  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  3070  000278  0EE1               	movlw	225
  3071  00027A  0101               	movlb	1	; () banked
  3072  00027C  6F8A               	movwf	___ftmul@f2& (0+255),b
  3073  00027E  0E7A               	movlw	122
  3074  000280  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  3075  000282  0E3F               	movlw	63
  3076  000284  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  3077  000286  ECC4  F002         	call	___ftmul	;wreg free
  3078  00028A  C187  F195         	movff	?___ftmul,RF_LoadCode@Low
  3079  00028E  C188  F196         	movff	?___ftmul+1,RF_LoadCode@Low+1
  3080  000292  C189  F197         	movff	?___ftmul+2,RF_LoadCode@Low+2
  3081                           
  3082                           ;RF.c: 133: High = (double)RF_SavedTiming[0] * (1.0 + 0.02);
  3083  000296  0E80               	movlw	128
  3084  000298  6EF6               	movwf	tblptrl,c
  3085  00029A                     	if	1	;There is more than 1 active tblptr byte
  3086  00029A  0E25               	movlw	37
  3087  00029C  6EF7               	movwf	tblptrh,c
  3088  00029E                     	endif
  3089  00029E                     	if	0	;There are less than 3 active tblptr bytes
  3090  00029E                     	endif
  3091  00029E  0009               	tblrd		*+
  3092  0002A0  CFF5 F0BD          	movff	tablat,___lwtoft@c
  3093  0002A4  000A               	tblrd		*-
  3094  0002A6  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  3095  0002AA  EC89  F00B         	call	___lwtoft	;wreg free
  3096  0002AE  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  3097  0002B2  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  3098  0002B6  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  3099  0002BA  0E8F               	movlw	143
  3100  0002BC  0101               	movlb	1	; () banked
  3101  0002BE  6F8A               	movwf	___ftmul@f2& (0+255),b
  3102  0002C0  0E82               	movlw	130
  3103  0002C2  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  3104  0002C4  0E3F               	movlw	63
  3105  0002C6  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  3106  0002C8  ECC4  F002         	call	___ftmul	;wreg free
  3107  0002CC  C187  F198         	movff	?___ftmul,RF_LoadCode@High
  3108  0002D0  C188  F199         	movff	?___ftmul+1,RF_LoadCode@High+1
  3109  0002D4  C189  F19A         	movff	?___ftmul+2,RF_LoadCode@High+2
  3110                           
  3111                           ;RF.c: 135: if(Low < 300)
  3112  0002D8  C195  F0B5         	movff	RF_LoadCode@Low,___ftge@ff1
  3113  0002DC  C196  F0B6         	movff	RF_LoadCode@Low+1,___ftge@ff1+1
  3114  0002E0  C197  F0B7         	movff	RF_LoadCode@Low+2,___ftge@ff1+2
  3115  0002E4  0100               	movlb	0	; () banked
  3116  0002E6  6BB8               	clrf	___ftge@ff2& (0+255),b
  3117  0002E8  0E96               	movlw	150
  3118  0002EA  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  3119  0002EC  0E43               	movlw	67
  3120  0002EE  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  3121  0002F0  EC48  F009         	call	___ftge	;wreg free
  3122  0002F4  E206               	bc	l6861
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;RF.c: 136: {
  3126                           ;RF.c: 137: Low = 300;
  3127  0002F6  0101               	movlb	1	; () banked
  3128  0002F8  6B95               	clrf	RF_LoadCode@Low& (0+255),b
  3129  0002FA  0E96               	movlw	150
  3130  0002FC  6F96               	movwf	(RF_LoadCode@Low+1)& (0+255),b
  3131  0002FE  0E43               	movlw	67
  3132  000300  6F97               	movwf	(RF_LoadCode@Low+2)& (0+255),b
  3133  000302                     l6861:
  3134                           
  3135                           ;RF.c: 138: }
  3136                           ;RF.c: 139: if(High > 2000)
  3137  000302  0100               	movlb	0	; () banked
  3138  000304  6BB5               	clrf	___ftge@ff1& (0+255),b
  3139  000306  0EFA               	movlw	250
  3140  000308  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  3141  00030A  0E44               	movlw	68
  3142  00030C  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  3143  00030E  C198  F0B8         	movff	RF_LoadCode@High,___ftge@ff2
  3144  000312  C199  F0B9         	movff	RF_LoadCode@High+1,___ftge@ff2+1
  3145  000316  C19A  F0BA         	movff	RF_LoadCode@High+2,___ftge@ff2+2
  3146  00031A  EC48  F009         	call	___ftge	;wreg free
  3147  00031E  E206               	bc	l6865
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;RF.c: 140: {
  3151                           ;RF.c: 141: High = 2000;
  3152  000320  0101               	movlb	1	; () banked
  3153  000322  6B98               	clrf	RF_LoadCode@High& (0+255),b
  3154  000324  0EFA               	movlw	250
  3155  000326  6F99               	movwf	(RF_LoadCode@High+1)& (0+255),b
  3156  000328  0E44               	movlw	68
  3157  00032A  6F9A               	movwf	(RF_LoadCode@High+2)& (0+255),b
  3158  00032C                     l6865:
  3159                           
  3160                           ;RF.c: 142: }
  3161                           ;RF.c: 144: RF_SyncLow = (unsigned int) Low;
  3162  00032C  C195  F0B5         	movff	RF_LoadCode@Low,___fttol@f1
  3163  000330  C196  F0B6         	movff	RF_LoadCode@Low+1,___fttol@f1+1
  3164  000334  C197  F0B7         	movff	RF_LoadCode@Low+2,___fttol@f1+2
  3165  000338  EC05  F004         	call	___fttol	;wreg free
  3166  00033C  C0B5  F0C2         	movff	?___fttol,_RF_SyncLow
  3167  000340  C0B6  F0C3         	movff	?___fttol+1,_RF_SyncLow+1
  3168                           
  3169                           ;RF.c: 145: RF_SyncHigh = (unsigned int) High;
  3170  000344  C198  F0B5         	movff	RF_LoadCode@High,___fttol@f1
  3171  000348  C199  F0B6         	movff	RF_LoadCode@High+1,___fttol@f1+1
  3172  00034C  C19A  F0B7         	movff	RF_LoadCode@High+2,___fttol@f1+2
  3173  000350  EC05  F004         	call	___fttol	;wreg free
  3174  000354  C0B5  F0C0         	movff	?___fttol,_RF_SyncHigh
  3175  000358  C0B6  F0C1         	movff	?___fttol+1,_RF_SyncHigh+1
  3176                           
  3177                           ;RF.c: 147: RF_CodeSize = RF_CalculateCodesize();
  3178  00035C  EC8B  F00A         	call	_RF_CalculateCodesize	;wreg free
  3179  000360  6FC8               	movwf	_RF_CodeSize& (0+255),b
  3180                           
  3181                           ; BSR set to: 0
  3182  000362  0012               	return		;funcret
  3183  000364                     __end_of_RF_LoadCode:
  3184                           	opt stack 0
  3185                           tblptru	equ	0xFF8
  3186                           tblptrh	equ	0xFF7
  3187                           tblptrl	equ	0xFF6
  3188                           tablat	equ	0xFF5
  3189                           intcon	equ	0xFF2
  3190                           postinc0	equ	0xFEE
  3191                           wreg	equ	0xFE8
  3192                           postdec1	equ	0xFE5
  3193                           fsr1l	equ	0xFE1
  3194                           
  3195 ;; *************** function _RF_CalculateCodesize *****************
  3196 ;; Defined at:
  3197 ;;		line 155 in file "RF.c"
  3198 ;; Parameters:    Size  Location     Type
  3199 ;;		None
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;  i               1   53[BANK0 ] unsigned char 
  3202 ;; Return value:  Size  Location     Type
  3203 ;;                  1    wreg      unsigned char 
  3204 ;; Registers used:
  3205 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3206 ;; Tracked objects:
  3207 ;;		On entry : E/0
  3208 ;;		On exit  : F/0
  3209 ;;		Unchanged: 0/0
  3210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3211 ;;      Params:         0       0       0       0       0
  3212 ;;      Locals:         0       1       0       0       0
  3213 ;;      Temps:          0       0       0       0       0
  3214 ;;      Totals:         0       1       0       0       0
  3215 ;;Total ram usage:        1 bytes
  3216 ;; Hardware stack levels used:    1
  3217 ;; Hardware stack levels required when called:   12
  3218 ;; This function calls:
  3219 ;;		Nothing
  3220 ;; This function is called by:
  3221 ;;		_RF_LoadCode
  3222 ;; This function uses a non-reentrant model
  3223 ;;
  3224                           
  3225                           	psect	text8
  3226  001516                     __ptext8:
  3227                           	opt stack 0
  3228  001516                     _RF_CalculateCodesize:
  3229                           	opt stack 17
  3230                           
  3231                           ;RF.c: 157: unsigned char i;
  3232                           ;RF.c: 159: for(i=0; i<64;i++)
  3233                           
  3234                           ; BSR set to: 0
  3235                           ;incstack = 0
  3236  001516  0100               	movlb	0	; () banked
  3237  001518  6BB5               	clrf	RF_CalculateCodesize@i& (0+255),b
  3238  00151A                     l5187:
  3239                           
  3240                           ; BSR set to: 0
  3241                           ;RF.c: 160: {
  3242                           ;RF.c: 161: if(RF_SavedTiming[i] == 0)
  3243  00151A  51B5               	movf	RF_CalculateCodesize@i& (0+255),w,b
  3244  00151C  0D02               	mullw	2
  3245  00151E  0E80               	movlw	128
  3246  001520  24F3               	addwf	prodl,w,c
  3247  001522  6EF6               	movwf	tblptrl,c
  3248  001524  0E25               	movlw	37
  3249  001526  20F4               	addwfc	prodh,w,c
  3250  001528  6EF7               	movwf	tblptrh,c
  3251  00152A  6AF8               	clrf	tblptru,c
  3252  00152C  0E00               	movlw	0
  3253  00152E  22F8               	addwfc	tblptru,f,c
  3254  001530  0009               	tblrd		*+
  3255  001532  50F5               	movf	tablat,w,c
  3256  001534  0009               	tblrd		*+
  3257  001536  10F5               	iorwf	tablat,w,c
  3258  001538  E102               	bnz	l5193
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;RF.c: 162: {
  3262                           ;RF.c: 163: return i;
  3263  00153A  51B5               	movf	RF_CalculateCodesize@i& (0+255),w,b
  3264  00153C  0012               	return	
  3265  00153E                     l5193:
  3266                           
  3267                           ; BSR set to: 0
  3268  00153E  2BB5               	incf	RF_CalculateCodesize@i& (0+255),f,b
  3269                           
  3270                           ; BSR set to: 0
  3271  001540  0E3F               	movlw	63
  3272  001542  65B5               	cpfsgt	RF_CalculateCodesize@i& (0+255),b
  3273  001544  D7EA               	goto	l5187
  3274  001546  0C40               	retlw	64
  3275  001548                     __end_of_RF_CalculateCodesize:
  3276                           	opt stack 0
  3277                           tblptru	equ	0xFF8
  3278                           tblptrh	equ	0xFF7
  3279                           tblptrl	equ	0xFF6
  3280                           tablat	equ	0xFF5
  3281                           prodh	equ	0xFF4
  3282                           prodl	equ	0xFF3
  3283                           intcon	equ	0xFF2
  3284                           postinc0	equ	0xFEE
  3285                           wreg	equ	0xFE8
  3286                           postdec1	equ	0xFE5
  3287                           fsr1l	equ	0xFE1
  3288                           
  3289 ;; *************** function _RF_Enable *****************
  3290 ;; Defined at:
  3291 ;;		line 101 in file "RF.c"
  3292 ;; Parameters:    Size  Location     Type
  3293 ;;		None
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;		None
  3296 ;; Return value:  Size  Location     Type
  3297 ;;		None               void
  3298 ;; Registers used:
  3299 ;;		wreg, status,2, cstack
  3300 ;; Tracked objects:
  3301 ;;		On entry : F/1
  3302 ;;		On exit  : F/0
  3303 ;;		Unchanged: 0/0
  3304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3305 ;;      Params:         0       0       0       0       0
  3306 ;;      Locals:         0       0       0       0       0
  3307 ;;      Temps:          0       0       0       0       0
  3308 ;;      Totals:         0       0       0       0       0
  3309 ;;Total ram usage:        0 bytes
  3310 ;; Hardware stack levels used:    1
  3311 ;; Hardware stack levels required when called:   13
  3312 ;; This function calls:
  3313 ;;		_RF_DataInt
  3314 ;;		_TMR_Timer0Int
  3315 ;; This function is called by:
  3316 ;;		_main
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text9
  3321  003FE6                     __ptext9:
  3322                           	opt stack 0
  3323  003FE6                     _RF_Enable:
  3324                           	opt stack 17
  3325                           
  3326                           ; BSR set to: 1
  3327                           ;RF.c: 103: INTCON3bits.INT1IF = 0;
  3328                           
  3329                           ; BSR set to: 0
  3330                           ;incstack = 0
  3331  003FE6  90F0               	bcf	intcon3,0,c	;volatile
  3332                           
  3333                           ;RF.c: 104: INTCON3bits.INT2IF = 0;
  3334  003FE8  92F0               	bcf	intcon3,1,c	;volatile
  3335                           
  3336                           ;RF.c: 105: INTCONbits.TMR0IF = 0;
  3337  003FEA  94F2               	bcf	intcon,2,c	;volatile
  3338                           
  3339                           ; BSR set to: 1
  3340                           ;RF.c: 106: RF_DataInt(1);
  3341  003FEC  0E01               	movlw	1
  3342  003FEE  ECDF  F00C         	call	_RF_DataInt
  3343                           
  3344                           ;RF.c: 107: TMR_Timer0Int(1);
  3345  003FF2  0E01               	movlw	1
  3346  003FF4  EF49  F00D         	goto	_TMR_Timer0Int
  3347  003FF8                     __end_of_RF_Enable:
  3348                           	opt stack 0
  3349                           tblptru	equ	0xFF8
  3350                           tblptrh	equ	0xFF7
  3351                           tblptrl	equ	0xFF6
  3352                           tablat	equ	0xFF5
  3353                           prodh	equ	0xFF4
  3354                           prodl	equ	0xFF3
  3355                           intcon	equ	0xFF2
  3356                           intcon3	equ	0xFF0
  3357                           postinc0	equ	0xFEE
  3358                           wreg	equ	0xFE8
  3359                           postdec1	equ	0xFE5
  3360                           fsr1l	equ	0xFE1
  3361                           
  3362 ;; *************** function _MTR_Rotate *****************
  3363 ;; Defined at:
  3364 ;;		line 104 in file "MOTOR.c"
  3365 ;; Parameters:    Size  Location     Type
  3366 ;;		None
  3367 ;; Auto vars:     Size  Location     Type
  3368 ;;		None
  3369 ;; Return value:  Size  Location     Type
  3370 ;;		None               void
  3371 ;; Registers used:
  3372 ;;		wreg, status,2, status,0, cstack
  3373 ;; Tracked objects:
  3374 ;;		On entry : F/1
  3375 ;;		On exit  : F/0
  3376 ;;		Unchanged: 0/0
  3377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3378 ;;      Params:         0       0       0       0       0
  3379 ;;      Locals:         0       0       0       0       0
  3380 ;;      Temps:          0       0       0       0       0
  3381 ;;      Totals:         0       0       0       0       0
  3382 ;;Total ram usage:        0 bytes
  3383 ;; Hardware stack levels used:    1
  3384 ;; Hardware stack levels required when called:   14
  3385 ;; This function calls:
  3386 ;;		_MSC_DelayMS
  3387 ;;		_MTR_IN1
  3388 ;;		_MTR_IN2
  3389 ;; This function is called by:
  3390 ;;		_main
  3391 ;; This function uses a non-reentrant model
  3392 ;;
  3393                           
  3394                           	psect	text10
  3395  000D00                     __ptext10:
  3396                           	opt stack 0
  3397  000D00                     _MTR_Rotate:
  3398                           	opt stack 16
  3399                           
  3400                           ; BSR set to: 1
  3401                           ;MOTOR.c: 106: if(DC_Motor == 0)
  3402                           
  3403                           ; BSR set to: 0
  3404                           ;incstack = 0
  3405  000D00  0100               	movlb	0	; () banked
  3406  000D02  51C5               	movf	_DC_Motor& (0+255),w,b
  3407  000D04  E11D               	bnz	l6929
  3408                           
  3409                           ; BSR set to: 0
  3410                           ;MOTOR.c: 107: {
  3411                           ;MOTOR.c: 108: MTR_IN1(0);
  3412  000D06  0E00               	movlw	0
  3413  000D08                     i7L__ptext12:
  3414                           	opt stack 0
  3415  000D08                     i7L_MTR_IN1:
  3416                           	opt stack 17
  3417                           
  3418                           ; BSR set to: 0
  3419                           ;incstack = 0
  3420                           ;MTR_IN1@state stored from wreg
  3421  000D08  6FB5               	movwf	MTR_IN1@state& (0+255),b
  3422  000D0A                     i7Ll5449:
  3423                           	opt stack 17
  3424                           
  3425                           ;MOTOR.c: 56: if(state)
  3426  000D0A  0100               	movlb	0	; () banked
  3427  000D0C  51B5               	movf	MTR_IN1@state& (0+255),w,b
  3428  000D0E  B4D8               	btfsc	status,2,c
  3429  000D10                     i7Lu5311:
  3430                           	opt stack 0
  3431  000D10  D002               	goto	i7Ll5453
  3432  000D12                     i7Lu5310:
  3433                           	opt stack 0
  3434  000D12                     i7Ll5451:
  3435                           	opt stack 17
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;MOTOR.c: 57: {
  3439                           ;MOTOR.c: 58: LATB |= 0x08;
  3440  000D12  868A               	bsf	3978,3,c	;volatile
  3441  000D14  D001               	goto	iL44
  3442  000D16                     i7Ll5453:
  3443                           	opt stack 17
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;MOTOR.c: 60: else
  3447                           ;MOTOR.c: 61: {
  3448                           ;MOTOR.c: 62: LATB &= ~0x08;
  3449  000D16  968A               	bcf	3978,3,c	;volatile
  3450  000D18                     i7Ll509:
  3451                           	opt stack 0
  3452  000D18                     iL44:
  3453                           
  3454                           ;MOTOR.c: 109: MTR_IN2(1);
  3455  000D18  0E01               	movlw	1
  3456  000D1A                     i8L__ptext11:
  3457                           	opt stack 0
  3458  000D1A                     i8L_MTR_IN2:
  3459                           	opt stack 17
  3460                           
  3461                           ; BSR set to: 0
  3462                           ;incstack = 0
  3463                           ;MTR_IN2@state stored from wreg
  3464  000D1A  6FB5               	movwf	MTR_IN2@state& (0+255),b
  3465  000D1C                     i8Ll5455:
  3466                           	opt stack 17
  3467                           
  3468                           ;MOTOR.c: 73: if(state)
  3469  000D1C  0100               	movlb	0	; () banked
  3470  000D1E  51B5               	movf	MTR_IN2@state& (0+255),w,b
  3471  000D20  B4D8               	btfsc	status,2,c
  3472  000D22                     i8Lu5321:
  3473                           	opt stack 0
  3474  000D22  D002               	goto	i8Ll5459
  3475  000D24                     i8Lu5320:
  3476                           	opt stack 0
  3477  000D24                     i8Ll5457:
  3478                           	opt stack 17
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;MOTOR.c: 74: {
  3482                           ;MOTOR.c: 75: LATC |= 0x04;
  3483  000D24  848B               	bsf	3979,2,c	;volatile
  3484  000D26  D001               	goto	iL54
  3485  000D28                     i8Ll5459:
  3486                           	opt stack 17
  3487                           
  3488                           ; BSR set to: 0
  3489                           ;MOTOR.c: 77: else
  3490                           ;MOTOR.c: 78: {
  3491                           ;MOTOR.c: 79: LATC &= ~0x04;
  3492  000D28  948B               	bcf	3979,2,c	;volatile
  3493  000D2A                     i8Ll514:
  3494                           	opt stack 0
  3495  000D2A                     iL54:
  3496                           
  3497                           ;MOTOR.c: 110: MSC_DelayMS(400);
  3498  000D2A  0E90               	movlw	144
  3499  000D2C  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  3500  000D2E  0E01               	movlw	1
  3501  000D30  6FBA               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  3502  000D32  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  3503  000D34  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  3504  000D36  ECCD  F009         	call	_MSC_DelayMS	;wreg free
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;MOTOR.c: 111: DC_Motor = 1;
  3508  000D3A  0E01               	movlw	1
  3509  000D3C  6FC5               	movwf	_DC_Motor& (0+255),b
  3510                           
  3511                           ;MOTOR.c: 112: }
  3512  000D3E  D01B               	goto	l521
  3513  000D40                     l6929:
  3514                           
  3515                           ; BSR set to: 0
  3516                           ;MOTOR.c: 113: else
  3517                           ;MOTOR.c: 114: {
  3518                           ;MOTOR.c: 115: MTR_IN1(1);
  3519  000D40  0E01               	movlw	1
  3520  000D42                     i9L__ptext12:
  3521                           	opt stack 0
  3522  000D42                     i9L_MTR_IN1:
  3523                           	opt stack 17
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;incstack = 0
  3527                           ;MTR_IN1@state stored from wreg
  3528  000D42  6FB5               	movwf	MTR_IN1@state& (0+255),b
  3529  000D44                     i9Ll5449:
  3530                           	opt stack 17
  3531                           
  3532                           ;MOTOR.c: 56: if(state)
  3533  000D44  0100               	movlb	0	; () banked
  3534  000D46  51B5               	movf	MTR_IN1@state& (0+255),w,b
  3535  000D48  B4D8               	btfsc	status,2,c
  3536  000D4A                     i9Lu5311:
  3537                           	opt stack 0
  3538  000D4A  D002               	goto	i9Ll5453
  3539  000D4C                     i9Lu5310:
  3540                           	opt stack 0
  3541  000D4C                     i9Ll5451:
  3542                           	opt stack 17
  3543                           
  3544                           ; BSR set to: 0
  3545                           ;MOTOR.c: 57: {
  3546                           ;MOTOR.c: 58: LATB |= 0x08;
  3547  000D4C  868A               	bsf	3978,3,c	;volatile
  3548  000D4E  D001               	goto	iL64
  3549  000D50                     i9Ll5453:
  3550                           	opt stack 17
  3551                           
  3552                           ; BSR set to: 0
  3553                           ;MOTOR.c: 60: else
  3554                           ;MOTOR.c: 61: {
  3555                           ;MOTOR.c: 62: LATB &= ~0x08;
  3556  000D50  968A               	bcf	3978,3,c	;volatile
  3557  000D52                     i9Ll509:
  3558                           	opt stack 0
  3559  000D52                     iL64:
  3560                           
  3561                           ;MOTOR.c: 116: MTR_IN2(0);
  3562  000D52  0E00               	movlw	0
  3563  000D54                     i10L__ptext11:
  3564                           	opt stack 0
  3565  000D54                     i10L_MTR_IN2:
  3566                           	opt stack 17
  3567                           
  3568                           ; BSR set to: 0
  3569                           ;incstack = 0
  3570                           ;MTR_IN2@state stored from wreg
  3571  000D54  6FB5               	movwf	MTR_IN2@state& (0+255),b
  3572  000D56                     i10Ll5455:
  3573                           	opt stack 17
  3574                           
  3575                           ;MOTOR.c: 73: if(state)
  3576  000D56  0100               	movlb	0	; () banked
  3577  000D58  51B5               	movf	MTR_IN2@state& (0+255),w,b
  3578  000D5A  B4D8               	btfsc	status,2,c
  3579  000D5C                     i10Lu5321:
  3580                           	opt stack 0
  3581  000D5C  D002               	goto	i10Ll5459
  3582  000D5E                     i10Lu5320:
  3583                           	opt stack 0
  3584  000D5E                     i10Ll5457:
  3585                           	opt stack 17
  3586                           
  3587                           ; BSR set to: 0
  3588                           ;MOTOR.c: 74: {
  3589                           ;MOTOR.c: 75: LATC |= 0x04;
  3590  000D5E  848B               	bsf	3979,2,c	;volatile
  3591  000D60  D001               	goto	iL74
  3592  000D62                     i10Ll5459:
  3593                           	opt stack 17
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;MOTOR.c: 77: else
  3597                           ;MOTOR.c: 78: {
  3598                           ;MOTOR.c: 79: LATC &= ~0x04;
  3599  000D62  948B               	bcf	3979,2,c	;volatile
  3600  000D64                     i10Ll514:
  3601                           	opt stack 0
  3602  000D64                     iL74:
  3603                           
  3604                           ;MOTOR.c: 117: MSC_DelayMS(400);
  3605  000D64  0E90               	movlw	144
  3606  000D66  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  3607  000D68  0E01               	movlw	1
  3608  000D6A  6FBA               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  3609  000D6C  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  3610  000D6E  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  3611  000D70  ECCD  F009         	call	_MSC_DelayMS	;wreg free
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;MOTOR.c: 118: DC_Motor = 0;
  3615  000D74  6BC5               	clrf	_DC_Motor& (0+255),b
  3616  000D76                     l521:
  3617                           
  3618                           ; BSR set to: 0
  3619                           ;MOTOR.c: 119: }
  3620                           ;MOTOR.c: 120: MTR_IN1(0);
  3621  000D76  0E00               	movlw	0
  3622  000D78                     i11L__ptext12:
  3623                           	opt stack 0
  3624  000D78                     i11L_MTR_IN1:
  3625                           	opt stack 17
  3626                           
  3627                           ; BSR set to: 0
  3628                           ;incstack = 0
  3629                           ;MTR_IN1@state stored from wreg
  3630  000D78  6FB5               	movwf	MTR_IN1@state& (0+255),b
  3631  000D7A                     i11Ll5449:
  3632                           	opt stack 17
  3633                           
  3634                           ;MOTOR.c: 56: if(state)
  3635  000D7A  0100               	movlb	0	; () banked
  3636  000D7C  51B5               	movf	MTR_IN1@state& (0+255),w,b
  3637  000D7E  B4D8               	btfsc	status,2,c
  3638  000D80                     i11Lu5311:
  3639                           	opt stack 0
  3640  000D80  D002               	goto	i11Ll5453
  3641  000D82                     i11Lu5310:
  3642                           	opt stack 0
  3643  000D82                     i11Ll5451:
  3644                           	opt stack 17
  3645                           
  3646                           ; BSR set to: 0
  3647                           ;MOTOR.c: 57: {
  3648                           ;MOTOR.c: 58: LATB |= 0x08;
  3649  000D82  868A               	bsf	3978,3,c	;volatile
  3650  000D84  D001               	goto	iL84
  3651  000D86                     i11Ll5453:
  3652                           	opt stack 17
  3653                           
  3654                           ; BSR set to: 0
  3655                           ;MOTOR.c: 60: else
  3656                           ;MOTOR.c: 61: {
  3657                           ;MOTOR.c: 62: LATB &= ~0x08;
  3658  000D86  968A               	bcf	3978,3,c	;volatile
  3659  000D88                     i11Ll509:
  3660                           	opt stack 0
  3661  000D88                     iL84:
  3662                           
  3663                           ;MOTOR.c: 121: MTR_IN2(0);
  3664  000D88  0E00               	movlw	0
  3665  000D8A                     i12L__ptext11:
  3666                           	opt stack 0
  3667  000D8A                     i12L_MTR_IN2:
  3668                           	opt stack 17
  3669                           
  3670                           ; BSR set to: 0
  3671                           ;incstack = 0
  3672                           ;MTR_IN2@state stored from wreg
  3673  000D8A  6FB5               	movwf	MTR_IN2@state& (0+255),b
  3674  000D8C                     i12Ll5455:
  3675                           	opt stack 17
  3676                           
  3677                           ;MOTOR.c: 73: if(state)
  3678  000D8C  0100               	movlb	0	; () banked
  3679  000D8E  51B5               	movf	MTR_IN2@state& (0+255),w,b
  3680  000D90  B4D8               	btfsc	status,2,c
  3681  000D92                     i12Lu5321:
  3682                           	opt stack 0
  3683  000D92  D002               	goto	i12Ll5459
  3684  000D94                     i12Lu5320:
  3685                           	opt stack 0
  3686  000D94                     i12Ll5457:
  3687                           	opt stack 17
  3688                           
  3689                           ; BSR set to: 0
  3690                           ;MOTOR.c: 74: {
  3691                           ;MOTOR.c: 75: LATC |= 0x04;
  3692  000D94  848B               	bsf	3979,2,c	;volatile
  3693  000D96  0012               	return	
  3694  000D98                     i12Ll5459:
  3695                           	opt stack 17
  3696                           
  3697                           ; BSR set to: 0
  3698                           ;MOTOR.c: 77: else
  3699                           ;MOTOR.c: 78: {
  3700                           ;MOTOR.c: 79: LATC &= ~0x04;
  3701  000D98  948B               	bcf	3979,2,c	;volatile
  3702  000D9A                     i12Ll514:
  3703                           	opt stack 0
  3704  000D9A  0012               	return	
  3705  000D9C                     __end_of_MTR_Rotate:
  3706                           	opt stack 0
  3707                           tblptru	equ	0xFF8
  3708                           tblptrh	equ	0xFF7
  3709                           tblptrl	equ	0xFF6
  3710                           tablat	equ	0xFF5
  3711                           prodh	equ	0xFF4
  3712                           prodl	equ	0xFF3
  3713                           intcon	equ	0xFF2
  3714                           intcon3	equ	0xFF0
  3715                           postinc0	equ	0xFEE
  3716                           wreg	equ	0xFE8
  3717                           postdec1	equ	0xFE5
  3718                           fsr1l	equ	0xFE1
  3719                           status	equ	0xFD8
  3720                           
  3721 ;; *************** function _MTR_IN2 *****************
  3722 ;; Defined at:
  3723 ;;		line 71 in file "MOTOR.c"
  3724 ;; Parameters:    Size  Location     Type
  3725 ;;  state           1    wreg     unsigned char 
  3726 ;; Auto vars:     Size  Location     Type
  3727 ;;  state           1   53[BANK0 ] unsigned char 
  3728 ;; Return value:  Size  Location     Type
  3729 ;;		None               void
  3730 ;; Registers used:
  3731 ;;		wreg, status,2, status,0
  3732 ;; Tracked objects:
  3733 ;;		On entry : F/0
  3734 ;;		On exit  : F/0
  3735 ;;		Unchanged: 0/0
  3736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3737 ;;      Params:         0       0       0       0       0
  3738 ;;      Locals:         0       1       0       0       0
  3739 ;;      Temps:          0       0       0       0       0
  3740 ;;      Totals:         0       1       0       0       0
  3741 ;;Total ram usage:        1 bytes
  3742 ;; Hardware stack levels used:    1
  3743 ;; Hardware stack levels required when called:   12
  3744 ;; This function calls:
  3745 ;;		Nothing
  3746 ;; This function is called by:
  3747 ;;		_MTR_Rotate
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text11
  3752  000000                     __ptext11:
  3753                           	opt stack 0
  3754  000000                     _MTR_IN2:
  3755                           	opt stack 0
  3756  000000                     __end_of_MTR_IN2:
  3757                           	opt stack 0
  3758                           tblptru	equ	0xFF8
  3759                           tblptrh	equ	0xFF7
  3760                           tblptrl	equ	0xFF6
  3761                           tablat	equ	0xFF5
  3762                           prodh	equ	0xFF4
  3763                           prodl	equ	0xFF3
  3764                           intcon	equ	0xFF2
  3765                           intcon3	equ	0xFF0
  3766                           postinc0	equ	0xFEE
  3767                           wreg	equ	0xFE8
  3768                           postdec1	equ	0xFE5
  3769                           fsr1l	equ	0xFE1
  3770                           status	equ	0xFD8
  3771                           
  3772 ;; *************** function _MTR_IN1 *****************
  3773 ;; Defined at:
  3774 ;;		line 54 in file "MOTOR.c"
  3775 ;; Parameters:    Size  Location     Type
  3776 ;;  state           1    wreg     unsigned char 
  3777 ;; Auto vars:     Size  Location     Type
  3778 ;;  state           1   53[BANK0 ] unsigned char 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;		None               void
  3781 ;; Registers used:
  3782 ;;		wreg, status,2, status,0
  3783 ;; Tracked objects:
  3784 ;;		On entry : F/0
  3785 ;;		On exit  : F/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3788 ;;      Params:         0       0       0       0       0
  3789 ;;      Locals:         0       1       0       0       0
  3790 ;;      Temps:          0       0       0       0       0
  3791 ;;      Totals:         0       1       0       0       0
  3792 ;;Total ram usage:        1 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; Hardware stack levels required when called:   12
  3795 ;; This function calls:
  3796 ;;		Nothing
  3797 ;; This function is called by:
  3798 ;;		_MTR_Rotate
  3799 ;; This function uses a non-reentrant model
  3800 ;;
  3801                           
  3802                           	psect	text12
  3803  000000                     __ptext12:
  3804                           	opt stack 0
  3805  000000                     _MTR_IN1:
  3806                           	opt stack 0
  3807  000000                     __end_of_MTR_IN1:
  3808                           	opt stack 0
  3809                           tblptru	equ	0xFF8
  3810                           tblptrh	equ	0xFF7
  3811                           tblptrl	equ	0xFF6
  3812                           tablat	equ	0xFF5
  3813                           prodh	equ	0xFF4
  3814                           prodl	equ	0xFF3
  3815                           intcon	equ	0xFF2
  3816                           intcon3	equ	0xFF0
  3817                           postinc0	equ	0xFEE
  3818                           wreg	equ	0xFE8
  3819                           postdec1	equ	0xFE5
  3820                           fsr1l	equ	0xFE1
  3821                           status	equ	0xFD8
  3822                           
  3823 ;; *************** function _MSC_BlinkLED *****************
  3824 ;; Defined at:
  3825 ;;		line 173 in file "MISC.c"
  3826 ;; Parameters:    Size  Location     Type
  3827 ;;  blink           2    4[BANK1 ] unsigned int 
  3828 ;;  speed           2    6[BANK1 ] unsigned int 
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;  i               2    8[BANK1 ] unsigned int 
  3831 ;; Return value:  Size  Location     Type
  3832 ;;		None               void
  3833 ;; Registers used:
  3834 ;;		wreg, status,2, status,0, cstack
  3835 ;; Tracked objects:
  3836 ;;		On entry : F/1
  3837 ;;		On exit  : F/1
  3838 ;;		Unchanged: 0/0
  3839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3840 ;;      Params:         0       0       4       0       0
  3841 ;;      Locals:         0       0       2       0       0
  3842 ;;      Temps:          0       2       0       0       0
  3843 ;;      Totals:         0       2       6       0       0
  3844 ;;Total ram usage:        8 bytes
  3845 ;; Hardware stack levels used:    1
  3846 ;; Hardware stack levels required when called:   14
  3847 ;; This function calls:
  3848 ;;		_MSC_DelayMS
  3849 ;; This function is called by:
  3850 ;;		_main
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           	psect	text13
  3855  0013E8                     __ptext13:
  3856                           	opt stack 0
  3857  0013E8                     _MSC_BlinkLED:
  3858                           	opt stack 16
  3859                           
  3860                           ; BSR set to: 1
  3861                           ;MISC.c: 175: unsigned int i;
  3862                           ;MISC.c: 177: for(i=0;i<(blink<<1);i++)
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;incstack = 0
  3866  0013E8  6B8F               	clrf	MSC_BlinkLED@i& (0+255),b
  3867  0013EA  6B90               	clrf	(MSC_BlinkLED@i+1)& (0+255),b
  3868  0013EC  D00E               	goto	l6921
  3869  0013EE                     l6915:
  3870                           
  3871                           ; BSR set to: 1
  3872                           ;MISC.c: 178: {
  3873                           ;MISC.c: 179: MSC_DelayMS(speed);
  3874  0013EE  C18D  F0B9         	movff	MSC_BlinkLED@speed,MSC_DelayMS@US
  3875  0013F2  C18E  F0BA         	movff	MSC_BlinkLED@speed+1,MSC_DelayMS@US+1
  3876  0013F6  0100               	movlb	0	; () banked
  3877  0013F8  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  3878  0013FA  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  3879  0013FC  ECCD  F009         	call	_MSC_DelayMS	;wreg free
  3880                           
  3881                           ; BSR set to: 0
  3882                           ;MISC.c: 180: (LATC ^= 0x10);
  3883  001400  0E10               	movlw	16
  3884  001402  1A8B               	xorwf	3979,f,c	;volatile
  3885                           
  3886                           ; BSR set to: 0
  3887  001404  0101               	movlb	1	; () banked
  3888  001406  4B8F               	infsnz	MSC_BlinkLED@i& (0+255),f,b
  3889  001408  2B90               	incf	(MSC_BlinkLED@i+1)& (0+255),f,b
  3890  00140A                     l6921:
  3891                           
  3892                           ; BSR set to: 1
  3893  00140A  C18B  F0BE         	movff	MSC_BlinkLED@blink,??_MSC_BlinkLED
  3894  00140E  C18C  F0BF         	movff	MSC_BlinkLED@blink+1,??_MSC_BlinkLED+1
  3895  001412  90D8               	bcf	status,0,c
  3896  001414  0100               	movlb	0	; () banked
  3897  001416  37BE               	rlcf	??_MSC_BlinkLED& (0+255),f,b
  3898  001418  37BF               	rlcf	(??_MSC_BlinkLED+1)& (0+255),f,b
  3899  00141A  51BE               	movf	??_MSC_BlinkLED& (0+255),w,b
  3900  00141C  0101               	movlb	1	; () banked
  3901  00141E  5D8F               	subwf	MSC_BlinkLED@i& (0+255),w,b
  3902  001420  0100               	movlb	0	; () banked
  3903  001422  51BF               	movf	(??_MSC_BlinkLED+1)& (0+255),w,b
  3904  001424  0101               	movlb	1	; () banked
  3905  001426  5990               	subwfb	(MSC_BlinkLED@i+1)& (0+255),w,b
  3906  001428  E3E2               	bnc	l6915
  3907                           
  3908                           ; BSR set to: 1
  3909  00142A  0012               	return		;funcret
  3910  00142C                     __end_of_MSC_BlinkLED:
  3911                           	opt stack 0
  3912                           tblptru	equ	0xFF8
  3913                           tblptrh	equ	0xFF7
  3914                           tblptrl	equ	0xFF6
  3915                           tablat	equ	0xFF5
  3916                           prodh	equ	0xFF4
  3917                           prodl	equ	0xFF3
  3918                           intcon	equ	0xFF2
  3919                           intcon3	equ	0xFF0
  3920                           postinc0	equ	0xFEE
  3921                           wreg	equ	0xFE8
  3922                           postdec1	equ	0xFE5
  3923                           fsr1l	equ	0xFE1
  3924                           status	equ	0xFD8
  3925                           
  3926 ;; *************** function _MSC_DelayMS *****************
  3927 ;; Defined at:
  3928 ;;		line 47 in file "MISC.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;  US              4   57[BANK0 ] long 
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;  i               4    0[BANK1 ] long 
  3933 ;; Return value:  Size  Location     Type
  3934 ;;		None               void
  3935 ;; Registers used:
  3936 ;;		wreg, status,2, status,0, cstack
  3937 ;; Tracked objects:
  3938 ;;		On entry : F/0
  3939 ;;		On exit  : F/0
  3940 ;;		Unchanged: 0/0
  3941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3942 ;;      Params:         0       4       0       0       0
  3943 ;;      Locals:         0       0       4       0       0
  3944 ;;      Temps:          0       1       0       0       0
  3945 ;;      Totals:         0       5       4       0       0
  3946 ;;Total ram usage:        9 bytes
  3947 ;; Hardware stack levels used:    1
  3948 ;; Hardware stack levels required when called:   13
  3949 ;; This function calls:
  3950 ;;		_MSC_DelayNOP
  3951 ;; This function is called by:
  3952 ;;		_main
  3953 ;;		_MTR_Rotate
  3954 ;;		_MSC_BlinkLED
  3955 ;; This function uses a non-reentrant model
  3956 ;;
  3957                           
  3958                           	psect	text14
  3959  00139A                     __ptext14:
  3960                           	opt stack 0
  3961  00139A                     _MSC_DelayMS:
  3962                           	opt stack 16
  3963                           
  3964                           ; BSR set to: 0
  3965                           ;MISC.c: 49: long i;
  3966                           ;MISC.c: 51: for(i=0; i<US; i++)
  3967                           
  3968                           ; BSR set to: 1
  3969                           ;incstack = 0
  3970  00139A  0101               	movlb	1	; () banked
  3971  00139C  6B87               	clrf	MSC_DelayMS@i& (0+255),b
  3972  00139E  6B88               	clrf	(MSC_DelayMS@i+1)& (0+255),b
  3973  0013A0  6B89               	clrf	(MSC_DelayMS@i+2)& (0+255),b
  3974  0013A2  6B8A               	clrf	(MSC_DelayMS@i+3)& (0+255),b
  3975  0013A4  D00C               	goto	l6773
  3976  0013A6                     l6769:
  3977                           
  3978                           ; BSR set to: 0
  3979                           ;MISC.c: 52: {
  3980                           ;MISC.c: 53: MSC_DelayNOP(1000);
  3981  0013A6  0E03               	movlw	3
  3982  0013A8  6FB6               	movwf	(MSC_DelayNOP@NOPs+1)& (0+255),b
  3983  0013AA  0EE8               	movlw	232
  3984  0013AC  6FB5               	movwf	MSC_DelayNOP@NOPs& (0+255),b
  3985  0013AE  EC96  F00C         	call	_MSC_DelayNOP	;wreg free
  3986                           
  3987                           ; BSR set to: 0
  3988  0013B2  0101               	movlb	1	; () banked
  3989  0013B4  2B87               	incf	MSC_DelayMS@i& (0+255),f,b
  3990  0013B6  0E00               	movlw	0
  3991  0013B8  2388               	addwfc	(MSC_DelayMS@i+1)& (0+255),f,b
  3992  0013BA  2389               	addwfc	(MSC_DelayMS@i+2)& (0+255),f,b
  3993  0013BC  238A               	addwfc	(MSC_DelayMS@i+3)& (0+255),f,b
  3994  0013BE                     l6773:
  3995                           
  3996                           ; BSR set to: 1
  3997  0013BE  0100               	movlb	0	; () banked
  3998  0013C0  51B9               	movf	MSC_DelayMS@US& (0+255),w,b
  3999  0013C2  0101               	movlb	1	; () banked
  4000  0013C4  5D87               	subwf	MSC_DelayMS@i& (0+255),w,b
  4001  0013C6  0100               	movlb	0	; () banked
  4002  0013C8  51BA               	movf	(MSC_DelayMS@US+1)& (0+255),w,b
  4003  0013CA  0101               	movlb	1	; () banked
  4004  0013CC  5988               	subwfb	(MSC_DelayMS@i+1)& (0+255),w,b
  4005  0013CE  0100               	movlb	0	; () banked
  4006  0013D0  51BB               	movf	(MSC_DelayMS@US+2)& (0+255),w,b
  4007  0013D2  0101               	movlb	1	; () banked
  4008  0013D4  5989               	subwfb	(MSC_DelayMS@i+2)& (0+255),w,b
  4009  0013D6  518A               	movf	(MSC_DelayMS@i+3)& (0+255),w,b
  4010  0013D8  0A80               	xorlw	128
  4011  0013DA  0100               	movlb	0	; () banked
  4012  0013DC  6FBD               	movwf	??_MSC_DelayMS& (0+255),b
  4013  0013DE  51BC               	movf	(MSC_DelayMS@US+3)& (0+255),w,b
  4014  0013E0  0A80               	xorlw	128
  4015  0013E2  59BD               	subwfb	??_MSC_DelayMS& (0+255),w,b
  4016  0013E4  E3E0               	bnc	l6769
  4017                           
  4018                           ; BSR set to: 0
  4019  0013E6  0012               	return		;funcret
  4020  0013E8                     __end_of_MSC_DelayMS:
  4021                           	opt stack 0
  4022                           tblptru	equ	0xFF8
  4023                           tblptrh	equ	0xFF7
  4024                           tblptrl	equ	0xFF6
  4025                           tablat	equ	0xFF5
  4026                           prodh	equ	0xFF4
  4027                           prodl	equ	0xFF3
  4028                           intcon	equ	0xFF2
  4029                           intcon3	equ	0xFF0
  4030                           postinc0	equ	0xFEE
  4031                           wreg	equ	0xFE8
  4032                           postdec1	equ	0xFE5
  4033                           fsr1l	equ	0xFE1
  4034                           status	equ	0xFD8
  4035                           
  4036 ;; *************** function _MSC_DelayNOP *****************
  4037 ;; Defined at:
  4038 ;;		line 62 in file "MISC.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;  NOPs            2   53[BANK0 ] unsigned int 
  4041 ;; Auto vars:     Size  Location     Type
  4042 ;;  i               2   55[BANK0 ] unsigned int 
  4043 ;; Return value:  Size  Location     Type
  4044 ;;		None               void
  4045 ;; Registers used:
  4046 ;;		wreg, status,2, status,0
  4047 ;; Tracked objects:
  4048 ;;		On entry : F/0
  4049 ;;		On exit  : F/0
  4050 ;;		Unchanged: 0/0
  4051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4052 ;;      Params:         0       2       0       0       0
  4053 ;;      Locals:         0       2       0       0       0
  4054 ;;      Temps:          0       0       0       0       0
  4055 ;;      Totals:         0       4       0       0       0
  4056 ;;Total ram usage:        4 bytes
  4057 ;; Hardware stack levels used:    1
  4058 ;; Hardware stack levels required when called:   12
  4059 ;; This function calls:
  4060 ;;		Nothing
  4061 ;; This function is called by:
  4062 ;;		_MSC_DelayMS
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           	psect	text15
  4067  00192C                     __ptext15:
  4068                           	opt stack 0
  4069  00192C                     _MSC_DelayNOP:
  4070                           	opt stack 16
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;MISC.c: 64: unsigned int i;
  4074                           ;MISC.c: 65: for(i=0; i<NOPs; i++)
  4075                           
  4076                           ; BSR set to: 0
  4077                           ;incstack = 0
  4078  00192C  6BB7               	clrf	MSC_DelayNOP@i& (0+255),b
  4079  00192E  6BB8               	clrf	(MSC_DelayNOP@i+1)& (0+255),b
  4080  001930  D004               	goto	l6765
  4081  001932                     l670:
  4082                           
  4083                           ; BSR set to: 0
  4084                           ;MISC.c: 66: {
  4085                           ;MISC.c: 67: __nop();
  4086  001932  F000               	nop	
  4087  001934  0100               	movlb	0	; () banked
  4088  001936  4BB7               	infsnz	MSC_DelayNOP@i& (0+255),f,b
  4089  001938  2BB8               	incf	(MSC_DelayNOP@i+1)& (0+255),f,b
  4090  00193A                     l6765:
  4091                           
  4092                           ; BSR set to: 0
  4093  00193A  51B5               	movf	MSC_DelayNOP@NOPs& (0+255),w,b
  4094  00193C  5DB7               	subwf	MSC_DelayNOP@i& (0+255),w,b
  4095  00193E  51B6               	movf	(MSC_DelayNOP@NOPs+1)& (0+255),w,b
  4096  001940  59B8               	subwfb	(MSC_DelayNOP@i+1)& (0+255),w,b
  4097  001942  E3F7               	bnc	l670
  4098                           
  4099                           ; BSR set to: 0
  4100  001944  0012               	return		;funcret
  4101  001946                     __end_of_MSC_DelayNOP:
  4102                           	opt stack 0
  4103                           tblptru	equ	0xFF8
  4104                           tblptrh	equ	0xFF7
  4105                           tblptrl	equ	0xFF6
  4106                           tablat	equ	0xFF5
  4107                           prodh	equ	0xFF4
  4108                           prodl	equ	0xFF3
  4109                           intcon	equ	0xFF2
  4110                           intcon3	equ	0xFF0
  4111                           postinc0	equ	0xFEE
  4112                           wreg	equ	0xFE8
  4113                           postdec1	equ	0xFE5
  4114                           fsr1l	equ	0xFE1
  4115                           status	equ	0xFD8
  4116                           
  4117 ;; *************** function _Init_System *****************
  4118 ;; Defined at:
  4119 ;;		line 153 in file "USER.c"
  4120 ;; Parameters:    Size  Location     Type
  4121 ;;		None
  4122 ;; Auto vars:     Size  Location     Type
  4123 ;;		None
  4124 ;; Return value:  Size  Location     Type
  4125 ;;		None               void
  4126 ;; Registers used:
  4127 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4128 ;; Tracked objects:
  4129 ;;		On entry : 0/0
  4130 ;;		On exit  : F/0
  4131 ;;		Unchanged: 0/0
  4132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4133 ;;      Params:         0       0       0       0       0
  4134 ;;      Locals:         0       0       0       0       0
  4135 ;;      Temps:          0       0       0       0       0
  4136 ;;      Totals:         0       0       0       0       0
  4137 ;;Total ram usage:        0 bytes
  4138 ;; Hardware stack levels used:    1
  4139 ;; Hardware stack levels required when called:   17
  4140 ;; This function calls:
  4141 ;;		_BUT_ReadButton
  4142 ;;		_IR_ReadReceiver
  4143 ;;		_InitADC
  4144 ;;		_InitButton
  4145 ;;		_InitFlash
  4146 ;;		_InitIR
  4147 ;;		_InitLDO
  4148 ;;		_InitMOTOR
  4149 ;;		_InitRF
  4150 ;;		_InitTimers
  4151 ;; This function is called by:
  4152 ;;		_main
  4153 ;; This function uses a non-reentrant model
  4154 ;;
  4155                           
  4156                           	psect	text16
  4157  001548                     __ptext16:
  4158                           	opt stack 0
  4159  001548                     _Init_System:
  4160                           	opt stack 13
  4161                           
  4162                           ;USER.c: 155: InitTimers();
  4163                           
  4164                           ; BSR set to: 0
  4165                           ;incstack = 0
  4166  001548  ECC4  F00D         	call	_InitTimers	;wreg free
  4167                           
  4168                           ; BSR set to: 0
  4169                           ;USER.c: 156: InitRF();
  4170  00154C  ECBD  F00A         	call	_InitRF	;wreg free
  4171                           
  4172                           ; BSR set to: 0
  4173                           ;USER.c: 157: InitButton();
  4174  001550  ECCA  F00D         	call	_InitButton	;wreg free
  4175                           
  4176                           ;USER.c: 158: InitIR();
  4177  001554  ECF3  F00C         	call	_InitIR	;wreg free
  4178                           
  4179                           ; BSR set to: 0
  4180                           ;USER.c: 159: InitLDO();
  4181  001558  ECD4  F00C         	call	_InitLDO	;wreg free
  4182                           
  4183                           ; BSR set to: 0
  4184                           ;USER.c: 160: InitMOTOR();
  4185  00155C  ECED  F00D         	call	_InitMOTOR	;wreg free
  4186                           
  4187                           ;USER.c: 161: InitFlash();
  4188  001560  ECEF  F00D         	call	_InitFlash	;wreg free
  4189                           
  4190                           ;USER.c: 162: InitADC();
  4191  001564  ECAF  F00B         	call	_InitADC	;wreg free
  4192                           
  4193                           ; BSR set to: 0
  4194                           ;USER.c: 164: BUT_ReadButton();
  4195  001568  ECE5  F00B         	call	_BUT_ReadButton	;wreg free
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;USER.c: 165: IR_ReadReceiver();
  4199  00156C  ECF6  F00B         	call	_IR_ReadReceiver	;wreg free
  4200                           
  4201                           ; BSR set to: 0
  4202                           ;USER.c: 166: INTCONbits.RBIF = 0;
  4203  001570  90F2               	bcf	intcon,0,c	;volatile
  4204                           
  4205                           ; BSR set to: 0
  4206                           ;USER.c: 169: RCONbits.IPEN = 1;
  4207  001572  8ED0               	bsf	4048,7,c	;volatile
  4208                           
  4209                           ; BSR set to: 0
  4210                           ;USER.c: 170: INTCONbits.GIE = 1;
  4211  001574  8EF2               	bsf	intcon,7,c	;volatile
  4212                           
  4213                           ; BSR set to: 0
  4214                           ;USER.c: 171: INTCONbits.PEIE = 1;
  4215  001576  8CF2               	bsf	intcon,6,c	;volatile
  4216                           
  4217                           ; BSR set to: 0
  4218  001578  0012               	return		;funcret
  4219  00157A                     __end_of_Init_System:
  4220                           	opt stack 0
  4221                           tblptru	equ	0xFF8
  4222                           tblptrh	equ	0xFF7
  4223                           tblptrl	equ	0xFF6
  4224                           tablat	equ	0xFF5
  4225                           prodh	equ	0xFF4
  4226                           prodl	equ	0xFF3
  4227                           intcon	equ	0xFF2
  4228                           intcon3	equ	0xFF0
  4229                           postinc0	equ	0xFEE
  4230                           wreg	equ	0xFE8
  4231                           postdec1	equ	0xFE5
  4232                           fsr1l	equ	0xFE1
  4233                           status	equ	0xFD8
  4234                           
  4235 ;; *************** function _InitTimers *****************
  4236 ;; Defined at:
  4237 ;;		line 59 in file "TIMERS.c"
  4238 ;; Parameters:    Size  Location     Type
  4239 ;;		None
  4240 ;; Auto vars:     Size  Location     Type
  4241 ;;		None
  4242 ;; Return value:  Size  Location     Type
  4243 ;;		None               void
  4244 ;; Registers used:
  4245 ;;		wreg, status,2, status,0, cstack
  4246 ;; Tracked objects:
  4247 ;;		On entry : 0/0
  4248 ;;		On exit  : F/0
  4249 ;;		Unchanged: 0/0
  4250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4251 ;;      Params:         0       0       0       0       0
  4252 ;;      Locals:         0       0       0       0       0
  4253 ;;      Temps:          0       0       0       0       0
  4254 ;;      Totals:         0       0       0       0       0
  4255 ;;Total ram usage:        0 bytes
  4256 ;; Hardware stack levels used:    1
  4257 ;; Hardware stack levels required when called:   16
  4258 ;; This function calls:
  4259 ;;		_InitTimer0
  4260 ;;		_InitTimer1
  4261 ;;		_InitTimer2
  4262 ;; This function is called by:
  4263 ;;		_Init_System
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           	psect	text17
  4268  001B88                     __ptext17:
  4269                           	opt stack 0
  4270  001B88                     _InitTimers:
  4271                           	opt stack 13
  4272                           
  4273                           ;TIMERS.c: 61: InitTimer0();
  4274                           
  4275                           ; BSR set to: 0
  4276                           ;incstack = 0
  4277  001B88  EC28  F00C         	call	_InitTimer0	;wreg free
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;TIMERS.c: 62: InitTimer1();
  4281  001B8C  ECA3  F00C         	call	_InitTimer1	;wreg free
  4282                           
  4283                           ; BSR set to: 0
  4284                           ;TIMERS.c: 63: InitTimer2();
  4285  001B90  EFB0  F00C         	goto	_InitTimer2	;wreg free
  4286  001B94                     __end_of_InitTimers:
  4287                           	opt stack 0
  4288                           tblptru	equ	0xFF8
  4289                           tblptrh	equ	0xFF7
  4290                           tblptrl	equ	0xFF6
  4291                           tablat	equ	0xFF5
  4292                           prodh	equ	0xFF4
  4293                           prodl	equ	0xFF3
  4294                           intcon	equ	0xFF2
  4295                           intcon3	equ	0xFF0
  4296                           postinc0	equ	0xFEE
  4297                           wreg	equ	0xFE8
  4298                           postdec1	equ	0xFE5
  4299                           fsr1l	equ	0xFE1
  4300                           status	equ	0xFD8
  4301                           
  4302 ;; *************** function _InitTimer2 *****************
  4303 ;; Defined at:
  4304 ;;		line 103 in file "TIMERS.c"
  4305 ;; Parameters:    Size  Location     Type
  4306 ;;		None
  4307 ;; Auto vars:     Size  Location     Type
  4308 ;;		None
  4309 ;; Return value:  Size  Location     Type
  4310 ;;		None               void
  4311 ;; Registers used:
  4312 ;;		wreg, status,2, cstack
  4313 ;; Tracked objects:
  4314 ;;		On entry : F/0
  4315 ;;		On exit  : F/0
  4316 ;;		Unchanged: 0/0
  4317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4318 ;;      Params:         0       0       0       0       0
  4319 ;;      Locals:         0       0       0       0       0
  4320 ;;      Temps:          0       0       0       0       0
  4321 ;;      Totals:         0       0       0       0       0
  4322 ;;Total ram usage:        0 bytes
  4323 ;; Hardware stack levels used:    1
  4324 ;; Hardware stack levels required when called:   13
  4325 ;; This function calls:
  4326 ;;		_TMR_Timer2
  4327 ;;		_TMR_Timer2Int
  4328 ;; This function is called by:
  4329 ;;		_InitTimers
  4330 ;; This function uses a non-reentrant model
  4331 ;;
  4332                           
  4333                           	psect	text18
  4334  001960                     __ptext18:
  4335                           	opt stack 0
  4336  001960                     _InitTimer2:
  4337                           	opt stack 15
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;TIMERS.c: 105: TMR_Timer2(0);
  4341                           
  4342                           ; BSR set to: 0
  4343                           ;incstack = 0
  4344  001960  0E00               	movlw	0
  4345  001962  EC31  F00D         	call	_TMR_Timer2
  4346                           
  4347                           ; BSR set to: 0
  4348                           ;TIMERS.c: 106: T2CONbits.TOUTPS = 0b1111;
  4349  001966  0E78               	movlw	120
  4350  001968  12CA               	iorwf	4042,f,c	;volatile
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;TIMERS.c: 107: T2CONbits.T2CKPS = 0b11;
  4354  00196A  0E03               	movlw	3
  4355  00196C  12CA               	iorwf	4042,f,c	;volatile
  4356                           
  4357                           ; BSR set to: 0
  4358                           ;TIMERS.c: 108: IPR1bits.TMR2IP = 0;
  4359  00196E  929F               	bcf	3999,1,c	;volatile
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;TIMERS.c: 109: PR2 = 0xFF;
  4363  001970  68CB               	setf	4043,c	;volatile
  4364                           
  4365                           ;TIMERS.c: 110: TMR_Timer2Int(1);
  4366  001972  0E01               	movlw	1
  4367  001974  EF29  F00D         	goto	_TMR_Timer2Int
  4368  001978                     __end_of_InitTimer2:
  4369                           	opt stack 0
  4370                           tblptru	equ	0xFF8
  4371                           tblptrh	equ	0xFF7
  4372                           tblptrl	equ	0xFF6
  4373                           tablat	equ	0xFF5
  4374                           prodh	equ	0xFF4
  4375                           prodl	equ	0xFF3
  4376                           intcon	equ	0xFF2
  4377                           intcon3	equ	0xFF0
  4378                           postinc0	equ	0xFEE
  4379                           wreg	equ	0xFE8
  4380                           postdec1	equ	0xFE5
  4381                           fsr1l	equ	0xFE1
  4382                           status	equ	0xFD8
  4383                           
  4384 ;; *************** function _TMR_Timer2Int *****************
  4385 ;; Defined at:
  4386 ;;		line 370 in file "TIMERS.c"
  4387 ;; Parameters:    Size  Location     Type
  4388 ;;  state           1    wreg     unsigned char 
  4389 ;; Auto vars:     Size  Location     Type
  4390 ;;  state           1   53[BANK0 ] unsigned char 
  4391 ;; Return value:  Size  Location     Type
  4392 ;;		None               void
  4393 ;; Registers used:
  4394 ;;		wreg, status,2
  4395 ;; Tracked objects:
  4396 ;;		On entry : F/0
  4397 ;;		On exit  : F/0
  4398 ;;		Unchanged: 0/0
  4399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4400 ;;      Params:         0       0       0       0       0
  4401 ;;      Locals:         0       1       0       0       0
  4402 ;;      Temps:          0       0       0       0       0
  4403 ;;      Totals:         0       1       0       0       0
  4404 ;;Total ram usage:        1 bytes
  4405 ;; Hardware stack levels used:    1
  4406 ;; Hardware stack levels required when called:   12
  4407 ;; This function calls:
  4408 ;;		Nothing
  4409 ;; This function is called by:
  4410 ;;		_InitTimer2
  4411 ;; This function uses a non-reentrant model
  4412 ;;
  4413                           
  4414                           	psect	text19
  4415  001A52                     __ptext19:
  4416                           	opt stack 0
  4417  001A52                     _TMR_Timer2Int:
  4418                           	opt stack 15
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;incstack = 0
  4422                           ;TMR_Timer2Int@state stored from wreg
  4423  001A52  6FB5               	movwf	TMR_Timer2Int@state& (0+255),b
  4424                           
  4425                           ;TIMERS.c: 372: if(state)
  4426  001A54  0100               	movlb	0	; () banked
  4427  001A56  51B5               	movf	TMR_Timer2Int@state& (0+255),w,b
  4428  001A58  E002               	bz	l887
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;TIMERS.c: 373: {
  4432                           ;TIMERS.c: 375: PIE1bits.TMR2IE = 1;
  4433  001A5A  829D               	bsf	3997,1,c	;volatile
  4434                           
  4435                           ;TIMERS.c: 376: }
  4436  001A5C  0012               	return	
  4437  001A5E                     l887:
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;TIMERS.c: 377: else
  4441                           ;TIMERS.c: 378: {
  4442                           ;TIMERS.c: 380: PIE1bits.TMR2IE = 0;
  4443  001A5E  929D               	bcf	3997,1,c	;volatile
  4444                           
  4445                           ; BSR set to: 0
  4446  001A60  0012               	return		;funcret
  4447  001A62                     __end_of_TMR_Timer2Int:
  4448                           	opt stack 0
  4449                           tblptru	equ	0xFF8
  4450                           tblptrh	equ	0xFF7
  4451                           tblptrl	equ	0xFF6
  4452                           tablat	equ	0xFF5
  4453                           prodh	equ	0xFF4
  4454                           prodl	equ	0xFF3
  4455                           intcon	equ	0xFF2
  4456                           intcon3	equ	0xFF0
  4457                           postinc0	equ	0xFEE
  4458                           wreg	equ	0xFE8
  4459                           postdec1	equ	0xFE5
  4460                           fsr1l	equ	0xFE1
  4461                           status	equ	0xFD8
  4462                           
  4463 ;; *************** function _TMR_Timer2 *****************
  4464 ;; Defined at:
  4465 ;;		line 249 in file "TIMERS.c"
  4466 ;; Parameters:    Size  Location     Type
  4467 ;;  state           1    wreg     unsigned char 
  4468 ;; Auto vars:     Size  Location     Type
  4469 ;;  state           1   53[BANK0 ] unsigned char 
  4470 ;; Return value:  Size  Location     Type
  4471 ;;		None               void
  4472 ;; Registers used:
  4473 ;;		wreg, status,2
  4474 ;; Tracked objects:
  4475 ;;		On entry : F/0
  4476 ;;		On exit  : F/0
  4477 ;;		Unchanged: 0/0
  4478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4479 ;;      Params:         0       0       0       0       0
  4480 ;;      Locals:         0       1       0       0       0
  4481 ;;      Temps:          0       0       0       0       0
  4482 ;;      Totals:         0       1       0       0       0
  4483 ;;Total ram usage:        1 bytes
  4484 ;; Hardware stack levels used:    1
  4485 ;; Hardware stack levels required when called:   12
  4486 ;; This function calls:
  4487 ;;		Nothing
  4488 ;; This function is called by:
  4489 ;;		_InitTimer2
  4490 ;; This function uses a non-reentrant model
  4491 ;;
  4492                           
  4493                           	psect	text20
  4494  001A62                     __ptext20:
  4495                           	opt stack 0
  4496  001A62                     _TMR_Timer2:
  4497                           	opt stack 15
  4498                           
  4499                           ; BSR set to: 0
  4500                           ;incstack = 0
  4501                           ;TMR_Timer2@state stored from wreg
  4502  001A62  6FB5               	movwf	TMR_Timer2@state& (0+255),b
  4503                           
  4504                           ;TIMERS.c: 251: if(state)
  4505  001A64  0100               	movlb	0	; () banked
  4506  001A66  51B5               	movf	TMR_Timer2@state& (0+255),w,b
  4507  001A68  E002               	bz	l857
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;TIMERS.c: 252: {
  4511                           ;TIMERS.c: 254: T2CONbits.TMR2ON = 1;
  4512  001A6A  84CA               	bsf	4042,2,c	;volatile
  4513                           
  4514                           ;TIMERS.c: 255: }
  4515  001A6C  0012               	return	
  4516  001A6E                     l857:
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;TIMERS.c: 256: else
  4520                           ;TIMERS.c: 257: {
  4521                           ;TIMERS.c: 259: T2CONbits.TMR2ON = 0;
  4522  001A6E  94CA               	bcf	4042,2,c	;volatile
  4523                           
  4524                           ; BSR set to: 0
  4525  001A70  0012               	return		;funcret
  4526  001A72                     __end_of_TMR_Timer2:
  4527                           	opt stack 0
  4528                           tblptru	equ	0xFF8
  4529                           tblptrh	equ	0xFF7
  4530                           tblptrl	equ	0xFF6
  4531                           tablat	equ	0xFF5
  4532                           prodh	equ	0xFF4
  4533                           prodl	equ	0xFF3
  4534                           intcon	equ	0xFF2
  4535                           intcon3	equ	0xFF0
  4536                           postinc0	equ	0xFEE
  4537                           wreg	equ	0xFE8
  4538                           postdec1	equ	0xFE5
  4539                           fsr1l	equ	0xFE1
  4540                           status	equ	0xFD8
  4541                           
  4542 ;; *************** function _InitTimer1 *****************
  4543 ;; Defined at:
  4544 ;;		line 88 in file "TIMERS.c"
  4545 ;; Parameters:    Size  Location     Type
  4546 ;;		None
  4547 ;; Auto vars:     Size  Location     Type
  4548 ;;		None
  4549 ;; Return value:  Size  Location     Type
  4550 ;;		None               void
  4551 ;; Registers used:
  4552 ;;		wreg, status,2, status,0, cstack
  4553 ;; Tracked objects:
  4554 ;;		On entry : F/0
  4555 ;;		On exit  : F/0
  4556 ;;		Unchanged: 0/0
  4557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4558 ;;      Params:         0       0       0       0       0
  4559 ;;      Locals:         0       0       0       0       0
  4560 ;;      Temps:          0       0       0       0       0
  4561 ;;      Totals:         0       0       0       0       0
  4562 ;;Total ram usage:        0 bytes
  4563 ;; Hardware stack levels used:    1
  4564 ;; Hardware stack levels required when called:   15
  4565 ;; This function calls:
  4566 ;;		_TMR_ResetTimer1
  4567 ;;		_TMR_Timer1
  4568 ;;		_TMR_Timer1Function
  4569 ;;		_TMR_Timer1Int
  4570 ;; This function is called by:
  4571 ;;		_InitTimers
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text21
  4576  001946                     __ptext21:
  4577                           	opt stack 0
  4578  001946                     _InitTimer1:
  4579                           	opt stack 13
  4580                           
  4581                           ; BSR set to: 0
  4582                           ;TIMERS.c: 90: TMR_Timer1(0);
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;incstack = 0
  4586  001946  0E00               	movlw	0
  4587  001948  EC41  F00D         	call	_TMR_Timer1
  4588                           
  4589                           ;TIMERS.c: 91: TMR_ResetTimer1();
  4590  00194C  EC18  F00C         	call	_TMR_ResetTimer1	;wreg free
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;TIMERS.c: 92: T1CONbits.RD16 = 1;
  4594  001950  8ECD               	bsf	4045,7,c	;volatile
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;TIMERS.c: 93: TMR_Timer1Function(16);
  4598  001952  0E10               	movlw	16
  4599  001954  EC36  F00B         	call	_TMR_Timer1Function
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;TIMERS.c: 94: IPR1bits.TMR1IP = 0;
  4603  001958  909F               	bcf	3999,0,c	;volatile
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;TIMERS.c: 95: TMR_Timer1Int(1);
  4607  00195A  0E01               	movlw	1
  4608  00195C  EF39  F00D         	goto	_TMR_Timer1Int
  4609  001960                     __end_of_InitTimer1:
  4610                           	opt stack 0
  4611                           tblptru	equ	0xFF8
  4612                           tblptrh	equ	0xFF7
  4613                           tblptrl	equ	0xFF6
  4614                           tablat	equ	0xFF5
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           intcon	equ	0xFF2
  4618                           intcon3	equ	0xFF0
  4619                           postinc0	equ	0xFEE
  4620                           wreg	equ	0xFE8
  4621                           postdec1	equ	0xFE5
  4622                           fsr1l	equ	0xFE1
  4623                           status	equ	0xFD8
  4624                           
  4625 ;; *************** function _TMR_Timer1Int *****************
  4626 ;; Defined at:
  4627 ;;		line 351 in file "TIMERS.c"
  4628 ;; Parameters:    Size  Location     Type
  4629 ;;  state           1    wreg     unsigned char 
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  state           1   53[BANK0 ] unsigned char 
  4632 ;; Return value:  Size  Location     Type
  4633 ;;		None               void
  4634 ;; Registers used:
  4635 ;;		wreg, status,2
  4636 ;; Tracked objects:
  4637 ;;		On entry : F/0
  4638 ;;		On exit  : F/0
  4639 ;;		Unchanged: 0/0
  4640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4641 ;;      Params:         0       0       0       0       0
  4642 ;;      Locals:         0       1       0       0       0
  4643 ;;      Temps:          0       0       0       0       0
  4644 ;;      Totals:         0       1       0       0       0
  4645 ;;Total ram usage:        1 bytes
  4646 ;; Hardware stack levels used:    1
  4647 ;; Hardware stack levels required when called:   12
  4648 ;; This function calls:
  4649 ;;		Nothing
  4650 ;; This function is called by:
  4651 ;;		_InitTimer1
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text22
  4656  001A72                     __ptext22:
  4657                           	opt stack 0
  4658  001A72                     _TMR_Timer1Int:
  4659                           	opt stack 15
  4660                           
  4661                           ; BSR set to: 0
  4662                           ;incstack = 0
  4663                           ;TMR_Timer1Int@state stored from wreg
  4664  001A72  6FB5               	movwf	TMR_Timer1Int@state& (0+255),b
  4665                           
  4666                           ;TIMERS.c: 353: if(state)
  4667  001A74  0100               	movlb	0	; () banked
  4668  001A76  51B5               	movf	TMR_Timer1Int@state& (0+255),w,b
  4669  001A78  E002               	bz	l882
  4670                           
  4671                           ; BSR set to: 0
  4672                           ;TIMERS.c: 354: {
  4673                           ;TIMERS.c: 356: PIE1bits.TMR1IE = 1;
  4674  001A7A  809D               	bsf	3997,0,c	;volatile
  4675                           
  4676                           ;TIMERS.c: 357: }
  4677  001A7C  0012               	return	
  4678  001A7E                     l882:
  4679                           
  4680                           ; BSR set to: 0
  4681                           ;TIMERS.c: 358: else
  4682                           ;TIMERS.c: 359: {
  4683                           ;TIMERS.c: 361: PIE1bits.TMR1IE = 0;
  4684  001A7E  909D               	bcf	3997,0,c	;volatile
  4685                           
  4686                           ; BSR set to: 0
  4687  001A80  0012               	return		;funcret
  4688  001A82                     __end_of_TMR_Timer1Int:
  4689                           	opt stack 0
  4690                           tblptru	equ	0xFF8
  4691                           tblptrh	equ	0xFF7
  4692                           tblptrl	equ	0xFF6
  4693                           tablat	equ	0xFF5
  4694                           prodh	equ	0xFF4
  4695                           prodl	equ	0xFF3
  4696                           intcon	equ	0xFF2
  4697                           intcon3	equ	0xFF0
  4698                           postinc0	equ	0xFEE
  4699                           wreg	equ	0xFE8
  4700                           postdec1	equ	0xFE5
  4701                           fsr1l	equ	0xFE1
  4702                           status	equ	0xFD8
  4703                           
  4704 ;; *************** function _TMR_Timer1Function *****************
  4705 ;; Defined at:
  4706 ;;		line 157 in file "TIMERS.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  mode            1    wreg     unsigned char 
  4709 ;; Auto vars:     Size  Location     Type
  4710 ;;  mode            1   55[BANK0 ] unsigned char 
  4711 ;; Return value:  Size  Location     Type
  4712 ;;		None               void
  4713 ;; Registers used:
  4714 ;;		wreg, status,2, status,0, cstack
  4715 ;; Tracked objects:
  4716 ;;		On entry : F/0
  4717 ;;		On exit  : F/0
  4718 ;;		Unchanged: 0/0
  4719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4720 ;;      Params:         0       0       0       0       0
  4721 ;;      Locals:         0       1       0       0       0
  4722 ;;      Temps:          0       0       0       0       0
  4723 ;;      Totals:         0       1       0       0       0
  4724 ;;Total ram usage:        1 bytes
  4725 ;; Hardware stack levels used:    1
  4726 ;; Hardware stack levels required when called:   14
  4727 ;; This function calls:
  4728 ;;		_TMR_ResetTimer1
  4729 ;;		_TMR_Timer1
  4730 ;;		_TMR_Timer1Osc
  4731 ;; This function is called by:
  4732 ;;		_InitTimer1
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text23
  4737  00166C                     __ptext23:
  4738                           	opt stack 0
  4739  00166C                     _TMR_Timer1Function:
  4740                           	opt stack 13
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;incstack = 0
  4744                           ;TMR_Timer1Function@mode stored from wreg
  4745  00166C  6FB7               	movwf	TMR_Timer1Function@mode& (0+255),b
  4746                           
  4747                           ;TIMERS.c: 159: TMR_Timer1(0);
  4748  00166E  0E00               	movlw	0
  4749  001670  EC41  F00D         	call	_TMR_Timer1
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;TIMERS.c: 160: if(mode == 15)
  4753  001674  0E0F               	movlw	15
  4754  001676  19B7               	xorwf	TMR_Timer1Function@mode& (0+255),w,b
  4755  001678  E107               	bnz	l4337
  4756                           
  4757                           ; BSR set to: 0
  4758                           ;TIMERS.c: 161: {
  4759                           ;TIMERS.c: 162: T1CONbits.T1CKPS = 0b00;
  4760  00167A  0ECF               	movlw	-49
  4761  00167C  16CD               	andwf	4045,f,c	;volatile
  4762                           
  4763                           ; BSR set to: 0
  4764                           ;TIMERS.c: 163: TMR_Timer1Osc(1);
  4765  00167E  0E01               	movlw	1
  4766  001680  ECBC  F00C         	call	_TMR_Timer1Osc
  4767                           
  4768                           ;TIMERS.c: 164: }
  4769  001684  EF18  F00C         	goto	_TMR_ResetTimer1
  4770  001688                     l4337:
  4771                           
  4772                           ; BSR set to: 0
  4773                           ;TIMERS.c: 165: else
  4774                           ;TIMERS.c: 166: {
  4775                           ;TIMERS.c: 167: T1CONbits.T1CKPS = 0b11;
  4776  001688  0E30               	movlw	48
  4777  00168A  12CD               	iorwf	4045,f,c	;volatile
  4778                           
  4779                           ; BSR set to: 0
  4780                           ;TIMERS.c: 168: TMR_Timer1Osc(0);
  4781  00168C  0E00               	movlw	0
  4782  00168E  ECBC  F00C         	call	_TMR_Timer1Osc
  4783                           
  4784                           ; BSR set to: 0
  4785                           ;TIMERS.c: 169: }
  4786                           ;TIMERS.c: 170: TMR_ResetTimer1();
  4787  001692  EF18  F00C         	goto	_TMR_ResetTimer1	;wreg free
  4788  001696                     __end_of_TMR_Timer1Function:
  4789                           	opt stack 0
  4790                           tblptru	equ	0xFF8
  4791                           tblptrh	equ	0xFF7
  4792                           tblptrl	equ	0xFF6
  4793                           tablat	equ	0xFF5
  4794                           prodh	equ	0xFF4
  4795                           prodl	equ	0xFF3
  4796                           intcon	equ	0xFF2
  4797                           intcon3	equ	0xFF0
  4798                           postinc0	equ	0xFEE
  4799                           wreg	equ	0xFE8
  4800                           postdec1	equ	0xFE5
  4801                           fsr1l	equ	0xFE1
  4802                           status	equ	0xFD8
  4803                           
  4804 ;; *************** function _TMR_Timer1Osc *****************
  4805 ;; Defined at:
  4806 ;;		line 389 in file "TIMERS.c"
  4807 ;; Parameters:    Size  Location     Type
  4808 ;;  state           1    wreg     unsigned char 
  4809 ;; Auto vars:     Size  Location     Type
  4810 ;;  state           1   53[BANK0 ] unsigned char 
  4811 ;; Return value:  Size  Location     Type
  4812 ;;		None               void
  4813 ;; Registers used:
  4814 ;;		wreg, status,2
  4815 ;; Tracked objects:
  4816 ;;		On entry : F/0
  4817 ;;		On exit  : F/0
  4818 ;;		Unchanged: 0/0
  4819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4820 ;;      Params:         0       0       0       0       0
  4821 ;;      Locals:         0       1       0       0       0
  4822 ;;      Temps:          0       0       0       0       0
  4823 ;;      Totals:         0       1       0       0       0
  4824 ;;Total ram usage:        1 bytes
  4825 ;; Hardware stack levels used:    1
  4826 ;; Hardware stack levels required when called:   12
  4827 ;; This function calls:
  4828 ;;		Nothing
  4829 ;; This function is called by:
  4830 ;;		_TMR_Timer1Function
  4831 ;; This function uses a non-reentrant model
  4832 ;;
  4833                           
  4834                           	psect	text24
  4835  001978                     __ptext24:
  4836                           	opt stack 0
  4837  001978                     _TMR_Timer1Osc:
  4838                           	opt stack 14
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;incstack = 0
  4842                           ;TMR_Timer1Osc@state stored from wreg
  4843  001978  6FB5               	movwf	TMR_Timer1Osc@state& (0+255),b
  4844                           
  4845                           ;TIMERS.c: 391: if(state)
  4846  00197A  0100               	movlb	0	; () banked
  4847  00197C  51B5               	movf	TMR_Timer1Osc@state& (0+255),w,b
  4848  00197E  E004               	bz	l892
  4849                           
  4850                           ; BSR set to: 0
  4851                           ;TIMERS.c: 392: {
  4852                           ;TIMERS.c: 393: T1CONbits.T1RUN = 1;
  4853  001980  8CCD               	bsf	4045,6,c	;volatile
  4854                           
  4855                           ;TIMERS.c: 394: T1CONbits.T1OSCEN = 1;
  4856  001982  86CD               	bsf	4045,3,c	;volatile
  4857                           
  4858                           ;TIMERS.c: 395: T1CONbits.TMR1CS = 1;
  4859  001984  82CD               	bsf	4045,1,c	;volatile
  4860                           
  4861                           ;TIMERS.c: 396: }
  4862  001986  0012               	return	
  4863  001988                     l892:
  4864                           
  4865                           ; BSR set to: 0
  4866                           ;TIMERS.c: 397: else
  4867                           ;TIMERS.c: 398: {
  4868                           ;TIMERS.c: 399: T1CONbits.T1RUN = 0;
  4869  001988  9CCD               	bcf	4045,6,c	;volatile
  4870                           
  4871                           ;TIMERS.c: 400: T1CONbits.T1OSCEN = 0;
  4872  00198A  96CD               	bcf	4045,3,c	;volatile
  4873                           
  4874                           ;TIMERS.c: 401: T1CONbits.TMR1CS = 0;
  4875  00198C  92CD               	bcf	4045,1,c	;volatile
  4876                           
  4877                           ; BSR set to: 0
  4878  00198E  0012               	return		;funcret
  4879  001990                     __end_of_TMR_Timer1Osc:
  4880                           	opt stack 0
  4881                           tblptru	equ	0xFF8
  4882                           tblptrh	equ	0xFF7
  4883                           tblptrl	equ	0xFF6
  4884                           tablat	equ	0xFF5
  4885                           prodh	equ	0xFF4
  4886                           prodl	equ	0xFF3
  4887                           intcon	equ	0xFF2
  4888                           intcon3	equ	0xFF0
  4889                           postinc0	equ	0xFEE
  4890                           wreg	equ	0xFE8
  4891                           postdec1	equ	0xFE5
  4892                           fsr1l	equ	0xFE1
  4893                           status	equ	0xFD8
  4894                           
  4895 ;; *************** function _TMR_ResetTimer1 *****************
  4896 ;; Defined at:
  4897 ;;		line 286 in file "TIMERS.c"
  4898 ;; Parameters:    Size  Location     Type
  4899 ;;		None
  4900 ;; Auto vars:     Size  Location     Type
  4901 ;;  TimerOn         1   54[BANK0 ] unsigned char 
  4902 ;; Return value:  Size  Location     Type
  4903 ;;		None               void
  4904 ;; Registers used:
  4905 ;;		wreg, status,2, cstack
  4906 ;; Tracked objects:
  4907 ;;		On entry : F/0
  4908 ;;		On exit  : F/0
  4909 ;;		Unchanged: 0/0
  4910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4911 ;;      Params:         0       0       0       0       0
  4912 ;;      Locals:         0       1       0       0       0
  4913 ;;      Temps:          0       0       0       0       0
  4914 ;;      Totals:         0       1       0       0       0
  4915 ;;Total ram usage:        1 bytes
  4916 ;; Hardware stack levels used:    1
  4917 ;; Hardware stack levels required when called:   13
  4918 ;; This function calls:
  4919 ;;		_TMR_Timer1
  4920 ;; This function is called by:
  4921 ;;		_InitTimer1
  4922 ;;		_TMR_Timer1Function
  4923 ;; This function uses a non-reentrant model
  4924 ;;
  4925                           
  4926                           	psect	text25
  4927  001830                     __ptext25:
  4928                           	opt stack 0
  4929  001830                     _TMR_ResetTimer1:
  4930                           	opt stack 13
  4931                           
  4932                           ; BSR set to: 0
  4933                           ;TIMERS.c: 288: unsigned char TimerOn = T1CONbits.TMR1ON;
  4934                           
  4935                           ; BSR set to: 0
  4936                           ;incstack = 0
  4937  001830  0E00               	movlw	0
  4938  001832  B0CD               	btfsc	4045,0,c	;volatile
  4939  001834  0E01               	movlw	1
  4940  001836  6FB6               	movwf	TMR_ResetTimer1@TimerOn& (0+255),b
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;TIMERS.c: 290: TMR_Timer1(0);
  4944  001838  0E00               	movlw	0
  4945  00183A  EC41  F00D         	call	_TMR_Timer1
  4946                           
  4947                           ; BSR set to: 0
  4948                           ;TIMERS.c: 291: TMR1H = 0;
  4949  00183E  6ACF               	clrf	4047,c	;volatile
  4950                           
  4951                           ; BSR set to: 0
  4952                           ;TIMERS.c: 292: TMR1L = 2;
  4953  001840  0E02               	movlw	2
  4954  001842  6ECE               	movwf	4046,c	;volatile
  4955                           
  4956                           ; BSR set to: 0
  4957                           ;TIMERS.c: 293: if(TimerOn)
  4958  001844  51B6               	movf	TMR_ResetTimer1@TimerOn& (0+255),w,b
  4959  001846  B4D8               	btfsc	status,2,c
  4960  001848  0012               	return	
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;TIMERS.c: 294: {
  4964                           ;TIMERS.c: 295: TMR_Timer1(1);
  4965  00184A  0E01               	movlw	1
  4966  00184C  EF41  F00D         	goto	_TMR_Timer1
  4967  001850                     __end_of_TMR_ResetTimer1:
  4968                           	opt stack 0
  4969                           tblptru	equ	0xFF8
  4970                           tblptrh	equ	0xFF7
  4971                           tblptrl	equ	0xFF6
  4972                           tablat	equ	0xFF5
  4973                           prodh	equ	0xFF4
  4974                           prodl	equ	0xFF3
  4975                           intcon	equ	0xFF2
  4976                           intcon3	equ	0xFF0
  4977                           postinc0	equ	0xFEE
  4978                           wreg	equ	0xFE8
  4979                           postdec1	equ	0xFE5
  4980                           fsr1l	equ	0xFE1
  4981                           status	equ	0xFD8
  4982                           
  4983 ;; *************** function _TMR_Timer1 *****************
  4984 ;; Defined at:
  4985 ;;		line 230 in file "TIMERS.c"
  4986 ;; Parameters:    Size  Location     Type
  4987 ;;  state           1    wreg     unsigned char 
  4988 ;; Auto vars:     Size  Location     Type
  4989 ;;  state           1   53[BANK0 ] unsigned char 
  4990 ;; Return value:  Size  Location     Type
  4991 ;;		None               void
  4992 ;; Registers used:
  4993 ;;		wreg, status,2
  4994 ;; Tracked objects:
  4995 ;;		On entry : 0/0
  4996 ;;		On exit  : F/0
  4997 ;;		Unchanged: 0/0
  4998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4999 ;;      Params:         0       0       0       0       0
  5000 ;;      Locals:         0       1       0       0       0
  5001 ;;      Temps:          0       0       0       0       0
  5002 ;;      Totals:         0       1       0       0       0
  5003 ;;Total ram usage:        1 bytes
  5004 ;; Hardware stack levels used:    1
  5005 ;; Hardware stack levels required when called:   12
  5006 ;; This function calls:
  5007 ;;		Nothing
  5008 ;; This function is called by:
  5009 ;;		_InitTimer1
  5010 ;;		_TMR_Timer1Function
  5011 ;;		_TMR_ResetTimer1
  5012 ;; This function uses a non-reentrant model
  5013 ;;
  5014                           
  5015                           	psect	text26
  5016  001A82                     __ptext26:
  5017                           	opt stack 0
  5018  001A82                     _TMR_Timer1:
  5019                           	opt stack 14
  5020                           
  5021                           ; BSR set to: 0
  5022                           ;incstack = 0
  5023                           ;TMR_Timer1@state stored from wreg
  5024  001A82  0100               	movlb	0	; () banked
  5025  001A84  6FB5               	movwf	TMR_Timer1@state& (0+255),b
  5026                           
  5027                           ;TIMERS.c: 232: if(state)
  5028  001A86  51B5               	movf	TMR_Timer1@state& (0+255),w,b
  5029  001A88  E002               	bz	l852
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;TIMERS.c: 233: {
  5033                           ;TIMERS.c: 235: T1CONbits.TMR1ON = 1;
  5034  001A8A  80CD               	bsf	4045,0,c	;volatile
  5035                           
  5036                           ;TIMERS.c: 236: }
  5037  001A8C  0012               	return	
  5038  001A8E                     l852:
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;TIMERS.c: 237: else
  5042                           ;TIMERS.c: 238: {
  5043                           ;TIMERS.c: 240: T1CONbits.TMR1ON = 0;
  5044  001A8E  90CD               	bcf	4045,0,c	;volatile
  5045                           
  5046                           ; BSR set to: 0
  5047  001A90  0012               	return		;funcret
  5048  001A92                     __end_of_TMR_Timer1:
  5049                           	opt stack 0
  5050                           tblptru	equ	0xFF8
  5051                           tblptrh	equ	0xFF7
  5052                           tblptrl	equ	0xFF6
  5053                           tablat	equ	0xFF5
  5054                           prodh	equ	0xFF4
  5055                           prodl	equ	0xFF3
  5056                           intcon	equ	0xFF2
  5057                           intcon3	equ	0xFF0
  5058                           postinc0	equ	0xFEE
  5059                           wreg	equ	0xFE8
  5060                           postdec1	equ	0xFE5
  5061                           fsr1l	equ	0xFE1
  5062                           status	equ	0xFD8
  5063                           
  5064 ;; *************** function _InitTimer0 *****************
  5065 ;; Defined at:
  5066 ;;		line 71 in file "TIMERS.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;		None
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;		None
  5071 ;; Return value:  Size  Location     Type
  5072 ;;		None               void
  5073 ;; Registers used:
  5074 ;;		wreg, status,2, cstack
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : F/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5080 ;;      Params:         0       0       0       0       0
  5081 ;;      Locals:         0       0       0       0       0
  5082 ;;      Temps:          0       0       0       0       0
  5083 ;;      Totals:         0       0       0       0       0
  5084 ;;Total ram usage:        0 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:   14
  5087 ;; This function calls:
  5088 ;;		_TMR_ResetTimer0
  5089 ;;		_TMR_Timer0
  5090 ;;		_TMR_Timer0Int
  5091 ;; This function is called by:
  5092 ;;		_InitTimers
  5093 ;; This function uses a non-reentrant model
  5094 ;;
  5095                           
  5096                           	psect	text27
  5097  001850                     __ptext27:
  5098                           	opt stack 0
  5099  001850                     _InitTimer0:
  5100                           	opt stack 14
  5101                           
  5102                           ;TIMERS.c: 73: TMR_Timer0(0);
  5103                           
  5104                           ; BSR set to: 0
  5105                           ;incstack = 0
  5106  001850  0E00               	movlw	0
  5107  001852  EC51  F00D         	call	_TMR_Timer0
  5108                           
  5109                           ;TIMERS.c: 74: TMR_ResetTimer0();
  5110  001856  EC38  F00C         	call	_TMR_ResetTimer0	;wreg free
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;TIMERS.c: 75: T0CONbits.T08BIT = 0;
  5114  00185A  9CD5               	bcf	4053,6,c	;volatile
  5115                           
  5116                           ; BSR set to: 0
  5117                           ;TIMERS.c: 76: T0CONbits.T0CS = 0;
  5118  00185C  9AD5               	bcf	4053,5,c	;volatile
  5119                           
  5120                           ; BSR set to: 0
  5121                           ;TIMERS.c: 77: T0CONbits.PSA = 0;
  5122  00185E  96D5               	bcf	4053,3,c	;volatile
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;TIMERS.c: 78: T0CONbits.T0PS = 0b101;
  5126  001860  50D5               	movf	4053,w,c	;volatile
  5127  001862  0BF8               	andlw	-8
  5128  001864  0905               	iorlw	5
  5129  001866  6ED5               	movwf	4053,c	;volatile
  5130                           
  5131                           ; BSR set to: 0
  5132                           ;TIMERS.c: 79: INTCON2bits.TMR0IP = 1;
  5133  001868  84F1               	bsf	intcon2,2,c	;volatile
  5134                           
  5135                           ; BSR set to: 0
  5136                           ;TIMERS.c: 80: TMR_Timer0Int(1);
  5137  00186A  0E01               	movlw	1
  5138  00186C  EF49  F00D         	goto	_TMR_Timer0Int
  5139  001870                     __end_of_InitTimer0:
  5140                           	opt stack 0
  5141                           tblptru	equ	0xFF8
  5142                           tblptrh	equ	0xFF7
  5143                           tblptrl	equ	0xFF6
  5144                           tablat	equ	0xFF5
  5145                           prodh	equ	0xFF4
  5146                           prodl	equ	0xFF3
  5147                           intcon	equ	0xFF2
  5148                           intcon2	equ	0xFF1
  5149                           intcon3	equ	0xFF0
  5150                           postinc0	equ	0xFEE
  5151                           wreg	equ	0xFE8
  5152                           postdec1	equ	0xFE5
  5153                           fsr1l	equ	0xFE1
  5154                           status	equ	0xFD8
  5155                           
  5156 ;; *************** function _TMR_Timer0Int *****************
  5157 ;; Defined at:
  5158 ;;		line 332 in file "TIMERS.c"
  5159 ;; Parameters:    Size  Location     Type
  5160 ;;  state           1    wreg     unsigned char 
  5161 ;; Auto vars:     Size  Location     Type
  5162 ;;  state           1   53[BANK0 ] unsigned char 
  5163 ;; Return value:  Size  Location     Type
  5164 ;;		None               void
  5165 ;; Registers used:
  5166 ;;		wreg, status,2
  5167 ;; Tracked objects:
  5168 ;;		On entry : F/0
  5169 ;;		On exit  : F/0
  5170 ;;		Unchanged: 0/0
  5171 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5172 ;;      Params:         0       0       0       0       0
  5173 ;;      Locals:         0       1       0       0       0
  5174 ;;      Temps:          0       0       0       0       0
  5175 ;;      Totals:         0       1       0       0       0
  5176 ;;Total ram usage:        1 bytes
  5177 ;; Hardware stack levels used:    1
  5178 ;; Hardware stack levels required when called:   12
  5179 ;; This function calls:
  5180 ;;		Nothing
  5181 ;; This function is called by:
  5182 ;;		_RF_Enable
  5183 ;;		_InitTimer0
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           	psect	text28
  5188  001A92                     __ptext28:
  5189                           	opt stack 0
  5190  001A92                     _TMR_Timer0Int:
  5191                           	opt stack 17
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;incstack = 0
  5195                           ;TMR_Timer0Int@state stored from wreg
  5196  001A92  6FB5               	movwf	TMR_Timer0Int@state& (0+255),b
  5197                           
  5198                           ;TIMERS.c: 334: if(state)
  5199  001A94  0100               	movlb	0	; () banked
  5200  001A96  51B5               	movf	TMR_Timer0Int@state& (0+255),w,b
  5201  001A98  E002               	bz	l877
  5202                           
  5203                           ; BSR set to: 0
  5204                           ;TIMERS.c: 335: {
  5205                           ;TIMERS.c: 337: INTCONbits.TMR0IE = 1;
  5206  001A9A  8AF2               	bsf	intcon,5,c	;volatile
  5207                           
  5208                           ;TIMERS.c: 338: }
  5209  001A9C  0012               	return	
  5210  001A9E                     l877:
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;TIMERS.c: 339: else
  5214                           ;TIMERS.c: 340: {
  5215                           ;TIMERS.c: 342: INTCONbits.TMR0IE = 0;
  5216  001A9E  9AF2               	bcf	intcon,5,c	;volatile
  5217                           
  5218                           ; BSR set to: 0
  5219  001AA0  0012               	return		;funcret
  5220  001AA2                     __end_of_TMR_Timer0Int:
  5221                           	opt stack 0
  5222                           tblptru	equ	0xFF8
  5223                           tblptrh	equ	0xFF7
  5224                           tblptrl	equ	0xFF6
  5225                           tablat	equ	0xFF5
  5226                           prodh	equ	0xFF4
  5227                           prodl	equ	0xFF3
  5228                           intcon	equ	0xFF2
  5229                           intcon2	equ	0xFF1
  5230                           intcon3	equ	0xFF0
  5231                           postinc0	equ	0xFEE
  5232                           wreg	equ	0xFE8
  5233                           postdec1	equ	0xFE5
  5234                           fsr1l	equ	0xFE1
  5235                           status	equ	0xFD8
  5236                           
  5237 ;; *************** function _TMR_ResetTimer0 *****************
  5238 ;; Defined at:
  5239 ;;		line 268 in file "TIMERS.c"
  5240 ;; Parameters:    Size  Location     Type
  5241 ;;		None
  5242 ;; Auto vars:     Size  Location     Type
  5243 ;;  TimerOn         1   54[BANK0 ] unsigned char 
  5244 ;; Return value:  Size  Location     Type
  5245 ;;		None               void
  5246 ;; Registers used:
  5247 ;;		wreg, status,2, cstack
  5248 ;; Tracked objects:
  5249 ;;		On entry : F/0
  5250 ;;		On exit  : F/0
  5251 ;;		Unchanged: 0/0
  5252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5253 ;;      Params:         0       0       0       0       0
  5254 ;;      Locals:         0       1       0       0       0
  5255 ;;      Temps:          0       0       0       0       0
  5256 ;;      Totals:         0       1       0       0       0
  5257 ;;Total ram usage:        1 bytes
  5258 ;; Hardware stack levels used:    1
  5259 ;; Hardware stack levels required when called:   13
  5260 ;; This function calls:
  5261 ;;		_TMR_Timer0
  5262 ;; This function is called by:
  5263 ;;		_InitTimer0
  5264 ;; This function uses a non-reentrant model
  5265 ;;
  5266                           
  5267                           	psect	text29
  5268  001870                     __ptext29:
  5269                           	opt stack 0
  5270  001870                     _TMR_ResetTimer0:
  5271                           	opt stack 14
  5272                           
  5273                           ; BSR set to: 0
  5274                           ;TIMERS.c: 270: unsigned char TimerOn = T0CONbits.TMR0ON;
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;incstack = 0
  5278  001870  0E00               	movlw	0
  5279  001872  BED5               	btfsc	4053,7,c	;volatile
  5280  001874  0E01               	movlw	1
  5281  001876  6FB6               	movwf	TMR_ResetTimer0@TimerOn& (0+255),b
  5282                           
  5283                           ; BSR set to: 0
  5284                           ;TIMERS.c: 272: TMR_Timer0(0);
  5285  001878  0E00               	movlw	0
  5286  00187A  EC51  F00D         	call	_TMR_Timer0
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;TIMERS.c: 273: TMR0H = 0;
  5290  00187E  6AD7               	clrf	4055,c	;volatile
  5291                           
  5292                           ; BSR set to: 0
  5293                           ;TIMERS.c: 274: TMR0L = 2;
  5294  001880  0E02               	movlw	2
  5295  001882  6ED6               	movwf	4054,c	;volatile
  5296                           
  5297                           ; BSR set to: 0
  5298                           ;TIMERS.c: 275: if(TimerOn)
  5299  001884  51B6               	movf	TMR_ResetTimer0@TimerOn& (0+255),w,b
  5300  001886  B4D8               	btfsc	status,2,c
  5301  001888  0012               	return	
  5302                           
  5303                           ; BSR set to: 0
  5304                           ;TIMERS.c: 276: {
  5305                           ;TIMERS.c: 277: TMR_Timer0(1);
  5306  00188A  0E01               	movlw	1
  5307  00188C  EF51  F00D         	goto	_TMR_Timer0
  5308  001890                     __end_of_TMR_ResetTimer0:
  5309                           	opt stack 0
  5310                           tblptru	equ	0xFF8
  5311                           tblptrh	equ	0xFF7
  5312                           tblptrl	equ	0xFF6
  5313                           tablat	equ	0xFF5
  5314                           prodh	equ	0xFF4
  5315                           prodl	equ	0xFF3
  5316                           intcon	equ	0xFF2
  5317                           intcon2	equ	0xFF1
  5318                           intcon3	equ	0xFF0
  5319                           postinc0	equ	0xFEE
  5320                           wreg	equ	0xFE8
  5321                           postdec1	equ	0xFE5
  5322                           fsr1l	equ	0xFE1
  5323                           status	equ	0xFD8
  5324                           
  5325 ;; *************** function _TMR_Timer0 *****************
  5326 ;; Defined at:
  5327 ;;		line 211 in file "TIMERS.c"
  5328 ;; Parameters:    Size  Location     Type
  5329 ;;  state           1    wreg     unsigned char 
  5330 ;; Auto vars:     Size  Location     Type
  5331 ;;  state           1   53[BANK0 ] unsigned char 
  5332 ;; Return value:  Size  Location     Type
  5333 ;;		None               void
  5334 ;; Registers used:
  5335 ;;		wreg, status,2
  5336 ;; Tracked objects:
  5337 ;;		On entry : 0/0
  5338 ;;		On exit  : F/0
  5339 ;;		Unchanged: 0/0
  5340 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5341 ;;      Params:         0       0       0       0       0
  5342 ;;      Locals:         0       1       0       0       0
  5343 ;;      Temps:          0       0       0       0       0
  5344 ;;      Totals:         0       1       0       0       0
  5345 ;;Total ram usage:        1 bytes
  5346 ;; Hardware stack levels used:    1
  5347 ;; Hardware stack levels required when called:   12
  5348 ;; This function calls:
  5349 ;;		Nothing
  5350 ;; This function is called by:
  5351 ;;		_InitTimer0
  5352 ;;		_TMR_ResetTimer0
  5353 ;; This function uses a non-reentrant model
  5354 ;;
  5355                           
  5356                           	psect	text30
  5357  001AA2                     __ptext30:
  5358                           	opt stack 0
  5359  001AA2                     _TMR_Timer0:
  5360                           	opt stack 15
  5361                           
  5362                           ; BSR set to: 0
  5363                           ;incstack = 0
  5364                           ;TMR_Timer0@state stored from wreg
  5365  001AA2  0100               	movlb	0	; () banked
  5366  001AA4  6FB5               	movwf	TMR_Timer0@state& (0+255),b
  5367                           
  5368                           ;TIMERS.c: 213: if(state)
  5369  001AA6  51B5               	movf	TMR_Timer0@state& (0+255),w,b
  5370  001AA8  E002               	bz	l847
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;TIMERS.c: 214: {
  5374                           ;TIMERS.c: 216: T0CONbits.TMR0ON = 1;
  5375  001AAA  8ED5               	bsf	4053,7,c	;volatile
  5376                           
  5377                           ;TIMERS.c: 217: }
  5378  001AAC  0012               	return	
  5379  001AAE                     l847:
  5380                           
  5381                           ; BSR set to: 0
  5382                           ;TIMERS.c: 218: else
  5383                           ;TIMERS.c: 219: {
  5384                           ;TIMERS.c: 221: T0CONbits.TMR0ON = 0;
  5385  001AAE  9ED5               	bcf	4053,7,c	;volatile
  5386                           
  5387                           ; BSR set to: 0
  5388  001AB0  0012               	return		;funcret
  5389  001AB2                     __end_of_TMR_Timer0:
  5390                           	opt stack 0
  5391                           tblptru	equ	0xFF8
  5392                           tblptrh	equ	0xFF7
  5393                           tblptrl	equ	0xFF6
  5394                           tablat	equ	0xFF5
  5395                           prodh	equ	0xFF4
  5396                           prodl	equ	0xFF3
  5397                           intcon	equ	0xFF2
  5398                           intcon2	equ	0xFF1
  5399                           intcon3	equ	0xFF0
  5400                           postinc0	equ	0xFEE
  5401                           wreg	equ	0xFE8
  5402                           postdec1	equ	0xFE5
  5403                           fsr1l	equ	0xFE1
  5404                           status	equ	0xFD8
  5405                           
  5406 ;; *************** function _InitRF *****************
  5407 ;; Defined at:
  5408 ;;		line 68 in file "RF.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;		None
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;		None
  5413 ;; Return value:  Size  Location     Type
  5414 ;;		None               void
  5415 ;; Registers used:
  5416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5417 ;; Tracked objects:
  5418 ;;		On entry : F/0
  5419 ;;		On exit  : F/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5422 ;;      Params:         0       0       0       0       0
  5423 ;;      Locals:         0       0       0       0       0
  5424 ;;      Temps:          0       0       0       0       0
  5425 ;;      Totals:         0       0       0       0       0
  5426 ;;Total ram usage:        0 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; Hardware stack levels required when called:   13
  5429 ;; This function calls:
  5430 ;;		_MSC_CleanBufferInt
  5431 ;;		_RF_DataInt
  5432 ;;		_RF_Receiver
  5433 ;;		_RF_SetBandwidth
  5434 ;;		_RF_SetSquelch
  5435 ;; This function is called by:
  5436 ;;		_Init_System
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text31
  5441  00157A                     __ptext31:
  5442                           	opt stack 0
  5443  00157A                     _InitRF:
  5444                           	opt stack 16
  5445                           
  5446                           ; BSR set to: 0
  5447                           ;RF.c: 71: RF_Receiver(1);
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;incstack = 0
  5451  00157A  0E01               	movlw	1
  5452  00157C  EC61  F00D         	call	_RF_Receiver
  5453                           
  5454                           ;RF.c: 72: RF_SetBandwidth(2);
  5455  001580  0E02               	movlw	2
  5456  001582  EC4B  F00B         	call	_RF_SetBandwidth
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;RF.c: 73: MSC_CleanBufferInt(&RF_DataTiming,64);
  5460  001586  0E07               	movlw	low _RF_DataTiming
  5461  001588  6FB5               	movwf	MSC_CleanBufferInt@data& (0+255),b
  5462  00158A  0E01               	movlw	high _RF_DataTiming
  5463  00158C  6FB6               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  5464  00158E  6BB8               	clrf	(MSC_CleanBufferInt@count+1)& (0+255),b
  5465  001590  0E40               	movlw	64
  5466  001592  6FB7               	movwf	MSC_CleanBufferInt@count& (0+255),b
  5467  001594  ECD6  F00A         	call	_MSC_CleanBufferInt	;wreg free
  5468                           
  5469                           ; BSR set to: 0
  5470                           ;RF.c: 74: RF_SetSquelch(0);
  5471  001598  0E00               	movlw	0
  5472  00159A  EC59  F00D         	call	_RF_SetSquelch
  5473                           
  5474                           ; BSR set to: 0
  5475                           ;RF.c: 75: INTCON3bits.INT1P = 1;
  5476  00159E  8CF0               	bsf	intcon3,6,c	;volatile
  5477                           
  5478                           ; BSR set to: 0
  5479                           ;RF.c: 76: INTCON3bits.INT2P = 1;
  5480  0015A0  8EF0               	bsf	intcon3,7,c	;volatile
  5481                           
  5482                           ; BSR set to: 0
  5483                           ;RF.c: 77: INTCON2bits.INTEDG1 = 1;
  5484  0015A2  8AF1               	bsf	intcon2,5,c	;volatile
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;RF.c: 78: INTCON2bits.INTEDG2 = 0;
  5488  0015A4  98F1               	bcf	intcon2,4,c	;volatile
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;RF.c: 79: RF_DataInt(1);
  5492  0015A6  0E01               	movlw	1
  5493  0015A8  EFDF  F00C         	goto	_RF_DataInt
  5494  0015AC                     __end_of_InitRF:
  5495                           	opt stack 0
  5496                           tblptru	equ	0xFF8
  5497                           tblptrh	equ	0xFF7
  5498                           tblptrl	equ	0xFF6
  5499                           tablat	equ	0xFF5
  5500                           prodh	equ	0xFF4
  5501                           prodl	equ	0xFF3
  5502                           intcon	equ	0xFF2
  5503                           intcon2	equ	0xFF1
  5504                           intcon3	equ	0xFF0
  5505                           postinc0	equ	0xFEE
  5506                           wreg	equ	0xFE8
  5507                           postdec1	equ	0xFE5
  5508                           fsr1l	equ	0xFE1
  5509                           status	equ	0xFD8
  5510                           
  5511 ;; *************** function _RF_SetSquelch *****************
  5512 ;; Defined at:
  5513 ;;		line 334 in file "RF.c"
  5514 ;; Parameters:    Size  Location     Type
  5515 ;;  state           1    wreg     unsigned char 
  5516 ;; Auto vars:     Size  Location     Type
  5517 ;;  state           1   53[BANK0 ] unsigned char 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;		None               void
  5520 ;; Registers used:
  5521 ;;		wreg, status,2, status,0
  5522 ;; Tracked objects:
  5523 ;;		On entry : F/0
  5524 ;;		On exit  : F/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5527 ;;      Params:         0       0       0       0       0
  5528 ;;      Locals:         0       1       0       0       0
  5529 ;;      Temps:          0       0       0       0       0
  5530 ;;      Totals:         0       1       0       0       0
  5531 ;;Total ram usage:        1 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:   12
  5534 ;; This function calls:
  5535 ;;		Nothing
  5536 ;; This function is called by:
  5537 ;;		_InitRF
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           	psect	text32
  5542  001AB2                     __ptext32:
  5543                           	opt stack 0
  5544  001AB2                     _RF_SetSquelch:
  5545                           	opt stack 16
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;incstack = 0
  5549                           ;RF_SetSquelch@state stored from wreg
  5550  001AB2  6FB5               	movwf	RF_SetSquelch@state& (0+255),b
  5551                           
  5552                           ;RF.c: 336: if(!state)
  5553  001AB4  0100               	movlb	0	; () banked
  5554  001AB6  51B5               	movf	RF_SetSquelch@state& (0+255),w,b
  5555  001AB8  E102               	bnz	l4529
  5556                           
  5557                           ; BSR set to: 0
  5558                           ;RF.c: 337: {
  5559                           ;RF.c: 339: LATA |= 0x20;
  5560  001ABA  8A89               	bsf	3977,5,c	;volatile
  5561                           
  5562                           ;RF.c: 340: }
  5563  001ABC  0012               	return	
  5564  001ABE                     l4529:
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;RF.c: 341: else
  5568                           ;RF.c: 342: {
  5569                           ;RF.c: 344: LATA &= ~0x20;
  5570  001ABE  9A89               	bcf	3977,5,c	;volatile
  5571                           
  5572                           ; BSR set to: 0
  5573  001AC0  0012               	return		;funcret
  5574  001AC2                     __end_of_RF_SetSquelch:
  5575                           	opt stack 0
  5576                           tblptru	equ	0xFF8
  5577                           tblptrh	equ	0xFF7
  5578                           tblptrl	equ	0xFF6
  5579                           tablat	equ	0xFF5
  5580                           prodh	equ	0xFF4
  5581                           prodl	equ	0xFF3
  5582                           intcon	equ	0xFF2
  5583                           intcon2	equ	0xFF1
  5584                           intcon3	equ	0xFF0
  5585                           postinc0	equ	0xFEE
  5586                           wreg	equ	0xFE8
  5587                           postdec1	equ	0xFE5
  5588                           fsr1l	equ	0xFE1
  5589                           status	equ	0xFD8
  5590                           
  5591 ;; *************** function _RF_SetBandwidth *****************
  5592 ;; Defined at:
  5593 ;;		line 300 in file "RF.c"
  5594 ;; Parameters:    Size  Location     Type
  5595 ;;  band            1    wreg     unsigned char 
  5596 ;; Auto vars:     Size  Location     Type
  5597 ;;  band            1   53[BANK0 ] unsigned char 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;		None               void
  5600 ;; Registers used:
  5601 ;;		wreg, status,2, status,0
  5602 ;; Tracked objects:
  5603 ;;		On entry : F/0
  5604 ;;		On exit  : F/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5607 ;;      Params:         0       0       0       0       0
  5608 ;;      Locals:         0       1       0       0       0
  5609 ;;      Temps:          0       0       0       0       0
  5610 ;;      Totals:         0       1       0       0       0
  5611 ;;Total ram usage:        1 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:   12
  5614 ;; This function calls:
  5615 ;;		Nothing
  5616 ;; This function is called by:
  5617 ;;		_InitRF
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           	psect	text33
  5622  001696                     __ptext33:
  5623                           	opt stack 0
  5624  001696                     _RF_SetBandwidth:
  5625                           	opt stack 16
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;incstack = 0
  5629                           ;RF_SetBandwidth@band stored from wreg
  5630  001696  6FB5               	movwf	RF_SetBandwidth@band& (0+255),b
  5631                           
  5632                           ;RF.c: 302: if(band == 0)
  5633  001698  0100               	movlb	0	; () banked
  5634  00169A  51B5               	movf	RF_SetBandwidth@band& (0+255),w,b
  5635  00169C  E103               	bnz	l4507
  5636                           
  5637                           ; BSR set to: 0
  5638                           ;RF.c: 303: {
  5639                           ;RF.c: 305: LATC &= ~0x40;
  5640  00169E  9C8B               	bcf	3979,6,c	;volatile
  5641                           
  5642                           ;RF.c: 306: LATC &= ~0x80;
  5643  0016A0  9E8B               	bcf	3979,7,c	;volatile
  5644                           
  5645                           ;RF.c: 307: }
  5646  0016A2  0012               	return	
  5647  0016A4                     l4507:
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;RF.c: 308: else if(band == 1)
  5651  0016A4  05B5               	decf	RF_SetBandwidth@band& (0+255),w,b
  5652  0016A6  E103               	bnz	l4511
  5653                           
  5654                           ; BSR set to: 0
  5655                           ;RF.c: 309: {
  5656                           ;RF.c: 311: LATC |= 0x40;
  5657  0016A8  8C8B               	bsf	3979,6,c	;volatile
  5658                           
  5659                           ;RF.c: 312: LATC &= ~0x80;
  5660  0016AA  9E8B               	bcf	3979,7,c	;volatile
  5661                           
  5662                           ;RF.c: 313: }
  5663  0016AC  0012               	return	
  5664  0016AE                     l4511:
  5665                           
  5666                           ; BSR set to: 0
  5667                           ;RF.c: 314: else if(band == 2)
  5668  0016AE  0E02               	movlw	2
  5669  0016B0  19B5               	xorwf	RF_SetBandwidth@band& (0+255),w,b
  5670  0016B2  E103               	bnz	l4515
  5671                           
  5672                           ; BSR set to: 0
  5673                           ;RF.c: 315: {
  5674                           ;RF.c: 317: LATC &= ~0x40;
  5675  0016B4  9C8B               	bcf	3979,6,c	;volatile
  5676                           
  5677                           ;RF.c: 318: LATC |= 0x80;
  5678  0016B6  8E8B               	bsf	3979,7,c	;volatile
  5679                           
  5680                           ;RF.c: 319: }
  5681  0016B8  0012               	return	
  5682  0016BA                     l4515:
  5683                           
  5684                           ; BSR set to: 0
  5685                           ;RF.c: 320: else
  5686                           ;RF.c: 321: {
  5687                           ;RF.c: 323: LATC |= 0x40;
  5688  0016BA  8C8B               	bsf	3979,6,c	;volatile
  5689                           
  5690                           ;RF.c: 324: LATC |= 0x80;
  5691  0016BC  8E8B               	bsf	3979,7,c	;volatile
  5692                           
  5693                           ; BSR set to: 0
  5694  0016BE  0012               	return		;funcret
  5695  0016C0                     __end_of_RF_SetBandwidth:
  5696                           	opt stack 0
  5697                           tblptru	equ	0xFF8
  5698                           tblptrh	equ	0xFF7
  5699                           tblptrl	equ	0xFF6
  5700                           tablat	equ	0xFF5
  5701                           prodh	equ	0xFF4
  5702                           prodl	equ	0xFF3
  5703                           intcon	equ	0xFF2
  5704                           intcon2	equ	0xFF1
  5705                           intcon3	equ	0xFF0
  5706                           postinc0	equ	0xFEE
  5707                           wreg	equ	0xFE8
  5708                           postdec1	equ	0xFE5
  5709                           fsr1l	equ	0xFE1
  5710                           status	equ	0xFD8
  5711                           
  5712 ;; *************** function _RF_Receiver *****************
  5713 ;; Defined at:
  5714 ;;		line 281 in file "RF.c"
  5715 ;; Parameters:    Size  Location     Type
  5716 ;;  state           1    wreg     unsigned char 
  5717 ;; Auto vars:     Size  Location     Type
  5718 ;;  state           1   53[BANK0 ] unsigned char 
  5719 ;; Return value:  Size  Location     Type
  5720 ;;		None               void
  5721 ;; Registers used:
  5722 ;;		wreg, status,2, status,0
  5723 ;; Tracked objects:
  5724 ;;		On entry : F/0
  5725 ;;		On exit  : F/0
  5726 ;;		Unchanged: 0/0
  5727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5728 ;;      Params:         0       0       0       0       0
  5729 ;;      Locals:         0       1       0       0       0
  5730 ;;      Temps:          0       0       0       0       0
  5731 ;;      Totals:         0       1       0       0       0
  5732 ;;Total ram usage:        1 bytes
  5733 ;; Hardware stack levels used:    1
  5734 ;; Hardware stack levels required when called:   12
  5735 ;; This function calls:
  5736 ;;		Nothing
  5737 ;; This function is called by:
  5738 ;;		_InitRF
  5739 ;; This function uses a non-reentrant model
  5740 ;;
  5741                           
  5742                           	psect	text34
  5743  001AC2                     __ptext34:
  5744                           	opt stack 0
  5745  001AC2                     _RF_Receiver:
  5746                           	opt stack 16
  5747                           
  5748                           ; BSR set to: 0
  5749                           ;incstack = 0
  5750                           ;RF_Receiver@state stored from wreg
  5751  001AC2  6FB5               	movwf	RF_Receiver@state& (0+255),b
  5752                           
  5753                           ;RF.c: 283: if(!state)
  5754  001AC4  0100               	movlb	0	; () banked
  5755  001AC6  51B5               	movf	RF_Receiver@state& (0+255),w,b
  5756  001AC8  E102               	bnz	l4501
  5757                           
  5758                           ; BSR set to: 0
  5759                           ;RF.c: 284: {
  5760                           ;RF.c: 286: LATA |= 0x04;
  5761  001ACA  8489               	bsf	3977,2,c	;volatile
  5762                           
  5763                           ;RF.c: 287: }
  5764  001ACC  0012               	return	
  5765  001ACE                     l4501:
  5766                           
  5767                           ; BSR set to: 0
  5768                           ;RF.c: 288: else
  5769                           ;RF.c: 289: {
  5770                           ;RF.c: 291: LATA &= ~0x04;
  5771  001ACE  9489               	bcf	3977,2,c	;volatile
  5772                           
  5773                           ; BSR set to: 0
  5774  001AD0  0012               	return		;funcret
  5775  001AD2                     __end_of_RF_Receiver:
  5776                           	opt stack 0
  5777                           tblptru	equ	0xFF8
  5778                           tblptrh	equ	0xFF7
  5779                           tblptrl	equ	0xFF6
  5780                           tablat	equ	0xFF5
  5781                           prodh	equ	0xFF4
  5782                           prodl	equ	0xFF3
  5783                           intcon	equ	0xFF2
  5784                           intcon2	equ	0xFF1
  5785                           intcon3	equ	0xFF0
  5786                           postinc0	equ	0xFEE
  5787                           wreg	equ	0xFE8
  5788                           postdec1	equ	0xFE5
  5789                           fsr1l	equ	0xFE1
  5790                           status	equ	0xFD8
  5791                           
  5792 ;; *************** function _RF_DataInt *****************
  5793 ;; Defined at:
  5794 ;;		line 254 in file "RF.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;  state           1    wreg     unsigned char 
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;  state           1   53[BANK0 ] unsigned char 
  5799 ;; Return value:  Size  Location     Type
  5800 ;;		None               void
  5801 ;; Registers used:
  5802 ;;		wreg, status,2
  5803 ;; Tracked objects:
  5804 ;;		On entry : E/0
  5805 ;;		On exit  : F/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5808 ;;      Params:         0       0       0       0       0
  5809 ;;      Locals:         0       1       0       0       0
  5810 ;;      Temps:          0       0       0       0       0
  5811 ;;      Totals:         0       1       0       0       0
  5812 ;;Total ram usage:        1 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:   12
  5815 ;; This function calls:
  5816 ;;		Nothing
  5817 ;; This function is called by:
  5818 ;;		_SYS_EnableInt
  5819 ;;		_InitRF
  5820 ;;		_RF_Enable
  5821 ;; This function uses a non-reentrant model
  5822 ;;
  5823                           
  5824                           	psect	text35
  5825  0019BE                     __ptext35:
  5826                           	opt stack 0
  5827  0019BE                     _RF_DataInt:
  5828                           	opt stack 17
  5829                           
  5830                           ; BSR set to: 0
  5831                           ;incstack = 0
  5832                           ;RF_DataInt@state stored from wreg
  5833  0019BE  0100               	movlb	0	; () banked
  5834  0019C0  6FB5               	movwf	RF_DataInt@state& (0+255),b
  5835                           
  5836                           ;RF.c: 257: if(state)
  5837  0019C2  51B5               	movf	RF_DataInt@state& (0+255),w,b
  5838  0019C4  E003               	bz	l473
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;RF.c: 258: {
  5842                           ;RF.c: 260: INTCON3bits.INT1E = 1;
  5843  0019C6  86F0               	bsf	intcon3,3,c	;volatile
  5844                           
  5845                           ;RF.c: 261: INTCON3bits.INT2E = 1;
  5846  0019C8  88F0               	bsf	intcon3,4,c	;volatile
  5847                           
  5848                           ;RF.c: 262: }
  5849  0019CA  0012               	return	
  5850  0019CC                     l473:
  5851                           
  5852                           ; BSR set to: 0
  5853                           ;RF.c: 263: else
  5854                           ;RF.c: 264: {
  5855                           ;RF.c: 266: INTCON3bits.INT1E = 0;
  5856  0019CC  96F0               	bcf	intcon3,3,c	;volatile
  5857                           
  5858                           ;RF.c: 267: INTCON3bits.INT2E = 0;
  5859  0019CE  98F0               	bcf	intcon3,4,c	;volatile
  5860                           
  5861                           ; BSR set to: 0
  5862  0019D0  0012               	return		;funcret
  5863  0019D2                     __end_of_RF_DataInt:
  5864                           	opt stack 0
  5865                           tblptru	equ	0xFF8
  5866                           tblptrh	equ	0xFF7
  5867                           tblptrl	equ	0xFF6
  5868                           tablat	equ	0xFF5
  5869                           prodh	equ	0xFF4
  5870                           prodl	equ	0xFF3
  5871                           intcon	equ	0xFF2
  5872                           intcon2	equ	0xFF1
  5873                           intcon3	equ	0xFF0
  5874                           postinc0	equ	0xFEE
  5875                           wreg	equ	0xFE8
  5876                           postdec1	equ	0xFE5
  5877                           fsr1l	equ	0xFE1
  5878                           status	equ	0xFD8
  5879                           
  5880 ;; *************** function _InitMOTOR *****************
  5881 ;; Defined at:
  5882 ;;		line 92 in file "MOTOR.c"
  5883 ;; Parameters:    Size  Location     Type
  5884 ;;		None
  5885 ;; Auto vars:     Size  Location     Type
  5886 ;;		None
  5887 ;; Return value:  Size  Location     Type
  5888 ;;		None               void
  5889 ;; Registers used:
  5890 ;;		None
  5891 ;; Tracked objects:
  5892 ;;		On entry : F/0
  5893 ;;		On exit  : 0/0
  5894 ;;		Unchanged: 0/0
  5895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5896 ;;      Params:         0       0       0       0       0
  5897 ;;      Locals:         0       0       0       0       0
  5898 ;;      Temps:          0       0       0       0       0
  5899 ;;      Totals:         0       0       0       0       0
  5900 ;;Total ram usage:        0 bytes
  5901 ;; Hardware stack levels used:    1
  5902 ;; Hardware stack levels required when called:   12
  5903 ;; This function calls:
  5904 ;;		Nothing
  5905 ;; This function is called by:
  5906 ;;		_Init_System
  5907 ;; This function uses a non-reentrant model
  5908 ;;
  5909                           
  5910                           	psect	text36
  5911  001BDA                     __ptext36:
  5912                           	opt stack 0
  5913  001BDA                     _InitMOTOR:
  5914                           	opt stack 17
  5915                           
  5916                           ; BSR set to: 0
  5917                           ;MOTOR.c: 95: __nop();
  5918                           
  5919                           ; BSR set to: 0
  5920                           ;incstack = 0
  5921  001BDA  F000               	nop	
  5922  001BDC  0012               	return		;funcret
  5923  001BDE                     __end_of_InitMOTOR:
  5924                           	opt stack 0
  5925                           tblptru	equ	0xFF8
  5926                           tblptrh	equ	0xFF7
  5927                           tblptrl	equ	0xFF6
  5928                           tablat	equ	0xFF5
  5929                           prodh	equ	0xFF4
  5930                           prodl	equ	0xFF3
  5931                           intcon	equ	0xFF2
  5932                           intcon2	equ	0xFF1
  5933                           intcon3	equ	0xFF0
  5934                           postinc0	equ	0xFEE
  5935                           wreg	equ	0xFE8
  5936                           postdec1	equ	0xFE5
  5937                           fsr1l	equ	0xFE1
  5938                           status	equ	0xFD8
  5939                           
  5940 ;; *************** function _InitLDO *****************
  5941 ;; Defined at:
  5942 ;;		line 75 in file "LDO.c"
  5943 ;; Parameters:    Size  Location     Type
  5944 ;;		None
  5945 ;; Auto vars:     Size  Location     Type
  5946 ;;		None
  5947 ;; Return value:  Size  Location     Type
  5948 ;;		None               void
  5949 ;; Registers used:
  5950 ;;		wreg, status,2, status,0, cstack
  5951 ;; Tracked objects:
  5952 ;;		On entry : F/0
  5953 ;;		On exit  : F/0
  5954 ;;		Unchanged: 0/0
  5955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5956 ;;      Params:         0       0       0       0       0
  5957 ;;      Locals:         0       0       0       0       0
  5958 ;;      Temps:          0       0       0       0       0
  5959 ;;      Totals:         0       0       0       0       0
  5960 ;;Total ram usage:        0 bytes
  5961 ;; Hardware stack levels used:    1
  5962 ;; Hardware stack levels required when called:   13
  5963 ;; This function calls:
  5964 ;;		_LDO_Pass
  5965 ;; This function is called by:
  5966 ;;		_Init_System
  5967 ;; This function uses a non-reentrant model
  5968 ;;
  5969                           
  5970                           	psect	text37
  5971  0019A8                     __ptext37:
  5972                           	opt stack 0
  5973  0019A8                     _InitLDO:
  5974                           	opt stack 16
  5975                           
  5976                           ; BSR set to: 0
  5977                           ;LDO.c: 77: LDO_Pass(0);
  5978                           
  5979                           ;incstack = 0
  5980  0019A8  0E00               	movlw	0
  5981  0019AA                     i13L__ptext38:
  5982                           	opt stack 0
  5983  0019AA                     i13L_LDO_Pass:
  5984                           	opt stack 16
  5985                           
  5986                           ; BSR set to: 0
  5987                           ;incstack = 0
  5988                           ;LDO_Pass@state stored from wreg
  5989  0019AA  6FB5               	movwf	LDO_Pass@state& (0+255),b
  5990  0019AC                     i13Ll4531:
  5991                           	opt stack 16
  5992                           
  5993                           ;LDO.c: 54: if(state)
  5994  0019AC  0100               	movlb	0	; () banked
  5995  0019AE  51B5               	movf	LDO_Pass@state& (0+255),w,b
  5996  0019B0  B4D8               	btfsc	status,2,c
  5997  0019B2                     i13Lu4081:
  5998                           	opt stack 0
  5999  0019B2  D003               	goto	i13Ll649
  6000  0019B4                     i13Lu4080:
  6001                           	opt stack 0
  6002  0019B4                     i13Ll4533:
  6003                           	opt stack 16
  6004                           
  6005                           ; BSR set to: 0
  6006                           ;LDO.c: 55: {
  6007                           ;LDO.c: 57: TRISCbits.TRISC5 = 0;
  6008  0019B4  9A94               	bcf	3988,5,c	;volatile
  6009  0019B6                     i13Ll4535:
  6010                           	opt stack 16
  6011                           
  6012                           ; BSR set to: 0
  6013                           ;LDO.c: 58: LATC &= ~0x20;
  6014  0019B6  9A8B               	bcf	3979,5,c	;volatile
  6015  0019B8  0012               	return	
  6016  0019BA                     i13Ll649:
  6017                           	opt stack 16
  6018                           
  6019                           ; BSR set to: 0
  6020                           ;LDO.c: 60: else
  6021                           ;LDO.c: 61: {
  6022                           ;LDO.c: 63: TRISCbits.TRISC5 = 1;
  6023  0019BA  8A94               	bsf	3988,5,c	;volatile
  6024  0019BC                     i13Ll651:
  6025                           	opt stack 0
  6026  0019BC  0012               	return	
  6027  0019BE                     __end_of_InitLDO:
  6028                           	opt stack 0
  6029                           tblptru	equ	0xFF8
  6030                           tblptrh	equ	0xFF7
  6031                           tblptrl	equ	0xFF6
  6032                           tablat	equ	0xFF5
  6033                           prodh	equ	0xFF4
  6034                           prodl	equ	0xFF3
  6035                           intcon	equ	0xFF2
  6036                           intcon2	equ	0xFF1
  6037                           intcon3	equ	0xFF0
  6038                           postinc0	equ	0xFEE
  6039                           wreg	equ	0xFE8
  6040                           postdec1	equ	0xFE5
  6041                           fsr1l	equ	0xFE1
  6042                           status	equ	0xFD8
  6043                           
  6044 ;; *************** function _LDO_Pass *****************
  6045 ;; Defined at:
  6046 ;;		line 52 in file "LDO.c"
  6047 ;; Parameters:    Size  Location     Type
  6048 ;;  state           1    wreg     unsigned char 
  6049 ;; Auto vars:     Size  Location     Type
  6050 ;;  state           1   53[BANK0 ] unsigned char 
  6051 ;; Return value:  Size  Location     Type
  6052 ;;		None               void
  6053 ;; Registers used:
  6054 ;;		wreg, status,2, status,0
  6055 ;; Tracked objects:
  6056 ;;		On entry : F/0
  6057 ;;		On exit  : F/0
  6058 ;;		Unchanged: 0/0
  6059 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6060 ;;      Params:         0       0       0       0       0
  6061 ;;      Locals:         0       1       0       0       0
  6062 ;;      Temps:          0       0       0       0       0
  6063 ;;      Totals:         0       1       0       0       0
  6064 ;;Total ram usage:        1 bytes
  6065 ;; Hardware stack levels used:    1
  6066 ;; Hardware stack levels required when called:   12
  6067 ;; This function calls:
  6068 ;;		Nothing
  6069 ;; This function is called by:
  6070 ;;		_InitLDO
  6071 ;; This function uses a non-reentrant model
  6072 ;;
  6073                           
  6074                           	psect	text38
  6075  000000                     __ptext38:
  6076                           	opt stack 0
  6077  000000                     _LDO_Pass:
  6078                           	opt stack 0
  6079  000000                     __end_of_LDO_Pass:
  6080                           	opt stack 0
  6081                           tblptru	equ	0xFF8
  6082                           tblptrh	equ	0xFF7
  6083                           tblptrl	equ	0xFF6
  6084                           tablat	equ	0xFF5
  6085                           prodh	equ	0xFF4
  6086                           prodl	equ	0xFF3
  6087                           intcon	equ	0xFF2
  6088                           intcon2	equ	0xFF1
  6089                           intcon3	equ	0xFF0
  6090                           postinc0	equ	0xFEE
  6091                           wreg	equ	0xFE8
  6092                           postdec1	equ	0xFE5
  6093                           fsr1l	equ	0xFE1
  6094                           status	equ	0xFD8
  6095                           
  6096 ;; *************** function _InitIR *****************
  6097 ;; Defined at:
  6098 ;;		line 72 in file "IR.c"
  6099 ;; Parameters:    Size  Location     Type
  6100 ;;		None
  6101 ;; Auto vars:     Size  Location     Type
  6102 ;;		None
  6103 ;; Return value:  Size  Location     Type
  6104 ;;		None               void
  6105 ;; Registers used:
  6106 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6107 ;; Tracked objects:
  6108 ;;		On entry : F/0
  6109 ;;		On exit  : F/0
  6110 ;;		Unchanged: 0/0
  6111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6112 ;;      Params:         0       0       0       0       0
  6113 ;;      Locals:         0       0       0       0       0
  6114 ;;      Temps:          0       0       0       0       0
  6115 ;;      Totals:         0       0       0       0       0
  6116 ;;Total ram usage:        0 bytes
  6117 ;; Hardware stack levels used:    1
  6118 ;; Hardware stack levels required when called:   13
  6119 ;; This function calls:
  6120 ;;		_MSC_CleanBufferInt
  6121 ;; This function is called by:
  6122 ;;		_Init_System
  6123 ;; This function uses a non-reentrant model
  6124 ;;
  6125                           
  6126                           	psect	text39
  6127  0019E6                     __ptext39:
  6128                           	opt stack 0
  6129  0019E6                     _InitIR:
  6130                           	opt stack 16
  6131                           
  6132                           ; BSR set to: 0
  6133                           ;IR.c: 74: MSC_CleanBufferInt(&IR_DataTiming,96);
  6134                           
  6135                           ; BSR set to: 0
  6136                           ;incstack = 0
  6137  0019E6  0E00               	movlw	low _IR_DataTiming
  6138  0019E8  6FB5               	movwf	MSC_CleanBufferInt@data& (0+255),b
  6139  0019EA  0E02               	movlw	high _IR_DataTiming
  6140  0019EC  6FB6               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  6141  0019EE  6BB8               	clrf	(MSC_CleanBufferInt@count+1)& (0+255),b
  6142  0019F0  0E60               	movlw	96
  6143  0019F2  6FB7               	movwf	MSC_CleanBufferInt@count& (0+255),b
  6144  0019F4  EFD6  F00A         	goto	_MSC_CleanBufferInt	;wreg free
  6145  0019F8                     __end_of_InitIR:
  6146                           	opt stack 0
  6147                           tblptru	equ	0xFF8
  6148                           tblptrh	equ	0xFF7
  6149                           tblptrl	equ	0xFF6
  6150                           tablat	equ	0xFF5
  6151                           prodh	equ	0xFF4
  6152                           prodl	equ	0xFF3
  6153                           intcon	equ	0xFF2
  6154                           intcon2	equ	0xFF1
  6155                           intcon3	equ	0xFF0
  6156                           postinc0	equ	0xFEE
  6157                           wreg	equ	0xFE8
  6158                           postdec1	equ	0xFE5
  6159                           fsr1l	equ	0xFE1
  6160                           status	equ	0xFD8
  6161                           
  6162 ;; *************** function _MSC_CleanBufferInt *****************
  6163 ;; Defined at:
  6164 ;;		line 90 in file "MISC.c"
  6165 ;; Parameters:    Size  Location     Type
  6166 ;;  data            2   53[BANK0 ] PTR unsigned int 
  6167 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
  6168 ;;  count           2   55[BANK0 ] unsigned int 
  6169 ;; Auto vars:     Size  Location     Type
  6170 ;;  i               2   57[BANK0 ] unsigned int 
  6171 ;; Return value:  Size  Location     Type
  6172 ;;		None               void
  6173 ;; Registers used:
  6174 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6175 ;; Tracked objects:
  6176 ;;		On entry : F/0
  6177 ;;		On exit  : F/0
  6178 ;;		Unchanged: 0/0
  6179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6180 ;;      Params:         0       4       0       0       0
  6181 ;;      Locals:         0       2       0       0       0
  6182 ;;      Temps:          0       0       0       0       0
  6183 ;;      Totals:         0       6       0       0       0
  6184 ;;Total ram usage:        6 bytes
  6185 ;; Hardware stack levels used:    1
  6186 ;; Hardware stack levels required when called:   12
  6187 ;; This function calls:
  6188 ;;		Nothing
  6189 ;; This function is called by:
  6190 ;;		_InitRF
  6191 ;;		_InitIR
  6192 ;; This function uses a non-reentrant model
  6193 ;;
  6194                           
  6195                           	psect	text40
  6196  0015AC                     __ptext40:
  6197                           	opt stack 0
  6198  0015AC                     _MSC_CleanBufferInt:
  6199                           	opt stack 16
  6200                           
  6201                           ; BSR set to: 0
  6202                           ;MISC.c: 92: unsigned int i=0;
  6203                           
  6204                           ; BSR set to: 0
  6205                           ;incstack = 0
  6206  0015AC  6BB9               	clrf	MSC_CleanBufferInt@i& (0+255),b
  6207  0015AE  6BBA               	clrf	(MSC_CleanBufferInt@i+1)& (0+255),b
  6208                           
  6209                           ;MISC.c: 93: for(i=0; i<count;i++)
  6210  0015B0  6BB9               	clrf	MSC_CleanBufferInt@i& (0+255),b
  6211  0015B2  6BBA               	clrf	(MSC_CleanBufferInt@i+1)& (0+255),b
  6212  0015B4  D00D               	goto	l4523
  6213  0015B6                     l4519:
  6214                           
  6215                           ; BSR set to: 0
  6216                           ;MISC.c: 94: {
  6217                           ;MISC.c: 95: data[i]= 0;
  6218  0015B6  90D8               	bcf	status,0,c
  6219  0015B8  35B9               	rlcf	MSC_CleanBufferInt@i& (0+255),w,b
  6220  0015BA  6ED9               	movwf	fsr2l,c
  6221  0015BC  35BA               	rlcf	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  6222  0015BE  6EDA               	movwf	fsr2h,c
  6223  0015C0  51B5               	movf	MSC_CleanBufferInt@data& (0+255),w,b
  6224  0015C2  26D9               	addwf	fsr2l,f,c
  6225  0015C4  51B6               	movf	(MSC_CleanBufferInt@data+1)& (0+255),w,b
  6226  0015C6  22DA               	addwfc	fsr2h,f,c
  6227  0015C8  6ADE               	clrf	postinc2,c
  6228  0015CA  6ADD               	clrf	postdec2,c
  6229                           
  6230                           ; BSR set to: 0
  6231  0015CC  4BB9               	infsnz	MSC_CleanBufferInt@i& (0+255),f,b
  6232  0015CE  2BBA               	incf	(MSC_CleanBufferInt@i+1)& (0+255),f,b
  6233  0015D0                     l4523:
  6234                           
  6235                           ; BSR set to: 0
  6236  0015D0  51B7               	movf	MSC_CleanBufferInt@count& (0+255),w,b
  6237  0015D2  5DB9               	subwf	MSC_CleanBufferInt@i& (0+255),w,b
  6238  0015D4  51B8               	movf	(MSC_CleanBufferInt@count+1)& (0+255),w,b
  6239  0015D6  59BA               	subwfb	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  6240  0015D8  E3EE               	bnc	l4519
  6241                           
  6242                           ; BSR set to: 0
  6243  0015DA  0012               	return		;funcret
  6244  0015DC                     __end_of_MSC_CleanBufferInt:
  6245                           	opt stack 0
  6246                           tblptru	equ	0xFF8
  6247                           tblptrh	equ	0xFF7
  6248                           tblptrl	equ	0xFF6
  6249                           tablat	equ	0xFF5
  6250                           prodh	equ	0xFF4
  6251                           prodl	equ	0xFF3
  6252                           intcon	equ	0xFF2
  6253                           intcon2	equ	0xFF1
  6254                           intcon3	equ	0xFF0
  6255                           postinc0	equ	0xFEE
  6256                           wreg	equ	0xFE8
  6257                           postdec1	equ	0xFE5
  6258                           fsr1l	equ	0xFE1
  6259                           postinc2	equ	0xFDE
  6260                           postdec2	equ	0xFDD
  6261                           fsr2h	equ	0xFDA
  6262                           fsr2l	equ	0xFD9
  6263                           status	equ	0xFD8
  6264                           
  6265 ;; *************** function _InitFlash *****************
  6266 ;; Defined at:
  6267 ;;		line 60 in file "FLASH.c"
  6268 ;; Parameters:    Size  Location     Type
  6269 ;;		None
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;		None
  6272 ;; Return value:  Size  Location     Type
  6273 ;;		None               void
  6274 ;; Registers used:
  6275 ;;		None
  6276 ;; Tracked objects:
  6277 ;;		On entry : 0/0
  6278 ;;		On exit  : 0/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6281 ;;      Params:         0       0       0       0       0
  6282 ;;      Locals:         0       0       0       0       0
  6283 ;;      Temps:          0       0       0       0       0
  6284 ;;      Totals:         0       0       0       0       0
  6285 ;;Total ram usage:        0 bytes
  6286 ;; Hardware stack levels used:    1
  6287 ;; Hardware stack levels required when called:   12
  6288 ;; This function calls:
  6289 ;;		Nothing
  6290 ;; This function is called by:
  6291 ;;		_Init_System
  6292 ;; This function uses a non-reentrant model
  6293 ;;
  6294                           
  6295                           	psect	text41
  6296  001BDE                     __ptext41:
  6297                           	opt stack 0
  6298  001BDE                     _InitFlash:
  6299                           	opt stack 17
  6300                           
  6301                           ;FLASH.c: 63: __nop();
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;incstack = 0
  6305  001BDE  F000               	nop	
  6306  001BE0  0012               	return		;funcret
  6307  001BE2                     __end_of_InitFlash:
  6308                           	opt stack 0
  6309                           tblptru	equ	0xFF8
  6310                           tblptrh	equ	0xFF7
  6311                           tblptrl	equ	0xFF6
  6312                           tablat	equ	0xFF5
  6313                           prodh	equ	0xFF4
  6314                           prodl	equ	0xFF3
  6315                           intcon	equ	0xFF2
  6316                           intcon2	equ	0xFF1
  6317                           intcon3	equ	0xFF0
  6318                           postinc0	equ	0xFEE
  6319                           wreg	equ	0xFE8
  6320                           postdec1	equ	0xFE5
  6321                           fsr1l	equ	0xFE1
  6322                           postinc2	equ	0xFDE
  6323                           postdec2	equ	0xFDD
  6324                           fsr2h	equ	0xFDA
  6325                           fsr2l	equ	0xFD9
  6326                           status	equ	0xFD8
  6327                           
  6328 ;; *************** function _InitButton *****************
  6329 ;; Defined at:
  6330 ;;		line 59 in file "BUTTON.c"
  6331 ;; Parameters:    Size  Location     Type
  6332 ;;		None
  6333 ;; Auto vars:     Size  Location     Type
  6334 ;;		None
  6335 ;; Return value:  Size  Location     Type
  6336 ;;		None               void
  6337 ;; Registers used:
  6338 ;;		wreg, status,2, status,0, cstack
  6339 ;; Tracked objects:
  6340 ;;		On entry : F/0
  6341 ;;		On exit  : F/0
  6342 ;;		Unchanged: 0/0
  6343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6344 ;;      Params:         0       0       0       0       0
  6345 ;;      Locals:         0       0       0       0       0
  6346 ;;      Temps:          0       0       0       0       0
  6347 ;;      Totals:         0       0       0       0       0
  6348 ;;Total ram usage:        0 bytes
  6349 ;; Hardware stack levels used:    1
  6350 ;; Hardware stack levels required when called:   13
  6351 ;; This function calls:
  6352 ;;		_BUT_IR_PinChangeInt
  6353 ;;		_BUT_ReadButton
  6354 ;; This function is called by:
  6355 ;;		_Init_System
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           	psect	text42
  6360  001B94                     __ptext42:
  6361                           	opt stack 0
  6362  001B94                     _InitButton:
  6363                           	opt stack 16
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;BUTTON.c: 62: INTCON2bits.RBIP = 0;
  6367                           
  6368                           ;incstack = 0
  6369  001B94  90F1               	bcf	intcon2,0,c	;volatile
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;BUTTON.c: 63: BUT_ReadButton();
  6373  001B96  ECE5  F00B         	call	_BUT_ReadButton	;wreg free
  6374                           
  6375                           ; BSR set to: 0
  6376                           ;BUTTON.c: 64: BUT_IR_PinChangeInt(1);
  6377  001B9A  0E01               	movlw	1
  6378  001B9C  EF69  F00D         	goto	_BUT_IR_PinChangeInt
  6379  001BA0                     __end_of_InitButton:
  6380                           	opt stack 0
  6381                           tblptru	equ	0xFF8
  6382                           tblptrh	equ	0xFF7
  6383                           tblptrl	equ	0xFF6
  6384                           tablat	equ	0xFF5
  6385                           prodh	equ	0xFF4
  6386                           prodl	equ	0xFF3
  6387                           intcon	equ	0xFF2
  6388                           intcon2	equ	0xFF1
  6389                           intcon3	equ	0xFF0
  6390                           postinc0	equ	0xFEE
  6391                           wreg	equ	0xFE8
  6392                           postdec1	equ	0xFE5
  6393                           fsr1l	equ	0xFE1
  6394                           postinc2	equ	0xFDE
  6395                           postdec2	equ	0xFDD
  6396                           fsr2h	equ	0xFDA
  6397                           fsr2l	equ	0xFD9
  6398                           status	equ	0xFD8
  6399                           
  6400 ;; *************** function _BUT_ReadButton *****************
  6401 ;; Defined at:
  6402 ;;		line 73 in file "BUTTON.c"
  6403 ;; Parameters:    Size  Location     Type
  6404 ;;		None
  6405 ;; Auto vars:     Size  Location     Type
  6406 ;;  value           1   53[BANK0 ] unsigned char 
  6407 ;; Return value:  Size  Location     Type
  6408 ;;                  1    wreg      unsigned char 
  6409 ;; Registers used:
  6410 ;;		wreg, status,2, status,0
  6411 ;; Tracked objects:
  6412 ;;		On entry : F/0
  6413 ;;		On exit  : F/0
  6414 ;;		Unchanged: 0/0
  6415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6416 ;;      Params:         0       0       0       0       0
  6417 ;;      Locals:         0       1       0       0       0
  6418 ;;      Temps:          0       0       0       0       0
  6419 ;;      Totals:         0       1       0       0       0
  6420 ;;Total ram usage:        1 bytes
  6421 ;; Hardware stack levels used:    1
  6422 ;; Hardware stack levels required when called:   12
  6423 ;; This function calls:
  6424 ;;		Nothing
  6425 ;; This function is called by:
  6426 ;;		_Init_System
  6427 ;;		_InitButton
  6428 ;; This function uses a non-reentrant model
  6429 ;;
  6430                           
  6431                           	psect	text43
  6432  0017CA                     __ptext43:
  6433                           	opt stack 0
  6434  0017CA                     _BUT_ReadButton:
  6435                           	opt stack 16
  6436                           
  6437                           ; BSR set to: 0
  6438                           ;BUTTON.c: 75: unsigned char value = PORTB;
  6439                           
  6440                           ; BSR set to: 0
  6441                           ;incstack = 0
  6442  0017CA  CF81 F0B5          	movff	3969,BUT_ReadButton@value	;volatile
  6443                           
  6444                           ;BUTTON.c: 76: if((value & 0x20) == 0)
  6445  0017CE  BBB5               	btfsc	BUT_ReadButton@value& (0+255),5,b
  6446  0017D0  D007               	goto	l4475
  6447                           
  6448                           ; BSR set to: 0
  6449                           ;BUTTON.c: 77: {
  6450                           ;BUTTON.c: 79: if(ButtonValue_prev == 0)
  6451  0017D2  51C4               	movf	_ButtonValue_prev& (0+255),w,b
  6452  0017D4  E102               	bnz	l743
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;BUTTON.c: 80: {
  6456                           ;BUTTON.c: 81: ButtonChange = 1;
  6457  0017D6  0E01               	movlw	1
  6458  0017D8  6E66               	movwf	_ButtonChange,c
  6459  0017DA                     l743:
  6460                           
  6461                           ; BSR set to: 0
  6462                           ;BUTTON.c: 82: }
  6463                           ;BUTTON.c: 83: ButtonValue_prev = 1;
  6464  0017DA  0E01               	movlw	1
  6465  0017DC  6FC4               	movwf	_ButtonValue_prev& (0+255),b
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;BUTTON.c: 84: return 1;
  6469  0017DE  0C01               	retlw	1
  6470  0017E0                     l4475:
  6471                           
  6472                           ; BSR set to: 0
  6473                           ;BUTTON.c: 85: }
  6474                           ;BUTTON.c: 88: if(ButtonValue_prev == 1)
  6475  0017E0  05C4               	decf	_ButtonValue_prev& (0+255),w,b
  6476  0017E2  E102               	bnz	l4479
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;BUTTON.c: 89: {
  6480                           ;BUTTON.c: 90: ButtonChange = 1;
  6481  0017E4  0E01               	movlw	1
  6482  0017E6  6E66               	movwf	_ButtonChange,c
  6483  0017E8                     l4479:
  6484                           
  6485                           ; BSR set to: 0
  6486                           ;BUTTON.c: 91: }
  6487                           ;BUTTON.c: 92: ButtonValue_prev = 0;
  6488  0017E8  6BC4               	clrf	_ButtonValue_prev& (0+255),b
  6489                           
  6490                           ; BSR set to: 0
  6491                           
  6492                           ; BSR set to: 0
  6493                           ;BUTTON.c: 93: return 0;
  6494  0017EA  0C00               	retlw	0	;funcret
  6495  0017EC                     __end_of_BUT_ReadButton:
  6496                           	opt stack 0
  6497                           tblptru	equ	0xFF8
  6498                           tblptrh	equ	0xFF7
  6499                           tblptrl	equ	0xFF6
  6500                           tablat	equ	0xFF5
  6501                           prodh	equ	0xFF4
  6502                           prodl	equ	0xFF3
  6503                           intcon	equ	0xFF2
  6504                           intcon2	equ	0xFF1
  6505                           intcon3	equ	0xFF0
  6506                           postinc0	equ	0xFEE
  6507                           wreg	equ	0xFE8
  6508                           postdec1	equ	0xFE5
  6509                           fsr1l	equ	0xFE1
  6510                           postinc2	equ	0xFDE
  6511                           postdec2	equ	0xFDD
  6512                           fsr2h	equ	0xFDA
  6513                           fsr2l	equ	0xFD9
  6514                           status	equ	0xFD8
  6515                           
  6516 ;; *************** function _BUT_IR_PinChangeInt *****************
  6517 ;; Defined at:
  6518 ;;		line 101 in file "BUTTON.c"
  6519 ;; Parameters:    Size  Location     Type
  6520 ;;  state           1    wreg     unsigned char 
  6521 ;; Auto vars:     Size  Location     Type
  6522 ;;  state           1   53[BANK0 ] unsigned char 
  6523 ;; Return value:  Size  Location     Type
  6524 ;;		None               void
  6525 ;; Registers used:
  6526 ;;		wreg, status,2
  6527 ;; Tracked objects:
  6528 ;;		On entry : E/1
  6529 ;;		On exit  : F/0
  6530 ;;		Unchanged: 0/0
  6531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6532 ;;      Params:         0       0       0       0       0
  6533 ;;      Locals:         0       1       0       0       0
  6534 ;;      Temps:          0       0       0       0       0
  6535 ;;      Totals:         0       1       0       0       0
  6536 ;;Total ram usage:        1 bytes
  6537 ;; Hardware stack levels used:    1
  6538 ;; Hardware stack levels required when called:   12
  6539 ;; This function calls:
  6540 ;;		Nothing
  6541 ;; This function is called by:
  6542 ;;		_SYS_EnableInt
  6543 ;;		_InitButton
  6544 ;; This function uses a non-reentrant model
  6545 ;;
  6546                           
  6547                           	psect	text44
  6548  001AD2                     __ptext44:
  6549                           	opt stack 0
  6550  001AD2                     _BUT_IR_PinChangeInt:
  6551                           	opt stack 17
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;incstack = 0
  6555                           ;BUT_IR_PinChangeInt@state stored from wreg
  6556  001AD2  0100               	movlb	0	; () banked
  6557  001AD4  6FB5               	movwf	BUT_IR_PinChangeInt@state& (0+255),b
  6558                           
  6559                           ;BUTTON.c: 103: if(state)
  6560  001AD6  51B5               	movf	BUT_IR_PinChangeInt@state& (0+255),w,b
  6561  001AD8  E002               	bz	l748
  6562                           
  6563                           ; BSR set to: 0
  6564                           ;BUTTON.c: 104: {
  6565                           ;BUTTON.c: 106: INTCONbits.RBIE = 1;
  6566  001ADA  86F2               	bsf	intcon,3,c	;volatile
  6567                           
  6568                           ;BUTTON.c: 107: }
  6569  001ADC  0012               	return	
  6570  001ADE                     l748:
  6571                           
  6572                           ; BSR set to: 0
  6573                           ;BUTTON.c: 108: else
  6574                           ;BUTTON.c: 109: {
  6575                           ;BUTTON.c: 111: INTCONbits.RBIE = 0;
  6576  001ADE  96F2               	bcf	intcon,3,c	;volatile
  6577                           
  6578                           ; BSR set to: 0
  6579  001AE0  0012               	return		;funcret
  6580  001AE2                     __end_of_BUT_IR_PinChangeInt:
  6581                           	opt stack 0
  6582                           tblptru	equ	0xFF8
  6583                           tblptrh	equ	0xFF7
  6584                           tblptrl	equ	0xFF6
  6585                           tablat	equ	0xFF5
  6586                           prodh	equ	0xFF4
  6587                           prodl	equ	0xFF3
  6588                           intcon	equ	0xFF2
  6589                           intcon2	equ	0xFF1
  6590                           intcon3	equ	0xFF0
  6591                           postinc0	equ	0xFEE
  6592                           wreg	equ	0xFE8
  6593                           postdec1	equ	0xFE5
  6594                           fsr1l	equ	0xFE1
  6595                           postinc2	equ	0xFDE
  6596                           postdec2	equ	0xFDD
  6597                           fsr2h	equ	0xFDA
  6598                           fsr2l	equ	0xFD9
  6599                           status	equ	0xFD8
  6600                           
  6601 ;; *************** function _InitADC *****************
  6602 ;; Defined at:
  6603 ;;		line 61 in file "ADC.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;		None
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;		None
  6608 ;; Return value:  Size  Location     Type
  6609 ;;		None               void
  6610 ;; Registers used:
  6611 ;;		wreg, status,2, status,0, cstack
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : F/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6617 ;;      Params:         0       0       0       0       0
  6618 ;;      Locals:         0       0       0       0       0
  6619 ;;      Temps:          0       0       0       0       0
  6620 ;;      Totals:         0       0       0       0       0
  6621 ;;Total ram usage:        0 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; Hardware stack levels required when called:   13
  6624 ;; This function calls:
  6625 ;;		_ADC_ChangeChannel
  6626 ;;		_ADC_ConversionInt
  6627 ;;		_ADC_Module
  6628 ;; This function is called by:
  6629 ;;		_Init_System
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           	psect	text45
  6634  00175E                     __ptext45:
  6635                           	opt stack 0
  6636  00175E                     _InitADC:
  6637                           	opt stack 16
  6638                           
  6639                           ;ADC.c: 63: ADCON1bits.VCFG1 = 0;
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;incstack = 0
  6643  00175E  9AC1               	bcf	4033,5,c	;volatile
  6644                           
  6645                           ;ADC.c: 64: ADCON1bits.VCFG0 = 0;
  6646  001760  98C1               	bcf	4033,4,c	;volatile
  6647                           
  6648                           ;ADC.c: 65: ADCON2bits.ADFM = 1;
  6649  001762  8EC0               	bsf	4032,7,c	;volatile
  6650                           
  6651                           ;ADC.c: 66: ADCON2bits.ACQT = 0b111;
  6652  001764  0E38               	movlw	56
  6653  001766  12C0               	iorwf	4032,f,c	;volatile
  6654                           
  6655                           ;ADC.c: 67: ADCON2bits.ADCS = 0b110;
  6656  001768  50C0               	movf	4032,w,c	;volatile
  6657  00176A  0BF8               	andlw	-8
  6658  00176C  0906               	iorlw	6
  6659  00176E  6EC0               	movwf	4032,c	;volatile
  6660                           
  6661                           ;ADC.c: 68: IPR1bits.ADIP = 0;
  6662  001770  9C9F               	bcf	3999,6,c	;volatile
  6663                           
  6664                           ;ADC.c: 69: ADC_ChangeChannel();
  6665  001772  EC78  F00C         	call	_ADC_ChangeChannel	;wreg free
  6666                           
  6667                           ;ADC.c: 70: ADC_ConversionInt(1);
  6668  001776  0E01               	movlw	1
  6669  001778  EC79  F00D         	call	_ADC_ConversionInt
  6670                           
  6671                           ; BSR set to: 0
  6672                           ;ADC.c: 71: ADC_Module(1);
  6673  00177C  0E01               	movlw	1
  6674  00177E  EF71  F00D         	goto	_ADC_Module
  6675  001782                     __end_of_InitADC:
  6676                           	opt stack 0
  6677                           tblptru	equ	0xFF8
  6678                           tblptrh	equ	0xFF7
  6679                           tblptrl	equ	0xFF6
  6680                           tablat	equ	0xFF5
  6681                           prodh	equ	0xFF4
  6682                           prodl	equ	0xFF3
  6683                           intcon	equ	0xFF2
  6684                           intcon2	equ	0xFF1
  6685                           intcon3	equ	0xFF0
  6686                           postinc0	equ	0xFEE
  6687                           wreg	equ	0xFE8
  6688                           postdec1	equ	0xFE5
  6689                           fsr1l	equ	0xFE1
  6690                           postinc2	equ	0xFDE
  6691                           postdec2	equ	0xFDD
  6692                           fsr2h	equ	0xFDA
  6693                           fsr2l	equ	0xFD9
  6694                           status	equ	0xFD8
  6695                           
  6696 ;; *************** function _ADC_Module *****************
  6697 ;; Defined at:
  6698 ;;		line 126 in file "ADC.c"
  6699 ;; Parameters:    Size  Location     Type
  6700 ;;  state           1    wreg     unsigned char 
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;  state           1   53[BANK0 ] unsigned char 
  6703 ;; Return value:  Size  Location     Type
  6704 ;;		None               void
  6705 ;; Registers used:
  6706 ;;		wreg, status,2
  6707 ;; Tracked objects:
  6708 ;;		On entry : F/0
  6709 ;;		On exit  : F/0
  6710 ;;		Unchanged: 0/0
  6711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6712 ;;      Params:         0       0       0       0       0
  6713 ;;      Locals:         0       1       0       0       0
  6714 ;;      Temps:          0       0       0       0       0
  6715 ;;      Totals:         0       1       0       0       0
  6716 ;;Total ram usage:        1 bytes
  6717 ;; Hardware stack levels used:    1
  6718 ;; Hardware stack levels required when called:   12
  6719 ;; This function calls:
  6720 ;;		Nothing
  6721 ;; This function is called by:
  6722 ;;		_InitADC
  6723 ;; This function uses a non-reentrant model
  6724 ;;
  6725                           
  6726                           	psect	text46
  6727  001AE2                     __ptext46:
  6728                           	opt stack 0
  6729  001AE2                     _ADC_Module:
  6730                           	opt stack 16
  6731                           
  6732                           ; BSR set to: 0
  6733                           ;incstack = 0
  6734                           ;ADC_Module@state stored from wreg
  6735  001AE2  6FB5               	movwf	ADC_Module@state& (0+255),b
  6736                           
  6737                           ;ADC.c: 128: if(state)
  6738  001AE4  0100               	movlb	0	; () banked
  6739  001AE6  51B5               	movf	ADC_Module@state& (0+255),w,b
  6740  001AE8  E002               	bz	l1091
  6741                           
  6742                           ; BSR set to: 0
  6743                           ;ADC.c: 129: {
  6744                           ;ADC.c: 131: ADCON0bits.ADON = 1;
  6745  001AEA  80C2               	bsf	4034,0,c	;volatile
  6746                           
  6747                           ;ADC.c: 132: }
  6748  001AEC  0012               	return	
  6749  001AEE                     l1091:
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;ADC.c: 133: else
  6753                           ;ADC.c: 134: {
  6754                           ;ADC.c: 136: ADCON0bits.ADON = 0;
  6755  001AEE  90C2               	bcf	4034,0,c	;volatile
  6756                           
  6757                           ; BSR set to: 0
  6758  001AF0  0012               	return		;funcret
  6759  001AF2                     __end_of_ADC_Module:
  6760                           	opt stack 0
  6761                           tblptru	equ	0xFF8
  6762                           tblptrh	equ	0xFF7
  6763                           tblptrl	equ	0xFF6
  6764                           tablat	equ	0xFF5
  6765                           prodh	equ	0xFF4
  6766                           prodl	equ	0xFF3
  6767                           intcon	equ	0xFF2
  6768                           intcon2	equ	0xFF1
  6769                           intcon3	equ	0xFF0
  6770                           postinc0	equ	0xFEE
  6771                           wreg	equ	0xFE8
  6772                           postdec1	equ	0xFE5
  6773                           fsr1l	equ	0xFE1
  6774                           postinc2	equ	0xFDE
  6775                           postdec2	equ	0xFDD
  6776                           fsr2h	equ	0xFDA
  6777                           fsr2l	equ	0xFD9
  6778                           status	equ	0xFD8
  6779                           
  6780 ;; *************** function _ADC_ConversionInt *****************
  6781 ;; Defined at:
  6782 ;;		line 169 in file "ADC.c"
  6783 ;; Parameters:    Size  Location     Type
  6784 ;;  state           1    wreg     unsigned char 
  6785 ;; Auto vars:     Size  Location     Type
  6786 ;;  state           1   53[BANK0 ] unsigned char 
  6787 ;; Return value:  Size  Location     Type
  6788 ;;		None               void
  6789 ;; Registers used:
  6790 ;;		wreg, status,2
  6791 ;; Tracked objects:
  6792 ;;		On entry : 0/0
  6793 ;;		On exit  : F/0
  6794 ;;		Unchanged: 0/0
  6795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6796 ;;      Params:         0       0       0       0       0
  6797 ;;      Locals:         0       1       0       0       0
  6798 ;;      Temps:          0       0       0       0       0
  6799 ;;      Totals:         0       1       0       0       0
  6800 ;;Total ram usage:        1 bytes
  6801 ;; Hardware stack levels used:    1
  6802 ;; Hardware stack levels required when called:   12
  6803 ;; This function calls:
  6804 ;;		Nothing
  6805 ;; This function is called by:
  6806 ;;		_InitADC
  6807 ;; This function uses a non-reentrant model
  6808 ;;
  6809                           
  6810                           	psect	text47
  6811  001AF2                     __ptext47:
  6812                           	opt stack 0
  6813  001AF2                     _ADC_ConversionInt:
  6814                           	opt stack 16
  6815                           
  6816                           ; BSR set to: 0
  6817                           ;incstack = 0
  6818                           ;ADC_ConversionInt@state stored from wreg
  6819  001AF2  0100               	movlb	0	; () banked
  6820  001AF4  6FB5               	movwf	ADC_ConversionInt@state& (0+255),b
  6821                           
  6822                           ;ADC.c: 171: if(state)
  6823  001AF6  51B5               	movf	ADC_ConversionInt@state& (0+255),w,b
  6824  001AF8  E002               	bz	l1103
  6825                           
  6826                           ; BSR set to: 0
  6827                           ;ADC.c: 172: {
  6828                           ;ADC.c: 174: PIE1bits.ADIE = 1;
  6829  001AFA  8C9D               	bsf	3997,6,c	;volatile
  6830                           
  6831                           ;ADC.c: 175: }
  6832  001AFC  0012               	return	
  6833  001AFE                     l1103:
  6834                           
  6835                           ; BSR set to: 0
  6836                           ;ADC.c: 176: else
  6837                           ;ADC.c: 177: {
  6838                           ;ADC.c: 179: PIE1bits.ADIE = 0;
  6839  001AFE  9C9D               	bcf	3997,6,c	;volatile
  6840                           
  6841                           ; BSR set to: 0
  6842  001B00  0012               	return		;funcret
  6843  001B02                     __end_of_ADC_ConversionInt:
  6844                           	opt stack 0
  6845                           tblptru	equ	0xFF8
  6846                           tblptrh	equ	0xFF7
  6847                           tblptrl	equ	0xFF6
  6848                           tablat	equ	0xFF5
  6849                           prodh	equ	0xFF4
  6850                           prodl	equ	0xFF3
  6851                           intcon	equ	0xFF2
  6852                           intcon2	equ	0xFF1
  6853                           intcon3	equ	0xFF0
  6854                           postinc0	equ	0xFEE
  6855                           wreg	equ	0xFE8
  6856                           postdec1	equ	0xFE5
  6857                           fsr1l	equ	0xFE1
  6858                           postinc2	equ	0xFDE
  6859                           postdec2	equ	0xFDD
  6860                           fsr2h	equ	0xFDA
  6861                           fsr2l	equ	0xFD9
  6862                           status	equ	0xFD8
  6863                           
  6864 ;; *************** function _ADC_ChangeChannel *****************
  6865 ;; Defined at:
  6866 ;;		line 107 in file "ADC.c"
  6867 ;; Parameters:    Size  Location     Type
  6868 ;;		None
  6869 ;; Auto vars:     Size  Location     Type
  6870 ;;		None
  6871 ;; Return value:  Size  Location     Type
  6872 ;;		None               void
  6873 ;; Registers used:
  6874 ;;		wreg, status,2, status,0
  6875 ;; Tracked objects:
  6876 ;;		On entry : 0/0
  6877 ;;		On exit  : 0/0
  6878 ;;		Unchanged: 0/0
  6879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6880 ;;      Params:         0       0       0       0       0
  6881 ;;      Locals:         0       0       0       0       0
  6882 ;;      Temps:          0       0       0       0       0
  6883 ;;      Totals:         0       0       0       0       0
  6884 ;;Total ram usage:        0 bytes
  6885 ;; Hardware stack levels used:    1
  6886 ;; Hardware stack levels required when called:   12
  6887 ;; This function calls:
  6888 ;;		Nothing
  6889 ;; This function is called by:
  6890 ;;		_InitADC
  6891 ;; This function uses a non-reentrant model
  6892 ;;
  6893                           
  6894                           	psect	text48
  6895  0018F0                     __ptext48:
  6896                           	opt stack 0
  6897  0018F0                     _ADC_ChangeChannel:
  6898                           	opt stack 16
  6899                           
  6900                           ;ADC.c: 109: if(ADC_CurrentSource == 10)
  6901                           
  6902                           ; BSR set to: 0
  6903                           ;incstack = 0
  6904  0018F0  0E0A               	movlw	10
  6905  0018F2  186D               	xorwf	_ADC_CurrentSource,w,c
  6906  0018F4  E107               	bnz	l4687
  6907                           
  6908                           ;ADC.c: 110: {
  6909                           ;ADC.c: 111: ADC_CurrentSource = 11;
  6910  0018F6  0E0B               	movlw	11
  6911  0018F8  6E6D               	movwf	_ADC_CurrentSource,c
  6912                           
  6913                           ;ADC.c: 112: ADCON0bits.CHS = 1;
  6914  0018FA  50C2               	movf	4034,w,c	;volatile
  6915  0018FC  0BC3               	andlw	-61
  6916  0018FE  0904               	iorlw	4
  6917  001900  6EC2               	movwf	4034,c	;volatile
  6918                           
  6919                           ;ADC.c: 113: }
  6920  001902  0012               	return	
  6921  001904                     l4687:
  6922                           
  6923                           ;ADC.c: 114: else
  6924                           ;ADC.c: 115: {
  6925                           ;ADC.c: 116: ADC_CurrentSource = 10;
  6926  001904  0E0A               	movlw	10
  6927  001906  6E6D               	movwf	_ADC_CurrentSource,c
  6928                           
  6929                           ;ADC.c: 117: ADCON0bits.CHS = 0;
  6930  001908  0EC3               	movlw	-61
  6931  00190A  16C2               	andwf	4034,f,c	;volatile
  6932  00190C  0CC3               	retlw	195	;funcret
  6933  00190E                     __end_of_ADC_ChangeChannel:
  6934                           	opt stack 0
  6935                           tblptru	equ	0xFF8
  6936                           tblptrh	equ	0xFF7
  6937                           tblptrl	equ	0xFF6
  6938                           tablat	equ	0xFF5
  6939                           prodh	equ	0xFF4
  6940                           prodl	equ	0xFF3
  6941                           intcon	equ	0xFF2
  6942                           intcon2	equ	0xFF1
  6943                           intcon3	equ	0xFF0
  6944                           postinc0	equ	0xFEE
  6945                           wreg	equ	0xFE8
  6946                           postdec1	equ	0xFE5
  6947                           fsr1l	equ	0xFE1
  6948                           postinc2	equ	0xFDE
  6949                           postdec2	equ	0xFDD
  6950                           fsr2h	equ	0xFDA
  6951                           fsr2l	equ	0xFD9
  6952                           status	equ	0xFD8
  6953                           
  6954 ;; *************** function _IR_ReadReceiver *****************
  6955 ;; Defined at:
  6956 ;;		line 82 in file "IR.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;		None
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;  value           1   53[BANK0 ] unsigned char 
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  1    wreg      unsigned char 
  6963 ;; Registers used:
  6964 ;;		wreg, status,2, status,0
  6965 ;; Tracked objects:
  6966 ;;		On entry : F/0
  6967 ;;		On exit  : F/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6970 ;;      Params:         0       0       0       0       0
  6971 ;;      Locals:         0       1       0       0       0
  6972 ;;      Temps:          0       0       0       0       0
  6973 ;;      Totals:         0       1       0       0       0
  6974 ;;Total ram usage:        1 bytes
  6975 ;; Hardware stack levels used:    1
  6976 ;; Hardware stack levels required when called:   12
  6977 ;; This function calls:
  6978 ;;		Nothing
  6979 ;; This function is called by:
  6980 ;;		_Init_System
  6981 ;; This function uses a non-reentrant model
  6982 ;;
  6983                           
  6984                           	psect	text49
  6985  0017EC                     __ptext49:
  6986                           	opt stack 0
  6987  0017EC                     _IR_ReadReceiver:
  6988                           	opt stack 17
  6989                           
  6990                           ; BSR set to: 0
  6991                           ;IR.c: 84: unsigned char value = PORTB;
  6992                           
  6993                           ;incstack = 0
  6994  0017EC  CF81 F0B5          	movff	3969,IR_ReadReceiver@value	;volatile
  6995                           
  6996                           ;IR.c: 86: if(value & 0x10)
  6997  0017F0  A9B5               	btfss	IR_ReadReceiver@value& (0+255),4,b
  6998  0017F2  D007               	goto	l5121
  6999                           
  7000                           ; BSR set to: 0
  7001                           ;IR.c: 87: {
  7002                           ;IR.c: 88: if(IRValue_prev == 0)
  7003  0017F4  51C6               	movf	_IRValue_prev& (0+255),w,b
  7004  0017F6  E102               	bnz	l575
  7005                           
  7006                           ; BSR set to: 0
  7007                           ;IR.c: 89: {
  7008                           ;IR.c: 90: IRChange = 1;
  7009  0017F8  0E01               	movlw	1
  7010  0017FA  6E67               	movwf	_IRChange,c
  7011  0017FC                     l575:
  7012                           
  7013                           ; BSR set to: 0
  7014                           ;IR.c: 91: }
  7015                           ;IR.c: 92: IRValue_prev = 1;
  7016  0017FC  0E01               	movlw	1
  7017  0017FE  6FC6               	movwf	_IRValue_prev& (0+255),b
  7018                           
  7019                           ; BSR set to: 0
  7020                           ;IR.c: 93: return 1;
  7021  001800  0C01               	retlw	1
  7022  001802                     l5121:
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;IR.c: 94: }
  7026                           ;IR.c: 96: if(IRValue_prev == 1)
  7027  001802  05C6               	decf	_IRValue_prev& (0+255),w,b
  7028  001804  E102               	bnz	l5125
  7029                           
  7030                           ; BSR set to: 0
  7031                           ;IR.c: 97: {
  7032                           ;IR.c: 98: IRChange = 1;
  7033  001806  0E01               	movlw	1
  7034  001808  6E67               	movwf	_IRChange,c
  7035  00180A                     l5125:
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;IR.c: 99: }
  7039                           ;IR.c: 100: IRValue_prev = 0;
  7040  00180A  6BC6               	clrf	_IRValue_prev& (0+255),b
  7041                           
  7042                           ; BSR set to: 0
  7043                           
  7044                           ; BSR set to: 0
  7045                           ;IR.c: 101: return 0;
  7046  00180C  0C00               	retlw	0	;funcret
  7047  00180E                     __end_of_IR_ReadReceiver:
  7048                           	opt stack 0
  7049                           tblptru	equ	0xFF8
  7050                           tblptrh	equ	0xFF7
  7051                           tblptrl	equ	0xFF6
  7052                           tablat	equ	0xFF5
  7053                           prodh	equ	0xFF4
  7054                           prodl	equ	0xFF3
  7055                           intcon	equ	0xFF2
  7056                           intcon2	equ	0xFF1
  7057                           intcon3	equ	0xFF0
  7058                           postinc0	equ	0xFEE
  7059                           wreg	equ	0xFE8
  7060                           postdec1	equ	0xFE5
  7061                           fsr1l	equ	0xFE1
  7062                           postinc2	equ	0xFDE
  7063                           postdec2	equ	0xFDD
  7064                           fsr2h	equ	0xFDA
  7065                           fsr2l	equ	0xFD9
  7066                           status	equ	0xFD8
  7067                           
  7068 ;; *************** function _Init_App *****************
  7069 ;; Defined at:
  7070 ;;		line 72 in file "USER.c"
  7071 ;; Parameters:    Size  Location     Type
  7072 ;;		None
  7073 ;; Auto vars:     Size  Location     Type
  7074 ;;		None
  7075 ;; Return value:  Size  Location     Type
  7076 ;;		None               void
  7077 ;; Registers used:
  7078 ;;		wreg, status,2
  7079 ;; Tracked objects:
  7080 ;;		On entry : 0/0
  7081 ;;		On exit  : 0/0
  7082 ;;		Unchanged: 0/0
  7083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7084 ;;      Params:         0       0       0       0       0
  7085 ;;      Locals:         0       0       0       0       0
  7086 ;;      Temps:          0       0       0       0       0
  7087 ;;      Totals:         0       0       0       0       0
  7088 ;;Total ram usage:        0 bytes
  7089 ;; Hardware stack levels used:    1
  7090 ;; Hardware stack levels required when called:   12
  7091 ;; This function calls:
  7092 ;;		Nothing
  7093 ;; This function is called by:
  7094 ;;		_main
  7095 ;; This function uses a non-reentrant model
  7096 ;;
  7097                           
  7098                           	psect	text50
  7099  0014E0                     __ptext50:
  7100                           	opt stack 0
  7101  0014E0                     _Init_App:
  7102                           	opt stack 18
  7103                           
  7104                           ;USER.c: 74: LATA = 0;
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;incstack = 0
  7108  0014E0  6A89               	clrf	3977,c	;volatile
  7109                           
  7110                           ;USER.c: 75: LATB = 0;
  7111  0014E2  6A8A               	clrf	3978,c	;volatile
  7112                           
  7113                           ;USER.c: 76: LATC = 0;
  7114  0014E4  6A8B               	clrf	3979,c	;volatile
  7115                           
  7116                           ;USER.c: 78: ADCON1bits.PCFG = 0b1101;
  7117  0014E6  50C1               	movf	4033,w,c	;volatile
  7118  0014E8  0BF0               	andlw	-16
  7119  0014EA  090D               	iorlw	13
  7120  0014EC  6EC1               	movwf	4033,c	;volatile
  7121                           
  7122                           ;USER.c: 81: TRISCbits.TRISC0 = 1;
  7123  0014EE  8094               	bsf	3988,0,c	;volatile
  7124                           
  7125                           ;USER.c: 82: TRISCbits.TRISC1 = 1;
  7126  0014F0  8294               	bsf	3988,1,c	;volatile
  7127                           
  7128                           ;USER.c: 85: TRISAbits.TRISA0 = 1;
  7129  0014F2  8092               	bsf	3986,0,c	;volatile
  7130                           
  7131                           ;USER.c: 89: TRISAbits.TRISA1 = 1;
  7132  0014F4  8292               	bsf	3986,1,c	;volatile
  7133                           
  7134                           ;USER.c: 92: TRISAbits.TRISA2 = 0;
  7135  0014F6  9492               	bcf	3986,2,c	;volatile
  7136                           
  7137                           ;USER.c: 95: TRISAbits.TRISA5 = 0;
  7138  0014F8  9A92               	bcf	3986,5,c	;volatile
  7139                           
  7140                           ;USER.c: 98: TRISBbits.TRISB1 = 1;
  7141  0014FA  8293               	bsf	3987,1,c	;volatile
  7142                           
  7143                           ;USER.c: 99: TRISBbits.TRISB2 = 1;
  7144  0014FC  8493               	bsf	3987,2,c	;volatile
  7145                           
  7146                           ;USER.c: 103: TRISBbits.TRISB3 = 0;
  7147  0014FE  9693               	bcf	3987,3,c	;volatile
  7148                           
  7149                           ;USER.c: 106: TRISCbits.TRISC2 = 0;
  7150  001500  9494               	bcf	3988,2,c	;volatile
  7151                           
  7152                           ;USER.c: 110: TRISCbits.TRISC3 = 1;
  7153  001502  8694               	bsf	3988,3,c	;volatile
  7154                           
  7155                           ;USER.c: 113: TRISCbits.TRISC5 = 1;
  7156  001504  8A94               	bsf	3988,5,c	;volatile
  7157                           
  7158                           ;USER.c: 117: TRISCbits.TRISC4 = 0;
  7159  001506  9894               	bcf	3988,4,c	;volatile
  7160                           
  7161                           ;USER.c: 121: TRISBbits.TRISB0 = 1;
  7162  001508  8093               	bsf	3987,0,c	;volatile
  7163                           
  7164                           ;USER.c: 122: TRISBbits.TRISB4 = 1;
  7165  00150A  8893               	bsf	3987,4,c	;volatile
  7166                           
  7167                           ;USER.c: 126: TRISBbits.TRISB5 = 1;
  7168  00150C  8A93               	bsf	3987,5,c	;volatile
  7169                           
  7170                           ;USER.c: 130: TRISAbits.TRISA3 = 1;
  7171  00150E  8692               	bsf	3986,3,c	;volatile
  7172                           
  7173                           ;USER.c: 142: TRISCbits.TRISC6 = 0;
  7174  001510  9C94               	bcf	3988,6,c	;volatile
  7175                           
  7176                           ;USER.c: 143: TRISCbits.TRISC7 = 0;
  7177  001512  9E94               	bcf	3988,7,c	;volatile
  7178  001514  0012               	return		;funcret
  7179  001516                     __end_of_Init_App:
  7180                           	opt stack 0
  7181                           tblptru	equ	0xFF8
  7182                           tblptrh	equ	0xFF7
  7183                           tblptrl	equ	0xFF6
  7184                           tablat	equ	0xFF5
  7185                           prodh	equ	0xFF4
  7186                           prodl	equ	0xFF3
  7187                           intcon	equ	0xFF2
  7188                           intcon2	equ	0xFF1
  7189                           intcon3	equ	0xFF0
  7190                           postinc0	equ	0xFEE
  7191                           wreg	equ	0xFE8
  7192                           postdec1	equ	0xFE5
  7193                           fsr1l	equ	0xFE1
  7194                           postinc2	equ	0xFDE
  7195                           postdec2	equ	0xFDD
  7196                           fsr2h	equ	0xFDA
  7197                           fsr2l	equ	0xFD9
  7198                           status	equ	0xFD8
  7199                           
  7200 ;; *************** function _IR_LoadCode *****************
  7201 ;; Defined at:
  7202 ;;		line 131 in file "IR.c"
  7203 ;; Parameters:    Size  Location     Type
  7204 ;;		None
  7205 ;; Auto vars:     Size  Location     Type
  7206 ;;  HighBound       3   31[BANK1 ] unsigned char 
  7207 ;;  LowBound        3   28[BANK1 ] unsigned char 
  7208 ;;  High2           3   24[BANK1 ] unsigned char 
  7209 ;;  Low2            3   21[BANK1 ] unsigned char 
  7210 ;;  High1           3   17[BANK1 ] unsigned char 
  7211 ;;  Low1            3   14[BANK1 ] unsigned char 
  7212 ;;  CodeSize2       1   27[BANK1 ] unsigned char 
  7213 ;;  CodeSize1       1   20[BANK1 ] unsigned char 
  7214 ;; Return value:  Size  Location     Type
  7215 ;;		None               void
  7216 ;; Registers used:
  7217 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7218 ;; Tracked objects:
  7219 ;;		On entry : F/0
  7220 ;;		On exit  : F/1
  7221 ;;		Unchanged: 0/0
  7222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7223 ;;      Params:         0       0       0       0       0
  7224 ;;      Locals:         0       0      20       0       0
  7225 ;;      Temps:          0       0       0       0       0
  7226 ;;      Totals:         0       0      20       0       0
  7227 ;;Total ram usage:       20 bytes
  7228 ;; Hardware stack levels used:    1
  7229 ;; Hardware stack levels required when called:   14
  7230 ;; This function calls:
  7231 ;;		_IR_CalculateCodesize
  7232 ;;		___ftge
  7233 ;;		___ftmul
  7234 ;;		___fttol
  7235 ;;		___lwtoft
  7236 ;; This function is called by:
  7237 ;;		_main
  7238 ;; This function uses a non-reentrant model
  7239 ;;
  7240                           
  7241                           	psect	text51
  7242  003782                     __ptext51:
  7243                           	opt stack 0
  7244  003782                     _IR_LoadCode:
  7245                           	opt stack 16
  7246                           
  7247                           ; BSR set to: 0
  7248                           ;IR.c: 134: double High1 = 0.0;
  7249                           
  7250                           ;incstack = 0
  7251  003782  0101               	movlb	1	; () banked
  7252  003784  6B98               	clrf	IR_LoadCode@High1& (0+255),b
  7253  003786  6B99               	clrf	(IR_LoadCode@High1+1)& (0+255),b
  7254  003788  6B9A               	clrf	(IR_LoadCode@High1+2)& (0+255),b
  7255                           
  7256                           ;IR.c: 135: double Low2 = 0.0;
  7257  00378A  6B9C               	clrf	IR_LoadCode@Low2& (0+255),b
  7258  00378C  6B9D               	clrf	(IR_LoadCode@Low2+1)& (0+255),b
  7259  00378E  6B9E               	clrf	(IR_LoadCode@Low2+2)& (0+255),b
  7260                           
  7261                           ;IR.c: 136: double High2 = 0.0;
  7262  003790  6B9F               	clrf	IR_LoadCode@High2& (0+255),b
  7263  003792  6BA0               	clrf	(IR_LoadCode@High2+1)& (0+255),b
  7264  003794  6BA1               	clrf	(IR_LoadCode@High2+2)& (0+255),b
  7265                           
  7266                           ;IR.c: 137: double LowBound = 0.0;
  7267  003796  6BA3               	clrf	IR_LoadCode@LowBound& (0+255),b
  7268  003798  6BA4               	clrf	(IR_LoadCode@LowBound+1)& (0+255),b
  7269  00379A  6BA5               	clrf	(IR_LoadCode@LowBound+2)& (0+255),b
  7270                           
  7271                           ;IR.c: 138: double HighBound = 0.0;
  7272  00379C  6BA6               	clrf	IR_LoadCode@HighBound& (0+255),b
  7273  00379E  6BA7               	clrf	(IR_LoadCode@HighBound+1)& (0+255),b
  7274  0037A0  6BA8               	clrf	(IR_LoadCode@HighBound+2)& (0+255),b
  7275                           
  7276                           ; BSR set to: 1
  7277                           ;IR.c: 139: unsigned char CodeSize1;
  7278                           ;IR.c: 140: unsigned char CodeSize2;
  7279                           ;IR.c: 142: Low1 = (double)IR_SavedTiming0[0] * (1.0 - 0.3);
  7280  0037A2  6AF6               	clrf	tblptrl,c
  7281  0037A4                     	if	1	;There is more than 1 active tblptr byte
  7282  0037A4  0E24               	movlw	36
  7283  0037A6  6EF7               	movwf	tblptrh,c
  7284  0037A8                     	endif
  7285  0037A8                     	if	0	;There are less than 3 active tblptr bytes
  7286  0037A8                     	endif
  7287  0037A8  0009               	tblrd		*+
  7288  0037AA  CFF5 F0BD          	movff	tablat,___lwtoft@c
  7289  0037AE  000A               	tblrd		*-
  7290  0037B0  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  7291  0037B4  EC89  F00B         	call	___lwtoft	;wreg free
  7292  0037B8  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  7293  0037BC  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  7294  0037C0  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  7295  0037C4  0E33               	movlw	51
  7296  0037C6  0101               	movlb	1	; () banked
  7297  0037C8  6F8A               	movwf	___ftmul@f2& (0+255),b
  7298  0037CA  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  7299  0037CC  0E3F               	movlw	63
  7300  0037CE  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  7301  0037D0  ECC4  F002         	call	___ftmul	;wreg free
  7302  0037D4  C187  F195         	movff	?___ftmul,IR_LoadCode@Low1
  7303  0037D8  C188  F196         	movff	?___ftmul+1,IR_LoadCode@Low1+1
  7304  0037DC  C189  F197         	movff	?___ftmul+2,IR_LoadCode@Low1+2
  7305                           
  7306                           ;IR.c: 143: High1= (double)IR_SavedTiming0[0] * (1.0 + 0.3);
  7307  0037E0  6AF6               	clrf	tblptrl,c
  7308  0037E2                     	if	1	;There is more than 1 active tblptr byte
  7309  0037E2  0E24               	movlw	36
  7310  0037E4  6EF7               	movwf	tblptrh,c
  7311  0037E6                     	endif
  7312  0037E6                     	if	0	;There are less than 3 active tblptr bytes
  7313  0037E6                     	endif
  7314  0037E6  0009               	tblrd		*+
  7315  0037E8  CFF5 F0BD          	movff	tablat,___lwtoft@c
  7316  0037EC  000A               	tblrd		*-
  7317  0037EE  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  7318  0037F2  EC89  F00B         	call	___lwtoft	;wreg free
  7319  0037F6  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  7320  0037FA  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  7321  0037FE  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  7322  003802  0E66               	movlw	102
  7323  003804  0101               	movlb	1	; () banked
  7324  003806  6F8A               	movwf	___ftmul@f2& (0+255),b
  7325  003808  0EA6               	movlw	166
  7326  00380A  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  7327  00380C  0E3F               	movlw	63
  7328  00380E  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  7329  003810  ECC4  F002         	call	___ftmul	;wreg free
  7330  003814  C187  F198         	movff	?___ftmul,IR_LoadCode@High1
  7331  003818  C188  F199         	movff	?___ftmul+1,IR_LoadCode@High1+1
  7332  00381C  C189  F19A         	movff	?___ftmul+2,IR_LoadCode@High1+2
  7333                           
  7334                           ;IR.c: 145: Low2 = (double)IR_SavedTiming1[0] * (1.0 - 0.3);
  7335  003820  0EC0               	movlw	192
  7336  003822  6EF6               	movwf	tblptrl,c
  7337  003824                     	if	1	;There is more than 1 active tblptr byte
  7338  003824  0E24               	movlw	36
  7339  003826  6EF7               	movwf	tblptrh,c
  7340  003828                     	endif
  7341  003828                     	if	0	;There are less than 3 active tblptr bytes
  7342  003828                     	endif
  7343  003828  0009               	tblrd		*+
  7344  00382A  CFF5 F0BD          	movff	tablat,___lwtoft@c
  7345  00382E  000A               	tblrd		*-
  7346  003830  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  7347  003834  EC89  F00B         	call	___lwtoft	;wreg free
  7348  003838  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  7349  00383C  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  7350  003840  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  7351  003844  0E33               	movlw	51
  7352  003846  0101               	movlb	1	; () banked
  7353  003848  6F8A               	movwf	___ftmul@f2& (0+255),b
  7354  00384A  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  7355  00384C  0E3F               	movlw	63
  7356  00384E  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  7357  003850  ECC4  F002         	call	___ftmul	;wreg free
  7358  003854  C187  F19C         	movff	?___ftmul,IR_LoadCode@Low2
  7359  003858  C188  F19D         	movff	?___ftmul+1,IR_LoadCode@Low2+1
  7360  00385C  C189  F19E         	movff	?___ftmul+2,IR_LoadCode@Low2+2
  7361                           
  7362                           ;IR.c: 146: High2= (double)IR_SavedTiming1[0] * (1.0 + 0.3);
  7363  003860  0EC0               	movlw	192
  7364  003862  6EF6               	movwf	tblptrl,c
  7365  003864                     	if	1	;There is more than 1 active tblptr byte
  7366  003864  0E24               	movlw	36
  7367  003866  6EF7               	movwf	tblptrh,c
  7368  003868                     	endif
  7369  003868                     	if	0	;There are less than 3 active tblptr bytes
  7370  003868                     	endif
  7371  003868  0009               	tblrd		*+
  7372  00386A  CFF5 F0BD          	movff	tablat,___lwtoft@c
  7373  00386E  000A               	tblrd		*-
  7374  003870  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  7375  003874  EC89  F00B         	call	___lwtoft	;wreg free
  7376  003878  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  7377  00387C  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  7378  003880  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  7379  003884  0E66               	movlw	102
  7380  003886  0101               	movlb	1	; () banked
  7381  003888  6F8A               	movwf	___ftmul@f2& (0+255),b
  7382  00388A  0EA6               	movlw	166
  7383  00388C  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  7384  00388E  0E3F               	movlw	63
  7385  003890  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  7386  003892  ECC4  F002         	call	___ftmul	;wreg free
  7387  003896  C187  F19F         	movff	?___ftmul,IR_LoadCode@High2
  7388  00389A  C188  F1A0         	movff	?___ftmul+1,IR_LoadCode@High2+1
  7389  00389E  C189  F1A1         	movff	?___ftmul+2,IR_LoadCode@High2+2
  7390                           
  7391                           ;IR.c: 148: LowBound = Low1;
  7392  0038A2  C195  F1A3         	movff	IR_LoadCode@Low1,IR_LoadCode@LowBound
  7393  0038A6  C196  F1A4         	movff	IR_LoadCode@Low1+1,IR_LoadCode@LowBound+1
  7394  0038AA  C197  F1A5         	movff	IR_LoadCode@Low1+2,IR_LoadCode@LowBound+2
  7395                           
  7396                           ;IR.c: 149: if(Low2 < LowBound)
  7397  0038AE  C19C  F0B5         	movff	IR_LoadCode@Low2,___ftge@ff1
  7398  0038B2  C19D  F0B6         	movff	IR_LoadCode@Low2+1,___ftge@ff1+1
  7399  0038B6  C19E  F0B7         	movff	IR_LoadCode@Low2+2,___ftge@ff1+2
  7400  0038BA  C1A3  F0B8         	movff	IR_LoadCode@LowBound,___ftge@ff2
  7401  0038BE  C1A4  F0B9         	movff	IR_LoadCode@LowBound+1,___ftge@ff2+1
  7402  0038C2  C1A5  F0BA         	movff	IR_LoadCode@LowBound+2,___ftge@ff2+2
  7403  0038C6  EC48  F009         	call	___ftge	;wreg free
  7404  0038CA  E206               	bc	l6881
  7405                           
  7406                           ; BSR set to: 0
  7407                           ;IR.c: 150: {
  7408                           ;IR.c: 151: LowBound = Low2;
  7409  0038CC  C19C  F1A3         	movff	IR_LoadCode@Low2,IR_LoadCode@LowBound
  7410  0038D0  C19D  F1A4         	movff	IR_LoadCode@Low2+1,IR_LoadCode@LowBound+1
  7411  0038D4  C19E  F1A5         	movff	IR_LoadCode@Low2+2,IR_LoadCode@LowBound+2
  7412  0038D8                     l6881:
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;IR.c: 152: }
  7416                           ;IR.c: 153: if(LowBound < 6000)
  7417  0038D8  C1A3  F0B5         	movff	IR_LoadCode@LowBound,___ftge@ff1
  7418  0038DC  C1A4  F0B6         	movff	IR_LoadCode@LowBound+1,___ftge@ff1+1
  7419  0038E0  C1A5  F0B7         	movff	IR_LoadCode@LowBound+2,___ftge@ff1+2
  7420  0038E4  0E80               	movlw	128
  7421  0038E6  6FB8               	movwf	___ftge@ff2& (0+255),b
  7422  0038E8  0EBB               	movlw	187
  7423  0038EA  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  7424  0038EC  0E45               	movlw	69
  7425  0038EE  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  7426  0038F0  EC48  F009         	call	___ftge	;wreg free
  7427  0038F4  E207               	bc	l6885
  7428                           
  7429                           ; BSR set to: 0
  7430                           ;IR.c: 154: {
  7431                           ;IR.c: 155: LowBound = 6000;
  7432  0038F6  0E80               	movlw	128
  7433  0038F8  0101               	movlb	1	; () banked
  7434  0038FA  6FA3               	movwf	IR_LoadCode@LowBound& (0+255),b
  7435  0038FC  0EBB               	movlw	187
  7436  0038FE  6FA4               	movwf	(IR_LoadCode@LowBound+1)& (0+255),b
  7437  003900  0E45               	movlw	69
  7438  003902  6FA5               	movwf	(IR_LoadCode@LowBound+2)& (0+255),b
  7439  003904                     l6885:
  7440                           
  7441                           ;IR.c: 156: }
  7442                           ;IR.c: 158: HighBound = High1;
  7443  003904  C198  F1A6         	movff	IR_LoadCode@High1,IR_LoadCode@HighBound
  7444  003908  C199  F1A7         	movff	IR_LoadCode@High1+1,IR_LoadCode@HighBound+1
  7445  00390C  C19A  F1A8         	movff	IR_LoadCode@High1+2,IR_LoadCode@HighBound+2
  7446                           
  7447                           ;IR.c: 159: if(High2 < HighBound)
  7448  003910  C19F  F0B5         	movff	IR_LoadCode@High2,___ftge@ff1
  7449  003914  C1A0  F0B6         	movff	IR_LoadCode@High2+1,___ftge@ff1+1
  7450  003918  C1A1  F0B7         	movff	IR_LoadCode@High2+2,___ftge@ff1+2
  7451  00391C  C1A6  F0B8         	movff	IR_LoadCode@HighBound,___ftge@ff2
  7452  003920  C1A7  F0B9         	movff	IR_LoadCode@HighBound+1,___ftge@ff2+1
  7453  003924  C1A8  F0BA         	movff	IR_LoadCode@HighBound+2,___ftge@ff2+2
  7454  003928  EC48  F009         	call	___ftge	;wreg free
  7455  00392C  E206               	bc	l6891
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;IR.c: 160: {
  7459                           ;IR.c: 161: HighBound = High2;
  7460  00392E  C19F  F1A6         	movff	IR_LoadCode@High2,IR_LoadCode@HighBound
  7461  003932  C1A0  F1A7         	movff	IR_LoadCode@High2+1,IR_LoadCode@HighBound+1
  7462  003936  C1A1  F1A8         	movff	IR_LoadCode@High2+2,IR_LoadCode@HighBound+2
  7463  00393A                     l6891:
  7464                           
  7465                           ; BSR set to: 0
  7466                           ;IR.c: 162: }
  7467                           ;IR.c: 163: if(HighBound < 10000)
  7468  00393A  C1A6  F0B5         	movff	IR_LoadCode@HighBound,___ftge@ff1
  7469  00393E  C1A7  F0B6         	movff	IR_LoadCode@HighBound+1,___ftge@ff1+1
  7470  003942  C1A8  F0B7         	movff	IR_LoadCode@HighBound+2,___ftge@ff1+2
  7471  003946  0E40               	movlw	64
  7472  003948  6FB8               	movwf	___ftge@ff2& (0+255),b
  7473  00394A  0E1C               	movlw	28
  7474  00394C  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  7475  00394E  0E46               	movlw	70
  7476  003950  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  7477  003952  EC48  F009         	call	___ftge	;wreg free
  7478  003956  E207               	bc	l6895
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;IR.c: 164: {
  7482                           ;IR.c: 165: HighBound = 10000;
  7483  003958  0E40               	movlw	64
  7484  00395A  0101               	movlb	1	; () banked
  7485  00395C  6FA6               	movwf	IR_LoadCode@HighBound& (0+255),b
  7486  00395E  0E1C               	movlw	28
  7487  003960  6FA7               	movwf	(IR_LoadCode@HighBound+1)& (0+255),b
  7488  003962  0E46               	movlw	70
  7489  003964  6FA8               	movwf	(IR_LoadCode@HighBound+2)& (0+255),b
  7490  003966                     l6895:
  7491                           
  7492                           ;IR.c: 166: }
  7493                           ;IR.c: 168: IR_SyncLow = (unsigned int) LowBound;
  7494  003966  C1A3  F0B5         	movff	IR_LoadCode@LowBound,___fttol@f1
  7495  00396A  C1A4  F0B6         	movff	IR_LoadCode@LowBound+1,___fttol@f1+1
  7496  00396E  C1A5  F0B7         	movff	IR_LoadCode@LowBound+2,___fttol@f1+2
  7497  003972  EC05  F004         	call	___fttol	;wreg free
  7498  003976  C0B5  F060         	movff	?___fttol,_IR_SyncLow
  7499  00397A  C0B6  F061         	movff	?___fttol+1,_IR_SyncLow+1
  7500                           
  7501                           ;IR.c: 169: IR_SyncHigh = (unsigned int) HighBound;
  7502  00397E  C1A6  F0B5         	movff	IR_LoadCode@HighBound,___fttol@f1
  7503  003982  C1A7  F0B6         	movff	IR_LoadCode@HighBound+1,___fttol@f1+1
  7504  003986  C1A8  F0B7         	movff	IR_LoadCode@HighBound+2,___fttol@f1+2
  7505  00398A  EC05  F004         	call	___fttol	;wreg free
  7506  00398E  C0B5  F05E         	movff	?___fttol,_IR_SyncHigh
  7507  003992  C0B6  F05F         	movff	?___fttol+1,_IR_SyncHigh+1
  7508                           
  7509                           ;IR.c: 171: CodeSize1 = IR_CalculateCodesize(&IR_SavedTiming0[0]);
  7510  003996  0100               	movlb	0	; () banked
  7511  003998  6BB5               	clrf	IR_CalculateCodesize@Code& (0+255),b
  7512  00399A  0E24               	movlw	36
  7513  00399C  6FB6               	movwf	(IR_CalculateCodesize@Code+1)& (0+255),b
  7514  00399E  6BB7               	clrf	(IR_CalculateCodesize@Code+2)& (0+255),b
  7515  0039A0  EC34  F00A         	call	_IR_CalculateCodesize	;wreg free
  7516  0039A4  0101               	movlb	1	; () banked
  7517  0039A6  6F9B               	movwf	IR_LoadCode@CodeSize1& (0+255),b
  7518                           
  7519                           ; BSR set to: 1
  7520                           ;IR.c: 172: CodeSize2 = IR_CalculateCodesize(&IR_SavedTiming1[0]);
  7521  0039A8  0EC0               	movlw	192
  7522  0039AA  0100               	movlb	0	; () banked
  7523  0039AC  6FB5               	movwf	IR_CalculateCodesize@Code& (0+255),b
  7524  0039AE  0E24               	movlw	36
  7525  0039B0  6FB6               	movwf	(IR_CalculateCodesize@Code+1)& (0+255),b
  7526  0039B2  6BB7               	clrf	(IR_CalculateCodesize@Code+2)& (0+255),b
  7527  0039B4  EC34  F00A         	call	_IR_CalculateCodesize	;wreg free
  7528  0039B8  0101               	movlb	1	; () banked
  7529  0039BA  6FA2               	movwf	IR_LoadCode@CodeSize2& (0+255),b
  7530                           
  7531                           ; BSR set to: 1
  7532                           ;IR.c: 174: IR_CodeSize = CodeSize1;
  7533  0039BC  C19B  F06A         	movff	IR_LoadCode@CodeSize1,_IR_CodeSize
  7534                           
  7535                           ; BSR set to: 1
  7536                           ;IR.c: 175: if(IR_CodeSize < CodeSize2)
  7537  0039C0  51A2               	movf	IR_LoadCode@CodeSize2& (0+255),w,b
  7538  0039C2  5C6A               	subwf	_IR_CodeSize,w,c
  7539  0039C4  E202               	bc	l6909
  7540                           
  7541                           ; BSR set to: 1
  7542                           ;IR.c: 176: {
  7543                           ;IR.c: 177: IR_CodeSize = CodeSize2;
  7544  0039C6  C1A2  F06A         	movff	IR_LoadCode@CodeSize2,_IR_CodeSize
  7545  0039CA                     l6909:
  7546                           
  7547                           ; BSR set to: 1
  7548                           ;IR.c: 178: }
  7549                           ;IR.c: 179: if(IR_CodeSize < 40)
  7550  0039CA  0E28               	movlw	40
  7551  0039CC  606A               	cpfslt	_IR_CodeSize,c
  7552  0039CE  0C28               	retlw	40
  7553                           
  7554                           ; BSR set to: 1
  7555                           ;IR.c: 180: {
  7556                           ;IR.c: 181: IR_CodeSize = 40;
  7557  0039D0  6E6A               	movwf	_IR_CodeSize,c
  7558                           
  7559                           ; BSR set to: 1
  7560  0039D2  0C28               	retlw	40	;funcret
  7561  0039D4                     __end_of_IR_LoadCode:
  7562                           	opt stack 0
  7563                           tblptru	equ	0xFF8
  7564                           tblptrh	equ	0xFF7
  7565                           tblptrl	equ	0xFF6
  7566                           tablat	equ	0xFF5
  7567                           prodh	equ	0xFF4
  7568                           prodl	equ	0xFF3
  7569                           intcon	equ	0xFF2
  7570                           intcon2	equ	0xFF1
  7571                           intcon3	equ	0xFF0
  7572                           postinc0	equ	0xFEE
  7573                           wreg	equ	0xFE8
  7574                           postdec1	equ	0xFE5
  7575                           fsr1l	equ	0xFE1
  7576                           postinc2	equ	0xFDE
  7577                           postdec2	equ	0xFDD
  7578                           fsr2h	equ	0xFDA
  7579                           fsr2l	equ	0xFD9
  7580                           status	equ	0xFD8
  7581                           
  7582 ;; *************** function ___lwtoft *****************
  7583 ;; Defined at:
  7584 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
  7585 ;; Parameters:    Size  Location     Type
  7586 ;;  c               2   61[BANK0 ] unsigned int 
  7587 ;; Auto vars:     Size  Location     Type
  7588 ;;		None
  7589 ;; Return value:  Size  Location     Type
  7590 ;;                  3   61[BANK0 ] float 
  7591 ;; Registers used:
  7592 ;;		wreg, status,2, status,0, cstack
  7593 ;; Tracked objects:
  7594 ;;		On entry : E/1
  7595 ;;		On exit  : F/0
  7596 ;;		Unchanged: 0/0
  7597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7598 ;;      Params:         0       3       0       0       0
  7599 ;;      Locals:         0       0       0       0       0
  7600 ;;      Temps:          0       0       0       0       0
  7601 ;;      Totals:         0       3       0       0       0
  7602 ;;Total ram usage:        3 bytes
  7603 ;; Hardware stack levels used:    1
  7604 ;; Hardware stack levels required when called:   13
  7605 ;; This function calls:
  7606 ;;		___ftpack
  7607 ;; This function is called by:
  7608 ;;		_RF_LoadCode
  7609 ;;		_IR_LoadCode
  7610 ;; This function uses a non-reentrant model
  7611 ;;
  7612                           
  7613                           	psect	text52
  7614  001712                     __ptext52:
  7615                           	opt stack 0
  7616  001712                     ___lwtoft:
  7617                           	opt stack 16
  7618                           
  7619                           ; BSR set to: 1
  7620                           ;incstack = 0
  7621  001712  C0BD  F0B5         	movff	___lwtoft@c,___ftpack@arg
  7622  001716  C0BE  F0B6         	movff	___lwtoft@c+1,___ftpack@arg+1
  7623  00171A  0100               	movlb	0	; () banked
  7624  00171C  6BB7               	clrf	(___ftpack@arg+2)& (0+255),b
  7625  00171E  0E8E               	movlw	142
  7626  001720  6FB8               	movwf	___ftpack@exp& (0+255),b
  7627  001722  0E00               	movlw	0
  7628  001724  6FB9               	movwf	___ftpack@sign& (0+255),b
  7629  001726  EC66  F007         	call	___ftpack	;wreg free
  7630  00172A  C0B5  F0BD         	movff	?___ftpack,?___lwtoft
  7631  00172E  C0B6  F0BE         	movff	?___ftpack+1,?___lwtoft+1
  7632  001732  C0B7  F0BF         	movff	?___ftpack+2,?___lwtoft+2
  7633                           
  7634                           ; BSR set to: 0
  7635  001736  0012               	return		;funcret
  7636  001738                     __end_of___lwtoft:
  7637                           	opt stack 0
  7638                           tblptru	equ	0xFF8
  7639                           tblptrh	equ	0xFF7
  7640                           tblptrl	equ	0xFF6
  7641                           tablat	equ	0xFF5
  7642                           prodh	equ	0xFF4
  7643                           prodl	equ	0xFF3
  7644                           intcon	equ	0xFF2
  7645                           intcon2	equ	0xFF1
  7646                           intcon3	equ	0xFF0
  7647                           postinc0	equ	0xFEE
  7648                           wreg	equ	0xFE8
  7649                           postdec1	equ	0xFE5
  7650                           fsr1l	equ	0xFE1
  7651                           postinc2	equ	0xFDE
  7652                           postdec2	equ	0xFDD
  7653                           fsr2h	equ	0xFDA
  7654                           fsr2l	equ	0xFD9
  7655                           status	equ	0xFD8
  7656                           
  7657 ;; *************** function ___fttol *****************
  7658 ;; Defined at:
  7659 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;  f1              3   53[BANK0 ] float 
  7662 ;; Auto vars:     Size  Location     Type
  7663 ;;  lval            4    1[BANK1 ] unsigned long 
  7664 ;;  exp1            1    5[BANK1 ] unsigned char 
  7665 ;;  sign1           1    0[BANK1 ] unsigned char 
  7666 ;; Return value:  Size  Location     Type
  7667 ;;                  4   53[BANK0 ] long 
  7668 ;; Registers used:
  7669 ;;		wreg, status,2, status,0
  7670 ;; Tracked objects:
  7671 ;;		On entry : E/0
  7672 ;;		On exit  : E/0
  7673 ;;		Unchanged: 0/0
  7674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7675 ;;      Params:         0       4       0       0       0
  7676 ;;      Locals:         0       0       6       0       0
  7677 ;;      Temps:          0       5       0       0       0
  7678 ;;      Totals:         0       9       6       0       0
  7679 ;;Total ram usage:       15 bytes
  7680 ;; Hardware stack levels used:    1
  7681 ;; Hardware stack levels required when called:   12
  7682 ;; This function calls:
  7683 ;;		Nothing
  7684 ;; This function is called by:
  7685 ;;		_RF_LoadCode
  7686 ;;		_IR_LoadCode
  7687 ;; This function uses a non-reentrant model
  7688 ;;
  7689                           
  7690                           	psect	text53
  7691  00080A                     __ptext53:
  7692                           	opt stack 0
  7693  00080A                     ___fttol:
  7694                           	opt stack 17
  7695                           
  7696                           ; BSR set to: 0
  7697                           ;incstack = 0
  7698  00080A  C0B7  F0B9         	movff	___fttol@f1+2,??___fttol
  7699  00080E  0100               	movlb	0	; () banked
  7700  000810  6BBA               	clrf	(??___fttol+1)& (0+255),b
  7701  000812  6BBB               	clrf	(??___fttol+2)& (0+255),b
  7702  000814  35B6               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7703  000816  37B9               	rlcf	??___fttol& (0+255),f,b
  7704  000818  E301               	bnc	u7321
  7705  00081A  81BA               	bsf	(??___fttol+1)& (0+255),0,b
  7706  00081C                     u7321:
  7707  00081C  51B9               	movf	??___fttol& (0+255),w,b
  7708  00081E  0101               	movlb	1	; () banked
  7709  000820  6F8C               	movwf	___fttol@exp1& (0+255),b
  7710  000822  518C               	movf	___fttol@exp1& (0+255),w,b
  7711  000824  E106               	bnz	l6817
  7712  000826                     l6815:
  7713                           
  7714                           ; BSR set to: 1
  7715  000826  0100               	movlb	0	; () banked
  7716  000828  6BB5               	clrf	?___fttol& (0+255),b
  7717  00082A  6BB6               	clrf	(?___fttol+1)& (0+255),b
  7718  00082C  6BB7               	clrf	(?___fttol+2)& (0+255),b
  7719  00082E  6BB8               	clrf	(?___fttol+3)& (0+255),b
  7720  000830  0012               	return	
  7721  000832                     l6817:
  7722                           
  7723                           ; BSR set to: 1
  7724  000832  0E17               	movlw	23
  7725  000834  0100               	movlb	0	; () banked
  7726  000836  6FB9               	movwf	??___fttol& (0+255),b
  7727  000838  C0B5  F0BA         	movff	___fttol@f1,??___fttol+1
  7728  00083C  C0B6  F0BB         	movff	___fttol@f1+1,??___fttol+2
  7729  000840  C0B7  F0BC         	movff	___fttol@f1+2,??___fttol+3
  7730  000844  29B9               	incf	??___fttol& (0+255),w,b
  7731  000846  6FBD               	movwf	(??___fttol+4)& (0+255),b
  7732  000848  D004               	goto	u7340
  7733  00084A                     u7345:
  7734  00084A  90D8               	bcf	status,0,c
  7735  00084C  33BC               	rrcf	(??___fttol+3)& (0+255),f,b
  7736  00084E  33BB               	rrcf	(??___fttol+2)& (0+255),f,b
  7737  000850  33BA               	rrcf	(??___fttol+1)& (0+255),f,b
  7738  000852                     u7340:
  7739  000852  2FBD               	decfsz	(??___fttol+4)& (0+255),f,b
  7740  000854  D7FA               	goto	u7345
  7741  000856  0100               	movlb	0	; () banked
  7742  000858  51BA               	movf	(??___fttol+1)& (0+255),w,b
  7743  00085A  0101               	movlb	1	; () banked
  7744  00085C  6F87               	movwf	___fttol@sign1& (0+255),b
  7745                           
  7746                           ; BSR set to: 1
  7747  00085E  0100               	movlb	0	; () banked
  7748  000860  8FB6               	bsf	(___fttol@f1+1)& (0+255),7,b
  7749                           
  7750                           ; BSR set to: 0
  7751  000862  6BB7               	clrf	(___fttol@f1+2)& (0+255),b
  7752                           
  7753                           ; BSR set to: 0
  7754  000864  51B5               	movf	___fttol@f1& (0+255),w,b
  7755  000866  0101               	movlb	1	; () banked
  7756  000868  6F88               	movwf	___fttol@lval& (0+255),b
  7757  00086A  0100               	movlb	0	; () banked
  7758  00086C  51B6               	movf	(___fttol@f1+1)& (0+255),w,b
  7759  00086E  0101               	movlb	1	; () banked
  7760  000870  6F89               	movwf	(___fttol@lval+1)& (0+255),b
  7761  000872  0100               	movlb	0	; () banked
  7762  000874  51B7               	movf	(___fttol@f1+2)& (0+255),w,b
  7763  000876  0101               	movlb	1	; () banked
  7764  000878  6F8A               	movwf	(___fttol@lval+2)& (0+255),b
  7765  00087A  6B8B               	clrf	(___fttol@lval+3)& (0+255),b
  7766                           
  7767                           ; BSR set to: 1
  7768  00087C  0E8E               	movlw	142
  7769  00087E  5F8C               	subwf	___fttol@exp1& (0+255),f,b
  7770                           
  7771                           ; BSR set to: 1
  7772  000880  AF8C               	btfss	___fttol@exp1& (0+255),7,b
  7773  000882  D00C               	goto	l6837
  7774                           
  7775                           ; BSR set to: 1
  7776  000884  518C               	movf	___fttol@exp1& (0+255),w,b
  7777  000886  0A80               	xorlw	128
  7778  000888  0F8F               	addlw	143
  7779  00088A  E3CD               	bnc	l6815
  7780  00088C                     l6833:
  7781                           
  7782                           ; BSR set to: 1
  7783  00088C  90D8               	bcf	status,0,c
  7784  00088E  338B               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7785  000890  338A               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7786  000892  3389               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7787  000894  3388               	rrcf	___fttol@lval& (0+255),f,b
  7788                           
  7789                           ; BSR set to: 1
  7790  000896  3F8C               	incfsz	___fttol@exp1& (0+255),f,b
  7791  000898  D7F9               	goto	l6833
  7792  00089A  D00C               	goto	l6845
  7793  00089C                     l6837:
  7794                           
  7795                           ; BSR set to: 1
  7796  00089C  0E17               	movlw	23
  7797  00089E  658C               	cpfsgt	___fttol@exp1& (0+255),b
  7798  0008A0  D007               	goto	l6843
  7799  0008A2  D7C1               	goto	l6815
  7800  0008A4                     l6841:
  7801                           
  7802                           ; BSR set to: 1
  7803  0008A4  90D8               	bcf	status,0,c
  7804  0008A6  3788               	rlcf	___fttol@lval& (0+255),f,b
  7805  0008A8  3789               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7806  0008AA  378A               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7807  0008AC  378B               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7808  0008AE  078C               	decf	___fttol@exp1& (0+255),f,b
  7809  0008B0                     l6843:
  7810                           
  7811                           ; BSR set to: 1
  7812  0008B0  518C               	movf	___fttol@exp1& (0+255),w,b
  7813  0008B2  E1F8               	bnz	l6841
  7814  0008B4                     l6845:
  7815                           
  7816                           ; BSR set to: 1
  7817  0008B4  5187               	movf	___fttol@sign1& (0+255),w,b
  7818  0008B6  E008               	bz	l6849
  7819                           
  7820                           ; BSR set to: 1
  7821  0008B8  1F8B               	comf	(___fttol@lval+3)& (0+255),f,b
  7822  0008BA  1F8A               	comf	(___fttol@lval+2)& (0+255),f,b
  7823  0008BC  1F89               	comf	(___fttol@lval+1)& (0+255),f,b
  7824  0008BE  6D88               	negf	___fttol@lval& (0+255),b
  7825  0008C0  0E00               	movlw	0
  7826  0008C2  2389               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7827  0008C4  238A               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7828  0008C6  238B               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7829  0008C8                     l6849:
  7830                           
  7831                           ; BSR set to: 1
  7832  0008C8  C188  F0B5         	movff	___fttol@lval,?___fttol
  7833  0008CC  C189  F0B6         	movff	___fttol@lval+1,?___fttol+1
  7834  0008D0  C18A  F0B7         	movff	___fttol@lval+2,?___fttol+2
  7835  0008D4  C18B  F0B8         	movff	___fttol@lval+3,?___fttol+3
  7836  0008D8  0012               	return		;funcret
  7837  0008DA                     __end_of___fttol:
  7838                           	opt stack 0
  7839                           tblptru	equ	0xFF8
  7840                           tblptrh	equ	0xFF7
  7841                           tblptrl	equ	0xFF6
  7842                           tablat	equ	0xFF5
  7843                           prodh	equ	0xFF4
  7844                           prodl	equ	0xFF3
  7845                           intcon	equ	0xFF2
  7846                           intcon2	equ	0xFF1
  7847                           intcon3	equ	0xFF0
  7848                           postinc0	equ	0xFEE
  7849                           wreg	equ	0xFE8
  7850                           postdec1	equ	0xFE5
  7851                           fsr1l	equ	0xFE1
  7852                           postinc2	equ	0xFDE
  7853                           postdec2	equ	0xFDD
  7854                           fsr2h	equ	0xFDA
  7855                           fsr2l	equ	0xFD9
  7856                           status	equ	0xFD8
  7857                           
  7858 ;; *************** function ___ftmul *****************
  7859 ;; Defined at:
  7860 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  7861 ;; Parameters:    Size  Location     Type
  7862 ;;  f1              3    0[BANK1 ] float 
  7863 ;;  f2              3    3[BANK1 ] float 
  7864 ;; Auto vars:     Size  Location     Type
  7865 ;;  f3_as_produc    3   11[BANK1 ] unsigned um
  7866 ;;  sign            1   10[BANK1 ] unsigned char 
  7867 ;;  exp             1    9[BANK1 ] unsigned char 
  7868 ;;  cntr            1    0        unsigned char 
  7869 ;; Return value:  Size  Location     Type
  7870 ;;                  3    0[BANK1 ] float 
  7871 ;; Registers used:
  7872 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7873 ;; Tracked objects:
  7874 ;;		On entry : F/1
  7875 ;;		On exit  : E/0
  7876 ;;		Unchanged: 0/0
  7877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7878 ;;      Params:         0       0       6       0       0
  7879 ;;      Locals:         0       0       5       0       0
  7880 ;;      Temps:          0       0       3       0       0
  7881 ;;      Totals:         0       0      14       0       0
  7882 ;;Total ram usage:       14 bytes
  7883 ;; Hardware stack levels used:    1
  7884 ;; Hardware stack levels required when called:   13
  7885 ;; This function calls:
  7886 ;;		___ftpack
  7887 ;; This function is called by:
  7888 ;;		_RF_LoadCode
  7889 ;;		_IR_LoadCode
  7890 ;; This function uses a non-reentrant model
  7891 ;;
  7892                           
  7893                           	psect	text54
  7894  000588                     __ptext54:
  7895                           	opt stack 0
  7896  000588                     ___ftmul:
  7897                           	opt stack 16
  7898                           
  7899                           ; BSR set to: 1
  7900                           
  7901                           ;incstack = 0
  7902  000588  C189  F18D         	movff	___ftmul@f1+2,??___ftmul
  7903  00058C  6B8E               	clrf	(??___ftmul+1)& (0+255),b
  7904  00058E  6B8F               	clrf	(??___ftmul+2)& (0+255),b
  7905  000590  3588               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7906  000592  378D               	rlcf	??___ftmul& (0+255),f,b
  7907  000594  E301               	bnc	u7271
  7908  000596  818E               	bsf	(??___ftmul+1)& (0+255),0,b
  7909  000598                     u7271:
  7910  000598  518D               	movf	??___ftmul& (0+255),w,b
  7911  00059A  6F90               	movwf	___ftmul@exp& (0+255),b
  7912  00059C  5190               	movf	___ftmul@exp& (0+255),w,b
  7913  00059E  E104               	bnz	l6779
  7914                           
  7915                           ; BSR set to: 1
  7916  0005A0  6B87               	clrf	?___ftmul& (0+255),b
  7917  0005A2  6B88               	clrf	(?___ftmul+1)& (0+255),b
  7918  0005A4  6B89               	clrf	(?___ftmul+2)& (0+255),b
  7919  0005A6  0012               	return	
  7920  0005A8                     l6779:
  7921                           
  7922                           ; BSR set to: 1
  7923  0005A8  C18C  F18D         	movff	___ftmul@f2+2,??___ftmul
  7924  0005AC  6B8E               	clrf	(??___ftmul+1)& (0+255),b
  7925  0005AE  6B8F               	clrf	(??___ftmul+2)& (0+255),b
  7926  0005B0  358B               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7927  0005B2  378D               	rlcf	??___ftmul& (0+255),f,b
  7928  0005B4  E301               	bnc	u7291
  7929  0005B6  818E               	bsf	(??___ftmul+1)& (0+255),0,b
  7930  0005B8                     u7291:
  7931  0005B8  518D               	movf	??___ftmul& (0+255),w,b
  7932  0005BA  6F91               	movwf	___ftmul@sign& (0+255),b
  7933  0005BC  5191               	movf	___ftmul@sign& (0+255),w,b
  7934  0005BE  E104               	bnz	l6783
  7935                           
  7936                           ; BSR set to: 1
  7937  0005C0  6B87               	clrf	?___ftmul& (0+255),b
  7938  0005C2  6B88               	clrf	(?___ftmul+1)& (0+255),b
  7939  0005C4  6B89               	clrf	(?___ftmul+2)& (0+255),b
  7940  0005C6  0012               	return	
  7941  0005C8                     l6783:
  7942                           
  7943                           ; BSR set to: 1
  7944  0005C8  5191               	movf	___ftmul@sign& (0+255),w,b
  7945  0005CA  0F7B               	addlw	123
  7946  0005CC  2790               	addwf	___ftmul@exp& (0+255),f,b
  7947                           
  7948                           ; BSR set to: 1
  7949  0005CE  C189  F191         	movff	___ftmul@f1+2,___ftmul@sign
  7950  0005D2  518C               	movf	(___ftmul@f2+2)& (0+255),w,b
  7951  0005D4  1B91               	xorwf	___ftmul@sign& (0+255),f,b
  7952  0005D6  0E80               	movlw	128
  7953  0005D8  1791               	andwf	___ftmul@sign& (0+255),f,b
  7954                           
  7955                           ; BSR set to: 1
  7956  0005DA  8F88               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7957                           
  7958                           ; BSR set to: 1
  7959  0005DC  8F8B               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7960                           
  7961                           ; BSR set to: 1
  7962  0005DE  6B8C               	clrf	(___ftmul@f2+2)& (0+255),b
  7963                           
  7964                           ; BSR set to: 1
  7965                           
  7966                           ; BSR set to: 1
  7967  0005E0  6B89               	clrf	(___ftmul@f1+2)& (0+255),b
  7968                           
  7969                           ; BSR set to: 1
  7970  0005E2  5187               	movf	___ftmul@f1& (0+255),w,b
  7971  0005E4  038A               	mulwf	___ftmul@f2& (0+255),b
  7972  0005E6  CFF4 FFF3          	movff	prodh,prodl
  7973  0005EA  6AF4               	clrf	prodh,c
  7974  0005EC  CFF3 F192          	movff	prodl,___ftmul@f3_as_product
  7975  0005F0  CFF4 F193          	movff	prodh,___ftmul@f3_as_product+1
  7976  0005F4  6B94               	clrf	(___ftmul@f3_as_product+2)& (0+255),b
  7977                           
  7978                           ; BSR set to: 1
  7979  0005F6  5187               	movf	___ftmul@f1& (0+255),w,b
  7980  0005F8  038B               	mulwf	(___ftmul@f2+1)& (0+255),b
  7981  0005FA  50F3               	movf	prodl,w,c
  7982  0005FC  2792               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7983  0005FE  50F4               	movf	prodh,w,c
  7984  000600  2393               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7985  000602  0E00               	movlw	0
  7986  000604  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7987                           
  7988                           ; BSR set to: 1
  7989  000606  5188               	movf	(___ftmul@f1+1)& (0+255),w,b
  7990  000608  038A               	mulwf	___ftmul@f2& (0+255),b
  7991  00060A  50F3               	movf	prodl,w,c
  7992  00060C  2792               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7993  00060E  50F4               	movf	prodh,w,c
  7994  000610  2393               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7995  000612  0E00               	movlw	0
  7996  000614  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7997                           
  7998                           ; BSR set to: 1
  7999  000616  5188               	movf	(___ftmul@f1+1)& (0+255),w,b
  8000  000618  038B               	mulwf	(___ftmul@f2+1)& (0+255),b
  8001  00061A  50F3               	movf	prodl,w,c
  8002  00061C  2793               	addwf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8003  00061E  50F4               	movf	prodh,w,c
  8004  000620  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8005                           
  8006                           ; BSR set to: 1
  8007  000622  AF94               	btfss	(___ftmul@f3_as_product+2)& (0+255),7,b
  8008  000624  D005               	goto	l1401
  8009                           
  8010                           ; BSR set to: 1
  8011  000626  90D8               	bcf	status,0,c
  8012  000628  3394               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8013  00062A  3393               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8014  00062C  3392               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8015  00062E  2B90               	incf	___ftmul@exp& (0+255),f,b
  8016  000630                     l1401:
  8017                           
  8018                           ; BSR set to: 1
  8019  000630  90D8               	bcf	status,0,c
  8020  000632  3394               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8021  000634  3393               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8022  000636  3392               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8023                           
  8024                           ; BSR set to: 1
  8025  000638  C192  F0B5         	movff	___ftmul@f3_as_product,___ftpack@arg
  8026  00063C  C193  F0B6         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8027  000640  C194  F0B7         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8028  000644  C190  F0B8         	movff	___ftmul@exp,___ftpack@exp
  8029  000648  C191  F0B9         	movff	___ftmul@sign,___ftpack@sign
  8030  00064C  EC66  F007         	call	___ftpack	;wreg free
  8031  000650  C0B5  F187         	movff	?___ftpack,?___ftmul
  8032  000654  C0B6  F188         	movff	?___ftpack+1,?___ftmul+1
  8033  000658  C0B7  F189         	movff	?___ftpack+2,?___ftmul+2
  8034  00065C  0012               	return		;funcret
  8035  00065E                     __end_of___ftmul:
  8036                           	opt stack 0
  8037                           tblptru	equ	0xFF8
  8038                           tblptrh	equ	0xFF7
  8039                           tblptrl	equ	0xFF6
  8040                           tablat	equ	0xFF5
  8041                           prodh	equ	0xFF4
  8042                           prodl	equ	0xFF3
  8043                           intcon	equ	0xFF2
  8044                           intcon2	equ	0xFF1
  8045                           intcon3	equ	0xFF0
  8046                           postinc0	equ	0xFEE
  8047                           wreg	equ	0xFE8
  8048                           postdec1	equ	0xFE5
  8049                           fsr1l	equ	0xFE1
  8050                           postinc2	equ	0xFDE
  8051                           postdec2	equ	0xFDD
  8052                           fsr2h	equ	0xFDA
  8053                           fsr2l	equ	0xFD9
  8054                           status	equ	0xFD8
  8055                           
  8056 ;; *************** function ___ftpack *****************
  8057 ;; Defined at:
  8058 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  8059 ;; Parameters:    Size  Location     Type
  8060 ;;  arg             3   53[BANK0 ] unsigned um
  8061 ;;  exp             1   56[BANK0 ] unsigned char 
  8062 ;;  sign            1   57[BANK0 ] unsigned char 
  8063 ;; Auto vars:     Size  Location     Type
  8064 ;;		None
  8065 ;; Return value:  Size  Location     Type
  8066 ;;                  3   53[BANK0 ] float 
  8067 ;; Registers used:
  8068 ;;		wreg, status,2, status,0
  8069 ;; Tracked objects:
  8070 ;;		On entry : E/0
  8071 ;;		On exit  : F/0
  8072 ;;		Unchanged: 0/0
  8073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8074 ;;      Params:         0       5       0       0       0
  8075 ;;      Locals:         0       0       0       0       0
  8076 ;;      Temps:          0       3       0       0       0
  8077 ;;      Totals:         0       8       0       0       0
  8078 ;;Total ram usage:        8 bytes
  8079 ;; Hardware stack levels used:    1
  8080 ;; Hardware stack levels required when called:   12
  8081 ;; This function calls:
  8082 ;;		Nothing
  8083 ;; This function is called by:
  8084 ;;		___ftmul
  8085 ;;		___lwtoft
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           	psect	text55
  8090  000ECC                     __ptext55:
  8091                           	opt stack 0
  8092  000ECC                     ___ftpack:
  8093                           	opt stack 16
  8094                           
  8095                           ;incstack = 0
  8096  000ECC  0100               	movlb	0	; () banked
  8097  000ECE  51B8               	movf	___ftpack@exp& (0+255),w,b
  8098  000ED0  E004               	bz	l1317
  8099                           
  8100                           ; BSR set to: 0
  8101  000ED2  51B5               	movf	___ftpack@arg& (0+255),w,b
  8102  000ED4  11B6               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  8103  000ED6  11B7               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  8104  000ED8  E109               	bnz	l4703
  8105  000EDA                     l1317:
  8106                           
  8107                           ; BSR set to: 0
  8108  000EDA  6BB5               	clrf	?___ftpack& (0+255),b
  8109  000EDC  6BB6               	clrf	(?___ftpack+1)& (0+255),b
  8110  000EDE  6BB7               	clrf	(?___ftpack+2)& (0+255),b
  8111  000EE0  0012               	return	
  8112  000EE2                     l4701:
  8113                           
  8114                           ; BSR set to: 0
  8115  000EE2  2BB8               	incf	___ftpack@exp& (0+255),f,b
  8116  000EE4  90D8               	bcf	status,0,c
  8117  000EE6  33B7               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8118  000EE8  33B6               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8119  000EEA  33B5               	rrcf	___ftpack@arg& (0+255),f,b
  8120  000EEC                     l4703:
  8121                           
  8122                           ; BSR set to: 0
  8123  000EEC  6BBA               	clrf	??___ftpack& (0+255),b
  8124  000EEE  6BBB               	clrf	(??___ftpack+1)& (0+255),b
  8125  000EF0  0EFE               	movlw	254
  8126  000EF2  15B7               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8127  000EF4  6FBC               	movwf	(??___ftpack+2)& (0+255),b
  8128  000EF6  51BA               	movf	??___ftpack& (0+255),w,b
  8129  000EF8  11BB               	iorwf	(??___ftpack+1)& (0+255),w,b
  8130  000EFA  11BC               	iorwf	(??___ftpack+2)& (0+255),w,b
  8131  000EFC  E00A               	bz	l4709
  8132  000EFE  D7F1               	goto	l4701
  8133  000F00                     l4705:
  8134                           
  8135                           ; BSR set to: 0
  8136  000F00  2BB8               	incf	___ftpack@exp& (0+255),f,b
  8137                           
  8138                           ; BSR set to: 0
  8139  000F02  2BB5               	incf	___ftpack@arg& (0+255),f,b
  8140  000F04  0E00               	movlw	0
  8141  000F06  23B6               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  8142  000F08  23B7               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  8143  000F0A  90D8               	bcf	status,0,c
  8144  000F0C  33B7               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8145  000F0E  33B6               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8146  000F10  33B5               	rrcf	___ftpack@arg& (0+255),f,b
  8147  000F12                     l4709:
  8148                           
  8149                           ; BSR set to: 0
  8150  000F12  6BBA               	clrf	??___ftpack& (0+255),b
  8151  000F14  6BBB               	clrf	(??___ftpack+1)& (0+255),b
  8152  000F16  51B7               	movf	(___ftpack@arg+2)& (0+255),w,b
  8153  000F18  6FBC               	movwf	(??___ftpack+2)& (0+255),b
  8154  000F1A  51BA               	movf	??___ftpack& (0+255),w,b
  8155  000F1C  11BB               	iorwf	(??___ftpack+1)& (0+255),w,b
  8156  000F1E  11BC               	iorwf	(??___ftpack+2)& (0+255),w,b
  8157  000F20  E006               	bz	l4713
  8158  000F22  D7EE               	goto	l4705
  8159  000F24                     l4711:
  8160                           
  8161                           ; BSR set to: 0
  8162  000F24  07B8               	decf	___ftpack@exp& (0+255),f,b
  8163  000F26  90D8               	bcf	status,0,c
  8164  000F28  37B5               	rlcf	___ftpack@arg& (0+255),f,b
  8165  000F2A  37B6               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  8166  000F2C  37B7               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  8167  000F2E                     l4713:
  8168                           
  8169                           ; BSR set to: 0
  8170  000F2E  BFB6               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  8171  000F30  D003               	goto	l1329
  8172                           
  8173                           ; BSR set to: 0
  8174  000F32  0E02               	movlw	2
  8175  000F34  61B8               	cpfslt	___ftpack@exp& (0+255),b
  8176  000F36  D7F6               	goto	l4711
  8177  000F38                     l1329:
  8178                           
  8179                           ; BSR set to: 0
  8180  000F38  A1B8               	btfss	___ftpack@exp& (0+255),0,b
  8181                           
  8182                           ; BSR set to: 0
  8183  000F3A  9FB6               	bcf	(___ftpack@arg+1)& (0+255),7,b
  8184                           
  8185                           ; BSR set to: 0
  8186  000F3C  90D8               	bcf	status,0,c
  8187  000F3E  33B8               	rrcf	___ftpack@exp& (0+255),f,b
  8188                           
  8189                           ; BSR set to: 0
  8190  000F40  51B8               	movf	___ftpack@exp& (0+255),w,b
  8191  000F42  13B7               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  8192                           
  8193                           ; BSR set to: 0
  8194  000F44  51B9               	movf	___ftpack@sign& (0+255),w,b
  8195  000F46  E001               	bz	l4727
  8196                           
  8197                           ; BSR set to: 0
  8198  000F48  8FB7               	bsf	(___ftpack@arg+2)& (0+255),7,b
  8199  000F4A                     l4727:
  8200                           
  8201                           ; BSR set to: 0
  8202  000F4A  C0B5  F0B5         	movff	___ftpack@arg,?___ftpack
  8203  000F4E  C0B6  F0B6         	movff	___ftpack@arg+1,?___ftpack+1
  8204  000F52  C0B7  F0B7         	movff	___ftpack@arg+2,?___ftpack+2
  8205                           
  8206                           ; BSR set to: 0
  8207  000F56  0012               	return		;funcret
  8208  000F58                     __end_of___ftpack:
  8209                           	opt stack 0
  8210                           tblptru	equ	0xFF8
  8211                           tblptrh	equ	0xFF7
  8212                           tblptrl	equ	0xFF6
  8213                           tablat	equ	0xFF5
  8214                           prodh	equ	0xFF4
  8215                           prodl	equ	0xFF3
  8216                           intcon	equ	0xFF2
  8217                           intcon2	equ	0xFF1
  8218                           intcon3	equ	0xFF0
  8219                           postinc0	equ	0xFEE
  8220                           wreg	equ	0xFE8
  8221                           postdec1	equ	0xFE5
  8222                           fsr1l	equ	0xFE1
  8223                           postinc2	equ	0xFDE
  8224                           postdec2	equ	0xFDD
  8225                           fsr2h	equ	0xFDA
  8226                           fsr2l	equ	0xFD9
  8227                           status	equ	0xFD8
  8228                           
  8229 ;; *************** function ___ftge *****************
  8230 ;; Defined at:
  8231 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
  8232 ;; Parameters:    Size  Location     Type
  8233 ;;  ff1             3   53[BANK0 ] float 
  8234 ;;  ff2             3   56[BANK0 ] float 
  8235 ;; Auto vars:     Size  Location     Type
  8236 ;;		None
  8237 ;; Return value:  Size  Location     Type
  8238 ;;		None               void
  8239 ;; Registers used:
  8240 ;;		wreg, status,2, status,0
  8241 ;; Tracked objects:
  8242 ;;		On entry : E/0
  8243 ;;		On exit  : F/0
  8244 ;;		Unchanged: 0/0
  8245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8246 ;;      Params:         0       6       0       0       0
  8247 ;;      Locals:         0       0       0       0       0
  8248 ;;      Temps:          0       3       0       0       0
  8249 ;;      Totals:         0       9       0       0       0
  8250 ;;Total ram usage:        9 bytes
  8251 ;; Hardware stack levels used:    1
  8252 ;; Hardware stack levels required when called:   12
  8253 ;; This function calls:
  8254 ;;		Nothing
  8255 ;; This function is called by:
  8256 ;;		_main
  8257 ;;		_RF_LoadCode
  8258 ;;		_IR_LoadCode
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           	psect	text56
  8263  001290                     __ptext56:
  8264                           	opt stack 0
  8265  001290                     ___ftge:
  8266                           	opt stack 18
  8267                           
  8268                           ; BSR set to: 0
  8269                           ;incstack = 0
  8270  001290  0100               	movlb	0	; () banked
  8271  001292  AFB7               	btfss	(___ftge@ff1+2)& (0+255),7,b
  8272  001294  D00D               	goto	l5571
  8273                           
  8274                           ; BSR set to: 0
  8275  001296  6BBB               	clrf	??___ftge& (0+255),b
  8276  001298  6BBC               	clrf	(??___ftge+1)& (0+255),b
  8277  00129A  0E80               	movlw	128
  8278  00129C  6FBD               	movwf	(??___ftge+2)& (0+255),b
  8279  00129E  51B5               	movf	___ftge@ff1& (0+255),w,b
  8280  0012A0  5DBB               	subwf	??___ftge& (0+255),w,b
  8281  0012A2  6FB5               	movwf	___ftge@ff1& (0+255),b
  8282  0012A4  51B6               	movf	(___ftge@ff1+1)& (0+255),w,b
  8283  0012A6  59BC               	subwfb	(??___ftge+1)& (0+255),w,b
  8284  0012A8  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  8285  0012AA  51B7               	movf	(___ftge@ff1+2)& (0+255),w,b
  8286  0012AC  59BD               	subwfb	(??___ftge+2)& (0+255),w,b
  8287  0012AE  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  8288  0012B0                     l5571:
  8289                           
  8290                           ; BSR set to: 0
  8291  0012B0  AFBA               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8292  0012B2  D00D               	goto	l5575
  8293                           
  8294                           ; BSR set to: 0
  8295  0012B4  6BBB               	clrf	??___ftge& (0+255),b
  8296  0012B6  6BBC               	clrf	(??___ftge+1)& (0+255),b
  8297  0012B8  0E80               	movlw	128
  8298  0012BA  6FBD               	movwf	(??___ftge+2)& (0+255),b
  8299  0012BC  51B8               	movf	___ftge@ff2& (0+255),w,b
  8300  0012BE  5DBB               	subwf	??___ftge& (0+255),w,b
  8301  0012C0  6FB8               	movwf	___ftge@ff2& (0+255),b
  8302  0012C2  51B9               	movf	(___ftge@ff2+1)& (0+255),w,b
  8303  0012C4  59BC               	subwfb	(??___ftge+1)& (0+255),w,b
  8304  0012C6  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  8305  0012C8  51BA               	movf	(___ftge@ff2+2)& (0+255),w,b
  8306  0012CA  59BD               	subwfb	(??___ftge+2)& (0+255),w,b
  8307  0012CC  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  8308  0012CE                     l5575:
  8309                           
  8310                           ; BSR set to: 0
  8311  0012CE  0E80               	movlw	128
  8312  0012D0  1BB7               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8313                           
  8314                           ; BSR set to: 0
  8315  0012D2  1BBA               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8316  0012D4  51B8               	movf	___ftge@ff2& (0+255),w,b
  8317  0012D6  5DB5               	subwf	___ftge@ff1& (0+255),w,b
  8318  0012D8  51B9               	movf	(___ftge@ff2+1)& (0+255),w,b
  8319  0012DA  59B6               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8320  0012DC  51BA               	movf	(___ftge@ff2+2)& (0+255),w,b
  8321  0012DE  59B7               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8322  0012E0  E202               	bc	l5581
  8323                           
  8324                           ; BSR set to: 0
  8325  0012E2  90D8               	bcf	status,0,c
  8326  0012E4  0012               	return	
  8327  0012E6                     l5581:
  8328                           
  8329                           ; BSR set to: 0
  8330  0012E6  80D8               	bsf	status,0,c
  8331                           
  8332                           ; BSR set to: 0
  8333  0012E8  0012               	return		;funcret
  8334  0012EA                     __end_of___ftge:
  8335                           	opt stack 0
  8336                           tblptru	equ	0xFF8
  8337                           tblptrh	equ	0xFF7
  8338                           tblptrl	equ	0xFF6
  8339                           tablat	equ	0xFF5
  8340                           prodh	equ	0xFF4
  8341                           prodl	equ	0xFF3
  8342                           intcon	equ	0xFF2
  8343                           intcon2	equ	0xFF1
  8344                           intcon3	equ	0xFF0
  8345                           postinc0	equ	0xFEE
  8346                           wreg	equ	0xFE8
  8347                           postdec1	equ	0xFE5
  8348                           fsr1l	equ	0xFE1
  8349                           postinc2	equ	0xFDE
  8350                           postdec2	equ	0xFDD
  8351                           fsr2h	equ	0xFDA
  8352                           fsr2l	equ	0xFD9
  8353                           status	equ	0xFD8
  8354                           
  8355 ;; *************** function _IR_CalculateCodesize *****************
  8356 ;; Defined at:
  8357 ;;		line 190 in file "IR.c"
  8358 ;; Parameters:    Size  Location     Type
  8359 ;;  Code            3   53[BANK0 ] PTR const unsigned int 
  8360 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), 
  8361 ;; Auto vars:     Size  Location     Type
  8362 ;;  i               1   59[BANK0 ] unsigned char 
  8363 ;; Return value:  Size  Location     Type
  8364 ;;                  1    wreg      unsigned char 
  8365 ;; Registers used:
  8366 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8367 ;; Tracked objects:
  8368 ;;		On entry : F/0
  8369 ;;		On exit  : F/0
  8370 ;;		Unchanged: 0/0
  8371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8372 ;;      Params:         0       3       0       0       0
  8373 ;;      Locals:         0       1       0       0       0
  8374 ;;      Temps:          0       3       0       0       0
  8375 ;;      Totals:         0       7       0       0       0
  8376 ;;Total ram usage:        7 bytes
  8377 ;; Hardware stack levels used:    1
  8378 ;; Hardware stack levels required when called:   12
  8379 ;; This function calls:
  8380 ;;		Nothing
  8381 ;; This function is called by:
  8382 ;;		_IR_LoadCode
  8383 ;; This function uses a non-reentrant model
  8384 ;;
  8385                           
  8386                           	psect	text57
  8387  001468                     __ptext57:
  8388                           	opt stack 0
  8389  001468                     _IR_CalculateCodesize:
  8390                           	opt stack 17
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;IR.c: 192: unsigned char i;
  8394                           ;IR.c: 194: for(i=0; i<96;i++)
  8395                           
  8396                           ; BSR set to: 0
  8397                           ;incstack = 0
  8398  001468  6BBB               	clrf	IR_CalculateCodesize@i& (0+255),b
  8399  00146A                     l5467:
  8400                           
  8401                           ; BSR set to: 0
  8402                           ;IR.c: 195: {
  8403                           ;IR.c: 196: if(Code[i] == 0)
  8404  00146A  51BB               	movf	IR_CalculateCodesize@i& (0+255),w,b
  8405  00146C  0D02               	mullw	2
  8406  00146E  50F3               	movf	prodl,w,c
  8407  001470  25B5               	addwf	IR_CalculateCodesize@Code& (0+255),w,b
  8408  001472  6FB8               	movwf	??_IR_CalculateCodesize& (0+255),b
  8409  001474  50F4               	movf	prodh,w,c
  8410  001476  21B6               	addwfc	(IR_CalculateCodesize@Code+1)& (0+255),w,b
  8411  001478  6FB9               	movwf	(??_IR_CalculateCodesize+1)& (0+255),b
  8412  00147A  0E00               	movlw	0
  8413  00147C  21B7               	addwfc	(IR_CalculateCodesize@Code+2)& (0+255),w,b
  8414  00147E  6FBA               	movwf	(??_IR_CalculateCodesize+2)& (0+255),b
  8415  001480  C0B8  FFF6         	movff	??_IR_CalculateCodesize,tblptrl
  8416  001484  C0B9  FFF7         	movff	??_IR_CalculateCodesize+1,tblptrh
  8417  001488  C0BA  FFF8         	movff	??_IR_CalculateCodesize+2,tblptru
  8418  00148C  0009               	tblrd		*+
  8419  00148E  50F5               	movf	tablat,w,c
  8420  001490  0009               	tblrd		*+
  8421  001492  10F5               	iorwf	tablat,w,c
  8422  001494  E102               	bnz	l5473
  8423                           
  8424                           ; BSR set to: 0
  8425                           ;IR.c: 197: {
  8426                           ;IR.c: 198: return i;
  8427  001496  51BB               	movf	IR_CalculateCodesize@i& (0+255),w,b
  8428  001498  0012               	return	
  8429  00149A                     l5473:
  8430                           
  8431                           ; BSR set to: 0
  8432  00149A  2BBB               	incf	IR_CalculateCodesize@i& (0+255),f,b
  8433                           
  8434                           ; BSR set to: 0
  8435  00149C  0E5F               	movlw	95
  8436  00149E  65BB               	cpfsgt	IR_CalculateCodesize@i& (0+255),b
  8437  0014A0  D7E4               	goto	l5467
  8438  0014A2  0C60               	retlw	96
  8439  0014A4                     __end_of_IR_CalculateCodesize:
  8440                           	opt stack 0
  8441                           tblptru	equ	0xFF8
  8442                           tblptrh	equ	0xFF7
  8443                           tblptrl	equ	0xFF6
  8444                           tablat	equ	0xFF5
  8445                           prodh	equ	0xFF4
  8446                           prodl	equ	0xFF3
  8447                           intcon	equ	0xFF2
  8448                           intcon2	equ	0xFF1
  8449                           intcon3	equ	0xFF0
  8450                           postinc0	equ	0xFEE
  8451                           wreg	equ	0xFE8
  8452                           postdec1	equ	0xFE5
  8453                           fsr1l	equ	0xFE1
  8454                           postinc2	equ	0xFDE
  8455                           postdec2	equ	0xFDD
  8456                           fsr2h	equ	0xFDA
  8457                           fsr2l	equ	0xFD9
  8458                           status	equ	0xFD8
  8459                           
  8460 ;; *************** function _ADC_Start *****************
  8461 ;; Defined at:
  8462 ;;		line 145 in file "ADC.c"
  8463 ;; Parameters:    Size  Location     Type
  8464 ;;		None
  8465 ;; Auto vars:     Size  Location     Type
  8466 ;;		None
  8467 ;; Return value:  Size  Location     Type
  8468 ;;		None               void
  8469 ;; Registers used:
  8470 ;;		None
  8471 ;; Tracked objects:
  8472 ;;		On entry : F/1
  8473 ;;		On exit  : F/1
  8474 ;;		Unchanged: F/0
  8475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8476 ;;      Params:         0       0       0       0       0
  8477 ;;      Locals:         0       0       0       0       0
  8478 ;;      Temps:          0       0       0       0       0
  8479 ;;      Totals:         0       0       0       0       0
  8480 ;;Total ram usage:        0 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; Hardware stack levels required when called:   12
  8483 ;; This function calls:
  8484 ;;		Nothing
  8485 ;; This function is called by:
  8486 ;;		_main
  8487 ;; This function uses a non-reentrant model
  8488 ;;
  8489                           
  8490                           	psect	text58
  8491  001BE2                     __ptext58:
  8492                           	opt stack 0
  8493  001BE2                     _ADC_Start:
  8494                           	opt stack 18
  8495                           
  8496                           ; BSR set to: 1
  8497                           ;ADC.c: 147: ADCON0bits.GO = 1;
  8498                           
  8499                           ; BSR set to: 0
  8500                           ;incstack = 0
  8501  001BE2  82C2               	bsf	4034,1,c	;volatile
  8502                           
  8503                           ; BSR set to: 1
  8504  001BE4  0012               	return		;funcret
  8505  001BE6                     __end_of_ADC_Start:
  8506                           	opt stack 0
  8507                           tblptru	equ	0xFF8
  8508                           tblptrh	equ	0xFF7
  8509                           tblptrl	equ	0xFF6
  8510                           tablat	equ	0xFF5
  8511                           prodh	equ	0xFF4
  8512                           prodl	equ	0xFF3
  8513                           intcon	equ	0xFF2
  8514                           intcon2	equ	0xFF1
  8515                           intcon3	equ	0xFF0
  8516                           postinc0	equ	0xFEE
  8517                           wreg	equ	0xFE8
  8518                           postdec1	equ	0xFE5
  8519                           fsr1l	equ	0xFE1
  8520                           postinc2	equ	0xFDE
  8521                           postdec2	equ	0xFDD
  8522                           fsr2h	equ	0xFDA
  8523                           fsr2l	equ	0xFD9
  8524                           status	equ	0xFD8
  8525                           
  8526 ;; *************** function _low_isr *****************
  8527 ;; Defined at:
  8528 ;;		line 126 in file "INTERRUPTS.c"
  8529 ;; Parameters:    Size  Location     Type
  8530 ;;		None
  8531 ;; Auto vars:     Size  Location     Type
  8532 ;;  IRtemp          2   87[COMRAM] unsigned int 
  8533 ;;  button_state    1   86[COMRAM] unsigned char 
  8534 ;;  IR_state        1    0        unsigned char 
  8535 ;; Return value:  Size  Location     Type
  8536 ;;		None               void
  8537 ;; Registers used:
  8538 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8539 ;; Tracked objects:
  8540 ;;		On entry : 0/0
  8541 ;;		On exit  : 0/0
  8542 ;;		Unchanged: 0/0
  8543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8544 ;;      Params:         0       0       0       0       0
  8545 ;;      Locals:         3       0       0       0       0
  8546 ;;      Temps:         11       0       0       0       0
  8547 ;;      Totals:        14       0       0       0       0
  8548 ;;Total ram usage:       14 bytes
  8549 ;; Hardware stack levels used:    1
  8550 ;; Hardware stack levels required when called:   11
  8551 ;; This function calls:
  8552 ;;		_ADC_CalculateVoltage
  8553 ;;		_IR_CheckCode
  8554 ;;		_IR_ResetData
  8555 ;;		_RF_Disable
  8556 ;;		_TMR_Timer1Start
  8557 ;;		_TMR_Timer1Status
  8558 ;;		_TMR_Timer2Start
  8559 ;;		i1_BUT_IR_PinChangeInt
  8560 ;;		i1_BUT_ReadButton
  8561 ;;		i1_IR_ReadReceiver
  8562 ;;		i1_RF_DataInt
  8563 ;;		i1_SYS_ActivityTimerReset
  8564 ;;		i1_TMR_ResetTimer1
  8565 ;;		i1_TMR_Timer1
  8566 ;;		i1_TMR_Timer2
  8567 ;; This function is called by:
  8568 ;;		Interrupt level 1
  8569 ;; This function uses a non-reentrant model
  8570 ;;
  8571                           
  8572                           	psect	intcodelo
  8573  000018                     __pintcodelo:
  8574                           	opt stack 0
  8575  000018                     _low_isr:
  8576                           	opt stack 13
  8577                           
  8578                           ; BSR set to: 1
  8579                           ;incstack = 0
  8580  000018  806E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  8581  00001A  CFD8 F04C          	movff	status,??_low_isr
  8582  00001E  CFE8 F04D          	movff	wreg,??_low_isr+1
  8583  000022  CFE0 F04E          	movff	bsr,??_low_isr+2
  8584  000026  CFD9 F04F          	movff	fsr2l,??_low_isr+3
  8585  00002A  CFDA F050          	movff	fsr2h,??_low_isr+4
  8586  00002E  CFF3 F051          	movff	prodl,??_low_isr+5
  8587  000032  CFF4 F052          	movff	prodh,??_low_isr+6
  8588  000036  CFF6 F053          	movff	tblptrl,??_low_isr+7
  8589  00003A  CFF7 F054          	movff	tblptrh,??_low_isr+8
  8590  00003E  CFF8 F055          	movff	tblptru,??_low_isr+9
  8591  000042  CFF5 F056          	movff	tablat,??_low_isr+10
  8592                           
  8593                           ;INTERRUPTS.c: 132: if(INTCONbits.RBIF && INTCONbits.RBIE)
  8594  000046  B0F2               	btfsc	intcon,0,c	;volatile
  8595  000048  A6F2               	btfss	intcon,3,c	;volatile
  8596  00004A  D08C               	goto	i1l219
  8597                           
  8598                           ;INTERRUPTS.c: 133: {
  8599                           ;INTERRUPTS.c: 138: button_state = BUT_ReadButton();
  8600  00004C  EC9C  F00B         	call	i1_BUT_ReadButton	;wreg free
  8601  000050  6E57               	movwf	low_isr@button_state,c
  8602                           
  8603                           ;INTERRUPTS.c: 139: IR_state = IR_ReadReceiver();
  8604  000052  EC07  F00C         	call	i1_IR_ReadReceiver	;wreg free
  8605  000056                     i14L__ptext60:
  8606                           	opt stack 0
  8607  000056                     i14Li1_SYS_ActivityTimerReset:
  8608                           	opt stack 0
  8609  000056                     i14Li1l6391:
  8610                           	opt stack 17
  8611                           
  8612                           ;SYSTEM.c: 62: Activity_Timer = 0;
  8613  000056  6A5A               	clrf	_Activity_Timer,c
  8614  000058  6A5B               	clrf	_Activity_Timer+1,c
  8615  00005A  6A5C               	clrf	_Activity_Timer+2,c
  8616  00005C  6A5D               	clrf	_Activity_Timer+3,c
  8617  00005E                     i14Li1l343:
  8618                           	opt stack 13
  8619                           
  8620                           ;INTERRUPTS.c: 141: if(ButtonChange)
  8621  00005E  5066               	movf	_ButtonChange,w,c
  8622  000060  E02C               	bz	i1l6651
  8623                           
  8624                           ;INTERRUPTS.c: 142: {
  8625                           ;INTERRUPTS.c: 144: TMR_Timer2(0);
  8626  000062  0E00               	movlw	0
  8627  000064  ECA8  F00D         	call	i1_TMR_Timer2
  8628                           
  8629                           ;INTERRUPTS.c: 145: if(button_state)
  8630  000068  5057               	movf	low_isr@button_state,w,c
  8631  00006A  E016               	bz	i1l6639
  8632                           
  8633                           ;INTERRUPTS.c: 146: {
  8634                           ;INTERRUPTS.c: 148: if(System_State == 8)
  8635  00006C  0E08               	movlw	8
  8636  00006E  0101               	movlb	1	; () banked
  8637  000070  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  8638  000072  E109               	bnz	i1l6635
  8639                           
  8640                           ; BSR set to: 1
  8641                           ;INTERRUPTS.c: 149: {
  8642                           ;INTERRUPTS.c: 150: Timer2Use = 17;
  8643  000074  0E11               	movlw	17
  8644  000076  6E6C               	movwf	_Timer2Use,c
  8645                           
  8646                           ; BSR set to: 1
  8647                           ;INTERRUPTS.c: 151: TMR_Timer2Start(400);
  8648  000078  0E01               	movlw	1
  8649  00007A  6E04               	movwf	TMR_Timer2Start@time+1,c
  8650  00007C  0E90               	movlw	144
  8651  00007E  6E03               	movwf	TMR_Timer2Start@time,c
  8652  000080  ECC8  F00C         	call	_TMR_Timer2Start	;wreg free
  8653                           
  8654                           ;INTERRUPTS.c: 152: }
  8655  000084  D018               	goto	i1l6649
  8656  000086                     i1l6635:
  8657                           
  8658                           ; BSR set to: 1
  8659                           ;INTERRUPTS.c: 153: else
  8660                           ;INTERRUPTS.c: 154: {
  8661                           ;INTERRUPTS.c: 155: Timer2Use = 19;
  8662  000086  0E13               	movlw	19
  8663  000088  6E6C               	movwf	_Timer2Use,c
  8664                           
  8665                           ; BSR set to: 1
  8666                           ;INTERRUPTS.c: 156: TMR_Timer2Start(8);
  8667  00008A  0E00               	movlw	0
  8668  00008C  6E04               	movwf	TMR_Timer2Start@time+1,c
  8669  00008E  0E08               	movlw	8
  8670  000090  6E03               	movwf	TMR_Timer2Start@time,c
  8671  000092  ECC8  F00C         	call	_TMR_Timer2Start	;wreg free
  8672  000096  D00F               	goto	i1l6649
  8673  000098                     i1l6639:
  8674                           
  8675                           ;INTERRUPTS.c: 159: else
  8676                           ;INTERRUPTS.c: 160: {
  8677                           ;INTERRUPTS.c: 161: if(System_State != 10)
  8678  000098  0E0A               	movlw	10
  8679  00009A  0101               	movlb	1	; () banked
  8680  00009C  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  8681  00009E  E003               	bz	i1l6645
  8682                           
  8683                           ; BSR set to: 1
  8684                           ;INTERRUPTS.c: 162: {
  8685                           ;INTERRUPTS.c: 164: Button_Data = 1;
  8686  0000A0  0E01               	movlw	1
  8687  0000A2  6F02               	movwf	_Button_Data& (0+255),b	;volatile
  8688  0000A4  D7F0               	goto	i1l6635
  8689  0000A6                     i1l6645:
  8690                           
  8691                           ; BSR set to: 1
  8692                           ;INTERRUPTS.c: 168: else
  8693                           ;INTERRUPTS.c: 169: {
  8694                           ;INTERRUPTS.c: 170: Timer2Use = 18;
  8695  0000A6  0E12               	movlw	18
  8696  0000A8  6E6C               	movwf	_Timer2Use,c
  8697                           
  8698                           ; BSR set to: 1
  8699                           ;INTERRUPTS.c: 171: TMR_Timer2Start(500);
  8700  0000AA  0E01               	movlw	1
  8701  0000AC  6E04               	movwf	TMR_Timer2Start@time+1,c
  8702  0000AE  0EF4               	movlw	244
  8703  0000B0  6E03               	movwf	TMR_Timer2Start@time,c
  8704  0000B2  ECC8  F00C         	call	_TMR_Timer2Start	;wreg free
  8705  0000B6                     i1l6649:
  8706                           
  8707                           ;INTERRUPTS.c: 172: }
  8708                           ;INTERRUPTS.c: 173: }
  8709                           ;INTERRUPTS.c: 174: ButtonChange = 0;
  8710  0000B6  6A66               	clrf	_ButtonChange,c
  8711                           
  8712                           ;INTERRUPTS.c: 175: }
  8713  0000B8  D053               	goto	i1l227
  8714  0000BA                     i1l6651:
  8715                           
  8716                           ;INTERRUPTS.c: 176: else if(IRChange)
  8717  0000BA  5067               	movf	_IRChange,w,c
  8718  0000BC  E050               	bz	i1l228
  8719                           
  8720                           ;INTERRUPTS.c: 177: {
  8721                           ;INTERRUPTS.c: 179: if(!TMR_Timer1Status())
  8722  0000BE  ECE7  F00D         	call	_TMR_Timer1Status	;wreg free
  8723  0000C2  0900               	iorlw	0
  8724  0000C4  E103               	bnz	i1l229
  8725                           
  8726                           ;INTERRUPTS.c: 180: {
  8727                           ;INTERRUPTS.c: 182: TMR_Timer1Start();
  8728  0000C6  EC81  F00D         	call	_TMR_Timer1Start	;wreg free
  8729                           
  8730                           ;INTERRUPTS.c: 183: }
  8731  0000CA  D047               	goto	i1l230
  8732  0000CC                     i1l229:
  8733                           
  8734                           ;INTERRUPTS.c: 184: else
  8735                           ;INTERRUPTS.c: 185: {
  8736                           ;INTERRUPTS.c: 186: IRtemp = TMR1L;
  8737  0000CC  CFCE F058          	movff	4046,low_isr@IRtemp	;volatile
  8738  0000D0  6A59               	clrf	low_isr@IRtemp+1,c
  8739                           
  8740                           ;INTERRUPTS.c: 187: IRtemp += (unsigned int)TMR1H << 8;
  8741  0000D2  50CF               	movf	4047,w,c	;volatile
  8742  0000D4  2659               	addwf	low_isr@IRtemp+1,f,c
  8743                           
  8744                           ;INTERRUPTS.c: 188: TMR_ResetTimer1();
  8745  0000D6  EC58  F00C         	call	i1_TMR_ResetTimer1	;wreg free
  8746                           
  8747                           ;INTERRUPTS.c: 189: if(!IRStarted)
  8748  0000DA  5069               	movf	_IRStarted,w,c
  8749  0000DC  E122               	bnz	i1l6681
  8750                           
  8751                           ;INTERRUPTS.c: 190: {
  8752                           ;INTERRUPTS.c: 191: if(System_State == 8)
  8753  0000DE  0E08               	movlw	8
  8754  0000E0  0101               	movlb	1	; () banked
  8755  0000E2  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  8756  0000E4  E110               	bnz	i1l6673
  8757                           
  8758                           ; BSR set to: 1
  8759                           ;INTERRUPTS.c: 192: {
  8760                           ;INTERRUPTS.c: 193: if(IRtemp >= IR_SyncLow && IRtemp <= IR_SyncHigh)
  8761  0000E6  5060               	movf	_IR_SyncLow,w,c
  8762  0000E8  5C58               	subwf	low_isr@IRtemp,w,c
  8763  0000EA  5061               	movf	_IR_SyncLow+1,w,c
  8764  0000EC  5859               	subwfb	low_isr@IRtemp+1,w,c
  8765  0000EE  E319               	bnc	i1l6681
  8766                           
  8767                           ; BSR set to: 1
  8768  0000F0  5058               	movf	low_isr@IRtemp,w,c
  8769  0000F2  5C5E               	subwf	_IR_SyncHigh,w,c
  8770  0000F4  5059               	movf	low_isr@IRtemp+1,w,c
  8771  0000F6  585F               	subwfb	_IR_SyncHigh+1,w,c
  8772  0000F8  E314               	bnc	i1l6681
  8773                           
  8774                           ; BSR set to: 1
  8775                           ;INTERRUPTS.c: 194: {
  8776                           ;INTERRUPTS.c: 195: RF_DataInt(0);
  8777  0000FA  0E00               	movlw	0
  8778  0000FC  EC0E  F00D         	call	i1_RF_DataInt
  8779  000100                     i1l6671:
  8780                           
  8781                           ;INTERRUPTS.c: 196: IRStarted = 1;
  8782  000100  0E01               	movlw	1
  8783  000102  6E69               	movwf	_IRStarted,c
  8784  000104  D00E               	goto	i1l6681
  8785  000106                     i1l6673:
  8786                           
  8787                           ; BSR set to: 1
  8788                           ;INTERRUPTS.c: 199: else
  8789                           ;INTERRUPTS.c: 200: {
  8790                           ;INTERRUPTS.c: 201: if(IRtemp >= 6000 && IRtemp <= 10000)
  8791  000106  0E70               	movlw	112
  8792  000108  5C58               	subwf	low_isr@IRtemp,w,c
  8793  00010A  0E17               	movlw	23
  8794  00010C  5859               	subwfb	low_isr@IRtemp+1,w,c
  8795  00010E  E309               	bnc	i1l6681
  8796                           
  8797                           ; BSR set to: 1
  8798  000110  0E11               	movlw	17
  8799  000112  5C58               	subwf	low_isr@IRtemp,w,c
  8800  000114  0E27               	movlw	39
  8801  000116  5859               	subwfb	low_isr@IRtemp+1,w,c
  8802  000118  E204               	bc	i1l6681
  8803                           
  8804                           ; BSR set to: 1
  8805                           ;INTERRUPTS.c: 202: {
  8806                           ;INTERRUPTS.c: 203: RF_DataInt(0);
  8807  00011A  0E00               	movlw	0
  8808  00011C  EC0E  F00D         	call	i1_RF_DataInt
  8809  000120  D7EF               	goto	i1l6671
  8810  000122                     i1l6681:
  8811                           
  8812                           ;INTERRUPTS.c: 205: }
  8813                           ;INTERRUPTS.c: 206: }
  8814                           ;INTERRUPTS.c: 207: }
  8815                           ;INTERRUPTS.c: 208: if(IRStarted)
  8816  000122  5069               	movf	_IRStarted,w,c
  8817  000124  E01A               	bz	i1l230
  8818                           
  8819                           ;INTERRUPTS.c: 209: {
  8820                           ;INTERRUPTS.c: 210: RF_Disable();
  8821  000126  ECFC  F00C         	call	_RF_Disable	;wreg free
  8822                           
  8823                           ;INTERRUPTS.c: 211: if(IR_DataPlace < 96)
  8824  00012A  0E60               	movlw	96
  8825  00012C  606B               	cpfslt	_IR_DataPlace,c
  8826  00012E  D015               	goto	i1l230
  8827                           
  8828                           ;INTERRUPTS.c: 212: {
  8829                           ;INTERRUPTS.c: 213: IR_DataTiming[IR_DataPlace] = IRtemp;
  8830  000130  506B               	movf	_IR_DataPlace,w,c
  8831  000132  0D02               	mullw	2
  8832  000134  0E00               	movlw	low _IR_DataTiming
  8833  000136  24F3               	addwf	prodl,w,c
  8834  000138  6ED9               	movwf	fsr2l,c
  8835  00013A  0E02               	movlw	high _IR_DataTiming
  8836  00013C  20F4               	addwfc	prodh,w,c
  8837  00013E  6EDA               	movwf	fsr2h,c
  8838  000140  C058  FFDE         	movff	low_isr@IRtemp,postinc2
  8839  000144  C059  FFDD         	movff	low_isr@IRtemp+1,postdec2
  8840                           
  8841                           ;INTERRUPTS.c: 214: IR_DataPlace++;
  8842  000148  2A6B               	incf	_IR_DataPlace,f,c
  8843                           
  8844                           ;INTERRUPTS.c: 215: if(System_State == 8)
  8845  00014A  0E08               	movlw	8
  8846  00014C  0101               	movlb	1	; () banked
  8847  00014E  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  8848  000150  E104               	bnz	i1l230
  8849                           
  8850                           ; BSR set to: 1
  8851                           ;INTERRUPTS.c: 216: {
  8852                           ;INTERRUPTS.c: 217: if(IR_DataPlace >= IR_CodeSize)
  8853  000152  506A               	movf	_IR_CodeSize,w,c
  8854  000154  5C6B               	subwf	_IR_DataPlace,w,c
  8855  000156  E301               	bnc	i1l230
  8856                           
  8857                           ; BSR set to: 1
  8858                           ;INTERRUPTS.c: 218: {
  8859                           ;INTERRUPTS.c: 219: PIR1bits.TMR1IF = 1;
  8860  000158  809E               	bsf	3998,0,c	;volatile
  8861  00015A                     i1l230:
  8862                           
  8863                           ;INTERRUPTS.c: 220: }
  8864                           ;INTERRUPTS.c: 221: }
  8865                           ;INTERRUPTS.c: 222: }
  8866                           ;INTERRUPTS.c: 223: }
  8867                           ;INTERRUPTS.c: 224: }
  8868                           ;INTERRUPTS.c: 225: IRChange = 0;
  8869  00015A  6A67               	clrf	_IRChange,c
  8870                           
  8871                           ;INTERRUPTS.c: 226: }
  8872  00015C  D001               	goto	i1l227
  8873  00015E                     i1l228:
  8874                           
  8875                           ;INTERRUPTS.c: 227: else
  8876                           ;INTERRUPTS.c: 228: {
  8877                           ;INTERRUPTS.c: 230: __nop();
  8878  00015E  F000               	nop	
  8879  000160                     i1l227:
  8880                           
  8881                           ;INTERRUPTS.c: 231: }
  8882                           ;INTERRUPTS.c: 232: INTCONbits.RBIF = 0;
  8883  000160  90F2               	bcf	intcon,0,c	;volatile
  8884                           
  8885                           ;INTERRUPTS.c: 233: }
  8886  000162  D05A               	goto	i1l258
  8887  000164                     i1l219:
  8888                           
  8889                           ;INTERRUPTS.c: 234: else if(PIR1bits.TMR2IF && PIE1bits.TMR2IE)
  8890  000164  B29E               	btfsc	3998,1,c	;volatile
  8891  000166  A29D               	btfss	3997,1,c	;volatile
  8892  000168  D01E               	goto	i1l242
  8893                           
  8894                           ;INTERRUPTS.c: 235: {
  8895                           ;INTERRUPTS.c: 237: if(Timer2PostCount >= Timer2Post)
  8896  00016A  5062               	movf	_Timer2Post,w,c
  8897  00016C  5C64               	subwf	_Timer2PostCount,w,c
  8898  00016E  5063               	movf	_Timer2Post+1,w,c
  8899  000170  5865               	subwfb	_Timer2PostCount+1,w,c
  8900  000172  E311               	bnc	i15L__ptext60
  8901                           
  8902                           ;INTERRUPTS.c: 238: {
  8903                           ;INTERRUPTS.c: 239: TMR_Timer2(0);
  8904  000174  0E00               	movlw	0
  8905  000176  ECA8  F00D         	call	i1_TMR_Timer2
  8906                           
  8907                           ;INTERRUPTS.c: 240: if(Timer2Use == 17)
  8908  00017A  0E11               	movlw	17
  8909  00017C  186C               	xorwf	_Timer2Use,w,c
  8910  00017E  E102               	bnz	i1l6707
  8911                           
  8912                           ;INTERRUPTS.c: 241: {
  8913                           ;INTERRUPTS.c: 243: System_State = 10;
  8914  000180  0E0A               	movlw	10
  8915  000182  D004               	goto	L1
  8916  000184                     i1l6707:
  8917                           
  8918                           ;INTERRUPTS.c: 246: else if(Timer2Use == 18)
  8919  000184  0E12               	movlw	18
  8920  000186  186C               	xorwf	_Timer2Use,w,c
  8921  000188  E10C               	bnz	i1l6715
  8922                           
  8923                           ;INTERRUPTS.c: 247: {
  8924                           ;INTERRUPTS.c: 248: System_State = 8;
  8925  00018A  0E08               	movlw	8
  8926  00018C                     L1:
  8927  00018C  0101               	movlb	1	; () banked
  8928  00018E  6FAE               	movwf	_System_State& (0+255),b	;volatile
  8929                           
  8930                           ;INTERRUPTS.c: 249: System_State_Change = 1;
  8931  000190  0E01               	movlw	1
  8932  000192  6F06               	movwf	_System_State_Change& (0+255),b	;volatile
  8933  000194  D006               	goto	i1l6715
  8934  000196                     i15L__ptext60:
  8935                           	opt stack 0
  8936  000196                     i15Li1_SYS_ActivityTimerReset:
  8937                           	opt stack 0
  8938  000196                     i15Li1l6391:
  8939                           	opt stack 17
  8940                           
  8941                           ;SYSTEM.c: 62: Activity_Timer = 0;
  8942  000196  6A5A               	clrf	_Activity_Timer,c
  8943  000198  6A5B               	clrf	_Activity_Timer+1,c
  8944  00019A  6A5C               	clrf	_Activity_Timer+2,c
  8945  00019C  6A5D               	clrf	_Activity_Timer+3,c
  8946  00019E                     i15Li1l343:
  8947                           	opt stack 13
  8948                           
  8949                           ;INTERRUPTS.c: 255: Timer2PostCount++;
  8950  00019E  4A64               	infsnz	_Timer2PostCount,f,c
  8951  0001A0  2A65               	incf	_Timer2PostCount+1,f,c
  8952  0001A2                     i1l6715:
  8953                           
  8954                           ;INTERRUPTS.c: 256: }
  8955                           ;INTERRUPTS.c: 257: PIR1bits.TMR2IF = 0;
  8956  0001A2  929E               	bcf	3998,1,c	;volatile
  8957                           
  8958                           ;INTERRUPTS.c: 258: }
  8959  0001A4  D039               	goto	i1l258
  8960  0001A6                     i1l242:
  8961                           
  8962                           ;INTERRUPTS.c: 259: else if(PIR1bits.ADIF && PIE1bits.ADIE)
  8963  0001A6  BC9E               	btfsc	3998,6,c	;volatile
  8964  0001A8  AC9D               	btfss	3997,6,c	;volatile
  8965  0001AA  D004               	goto	i1l249
  8966                           
  8967                           ;INTERRUPTS.c: 260: {
  8968                           ;INTERRUPTS.c: 262: ADC_CalculateVoltage();
  8969  0001AC  EC83  F005         	call	_ADC_CalculateVoltage	;wreg free
  8970                           
  8971                           ;INTERRUPTS.c: 263: PIR1bits.ADIF = 0;
  8972  0001B0  9C9E               	bcf	3998,6,c	;volatile
  8973                           
  8974                           ;INTERRUPTS.c: 264: }
  8975  0001B2  D032               	goto	i1l258
  8976  0001B4                     i1l249:
  8977                           
  8978                           ;INTERRUPTS.c: 265: else if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
  8979  0001B4  B09E               	btfsc	3998,0,c	;volatile
  8980  0001B6  A09D               	btfss	3997,0,c	;volatile
  8981  0001B8  D02E               	goto	i1l251
  8982                           
  8983                           ;INTERRUPTS.c: 266: {
  8984                           ;INTERRUPTS.c: 268: BUT_IR_PinChangeInt(0);
  8985  0001BA  0E00               	movlw	0
  8986  0001BC  ECA1  F00D         	call	i1_BUT_IR_PinChangeInt
  8987                           
  8988                           ;INTERRUPTS.c: 269: TMR_Timer1(0);
  8989  0001C0  0E00               	movlw	0
  8990  0001C2  ECAF  F00D         	call	i1_TMR_Timer1
  8991  0001C6                     i16L__ptext60:
  8992                           	opt stack 0
  8993  0001C6                     i16Li1_SYS_ActivityTimerReset:
  8994                           	opt stack 0
  8995  0001C6                     i16Li1l6391:
  8996                           	opt stack 17
  8997                           
  8998                           ;SYSTEM.c: 62: Activity_Timer = 0;
  8999  0001C6  6A5A               	clrf	_Activity_Timer,c
  9000  0001C8  6A5B               	clrf	_Activity_Timer+1,c
  9001  0001CA  6A5C               	clrf	_Activity_Timer+2,c
  9002  0001CC  6A5D               	clrf	_Activity_Timer+3,c
  9003  0001CE                     i16Li1l343:
  9004                           	opt stack 13
  9005                           
  9006                           ;INTERRUPTS.c: 271: BUT_ReadButton();
  9007  0001CE  EC9C  F00B         	call	i1_BUT_ReadButton	;wreg free
  9008                           
  9009                           ; BSR set to: 0
  9010                           ;INTERRUPTS.c: 272: IR_ReadReceiver();
  9011  0001D2  EC07  F00C         	call	i1_IR_ReadReceiver	;wreg free
  9012                           
  9013                           ; BSR set to: 0
  9014                           ;INTERRUPTS.c: 273: INTCONbits.RBIF = 0;
  9015  0001D6  90F2               	bcf	intcon,0,c	;volatile
  9016                           
  9017                           ; BSR set to: 0
  9018                           ;INTERRUPTS.c: 274: if(System_State == 10)
  9019  0001D8  0E0A               	movlw	10
  9020  0001DA  0101               	movlb	1	; () banked
  9021  0001DC  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  9022  0001DE  E108               	bnz	i1l6741
  9023                           
  9024                           ; BSR set to: 1
  9025                           ;INTERRUPTS.c: 275: {
  9026                           ;INTERRUPTS.c: 276: if(IR_DataPlace >= 40)
  9027  0001E0  0E27               	movlw	39
  9028  0001E2  646B               	cpfsgt	_IR_DataPlace,c
  9029  0001E4  D00A               	goto	i1l6747
  9030  0001E6                     i1l6739:
  9031                           
  9032                           ; BSR set to: 1
  9033                           ;INTERRUPTS.c: 277: {
  9034                           ;INTERRUPTS.c: 279: IR_Data = IR_CheckCode();
  9035  0001E6  EC01  F014         	call	_IR_CheckCode	;wreg free
  9036  0001EA  0101               	movlb	1	; () banked
  9037  0001EC  6F04               	movwf	_IR_Data& (0+255),b	;volatile
  9038  0001EE  D005               	goto	i1l6747
  9039  0001F0                     i1l6741:
  9040                           
  9041                           ; BSR set to: 1
  9042                           ;INTERRUPTS.c: 282: else
  9043                           ;INTERRUPTS.c: 283: {
  9044                           ;INTERRUPTS.c: 284: if(!IR_Data)
  9045  0001F0  5104               	movf	_IR_Data& (0+255),w,b	;volatile
  9046  0001F2  E103               	bnz	i1l6747
  9047                           
  9048                           ; BSR set to: 1
  9049                           ;INTERRUPTS.c: 285: {
  9050                           ;INTERRUPTS.c: 286: if(IR_DataPlace >= IR_CodeSize)
  9051  0001F4  506A               	movf	_IR_CodeSize,w,c
  9052  0001F6  5C6B               	subwf	_IR_DataPlace,w,c
  9053  0001F8  E2F6               	bc	i1l6739
  9054  0001FA                     i1l6747:
  9055                           
  9056                           ; BSR set to: 1
  9057                           ;INTERRUPTS.c: 289: }
  9058                           ;INTERRUPTS.c: 290: }
  9059                           ;INTERRUPTS.c: 291: }
  9060                           ;INTERRUPTS.c: 292: TMR_ResetTimer1();
  9061  0001FA  EC58  F00C         	call	i1_TMR_ResetTimer1	;wreg free
  9062                           
  9063                           ;INTERRUPTS.c: 293: IR_ResetData();
  9064  0001FE  ECD8  F00D         	call	_IR_ResetData	;wreg free
  9065                           
  9066                           ;INTERRUPTS.c: 294: INTCON3bits.INT1IF = 0;
  9067  000202  90F0               	bcf	intcon3,0,c	;volatile
  9068                           
  9069                           ;INTERRUPTS.c: 295: INTCON3bits.INT2IF = 0;
  9070  000204  92F0               	bcf	intcon3,1,c	;volatile
  9071                           
  9072                           ;INTERRUPTS.c: 296: RF_DataInt(1);
  9073  000206  0E01               	movlw	1
  9074  000208  EC0E  F00D         	call	i1_RF_DataInt
  9075                           
  9076                           ;INTERRUPTS.c: 297: BUT_IR_PinChangeInt(1);
  9077  00020C  0E01               	movlw	1
  9078  00020E  ECA1  F00D         	call	i1_BUT_IR_PinChangeInt
  9079                           
  9080                           ;INTERRUPTS.c: 298: PIR1bits.TMR1IF = 0;
  9081  000212  909E               	bcf	3998,0,c	;volatile
  9082                           
  9083                           ;INTERRUPTS.c: 299: }
  9084  000214  D001               	goto	i1l258
  9085  000216                     i1l251:
  9086                           
  9087                           ;INTERRUPTS.c: 300: else
  9088                           ;INTERRUPTS.c: 301: {
  9089                           ;INTERRUPTS.c: 303: __nop();
  9090  000216  F000               	nop	
  9091  000218                     i1l258:
  9092  000218  C056  FFF5         	movff	??_low_isr+10,tablat
  9093  00021C  C055  FFF8         	movff	??_low_isr+9,tblptru
  9094  000220  C054  FFF7         	movff	??_low_isr+8,tblptrh
  9095  000224  C053  FFF6         	movff	??_low_isr+7,tblptrl
  9096  000228  C052  FFF4         	movff	??_low_isr+6,prodh
  9097  00022C  C051  FFF3         	movff	??_low_isr+5,prodl
  9098  000230  C050  FFDA         	movff	??_low_isr+4,fsr2h
  9099  000234  C04F  FFD9         	movff	??_low_isr+3,fsr2l
  9100  000238  C04E  FFE0         	movff	??_low_isr+2,bsr
  9101  00023C  C04D  FFE8         	movff	??_low_isr+1,wreg
  9102  000240  C04C  FFD8         	movff	??_low_isr,status
  9103  000244  906E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  9104  000246  0010               	retfie	
  9105  000248                     __end_of_low_isr:
  9106                           	opt stack 0
  9107                           tblptru	equ	0xFF8
  9108                           tblptrh	equ	0xFF7
  9109                           tblptrl	equ	0xFF6
  9110                           tablat	equ	0xFF5
  9111                           prodh	equ	0xFF4
  9112                           prodl	equ	0xFF3
  9113                           intcon	equ	0xFF2
  9114                           intcon2	equ	0xFF1
  9115                           intcon3	equ	0xFF0
  9116                           postinc0	equ	0xFEE
  9117                           wreg	equ	0xFE8
  9118                           postdec1	equ	0xFE5
  9119                           fsr1l	equ	0xFE1
  9120                           bsr	equ	0xFE0
  9121                           postinc2	equ	0xFDE
  9122                           postdec2	equ	0xFDD
  9123                           fsr2h	equ	0xFDA
  9124                           fsr2l	equ	0xFD9
  9125                           status	equ	0xFD8
  9126                           
  9127 ;; *************** function i1_SYS_ActivityTimerReset *****************
  9128 ;; Defined at:
  9129 ;;		line 60 in file "SYSTEM.c"
  9130 ;; Parameters:    Size  Location     Type
  9131 ;;		None
  9132 ;; Auto vars:     Size  Location     Type
  9133 ;;		None
  9134 ;; Return value:  Size  Location     Type
  9135 ;;		None               void
  9136 ;; Registers used:
  9137 ;;		None
  9138 ;; Tracked objects:
  9139 ;;		On entry : 0/0
  9140 ;;		On exit  : 0/0
  9141 ;;		Unchanged: 0/0
  9142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9143 ;;      Params:         0       0       0       0       0
  9144 ;;      Locals:         0       0       0       0       0
  9145 ;;      Temps:          0       0       0       0       0
  9146 ;;      Totals:         0       0       0       0       0
  9147 ;;Total ram usage:        0 bytes
  9148 ;; Hardware stack levels used:    1
  9149 ;; Hardware stack levels required when called:    6
  9150 ;; This function calls:
  9151 ;;		Nothing
  9152 ;; This function is called by:
  9153 ;;		_low_isr
  9154 ;; This function uses a non-reentrant model
  9155 ;;
  9156                           
  9157                           	psect	text60
  9158  000000                     __ptext60:
  9159                           	opt stack 0
  9160  000000                     __end_ofi1_SYS_ActivityTimerReset:
  9161                           	opt stack 0
  9162                           tblptru	equ	0xFF8
  9163                           tblptrh	equ	0xFF7
  9164                           tblptrl	equ	0xFF6
  9165                           tablat	equ	0xFF5
  9166                           prodh	equ	0xFF4
  9167                           prodl	equ	0xFF3
  9168                           intcon	equ	0xFF2
  9169                           intcon2	equ	0xFF1
  9170                           intcon3	equ	0xFF0
  9171                           postinc0	equ	0xFEE
  9172                           wreg	equ	0xFE8
  9173                           postdec1	equ	0xFE5
  9174                           fsr1l	equ	0xFE1
  9175                           bsr	equ	0xFE0
  9176                           postinc2	equ	0xFDE
  9177                           postdec2	equ	0xFDD
  9178                           fsr2h	equ	0xFDA
  9179                           fsr2l	equ	0xFD9
  9180                           status	equ	0xFD8
  9181                           
  9182 ;; *************** function i1_IR_ReadReceiver *****************
  9183 ;; Defined at:
  9184 ;;		line 82 in file "IR.c"
  9185 ;; Parameters:    Size  Location     Type
  9186 ;;		None
  9187 ;; Auto vars:     Size  Location     Type
  9188 ;;  IR_ReadRecei    1    0[COMRAM] unsigned char 
  9189 ;; Return value:  Size  Location     Type
  9190 ;;                  1    wreg      unsigned char 
  9191 ;; Registers used:
  9192 ;;		wreg, status,2, status,0
  9193 ;; Tracked objects:
  9194 ;;		On entry : F/0
  9195 ;;		On exit  : F/0
  9196 ;;		Unchanged: 0/0
  9197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9198 ;;      Params:         0       0       0       0       0
  9199 ;;      Locals:         1       0       0       0       0
  9200 ;;      Temps:          0       0       0       0       0
  9201 ;;      Totals:         1       0       0       0       0
  9202 ;;Total ram usage:        1 bytes
  9203 ;; Hardware stack levels used:    1
  9204 ;; Hardware stack levels required when called:    6
  9205 ;; This function calls:
  9206 ;;		Nothing
  9207 ;; This function is called by:
  9208 ;;		_low_isr
  9209 ;; This function uses a non-reentrant model
  9210 ;;
  9211                           
  9212                           	psect	text61
  9213  00180E                     __ptext61:
  9214                           	opt stack 0
  9215  00180E                     i1_IR_ReadReceiver:
  9216                           	opt stack 17
  9217                           
  9218                           ; BSR set to: 0
  9219                           ;IR.c: 84: unsigned char value = PORTB;
  9220                           
  9221                           ;incstack = 0
  9222  00180E  CF81 F001          	movff	3969,i1IR_ReadReceiver@value	;volatile
  9223                           
  9224                           ;IR.c: 86: if(value & 0x10)
  9225  001812  A801               	btfss	i1IR_ReadReceiver@value,4,c
  9226  001814  D007               	goto	i1l6407
  9227                           
  9228                           ; BSR set to: 0
  9229                           ;IR.c: 87: {
  9230                           ;IR.c: 88: if(IRValue_prev == 0)
  9231  001816  51C6               	movf	_IRValue_prev& (0+255),w,b
  9232  001818  E102               	bnz	i1l575
  9233                           
  9234                           ; BSR set to: 0
  9235                           ;IR.c: 89: {
  9236                           ;IR.c: 90: IRChange = 1;
  9237  00181A  0E01               	movlw	1
  9238  00181C  6E67               	movwf	_IRChange,c
  9239  00181E                     i1l575:
  9240                           
  9241                           ; BSR set to: 0
  9242                           ;IR.c: 91: }
  9243                           ;IR.c: 92: IRValue_prev = 1;
  9244  00181E  0E01               	movlw	1
  9245  001820  6FC6               	movwf	_IRValue_prev& (0+255),b
  9246                           
  9247                           ; BSR set to: 0
  9248                           ;IR.c: 93: return 1;
  9249  001822  0C01               	retlw	1
  9250  001824                     i1l6407:
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;IR.c: 94: }
  9254                           ;IR.c: 96: if(IRValue_prev == 1)
  9255  001824  05C6               	decf	_IRValue_prev& (0+255),w,b
  9256  001826  E102               	bnz	i1l6411
  9257                           
  9258                           ; BSR set to: 0
  9259                           ;IR.c: 97: {
  9260                           ;IR.c: 98: IRChange = 1;
  9261  001828  0E01               	movlw	1
  9262  00182A  6E67               	movwf	_IRChange,c
  9263  00182C                     i1l6411:
  9264                           
  9265                           ; BSR set to: 0
  9266                           ;IR.c: 99: }
  9267                           ;IR.c: 100: IRValue_prev = 0;
  9268  00182C  6BC6               	clrf	_IRValue_prev& (0+255),b
  9269                           
  9270                           ; BSR set to: 0
  9271                           
  9272                           ; BSR set to: 0
  9273                           ;IR.c: 101: return 0;
  9274  00182E  0C00               	retlw	0	;funcret
  9275  001830                     __end_ofi1_IR_ReadReceiver:
  9276                           	opt stack 0
  9277                           tblptru	equ	0xFF8
  9278                           tblptrh	equ	0xFF7
  9279                           tblptrl	equ	0xFF6
  9280                           tablat	equ	0xFF5
  9281                           prodh	equ	0xFF4
  9282                           prodl	equ	0xFF3
  9283                           intcon	equ	0xFF2
  9284                           intcon2	equ	0xFF1
  9285                           intcon3	equ	0xFF0
  9286                           postinc0	equ	0xFEE
  9287                           wreg	equ	0xFE8
  9288                           postdec1	equ	0xFE5
  9289                           fsr1l	equ	0xFE1
  9290                           bsr	equ	0xFE0
  9291                           postinc2	equ	0xFDE
  9292                           postdec2	equ	0xFDD
  9293                           fsr2h	equ	0xFDA
  9294                           fsr2l	equ	0xFD9
  9295                           status	equ	0xFD8
  9296                           
  9297 ;; *************** function i1_BUT_ReadButton *****************
  9298 ;; Defined at:
  9299 ;;		line 73 in file "BUTTON.c"
  9300 ;; Parameters:    Size  Location     Type
  9301 ;;		None
  9302 ;; Auto vars:     Size  Location     Type
  9303 ;;  BUT_ReadButt    1    0[COMRAM] unsigned char 
  9304 ;; Return value:  Size  Location     Type
  9305 ;;                  1    wreg      unsigned char 
  9306 ;; Registers used:
  9307 ;;		wreg, status,2, status,0
  9308 ;; Tracked objects:
  9309 ;;		On entry : 0/0
  9310 ;;		On exit  : F/0
  9311 ;;		Unchanged: 0/0
  9312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9313 ;;      Params:         0       0       0       0       0
  9314 ;;      Locals:         1       0       0       0       0
  9315 ;;      Temps:          0       0       0       0       0
  9316 ;;      Totals:         1       0       0       0       0
  9317 ;;Total ram usage:        1 bytes
  9318 ;; Hardware stack levels used:    1
  9319 ;; Hardware stack levels required when called:    6
  9320 ;; This function calls:
  9321 ;;		Nothing
  9322 ;; This function is called by:
  9323 ;;		_low_isr
  9324 ;; This function uses a non-reentrant model
  9325 ;;
  9326                           
  9327                           	psect	text62
  9328  001738                     __ptext62:
  9329                           	opt stack 0
  9330  001738                     i1_BUT_ReadButton:
  9331                           	opt stack 17
  9332                           
  9333                           ;BUTTON.c: 75: unsigned char value = PORTB;
  9334                           
  9335                           ; BSR set to: 0
  9336                           ;incstack = 0
  9337  001738  CF81 F001          	movff	3969,i1BUT_ReadButton@value	;volatile
  9338                           
  9339                           ;BUTTON.c: 76: if((value & 0x20) == 0)
  9340  00173C  BA01               	btfsc	i1BUT_ReadButton@value,5,c
  9341  00173E  D008               	goto	i1l6427
  9342                           
  9343                           ;BUTTON.c: 77: {
  9344                           ;BUTTON.c: 79: if(ButtonValue_prev == 0)
  9345  001740  0100               	movlb	0	; () banked
  9346  001742  51C4               	movf	_ButtonValue_prev& (0+255),w,b
  9347  001744  E102               	bnz	i1l743
  9348                           
  9349                           ; BSR set to: 0
  9350                           ;BUTTON.c: 80: {
  9351                           ;BUTTON.c: 81: ButtonChange = 1;
  9352  001746  0E01               	movlw	1
  9353  001748  6E66               	movwf	_ButtonChange,c
  9354  00174A                     i1l743:
  9355                           
  9356                           ; BSR set to: 0
  9357                           ;BUTTON.c: 82: }
  9358                           ;BUTTON.c: 83: ButtonValue_prev = 1;
  9359  00174A  0E01               	movlw	1
  9360  00174C  6FC4               	movwf	_ButtonValue_prev& (0+255),b
  9361                           
  9362                           ; BSR set to: 0
  9363                           ;BUTTON.c: 84: return 1;
  9364  00174E  0C01               	retlw	1
  9365  001750                     i1l6427:
  9366                           
  9367                           ;BUTTON.c: 85: }
  9368                           ;BUTTON.c: 88: if(ButtonValue_prev == 1)
  9369  001750  0100               	movlb	0	; () banked
  9370  001752  05C4               	decf	_ButtonValue_prev& (0+255),w,b
  9371  001754  E102               	bnz	i1l6431
  9372                           
  9373                           ; BSR set to: 0
  9374                           ;BUTTON.c: 89: {
  9375                           ;BUTTON.c: 90: ButtonChange = 1;
  9376  001756  0E01               	movlw	1
  9377  001758  6E66               	movwf	_ButtonChange,c
  9378  00175A                     i1l6431:
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;BUTTON.c: 91: }
  9382                           ;BUTTON.c: 92: ButtonValue_prev = 0;
  9383  00175A  6BC4               	clrf	_ButtonValue_prev& (0+255),b
  9384                           
  9385                           ; BSR set to: 0
  9386                           
  9387                           ; BSR set to: 0
  9388                           ;BUTTON.c: 93: return 0;
  9389  00175C  0C00               	retlw	0	;funcret
  9390  00175E                     __end_ofi1_BUT_ReadButton:
  9391                           	opt stack 0
  9392                           tblptru	equ	0xFF8
  9393                           tblptrh	equ	0xFF7
  9394                           tblptrl	equ	0xFF6
  9395                           tablat	equ	0xFF5
  9396                           prodh	equ	0xFF4
  9397                           prodl	equ	0xFF3
  9398                           intcon	equ	0xFF2
  9399                           intcon2	equ	0xFF1
  9400                           intcon3	equ	0xFF0
  9401                           postinc0	equ	0xFEE
  9402                           wreg	equ	0xFE8
  9403                           postdec1	equ	0xFE5
  9404                           fsr1l	equ	0xFE1
  9405                           bsr	equ	0xFE0
  9406                           postinc2	equ	0xFDE
  9407                           postdec2	equ	0xFDD
  9408                           fsr2h	equ	0xFDA
  9409                           fsr2l	equ	0xFD9
  9410                           status	equ	0xFD8
  9411                           
  9412 ;; *************** function i1_BUT_IR_PinChangeInt *****************
  9413 ;; Defined at:
  9414 ;;		line 101 in file "BUTTON.c"
  9415 ;; Parameters:    Size  Location     Type
  9416 ;;  state           1    wreg     unsigned char 
  9417 ;; Auto vars:     Size  Location     Type
  9418 ;;  state           1    0[COMRAM] unsigned char 
  9419 ;; Return value:  Size  Location     Type
  9420 ;;		None               void
  9421 ;; Registers used:
  9422 ;;		wreg, status,2
  9423 ;; Tracked objects:
  9424 ;;		On entry : 0/0
  9425 ;;		On exit  : 0/0
  9426 ;;		Unchanged: 0/0
  9427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9428 ;;      Params:         0       0       0       0       0
  9429 ;;      Locals:         1       0       0       0       0
  9430 ;;      Temps:          0       0       0       0       0
  9431 ;;      Totals:         1       0       0       0       0
  9432 ;;Total ram usage:        1 bytes
  9433 ;; Hardware stack levels used:    1
  9434 ;; Hardware stack levels required when called:    6
  9435 ;; This function calls:
  9436 ;;		Nothing
  9437 ;; This function is called by:
  9438 ;;		_low_isr
  9439 ;; This function uses a non-reentrant model
  9440 ;;
  9441                           
  9442                           	psect	text63
  9443  001B42                     __ptext63:
  9444                           	opt stack 0
  9445  001B42                     i1_BUT_IR_PinChangeInt:
  9446                           	opt stack 17
  9447                           
  9448                           ; BSR set to: 0
  9449                           ;incstack = 0
  9450                           ;i1BUT_IR_PinChangeInt@state stored from wreg
  9451  001B42  6E01               	movwf	i1BUT_IR_PinChangeInt@state,c
  9452                           
  9453                           ;BUTTON.c: 103: if(state)
  9454  001B44  5001               	movf	i1BUT_IR_PinChangeInt@state,w,c
  9455  001B46  E002               	bz	i1l748
  9456                           
  9457                           ;BUTTON.c: 104: {
  9458                           ;BUTTON.c: 106: INTCONbits.RBIE = 1;
  9459  001B48  86F2               	bsf	intcon,3,c	;volatile
  9460                           
  9461                           ;BUTTON.c: 107: }
  9462  001B4A  0012               	return	
  9463  001B4C                     i1l748:
  9464                           
  9465                           ;BUTTON.c: 108: else
  9466                           ;BUTTON.c: 109: {
  9467                           ;BUTTON.c: 111: INTCONbits.RBIE = 0;
  9468  001B4C  96F2               	bcf	intcon,3,c	;volatile
  9469  001B4E  0012               	return		;funcret
  9470  001B50                     __end_ofi1_BUT_IR_PinChangeInt:
  9471                           	opt stack 0
  9472                           tblptru	equ	0xFF8
  9473                           tblptrh	equ	0xFF7
  9474                           tblptrl	equ	0xFF6
  9475                           tablat	equ	0xFF5
  9476                           prodh	equ	0xFF4
  9477                           prodl	equ	0xFF3
  9478                           intcon	equ	0xFF2
  9479                           intcon2	equ	0xFF1
  9480                           intcon3	equ	0xFF0
  9481                           postinc0	equ	0xFEE
  9482                           wreg	equ	0xFE8
  9483                           postdec1	equ	0xFE5
  9484                           fsr1l	equ	0xFE1
  9485                           bsr	equ	0xFE0
  9486                           postinc2	equ	0xFDE
  9487                           postdec2	equ	0xFDD
  9488                           fsr2h	equ	0xFDA
  9489                           fsr2l	equ	0xFD9
  9490                           status	equ	0xFD8
  9491                           
  9492 ;; *************** function _TMR_Timer2Start *****************
  9493 ;; Defined at:
  9494 ;;		line 142 in file "TIMERS.c"
  9495 ;; Parameters:    Size  Location     Type
  9496 ;;  time            2    2[COMRAM] unsigned int 
  9497 ;; Auto vars:     Size  Location     Type
  9498 ;;		None
  9499 ;; Return value:  Size  Location     Type
  9500 ;;		None               void
  9501 ;; Registers used:
  9502 ;;		wreg, status,2, cstack
  9503 ;; Tracked objects:
  9504 ;;		On entry : 0/1
  9505 ;;		On exit  : 0/0
  9506 ;;		Unchanged: 0/0
  9507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9508 ;;      Params:         2       0       0       0       0
  9509 ;;      Locals:         0       0       0       0       0
  9510 ;;      Temps:          0       0       0       0       0
  9511 ;;      Totals:         2       0       0       0       0
  9512 ;;Total ram usage:        2 bytes
  9513 ;; Hardware stack levels used:    1
  9514 ;; Hardware stack levels required when called:    8
  9515 ;; This function calls:
  9516 ;;		_TMR_ResetTimer2
  9517 ;;		i1_TMR_Timer2
  9518 ;; This function is called by:
  9519 ;;		_low_isr
  9520 ;; This function uses a non-reentrant model
  9521 ;;
  9522                           
  9523                           	psect	text64
  9524  001990                     __ptext64:
  9525                           	opt stack 0
  9526  001990                     _TMR_Timer2Start:
  9527                           	opt stack 15
  9528                           
  9529                           ;TIMERS.c: 144: TMR_Timer2(0);
  9530                           
  9531                           ;incstack = 0
  9532  001990  0E00               	movlw	0
  9533  001992  ECA8  F00D         	call	i1_TMR_Timer2
  9534                           
  9535                           ;TIMERS.c: 145: Timer2Post = time;
  9536  001996  C003  F062         	movff	TMR_Timer2Start@time,_Timer2Post
  9537  00199A  C004  F063         	movff	TMR_Timer2Start@time+1,_Timer2Post+1
  9538                           
  9539                           ;TIMERS.c: 146: TMR_ResetTimer2();
  9540  00199E  EC48  F00C         	call	_TMR_ResetTimer2	;wreg free
  9541                           
  9542                           ;TIMERS.c: 147: TMR_Timer2(1);
  9543  0019A2  0E01               	movlw	1
  9544  0019A4  EFA8  F00D         	goto	i1_TMR_Timer2
  9545  0019A8                     __end_of_TMR_Timer2Start:
  9546                           	opt stack 0
  9547                           tblptru	equ	0xFF8
  9548                           tblptrh	equ	0xFF7
  9549                           tblptrl	equ	0xFF6
  9550                           tablat	equ	0xFF5
  9551                           prodh	equ	0xFF4
  9552                           prodl	equ	0xFF3
  9553                           intcon	equ	0xFF2
  9554                           intcon2	equ	0xFF1
  9555                           intcon3	equ	0xFF0
  9556                           postinc0	equ	0xFEE
  9557                           wreg	equ	0xFE8
  9558                           postdec1	equ	0xFE5
  9559                           fsr1l	equ	0xFE1
  9560                           bsr	equ	0xFE0
  9561                           postinc2	equ	0xFDE
  9562                           postdec2	equ	0xFDD
  9563                           fsr2h	equ	0xFDA
  9564                           fsr2l	equ	0xFD9
  9565                           status	equ	0xFD8
  9566                           
  9567 ;; *************** function _TMR_ResetTimer2 *****************
  9568 ;; Defined at:
  9569 ;;		line 304 in file "TIMERS.c"
  9570 ;; Parameters:    Size  Location     Type
  9571 ;;		None
  9572 ;; Auto vars:     Size  Location     Type
  9573 ;;  TimerOn         1    1[COMRAM] unsigned char 
  9574 ;; Return value:  Size  Location     Type
  9575 ;;		None               void
  9576 ;; Registers used:
  9577 ;;		wreg, status,2, cstack
  9578 ;; Tracked objects:
  9579 ;;		On entry : 0/1
  9580 ;;		On exit  : 0/0
  9581 ;;		Unchanged: 0/0
  9582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9583 ;;      Params:         0       0       0       0       0
  9584 ;;      Locals:         1       0       0       0       0
  9585 ;;      Temps:          0       0       0       0       0
  9586 ;;      Totals:         1       0       0       0       0
  9587 ;;Total ram usage:        1 bytes
  9588 ;; Hardware stack levels used:    1
  9589 ;; Hardware stack levels required when called:    7
  9590 ;; This function calls:
  9591 ;;		i1_TMR_Timer2
  9592 ;; This function is called by:
  9593 ;;		_TMR_Timer2Start
  9594 ;; This function uses a non-reentrant model
  9595 ;;
  9596                           
  9597                           	psect	text65
  9598  001890                     __ptext65:
  9599                           	opt stack 0
  9600  001890                     _TMR_ResetTimer2:
  9601                           	opt stack 15
  9602                           
  9603                           ;TIMERS.c: 306: unsigned char TimerOn = T2CONbits.TMR2ON;
  9604                           
  9605                           ;incstack = 0
  9606  001890  0E00               	movlw	0
  9607  001892  B4CA               	btfsc	4042,2,c	;volatile
  9608  001894  0E01               	movlw	1
  9609  001896  6E02               	movwf	TMR_ResetTimer2@TimerOn,c
  9610                           
  9611                           ;TIMERS.c: 308: TMR_Timer2(0);
  9612  001898  0E00               	movlw	0
  9613  00189A  ECA8  F00D         	call	i1_TMR_Timer2
  9614                           
  9615                           ;TIMERS.c: 309: Timer2PostCount = 0;
  9616  00189E  6A64               	clrf	_Timer2PostCount,c
  9617  0018A0  6A65               	clrf	_Timer2PostCount+1,c
  9618                           
  9619                           ;TIMERS.c: 310: TMR2 = 0;
  9620  0018A2  6ACC               	clrf	4044,c	;volatile
  9621                           
  9622                           ;TIMERS.c: 311: if(TimerOn)
  9623  0018A4  5002               	movf	TMR_ResetTimer2@TimerOn,w,c
  9624  0018A6  B4D8               	btfsc	status,2,c
  9625  0018A8  0012               	return	
  9626                           
  9627                           ;TIMERS.c: 312: {
  9628                           ;TIMERS.c: 313: TMR_Timer2(1);
  9629  0018AA  0E01               	movlw	1
  9630  0018AC  EFA8  F00D         	goto	i1_TMR_Timer2
  9631  0018B0                     __end_of_TMR_ResetTimer2:
  9632                           	opt stack 0
  9633                           tblptru	equ	0xFF8
  9634                           tblptrh	equ	0xFF7
  9635                           tblptrl	equ	0xFF6
  9636                           tablat	equ	0xFF5
  9637                           prodh	equ	0xFF4
  9638                           prodl	equ	0xFF3
  9639                           intcon	equ	0xFF2
  9640                           intcon2	equ	0xFF1
  9641                           intcon3	equ	0xFF0
  9642                           postinc0	equ	0xFEE
  9643                           wreg	equ	0xFE8
  9644                           postdec1	equ	0xFE5
  9645                           fsr1l	equ	0xFE1
  9646                           bsr	equ	0xFE0
  9647                           postinc2	equ	0xFDE
  9648                           postdec2	equ	0xFDD
  9649                           fsr2h	equ	0xFDA
  9650                           fsr2l	equ	0xFD9
  9651                           status	equ	0xFD8
  9652                           
  9653 ;; *************** function i1_TMR_Timer2 *****************
  9654 ;; Defined at:
  9655 ;;		line 249 in file "TIMERS.c"
  9656 ;; Parameters:    Size  Location     Type
  9657 ;;  state           1    wreg     unsigned char 
  9658 ;; Auto vars:     Size  Location     Type
  9659 ;;  state           1    0[COMRAM] unsigned char 
  9660 ;; Return value:  Size  Location     Type
  9661 ;;		None               void
  9662 ;; Registers used:
  9663 ;;		wreg, status,2
  9664 ;; Tracked objects:
  9665 ;;		On entry : 0/0
  9666 ;;		On exit  : 0/0
  9667 ;;		Unchanged: 0/0
  9668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9669 ;;      Params:         0       0       0       0       0
  9670 ;;      Locals:         1       0       0       0       0
  9671 ;;      Temps:          0       0       0       0       0
  9672 ;;      Totals:         1       0       0       0       0
  9673 ;;Total ram usage:        1 bytes
  9674 ;; Hardware stack levels used:    1
  9675 ;; Hardware stack levels required when called:    6
  9676 ;; This function calls:
  9677 ;;		Nothing
  9678 ;; This function is called by:
  9679 ;;		_low_isr
  9680 ;;		_TMR_Timer2Start
  9681 ;;		_TMR_ResetTimer2
  9682 ;; This function uses a non-reentrant model
  9683 ;;
  9684                           
  9685                           	psect	text66
  9686  001B50                     __ptext66:
  9687                           	opt stack 0
  9688  001B50                     i1_TMR_Timer2:
  9689                           	opt stack 17
  9690                           
  9691                           ;incstack = 0
  9692                           ;i1TMR_Timer2@state stored from wreg
  9693  001B50  6E01               	movwf	i1TMR_Timer2@state,c
  9694                           
  9695                           ;TIMERS.c: 251: if(state)
  9696  001B52  5001               	movf	i1TMR_Timer2@state,w,c
  9697  001B54  E002               	bz	i1l857
  9698                           
  9699                           ;TIMERS.c: 252: {
  9700                           ;TIMERS.c: 254: T2CONbits.TMR2ON = 1;
  9701  001B56  84CA               	bsf	4042,2,c	;volatile
  9702                           
  9703                           ;TIMERS.c: 255: }
  9704  001B58  0012               	return	
  9705  001B5A                     i1l857:
  9706                           
  9707                           ;TIMERS.c: 256: else
  9708                           ;TIMERS.c: 257: {
  9709                           ;TIMERS.c: 259: T2CONbits.TMR2ON = 0;
  9710  001B5A  94CA               	bcf	4042,2,c	;volatile
  9711  001B5C  0012               	return		;funcret
  9712  001B5E                     __end_ofi1_TMR_Timer2:
  9713                           	opt stack 0
  9714                           tblptru	equ	0xFF8
  9715                           tblptrh	equ	0xFF7
  9716                           tblptrl	equ	0xFF6
  9717                           tablat	equ	0xFF5
  9718                           prodh	equ	0xFF4
  9719                           prodl	equ	0xFF3
  9720                           intcon	equ	0xFF2
  9721                           intcon2	equ	0xFF1
  9722                           intcon3	equ	0xFF0
  9723                           postinc0	equ	0xFEE
  9724                           wreg	equ	0xFE8
  9725                           postdec1	equ	0xFE5
  9726                           fsr1l	equ	0xFE1
  9727                           bsr	equ	0xFE0
  9728                           postinc2	equ	0xFDE
  9729                           postdec2	equ	0xFDD
  9730                           fsr2h	equ	0xFDA
  9731                           fsr2l	equ	0xFD9
  9732                           status	equ	0xFD8
  9733                           
  9734 ;; *************** function _TMR_Timer1Status *****************
  9735 ;; Defined at:
  9736 ;;		line 196 in file "TIMERS.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;		None
  9739 ;; Auto vars:     Size  Location     Type
  9740 ;;		None
  9741 ;; Return value:  Size  Location     Type
  9742 ;;                  1    wreg      unsigned char 
  9743 ;; Registers used:
  9744 ;;		wreg
  9745 ;; Tracked objects:
  9746 ;;		On entry : 0/0
  9747 ;;		On exit  : 0/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9750 ;;      Params:         0       0       0       0       0
  9751 ;;      Locals:         0       0       0       0       0
  9752 ;;      Temps:          0       0       0       0       0
  9753 ;;      Totals:         0       0       0       0       0
  9754 ;;Total ram usage:        0 bytes
  9755 ;; Hardware stack levels used:    1
  9756 ;; Hardware stack levels required when called:    6
  9757 ;; This function calls:
  9758 ;;		Nothing
  9759 ;; This function is called by:
  9760 ;;		_low_isr
  9761 ;; This function uses a non-reentrant model
  9762 ;;
  9763                           
  9764                           	psect	text67
  9765  001BCE                     __ptext67:
  9766                           	opt stack 0
  9767  001BCE                     _TMR_Timer1Status:
  9768                           	opt stack 17
  9769                           
  9770                           ;TIMERS.c: 198: if(T1CONbits.TMR1ON)
  9771                           
  9772                           ;incstack = 0
  9773  001BCE  B0CD               	btfsc	4045,0,c	;volatile
  9774                           
  9775                           ;TIMERS.c: 199: {
  9776                           ;TIMERS.c: 201: return 1;
  9777  001BD0  0C01               	retlw	1
  9778                           
  9779                           ;TIMERS.c: 202: }
  9780                           ;TIMERS.c: 203: return 0;
  9781  001BD2  0C00               	retlw	0	;funcret
  9782  001BD4                     __end_of_TMR_Timer1Status:
  9783                           	opt stack 0
  9784                           tblptru	equ	0xFF8
  9785                           tblptrh	equ	0xFF7
  9786                           tblptrl	equ	0xFF6
  9787                           tablat	equ	0xFF5
  9788                           prodh	equ	0xFF4
  9789                           prodl	equ	0xFF3
  9790                           intcon	equ	0xFF2
  9791                           intcon2	equ	0xFF1
  9792                           intcon3	equ	0xFF0
  9793                           postinc0	equ	0xFEE
  9794                           wreg	equ	0xFE8
  9795                           postdec1	equ	0xFE5
  9796                           fsr1l	equ	0xFE1
  9797                           bsr	equ	0xFE0
  9798                           postinc2	equ	0xFDE
  9799                           postdec2	equ	0xFDD
  9800                           fsr2h	equ	0xFDA
  9801                           fsr2l	equ	0xFD9
  9802                           status	equ	0xFD8
  9803                           
  9804 ;; *************** function _TMR_Timer1Start *****************
  9805 ;; Defined at:
  9806 ;;		line 130 in file "TIMERS.c"
  9807 ;; Parameters:    Size  Location     Type
  9808 ;;		None
  9809 ;; Auto vars:     Size  Location     Type
  9810 ;;		None
  9811 ;; Return value:  Size  Location     Type
  9812 ;;		None               void
  9813 ;; Registers used:
  9814 ;;		wreg, status,2, cstack
  9815 ;; Tracked objects:
  9816 ;;		On entry : 0/0
  9817 ;;		On exit  : 0/0
  9818 ;;		Unchanged: 0/0
  9819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9820 ;;      Params:         0       0       0       0       0
  9821 ;;      Locals:         0       0       0       0       0
  9822 ;;      Temps:          0       0       0       0       0
  9823 ;;      Totals:         0       0       0       0       0
  9824 ;;Total ram usage:        0 bytes
  9825 ;; Hardware stack levels used:    1
  9826 ;; Hardware stack levels required when called:    8
  9827 ;; This function calls:
  9828 ;;		i1_TMR_ResetTimer1
  9829 ;;		i1_TMR_Timer1
  9830 ;; This function is called by:
  9831 ;;		_low_isr
  9832 ;; This function uses a non-reentrant model
  9833 ;;
  9834                           
  9835                           	psect	text68
  9836  001B02                     __ptext68:
  9837                           	opt stack 0
  9838  001B02                     _TMR_Timer1Start:
  9839                           	opt stack 15
  9840                           
  9841                           ;TIMERS.c: 132: TMR_Timer1(0);
  9842                           
  9843                           ;incstack = 0
  9844  001B02  0E00               	movlw	0
  9845  001B04  ECAF  F00D         	call	i1_TMR_Timer1
  9846                           
  9847                           ;TIMERS.c: 133: TMR_ResetTimer1();
  9848  001B08  EC58  F00C         	call	i1_TMR_ResetTimer1	;wreg free
  9849                           
  9850                           ;TIMERS.c: 134: TMR_Timer1(1);
  9851  001B0C  0E01               	movlw	1
  9852  001B0E  EFAF  F00D         	goto	i1_TMR_Timer1
  9853  001B12                     __end_of_TMR_Timer1Start:
  9854                           	opt stack 0
  9855                           tblptru	equ	0xFF8
  9856                           tblptrh	equ	0xFF7
  9857                           tblptrl	equ	0xFF6
  9858                           tablat	equ	0xFF5
  9859                           prodh	equ	0xFF4
  9860                           prodl	equ	0xFF3
  9861                           intcon	equ	0xFF2
  9862                           intcon2	equ	0xFF1
  9863                           intcon3	equ	0xFF0
  9864                           postinc0	equ	0xFEE
  9865                           wreg	equ	0xFE8
  9866                           postdec1	equ	0xFE5
  9867                           fsr1l	equ	0xFE1
  9868                           bsr	equ	0xFE0
  9869                           postinc2	equ	0xFDE
  9870                           postdec2	equ	0xFDD
  9871                           fsr2h	equ	0xFDA
  9872                           fsr2l	equ	0xFD9
  9873                           status	equ	0xFD8
  9874                           
  9875 ;; *************** function i1_TMR_ResetTimer1 *****************
  9876 ;; Defined at:
  9877 ;;		line 286 in file "TIMERS.c"
  9878 ;; Parameters:    Size  Location     Type
  9879 ;;		None
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;  TMR_ResetTim    1    1[COMRAM] unsigned char 
  9882 ;; Return value:  Size  Location     Type
  9883 ;;		None               void
  9884 ;; Registers used:
  9885 ;;		wreg, status,2, cstack
  9886 ;; Tracked objects:
  9887 ;;		On entry : 0/0
  9888 ;;		On exit  : 0/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9891 ;;      Params:         0       0       0       0       0
  9892 ;;      Locals:         1       0       0       0       0
  9893 ;;      Temps:          0       0       0       0       0
  9894 ;;      Totals:         1       0       0       0       0
  9895 ;;Total ram usage:        1 bytes
  9896 ;; Hardware stack levels used:    1
  9897 ;; Hardware stack levels required when called:    7
  9898 ;; This function calls:
  9899 ;;		i1_TMR_Timer1
  9900 ;; This function is called by:
  9901 ;;		_low_isr
  9902 ;;		_TMR_Timer1Start
  9903 ;; This function uses a non-reentrant model
  9904 ;;
  9905                           
  9906                           	psect	text69
  9907  0018B0                     __ptext69:
  9908                           	opt stack 0
  9909  0018B0                     i1_TMR_ResetTimer1:
  9910                           	opt stack 16
  9911                           
  9912                           ;TIMERS.c: 288: unsigned char TimerOn = T1CONbits.TMR1ON;
  9913                           
  9914                           ;incstack = 0
  9915  0018B0  0E00               	movlw	0
  9916  0018B2  B0CD               	btfsc	4045,0,c	;volatile
  9917  0018B4  0E01               	movlw	1
  9918  0018B6  6E02               	movwf	i1TMR_ResetTimer1@TimerOn,c
  9919                           
  9920                           ;TIMERS.c: 290: TMR_Timer1(0);
  9921  0018B8  0E00               	movlw	0
  9922  0018BA  ECAF  F00D         	call	i1_TMR_Timer1
  9923                           
  9924                           ;TIMERS.c: 291: TMR1H = 0;
  9925  0018BE  6ACF               	clrf	4047,c	;volatile
  9926                           
  9927                           ;TIMERS.c: 292: TMR1L = 2;
  9928  0018C0  0E02               	movlw	2
  9929  0018C2  6ECE               	movwf	4046,c	;volatile
  9930                           
  9931                           ;TIMERS.c: 293: if(TimerOn)
  9932  0018C4  5002               	movf	i1TMR_ResetTimer1@TimerOn,w,c
  9933  0018C6  B4D8               	btfsc	status,2,c
  9934  0018C8  0012               	return	
  9935                           
  9936                           ;TIMERS.c: 294: {
  9937                           ;TIMERS.c: 295: TMR_Timer1(1);
  9938  0018CA  0E01               	movlw	1
  9939  0018CC  EFAF  F00D         	goto	i1_TMR_Timer1
  9940  0018D0                     __end_ofi1_TMR_ResetTimer1:
  9941                           	opt stack 0
  9942                           tblptru	equ	0xFF8
  9943                           tblptrh	equ	0xFF7
  9944                           tblptrl	equ	0xFF6
  9945                           tablat	equ	0xFF5
  9946                           prodh	equ	0xFF4
  9947                           prodl	equ	0xFF3
  9948                           intcon	equ	0xFF2
  9949                           intcon2	equ	0xFF1
  9950                           intcon3	equ	0xFF0
  9951                           postinc0	equ	0xFEE
  9952                           wreg	equ	0xFE8
  9953                           postdec1	equ	0xFE5
  9954                           fsr1l	equ	0xFE1
  9955                           bsr	equ	0xFE0
  9956                           postinc2	equ	0xFDE
  9957                           postdec2	equ	0xFDD
  9958                           fsr2h	equ	0xFDA
  9959                           fsr2l	equ	0xFD9
  9960                           status	equ	0xFD8
  9961                           
  9962 ;; *************** function i1_TMR_Timer1 *****************
  9963 ;; Defined at:
  9964 ;;		line 230 in file "TIMERS.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;  state           1    wreg     unsigned char 
  9967 ;; Auto vars:     Size  Location     Type
  9968 ;;  state           1    0[COMRAM] unsigned char 
  9969 ;; Return value:  Size  Location     Type
  9970 ;;		None               void
  9971 ;; Registers used:
  9972 ;;		wreg, status,2
  9973 ;; Tracked objects:
  9974 ;;		On entry : 0/0
  9975 ;;		On exit  : 0/0
  9976 ;;		Unchanged: 0/0
  9977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9978 ;;      Params:         0       0       0       0       0
  9979 ;;      Locals:         1       0       0       0       0
  9980 ;;      Temps:          0       0       0       0       0
  9981 ;;      Totals:         1       0       0       0       0
  9982 ;;Total ram usage:        1 bytes
  9983 ;; Hardware stack levels used:    1
  9984 ;; Hardware stack levels required when called:    6
  9985 ;; This function calls:
  9986 ;;		Nothing
  9987 ;; This function is called by:
  9988 ;;		_low_isr
  9989 ;;		_TMR_Timer1Start
  9990 ;;		i1_TMR_ResetTimer1
  9991 ;; This function uses a non-reentrant model
  9992 ;;
  9993                           
  9994                           	psect	text70
  9995  001B5E                     __ptext70:
  9996                           	opt stack 0
  9997  001B5E                     i1_TMR_Timer1:
  9998                           	opt stack 17
  9999                           
 10000                           ;incstack = 0
 10001                           ;i1TMR_Timer1@state stored from wreg
 10002  001B5E  6E01               	movwf	i1TMR_Timer1@state,c
 10003                           
 10004                           ;TIMERS.c: 232: if(state)
 10005  001B60  5001               	movf	i1TMR_Timer1@state,w,c
 10006  001B62  E002               	bz	i1l852
 10007                           
 10008                           ;TIMERS.c: 233: {
 10009                           ;TIMERS.c: 235: T1CONbits.TMR1ON = 1;
 10010  001B64  80CD               	bsf	4045,0,c	;volatile
 10011                           
 10012                           ;TIMERS.c: 236: }
 10013  001B66  0012               	return	
 10014  001B68                     i1l852:
 10015                           
 10016                           ;TIMERS.c: 237: else
 10017                           ;TIMERS.c: 238: {
 10018                           ;TIMERS.c: 240: T1CONbits.TMR1ON = 0;
 10019  001B68  90CD               	bcf	4045,0,c	;volatile
 10020  001B6A  0012               	return		;funcret
 10021  001B6C                     __end_ofi1_TMR_Timer1:
 10022                           	opt stack 0
 10023                           tblptru	equ	0xFF8
 10024                           tblptrh	equ	0xFF7
 10025                           tblptrl	equ	0xFF6
 10026                           tablat	equ	0xFF5
 10027                           prodh	equ	0xFF4
 10028                           prodl	equ	0xFF3
 10029                           intcon	equ	0xFF2
 10030                           intcon2	equ	0xFF1
 10031                           intcon3	equ	0xFF0
 10032                           postinc0	equ	0xFEE
 10033                           wreg	equ	0xFE8
 10034                           postdec1	equ	0xFE5
 10035                           fsr1l	equ	0xFE1
 10036                           bsr	equ	0xFE0
 10037                           postinc2	equ	0xFDE
 10038                           postdec2	equ	0xFDD
 10039                           fsr2h	equ	0xFDA
 10040                           fsr2l	equ	0xFD9
 10041                           status	equ	0xFD8
 10042                           
 10043 ;; *************** function _RF_Disable *****************
 10044 ;; Defined at:
 10045 ;;		line 90 in file "RF.c"
 10046 ;; Parameters:    Size  Location     Type
 10047 ;;		None
 10048 ;; Auto vars:     Size  Location     Type
 10049 ;;		None
 10050 ;; Return value:  Size  Location     Type
 10051 ;;		None               void
 10052 ;; Registers used:
 10053 ;;		wreg, status,2, cstack
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10059 ;;      Params:         0       0       0       0       0
 10060 ;;      Locals:         0       0       0       0       0
 10061 ;;      Temps:          0       0       0       0       0
 10062 ;;      Totals:         0       0       0       0       0
 10063 ;;Total ram usage:        0 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; Hardware stack levels required when called:    7
 10066 ;; This function calls:
 10067 ;;		i1_RF_DataInt
 10068 ;;		i1_TMR_Timer0
 10069 ;;		i1_TMR_Timer0Int
 10070 ;; This function is called by:
 10071 ;;		_low_isr
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           	psect	text71
 10076  0019F8                     __ptext71:
 10077                           	opt stack 0
 10078  0019F8                     _RF_Disable:
 10079                           	opt stack 16
 10080                           
 10081                           ;RF.c: 92: RF_DataInt(0);
 10082                           
 10083                           ;incstack = 0
 10084  0019F8  0E00               	movlw	0
 10085  0019FA  EC0E  F00D         	call	i1_RF_DataInt
 10086                           
 10087                           ;RF.c: 93: TMR_Timer0Int(0);
 10088  0019FE  0E00               	movlw	0
 10089  001A00  ECBD  F00D         	call	i1_TMR_Timer0Int
 10090                           
 10091                           ;RF.c: 94: TMR_Timer0(0);
 10092  001A04  0E00               	movlw	0
 10093  001A06  EFB6  F00D         	goto	i1_TMR_Timer0
 10094  001A0A                     __end_of_RF_Disable:
 10095                           	opt stack 0
 10096                           tblptru	equ	0xFF8
 10097                           tblptrh	equ	0xFF7
 10098                           tblptrl	equ	0xFF6
 10099                           tablat	equ	0xFF5
 10100                           prodh	equ	0xFF4
 10101                           prodl	equ	0xFF3
 10102                           intcon	equ	0xFF2
 10103                           intcon2	equ	0xFF1
 10104                           intcon3	equ	0xFF0
 10105                           postinc0	equ	0xFEE
 10106                           wreg	equ	0xFE8
 10107                           postdec1	equ	0xFE5
 10108                           fsr1l	equ	0xFE1
 10109                           bsr	equ	0xFE0
 10110                           postinc2	equ	0xFDE
 10111                           postdec2	equ	0xFDD
 10112                           fsr2h	equ	0xFDA
 10113                           fsr2l	equ	0xFD9
 10114                           status	equ	0xFD8
 10115                           
 10116 ;; *************** function i1_TMR_Timer0 *****************
 10117 ;; Defined at:
 10118 ;;		line 211 in file "TIMERS.c"
 10119 ;; Parameters:    Size  Location     Type
 10120 ;;  state           1    wreg     unsigned char 
 10121 ;; Auto vars:     Size  Location     Type
 10122 ;;  state           1    0[COMRAM] unsigned char 
 10123 ;; Return value:  Size  Location     Type
 10124 ;;		None               void
 10125 ;; Registers used:
 10126 ;;		wreg, status,2
 10127 ;; Tracked objects:
 10128 ;;		On entry : 0/0
 10129 ;;		On exit  : 0/0
 10130 ;;		Unchanged: 0/0
 10131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10132 ;;      Params:         0       0       0       0       0
 10133 ;;      Locals:         1       0       0       0       0
 10134 ;;      Temps:          0       0       0       0       0
 10135 ;;      Totals:         1       0       0       0       0
 10136 ;;Total ram usage:        1 bytes
 10137 ;; Hardware stack levels used:    1
 10138 ;; Hardware stack levels required when called:    6
 10139 ;; This function calls:
 10140 ;;		Nothing
 10141 ;; This function is called by:
 10142 ;;		_RF_Disable
 10143 ;; This function uses a non-reentrant model
 10144 ;;
 10145                           
 10146                           	psect	text72
 10147  001B6C                     __ptext72:
 10148                           	opt stack 0
 10149  001B6C                     i1_TMR_Timer0:
 10150                           	opt stack 16
 10151                           
 10152                           ;incstack = 0
 10153                           ;i1TMR_Timer0@state stored from wreg
 10154  001B6C  6E01               	movwf	i1TMR_Timer0@state,c
 10155                           
 10156                           ;TIMERS.c: 213: if(state)
 10157  001B6E  5001               	movf	i1TMR_Timer0@state,w,c
 10158  001B70  E002               	bz	i1l847
 10159                           
 10160                           ;TIMERS.c: 214: {
 10161                           ;TIMERS.c: 216: T0CONbits.TMR0ON = 1;
 10162  001B72  8ED5               	bsf	4053,7,c	;volatile
 10163                           
 10164                           ;TIMERS.c: 217: }
 10165  001B74  0012               	return	
 10166  001B76                     i1l847:
 10167                           
 10168                           ;TIMERS.c: 218: else
 10169                           ;TIMERS.c: 219: {
 10170                           ;TIMERS.c: 221: T0CONbits.TMR0ON = 0;
 10171  001B76  9ED5               	bcf	4053,7,c	;volatile
 10172  001B78  0012               	return		;funcret
 10173  001B7A                     __end_ofi1_TMR_Timer0:
 10174                           	opt stack 0
 10175                           tblptru	equ	0xFF8
 10176                           tblptrh	equ	0xFF7
 10177                           tblptrl	equ	0xFF6
 10178                           tablat	equ	0xFF5
 10179                           prodh	equ	0xFF4
 10180                           prodl	equ	0xFF3
 10181                           intcon	equ	0xFF2
 10182                           intcon2	equ	0xFF1
 10183                           intcon3	equ	0xFF0
 10184                           postinc0	equ	0xFEE
 10185                           wreg	equ	0xFE8
 10186                           postdec1	equ	0xFE5
 10187                           fsr1l	equ	0xFE1
 10188                           bsr	equ	0xFE0
 10189                           postinc2	equ	0xFDE
 10190                           postdec2	equ	0xFDD
 10191                           fsr2h	equ	0xFDA
 10192                           fsr2l	equ	0xFD9
 10193                           status	equ	0xFD8
 10194                           
 10195 ;; *************** function _IR_CheckCode *****************
 10196 ;; Defined at:
 10197 ;;		line 210 in file "IR.c"
 10198 ;; Parameters:    Size  Location     Type
 10199 ;;		None
 10200 ;; Auto vars:     Size  Location     Type
 10201 ;;  Low             3   71[COMRAM] unsigned char 
 10202 ;;  High            3   68[COMRAM] unsigned char 
 10203 ;;  data            2   66[COMRAM] unsigned int 
 10204 ;;  i               1   74[COMRAM] unsigned char 
 10205 ;; Return value:  Size  Location     Type
 10206 ;;                  1    wreg      unsigned char 
 10207 ;; Registers used:
 10208 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10209 ;; Tracked objects:
 10210 ;;		On entry : 0/1
 10211 ;;		On exit  : 0/0
 10212 ;;		Unchanged: 0/0
 10213 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10214 ;;      Params:         0       0       0       0       0
 10215 ;;      Locals:         9       0       0       0       0
 10216 ;;      Temps:          6       0       0       0       0
 10217 ;;      Totals:        15       0       0       0       0
 10218 ;;Total ram usage:       15 bytes
 10219 ;; Hardware stack levels used:    1
 10220 ;; Hardware stack levels required when called:   10
 10221 ;; This function calls:
 10222 ;;		_FSH_Write_IR_RF
 10223 ;;		i1_IR_LoadCode
 10224 ;;		i1___ftge
 10225 ;;		i1___ftmul
 10226 ;;		i1___lwtoft
 10227 ;; This function is called by:
 10228 ;;		_low_isr
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           	psect	text73
 10233  002802                     __ptext73:
 10234                           	opt stack 0
 10235  002802                     _IR_CheckCode:
 10236                           	opt stack 13
 10237                           
 10238                           ;IR.c: 214: double High = 0.0;
 10239                           
 10240                           ;incstack = 0
 10241  002802  6A45               	clrf	IR_CheckCode@High,c
 10242  002804  6A46               	clrf	IR_CheckCode@High+1,c
 10243  002806  6A47               	clrf	IR_CheckCode@High+2,c
 10244                           
 10245                           ;IR.c: 215: unsigned int data;
 10246                           ;IR.c: 217: if(System_State == 8)
 10247  002808  0E08               	movlw	8
 10248  00280A  0101               	movlb	1	; () banked
 10249  00280C  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
 10250  00280E  E001 D309          	bnz	i1l6333
 10251                           
 10252                           ; BSR set to: 1
 10253                           ;IR.c: 218: {
 10254                           ;IR.c: 219: for(i=0; i<IR_CodeSize;i++)
 10255  002812  6A4B               	clrf	IR_CheckCode@i,c
 10256  002814  D189               	goto	i1l6295
 10257  002816                     i1l6261:
 10258                           
 10259                           ;IR.c: 220: {
 10260                           ;IR.c: 221: data = IR_SavedTiming0[i];
 10261  002816  504B               	movf	IR_CheckCode@i,w,c
 10262  002818  0D02               	mullw	2
 10263  00281A  0E00               	movlw	0
 10264  00281C  24F3               	addwf	prodl,w,c
 10265  00281E  6EF6               	movwf	tblptrl,c
 10266  002820  0E24               	movlw	36
 10267  002822  20F4               	addwfc	prodh,w,c
 10268  002824  6EF7               	movwf	tblptrh,c
 10269  002826  6AF8               	clrf	tblptru,c
 10270  002828  0E00               	movlw	0
 10271  00282A  22F8               	addwfc	tblptru,f,c
 10272  00282C  0009               	tblrd		*+
 10273  00282E  CFF5 F043          	movff	tablat,IR_CheckCode@data
 10274  002832  000A               	tblrd		*-
 10275  002834  CFF5 F044          	movff	tablat,IR_CheckCode@data+1
 10276  002838  C043  F009         	movff	IR_CheckCode@data,i1___lwtoft@c
 10277  00283C  C044  F00A         	movff	IR_CheckCode@data+1,i1___lwtoft@c+1
 10278  002840  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10279                           
 10280                           ;IR.c: 223: if(IR_SavedTiming0[i] > 4000)
 10281  002844  504B               	movf	IR_CheckCode@i,w,c
 10282  002846  0D02               	mullw	2
 10283  002848  0E00               	movlw	0
 10284  00284A  24F3               	addwf	prodl,w,c
 10285  00284C  6EF6               	movwf	tblptrl,c
 10286  00284E  0E24               	movlw	36
 10287  002850  20F4               	addwfc	prodh,w,c
 10288  002852  6EF7               	movwf	tblptrh,c
 10289  002854  6AF8               	clrf	tblptru,c
 10290  002856  0E00               	movlw	0
 10291  002858  22F8               	addwfc	tblptru,f,c
 10292  00285A  0009               	tblrd		*+
 10293  00285C  0EA1               	movlw	161
 10294  00285E  5EF5               	subwf	tablat,f,c
 10295  002860  0009               	tblrd		*+
 10296  002862  0E0F               	movlw	15
 10297  002864  5AF5               	subwfb	tablat,f,c
 10298  002866  E348               	bnc	i1l6269
 10299                           
 10300                           ;IR.c: 224: {
 10301                           ;IR.c: 225: Low = (double)IR_SavedTiming0[i] * (1.0 - 0.3);
 10302  002868  504B               	movf	IR_CheckCode@i,w,c
 10303  00286A  0D02               	mullw	2
 10304  00286C  0E00               	movlw	0
 10305  00286E  24F3               	addwf	prodl,w,c
 10306  002870  6EF6               	movwf	tblptrl,c
 10307  002872  0E24               	movlw	36
 10308  002874  20F4               	addwfc	prodh,w,c
 10309  002876  6EF7               	movwf	tblptrh,c
 10310  002878  6AF8               	clrf	tblptru,c
 10311  00287A  0E00               	movlw	0
 10312  00287C  22F8               	addwfc	tblptru,f,c
 10313  00287E  0009               	tblrd		*+
 10314  002880  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10315  002884  000A               	tblrd		*-
 10316  002886  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10317  00288A  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10318  00288E  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10319  002892  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10320  002896  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10321  00289A  0E33               	movlw	51
 10322  00289C  6E1E               	movwf	i1___ftmul@f2,c
 10323  00289E  6E1F               	movwf	i1___ftmul@f2+1,c
 10324  0028A0  0E3F               	movlw	63
 10325  0028A2  6E20               	movwf	i1___ftmul@f2+2,c
 10326  0028A4  EC2F  F003         	call	i1___ftmul	;wreg free
 10327  0028A8  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10328  0028AC  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10329  0028B0  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10330                           
 10331                           ;IR.c: 226: High = (double)IR_SavedTiming0[i] * (1.0 + 0.3);
 10332  0028B4  504B               	movf	IR_CheckCode@i,w,c
 10333  0028B6  0D02               	mullw	2
 10334  0028B8  0E00               	movlw	0
 10335  0028BA  24F3               	addwf	prodl,w,c
 10336  0028BC  6EF6               	movwf	tblptrl,c
 10337  0028BE  0E24               	movlw	36
 10338  0028C0  20F4               	addwfc	prodh,w,c
 10339  0028C2  6EF7               	movwf	tblptrh,c
 10340  0028C4  6AF8               	clrf	tblptru,c
 10341  0028C6  0E00               	movlw	0
 10342  0028C8  22F8               	addwfc	tblptru,f,c
 10343  0028CA  0009               	tblrd		*+
 10344  0028CC  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10345  0028D0  000A               	tblrd		*-
 10346  0028D2  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10347  0028D6  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10348  0028DA  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10349  0028DE  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10350  0028E2  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10351  0028E6  0E66               	movlw	102
 10352  0028E8  6E1E               	movwf	i1___ftmul@f2,c
 10353  0028EA  0EA6               	movlw	166
 10354  0028EC  6E1F               	movwf	i1___ftmul@f2+1,c
 10355  0028EE  0E3F               	movlw	63
 10356  0028F0  6E20               	movwf	i1___ftmul@f2+2,c
 10357  0028F2  EC2F  F003         	call	i1___ftmul	;wreg free
 10358  0028F6  D0B3               	goto	L2
 10359  0028F8                     i1l6269:
 10360                           
 10361                           ;IR.c: 228: else if(IR_SavedTiming0[i] <= 4000 && IR_SavedTiming0[i] > 1000)
 10362  0028F8  504B               	movf	IR_CheckCode@i,w,c
 10363  0028FA  0D02               	mullw	2
 10364  0028FC  0E00               	movlw	0
 10365  0028FE  24F3               	addwf	prodl,w,c
 10366  002900  6EF6               	movwf	tblptrl,c
 10367  002902  0E24               	movlw	36
 10368  002904  20F4               	addwfc	prodh,w,c
 10369  002906  6EF7               	movwf	tblptrh,c
 10370  002908  6AF8               	clrf	tblptru,c
 10371  00290A  0E00               	movlw	0
 10372  00290C  22F8               	addwfc	tblptru,f,c
 10373  00290E  0009               	tblrd		*+
 10374  002910  0EA1               	movlw	161
 10375  002912  5EF5               	subwf	tablat,f,c
 10376  002914  0009               	tblrd		*+
 10377  002916  0E0F               	movlw	15
 10378  002918  5AF5               	subwfb	tablat,f,c
 10379  00291A  E259               	bc	i1l6275
 10380  00291C  504B               	movf	IR_CheckCode@i,w,c
 10381  00291E  0D02               	mullw	2
 10382  002920  0E00               	movlw	0
 10383  002922  24F3               	addwf	prodl,w,c
 10384  002924  6EF6               	movwf	tblptrl,c
 10385  002926  0E24               	movlw	36
 10386  002928  20F4               	addwfc	prodh,w,c
 10387  00292A  6EF7               	movwf	tblptrh,c
 10388  00292C  6AF8               	clrf	tblptru,c
 10389  00292E  0E00               	movlw	0
 10390  002930  22F8               	addwfc	tblptru,f,c
 10391  002932  0009               	tblrd		*+
 10392  002934  0EE9               	movlw	233
 10393  002936  5EF5               	subwf	tablat,f,c
 10394  002938  0009               	tblrd		*+
 10395  00293A  0E03               	movlw	3
 10396  00293C  5AF5               	subwfb	tablat,f,c
 10397  00293E  E347               	bnc	i1l6275
 10398                           
 10399                           ;IR.c: 229: {
 10400                           ;IR.c: 230: Low = (double)IR_SavedTiming0[i] * (1.0 - 0.75);
 10401  002940  504B               	movf	IR_CheckCode@i,w,c
 10402  002942  0D02               	mullw	2
 10403  002944  0E00               	movlw	0
 10404  002946  24F3               	addwf	prodl,w,c
 10405  002948  6EF6               	movwf	tblptrl,c
 10406  00294A  0E24               	movlw	36
 10407  00294C  20F4               	addwfc	prodh,w,c
 10408  00294E  6EF7               	movwf	tblptrh,c
 10409  002950  6AF8               	clrf	tblptru,c
 10410  002952  0E00               	movlw	0
 10411  002954  22F8               	addwfc	tblptru,f,c
 10412  002956  0009               	tblrd		*+
 10413  002958  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10414  00295C  000A               	tblrd		*-
 10415  00295E  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10416  002962  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10417  002966  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10418  00296A  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10419  00296E  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10420  002972  6A1E               	clrf	i1___ftmul@f2,c
 10421  002974  0E80               	movlw	128
 10422  002976  6E1F               	movwf	i1___ftmul@f2+1,c
 10423  002978  0E3E               	movlw	62
 10424  00297A  6E20               	movwf	i1___ftmul@f2+2,c
 10425  00297C  EC2F  F003         	call	i1___ftmul	;wreg free
 10426  002980  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10427  002984  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10428  002988  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10429                           
 10430                           ;IR.c: 231: High = (double)IR_SavedTiming0[i] * (1.0 + 0.75);
 10431  00298C  504B               	movf	IR_CheckCode@i,w,c
 10432  00298E  0D02               	mullw	2
 10433  002990  0E00               	movlw	0
 10434  002992  24F3               	addwf	prodl,w,c
 10435  002994  6EF6               	movwf	tblptrl,c
 10436  002996  0E24               	movlw	36
 10437  002998  20F4               	addwfc	prodh,w,c
 10438  00299A  6EF7               	movwf	tblptrh,c
 10439  00299C  6AF8               	clrf	tblptru,c
 10440  00299E  0E00               	movlw	0
 10441  0029A0  22F8               	addwfc	tblptru,f,c
 10442  0029A2  0009               	tblrd		*+
 10443  0029A4  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10444  0029A8  000A               	tblrd		*-
 10445  0029AA  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10446  0029AE  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10447  0029B2  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10448  0029B6  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10449  0029BA  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10450  0029BE  6A1E               	clrf	i1___ftmul@f2,c
 10451  0029C0  0EE0               	movlw	224
 10452  0029C2  6E1F               	movwf	i1___ftmul@f2+1,c
 10453  0029C4  0E3F               	movlw	63
 10454  0029C6  6E20               	movwf	i1___ftmul@f2+2,c
 10455  0029C8  EC2F  F003         	call	i1___ftmul	;wreg free
 10456  0029CC  D048               	goto	L2
 10457  0029CE                     i1l6275:
 10458                           
 10459                           ;IR.c: 233: else
 10460                           ;IR.c: 234: {
 10461                           ;IR.c: 235: Low = (double)IR_SavedTiming0[i] * (1.0 - 1.1);
 10462  0029CE  504B               	movf	IR_CheckCode@i,w,c
 10463  0029D0  0D02               	mullw	2
 10464  0029D2  0E00               	movlw	0
 10465  0029D4  24F3               	addwf	prodl,w,c
 10466  0029D6  6EF6               	movwf	tblptrl,c
 10467  0029D8  0E24               	movlw	36
 10468  0029DA  20F4               	addwfc	prodh,w,c
 10469  0029DC  6EF7               	movwf	tblptrh,c
 10470  0029DE  6AF8               	clrf	tblptru,c
 10471  0029E0  0E00               	movlw	0
 10472  0029E2  22F8               	addwfc	tblptru,f,c
 10473  0029E4  0009               	tblrd		*+
 10474  0029E6  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10475  0029EA  000A               	tblrd		*-
 10476  0029EC  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10477  0029F0  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10478  0029F4  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10479  0029F8  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10480  0029FC  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10481  002A00  0ECD               	movlw	205
 10482  002A02  6E1E               	movwf	i1___ftmul@f2,c
 10483  002A04  0ECC               	movlw	204
 10484  002A06  6E1F               	movwf	i1___ftmul@f2+1,c
 10485  002A08  0EBD               	movlw	189
 10486  002A0A  6E20               	movwf	i1___ftmul@f2+2,c
 10487  002A0C  EC2F  F003         	call	i1___ftmul	;wreg free
 10488  002A10  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10489  002A14  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10490  002A18  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10491                           
 10492                           ;IR.c: 236: High = (double)IR_SavedTiming0[i] * (1.0 + 1.1);
 10493  002A1C  504B               	movf	IR_CheckCode@i,w,c
 10494  002A1E  0D02               	mullw	2
 10495  002A20  0E00               	movlw	0
 10496  002A22  24F3               	addwf	prodl,w,c
 10497  002A24  6EF6               	movwf	tblptrl,c
 10498  002A26  0E24               	movlw	36
 10499  002A28  20F4               	addwfc	prodh,w,c
 10500  002A2A  6EF7               	movwf	tblptrh,c
 10501  002A2C  6AF8               	clrf	tblptru,c
 10502  002A2E  0E00               	movlw	0
 10503  002A30  22F8               	addwfc	tblptru,f,c
 10504  002A32  0009               	tblrd		*+
 10505  002A34  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10506  002A38  000A               	tblrd		*-
 10507  002A3A  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10508  002A3E  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10509  002A42  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10510  002A46  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10511  002A4A  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10512  002A4E  0E66               	movlw	102
 10513  002A50  6E1E               	movwf	i1___ftmul@f2,c
 10514  002A52  0E06               	movlw	6
 10515  002A54  6E1F               	movwf	i1___ftmul@f2+1,c
 10516  002A56  0E40               	movlw	64
 10517  002A58  6E20               	movwf	i1___ftmul@f2+2,c
 10518  002A5A  EC2F  F003         	call	i1___ftmul	;wreg free
 10519  002A5E                     L2:
 10520  002A5E  C01B  F045         	movff	?i1___ftmul,IR_CheckCode@High
 10521  002A62  C01C  F046         	movff	?i1___ftmul+1,IR_CheckCode@High+1
 10522  002A66  C01D  F047         	movff	?i1___ftmul+2,IR_CheckCode@High+2
 10523                           
 10524                           ;IR.c: 237: }
 10525                           ;IR.c: 239: if((double)IR_DataTiming[i] < Low || (double)IR_DataTiming[i] > High )
 10526  002A6A  504B               	movf	IR_CheckCode@i,w,c
 10527  002A6C  0D02               	mullw	2
 10528  002A6E  0E00               	movlw	low _IR_DataTiming
 10529  002A70  24F3               	addwf	prodl,w,c
 10530  002A72  6ED9               	movwf	fsr2l,c
 10531  002A74  0E02               	movlw	high _IR_DataTiming
 10532  002A76  20F4               	addwfc	prodh,w,c
 10533  002A78  6EDA               	movwf	fsr2h,c
 10534  002A7A  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10535  002A7E  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10536  002A82  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10537  002A86  C009  F00C         	movff	?i1___lwtoft,i1___ftge@ff1
 10538  002A8A  C00A  F00D         	movff	?i1___lwtoft+1,i1___ftge@ff1+1
 10539  002A8E  C00B  F00E         	movff	?i1___lwtoft+2,i1___ftge@ff1+2
 10540  002A92  C048  F00F         	movff	IR_CheckCode@Low,i1___ftge@ff2
 10541  002A96  C049  F010         	movff	IR_CheckCode@Low+1,i1___ftge@ff2+1
 10542  002A9A  C04A  F011         	movff	IR_CheckCode@Low+2,i1___ftge@ff2+2
 10543  002A9E  EC75  F009         	call	i1___ftge	;wreg free
 10544  002AA2  E31D               	bnc	i1l6281
 10545  002AA4  C045  F00C         	movff	IR_CheckCode@High,i1___ftge@ff1
 10546  002AA8  C046  F00D         	movff	IR_CheckCode@High+1,i1___ftge@ff1+1
 10547  002AAC  C047  F00E         	movff	IR_CheckCode@High+2,i1___ftge@ff1+2
 10548  002AB0  504B               	movf	IR_CheckCode@i,w,c
 10549  002AB2  0D02               	mullw	2
 10550  002AB4  0E00               	movlw	low _IR_DataTiming
 10551  002AB6  24F3               	addwf	prodl,w,c
 10552  002AB8  6ED9               	movwf	fsr2l,c
 10553  002ABA  0E02               	movlw	high _IR_DataTiming
 10554  002ABC  20F4               	addwfc	prodh,w,c
 10555  002ABE  6EDA               	movwf	fsr2h,c
 10556  002AC0  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10557  002AC4  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10558  002AC8  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10559  002ACC  C009  F00F         	movff	?i1___lwtoft,i1___ftge@ff2
 10560  002AD0  C00A  F010         	movff	?i1___lwtoft+1,i1___ftge@ff2+1
 10561  002AD4  C00B  F011         	movff	?i1___lwtoft+2,i1___ftge@ff2+2
 10562  002AD8  EC75  F009         	call	i1___ftge	;wreg free
 10563  002ADC  E211               	bc	i1l6287
 10564  002ADE                     i1l6281:
 10565                           
 10566                           ;IR.c: 240: {
 10567                           ;IR.c: 241: if(IR_SavedTiming0[i] == 0)
 10568  002ADE  504B               	movf	IR_CheckCode@i,w,c
 10569  002AE0  0D02               	mullw	2
 10570  002AE2  0E00               	movlw	0
 10571  002AE4  24F3               	addwf	prodl,w,c
 10572  002AE6  6EF6               	movwf	tblptrl,c
 10573  002AE8  0E24               	movlw	36
 10574  002AEA  20F4               	addwfc	prodh,w,c
 10575  002AEC  6EF7               	movwf	tblptrh,c
 10576  002AEE  6AF8               	clrf	tblptru,c
 10577  002AF0  0E00               	movlw	0
 10578  002AF2  22F8               	addwfc	tblptru,f,c
 10579  002AF4  0009               	tblrd		*+
 10580  002AF6  50F5               	movf	tablat,w,c
 10581  002AF8  0009               	tblrd		*+
 10582  002AFA  10F5               	iorwf	tablat,w,c
 10583  002AFC  E119               	bnz	i1l613
 10584                           
 10585                           ;IR.c: 242: {
 10586                           ;IR.c: 243: return 1;
 10587  002AFE  0C01               	retlw	1
 10588  002B00                     i1l6287:
 10589                           
 10590                           ;IR.c: 246: }
 10591                           ;IR.c: 247: if(i == (IR_CodeSize -1))
 10592  002B00  504B               	movf	IR_CheckCode@i,w,c
 10593  002B02  6E3D               	movwf	??_IR_CheckCode& (0+255),c
 10594  002B04  6A3E               	clrf	(??_IR_CheckCode+1)& (0+255),c
 10595  002B06  683F               	setf	(??_IR_CheckCode+2)& (0+255),c
 10596  002B08  6840               	setf	(??_IR_CheckCode+3)& (0+255),c
 10597  002B0A  506A               	movf	_IR_CodeSize,w,c
 10598  002B0C  6E41               	movwf	(??_IR_CheckCode+4)& (0+255),c
 10599  002B0E  6A42               	clrf	(??_IR_CheckCode+5)& (0+255),c
 10600  002B10  503F               	movf	??_IR_CheckCode+2,w,c
 10601  002B12  2641               	addwf	??_IR_CheckCode+4,f,c
 10602  002B14  5040               	movf	??_IR_CheckCode+3,w,c
 10603  002B16  2242               	addwfc	??_IR_CheckCode+5,f,c
 10604  002B18  503D               	movf	??_IR_CheckCode,w,c
 10605  002B1A  1841               	xorwf	??_IR_CheckCode+4,w,c
 10606  002B1C  E104               	bnz	i1l6293
 10607  002B1E  503E               	movf	??_IR_CheckCode+1,w,c
 10608  002B20  1842               	xorwf	??_IR_CheckCode+5,w,c
 10609  002B22  E101               	bnz	i1l6293
 10610  002B24  0C01               	retlw	1
 10611  002B26                     i1l6293:
 10612  002B26  2A4B               	incf	IR_CheckCode@i,f,c
 10613  002B28                     i1l6295:
 10614  002B28  506A               	movf	_IR_CodeSize,w,c
 10615  002B2A  5C4B               	subwf	IR_CheckCode@i,w,c
 10616  002B2C  E201 D673          	bnc	i1l6261
 10617  002B30                     i1l613:
 10618                           
 10619                           ;IR.c: 250: }
 10620                           ;IR.c: 251: }
 10621                           ;IR.c: 252: for(i=0; i<IR_CodeSize;i++)
 10622  002B30  6A4B               	clrf	IR_CheckCode@i,c
 10623  002B32  D173               	goto	i1l6331
 10624  002B34                     i1l6297:
 10625                           
 10626                           ;IR.c: 253: {
 10627                           ;IR.c: 254: if(IR_SavedTiming1[i] > 4000)
 10628  002B34  504B               	movf	IR_CheckCode@i,w,c
 10629  002B36  0D02               	mullw	2
 10630  002B38  0EC0               	movlw	192
 10631  002B3A  24F3               	addwf	prodl,w,c
 10632  002B3C  6EF6               	movwf	tblptrl,c
 10633  002B3E  0E24               	movlw	36
 10634  002B40  20F4               	addwfc	prodh,w,c
 10635  002B42  6EF7               	movwf	tblptrh,c
 10636  002B44  6AF8               	clrf	tblptru,c
 10637  002B46  0E00               	movlw	0
 10638  002B48  22F8               	addwfc	tblptru,f,c
 10639  002B4A  0009               	tblrd		*+
 10640  002B4C  0EA1               	movlw	161
 10641  002B4E  5EF5               	subwf	tablat,f,c
 10642  002B50  0009               	tblrd		*+
 10643  002B52  0E0F               	movlw	15
 10644  002B54  5AF5               	subwfb	tablat,f,c
 10645  002B56  E348               	bnc	i1l6301
 10646                           
 10647                           ;IR.c: 255: {
 10648                           ;IR.c: 256: Low = (double)IR_SavedTiming1[i] * (1.0 - 0.3);
 10649  002B58  504B               	movf	IR_CheckCode@i,w,c
 10650  002B5A  0D02               	mullw	2
 10651  002B5C  0EC0               	movlw	192
 10652  002B5E  24F3               	addwf	prodl,w,c
 10653  002B60  6EF6               	movwf	tblptrl,c
 10654  002B62  0E24               	movlw	36
 10655  002B64  20F4               	addwfc	prodh,w,c
 10656  002B66  6EF7               	movwf	tblptrh,c
 10657  002B68  6AF8               	clrf	tblptru,c
 10658  002B6A  0E00               	movlw	0
 10659  002B6C  22F8               	addwfc	tblptru,f,c
 10660  002B6E  0009               	tblrd		*+
 10661  002B70  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10662  002B74  000A               	tblrd		*-
 10663  002B76  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10664  002B7A  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10665  002B7E  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10666  002B82  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10667  002B86  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10668  002B8A  0E33               	movlw	51
 10669  002B8C  6E1E               	movwf	i1___ftmul@f2,c
 10670  002B8E  6E1F               	movwf	i1___ftmul@f2+1,c
 10671  002B90  0E3F               	movlw	63
 10672  002B92  6E20               	movwf	i1___ftmul@f2+2,c
 10673  002B94  EC2F  F003         	call	i1___ftmul	;wreg free
 10674  002B98  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10675  002B9C  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10676  002BA0  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10677                           
 10678                           ;IR.c: 257: High = (double)IR_SavedTiming1[i] * (1.0 + 0.3);
 10679  002BA4  504B               	movf	IR_CheckCode@i,w,c
 10680  002BA6  0D02               	mullw	2
 10681  002BA8  0EC0               	movlw	192
 10682  002BAA  24F3               	addwf	prodl,w,c
 10683  002BAC  6EF6               	movwf	tblptrl,c
 10684  002BAE  0E24               	movlw	36
 10685  002BB0  20F4               	addwfc	prodh,w,c
 10686  002BB2  6EF7               	movwf	tblptrh,c
 10687  002BB4  6AF8               	clrf	tblptru,c
 10688  002BB6  0E00               	movlw	0
 10689  002BB8  22F8               	addwfc	tblptru,f,c
 10690  002BBA  0009               	tblrd		*+
 10691  002BBC  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10692  002BC0  000A               	tblrd		*-
 10693  002BC2  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10694  002BC6  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10695  002BCA  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10696  002BCE  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10697  002BD2  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10698  002BD6  0E66               	movlw	102
 10699  002BD8  6E1E               	movwf	i1___ftmul@f2,c
 10700  002BDA  0EA6               	movlw	166
 10701  002BDC  6E1F               	movwf	i1___ftmul@f2+1,c
 10702  002BDE  0E3F               	movlw	63
 10703  002BE0  6E20               	movwf	i1___ftmul@f2+2,c
 10704  002BE2  EC2F  F003         	call	i1___ftmul	;wreg free
 10705  002BE6  D0B3               	goto	L3
 10706  002BE8                     i1l6301:
 10707                           
 10708                           ;IR.c: 259: else if(IR_SavedTiming0[i] <= 4000 && IR_SavedTiming0[i] > 1000)
 10709  002BE8  504B               	movf	IR_CheckCode@i,w,c
 10710  002BEA  0D02               	mullw	2
 10711  002BEC  0E00               	movlw	0
 10712  002BEE  24F3               	addwf	prodl,w,c
 10713  002BF0  6EF6               	movwf	tblptrl,c
 10714  002BF2  0E24               	movlw	36
 10715  002BF4  20F4               	addwfc	prodh,w,c
 10716  002BF6  6EF7               	movwf	tblptrh,c
 10717  002BF8  6AF8               	clrf	tblptru,c
 10718  002BFA  0E00               	movlw	0
 10719  002BFC  22F8               	addwfc	tblptru,f,c
 10720  002BFE  0009               	tblrd		*+
 10721  002C00  0EA1               	movlw	161
 10722  002C02  5EF5               	subwf	tablat,f,c
 10723  002C04  0009               	tblrd		*+
 10724  002C06  0E0F               	movlw	15
 10725  002C08  5AF5               	subwfb	tablat,f,c
 10726  002C0A  E259               	bc	i1l6307
 10727  002C0C  504B               	movf	IR_CheckCode@i,w,c
 10728  002C0E  0D02               	mullw	2
 10729  002C10  0E00               	movlw	0
 10730  002C12  24F3               	addwf	prodl,w,c
 10731  002C14  6EF6               	movwf	tblptrl,c
 10732  002C16  0E24               	movlw	36
 10733  002C18  20F4               	addwfc	prodh,w,c
 10734  002C1A  6EF7               	movwf	tblptrh,c
 10735  002C1C  6AF8               	clrf	tblptru,c
 10736  002C1E  0E00               	movlw	0
 10737  002C20  22F8               	addwfc	tblptru,f,c
 10738  002C22  0009               	tblrd		*+
 10739  002C24  0EE9               	movlw	233
 10740  002C26  5EF5               	subwf	tablat,f,c
 10741  002C28  0009               	tblrd		*+
 10742  002C2A  0E03               	movlw	3
 10743  002C2C  5AF5               	subwfb	tablat,f,c
 10744  002C2E  E347               	bnc	i1l6307
 10745                           
 10746                           ;IR.c: 260: {
 10747                           ;IR.c: 261: Low = (double)IR_SavedTiming1[i] * (1.0 - 0.75);
 10748  002C30  504B               	movf	IR_CheckCode@i,w,c
 10749  002C32  0D02               	mullw	2
 10750  002C34  0EC0               	movlw	192
 10751  002C36  24F3               	addwf	prodl,w,c
 10752  002C38  6EF6               	movwf	tblptrl,c
 10753  002C3A  0E24               	movlw	36
 10754  002C3C  20F4               	addwfc	prodh,w,c
 10755  002C3E  6EF7               	movwf	tblptrh,c
 10756  002C40  6AF8               	clrf	tblptru,c
 10757  002C42  0E00               	movlw	0
 10758  002C44  22F8               	addwfc	tblptru,f,c
 10759  002C46  0009               	tblrd		*+
 10760  002C48  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10761  002C4C  000A               	tblrd		*-
 10762  002C4E  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10763  002C52  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10764  002C56  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10765  002C5A  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10766  002C5E  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10767  002C62  6A1E               	clrf	i1___ftmul@f2,c
 10768  002C64  0E80               	movlw	128
 10769  002C66  6E1F               	movwf	i1___ftmul@f2+1,c
 10770  002C68  0E3E               	movlw	62
 10771  002C6A  6E20               	movwf	i1___ftmul@f2+2,c
 10772  002C6C  EC2F  F003         	call	i1___ftmul	;wreg free
 10773  002C70  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10774  002C74  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10775  002C78  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10776                           
 10777                           ;IR.c: 262: High = (double)IR_SavedTiming1[i] * (1.0 + 0.75);
 10778  002C7C  504B               	movf	IR_CheckCode@i,w,c
 10779  002C7E  0D02               	mullw	2
 10780  002C80  0EC0               	movlw	192
 10781  002C82  24F3               	addwf	prodl,w,c
 10782  002C84  6EF6               	movwf	tblptrl,c
 10783  002C86  0E24               	movlw	36
 10784  002C88  20F4               	addwfc	prodh,w,c
 10785  002C8A  6EF7               	movwf	tblptrh,c
 10786  002C8C  6AF8               	clrf	tblptru,c
 10787  002C8E  0E00               	movlw	0
 10788  002C90  22F8               	addwfc	tblptru,f,c
 10789  002C92  0009               	tblrd		*+
 10790  002C94  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10791  002C98  000A               	tblrd		*-
 10792  002C9A  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10793  002C9E  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10794  002CA2  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10795  002CA6  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10796  002CAA  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10797  002CAE  6A1E               	clrf	i1___ftmul@f2,c
 10798  002CB0  0EE0               	movlw	224
 10799  002CB2  6E1F               	movwf	i1___ftmul@f2+1,c
 10800  002CB4  0E3F               	movlw	63
 10801  002CB6  6E20               	movwf	i1___ftmul@f2+2,c
 10802  002CB8  EC2F  F003         	call	i1___ftmul	;wreg free
 10803  002CBC  D048               	goto	L3
 10804  002CBE                     i1l6307:
 10805                           
 10806                           ;IR.c: 264: else
 10807                           ;IR.c: 265: {
 10808                           ;IR.c: 266: Low = (double)IR_SavedTiming1[i] * (1.0 - 1.1);
 10809  002CBE  504B               	movf	IR_CheckCode@i,w,c
 10810  002CC0  0D02               	mullw	2
 10811  002CC2  0EC0               	movlw	192
 10812  002CC4  24F3               	addwf	prodl,w,c
 10813  002CC6  6EF6               	movwf	tblptrl,c
 10814  002CC8  0E24               	movlw	36
 10815  002CCA  20F4               	addwfc	prodh,w,c
 10816  002CCC  6EF7               	movwf	tblptrh,c
 10817  002CCE  6AF8               	clrf	tblptru,c
 10818  002CD0  0E00               	movlw	0
 10819  002CD2  22F8               	addwfc	tblptru,f,c
 10820  002CD4  0009               	tblrd		*+
 10821  002CD6  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10822  002CDA  000A               	tblrd		*-
 10823  002CDC  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10824  002CE0  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10825  002CE4  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10826  002CE8  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10827  002CEC  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10828  002CF0  0ECD               	movlw	205
 10829  002CF2  6E1E               	movwf	i1___ftmul@f2,c
 10830  002CF4  0ECC               	movlw	204
 10831  002CF6  6E1F               	movwf	i1___ftmul@f2+1,c
 10832  002CF8  0EBD               	movlw	189
 10833  002CFA  6E20               	movwf	i1___ftmul@f2+2,c
 10834  002CFC  EC2F  F003         	call	i1___ftmul	;wreg free
 10835  002D00  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10836  002D04  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10837  002D08  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10838                           
 10839                           ;IR.c: 267: High = (double)IR_SavedTiming1[i] * (1.0 + 1.1);
 10840  002D0C  504B               	movf	IR_CheckCode@i,w,c
 10841  002D0E  0D02               	mullw	2
 10842  002D10  0EC0               	movlw	192
 10843  002D12  24F3               	addwf	prodl,w,c
 10844  002D14  6EF6               	movwf	tblptrl,c
 10845  002D16  0E24               	movlw	36
 10846  002D18  20F4               	addwfc	prodh,w,c
 10847  002D1A  6EF7               	movwf	tblptrh,c
 10848  002D1C  6AF8               	clrf	tblptru,c
 10849  002D1E  0E00               	movlw	0
 10850  002D20  22F8               	addwfc	tblptru,f,c
 10851  002D22  0009               	tblrd		*+
 10852  002D24  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10853  002D28  000A               	tblrd		*-
 10854  002D2A  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10855  002D2E  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10856  002D32  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10857  002D36  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10858  002D3A  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10859  002D3E  0E66               	movlw	102
 10860  002D40  6E1E               	movwf	i1___ftmul@f2,c
 10861  002D42  0E06               	movlw	6
 10862  002D44  6E1F               	movwf	i1___ftmul@f2+1,c
 10863  002D46  0E40               	movlw	64
 10864  002D48  6E20               	movwf	i1___ftmul@f2+2,c
 10865  002D4A  EC2F  F003         	call	i1___ftmul	;wreg free
 10866  002D4E                     L3:
 10867  002D4E  C01B  F045         	movff	?i1___ftmul,IR_CheckCode@High
 10868  002D52  C01C  F046         	movff	?i1___ftmul+1,IR_CheckCode@High+1
 10869  002D56  C01D  F047         	movff	?i1___ftmul+2,IR_CheckCode@High+2
 10870                           
 10871                           ;IR.c: 268: }
 10872                           ;IR.c: 270: if((double)IR_DataTiming[i] < Low || (double)IR_DataTiming[i] > High )
 10873  002D5A  504B               	movf	IR_CheckCode@i,w,c
 10874  002D5C  0D02               	mullw	2
 10875  002D5E  0E00               	movlw	low _IR_DataTiming
 10876  002D60  24F3               	addwf	prodl,w,c
 10877  002D62  6ED9               	movwf	fsr2l,c
 10878  002D64  0E02               	movlw	high _IR_DataTiming
 10879  002D66  20F4               	addwfc	prodh,w,c
 10880  002D68  6EDA               	movwf	fsr2h,c
 10881  002D6A  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10882  002D6E  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10883  002D72  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10884  002D76  C009  F00C         	movff	?i1___lwtoft,i1___ftge@ff1
 10885  002D7A  C00A  F00D         	movff	?i1___lwtoft+1,i1___ftge@ff1+1
 10886  002D7E  C00B  F00E         	movff	?i1___lwtoft+2,i1___ftge@ff1+2
 10887  002D82  C048  F00F         	movff	IR_CheckCode@Low,i1___ftge@ff2
 10888  002D86  C049  F010         	movff	IR_CheckCode@Low+1,i1___ftge@ff2+1
 10889  002D8A  C04A  F011         	movff	IR_CheckCode@Low+2,i1___ftge@ff2+2
 10890  002D8E  EC75  F009         	call	i1___ftge	;wreg free
 10891  002D92  E31D               	bnc	i1l6313
 10892  002D94  C045  F00C         	movff	IR_CheckCode@High,i1___ftge@ff1
 10893  002D98  C046  F00D         	movff	IR_CheckCode@High+1,i1___ftge@ff1+1
 10894  002D9C  C047  F00E         	movff	IR_CheckCode@High+2,i1___ftge@ff1+2
 10895  002DA0  504B               	movf	IR_CheckCode@i,w,c
 10896  002DA2  0D02               	mullw	2
 10897  002DA4  0E00               	movlw	low _IR_DataTiming
 10898  002DA6  24F3               	addwf	prodl,w,c
 10899  002DA8  6ED9               	movwf	fsr2l,c
 10900  002DAA  0E02               	movlw	high _IR_DataTiming
 10901  002DAC  20F4               	addwfc	prodh,w,c
 10902  002DAE  6EDA               	movwf	fsr2h,c
 10903  002DB0  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10904  002DB4  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10905  002DB8  ECC1  F00B         	call	i1___lwtoft	;wreg free
 10906  002DBC  C009  F00F         	movff	?i1___lwtoft,i1___ftge@ff2
 10907  002DC0  C00A  F010         	movff	?i1___lwtoft+1,i1___ftge@ff2+1
 10908  002DC4  C00B  F011         	movff	?i1___lwtoft+2,i1___ftge@ff2+2
 10909  002DC8  EC75  F009         	call	i1___ftge	;wreg free
 10910  002DCC  E212               	bc	i1l6323
 10911  002DCE                     i1l6313:
 10912                           
 10913                           ;IR.c: 271: {
 10914                           ;IR.c: 272: if(IR_SavedTiming1[i] == 0)
 10915  002DCE  504B               	movf	IR_CheckCode@i,w,c
 10916  002DD0  0D02               	mullw	2
 10917  002DD2  0EC0               	movlw	192
 10918  002DD4  24F3               	addwf	prodl,w,c
 10919  002DD6  6EF6               	movwf	tblptrl,c
 10920  002DD8  0E24               	movlw	36
 10921  002DDA  20F4               	addwfc	prodh,w,c
 10922  002DDC  6EF7               	movwf	tblptrh,c
 10923  002DDE  6AF8               	clrf	tblptru,c
 10924  002DE0  0E00               	movlw	0
 10925  002DE2  22F8               	addwfc	tblptru,f,c
 10926  002DE4  0009               	tblrd		*+
 10927  002DE6  50F5               	movf	tablat,w,c
 10928  002DE8  0009               	tblrd		*+
 10929  002DEA  10F5               	iorwf	tablat,w,c
 10930  002DEC  B4D8               	btfsc	status,2,c
 10931  002DEE  0C01               	retlw	1
 10932                           
 10933                           ;IR.c: 275: }
 10934                           ;IR.c: 276: return 0;
 10935  002DF0  0C00               	retlw	0
 10936  002DF2                     i1l6323:
 10937                           
 10938                           ;IR.c: 277: }
 10939                           ;IR.c: 278: if(i == (IR_CodeSize -1))
 10940  002DF2  504B               	movf	IR_CheckCode@i,w,c
 10941  002DF4  6E3D               	movwf	??_IR_CheckCode& (0+255),c
 10942  002DF6  6A3E               	clrf	(??_IR_CheckCode+1)& (0+255),c
 10943  002DF8  683F               	setf	(??_IR_CheckCode+2)& (0+255),c
 10944  002DFA  6840               	setf	(??_IR_CheckCode+3)& (0+255),c
 10945  002DFC  506A               	movf	_IR_CodeSize,w,c
 10946  002DFE  6E41               	movwf	(??_IR_CheckCode+4)& (0+255),c
 10947  002E00  6A42               	clrf	(??_IR_CheckCode+5)& (0+255),c
 10948  002E02  503F               	movf	??_IR_CheckCode+2,w,c
 10949  002E04  2641               	addwf	??_IR_CheckCode+4,f,c
 10950  002E06  5040               	movf	??_IR_CheckCode+3,w,c
 10951  002E08  2242               	addwfc	??_IR_CheckCode+5,f,c
 10952  002E0A  503D               	movf	??_IR_CheckCode,w,c
 10953  002E0C  1841               	xorwf	??_IR_CheckCode+4,w,c
 10954  002E0E  E104               	bnz	i1l6329
 10955  002E10  503E               	movf	??_IR_CheckCode+1,w,c
 10956  002E12  1842               	xorwf	??_IR_CheckCode+5,w,c
 10957  002E14  E101               	bnz	i1l6329
 10958  002E16  0C01               	retlw	1
 10959  002E18                     i1l6329:
 10960  002E18  2A4B               	incf	IR_CheckCode@i,f,c
 10961  002E1A                     i1l6331:
 10962  002E1A  506A               	movf	_IR_CodeSize,w,c
 10963  002E1C  5C4B               	subwf	IR_CheckCode@i,w,c
 10964  002E1E  E201 D689          	bnc	i1l6297
 10965  002E22  0C00               	retlw	0
 10966  002E24                     i1l6333:
 10967                           
 10968                           ; BSR set to: 1
 10969                           ;IR.c: 284: else
 10970                           ;IR.c: 285: {
 10971                           ;IR.c: 286: if(IR_DataPlace >= 40)
 10972  002E24  0E27               	movlw	39
 10973  002E26  646B               	cpfsgt	_IR_DataPlace,c
 10974  002E28  0C00               	retlw	0
 10975                           
 10976                           ; BSR set to: 1
 10977                           ;IR.c: 287: {
 10978                           ;IR.c: 288: for(i=0;i<IR_DataPlace;i++)
 10979  002E2A  6A4B               	clrf	IR_CheckCode@i,c
 10980  002E2C  D043               	goto	i1l6355
 10981  002E2E                     i1l6337:
 10982                           
 10983                           ; BSR set to: 1
 10984                           ;IR.c: 289: {
 10985                           ;IR.c: 290: if(IR_DataTiming[i] < 40)
 10986  002E2E  504B               	movf	IR_CheckCode@i,w,c
 10987  002E30  0D02               	mullw	2
 10988  002E32  0E00               	movlw	low _IR_DataTiming
 10989  002E34  24F3               	addwf	prodl,w,c
 10990  002E36  6ED9               	movwf	fsr2l,c
 10991  002E38  0E02               	movlw	high _IR_DataTiming
 10992  002E3A  20F4               	addwfc	prodh,w,c
 10993  002E3C  6EDA               	movwf	fsr2h,c
 10994  002E3E  0E01               	movlw	1
 10995  002E40  50DB               	movf	plusw2,w,c
 10996  002E42  E104               	bnz	i1l6345
 10997  002E44  0E28               	movlw	40
 10998  002E46  5CDE               	subwf	postinc2,w,c
 10999  002E48  E201               	bc	i1l6345
 11000  002E4A  0C00               	retlw	0
 11001  002E4C                     i1l6345:
 11002                           
 11003                           ; BSR set to: 1
 11004                           ;IR.c: 295: else if(IR_DataTiming[i] < 200)
 11005  002E4C  504B               	movf	IR_CheckCode@i,w,c
 11006  002E4E  0D02               	mullw	2
 11007  002E50  0E00               	movlw	low _IR_DataTiming
 11008  002E52  24F3               	addwf	prodl,w,c
 11009  002E54  6ED9               	movwf	fsr2l,c
 11010  002E56  0E02               	movlw	high _IR_DataTiming
 11011  002E58  20F4               	addwfc	prodh,w,c
 11012  002E5A  6EDA               	movwf	fsr2h,c
 11013  002E5C  0E01               	movlw	1
 11014  002E5E  50DB               	movf	plusw2,w,c
 11015  002E60  E10F               	bnz	i1l6349
 11016  002E62  0EC8               	movlw	200
 11017  002E64  5CDE               	subwf	postinc2,w,c
 11018  002E66  E20C               	bc	i1l6349
 11019                           
 11020                           ; BSR set to: 1
 11021                           ;IR.c: 296: {
 11022                           ;IR.c: 297: IR_DataTiming[i] +=350;
 11023  002E68  504B               	movf	IR_CheckCode@i,w,c
 11024  002E6A  0D02               	mullw	2
 11025  002E6C  0E00               	movlw	low _IR_DataTiming
 11026  002E6E  24F3               	addwf	prodl,w,c
 11027  002E70  6ED9               	movwf	fsr2l,c
 11028  002E72  0E02               	movlw	high _IR_DataTiming
 11029  002E74  20F4               	addwfc	prodh,w,c
 11030  002E76  6EDA               	movwf	fsr2h,c
 11031  002E78  0E5E               	movlw	94
 11032  002E7A  26DE               	addwf	postinc2,f,c
 11033  002E7C  0E01               	movlw	1
 11034  002E7E  D018               	goto	L4
 11035  002E80                     i1l6349:
 11036                           
 11037                           ; BSR set to: 1
 11038                           ;IR.c: 299: else if(IR_DataTiming[i] < 320)
 11039  002E80  504B               	movf	IR_CheckCode@i,w,c
 11040  002E82  0D02               	mullw	2
 11041  002E84  0E00               	movlw	low _IR_DataTiming
 11042  002E86  24F3               	addwf	prodl,w,c
 11043  002E88  6ED9               	movwf	fsr2l,c
 11044  002E8A  0E02               	movlw	high _IR_DataTiming
 11045  002E8C  20F4               	addwfc	prodh,w,c
 11046  002E8E  6EDA               	movwf	fsr2h,c
 11047  002E90  0E40               	movlw	64
 11048  002E92  5CDE               	subwf	postinc2,w,c
 11049  002E94  0E01               	movlw	1
 11050  002E96  58DE               	subwfb	postinc2,w,c
 11051  002E98  E20C               	bc	i1l6353
 11052                           
 11053                           ; BSR set to: 1
 11054                           ;IR.c: 300: {
 11055                           ;IR.c: 301: IR_DataTiming[i] +=150;
 11056  002E9A  504B               	movf	IR_CheckCode@i,w,c
 11057  002E9C  0D02               	mullw	2
 11058  002E9E  0E00               	movlw	low _IR_DataTiming
 11059  002EA0  24F3               	addwf	prodl,w,c
 11060  002EA2  6ED9               	movwf	fsr2l,c
 11061  002EA4  0E02               	movlw	high _IR_DataTiming
 11062  002EA6  20F4               	addwfc	prodh,w,c
 11063  002EA8  6EDA               	movwf	fsr2h,c
 11064  002EAA  0E96               	movlw	150
 11065  002EAC  26DE               	addwf	postinc2,f,c
 11066  002EAE  0E00               	movlw	0
 11067  002EB0                     L4:
 11068  002EB0  22DD               	addwfc	postdec2,f,c
 11069  002EB2                     i1l6353:
 11070                           
 11071                           ; BSR set to: 1
 11072  002EB2  2A4B               	incf	IR_CheckCode@i,f,c
 11073  002EB4                     i1l6355:
 11074                           
 11075                           ; BSR set to: 1
 11076  002EB4  506B               	movf	_IR_DataPlace,w,c
 11077  002EB6  5C4B               	subwf	IR_CheckCode@i,w,c
 11078  002EB8  E3BA               	bnc	i1l6337
 11079                           
 11080                           ; BSR set to: 1
 11081                           ;IR.c: 302: }
 11082                           ;IR.c: 303: }
 11083                           ;IR.c: 304: for(i=IR_DataPlace;i<96;i++)
 11084  002EBA  C06B  F04B         	movff	_IR_DataPlace,IR_CheckCode@i
 11085  002EBE                     i1l6357:
 11086                           
 11087                           ; BSR set to: 1
 11088  002EBE  0E5F               	movlw	95
 11089  002EC0  644B               	cpfsgt	IR_CheckCode@i,c
 11090  002EC2  D001               	goto	i1l6361
 11091  002EC4  D00C               	goto	i1l6367
 11092  002EC6                     i1l6361:
 11093                           
 11094                           ; BSR set to: 1
 11095                           ;IR.c: 305: {
 11096                           ;IR.c: 307: IR_DataTiming[i] = 0;
 11097  002EC6  504B               	movf	IR_CheckCode@i,w,c
 11098  002EC8  0D02               	mullw	2
 11099  002ECA  0E00               	movlw	low _IR_DataTiming
 11100  002ECC  24F3               	addwf	prodl,w,c
 11101  002ECE  6ED9               	movwf	fsr2l,c
 11102  002ED0  0E02               	movlw	high _IR_DataTiming
 11103  002ED2  20F4               	addwfc	prodh,w,c
 11104  002ED4  6EDA               	movwf	fsr2h,c
 11105  002ED6  6ADE               	clrf	postinc2,c
 11106  002ED8  6ADD               	clrf	postdec2,c
 11107                           
 11108                           ; BSR set to: 1
 11109  002EDA  2A4B               	incf	IR_CheckCode@i,f,c
 11110  002EDC  D7F0               	goto	i1l6357
 11111  002EDE                     i1l6367:
 11112                           
 11113                           ; BSR set to: 1
 11114                           ;IR.c: 308: }
 11115                           ;IR.c: 311: IR_Saved = 90;
 11116  002EDE  0E5A               	movlw	90
 11117  002EE0  6FAC               	movwf	_IR_Saved& (0+255),b
 11118                           
 11119                           ; BSR set to: 1
 11120                           ;IR.c: 312: Flash_Status = FSH_Write_IR_RF();
 11121  002EE2  ECAA  F019         	call	_FSH_Write_IR_RF	;wreg free
 11122  002EE6  0101               	movlb	1	; () banked
 11123  002EE8  6F03               	movwf	_Flash_Status& (0+255),b
 11124                           
 11125                           ; BSR set to: 1
 11126                           ;IR.c: 313: if(Flash_Status)
 11127  002EEA  5103               	movf	_Flash_Status& (0+255),w,b
 11128  002EEC  E007               	bz	i1l6381
 11129                           
 11130                           ; BSR set to: 1
 11131                           ;IR.c: 314: {
 11132                           ;IR.c: 315: IRProgramCodeNumber++;
 11133  002EEE  2A68               	incf	_IRProgramCodeNumber,f,c
 11134                           
 11135                           ; BSR set to: 1
 11136                           ;IR.c: 316: if(IRProgramCodeNumber > 1)
 11137  002EF0  0E01               	movlw	1
 11138  002EF2  6468               	cpfsgt	_IRProgramCodeNumber,c
 11139  002EF4  D001               	goto	i1l6379
 11140                           
 11141                           ; BSR set to: 1
 11142                           ;IR.c: 317: {
 11143                           ;IR.c: 318: IRProgramCodeNumber = 0;
 11144  002EF6  6A68               	clrf	_IRProgramCodeNumber,c
 11145  002EF8                     i1l6379:
 11146                           
 11147                           ; BSR set to: 1
 11148                           ;IR.c: 319: }
 11149                           ;IR.c: 320: IR_LoadCode();
 11150  002EF8  ECEA  F01C         	call	i1_IR_LoadCode	;wreg free
 11151  002EFC                     i1l6381:
 11152                           
 11153                           ;IR.c: 321: }
 11154                           ;IR.c: 322: System_State = 8;
 11155  002EFC  0E08               	movlw	8
 11156  002EFE  0101               	movlb	1	; () banked
 11157  002F00  6FAE               	movwf	_System_State& (0+255),b	;volatile
 11158  002F02  0C00               	retlw	0
 11159  002F04                     __end_of_IR_CheckCode:
 11160                           	opt stack 0
 11161                           tblptru	equ	0xFF8
 11162                           tblptrh	equ	0xFF7
 11163                           tblptrl	equ	0xFF6
 11164                           tablat	equ	0xFF5
 11165                           prodh	equ	0xFF4
 11166                           prodl	equ	0xFF3
 11167                           intcon	equ	0xFF2
 11168                           intcon2	equ	0xFF1
 11169                           intcon3	equ	0xFF0
 11170                           postinc0	equ	0xFEE
 11171                           wreg	equ	0xFE8
 11172                           postdec1	equ	0xFE5
 11173                           fsr1l	equ	0xFE1
 11174                           bsr	equ	0xFE0
 11175                           postinc2	equ	0xFDE
 11176                           postdec2	equ	0xFDD
 11177                           plusw2	equ	0xFDB
 11178                           fsr2h	equ	0xFDA
 11179                           fsr2l	equ	0xFD9
 11180                           status	equ	0xFD8
 11181                           
 11182 ;; *************** function i1_IR_LoadCode *****************
 11183 ;; Defined at:
 11184 ;;		line 131 in file "IR.c"
 11185 ;; Parameters:    Size  Location     Type
 11186 ;;		None
 11187 ;; Auto vars:     Size  Location     Type
 11188 ;;  IR_LoadCode     3   57[COMRAM] unsigned char 
 11189 ;;  IR_LoadCode     3   54[COMRAM] unsigned char 
 11190 ;;  IR_LoadCode     3   50[COMRAM] unsigned char 
 11191 ;;  IR_LoadCode     3   47[COMRAM] unsigned char 
 11192 ;;  IR_LoadCode     3   43[COMRAM] unsigned char 
 11193 ;;  IR_LoadCode     3   40[COMRAM] unsigned char 
 11194 ;;  IR_LoadCode     1   53[COMRAM] unsigned char 
 11195 ;;  IR_LoadCode     1   46[COMRAM] unsigned char 
 11196 ;; Return value:  Size  Location     Type
 11197 ;;		None               void
 11198 ;; Registers used:
 11199 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11200 ;; Tracked objects:
 11201 ;;		On entry : F/1
 11202 ;;		On exit  : 0/0
 11203 ;;		Unchanged: 0/0
 11204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11205 ;;      Params:         0       0       0       0       0
 11206 ;;      Locals:        20       0       0       0       0
 11207 ;;      Temps:          0       0       0       0       0
 11208 ;;      Totals:        20       0       0       0       0
 11209 ;;Total ram usage:       20 bytes
 11210 ;; Hardware stack levels used:    1
 11211 ;; Hardware stack levels required when called:    8
 11212 ;; This function calls:
 11213 ;;		i1_IR_CalculateCodesize
 11214 ;;		i1___ftge
 11215 ;;		i1___ftmul
 11216 ;;		i1___fttol
 11217 ;;		i1___lwtoft
 11218 ;; This function is called by:
 11219 ;;		_IR_CheckCode
 11220 ;; This function uses a non-reentrant model
 11221 ;;
 11222                           
 11223                           	psect	text74
 11224  0039D4                     __ptext74:
 11225                           	opt stack 0
 11226  0039D4                     i1_IR_LoadCode:
 11227                           	opt stack 14
 11228                           
 11229                           ; BSR set to: 1
 11230                           ;IR.c: 134: double High1 = 0.0;
 11231                           
 11232                           ;incstack = 0
 11233  0039D4  6A2C               	clrf	i1IR_LoadCode@High1,c
 11234  0039D6  6A2D               	clrf	i1IR_LoadCode@High1+1,c
 11235  0039D8  6A2E               	clrf	i1IR_LoadCode@High1+2,c
 11236                           
 11237                           ;IR.c: 135: double Low2 = 0.0;
 11238  0039DA  6A30               	clrf	i1IR_LoadCode@Low2,c
 11239  0039DC  6A31               	clrf	i1IR_LoadCode@Low2+1,c
 11240  0039DE  6A32               	clrf	i1IR_LoadCode@Low2+2,c
 11241                           
 11242                           ;IR.c: 136: double High2 = 0.0;
 11243  0039E0  6A33               	clrf	i1IR_LoadCode@High2,c
 11244  0039E2  6A34               	clrf	i1IR_LoadCode@High2+1,c
 11245  0039E4  6A35               	clrf	i1IR_LoadCode@High2+2,c
 11246                           
 11247                           ;IR.c: 137: double LowBound = 0.0;
 11248  0039E6  6A37               	clrf	i1IR_LoadCode@LowBound,c
 11249  0039E8  6A38               	clrf	i1IR_LoadCode@LowBound+1,c
 11250  0039EA  6A39               	clrf	i1IR_LoadCode@LowBound+2,c
 11251                           
 11252                           ;IR.c: 138: double HighBound = 0.0;
 11253  0039EC  6A3A               	clrf	i1IR_LoadCode@HighBound,c
 11254  0039EE  6A3B               	clrf	i1IR_LoadCode@HighBound+1,c
 11255  0039F0  6A3C               	clrf	i1IR_LoadCode@HighBound+2,c
 11256                           
 11257                           ; BSR set to: 1
 11258                           ;IR.c: 139: unsigned char CodeSize1;
 11259                           ;IR.c: 140: unsigned char CodeSize2;
 11260                           ;IR.c: 142: Low1 = (double)IR_SavedTiming0[0] * (1.0 - 0.3);
 11261  0039F2  6AF6               	clrf	tblptrl,c
 11262  0039F4                     	if	1	;There is more than 1 active tblptr byte
 11263  0039F4  0E24               	movlw	36
 11264  0039F6  6EF7               	movwf	tblptrh,c
 11265  0039F8                     	endif
 11266  0039F8                     	if	0	;There are less than 3 active tblptr bytes
 11267  0039F8                     	endif
 11268  0039F8  0009               	tblrd		*+
 11269  0039FA  CFF5 F009          	movff	tablat,i1___lwtoft@c
 11270  0039FE  000A               	tblrd		*-
 11271  003A00  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 11272  003A04  ECC1  F00B         	call	i1___lwtoft	;wreg free
 11273  003A08  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 11274  003A0C  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 11275  003A10  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 11276  003A14  0E33               	movlw	51
 11277  003A16  6E1E               	movwf	i1___ftmul@f2,c
 11278  003A18  6E1F               	movwf	i1___ftmul@f2+1,c
 11279  003A1A  0E3F               	movlw	63
 11280  003A1C  6E20               	movwf	i1___ftmul@f2+2,c
 11281  003A1E  EC2F  F003         	call	i1___ftmul	;wreg free
 11282  003A22  C01B  F029         	movff	?i1___ftmul,i1IR_LoadCode@Low1
 11283  003A26  C01C  F02A         	movff	?i1___ftmul+1,i1IR_LoadCode@Low1+1
 11284  003A2A  C01D  F02B         	movff	?i1___ftmul+2,i1IR_LoadCode@Low1+2
 11285                           
 11286                           ;IR.c: 143: High1= (double)IR_SavedTiming0[0] * (1.0 + 0.3);
 11287  003A2E  6AF6               	clrf	tblptrl,c
 11288  003A30                     	if	1	;There is more than 1 active tblptr byte
 11289  003A30  0E24               	movlw	36
 11290  003A32  6EF7               	movwf	tblptrh,c
 11291  003A34                     	endif
 11292  003A34                     	if	0	;There are less than 3 active tblptr bytes
 11293  003A34                     	endif
 11294  003A34  0009               	tblrd		*+
 11295  003A36  CFF5 F009          	movff	tablat,i1___lwtoft@c
 11296  003A3A  000A               	tblrd		*-
 11297  003A3C  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 11298  003A40  ECC1  F00B         	call	i1___lwtoft	;wreg free
 11299  003A44  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 11300  003A48  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 11301  003A4C  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 11302  003A50  0E66               	movlw	102
 11303  003A52  6E1E               	movwf	i1___ftmul@f2,c
 11304  003A54  0EA6               	movlw	166
 11305  003A56  6E1F               	movwf	i1___ftmul@f2+1,c
 11306  003A58  0E3F               	movlw	63
 11307  003A5A  6E20               	movwf	i1___ftmul@f2+2,c
 11308  003A5C  EC2F  F003         	call	i1___ftmul	;wreg free
 11309  003A60  C01B  F02C         	movff	?i1___ftmul,i1IR_LoadCode@High1
 11310  003A64  C01C  F02D         	movff	?i1___ftmul+1,i1IR_LoadCode@High1+1
 11311  003A68  C01D  F02E         	movff	?i1___ftmul+2,i1IR_LoadCode@High1+2
 11312                           
 11313                           ;IR.c: 145: Low2 = (double)IR_SavedTiming1[0] * (1.0 - 0.3);
 11314  003A6C  0EC0               	movlw	192
 11315  003A6E  6EF6               	movwf	tblptrl,c
 11316  003A70                     	if	1	;There is more than 1 active tblptr byte
 11317  003A70  0E24               	movlw	36
 11318  003A72  6EF7               	movwf	tblptrh,c
 11319  003A74                     	endif
 11320  003A74                     	if	0	;There are less than 3 active tblptr bytes
 11321  003A74                     	endif
 11322  003A74  0009               	tblrd		*+
 11323  003A76  CFF5 F009          	movff	tablat,i1___lwtoft@c
 11324  003A7A  000A               	tblrd		*-
 11325  003A7C  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 11326  003A80  ECC1  F00B         	call	i1___lwtoft	;wreg free
 11327  003A84  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 11328  003A88  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 11329  003A8C  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 11330  003A90  0E33               	movlw	51
 11331  003A92  6E1E               	movwf	i1___ftmul@f2,c
 11332  003A94  6E1F               	movwf	i1___ftmul@f2+1,c
 11333  003A96  0E3F               	movlw	63
 11334  003A98  6E20               	movwf	i1___ftmul@f2+2,c
 11335  003A9A  EC2F  F003         	call	i1___ftmul	;wreg free
 11336  003A9E  C01B  F030         	movff	?i1___ftmul,i1IR_LoadCode@Low2
 11337  003AA2  C01C  F031         	movff	?i1___ftmul+1,i1IR_LoadCode@Low2+1
 11338  003AA6  C01D  F032         	movff	?i1___ftmul+2,i1IR_LoadCode@Low2+2
 11339                           
 11340                           ;IR.c: 146: High2= (double)IR_SavedTiming1[0] * (1.0 + 0.3);
 11341  003AAA  0EC0               	movlw	192
 11342  003AAC  6EF6               	movwf	tblptrl,c
 11343  003AAE                     	if	1	;There is more than 1 active tblptr byte
 11344  003AAE  0E24               	movlw	36
 11345  003AB0  6EF7               	movwf	tblptrh,c
 11346  003AB2                     	endif
 11347  003AB2                     	if	0	;There are less than 3 active tblptr bytes
 11348  003AB2                     	endif
 11349  003AB2  0009               	tblrd		*+
 11350  003AB4  CFF5 F009          	movff	tablat,i1___lwtoft@c
 11351  003AB8  000A               	tblrd		*-
 11352  003ABA  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 11353  003ABE  ECC1  F00B         	call	i1___lwtoft	;wreg free
 11354  003AC2  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 11355  003AC6  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 11356  003ACA  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 11357  003ACE  0E66               	movlw	102
 11358  003AD0  6E1E               	movwf	i1___ftmul@f2,c
 11359  003AD2  0EA6               	movlw	166
 11360  003AD4  6E1F               	movwf	i1___ftmul@f2+1,c
 11361  003AD6  0E3F               	movlw	63
 11362  003AD8  6E20               	movwf	i1___ftmul@f2+2,c
 11363  003ADA  EC2F  F003         	call	i1___ftmul	;wreg free
 11364  003ADE  C01B  F033         	movff	?i1___ftmul,i1IR_LoadCode@High2
 11365  003AE2  C01C  F034         	movff	?i1___ftmul+1,i1IR_LoadCode@High2+1
 11366  003AE6  C01D  F035         	movff	?i1___ftmul+2,i1IR_LoadCode@High2+2
 11367                           
 11368                           ;IR.c: 148: LowBound = Low1;
 11369  003AEA  C029  F037         	movff	i1IR_LoadCode@Low1,i1IR_LoadCode@LowBound
 11370  003AEE  C02A  F038         	movff	i1IR_LoadCode@Low1+1,i1IR_LoadCode@LowBound+1
 11371  003AF2  C02B  F039         	movff	i1IR_LoadCode@Low1+2,i1IR_LoadCode@LowBound+2
 11372                           
 11373                           ;IR.c: 149: if(Low2 < LowBound)
 11374  003AF6  C030  F00C         	movff	i1IR_LoadCode@Low2,i1___ftge@ff1
 11375  003AFA  C031  F00D         	movff	i1IR_LoadCode@Low2+1,i1___ftge@ff1+1
 11376  003AFE  C032  F00E         	movff	i1IR_LoadCode@Low2+2,i1___ftge@ff1+2
 11377  003B02  C037  F00F         	movff	i1IR_LoadCode@LowBound,i1___ftge@ff2
 11378  003B06  C038  F010         	movff	i1IR_LoadCode@LowBound+1,i1___ftge@ff2+1
 11379  003B0A  C039  F011         	movff	i1IR_LoadCode@LowBound+2,i1___ftge@ff2+2
 11380  003B0E  EC75  F009         	call	i1___ftge	;wreg free
 11381  003B12  E206               	bc	i1l5657
 11382                           
 11383                           ;IR.c: 150: {
 11384                           ;IR.c: 151: LowBound = Low2;
 11385  003B14  C030  F037         	movff	i1IR_LoadCode@Low2,i1IR_LoadCode@LowBound
 11386  003B18  C031  F038         	movff	i1IR_LoadCode@Low2+1,i1IR_LoadCode@LowBound+1
 11387  003B1C  C032  F039         	movff	i1IR_LoadCode@Low2+2,i1IR_LoadCode@LowBound+2
 11388  003B20                     i1l5657:
 11389                           
 11390                           ;IR.c: 152: }
 11391                           ;IR.c: 153: if(LowBound < 6000)
 11392  003B20  C037  F00C         	movff	i1IR_LoadCode@LowBound,i1___ftge@ff1
 11393  003B24  C038  F00D         	movff	i1IR_LoadCode@LowBound+1,i1___ftge@ff1+1
 11394  003B28  C039  F00E         	movff	i1IR_LoadCode@LowBound+2,i1___ftge@ff1+2
 11395  003B2C  0E80               	movlw	128
 11396  003B2E  6E0F               	movwf	i1___ftge@ff2,c
 11397  003B30  0EBB               	movlw	187
 11398  003B32  6E10               	movwf	i1___ftge@ff2+1,c
 11399  003B34  0E45               	movlw	69
 11400  003B36  6E11               	movwf	i1___ftge@ff2+2,c
 11401  003B38  EC75  F009         	call	i1___ftge	;wreg free
 11402  003B3C  E206               	bc	i1l5661
 11403                           
 11404                           ;IR.c: 154: {
 11405                           ;IR.c: 155: LowBound = 6000;
 11406  003B3E  0E80               	movlw	128
 11407  003B40  6E37               	movwf	i1IR_LoadCode@LowBound,c
 11408  003B42  0EBB               	movlw	187
 11409  003B44  6E38               	movwf	i1IR_LoadCode@LowBound+1,c
 11410  003B46  0E45               	movlw	69
 11411  003B48  6E39               	movwf	i1IR_LoadCode@LowBound+2,c
 11412  003B4A                     i1l5661:
 11413                           
 11414                           ;IR.c: 156: }
 11415                           ;IR.c: 158: HighBound = High1;
 11416  003B4A  C02C  F03A         	movff	i1IR_LoadCode@High1,i1IR_LoadCode@HighBound
 11417  003B4E  C02D  F03B         	movff	i1IR_LoadCode@High1+1,i1IR_LoadCode@HighBound+1
 11418  003B52  C02E  F03C         	movff	i1IR_LoadCode@High1+2,i1IR_LoadCode@HighBound+2
 11419                           
 11420                           ;IR.c: 159: if(High2 < HighBound)
 11421  003B56  C033  F00C         	movff	i1IR_LoadCode@High2,i1___ftge@ff1
 11422  003B5A  C034  F00D         	movff	i1IR_LoadCode@High2+1,i1___ftge@ff1+1
 11423  003B5E  C035  F00E         	movff	i1IR_LoadCode@High2+2,i1___ftge@ff1+2
 11424  003B62  C03A  F00F         	movff	i1IR_LoadCode@HighBound,i1___ftge@ff2
 11425  003B66  C03B  F010         	movff	i1IR_LoadCode@HighBound+1,i1___ftge@ff2+1
 11426  003B6A  C03C  F011         	movff	i1IR_LoadCode@HighBound+2,i1___ftge@ff2+2
 11427  003B6E  EC75  F009         	call	i1___ftge	;wreg free
 11428  003B72  E206               	bc	i1l5667
 11429                           
 11430                           ;IR.c: 160: {
 11431                           ;IR.c: 161: HighBound = High2;
 11432  003B74  C033  F03A         	movff	i1IR_LoadCode@High2,i1IR_LoadCode@HighBound
 11433  003B78  C034  F03B         	movff	i1IR_LoadCode@High2+1,i1IR_LoadCode@HighBound+1
 11434  003B7C  C035  F03C         	movff	i1IR_LoadCode@High2+2,i1IR_LoadCode@HighBound+2
 11435  003B80                     i1l5667:
 11436                           
 11437                           ;IR.c: 162: }
 11438                           ;IR.c: 163: if(HighBound < 10000)
 11439  003B80  C03A  F00C         	movff	i1IR_LoadCode@HighBound,i1___ftge@ff1
 11440  003B84  C03B  F00D         	movff	i1IR_LoadCode@HighBound+1,i1___ftge@ff1+1
 11441  003B88  C03C  F00E         	movff	i1IR_LoadCode@HighBound+2,i1___ftge@ff1+2
 11442  003B8C  0E40               	movlw	64
 11443  003B8E  6E0F               	movwf	i1___ftge@ff2,c
 11444  003B90  0E1C               	movlw	28
 11445  003B92  6E10               	movwf	i1___ftge@ff2+1,c
 11446  003B94  0E46               	movlw	70
 11447  003B96  6E11               	movwf	i1___ftge@ff2+2,c
 11448  003B98  EC75  F009         	call	i1___ftge	;wreg free
 11449  003B9C  E206               	bc	i1l5671
 11450                           
 11451                           ;IR.c: 164: {
 11452                           ;IR.c: 165: HighBound = 10000;
 11453  003B9E  0E40               	movlw	64
 11454  003BA0  6E3A               	movwf	i1IR_LoadCode@HighBound,c
 11455  003BA2  0E1C               	movlw	28
 11456  003BA4  6E3B               	movwf	i1IR_LoadCode@HighBound+1,c
 11457  003BA6  0E46               	movlw	70
 11458  003BA8  6E3C               	movwf	i1IR_LoadCode@HighBound+2,c
 11459  003BAA                     i1l5671:
 11460                           
 11461                           ;IR.c: 166: }
 11462                           ;IR.c: 168: IR_SyncLow = (unsigned int) LowBound;
 11463  003BAA  C037  F001         	movff	i1IR_LoadCode@LowBound,i1___fttol@f1
 11464  003BAE  C038  F002         	movff	i1IR_LoadCode@LowBound+1,i1___fttol@f1+1
 11465  003BB2  C039  F003         	movff	i1IR_LoadCode@LowBound+2,i1___fttol@f1+2
 11466  003BB6  EC27  F005         	call	i1___fttol	;wreg free
 11467  003BBA  C001  F060         	movff	?i1___fttol,_IR_SyncLow
 11468  003BBE  C002  F061         	movff	?i1___fttol+1,_IR_SyncLow+1
 11469                           
 11470                           ;IR.c: 169: IR_SyncHigh = (unsigned int) HighBound;
 11471  003BC2  C03A  F001         	movff	i1IR_LoadCode@HighBound,i1___fttol@f1
 11472  003BC6  C03B  F002         	movff	i1IR_LoadCode@HighBound+1,i1___fttol@f1+1
 11473  003BCA  C03C  F003         	movff	i1IR_LoadCode@HighBound+2,i1___fttol@f1+2
 11474  003BCE  EC27  F005         	call	i1___fttol	;wreg free
 11475  003BD2  C001  F05E         	movff	?i1___fttol,_IR_SyncHigh
 11476  003BD6  C002  F05F         	movff	?i1___fttol+1,_IR_SyncHigh+1
 11477                           
 11478                           ;IR.c: 171: CodeSize1 = IR_CalculateCodesize(&IR_SavedTiming0[0]);
 11479  003BDA  6A01               	clrf	i1IR_CalculateCodesize@Code,c
 11480  003BDC  0E24               	movlw	36
 11481  003BDE  6E02               	movwf	i1IR_CalculateCodesize@Code+1,c
 11482  003BE0  6A03               	clrf	i1IR_CalculateCodesize@Code+2,c
 11483  003BE2  EC52  F00A         	call	i1_IR_CalculateCodesize	;wreg free
 11484  003BE6  6E2F               	movwf	i1IR_LoadCode@CodeSize1,c
 11485                           
 11486                           ;IR.c: 172: CodeSize2 = IR_CalculateCodesize(&IR_SavedTiming1[0]);
 11487  003BE8  0EC0               	movlw	192
 11488  003BEA  6E01               	movwf	i1IR_CalculateCodesize@Code,c
 11489  003BEC  0E24               	movlw	36
 11490  003BEE  6E02               	movwf	i1IR_CalculateCodesize@Code+1,c
 11491  003BF0  6A03               	clrf	i1IR_CalculateCodesize@Code+2,c
 11492  003BF2  EC52  F00A         	call	i1_IR_CalculateCodesize	;wreg free
 11493  003BF6  6E36               	movwf	i1IR_LoadCode@CodeSize2,c
 11494                           
 11495                           ;IR.c: 174: IR_CodeSize = CodeSize1;
 11496  003BF8  C02F  F06A         	movff	i1IR_LoadCode@CodeSize1,_IR_CodeSize
 11497                           
 11498                           ;IR.c: 175: if(IR_CodeSize < CodeSize2)
 11499  003BFC  5036               	movf	i1IR_LoadCode@CodeSize2,w,c
 11500  003BFE  5C6A               	subwf	_IR_CodeSize,w,c
 11501  003C00  E202               	bc	i1l5685
 11502                           
 11503                           ;IR.c: 176: {
 11504                           ;IR.c: 177: IR_CodeSize = CodeSize2;
 11505  003C02  C036  F06A         	movff	i1IR_LoadCode@CodeSize2,_IR_CodeSize
 11506  003C06                     i1l5685:
 11507                           
 11508                           ;IR.c: 178: }
 11509                           ;IR.c: 179: if(IR_CodeSize < 40)
 11510  003C06  0E28               	movlw	40
 11511  003C08  606A               	cpfslt	_IR_CodeSize,c
 11512  003C0A  0C28               	retlw	40
 11513                           
 11514                           ;IR.c: 180: {
 11515                           ;IR.c: 181: IR_CodeSize = 40;
 11516  003C0C  6E6A               	movwf	_IR_CodeSize,c
 11517  003C0E  0C28               	retlw	40	;funcret
 11518  003C10                     __end_ofi1_IR_LoadCode:
 11519                           	opt stack 0
 11520                           tblptru	equ	0xFF8
 11521                           tblptrh	equ	0xFF7
 11522                           tblptrl	equ	0xFF6
 11523                           tablat	equ	0xFF5
 11524                           prodh	equ	0xFF4
 11525                           prodl	equ	0xFF3
 11526                           intcon	equ	0xFF2
 11527                           intcon2	equ	0xFF1
 11528                           intcon3	equ	0xFF0
 11529                           postinc0	equ	0xFEE
 11530                           wreg	equ	0xFE8
 11531                           postdec1	equ	0xFE5
 11532                           fsr1l	equ	0xFE1
 11533                           bsr	equ	0xFE0
 11534                           postinc2	equ	0xFDE
 11535                           postdec2	equ	0xFDD
 11536                           plusw2	equ	0xFDB
 11537                           fsr2h	equ	0xFDA
 11538                           fsr2l	equ	0xFD9
 11539                           status	equ	0xFD8
 11540                           
 11541 ;; *************** function i1___fttol *****************
 11542 ;; Defined at:
 11543 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
 11544 ;; Parameters:    Size  Location     Type
 11545 ;;  f1              3    0[COMRAM] float 
 11546 ;; Auto vars:     Size  Location     Type
 11547 ;;  __fttol         4   10[COMRAM] unsigned long 
 11548 ;;  __fttol         1   14[COMRAM] unsigned char 
 11549 ;;  __fttol         1    9[COMRAM] unsigned char 
 11550 ;; Return value:  Size  Location     Type
 11551 ;;                  4    0[COMRAM] long 
 11552 ;; Registers used:
 11553 ;;		wreg, status,2, status,0
 11554 ;; Tracked objects:
 11555 ;;		On entry : 0/1
 11556 ;;		On exit  : 0/0
 11557 ;;		Unchanged: 0/0
 11558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11559 ;;      Params:         4       0       0       0       0
 11560 ;;      Locals:         6       0       0       0       0
 11561 ;;      Temps:          5       0       0       0       0
 11562 ;;      Totals:        15       0       0       0       0
 11563 ;;Total ram usage:       15 bytes
 11564 ;; Hardware stack levels used:    1
 11565 ;; Hardware stack levels required when called:    6
 11566 ;; This function calls:
 11567 ;;		Nothing
 11568 ;; This function is called by:
 11569 ;;		i1_IR_LoadCode
 11570 ;; This function uses a non-reentrant model
 11571 ;;
 11572                           
 11573                           	psect	text75
 11574  000A4E                     __ptext75:
 11575                           	opt stack 0
 11576  000A4E                     i1___fttol:
 11577                           	opt stack 15
 11578                           
 11579                           ;incstack = 0
 11580  000A4E  C003  F005         	movff	i1___fttol@f1+2,??i1___fttol
 11581  000A52  6A06               	clrf	(??i1___fttol+1)& (0+255),c
 11582  000A54  6A07               	clrf	(??i1___fttol+2)& (0+255),c
 11583  000A56  3402               	rlcf	i1___fttol@f1+1,w,c
 11584  000A58  3605               	rlcf	??i1___fttol& (0+255),f,c
 11585  000A5A  E301               	bnc	u474_21
 11586  000A5C  8006               	bsf	(??i1___fttol+1)& (0+255),0,c
 11587  000A5E                     u474_21:
 11588  000A5E  5005               	movf	??i1___fttol,w,c
 11589  000A60  6E0F               	movwf	i1___fttol@exp1,c
 11590  000A62  500F               	movf	i1___fttol@exp1,w,c
 11591  000A64  E105               	bnz	i1l5011
 11592  000A66                     i1l5009:
 11593  000A66  6A01               	clrf	?i1___fttol,c
 11594  000A68  6A02               	clrf	?i1___fttol+1,c
 11595  000A6A  6A03               	clrf	?i1___fttol+2,c
 11596  000A6C  6A04               	clrf	?i1___fttol+3,c
 11597  000A6E  0012               	return	
 11598  000A70                     i1l5011:
 11599  000A70  0E17               	movlw	23
 11600  000A72  6E05               	movwf	??i1___fttol& (0+255),c
 11601  000A74  C001  F006         	movff	i1___fttol@f1,??i1___fttol+1
 11602  000A78  C002  F007         	movff	i1___fttol@f1+1,??i1___fttol+2
 11603  000A7C  C003  F008         	movff	i1___fttol@f1+2,??i1___fttol+3
 11604  000A80  2805               	incf	??i1___fttol,w,c
 11605  000A82  6E09               	movwf	(??i1___fttol+4)& (0+255),c
 11606  000A84  D004               	goto	i1u476_20
 11607  000A86                     i1u476_25:
 11608  000A86  90D8               	bcf	status,0,c
 11609  000A88  3208               	rrcf	??i1___fttol+3,f,c
 11610  000A8A  3207               	rrcf	??i1___fttol+2,f,c
 11611  000A8C  3206               	rrcf	??i1___fttol+1,f,c
 11612  000A8E                     i1u476_20:
 11613  000A8E  2E09               	decfsz	(??i1___fttol+4)& (0+255),f,c
 11614  000A90  D7FA               	goto	i1u476_25
 11615  000A92  5006               	movf	??i1___fttol+1,w,c
 11616  000A94  6E0A               	movwf	i1___fttol@sign1,c
 11617  000A96  8E02               	bsf	i1___fttol@f1+1,7,c
 11618  000A98  6A03               	clrf	i1___fttol@f1+2,c
 11619  000A9A  5001               	movf	i1___fttol@f1,w,c
 11620  000A9C  6E0B               	movwf	i1___fttol@lval,c
 11621  000A9E  5002               	movf	i1___fttol@f1+1,w,c
 11622  000AA0  6E0C               	movwf	i1___fttol@lval+1,c
 11623  000AA2  5003               	movf	i1___fttol@f1+2,w,c
 11624  000AA4  6E0D               	movwf	i1___fttol@lval+2,c
 11625  000AA6  6A0E               	clrf	i1___fttol@lval+3,c
 11626  000AA8  0E8E               	movlw	142
 11627  000AAA  5E0F               	subwf	i1___fttol@exp1,f,c
 11628  000AAC  AE0F               	btfss	i1___fttol@exp1,7,c
 11629  000AAE  D00C               	goto	i1l5031
 11630  000AB0  500F               	movf	i1___fttol@exp1,w,c
 11631  000AB2  0A80               	xorlw	128
 11632  000AB4  0F8F               	addlw	143
 11633  000AB6  E3D7               	bnc	i1l5009
 11634  000AB8                     i1l5027:
 11635  000AB8  90D8               	bcf	status,0,c
 11636  000ABA  320E               	rrcf	i1___fttol@lval+3,f,c
 11637  000ABC  320D               	rrcf	i1___fttol@lval+2,f,c
 11638  000ABE  320C               	rrcf	i1___fttol@lval+1,f,c
 11639  000AC0  320B               	rrcf	i1___fttol@lval,f,c
 11640  000AC2  3E0F               	incfsz	i1___fttol@exp1,f,c
 11641  000AC4  D7F9               	goto	i1l5027
 11642  000AC6  D00C               	goto	i1l5039
 11643  000AC8                     i1l5031:
 11644  000AC8  0E17               	movlw	23
 11645  000ACA  640F               	cpfsgt	i1___fttol@exp1,c
 11646  000ACC  D007               	goto	i1l5037
 11647  000ACE  D7CB               	goto	i1l5009
 11648  000AD0                     i1l5035:
 11649  000AD0  90D8               	bcf	status,0,c
 11650  000AD2  360B               	rlcf	i1___fttol@lval,f,c
 11651  000AD4  360C               	rlcf	i1___fttol@lval+1,f,c
 11652  000AD6  360D               	rlcf	i1___fttol@lval+2,f,c
 11653  000AD8  360E               	rlcf	i1___fttol@lval+3,f,c
 11654  000ADA  060F               	decf	i1___fttol@exp1,f,c
 11655  000ADC                     i1l5037:
 11656  000ADC  500F               	movf	i1___fttol@exp1,w,c
 11657  000ADE  E1F8               	bnz	i1l5035
 11658  000AE0                     i1l5039:
 11659  000AE0  500A               	movf	i1___fttol@sign1,w,c
 11660  000AE2  E008               	bz	i1l5043
 11661  000AE4  1E0E               	comf	i1___fttol@lval+3,f,c
 11662  000AE6  1E0D               	comf	i1___fttol@lval+2,f,c
 11663  000AE8  1E0C               	comf	i1___fttol@lval+1,f,c
 11664  000AEA  6C0B               	negf	i1___fttol@lval,c
 11665  000AEC  0E00               	movlw	0
 11666  000AEE  220C               	addwfc	i1___fttol@lval+1,f,c
 11667  000AF0  220D               	addwfc	i1___fttol@lval+2,f,c
 11668  000AF2  220E               	addwfc	i1___fttol@lval+3,f,c
 11669  000AF4                     i1l5043:
 11670  000AF4  C00B  F001         	movff	i1___fttol@lval,?i1___fttol
 11671  000AF8  C00C  F002         	movff	i1___fttol@lval+1,?i1___fttol+1
 11672  000AFC  C00D  F003         	movff	i1___fttol@lval+2,?i1___fttol+2
 11673  000B00  C00E  F004         	movff	i1___fttol@lval+3,?i1___fttol+3
 11674  000B04  0012               	return		;funcret
 11675  000B06                     __end_ofi1___fttol:
 11676                           	opt stack 0
 11677                           tblptru	equ	0xFF8
 11678                           tblptrh	equ	0xFF7
 11679                           tblptrl	equ	0xFF6
 11680                           tablat	equ	0xFF5
 11681                           prodh	equ	0xFF4
 11682                           prodl	equ	0xFF3
 11683                           intcon	equ	0xFF2
 11684                           intcon2	equ	0xFF1
 11685                           intcon3	equ	0xFF0
 11686                           postinc0	equ	0xFEE
 11687                           wreg	equ	0xFE8
 11688                           postdec1	equ	0xFE5
 11689                           fsr1l	equ	0xFE1
 11690                           bsr	equ	0xFE0
 11691                           postinc2	equ	0xFDE
 11692                           postdec2	equ	0xFDD
 11693                           plusw2	equ	0xFDB
 11694                           fsr2h	equ	0xFDA
 11695                           fsr2l	equ	0xFD9
 11696                           status	equ	0xFD8
 11697                           
 11698 ;; *************** function i1___ftge *****************
 11699 ;; Defined at:
 11700 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
 11701 ;; Parameters:    Size  Location     Type
 11702 ;;  ff1             3   11[COMRAM] float 
 11703 ;;  ff2             3   14[COMRAM] float 
 11704 ;; Auto vars:     Size  Location     Type
 11705 ;;		None
 11706 ;; Return value:  Size  Location     Type
 11707 ;;		None               void
 11708 ;; Registers used:
 11709 ;;		wreg, status,2, status,0
 11710 ;; Tracked objects:
 11711 ;;		On entry : 0/1
 11712 ;;		On exit  : 0/0
 11713 ;;		Unchanged: 0/0
 11714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11715 ;;      Params:         6       0       0       0       0
 11716 ;;      Locals:         0       0       0       0       0
 11717 ;;      Temps:          3       0       0       0       0
 11718 ;;      Totals:         9       0       0       0       0
 11719 ;;Total ram usage:        9 bytes
 11720 ;; Hardware stack levels used:    1
 11721 ;; Hardware stack levels required when called:    6
 11722 ;; This function calls:
 11723 ;;		Nothing
 11724 ;; This function is called by:
 11725 ;;		_IR_CheckCode
 11726 ;;		i1_IR_LoadCode
 11727 ;; This function uses a non-reentrant model
 11728 ;;
 11729                           
 11730                           	psect	text76
 11731  0012EA                     __ptext76:
 11732                           	opt stack 0
 11733  0012EA                     i1___ftge:
 11734                           	opt stack 16
 11735                           
 11736                           ;incstack = 0
 11737  0012EA  AE0E               	btfss	i1___ftge@ff1+2,7,c
 11738  0012EC  D00D               	goto	i1l4899
 11739  0012EE  6A12               	clrf	??i1___ftge& (0+255),c
 11740  0012F0  6A13               	clrf	(??i1___ftge+1)& (0+255),c
 11741  0012F2  0E80               	movlw	128
 11742  0012F4  6E14               	movwf	(??i1___ftge+2)& (0+255),c
 11743  0012F6  500C               	movf	i1___ftge@ff1,w,c
 11744  0012F8  5C12               	subwf	??i1___ftge,w,c
 11745  0012FA  6E0C               	movwf	i1___ftge@ff1,c
 11746  0012FC  500D               	movf	i1___ftge@ff1+1,w,c
 11747  0012FE  5813               	subwfb	??i1___ftge+1,w,c
 11748  001300  6E0D               	movwf	i1___ftge@ff1+1,c
 11749  001302  500E               	movf	i1___ftge@ff1+2,w,c
 11750  001304  5814               	subwfb	??i1___ftge+2,w,c
 11751  001306  6E0E               	movwf	i1___ftge@ff1+2,c
 11752  001308                     i1l4899:
 11753  001308  AE11               	btfss	i1___ftge@ff2+2,7,c
 11754  00130A  D00D               	goto	i1l4903
 11755  00130C  6A12               	clrf	??i1___ftge& (0+255),c
 11756  00130E  6A13               	clrf	(??i1___ftge+1)& (0+255),c
 11757  001310  0E80               	movlw	128
 11758  001312  6E14               	movwf	(??i1___ftge+2)& (0+255),c
 11759  001314  500F               	movf	i1___ftge@ff2,w,c
 11760  001316  5C12               	subwf	??i1___ftge,w,c
 11761  001318  6E0F               	movwf	i1___ftge@ff2,c
 11762  00131A  5010               	movf	i1___ftge@ff2+1,w,c
 11763  00131C  5813               	subwfb	??i1___ftge+1,w,c
 11764  00131E  6E10               	movwf	i1___ftge@ff2+1,c
 11765  001320  5011               	movf	i1___ftge@ff2+2,w,c
 11766  001322  5814               	subwfb	??i1___ftge+2,w,c
 11767  001324  6E11               	movwf	i1___ftge@ff2+2,c
 11768  001326                     i1l4903:
 11769  001326  0E80               	movlw	128
 11770  001328  1A0E               	xorwf	i1___ftge@ff1+2,f,c
 11771  00132A  1A11               	xorwf	i1___ftge@ff2+2,f,c
 11772  00132C  500F               	movf	i1___ftge@ff2,w,c
 11773  00132E  5C0C               	subwf	i1___ftge@ff1,w,c
 11774  001330  5010               	movf	i1___ftge@ff2+1,w,c
 11775  001332  580D               	subwfb	i1___ftge@ff1+1,w,c
 11776  001334  5011               	movf	i1___ftge@ff2+2,w,c
 11777  001336  580E               	subwfb	i1___ftge@ff1+2,w,c
 11778  001338  E202               	bc	i1l4909
 11779  00133A  90D8               	bcf	status,0,c
 11780  00133C  0012               	return	
 11781  00133E                     i1l4909:
 11782  00133E  80D8               	bsf	status,0,c
 11783  001340  0012               	return		;funcret
 11784  001342                     __end_ofi1___ftge:
 11785                           	opt stack 0
 11786                           tblptru	equ	0xFF8
 11787                           tblptrh	equ	0xFF7
 11788                           tblptrl	equ	0xFF6
 11789                           tablat	equ	0xFF5
 11790                           prodh	equ	0xFF4
 11791                           prodl	equ	0xFF3
 11792                           intcon	equ	0xFF2
 11793                           intcon2	equ	0xFF1
 11794                           intcon3	equ	0xFF0
 11795                           postinc0	equ	0xFEE
 11796                           wreg	equ	0xFE8
 11797                           postdec1	equ	0xFE5
 11798                           fsr1l	equ	0xFE1
 11799                           bsr	equ	0xFE0
 11800                           postinc2	equ	0xFDE
 11801                           postdec2	equ	0xFDD
 11802                           plusw2	equ	0xFDB
 11803                           fsr2h	equ	0xFDA
 11804                           fsr2l	equ	0xFD9
 11805                           status	equ	0xFD8
 11806                           
 11807 ;; *************** function i1_IR_CalculateCodesize *****************
 11808 ;; Defined at:
 11809 ;;		line 190 in file "IR.c"
 11810 ;; Parameters:    Size  Location     Type
 11811 ;;  Code            3    0[COMRAM] PTR const unsigned int 
 11812 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), 
 11813 ;; Auto vars:     Size  Location     Type
 11814 ;;  IR_Calculate    1    6[COMRAM] unsigned char 
 11815 ;; Return value:  Size  Location     Type
 11816 ;;                  1    wreg      unsigned char 
 11817 ;; Registers used:
 11818 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11819 ;; Tracked objects:
 11820 ;;		On entry : 0/1
 11821 ;;		On exit  : 0/0
 11822 ;;		Unchanged: 0/0
 11823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11824 ;;      Params:         3       0       0       0       0
 11825 ;;      Locals:         1       0       0       0       0
 11826 ;;      Temps:          3       0       0       0       0
 11827 ;;      Totals:         7       0       0       0       0
 11828 ;;Total ram usage:        7 bytes
 11829 ;; Hardware stack levels used:    1
 11830 ;; Hardware stack levels required when called:    6
 11831 ;; This function calls:
 11832 ;;		Nothing
 11833 ;; This function is called by:
 11834 ;;		i1_IR_LoadCode
 11835 ;; This function uses a non-reentrant model
 11836 ;;
 11837                           
 11838                           	psect	text77
 11839  0014A4                     __ptext77:
 11840                           	opt stack 0
 11841  0014A4                     i1_IR_CalculateCodesize:
 11842                           	opt stack 15
 11843                           
 11844                           ;IR.c: 192: unsigned char i;
 11845                           ;IR.c: 194: for(i=0; i<96;i++)
 11846                           
 11847                           ;incstack = 0
 11848  0014A4  6A07               	clrf	i1IR_CalculateCodesize@i,c
 11849  0014A6                     i1l4763:
 11850                           
 11851                           ;IR.c: 195: {
 11852                           ;IR.c: 196: if(Code[i] == 0)
 11853  0014A6  5007               	movf	i1IR_CalculateCodesize@i,w,c
 11854  0014A8  0D02               	mullw	2
 11855  0014AA  50F3               	movf	prodl,w,c
 11856  0014AC  2401               	addwf	i1IR_CalculateCodesize@Code,w,c
 11857  0014AE  6E04               	movwf	??i1_IR_CalculateCodesize& (0+255),c
 11858  0014B0  50F4               	movf	prodh,w,c
 11859  0014B2  2002               	addwfc	i1IR_CalculateCodesize@Code+1,w,c
 11860  0014B4  6E05               	movwf	(??i1_IR_CalculateCodesize+1)& (0+255),c
 11861  0014B6  0E00               	movlw	0
 11862  0014B8  2003               	addwfc	i1IR_CalculateCodesize@Code+2,w,c
 11863  0014BA  6E06               	movwf	(??i1_IR_CalculateCodesize+2)& (0+255),c
 11864  0014BC  C004  FFF6         	movff	??i1_IR_CalculateCodesize,tblptrl
 11865  0014C0  C005  FFF7         	movff	??i1_IR_CalculateCodesize+1,tblptrh
 11866  0014C4  C006  FFF8         	movff	??i1_IR_CalculateCodesize+2,tblptru
 11867  0014C8  0009               	tblrd		*+
 11868  0014CA  50F5               	movf	tablat,w,c
 11869  0014CC  0009               	tblrd		*+
 11870  0014CE  10F5               	iorwf	tablat,w,c
 11871  0014D0  E102               	bnz	i1l4769
 11872                           
 11873                           ;IR.c: 197: {
 11874                           ;IR.c: 198: return i;
 11875  0014D2  5007               	movf	i1IR_CalculateCodesize@i,w,c
 11876  0014D4  0012               	return	
 11877  0014D6                     i1l4769:
 11878  0014D6  2A07               	incf	i1IR_CalculateCodesize@i,f,c
 11879  0014D8  0E5F               	movlw	95
 11880  0014DA  6407               	cpfsgt	i1IR_CalculateCodesize@i,c
 11881  0014DC  D7E4               	goto	i1l4763
 11882  0014DE  0C60               	retlw	96
 11883  0014E0                     __end_ofi1_IR_CalculateCodesize:
 11884                           	opt stack 0
 11885                           tblptru	equ	0xFF8
 11886                           tblptrh	equ	0xFF7
 11887                           tblptrl	equ	0xFF6
 11888                           tablat	equ	0xFF5
 11889                           prodh	equ	0xFF4
 11890                           prodl	equ	0xFF3
 11891                           intcon	equ	0xFF2
 11892                           intcon2	equ	0xFF1
 11893                           intcon3	equ	0xFF0
 11894                           postinc0	equ	0xFEE
 11895                           wreg	equ	0xFE8
 11896                           postdec1	equ	0xFE5
 11897                           fsr1l	equ	0xFE1
 11898                           bsr	equ	0xFE0
 11899                           postinc2	equ	0xFDE
 11900                           postdec2	equ	0xFDD
 11901                           plusw2	equ	0xFDB
 11902                           fsr2h	equ	0xFDA
 11903                           fsr2l	equ	0xFD9
 11904                           status	equ	0xFD8
 11905                           
 11906 ;; *************** function _FSH_Write_IR_RF *****************
 11907 ;; Defined at:
 11908 ;;		line 196 in file "FLASH.c"
 11909 ;; Parameters:    Size  Location     Type
 11910 ;;		None
 11911 ;; Auto vars:     Size  Location     Type
 11912 ;;  RAMaddress      2   32[COMRAM] PTR unsigned int 
 11913 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), 
 11914 ;;  i               2   29[COMRAM] unsigned int 
 11915 ;;  FlashWastein    2   25[COMRAM] unsigned int 
 11916 ;;  WriteTries      1   31[COMRAM] unsigned char 
 11917 ;;  status          1   28[COMRAM] unsigned char 
 11918 ;;  j               1   27[COMRAM] unsigned char 
 11919 ;;  lowint          1   24[COMRAM] unsigned char 
 11920 ;;  highint         1   23[COMRAM] unsigned char 
 11921 ;; Return value:  Size  Location     Type
 11922 ;;                  1    wreg      unsigned char 
 11923 ;; Registers used:
 11924 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11925 ;; Tracked objects:
 11926 ;;		On entry : F/1
 11927 ;;		On exit  : 0/0
 11928 ;;		Unchanged: 0/0
 11929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11930 ;;      Params:         0       0       0       0       0
 11931 ;;      Locals:        11       0       0       0       0
 11932 ;;      Temps:          6       0       0       0       0
 11933 ;;      Totals:        17       0       0       0       0
 11934 ;;Total ram usage:       17 bytes
 11935 ;; Hardware stack levels used:    1
 11936 ;; Hardware stack levels required when called:    9
 11937 ;; This function calls:
 11938 ;;		_FSH_AddressToBlock
 11939 ;;		_FSH_EraseBlock
 11940 ;;		_FSH_VerifyWriteIntArray
 11941 ;;		_FSH_WriteIntArray
 11942 ;;		_IR_ResetData
 11943 ;;		_MSC_BufferCopyIntConst
 11944 ;;		_RF_ResetData
 11945 ;; This function is called by:
 11946 ;;		_IR_CheckCode
 11947 ;; This function uses a non-reentrant model
 11948 ;;
 11949                           
 11950                           	psect	text78
 11951  003354                     __ptext78:
 11952                           	opt stack 0
 11953  003354                     _FSH_Write_IR_RF:
 11954                           	opt stack 13
 11955                           
 11956                           ; BSR set to: 1
 11957                           ;FLASH.c: 198: unsigned int i;
 11958                           ;FLASH.c: 199: unsigned char j;
 11959                           ;FLASH.c: 200: unsigned char WriteTries;
 11960                           ;FLASH.c: 201: unsigned int *RAMaddress;
 11961                           ;FLASH.c: 202: unsigned char status = 0;
 11962                           
 11963                           ;incstack = 0
 11964  003354  6A1D               	clrf	FSH_Write_IR_RF@status,c
 11965                           
 11966                           ; BSR set to: 1
 11967                           ;FLASH.c: 204: unsigned char highint = INTCONbits.GIE;
 11968  003356  0E00               	movlw	0
 11969  003358  BEF2               	btfsc	intcon,7,c	;volatile
 11970  00335A  0E01               	movlw	1
 11971  00335C  6E18               	movwf	FSH_Write_IR_RF@highint,c
 11972                           
 11973                           ;FLASH.c: 205: unsigned char lowint = INTCONbits.PEIE;
 11974  00335E  0E00               	movlw	0
 11975  003360  BCF2               	btfsc	intcon,6,c	;volatile
 11976  003362  0E01               	movlw	1
 11977  003364  6E19               	movwf	FSH_Write_IR_RF@lowint,c
 11978                           
 11979                           ; BSR set to: 1
 11980                           ;FLASH.c: 207: INTCONbits.GIE = 0;
 11981  003366  9EF2               	bcf	intcon,7,c	;volatile
 11982                           
 11983                           ; BSR set to: 1
 11984                           ;FLASH.c: 208: INTCONbits.PEIE = 0;
 11985  003368  9CF2               	bcf	intcon,6,c	;volatile
 11986                           
 11987                           ; BSR set to: 1
 11988                           ;FLASH.c: 210: if(IR_Saved == 90 && RF_Saved == 90)
 11989  00336A  0E5A               	movlw	90
 11990  00336C  19AC               	xorwf	_IR_Saved& (0+255),w,b
 11991  00336E  E107               	bnz	i1l5217
 11992                           
 11993                           ; BSR set to: 1
 11994  003370  0E5A               	movlw	90
 11995  003372  19AD               	xorwf	_RF_Saved& (0+255),w,b
 11996  003374  E104               	bnz	i1l5217
 11997  003376                     i1l5213:
 11998                           
 11999                           ; BSR set to: 1
 12000                           ;FLASH.c: 211: {
 12001                           ;FLASH.c: 213: IR_Saved = 91;
 12002  003376  0E5B               	movlw	91
 12003  003378  6FAC               	movwf	_IR_Saved& (0+255),b
 12004                           
 12005                           ;FLASH.c: 214: RF_Saved = 91;
 12006  00337A  6FAD               	movwf	_RF_Saved& (0+255),b
 12007                           
 12008                           ;FLASH.c: 215: goto END;
 12009  00337C  D1FA               	goto	i1l975
 12010  00337E                     i1l5217:
 12011                           
 12012                           ; BSR set to: 1
 12013                           ;FLASH.c: 217: else if(IR_Saved != 90 && RF_Saved != 90)
 12014  00337E  0E5A               	movlw	90
 12015  003380  19AC               	xorwf	_IR_Saved& (0+255),w,b
 12016  003382  E003               	bz	i1l5223
 12017                           
 12018                           ; BSR set to: 1
 12019  003384  0E5A               	movlw	90
 12020  003386  19AD               	xorwf	_RF_Saved& (0+255),w,b
 12021  003388  E1F6               	bnz	i1l5213
 12022  00338A                     i1l5223:
 12023                           
 12024                           ; BSR set to: 1
 12025                           ;FLASH.c: 223: }
 12026                           ;FLASH.c: 225: if(IR_Saved == 90)
 12027  00338A  0E5A               	movlw	90
 12028  00338C  19AC               	xorwf	_IR_Saved& (0+255),w,b
 12029  00338E  E137               	bnz	i1l5237
 12030                           
 12031                           ; BSR set to: 1
 12032                           ;FLASH.c: 226: {
 12033                           ;FLASH.c: 228: RF_ResetData();
 12034  003390  ECD4  F00D         	call	_RF_ResetData	;wreg free
 12035                           
 12036                           ; BSR set to: 0
 12037                           ;FLASH.c: 229: MSC_BufferCopyIntConst(&RF_SavedTiming,&RF_DataTiming, 64, 0);
 12038  003394  0E80               	movlw	128
 12039  003396  6E07               	movwf	MSC_BufferCopyIntConst@from,c
 12040  003398  0E25               	movlw	37
 12041  00339A  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 12042  00339C  6A09               	clrf	MSC_BufferCopyIntConst@from+2,c
 12043  00339E  0E07               	movlw	low _RF_DataTiming
 12044  0033A0  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 12045  0033A2  0E01               	movlw	high _RF_DataTiming
 12046  0033A4  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 12047  0033A6  6A0D               	clrf	MSC_BufferCopyIntConst@count+1,c
 12048  0033A8  0E40               	movlw	64
 12049  0033AA  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 12050  0033AC  6A0F               	clrf	MSC_BufferCopyIntConst@shift+1,c
 12051  0033AE  6A0E               	clrf	MSC_BufferCopyIntConst@shift,c
 12052  0033B0  ECCE  F006         	call	_MSC_BufferCopyIntConst	;wreg free
 12053                           
 12054                           ;FLASH.c: 230: if(IRProgramCodeNumber == 0)
 12055  0033B4  5068               	movf	_IRProgramCodeNumber,w,c
 12056  0033B6  E111               	bnz	i1l5233
 12057  0033B8                     i1l5231:
 12058                           
 12059                           ;FLASH.c: 231: {
 12060                           ;FLASH.c: 232: MSC_BufferCopyIntConst(&IR_SavedTiming1,&IR_DataHolder1, 96, 0);
 12061  0033B8  0EC0               	movlw	192
 12062  0033BA  6E07               	movwf	MSC_BufferCopyIntConst@from,c
 12063  0033BC  0E24               	movlw	36
 12064  0033BE  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 12065  0033C0  6A09               	clrf	MSC_BufferCopyIntConst@from+2,c
 12066  0033C2  0E00               	movlw	low _IR_DataHolder1
 12067  0033C4  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 12068  0033C6  0E03               	movlw	high _IR_DataHolder1
 12069  0033C8  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 12070  0033CA  6A0D               	clrf	MSC_BufferCopyIntConst@count+1,c
 12071  0033CC  0E60               	movlw	96
 12072  0033CE  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 12073  0033D0  6A0F               	clrf	MSC_BufferCopyIntConst@shift+1,c
 12074  0033D2  6A0E               	clrf	MSC_BufferCopyIntConst@shift,c
 12075  0033D4  ECCE  F006         	call	_MSC_BufferCopyIntConst	;wreg free
 12076                           
 12077                           ;FLASH.c: 233: }
 12078  0033D8  D024               	goto	i1l5243
 12079  0033DA                     i1l5233:
 12080                           
 12081                           ;FLASH.c: 234: else if(IRProgramCodeNumber == 1)
 12082  0033DA  0468               	decf	_IRProgramCodeNumber,w,c
 12083  0033DC  E122               	bnz	i1l5243
 12084                           
 12085                           ;FLASH.c: 235: {
 12086                           ;FLASH.c: 236: MSC_BufferCopyIntConst(&IR_SavedTiming0,&IR_DataHolder1, 96, 0);
 12087  0033DE  6A07               	clrf	MSC_BufferCopyIntConst@from,c
 12088  0033E0  0E24               	movlw	36
 12089  0033E2  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 12090  0033E4  6A09               	clrf	MSC_BufferCopyIntConst@from+2,c
 12091  0033E6  0E00               	movlw	low _IR_DataHolder1
 12092  0033E8  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 12093  0033EA  0E03               	movlw	high _IR_DataHolder1
 12094  0033EC  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 12095  0033EE  6A0D               	clrf	MSC_BufferCopyIntConst@count+1,c
 12096  0033F0  0E60               	movlw	96
 12097  0033F2  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 12098  0033F4  6A0F               	clrf	MSC_BufferCopyIntConst@shift+1,c
 12099  0033F6  6A0E               	clrf	MSC_BufferCopyIntConst@shift,c
 12100  0033F8  ECCE  F006         	call	_MSC_BufferCopyIntConst	;wreg free
 12101  0033FC  D012               	goto	i1l5243
 12102  0033FE                     i1l5237:
 12103                           
 12104                           ; BSR set to: 1
 12105                           ;FLASH.c: 239: else
 12106                           ;FLASH.c: 240: {
 12107                           ;FLASH.c: 242: IR_ResetData();
 12108  0033FE  ECD8  F00D         	call	_IR_ResetData	;wreg free
 12109                           
 12110                           ;FLASH.c: 243: MSC_BufferCopyIntConst(&IR_SavedTiming0,&IR_DataTiming, 96, 0);
 12111  003402  6A07               	clrf	MSC_BufferCopyIntConst@from,c
 12112  003404  0E24               	movlw	36
 12113  003406  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 12114  003408  6A09               	clrf	MSC_BufferCopyIntConst@from+2,c
 12115  00340A  0E00               	movlw	low _IR_DataTiming
 12116  00340C  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 12117  00340E  0E02               	movlw	high _IR_DataTiming
 12118  003410  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 12119  003412  6A0D               	clrf	MSC_BufferCopyIntConst@count+1,c
 12120  003414  0E60               	movlw	96
 12121  003416  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 12122  003418  6A0F               	clrf	MSC_BufferCopyIntConst@shift+1,c
 12123  00341A  6A0E               	clrf	MSC_BufferCopyIntConst@shift,c
 12124  00341C  ECCE  F006         	call	_MSC_BufferCopyIntConst	;wreg free
 12125  003420  D7CB               	goto	i1l5231
 12126  003422                     i1l5243:
 12127                           
 12128                           ;FLASH.c: 245: }
 12129                           ;FLASH.c: 247: FSH_EraseBlock(&IR_SavedTiming0[0]);
 12130  003422  6A05               	clrf	FSH_EraseBlock@Address,c
 12131  003424  0E24               	movlw	36
 12132  003426  6E06               	movwf	FSH_EraseBlock@Address+1,c
 12133  003428  6A07               	clrf	FSH_EraseBlock@Address+2,c
 12134  00342A  6A08               	clrf	FSH_EraseBlock@Address+3,c
 12135  00342C  ECAF  F008         	call	_FSH_EraseBlock	;wreg free
 12136                           
 12137                           ;FLASH.c: 252: WriteTries = 1;
 12138  003430  0E01               	movlw	1
 12139  003432  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12140  003434                     i1l983:
 12141                           
 12142                           ;FLASH.c: 256: if(IR_Saved == 90)
 12143  003434  0E5A               	movlw	90
 12144  003436  0101               	movlb	1	; () banked
 12145  003438  19AC               	xorwf	_IR_Saved& (0+255),w,b
 12146  00343A  E102               	bnz	i1l5249
 12147                           
 12148                           ; BSR set to: 1
 12149                           ;FLASH.c: 257: {
 12150                           ;FLASH.c: 258: if(IRProgramCodeNumber == 0)
 12151  00343C  5068               	movf	_IRProgramCodeNumber,w,c
 12152  00343E  E104               	bnz	i1l5251
 12153  003440                     i1l5249:
 12154                           
 12155                           ; BSR set to: 1
 12156                           ;FLASH.c: 259: {
 12157                           ;FLASH.c: 260: RAMaddress = &IR_DataTiming[0];
 12158  003440  0E00               	movlw	low _IR_DataTiming
 12159  003442  6E21               	movwf	FSH_Write_IR_RF@RAMaddress,c
 12160  003444  0E02               	movlw	high _IR_DataTiming
 12161  003446  D003               	goto	L5
 12162  003448                     i1l5251:
 12163                           
 12164                           ; BSR set to: 1
 12165                           ;FLASH.c: 262: else
 12166                           ;FLASH.c: 263: {
 12167                           ;FLASH.c: 264: RAMaddress = &IR_DataHolder1[0];
 12168  003448  0E00               	movlw	low _IR_DataHolder1
 12169  00344A  6E21               	movwf	FSH_Write_IR_RF@RAMaddress,c
 12170  00344C  0E03               	movlw	high _IR_DataHolder1
 12171  00344E                     L5:
 12172  00344E  6E22               	movwf	FSH_Write_IR_RF@RAMaddress+1,c
 12173                           
 12174                           ; BSR set to: 1
 12175                           ;FLASH.c: 270: }
 12176                           ;FLASH.c: 273: FSH_WriteIntArray(&IR_SavedTiming0[0], RAMaddress);
 12177  003450  6A05               	clrf	FSH_WriteIntArray@ConstArray,c
 12178  003452  0E24               	movlw	36
 12179  003454  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12180  003456  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12181  003458  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12182  00345C  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12183  003460  EC30  F006         	call	_FSH_WriteIntArray	;wreg free
 12184                           
 12185                           ;FLASH.c: 276: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[0],RAMaddress))
 12186  003464  6A01               	clrf	FSH_VerifyWriteIntArray@ConstArray,c
 12187  003466  0E24               	movlw	36
 12188  003468  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12189  00346A  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12190  00346C  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12191  003470  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12192  003474  ECE8  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12193  003478  0900               	iorlw	0
 12194  00347A  E106               	bnz	i1l5267
 12195                           
 12196                           ;FLASH.c: 277: {
 12197                           ;FLASH.c: 278: WriteTries++;
 12198  00347C  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12199                           
 12200                           ;FLASH.c: 279: if(WriteTries > 10)
 12201  00347E  0E0A               	movlw	10
 12202  003480  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12203  003482  D7D8               	goto	i1l983
 12204  003484                     i1l5263:
 12205                           
 12206                           ;FLASH.c: 280: {
 12207                           ;FLASH.c: 281: status = 0;
 12208  003484  6A1D               	clrf	FSH_Write_IR_RF@status,c
 12209                           
 12210                           ;FLASH.c: 282: goto END;
 12211  003486  D175               	goto	i1l975
 12212  003488                     i1l5267:
 12213                           
 12214                           ;FLASH.c: 287: }
 12215                           ;FLASH.c: 288: }
 12216                           ;FLASH.c: 291: WriteTries = 1;
 12217  003488  0E01               	movlw	1
 12218  00348A  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12219                           
 12220                           ;FLASH.c: 292: RAMaddress+=32;
 12221  00348C  0E40               	movlw	64
 12222  00348E  2621               	addwf	FSH_Write_IR_RF@RAMaddress,f,c
 12223  003490  0E00               	movlw	0
 12224  003492  2222               	addwfc	FSH_Write_IR_RF@RAMaddress+1,f,c
 12225  003494                     i1l5271:
 12226                           
 12227                           ;FLASH.c: 296: FSH_WriteIntArray(&IR_SavedTiming0[32], RAMaddress);
 12228  003494  0E40               	movlw	64
 12229  003496  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12230  003498  0E24               	movlw	36
 12231  00349A  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12232  00349C  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12233  00349E  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12234  0034A2  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12235  0034A6  EC30  F006         	call	_FSH_WriteIntArray	;wreg free
 12236                           
 12237                           ;FLASH.c: 299: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[32], RAMaddress))
 12238  0034AA  0E40               	movlw	64
 12239  0034AC  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12240  0034AE  0E24               	movlw	36
 12241  0034B0  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12242  0034B2  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12243  0034B4  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12244  0034B8  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12245  0034BC  ECE8  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12246  0034C0  0900               	iorlw	0
 12247  0034C2  E105               	bnz	i1l5283
 12248                           
 12249                           ;FLASH.c: 300: {
 12250                           ;FLASH.c: 301: WriteTries++;
 12251  0034C4  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12252                           
 12253                           ;FLASH.c: 302: if(WriteTries > 10)
 12254  0034C6  0E0A               	movlw	10
 12255  0034C8  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12256  0034CA  D7E4               	goto	i1l5271
 12257  0034CC  D7DB               	goto	i1l5263
 12258  0034CE                     i1l5283:
 12259                           
 12260                           ;FLASH.c: 310: }
 12261                           ;FLASH.c: 311: }
 12262                           ;FLASH.c: 314: WriteTries = 1;
 12263  0034CE  0E01               	movlw	1
 12264  0034D0  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12265                           
 12266                           ;FLASH.c: 315: RAMaddress+=32;
 12267  0034D2  0E40               	movlw	64
 12268  0034D4  2621               	addwf	FSH_Write_IR_RF@RAMaddress,f,c
 12269  0034D6  0E00               	movlw	0
 12270  0034D8  2222               	addwfc	FSH_Write_IR_RF@RAMaddress+1,f,c
 12271  0034DA                     i1l5287:
 12272                           
 12273                           ;FLASH.c: 320: FSH_WriteIntArray(&IR_SavedTiming0[64], RAMaddress);
 12274  0034DA  0E80               	movlw	128
 12275  0034DC  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12276  0034DE  0E24               	movlw	36
 12277  0034E0  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12278  0034E2  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12279  0034E4  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12280  0034E8  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12281  0034EC  EC30  F006         	call	_FSH_WriteIntArray	;wreg free
 12282                           
 12283                           ;FLASH.c: 323: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[64],RAMaddress))
 12284  0034F0  0E80               	movlw	128
 12285  0034F2  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12286  0034F4  0E24               	movlw	36
 12287  0034F6  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12288  0034F8  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12289  0034FA  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12290  0034FE  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12291  003502  ECE8  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12292  003506  0900               	iorlw	0
 12293  003508  E105               	bnz	i1l5299
 12294                           
 12295                           ;FLASH.c: 324: {
 12296                           ;FLASH.c: 325: WriteTries++;
 12297  00350A  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12298                           
 12299                           ;FLASH.c: 326: if(WriteTries > 10)
 12300  00350C  0E0A               	movlw	10
 12301  00350E  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12302  003510  D7E4               	goto	i1l5287
 12303  003512  D7B8               	goto	i1l5263
 12304  003514                     i1l5299:
 12305                           
 12306                           ;FLASH.c: 334: }
 12307                           ;FLASH.c: 335: }
 12308                           ;FLASH.c: 338: WriteTries = 1;
 12309  003514  0E01               	movlw	1
 12310  003516  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12311  003518                     i1l5301:
 12312                           
 12313                           ;FLASH.c: 342: if(IR_Saved == 90)
 12314  003518  0E5A               	movlw	90
 12315  00351A  0101               	movlb	1	; () banked
 12316  00351C  19AC               	xorwf	_IR_Saved& (0+255),w,b
 12317  00351E  E106               	bnz	i1l5307
 12318                           
 12319                           ; BSR set to: 1
 12320                           ;FLASH.c: 343: {
 12321                           ;FLASH.c: 344: if(IRProgramCodeNumber == 1)
 12322  003520  0468               	decf	_IRProgramCodeNumber,w,c
 12323  003522  E104               	bnz	i1l5307
 12324                           
 12325                           ; BSR set to: 1
 12326                           ;FLASH.c: 345: {
 12327                           ;FLASH.c: 346: RAMaddress = &IR_DataTiming[0];
 12328  003524  0E00               	movlw	low _IR_DataTiming
 12329  003526  6E21               	movwf	FSH_Write_IR_RF@RAMaddress,c
 12330  003528  0E02               	movlw	high _IR_DataTiming
 12331  00352A  D003               	goto	L6
 12332  00352C                     i1l5307:
 12333                           
 12334                           ; BSR set to: 1
 12335                           ;FLASH.c: 348: else
 12336                           ;FLASH.c: 349: {
 12337                           ;FLASH.c: 350: RAMaddress = &IR_DataHolder1[0];
 12338  00352C  0E00               	movlw	low _IR_DataHolder1
 12339  00352E  6E21               	movwf	FSH_Write_IR_RF@RAMaddress,c
 12340  003530  0E03               	movlw	high _IR_DataHolder1
 12341  003532                     L6:
 12342  003532  6E22               	movwf	FSH_Write_IR_RF@RAMaddress+1,c
 12343                           
 12344                           ; BSR set to: 1
 12345                           ;FLASH.c: 356: }
 12346                           ;FLASH.c: 359: FSH_WriteIntArray(&IR_SavedTiming1[0], RAMaddress);
 12347  003534  0EC0               	movlw	192
 12348  003536  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12349  003538  0E24               	movlw	36
 12350  00353A  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12351  00353C  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12352  00353E  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12353  003542  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12354  003546  EC30  F006         	call	_FSH_WriteIntArray	;wreg free
 12355                           
 12356                           ;FLASH.c: 362: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[0], RAMaddress))
 12357  00354A  0EC0               	movlw	192
 12358  00354C  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12359  00354E  0E24               	movlw	36
 12360  003550  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12361  003552  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12362  003554  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12363  003558  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12364  00355C  ECE8  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12365  003560  0900               	iorlw	0
 12366  003562  E105               	bnz	i1l5323
 12367                           
 12368                           ;FLASH.c: 363: {
 12369                           ;FLASH.c: 364: WriteTries++;
 12370  003564  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12371                           
 12372                           ;FLASH.c: 365: if(WriteTries > 10)
 12373  003566  0E0A               	movlw	10
 12374  003568  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12375  00356A  D7D6               	goto	i1l5301
 12376  00356C  D78B               	goto	i1l5263
 12377  00356E                     i1l5323:
 12378                           
 12379                           ;FLASH.c: 373: }
 12380                           ;FLASH.c: 374: }
 12381                           ;FLASH.c: 377: WriteTries = 1;
 12382  00356E  0E01               	movlw	1
 12383  003570  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12384                           
 12385                           ;FLASH.c: 378: RAMaddress+=32;
 12386  003572  0E40               	movlw	64
 12387  003574  2621               	addwf	FSH_Write_IR_RF@RAMaddress,f,c
 12388  003576  0E00               	movlw	0
 12389  003578  2222               	addwfc	FSH_Write_IR_RF@RAMaddress+1,f,c
 12390  00357A                     i1l5327:
 12391                           
 12392                           ;FLASH.c: 383: FSH_WriteIntArray(&IR_SavedTiming1[32], RAMaddress);
 12393  00357A  6A05               	clrf	FSH_WriteIntArray@ConstArray,c
 12394  00357C  0E25               	movlw	37
 12395  00357E  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12396  003580  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12397  003582  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12398  003586  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12399  00358A  EC30  F006         	call	_FSH_WriteIntArray	;wreg free
 12400                           
 12401                           ;FLASH.c: 386: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[32], RAMaddress))
 12402  00358E  6A01               	clrf	FSH_VerifyWriteIntArray@ConstArray,c
 12403  003590  0E25               	movlw	37
 12404  003592  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12405  003594  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12406  003596  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12407  00359A  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12408  00359E  ECE8  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12409  0035A2  0900               	iorlw	0
 12410  0035A4  E105               	bnz	i1l5339
 12411                           
 12412                           ;FLASH.c: 387: {
 12413                           ;FLASH.c: 388: WriteTries++;
 12414  0035A6  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12415                           
 12416                           ;FLASH.c: 389: if(WriteTries > 10)
 12417  0035A8  0E0A               	movlw	10
 12418  0035AA  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12419  0035AC  D7E6               	goto	i1l5327
 12420  0035AE  D76A               	goto	i1l5263
 12421  0035B0                     i1l5339:
 12422                           
 12423                           ;FLASH.c: 397: }
 12424                           ;FLASH.c: 398: }
 12425                           ;FLASH.c: 401: WriteTries = 1;
 12426  0035B0  0E01               	movlw	1
 12427  0035B2  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12428                           
 12429                           ;FLASH.c: 402: RAMaddress+=32;
 12430  0035B4  0E40               	movlw	64
 12431  0035B6  2621               	addwf	FSH_Write_IR_RF@RAMaddress,f,c
 12432  0035B8  0E00               	movlw	0
 12433  0035BA  2222               	addwfc	FSH_Write_IR_RF@RAMaddress+1,f,c
 12434  0035BC                     i1l5343:
 12435                           
 12436                           ;FLASH.c: 407: FSH_WriteIntArray(&IR_SavedTiming1[64], RAMaddress);
 12437  0035BC  0E40               	movlw	64
 12438  0035BE  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12439  0035C0  0E25               	movlw	37
 12440  0035C2  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12441  0035C4  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12442  0035C6  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12443  0035CA  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12444  0035CE  EC30  F006         	call	_FSH_WriteIntArray	;wreg free
 12445                           
 12446                           ;FLASH.c: 410: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[64], RAMaddress))
 12447  0035D2  0E40               	movlw	64
 12448  0035D4  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12449  0035D6  0E25               	movlw	37
 12450  0035D8  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12451  0035DA  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12452  0035DC  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12453  0035E0  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12454  0035E4  ECE8  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12455  0035E8  0900               	iorlw	0
 12456  0035EA  E105               	bnz	i1l5355
 12457                           
 12458                           ;FLASH.c: 411: {
 12459                           ;FLASH.c: 412: WriteTries++;
 12460  0035EC  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12461                           
 12462                           ;FLASH.c: 413: if(WriteTries > 10)
 12463  0035EE  0E0A               	movlw	10
 12464  0035F0  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12465  0035F2  D7E4               	goto	i1l5343
 12466  0035F4  D747               	goto	i1l5263
 12467  0035F6                     i1l5355:
 12468                           
 12469                           ;FLASH.c: 421: }
 12470                           ;FLASH.c: 422: }
 12471                           ;FLASH.c: 425: WriteTries = 1;
 12472  0035F6  0E01               	movlw	1
 12473  0035F8  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12474  0035FA                     i1l5357:
 12475                           
 12476                           ;FLASH.c: 430: FSH_WriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]);
 12477  0035FA  0E80               	movlw	128
 12478  0035FC  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12479  0035FE  0E25               	movlw	37
 12480  003600  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12481  003602  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12482  003604  0E07               	movlw	low _RF_DataTiming
 12483  003606  6E08               	movwf	FSH_WriteIntArray@Array,c
 12484  003608  0E01               	movlw	high _RF_DataTiming
 12485  00360A  6E09               	movwf	FSH_WriteIntArray@Array+1,c
 12486  00360C  EC30  F006         	call	_FSH_WriteIntArray	;wreg free
 12487                           
 12488                           ;FLASH.c: 433: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]))
 12489  003610  0E80               	movlw	128
 12490  003612  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12491  003614  0E25               	movlw	37
 12492  003616  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12493  003618  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12494  00361A  0E07               	movlw	low _RF_DataTiming
 12495  00361C  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 12496  00361E  0E01               	movlw	high _RF_DataTiming
 12497  003620  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 12498  003622  ECE8  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12499  003626  0900               	iorlw	0
 12500  003628  E105               	bnz	i1l5369
 12501                           
 12502                           ;FLASH.c: 434: {
 12503                           ;FLASH.c: 435: WriteTries++;
 12504  00362A  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12505                           
 12506                           ;FLASH.c: 436: if(WriteTries > 10)
 12507  00362C  0E0A               	movlw	10
 12508  00362E  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12509  003630  D7E4               	goto	i1l5357
 12510  003632  D728               	goto	i1l5263
 12511  003634                     i1l5369:
 12512                           
 12513                           ;FLASH.c: 444: }
 12514                           ;FLASH.c: 445: }
 12515                           ;FLASH.c: 448: WriteTries = 1;
 12516  003634  0E01               	movlw	1
 12517  003636  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12518  003638                     i1l5371:
 12519                           
 12520                           ;FLASH.c: 453: FSH_WriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]);
 12521  003638  0EC0               	movlw	192
 12522  00363A  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12523  00363C  0E25               	movlw	37
 12524  00363E  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12525  003640  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12526  003642  0E47               	movlw	low (_RF_DataTiming+64)
 12527  003644  6E08               	movwf	FSH_WriteIntArray@Array,c
 12528  003646  0E01               	movlw	high (_RF_DataTiming+64)
 12529  003648  6E09               	movwf	FSH_WriteIntArray@Array+1,c
 12530  00364A  EC30  F006         	call	_FSH_WriteIntArray	;wreg free
 12531                           
 12532                           ;FLASH.c: 456: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]))
 12533  00364E  0EC0               	movlw	192
 12534  003650  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12535  003652  0E25               	movlw	37
 12536  003654  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12537  003656  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12538  003658  0E47               	movlw	low (_RF_DataTiming+64)
 12539  00365A  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 12540  00365C  0E01               	movlw	high (_RF_DataTiming+64)
 12541  00365E  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 12542  003660  ECE8  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12543  003664  0900               	iorlw	0
 12544  003666  E105               	bnz	i1l5383
 12545                           
 12546                           ;FLASH.c: 457: {
 12547                           ;FLASH.c: 458: WriteTries++;
 12548  003668  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12549                           
 12550                           ;FLASH.c: 459: if(WriteTries > 10)
 12551  00366A  0E0A               	movlw	10
 12552  00366C  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12553  00366E  D7E4               	goto	i1l5371
 12554  003670  D709               	goto	i1l5263
 12555  003672                     i1l5383:
 12556                           
 12557                           ;FLASH.c: 467: }
 12558                           ;FLASH.c: 468: }
 12559                           ;FLASH.c: 471: for(j=8;j<16;j++)
 12560  003672  0E08               	movlw	8
 12561  003674  6E1C               	movwf	FSH_Write_IR_RF@j,c
 12562  003676                     i1l5385:
 12563  003676  0E0F               	movlw	15
 12564  003678  641C               	cpfsgt	FSH_Write_IR_RF@j,c
 12565  00367A  D001               	goto	i1l5389
 12566  00367C  D078               	goto	i1l5437
 12567  00367E                     i1l5389:
 12568                           
 12569                           ;FLASH.c: 472: {
 12570                           ;FLASH.c: 473: WriteTries = 1;
 12571  00367E  0E01               	movlw	1
 12572  003680  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12573  003682                     i1l5391:
 12574                           
 12575                           ;FLASH.c: 476: i=0;
 12576  003682  6A1E               	clrf	FSH_Write_IR_RF@i,c
 12577  003684  6A1F               	clrf	FSH_Write_IR_RF@i+1,c
 12578                           
 12579                           ;FLASH.c: 477: FlashWasteindex = i + 64*(j-8);
 12580  003686  501C               	movf	FSH_Write_IR_RF@j,w,c
 12581  003688  6E12               	movwf	??_FSH_Write_IR_RF& (0+255),c
 12582  00368A  6A13               	clrf	(??_FSH_Write_IR_RF+1)& (0+255),c
 12583  00368C  0E06               	movlw	6
 12584  00368E                     i1u524_25:
 12585  00368E  90D8               	bcf	status,0,c
 12586  003690  3612               	rlcf	??_FSH_Write_IR_RF,f,c
 12587  003692  3613               	rlcf	??_FSH_Write_IR_RF+1,f,c
 12588  003694  2EE8               	decfsz	wreg,f,c
 12589  003696  D7FB               	goto	i1u524_25
 12590  003698  501E               	movf	FSH_Write_IR_RF@i,w,c
 12591  00369A  2612               	addwf	??_FSH_Write_IR_RF,f,c
 12592  00369C  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 12593  00369E  2213               	addwfc	??_FSH_Write_IR_RF+1,f,c
 12594  0036A0  0E00               	movlw	0
 12595  0036A2  2412               	addwf	??_FSH_Write_IR_RF,w,c
 12596  0036A4  6E1A               	movwf	FSH_Write_IR_RF@FlashWasteindex,c
 12597  0036A6  0EFE               	movlw	254
 12598  0036A8  2013               	addwfc	??_FSH_Write_IR_RF+1,w,c
 12599  0036AA  6E1B               	movwf	FSH_Write_IR_RF@FlashWasteindex+1,c
 12600                           
 12601                           ;FLASH.c: 478: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 12602  0036AC  6A12               	clrf	??_FSH_Write_IR_RF& (0+255),c
 12603  0036AE  0E26               	movlw	38
 12604  0036B0  6E13               	movwf	(??_FSH_Write_IR_RF+1)& (0+255),c
 12605  0036B2  6A14               	clrf	(??_FSH_Write_IR_RF+2)& (0+255),c
 12606  0036B4  501A               	movf	FSH_Write_IR_RF@FlashWasteindex,w,c
 12607  0036B6  2412               	addwf	??_FSH_Write_IR_RF,w,c
 12608  0036B8  6E15               	movwf	(??_FSH_Write_IR_RF+3)& (0+255),c
 12609  0036BA  501B               	movf	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 12610  0036BC  2013               	addwfc	??_FSH_Write_IR_RF+1,w,c
 12611  0036BE  6E16               	movwf	(??_FSH_Write_IR_RF+4)& (0+255),c
 12612  0036C0  0E00               	movlw	0
 12613  0036C2  2014               	addwfc	??_FSH_Write_IR_RF+2,w,c
 12614  0036C4  6E17               	movwf	(??_FSH_Write_IR_RF+5)& (0+255),c
 12615  0036C6  5015               	movf	??_FSH_Write_IR_RF+3,w,c
 12616  0036C8  6E01               	movwf	FSH_AddressToBlock@Address,c
 12617  0036CA  5016               	movf	??_FSH_Write_IR_RF+4,w,c
 12618  0036CC  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 12619  0036CE  5017               	movf	??_FSH_Write_IR_RF+5,w,c
 12620  0036D0  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 12621  0036D2  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 12622  0036D4  EC75  F00B         	call	_FSH_AddressToBlock	;wreg free
 12623                           
 12624                           ;FLASH.c: 479: for(i = 0; i<64; i++)
 12625  0036D8  6A1E               	clrf	FSH_Write_IR_RF@i,c
 12626  0036DA  6A1F               	clrf	FSH_Write_IR_RF@i+1,c
 12627  0036DC                     i1l5399:
 12628  0036DC  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 12629  0036DE  E109               	bnz	i1l5409
 12630  0036E0  0E40               	movlw	64
 12631  0036E2  5C1E               	subwf	FSH_Write_IR_RF@i,w,c
 12632  0036E4  E206               	bc	i1l5409
 12633                           
 12634                           ;FLASH.c: 480: {
 12635                           ;FLASH.c: 482: TABLAT = 0xDA;
 12636  0036E6  0EDA               	movlw	218
 12637  0036E8  6EF5               	movwf	tablat,c	;volatile
 12638  0036EA  000D               	tblwt		*+	;# 
 12639  0036EC  4A1E               	infsnz	FSH_Write_IR_RF@i,f,c
 12640  0036EE  2A1F               	incf	FSH_Write_IR_RF@i+1,f,c
 12641  0036F0  D7F5               	goto	i1l5399
 12642  0036F2                     i1l5409:
 12643                           
 12644                           ;FLASH.c: 484: }
 12645                           ;FLASH.c: 485: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 12646  0036F2  6A12               	clrf	??_FSH_Write_IR_RF& (0+255),c
 12647  0036F4  0E26               	movlw	38
 12648  0036F6  6E13               	movwf	(??_FSH_Write_IR_RF+1)& (0+255),c
 12649  0036F8  6A14               	clrf	(??_FSH_Write_IR_RF+2)& (0+255),c
 12650  0036FA  501A               	movf	FSH_Write_IR_RF@FlashWasteindex,w,c
 12651  0036FC  2412               	addwf	??_FSH_Write_IR_RF,w,c
 12652  0036FE  6E15               	movwf	(??_FSH_Write_IR_RF+3)& (0+255),c
 12653  003700  501B               	movf	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 12654  003702  2013               	addwfc	??_FSH_Write_IR_RF+1,w,c
 12655  003704  6E16               	movwf	(??_FSH_Write_IR_RF+4)& (0+255),c
 12656  003706  0E00               	movlw	0
 12657  003708  2014               	addwfc	??_FSH_Write_IR_RF+2,w,c
 12658  00370A  6E17               	movwf	(??_FSH_Write_IR_RF+5)& (0+255),c
 12659  00370C  5015               	movf	??_FSH_Write_IR_RF+3,w,c
 12660  00370E  6E01               	movwf	FSH_AddressToBlock@Address,c
 12661  003710  5016               	movf	??_FSH_Write_IR_RF+4,w,c
 12662  003712  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 12663  003714  5017               	movf	??_FSH_Write_IR_RF+5,w,c
 12664  003716  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 12665  003718  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 12666  00371A  EC75  F00B         	call	_FSH_AddressToBlock	;wreg free
 12667                           
 12668                           ;FLASH.c: 487: EECON1bits.FREE = 0;
 12669  00371E  98A6               	bcf	4006,4,c	;volatile
 12670  003720  84A6               	bsf	4006,2,c	;# 
 12671  003722  9EF2               	bcf	intcon,7,c	;# 
 12672  003724  0E55               	movlw	85	;# 
 12673  003726  6EA7               	movwf	4007,c	;# 
 12674  003728  0EAA               	movlw	170	;# 
 12675  00372A  6EA7               	movwf	4007,c	;# 
 12676  00372C  82A6               	bsf	4006,1,c	;# 
 12677                           
 12678                           ;FLASH.c: 498: for(i=0; i<64;i++)
 12679  00372E  6A1E               	clrf	FSH_Write_IR_RF@i,c
 12680  003730  6A1F               	clrf	FSH_Write_IR_RF@i+1,c
 12681  003732                     i1l5415:
 12682  003732  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 12683  003734  E11A               	bnz	i1l5433
 12684  003736  0E40               	movlw	64
 12685  003738  5C1E               	subwf	FSH_Write_IR_RF@i,w,c
 12686  00373A  E217               	bc	i1l5433
 12687                           
 12688                           ;FLASH.c: 499: {
 12689                           ;FLASH.c: 500: if(FlashWaste[FlashWasteindex] != 0xDA)
 12690  00373C  0E00               	movlw	0
 12691  00373E  241A               	addwf	FSH_Write_IR_RF@FlashWasteindex,w,c
 12692  003740  6EF6               	movwf	tblptrl,c
 12693  003742  0E26               	movlw	38
 12694  003744  201B               	addwfc	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 12695  003746  6EF7               	movwf	tblptrh,c
 12696  003748  6AF8               	clrf	tblptru,c
 12697  00374A  0E00               	movlw	0
 12698  00374C  22F8               	addwfc	tblptru,f,c
 12699  00374E  0008               	tblrd		*
 12700  003750  50F5               	movf	tablat,w,c
 12701  003752  0ADA               	xorlw	218
 12702  003754  E005               	bz	i1l5429
 12703                           
 12704                           ;FLASH.c: 501: {
 12705                           ;FLASH.c: 502: WriteTries++;
 12706  003756  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12707                           
 12708                           ;FLASH.c: 503: if(WriteTries > 10)
 12709  003758  0E0A               	movlw	10
 12710  00375A  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12711  00375C  D792               	goto	i1l5391
 12712  00375E  D692               	goto	i1l5263
 12713  003760                     i1l5429:
 12714                           
 12715                           ;FLASH.c: 511: }
 12716                           ;FLASH.c: 512: }
 12717                           ;FLASH.c: 513: FlashWasteindex++;
 12718  003760  4A1A               	infsnz	FSH_Write_IR_RF@FlashWasteindex,f,c
 12719  003762  2A1B               	incf	FSH_Write_IR_RF@FlashWasteindex+1,f,c
 12720  003764  4A1E               	infsnz	FSH_Write_IR_RF@i,f,c
 12721  003766  2A1F               	incf	FSH_Write_IR_RF@i+1,f,c
 12722  003768  D7E4               	goto	i1l5415
 12723  00376A                     i1l5433:
 12724  00376A  2A1C               	incf	FSH_Write_IR_RF@j,f,c
 12725  00376C  D784               	goto	i1l5385
 12726  00376E                     i1l5437:
 12727                           
 12728                           ;FLASH.c: 514: }
 12729                           ;FLASH.c: 515: }
 12730                           ;FLASH.c: 516: status = 1;
 12731  00376E  0E01               	movlw	1
 12732  003770  6E1D               	movwf	FSH_Write_IR_RF@status,c
 12733  003772                     i1l975:
 12734                           
 12735                           ;FLASH.c: 519: if(highint)
 12736  003772  5018               	movf	FSH_Write_IR_RF@highint,w,c
 12737  003774  E001               	bz	i1l5441
 12738                           
 12739                           ;FLASH.c: 520: {
 12740                           ;FLASH.c: 521: INTCONbits.GIE = 1;
 12741  003776  8EF2               	bsf	intcon,7,c	;volatile
 12742  003778                     i1l5441:
 12743                           
 12744                           ;FLASH.c: 522: }
 12745                           ;FLASH.c: 523: if(lowint)
 12746  003778  5019               	movf	FSH_Write_IR_RF@lowint,w,c
 12747  00377A  E001               	bz	i1l5445
 12748                           
 12749                           ;FLASH.c: 524: {
 12750                           ;FLASH.c: 525: INTCONbits.PEIE = 1;
 12751  00377C  8CF2               	bsf	intcon,6,c	;volatile
 12752  00377E                     i1l5445:
 12753                           
 12754                           ;FLASH.c: 526: }
 12755                           ;FLASH.c: 527: return status;
 12756  00377E  501D               	movf	FSH_Write_IR_RF@status,w,c
 12757  003780  0012               	return		;funcret
 12758  003782                     __end_of_FSH_Write_IR_RF:
 12759                           	opt stack 0
 12760                           tblptru	equ	0xFF8
 12761                           tblptrh	equ	0xFF7
 12762                           tblptrl	equ	0xFF6
 12763                           tablat	equ	0xFF5
 12764                           prodh	equ	0xFF4
 12765                           prodl	equ	0xFF3
 12766                           intcon	equ	0xFF2
 12767                           intcon2	equ	0xFF1
 12768                           intcon3	equ	0xFF0
 12769                           postinc0	equ	0xFEE
 12770                           wreg	equ	0xFE8
 12771                           postdec1	equ	0xFE5
 12772                           fsr1l	equ	0xFE1
 12773                           bsr	equ	0xFE0
 12774                           postinc2	equ	0xFDE
 12775                           postdec2	equ	0xFDD
 12776                           plusw2	equ	0xFDB
 12777                           fsr2h	equ	0xFDA
 12778                           fsr2l	equ	0xFD9
 12779                           status	equ	0xFD8
 12780                           
 12781 ;; *************** function _RF_ResetData *****************
 12782 ;; Defined at:
 12783 ;;		line 116 in file "RF.c"
 12784 ;; Parameters:    Size  Location     Type
 12785 ;;		None
 12786 ;; Auto vars:     Size  Location     Type
 12787 ;;		None
 12788 ;; Return value:  Size  Location     Type
 12789 ;;		None               void
 12790 ;; Registers used:
 12791 ;;		None
 12792 ;; Tracked objects:
 12793 ;;		On entry : F/1
 12794 ;;		On exit  : F/0
 12795 ;;		Unchanged: 0/0
 12796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12797 ;;      Params:         0       0       0       0       0
 12798 ;;      Locals:         0       0       0       0       0
 12799 ;;      Temps:          0       0       0       0       0
 12800 ;;      Totals:         0       0       0       0       0
 12801 ;;Total ram usage:        0 bytes
 12802 ;; Hardware stack levels used:    1
 12803 ;; Hardware stack levels required when called:    6
 12804 ;; This function calls:
 12805 ;;		Nothing
 12806 ;; This function is called by:
 12807 ;;		_FSH_Write_IR_RF
 12808 ;; This function uses a non-reentrant model
 12809 ;;
 12810                           
 12811                           	psect	text79
 12812  001BA8                     __ptext79:
 12813                           	opt stack 0
 12814  001BA8                     _RF_ResetData:
 12815                           	opt stack 15
 12816                           
 12817                           ; BSR set to: 1
 12818                           ;RF.c: 118: RF_DataPlace = 0;
 12819                           
 12820                           ;incstack = 0
 12821  001BA8  0100               	movlb	0	; () banked
 12822  001BAA  6BC9               	clrf	_RF_DataPlace& (0+255),b
 12823                           
 12824                           ;RF.c: 119: RFStarted = 0;
 12825  001BAC  6BC7               	clrf	_RFStarted& (0+255),b
 12826                           
 12827                           ; BSR set to: 0
 12828  001BAE  0012               	return		;funcret
 12829  001BB0                     __end_of_RF_ResetData:
 12830                           	opt stack 0
 12831                           tblptru	equ	0xFF8
 12832                           tblptrh	equ	0xFF7
 12833                           tblptrl	equ	0xFF6
 12834                           tablat	equ	0xFF5
 12835                           prodh	equ	0xFF4
 12836                           prodl	equ	0xFF3
 12837                           intcon	equ	0xFF2
 12838                           intcon2	equ	0xFF1
 12839                           intcon3	equ	0xFF0
 12840                           postinc0	equ	0xFEE
 12841                           wreg	equ	0xFE8
 12842                           postdec1	equ	0xFE5
 12843                           fsr1l	equ	0xFE1
 12844                           bsr	equ	0xFE0
 12845                           postinc2	equ	0xFDE
 12846                           postdec2	equ	0xFDD
 12847                           plusw2	equ	0xFDB
 12848                           fsr2h	equ	0xFDA
 12849                           fsr2l	equ	0xFD9
 12850                           status	equ	0xFD8
 12851                           
 12852 ;; *************** function _MSC_BufferCopyIntConst *****************
 12853 ;; Defined at:
 12854 ;;		line 150 in file "MISC.c"
 12855 ;; Parameters:    Size  Location     Type
 12856 ;;  from            3    6[COMRAM] PTR const unsigned int 
 12857 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 12858 ;;  to              2    9[COMRAM] PTR unsigned int 
 12859 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 12860 ;;  count           2   11[COMRAM] unsigned int 
 12861 ;;  shift           2   13[COMRAM] unsigned int 
 12862 ;; Auto vars:     Size  Location     Type
 12863 ;;  i               2   15[COMRAM] unsigned int 
 12864 ;; Return value:  Size  Location     Type
 12865 ;;		None               void
 12866 ;; Registers used:
 12867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12868 ;; Tracked objects:
 12869 ;;		On entry : 0/0
 12870 ;;		On exit  : 0/0
 12871 ;;		Unchanged: 0/0
 12872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12873 ;;      Params:         9       0       0       0       0
 12874 ;;      Locals:         2       0       0       0       0
 12875 ;;      Temps:          0       0       0       0       0
 12876 ;;      Totals:        11       0       0       0       0
 12877 ;;Total ram usage:       11 bytes
 12878 ;; Hardware stack levels used:    1
 12879 ;; Hardware stack levels required when called:    7
 12880 ;; This function calls:
 12881 ;;		i1_MSC_CleanBufferInt
 12882 ;; This function is called by:
 12883 ;;		_FSH_Write_IR_RF
 12884 ;; This function uses a non-reentrant model
 12885 ;;
 12886                           
 12887                           	psect	text80
 12888  000D9C                     __ptext80:
 12889                           	opt stack 0
 12890  000D9C                     _MSC_BufferCopyIntConst:
 12891                           	opt stack 14
 12892                           
 12893                           ;MISC.c: 153: MSC_CleanBufferInt(to,count);
 12894                           
 12895                           ; BSR set to: 0
 12896                           ;incstack = 0
 12897  000D9C  C00A  F001         	movff	MSC_BufferCopyIntConst@to,i1MSC_CleanBufferInt@data
 12898  000DA0  C00B  F002         	movff	MSC_BufferCopyIntConst@to+1,i1MSC_CleanBufferInt@data+1
 12899  000DA4  C00C  F003         	movff	MSC_BufferCopyIntConst@count,i1MSC_CleanBufferInt@count
 12900  000DA8  C00D  F004         	movff	MSC_BufferCopyIntConst@count+1,i1MSC_CleanBufferInt@count+1
 12901  000DAC  ECEE  F00A         	call	i1_MSC_CleanBufferInt	;wreg free
 12902                           
 12903                           ;MISC.c: 154: for(i = shift; i>0; i--)
 12904  000DB0  C00E  F010         	movff	MSC_BufferCopyIntConst@shift,MSC_BufferCopyIntConst@i
 12905  000DB4  C00F  F011         	movff	MSC_BufferCopyIntConst@shift+1,MSC_BufferCopyIntConst@i+1
 12906  000DB8                     i1l4549:
 12907  000DB8  5010               	movf	MSC_BufferCopyIntConst@i,w,c
 12908  000DBA  1011               	iorwf	MSC_BufferCopyIntConst@i+1,w,c
 12909  000DBC  E02B               	bz	i1l4569
 12910                           
 12911                           ;MISC.c: 155: {
 12912                           ;MISC.c: 156: *to = ' ';
 12913  000DBE  C00A  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
 12914  000DC2  C00B  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
 12915  000DC6  0E20               	movlw	32
 12916  000DC8  6EDE               	movwf	postinc2,c
 12917  000DCA  6ADD               	clrf	postdec2,c
 12918                           
 12919                           ;MISC.c: 157: to++;
 12920  000DCC  0E02               	movlw	2
 12921  000DCE  260A               	addwf	MSC_BufferCopyIntConst@to,f,c
 12922  000DD0  0E00               	movlw	0
 12923  000DD2  220B               	addwfc	MSC_BufferCopyIntConst@to+1,f,c
 12924  000DD4  0610               	decf	MSC_BufferCopyIntConst@i,f,c
 12925  000DD6  A0D8               	btfss	status,0,c
 12926  000DD8  0611               	decf	MSC_BufferCopyIntConst@i+1,f,c
 12927  000DDA  D7EE               	goto	i1l4549
 12928  000DDC                     i1l4561:
 12929                           
 12930                           ;MISC.c: 160: {
 12931                           ;MISC.c: 161: *to = *from;
 12932  000DDC  C007  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
 12933  000DE0  C008  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
 12934  000DE4  C009  FFF8         	movff	MSC_BufferCopyIntConst@from+2,tblptru
 12935  000DE8  C00A  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
 12936  000DEC  C00B  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
 12937  000DF0  0009               	tblrd		*+
 12938  000DF2  CFF5 FFDE          	movff	tablat,postinc2
 12939  000DF6  0008               	tblrd		*
 12940  000DF8  CFF5 FFDD          	movff	tablat,postdec2
 12941                           
 12942                           ;MISC.c: 162: from++;
 12943  000DFC  0E02               	movlw	2
 12944  000DFE  2607               	addwf	MSC_BufferCopyIntConst@from,f,c
 12945  000E00  0E00               	movlw	0
 12946  000E02  2208               	addwfc	MSC_BufferCopyIntConst@from+1,f,c
 12947  000E04  2209               	addwfc	MSC_BufferCopyIntConst@from+2,f,c
 12948                           
 12949                           ;MISC.c: 163: to++;
 12950  000E06  0E02               	movlw	2
 12951  000E08  260A               	addwf	MSC_BufferCopyIntConst@to,f,c
 12952  000E0A  0E00               	movlw	0
 12953  000E0C  220B               	addwfc	MSC_BufferCopyIntConst@to+1,f,c
 12954                           
 12955                           ;MISC.c: 164: count--;
 12956  000E0E  060C               	decf	MSC_BufferCopyIntConst@count,f,c
 12957  000E10  A0D8               	btfss	status,0,c
 12958  000E12  060D               	decf	MSC_BufferCopyIntConst@count+1,f,c
 12959  000E14                     i1l4569:
 12960  000E14  C007  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
 12961  000E18  C008  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
 12962  000E1C  C009  FFF8         	movff	MSC_BufferCopyIntConst@from+2,tblptru
 12963  000E20  0009               	tblrd		*+
 12964  000E22  50F5               	movf	tablat,w,c
 12965  000E24  0009               	tblrd		*+
 12966  000E26  10F5               	iorwf	tablat,w,c
 12967  000E28  B4D8               	btfsc	status,2,c
 12968  000E2A  0012               	return	
 12969  000E2C  500C               	movf	MSC_BufferCopyIntConst@count,w,c
 12970  000E2E  100D               	iorwf	MSC_BufferCopyIntConst@count+1,w,c
 12971  000E30  E1D5               	bnz	i1l4561
 12972  000E32  0012               	return		;funcret
 12973  000E34                     __end_of_MSC_BufferCopyIntConst:
 12974                           	opt stack 0
 12975                           tblptru	equ	0xFF8
 12976                           tblptrh	equ	0xFF7
 12977                           tblptrl	equ	0xFF6
 12978                           tablat	equ	0xFF5
 12979                           prodh	equ	0xFF4
 12980                           prodl	equ	0xFF3
 12981                           intcon	equ	0xFF2
 12982                           intcon2	equ	0xFF1
 12983                           intcon3	equ	0xFF0
 12984                           postinc0	equ	0xFEE
 12985                           wreg	equ	0xFE8
 12986                           postdec1	equ	0xFE5
 12987                           fsr1l	equ	0xFE1
 12988                           bsr	equ	0xFE0
 12989                           postinc2	equ	0xFDE
 12990                           postdec2	equ	0xFDD
 12991                           plusw2	equ	0xFDB
 12992                           fsr2h	equ	0xFDA
 12993                           fsr2l	equ	0xFD9
 12994                           status	equ	0xFD8
 12995                           
 12996 ;; *************** function i1_MSC_CleanBufferInt *****************
 12997 ;; Defined at:
 12998 ;;		line 90 in file "MISC.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;  data            2    0[COMRAM] PTR unsigned int 
 13001 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 13002 ;;  count           2    2[COMRAM] unsigned int 
 13003 ;; Auto vars:     Size  Location     Type
 13004 ;;  MSC_CleanBuf    2    4[COMRAM] unsigned int 
 13005 ;; Return value:  Size  Location     Type
 13006 ;;		None               void
 13007 ;; Registers used:
 13008 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 13009 ;; Tracked objects:
 13010 ;;		On entry : 0/0
 13011 ;;		On exit  : 0/0
 13012 ;;		Unchanged: 0/0
 13013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13014 ;;      Params:         4       0       0       0       0
 13015 ;;      Locals:         2       0       0       0       0
 13016 ;;      Temps:          0       0       0       0       0
 13017 ;;      Totals:         6       0       0       0       0
 13018 ;;Total ram usage:        6 bytes
 13019 ;; Hardware stack levels used:    1
 13020 ;; Hardware stack levels required when called:    6
 13021 ;; This function calls:
 13022 ;;		Nothing
 13023 ;; This function is called by:
 13024 ;;		_MSC_BufferCopyIntConst
 13025 ;; This function uses a non-reentrant model
 13026 ;;
 13027                           
 13028                           	psect	text81
 13029  0015DC                     __ptext81:
 13030                           	opt stack 0
 13031  0015DC                     i1_MSC_CleanBufferInt:
 13032                           	opt stack 14
 13033                           
 13034                           ;MISC.c: 92: unsigned int i=0;
 13035                           
 13036                           ;incstack = 0
 13037  0015DC  6A05               	clrf	i1MSC_CleanBufferInt@i,c
 13038  0015DE  6A06               	clrf	i1MSC_CleanBufferInt@i+1,c
 13039                           
 13040                           ;MISC.c: 93: for(i=0; i<count;i++)
 13041  0015E0  6A05               	clrf	i1MSC_CleanBufferInt@i,c
 13042  0015E2  6A06               	clrf	i1MSC_CleanBufferInt@i+1,c
 13043  0015E4  D00D               	goto	i1l4375
 13044  0015E6                     i1l4371:
 13045                           
 13046                           ;MISC.c: 94: {
 13047                           ;MISC.c: 95: data[i]= 0;
 13048  0015E6  90D8               	bcf	status,0,c
 13049  0015E8  3405               	rlcf	i1MSC_CleanBufferInt@i,w,c
 13050  0015EA  6ED9               	movwf	fsr2l,c
 13051  0015EC  3406               	rlcf	i1MSC_CleanBufferInt@i+1,w,c
 13052  0015EE  6EDA               	movwf	fsr2h,c
 13053  0015F0  5001               	movf	i1MSC_CleanBufferInt@data,w,c
 13054  0015F2  26D9               	addwf	fsr2l,f,c
 13055  0015F4  5002               	movf	i1MSC_CleanBufferInt@data+1,w,c
 13056  0015F6  22DA               	addwfc	fsr2h,f,c
 13057  0015F8  6ADE               	clrf	postinc2,c
 13058  0015FA  6ADD               	clrf	postdec2,c
 13059  0015FC  4A05               	infsnz	i1MSC_CleanBufferInt@i,f,c
 13060  0015FE  2A06               	incf	i1MSC_CleanBufferInt@i+1,f,c
 13061  001600                     i1l4375:
 13062  001600  5003               	movf	i1MSC_CleanBufferInt@count,w,c
 13063  001602  5C05               	subwf	i1MSC_CleanBufferInt@i,w,c
 13064  001604  5004               	movf	i1MSC_CleanBufferInt@count+1,w,c
 13065  001606  5806               	subwfb	i1MSC_CleanBufferInt@i+1,w,c
 13066  001608  E3EE               	bnc	i1l4371
 13067  00160A  0012               	return		;funcret
 13068  00160C                     __end_ofi1_MSC_CleanBufferInt:
 13069                           	opt stack 0
 13070                           tblptru	equ	0xFF8
 13071                           tblptrh	equ	0xFF7
 13072                           tblptrl	equ	0xFF6
 13073                           tablat	equ	0xFF5
 13074                           prodh	equ	0xFF4
 13075                           prodl	equ	0xFF3
 13076                           intcon	equ	0xFF2
 13077                           intcon2	equ	0xFF1
 13078                           intcon3	equ	0xFF0
 13079                           postinc0	equ	0xFEE
 13080                           wreg	equ	0xFE8
 13081                           postdec1	equ	0xFE5
 13082                           fsr1l	equ	0xFE1
 13083                           bsr	equ	0xFE0
 13084                           postinc2	equ	0xFDE
 13085                           postdec2	equ	0xFDD
 13086                           plusw2	equ	0xFDB
 13087                           fsr2h	equ	0xFDA
 13088                           fsr2l	equ	0xFD9
 13089                           status	equ	0xFD8
 13090                           
 13091 ;; *************** function _IR_ResetData *****************
 13092 ;; Defined at:
 13093 ;;		line 109 in file "IR.c"
 13094 ;; Parameters:    Size  Location     Type
 13095 ;;		None
 13096 ;; Auto vars:     Size  Location     Type
 13097 ;;		None
 13098 ;; Return value:  Size  Location     Type
 13099 ;;		None               void
 13100 ;; Registers used:
 13101 ;;		wreg, status,2, cstack
 13102 ;; Tracked objects:
 13103 ;;		On entry : 0/1
 13104 ;;		On exit  : 0/0
 13105 ;;		Unchanged: 0/0
 13106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13107 ;;      Params:         0       0       0       0       0
 13108 ;;      Locals:         0       0       0       0       0
 13109 ;;      Temps:          0       0       0       0       0
 13110 ;;      Totals:         0       0       0       0       0
 13111 ;;Total ram usage:        0 bytes
 13112 ;; Hardware stack levels used:    1
 13113 ;; Hardware stack levels required when called:    8
 13114 ;; This function calls:
 13115 ;;		i1_RF_Enable
 13116 ;; This function is called by:
 13117 ;;		_low_isr
 13118 ;;		_FSH_Write_IR_RF
 13119 ;; This function uses a non-reentrant model
 13120 ;;
 13121                           
 13122                           	psect	text82
 13123  001BB0                     __ptext82:
 13124                           	opt stack 0
 13125  001BB0                     _IR_ResetData:
 13126                           	opt stack 15
 13127                           
 13128                           ;IR.c: 111: IR_DataPlace = 0;
 13129                           
 13130                           ;incstack = 0
 13131  001BB0  6A6B               	clrf	_IR_DataPlace,c
 13132                           
 13133                           ;IR.c: 112: IRStarted = 0;
 13134  001BB2  6A69               	clrf	_IRStarted,c
 13135                           
 13136                           ;IR.c: 113: RF_Enable();
 13137  001BB4  EF05  F00D         	goto	i1_RF_Enable	;wreg free
 13138  001BB8                     __end_of_IR_ResetData:
 13139                           	opt stack 0
 13140                           tblptru	equ	0xFF8
 13141                           tblptrh	equ	0xFF7
 13142                           tblptrl	equ	0xFF6
 13143                           tablat	equ	0xFF5
 13144                           prodh	equ	0xFF4
 13145                           prodl	equ	0xFF3
 13146                           intcon	equ	0xFF2
 13147                           intcon2	equ	0xFF1
 13148                           intcon3	equ	0xFF0
 13149                           postinc0	equ	0xFEE
 13150                           wreg	equ	0xFE8
 13151                           postdec1	equ	0xFE5
 13152                           fsr1l	equ	0xFE1
 13153                           bsr	equ	0xFE0
 13154                           postinc2	equ	0xFDE
 13155                           postdec2	equ	0xFDD
 13156                           plusw2	equ	0xFDB
 13157                           fsr2h	equ	0xFDA
 13158                           fsr2l	equ	0xFD9
 13159                           status	equ	0xFD8
 13160                           
 13161 ;; *************** function i1_RF_Enable *****************
 13162 ;; Defined at:
 13163 ;;		line 101 in file "RF.c"
 13164 ;; Parameters:    Size  Location     Type
 13165 ;;		None
 13166 ;; Auto vars:     Size  Location     Type
 13167 ;;		None
 13168 ;; Return value:  Size  Location     Type
 13169 ;;		None               void
 13170 ;; Registers used:
 13171 ;;		wreg, status,2, cstack
 13172 ;; Tracked objects:
 13173 ;;		On entry : 0/1
 13174 ;;		On exit  : 0/0
 13175 ;;		Unchanged: 0/0
 13176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13177 ;;      Params:         0       0       0       0       0
 13178 ;;      Locals:         0       0       0       0       0
 13179 ;;      Temps:          0       0       0       0       0
 13180 ;;      Totals:         0       0       0       0       0
 13181 ;;Total ram usage:        0 bytes
 13182 ;; Hardware stack levels used:    1
 13183 ;; Hardware stack levels required when called:    7
 13184 ;; This function calls:
 13185 ;;		i1_RF_DataInt
 13186 ;;		i1_TMR_Timer0Int
 13187 ;; This function is called by:
 13188 ;;		_IR_ResetData
 13189 ;; This function uses a non-reentrant model
 13190 ;;
 13191                           
 13192                           	psect	text83
 13193  001A0A                     __ptext83:
 13194                           	opt stack 0
 13195  001A0A                     i1_RF_Enable:
 13196                           	opt stack 15
 13197                           
 13198                           ;RF.c: 103: INTCON3bits.INT1IF = 0;
 13199                           
 13200                           ;incstack = 0
 13201  001A0A  90F0               	bcf	intcon3,0,c	;volatile
 13202                           
 13203                           ;RF.c: 104: INTCON3bits.INT2IF = 0;
 13204  001A0C  92F0               	bcf	intcon3,1,c	;volatile
 13205                           
 13206                           ;RF.c: 105: INTCONbits.TMR0IF = 0;
 13207  001A0E  94F2               	bcf	intcon,2,c	;volatile
 13208                           
 13209                           ;RF.c: 106: RF_DataInt(1);
 13210  001A10  0E01               	movlw	1
 13211  001A12  EC0E  F00D         	call	i1_RF_DataInt
 13212                           
 13213                           ;RF.c: 107: TMR_Timer0Int(1);
 13214  001A16  0E01               	movlw	1
 13215  001A18  EFBD  F00D         	goto	i1_TMR_Timer0Int
 13216  001A1C                     __end_ofi1_RF_Enable:
 13217                           	opt stack 0
 13218                           tblptru	equ	0xFF8
 13219                           tblptrh	equ	0xFF7
 13220                           tblptrl	equ	0xFF6
 13221                           tablat	equ	0xFF5
 13222                           prodh	equ	0xFF4
 13223                           prodl	equ	0xFF3
 13224                           intcon	equ	0xFF2
 13225                           intcon2	equ	0xFF1
 13226                           intcon3	equ	0xFF0
 13227                           postinc0	equ	0xFEE
 13228                           wreg	equ	0xFE8
 13229                           postdec1	equ	0xFE5
 13230                           fsr1l	equ	0xFE1
 13231                           bsr	equ	0xFE0
 13232                           postinc2	equ	0xFDE
 13233                           postdec2	equ	0xFDD
 13234                           plusw2	equ	0xFDB
 13235                           fsr2h	equ	0xFDA
 13236                           fsr2l	equ	0xFD9
 13237                           status	equ	0xFD8
 13238                           
 13239 ;; *************** function i1_TMR_Timer0Int *****************
 13240 ;; Defined at:
 13241 ;;		line 332 in file "TIMERS.c"
 13242 ;; Parameters:    Size  Location     Type
 13243 ;;  state           1    wreg     unsigned char 
 13244 ;; Auto vars:     Size  Location     Type
 13245 ;;  state           1    0[COMRAM] unsigned char 
 13246 ;; Return value:  Size  Location     Type
 13247 ;;		None               void
 13248 ;; Registers used:
 13249 ;;		wreg, status,2
 13250 ;; Tracked objects:
 13251 ;;		On entry : 0/0
 13252 ;;		On exit  : 0/0
 13253 ;;		Unchanged: 0/0
 13254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13255 ;;      Params:         0       0       0       0       0
 13256 ;;      Locals:         1       0       0       0       0
 13257 ;;      Temps:          0       0       0       0       0
 13258 ;;      Totals:         1       0       0       0       0
 13259 ;;Total ram usage:        1 bytes
 13260 ;; Hardware stack levels used:    1
 13261 ;; Hardware stack levels required when called:    6
 13262 ;; This function calls:
 13263 ;;		Nothing
 13264 ;; This function is called by:
 13265 ;;		_RF_Disable
 13266 ;;		i1_RF_Enable
 13267 ;; This function uses a non-reentrant model
 13268 ;;
 13269                           
 13270                           	psect	text84
 13271  001B7A                     __ptext84:
 13272                           	opt stack 0
 13273  001B7A                     i1_TMR_Timer0Int:
 13274                           	opt stack 16
 13275                           
 13276                           ;incstack = 0
 13277                           ;i1TMR_Timer0Int@state stored from wreg
 13278  001B7A  6E01               	movwf	i1TMR_Timer0Int@state,c
 13279                           
 13280                           ;TIMERS.c: 334: if(state)
 13281  001B7C  5001               	movf	i1TMR_Timer0Int@state,w,c
 13282  001B7E  E002               	bz	i1l877
 13283                           
 13284                           ;TIMERS.c: 335: {
 13285                           ;TIMERS.c: 337: INTCONbits.TMR0IE = 1;
 13286  001B80  8AF2               	bsf	intcon,5,c	;volatile
 13287                           
 13288                           ;TIMERS.c: 338: }
 13289  001B82  0012               	return	
 13290  001B84                     i1l877:
 13291                           
 13292                           ;TIMERS.c: 339: else
 13293                           ;TIMERS.c: 340: {
 13294                           ;TIMERS.c: 342: INTCONbits.TMR0IE = 0;
 13295  001B84  9AF2               	bcf	intcon,5,c	;volatile
 13296  001B86  0012               	return		;funcret
 13297  001B88                     __end_ofi1_TMR_Timer0Int:
 13298                           	opt stack 0
 13299                           tblptru	equ	0xFF8
 13300                           tblptrh	equ	0xFF7
 13301                           tblptrl	equ	0xFF6
 13302                           tablat	equ	0xFF5
 13303                           prodh	equ	0xFF4
 13304                           prodl	equ	0xFF3
 13305                           intcon	equ	0xFF2
 13306                           intcon2	equ	0xFF1
 13307                           intcon3	equ	0xFF0
 13308                           postinc0	equ	0xFEE
 13309                           wreg	equ	0xFE8
 13310                           postdec1	equ	0xFE5
 13311                           fsr1l	equ	0xFE1
 13312                           bsr	equ	0xFE0
 13313                           postinc2	equ	0xFDE
 13314                           postdec2	equ	0xFDD
 13315                           plusw2	equ	0xFDB
 13316                           fsr2h	equ	0xFDA
 13317                           fsr2l	equ	0xFD9
 13318                           status	equ	0xFD8
 13319                           
 13320 ;; *************** function i1_RF_DataInt *****************
 13321 ;; Defined at:
 13322 ;;		line 254 in file "RF.c"
 13323 ;; Parameters:    Size  Location     Type
 13324 ;;  state           1    wreg     unsigned char 
 13325 ;; Auto vars:     Size  Location     Type
 13326 ;;  state           1    0[COMRAM] unsigned char 
 13327 ;; Return value:  Size  Location     Type
 13328 ;;		None               void
 13329 ;; Registers used:
 13330 ;;		wreg, status,2
 13331 ;; Tracked objects:
 13332 ;;		On entry : 0/1
 13333 ;;		On exit  : 0/0
 13334 ;;		Unchanged: 0/0
 13335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13336 ;;      Params:         0       0       0       0       0
 13337 ;;      Locals:         1       0       0       0       0
 13338 ;;      Temps:          0       0       0       0       0
 13339 ;;      Totals:         1       0       0       0       0
 13340 ;;Total ram usage:        1 bytes
 13341 ;; Hardware stack levels used:    1
 13342 ;; Hardware stack levels required when called:    6
 13343 ;; This function calls:
 13344 ;;		Nothing
 13345 ;; This function is called by:
 13346 ;;		_low_isr
 13347 ;;		_RF_Disable
 13348 ;;		i1_RF_Enable
 13349 ;; This function uses a non-reentrant model
 13350 ;;
 13351                           
 13352                           	psect	text85
 13353  001A1C                     __ptext85:
 13354                           	opt stack 0
 13355  001A1C                     i1_RF_DataInt:
 13356                           	opt stack 17
 13357                           
 13358                           ;incstack = 0
 13359                           ;i1RF_DataInt@state stored from wreg
 13360  001A1C  6E01               	movwf	i1RF_DataInt@state,c
 13361                           
 13362                           ;RF.c: 257: if(state)
 13363  001A1E  5001               	movf	i1RF_DataInt@state,w,c
 13364  001A20  E003               	bz	i1l473
 13365                           
 13366                           ;RF.c: 258: {
 13367                           ;RF.c: 260: INTCON3bits.INT1E = 1;
 13368  001A22  86F0               	bsf	intcon3,3,c	;volatile
 13369                           
 13370                           ;RF.c: 261: INTCON3bits.INT2E = 1;
 13371  001A24  88F0               	bsf	intcon3,4,c	;volatile
 13372                           
 13373                           ;RF.c: 262: }
 13374  001A26  0012               	return	
 13375  001A28                     i1l473:
 13376                           
 13377                           ;RF.c: 263: else
 13378                           ;RF.c: 264: {
 13379                           ;RF.c: 266: INTCON3bits.INT1E = 0;
 13380  001A28  96F0               	bcf	intcon3,3,c	;volatile
 13381                           
 13382                           ;RF.c: 267: INTCON3bits.INT2E = 0;
 13383  001A2A  98F0               	bcf	intcon3,4,c	;volatile
 13384  001A2C  0012               	return		;funcret
 13385  001A2E                     __end_ofi1_RF_DataInt:
 13386                           	opt stack 0
 13387                           tblptru	equ	0xFF8
 13388                           tblptrh	equ	0xFF7
 13389                           tblptrl	equ	0xFF6
 13390                           tablat	equ	0xFF5
 13391                           prodh	equ	0xFF4
 13392                           prodl	equ	0xFF3
 13393                           intcon	equ	0xFF2
 13394                           intcon2	equ	0xFF1
 13395                           intcon3	equ	0xFF0
 13396                           postinc0	equ	0xFEE
 13397                           wreg	equ	0xFE8
 13398                           postdec1	equ	0xFE5
 13399                           fsr1l	equ	0xFE1
 13400                           bsr	equ	0xFE0
 13401                           postinc2	equ	0xFDE
 13402                           postdec2	equ	0xFDD
 13403                           plusw2	equ	0xFDB
 13404                           fsr2h	equ	0xFDA
 13405                           fsr2l	equ	0xFD9
 13406                           status	equ	0xFD8
 13407                           
 13408 ;; *************** function _FSH_WriteIntArray *****************
 13409 ;; Defined at:
 13410 ;;		line 125 in file "FLASH.c"
 13411 ;; Parameters:    Size  Location     Type
 13412 ;;  ConstArray      3    4[COMRAM] PTR const unsigned int 
 13413 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 13414 ;;  Array           2    7[COMRAM] PTR unsigned int 
 13415 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 13416 ;; Auto vars:     Size  Location     Type
 13417 ;;  address         4   12[COMRAM] unsigned long 
 13418 ;;  i               1   11[COMRAM] unsigned char 
 13419 ;; Return value:  Size  Location     Type
 13420 ;;		None               void
 13421 ;; Registers used:
 13422 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13423 ;; Tracked objects:
 13424 ;;		On entry : 0/1
 13425 ;;		On exit  : 0/0
 13426 ;;		Unchanged: 0/0
 13427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13428 ;;      Params:         5       0       0       0       0
 13429 ;;      Locals:         5       0       0       0       0
 13430 ;;      Temps:          2       0       0       0       0
 13431 ;;      Totals:        12       0       0       0       0
 13432 ;;Total ram usage:       12 bytes
 13433 ;; Hardware stack levels used:    1
 13434 ;; Hardware stack levels required when called:    7
 13435 ;; This function calls:
 13436 ;;		_FSH_AddressToBlock
 13437 ;; This function is called by:
 13438 ;;		_FSH_Write_IR_RF
 13439 ;; This function uses a non-reentrant model
 13440 ;;
 13441                           
 13442                           	psect	text86
 13443  000C60                     __ptext86:
 13444                           	opt stack 0
 13445  000C60                     _FSH_WriteIntArray:
 13446                           	opt stack 14
 13447                           
 13448                           ;FLASH.c: 127: unsigned char i;
 13449                           ;FLASH.c: 128: unsigned long address = ConstArray;
 13450                           
 13451                           ;incstack = 0
 13452  000C60  5005               	movf	FSH_WriteIntArray@ConstArray,w,c
 13453  000C62  6E0D               	movwf	FSH_WriteIntArray@address,c
 13454  000C64  5006               	movf	FSH_WriteIntArray@ConstArray+1,w,c
 13455  000C66  6E0E               	movwf	FSH_WriteIntArray@address+1,c
 13456  000C68  5007               	movf	FSH_WriteIntArray@ConstArray+2,w,c
 13457  000C6A  6E0F               	movwf	FSH_WriteIntArray@address+2,c
 13458  000C6C  6A10               	clrf	FSH_WriteIntArray@address+3,c
 13459                           
 13460                           ;FLASH.c: 131: FSH_AddressToBlock(address);
 13461  000C6E  C00D  F001         	movff	FSH_WriteIntArray@address,FSH_AddressToBlock@Address
 13462  000C72  C00E  F002         	movff	FSH_WriteIntArray@address+1,FSH_AddressToBlock@Address+1
 13463  000C76  C00F  F003         	movff	FSH_WriteIntArray@address+2,FSH_AddressToBlock@Address+2
 13464  000C7A  C010  F004         	movff	FSH_WriteIntArray@address+3,FSH_AddressToBlock@Address+3
 13465  000C7E  EC75  F00B         	call	_FSH_AddressToBlock	;wreg free
 13466                           
 13467                           ;FLASH.c: 133: if(address < 0x2400 || address >= 0x2800)
 13468  000C82  5010               	movf	FSH_WriteIntArray@address+3,w,c
 13469  000C84  100F               	iorwf	FSH_WriteIntArray@address+2,w,c
 13470  000C86  E103               	bnz	i1u419_20
 13471  000C88  0E24               	movlw	36
 13472  000C8A  5C0E               	subwf	FSH_WriteIntArray@address+1,w,c
 13473  000C8C  E306               	bnc	i1l961
 13474  000C8E                     i1u419_20:
 13475  000C8E  5010               	movf	FSH_WriteIntArray@address+3,w,c
 13476  000C90  100F               	iorwf	FSH_WriteIntArray@address+2,w,c
 13477  000C92  E103               	bnz	i1u420_20
 13478  000C94  0E28               	movlw	40
 13479  000C96  5C0E               	subwf	FSH_WriteIntArray@address+1,w,c
 13480  000C98  E301               	bnc	i1l959
 13481  000C9A                     i1u420_20:
 13482  000C9A                     i1l961:
 13483  000C9A  00FF               	reset		;# 
 13484  000C9C                     i1l959:
 13485                           
 13486                           ;FLASH.c: 137: }
 13487                           ;FLASH.c: 139: for(i = 0; i<32; i++)
 13488  000C9C  6A0C               	clrf	FSH_WriteIntArray@i,c
 13489  000C9E                     i1l4645:
 13490                           
 13491                           ;FLASH.c: 140: {
 13492                           ;FLASH.c: 142: TABLAT = *Array;
 13493  000C9E  C008  FFD9         	movff	FSH_WriteIntArray@Array,fsr2l
 13494  000CA2  C009  FFDA         	movff	FSH_WriteIntArray@Array+1,fsr2h
 13495  000CA6  50DF               	movf	indf2,w,c
 13496  000CA8  6EF5               	movwf	tablat,c	;volatile
 13497  000CAA  000D               	tblwt		*+	;# 
 13498                           
 13499                           ;FLASH.c: 144: TABLAT = *Array >> 8;
 13500  000CAC  C008  FFD9         	movff	FSH_WriteIntArray@Array,fsr2l
 13501  000CB0  C009  FFDA         	movff	FSH_WriteIntArray@Array+1,fsr2h
 13502  000CB4  CFDE F00A          	movff	postinc2,??_FSH_WriteIntArray
 13503  000CB8  CFDD F00B          	movff	postdec2,??_FSH_WriteIntArray+1
 13504  000CBC  C00B  F00A         	movff	??_FSH_WriteIntArray+1,??_FSH_WriteIntArray
 13505  000CC0  6A0B               	clrf	??_FSH_WriteIntArray+1,c
 13506  000CC2  500A               	movf	??_FSH_WriteIntArray,w,c
 13507  000CC4  6EF5               	movwf	tablat,c	;volatile
 13508  000CC6  000D               	tblwt		*+	;# 
 13509                           
 13510                           ;FLASH.c: 146: Array++;
 13511  000CC8  0E02               	movlw	2
 13512  000CCA  2608               	addwf	FSH_WriteIntArray@Array,f,c
 13513  000CCC  0E00               	movlw	0
 13514  000CCE  2209               	addwfc	FSH_WriteIntArray@Array+1,f,c
 13515  000CD0  2A0C               	incf	FSH_WriteIntArray@i,f,c
 13516  000CD2  0E1F               	movlw	31
 13517  000CD4  640C               	cpfsgt	FSH_WriteIntArray@i,c
 13518  000CD6  D7E3               	goto	i1l4645
 13519                           
 13520                           ;FLASH.c: 147: }
 13521                           ;FLASH.c: 150: FSH_AddressToBlock(address);
 13522  000CD8  C00D  F001         	movff	FSH_WriteIntArray@address,FSH_AddressToBlock@Address
 13523  000CDC  C00E  F002         	movff	FSH_WriteIntArray@address+1,FSH_AddressToBlock@Address+1
 13524  000CE0  C00F  F003         	movff	FSH_WriteIntArray@address+2,FSH_AddressToBlock@Address+2
 13525  000CE4  C010  F004         	movff	FSH_WriteIntArray@address+3,FSH_AddressToBlock@Address+3
 13526  000CE8  EC75  F00B         	call	_FSH_AddressToBlock	;wreg free
 13527                           
 13528                           ;FLASH.c: 152: EECON1bits.WRERR = 0;
 13529  000CEC  96A6               	bcf	4006,3,c	;volatile
 13530                           
 13531                           ;FLASH.c: 153: EECON1bits.FREE = 0;
 13532  000CEE  98A6               	bcf	4006,4,c	;volatile
 13533  000CF0  84A6               	bsf	4006,2,c	;# 
 13534  000CF2  9EF2               	bcf	intcon,7,c	;# 
 13535  000CF4  0E55               	movlw	85	;# 
 13536  000CF6  6EA7               	movwf	4007,c	;# 
 13537  000CF8  0EAA               	movlw	170	;# 
 13538  000CFA  6EA7               	movwf	4007,c	;# 
 13539  000CFC  82A6               	bsf	4006,1,c	;# 
 13540  000CFE  0CAA               	retlw	170	;funcret
 13541  000D00                     __end_of_FSH_WriteIntArray:
 13542                           	opt stack 0
 13543                           tblptru	equ	0xFF8
 13544                           tblptrh	equ	0xFF7
 13545                           tblptrl	equ	0xFF6
 13546                           tablat	equ	0xFF5
 13547                           prodh	equ	0xFF4
 13548                           prodl	equ	0xFF3
 13549                           intcon	equ	0xFF2
 13550                           intcon2	equ	0xFF1
 13551                           intcon3	equ	0xFF0
 13552                           postinc0	equ	0xFEE
 13553                           wreg	equ	0xFE8
 13554                           postdec1	equ	0xFE5
 13555                           fsr1l	equ	0xFE1
 13556                           bsr	equ	0xFE0
 13557                           indf2	equ	0xFDF
 13558                           postinc2	equ	0xFDE
 13559                           postdec2	equ	0xFDD
 13560                           plusw2	equ	0xFDB
 13561                           fsr2h	equ	0xFDA
 13562                           fsr2l	equ	0xFD9
 13563                           status	equ	0xFD8
 13564                           
 13565 ;; *************** function _FSH_VerifyWriteIntArray *****************
 13566 ;; Defined at:
 13567 ;;		line 169 in file "FLASH.c"
 13568 ;; Parameters:    Size  Location     Type
 13569 ;;  ConstArray      3    0[COMRAM] PTR const unsigned int 
 13570 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 13571 ;;  Array           2    3[COMRAM] PTR unsigned int 
 13572 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 13573 ;; Auto vars:     Size  Location     Type
 13574 ;;  data            2    8[COMRAM] unsigned int 
 13575 ;;  i               1   11[COMRAM] unsigned char 
 13576 ;;  failcount       1   10[COMRAM] unsigned char 
 13577 ;; Return value:  Size  Location     Type
 13578 ;;                  1    wreg      unsigned char 
 13579 ;; Registers used:
 13580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 13581 ;; Tracked objects:
 13582 ;;		On entry : 0/1
 13583 ;;		On exit  : 0/0
 13584 ;;		Unchanged: 0/0
 13585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13586 ;;      Params:         5       0       0       0       0
 13587 ;;      Locals:         4       0       0       0       0
 13588 ;;      Temps:          3       0       0       0       0
 13589 ;;      Totals:        12       0       0       0       0
 13590 ;;Total ram usage:       12 bytes
 13591 ;; Hardware stack levels used:    1
 13592 ;; Hardware stack levels required when called:    6
 13593 ;; This function calls:
 13594 ;;		Nothing
 13595 ;; This function is called by:
 13596 ;;		_FSH_Write_IR_RF
 13597 ;; This function uses a non-reentrant model
 13598 ;;
 13599                           
 13600                           	psect	text87
 13601  0011D0                     __ptext87:
 13602                           	opt stack 0
 13603  0011D0                     _FSH_VerifyWriteIntArray:
 13604                           	opt stack 15
 13605                           
 13606                           ;FLASH.c: 171: unsigned char i;
 13607                           ;FLASH.c: 172: unsigned int data;
 13608                           ;FLASH.c: 173: unsigned char failcount = 0;
 13609                           
 13610                           ;incstack = 0
 13611  0011D0  6A0B               	clrf	FSH_VerifyWriteIntArray@failcount,c
 13612                           
 13613                           ;FLASH.c: 175: for(i = 0; i<32; i++)
 13614  0011D2  6A0C               	clrf	FSH_VerifyWriteIntArray@i,c
 13615  0011D4                     i1l4665:
 13616                           
 13617                           ;FLASH.c: 176: {
 13618                           ;FLASH.c: 177: data = ConstArray[i];
 13619  0011D4  500C               	movf	FSH_VerifyWriteIntArray@i,w,c
 13620  0011D6  0D02               	mullw	2
 13621  0011D8  50F3               	movf	prodl,w,c
 13622  0011DA  2401               	addwf	FSH_VerifyWriteIntArray@ConstArray,w,c
 13623  0011DC  6E06               	movwf	??_FSH_VerifyWriteIntArray& (0+255),c
 13624  0011DE  50F4               	movf	prodh,w,c
 13625  0011E0  2002               	addwfc	FSH_VerifyWriteIntArray@ConstArray+1,w,c
 13626  0011E2  6E07               	movwf	(??_FSH_VerifyWriteIntArray+1)& (0+255),c
 13627  0011E4  0E00               	movlw	0
 13628  0011E6  2003               	addwfc	FSH_VerifyWriteIntArray@ConstArray+2,w,c
 13629  0011E8  6E08               	movwf	(??_FSH_VerifyWriteIntArray+2)& (0+255),c
 13630  0011EA  C006  FFF6         	movff	??_FSH_VerifyWriteIntArray,tblptrl
 13631  0011EE  C007  FFF7         	movff	??_FSH_VerifyWriteIntArray+1,tblptrh
 13632  0011F2  C008  FFF8         	movff	??_FSH_VerifyWriteIntArray+2,tblptru
 13633  0011F6  0009               	tblrd		*+
 13634  0011F8  CFF5 F009          	movff	tablat,FSH_VerifyWriteIntArray@data
 13635  0011FC  000A               	tblrd		*-
 13636  0011FE  CFF5 F00A          	movff	tablat,FSH_VerifyWriteIntArray@data+1
 13637                           
 13638                           ;FLASH.c: 178: if(data != Array[i])
 13639  001202  500C               	movf	FSH_VerifyWriteIntArray@i,w,c
 13640  001204  0D02               	mullw	2
 13641  001206  50F3               	movf	prodl,w,c
 13642  001208  2404               	addwf	FSH_VerifyWriteIntArray@Array,w,c
 13643  00120A  6ED9               	movwf	fsr2l,c
 13644  00120C  50F4               	movf	prodh,w,c
 13645  00120E  2005               	addwfc	FSH_VerifyWriteIntArray@Array+1,w,c
 13646  001210  6EDA               	movwf	fsr2h,c
 13647  001212  5009               	movf	FSH_VerifyWriteIntArray@data,w,c
 13648  001214  18DE               	xorwf	postinc2,w,c
 13649  001216  E103               	bnz	i1u422_20
 13650  001218  500A               	movf	FSH_VerifyWriteIntArray@data+1,w,c
 13651  00121A  18DE               	xorwf	postinc2,w,c
 13652  00121C  E001               	bz	i1l969
 13653  00121E                     i1u422_20:
 13654                           
 13655                           ;FLASH.c: 179: {
 13656                           ;FLASH.c: 180: failcount++;
 13657  00121E  2A0B               	incf	FSH_VerifyWriteIntArray@failcount,f,c
 13658  001220                     i1l969:
 13659  001220  2A0C               	incf	FSH_VerifyWriteIntArray@i,f,c
 13660  001222  0E1F               	movlw	31
 13661  001224  640C               	cpfsgt	FSH_VerifyWriteIntArray@i,c
 13662  001226  D7D6               	goto	i1l4665
 13663                           
 13664                           ;FLASH.c: 181: }
 13665                           ;FLASH.c: 182: }
 13666                           ;FLASH.c: 183: if(failcount)
 13667  001228  500B               	movf	FSH_VerifyWriteIntArray@failcount,w,c
 13668  00122A  E001               	bz	i1l4679
 13669                           
 13670                           ;FLASH.c: 184: {
 13671                           ;FLASH.c: 185: return 0;
 13672  00122C  0C00               	retlw	0
 13673  00122E                     i1l4679:
 13674                           
 13675                           ;FLASH.c: 186: }
 13676                           ;FLASH.c: 187: return 1;
 13677  00122E  0C01               	retlw	1	;funcret
 13678  001230                     __end_of_FSH_VerifyWriteIntArray:
 13679                           	opt stack 0
 13680                           tblptru	equ	0xFF8
 13681                           tblptrh	equ	0xFF7
 13682                           tblptrl	equ	0xFF6
 13683                           tablat	equ	0xFF5
 13684                           prodh	equ	0xFF4
 13685                           prodl	equ	0xFF3
 13686                           intcon	equ	0xFF2
 13687                           intcon2	equ	0xFF1
 13688                           intcon3	equ	0xFF0
 13689                           postinc0	equ	0xFEE
 13690                           wreg	equ	0xFE8
 13691                           postdec1	equ	0xFE5
 13692                           fsr1l	equ	0xFE1
 13693                           bsr	equ	0xFE0
 13694                           indf2	equ	0xFDF
 13695                           postinc2	equ	0xFDE
 13696                           postdec2	equ	0xFDD
 13697                           plusw2	equ	0xFDB
 13698                           fsr2h	equ	0xFDA
 13699                           fsr2l	equ	0xFD9
 13700                           status	equ	0xFD8
 13701                           
 13702 ;; *************** function _FSH_EraseBlock *****************
 13703 ;; Defined at:
 13704 ;;		line 72 in file "FLASH.c"
 13705 ;; Parameters:    Size  Location     Type
 13706 ;;  Address         4    4[COMRAM] unsigned long 
 13707 ;; Auto vars:     Size  Location     Type
 13708 ;;  WriteTries      1   10[COMRAM] unsigned char 
 13709 ;;  lowint          1    9[COMRAM] unsigned char 
 13710 ;;  highint         1    8[COMRAM] unsigned char 
 13711 ;; Return value:  Size  Location     Type
 13712 ;;		None               void
 13713 ;; Registers used:
 13714 ;;		wreg, status,2, status,0, cstack
 13715 ;; Tracked objects:
 13716 ;;		On entry : 0/0
 13717 ;;		On exit  : 0/0
 13718 ;;		Unchanged: 0/0
 13719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13720 ;;      Params:         4       0       0       0       0
 13721 ;;      Locals:         3       0       0       0       0
 13722 ;;      Temps:          0       0       0       0       0
 13723 ;;      Totals:         7       0       0       0       0
 13724 ;;Total ram usage:        7 bytes
 13725 ;; Hardware stack levels used:    1
 13726 ;; Hardware stack levels required when called:    7
 13727 ;; This function calls:
 13728 ;;		_FSH_AddressToBlock
 13729 ;; This function is called by:
 13730 ;;		_FSH_Write_IR_RF
 13731 ;; This function uses a non-reentrant model
 13732 ;;
 13733                           
 13734                           	psect	text88
 13735  00115E                     __ptext88:
 13736                           	opt stack 0
 13737  00115E                     _FSH_EraseBlock:
 13738                           	opt stack 14
 13739                           
 13740                           ;FLASH.c: 74: unsigned char highint = INTCONbits.GIE;
 13741                           
 13742                           ;incstack = 0
 13743  00115E  0E00               	movlw	0
 13744  001160  BEF2               	btfsc	intcon,7,c	;volatile
 13745  001162  0E01               	movlw	1
 13746  001164  6E09               	movwf	FSH_EraseBlock@highint,c
 13747                           
 13748                           ;FLASH.c: 75: unsigned char lowint = INTCONbits.PEIE;
 13749  001166  0E00               	movlw	0
 13750  001168  BCF2               	btfsc	intcon,6,c	;volatile
 13751  00116A  0E01               	movlw	1
 13752  00116C  6E0A               	movwf	FSH_EraseBlock@lowint,c
 13753                           
 13754                           ;FLASH.c: 76: unsigned char WriteTries;
 13755                           ;FLASH.c: 78: if(Address < 0x2400 || Address >= 0x2800)
 13756  00116E  5008               	movf	FSH_EraseBlock@Address+3,w,c
 13757  001170  1007               	iorwf	FSH_EraseBlock@Address+2,w,c
 13758  001172  E103               	bnz	i1u413_20
 13759  001174  0E24               	movlw	36
 13760  001176  5C06               	subwf	FSH_EraseBlock@Address+1,w,c
 13761  001178  E306               	bnc	i1l950
 13762  00117A                     i1u413_20:
 13763  00117A  5008               	movf	FSH_EraseBlock@Address+3,w,c
 13764  00117C  1007               	iorwf	FSH_EraseBlock@Address+2,w,c
 13765  00117E  E103               	bnz	i1u414_20
 13766  001180  0E28               	movlw	40
 13767  001182  5C06               	subwf	FSH_EraseBlock@Address+1,w,c
 13768  001184  E301               	bnc	i1l948
 13769  001186                     i1u414_20:
 13770  001186                     i1l950:
 13771  001186  00FF               	reset		;# 
 13772  001188                     i1l948:
 13773                           
 13774                           ;FLASH.c: 82: }
 13775                           ;FLASH.c: 84: INTCONbits.GIE = 0;
 13776  001188  9EF2               	bcf	intcon,7,c	;volatile
 13777                           
 13778                           ;FLASH.c: 85: INTCONbits.PEIE = 0;
 13779  00118A  9CF2               	bcf	intcon,6,c	;volatile
 13780  00118C                     i1l4613:
 13781                           
 13782                           ;FLASH.c: 88: FSH_AddressToBlock(Address);
 13783  00118C  C005  F001         	movff	FSH_EraseBlock@Address,FSH_AddressToBlock@Address
 13784  001190  C006  F002         	movff	FSH_EraseBlock@Address+1,FSH_AddressToBlock@Address+1
 13785  001194  C007  F003         	movff	FSH_EraseBlock@Address+2,FSH_AddressToBlock@Address+2
 13786  001198  C008  F004         	movff	FSH_EraseBlock@Address+3,FSH_AddressToBlock@Address+3
 13787  00119C  EC75  F00B         	call	_FSH_AddressToBlock	;wreg free
 13788                           
 13789                           ;FLASH.c: 90: WriteTries = 1;
 13790  0011A0  0E01               	movlw	1
 13791  0011A2  6E0B               	movwf	FSH_EraseBlock@WriteTries,c
 13792  0011A4  84A6               	bsf	4006,2,c	;# 
 13793  0011A6  88A6               	bsf	4006,4,c	;# 
 13794  0011A8  9EF2               	bcf	intcon,7,c	;# 
 13795  0011AA  0E55               	movlw	85	;# 
 13796  0011AC  6EA7               	movwf	4007,c	;# 
 13797  0011AE  0EAA               	movlw	170	;# 
 13798  0011B0  6EA7               	movwf	4007,c	;# 
 13799  0011B2  82A6               	bsf	4006,1,c	;# 
 13800                           
 13801                           ;FLASH.c: 101: if(EECON1bits.WRERR)
 13802  0011B4  A6A6               	btfss	4006,3,c	;volatile
 13803  0011B6  D005               	goto	i1l4625
 13804                           
 13805                           ;FLASH.c: 102: {
 13806                           ;FLASH.c: 103: WriteTries++;
 13807  0011B8  2A0B               	incf	FSH_EraseBlock@WriteTries,f,c
 13808                           
 13809                           ;FLASH.c: 104: if(WriteTries < 10)
 13810  0011BA  0E0A               	movlw	10
 13811  0011BC  600B               	cpfslt	FSH_EraseBlock@WriteTries,c
 13812  0011BE  D001               	goto	i1l4625
 13813  0011C0  D7E5               	goto	i1l4613
 13814  0011C2                     i1l4625:
 13815                           
 13816                           ;FLASH.c: 107: }
 13817                           ;FLASH.c: 108: }
 13818                           ;FLASH.c: 110: if(highint)
 13819  0011C2  5009               	movf	FSH_EraseBlock@highint,w,c
 13820  0011C4  E001               	bz	i1l4629
 13821                           
 13822                           ;FLASH.c: 111: {
 13823                           ;FLASH.c: 112: INTCONbits.GIE = 1;
 13824  0011C6  8EF2               	bsf	intcon,7,c	;volatile
 13825  0011C8                     i1l4629:
 13826                           
 13827                           ;FLASH.c: 113: }
 13828                           ;FLASH.c: 114: if(lowint)
 13829  0011C8  500A               	movf	FSH_EraseBlock@lowint,w,c
 13830  0011CA  A4D8               	btfss	status,2,c
 13831                           
 13832                           ;FLASH.c: 115: {
 13833                           ;FLASH.c: 116: INTCONbits.PEIE = 1;
 13834  0011CC  8CF2               	bsf	intcon,6,c	;volatile
 13835  0011CE  0012               	return		;funcret
 13836  0011D0                     __end_of_FSH_EraseBlock:
 13837                           	opt stack 0
 13838                           tblptru	equ	0xFF8
 13839                           tblptrh	equ	0xFF7
 13840                           tblptrl	equ	0xFF6
 13841                           tablat	equ	0xFF5
 13842                           prodh	equ	0xFF4
 13843                           prodl	equ	0xFF3
 13844                           intcon	equ	0xFF2
 13845                           intcon2	equ	0xFF1
 13846                           intcon3	equ	0xFF0
 13847                           postinc0	equ	0xFEE
 13848                           wreg	equ	0xFE8
 13849                           postdec1	equ	0xFE5
 13850                           fsr1l	equ	0xFE1
 13851                           bsr	equ	0xFE0
 13852                           indf2	equ	0xFDF
 13853                           postinc2	equ	0xFDE
 13854                           postdec2	equ	0xFDD
 13855                           plusw2	equ	0xFDB
 13856                           fsr2h	equ	0xFDA
 13857                           fsr2l	equ	0xFD9
 13858                           status	equ	0xFD8
 13859                           
 13860 ;; *************** function _FSH_AddressToBlock *****************
 13861 ;; Defined at:
 13862 ;;		line 536 in file "FLASH.c"
 13863 ;; Parameters:    Size  Location     Type
 13864 ;;  Address         4    0[COMRAM] unsigned long 
 13865 ;; Auto vars:     Size  Location     Type
 13866 ;;		None
 13867 ;; Return value:  Size  Location     Type
 13868 ;;		None               void
 13869 ;; Registers used:
 13870 ;;		wreg, status,2, status,0
 13871 ;; Tracked objects:
 13872 ;;		On entry : 0/1
 13873 ;;		On exit  : 0/0
 13874 ;;		Unchanged: 0/0
 13875 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13876 ;;      Params:         4       0       0       0       0
 13877 ;;      Locals:         0       0       0       0       0
 13878 ;;      Temps:          0       0       0       0       0
 13879 ;;      Totals:         4       0       0       0       0
 13880 ;;Total ram usage:        4 bytes
 13881 ;; Hardware stack levels used:    1
 13882 ;; Hardware stack levels required when called:    6
 13883 ;; This function calls:
 13884 ;;		Nothing
 13885 ;; This function is called by:
 13886 ;;		_FSH_EraseBlock
 13887 ;;		_FSH_WriteIntArray
 13888 ;;		_FSH_Write_IR_RF
 13889 ;; This function uses a non-reentrant model
 13890 ;;
 13891                           
 13892                           	psect	text89
 13893  0016EA                     __ptext89:
 13894                           	opt stack 0
 13895  0016EA                     _FSH_AddressToBlock:
 13896                           	opt stack 14
 13897                           
 13898                           ;FLASH.c: 538: if(Address > 0x3600)
 13899                           
 13900                           ;incstack = 0
 13901  0016EA  5004               	movf	FSH_AddressToBlock@Address+3,w,c
 13902  0016EC  1003               	iorwf	FSH_AddressToBlock@Address+2,w,c
 13903  0016EE  E104               	bnz	i1u377_20
 13904  0016F0  0401               	decf	FSH_AddressToBlock@Address,w,c
 13905  0016F2  0E36               	movlw	54
 13906  0016F4  5802               	subwfb	FSH_AddressToBlock@Address+1,w,c
 13907  0016F6  E305               	bnc	i1l4355
 13908  0016F8                     i1u377_20:
 13909                           
 13910                           ;FLASH.c: 539: {
 13911                           ;FLASH.c: 540: Address = 0x3600;
 13912  0016F8  6A01               	clrf	FSH_AddressToBlock@Address,c
 13913  0016FA  0E36               	movlw	54
 13914  0016FC  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 13915  0016FE  6A03               	clrf	FSH_AddressToBlock@Address+2,c
 13916  001700  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 13917  001702                     i1l4355:
 13918                           
 13919                           ;FLASH.c: 541: }
 13920                           ;FLASH.c: 542: TBLPTRU = (Address & 0x002F0000) >> 16;
 13921  001702  5003               	movf	FSH_AddressToBlock@Address+2,w,c
 13922  001704  0B2F               	andlw	47
 13923  001706  6EF8               	movwf	tblptru,c	;volatile
 13924                           
 13925                           ;FLASH.c: 543: TBLPTRH = (Address & 0x0000FF00) >> 8;
 13926  001708  C002  FFF7         	movff	FSH_AddressToBlock@Address+1,tblptrh	;volatile
 13927                           
 13928                           ;FLASH.c: 544: TBLPTRL = (Address & 0x000000FF);
 13929  00170C  C001  FFF6         	movff	FSH_AddressToBlock@Address,tblptrl	;volatile
 13930  001710  0012               	return		;funcret
 13931  001712                     __end_of_FSH_AddressToBlock:
 13932                           	opt stack 0
 13933                           tblptru	equ	0xFF8
 13934                           tblptrh	equ	0xFF7
 13935                           tblptrl	equ	0xFF6
 13936                           tablat	equ	0xFF5
 13937                           prodh	equ	0xFF4
 13938                           prodl	equ	0xFF3
 13939                           intcon	equ	0xFF2
 13940                           intcon2	equ	0xFF1
 13941                           intcon3	equ	0xFF0
 13942                           postinc0	equ	0xFEE
 13943                           wreg	equ	0xFE8
 13944                           postdec1	equ	0xFE5
 13945                           fsr1l	equ	0xFE1
 13946                           bsr	equ	0xFE0
 13947                           indf2	equ	0xFDF
 13948                           postinc2	equ	0xFDE
 13949                           postdec2	equ	0xFDD
 13950                           plusw2	equ	0xFDB
 13951                           fsr2h	equ	0xFDA
 13952                           fsr2l	equ	0xFD9
 13953                           status	equ	0xFD8
 13954                           
 13955 ;; *************** function _ADC_CalculateVoltage *****************
 13956 ;; Defined at:
 13957 ;;		line 79 in file "ADC.c"
 13958 ;; Parameters:    Size  Location     Type
 13959 ;;		None
 13960 ;; Auto vars:     Size  Location     Type
 13961 ;;  Voltage         3   40[COMRAM] unsigned long 
 13962 ;;  ADCcounts       2   43[COMRAM] unsigned int 
 13963 ;; Return value:  Size  Location     Type
 13964 ;;		None               void
 13965 ;; Registers used:
 13966 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13967 ;; Tracked objects:
 13968 ;;		On entry : 0/0
 13969 ;;		On exit  : 0/0
 13970 ;;		Unchanged: 0/0
 13971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13972 ;;      Params:         0       0       0       0       0
 13973 ;;      Locals:         5       0       0       0       0
 13974 ;;      Temps:          0       0       0       0       0
 13975 ;;      Totals:         5       0       0       0       0
 13976 ;;Total ram usage:        5 bytes
 13977 ;; Hardware stack levels used:    1
 13978 ;; Hardware stack levels required when called:    8
 13979 ;; This function calls:
 13980 ;;		___ftdiv
 13981 ;;		i1_ADC_ChangeChannel
 13982 ;;		i1___ftmul
 13983 ;;		i1___lwtoft
 13984 ;; This function is called by:
 13985 ;;		_low_isr
 13986 ;; This function uses a non-reentrant model
 13987 ;;
 13988                           
 13989                           	psect	text90
 13990  000B06                     __ptext90:
 13991                           	opt stack 0
 13992  000B06                     _ADC_CalculateVoltage:
 13993                           	opt stack 15
 13994                           
 13995                           ;ADC.c: 81: unsigned int ADCcounts = 0;
 13996                           
 13997                           ;incstack = 0
 13998  000B06  6A2C               	clrf	ADC_CalculateVoltage@ADCcounts,c
 13999  000B08  6A2D               	clrf	ADC_CalculateVoltage@ADCcounts+1,c
 14000                           
 14001                           ;ADC.c: 82: double Voltage;
 14002                           ;ADC.c: 84: ADCcounts = ADRESH;
 14003  000B0A  CFC4 F02C          	movff	4036,ADC_CalculateVoltage@ADCcounts	;volatile
 14004  000B0E  6A2D               	clrf	ADC_CalculateVoltage@ADCcounts+1,c
 14005                           
 14006                           ;ADC.c: 85: ADCcounts <<= 8;
 14007  000B10  502C               	movf	ADC_CalculateVoltage@ADCcounts,w,c
 14008  000B12  6E2D               	movwf	ADC_CalculateVoltage@ADCcounts+1,c
 14009  000B14  6A2C               	clrf	ADC_CalculateVoltage@ADCcounts,c
 14010                           
 14011                           ;ADC.c: 86: ADCcounts += ADRESL;
 14012  000B16  50C3               	movf	4035,w,c	;volatile
 14013  000B18  262C               	addwf	ADC_CalculateVoltage@ADCcounts,f,c
 14014  000B1A  0E00               	movlw	0
 14015  000B1C  222D               	addwfc	ADC_CalculateVoltage@ADCcounts+1,f,c
 14016                           
 14017                           ;ADC.c: 88: Voltage = ((double)ADCcounts / (1 << 10)) * 3.3;
 14018  000B1E  6A0F               	clrf	___ftdiv@f2,c
 14019  000B20  0E80               	movlw	128
 14020  000B22  6E10               	movwf	___ftdiv@f2+1,c
 14021  000B24  0E44               	movlw	68
 14022  000B26  6E11               	movwf	___ftdiv@f2+2,c
 14023  000B28  C02C  F009         	movff	ADC_CalculateVoltage@ADCcounts,i1___lwtoft@c
 14024  000B2C  C02D  F00A         	movff	ADC_CalculateVoltage@ADCcounts+1,i1___lwtoft@c+1
 14025  000B30  ECC1  F00B         	call	i1___lwtoft	;wreg free
 14026  000B34  C009  F00C         	movff	?i1___lwtoft,___ftdiv@f1
 14027  000B38  C00A  F00D         	movff	?i1___lwtoft+1,___ftdiv@f1+1
 14028  000B3C  C00B  F00E         	movff	?i1___lwtoft+2,___ftdiv@f1+2
 14029  000B40  EC6D  F004         	call	___ftdiv	;wreg free
 14030  000B44  C00C  F01B         	movff	?___ftdiv,i1___ftmul@f1
 14031  000B48  C00D  F01C         	movff	?___ftdiv+1,i1___ftmul@f1+1
 14032  000B4C  C00E  F01D         	movff	?___ftdiv+2,i1___ftmul@f1+2
 14033  000B50  0E33               	movlw	51
 14034  000B52  6E1E               	movwf	i1___ftmul@f2,c
 14035  000B54  0E53               	movlw	83
 14036  000B56  6E1F               	movwf	i1___ftmul@f2+1,c
 14037  000B58  0E40               	movlw	64
 14038  000B5A  6E20               	movwf	i1___ftmul@f2+2,c
 14039  000B5C  EC2F  F003         	call	i1___ftmul	;wreg free
 14040  000B60  C01B  F029         	movff	?i1___ftmul,ADC_CalculateVoltage@Voltage
 14041  000B64  C01C  F02A         	movff	?i1___ftmul+1,ADC_CalculateVoltage@Voltage+1
 14042  000B68  C01D  F02B         	movff	?i1___ftmul+2,ADC_CalculateVoltage@Voltage+2
 14043                           
 14044                           ;ADC.c: 89: if(ADC_CurrentSource == 10)
 14045  000B6C  0E0A               	movlw	10
 14046  000B6E  186D               	xorwf	_ADC_CurrentSource,w,c
 14047  000B70  E122               	bnz	i1l6251
 14048                           
 14049                           ;ADC.c: 90: {
 14050                           ;ADC.c: 91: Rail_VIN = Voltage * (200000.0 + 500000.0) / 200000.0;
 14051  000B72  0EE6               	movlw	230
 14052  000B74  6E1E               	movwf	i1___ftmul@f2,c
 14053  000B76  0E2A               	movlw	42
 14054  000B78  6E1F               	movwf	i1___ftmul@f2+1,c
 14055  000B7A  0E49               	movlw	73
 14056  000B7C  6E20               	movwf	i1___ftmul@f2+2,c
 14057  000B7E  C029  F01B         	movff	ADC_CalculateVoltage@Voltage,i1___ftmul@f1
 14058  000B82  C02A  F01C         	movff	ADC_CalculateVoltage@Voltage+1,i1___ftmul@f1+1
 14059  000B86  C02B  F01D         	movff	ADC_CalculateVoltage@Voltage+2,i1___ftmul@f1+2
 14060  000B8A  EC2F  F003         	call	i1___ftmul	;wreg free
 14061  000B8E  C01B  F00C         	movff	?i1___ftmul,___ftdiv@f1
 14062  000B92  C01C  F00D         	movff	?i1___ftmul+1,___ftdiv@f1+1
 14063  000B96  C01D  F00E         	movff	?i1___ftmul+2,___ftdiv@f1+2
 14064  000B9A  0E50               	movlw	80
 14065  000B9C  6E0F               	movwf	___ftdiv@f2,c
 14066  000B9E  0E43               	movlw	67
 14067  000BA0  6E10               	movwf	___ftdiv@f2+1,c
 14068  000BA2  0E48               	movlw	72
 14069  000BA4  6E11               	movwf	___ftdiv@f2+2,c
 14070  000BA6  EC6D  F004         	call	___ftdiv	;wreg free
 14071  000BAA  C00C  F1A9         	movff	?___ftdiv,_Rail_VIN
 14072  000BAE  C00D  F1AA         	movff	?___ftdiv+1,_Rail_VIN+1
 14073  000BB2  C00E  F1AB         	movff	?___ftdiv+2,_Rail_VIN+2
 14074  000BB6                     i1l6251:
 14075                           
 14076                           ;ADC.c: 92: __nop();
 14077  000BB6  F000               	nop	
 14078                           
 14079                           ;ADC.c: 98: }
 14080                           ;ADC.c: 99: ADC_ChangeChannel();
 14081                           
 14082                           ;ADC.c: 93: }
 14083  000BB8  EF87  F00C         	goto	i1_ADC_ChangeChannel	;wreg free
 14084  000BBC                     __end_of_ADC_CalculateVoltage:
 14085                           	opt stack 0
 14086                           tblptru	equ	0xFF8
 14087                           tblptrh	equ	0xFF7
 14088                           tblptrl	equ	0xFF6
 14089                           tablat	equ	0xFF5
 14090                           prodh	equ	0xFF4
 14091                           prodl	equ	0xFF3
 14092                           intcon	equ	0xFF2
 14093                           intcon2	equ	0xFF1
 14094                           intcon3	equ	0xFF0
 14095                           postinc0	equ	0xFEE
 14096                           wreg	equ	0xFE8
 14097                           postdec1	equ	0xFE5
 14098                           fsr1l	equ	0xFE1
 14099                           bsr	equ	0xFE0
 14100                           indf2	equ	0xFDF
 14101                           postinc2	equ	0xFDE
 14102                           postdec2	equ	0xFDD
 14103                           plusw2	equ	0xFDB
 14104                           fsr2h	equ	0xFDA
 14105                           fsr2l	equ	0xFD9
 14106                           status	equ	0xFD8
 14107                           
 14108 ;; *************** function i1___lwtoft *****************
 14109 ;; Defined at:
 14110 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
 14111 ;; Parameters:    Size  Location     Type
 14112 ;;  c               2    8[COMRAM] unsigned int 
 14113 ;; Auto vars:     Size  Location     Type
 14114 ;;		None
 14115 ;; Return value:  Size  Location     Type
 14116 ;;                  3    8[COMRAM] float 
 14117 ;; Registers used:
 14118 ;;		wreg, status,2, status,0, cstack
 14119 ;; Tracked objects:
 14120 ;;		On entry : 0/1
 14121 ;;		On exit  : 0/0
 14122 ;;		Unchanged: 0/0
 14123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14124 ;;      Params:         3       0       0       0       0
 14125 ;;      Locals:         0       0       0       0       0
 14126 ;;      Temps:          0       0       0       0       0
 14127 ;;      Totals:         3       0       0       0       0
 14128 ;;Total ram usage:        3 bytes
 14129 ;; Hardware stack levels used:    1
 14130 ;; Hardware stack levels required when called:    7
 14131 ;; This function calls:
 14132 ;;		i1___ftpack
 14133 ;; This function is called by:
 14134 ;;		_IR_CheckCode
 14135 ;;		_ADC_CalculateVoltage
 14136 ;;		i1_IR_LoadCode
 14137 ;; This function uses a non-reentrant model
 14138 ;;
 14139                           
 14140                           	psect	text91
 14141  001782                     __ptext91:
 14142                           	opt stack 0
 14143  001782                     i1___lwtoft:
 14144                           	opt stack 15
 14145                           
 14146                           ;incstack = 0
 14147  001782  C009  F001         	movff	i1___lwtoft@c,i1___ftpack@arg
 14148  001786  C00A  F002         	movff	i1___lwtoft@c+1,i1___ftpack@arg+1
 14149  00178A  6A03               	clrf	i1___ftpack@arg+2,c
 14150  00178C  0E8E               	movlw	142
 14151  00178E  6E04               	movwf	i1___ftpack@exp,c
 14152  001790  0E00               	movlw	0
 14153  001792  6E05               	movwf	i1___ftpack@sign,c
 14154  001794  ECAC  F007         	call	i1___ftpack	;wreg free
 14155  001798  C001  F009         	movff	?i1___ftpack,?i1___lwtoft
 14156  00179C  C002  F00A         	movff	?i1___ftpack+1,?i1___lwtoft+1
 14157  0017A0  C003  F00B         	movff	?i1___ftpack+2,?i1___lwtoft+2
 14158  0017A4  0012               	return		;funcret
 14159  0017A6                     __end_ofi1___lwtoft:
 14160                           	opt stack 0
 14161                           tblptru	equ	0xFF8
 14162                           tblptrh	equ	0xFF7
 14163                           tblptrl	equ	0xFF6
 14164                           tablat	equ	0xFF5
 14165                           prodh	equ	0xFF4
 14166                           prodl	equ	0xFF3
 14167                           intcon	equ	0xFF2
 14168                           intcon2	equ	0xFF1
 14169                           intcon3	equ	0xFF0
 14170                           postinc0	equ	0xFEE
 14171                           wreg	equ	0xFE8
 14172                           postdec1	equ	0xFE5
 14173                           fsr1l	equ	0xFE1
 14174                           bsr	equ	0xFE0
 14175                           indf2	equ	0xFDF
 14176                           postinc2	equ	0xFDE
 14177                           postdec2	equ	0xFDD
 14178                           plusw2	equ	0xFDB
 14179                           fsr2h	equ	0xFDA
 14180                           fsr2l	equ	0xFD9
 14181                           status	equ	0xFD8
 14182                           
 14183 ;; *************** function i1___ftmul *****************
 14184 ;; Defined at:
 14185 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
 14186 ;; Parameters:    Size  Location     Type
 14187 ;;  f1              3   26[COMRAM] float 
 14188 ;;  f2              3   29[COMRAM] float 
 14189 ;; Auto vars:     Size  Location     Type
 14190 ;;  __ftmul         3   37[COMRAM] unsigned um
 14191 ;;  __ftmul         1   36[COMRAM] unsigned char 
 14192 ;;  __ftmul         1   35[COMRAM] unsigned char 
 14193 ;;  __ftmul         1    0        unsigned char 
 14194 ;; Return value:  Size  Location     Type
 14195 ;;                  3   26[COMRAM] float 
 14196 ;; Registers used:
 14197 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14198 ;; Tracked objects:
 14199 ;;		On entry : 0/1
 14200 ;;		On exit  : 0/0
 14201 ;;		Unchanged: 0/0
 14202 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14203 ;;      Params:         6       0       0       0       0
 14204 ;;      Locals:         5       0       0       0       0
 14205 ;;      Temps:          3       0       0       0       0
 14206 ;;      Totals:        14       0       0       0       0
 14207 ;;Total ram usage:       14 bytes
 14208 ;; Hardware stack levels used:    1
 14209 ;; Hardware stack levels required when called:    7
 14210 ;; This function calls:
 14211 ;;		i1___ftpack
 14212 ;; This function is called by:
 14213 ;;		_IR_CheckCode
 14214 ;;		_ADC_CalculateVoltage
 14215 ;;		i1_IR_LoadCode
 14216 ;; This function uses a non-reentrant model
 14217 ;;
 14218                           
 14219                           	psect	text92
 14220  00065E                     __ptext92:
 14221                           	opt stack 0
 14222  00065E                     i1___ftmul:
 14223                           	opt stack 15
 14224                           
 14225                           ;incstack = 0
 14226  00065E  C01D  F021         	movff	i1___ftmul@f1+2,??i1___ftmul
 14227  000662  6A22               	clrf	(??i1___ftmul+1)& (0+255),c
 14228  000664  6A23               	clrf	(??i1___ftmul+2)& (0+255),c
 14229  000666  341C               	rlcf	i1___ftmul@f1+1,w,c
 14230  000668  3621               	rlcf	??i1___ftmul& (0+255),f,c
 14231  00066A  E301               	bnc	u464_21
 14232  00066C  8022               	bsf	(??i1___ftmul+1)& (0+255),0,c
 14233  00066E                     u464_21:
 14234  00066E  5021               	movf	??i1___ftmul,w,c
 14235  000670  6E24               	movwf	i1___ftmul@exp,c
 14236  000672  5024               	movf	i1___ftmul@exp,w,c
 14237  000674  E104               	bnz	i1l4935
 14238  000676  6A1B               	clrf	?i1___ftmul,c
 14239  000678  6A1C               	clrf	?i1___ftmul+1,c
 14240  00067A  6A1D               	clrf	?i1___ftmul+2,c
 14241  00067C  0012               	return	
 14242  00067E                     i1l4935:
 14243  00067E  C020  F021         	movff	i1___ftmul@f2+2,??i1___ftmul
 14244  000682  6A22               	clrf	(??i1___ftmul+1)& (0+255),c
 14245  000684  6A23               	clrf	(??i1___ftmul+2)& (0+255),c
 14246  000686  341F               	rlcf	i1___ftmul@f2+1,w,c
 14247  000688  3621               	rlcf	??i1___ftmul& (0+255),f,c
 14248  00068A  E301               	bnc	u466_21
 14249  00068C  8022               	bsf	(??i1___ftmul+1)& (0+255),0,c
 14250  00068E                     u466_21:
 14251  00068E  5021               	movf	??i1___ftmul,w,c
 14252  000690  6E25               	movwf	i1___ftmul@sign,c
 14253  000692  5025               	movf	i1___ftmul@sign,w,c
 14254  000694  E104               	bnz	i1l4939
 14255  000696  6A1B               	clrf	?i1___ftmul,c
 14256  000698  6A1C               	clrf	?i1___ftmul+1,c
 14257  00069A  6A1D               	clrf	?i1___ftmul+2,c
 14258  00069C  0012               	return	
 14259  00069E                     i1l4939:
 14260  00069E  5025               	movf	i1___ftmul@sign,w,c
 14261  0006A0  0F7B               	addlw	123
 14262  0006A2  2624               	addwf	i1___ftmul@exp,f,c
 14263  0006A4  C01D  F025         	movff	i1___ftmul@f1+2,i1___ftmul@sign
 14264  0006A8  5020               	movf	i1___ftmul@f2+2,w,c
 14265  0006AA  1A25               	xorwf	i1___ftmul@sign,f,c
 14266  0006AC  0E80               	movlw	128
 14267  0006AE  1625               	andwf	i1___ftmul@sign,f,c
 14268  0006B0  8E1C               	bsf	i1___ftmul@f1+1,7,c
 14269  0006B2  8E1F               	bsf	i1___ftmul@f2+1,7,c
 14270  0006B4  6A20               	clrf	i1___ftmul@f2+2,c
 14271  0006B6  6A1D               	clrf	i1___ftmul@f1+2,c
 14272  0006B8  501B               	movf	i1___ftmul@f1,w,c
 14273  0006BA  021E               	mulwf	i1___ftmul@f2,c
 14274  0006BC  CFF4 FFF3          	movff	prodh,prodl
 14275  0006C0  6AF4               	clrf	prodh,c
 14276  0006C2  CFF3 F026          	movff	prodl,i1___ftmul@f3_as_product
 14277  0006C6  CFF4 F027          	movff	prodh,i1___ftmul@f3_as_product+1
 14278  0006CA  6A28               	clrf	i1___ftmul@f3_as_product+2,c
 14279  0006CC  501B               	movf	i1___ftmul@f1,w,c
 14280  0006CE  021F               	mulwf	i1___ftmul@f2+1,c
 14281  0006D0  50F3               	movf	prodl,w,c
 14282  0006D2  2626               	addwf	i1___ftmul@f3_as_product,f,c
 14283  0006D4  50F4               	movf	prodh,w,c
 14284  0006D6  2227               	addwfc	i1___ftmul@f3_as_product+1,f,c
 14285  0006D8  0E00               	movlw	0
 14286  0006DA  2228               	addwfc	i1___ftmul@f3_as_product+2,f,c
 14287  0006DC  501C               	movf	i1___ftmul@f1+1,w,c
 14288  0006DE  021E               	mulwf	i1___ftmul@f2,c
 14289  0006E0  50F3               	movf	prodl,w,c
 14290  0006E2  2626               	addwf	i1___ftmul@f3_as_product,f,c
 14291  0006E4  50F4               	movf	prodh,w,c
 14292  0006E6  2227               	addwfc	i1___ftmul@f3_as_product+1,f,c
 14293  0006E8  0E00               	movlw	0
 14294  0006EA  2228               	addwfc	i1___ftmul@f3_as_product+2,f,c
 14295  0006EC  501C               	movf	i1___ftmul@f1+1,w,c
 14296  0006EE  021F               	mulwf	i1___ftmul@f2+1,c
 14297  0006F0  50F3               	movf	prodl,w,c
 14298  0006F2  2627               	addwf	i1___ftmul@f3_as_product+1,f,c
 14299  0006F4  50F4               	movf	prodh,w,c
 14300  0006F6  2228               	addwfc	i1___ftmul@f3_as_product+2,f,c
 14301  0006F8  AE28               	btfss	i1___ftmul@f3_as_product+2,7,c
 14302  0006FA  D005               	goto	i1l1401
 14303  0006FC  90D8               	bcf	status,0,c
 14304  0006FE  3228               	rrcf	i1___ftmul@f3_as_product+2,f,c
 14305  000700  3227               	rrcf	i1___ftmul@f3_as_product+1,f,c
 14306  000702  3226               	rrcf	i1___ftmul@f3_as_product,f,c
 14307  000704  2A24               	incf	i1___ftmul@exp,f,c
 14308  000706                     i1l1401:
 14309  000706  90D8               	bcf	status,0,c
 14310  000708  3228               	rrcf	i1___ftmul@f3_as_product+2,f,c
 14311  00070A  3227               	rrcf	i1___ftmul@f3_as_product+1,f,c
 14312  00070C  3226               	rrcf	i1___ftmul@f3_as_product,f,c
 14313  00070E  C026  F001         	movff	i1___ftmul@f3_as_product,i1___ftpack@arg
 14314  000712  C027  F002         	movff	i1___ftmul@f3_as_product+1,i1___ftpack@arg+1
 14315  000716  C028  F003         	movff	i1___ftmul@f3_as_product+2,i1___ftpack@arg+2
 14316  00071A  C024  F004         	movff	i1___ftmul@exp,i1___ftpack@exp
 14317  00071E  C025  F005         	movff	i1___ftmul@sign,i1___ftpack@sign
 14318  000722  ECAC  F007         	call	i1___ftpack	;wreg free
 14319  000726  C001  F01B         	movff	?i1___ftpack,?i1___ftmul
 14320  00072A  C002  F01C         	movff	?i1___ftpack+1,?i1___ftmul+1
 14321  00072E  C003  F01D         	movff	?i1___ftpack+2,?i1___ftmul+2
 14322  000732  0012               	return		;funcret
 14323  000734                     __end_ofi1___ftmul:
 14324                           	opt stack 0
 14325                           tblptru	equ	0xFF8
 14326                           tblptrh	equ	0xFF7
 14327                           tblptrl	equ	0xFF6
 14328                           tablat	equ	0xFF5
 14329                           prodh	equ	0xFF4
 14330                           prodl	equ	0xFF3
 14331                           intcon	equ	0xFF2
 14332                           intcon2	equ	0xFF1
 14333                           intcon3	equ	0xFF0
 14334                           postinc0	equ	0xFEE
 14335                           wreg	equ	0xFE8
 14336                           postdec1	equ	0xFE5
 14337                           fsr1l	equ	0xFE1
 14338                           bsr	equ	0xFE0
 14339                           indf2	equ	0xFDF
 14340                           postinc2	equ	0xFDE
 14341                           postdec2	equ	0xFDD
 14342                           plusw2	equ	0xFDB
 14343                           fsr2h	equ	0xFDA
 14344                           fsr2l	equ	0xFD9
 14345                           status	equ	0xFD8
 14346                           
 14347 ;; *************** function i1_ADC_ChangeChannel *****************
 14348 ;; Defined at:
 14349 ;;		line 107 in file "ADC.c"
 14350 ;; Parameters:    Size  Location     Type
 14351 ;;		None
 14352 ;; Auto vars:     Size  Location     Type
 14353 ;;		None
 14354 ;; Return value:  Size  Location     Type
 14355 ;;		None               void
 14356 ;; Registers used:
 14357 ;;		wreg, status,2, status,0
 14358 ;; Tracked objects:
 14359 ;;		On entry : 0/0
 14360 ;;		On exit  : 0/0
 14361 ;;		Unchanged: 0/0
 14362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14363 ;;      Params:         0       0       0       0       0
 14364 ;;      Locals:         0       0       0       0       0
 14365 ;;      Temps:          0       0       0       0       0
 14366 ;;      Totals:         0       0       0       0       0
 14367 ;;Total ram usage:        0 bytes
 14368 ;; Hardware stack levels used:    1
 14369 ;; Hardware stack levels required when called:    6
 14370 ;; This function calls:
 14371 ;;		Nothing
 14372 ;; This function is called by:
 14373 ;;		_ADC_CalculateVoltage
 14374 ;; This function uses a non-reentrant model
 14375 ;;
 14376                           
 14377                           	psect	text93
 14378  00190E                     __ptext93:
 14379                           	opt stack 0
 14380  00190E                     i1_ADC_ChangeChannel:
 14381                           	opt stack 16
 14382                           
 14383                           ;ADC.c: 109: if(ADC_CurrentSource == 10)
 14384                           
 14385                           ;incstack = 0
 14386  00190E  0E0A               	movlw	10
 14387  001910  186D               	xorwf	_ADC_CurrentSource,w,c
 14388  001912  E107               	bnz	i1l5969
 14389                           
 14390                           ;ADC.c: 110: {
 14391                           ;ADC.c: 111: ADC_CurrentSource = 11;
 14392  001914  0E0B               	movlw	11
 14393  001916  6E6D               	movwf	_ADC_CurrentSource,c
 14394                           
 14395                           ;ADC.c: 112: ADCON0bits.CHS = 1;
 14396  001918  50C2               	movf	4034,w,c	;volatile
 14397  00191A  0BC3               	andlw	-61
 14398  00191C  0904               	iorlw	4
 14399  00191E  6EC2               	movwf	4034,c	;volatile
 14400                           
 14401                           ;ADC.c: 113: }
 14402  001920  0012               	return	
 14403  001922                     i1l5969:
 14404                           
 14405                           ;ADC.c: 114: else
 14406                           ;ADC.c: 115: {
 14407                           ;ADC.c: 116: ADC_CurrentSource = 10;
 14408  001922  0E0A               	movlw	10
 14409  001924  6E6D               	movwf	_ADC_CurrentSource,c
 14410                           
 14411                           ;ADC.c: 117: ADCON0bits.CHS = 0;
 14412  001926  0EC3               	movlw	-61
 14413  001928  16C2               	andwf	4034,f,c	;volatile
 14414  00192A  0CC3               	retlw	195	;funcret
 14415  00192C                     __end_ofi1_ADC_ChangeChannel:
 14416                           	opt stack 0
 14417                           tblptru	equ	0xFF8
 14418                           tblptrh	equ	0xFF7
 14419                           tblptrl	equ	0xFF6
 14420                           tablat	equ	0xFF5
 14421                           prodh	equ	0xFF4
 14422                           prodl	equ	0xFF3
 14423                           intcon	equ	0xFF2
 14424                           intcon2	equ	0xFF1
 14425                           intcon3	equ	0xFF0
 14426                           postinc0	equ	0xFEE
 14427                           wreg	equ	0xFE8
 14428                           postdec1	equ	0xFE5
 14429                           fsr1l	equ	0xFE1
 14430                           bsr	equ	0xFE0
 14431                           indf2	equ	0xFDF
 14432                           postinc2	equ	0xFDE
 14433                           postdec2	equ	0xFDD
 14434                           plusw2	equ	0xFDB
 14435                           fsr2h	equ	0xFDA
 14436                           fsr2l	equ	0xFD9
 14437                           status	equ	0xFD8
 14438                           
 14439 ;; *************** function ___ftdiv *****************
 14440 ;; Defined at:
 14441 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
 14442 ;; Parameters:    Size  Location     Type
 14443 ;;  f1              3   11[COMRAM] float 
 14444 ;;  f2              3   14[COMRAM] float 
 14445 ;; Auto vars:     Size  Location     Type
 14446 ;;  f3              3   21[COMRAM] float 
 14447 ;;  sign            1   25[COMRAM] unsigned char 
 14448 ;;  exp             1   24[COMRAM] unsigned char 
 14449 ;;  cntr            1   20[COMRAM] unsigned char 
 14450 ;; Return value:  Size  Location     Type
 14451 ;;                  3   11[COMRAM] float 
 14452 ;; Registers used:
 14453 ;;		wreg, status,2, status,0, cstack
 14454 ;; Tracked objects:
 14455 ;;		On entry : 0/0
 14456 ;;		On exit  : 0/0
 14457 ;;		Unchanged: 0/0
 14458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14459 ;;      Params:         6       0       0       0       0
 14460 ;;      Locals:         6       0       0       0       0
 14461 ;;      Temps:          3       0       0       0       0
 14462 ;;      Totals:        15       0       0       0       0
 14463 ;;Total ram usage:       15 bytes
 14464 ;; Hardware stack levels used:    1
 14465 ;; Hardware stack levels required when called:    7
 14466 ;; This function calls:
 14467 ;;		i1___ftpack
 14468 ;; This function is called by:
 14469 ;;		_ADC_CalculateVoltage
 14470 ;; This function uses a non-reentrant model
 14471 ;;
 14472                           
 14473                           	psect	text94
 14474  0008DA                     __ptext94:
 14475                           	opt stack 0
 14476  0008DA                     ___ftdiv:
 14477                           	opt stack 15
 14478                           
 14479                           ;incstack = 0
 14480  0008DA  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
 14481  0008DE  6A13               	clrf	(??___ftdiv+1)& (0+255),c
 14482  0008E0  6A14               	clrf	(??___ftdiv+2)& (0+255),c
 14483  0008E2  340D               	rlcf	___ftdiv@f1+1,w,c
 14484  0008E4  3612               	rlcf	??___ftdiv& (0+255),f,c
 14485  0008E6  E301               	bnc	u536_21
 14486  0008E8  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
 14487  0008EA                     u536_21:
 14488  0008EA  5012               	movf	??___ftdiv,w,c
 14489  0008EC  6E19               	movwf	___ftdiv@exp,c
 14490  0008EE  5019               	movf	___ftdiv@exp,w,c
 14491  0008F0  E104               	bnz	i1l5497
 14492  0008F2  6A0C               	clrf	?___ftdiv,c
 14493  0008F4  6A0D               	clrf	?___ftdiv+1,c
 14494  0008F6  6A0E               	clrf	?___ftdiv+2,c
 14495  0008F8  0012               	return	
 14496  0008FA                     i1l5497:
 14497  0008FA  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
 14498  0008FE  6A13               	clrf	(??___ftdiv+1)& (0+255),c
 14499  000900  6A14               	clrf	(??___ftdiv+2)& (0+255),c
 14500  000902  3410               	rlcf	___ftdiv@f2+1,w,c
 14501  000904  3612               	rlcf	??___ftdiv& (0+255),f,c
 14502  000906  E301               	bnc	u538_21
 14503  000908  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
 14504  00090A                     u538_21:
 14505  00090A  5012               	movf	??___ftdiv,w,c
 14506  00090C  6E1A               	movwf	___ftdiv@sign,c
 14507  00090E  501A               	movf	___ftdiv@sign,w,c
 14508  000910  E104               	bnz	i1l1385
 14509  000912  6A0C               	clrf	?___ftdiv,c
 14510  000914  6A0D               	clrf	?___ftdiv+1,c
 14511  000916  6A0E               	clrf	?___ftdiv+2,c
 14512  000918  0012               	return	
 14513  00091A                     i1l1385:
 14514  00091A  6A16               	clrf	___ftdiv@f3,c
 14515  00091C  6A17               	clrf	___ftdiv@f3+1,c
 14516  00091E  6A18               	clrf	___ftdiv@f3+2,c
 14517  000920  501A               	movf	___ftdiv@sign,w,c
 14518  000922  0F89               	addlw	137
 14519  000924  5E19               	subwf	___ftdiv@exp,f,c
 14520  000926  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
 14521  00092A  5011               	movf	___ftdiv@f2+2,w,c
 14522  00092C  1A1A               	xorwf	___ftdiv@sign,f,c
 14523  00092E  0E80               	movlw	128
 14524  000930  161A               	andwf	___ftdiv@sign,f,c
 14525  000932  8E0D               	bsf	___ftdiv@f1+1,7,c
 14526  000934  6A0E               	clrf	___ftdiv@f1+2,c
 14527  000936  8E10               	bsf	___ftdiv@f2+1,7,c
 14528  000938  6A11               	clrf	___ftdiv@f2+2,c
 14529  00093A  0E18               	movlw	24
 14530  00093C  6E15               	movwf	___ftdiv@cntr,c
 14531  00093E                     i1l5515:
 14532  00093E  90D8               	bcf	status,0,c
 14533  000940  3616               	rlcf	___ftdiv@f3,f,c
 14534  000942  3617               	rlcf	___ftdiv@f3+1,f,c
 14535  000944  3618               	rlcf	___ftdiv@f3+2,f,c
 14536  000946  500F               	movf	___ftdiv@f2,w,c
 14537  000948  5C0C               	subwf	___ftdiv@f1,w,c
 14538  00094A  5010               	movf	___ftdiv@f2+1,w,c
 14539  00094C  580D               	subwfb	___ftdiv@f1+1,w,c
 14540  00094E  5011               	movf	___ftdiv@f2+2,w,c
 14541  000950  580E               	subwfb	___ftdiv@f1+2,w,c
 14542  000952  E307               	bnc	i1l1387
 14543  000954  500F               	movf	___ftdiv@f2,w,c
 14544  000956  5E0C               	subwf	___ftdiv@f1,f,c
 14545  000958  5010               	movf	___ftdiv@f2+1,w,c
 14546  00095A  5A0D               	subwfb	___ftdiv@f1+1,f,c
 14547  00095C  5011               	movf	___ftdiv@f2+2,w,c
 14548  00095E  5A0E               	subwfb	___ftdiv@f1+2,f,c
 14549  000960  8016               	bsf	___ftdiv@f3,0,c
 14550  000962                     i1l1387:
 14551  000962  90D8               	bcf	status,0,c
 14552  000964  360C               	rlcf	___ftdiv@f1,f,c
 14553  000966  360D               	rlcf	___ftdiv@f1+1,f,c
 14554  000968  360E               	rlcf	___ftdiv@f1+2,f,c
 14555  00096A  2E15               	decfsz	___ftdiv@cntr,f,c
 14556  00096C  D7E8               	goto	i1l5515
 14557  00096E  C016  F001         	movff	___ftdiv@f3,i1___ftpack@arg
 14558  000972  C017  F002         	movff	___ftdiv@f3+1,i1___ftpack@arg+1
 14559  000976  C018  F003         	movff	___ftdiv@f3+2,i1___ftpack@arg+2
 14560  00097A  C019  F004         	movff	___ftdiv@exp,i1___ftpack@exp
 14561  00097E  C01A  F005         	movff	___ftdiv@sign,i1___ftpack@sign
 14562  000982  ECAC  F007         	call	i1___ftpack	;wreg free
 14563  000986  C001  F00C         	movff	?i1___ftpack,?___ftdiv
 14564  00098A  C002  F00D         	movff	?i1___ftpack+1,?___ftdiv+1
 14565  00098E  C003  F00E         	movff	?i1___ftpack+2,?___ftdiv+2
 14566  000992  0012               	return		;funcret
 14567  000994                     __end_of___ftdiv:
 14568                           	opt stack 0
 14569                           tblptru	equ	0xFF8
 14570                           tblptrh	equ	0xFF7
 14571                           tblptrl	equ	0xFF6
 14572                           tablat	equ	0xFF5
 14573                           prodh	equ	0xFF4
 14574                           prodl	equ	0xFF3
 14575                           intcon	equ	0xFF2
 14576                           intcon2	equ	0xFF1
 14577                           intcon3	equ	0xFF0
 14578                           postinc0	equ	0xFEE
 14579                           wreg	equ	0xFE8
 14580                           postdec1	equ	0xFE5
 14581                           fsr1l	equ	0xFE1
 14582                           bsr	equ	0xFE0
 14583                           indf2	equ	0xFDF
 14584                           postinc2	equ	0xFDE
 14585                           postdec2	equ	0xFDD
 14586                           plusw2	equ	0xFDB
 14587                           fsr2h	equ	0xFDA
 14588                           fsr2l	equ	0xFD9
 14589                           status	equ	0xFD8
 14590                           
 14591 ;; *************** function i1___ftpack *****************
 14592 ;; Defined at:
 14593 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 14594 ;; Parameters:    Size  Location     Type
 14595 ;;  arg             3    0[COMRAM] unsigned um
 14596 ;;  exp             1    3[COMRAM] unsigned char 
 14597 ;;  sign            1    4[COMRAM] unsigned char 
 14598 ;; Auto vars:     Size  Location     Type
 14599 ;;		None
 14600 ;; Return value:  Size  Location     Type
 14601 ;;                  3    0[COMRAM] float 
 14602 ;; Registers used:
 14603 ;;		wreg, status,2, status,0
 14604 ;; Tracked objects:
 14605 ;;		On entry : 0/1
 14606 ;;		On exit  : 0/0
 14607 ;;		Unchanged: 0/0
 14608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14609 ;;      Params:         5       0       0       0       0
 14610 ;;      Locals:         0       0       0       0       0
 14611 ;;      Temps:          3       0       0       0       0
 14612 ;;      Totals:         8       0       0       0       0
 14613 ;;Total ram usage:        8 bytes
 14614 ;; Hardware stack levels used:    1
 14615 ;; Hardware stack levels required when called:    6
 14616 ;; This function calls:
 14617 ;;		Nothing
 14618 ;; This function is called by:
 14619 ;;		___ftdiv
 14620 ;;		i1___ftmul
 14621 ;;		i1___lwtoft
 14622 ;; This function uses a non-reentrant model
 14623 ;;
 14624                           
 14625                           	psect	text95
 14626  000F58                     __ptext95:
 14627                           	opt stack 0
 14628  000F58                     i1___ftpack:
 14629                           	opt stack 15
 14630                           
 14631                           ;incstack = 0
 14632  000F58  5004               	movf	i1___ftpack@exp,w,c
 14633  000F5A  E004               	bz	i1l1317
 14634  000F5C  5001               	movf	i1___ftpack@arg,w,c
 14635  000F5E  1002               	iorwf	i1___ftpack@arg+1,w,c
 14636  000F60  1003               	iorwf	i1___ftpack@arg+2,w,c
 14637  000F62  E109               	bnz	i1l4401
 14638  000F64                     i1l1317:
 14639  000F64  6A01               	clrf	?i1___ftpack,c
 14640  000F66  6A02               	clrf	?i1___ftpack+1,c
 14641  000F68  6A03               	clrf	?i1___ftpack+2,c
 14642  000F6A  0012               	return	
 14643  000F6C                     i1l4399:
 14644  000F6C  2A04               	incf	i1___ftpack@exp,f,c
 14645  000F6E  90D8               	bcf	status,0,c
 14646  000F70  3203               	rrcf	i1___ftpack@arg+2,f,c
 14647  000F72  3202               	rrcf	i1___ftpack@arg+1,f,c
 14648  000F74  3201               	rrcf	i1___ftpack@arg,f,c
 14649  000F76                     i1l4401:
 14650  000F76  6A06               	clrf	??i1___ftpack& (0+255),c
 14651  000F78  6A07               	clrf	(??i1___ftpack+1)& (0+255),c
 14652  000F7A  0EFE               	movlw	254
 14653  000F7C  1403               	andwf	i1___ftpack@arg+2,w,c
 14654  000F7E  6E08               	movwf	(??i1___ftpack+2)& (0+255),c
 14655  000F80  5006               	movf	??i1___ftpack,w,c
 14656  000F82  1007               	iorwf	??i1___ftpack+1,w,c
 14657  000F84  1008               	iorwf	??i1___ftpack+2,w,c
 14658  000F86  E00A               	bz	i1l4407
 14659  000F88  D7F1               	goto	i1l4399
 14660  000F8A                     i1l4403:
 14661  000F8A  2A04               	incf	i1___ftpack@exp,f,c
 14662  000F8C  2A01               	incf	i1___ftpack@arg,f,c
 14663  000F8E  0E00               	movlw	0
 14664  000F90  2202               	addwfc	i1___ftpack@arg+1,f,c
 14665  000F92  2203               	addwfc	i1___ftpack@arg+2,f,c
 14666  000F94  90D8               	bcf	status,0,c
 14667  000F96  3203               	rrcf	i1___ftpack@arg+2,f,c
 14668  000F98  3202               	rrcf	i1___ftpack@arg+1,f,c
 14669  000F9A  3201               	rrcf	i1___ftpack@arg,f,c
 14670  000F9C                     i1l4407:
 14671  000F9C  6A06               	clrf	??i1___ftpack& (0+255),c
 14672  000F9E  6A07               	clrf	(??i1___ftpack+1)& (0+255),c
 14673  000FA0  5003               	movf	i1___ftpack@arg+2,w,c
 14674  000FA2  6E08               	movwf	(??i1___ftpack+2)& (0+255),c
 14675  000FA4  5006               	movf	??i1___ftpack,w,c
 14676  000FA6  1007               	iorwf	??i1___ftpack+1,w,c
 14677  000FA8  1008               	iorwf	??i1___ftpack+2,w,c
 14678  000FAA  E006               	bz	i1l4411
 14679  000FAC  D7EE               	goto	i1l4403
 14680  000FAE                     i1l4409:
 14681  000FAE  0604               	decf	i1___ftpack@exp,f,c
 14682  000FB0  90D8               	bcf	status,0,c
 14683  000FB2  3601               	rlcf	i1___ftpack@arg,f,c
 14684  000FB4  3602               	rlcf	i1___ftpack@arg+1,f,c
 14685  000FB6  3603               	rlcf	i1___ftpack@arg+2,f,c
 14686  000FB8                     i1l4411:
 14687  000FB8  BE02               	btfsc	i1___ftpack@arg+1,7,c
 14688  000FBA  D003               	goto	i1l1329
 14689  000FBC  0E02               	movlw	2
 14690  000FBE  6004               	cpfslt	i1___ftpack@exp,c
 14691  000FC0  D7F6               	goto	i1l4409
 14692  000FC2                     i1l1329:
 14693  000FC2  A004               	btfss	i1___ftpack@exp,0,c
 14694  000FC4  9E02               	bcf	i1___ftpack@arg+1,7,c
 14695  000FC6  90D8               	bcf	status,0,c
 14696  000FC8  3204               	rrcf	i1___ftpack@exp,f,c
 14697  000FCA  5004               	movf	i1___ftpack@exp,w,c
 14698  000FCC  1203               	iorwf	i1___ftpack@arg+2,f,c
 14699  000FCE  5005               	movf	i1___ftpack@sign,w,c
 14700  000FD0  E001               	bz	i1l4425
 14701  000FD2  8E03               	bsf	i1___ftpack@arg+2,7,c
 14702  000FD4                     i1l4425:
 14703  000FD4  C001  F001         	movff	i1___ftpack@arg,?i1___ftpack
 14704  000FD8  C002  F002         	movff	i1___ftpack@arg+1,?i1___ftpack+1
 14705  000FDC  C003  F003         	movff	i1___ftpack@arg+2,?i1___ftpack+2
 14706  000FE0  0012               	return		;funcret
 14707  000FE2                     __end_ofi1___ftpack:
 14708                           	opt stack 0
 14709                           tblptru	equ	0xFF8
 14710                           tblptrh	equ	0xFF7
 14711                           tblptrl	equ	0xFF6
 14712                           tablat	equ	0xFF5
 14713                           prodh	equ	0xFF4
 14714                           prodl	equ	0xFF3
 14715                           intcon	equ	0xFF2
 14716                           intcon2	equ	0xFF1
 14717                           intcon3	equ	0xFF0
 14718                           postinc0	equ	0xFEE
 14719                           wreg	equ	0xFE8
 14720                           postdec1	equ	0xFE5
 14721                           fsr1l	equ	0xFE1
 14722                           bsr	equ	0xFE0
 14723                           indf2	equ	0xFDF
 14724                           postinc2	equ	0xFDE
 14725                           postdec2	equ	0xFDD
 14726                           plusw2	equ	0xFDB
 14727                           fsr2h	equ	0xFDA
 14728                           fsr2l	equ	0xFD9
 14729                           status	equ	0xFD8
 14730                           
 14731 ;; *************** function _high_isr *****************
 14732 ;; Defined at:
 14733 ;;		line 48 in file "INTERRUPTS.c"
 14734 ;; Parameters:    Size  Location     Type
 14735 ;;		None
 14736 ;; Auto vars:     Size  Location     Type
 14737 ;;  RFtemp          2   51[BANK0 ] unsigned int 
 14738 ;; Return value:  Size  Location     Type
 14739 ;;		None               void
 14740 ;; Registers used:
 14741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14742 ;; Tracked objects:
 14743 ;;		On entry : 0/0
 14744 ;;		On exit  : 0/0
 14745 ;;		Unchanged: 0/0
 14746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14747 ;;      Params:         0       0       0       0       0
 14748 ;;      Locals:         0       2       0       0       0
 14749 ;;      Temps:          0       8       0       0       0
 14750 ;;      Totals:         0      10       0       0       0
 14751 ;;Total ram usage:       10 bytes
 14752 ;; Hardware stack levels used:    1
 14753 ;; Hardware stack levels required when called:    5
 14754 ;; This function calls:
 14755 ;;		_RF_CheckCode
 14756 ;;		_TMR_Timer0Start
 14757 ;;		_TMR_Timer0Status
 14758 ;;		i2_RF_Disable
 14759 ;;		i2_RF_ResetData
 14760 ;;		i2_SYS_ActivityTimerReset
 14761 ;;		i2_TMR_ResetTimer0
 14762 ;;		i2_TMR_Timer0
 14763 ;; This function is called by:
 14764 ;;		Interrupt level 2
 14765 ;; This function uses a non-reentrant model
 14766 ;;
 14767                           
 14768                           	psect	intcode
 14769  000008                     __pintcode:
 14770                           	opt stack 0
 14771  000008                     _high_isr:
 14772                           	opt stack 13
 14773                           
 14774                           ;incstack = 0
 14775  000008  826E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14776  00000A  CFD9 F0AB          	movff	fsr2l,??_high_isr
 14777  00000E  CFDA F0AC          	movff	fsr2h,??_high_isr+1
 14778  000012  EFB2  F001         	goto	int_func
 14779                           tblptru	equ	0xFF8
 14780                           tblptrh	equ	0xFF7
 14781                           tblptrl	equ	0xFF6
 14782                           tablat	equ	0xFF5
 14783                           prodh	equ	0xFF4
 14784                           prodl	equ	0xFF3
 14785                           intcon	equ	0xFF2
 14786                           intcon2	equ	0xFF1
 14787                           intcon3	equ	0xFF0
 14788                           postinc0	equ	0xFEE
 14789                           wreg	equ	0xFE8
 14790                           postdec1	equ	0xFE5
 14791                           fsr1l	equ	0xFE1
 14792                           bsr	equ	0xFE0
 14793                           indf2	equ	0xFDF
 14794                           postinc2	equ	0xFDE
 14795                           postdec2	equ	0xFDD
 14796                           plusw2	equ	0xFDB
 14797                           fsr2h	equ	0xFDA
 14798                           fsr2l	equ	0xFD9
 14799                           status	equ	0xFD8
 14800                           
 14801                           	psect	intcode_body
 14802  000364                     __pintcode_body:
 14803                           	opt stack 13
 14804  000364                     int_func:
 14805                           	opt stack 13
 14806  000364  CFF3 F0AD          	movff	prodl,??_high_isr+2
 14807  000368  CFF4 F0AE          	movff	prodh,??_high_isr+3
 14808  00036C  CFF6 F0AF          	movff	tblptrl,??_high_isr+4
 14809  000370  CFF7 F0B0          	movff	tblptrh,??_high_isr+5
 14810  000374  CFF8 F0B1          	movff	tblptru,??_high_isr+6
 14811  000378  CFF5 F0B2          	movff	tablat,??_high_isr+7
 14812                           
 14813                           ;INTERRUPTS.c: 52: if((INTCON3bits.INT1IF && INTCON3bits.INT1E) || (INTCON3bits.INT2IF &
      +                          & INTCON3bits.INT2E))
 14814  00037C  A0F0               	btfss	intcon3,0,c	;volatile
 14815  00037E  D002               	goto	i2l200
 14816  000380  B6F0               	btfsc	intcon3,3,c	;volatile
 14817  000382  D003               	goto	i2l6559
 14818  000384                     i2l200:
 14819  000384  B2F0               	btfsc	intcon3,1,c	;volatile
 14820  000386  A8F0               	btfss	intcon3,4,c	;volatile
 14821  000388  D05A               	goto	i2l196
 14822  00038A                     i2l6559:
 14823                           
 14824                           ;INTERRUPTS.c: 53: {
 14825                           ;INTERRUPTS.c: 55: if(!TMR_Timer0Status())
 14826  00038A  ECEA  F00D         	call	_TMR_Timer0Status	;wreg free
 14827  00038E  0900               	iorlw	0
 14828  000390  E103               	bnz	i2l201
 14829                           
 14830                           ;INTERRUPTS.c: 56: {
 14831                           ;INTERRUPTS.c: 58: TMR_Timer0Start();
 14832  000392  EC89  F00D         	call	_TMR_Timer0Start	;wreg free
 14833                           
 14834                           ;INTERRUPTS.c: 59: }
 14835  000396  D050               	goto	i2l6603
 14836  000398                     i2l201:
 14837                           
 14838                           ;INTERRUPTS.c: 60: else
 14839                           ;INTERRUPTS.c: 61: {
 14840                           ;INTERRUPTS.c: 62: RFtemp = TMR0L;
 14841  000398  CFD6 F0B3          	movff	4054,high_isr@RFtemp	;volatile
 14842  00039C  0100               	movlb	0	; () banked
 14843  00039E  6BB4               	clrf	(high_isr@RFtemp+1)& (0+255),b
 14844                           
 14845                           ; BSR set to: 0
 14846                           ;INTERRUPTS.c: 63: RFtemp += (unsigned int)TMR0H << 8;
 14847  0003A0  50D7               	movf	4055,w,c	;volatile
 14848  0003A2  27B4               	addwf	(high_isr@RFtemp+1)& (0+255),f,b
 14849                           
 14850                           ; BSR set to: 0
 14851                           ;INTERRUPTS.c: 64: TMR_ResetTimer0();
 14852  0003A4  EC68  F00C         	call	i2_TMR_ResetTimer0	;wreg free
 14853                           
 14854                           ; BSR set to: 0
 14855                           ;INTERRUPTS.c: 65: if(!RFStarted)
 14856  0003A8  51C7               	movf	_RFStarted& (0+255),w,b
 14857  0003AA  E11D               	bnz	i2l203
 14858                           
 14859                           ; BSR set to: 0
 14860                           ;INTERRUPTS.c: 66: {
 14861                           ;INTERRUPTS.c: 67: if(System_State == 8)
 14862  0003AC  0E08               	movlw	8
 14863  0003AE  0101               	movlb	1	; () banked
 14864  0003B0  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
 14865  0003B2  E10E               	bnz	i2l6577
 14866                           
 14867                           ; BSR set to: 1
 14868                           ;INTERRUPTS.c: 68: {
 14869                           ;INTERRUPTS.c: 69: if(RFtemp >= RF_SyncLow && RFtemp <= RF_SyncHigh)
 14870  0003B4  0100               	movlb	0	; () banked
 14871  0003B6  51C2               	movf	_RF_SyncLow& (0+255),w,b
 14872  0003B8  5DB3               	subwf	high_isr@RFtemp& (0+255),w,b
 14873  0003BA  51C3               	movf	(_RF_SyncLow+1)& (0+255),w,b
 14874  0003BC  59B4               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14875  0003BE  E313               	bnc	i2l203
 14876                           
 14877                           ; BSR set to: 0
 14878  0003C0  51B3               	movf	high_isr@RFtemp& (0+255),w,b
 14879  0003C2  5DC0               	subwf	_RF_SyncHigh& (0+255),w,b
 14880  0003C4  51B4               	movf	(high_isr@RFtemp+1)& (0+255),w,b
 14881  0003C6  59C1               	subwfb	(_RF_SyncHigh+1)& (0+255),w,b
 14882  0003C8  E30E               	bnc	i2l203
 14883  0003CA                     i2l6575:
 14884                           
 14885                           ; BSR set to: 0
 14886                           ;INTERRUPTS.c: 70: {
 14887                           ;INTERRUPTS.c: 71: RFStarted = 1;
 14888  0003CA  0E01               	movlw	1
 14889  0003CC  6FC7               	movwf	_RFStarted& (0+255),b
 14890  0003CE  D00B               	goto	i2l203
 14891  0003D0                     i2l6577:
 14892                           
 14893                           ; BSR set to: 1
 14894                           ;INTERRUPTS.c: 74: else
 14895                           ;INTERRUPTS.c: 75: {
 14896                           ;INTERRUPTS.c: 76: if(RFtemp >= 300 && RFtemp <= 2000)
 14897  0003D0  0E2C               	movlw	44
 14898  0003D2  0100               	movlb	0	; () banked
 14899  0003D4  5DB3               	subwf	high_isr@RFtemp& (0+255),w,b
 14900  0003D6  0E01               	movlw	1
 14901  0003D8  59B4               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14902  0003DA  E305               	bnc	i2l203
 14903                           
 14904                           ; BSR set to: 0
 14905  0003DC  0ED1               	movlw	209
 14906  0003DE  5DB3               	subwf	high_isr@RFtemp& (0+255),w,b
 14907  0003E0  0E07               	movlw	7
 14908  0003E2  59B4               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14909  0003E4  E3F2               	bnc	i2l6575
 14910  0003E6                     i2l203:
 14911                           
 14912                           ; BSR set to: 0
 14913                           ;INTERRUPTS.c: 79: }
 14914                           ;INTERRUPTS.c: 80: }
 14915                           ;INTERRUPTS.c: 81: }
 14916                           ;INTERRUPTS.c: 82: if(RFStarted)
 14917  0003E6  51C7               	movf	_RFStarted& (0+255),w,b
 14918  0003E8  E027               	bz	i2l6603
 14919  0003EA                     i17L__ptext97:
 14920                           	opt stack 0
 14921  0003EA                     i17Li2_SYS_ActivityTimerReset:
 14922                           	opt stack 0
 14923  0003EA                     i17Li2l6393:
 14924                           	opt stack 17
 14925                           
 14926                           ; BSR set to: 0
 14927                           ;SYSTEM.c: 62: Activity_Timer = 0;
 14928  0003EA  6A5A               	clrf	_Activity_Timer,c
 14929  0003EC  6A5B               	clrf	_Activity_Timer+1,c
 14930  0003EE  6A5C               	clrf	_Activity_Timer+2,c
 14931  0003F0  6A5D               	clrf	_Activity_Timer+3,c
 14932  0003F2                     i17Li2l343:
 14933                           	opt stack 13
 14934                           
 14935                           ; BSR set to: 0
 14936                           ;INTERRUPTS.c: 85: if(RF_DataPlace < 64)
 14937  0003F2  0E40               	movlw	64
 14938  0003F4  61C9               	cpfslt	_RF_DataPlace& (0+255),b
 14939  0003F6  D020               	goto	i2l6603
 14940                           
 14941                           ; BSR set to: 0
 14942                           ;INTERRUPTS.c: 86: {
 14943                           ;INTERRUPTS.c: 87: RF_DataTiming[RF_DataPlace] = RFtemp;
 14944  0003F8  51C9               	movf	_RF_DataPlace& (0+255),w,b
 14945  0003FA  0D02               	mullw	2
 14946  0003FC  0E07               	movlw	low _RF_DataTiming
 14947  0003FE  24F3               	addwf	prodl,w,c
 14948  000400  6ED9               	movwf	fsr2l,c
 14949  000402  0E01               	movlw	high _RF_DataTiming
 14950  000404  20F4               	addwfc	prodh,w,c
 14951  000406  6EDA               	movwf	fsr2h,c
 14952  000408  C0B3  FFDE         	movff	high_isr@RFtemp,postinc2
 14953  00040C  C0B4  FFDD         	movff	high_isr@RFtemp+1,postdec2
 14954                           
 14955                           ; BSR set to: 0
 14956                           ;INTERRUPTS.c: 88: RF_DataPlace++;
 14957  000410  2BC9               	incf	_RF_DataPlace& (0+255),f,b
 14958                           
 14959                           ; BSR set to: 0
 14960                           ;INTERRUPTS.c: 89: if(RF_DataPlace >= RF_CodeSize)
 14961  000412  51C8               	movf	_RF_CodeSize& (0+255),w,b
 14962  000414  5DC9               	subwf	_RF_DataPlace& (0+255),w,b
 14963  000416  E310               	bnc	i2l6603
 14964                           
 14965                           ; BSR set to: 0
 14966                           ;INTERRUPTS.c: 90: {
 14967                           ;INTERRUPTS.c: 91: if(!RF_Data)
 14968  000418  0101               	movlb	1	; () banked
 14969  00041A  5105               	movf	_RF_Data& (0+255),w,b	;volatile
 14970  00041C  E108               	bnz	i2l211
 14971                           
 14972                           ; BSR set to: 1
 14973                           ;INTERRUPTS.c: 92: {
 14974                           ;INTERRUPTS.c: 93: RF_Data = RF_CheckCode();
 14975  00041E  EC08  F01E         	call	_RF_CheckCode	;wreg free
 14976  000422  0101               	movlb	1	; () banked
 14977  000424  6F05               	movwf	_RF_Data& (0+255),b	;volatile
 14978                           
 14979                           ; BSR set to: 1
 14980                           ;INTERRUPTS.c: 94: if(RF_Data)
 14981  000426  5105               	movf	_RF_Data& (0+255),w,b	;volatile
 14982  000428  E002               	bz	i2l211
 14983                           
 14984                           ; BSR set to: 1
 14985                           ;INTERRUPTS.c: 95: {
 14986                           ;INTERRUPTS.c: 96: RF_Disable();
 14987  00042A  EC17  F00D         	call	i2_RF_Disable	;wreg free
 14988  00042E                     i2l211:
 14989                           
 14990                           ;INTERRUPTS.c: 97: }
 14991                           ;INTERRUPTS.c: 98: }
 14992                           ;INTERRUPTS.c: 99: TMR_Timer0(0);
 14993  00042E  0E00               	movlw	0
 14994  000430  EC91  F00D         	call	i2_TMR_Timer0
 14995                           
 14996                           ; BSR set to: 0
 14997                           ;INTERRUPTS.c: 100: RF_ResetData();
 14998  000434  ECDC  F00D         	call	i2_RF_ResetData	;wreg free
 14999  000438                     i2l6603:
 15000                           
 15001                           ; BSR set to: 0
 15002                           ;INTERRUPTS.c: 101: }
 15003                           ;INTERRUPTS.c: 102: }
 15004                           ;INTERRUPTS.c: 103: }
 15005                           ;INTERRUPTS.c: 104: }
 15006                           ;INTERRUPTS.c: 105: INTCON3bits.INT1IF = 0;
 15007  000438  90F0               	bcf	intcon3,0,c	;volatile
 15008                           
 15009                           ; BSR set to: 0
 15010                           ;INTERRUPTS.c: 106: INTCON3bits.INT2IF = 0;
 15011  00043A  92F0               	bcf	intcon3,1,c	;volatile
 15012                           
 15013                           ;INTERRUPTS.c: 107: }
 15014  00043C  D00D               	goto	i2l216
 15015  00043E                     i2l196:
 15016                           
 15017                           ;INTERRUPTS.c: 108: else if(INTCONbits.TMR0IF && INTCONbits.TMR0IE)
 15018  00043E  B4F2               	btfsc	intcon,2,c	;volatile
 15019  000440  AAF2               	btfss	intcon,5,c	;volatile
 15020  000442  D009               	goto	i2l214
 15021                           
 15022                           ;INTERRUPTS.c: 109: {
 15023                           ;INTERRUPTS.c: 111: TMR_Timer0(0);
 15024  000444  0E00               	movlw	0
 15025  000446  EC91  F00D         	call	i2_TMR_Timer0
 15026                           
 15027                           ;INTERRUPTS.c: 112: TMR_ResetTimer0();
 15028  00044A  EC68  F00C         	call	i2_TMR_ResetTimer0	;wreg free
 15029                           
 15030                           ; BSR set to: 0
 15031                           ;INTERRUPTS.c: 113: RF_ResetData();
 15032  00044E  ECDC  F00D         	call	i2_RF_ResetData	;wreg free
 15033                           
 15034                           ; BSR set to: 0
 15035                           ;INTERRUPTS.c: 114: INTCONbits.TMR0IF = 0;
 15036  000452  94F2               	bcf	intcon,2,c	;volatile
 15037                           
 15038                           ;INTERRUPTS.c: 115: }
 15039  000454  D001               	goto	i2l216
 15040  000456                     i2l214:
 15041                           
 15042                           ;INTERRUPTS.c: 116: else
 15043                           ;INTERRUPTS.c: 117: {
 15044                           ;INTERRUPTS.c: 119: __nop();
 15045  000456  F000               	nop	
 15046  000458                     i2l216:
 15047  000458  C0B2  FFF5         	movff	??_high_isr+7,tablat
 15048  00045C  C0B1  FFF8         	movff	??_high_isr+6,tblptru
 15049  000460  C0B0  FFF7         	movff	??_high_isr+5,tblptrh
 15050  000464  C0AF  FFF6         	movff	??_high_isr+4,tblptrl
 15051  000468  C0AE  FFF4         	movff	??_high_isr+3,prodh
 15052  00046C  C0AD  FFF3         	movff	??_high_isr+2,prodl
 15053  000470  C0AC  FFDA         	movff	??_high_isr+1,fsr2h
 15054  000474  C0AB  FFD9         	movff	??_high_isr,fsr2l
 15055  000478  926E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 15056  00047A  0011               	retfie		f
 15057  00047C                     __end_of_high_isr:
 15058                           	opt stack 0
 15059                           tblptru	equ	0xFF8
 15060                           tblptrh	equ	0xFF7
 15061                           tblptrl	equ	0xFF6
 15062                           tablat	equ	0xFF5
 15063                           prodh	equ	0xFF4
 15064                           prodl	equ	0xFF3
 15065                           intcon	equ	0xFF2
 15066                           intcon2	equ	0xFF1
 15067                           intcon3	equ	0xFF0
 15068                           postinc0	equ	0xFEE
 15069                           wreg	equ	0xFE8
 15070                           postdec1	equ	0xFE5
 15071                           fsr1l	equ	0xFE1
 15072                           bsr	equ	0xFE0
 15073                           indf2	equ	0xFDF
 15074                           postinc2	equ	0xFDE
 15075                           postdec2	equ	0xFDD
 15076                           plusw2	equ	0xFDB
 15077                           fsr2h	equ	0xFDA
 15078                           fsr2l	equ	0xFD9
 15079                           status	equ	0xFD8
 15080                           
 15081 ;; *************** function i2_SYS_ActivityTimerReset *****************
 15082 ;; Defined at:
 15083 ;;		line 60 in file "SYSTEM.c"
 15084 ;; Parameters:    Size  Location     Type
 15085 ;;		None
 15086 ;; Auto vars:     Size  Location     Type
 15087 ;;		None
 15088 ;; Return value:  Size  Location     Type
 15089 ;;		None               void
 15090 ;; Registers used:
 15091 ;;		None
 15092 ;; Tracked objects:
 15093 ;;		On entry : F/0
 15094 ;;		On exit  : F/0
 15095 ;;		Unchanged: F/0
 15096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15097 ;;      Params:         0       0       0       0       0
 15098 ;;      Locals:         0       0       0       0       0
 15099 ;;      Temps:          0       0       0       0       0
 15100 ;;      Totals:         0       0       0       0       0
 15101 ;;Total ram usage:        0 bytes
 15102 ;; Hardware stack levels used:    1
 15103 ;; This function calls:
 15104 ;;		Nothing
 15105 ;; This function is called by:
 15106 ;;		_high_isr
 15107 ;; This function uses a non-reentrant model
 15108 ;;
 15109                           
 15110                           	psect	text97
 15111  000000                     __ptext97:
 15112                           	opt stack 0
 15113  000000                     __end_ofi2_SYS_ActivityTimerReset:
 15114                           	opt stack 0
 15115                           tblptru	equ	0xFF8
 15116                           tblptrh	equ	0xFF7
 15117                           tblptrl	equ	0xFF6
 15118                           tablat	equ	0xFF5
 15119                           prodh	equ	0xFF4
 15120                           prodl	equ	0xFF3
 15121                           intcon	equ	0xFF2
 15122                           intcon2	equ	0xFF1
 15123                           intcon3	equ	0xFF0
 15124                           postinc0	equ	0xFEE
 15125                           wreg	equ	0xFE8
 15126                           postdec1	equ	0xFE5
 15127                           fsr1l	equ	0xFE1
 15128                           bsr	equ	0xFE0
 15129                           indf2	equ	0xFDF
 15130                           postinc2	equ	0xFDE
 15131                           postdec2	equ	0xFDD
 15132                           plusw2	equ	0xFDB
 15133                           fsr2h	equ	0xFDA
 15134                           fsr2l	equ	0xFD9
 15135                           status	equ	0xFD8
 15136                           
 15137 ;; *************** function i2_RF_Disable *****************
 15138 ;; Defined at:
 15139 ;;		line 90 in file "RF.c"
 15140 ;; Parameters:    Size  Location     Type
 15141 ;;		None
 15142 ;; Auto vars:     Size  Location     Type
 15143 ;;		None
 15144 ;; Return value:  Size  Location     Type
 15145 ;;		None               void
 15146 ;; Registers used:
 15147 ;;		wreg, status,2, cstack
 15148 ;; Tracked objects:
 15149 ;;		On entry : F/1
 15150 ;;		On exit  : F/0
 15151 ;;		Unchanged: 0/0
 15152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15153 ;;      Params:         0       0       0       0       0
 15154 ;;      Locals:         0       0       0       0       0
 15155 ;;      Temps:          0       0       0       0       0
 15156 ;;      Totals:         0       0       0       0       0
 15157 ;;Total ram usage:        0 bytes
 15158 ;; Hardware stack levels used:    1
 15159 ;; Hardware stack levels required when called:    1
 15160 ;; This function calls:
 15161 ;;		i2_RF_DataInt
 15162 ;;		i2_TMR_Timer0
 15163 ;;		i2_TMR_Timer0Int
 15164 ;; This function is called by:
 15165 ;;		_high_isr
 15166 ;; This function uses a non-reentrant model
 15167 ;;
 15168                           
 15169                           	psect	text98
 15170  001A2E                     __ptext98:
 15171                           	opt stack 0
 15172  001A2E                     i2_RF_Disable:
 15173                           	opt stack 16
 15174                           
 15175                           ; BSR set to: 1
 15176                           ;RF.c: 92: RF_DataInt(0);
 15177                           
 15178                           ; BSR set to: 0
 15179                           ;incstack = 0
 15180  001A2E  0E00               	movlw	0
 15181  001A30  ECE9  F00C         	call	i2_RF_DataInt
 15182                           
 15183                           ;RF.c: 93: TMR_Timer0Int(0);
 15184  001A34  0E00               	movlw	0
 15185  001A36  EC99  F00D         	call	i2_TMR_Timer0Int
 15186                           
 15187                           ;RF.c: 94: TMR_Timer0(0);
 15188  001A3A  0E00               	movlw	0
 15189  001A3C  EF91  F00D         	goto	i2_TMR_Timer0
 15190  001A40                     __end_ofi2_RF_Disable:
 15191                           	opt stack 0
 15192                           tblptru	equ	0xFF8
 15193                           tblptrh	equ	0xFF7
 15194                           tblptrl	equ	0xFF6
 15195                           tablat	equ	0xFF5
 15196                           prodh	equ	0xFF4
 15197                           prodl	equ	0xFF3
 15198                           intcon	equ	0xFF2
 15199                           intcon2	equ	0xFF1
 15200                           intcon3	equ	0xFF0
 15201                           postinc0	equ	0xFEE
 15202                           wreg	equ	0xFE8
 15203                           postdec1	equ	0xFE5
 15204                           fsr1l	equ	0xFE1
 15205                           bsr	equ	0xFE0
 15206                           indf2	equ	0xFDF
 15207                           postinc2	equ	0xFDE
 15208                           postdec2	equ	0xFDD
 15209                           plusw2	equ	0xFDB
 15210                           fsr2h	equ	0xFDA
 15211                           fsr2l	equ	0xFD9
 15212                           status	equ	0xFD8
 15213                           
 15214 ;; *************** function _TMR_Timer0Status *****************
 15215 ;; Defined at:
 15216 ;;		line 180 in file "TIMERS.c"
 15217 ;; Parameters:    Size  Location     Type
 15218 ;;		None
 15219 ;; Auto vars:     Size  Location     Type
 15220 ;;		None
 15221 ;; Return value:  Size  Location     Type
 15222 ;;                  1    wreg      unsigned char 
 15223 ;; Registers used:
 15224 ;;		wreg
 15225 ;; Tracked objects:
 15226 ;;		On entry : 0/0
 15227 ;;		On exit  : 0/0
 15228 ;;		Unchanged: 0/0
 15229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15230 ;;      Params:         0       0       0       0       0
 15231 ;;      Locals:         0       0       0       0       0
 15232 ;;      Temps:          0       0       0       0       0
 15233 ;;      Totals:         0       0       0       0       0
 15234 ;;Total ram usage:        0 bytes
 15235 ;; Hardware stack levels used:    1
 15236 ;; This function calls:
 15237 ;;		Nothing
 15238 ;; This function is called by:
 15239 ;;		_high_isr
 15240 ;; This function uses a non-reentrant model
 15241 ;;
 15242                           
 15243                           	psect	text99
 15244  001BD4                     __ptext99:
 15245                           	opt stack 0
 15246  001BD4                     _TMR_Timer0Status:
 15247                           	opt stack 17
 15248                           
 15249                           ;TIMERS.c: 182: if(T0CONbits.TMR0ON)
 15250                           
 15251                           ; BSR set to: 0
 15252                           ;incstack = 0
 15253  001BD4  BED5               	btfsc	4053,7,c	;volatile
 15254                           
 15255                           ;TIMERS.c: 183: {
 15256                           ;TIMERS.c: 185: return 1;
 15257  001BD6  0C01               	retlw	1
 15258                           
 15259                           ;TIMERS.c: 186: }
 15260                           ;TIMERS.c: 187: return 0;
 15261  001BD8  0C00               	retlw	0	;funcret
 15262  001BDA                     __end_of_TMR_Timer0Status:
 15263                           	opt stack 0
 15264                           tblptru	equ	0xFF8
 15265                           tblptrh	equ	0xFF7
 15266                           tblptrl	equ	0xFF6
 15267                           tablat	equ	0xFF5
 15268                           prodh	equ	0xFF4
 15269                           prodl	equ	0xFF3
 15270                           intcon	equ	0xFF2
 15271                           intcon2	equ	0xFF1
 15272                           intcon3	equ	0xFF0
 15273                           postinc0	equ	0xFEE
 15274                           wreg	equ	0xFE8
 15275                           postdec1	equ	0xFE5
 15276                           fsr1l	equ	0xFE1
 15277                           bsr	equ	0xFE0
 15278                           indf2	equ	0xFDF
 15279                           postinc2	equ	0xFDE
 15280                           postdec2	equ	0xFDD
 15281                           plusw2	equ	0xFDB
 15282                           fsr2h	equ	0xFDA
 15283                           fsr2l	equ	0xFD9
 15284                           status	equ	0xFD8
 15285                           
 15286 ;; *************** function _TMR_Timer0Start *****************
 15287 ;; Defined at:
 15288 ;;		line 118 in file "TIMERS.c"
 15289 ;; Parameters:    Size  Location     Type
 15290 ;;		None
 15291 ;; Auto vars:     Size  Location     Type
 15292 ;;		None
 15293 ;; Return value:  Size  Location     Type
 15294 ;;		None               void
 15295 ;; Registers used:
 15296 ;;		wreg, status,2, cstack
 15297 ;; Tracked objects:
 15298 ;;		On entry : 0/0
 15299 ;;		On exit  : F/0
 15300 ;;		Unchanged: 0/0
 15301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15302 ;;      Params:         0       0       0       0       0
 15303 ;;      Locals:         0       0       0       0       0
 15304 ;;      Temps:          0       0       0       0       0
 15305 ;;      Totals:         0       0       0       0       0
 15306 ;;Total ram usage:        0 bytes
 15307 ;; Hardware stack levels used:    1
 15308 ;; Hardware stack levels required when called:    2
 15309 ;; This function calls:
 15310 ;;		i2_TMR_ResetTimer0
 15311 ;;		i2_TMR_Timer0
 15312 ;; This function is called by:
 15313 ;;		_high_isr
 15314 ;; This function uses a non-reentrant model
 15315 ;;
 15316                           
 15317                           	psect	text100
 15318  001B12                     __ptext100:
 15319                           	opt stack 0
 15320  001B12                     _TMR_Timer0Start:
 15321                           	opt stack 15
 15322                           
 15323                           ;TIMERS.c: 120: TMR_Timer0(0);
 15324                           
 15325                           ;incstack = 0
 15326  001B12  0E00               	movlw	0
 15327  001B14  EC91  F00D         	call	i2_TMR_Timer0
 15328                           
 15329                           ;TIMERS.c: 121: TMR_ResetTimer0();
 15330  001B18  EC68  F00C         	call	i2_TMR_ResetTimer0	;wreg free
 15331                           
 15332                           ;TIMERS.c: 122: TMR_Timer0(1);
 15333  001B1C  0E01               	movlw	1
 15334  001B1E  EF91  F00D         	goto	i2_TMR_Timer0
 15335  001B22                     __end_of_TMR_Timer0Start:
 15336                           	opt stack 0
 15337                           tblptru	equ	0xFF8
 15338                           tblptrh	equ	0xFF7
 15339                           tblptrl	equ	0xFF6
 15340                           tablat	equ	0xFF5
 15341                           prodh	equ	0xFF4
 15342                           prodl	equ	0xFF3
 15343                           intcon	equ	0xFF2
 15344                           intcon2	equ	0xFF1
 15345                           intcon3	equ	0xFF0
 15346                           postinc0	equ	0xFEE
 15347                           wreg	equ	0xFE8
 15348                           postdec1	equ	0xFE5
 15349                           fsr1l	equ	0xFE1
 15350                           bsr	equ	0xFE0
 15351                           indf2	equ	0xFDF
 15352                           postinc2	equ	0xFDE
 15353                           postdec2	equ	0xFDD
 15354                           plusw2	equ	0xFDB
 15355                           fsr2h	equ	0xFDA
 15356                           fsr2l	equ	0xFD9
 15357                           status	equ	0xFD8
 15358                           
 15359 ;; *************** function i2_TMR_ResetTimer0 *****************
 15360 ;; Defined at:
 15361 ;;		line 268 in file "TIMERS.c"
 15362 ;; Parameters:    Size  Location     Type
 15363 ;;		None
 15364 ;; Auto vars:     Size  Location     Type
 15365 ;;  TMR_ResetTim    1    1[BANK0 ] unsigned char 
 15366 ;; Return value:  Size  Location     Type
 15367 ;;		None               void
 15368 ;; Registers used:
 15369 ;;		wreg, status,2, cstack
 15370 ;; Tracked objects:
 15371 ;;		On entry : F/0
 15372 ;;		On exit  : F/0
 15373 ;;		Unchanged: 0/0
 15374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15375 ;;      Params:         0       0       0       0       0
 15376 ;;      Locals:         0       1       0       0       0
 15377 ;;      Temps:          0       0       0       0       0
 15378 ;;      Totals:         0       1       0       0       0
 15379 ;;Total ram usage:        1 bytes
 15380 ;; Hardware stack levels used:    1
 15381 ;; Hardware stack levels required when called:    1
 15382 ;; This function calls:
 15383 ;;		i2_TMR_Timer0
 15384 ;; This function is called by:
 15385 ;;		_high_isr
 15386 ;;		_TMR_Timer0Start
 15387 ;; This function uses a non-reentrant model
 15388 ;;
 15389                           
 15390                           	psect	text101
 15391  0018D0                     __ptext101:
 15392                           	opt stack 0
 15393  0018D0                     i2_TMR_ResetTimer0:
 15394                           	opt stack 16
 15395                           
 15396                           ; BSR set to: 0
 15397                           ;TIMERS.c: 270: unsigned char TimerOn = T0CONbits.TMR0ON;
 15398                           
 15399                           ; BSR set to: 0
 15400                           ;incstack = 0
 15401  0018D0  0E00               	movlw	0
 15402  0018D2  BED5               	btfsc	4053,7,c	;volatile
 15403  0018D4  0E01               	movlw	1
 15404  0018D6  6F81               	movwf	i2TMR_ResetTimer0@TimerOn& (0+255),b
 15405                           
 15406                           ; BSR set to: 0
 15407                           ;TIMERS.c: 272: TMR_Timer0(0);
 15408  0018D8  0E00               	movlw	0
 15409  0018DA  EC91  F00D         	call	i2_TMR_Timer0
 15410                           
 15411                           ; BSR set to: 0
 15412                           ;TIMERS.c: 273: TMR0H = 0;
 15413  0018DE  6AD7               	clrf	4055,c	;volatile
 15414                           
 15415                           ; BSR set to: 0
 15416                           ;TIMERS.c: 274: TMR0L = 2;
 15417  0018E0  0E02               	movlw	2
 15418  0018E2  6ED6               	movwf	4054,c	;volatile
 15419                           
 15420                           ; BSR set to: 0
 15421                           ;TIMERS.c: 275: if(TimerOn)
 15422  0018E4  5181               	movf	i2TMR_ResetTimer0@TimerOn& (0+255),w,b
 15423  0018E6  B4D8               	btfsc	status,2,c
 15424  0018E8  0012               	return	
 15425                           
 15426                           ; BSR set to: 0
 15427                           ;TIMERS.c: 276: {
 15428                           ;TIMERS.c: 277: TMR_Timer0(1);
 15429  0018EA  0E01               	movlw	1
 15430  0018EC  EF91  F00D         	goto	i2_TMR_Timer0
 15431  0018F0                     __end_ofi2_TMR_ResetTimer0:
 15432                           	opt stack 0
 15433                           tblptru	equ	0xFF8
 15434                           tblptrh	equ	0xFF7
 15435                           tblptrl	equ	0xFF6
 15436                           tablat	equ	0xFF5
 15437                           prodh	equ	0xFF4
 15438                           prodl	equ	0xFF3
 15439                           intcon	equ	0xFF2
 15440                           intcon2	equ	0xFF1
 15441                           intcon3	equ	0xFF0
 15442                           postinc0	equ	0xFEE
 15443                           wreg	equ	0xFE8
 15444                           postdec1	equ	0xFE5
 15445                           fsr1l	equ	0xFE1
 15446                           bsr	equ	0xFE0
 15447                           indf2	equ	0xFDF
 15448                           postinc2	equ	0xFDE
 15449                           postdec2	equ	0xFDD
 15450                           plusw2	equ	0xFDB
 15451                           fsr2h	equ	0xFDA
 15452                           fsr2l	equ	0xFD9
 15453                           status	equ	0xFD8
 15454                           
 15455 ;; *************** function i2_TMR_Timer0 *****************
 15456 ;; Defined at:
 15457 ;;		line 211 in file "TIMERS.c"
 15458 ;; Parameters:    Size  Location     Type
 15459 ;;  state           1    wreg     unsigned char 
 15460 ;; Auto vars:     Size  Location     Type
 15461 ;;  state           1    0[BANK0 ] unsigned char 
 15462 ;; Return value:  Size  Location     Type
 15463 ;;		None               void
 15464 ;; Registers used:
 15465 ;;		wreg, status,2
 15466 ;; Tracked objects:
 15467 ;;		On entry : 0/1
 15468 ;;		On exit  : F/0
 15469 ;;		Unchanged: 0/0
 15470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15471 ;;      Params:         0       0       0       0       0
 15472 ;;      Locals:         0       1       0       0       0
 15473 ;;      Temps:          0       0       0       0       0
 15474 ;;      Totals:         0       1       0       0       0
 15475 ;;Total ram usage:        1 bytes
 15476 ;; Hardware stack levels used:    1
 15477 ;; This function calls:
 15478 ;;		Nothing
 15479 ;; This function is called by:
 15480 ;;		_high_isr
 15481 ;;		_TMR_Timer0Start
 15482 ;;		i2_RF_Disable
 15483 ;;		i2_TMR_ResetTimer0
 15484 ;; This function uses a non-reentrant model
 15485 ;;
 15486                           
 15487                           	psect	text102
 15488  001B22                     __ptext102:
 15489                           	opt stack 0
 15490  001B22                     i2_TMR_Timer0:
 15491                           	opt stack 17
 15492                           
 15493                           ; BSR set to: 0
 15494                           ;incstack = 0
 15495                           ;i2TMR_Timer0@state stored from wreg
 15496  001B22  0100               	movlb	0	; () banked
 15497  001B24  6F80               	movwf	i2TMR_Timer0@state& (0+255),b
 15498                           
 15499                           ;TIMERS.c: 213: if(state)
 15500  001B26  5180               	movf	i2TMR_Timer0@state& (0+255),w,b
 15501  001B28  E002               	bz	i2l847
 15502                           
 15503                           ; BSR set to: 0
 15504                           ;TIMERS.c: 214: {
 15505                           ;TIMERS.c: 216: T0CONbits.TMR0ON = 1;
 15506  001B2A  8ED5               	bsf	4053,7,c	;volatile
 15507                           
 15508                           ;TIMERS.c: 217: }
 15509  001B2C  0012               	return	
 15510  001B2E                     i2l847:
 15511                           
 15512                           ; BSR set to: 0
 15513                           ;TIMERS.c: 218: else
 15514                           ;TIMERS.c: 219: {
 15515                           ;TIMERS.c: 221: T0CONbits.TMR0ON = 0;
 15516  001B2E  9ED5               	bcf	4053,7,c	;volatile
 15517                           
 15518                           ; BSR set to: 0
 15519  001B30  0012               	return		;funcret
 15520  001B32                     __end_ofi2_TMR_Timer0:
 15521                           	opt stack 0
 15522                           tblptru	equ	0xFF8
 15523                           tblptrh	equ	0xFF7
 15524                           tblptrl	equ	0xFF6
 15525                           tablat	equ	0xFF5
 15526                           prodh	equ	0xFF4
 15527                           prodl	equ	0xFF3
 15528                           intcon	equ	0xFF2
 15529                           intcon2	equ	0xFF1
 15530                           intcon3	equ	0xFF0
 15531                           postinc0	equ	0xFEE
 15532                           wreg	equ	0xFE8
 15533                           postdec1	equ	0xFE5
 15534                           fsr1l	equ	0xFE1
 15535                           bsr	equ	0xFE0
 15536                           indf2	equ	0xFDF
 15537                           postinc2	equ	0xFDE
 15538                           postdec2	equ	0xFDD
 15539                           plusw2	equ	0xFDB
 15540                           fsr2h	equ	0xFDA
 15541                           fsr2l	equ	0xFD9
 15542                           status	equ	0xFD8
 15543                           
 15544 ;; *************** function _RF_CheckCode *****************
 15545 ;; Defined at:
 15546 ;;		line 175 in file "RF.c"
 15547 ;; Parameters:    Size  Location     Type
 15548 ;;		None
 15549 ;; Auto vars:     Size  Location     Type
 15550 ;;  High            3   39[BANK0 ] unsigned char 
 15551 ;;  Low             3   36[BANK0 ] unsigned char 
 15552 ;;  i               1   42[BANK0 ] unsigned char 
 15553 ;; Return value:  Size  Location     Type
 15554 ;;                  1    wreg      unsigned char 
 15555 ;; Registers used:
 15556 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15557 ;; Tracked objects:
 15558 ;;		On entry : F/1
 15559 ;;		On exit  : E/0
 15560 ;;		Unchanged: 0/0
 15561 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15562 ;;      Params:         0       0       0       0       0
 15563 ;;      Locals:         0       7       0       0       0
 15564 ;;      Temps:          0       2       0       0       0
 15565 ;;      Totals:         0       9       0       0       0
 15566 ;;Total ram usage:        9 bytes
 15567 ;; Hardware stack levels used:    1
 15568 ;; Hardware stack levels required when called:    4
 15569 ;; This function calls:
 15570 ;;		i2_FSH_Write_IR_RF
 15571 ;;		i2_RF_LoadCode
 15572 ;;		i2___ftge
 15573 ;;		i2___ftmul
 15574 ;;		i2___lwtoft
 15575 ;; This function is called by:
 15576 ;;		_high_isr
 15577 ;; This function uses a non-reentrant model
 15578 ;;
 15579                           
 15580                           	psect	text103
 15581  003C10                     __ptext103:
 15582                           	opt stack 0
 15583  003C10                     _RF_CheckCode:
 15584                           	opt stack 13
 15585                           
 15586                           ; BSR set to: 1
 15587                           ;RF.c: 179: double High = 0.0;
 15588                           
 15589                           ; BSR set to: 0
 15590                           ;incstack = 0
 15591  003C10  0100               	movlb	0	; () banked
 15592  003C12  6BA7               	clrf	RF_CheckCode@High& (0+255),b
 15593  003C14  6BA8               	clrf	(RF_CheckCode@High+1)& (0+255),b
 15594  003C16  6BA9               	clrf	(RF_CheckCode@High+2)& (0+255),b
 15595                           
 15596                           ; BSR set to: 0
 15597                           ;RF.c: 181: if(System_State == 8)
 15598  003C18  0E08               	movlw	8
 15599  003C1A  0101               	movlb	1	; () banked
 15600  003C1C  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
 15601  003C1E  E001 D0DB          	bnz	i2l6183
 15602                           
 15603                           ; BSR set to: 1
 15604                           ;RF.c: 182: {
 15605                           ;RF.c: 183: for(i=0; i<RF_CodeSize;i++)
 15606  003C22  0100               	movlb	0	; () banked
 15607  003C24  6BAA               	clrf	RF_CheckCode@i& (0+255),b
 15608  003C26  D0D3               	goto	i2l6175
 15609  003C28                     i2l6159:
 15610                           
 15611                           ; BSR set to: 0
 15612                           ;RF.c: 184: {
 15613                           ;RF.c: 185: if(i == 0)
 15614  003C28  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15615  003C2A  E149               	bnz	i2l6163
 15616                           
 15617                           ; BSR set to: 0
 15618                           ;RF.c: 186: {
 15619                           ;RF.c: 187: Low = (double)RF_SavedTiming[i] * (1.0 - 0.02);
 15620  003C2C  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15621  003C2E  0D02               	mullw	2
 15622  003C30  0E80               	movlw	128
 15623  003C32  24F3               	addwf	prodl,w,c
 15624  003C34  6EF6               	movwf	tblptrl,c
 15625  003C36  0E25               	movlw	37
 15626  003C38  20F4               	addwfc	prodh,w,c
 15627  003C3A  6EF7               	movwf	tblptrh,c
 15628  003C3C  6AF8               	clrf	tblptru,c
 15629  003C3E  0E00               	movlw	0
 15630  003C40  22F8               	addwfc	tblptru,f,c
 15631  003C42  0009               	tblrd		*+
 15632  003C44  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15633  003C48  000A               	tblrd		*-
 15634  003C4A  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15635  003C4E  ECD3  F00B         	call	i2___lwtoft	;wreg free
 15636  003C52  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15637  003C56  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15638  003C5A  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15639  003C5E  0EE1               	movlw	225
 15640  003C60  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15641  003C62  0E7A               	movlw	122
 15642  003C64  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15643  003C66  0E3F               	movlw	63
 15644  003C68  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15645  003C6A  EC9A  F003         	call	i2___ftmul	;wreg free
 15646  003C6E  C08B  F0A4         	movff	?i2___ftmul,RF_CheckCode@Low
 15647  003C72  C08C  F0A5         	movff	?i2___ftmul+1,RF_CheckCode@Low+1
 15648  003C76  C08D  F0A6         	movff	?i2___ftmul+2,RF_CheckCode@Low+2
 15649                           
 15650                           ;RF.c: 188: High = (double)RF_SavedTiming[i] * (1.0 + 0.02);
 15651  003C7A  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15652  003C7C  0D02               	mullw	2
 15653  003C7E  0E80               	movlw	128
 15654  003C80  24F3               	addwf	prodl,w,c
 15655  003C82  6EF6               	movwf	tblptrl,c
 15656  003C84  0E25               	movlw	37
 15657  003C86  20F4               	addwfc	prodh,w,c
 15658  003C88  6EF7               	movwf	tblptrh,c
 15659  003C8A  6AF8               	clrf	tblptru,c
 15660  003C8C  0E00               	movlw	0
 15661  003C8E  22F8               	addwfc	tblptru,f,c
 15662  003C90  0009               	tblrd		*+
 15663  003C92  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15664  003C96  000A               	tblrd		*-
 15665  003C98  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15666  003C9C  ECD3  F00B         	call	i2___lwtoft	;wreg free
 15667  003CA0  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15668  003CA4  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15669  003CA8  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15670  003CAC  0E8F               	movlw	143
 15671  003CAE  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15672  003CB0  0E82               	movlw	130
 15673  003CB2  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15674  003CB4  0E3F               	movlw	63
 15675  003CB6  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15676  003CB8  EC9A  F003         	call	i2___ftmul	;wreg free
 15677  003CBC  D045               	goto	L7
 15678  003CBE                     i2l6163:
 15679                           
 15680                           ; BSR set to: 0
 15681                           ;RF.c: 190: else
 15682                           ;RF.c: 191: {
 15683                           ;RF.c: 192: Low = (double)RF_SavedTiming[i] * (1.0 - 0.5);
 15684  003CBE  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15685  003CC0  0D02               	mullw	2
 15686  003CC2  0E80               	movlw	128
 15687  003CC4  24F3               	addwf	prodl,w,c
 15688  003CC6  6EF6               	movwf	tblptrl,c
 15689  003CC8  0E25               	movlw	37
 15690  003CCA  20F4               	addwfc	prodh,w,c
 15691  003CCC  6EF7               	movwf	tblptrh,c
 15692  003CCE  6AF8               	clrf	tblptru,c
 15693  003CD0  0E00               	movlw	0
 15694  003CD2  22F8               	addwfc	tblptru,f,c
 15695  003CD4  0009               	tblrd		*+
 15696  003CD6  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15697  003CDA  000A               	tblrd		*-
 15698  003CDC  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15699  003CE0  ECD3  F00B         	call	i2___lwtoft	;wreg free
 15700  003CE4  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15701  003CE8  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15702  003CEC  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15703  003CF0  6B8E               	clrf	i2___ftmul@f2& (0+255),b
 15704  003CF2  6B8F               	clrf	(i2___ftmul@f2+1)& (0+255),b
 15705  003CF4  0E3F               	movlw	63
 15706  003CF6  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15707  003CF8  EC9A  F003         	call	i2___ftmul	;wreg free
 15708  003CFC  C08B  F0A4         	movff	?i2___ftmul,RF_CheckCode@Low
 15709  003D00  C08C  F0A5         	movff	?i2___ftmul+1,RF_CheckCode@Low+1
 15710  003D04  C08D  F0A6         	movff	?i2___ftmul+2,RF_CheckCode@Low+2
 15711                           
 15712                           ;RF.c: 193: High = (double)RF_SavedTiming[i] * (1.0 + 0.5);
 15713  003D08  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15714  003D0A  0D02               	mullw	2
 15715  003D0C  0E80               	movlw	128
 15716  003D0E  24F3               	addwf	prodl,w,c
 15717  003D10  6EF6               	movwf	tblptrl,c
 15718  003D12  0E25               	movlw	37
 15719  003D14  20F4               	addwfc	prodh,w,c
 15720  003D16  6EF7               	movwf	tblptrh,c
 15721  003D18  6AF8               	clrf	tblptru,c
 15722  003D1A  0E00               	movlw	0
 15723  003D1C  22F8               	addwfc	tblptru,f,c
 15724  003D1E  0009               	tblrd		*+
 15725  003D20  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15726  003D24  000A               	tblrd		*-
 15727  003D26  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15728  003D2A  ECD3  F00B         	call	i2___lwtoft	;wreg free
 15729  003D2E  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15730  003D32  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15731  003D36  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15732  003D3A  6B8E               	clrf	i2___ftmul@f2& (0+255),b
 15733  003D3C  0EC0               	movlw	192
 15734  003D3E  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15735  003D40  0E3F               	movlw	63
 15736  003D42  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15737  003D44  EC9A  F003         	call	i2___ftmul	;wreg free
 15738  003D48                     L7:
 15739  003D48  C08B  F0A7         	movff	?i2___ftmul,RF_CheckCode@High
 15740  003D4C  C08C  F0A8         	movff	?i2___ftmul+1,RF_CheckCode@High+1
 15741  003D50  C08D  F0A9         	movff	?i2___ftmul+2,RF_CheckCode@High+2
 15742                           
 15743                           ; BSR set to: 0
 15744                           ;RF.c: 194: }
 15745                           ;RF.c: 196: if((double)RF_DataTiming[i] < Low || (double)RF_DataTiming[i] > High )
 15746  003D54  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15747  003D56  0D02               	mullw	2
 15748  003D58  0E07               	movlw	low _RF_DataTiming
 15749  003D5A  24F3               	addwf	prodl,w,c
 15750  003D5C  6ED9               	movwf	fsr2l,c
 15751  003D5E  0E01               	movlw	high _RF_DataTiming
 15752  003D60  20F4               	addwfc	prodh,w,c
 15753  003D62  6EDA               	movwf	fsr2h,c
 15754  003D64  CFDE F088          	movff	postinc2,i2___lwtoft@c
 15755  003D68  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 15756  003D6C  ECD3  F00B         	call	i2___lwtoft	;wreg free
 15757  003D70  C088  F08B         	movff	?i2___lwtoft,i2___ftge@ff1
 15758  003D74  C089  F08C         	movff	?i2___lwtoft+1,i2___ftge@ff1+1
 15759  003D78  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftge@ff1+2
 15760  003D7C  C0A4  F08E         	movff	RF_CheckCode@Low,i2___ftge@ff2
 15761  003D80  C0A5  F08F         	movff	RF_CheckCode@Low+1,i2___ftge@ff2+1
 15762  003D84  C0A6  F090         	movff	RF_CheckCode@Low+2,i2___ftge@ff2+2
 15763  003D88  ECA1  F009         	call	i2___ftge	;wreg free
 15764  003D8C  A0D8               	btfss	status,0,c
 15765  003D8E  0C00               	retlw	0
 15766                           
 15767                           ; BSR set to: 0
 15768  003D90  C0A7  F08B         	movff	RF_CheckCode@High,i2___ftge@ff1
 15769  003D94  C0A8  F08C         	movff	RF_CheckCode@High+1,i2___ftge@ff1+1
 15770  003D98  C0A9  F08D         	movff	RF_CheckCode@High+2,i2___ftge@ff1+2
 15771  003D9C  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15772  003D9E  0D02               	mullw	2
 15773  003DA0  0E07               	movlw	low _RF_DataTiming
 15774  003DA2  24F3               	addwf	prodl,w,c
 15775  003DA4  6ED9               	movwf	fsr2l,c
 15776  003DA6  0E01               	movlw	high _RF_DataTiming
 15777  003DA8  20F4               	addwfc	prodh,w,c
 15778  003DAA  6EDA               	movwf	fsr2h,c
 15779  003DAC  CFDE F088          	movff	postinc2,i2___lwtoft@c
 15780  003DB0  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 15781  003DB4  ECD3  F00B         	call	i2___lwtoft	;wreg free
 15782  003DB8  C088  F08E         	movff	?i2___lwtoft,i2___ftge@ff2
 15783  003DBC  C089  F08F         	movff	?i2___lwtoft+1,i2___ftge@ff2+1
 15784  003DC0  C08A  F090         	movff	?i2___lwtoft+2,i2___ftge@ff2+2
 15785  003DC4  ECA1  F009         	call	i2___ftge	;wreg free
 15786  003DC8  E201               	bc	i2l6173
 15787                           
 15788                           ;RF.c: 197: {
 15789                           ;RF.c: 198: return 0;
 15790  003DCA  0C00               	retlw	0
 15791  003DCC                     i2l6173:
 15792                           
 15793                           ; BSR set to: 0
 15794  003DCC  2BAA               	incf	RF_CheckCode@i& (0+255),f,b
 15795  003DCE                     i2l6175:
 15796                           
 15797                           ; BSR set to: 0
 15798  003DCE  51C8               	movf	_RF_CodeSize& (0+255),w,b
 15799  003DD0  5DAA               	subwf	RF_CheckCode@i& (0+255),w,b
 15800  003DD2  E201 D729          	bnc	i2l6159
 15801                           
 15802                           ; BSR set to: 0
 15803                           ;RF.c: 199: }
 15804                           ;RF.c: 200: }
 15805                           ;RF.c: 201: return 1;
 15806  003DD6  0C01               	retlw	1
 15807  003DD8                     i2l6183:
 15808                           
 15809                           ; BSR set to: 1
 15810                           ;RF.c: 203: else
 15811                           ;RF.c: 204: {
 15812                           ;RF.c: 205: if(RF_DataPlace >= 20)
 15813  003DD8  0E13               	movlw	19
 15814  003DDA  0100               	movlb	0	; () banked
 15815  003DDC  65C9               	cpfsgt	_RF_DataPlace& (0+255),b
 15816  003DDE  0C00               	retlw	0
 15817                           
 15818                           ; BSR set to: 0
 15819                           ;RF.c: 206: {
 15820                           ;RF.c: 207: for(i=0;i<RF_DataPlace;i++)
 15821  003DE0  6BAA               	clrf	RF_CheckCode@i& (0+255),b
 15822  003DE2  D010               	goto	i2l6195
 15823  003DE4                     i2l6187:
 15824                           
 15825                           ; BSR set to: 0
 15826                           ;RF.c: 208: {
 15827                           ;RF.c: 209: if(RF_DataTiming[i] < 5)
 15828  003DE4  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15829  003DE6  0D02               	mullw	2
 15830  003DE8  0E07               	movlw	low _RF_DataTiming
 15831  003DEA  24F3               	addwf	prodl,w,c
 15832  003DEC  6ED9               	movwf	fsr2l,c
 15833  003DEE  0E01               	movlw	high _RF_DataTiming
 15834  003DF0  20F4               	addwfc	prodh,w,c
 15835  003DF2  6EDA               	movwf	fsr2h,c
 15836  003DF4  0E01               	movlw	1
 15837  003DF6  50DB               	movf	plusw2,w,c
 15838  003DF8  E104               	bnz	i2l6193
 15839  003DFA  0E05               	movlw	5
 15840  003DFC  5CDE               	subwf	postinc2,w,c
 15841  003DFE  E201               	bc	i2l6193
 15842  003E00  0C00               	retlw	0
 15843  003E02                     i2l6193:
 15844                           
 15845                           ; BSR set to: 0
 15846  003E02  2BAA               	incf	RF_CheckCode@i& (0+255),f,b
 15847  003E04                     i2l6195:
 15848                           
 15849                           ; BSR set to: 0
 15850  003E04  51C9               	movf	_RF_DataPlace& (0+255),w,b
 15851  003E06  5DAA               	subwf	RF_CheckCode@i& (0+255),w,b
 15852  003E08  E3ED               	bnc	i2l6187
 15853                           
 15854                           ; BSR set to: 0
 15855                           ;RF.c: 213: }
 15856                           ;RF.c: 214: }
 15857                           ;RF.c: 216: for(i=RF_DataPlace;i<64;i++)
 15858  003E0A  C0C9  F0AA         	movff	_RF_DataPlace,RF_CheckCode@i
 15859  003E0E                     i2l6197:
 15860                           
 15861                           ; BSR set to: 0
 15862  003E0E  0E3F               	movlw	63
 15863  003E10  65AA               	cpfsgt	RF_CheckCode@i& (0+255),b
 15864  003E12  D001               	goto	i2l6201
 15865  003E14  D00C               	goto	i2l6207
 15866  003E16                     i2l6201:
 15867                           
 15868                           ; BSR set to: 0
 15869                           ;RF.c: 217: {
 15870                           ;RF.c: 219: RF_DataTiming[i] = 0;
 15871  003E16  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15872  003E18  0D02               	mullw	2
 15873  003E1A  0E07               	movlw	low _RF_DataTiming
 15874  003E1C  24F3               	addwf	prodl,w,c
 15875  003E1E  6ED9               	movwf	fsr2l,c
 15876  003E20  0E01               	movlw	high _RF_DataTiming
 15877  003E22  20F4               	addwfc	prodh,w,c
 15878  003E24  6EDA               	movwf	fsr2h,c
 15879  003E26  6ADE               	clrf	postinc2,c
 15880  003E28  6ADD               	clrf	postdec2,c
 15881                           
 15882                           ; BSR set to: 0
 15883  003E2A  2BAA               	incf	RF_CheckCode@i& (0+255),f,b
 15884  003E2C  D7F0               	goto	i2l6197
 15885  003E2E                     i2l6207:
 15886                           
 15887                           ; BSR set to: 0
 15888                           ;RF.c: 220: }
 15889                           ;RF.c: 223: RF_Saved = 90;
 15890  003E2E  0E5A               	movlw	90
 15891  003E30  0101               	movlb	1	; () banked
 15892  003E32  6FAD               	movwf	_RF_Saved& (0+255),b
 15893                           
 15894                           ; BSR set to: 1
 15895                           ;RF.c: 224: Flash_Status = FSH_Write_IR_RF();
 15896  003E34  EC82  F017         	call	i2_FSH_Write_IR_RF	;wreg free
 15897  003E38  0101               	movlb	1	; () banked
 15898  003E3A  6F03               	movwf	_Flash_Status& (0+255),b
 15899                           
 15900                           ; BSR set to: 1
 15901                           ;RF.c: 225: if(Flash_Status)
 15902  003E3C  5103               	movf	_Flash_Status& (0+255),w,b
 15903  003E3E  E002               	bz	i2l6215
 15904                           
 15905                           ; BSR set to: 1
 15906                           ;RF.c: 226: {
 15907                           ;RF.c: 227: RF_LoadCode();
 15908  003E40  EC3E  F002         	call	i2_RF_LoadCode	;wreg free
 15909  003E44                     i2l6215:
 15910                           
 15911                           ;RF.c: 228: }
 15912                           ;RF.c: 229: System_State = 8;
 15913  003E44  0E08               	movlw	8
 15914  003E46  0101               	movlb	1	; () banked
 15915  003E48  6FAE               	movwf	_System_State& (0+255),b	;volatile
 15916  003E4A  0C00               	retlw	0
 15917  003E4C                     __end_of_RF_CheckCode:
 15918                           	opt stack 0
 15919                           tblptru	equ	0xFF8
 15920                           tblptrh	equ	0xFF7
 15921                           tblptrl	equ	0xFF6
 15922                           tablat	equ	0xFF5
 15923                           prodh	equ	0xFF4
 15924                           prodl	equ	0xFF3
 15925                           intcon	equ	0xFF2
 15926                           intcon2	equ	0xFF1
 15927                           intcon3	equ	0xFF0
 15928                           postinc0	equ	0xFEE
 15929                           wreg	equ	0xFE8
 15930                           postdec1	equ	0xFE5
 15931                           fsr1l	equ	0xFE1
 15932                           bsr	equ	0xFE0
 15933                           indf2	equ	0xFDF
 15934                           postinc2	equ	0xFDE
 15935                           postdec2	equ	0xFDD
 15936                           plusw2	equ	0xFDB
 15937                           fsr2h	equ	0xFDA
 15938                           fsr2l	equ	0xFD9
 15939                           status	equ	0xFD8
 15940                           
 15941 ;; *************** function i2_RF_LoadCode *****************
 15942 ;; Defined at:
 15943 ;;		line 127 in file "RF.c"
 15944 ;; Parameters:    Size  Location     Type
 15945 ;;		None
 15946 ;; Auto vars:     Size  Location     Type
 15947 ;;  RF_LoadCode     3   28[BANK0 ] unsigned char 
 15948 ;;  RF_LoadCode     3   25[BANK0 ] unsigned char 
 15949 ;; Return value:  Size  Location     Type
 15950 ;;		None               void
 15951 ;; Registers used:
 15952 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15953 ;; Tracked objects:
 15954 ;;		On entry : F/1
 15955 ;;		On exit  : F/0
 15956 ;;		Unchanged: 0/0
 15957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15958 ;;      Params:         0       0       0       0       0
 15959 ;;      Locals:         0       6       0       0       0
 15960 ;;      Temps:          0       0       0       0       0
 15961 ;;      Totals:         0       6       0       0       0
 15962 ;;Total ram usage:        6 bytes
 15963 ;; Hardware stack levels used:    1
 15964 ;; Hardware stack levels required when called:    2
 15965 ;; This function calls:
 15966 ;;		i2_RF_CalculateCodesize
 15967 ;;		i2___ftge
 15968 ;;		i2___ftmul
 15969 ;;		i2___fttol
 15970 ;;		i2___lwtoft
 15971 ;; This function is called by:
 15972 ;;		_RF_CheckCode
 15973 ;; This function uses a non-reentrant model
 15974 ;;
 15975                           
 15976                           	psect	text104
 15977  00047C                     __ptext104:
 15978                           	opt stack 0
 15979  00047C                     i2_RF_LoadCode:
 15980                           	opt stack 14
 15981                           
 15982                           ; BSR set to: 1
 15983                           ;RF.c: 130: double High = 0.0;
 15984                           
 15985                           ;incstack = 0
 15986  00047C  0100               	movlb	0	; () banked
 15987  00047E  6B9C               	clrf	i2RF_LoadCode@High& (0+255),b
 15988  000480  6B9D               	clrf	(i2RF_LoadCode@High+1)& (0+255),b
 15989  000482  6B9E               	clrf	(i2RF_LoadCode@High+2)& (0+255),b
 15990                           
 15991                           ; BSR set to: 0
 15992                           ;RF.c: 132: Low = (double)RF_SavedTiming[0] * (1.0 - 0.02);
 15993  000484  0E80               	movlw	128
 15994  000486  6EF6               	movwf	tblptrl,c
 15995  000488                     	if	1	;There is more than 1 active tblptr byte
 15996  000488  0E25               	movlw	37
 15997  00048A  6EF7               	movwf	tblptrh,c
 15998  00048C                     	endif
 15999  00048C                     	if	0	;There are less than 3 active tblptr bytes
 16000  00048C                     	endif
 16001  00048C  0009               	tblrd		*+
 16002  00048E  CFF5 F088          	movff	tablat,i2___lwtoft@c
 16003  000492  000A               	tblrd		*-
 16004  000494  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 16005  000498  ECD3  F00B         	call	i2___lwtoft	;wreg free
 16006  00049C  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 16007  0004A0  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 16008  0004A4  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 16009  0004A8  0EE1               	movlw	225
 16010  0004AA  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 16011  0004AC  0E7A               	movlw	122
 16012  0004AE  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 16013  0004B0  0E3F               	movlw	63
 16014  0004B2  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 16015  0004B4  EC9A  F003         	call	i2___ftmul	;wreg free
 16016  0004B8  C08B  F099         	movff	?i2___ftmul,i2RF_LoadCode@Low
 16017  0004BC  C08C  F09A         	movff	?i2___ftmul+1,i2RF_LoadCode@Low+1
 16018  0004C0  C08D  F09B         	movff	?i2___ftmul+2,i2RF_LoadCode@Low+2
 16019                           
 16020                           ;RF.c: 133: High = (double)RF_SavedTiming[0] * (1.0 + 0.02);
 16021  0004C4  0E80               	movlw	128
 16022  0004C6  6EF6               	movwf	tblptrl,c
 16023  0004C8                     	if	1	;There is more than 1 active tblptr byte
 16024  0004C8  0E25               	movlw	37
 16025  0004CA  6EF7               	movwf	tblptrh,c
 16026  0004CC                     	endif
 16027  0004CC                     	if	0	;There are less than 3 active tblptr bytes
 16028  0004CC                     	endif
 16029  0004CC  0009               	tblrd		*+
 16030  0004CE  CFF5 F088          	movff	tablat,i2___lwtoft@c
 16031  0004D2  000A               	tblrd		*-
 16032  0004D4  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 16033  0004D8  ECD3  F00B         	call	i2___lwtoft	;wreg free
 16034  0004DC  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 16035  0004E0  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 16036  0004E4  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 16037  0004E8  0E8F               	movlw	143
 16038  0004EA  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 16039  0004EC  0E82               	movlw	130
 16040  0004EE  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 16041  0004F0  0E3F               	movlw	63
 16042  0004F2  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 16043  0004F4  EC9A  F003         	call	i2___ftmul	;wreg free
 16044  0004F8  C08B  F09C         	movff	?i2___ftmul,i2RF_LoadCode@High
 16045  0004FC  C08C  F09D         	movff	?i2___ftmul+1,i2RF_LoadCode@High+1
 16046  000500  C08D  F09E         	movff	?i2___ftmul+2,i2RF_LoadCode@High+2
 16047                           
 16048                           ; BSR set to: 0
 16049                           ;RF.c: 135: if(Low < 300)
 16050  000504  C099  F08B         	movff	i2RF_LoadCode@Low,i2___ftge@ff1
 16051  000508  C09A  F08C         	movff	i2RF_LoadCode@Low+1,i2___ftge@ff1+1
 16052  00050C  C09B  F08D         	movff	i2RF_LoadCode@Low+2,i2___ftge@ff1+2
 16053  000510  6B8E               	clrf	i2___ftge@ff2& (0+255),b
 16054  000512  0E96               	movlw	150
 16055  000514  6F8F               	movwf	(i2___ftge@ff2+1)& (0+255),b
 16056  000516  0E43               	movlw	67
 16057  000518  6F90               	movwf	(i2___ftge@ff2+2)& (0+255),b
 16058  00051A  ECA1  F009         	call	i2___ftge	;wreg free
 16059  00051E  E205               	bc	i2l5637
 16060                           
 16061                           ; BSR set to: 0
 16062                           ;RF.c: 136: {
 16063                           ;RF.c: 137: Low = 300;
 16064  000520  6B99               	clrf	i2RF_LoadCode@Low& (0+255),b
 16065  000522  0E96               	movlw	150
 16066  000524  6F9A               	movwf	(i2RF_LoadCode@Low+1)& (0+255),b
 16067  000526  0E43               	movlw	67
 16068  000528  6F9B               	movwf	(i2RF_LoadCode@Low+2)& (0+255),b
 16069  00052A                     i2l5637:
 16070                           
 16071                           ; BSR set to: 0
 16072                           ;RF.c: 138: }
 16073                           ;RF.c: 139: if(High > 2000)
 16074  00052A  6B8B               	clrf	i2___ftge@ff1& (0+255),b
 16075  00052C  0EFA               	movlw	250
 16076  00052E  6F8C               	movwf	(i2___ftge@ff1+1)& (0+255),b
 16077  000530  0E44               	movlw	68
 16078  000532  6F8D               	movwf	(i2___ftge@ff1+2)& (0+255),b
 16079  000534  C09C  F08E         	movff	i2RF_LoadCode@High,i2___ftge@ff2
 16080  000538  C09D  F08F         	movff	i2RF_LoadCode@High+1,i2___ftge@ff2+1
 16081  00053C  C09E  F090         	movff	i2RF_LoadCode@High+2,i2___ftge@ff2+2
 16082  000540  ECA1  F009         	call	i2___ftge	;wreg free
 16083  000544  E205               	bc	i2l5641
 16084                           
 16085                           ; BSR set to: 0
 16086                           ;RF.c: 140: {
 16087                           ;RF.c: 141: High = 2000;
 16088  000546  6B9C               	clrf	i2RF_LoadCode@High& (0+255),b
 16089  000548  0EFA               	movlw	250
 16090  00054A  6F9D               	movwf	(i2RF_LoadCode@High+1)& (0+255),b
 16091  00054C  0E44               	movlw	68
 16092  00054E  6F9E               	movwf	(i2RF_LoadCode@High+2)& (0+255),b
 16093  000550                     i2l5641:
 16094                           
 16095                           ; BSR set to: 0
 16096                           ;RF.c: 142: }
 16097                           ;RF.c: 144: RF_SyncLow = (unsigned int) Low;
 16098  000550  C099  F080         	movff	i2RF_LoadCode@Low,i2___fttol@f1
 16099  000554  C09A  F081         	movff	i2RF_LoadCode@Low+1,i2___fttol@f1+1
 16100  000558  C09B  F082         	movff	i2RF_LoadCode@Low+2,i2___fttol@f1+2
 16101  00055C  ECCA  F004         	call	i2___fttol	;wreg free
 16102  000560  C080  F0C2         	movff	?i2___fttol,_RF_SyncLow
 16103  000564  C081  F0C3         	movff	?i2___fttol+1,_RF_SyncLow+1
 16104                           
 16105                           ; BSR set to: 0
 16106                           ;RF.c: 145: RF_SyncHigh = (unsigned int) High;
 16107  000568  C09C  F080         	movff	i2RF_LoadCode@High,i2___fttol@f1
 16108  00056C  C09D  F081         	movff	i2RF_LoadCode@High+1,i2___fttol@f1+1
 16109  000570  C09E  F082         	movff	i2RF_LoadCode@High+2,i2___fttol@f1+2
 16110  000574  ECCA  F004         	call	i2___fttol	;wreg free
 16111  000578  C080  F0C0         	movff	?i2___fttol,_RF_SyncHigh
 16112  00057C  C081  F0C1         	movff	?i2___fttol+1,_RF_SyncHigh+1
 16113                           
 16114                           ; BSR set to: 0
 16115                           ;RF.c: 147: RF_CodeSize = RF_CalculateCodesize();
 16116  000580  EC06  F00B         	call	i2_RF_CalculateCodesize	;wreg free
 16117  000584  6FC8               	movwf	_RF_CodeSize& (0+255),b
 16118                           
 16119                           ; BSR set to: 0
 16120  000586  0012               	return		;funcret
 16121  000588                     __end_ofi2_RF_LoadCode:
 16122                           	opt stack 0
 16123                           tblptru	equ	0xFF8
 16124                           tblptrh	equ	0xFF7
 16125                           tblptrl	equ	0xFF6
 16126                           tablat	equ	0xFF5
 16127                           prodh	equ	0xFF4
 16128                           prodl	equ	0xFF3
 16129                           intcon	equ	0xFF2
 16130                           intcon2	equ	0xFF1
 16131                           intcon3	equ	0xFF0
 16132                           postinc0	equ	0xFEE
 16133                           wreg	equ	0xFE8
 16134                           postdec1	equ	0xFE5
 16135                           fsr1l	equ	0xFE1
 16136                           bsr	equ	0xFE0
 16137                           indf2	equ	0xFDF
 16138                           postinc2	equ	0xFDE
 16139                           postdec2	equ	0xFDD
 16140                           plusw2	equ	0xFDB
 16141                           fsr2h	equ	0xFDA
 16142                           fsr2l	equ	0xFD9
 16143                           status	equ	0xFD8
 16144                           
 16145 ;; *************** function i2___lwtoft *****************
 16146 ;; Defined at:
 16147 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
 16148 ;; Parameters:    Size  Location     Type
 16149 ;;  c               2    8[BANK0 ] unsigned int 
 16150 ;; Auto vars:     Size  Location     Type
 16151 ;;		None
 16152 ;; Return value:  Size  Location     Type
 16153 ;;                  3    8[BANK0 ] float 
 16154 ;; Registers used:
 16155 ;;		wreg, status,2, status,0, cstack
 16156 ;; Tracked objects:
 16157 ;;		On entry : F/0
 16158 ;;		On exit  : F/0
 16159 ;;		Unchanged: 0/0
 16160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16161 ;;      Params:         0       3       0       0       0
 16162 ;;      Locals:         0       0       0       0       0
 16163 ;;      Temps:          0       0       0       0       0
 16164 ;;      Totals:         0       3       0       0       0
 16165 ;;Total ram usage:        3 bytes
 16166 ;; Hardware stack levels used:    1
 16167 ;; Hardware stack levels required when called:    1
 16168 ;; This function calls:
 16169 ;;		i2___ftpack
 16170 ;; This function is called by:
 16171 ;;		_RF_CheckCode
 16172 ;;		i2_RF_LoadCode
 16173 ;; This function uses a non-reentrant model
 16174 ;;
 16175                           
 16176                           	psect	text105
 16177  0017A6                     __ptext105:
 16178                           	opt stack 0
 16179  0017A6                     i2___lwtoft:
 16180                           	opt stack 15
 16181                           
 16182                           ; BSR set to: 0
 16183                           
 16184                           ; BSR set to: 0
 16185                           ;incstack = 0
 16186  0017A6  C088  F080         	movff	i2___lwtoft@c,i2___ftpack@arg
 16187  0017AA  C089  F081         	movff	i2___lwtoft@c+1,i2___ftpack@arg+1
 16188  0017AE  6B82               	clrf	(i2___ftpack@arg+2)& (0+255),b
 16189  0017B0  0E8E               	movlw	142
 16190  0017B2  6F83               	movwf	i2___ftpack@exp& (0+255),b
 16191  0017B4  0E00               	movlw	0
 16192  0017B6  6F84               	movwf	i2___ftpack@sign& (0+255),b
 16193  0017B8  ECF1  F007         	call	i2___ftpack	;wreg free
 16194  0017BC  C080  F088         	movff	?i2___ftpack,?i2___lwtoft
 16195  0017C0  C081  F089         	movff	?i2___ftpack+1,?i2___lwtoft+1
 16196  0017C4  C082  F08A         	movff	?i2___ftpack+2,?i2___lwtoft+2
 16197                           
 16198                           ; BSR set to: 0
 16199  0017C8  0012               	return		;funcret
 16200  0017CA                     __end_ofi2___lwtoft:
 16201                           	opt stack 0
 16202                           tblptru	equ	0xFF8
 16203                           tblptrh	equ	0xFF7
 16204                           tblptrl	equ	0xFF6
 16205                           tablat	equ	0xFF5
 16206                           prodh	equ	0xFF4
 16207                           prodl	equ	0xFF3
 16208                           intcon	equ	0xFF2
 16209                           intcon2	equ	0xFF1
 16210                           intcon3	equ	0xFF0
 16211                           postinc0	equ	0xFEE
 16212                           wreg	equ	0xFE8
 16213                           postdec1	equ	0xFE5
 16214                           fsr1l	equ	0xFE1
 16215                           bsr	equ	0xFE0
 16216                           indf2	equ	0xFDF
 16217                           postinc2	equ	0xFDE
 16218                           postdec2	equ	0xFDD
 16219                           plusw2	equ	0xFDB
 16220                           fsr2h	equ	0xFDA
 16221                           fsr2l	equ	0xFD9
 16222                           status	equ	0xFD8
 16223                           
 16224 ;; *************** function i2___fttol *****************
 16225 ;; Defined at:
 16226 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
 16227 ;; Parameters:    Size  Location     Type
 16228 ;;  f1              3    0[BANK0 ] float 
 16229 ;; Auto vars:     Size  Location     Type
 16230 ;;  __fttol         4   10[BANK0 ] unsigned long 
 16231 ;;  __fttol         1   14[BANK0 ] unsigned char 
 16232 ;;  __fttol         1    9[BANK0 ] unsigned char 
 16233 ;; Return value:  Size  Location     Type
 16234 ;;                  4    0[BANK0 ] long 
 16235 ;; Registers used:
 16236 ;;		wreg, status,2, status,0
 16237 ;; Tracked objects:
 16238 ;;		On entry : F/0
 16239 ;;		On exit  : F/0
 16240 ;;		Unchanged: 0/0
 16241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16242 ;;      Params:         0       4       0       0       0
 16243 ;;      Locals:         0       6       0       0       0
 16244 ;;      Temps:          0       5       0       0       0
 16245 ;;      Totals:         0      15       0       0       0
 16246 ;;Total ram usage:       15 bytes
 16247 ;; Hardware stack levels used:    1
 16248 ;; This function calls:
 16249 ;;		Nothing
 16250 ;; This function is called by:
 16251 ;;		i2_RF_LoadCode
 16252 ;; This function uses a non-reentrant model
 16253 ;;
 16254                           
 16255                           	psect	text106
 16256  000994                     __ptext106:
 16257                           	opt stack 0
 16258  000994                     i2___fttol:
 16259                           	opt stack 15
 16260                           
 16261                           ; BSR set to: 0
 16262                           
 16263                           ; BSR set to: 0
 16264                           ;incstack = 0
 16265  000994  C082  F084         	movff	i2___fttol@f1+2,??i2___fttol
 16266  000998  6B85               	clrf	(??i2___fttol+1)& (0+255),b
 16267  00099A  6B86               	clrf	(??i2___fttol+2)& (0+255),b
 16268  00099C  3581               	rlcf	(i2___fttol@f1+1)& (0+255),w,b
 16269  00099E  3784               	rlcf	??i2___fttol& (0+255),f,b
 16270  0009A0  E301               	bnc	u482_41
 16271  0009A2  8185               	bsf	(??i2___fttol+1)& (0+255),0,b
 16272  0009A4                     u482_41:
 16273  0009A4  5184               	movf	??i2___fttol& (0+255),w,b
 16274  0009A6  6F8E               	movwf	i2___fttol@exp1& (0+255),b
 16275  0009A8  518E               	movf	i2___fttol@exp1& (0+255),w,b
 16276  0009AA  E105               	bnz	i2l5051
 16277  0009AC                     i2l5049:
 16278                           
 16279                           ; BSR set to: 0
 16280  0009AC  6B80               	clrf	?i2___fttol& (0+255),b
 16281  0009AE  6B81               	clrf	(?i2___fttol+1)& (0+255),b
 16282  0009B0  6B82               	clrf	(?i2___fttol+2)& (0+255),b
 16283  0009B2  6B83               	clrf	(?i2___fttol+3)& (0+255),b
 16284  0009B4  0012               	return	
 16285  0009B6                     i2l5051:
 16286                           
 16287                           ; BSR set to: 0
 16288  0009B6  0E17               	movlw	23
 16289  0009B8  6F84               	movwf	??i2___fttol& (0+255),b
 16290  0009BA  C080  F085         	movff	i2___fttol@f1,??i2___fttol+1
 16291  0009BE  C081  F086         	movff	i2___fttol@f1+1,??i2___fttol+2
 16292  0009C2  C082  F087         	movff	i2___fttol@f1+2,??i2___fttol+3
 16293  0009C6  2984               	incf	??i2___fttol& (0+255),w,b
 16294  0009C8  6F88               	movwf	(??i2___fttol+4)& (0+255),b
 16295  0009CA  D004               	goto	i2u484_40
 16296  0009CC                     i2u484_45:
 16297  0009CC  90D8               	bcf	status,0,c
 16298  0009CE  3387               	rrcf	(??i2___fttol+3)& (0+255),f,b
 16299  0009D0  3386               	rrcf	(??i2___fttol+2)& (0+255),f,b
 16300  0009D2  3385               	rrcf	(??i2___fttol+1)& (0+255),f,b
 16301  0009D4                     i2u484_40:
 16302  0009D4  2F88               	decfsz	(??i2___fttol+4)& (0+255),f,b
 16303  0009D6  D7FA               	goto	i2u484_45
 16304  0009D8  0100               	movlb	0	; () banked
 16305  0009DA  5185               	movf	(??i2___fttol+1)& (0+255),w,b
 16306  0009DC  6F89               	movwf	i2___fttol@sign1& (0+255),b
 16307                           
 16308                           ; BSR set to: 0
 16309  0009DE  8F81               	bsf	(i2___fttol@f1+1)& (0+255),7,b
 16310                           
 16311                           ; BSR set to: 0
 16312  0009E0  6B82               	clrf	(i2___fttol@f1+2)& (0+255),b
 16313                           
 16314                           ; BSR set to: 0
 16315  0009E2  5180               	movf	i2___fttol@f1& (0+255),w,b
 16316  0009E4  6F8A               	movwf	i2___fttol@lval& (0+255),b
 16317  0009E6  5181               	movf	(i2___fttol@f1+1)& (0+255),w,b
 16318  0009E8  6F8B               	movwf	(i2___fttol@lval+1)& (0+255),b
 16319  0009EA  5182               	movf	(i2___fttol@f1+2)& (0+255),w,b
 16320  0009EC  6F8C               	movwf	(i2___fttol@lval+2)& (0+255),b
 16321  0009EE  6B8D               	clrf	(i2___fttol@lval+3)& (0+255),b
 16322                           
 16323                           ; BSR set to: 0
 16324  0009F0  0E8E               	movlw	142
 16325  0009F2  5F8E               	subwf	i2___fttol@exp1& (0+255),f,b
 16326                           
 16327                           ; BSR set to: 0
 16328  0009F4  AF8E               	btfss	i2___fttol@exp1& (0+255),7,b
 16329  0009F6  D00C               	goto	i2l5071
 16330                           
 16331                           ; BSR set to: 0
 16332  0009F8  518E               	movf	i2___fttol@exp1& (0+255),w,b
 16333  0009FA  0A80               	xorlw	128
 16334  0009FC  0F8F               	addlw	143
 16335  0009FE  E3D6               	bnc	i2l5049
 16336  000A00                     i2l5067:
 16337                           
 16338                           ; BSR set to: 0
 16339  000A00  90D8               	bcf	status,0,c
 16340  000A02  338D               	rrcf	(i2___fttol@lval+3)& (0+255),f,b
 16341  000A04  338C               	rrcf	(i2___fttol@lval+2)& (0+255),f,b
 16342  000A06  338B               	rrcf	(i2___fttol@lval+1)& (0+255),f,b
 16343  000A08  338A               	rrcf	i2___fttol@lval& (0+255),f,b
 16344                           
 16345                           ; BSR set to: 0
 16346  000A0A  3F8E               	incfsz	i2___fttol@exp1& (0+255),f,b
 16347  000A0C  D7F9               	goto	i2l5067
 16348  000A0E  D00C               	goto	i2l5079
 16349  000A10                     i2l5071:
 16350                           
 16351                           ; BSR set to: 0
 16352  000A10  0E17               	movlw	23
 16353  000A12  658E               	cpfsgt	i2___fttol@exp1& (0+255),b
 16354  000A14  D007               	goto	i2l5077
 16355  000A16  D7CA               	goto	i2l5049
 16356  000A18                     i2l5075:
 16357                           
 16358                           ; BSR set to: 0
 16359  000A18  90D8               	bcf	status,0,c
 16360  000A1A  378A               	rlcf	i2___fttol@lval& (0+255),f,b
 16361  000A1C  378B               	rlcf	(i2___fttol@lval+1)& (0+255),f,b
 16362  000A1E  378C               	rlcf	(i2___fttol@lval+2)& (0+255),f,b
 16363  000A20  378D               	rlcf	(i2___fttol@lval+3)& (0+255),f,b
 16364  000A22  078E               	decf	i2___fttol@exp1& (0+255),f,b
 16365  000A24                     i2l5077:
 16366                           
 16367                           ; BSR set to: 0
 16368  000A24  518E               	movf	i2___fttol@exp1& (0+255),w,b
 16369  000A26  E1F8               	bnz	i2l5075
 16370  000A28                     i2l5079:
 16371                           
 16372                           ; BSR set to: 0
 16373  000A28  5189               	movf	i2___fttol@sign1& (0+255),w,b
 16374  000A2A  E008               	bz	i2l5083
 16375                           
 16376                           ; BSR set to: 0
 16377  000A2C  1F8D               	comf	(i2___fttol@lval+3)& (0+255),f,b
 16378  000A2E  1F8C               	comf	(i2___fttol@lval+2)& (0+255),f,b
 16379  000A30  1F8B               	comf	(i2___fttol@lval+1)& (0+255),f,b
 16380  000A32  6D8A               	negf	i2___fttol@lval& (0+255),b
 16381  000A34  0E00               	movlw	0
 16382  000A36  238B               	addwfc	(i2___fttol@lval+1)& (0+255),f,b
 16383  000A38  238C               	addwfc	(i2___fttol@lval+2)& (0+255),f,b
 16384  000A3A  238D               	addwfc	(i2___fttol@lval+3)& (0+255),f,b
 16385  000A3C                     i2l5083:
 16386                           
 16387                           ; BSR set to: 0
 16388  000A3C  C08A  F080         	movff	i2___fttol@lval,?i2___fttol
 16389  000A40  C08B  F081         	movff	i2___fttol@lval+1,?i2___fttol+1
 16390  000A44  C08C  F082         	movff	i2___fttol@lval+2,?i2___fttol+2
 16391  000A48  C08D  F083         	movff	i2___fttol@lval+3,?i2___fttol+3
 16392                           
 16393                           ; BSR set to: 0
 16394  000A4C  0012               	return		;funcret
 16395  000A4E                     __end_ofi2___fttol:
 16396                           	opt stack 0
 16397                           tblptru	equ	0xFF8
 16398                           tblptrh	equ	0xFF7
 16399                           tblptrl	equ	0xFF6
 16400                           tablat	equ	0xFF5
 16401                           prodh	equ	0xFF4
 16402                           prodl	equ	0xFF3
 16403                           intcon	equ	0xFF2
 16404                           intcon2	equ	0xFF1
 16405                           intcon3	equ	0xFF0
 16406                           postinc0	equ	0xFEE
 16407                           wreg	equ	0xFE8
 16408                           postdec1	equ	0xFE5
 16409                           fsr1l	equ	0xFE1
 16410                           bsr	equ	0xFE0
 16411                           indf2	equ	0xFDF
 16412                           postinc2	equ	0xFDE
 16413                           postdec2	equ	0xFDD
 16414                           plusw2	equ	0xFDB
 16415                           fsr2h	equ	0xFDA
 16416                           fsr2l	equ	0xFD9
 16417                           status	equ	0xFD8
 16418                           
 16419 ;; *************** function i2___ftmul *****************
 16420 ;; Defined at:
 16421 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
 16422 ;; Parameters:    Size  Location     Type
 16423 ;;  f1              3   11[BANK0 ] float 
 16424 ;;  f2              3   14[BANK0 ] float 
 16425 ;; Auto vars:     Size  Location     Type
 16426 ;;  __ftmul         3   22[BANK0 ] unsigned um
 16427 ;;  __ftmul         1   21[BANK0 ] unsigned char 
 16428 ;;  __ftmul         1   20[BANK0 ] unsigned char 
 16429 ;;  __ftmul         1    0        unsigned char 
 16430 ;; Return value:  Size  Location     Type
 16431 ;;                  3   11[BANK0 ] float 
 16432 ;; Registers used:
 16433 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 16434 ;; Tracked objects:
 16435 ;;		On entry : F/0
 16436 ;;		On exit  : F/0
 16437 ;;		Unchanged: 0/0
 16438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16439 ;;      Params:         0       6       0       0       0
 16440 ;;      Locals:         0       5       0       0       0
 16441 ;;      Temps:          0       3       0       0       0
 16442 ;;      Totals:         0      14       0       0       0
 16443 ;;Total ram usage:       14 bytes
 16444 ;; Hardware stack levels used:    1
 16445 ;; Hardware stack levels required when called:    1
 16446 ;; This function calls:
 16447 ;;		i2___ftpack
 16448 ;; This function is called by:
 16449 ;;		_RF_CheckCode
 16450 ;;		i2_RF_LoadCode
 16451 ;; This function uses a non-reentrant model
 16452 ;;
 16453                           
 16454                           	psect	text107
 16455  000734                     __ptext107:
 16456                           	opt stack 0
 16457  000734                     i2___ftmul:
 16458                           	opt stack 15
 16459                           
 16460                           ; BSR set to: 0
 16461                           
 16462                           ; BSR set to: 0
 16463                           ;incstack = 0
 16464  000734  C08D  F091         	movff	i2___ftmul@f1+2,??i2___ftmul
 16465  000738  6B92               	clrf	(??i2___ftmul+1)& (0+255),b
 16466  00073A  6B93               	clrf	(??i2___ftmul+2)& (0+255),b
 16467  00073C  358C               	rlcf	(i2___ftmul@f1+1)& (0+255),w,b
 16468  00073E  3791               	rlcf	??i2___ftmul& (0+255),f,b
 16469  000740  E301               	bnc	u469_41
 16470  000742  8192               	bsf	(??i2___ftmul+1)& (0+255),0,b
 16471  000744                     u469_41:
 16472  000744  5191               	movf	??i2___ftmul& (0+255),w,b
 16473  000746  6F94               	movwf	i2___ftmul@exp& (0+255),b
 16474  000748  5194               	movf	i2___ftmul@exp& (0+255),w,b
 16475  00074A  E104               	bnz	i2l4973
 16476                           
 16477                           ; BSR set to: 0
 16478  00074C  6B8B               	clrf	?i2___ftmul& (0+255),b
 16479  00074E  6B8C               	clrf	(?i2___ftmul+1)& (0+255),b
 16480  000750  6B8D               	clrf	(?i2___ftmul+2)& (0+255),b
 16481  000752  0012               	return	
 16482  000754                     i2l4973:
 16483                           
 16484                           ; BSR set to: 0
 16485  000754  C090  F091         	movff	i2___ftmul@f2+2,??i2___ftmul
 16486  000758  6B92               	clrf	(??i2___ftmul+1)& (0+255),b
 16487  00075A  6B93               	clrf	(??i2___ftmul+2)& (0+255),b
 16488  00075C  358F               	rlcf	(i2___ftmul@f2+1)& (0+255),w,b
 16489  00075E  3791               	rlcf	??i2___ftmul& (0+255),f,b
 16490  000760  E301               	bnc	u471_41
 16491  000762  8192               	bsf	(??i2___ftmul+1)& (0+255),0,b
 16492  000764                     u471_41:
 16493  000764  5191               	movf	??i2___ftmul& (0+255),w,b
 16494  000766  6F95               	movwf	i2___ftmul@sign& (0+255),b
 16495  000768  5195               	movf	i2___ftmul@sign& (0+255),w,b
 16496  00076A  E104               	bnz	i2l4977
 16497                           
 16498                           ; BSR set to: 0
 16499  00076C  6B8B               	clrf	?i2___ftmul& (0+255),b
 16500  00076E  6B8C               	clrf	(?i2___ftmul+1)& (0+255),b
 16501  000770  6B8D               	clrf	(?i2___ftmul+2)& (0+255),b
 16502  000772  0012               	return	
 16503  000774                     i2l4977:
 16504                           
 16505                           ; BSR set to: 0
 16506  000774  5195               	movf	i2___ftmul@sign& (0+255),w,b
 16507  000776  0F7B               	addlw	123
 16508  000778  2794               	addwf	i2___ftmul@exp& (0+255),f,b
 16509                           
 16510                           ; BSR set to: 0
 16511  00077A  C08D  F095         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 16512  00077E  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 16513  000780  1B95               	xorwf	i2___ftmul@sign& (0+255),f,b
 16514  000782  0E80               	movlw	128
 16515  000784  1795               	andwf	i2___ftmul@sign& (0+255),f,b
 16516                           
 16517                           ; BSR set to: 0
 16518  000786  8F8C               	bsf	(i2___ftmul@f1+1)& (0+255),7,b
 16519                           
 16520                           ; BSR set to: 0
 16521  000788  8F8F               	bsf	(i2___ftmul@f2+1)& (0+255),7,b
 16522                           
 16523                           ; BSR set to: 0
 16524  00078A  6B90               	clrf	(i2___ftmul@f2+2)& (0+255),b
 16525                           
 16526                           ; BSR set to: 0
 16527                           
 16528                           ; BSR set to: 0
 16529  00078C  6B8D               	clrf	(i2___ftmul@f1+2)& (0+255),b
 16530                           
 16531                           ; BSR set to: 0
 16532  00078E  518B               	movf	i2___ftmul@f1& (0+255),w,b
 16533  000790  038E               	mulwf	i2___ftmul@f2& (0+255),b
 16534  000792  CFF4 FFF3          	movff	prodh,prodl
 16535  000796  6AF4               	clrf	prodh,c
 16536  000798  CFF3 F096          	movff	prodl,i2___ftmul@f3_as_product
 16537  00079C  CFF4 F097          	movff	prodh,i2___ftmul@f3_as_product+1
 16538  0007A0  6B98               	clrf	(i2___ftmul@f3_as_product+2)& (0+255),b
 16539                           
 16540                           ; BSR set to: 0
 16541  0007A2  518B               	movf	i2___ftmul@f1& (0+255),w,b
 16542  0007A4  038F               	mulwf	(i2___ftmul@f2+1)& (0+255),b
 16543  0007A6  50F3               	movf	prodl,w,c
 16544  0007A8  2796               	addwf	i2___ftmul@f3_as_product& (0+255),f,b
 16545  0007AA  50F4               	movf	prodh,w,c
 16546  0007AC  2397               	addwfc	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16547  0007AE  0E00               	movlw	0
 16548  0007B0  2398               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16549                           
 16550                           ; BSR set to: 0
 16551  0007B2  518C               	movf	(i2___ftmul@f1+1)& (0+255),w,b
 16552  0007B4  038E               	mulwf	i2___ftmul@f2& (0+255),b
 16553  0007B6  50F3               	movf	prodl,w,c
 16554  0007B8  2796               	addwf	i2___ftmul@f3_as_product& (0+255),f,b
 16555  0007BA  50F4               	movf	prodh,w,c
 16556  0007BC  2397               	addwfc	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16557  0007BE  0E00               	movlw	0
 16558  0007C0  2398               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16559                           
 16560                           ; BSR set to: 0
 16561  0007C2  518C               	movf	(i2___ftmul@f1+1)& (0+255),w,b
 16562  0007C4  038F               	mulwf	(i2___ftmul@f2+1)& (0+255),b
 16563  0007C6  50F3               	movf	prodl,w,c
 16564  0007C8  2797               	addwf	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16565  0007CA  50F4               	movf	prodh,w,c
 16566  0007CC  2398               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16567                           
 16568                           ; BSR set to: 0
 16569  0007CE  AF98               	btfss	(i2___ftmul@f3_as_product+2)& (0+255),7,b
 16570  0007D0  D005               	goto	i2l1401
 16571                           
 16572                           ; BSR set to: 0
 16573  0007D2  90D8               	bcf	status,0,c
 16574  0007D4  3398               	rrcf	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16575  0007D6  3397               	rrcf	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16576  0007D8  3396               	rrcf	i2___ftmul@f3_as_product& (0+255),f,b
 16577  0007DA  2B94               	incf	i2___ftmul@exp& (0+255),f,b
 16578  0007DC                     i2l1401:
 16579                           
 16580                           ; BSR set to: 0
 16581  0007DC  90D8               	bcf	status,0,c
 16582  0007DE  3398               	rrcf	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16583  0007E0  3397               	rrcf	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16584  0007E2  3396               	rrcf	i2___ftmul@f3_as_product& (0+255),f,b
 16585                           
 16586                           ; BSR set to: 0
 16587  0007E4  C096  F080         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 16588  0007E8  C097  F081         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 16589  0007EC  C098  F082         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 16590  0007F0  C094  F083         	movff	i2___ftmul@exp,i2___ftpack@exp
 16591  0007F4  C095  F084         	movff	i2___ftmul@sign,i2___ftpack@sign
 16592  0007F8  ECF1  F007         	call	i2___ftpack	;wreg free
 16593  0007FC  C080  F08B         	movff	?i2___ftpack,?i2___ftmul
 16594  000800  C081  F08C         	movff	?i2___ftpack+1,?i2___ftmul+1
 16595  000804  C082  F08D         	movff	?i2___ftpack+2,?i2___ftmul+2
 16596                           
 16597                           ; BSR set to: 0
 16598  000808  0012               	return		;funcret
 16599  00080A                     __end_ofi2___ftmul:
 16600                           	opt stack 0
 16601                           tblptru	equ	0xFF8
 16602                           tblptrh	equ	0xFF7
 16603                           tblptrl	equ	0xFF6
 16604                           tablat	equ	0xFF5
 16605                           prodh	equ	0xFF4
 16606                           prodl	equ	0xFF3
 16607                           intcon	equ	0xFF2
 16608                           intcon2	equ	0xFF1
 16609                           intcon3	equ	0xFF0
 16610                           postinc0	equ	0xFEE
 16611                           wreg	equ	0xFE8
 16612                           postdec1	equ	0xFE5
 16613                           fsr1l	equ	0xFE1
 16614                           bsr	equ	0xFE0
 16615                           indf2	equ	0xFDF
 16616                           postinc2	equ	0xFDE
 16617                           postdec2	equ	0xFDD
 16618                           plusw2	equ	0xFDB
 16619                           fsr2h	equ	0xFDA
 16620                           fsr2l	equ	0xFD9
 16621                           status	equ	0xFD8
 16622                           
 16623 ;; *************** function i2___ftpack *****************
 16624 ;; Defined at:
 16625 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 16626 ;; Parameters:    Size  Location     Type
 16627 ;;  arg             3    0[BANK0 ] unsigned um
 16628 ;;  exp             1    3[BANK0 ] unsigned char 
 16629 ;;  sign            1    4[BANK0 ] unsigned char 
 16630 ;; Auto vars:     Size  Location     Type
 16631 ;;		None
 16632 ;; Return value:  Size  Location     Type
 16633 ;;                  3    0[BANK0 ] float 
 16634 ;; Registers used:
 16635 ;;		wreg, status,2, status,0
 16636 ;; Tracked objects:
 16637 ;;		On entry : F/0
 16638 ;;		On exit  : F/0
 16639 ;;		Unchanged: 0/0
 16640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16641 ;;      Params:         0       5       0       0       0
 16642 ;;      Locals:         0       0       0       0       0
 16643 ;;      Temps:          0       3       0       0       0
 16644 ;;      Totals:         0       8       0       0       0
 16645 ;;Total ram usage:        8 bytes
 16646 ;; Hardware stack levels used:    1
 16647 ;; This function calls:
 16648 ;;		Nothing
 16649 ;; This function is called by:
 16650 ;;		i2___ftmul
 16651 ;;		i2___lwtoft
 16652 ;; This function uses a non-reentrant model
 16653 ;;
 16654                           
 16655                           	psect	text108
 16656  000FE2                     __ptext108:
 16657                           	opt stack 0
 16658  000FE2                     i2___ftpack:
 16659                           	opt stack 15
 16660                           
 16661                           ; BSR set to: 0
 16662                           
 16663                           ; BSR set to: 0
 16664                           ;incstack = 0
 16665  000FE2  5183               	movf	i2___ftpack@exp& (0+255),w,b
 16666  000FE4  E004               	bz	i2l1317
 16667                           
 16668                           ; BSR set to: 0
 16669  000FE6  5180               	movf	i2___ftpack@arg& (0+255),w,b
 16670  000FE8  1181               	iorwf	(i2___ftpack@arg+1)& (0+255),w,b
 16671  000FEA  1182               	iorwf	(i2___ftpack@arg+2)& (0+255),w,b
 16672  000FEC  E109               	bnz	i2l4435
 16673  000FEE                     i2l1317:
 16674                           
 16675                           ; BSR set to: 0
 16676  000FEE  6B80               	clrf	?i2___ftpack& (0+255),b
 16677  000FF0  6B81               	clrf	(?i2___ftpack+1)& (0+255),b
 16678  000FF2  6B82               	clrf	(?i2___ftpack+2)& (0+255),b
 16679  000FF4  0012               	return	
 16680  000FF6                     i2l4433:
 16681                           
 16682                           ; BSR set to: 0
 16683  000FF6  2B83               	incf	i2___ftpack@exp& (0+255),f,b
 16684  000FF8  90D8               	bcf	status,0,c
 16685  000FFA  3382               	rrcf	(i2___ftpack@arg+2)& (0+255),f,b
 16686  000FFC  3381               	rrcf	(i2___ftpack@arg+1)& (0+255),f,b
 16687  000FFE  3380               	rrcf	i2___ftpack@arg& (0+255),f,b
 16688  001000                     i2l4435:
 16689                           
 16690                           ; BSR set to: 0
 16691  001000  6B85               	clrf	??i2___ftpack& (0+255),b
 16692  001002  6B86               	clrf	(??i2___ftpack+1)& (0+255),b
 16693  001004  0EFE               	movlw	254
 16694  001006  1582               	andwf	(i2___ftpack@arg+2)& (0+255),w,b
 16695  001008  6F87               	movwf	(??i2___ftpack+2)& (0+255),b
 16696  00100A  5185               	movf	??i2___ftpack& (0+255),w,b
 16697  00100C  1186               	iorwf	(??i2___ftpack+1)& (0+255),w,b
 16698  00100E  1187               	iorwf	(??i2___ftpack+2)& (0+255),w,b
 16699  001010  E00A               	bz	i2l4441
 16700  001012  D7F1               	goto	i2l4433
 16701  001014                     i2l4437:
 16702                           
 16703                           ; BSR set to: 0
 16704  001014  2B83               	incf	i2___ftpack@exp& (0+255),f,b
 16705                           
 16706                           ; BSR set to: 0
 16707  001016  2B80               	incf	i2___ftpack@arg& (0+255),f,b
 16708  001018  0E00               	movlw	0
 16709  00101A  2381               	addwfc	(i2___ftpack@arg+1)& (0+255),f,b
 16710  00101C  2382               	addwfc	(i2___ftpack@arg+2)& (0+255),f,b
 16711  00101E  90D8               	bcf	status,0,c
 16712  001020  3382               	rrcf	(i2___ftpack@arg+2)& (0+255),f,b
 16713  001022  3381               	rrcf	(i2___ftpack@arg+1)& (0+255),f,b
 16714  001024  3380               	rrcf	i2___ftpack@arg& (0+255),f,b
 16715  001026                     i2l4441:
 16716                           
 16717                           ; BSR set to: 0
 16718  001026  6B85               	clrf	??i2___ftpack& (0+255),b
 16719  001028  6B86               	clrf	(??i2___ftpack+1)& (0+255),b
 16720  00102A  5182               	movf	(i2___ftpack@arg+2)& (0+255),w,b
 16721  00102C  6F87               	movwf	(??i2___ftpack+2)& (0+255),b
 16722  00102E  5185               	movf	??i2___ftpack& (0+255),w,b
 16723  001030  1186               	iorwf	(??i2___ftpack+1)& (0+255),w,b
 16724  001032  1187               	iorwf	(??i2___ftpack+2)& (0+255),w,b
 16725  001034  E006               	bz	i2l4445
 16726  001036  D7EE               	goto	i2l4437
 16727  001038                     i2l4443:
 16728                           
 16729                           ; BSR set to: 0
 16730  001038  0783               	decf	i2___ftpack@exp& (0+255),f,b
 16731  00103A  90D8               	bcf	status,0,c
 16732  00103C  3780               	rlcf	i2___ftpack@arg& (0+255),f,b
 16733  00103E  3781               	rlcf	(i2___ftpack@arg+1)& (0+255),f,b
 16734  001040  3782               	rlcf	(i2___ftpack@arg+2)& (0+255),f,b
 16735  001042                     i2l4445:
 16736                           
 16737                           ; BSR set to: 0
 16738  001042  BF81               	btfsc	(i2___ftpack@arg+1)& (0+255),7,b
 16739  001044  D003               	goto	i2l1329
 16740                           
 16741                           ; BSR set to: 0
 16742  001046  0E02               	movlw	2
 16743  001048  6183               	cpfslt	i2___ftpack@exp& (0+255),b
 16744  00104A  D7F6               	goto	i2l4443
 16745  00104C                     i2l1329:
 16746                           
 16747                           ; BSR set to: 0
 16748  00104C  A183               	btfss	i2___ftpack@exp& (0+255),0,b
 16749                           
 16750                           ; BSR set to: 0
 16751  00104E  9F81               	bcf	(i2___ftpack@arg+1)& (0+255),7,b
 16752                           
 16753                           ; BSR set to: 0
 16754  001050  90D8               	bcf	status,0,c
 16755  001052  3383               	rrcf	i2___ftpack@exp& (0+255),f,b
 16756                           
 16757                           ; BSR set to: 0
 16758  001054  5183               	movf	i2___ftpack@exp& (0+255),w,b
 16759  001056  1382               	iorwf	(i2___ftpack@arg+2)& (0+255),f,b
 16760                           
 16761                           ; BSR set to: 0
 16762  001058  5184               	movf	i2___ftpack@sign& (0+255),w,b
 16763  00105A  E001               	bz	i2l4459
 16764                           
 16765                           ; BSR set to: 0
 16766  00105C  8F82               	bsf	(i2___ftpack@arg+2)& (0+255),7,b
 16767  00105E                     i2l4459:
 16768                           
 16769                           ; BSR set to: 0
 16770  00105E  C080  F080         	movff	i2___ftpack@arg,?i2___ftpack
 16771  001062  C081  F081         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 16772  001066  C082  F082         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 16773                           
 16774                           ; BSR set to: 0
 16775  00106A  0012               	return		;funcret
 16776  00106C                     __end_ofi2___ftpack:
 16777                           	opt stack 0
 16778                           tblptru	equ	0xFF8
 16779                           tblptrh	equ	0xFF7
 16780                           tblptrl	equ	0xFF6
 16781                           tablat	equ	0xFF5
 16782                           prodh	equ	0xFF4
 16783                           prodl	equ	0xFF3
 16784                           intcon	equ	0xFF2
 16785                           intcon2	equ	0xFF1
 16786                           intcon3	equ	0xFF0
 16787                           postinc0	equ	0xFEE
 16788                           wreg	equ	0xFE8
 16789                           postdec1	equ	0xFE5
 16790                           fsr1l	equ	0xFE1
 16791                           bsr	equ	0xFE0
 16792                           indf2	equ	0xFDF
 16793                           postinc2	equ	0xFDE
 16794                           postdec2	equ	0xFDD
 16795                           plusw2	equ	0xFDB
 16796                           fsr2h	equ	0xFDA
 16797                           fsr2l	equ	0xFD9
 16798                           status	equ	0xFD8
 16799                           
 16800 ;; *************** function i2___ftge *****************
 16801 ;; Defined at:
 16802 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
 16803 ;; Parameters:    Size  Location     Type
 16804 ;;  ff1             3   11[BANK0 ] float 
 16805 ;;  ff2             3   14[BANK0 ] float 
 16806 ;; Auto vars:     Size  Location     Type
 16807 ;;		None
 16808 ;; Return value:  Size  Location     Type
 16809 ;;		None               void
 16810 ;; Registers used:
 16811 ;;		wreg, status,2, status,0
 16812 ;; Tracked objects:
 16813 ;;		On entry : F/0
 16814 ;;		On exit  : F/0
 16815 ;;		Unchanged: 0/0
 16816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16817 ;;      Params:         0       6       0       0       0
 16818 ;;      Locals:         0       0       0       0       0
 16819 ;;      Temps:          0       3       0       0       0
 16820 ;;      Totals:         0       9       0       0       0
 16821 ;;Total ram usage:        9 bytes
 16822 ;; Hardware stack levels used:    1
 16823 ;; This function calls:
 16824 ;;		Nothing
 16825 ;; This function is called by:
 16826 ;;		_RF_CheckCode
 16827 ;;		i2_RF_LoadCode
 16828 ;; This function uses a non-reentrant model
 16829 ;;
 16830                           
 16831                           	psect	text109
 16832  001342                     __ptext109:
 16833                           	opt stack 0
 16834  001342                     i2___ftge:
 16835                           	opt stack 16
 16836                           
 16837                           ; BSR set to: 0
 16838                           
 16839                           ; BSR set to: 0
 16840                           ;incstack = 0
 16841  001342  AF8D               	btfss	(i2___ftge@ff1+2)& (0+255),7,b
 16842  001344  D00D               	goto	i2l4917
 16843                           
 16844                           ; BSR set to: 0
 16845  001346  6B91               	clrf	??i2___ftge& (0+255),b
 16846  001348  6B92               	clrf	(??i2___ftge+1)& (0+255),b
 16847  00134A  0E80               	movlw	128
 16848  00134C  6F93               	movwf	(??i2___ftge+2)& (0+255),b
 16849  00134E  518B               	movf	i2___ftge@ff1& (0+255),w,b
 16850  001350  5D91               	subwf	??i2___ftge& (0+255),w,b
 16851  001352  6F8B               	movwf	i2___ftge@ff1& (0+255),b
 16852  001354  518C               	movf	(i2___ftge@ff1+1)& (0+255),w,b
 16853  001356  5992               	subwfb	(??i2___ftge+1)& (0+255),w,b
 16854  001358  6F8C               	movwf	(i2___ftge@ff1+1)& (0+255),b
 16855  00135A  518D               	movf	(i2___ftge@ff1+2)& (0+255),w,b
 16856  00135C  5993               	subwfb	(??i2___ftge+2)& (0+255),w,b
 16857  00135E  6F8D               	movwf	(i2___ftge@ff1+2)& (0+255),b
 16858  001360                     i2l4917:
 16859                           
 16860                           ; BSR set to: 0
 16861  001360  AF90               	btfss	(i2___ftge@ff2+2)& (0+255),7,b
 16862  001362  D00D               	goto	i2l4921
 16863                           
 16864                           ; BSR set to: 0
 16865  001364  6B91               	clrf	??i2___ftge& (0+255),b
 16866  001366  6B92               	clrf	(??i2___ftge+1)& (0+255),b
 16867  001368  0E80               	movlw	128
 16868  00136A  6F93               	movwf	(??i2___ftge+2)& (0+255),b
 16869  00136C  518E               	movf	i2___ftge@ff2& (0+255),w,b
 16870  00136E  5D91               	subwf	??i2___ftge& (0+255),w,b
 16871  001370  6F8E               	movwf	i2___ftge@ff2& (0+255),b
 16872  001372  518F               	movf	(i2___ftge@ff2+1)& (0+255),w,b
 16873  001374  5992               	subwfb	(??i2___ftge+1)& (0+255),w,b
 16874  001376  6F8F               	movwf	(i2___ftge@ff2+1)& (0+255),b
 16875  001378  5190               	movf	(i2___ftge@ff2+2)& (0+255),w,b
 16876  00137A  5993               	subwfb	(??i2___ftge+2)& (0+255),w,b
 16877  00137C  6F90               	movwf	(i2___ftge@ff2+2)& (0+255),b
 16878  00137E                     i2l4921:
 16879                           
 16880                           ; BSR set to: 0
 16881  00137E  0E80               	movlw	128
 16882  001380  1B8D               	xorwf	(i2___ftge@ff1+2)& (0+255),f,b
 16883                           
 16884                           ; BSR set to: 0
 16885  001382  1B90               	xorwf	(i2___ftge@ff2+2)& (0+255),f,b
 16886  001384  518E               	movf	i2___ftge@ff2& (0+255),w,b
 16887  001386  5D8B               	subwf	i2___ftge@ff1& (0+255),w,b
 16888  001388  518F               	movf	(i2___ftge@ff2+1)& (0+255),w,b
 16889  00138A  598C               	subwfb	(i2___ftge@ff1+1)& (0+255),w,b
 16890  00138C  5190               	movf	(i2___ftge@ff2+2)& (0+255),w,b
 16891  00138E  598D               	subwfb	(i2___ftge@ff1+2)& (0+255),w,b
 16892  001390  E202               	bc	i2l4927
 16893                           
 16894                           ; BSR set to: 0
 16895  001392  90D8               	bcf	status,0,c
 16896  001394  0012               	return	
 16897  001396                     i2l4927:
 16898                           
 16899                           ; BSR set to: 0
 16900  001396  80D8               	bsf	status,0,c
 16901                           
 16902                           ; BSR set to: 0
 16903  001398  0012               	return		;funcret
 16904  00139A                     __end_ofi2___ftge:
 16905                           	opt stack 0
 16906                           tblptru	equ	0xFF8
 16907                           tblptrh	equ	0xFF7
 16908                           tblptrl	equ	0xFF6
 16909                           tablat	equ	0xFF5
 16910                           prodh	equ	0xFF4
 16911                           prodl	equ	0xFF3
 16912                           intcon	equ	0xFF2
 16913                           intcon2	equ	0xFF1
 16914                           intcon3	equ	0xFF0
 16915                           postinc0	equ	0xFEE
 16916                           wreg	equ	0xFE8
 16917                           postdec1	equ	0xFE5
 16918                           fsr1l	equ	0xFE1
 16919                           bsr	equ	0xFE0
 16920                           indf2	equ	0xFDF
 16921                           postinc2	equ	0xFDE
 16922                           postdec2	equ	0xFDD
 16923                           plusw2	equ	0xFDB
 16924                           fsr2h	equ	0xFDA
 16925                           fsr2l	equ	0xFD9
 16926                           status	equ	0xFD8
 16927                           
 16928 ;; *************** function i2_RF_CalculateCodesize *****************
 16929 ;; Defined at:
 16930 ;;		line 155 in file "RF.c"
 16931 ;; Parameters:    Size  Location     Type
 16932 ;;		None
 16933 ;; Auto vars:     Size  Location     Type
 16934 ;;  RF_Calculate    1    0[BANK0 ] unsigned char 
 16935 ;; Return value:  Size  Location     Type
 16936 ;;                  1    wreg      unsigned char 
 16937 ;; Registers used:
 16938 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16939 ;; Tracked objects:
 16940 ;;		On entry : F/0
 16941 ;;		On exit  : F/0
 16942 ;;		Unchanged: 0/0
 16943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16944 ;;      Params:         0       0       0       0       0
 16945 ;;      Locals:         0       1       0       0       0
 16946 ;;      Temps:          0       0       0       0       0
 16947 ;;      Totals:         0       1       0       0       0
 16948 ;;Total ram usage:        1 bytes
 16949 ;; Hardware stack levels used:    1
 16950 ;; This function calls:
 16951 ;;		Nothing
 16952 ;; This function is called by:
 16953 ;;		i2_RF_LoadCode
 16954 ;; This function uses a non-reentrant model
 16955 ;;
 16956                           
 16957                           	psect	text110
 16958  00160C                     __ptext110:
 16959                           	opt stack 0
 16960  00160C                     i2_RF_CalculateCodesize:
 16961                           	opt stack 15
 16962                           
 16963                           ; BSR set to: 0
 16964                           ;RF.c: 157: unsigned char i;
 16965                           ;RF.c: 159: for(i=0; i<64;i++)
 16966                           
 16967                           ; BSR set to: 0
 16968                           ;incstack = 0
 16969  00160C  6B80               	clrf	i2RF_CalculateCodesize@i& (0+255),b
 16970  00160E                     i2l4739:
 16971                           
 16972                           ; BSR set to: 0
 16973                           ;RF.c: 160: {
 16974                           ;RF.c: 161: if(RF_SavedTiming[i] == 0)
 16975  00160E  5180               	movf	i2RF_CalculateCodesize@i& (0+255),w,b
 16976  001610  0D02               	mullw	2
 16977  001612  0E80               	movlw	128
 16978  001614  24F3               	addwf	prodl,w,c
 16979  001616  6EF6               	movwf	tblptrl,c
 16980  001618  0E25               	movlw	37
 16981  00161A  20F4               	addwfc	prodh,w,c
 16982  00161C  6EF7               	movwf	tblptrh,c
 16983  00161E  6AF8               	clrf	tblptru,c
 16984  001620  0E00               	movlw	0
 16985  001622  22F8               	addwfc	tblptru,f,c
 16986  001624  0009               	tblrd		*+
 16987  001626  50F5               	movf	tablat,w,c
 16988  001628  0009               	tblrd		*+
 16989  00162A  10F5               	iorwf	tablat,w,c
 16990  00162C  E102               	bnz	i2l4745
 16991                           
 16992                           ; BSR set to: 0
 16993                           ;RF.c: 162: {
 16994                           ;RF.c: 163: return i;
 16995  00162E  5180               	movf	i2RF_CalculateCodesize@i& (0+255),w,b
 16996  001630  0012               	return	
 16997  001632                     i2l4745:
 16998                           
 16999                           ; BSR set to: 0
 17000  001632  2B80               	incf	i2RF_CalculateCodesize@i& (0+255),f,b
 17001                           
 17002                           ; BSR set to: 0
 17003  001634  0E3F               	movlw	63
 17004  001636  6580               	cpfsgt	i2RF_CalculateCodesize@i& (0+255),b
 17005  001638  D7EA               	goto	i2l4739
 17006  00163A  0C40               	retlw	64
 17007  00163C                     __end_ofi2_RF_CalculateCodesize:
 17008                           	opt stack 0
 17009                           tblptru	equ	0xFF8
 17010                           tblptrh	equ	0xFF7
 17011                           tblptrl	equ	0xFF6
 17012                           tablat	equ	0xFF5
 17013                           prodh	equ	0xFF4
 17014                           prodl	equ	0xFF3
 17015                           intcon	equ	0xFF2
 17016                           intcon2	equ	0xFF1
 17017                           intcon3	equ	0xFF0
 17018                           postinc0	equ	0xFEE
 17019                           wreg	equ	0xFE8
 17020                           postdec1	equ	0xFE5
 17021                           fsr1l	equ	0xFE1
 17022                           bsr	equ	0xFE0
 17023                           indf2	equ	0xFDF
 17024                           postinc2	equ	0xFDE
 17025                           postdec2	equ	0xFDD
 17026                           plusw2	equ	0xFDB
 17027                           fsr2h	equ	0xFDA
 17028                           fsr2l	equ	0xFD9
 17029                           status	equ	0xFD8
 17030                           
 17031 ;; *************** function i2_FSH_Write_IR_RF *****************
 17032 ;; Defined at:
 17033 ;;		line 196 in file "FLASH.c"
 17034 ;; Parameters:    Size  Location     Type
 17035 ;;		None
 17036 ;; Auto vars:     Size  Location     Type
 17037 ;;  FSH_Write_IR    2   32[BANK0 ] PTR unsigned int 
 17038 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), 
 17039 ;;  FSH_Write_IR    2   29[BANK0 ] unsigned int 
 17040 ;;  FSH_Write_IR    2   25[BANK0 ] unsigned int 
 17041 ;;  FSH_Write_IR    1   31[BANK0 ] unsigned char 
 17042 ;;  FSH_Write_IR    1   28[BANK0 ] unsigned char 
 17043 ;;  FSH_Write_IR    1   27[BANK0 ] unsigned char 
 17044 ;;  FSH_Write_IR    1   24[BANK0 ] unsigned char 
 17045 ;;  FSH_Write_IR    1   23[BANK0 ] unsigned char 
 17046 ;; Return value:  Size  Location     Type
 17047 ;;                  1    wreg      unsigned char 
 17048 ;; Registers used:
 17049 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17050 ;; Tracked objects:
 17051 ;;		On entry : F/1
 17052 ;;		On exit  : F/0
 17053 ;;		Unchanged: 0/0
 17054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17055 ;;      Params:         0       0       0       0       0
 17056 ;;      Locals:         0      11       0       0       0
 17057 ;;      Temps:          0       6       0       0       0
 17058 ;;      Totals:         0      17       0       0       0
 17059 ;;Total ram usage:       17 bytes
 17060 ;; Hardware stack levels used:    1
 17061 ;; Hardware stack levels required when called:    3
 17062 ;; This function calls:
 17063 ;;		i2_FSH_AddressToBlock
 17064 ;;		i2_FSH_EraseBlock
 17065 ;;		i2_FSH_VerifyWriteIntArray
 17066 ;;		i2_FSH_WriteIntArray
 17067 ;;		i2_IR_ResetData
 17068 ;;		i2_MSC_BufferCopyIntConst
 17069 ;;		i2_RF_ResetData
 17070 ;; This function is called by:
 17071 ;;		_RF_CheckCode
 17072 ;; This function uses a non-reentrant model
 17073 ;;
 17074                           
 17075                           	psect	text111
 17076  002F04                     __ptext111:
 17077                           	opt stack 0
 17078  002F04                     i2_FSH_Write_IR_RF:
 17079                           	opt stack 13
 17080                           
 17081                           ; BSR set to: 1
 17082                           ;FLASH.c: 198: unsigned int i;
 17083                           ;FLASH.c: 199: unsigned char j;
 17084                           ;FLASH.c: 200: unsigned char WriteTries;
 17085                           ;FLASH.c: 201: unsigned int *RAMaddress;
 17086                           ;FLASH.c: 202: unsigned char status = 0;
 17087                           
 17088                           ; BSR set to: 0
 17089                           ;incstack = 0
 17090  002F04  0100               	movlb	0	; () banked
 17091  002F06  6B9C               	clrf	i2FSH_Write_IR_RF@status& (0+255),b
 17092                           
 17093                           ; BSR set to: 0
 17094                           ;FLASH.c: 204: unsigned char highint = INTCONbits.GIE;
 17095  002F08  0E00               	movlw	0
 17096  002F0A  BEF2               	btfsc	intcon,7,c	;volatile
 17097  002F0C  0E01               	movlw	1
 17098  002F0E  6F97               	movwf	i2FSH_Write_IR_RF@highint& (0+255),b
 17099                           
 17100                           ;FLASH.c: 205: unsigned char lowint = INTCONbits.PEIE;
 17101  002F10  0E00               	movlw	0
 17102  002F12  BCF2               	btfsc	intcon,6,c	;volatile
 17103  002F14  0E01               	movlw	1
 17104  002F16  6F98               	movwf	i2FSH_Write_IR_RF@lowint& (0+255),b
 17105                           
 17106                           ; BSR set to: 0
 17107                           ;FLASH.c: 207: INTCONbits.GIE = 0;
 17108  002F18  9EF2               	bcf	intcon,7,c	;volatile
 17109                           
 17110                           ; BSR set to: 0
 17111                           ;FLASH.c: 208: INTCONbits.PEIE = 0;
 17112  002F1A  9CF2               	bcf	intcon,6,c	;volatile
 17113                           
 17114                           ; BSR set to: 0
 17115                           ;FLASH.c: 210: if(IR_Saved == 90 && RF_Saved == 90)
 17116  002F1C  0E5A               	movlw	90
 17117  002F1E  0101               	movlb	1	; () banked
 17118  002F20  19AC               	xorwf	_IR_Saved& (0+255),w,b
 17119  002F22  E107               	bnz	i2l5733
 17120                           
 17121                           ; BSR set to: 1
 17122  002F24  0E5A               	movlw	90
 17123  002F26  19AD               	xorwf	_RF_Saved& (0+255),w,b
 17124  002F28  E104               	bnz	i2l5733
 17125  002F2A                     i2l5729:
 17126                           
 17127                           ; BSR set to: 1
 17128                           ;FLASH.c: 211: {
 17129                           ;FLASH.c: 213: IR_Saved = 91;
 17130  002F2A  0E5B               	movlw	91
 17131  002F2C  6FAC               	movwf	_IR_Saved& (0+255),b
 17132                           
 17133                           ;FLASH.c: 214: RF_Saved = 91;
 17134  002F2E  6FAD               	movwf	_RF_Saved& (0+255),b
 17135                           
 17136                           ;FLASH.c: 215: goto END;
 17137  002F30  D208               	goto	i2l975
 17138  002F32                     i2l5733:
 17139                           
 17140                           ; BSR set to: 1
 17141                           ;FLASH.c: 217: else if(IR_Saved != 90 && RF_Saved != 90)
 17142  002F32  0E5A               	movlw	90
 17143  002F34  19AC               	xorwf	_IR_Saved& (0+255),w,b
 17144  002F36  E003               	bz	i2l5739
 17145                           
 17146                           ; BSR set to: 1
 17147  002F38  0E5A               	movlw	90
 17148  002F3A  19AD               	xorwf	_RF_Saved& (0+255),w,b
 17149  002F3C  E1F6               	bnz	i2l5729
 17150  002F3E                     i2l5739:
 17151                           
 17152                           ; BSR set to: 1
 17153                           ;FLASH.c: 223: }
 17154                           ;FLASH.c: 225: if(IR_Saved == 90)
 17155  002F3E  0E5A               	movlw	90
 17156  002F40  19AC               	xorwf	_IR_Saved& (0+255),w,b
 17157  002F42  E137               	bnz	i2l5753
 17158                           
 17159                           ; BSR set to: 1
 17160                           ;FLASH.c: 226: {
 17161                           ;FLASH.c: 228: RF_ResetData();
 17162  002F44  ECDC  F00D         	call	i2_RF_ResetData	;wreg free
 17163                           
 17164                           ; BSR set to: 0
 17165                           ;FLASH.c: 229: MSC_BufferCopyIntConst(&RF_SavedTiming,&RF_DataTiming, 64, 0);
 17166  002F48  0E80               	movlw	128
 17167  002F4A  6F86               	movwf	i2MSC_BufferCopyIntConst@from& (0+255),b
 17168  002F4C  0E25               	movlw	37
 17169  002F4E  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 17170  002F50  6B88               	clrf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 17171  002F52  0E07               	movlw	low _RF_DataTiming
 17172  002F54  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 17173  002F56  0E01               	movlw	high _RF_DataTiming
 17174  002F58  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 17175  002F5A  6B8C               	clrf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 17176  002F5C  0E40               	movlw	64
 17177  002F5E  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 17178  002F60  6B8E               	clrf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 17179  002F62  6B8D               	clrf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 17180  002F64  EC1A  F007         	call	i2_MSC_BufferCopyIntConst	;wreg free
 17181                           
 17182                           ; BSR set to: 0
 17183                           ;FLASH.c: 230: if(IRProgramCodeNumber == 0)
 17184  002F68  5068               	movf	_IRProgramCodeNumber,w,c
 17185  002F6A  E111               	bnz	i2l5749
 17186  002F6C                     i2l5747:
 17187                           
 17188                           ; BSR set to: 0
 17189                           ;FLASH.c: 231: {
 17190                           ;FLASH.c: 232: MSC_BufferCopyIntConst(&IR_SavedTiming1,&IR_DataHolder1, 96, 0);
 17191  002F6C  0EC0               	movlw	192
 17192  002F6E  6F86               	movwf	i2MSC_BufferCopyIntConst@from& (0+255),b
 17193  002F70  0E24               	movlw	36
 17194  002F72  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 17195  002F74  6B88               	clrf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 17196  002F76  0E00               	movlw	low _IR_DataHolder1
 17197  002F78  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 17198  002F7A  0E03               	movlw	high _IR_DataHolder1
 17199  002F7C  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 17200  002F7E  6B8C               	clrf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 17201  002F80  0E60               	movlw	96
 17202  002F82  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 17203  002F84  6B8E               	clrf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 17204  002F86  6B8D               	clrf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 17205  002F88  EC1A  F007         	call	i2_MSC_BufferCopyIntConst	;wreg free
 17206                           
 17207                           ;FLASH.c: 233: }
 17208  002F8C  D024               	goto	i2l5759
 17209  002F8E                     i2l5749:
 17210                           
 17211                           ; BSR set to: 0
 17212                           ;FLASH.c: 234: else if(IRProgramCodeNumber == 1)
 17213  002F8E  0468               	decf	_IRProgramCodeNumber,w,c
 17214  002F90  E122               	bnz	i2l5759
 17215                           
 17216                           ; BSR set to: 0
 17217                           ;FLASH.c: 235: {
 17218                           ;FLASH.c: 236: MSC_BufferCopyIntConst(&IR_SavedTiming0,&IR_DataHolder1, 96, 0);
 17219  002F92  6B86               	clrf	i2MSC_BufferCopyIntConst@from& (0+255),b
 17220  002F94  0E24               	movlw	36
 17221  002F96  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 17222  002F98  6B88               	clrf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 17223  002F9A  0E00               	movlw	low _IR_DataHolder1
 17224  002F9C  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 17225  002F9E  0E03               	movlw	high _IR_DataHolder1
 17226  002FA0  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 17227  002FA2  6B8C               	clrf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 17228  002FA4  0E60               	movlw	96
 17229  002FA6  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 17230  002FA8  6B8E               	clrf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 17231  002FAA  6B8D               	clrf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 17232  002FAC  EC1A  F007         	call	i2_MSC_BufferCopyIntConst	;wreg free
 17233  002FB0  D012               	goto	i2l5759
 17234  002FB2                     i2l5753:
 17235                           
 17236                           ; BSR set to: 1
 17237                           ;FLASH.c: 239: else
 17238                           ;FLASH.c: 240: {
 17239                           ;FLASH.c: 242: IR_ResetData();
 17240  002FB2  ECE0  F00D         	call	i2_IR_ResetData	;wreg free
 17241                           
 17242                           ; BSR set to: 0
 17243                           ;FLASH.c: 243: MSC_BufferCopyIntConst(&IR_SavedTiming0,&IR_DataTiming, 96, 0);
 17244  002FB6  6B86               	clrf	i2MSC_BufferCopyIntConst@from& (0+255),b
 17245  002FB8  0E24               	movlw	36
 17246  002FBA  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 17247  002FBC  6B88               	clrf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 17248  002FBE  0E00               	movlw	low _IR_DataTiming
 17249  002FC0  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 17250  002FC2  0E02               	movlw	high _IR_DataTiming
 17251  002FC4  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 17252  002FC6  6B8C               	clrf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 17253  002FC8  0E60               	movlw	96
 17254  002FCA  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 17255  002FCC  6B8E               	clrf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 17256  002FCE  6B8D               	clrf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 17257  002FD0  EC1A  F007         	call	i2_MSC_BufferCopyIntConst	;wreg free
 17258  002FD4  D7CB               	goto	i2l5747
 17259  002FD6                     i2l5759:
 17260                           
 17261                           ; BSR set to: 0
 17262                           ;FLASH.c: 245: }
 17263                           ;FLASH.c: 247: FSH_EraseBlock(&IR_SavedTiming0[0]);
 17264  002FD6  6B84               	clrf	i2FSH_EraseBlock@Address& (0+255),b
 17265  002FD8  0E24               	movlw	36
 17266  002FDA  6F85               	movwf	(i2FSH_EraseBlock@Address+1)& (0+255),b
 17267  002FDC  6B86               	clrf	(i2FSH_EraseBlock@Address+2)& (0+255),b
 17268  002FDE  6B87               	clrf	(i2FSH_EraseBlock@Address+3)& (0+255),b
 17269  002FE0  EC74  F008         	call	i2_FSH_EraseBlock	;wreg free
 17270                           
 17271                           ; BSR set to: 0
 17272                           ;FLASH.c: 252: WriteTries = 1;
 17273  002FE4  0E01               	movlw	1
 17274  002FE6  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17275  002FE8                     i2l983:
 17276                           
 17277                           ; BSR set to: 0
 17278                           ;FLASH.c: 256: if(IR_Saved == 90)
 17279  002FE8  0E5A               	movlw	90
 17280  002FEA  0101               	movlb	1	; () banked
 17281  002FEC  19AC               	xorwf	_IR_Saved& (0+255),w,b
 17282  002FEE  E102               	bnz	i2l5765
 17283                           
 17284                           ; BSR set to: 1
 17285                           ;FLASH.c: 257: {
 17286                           ;FLASH.c: 258: if(IRProgramCodeNumber == 0)
 17287  002FF0  5068               	movf	_IRProgramCodeNumber,w,c
 17288  002FF2  E105               	bnz	i2l5767
 17289  002FF4                     i2l5765:
 17290                           
 17291                           ; BSR set to: 1
 17292                           ;FLASH.c: 259: {
 17293                           ;FLASH.c: 260: RAMaddress = &IR_DataTiming[0];
 17294  002FF4  0E00               	movlw	low _IR_DataTiming
 17295  002FF6  0100               	movlb	0	; () banked
 17296  002FF8  6FA0               	movwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),b
 17297  002FFA  0E02               	movlw	high _IR_DataTiming
 17298  002FFC  D004               	goto	L8
 17299  002FFE                     i2l5767:
 17300                           
 17301                           ; BSR set to: 1
 17302                           ;FLASH.c: 262: else
 17303                           ;FLASH.c: 263: {
 17304                           ;FLASH.c: 264: RAMaddress = &IR_DataHolder1[0];
 17305  002FFE  0E00               	movlw	low _IR_DataHolder1
 17306  003000  0100               	movlb	0	; () banked
 17307  003002  6FA0               	movwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),b
 17308  003004  0E03               	movlw	high _IR_DataHolder1
 17309  003006                     L8:
 17310  003006  6FA1               	movwf	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),b
 17311                           
 17312                           ; BSR set to: 0
 17313                           ;FLASH.c: 270: }
 17314                           ;FLASH.c: 273: FSH_WriteIntArray(&IR_SavedTiming0[0], RAMaddress);
 17315  003008  6B84               	clrf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17316  00300A  0E24               	movlw	36
 17317  00300C  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17318  00300E  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17319  003010  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17320  003014  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17321  003018  ECDE  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17322                           
 17323                           ;FLASH.c: 276: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[0],RAMaddress))
 17324  00301C  0100               	movlb	0	; () banked
 17325  00301E  6B80               	clrf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17326  003020  0E24               	movlw	36
 17327  003022  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17328  003024  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17329  003026  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17330  00302A  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17331  00302E  EC18  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17332  003032  0900               	iorlw	0
 17333  003034  E106               	bnz	i2l5783
 17334                           
 17335                           ; BSR set to: 0
 17336                           ;FLASH.c: 277: {
 17337                           ;FLASH.c: 278: WriteTries++;
 17338  003036  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17339                           
 17340                           ; BSR set to: 0
 17341                           ;FLASH.c: 279: if(WriteTries > 10)
 17342  003038  0E0A               	movlw	10
 17343  00303A  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17344  00303C  D7D5               	goto	i2l983
 17345  00303E                     i2l5779:
 17346                           
 17347                           ; BSR set to: 0
 17348                           ;FLASH.c: 280: {
 17349                           ;FLASH.c: 281: status = 0;
 17350  00303E  6B9C               	clrf	i2FSH_Write_IR_RF@status& (0+255),b
 17351                           
 17352                           ;FLASH.c: 282: goto END;
 17353  003040  D180               	goto	i2l975
 17354  003042                     i2l5783:
 17355                           
 17356                           ; BSR set to: 0
 17357                           ;FLASH.c: 287: }
 17358                           ;FLASH.c: 288: }
 17359                           ;FLASH.c: 291: WriteTries = 1;
 17360  003042  0E01               	movlw	1
 17361  003044  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17362                           
 17363                           ; BSR set to: 0
 17364                           ;FLASH.c: 292: RAMaddress+=32;
 17365  003046  0E40               	movlw	64
 17366  003048  27A0               	addwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),f,b
 17367  00304A  0E00               	movlw	0
 17368  00304C  23A1               	addwfc	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),f,b
 17369  00304E                     i2l5787:
 17370                           
 17371                           ; BSR set to: 0
 17372                           ;FLASH.c: 296: FSH_WriteIntArray(&IR_SavedTiming0[32], RAMaddress);
 17373  00304E  0E40               	movlw	64
 17374  003050  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17375  003052  0E24               	movlw	36
 17376  003054  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17377  003056  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17378  003058  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17379  00305C  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17380  003060  ECDE  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17381                           
 17382                           ;FLASH.c: 299: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[32], RAMaddress))
 17383  003064  0E40               	movlw	64
 17384  003066  0100               	movlb	0	; () banked
 17385  003068  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17386  00306A  0E24               	movlw	36
 17387  00306C  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17388  00306E  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17389  003070  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17390  003074  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17391  003078  EC18  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17392  00307C  0900               	iorlw	0
 17393  00307E  E105               	bnz	i2l5799
 17394                           
 17395                           ; BSR set to: 0
 17396                           ;FLASH.c: 300: {
 17397                           ;FLASH.c: 301: WriteTries++;
 17398  003080  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17399                           
 17400                           ; BSR set to: 0
 17401                           ;FLASH.c: 302: if(WriteTries > 10)
 17402  003082  0E0A               	movlw	10
 17403  003084  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17404  003086  D7E3               	goto	i2l5787
 17405  003088  D7DA               	goto	i2l5779
 17406  00308A                     i2l5799:
 17407                           
 17408                           ; BSR set to: 0
 17409                           ;FLASH.c: 310: }
 17410                           ;FLASH.c: 311: }
 17411                           ;FLASH.c: 314: WriteTries = 1;
 17412  00308A  0E01               	movlw	1
 17413  00308C  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17414                           
 17415                           ; BSR set to: 0
 17416                           ;FLASH.c: 315: RAMaddress+=32;
 17417  00308E  0E40               	movlw	64
 17418  003090  27A0               	addwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),f,b
 17419  003092  0E00               	movlw	0
 17420  003094  23A1               	addwfc	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),f,b
 17421  003096                     i2l5803:
 17422                           
 17423                           ; BSR set to: 0
 17424                           ;FLASH.c: 320: FSH_WriteIntArray(&IR_SavedTiming0[64], RAMaddress);
 17425  003096  0E80               	movlw	128
 17426  003098  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17427  00309A  0E24               	movlw	36
 17428  00309C  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17429  00309E  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17430  0030A0  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17431  0030A4  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17432  0030A8  ECDE  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17433                           
 17434                           ;FLASH.c: 323: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[64],RAMaddress))
 17435  0030AC  0E80               	movlw	128
 17436  0030AE  0100               	movlb	0	; () banked
 17437  0030B0  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17438  0030B2  0E24               	movlw	36
 17439  0030B4  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17440  0030B6  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17441  0030B8  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17442  0030BC  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17443  0030C0  EC18  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17444  0030C4  0900               	iorlw	0
 17445  0030C6  E105               	bnz	i2l5815
 17446                           
 17447                           ; BSR set to: 0
 17448                           ;FLASH.c: 324: {
 17449                           ;FLASH.c: 325: WriteTries++;
 17450  0030C8  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17451                           
 17452                           ; BSR set to: 0
 17453                           ;FLASH.c: 326: if(WriteTries > 10)
 17454  0030CA  0E0A               	movlw	10
 17455  0030CC  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17456  0030CE  D7E3               	goto	i2l5803
 17457  0030D0  D7B6               	goto	i2l5779
 17458  0030D2                     i2l5815:
 17459                           
 17460                           ; BSR set to: 0
 17461                           ;FLASH.c: 334: }
 17462                           ;FLASH.c: 335: }
 17463                           ;FLASH.c: 338: WriteTries = 1;
 17464  0030D2  0E01               	movlw	1
 17465  0030D4  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17466  0030D6                     i2l5817:
 17467                           
 17468                           ; BSR set to: 0
 17469                           ;FLASH.c: 342: if(IR_Saved == 90)
 17470  0030D6  0E5A               	movlw	90
 17471  0030D8  0101               	movlb	1	; () banked
 17472  0030DA  19AC               	xorwf	_IR_Saved& (0+255),w,b
 17473  0030DC  E107               	bnz	i2l5823
 17474                           
 17475                           ; BSR set to: 1
 17476                           ;FLASH.c: 343: {
 17477                           ;FLASH.c: 344: if(IRProgramCodeNumber == 1)
 17478  0030DE  0468               	decf	_IRProgramCodeNumber,w,c
 17479  0030E0  E105               	bnz	i2l5823
 17480                           
 17481                           ; BSR set to: 1
 17482                           ;FLASH.c: 345: {
 17483                           ;FLASH.c: 346: RAMaddress = &IR_DataTiming[0];
 17484  0030E2  0E00               	movlw	low _IR_DataTiming
 17485  0030E4  0100               	movlb	0	; () banked
 17486  0030E6  6FA0               	movwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),b
 17487  0030E8  0E02               	movlw	high _IR_DataTiming
 17488  0030EA  D004               	goto	L9
 17489  0030EC                     i2l5823:
 17490                           
 17491                           ; BSR set to: 1
 17492                           ;FLASH.c: 348: else
 17493                           ;FLASH.c: 349: {
 17494                           ;FLASH.c: 350: RAMaddress = &IR_DataHolder1[0];
 17495  0030EC  0E00               	movlw	low _IR_DataHolder1
 17496  0030EE  0100               	movlb	0	; () banked
 17497  0030F0  6FA0               	movwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),b
 17498  0030F2  0E03               	movlw	high _IR_DataHolder1
 17499  0030F4                     L9:
 17500  0030F4  6FA1               	movwf	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),b
 17501                           
 17502                           ; BSR set to: 0
 17503                           ;FLASH.c: 356: }
 17504                           ;FLASH.c: 359: FSH_WriteIntArray(&IR_SavedTiming1[0], RAMaddress);
 17505  0030F6  0EC0               	movlw	192
 17506  0030F8  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17507  0030FA  0E24               	movlw	36
 17508  0030FC  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17509  0030FE  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17510  003100  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17511  003104  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17512  003108  ECDE  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17513                           
 17514                           ;FLASH.c: 362: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[0], RAMaddress))
 17515  00310C  0EC0               	movlw	192
 17516  00310E  0100               	movlb	0	; () banked
 17517  003110  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17518  003112  0E24               	movlw	36
 17519  003114  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17520  003116  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17521  003118  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17522  00311C  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17523  003120  EC18  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17524  003124  0900               	iorlw	0
 17525  003126  E105               	bnz	i2l5839
 17526                           
 17527                           ; BSR set to: 0
 17528                           ;FLASH.c: 363: {
 17529                           ;FLASH.c: 364: WriteTries++;
 17530  003128  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17531                           
 17532                           ; BSR set to: 0
 17533                           ;FLASH.c: 365: if(WriteTries > 10)
 17534  00312A  0E0A               	movlw	10
 17535  00312C  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17536  00312E  D7D3               	goto	i2l5817
 17537  003130  D786               	goto	i2l5779
 17538  003132                     i2l5839:
 17539                           
 17540                           ; BSR set to: 0
 17541                           ;FLASH.c: 373: }
 17542                           ;FLASH.c: 374: }
 17543                           ;FLASH.c: 377: WriteTries = 1;
 17544  003132  0E01               	movlw	1
 17545  003134  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17546                           
 17547                           ; BSR set to: 0
 17548                           ;FLASH.c: 378: RAMaddress+=32;
 17549  003136  0E40               	movlw	64
 17550  003138  27A0               	addwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),f,b
 17551  00313A  0E00               	movlw	0
 17552  00313C  23A1               	addwfc	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),f,b
 17553  00313E                     i2l5843:
 17554                           
 17555                           ; BSR set to: 0
 17556                           ;FLASH.c: 383: FSH_WriteIntArray(&IR_SavedTiming1[32], RAMaddress);
 17557  00313E  6B84               	clrf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17558  003140  0E25               	movlw	37
 17559  003142  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17560  003144  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17561  003146  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17562  00314A  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17563  00314E  ECDE  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17564                           
 17565                           ;FLASH.c: 386: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[32], RAMaddress))
 17566  003152  0100               	movlb	0	; () banked
 17567  003154  6B80               	clrf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17568  003156  0E25               	movlw	37
 17569  003158  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17570  00315A  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17571  00315C  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17572  003160  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17573  003164  EC18  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17574  003168  0900               	iorlw	0
 17575  00316A  E105               	bnz	i2l5855
 17576                           
 17577                           ; BSR set to: 0
 17578                           ;FLASH.c: 387: {
 17579                           ;FLASH.c: 388: WriteTries++;
 17580  00316C  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17581                           
 17582                           ; BSR set to: 0
 17583                           ;FLASH.c: 389: if(WriteTries > 10)
 17584  00316E  0E0A               	movlw	10
 17585  003170  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17586  003172  D7E5               	goto	i2l5843
 17587  003174  D764               	goto	i2l5779
 17588  003176                     i2l5855:
 17589                           
 17590                           ; BSR set to: 0
 17591                           ;FLASH.c: 397: }
 17592                           ;FLASH.c: 398: }
 17593                           ;FLASH.c: 401: WriteTries = 1;
 17594  003176  0E01               	movlw	1
 17595  003178  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17596                           
 17597                           ; BSR set to: 0
 17598                           ;FLASH.c: 402: RAMaddress+=32;
 17599  00317A  0E40               	movlw	64
 17600  00317C  27A0               	addwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),f,b
 17601  00317E  0E00               	movlw	0
 17602  003180  23A1               	addwfc	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),f,b
 17603  003182                     i2l5859:
 17604                           
 17605                           ; BSR set to: 0
 17606                           ;FLASH.c: 407: FSH_WriteIntArray(&IR_SavedTiming1[64], RAMaddress);
 17607  003182  0E40               	movlw	64
 17608  003184  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17609  003186  0E25               	movlw	37
 17610  003188  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17611  00318A  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17612  00318C  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17613  003190  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17614  003194  ECDE  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17615                           
 17616                           ;FLASH.c: 410: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[64], RAMaddress))
 17617  003198  0E40               	movlw	64
 17618  00319A  0100               	movlb	0	; () banked
 17619  00319C  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17620  00319E  0E25               	movlw	37
 17621  0031A0  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17622  0031A2  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17623  0031A4  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17624  0031A8  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17625  0031AC  EC18  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17626  0031B0  0900               	iorlw	0
 17627  0031B2  E105               	bnz	i2l5871
 17628                           
 17629                           ; BSR set to: 0
 17630                           ;FLASH.c: 411: {
 17631                           ;FLASH.c: 412: WriteTries++;
 17632  0031B4  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17633                           
 17634                           ; BSR set to: 0
 17635                           ;FLASH.c: 413: if(WriteTries > 10)
 17636  0031B6  0E0A               	movlw	10
 17637  0031B8  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17638  0031BA  D7E3               	goto	i2l5859
 17639  0031BC  D740               	goto	i2l5779
 17640  0031BE                     i2l5871:
 17641                           
 17642                           ; BSR set to: 0
 17643                           ;FLASH.c: 421: }
 17644                           ;FLASH.c: 422: }
 17645                           ;FLASH.c: 425: WriteTries = 1;
 17646  0031BE  0E01               	movlw	1
 17647  0031C0  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17648  0031C2                     i2l5873:
 17649                           
 17650                           ; BSR set to: 0
 17651                           ;FLASH.c: 430: FSH_WriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]);
 17652  0031C2  0E80               	movlw	128
 17653  0031C4  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17654  0031C6  0E25               	movlw	37
 17655  0031C8  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17656  0031CA  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17657  0031CC  0E07               	movlw	low _RF_DataTiming
 17658  0031CE  6F87               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17659  0031D0  0E01               	movlw	high _RF_DataTiming
 17660  0031D2  6F88               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17661  0031D4  ECDE  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17662                           
 17663                           ;FLASH.c: 433: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]))
 17664  0031D8  0E80               	movlw	128
 17665  0031DA  0100               	movlb	0	; () banked
 17666  0031DC  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17667  0031DE  0E25               	movlw	37
 17668  0031E0  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17669  0031E2  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17670  0031E4  0E07               	movlw	low _RF_DataTiming
 17671  0031E6  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17672  0031E8  0E01               	movlw	high _RF_DataTiming
 17673  0031EA  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17674  0031EC  EC18  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17675  0031F0  0900               	iorlw	0
 17676  0031F2  E105               	bnz	i2l5885
 17677                           
 17678                           ; BSR set to: 0
 17679                           ;FLASH.c: 434: {
 17680                           ;FLASH.c: 435: WriteTries++;
 17681  0031F4  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17682                           
 17683                           ; BSR set to: 0
 17684                           ;FLASH.c: 436: if(WriteTries > 10)
 17685  0031F6  0E0A               	movlw	10
 17686  0031F8  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17687  0031FA  D7E3               	goto	i2l5873
 17688  0031FC  D720               	goto	i2l5779
 17689  0031FE                     i2l5885:
 17690                           
 17691                           ; BSR set to: 0
 17692                           ;FLASH.c: 444: }
 17693                           ;FLASH.c: 445: }
 17694                           ;FLASH.c: 448: WriteTries = 1;
 17695  0031FE  0E01               	movlw	1
 17696  003200  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17697  003202                     i2l5887:
 17698                           
 17699                           ; BSR set to: 0
 17700                           ;FLASH.c: 453: FSH_WriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]);
 17701  003202  0EC0               	movlw	192
 17702  003204  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17703  003206  0E25               	movlw	37
 17704  003208  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17705  00320A  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17706  00320C  0E47               	movlw	low (_RF_DataTiming+64)
 17707  00320E  6F87               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17708  003210  0E01               	movlw	high (_RF_DataTiming+64)
 17709  003212  6F88               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17710  003214  ECDE  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17711                           
 17712                           ;FLASH.c: 456: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]))
 17713  003218  0EC0               	movlw	192
 17714  00321A  0100               	movlb	0	; () banked
 17715  00321C  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17716  00321E  0E25               	movlw	37
 17717  003220  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17718  003222  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17719  003224  0E47               	movlw	low (_RF_DataTiming+64)
 17720  003226  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17721  003228  0E01               	movlw	high (_RF_DataTiming+64)
 17722  00322A  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17723  00322C  EC18  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17724  003230  0900               	iorlw	0
 17725  003232  E105               	bnz	i2l5899
 17726                           
 17727                           ; BSR set to: 0
 17728                           ;FLASH.c: 457: {
 17729                           ;FLASH.c: 458: WriteTries++;
 17730  003234  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17731                           
 17732                           ; BSR set to: 0
 17733                           ;FLASH.c: 459: if(WriteTries > 10)
 17734  003236  0E0A               	movlw	10
 17735  003238  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17736  00323A  D7E3               	goto	i2l5887
 17737  00323C  D700               	goto	i2l5779
 17738  00323E                     i2l5899:
 17739                           
 17740                           ; BSR set to: 0
 17741                           ;FLASH.c: 467: }
 17742                           ;FLASH.c: 468: }
 17743                           ;FLASH.c: 471: for(j=8;j<16;j++)
 17744  00323E  0E08               	movlw	8
 17745  003240  6F9B               	movwf	i2FSH_Write_IR_RF@j& (0+255),b
 17746  003242                     i2l5901:
 17747                           
 17748                           ; BSR set to: 0
 17749  003242  0E0F               	movlw	15
 17750  003244  659B               	cpfsgt	i2FSH_Write_IR_RF@j& (0+255),b
 17751  003246  D001               	goto	i2l5905
 17752  003248  D07A               	goto	i2l5953
 17753  00324A                     i2l5905:
 17754                           
 17755                           ; BSR set to: 0
 17756                           ;FLASH.c: 472: {
 17757                           ;FLASH.c: 473: WriteTries = 1;
 17758  00324A  0E01               	movlw	1
 17759  00324C  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17760  00324E                     i2l5907:
 17761                           
 17762                           ; BSR set to: 0
 17763                           ;FLASH.c: 476: i=0;
 17764  00324E  6B9D               	clrf	i2FSH_Write_IR_RF@i& (0+255),b
 17765  003250  6B9E               	clrf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 17766                           
 17767                           ; BSR set to: 0
 17768                           ;FLASH.c: 477: FlashWasteindex = i + 64*(j-8);
 17769  003252  519B               	movf	i2FSH_Write_IR_RF@j& (0+255),w,b
 17770  003254  6F91               	movwf	??i2_FSH_Write_IR_RF& (0+255),b
 17771  003256  6B92               	clrf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 17772  003258  0E06               	movlw	6
 17773  00325A                     i2u596_45:
 17774  00325A  90D8               	bcf	status,0,c
 17775  00325C  3791               	rlcf	??i2_FSH_Write_IR_RF& (0+255),f,b
 17776  00325E  3792               	rlcf	(??i2_FSH_Write_IR_RF+1)& (0+255),f,b
 17777  003260  2EE8               	decfsz	wreg,f,c
 17778  003262  D7FB               	goto	i2u596_45
 17779  003264  519D               	movf	i2FSH_Write_IR_RF@i& (0+255),w,b
 17780  003266  2791               	addwf	??i2_FSH_Write_IR_RF& (0+255),f,b
 17781  003268  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17782  00326A  2392               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),f,b
 17783  00326C  0E00               	movlw	0
 17784  00326E  2591               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 17785  003270  6F99               	movwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),b
 17786  003272  0EFE               	movlw	254
 17787  003274  2192               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 17788  003276  6F9A               	movwf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),b
 17789                           
 17790                           ; BSR set to: 0
 17791                           ;FLASH.c: 478: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 17792  003278  6B91               	clrf	??i2_FSH_Write_IR_RF& (0+255),b
 17793  00327A  0E26               	movlw	38
 17794  00327C  6F92               	movwf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 17795  00327E  6B93               	clrf	(??i2_FSH_Write_IR_RF+2)& (0+255),b
 17796  003280  5199               	movf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 17797  003282  2591               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 17798  003284  6F94               	movwf	(??i2_FSH_Write_IR_RF+3)& (0+255),b
 17799  003286  519A               	movf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 17800  003288  2192               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 17801  00328A  6F95               	movwf	(??i2_FSH_Write_IR_RF+4)& (0+255),b
 17802  00328C  0E00               	movlw	0
 17803  00328E  2193               	addwfc	(??i2_FSH_Write_IR_RF+2)& (0+255),w,b
 17804  003290  6F96               	movwf	(??i2_FSH_Write_IR_RF+5)& (0+255),b
 17805  003292  5194               	movf	(??i2_FSH_Write_IR_RF+3)& (0+255),w,b
 17806  003294  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 17807  003296  5195               	movf	(??i2_FSH_Write_IR_RF+4)& (0+255),w,b
 17808  003298  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 17809  00329A  5196               	movf	(??i2_FSH_Write_IR_RF+5)& (0+255),w,b
 17810  00329C  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 17811  00329E  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 17812  0032A0  EC60  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 17813                           
 17814                           ; BSR set to: 0
 17815                           ;FLASH.c: 479: for(i = 0; i<64; i++)
 17816  0032A4  6B9D               	clrf	i2FSH_Write_IR_RF@i& (0+255),b
 17817  0032A6  6B9E               	clrf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 17818  0032A8                     i2l5915:
 17819                           
 17820                           ; BSR set to: 0
 17821  0032A8  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17822  0032AA  E10A               	bnz	i2l5925
 17823  0032AC  0E40               	movlw	64
 17824  0032AE  5D9D               	subwf	i2FSH_Write_IR_RF@i& (0+255),w,b
 17825  0032B0  E207               	bc	i2l5925
 17826                           
 17827                           ; BSR set to: 0
 17828                           ;FLASH.c: 480: {
 17829                           ;FLASH.c: 482: TABLAT = 0xDA;
 17830  0032B2  0EDA               	movlw	218
 17831  0032B4  6EF5               	movwf	tablat,c	;volatile
 17832  0032B6  000D               	tblwt		*+	;# 
 17833  0032B8  0100               	movlb	0	; () banked
 17834  0032BA  4B9D               	infsnz	i2FSH_Write_IR_RF@i& (0+255),f,b
 17835  0032BC  2B9E               	incf	(i2FSH_Write_IR_RF@i+1)& (0+255),f,b
 17836  0032BE  D7F4               	goto	i2l5915
 17837  0032C0                     i2l5925:
 17838                           
 17839                           ; BSR set to: 0
 17840                           ;FLASH.c: 484: }
 17841                           ;FLASH.c: 485: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 17842  0032C0  6B91               	clrf	??i2_FSH_Write_IR_RF& (0+255),b
 17843  0032C2  0E26               	movlw	38
 17844  0032C4  6F92               	movwf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 17845  0032C6  6B93               	clrf	(??i2_FSH_Write_IR_RF+2)& (0+255),b
 17846  0032C8  5199               	movf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 17847  0032CA  2591               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 17848  0032CC  6F94               	movwf	(??i2_FSH_Write_IR_RF+3)& (0+255),b
 17849  0032CE  519A               	movf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 17850  0032D0  2192               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 17851  0032D2  6F95               	movwf	(??i2_FSH_Write_IR_RF+4)& (0+255),b
 17852  0032D4  0E00               	movlw	0
 17853  0032D6  2193               	addwfc	(??i2_FSH_Write_IR_RF+2)& (0+255),w,b
 17854  0032D8  6F96               	movwf	(??i2_FSH_Write_IR_RF+5)& (0+255),b
 17855  0032DA  5194               	movf	(??i2_FSH_Write_IR_RF+3)& (0+255),w,b
 17856  0032DC  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 17857  0032DE  5195               	movf	(??i2_FSH_Write_IR_RF+4)& (0+255),w,b
 17858  0032E0  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 17859  0032E2  5196               	movf	(??i2_FSH_Write_IR_RF+5)& (0+255),w,b
 17860  0032E4  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 17861  0032E6  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 17862  0032E8  EC60  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 17863                           
 17864                           ; BSR set to: 0
 17865                           ;FLASH.c: 487: EECON1bits.FREE = 0;
 17866  0032EC  98A6               	bcf	4006,4,c	;volatile
 17867  0032EE  84A6               	bsf	4006,2,c	;# 
 17868  0032F0  9EF2               	bcf	intcon,7,c	;# 
 17869  0032F2  0E55               	movlw	85	;# 
 17870  0032F4  6EA7               	movwf	4007,c	;# 
 17871  0032F6  0EAA               	movlw	170	;# 
 17872  0032F8  6EA7               	movwf	4007,c	;# 
 17873  0032FA  82A6               	bsf	4006,1,c	;# 
 17874                           
 17875                           ;FLASH.c: 498: for(i=0; i<64;i++)
 17876  0032FC  0100               	movlb	0	; () banked
 17877  0032FE  6B9D               	clrf	i2FSH_Write_IR_RF@i& (0+255),b
 17878  003300  6B9E               	clrf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 17879  003302                     i2l5931:
 17880                           
 17881                           ; BSR set to: 0
 17882  003302  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17883  003304  E11A               	bnz	i2l5949
 17884  003306  0E40               	movlw	64
 17885  003308  5D9D               	subwf	i2FSH_Write_IR_RF@i& (0+255),w,b
 17886  00330A  E217               	bc	i2l5949
 17887                           
 17888                           ; BSR set to: 0
 17889                           ;FLASH.c: 499: {
 17890                           ;FLASH.c: 500: if(FlashWaste[FlashWasteindex] != 0xDA)
 17891  00330C  0E00               	movlw	0
 17892  00330E  2599               	addwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 17893  003310  6EF6               	movwf	tblptrl,c
 17894  003312  0E26               	movlw	38
 17895  003314  219A               	addwfc	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 17896  003316  6EF7               	movwf	tblptrh,c
 17897  003318  6AF8               	clrf	tblptru,c
 17898  00331A  0E00               	movlw	0
 17899  00331C  22F8               	addwfc	tblptru,f,c
 17900  00331E  0008               	tblrd		*
 17901  003320  50F5               	movf	tablat,w,c
 17902  003322  0ADA               	xorlw	218
 17903  003324  E005               	bz	i2l5945
 17904                           
 17905                           ; BSR set to: 0
 17906                           ;FLASH.c: 501: {
 17907                           ;FLASH.c: 502: WriteTries++;
 17908  003326  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17909                           
 17910                           ; BSR set to: 0
 17911                           ;FLASH.c: 503: if(WriteTries > 10)
 17912  003328  0E0A               	movlw	10
 17913  00332A  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17914  00332C  D790               	goto	i2l5907
 17915  00332E  D687               	goto	i2l5779
 17916  003330                     i2l5945:
 17917                           
 17918                           ; BSR set to: 0
 17919                           ;FLASH.c: 511: }
 17920                           ;FLASH.c: 512: }
 17921                           ;FLASH.c: 513: FlashWasteindex++;
 17922  003330  4B99               	infsnz	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),f,b
 17923  003332  2B9A               	incf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),f,b
 17924  003334  4B9D               	infsnz	i2FSH_Write_IR_RF@i& (0+255),f,b
 17925  003336  2B9E               	incf	(i2FSH_Write_IR_RF@i+1)& (0+255),f,b
 17926  003338  D7E4               	goto	i2l5931
 17927  00333A                     i2l5949:
 17928                           
 17929                           ; BSR set to: 0
 17930  00333A  2B9B               	incf	i2FSH_Write_IR_RF@j& (0+255),f,b
 17931  00333C  D782               	goto	i2l5901
 17932  00333E                     i2l5953:
 17933                           
 17934                           ; BSR set to: 0
 17935                           ;FLASH.c: 514: }
 17936                           ;FLASH.c: 515: }
 17937                           ;FLASH.c: 516: status = 1;
 17938  00333E  0E01               	movlw	1
 17939  003340  6F9C               	movwf	i2FSH_Write_IR_RF@status& (0+255),b
 17940  003342                     i2l975:
 17941                           
 17942                           ;FLASH.c: 519: if(highint)
 17943  003342  0100               	movlb	0	; () banked
 17944  003344  5197               	movf	i2FSH_Write_IR_RF@highint& (0+255),w,b
 17945  003346  E001               	bz	i2l5957
 17946                           
 17947                           ; BSR set to: 0
 17948                           ;FLASH.c: 520: {
 17949                           ;FLASH.c: 521: INTCONbits.GIE = 1;
 17950  003348  8EF2               	bsf	intcon,7,c	;volatile
 17951  00334A                     i2l5957:
 17952                           
 17953                           ; BSR set to: 0
 17954                           ;FLASH.c: 522: }
 17955                           ;FLASH.c: 523: if(lowint)
 17956  00334A  5198               	movf	i2FSH_Write_IR_RF@lowint& (0+255),w,b
 17957  00334C  E001               	bz	i2l5961
 17958                           
 17959                           ; BSR set to: 0
 17960                           ;FLASH.c: 524: {
 17961                           ;FLASH.c: 525: INTCONbits.PEIE = 1;
 17962  00334E  8CF2               	bsf	intcon,6,c	;volatile
 17963  003350                     i2l5961:
 17964                           
 17965                           ; BSR set to: 0
 17966                           ;FLASH.c: 526: }
 17967                           ;FLASH.c: 527: return status;
 17968  003350  519C               	movf	i2FSH_Write_IR_RF@status& (0+255),w,b
 17969                           
 17970                           ; BSR set to: 0
 17971  003352  0012               	return		;funcret
 17972  003354                     __end_ofi2_FSH_Write_IR_RF:
 17973                           	opt stack 0
 17974                           tblptru	equ	0xFF8
 17975                           tblptrh	equ	0xFF7
 17976                           tblptrl	equ	0xFF6
 17977                           tablat	equ	0xFF5
 17978                           prodh	equ	0xFF4
 17979                           prodl	equ	0xFF3
 17980                           intcon	equ	0xFF2
 17981                           intcon2	equ	0xFF1
 17982                           intcon3	equ	0xFF0
 17983                           postinc0	equ	0xFEE
 17984                           wreg	equ	0xFE8
 17985                           postdec1	equ	0xFE5
 17986                           fsr1l	equ	0xFE1
 17987                           bsr	equ	0xFE0
 17988                           indf2	equ	0xFDF
 17989                           postinc2	equ	0xFDE
 17990                           postdec2	equ	0xFDD
 17991                           plusw2	equ	0xFDB
 17992                           fsr2h	equ	0xFDA
 17993                           fsr2l	equ	0xFD9
 17994                           status	equ	0xFD8
 17995                           
 17996 ;; *************** function i2_RF_ResetData *****************
 17997 ;; Defined at:
 17998 ;;		line 116 in file "RF.c"
 17999 ;; Parameters:    Size  Location     Type
 18000 ;;		None
 18001 ;; Auto vars:     Size  Location     Type
 18002 ;;		None
 18003 ;; Return value:  Size  Location     Type
 18004 ;;		None               void
 18005 ;; Registers used:
 18006 ;;		None
 18007 ;; Tracked objects:
 18008 ;;		On entry : E/0
 18009 ;;		On exit  : F/0
 18010 ;;		Unchanged: 0/0
 18011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18012 ;;      Params:         0       0       0       0       0
 18013 ;;      Locals:         0       0       0       0       0
 18014 ;;      Temps:          0       0       0       0       0
 18015 ;;      Totals:         0       0       0       0       0
 18016 ;;Total ram usage:        0 bytes
 18017 ;; Hardware stack levels used:    1
 18018 ;; This function calls:
 18019 ;;		Nothing
 18020 ;; This function is called by:
 18021 ;;		_high_isr
 18022 ;;		i2_FSH_Write_IR_RF
 18023 ;; This function uses a non-reentrant model
 18024 ;;
 18025                           
 18026                           	psect	text112
 18027  001BB8                     __ptext112:
 18028                           	opt stack 0
 18029  001BB8                     i2_RF_ResetData:
 18030                           	opt stack 17
 18031                           
 18032                           ;RF.c: 118: RF_DataPlace = 0;
 18033                           
 18034                           ; BSR set to: 0
 18035                           ;incstack = 0
 18036  001BB8  0100               	movlb	0	; () banked
 18037  001BBA  6BC9               	clrf	_RF_DataPlace& (0+255),b
 18038                           
 18039                           ;RF.c: 119: RFStarted = 0;
 18040  001BBC  6BC7               	clrf	_RFStarted& (0+255),b
 18041                           
 18042                           ; BSR set to: 0
 18043  001BBE  0012               	return		;funcret
 18044  001BC0                     __end_ofi2_RF_ResetData:
 18045                           	opt stack 0
 18046                           tblptru	equ	0xFF8
 18047                           tblptrh	equ	0xFF7
 18048                           tblptrl	equ	0xFF6
 18049                           tablat	equ	0xFF5
 18050                           prodh	equ	0xFF4
 18051                           prodl	equ	0xFF3
 18052                           intcon	equ	0xFF2
 18053                           intcon2	equ	0xFF1
 18054                           intcon3	equ	0xFF0
 18055                           postinc0	equ	0xFEE
 18056                           wreg	equ	0xFE8
 18057                           postdec1	equ	0xFE5
 18058                           fsr1l	equ	0xFE1
 18059                           bsr	equ	0xFE0
 18060                           indf2	equ	0xFDF
 18061                           postinc2	equ	0xFDE
 18062                           postdec2	equ	0xFDD
 18063                           plusw2	equ	0xFDB
 18064                           fsr2h	equ	0xFDA
 18065                           fsr2l	equ	0xFD9
 18066                           status	equ	0xFD8
 18067                           
 18068 ;; *************** function i2_MSC_BufferCopyIntConst *****************
 18069 ;; Defined at:
 18070 ;;		line 150 in file "MISC.c"
 18071 ;; Parameters:    Size  Location     Type
 18072 ;;  from            3    6[BANK0 ] PTR const unsigned int 
 18073 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 18074 ;;  to              2    9[BANK0 ] PTR unsigned int 
 18075 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 18076 ;;  count           2   11[BANK0 ] unsigned int 
 18077 ;;  shift           2   13[BANK0 ] unsigned int 
 18078 ;; Auto vars:     Size  Location     Type
 18079 ;;  MSC_BufferCo    2   15[BANK0 ] unsigned int 
 18080 ;; Return value:  Size  Location     Type
 18081 ;;		None               void
 18082 ;; Registers used:
 18083 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18084 ;; Tracked objects:
 18085 ;;		On entry : F/0
 18086 ;;		On exit  : F/0
 18087 ;;		Unchanged: 0/0
 18088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18089 ;;      Params:         0       9       0       0       0
 18090 ;;      Locals:         0       2       0       0       0
 18091 ;;      Temps:          0       0       0       0       0
 18092 ;;      Totals:         0      11       0       0       0
 18093 ;;Total ram usage:       11 bytes
 18094 ;; Hardware stack levels used:    1
 18095 ;; Hardware stack levels required when called:    1
 18096 ;; This function calls:
 18097 ;;		i2_MSC_CleanBufferInt
 18098 ;; This function is called by:
 18099 ;;		i2_FSH_Write_IR_RF
 18100 ;; This function uses a non-reentrant model
 18101 ;;
 18102                           
 18103                           	psect	text113
 18104  000E34                     __ptext113:
 18105                           	opt stack 0
 18106  000E34                     i2_MSC_BufferCopyIntConst:
 18107                           	opt stack 14
 18108                           
 18109                           ; BSR set to: 0
 18110                           ;MISC.c: 153: MSC_CleanBufferInt(to,count);
 18111                           
 18112                           ; BSR set to: 0
 18113                           
 18114                           ; BSR set to: 0
 18115                           ;incstack = 0
 18116  000E34  C089  F080         	movff	i2MSC_BufferCopyIntConst@to,i2MSC_CleanBufferInt@data
 18117  000E38  C08A  F081         	movff	i2MSC_BufferCopyIntConst@to+1,i2MSC_CleanBufferInt@data+1
 18118  000E3C  C08B  F082         	movff	i2MSC_BufferCopyIntConst@count,i2MSC_CleanBufferInt@count
 18119  000E40  C08C  F083         	movff	i2MSC_BufferCopyIntConst@count+1,i2MSC_CleanBufferInt@count+1
 18120  000E44  EC1E  F00B         	call	i2_MSC_CleanBufferInt	;wreg free
 18121                           
 18122                           ; BSR set to: 0
 18123                           ;MISC.c: 154: for(i = shift; i>0; i--)
 18124  000E48  C08D  F08F         	movff	i2MSC_BufferCopyIntConst@shift,i2MSC_BufferCopyIntConst@i
 18125  000E4C  C08E  F090         	movff	i2MSC_BufferCopyIntConst@shift+1,i2MSC_BufferCopyIntConst@i+1
 18126  000E50                     i2l4783:
 18127                           
 18128                           ; BSR set to: 0
 18129  000E50  518F               	movf	i2MSC_BufferCopyIntConst@i& (0+255),w,b
 18130  000E52  1190               	iorwf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),w,b
 18131  000E54  E02B               	bz	i2l4803
 18132                           
 18133                           ; BSR set to: 0
 18134                           ;MISC.c: 155: {
 18135                           ;MISC.c: 156: *to = ' ';
 18136  000E56  C089  FFD9         	movff	i2MSC_BufferCopyIntConst@to,fsr2l
 18137  000E5A  C08A  FFDA         	movff	i2MSC_BufferCopyIntConst@to+1,fsr2h
 18138  000E5E  0E20               	movlw	32
 18139  000E60  6EDE               	movwf	postinc2,c
 18140  000E62  6ADD               	clrf	postdec2,c
 18141                           
 18142                           ; BSR set to: 0
 18143                           ;MISC.c: 157: to++;
 18144  000E64  0E02               	movlw	2
 18145  000E66  2789               	addwf	i2MSC_BufferCopyIntConst@to& (0+255),f,b
 18146  000E68  0E00               	movlw	0
 18147  000E6A  238A               	addwfc	(i2MSC_BufferCopyIntConst@to+1)& (0+255),f,b
 18148                           
 18149                           ; BSR set to: 0
 18150  000E6C  078F               	decf	i2MSC_BufferCopyIntConst@i& (0+255),f,b
 18151  000E6E  A0D8               	btfss	status,0,c
 18152  000E70  0790               	decf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),f,b
 18153  000E72  D7EE               	goto	i2l4783
 18154  000E74                     i2l4795:
 18155                           
 18156                           ; BSR set to: 0
 18157                           ;MISC.c: 160: {
 18158                           ;MISC.c: 161: *to = *from;
 18159  000E74  C086  FFF6         	movff	i2MSC_BufferCopyIntConst@from,tblptrl
 18160  000E78  C087  FFF7         	movff	i2MSC_BufferCopyIntConst@from+1,tblptrh
 18161  000E7C  C088  FFF8         	movff	i2MSC_BufferCopyIntConst@from+2,tblptru
 18162  000E80  C089  FFD9         	movff	i2MSC_BufferCopyIntConst@to,fsr2l
 18163  000E84  C08A  FFDA         	movff	i2MSC_BufferCopyIntConst@to+1,fsr2h
 18164  000E88  0009               	tblrd		*+
 18165  000E8A  CFF5 FFDE          	movff	tablat,postinc2
 18166  000E8E  0008               	tblrd		*
 18167  000E90  CFF5 FFDD          	movff	tablat,postdec2
 18168                           
 18169                           ; BSR set to: 0
 18170                           ;MISC.c: 162: from++;
 18171  000E94  0E02               	movlw	2
 18172  000E96  2786               	addwf	i2MSC_BufferCopyIntConst@from& (0+255),f,b
 18173  000E98  0E00               	movlw	0
 18174  000E9A  2387               	addwfc	(i2MSC_BufferCopyIntConst@from+1)& (0+255),f,b
 18175  000E9C  2388               	addwfc	(i2MSC_BufferCopyIntConst@from+2)& (0+255),f,b
 18176                           
 18177                           ; BSR set to: 0
 18178                           ;MISC.c: 163: to++;
 18179  000E9E  0E02               	movlw	2
 18180  000EA0  2789               	addwf	i2MSC_BufferCopyIntConst@to& (0+255),f,b
 18181  000EA2  0E00               	movlw	0
 18182  000EA4  238A               	addwfc	(i2MSC_BufferCopyIntConst@to+1)& (0+255),f,b
 18183                           
 18184                           ; BSR set to: 0
 18185                           ;MISC.c: 164: count--;
 18186  000EA6  078B               	decf	i2MSC_BufferCopyIntConst@count& (0+255),f,b
 18187  000EA8  A0D8               	btfss	status,0,c
 18188  000EAA  078C               	decf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),f,b
 18189  000EAC                     i2l4803:
 18190                           
 18191                           ; BSR set to: 0
 18192  000EAC  C086  FFF6         	movff	i2MSC_BufferCopyIntConst@from,tblptrl
 18193  000EB0  C087  FFF7         	movff	i2MSC_BufferCopyIntConst@from+1,tblptrh
 18194  000EB4  C088  FFF8         	movff	i2MSC_BufferCopyIntConst@from+2,tblptru
 18195  000EB8  0009               	tblrd		*+
 18196  000EBA  50F5               	movf	tablat,w,c
 18197  000EBC  0009               	tblrd		*+
 18198  000EBE  10F5               	iorwf	tablat,w,c
 18199  000EC0  B4D8               	btfsc	status,2,c
 18200  000EC2  0012               	return	
 18201                           
 18202                           ; BSR set to: 0
 18203  000EC4  518B               	movf	i2MSC_BufferCopyIntConst@count& (0+255),w,b
 18204  000EC6  118C               	iorwf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),w,b
 18205  000EC8  E1D5               	bnz	i2l4795
 18206                           
 18207                           ; BSR set to: 0
 18208  000ECA  0012               	return		;funcret
 18209  000ECC                     __end_ofi2_MSC_BufferCopyIntConst:
 18210                           	opt stack 0
 18211                           tblptru	equ	0xFF8
 18212                           tblptrh	equ	0xFF7
 18213                           tblptrl	equ	0xFF6
 18214                           tablat	equ	0xFF5
 18215                           prodh	equ	0xFF4
 18216                           prodl	equ	0xFF3
 18217                           intcon	equ	0xFF2
 18218                           intcon2	equ	0xFF1
 18219                           intcon3	equ	0xFF0
 18220                           postinc0	equ	0xFEE
 18221                           wreg	equ	0xFE8
 18222                           postdec1	equ	0xFE5
 18223                           fsr1l	equ	0xFE1
 18224                           bsr	equ	0xFE0
 18225                           indf2	equ	0xFDF
 18226                           postinc2	equ	0xFDE
 18227                           postdec2	equ	0xFDD
 18228                           plusw2	equ	0xFDB
 18229                           fsr2h	equ	0xFDA
 18230                           fsr2l	equ	0xFD9
 18231                           status	equ	0xFD8
 18232                           
 18233 ;; *************** function i2_MSC_CleanBufferInt *****************
 18234 ;; Defined at:
 18235 ;;		line 90 in file "MISC.c"
 18236 ;; Parameters:    Size  Location     Type
 18237 ;;  data            2    0[BANK0 ] PTR unsigned int 
 18238 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 18239 ;;  count           2    2[BANK0 ] unsigned int 
 18240 ;; Auto vars:     Size  Location     Type
 18241 ;;  MSC_CleanBuf    2    4[BANK0 ] unsigned int 
 18242 ;; Return value:  Size  Location     Type
 18243 ;;		None               void
 18244 ;; Registers used:
 18245 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18246 ;; Tracked objects:
 18247 ;;		On entry : F/0
 18248 ;;		On exit  : F/0
 18249 ;;		Unchanged: 0/0
 18250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18251 ;;      Params:         0       4       0       0       0
 18252 ;;      Locals:         0       2       0       0       0
 18253 ;;      Temps:          0       0       0       0       0
 18254 ;;      Totals:         0       6       0       0       0
 18255 ;;Total ram usage:        6 bytes
 18256 ;; Hardware stack levels used:    1
 18257 ;; This function calls:
 18258 ;;		Nothing
 18259 ;; This function is called by:
 18260 ;;		i2_MSC_BufferCopyIntConst
 18261 ;; This function uses a non-reentrant model
 18262 ;;
 18263                           
 18264                           	psect	text114
 18265  00163C                     __ptext114:
 18266                           	opt stack 0
 18267  00163C                     i2_MSC_CleanBufferInt:
 18268                           	opt stack 14
 18269                           
 18270                           ; BSR set to: 0
 18271                           ;MISC.c: 92: unsigned int i=0;
 18272                           
 18273                           ; BSR set to: 0
 18274                           ;incstack = 0
 18275  00163C  6B84               	clrf	i2MSC_CleanBufferInt@i& (0+255),b
 18276  00163E  6B85               	clrf	(i2MSC_CleanBufferInt@i+1)& (0+255),b
 18277                           
 18278                           ;MISC.c: 93: for(i=0; i<count;i++)
 18279  001640  6B84               	clrf	i2MSC_CleanBufferInt@i& (0+255),b
 18280  001642  6B85               	clrf	(i2MSC_CleanBufferInt@i+1)& (0+255),b
 18281  001644  D00D               	goto	i2l4383
 18282  001646                     i2l4379:
 18283                           
 18284                           ; BSR set to: 0
 18285                           ;MISC.c: 94: {
 18286                           ;MISC.c: 95: data[i]= 0;
 18287  001646  90D8               	bcf	status,0,c
 18288  001648  3584               	rlcf	i2MSC_CleanBufferInt@i& (0+255),w,b
 18289  00164A  6ED9               	movwf	fsr2l,c
 18290  00164C  3585               	rlcf	(i2MSC_CleanBufferInt@i+1)& (0+255),w,b
 18291  00164E  6EDA               	movwf	fsr2h,c
 18292  001650  5180               	movf	i2MSC_CleanBufferInt@data& (0+255),w,b
 18293  001652  26D9               	addwf	fsr2l,f,c
 18294  001654  5181               	movf	(i2MSC_CleanBufferInt@data+1)& (0+255),w,b
 18295  001656  22DA               	addwfc	fsr2h,f,c
 18296  001658  6ADE               	clrf	postinc2,c
 18297  00165A  6ADD               	clrf	postdec2,c
 18298                           
 18299                           ; BSR set to: 0
 18300  00165C  4B84               	infsnz	i2MSC_CleanBufferInt@i& (0+255),f,b
 18301  00165E  2B85               	incf	(i2MSC_CleanBufferInt@i+1)& (0+255),f,b
 18302  001660                     i2l4383:
 18303                           
 18304                           ; BSR set to: 0
 18305  001660  5182               	movf	i2MSC_CleanBufferInt@count& (0+255),w,b
 18306  001662  5D84               	subwf	i2MSC_CleanBufferInt@i& (0+255),w,b
 18307  001664  5183               	movf	(i2MSC_CleanBufferInt@count+1)& (0+255),w,b
 18308  001666  5985               	subwfb	(i2MSC_CleanBufferInt@i+1)& (0+255),w,b
 18309  001668  E3EE               	bnc	i2l4379
 18310                           
 18311                           ; BSR set to: 0
 18312  00166A  0012               	return		;funcret
 18313  00166C                     __end_ofi2_MSC_CleanBufferInt:
 18314                           	opt stack 0
 18315                           tblptru	equ	0xFF8
 18316                           tblptrh	equ	0xFF7
 18317                           tblptrl	equ	0xFF6
 18318                           tablat	equ	0xFF5
 18319                           prodh	equ	0xFF4
 18320                           prodl	equ	0xFF3
 18321                           intcon	equ	0xFF2
 18322                           intcon2	equ	0xFF1
 18323                           intcon3	equ	0xFF0
 18324                           postinc0	equ	0xFEE
 18325                           wreg	equ	0xFE8
 18326                           postdec1	equ	0xFE5
 18327                           fsr1l	equ	0xFE1
 18328                           bsr	equ	0xFE0
 18329                           indf2	equ	0xFDF
 18330                           postinc2	equ	0xFDE
 18331                           postdec2	equ	0xFDD
 18332                           plusw2	equ	0xFDB
 18333                           fsr2h	equ	0xFDA
 18334                           fsr2l	equ	0xFD9
 18335                           status	equ	0xFD8
 18336                           
 18337 ;; *************** function i2_IR_ResetData *****************
 18338 ;; Defined at:
 18339 ;;		line 109 in file "IR.c"
 18340 ;; Parameters:    Size  Location     Type
 18341 ;;		None
 18342 ;; Auto vars:     Size  Location     Type
 18343 ;;		None
 18344 ;; Return value:  Size  Location     Type
 18345 ;;		None               void
 18346 ;; Registers used:
 18347 ;;		wreg, status,2, cstack
 18348 ;; Tracked objects:
 18349 ;;		On entry : F/1
 18350 ;;		On exit  : F/0
 18351 ;;		Unchanged: 0/0
 18352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18353 ;;      Params:         0       0       0       0       0
 18354 ;;      Locals:         0       0       0       0       0
 18355 ;;      Temps:          0       0       0       0       0
 18356 ;;      Totals:         0       0       0       0       0
 18357 ;;Total ram usage:        0 bytes
 18358 ;; Hardware stack levels used:    1
 18359 ;; Hardware stack levels required when called:    2
 18360 ;; This function calls:
 18361 ;;		i2_RF_Enable
 18362 ;; This function is called by:
 18363 ;;		i2_FSH_Write_IR_RF
 18364 ;; This function uses a non-reentrant model
 18365 ;;
 18366                           
 18367                           	psect	text115
 18368  001BC0                     __ptext115:
 18369                           	opt stack 0
 18370  001BC0                     i2_IR_ResetData:
 18371                           	opt stack 13
 18372                           
 18373                           ; BSR set to: 1
 18374                           ;IR.c: 111: IR_DataPlace = 0;
 18375                           
 18376                           ; BSR set to: 0
 18377                           ;incstack = 0
 18378  001BC0  6A6B               	clrf	_IR_DataPlace,c
 18379                           
 18380                           ;IR.c: 112: IRStarted = 0;
 18381  001BC2  6A69               	clrf	_IRStarted,c
 18382                           
 18383                           ; BSR set to: 1
 18384                           ;IR.c: 113: RF_Enable();
 18385  001BC4  EF20  F00D         	goto	i2_RF_Enable	;wreg free
 18386  001BC8                     __end_ofi2_IR_ResetData:
 18387                           	opt stack 0
 18388                           tblptru	equ	0xFF8
 18389                           tblptrh	equ	0xFF7
 18390                           tblptrl	equ	0xFF6
 18391                           tablat	equ	0xFF5
 18392                           prodh	equ	0xFF4
 18393                           prodl	equ	0xFF3
 18394                           intcon	equ	0xFF2
 18395                           intcon2	equ	0xFF1
 18396                           intcon3	equ	0xFF0
 18397                           postinc0	equ	0xFEE
 18398                           wreg	equ	0xFE8
 18399                           postdec1	equ	0xFE5
 18400                           fsr1l	equ	0xFE1
 18401                           bsr	equ	0xFE0
 18402                           indf2	equ	0xFDF
 18403                           postinc2	equ	0xFDE
 18404                           postdec2	equ	0xFDD
 18405                           plusw2	equ	0xFDB
 18406                           fsr2h	equ	0xFDA
 18407                           fsr2l	equ	0xFD9
 18408                           status	equ	0xFD8
 18409                           
 18410 ;; *************** function i2_RF_Enable *****************
 18411 ;; Defined at:
 18412 ;;		line 101 in file "RF.c"
 18413 ;; Parameters:    Size  Location     Type
 18414 ;;		None
 18415 ;; Auto vars:     Size  Location     Type
 18416 ;;		None
 18417 ;; Return value:  Size  Location     Type
 18418 ;;		None               void
 18419 ;; Registers used:
 18420 ;;		wreg, status,2, cstack
 18421 ;; Tracked objects:
 18422 ;;		On entry : F/1
 18423 ;;		On exit  : F/0
 18424 ;;		Unchanged: 0/0
 18425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18426 ;;      Params:         0       0       0       0       0
 18427 ;;      Locals:         0       0       0       0       0
 18428 ;;      Temps:          0       0       0       0       0
 18429 ;;      Totals:         0       0       0       0       0
 18430 ;;Total ram usage:        0 bytes
 18431 ;; Hardware stack levels used:    1
 18432 ;; Hardware stack levels required when called:    1
 18433 ;; This function calls:
 18434 ;;		i2_RF_DataInt
 18435 ;;		i2_TMR_Timer0Int
 18436 ;; This function is called by:
 18437 ;;		i2_IR_ResetData
 18438 ;; This function uses a non-reentrant model
 18439 ;;
 18440                           
 18441                           	psect	text116
 18442  001A40                     __ptext116:
 18443                           	opt stack 0
 18444  001A40                     i2_RF_Enable:
 18445                           	opt stack 13
 18446                           
 18447                           ; BSR set to: 1
 18448                           ;RF.c: 103: INTCON3bits.INT1IF = 0;
 18449                           
 18450                           ; BSR set to: 0
 18451                           ;incstack = 0
 18452  001A40  90F0               	bcf	intcon3,0,c	;volatile
 18453                           
 18454                           ;RF.c: 104: INTCON3bits.INT2IF = 0;
 18455  001A42  92F0               	bcf	intcon3,1,c	;volatile
 18456                           
 18457                           ;RF.c: 105: INTCONbits.TMR0IF = 0;
 18458  001A44  94F2               	bcf	intcon,2,c	;volatile
 18459                           
 18460                           ; BSR set to: 1
 18461                           ;RF.c: 106: RF_DataInt(1);
 18462  001A46  0E01               	movlw	1
 18463  001A48  ECE9  F00C         	call	i2_RF_DataInt
 18464                           
 18465                           ;RF.c: 107: TMR_Timer0Int(1);
 18466  001A4C  0E01               	movlw	1
 18467  001A4E  EF99  F00D         	goto	i2_TMR_Timer0Int
 18468  001A52                     __end_ofi2_RF_Enable:
 18469                           	opt stack 0
 18470                           tblptru	equ	0xFF8
 18471                           tblptrh	equ	0xFF7
 18472                           tblptrl	equ	0xFF6
 18473                           tablat	equ	0xFF5
 18474                           prodh	equ	0xFF4
 18475                           prodl	equ	0xFF3
 18476                           intcon	equ	0xFF2
 18477                           intcon2	equ	0xFF1
 18478                           intcon3	equ	0xFF0
 18479                           postinc0	equ	0xFEE
 18480                           wreg	equ	0xFE8
 18481                           postdec1	equ	0xFE5
 18482                           fsr1l	equ	0xFE1
 18483                           bsr	equ	0xFE0
 18484                           indf2	equ	0xFDF
 18485                           postinc2	equ	0xFDE
 18486                           postdec2	equ	0xFDD
 18487                           plusw2	equ	0xFDB
 18488                           fsr2h	equ	0xFDA
 18489                           fsr2l	equ	0xFD9
 18490                           status	equ	0xFD8
 18491                           
 18492 ;; *************** function i2_TMR_Timer0Int *****************
 18493 ;; Defined at:
 18494 ;;		line 332 in file "TIMERS.c"
 18495 ;; Parameters:    Size  Location     Type
 18496 ;;  state           1    wreg     unsigned char 
 18497 ;; Auto vars:     Size  Location     Type
 18498 ;;  state           1    0[BANK0 ] unsigned char 
 18499 ;; Return value:  Size  Location     Type
 18500 ;;		None               void
 18501 ;; Registers used:
 18502 ;;		wreg, status,2
 18503 ;; Tracked objects:
 18504 ;;		On entry : F/0
 18505 ;;		On exit  : F/0
 18506 ;;		Unchanged: 0/0
 18507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18508 ;;      Params:         0       0       0       0       0
 18509 ;;      Locals:         0       1       0       0       0
 18510 ;;      Temps:          0       0       0       0       0
 18511 ;;      Totals:         0       1       0       0       0
 18512 ;;Total ram usage:        1 bytes
 18513 ;; Hardware stack levels used:    1
 18514 ;; This function calls:
 18515 ;;		Nothing
 18516 ;; This function is called by:
 18517 ;;		i2_RF_Disable
 18518 ;;		i2_RF_Enable
 18519 ;; This function uses a non-reentrant model
 18520 ;;
 18521                           
 18522                           	psect	text117
 18523  001B32                     __ptext117:
 18524                           	opt stack 0
 18525  001B32                     i2_TMR_Timer0Int:
 18526                           	opt stack 16
 18527                           
 18528                           ; BSR set to: 0
 18529                           ;incstack = 0
 18530                           ;i2TMR_Timer0Int@state stored from wreg
 18531  001B32  6F80               	movwf	i2TMR_Timer0Int@state& (0+255),b
 18532                           
 18533                           ;TIMERS.c: 334: if(state)
 18534  001B34  0100               	movlb	0	; () banked
 18535  001B36  5180               	movf	i2TMR_Timer0Int@state& (0+255),w,b
 18536  001B38  E002               	bz	i2l877
 18537                           
 18538                           ; BSR set to: 0
 18539                           ;TIMERS.c: 335: {
 18540                           ;TIMERS.c: 337: INTCONbits.TMR0IE = 1;
 18541  001B3A  8AF2               	bsf	intcon,5,c	;volatile
 18542                           
 18543                           ;TIMERS.c: 338: }
 18544  001B3C  0012               	return	
 18545  001B3E                     i2l877:
 18546                           
 18547                           ; BSR set to: 0
 18548                           ;TIMERS.c: 339: else
 18549                           ;TIMERS.c: 340: {
 18550                           ;TIMERS.c: 342: INTCONbits.TMR0IE = 0;
 18551  001B3E  9AF2               	bcf	intcon,5,c	;volatile
 18552                           
 18553                           ; BSR set to: 0
 18554  001B40  0012               	return		;funcret
 18555  001B42                     __end_ofi2_TMR_Timer0Int:
 18556                           	opt stack 0
 18557                           tblptru	equ	0xFF8
 18558                           tblptrh	equ	0xFF7
 18559                           tblptrl	equ	0xFF6
 18560                           tablat	equ	0xFF5
 18561                           prodh	equ	0xFF4
 18562                           prodl	equ	0xFF3
 18563                           intcon	equ	0xFF2
 18564                           intcon2	equ	0xFF1
 18565                           intcon3	equ	0xFF0
 18566                           postinc0	equ	0xFEE
 18567                           wreg	equ	0xFE8
 18568                           postdec1	equ	0xFE5
 18569                           fsr1l	equ	0xFE1
 18570                           bsr	equ	0xFE0
 18571                           indf2	equ	0xFDF
 18572                           postinc2	equ	0xFDE
 18573                           postdec2	equ	0xFDD
 18574                           plusw2	equ	0xFDB
 18575                           fsr2h	equ	0xFDA
 18576                           fsr2l	equ	0xFD9
 18577                           status	equ	0xFD8
 18578                           
 18579 ;; *************** function i2_RF_DataInt *****************
 18580 ;; Defined at:
 18581 ;;		line 254 in file "RF.c"
 18582 ;; Parameters:    Size  Location     Type
 18583 ;;  state           1    wreg     unsigned char 
 18584 ;; Auto vars:     Size  Location     Type
 18585 ;;  state           1    0[BANK0 ] unsigned char 
 18586 ;; Return value:  Size  Location     Type
 18587 ;;		None               void
 18588 ;; Registers used:
 18589 ;;		wreg, status,2
 18590 ;; Tracked objects:
 18591 ;;		On entry : F/1
 18592 ;;		On exit  : F/0
 18593 ;;		Unchanged: 0/0
 18594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18595 ;;      Params:         0       0       0       0       0
 18596 ;;      Locals:         0       1       0       0       0
 18597 ;;      Temps:          0       0       0       0       0
 18598 ;;      Totals:         0       1       0       0       0
 18599 ;;Total ram usage:        1 bytes
 18600 ;; Hardware stack levels used:    1
 18601 ;; This function calls:
 18602 ;;		Nothing
 18603 ;; This function is called by:
 18604 ;;		i2_RF_Disable
 18605 ;;		i2_RF_Enable
 18606 ;; This function uses a non-reentrant model
 18607 ;;
 18608                           
 18609                           	psect	text118
 18610  0019D2                     __ptext118:
 18611                           	opt stack 0
 18612  0019D2                     i2_RF_DataInt:
 18613                           	opt stack 16
 18614                           
 18615                           ; BSR set to: 0
 18616                           ;incstack = 0
 18617                           ;i2RF_DataInt@state stored from wreg
 18618  0019D2  0100               	movlb	0	; () banked
 18619  0019D4  6F80               	movwf	i2RF_DataInt@state& (0+255),b
 18620                           
 18621                           ;RF.c: 257: if(state)
 18622  0019D6  5180               	movf	i2RF_DataInt@state& (0+255),w,b
 18623  0019D8  E003               	bz	i2l473
 18624                           
 18625                           ; BSR set to: 0
 18626                           ;RF.c: 258: {
 18627                           ;RF.c: 260: INTCON3bits.INT1E = 1;
 18628  0019DA  86F0               	bsf	intcon3,3,c	;volatile
 18629                           
 18630                           ;RF.c: 261: INTCON3bits.INT2E = 1;
 18631  0019DC  88F0               	bsf	intcon3,4,c	;volatile
 18632                           
 18633                           ;RF.c: 262: }
 18634  0019DE  0012               	return	
 18635  0019E0                     i2l473:
 18636                           
 18637                           ; BSR set to: 0
 18638                           ;RF.c: 263: else
 18639                           ;RF.c: 264: {
 18640                           ;RF.c: 266: INTCON3bits.INT1E = 0;
 18641  0019E0  96F0               	bcf	intcon3,3,c	;volatile
 18642                           
 18643                           ;RF.c: 267: INTCON3bits.INT2E = 0;
 18644  0019E2  98F0               	bcf	intcon3,4,c	;volatile
 18645                           
 18646                           ; BSR set to: 0
 18647  0019E4  0012               	return		;funcret
 18648  0019E6                     __end_ofi2_RF_DataInt:
 18649                           	opt stack 0
 18650                           tblptru	equ	0xFF8
 18651                           tblptrh	equ	0xFF7
 18652                           tblptrl	equ	0xFF6
 18653                           tablat	equ	0xFF5
 18654                           prodh	equ	0xFF4
 18655                           prodl	equ	0xFF3
 18656                           intcon	equ	0xFF2
 18657                           intcon2	equ	0xFF1
 18658                           intcon3	equ	0xFF0
 18659                           postinc0	equ	0xFEE
 18660                           wreg	equ	0xFE8
 18661                           postdec1	equ	0xFE5
 18662                           fsr1l	equ	0xFE1
 18663                           bsr	equ	0xFE0
 18664                           indf2	equ	0xFDF
 18665                           postinc2	equ	0xFDE
 18666                           postdec2	equ	0xFDD
 18667                           plusw2	equ	0xFDB
 18668                           fsr2h	equ	0xFDA
 18669                           fsr2l	equ	0xFD9
 18670                           status	equ	0xFD8
 18671                           
 18672 ;; *************** function i2_FSH_WriteIntArray *****************
 18673 ;; Defined at:
 18674 ;;		line 125 in file "FLASH.c"
 18675 ;; Parameters:    Size  Location     Type
 18676 ;;  ConstArray      3    4[BANK0 ] PTR const unsigned int 
 18677 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 18678 ;;  Array           2    7[BANK0 ] PTR unsigned int 
 18679 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 18680 ;; Auto vars:     Size  Location     Type
 18681 ;;  FSH_WriteInt    4   12[BANK0 ] unsigned long 
 18682 ;;  FSH_WriteInt    1   11[BANK0 ] unsigned char 
 18683 ;; Return value:  Size  Location     Type
 18684 ;;		None               void
 18685 ;; Registers used:
 18686 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18687 ;; Tracked objects:
 18688 ;;		On entry : F/0
 18689 ;;		On exit  : 0/0
 18690 ;;		Unchanged: 0/0
 18691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18692 ;;      Params:         0       5       0       0       0
 18693 ;;      Locals:         0       5       0       0       0
 18694 ;;      Temps:          0       2       0       0       0
 18695 ;;      Totals:         0      12       0       0       0
 18696 ;;Total ram usage:       12 bytes
 18697 ;; Hardware stack levels used:    1
 18698 ;; Hardware stack levels required when called:    1
 18699 ;; This function calls:
 18700 ;;		i2_FSH_AddressToBlock
 18701 ;; This function is called by:
 18702 ;;		i2_FSH_Write_IR_RF
 18703 ;; This function uses a non-reentrant model
 18704 ;;
 18705                           
 18706                           	psect	text119
 18707  000BBC                     __ptext119:
 18708                           	opt stack 0
 18709  000BBC                     i2_FSH_WriteIntArray:
 18710                           	opt stack 14
 18711                           
 18712                           ; BSR set to: 0
 18713                           ;FLASH.c: 127: unsigned char i;
 18714                           ;FLASH.c: 128: unsigned long address = ConstArray;
 18715                           
 18716                           ; BSR set to: 0
 18717                           ;incstack = 0
 18718  000BBC  5184               	movf	i2FSH_WriteIntArray@ConstArray& (0+255),w,b
 18719  000BBE  6F8C               	movwf	i2FSH_WriteIntArray@address& (0+255),b
 18720  000BC0  5185               	movf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),w,b
 18721  000BC2  6F8D               	movwf	(i2FSH_WriteIntArray@address+1)& (0+255),b
 18722  000BC4  5186               	movf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),w,b
 18723  000BC6  6F8E               	movwf	(i2FSH_WriteIntArray@address+2)& (0+255),b
 18724  000BC8  6B8F               	clrf	(i2FSH_WriteIntArray@address+3)& (0+255),b
 18725                           
 18726                           ; BSR set to: 0
 18727                           ;FLASH.c: 131: FSH_AddressToBlock(address);
 18728  000BCA  C08C  F080         	movff	i2FSH_WriteIntArray@address,i2FSH_AddressToBlock@Address
 18729  000BCE  C08D  F081         	movff	i2FSH_WriteIntArray@address+1,i2FSH_AddressToBlock@Address+1
 18730  000BD2  C08E  F082         	movff	i2FSH_WriteIntArray@address+2,i2FSH_AddressToBlock@Address+2
 18731  000BD6  C08F  F083         	movff	i2FSH_WriteIntArray@address+3,i2FSH_AddressToBlock@Address+3
 18732  000BDA  EC60  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 18733                           
 18734                           ; BSR set to: 0
 18735                           ;FLASH.c: 133: if(address < 0x2400 || address >= 0x2800)
 18736  000BDE  518F               	movf	(i2FSH_WriteIntArray@address+3)& (0+255),w,b
 18737  000BE0  118E               	iorwf	(i2FSH_WriteIntArray@address+2)& (0+255),w,b
 18738  000BE2  E103               	bnz	i2u452_40
 18739  000BE4  0E24               	movlw	36
 18740  000BE6  5D8D               	subwf	(i2FSH_WriteIntArray@address+1)& (0+255),w,b
 18741  000BE8  E306               	bnc	i2l961
 18742  000BEA                     i2u452_40:
 18743                           
 18744                           ; BSR set to: 0
 18745  000BEA  518F               	movf	(i2FSH_WriteIntArray@address+3)& (0+255),w,b
 18746  000BEC  118E               	iorwf	(i2FSH_WriteIntArray@address+2)& (0+255),w,b
 18747  000BEE  E103               	bnz	i2u453_40
 18748  000BF0  0E28               	movlw	40
 18749  000BF2  5D8D               	subwf	(i2FSH_WriteIntArray@address+1)& (0+255),w,b
 18750  000BF4  E301               	bnc	i2l959
 18751  000BF6                     i2u453_40:
 18752  000BF6                     i2l961:
 18753                           
 18754                           ; BSR set to: 0
 18755  000BF6  00FF               	reset		;# 
 18756  000BF8                     i2l959:
 18757                           
 18758                           ;FLASH.c: 137: }
 18759                           ;FLASH.c: 139: for(i = 0; i<32; i++)
 18760  000BF8  0100               	movlb	0	; () banked
 18761  000BFA  6B8B               	clrf	i2FSH_WriteIntArray@i& (0+255),b
 18762  000BFC                     i2l4857:
 18763                           
 18764                           ; BSR set to: 0
 18765                           ;FLASH.c: 140: {
 18766                           ;FLASH.c: 142: TABLAT = *Array;
 18767  000BFC  C087  FFD9         	movff	i2FSH_WriteIntArray@Array,fsr2l
 18768  000C00  C088  FFDA         	movff	i2FSH_WriteIntArray@Array+1,fsr2h
 18769  000C04  50DF               	movf	indf2,w,c
 18770  000C06  6EF5               	movwf	tablat,c	;volatile
 18771  000C08  000D               	tblwt		*+	;# 
 18772                           
 18773                           ;FLASH.c: 144: TABLAT = *Array >> 8;
 18774  000C0A  C087  FFD9         	movff	i2FSH_WriteIntArray@Array,fsr2l
 18775  000C0E  C088  FFDA         	movff	i2FSH_WriteIntArray@Array+1,fsr2h
 18776  000C12  CFDE F089          	movff	postinc2,??i2_FSH_WriteIntArray
 18777  000C16  CFDD F08A          	movff	postdec2,??i2_FSH_WriteIntArray+1
 18778  000C1A  C08A  F089         	movff	??i2_FSH_WriteIntArray+1,??i2_FSH_WriteIntArray
 18779  000C1E  0100               	movlb	0	; () banked
 18780  000C20  6B8A               	clrf	(??i2_FSH_WriteIntArray+1)& (0+255),b
 18781  000C22  5189               	movf	??i2_FSH_WriteIntArray& (0+255),w,b
 18782  000C24  6EF5               	movwf	tablat,c	;volatile
 18783  000C26  000D               	tblwt		*+	;# 
 18784                           
 18785                           ;FLASH.c: 146: Array++;
 18786  000C28  0E02               	movlw	2
 18787  000C2A  2787               	addwf	i2FSH_WriteIntArray@Array& (0+255),f,b
 18788  000C2C  0E00               	movlw	0
 18789  000C2E  2388               	addwfc	(i2FSH_WriteIntArray@Array+1)& (0+255),f,b
 18790                           
 18791                           ; BSR set to: 0
 18792  000C30  2B8B               	incf	i2FSH_WriteIntArray@i& (0+255),f,b
 18793                           
 18794                           ; BSR set to: 0
 18795  000C32  0E1F               	movlw	31
 18796  000C34  658B               	cpfsgt	i2FSH_WriteIntArray@i& (0+255),b
 18797  000C36  D7E2               	goto	i2l4857
 18798                           
 18799                           ; BSR set to: 0
 18800                           ;FLASH.c: 147: }
 18801                           ;FLASH.c: 150: FSH_AddressToBlock(address);
 18802  000C38  C08C  F080         	movff	i2FSH_WriteIntArray@address,i2FSH_AddressToBlock@Address
 18803  000C3C  C08D  F081         	movff	i2FSH_WriteIntArray@address+1,i2FSH_AddressToBlock@Address+1
 18804  000C40  C08E  F082         	movff	i2FSH_WriteIntArray@address+2,i2FSH_AddressToBlock@Address+2
 18805  000C44  C08F  F083         	movff	i2FSH_WriteIntArray@address+3,i2FSH_AddressToBlock@Address+3
 18806  000C48  EC60  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 18807                           
 18808                           ; BSR set to: 0
 18809                           ;FLASH.c: 152: EECON1bits.WRERR = 0;
 18810  000C4C  96A6               	bcf	4006,3,c	;volatile
 18811                           
 18812                           ; BSR set to: 0
 18813                           ;FLASH.c: 153: EECON1bits.FREE = 0;
 18814  000C4E  98A6               	bcf	4006,4,c	;volatile
 18815  000C50  84A6               	bsf	4006,2,c	;# 
 18816  000C52  9EF2               	bcf	intcon,7,c	;# 
 18817  000C54  0E55               	movlw	85	;# 
 18818  000C56  6EA7               	movwf	4007,c	;# 
 18819  000C58  0EAA               	movlw	170	;# 
 18820  000C5A  6EA7               	movwf	4007,c	;# 
 18821  000C5C  82A6               	bsf	4006,1,c	;# 
 18822  000C5E  0CAA               	retlw	170	;funcret
 18823  000C60                     __end_ofi2_FSH_WriteIntArray:
 18824                           	opt stack 0
 18825                           tblptru	equ	0xFF8
 18826                           tblptrh	equ	0xFF7
 18827                           tblptrl	equ	0xFF6
 18828                           tablat	equ	0xFF5
 18829                           prodh	equ	0xFF4
 18830                           prodl	equ	0xFF3
 18831                           intcon	equ	0xFF2
 18832                           intcon2	equ	0xFF1
 18833                           intcon3	equ	0xFF0
 18834                           postinc0	equ	0xFEE
 18835                           wreg	equ	0xFE8
 18836                           postdec1	equ	0xFE5
 18837                           fsr1l	equ	0xFE1
 18838                           bsr	equ	0xFE0
 18839                           indf2	equ	0xFDF
 18840                           postinc2	equ	0xFDE
 18841                           postdec2	equ	0xFDD
 18842                           plusw2	equ	0xFDB
 18843                           fsr2h	equ	0xFDA
 18844                           fsr2l	equ	0xFD9
 18845                           status	equ	0xFD8
 18846                           
 18847 ;; *************** function i2_FSH_VerifyWriteIntArray *****************
 18848 ;; Defined at:
 18849 ;;		line 169 in file "FLASH.c"
 18850 ;; Parameters:    Size  Location     Type
 18851 ;;  ConstArray      3    0[BANK0 ] PTR const unsigned int 
 18852 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 18853 ;;  Array           2    3[BANK0 ] PTR unsigned int 
 18854 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 18855 ;; Auto vars:     Size  Location     Type
 18856 ;;  FSH_VerifyWr    2    8[BANK0 ] unsigned int 
 18857 ;;  FSH_VerifyWr    1   11[BANK0 ] unsigned char 
 18858 ;;  FSH_VerifyWr    1   10[BANK0 ] unsigned char 
 18859 ;; Return value:  Size  Location     Type
 18860 ;;                  1    wreg      unsigned char 
 18861 ;; Registers used:
 18862 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18863 ;; Tracked objects:
 18864 ;;		On entry : F/0
 18865 ;;		On exit  : F/0
 18866 ;;		Unchanged: 0/0
 18867 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18868 ;;      Params:         0       5       0       0       0
 18869 ;;      Locals:         0       4       0       0       0
 18870 ;;      Temps:          0       3       0       0       0
 18871 ;;      Totals:         0      12       0       0       0
 18872 ;;Total ram usage:       12 bytes
 18873 ;; Hardware stack levels used:    1
 18874 ;; This function calls:
 18875 ;;		Nothing
 18876 ;; This function is called by:
 18877 ;;		i2_FSH_Write_IR_RF
 18878 ;; This function uses a non-reentrant model
 18879 ;;
 18880                           
 18881                           	psect	text120
 18882  001230                     __ptext120:
 18883                           	opt stack 0
 18884  001230                     i2_FSH_VerifyWriteIntArray:
 18885                           	opt stack 15
 18886                           
 18887                           ; BSR set to: 0
 18888                           ;FLASH.c: 171: unsigned char i;
 18889                           ;FLASH.c: 172: unsigned int data;
 18890                           ;FLASH.c: 173: unsigned char failcount = 0;
 18891                           
 18892                           ;incstack = 0
 18893  001230  6B8A               	clrf	i2FSH_VerifyWriteIntArray@failcount& (0+255),b
 18894                           
 18895                           ;FLASH.c: 175: for(i = 0; i<32; i++)
 18896  001232  6B8B               	clrf	i2FSH_VerifyWriteIntArray@i& (0+255),b
 18897  001234                     i2l4877:
 18898                           
 18899                           ; BSR set to: 0
 18900                           ;FLASH.c: 176: {
 18901                           ;FLASH.c: 177: data = ConstArray[i];
 18902  001234  518B               	movf	i2FSH_VerifyWriteIntArray@i& (0+255),w,b
 18903  001236  0D02               	mullw	2
 18904  001238  50F3               	movf	prodl,w,c
 18905  00123A  2580               	addwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),w,b
 18906  00123C  6F85               	movwf	??i2_FSH_VerifyWriteIntArray& (0+255),b
 18907  00123E  50F4               	movf	prodh,w,c
 18908  001240  2181               	addwfc	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),w,b
 18909  001242  6F86               	movwf	(??i2_FSH_VerifyWriteIntArray+1)& (0+255),b
 18910  001244  0E00               	movlw	0
 18911  001246  2182               	addwfc	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),w,b
 18912  001248  6F87               	movwf	(??i2_FSH_VerifyWriteIntArray+2)& (0+255),b
 18913  00124A  C085  FFF6         	movff	??i2_FSH_VerifyWriteIntArray,tblptrl
 18914  00124E  C086  FFF7         	movff	??i2_FSH_VerifyWriteIntArray+1,tblptrh
 18915  001252  C087  FFF8         	movff	??i2_FSH_VerifyWriteIntArray+2,tblptru
 18916  001256  0009               	tblrd		*+
 18917  001258  CFF5 F088          	movff	tablat,i2FSH_VerifyWriteIntArray@data
 18918  00125C  000A               	tblrd		*-
 18919  00125E  CFF5 F089          	movff	tablat,i2FSH_VerifyWriteIntArray@data+1
 18920                           
 18921                           ; BSR set to: 0
 18922                           ;FLASH.c: 178: if(data != Array[i])
 18923  001262  518B               	movf	i2FSH_VerifyWriteIntArray@i& (0+255),w,b
 18924  001264  0D02               	mullw	2
 18925  001266  50F3               	movf	prodl,w,c
 18926  001268  2583               	addwf	i2FSH_VerifyWriteIntArray@Array& (0+255),w,b
 18927  00126A  6ED9               	movwf	fsr2l,c
 18928  00126C  50F4               	movf	prodh,w,c
 18929  00126E  2184               	addwfc	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),w,b
 18930  001270  6EDA               	movwf	fsr2h,c
 18931  001272  5188               	movf	i2FSH_VerifyWriteIntArray@data& (0+255),w,b
 18932  001274  18DE               	xorwf	postinc2,w,c
 18933  001276  E103               	bnz	i2u455_40
 18934  001278  5189               	movf	(i2FSH_VerifyWriteIntArray@data+1)& (0+255),w,b
 18935  00127A  18DE               	xorwf	postinc2,w,c
 18936  00127C  E001               	bz	i2l969
 18937  00127E                     i2u455_40:
 18938                           
 18939                           ; BSR set to: 0
 18940                           ;FLASH.c: 179: {
 18941                           ;FLASH.c: 180: failcount++;
 18942  00127E  2B8A               	incf	i2FSH_VerifyWriteIntArray@failcount& (0+255),f,b
 18943  001280                     i2l969:
 18944                           
 18945                           ; BSR set to: 0
 18946  001280  2B8B               	incf	i2FSH_VerifyWriteIntArray@i& (0+255),f,b
 18947                           
 18948                           ; BSR set to: 0
 18949  001282  0E1F               	movlw	31
 18950  001284  658B               	cpfsgt	i2FSH_VerifyWriteIntArray@i& (0+255),b
 18951  001286  D7D6               	goto	i2l4877
 18952                           
 18953                           ; BSR set to: 0
 18954                           ;FLASH.c: 181: }
 18955                           ;FLASH.c: 182: }
 18956                           ;FLASH.c: 183: if(failcount)
 18957  001288  518A               	movf	i2FSH_VerifyWriteIntArray@failcount& (0+255),w,b
 18958  00128A  E001               	bz	i2l4891
 18959                           
 18960                           ; BSR set to: 0
 18961                           ;FLASH.c: 184: {
 18962                           ;FLASH.c: 185: return 0;
 18963  00128C  0C00               	retlw	0
 18964  00128E                     i2l4891:
 18965                           
 18966                           ; BSR set to: 0
 18967                           
 18968                           ; BSR set to: 0
 18969                           ;FLASH.c: 186: }
 18970                           ;FLASH.c: 187: return 1;
 18971  00128E  0C01               	retlw	1	;funcret
 18972  001290                     __end_ofi2_FSH_VerifyWriteIntArray:
 18973                           	opt stack 0
 18974                           tblptru	equ	0xFF8
 18975                           tblptrh	equ	0xFF7
 18976                           tblptrl	equ	0xFF6
 18977                           tablat	equ	0xFF5
 18978                           prodh	equ	0xFF4
 18979                           prodl	equ	0xFF3
 18980                           intcon	equ	0xFF2
 18981                           intcon2	equ	0xFF1
 18982                           intcon3	equ	0xFF0
 18983                           postinc0	equ	0xFEE
 18984                           wreg	equ	0xFE8
 18985                           postdec1	equ	0xFE5
 18986                           fsr1l	equ	0xFE1
 18987                           bsr	equ	0xFE0
 18988                           indf2	equ	0xFDF
 18989                           postinc2	equ	0xFDE
 18990                           postdec2	equ	0xFDD
 18991                           plusw2	equ	0xFDB
 18992                           fsr2h	equ	0xFDA
 18993                           fsr2l	equ	0xFD9
 18994                           status	equ	0xFD8
 18995                           
 18996 ;; *************** function i2_FSH_EraseBlock *****************
 18997 ;; Defined at:
 18998 ;;		line 72 in file "FLASH.c"
 18999 ;; Parameters:    Size  Location     Type
 19000 ;;  Address         4    4[BANK0 ] unsigned long 
 19001 ;; Auto vars:     Size  Location     Type
 19002 ;;  FSH_EraseBlo    1   10[BANK0 ] unsigned char 
 19003 ;;  FSH_EraseBlo    1    9[BANK0 ] unsigned char 
 19004 ;;  FSH_EraseBlo    1    8[BANK0 ] unsigned char 
 19005 ;; Return value:  Size  Location     Type
 19006 ;;		None               void
 19007 ;; Registers used:
 19008 ;;		wreg, status,2, status,0, cstack
 19009 ;; Tracked objects:
 19010 ;;		On entry : F/0
 19011 ;;		On exit  : F/0
 19012 ;;		Unchanged: 0/0
 19013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 19014 ;;      Params:         0       4       0       0       0
 19015 ;;      Locals:         0       3       0       0       0
 19016 ;;      Temps:          0       0       0       0       0
 19017 ;;      Totals:         0       7       0       0       0
 19018 ;;Total ram usage:        7 bytes
 19019 ;; Hardware stack levels used:    1
 19020 ;; Hardware stack levels required when called:    1
 19021 ;; This function calls:
 19022 ;;		i2_FSH_AddressToBlock
 19023 ;; This function is called by:
 19024 ;;		i2_FSH_Write_IR_RF
 19025 ;; This function uses a non-reentrant model
 19026 ;;
 19027                           
 19028                           	psect	text121
 19029  0010E8                     __ptext121:
 19030                           	opt stack 0
 19031  0010E8                     i2_FSH_EraseBlock:
 19032                           	opt stack 14
 19033                           
 19034                           ; BSR set to: 0
 19035                           ;FLASH.c: 74: unsigned char highint = INTCONbits.GIE;
 19036                           
 19037                           ; BSR set to: 0
 19038                           ;incstack = 0
 19039  0010E8  0E00               	movlw	0
 19040  0010EA  BEF2               	btfsc	intcon,7,c	;volatile
 19041  0010EC  0E01               	movlw	1
 19042  0010EE  6F88               	movwf	i2FSH_EraseBlock@highint& (0+255),b
 19043                           
 19044                           ;FLASH.c: 75: unsigned char lowint = INTCONbits.PEIE;
 19045  0010F0  0E00               	movlw	0
 19046  0010F2  BCF2               	btfsc	intcon,6,c	;volatile
 19047  0010F4  0E01               	movlw	1
 19048  0010F6  6F89               	movwf	i2FSH_EraseBlock@lowint& (0+255),b
 19049                           
 19050                           ; BSR set to: 0
 19051                           ;FLASH.c: 76: unsigned char WriteTries;
 19052                           ;FLASH.c: 78: if(Address < 0x2400 || Address >= 0x2800)
 19053  0010F8  5187               	movf	(i2FSH_EraseBlock@Address+3)& (0+255),w,b
 19054  0010FA  1186               	iorwf	(i2FSH_EraseBlock@Address+2)& (0+255),w,b
 19055  0010FC  E103               	bnz	i2u446_40
 19056  0010FE  0E24               	movlw	36
 19057  001100  5D85               	subwf	(i2FSH_EraseBlock@Address+1)& (0+255),w,b
 19058  001102  E306               	bnc	i2l950
 19059  001104                     i2u446_40:
 19060                           
 19061                           ; BSR set to: 0
 19062  001104  5187               	movf	(i2FSH_EraseBlock@Address+3)& (0+255),w,b
 19063  001106  1186               	iorwf	(i2FSH_EraseBlock@Address+2)& (0+255),w,b
 19064  001108  E103               	bnz	i2u447_40
 19065  00110A  0E28               	movlw	40
 19066  00110C  5D85               	subwf	(i2FSH_EraseBlock@Address+1)& (0+255),w,b
 19067  00110E  E301               	bnc	i2l948
 19068  001110                     i2u447_40:
 19069  001110                     i2l950:
 19070                           
 19071                           ; BSR set to: 0
 19072  001110  00FF               	reset		;# 
 19073  001112                     i2l948:
 19074                           
 19075                           ;FLASH.c: 82: }
 19076                           ;FLASH.c: 84: INTCONbits.GIE = 0;
 19077  001112  9EF2               	bcf	intcon,7,c	;volatile
 19078                           
 19079                           ;FLASH.c: 85: INTCONbits.PEIE = 0;
 19080  001114  9CF2               	bcf	intcon,6,c	;volatile
 19081  001116                     i2l4825:
 19082                           
 19083                           ;FLASH.c: 88: FSH_AddressToBlock(Address);
 19084  001116  C084  F080         	movff	i2FSH_EraseBlock@Address,i2FSH_AddressToBlock@Address
 19085  00111A  C085  F081         	movff	i2FSH_EraseBlock@Address+1,i2FSH_AddressToBlock@Address+1
 19086  00111E  C086  F082         	movff	i2FSH_EraseBlock@Address+2,i2FSH_AddressToBlock@Address+2
 19087  001122  C087  F083         	movff	i2FSH_EraseBlock@Address+3,i2FSH_AddressToBlock@Address+3
 19088  001126  EC60  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 19089                           
 19090                           ; BSR set to: 0
 19091                           ;FLASH.c: 90: WriteTries = 1;
 19092  00112A  0E01               	movlw	1
 19093  00112C  6F8A               	movwf	i2FSH_EraseBlock@WriteTries& (0+255),b
 19094  00112E  84A6               	bsf	4006,2,c	;# 
 19095  001130  88A6               	bsf	4006,4,c	;# 
 19096  001132  9EF2               	bcf	intcon,7,c	;# 
 19097  001134  0E55               	movlw	85	;# 
 19098  001136  6EA7               	movwf	4007,c	;# 
 19099  001138  0EAA               	movlw	170	;# 
 19100  00113A  6EA7               	movwf	4007,c	;# 
 19101  00113C  82A6               	bsf	4006,1,c	;# 
 19102                           
 19103                           ;FLASH.c: 101: if(EECON1bits.WRERR)
 19104  00113E  A6A6               	btfss	4006,3,c	;volatile
 19105  001140  D006               	goto	i2l4837
 19106                           
 19107                           ;FLASH.c: 102: {
 19108                           ;FLASH.c: 103: WriteTries++;
 19109  001142  0100               	movlb	0	; () banked
 19110  001144  2B8A               	incf	i2FSH_EraseBlock@WriteTries& (0+255),f,b
 19111                           
 19112                           ; BSR set to: 0
 19113                           ;FLASH.c: 104: if(WriteTries < 10)
 19114  001146  0E0A               	movlw	10
 19115  001148  618A               	cpfslt	i2FSH_EraseBlock@WriteTries& (0+255),b
 19116  00114A  D001               	goto	i2l4837
 19117  00114C  D7E4               	goto	i2l4825
 19118  00114E                     i2l4837:
 19119                           
 19120                           ;FLASH.c: 107: }
 19121                           ;FLASH.c: 108: }
 19122                           ;FLASH.c: 110: if(highint)
 19123  00114E  0100               	movlb	0	; () banked
 19124  001150  5188               	movf	i2FSH_EraseBlock@highint& (0+255),w,b
 19125  001152  E001               	bz	i2l4841
 19126                           
 19127                           ; BSR set to: 0
 19128                           ;FLASH.c: 111: {
 19129                           ;FLASH.c: 112: INTCONbits.GIE = 1;
 19130  001154  8EF2               	bsf	intcon,7,c	;volatile
 19131  001156                     i2l4841:
 19132                           
 19133                           ; BSR set to: 0
 19134                           ;FLASH.c: 113: }
 19135                           ;FLASH.c: 114: if(lowint)
 19136  001156  5189               	movf	i2FSH_EraseBlock@lowint& (0+255),w,b
 19137  001158  A4D8               	btfss	status,2,c
 19138                           
 19139                           ; BSR set to: 0
 19140                           ;FLASH.c: 115: {
 19141                           ;FLASH.c: 116: INTCONbits.PEIE = 1;
 19142  00115A  8CF2               	bsf	intcon,6,c	;volatile
 19143                           
 19144                           ; BSR set to: 0
 19145  00115C  0012               	return		;funcret
 19146  00115E                     __end_ofi2_FSH_EraseBlock:
 19147                           	opt stack 0
 19148                           tblptru	equ	0xFF8
 19149                           tblptrh	equ	0xFF7
 19150                           tblptrl	equ	0xFF6
 19151                           tablat	equ	0xFF5
 19152                           prodh	equ	0xFF4
 19153                           prodl	equ	0xFF3
 19154                           intcon	equ	0xFF2
 19155                           intcon2	equ	0xFF1
 19156                           intcon3	equ	0xFF0
 19157                           postinc0	equ	0xFEE
 19158                           wreg	equ	0xFE8
 19159                           postdec1	equ	0xFE5
 19160                           fsr1l	equ	0xFE1
 19161                           bsr	equ	0xFE0
 19162                           indf2	equ	0xFDF
 19163                           postinc2	equ	0xFDE
 19164                           postdec2	equ	0xFDD
 19165                           plusw2	equ	0xFDB
 19166                           fsr2h	equ	0xFDA
 19167                           fsr2l	equ	0xFD9
 19168                           status	equ	0xFD8
 19169                           
 19170 ;; *************** function i2_FSH_AddressToBlock *****************
 19171 ;; Defined at:
 19172 ;;		line 536 in file "FLASH.c"
 19173 ;; Parameters:    Size  Location     Type
 19174 ;;  Address         4    0[BANK0 ] unsigned long 
 19175 ;; Auto vars:     Size  Location     Type
 19176 ;;		None
 19177 ;; Return value:  Size  Location     Type
 19178 ;;		None               void
 19179 ;; Registers used:
 19180 ;;		wreg, status,2, status,0
 19181 ;; Tracked objects:
 19182 ;;		On entry : 0/0
 19183 ;;		On exit  : F/0
 19184 ;;		Unchanged: 0/0
 19185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 19186 ;;      Params:         0       4       0       0       0
 19187 ;;      Locals:         0       0       0       0       0
 19188 ;;      Temps:          0       0       0       0       0
 19189 ;;      Totals:         0       4       0       0       0
 19190 ;;Total ram usage:        4 bytes
 19191 ;; Hardware stack levels used:    1
 19192 ;; This function calls:
 19193 ;;		Nothing
 19194 ;; This function is called by:
 19195 ;;		i2_FSH_EraseBlock
 19196 ;;		i2_FSH_WriteIntArray
 19197 ;;		i2_FSH_Write_IR_RF
 19198 ;; This function uses a non-reentrant model
 19199 ;;
 19200                           
 19201                           	psect	text122
 19202  0016C0                     __ptext122:
 19203                           	opt stack 0
 19204  0016C0                     i2_FSH_AddressToBlock:
 19205                           	opt stack 14
 19206                           
 19207                           ;FLASH.c: 538: if(Address > 0x3600)
 19208                           
 19209                           ; BSR set to: 0
 19210                           ;incstack = 0
 19211  0016C0  0100               	movlb	0	; () banked
 19212  0016C2  5183               	movf	(i2FSH_AddressToBlock@Address+3)& (0+255),w,b
 19213  0016C4  1182               	iorwf	(i2FSH_AddressToBlock@Address+2)& (0+255),w,b
 19214  0016C6  E104               	bnz	i2u380_40
 19215  0016C8  0580               	decf	i2FSH_AddressToBlock@Address& (0+255),w,b
 19216  0016CA  0E36               	movlw	54
 19217  0016CC  5981               	subwfb	(i2FSH_AddressToBlock@Address+1)& (0+255),w,b
 19218  0016CE  E305               	bnc	i2l4389
 19219  0016D0                     i2u380_40:
 19220                           
 19221                           ; BSR set to: 0
 19222                           ;FLASH.c: 539: {
 19223                           ;FLASH.c: 540: Address = 0x3600;
 19224  0016D0  6B80               	clrf	i2FSH_AddressToBlock@Address& (0+255),b
 19225  0016D2  0E36               	movlw	54
 19226  0016D4  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 19227  0016D6  6B82               	clrf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 19228  0016D8  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 19229  0016DA                     i2l4389:
 19230                           
 19231                           ; BSR set to: 0
 19232                           ;FLASH.c: 541: }
 19233                           ;FLASH.c: 542: TBLPTRU = (Address & 0x002F0000) >> 16;
 19234  0016DA  5182               	movf	(i2FSH_AddressToBlock@Address+2)& (0+255),w,b
 19235  0016DC  0B2F               	andlw	47
 19236  0016DE  6EF8               	movwf	tblptru,c	;volatile
 19237                           
 19238                           ; BSR set to: 0
 19239                           ;FLASH.c: 543: TBLPTRH = (Address & 0x0000FF00) >> 8;
 19240  0016E0  C081  FFF7         	movff	i2FSH_AddressToBlock@Address+1,tblptrh	;volatile
 19241                           
 19242                           ; BSR set to: 0
 19243                           ;FLASH.c: 544: TBLPTRL = (Address & 0x000000FF);
 19244  0016E4  C080  FFF6         	movff	i2FSH_AddressToBlock@Address,tblptrl	;volatile
 19245                           
 19246                           ; BSR set to: 0
 19247  0016E8  0012               	return		;funcret
 19248  0016EA                     __end_ofi2_FSH_AddressToBlock:
 19249                           	opt stack 0
 19250                           tblptru	equ	0xFF8
 19251                           tblptrh	equ	0xFF7
 19252                           tblptrl	equ	0xFF6
 19253                           tablat	equ	0xFF5
 19254                           prodh	equ	0xFF4
 19255                           prodl	equ	0xFF3
 19256                           intcon	equ	0xFF2
 19257                           intcon2	equ	0xFF1
 19258                           intcon3	equ	0xFF0
 19259                           postinc0	equ	0xFEE
 19260                           wreg	equ	0xFE8
 19261                           postdec1	equ	0xFE5
 19262                           fsr1l	equ	0xFE1
 19263                           bsr	equ	0xFE0
 19264                           indf2	equ	0xFDF
 19265                           postinc2	equ	0xFDE
 19266                           postdec2	equ	0xFDD
 19267                           plusw2	equ	0xFDB
 19268                           fsr2h	equ	0xFDA
 19269                           fsr2l	equ	0xFD9
 19270                           status	equ	0xFD8
 19271                           
 19272                           	psect	mediumconst
 19273  002800                     __pmediumconst:
 19274                           	opt stack 0
 19275  002800  00                 	db	0
 19276  002801  00                 	db	0	; dummy byte at the end
 19277  0000                     tblptru	equ	0xFF8
 19278                           tblptrh	equ	0xFF7
 19279                           tblptrl	equ	0xFF6
 19280                           tablat	equ	0xFF5
 19281                           prodh	equ	0xFF4
 19282                           prodl	equ	0xFF3
 19283                           intcon	equ	0xFF2
 19284                           intcon2	equ	0xFF1
 19285                           intcon3	equ	0xFF0
 19286                           postinc0	equ	0xFEE
 19287                           wreg	equ	0xFE8
 19288                           postdec1	equ	0xFE5
 19289                           fsr1l	equ	0xFE1
 19290                           bsr	equ	0xFE0
 19291                           indf2	equ	0xFDF
 19292                           postinc2	equ	0xFDE
 19293                           postdec2	equ	0xFDD
 19294                           plusw2	equ	0xFDB
 19295                           fsr2h	equ	0xFDA
 19296                           fsr2l	equ	0xFD9
 19297                           status	equ	0xFD8
 19298                           tblptru	equ	0xFF8
 19299                           tblptrh	equ	0xFF7
 19300                           tblptrl	equ	0xFF6
 19301                           tablat	equ	0xFF5
 19302                           prodh	equ	0xFF4
 19303                           prodl	equ	0xFF3
 19304                           intcon	equ	0xFF2
 19305                           intcon2	equ	0xFF1
 19306                           intcon3	equ	0xFF0
 19307                           postinc0	equ	0xFEE
 19308                           wreg	equ	0xFE8
 19309                           postdec1	equ	0xFE5
 19310                           fsr1l	equ	0xFE1
 19311                           bsr	equ	0xFE0
 19312                           indf2	equ	0xFDF
 19313                           postinc2	equ	0xFDE
 19314                           postdec2	equ	0xFDD
 19315                           plusw2	equ	0xFDB
 19316                           fsr2h	equ	0xFDA
 19317                           fsr2l	equ	0xFD9
 19318                           status	equ	0xFD8
 19319                           
 19320                           	psect	param0
 19321  0000                     tblptru	equ	0xFF8
 19322                           tblptrh	equ	0xFF7
 19323                           tblptrl	equ	0xFF6
 19324                           tablat	equ	0xFF5
 19325                           prodh	equ	0xFF4
 19326                           prodl	equ	0xFF3
 19327                           intcon	equ	0xFF2
 19328                           intcon2	equ	0xFF1
 19329                           intcon3	equ	0xFF0
 19330                           postinc0	equ	0xFEE
 19331                           wreg	equ	0xFE8
 19332                           postdec1	equ	0xFE5
 19333                           fsr1l	equ	0xFE1
 19334                           bsr	equ	0xFE0
 19335                           indf2	equ	0xFDF
 19336                           postinc2	equ	0xFDE
 19337                           postdec2	equ	0xFDD
 19338                           plusw2	equ	0xFDB
 19339                           fsr2h	equ	0xFDA
 19340                           fsr2l	equ	0xFD9
 19341                           status	equ	0xFD8
 19342                           
 19343                           	psect	temp
 19344  00006E                     btemp:
 19345                           	opt stack 0
 19346  00006E                     	ds	1
 19347  0000                     int$flags	set	btemp
 19348                           tblptru	equ	0xFF8
 19349                           tblptrh	equ	0xFF7
 19350                           tblptrl	equ	0xFF6
 19351                           tablat	equ	0xFF5
 19352                           prodh	equ	0xFF4
 19353                           prodl	equ	0xFF3
 19354                           intcon	equ	0xFF2
 19355                           intcon2	equ	0xFF1
 19356                           intcon3	equ	0xFF0
 19357                           postinc0	equ	0xFEE
 19358                           wreg	equ	0xFE8
 19359                           postdec1	equ	0xFE5
 19360                           fsr1l	equ	0xFE1
 19361                           bsr	equ	0xFE0
 19362                           indf2	equ	0xFDF
 19363                           postinc2	equ	0xFDE
 19364                           postdec2	equ	0xFDD
 19365                           plusw2	equ	0xFDB
 19366                           fsr2h	equ	0xFDA
 19367                           fsr2l	equ	0xFD9
 19368                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         548
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     89     109
    BANK0           128     64      74
    BANK1           256     34     175
    BANK2           256      0     192
    BANK3           256      0     192

Pointer List with Targets:

    FSH_Write_IR_RF@RAMaddress	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), 

    FSH_VerifyWriteIntArray@Array	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), RF_DataTiming(BANK1[128]), 

    FSH_VerifyWriteIntArray@ConstArray	PTR const unsigned int  size(3) Largest target is 192
		 -> IR_SavedTiming1(CODE[192]), IR_SavedTiming0(CODE[192]), RF_SavedTiming(CODE[128]), 

    FSH_WriteIntArray@Array	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), RF_DataTiming(BANK1[128]), 

    FSH_WriteIntArray@ConstArray	PTR const unsigned int  size(3) Largest target is 192
		 -> IR_SavedTiming1(CODE[192]), IR_SavedTiming0(CODE[192]), RF_SavedTiming(CODE[128]), 

    MSC_BufferCopyIntConst@from	PTR const unsigned int  size(3) Largest target is 192
		 -> IR_SavedTiming1(CODE[192]), IR_SavedTiming0(CODE[192]), RF_SavedTiming(CODE[128]), 

    MSC_BufferCopyIntConst@to	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), RF_DataTiming(BANK1[128]), 

    MSC_CleanBufferInt@data	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), RF_DataTiming(BANK1[128]), 

    IR_CalculateCodesize@Code	PTR const unsigned int  size(3) Largest target is 192
		 -> IR_SavedTiming1(CODE[192]), IR_SavedTiming0(CODE[192]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    _low_isr->_IR_CheckCode
    _TMR_Timer2Start->_TMR_ResetTimer2
    _TMR_ResetTimer2->i1_TMR_Timer2
    _TMR_Timer1Start->i1_TMR_ResetTimer1
    i1_TMR_ResetTimer1->i1_TMR_Timer1
    _RF_Disable->i1_RF_DataInt
    _RF_Disable->i1_TMR_Timer0
    _RF_Disable->i1_TMR_Timer0Int
    _IR_CheckCode->i1_IR_LoadCode
    i1_IR_LoadCode->i1___ftmul
    i1___ftge->i1___lwtoft
    _FSH_Write_IR_RF->_MSC_BufferCopyIntConst
    _MSC_BufferCopyIntConst->i1_MSC_CleanBufferInt
    i1_RF_Enable->i1_RF_DataInt
    i1_RF_Enable->i1_TMR_Timer0Int
    _FSH_WriteIntArray->_FSH_AddressToBlock
    _FSH_EraseBlock->_FSH_AddressToBlock
    _ADC_CalculateVoltage->i1___ftmul
    i1___lwtoft->i1___ftpack
    i1___ftmul->___ftdiv
    ___ftdiv->i1___lwtoft

Critical Paths under _main in BANK0

    _main->_MSC_BlinkLED
    _SYS_EnableInt->_BUT_IR_PinChangeInt
    _SYS_EnableInt->_RF_DataInt
    _RF_LoadCode->___lwtoft
    _RF_Enable->_RF_DataInt
    _RF_Enable->_TMR_Timer0Int
    _MTR_Rotate->_MSC_DelayMS
    _MSC_BlinkLED->_MSC_DelayMS
    _MSC_DelayMS->_MSC_DelayNOP
    _InitTimer2->_TMR_Timer2
    _InitTimer2->_TMR_Timer2Int
    _InitTimer1->_TMR_Timer1Function
    _TMR_Timer1Function->_TMR_ResetTimer1
    _TMR_ResetTimer1->_TMR_Timer1
    _InitTimer0->_TMR_ResetTimer0
    _TMR_ResetTimer0->_TMR_Timer0
    _InitRF->_MSC_CleanBufferInt
    _InitLDO->_LDO_Pass
    _InitIR->_MSC_CleanBufferInt
    _InitButton->_BUT_IR_PinChangeInt
    _InitButton->_BUT_ReadButton
    _InitADC->_ADC_ConversionInt
    _InitADC->_ADC_Module
    _IR_LoadCode->___lwtoft
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft

Critical Paths under _high_isr in BANK0

    _high_isr->_RF_CheckCode
    i2_RF_Disable->i2_RF_DataInt
    i2_RF_Disable->i2_TMR_Timer0
    i2_RF_Disable->i2_TMR_Timer0Int
    _TMR_Timer0Start->i2_TMR_ResetTimer0
    i2_TMR_ResetTimer0->i2_TMR_Timer0
    _RF_CheckCode->i2_FSH_Write_IR_RF
    i2_RF_LoadCode->i2___ftmul
    i2___lwtoft->i2___ftpack
    i2___ftmul->i2___lwtoft
    i2___ftge->i2___lwtoft
    i2_FSH_Write_IR_RF->i2_MSC_BufferCopyIntConst
    i2_MSC_BufferCopyIntConst->i2_MSC_CleanBufferInt
    i2_RF_Enable->i2_RF_DataInt
    i2_RF_Enable->i2_TMR_Timer0Int
    i2_FSH_WriteIntArray->i2_FSH_AddressToBlock
    i2_FSH_EraseBlock->i2_FSH_AddressToBlock

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_IR_LoadCode
    _RF_LoadCode->___ftmul
    _MTR_Rotate->_MSC_DelayMS
    _MSC_BlinkLED->_MSC_DelayMS
    _IR_LoadCode->___ftmul

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   29053
                          _ADC_Start
                        _IR_LoadCode
                           _Init_App
                        _Init_System
                       _MSC_BlinkLED
                        _MSC_DelayMS
                         _MTR_Rotate
                          _RF_Enable
                        _RF_LoadCode
                  _SYS_ActivityTimer
            _SYS_ConfigureOscillator
                     _SYS_DisableInt
                      _SYS_EnableInt
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _SYS_DisableInt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYS_ConfigureOscillator                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYS_ActivityTimer                                    0     0      0      44
             _SYS_ActivityTimerReset
                      _SYS_EnableInt
                          _SYS_Sleep
 ---------------------------------------------------------------------------------
 (2) _SYS_Sleep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYS_EnableInt                                        0     0      0      44
                _BUT_IR_PinChangeInt
                         _RF_DataInt
 ---------------------------------------------------------------------------------
 (2) _SYS_ActivityTimerReset                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_LoadCode                                          6     6      0   10982
                                             14 BANK1      6     6      0
               _RF_CalculateCodesize
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _RF_CalculateCodesize                                 1     1      0      90
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _RF_Enable                                            0     0      0      44
                         _RF_DataInt
                      _TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (1) _MTR_Rotate                                           0     0      0     719
                        _MSC_DelayMS
                            _MTR_IN1
                            _MTR_IN2
 ---------------------------------------------------------------------------------
 (2) _MTR_IN2                                              1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTR_IN1                                              1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MSC_BlinkLED                                         8     4      4    1544
                                             62 BANK0      2     2      0
                                              4 BANK1      6     2      4
                        _MSC_DelayMS
 ---------------------------------------------------------------------------------
 (2) _MSC_DelayMS                                          9     5      4     675
                                             57 BANK0      5     1      4
                                              0 BANK1      4     4      0
                       _MSC_DelayNOP
 ---------------------------------------------------------------------------------
 (3) _MSC_DelayNOP                                         4     2      2     145
                                             53 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0    1876
                     _BUT_ReadButton
                    _IR_ReadReceiver
                            _InitADC
                         _InitButton
                          _InitFlash
                             _InitIR
                            _InitLDO
                          _InitMOTOR
                             _InitRF
                         _InitTimers
 ---------------------------------------------------------------------------------
 (2) _InitTimers                                           0     0      0     333
                         _InitTimer0
                         _InitTimer1
                         _InitTimer2
 ---------------------------------------------------------------------------------
 (3) _InitTimer2                                           0     0      0      44
                         _TMR_Timer2
                      _TMR_Timer2Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2Int                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer1                                           0     0      0     200
                    _TMR_ResetTimer1
                         _TMR_Timer1
                 _TMR_Timer1Function
                      _TMR_Timer1Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer1Int                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer1Function                                   1     1      0     111
                                             55 BANK0      1     1      0
                    _TMR_ResetTimer1
                         _TMR_Timer1
                      _TMR_Timer1Osc
 ---------------------------------------------------------------------------------
 (5) _TMR_Timer1Osc                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _TMR_ResetTimer1                                      1     1      0      45
                                             54 BANK0      1     1      0
                         _TMR_Timer1
 ---------------------------------------------------------------------------------
 (5) _TMR_Timer1                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer0                                           0     0      0      89
                    _TMR_ResetTimer0
                         _TMR_Timer0
                      _TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (2) _TMR_Timer0Int                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_ResetTimer0                                      1     1      0      45
                                             54 BANK0      1     1      0
                         _TMR_Timer0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer0                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitRF                                               0     0      0     759
                 _MSC_CleanBufferInt
                         _RF_DataInt
                        _RF_Receiver
                    _RF_SetBandwidth
                      _RF_SetSquelch
 ---------------------------------------------------------------------------------
 (3) _RF_SetSquelch                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_SetBandwidth                                      1     1      0      66
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_Receiver                                          1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RF_DataInt                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitMOTOR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitLDO                                              0     0      0      22
                           _LDO_Pass
 ---------------------------------------------------------------------------------
 (3) _LDO_Pass                                             1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitIR                                               0     0      0     627
                 _MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (3) _MSC_CleanBufferInt                                   6     2      4     627
                                             53 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _InitFlash                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitButton                                           0     0      0      45
                _BUT_IR_PinChangeInt
                     _BUT_ReadButton
 ---------------------------------------------------------------------------------
 (3) _BUT_ReadButton                                       1     1      0      23
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BUT_IR_PinChangeInt                                  1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitADC                                              0     0      0      44
                  _ADC_ChangeChannel
                  _ADC_ConversionInt
                         _ADC_Module
 ---------------------------------------------------------------------------------
 (3) _ADC_Module                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionInt                                    1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ChangeChannel                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IR_ReadReceiver                                      1     1      0      23
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_App                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_LoadCode                                         20    20      0   11509
                                             14 BANK1     20    20      0
               _IR_CalculateCodesize
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3271
                                             61 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     679
                                             53 BANK0      9     5      4
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5184
                                              0 BANK1     14     8      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1953
                                             53 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6    1616
                                             53 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _IR_CalculateCodesize                                 7     4      3     240
                                             53 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (1) _ADC_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                             15    15      0   19896
                                             75 COMRAM    14    14      0
               _ADC_CalculateVoltage
                       _IR_CheckCode
                       _IR_ResetData
                         _RF_Disable
                    _TMR_Timer1Start
                   _TMR_Timer1Status
                    _TMR_Timer2Start
              i1_BUT_IR_PinChangeInt
                   i1_BUT_ReadButton
                  i1_IR_ReadReceiver
                       i1_RF_DataInt
           i1_SYS_ActivityTimerReset
                  i1_TMR_ResetTimer1
                       i1_TMR_Timer1
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) i1_SYS_ActivityTimerReset                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_IR_ReadReceiver                                    1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_BUT_ReadButton                                     1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_BUT_IR_PinChangeInt                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer2Start                                      2     0      2     345
                                              2 COMRAM     2     0      2
                    _TMR_ResetTimer2
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (9) _TMR_ResetTimer2                                      1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) i1_TMR_Timer2                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer1Status                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer1Start                                      0     0      0      67
                  i1_TMR_ResetTimer1
                       i1_TMR_Timer1
 ---------------------------------------------------------------------------------
 (8) i1_TMR_ResetTimer1                                    1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer1
 ---------------------------------------------------------------------------------
 (8) i1_TMR_Timer1                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _RF_Disable                                           0     0      0      66
                       i1_RF_DataInt
                       i1_TMR_Timer0
                    i1_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (9) i1_TMR_Timer0                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _IR_CheckCode                                        15    15      0   15021
                                             60 COMRAM    15    15      0
                    _FSH_Write_IR_RF
                      i1_IR_LoadCode
                           i1___ftge
                          i1___ftmul
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (9) i1_IR_LoadCode                                       20    20      0    4241
                                             40 COMRAM    20    20      0
             i1_IR_CalculateCodesize
                           i1___ftge
                          i1___ftmul
                          i1___fttol
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (10) i1___fttol                                          15    11      4     304
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (9) i1___ftge                                             9     3      6     552
                                             11 COMRAM     9     3      6
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i1_IR_CalculateCodesize                              7     4      3     164
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (9) _FSH_Write_IR_RF                                     17    17      0    6385
                                             17 COMRAM    17    17      0
                 _FSH_AddressToBlock
                     _FSH_EraseBlock
            _FSH_VerifyWriteIntArray
                  _FSH_WriteIntArray
                       _IR_ResetData
             _MSC_BufferCopyIntConst
                       _RF_ResetData
 ---------------------------------------------------------------------------------
 (10) _RF_ResetData                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _MSC_BufferCopyIntConst                             11     2      9    1650
                                              6 COMRAM    11     2      9
               i1_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (11) i1_MSC_CleanBufferInt                                6     2      4     143
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _IR_ResetData                                         0     0      0      44
                        i1_RF_Enable
 ---------------------------------------------------------------------------------
 (9) i1_RF_Enable                                          0     0      0      44
                       i1_RF_DataInt
                    i1_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (9) i1_TMR_Timer0Int                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_RF_DataInt                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _FSH_WriteIntArray                                  12     7      5    1639
                                              4 COMRAM    12     7      5
                 _FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (10) _FSH_VerifyWriteIntArray                            12     7      5    1205
                                              0 COMRAM    12     7      5
 ---------------------------------------------------------------------------------
 (10) _FSH_EraseBlock                                      7     3      4     613
                                              4 COMRAM     7     3      4
                 _FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (11) _FSH_AddressToBlock                                  4     0      4     413
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (8) _ADC_CalculateVoltage                                 5     5      0    4038
                                             40 COMRAM     5     5      0
                            ___ftdiv
                i1_ADC_ChangeChannel
                          i1___ftmul
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (9) i1___lwtoft                                           3     0      3    1059
                                              8 COMRAM     3     0      3
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (9) i1___ftmul                                           15     9      6    1814
                                             26 COMRAM    14     8      6
                            ___ftdiv (ARG)
                         i1___ftpack
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) i1_ADC_ChangeChannel                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    1105
                                             11 COMRAM    15     9      6
                         i1___ftpack
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _high_isr                                           10    10      0    9078
                                             43 BANK0     10    10      0
                       _RF_CheckCode
                    _TMR_Timer0Start
                   _TMR_Timer0Status
                       i2_RF_Disable
                     i2_RF_ResetData
           i2_SYS_ActivityTimerReset
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_SYS_ActivityTimerReset                            0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_RF_Disable                                        0     0      0      66
                       i2_RF_DataInt
                       i2_TMR_Timer0
                    i2_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (14) _TMR_Timer0Status                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR_Timer0Start                                     0     0      0      67
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_TMR_ResetTimer0                                   1     1      0      45
                                              1 BANK0      1     1      0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_TMR_Timer0                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (14) _RF_CheckCode                                        9     9      0    8765
                                             34 BANK0      9     9      0
                  i2_FSH_Write_IR_RF
                      i2_RF_LoadCode
                           i2___ftge
                          i2___ftmul
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (15) i2_RF_LoadCode                                       6     6      0    2561
                                             25 BANK0      6     6      0
             i2_RF_CalculateCodesize
                           i2___ftge
                          i2___ftmul
                          i2___fttol
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (15) i2___lwtoft                                          3     0      3     617
                                              8 BANK0      3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (16) i2___fttol                                          15    11      4     304
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (15) i2___ftmul                                          15     9      6    1112
                                             11 BANK0     14     8      6
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (16) i2___ftpack                                          8     3      5     387
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (15) i2___ftge                                            9     3      6     344
                                             11 BANK0      9     3      6
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (16) i2_RF_CalculateCodesize                              1     1      0      90
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (15) i2_FSH_Write_IR_RF                                  17    17      0    3789
                                             17 BANK0     17    17      0
               i2_FSH_AddressToBlock
                   i2_FSH_EraseBlock
          i2_FSH_VerifyWriteIntArray
                i2_FSH_WriteIntArray
                     i2_IR_ResetData
           i2_MSC_BufferCopyIntConst
                     i2_RF_ResetData
 ---------------------------------------------------------------------------------
 (14) i2_RF_ResetData                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i2_MSC_BufferCopyIntConst                           11     2      9     890
                                              6 BANK0     11     2      9
               i2_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (17) i2_MSC_CleanBufferInt                                6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (16) i2_IR_ResetData                                      0     0      0      44
                        i2_RF_Enable
 ---------------------------------------------------------------------------------
 (17) i2_RF_Enable                                         0     0      0      44
                       i2_RF_DataInt
                    i2_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (15) i2_TMR_Timer0Int                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (15) i2_RF_DataInt                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (16) i2_FSH_WriteIntArray                                12     7      5     837
                                              4 BANK0     12     7      5
               i2_FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (16) i2_FSH_VerifyWriteIntArray                          12     7      5     597
                                              0 BANK0     12     7      5
 ---------------------------------------------------------------------------------
 (16) i2_FSH_EraseBlock                                    7     3      4     381
                                              4 BANK0      7     3      4
               i2_FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (17) i2_FSH_AddressToBlock                                4     0      4     219
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Start
   _IR_LoadCode
     _IR_CalculateCodesize
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lwtoft
       ___ftpack
   _Init_App
   _Init_System
     _BUT_ReadButton
     _IR_ReadReceiver
     _InitADC
       _ADC_ChangeChannel
       _ADC_ConversionInt
       _ADC_Module
     _InitButton
       _BUT_IR_PinChangeInt
       _BUT_ReadButton
     _InitFlash
     _InitIR
       _MSC_CleanBufferInt
     _InitLDO
       _LDO_Pass
     _InitMOTOR
     _InitRF
       _MSC_CleanBufferInt
       _RF_DataInt
       _RF_Receiver
       _RF_SetBandwidth
       _RF_SetSquelch
     _InitTimers
       _InitTimer0
         _TMR_ResetTimer0
           _TMR_Timer0
         _TMR_Timer0
         _TMR_Timer0Int
       _InitTimer1
         _TMR_ResetTimer1
           _TMR_Timer1
         _TMR_Timer1
         _TMR_Timer1Function
           _TMR_ResetTimer1
             _TMR_Timer1
           _TMR_Timer1
           _TMR_Timer1Osc
         _TMR_Timer1Int
       _InitTimer2
         _TMR_Timer2
         _TMR_Timer2Int
   _MSC_BlinkLED
     _MSC_DelayMS
       _MSC_DelayNOP
   _MSC_DelayMS
     _MSC_DelayNOP
   _MTR_Rotate
     _MSC_DelayMS
       _MSC_DelayNOP
     _MTR_IN1
     _MTR_IN2
   _RF_Enable
     _RF_DataInt
     _TMR_Timer0Int
   _RF_LoadCode
     _RF_CalculateCodesize
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lwtoft
       ___ftpack
   _SYS_ActivityTimer
     _SYS_ActivityTimerReset
     _SYS_EnableInt
       _BUT_IR_PinChangeInt
       _RF_DataInt
     _SYS_Sleep
   _SYS_ConfigureOscillator
   _SYS_DisableInt
   _SYS_EnableInt
     _BUT_IR_PinChangeInt
     _RF_DataInt
   ___ftge

 _low_isr (ROOT)
   _ADC_CalculateVoltage
     ___ftdiv
       i1___ftpack
       i1___lwtoft (ARG)
         i1___ftpack
     i1_ADC_ChangeChannel
     i1___ftmul
       ___ftdiv (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftpack (ARG)
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack
   _IR_CheckCode
     _FSH_Write_IR_RF
       _FSH_AddressToBlock
       _FSH_EraseBlock
         _FSH_AddressToBlock
       _FSH_VerifyWriteIntArray
       _FSH_WriteIntArray
         _FSH_AddressToBlock
       _IR_ResetData
         i1_RF_Enable
           i1_RF_DataInt
           i1_TMR_Timer0Int
       _MSC_BufferCopyIntConst
         i1_MSC_CleanBufferInt
       _RF_ResetData
     i1_IR_LoadCode
       i1_IR_CalculateCodesize
       i1___ftge
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftmul
         ___ftdiv (ARG)
           i1___ftpack
           i1___lwtoft (ARG)
             i1___ftpack
         i1___ftpack (ARG)
         i1___lwtoft (ARG)
           i1___ftpack
       i1___fttol
       i1___lwtoft
         i1___ftpack
     i1___ftge
       i1___lwtoft (ARG)
         i1___ftpack
     i1___ftmul
       ___ftdiv (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftpack (ARG)
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack
   _IR_ResetData
     i1_RF_Enable
       i1_RF_DataInt
       i1_TMR_Timer0Int
   _RF_Disable
     i1_RF_DataInt
     i1_TMR_Timer0
     i1_TMR_Timer0Int
   _TMR_Timer1Start
     i1_TMR_ResetTimer1
       i1_TMR_Timer1
     i1_TMR_Timer1
   _TMR_Timer1Status
   _TMR_Timer2Start
     _TMR_ResetTimer2
       i1_TMR_Timer2
     i1_TMR_Timer2
   i1_BUT_IR_PinChangeInt
   i1_BUT_ReadButton
   i1_IR_ReadReceiver
   i1_RF_DataInt
   i1_SYS_ActivityTimerReset
   i1_TMR_ResetTimer1
     i1_TMR_Timer1
   i1_TMR_Timer1
   i1_TMR_Timer2

 _high_isr (ROOT)
   _RF_CheckCode
     i2_FSH_Write_IR_RF
       i2_FSH_AddressToBlock
       i2_FSH_EraseBlock
         i2_FSH_AddressToBlock
       i2_FSH_VerifyWriteIntArray
       i2_FSH_WriteIntArray
         i2_FSH_AddressToBlock
       i2_IR_ResetData
         i2_RF_Enable
           i2_RF_DataInt
           i2_TMR_Timer0Int
       i2_MSC_BufferCopyIntConst
         i2_MSC_CleanBufferInt
       i2_RF_ResetData
     i2_RF_LoadCode
       i2_RF_CalculateCodesize
       i2___ftge
         i2___lwtoft (ARG)
           i2___ftpack
       i2___ftmul
         i2___ftpack
         i2___lwtoft (ARG)
           i2___ftpack
       i2___fttol
       i2___lwtoft
         i2___ftpack
     i2___ftge
       i2___lwtoft (ARG)
         i2___ftpack
     i2___ftmul
       i2___ftpack
       i2___lwtoft (ARG)
         i2___ftpack
     i2___lwtoft
       i2___ftpack
   _TMR_Timer0Start
     i2_TMR_ResetTimer0
       i2_TMR_Timer0
     i2_TMR_Timer0
   _TMR_Timer0Status
   i2_RF_Disable
     i2_RF_DataInt
     i2_TMR_Timer0
     i2_TMR_Timer0Int
   i2_RF_ResetData
   i2_SYS_ActivityTimerReset
   i2_TMR_ResetTimer0
     i2_TMR_Timer0
   i2_TMR_Timer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3FF      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0      C0      10       75.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C0       8       75.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     22      AF       6       68.4%
BITBANK0            80      0       0       3        0.0%
BANK0               80     40      4A       4       57.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     59      6D       1       86.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2E6      11        0.0%
DATA                 0      0     2E6      13        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Wed Oct 21 16:16:20 2015

            MSC_BufferCopyIntConst@i 0010              __end_of_IR_ReadReceiver 180E  
           MSC_BufferCopyIntConst@to 000A            __size_ofi2_FSH_EraseBlock 0076  
                         _RF_SyncLow 00C2                   TMR_Timer0Int@state 00B5  
                         i1___ftpack 0F58                          _RF_SyncHigh 00C0  
                                 l78 3FBC                      ?_SYS_DisableInt 0001  
          i2MSC_CleanBufferInt@count 0082                                   bsr 000FE0  
                         i1___lwtoft 1782                   __size_of_ADC_Start 0004  
                   i2RF_LoadCode@Low 0099                  i2_FSH_WriteIntArray 0BBC  
                 TMR_Timer1Int@state 00B5           ??i1_SYS_ActivityTimerReset 0001  
                         i2___ftpack 0FE2                         __CFG_CP0$OFF 000000  
                         _TMR_Timer0 1AA2                           _TMR_Timer1 1A82  
                         _TMR_Timer2 1A62                                  l343 0008  
                                l352 0004                                  l521 0D76  
                                l514 0014                                  l346 0004  
                                l509 0014                                  l349 0010  
                                l358 1BA2                                  l473 19CC  
                                l651 0016                                  l670 1932  
                                l575 17FC                                  l743 17DA  
                                l649 0014                                  l748 1ADE  
                                l852 1A8E                                  l847 1AAE  
                                l857 1A6E                                  l882 1A7E  
                                l892 1988                                  l877 1A9E  
                         i2___lwtoft 17A6                                  l887 1A5E  
                                _PR2 000FCB     FSH_VerifyWriteIntArray@failcount 000B  
 i2FSH_VerifyWriteIntArray@failcount 008A                         i1___ftge@ff1 000C  
                       i1___ftge@ff2 000F                  __size_of_ADC_Module 0010  
                 TMR_Timer2Int@state 00B5                ??i1_ADC_ChangeChannel 0001  
                  i2RF_LoadCode@High 009C                                  prod 000FF3  
                                wreg 000FE8                         i1___ftmul@f1 001B  
                       i1___ftmul@f2 001E                      IR_CheckCode@Low 0048  
                 TMR_Timer1Osc@state 00B5               ?i1_BUT_IR_PinChangeInt 0001  
   __size_of_FSH_VerifyWriteIntArray 0060                         i1___fttol@f1 0001  
       FSH_VerifyWriteIntArray@Array 0004                       ?_RF_SetSquelch 0001  
                       ___ftdiv@cntr 0015                         ___ftdiv@sign 001A  
                               l1103 1AFE                                 l1401 0630  
                               l1091 1AEE                                 l1317 0EDA  
                               l1329 0F38                ?i2_MSC_CleanBufferInt 0080  
                               l5121 1802                                 l5125 180A  
                               l4501 1ACE                                 l5109 0000  
                               l4511 16AE                                 l6111 0000  
                               l4337 1688                                 l4523 15D0  
                               l4531 0002                                 l4515 16BA  
                               l4507 16A4                                 l7011 3F3E  
                               l4701 0EE2                                 l4533 000E  
                               l7021 3F92                                 l4711 0F24  
                               l4703 0EEC                                 l4519 15B6  
                               l4535 0010                                 l5095 0000  
                               l7015 3F7A                                 l4713 0F2E  
                               l4705 0F00                                 l4529 1ABE  
                               l5193 153E                                 l5097 000C  
                               l6137 145C                                 l4475 17E0  
                               l5451 000E                                 l5187 151A  
                               l5099 000E                                 l5179 0000  
                               l7019 3F8C                                 l4709 0F12  
                               l5453 0012                                 l7037 3FCA  
                               l4727 0F4A                                 l4479 17E8  
                               l5455 0002                                 l5473 149A  
                               l5449 0002                                 l5457 000E  
                               l5467 146A                                 l5571 12B0  
                               l5459 0012                                 l5581 12E6  
                               l5575 12CE                                 l4687 1904  
                               l6815 0826                                 l6841 08A4  
                               l6833 088C                                 l6817 0832  
                               l6921 140A                                 l6843 08B0  
                               l6915 13EE                                 l6845 08B4  
                               l6837 089C                                 l6909 39CA  
                               l6765 193A                                 l6773 13BE  
                               l6861 0302                                 l6783 05C8  
                               l6849 08C8                                 l6881 38D8  
                               l6769 13A6                                 l6929 0D40  
                               l6865 032C                                 l6961 3E9E  
                               l6779 05A8                                 l6891 393A  
                               l6947 3E72                                 l6885 3904  
                               l6973 3ECE                                 l6965 3EB0  
                               l6895 3966                                 l6991 3F08  
                               l6975 3ED2                                 l6959 3E9A  
                               l6967 3EB4                                 l6985 3EFC  
                               l6979 3EE4                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u4080 000E                                 u4081 000C  
                               u5310 000E                                 u5311 000C  
                               u5320 000E                                 u5321 000C  
                               u6150 143C                                 u7321 081C  
                               u7340 0852                                 u7271 0598  
           FSH_VerifyWriteIntArray@i 000C                                 u7345 084A  
                               u7291 05B8                                 u7640 3FDC  
                               _TMR2 000FCC                     ?_RF_SetBandwidth 0001  
               ?i2_FSH_WriteIntArray 0084          ADC_CalculateVoltage@Voltage 0029  
             __size_of_TMR_Timer0Int 0010               __size_of_TMR_Timer1Int 0010  
             __size_of_TMR_Timer2Int 0010               __size_of_TMR_Timer1Osc 0018  
        __size_of_FSH_AddressToBlock 0028                    ??i1_TMR_Timer0Int 0001  
                    __end_of_MTR_IN1 0000                      __end_of_MTR_IN2 0000  
  __size_ofi2_SYS_ActivityTimerReset 0000                                 _main 3E4C  
          ?i2_SYS_ActivityTimerReset 0001               _SYS_ActivityTimerReset 0000  
                       ___ftpack@arg 00B5                         ___ftpack@exp 00B8  
                       i1___lwtoft@c 0009                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 006E  
                       i2___ftge@ff1 008B                         i2___ftge@ff2 008E  
                    _IR_SavedTiming0 2400                      _IR_SavedTiming1 24C0  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0248                        __CFG_IESO$OFF 000000  
                      __CFG_FOSC2$ON 000000             ??i1_IR_CalculateCodesize 0004  
               i2_FSH_AddressToBlock 16C0                     IR_CheckCode@High 0045  
              i1MSC_CleanBufferInt@i 0005                         i2___ftmul@f1 008B  
                       i2___ftmul@f2 008E                         ___param_bank 000000  
         __size_of_SYS_ActivityTimer 003C                         ___ftmul@sign 0191  
                    __end_of_InitADC 1782                      __end_of_InitLDO 19BE  
                       i2___fttol@f1 0080                     IR_CheckCode@data 0043  
                      i1___ftmul@exp 0024                                EECON1 000FA6  
                              EECON2 000FA7         __end_of_ADC_CalculateVoltage 0BBC  
                       ___fttol@exp1 018C                        ??_Init_System 00BB  
                    _FSH_Write_IR_RF 3354                         ___fttol@lval 0188  
        __size_of_TMR_Timer1Function 002A                                INTCON 000FF2  
            i1___ftmul@f3_as_product 0026                                ?_main 0001  
                   __end_of_LDO_Pass 0000                      __end_of___ftdiv 0994  
                       i2___lwtoft@c 0088                      __end_of___ftmul 065E  
                    __end_of___fttol 08DA                           _FlashWaste 2600  
                              i1l230 015A                                i1l242 01A6  
                              i1l251 0216                                i1l227 0160  
                              i1l219 0164                                i1l228 015E  
                              i1l229 00CC                                i1l343 0008  
                              i2l200 0384                                i2l201 0398  
                              i1l249 01B4                                i1l258 0218  
                              i2l211 042E                                i2l203 03E6  
                              i1l613 2B30                                i2l214 0456  
                              i2l216 0458                                i1l473 1A28  
                              i2l343 0008                                i1l743 174A  
                              i1l575 181E                                i2l196 043E  
                              i1l852 1B68                                i1l748 1B4C  
                              i1l950 1186                                i1l847 1B76  
                              i2l473 19E0                                i1l961 0C9A  
                              i1l857 1B5A                                i1l948 1188  
                              i1l877 1B84                                i1l959 0C9C  
                              i1l983 3434                                i1l975 3772  
                              i1l969 1220                                i2l950 1110  
                              i2l847 1B2E                                i2l961 0BF6  
                              i2l948 1112                                i2l877 1B3E  
                              i2l959 0BF8                                i2l983 2FE8  
                              i2l975 3342                                i2l969 1280  
                              _TMR0H 000FD7                                _TMR1H 000FCF  
                              _TMR0L 000FD6                                _TMR1L 000FCE  
                              _PORTB 000F81              i2FSH_Write_IR_RF@lowint 0098  
                     i2_IR_ResetData 1BC0              i2FSH_Write_IR_RF@status 009C  
                BUT_ReadButton@value 00B5                       __CFG_FCMEN$OFF 000000  
                _IRProgramCodeNumber 0068                        ___ftpack@sign 00B9  
                 RF_SetSquelch@state 00B5                i1IR_LoadCode@LowBound 0037  
                 __size_of_RF_Enable 0012                          ?_RF_DataInt 0001  
              ??i2_FSH_WriteIntArray 0089                __end_ofi2_RF_LoadCode 0588  
                   __end_ofi1___ftge 1342                      __end_of_low_isr 0248  
                              tablat 000FF5                     __end_ofi2___ftge 139A  
                  __end_of_ADC_Start 1BE6                          ?_RF_Disable 0001  
                              plusw2 000FDB                                status 000FD8  
                 __size_ofi1___ftmul 00D6                   __size_ofi1___fttol 00B8  
                        ?_MTR_Rotate 0001         i2MSC_BufferCopyIntConst@from 0086  
              FSH_EraseBlock@Address 0005             ??_MSC_BufferCopyIntConst 0010  
                     i1___ftpack@arg 0001                   __size_ofi2___ftmul 00D6  
                     i1___ftpack@exp 0004                   __size_ofi2___fttol 00BA  
              ?i2_FSH_AddressToBlock 0080                           _InitButton 1B94  
                    __initialization 106C                           _InitTimer0 1850  
                         _InitTimer1 1946                           _InitTimer2 1960  
                         _InitTimers 1B88                         __end_of_main 3FE6  
                   ?_IR_ReadReceiver 0001                        i2___ftmul@exp 0094  
                   _ButtonValue_prev 00C4         __end_ofi1_MSC_CleanBufferInt 160C  
                        ?i1___ftpack 0001                         ?i1_RF_Enable 0001  
       _IR_SavedTiming0_absconstaddr 002400                       i1___ftmul@sign 0025  
                   __end_of_Init_App 1516                        _TMR_Timer0Int 1A92  
                      _TMR_Timer1Int 1A72                          ?i1___lwtoft 0009  
                      _TMR_Timer2Int 1A52                        _TMR_Timer1Osc 1978  
                     i1___fttol@exp1 000F                          ?i2___ftpack 0080  
                 __size_of_SYS_Sleep 0000                       i1___fttol@lval 000B  
                        ?_TMR_Timer0 0001                          ?_TMR_Timer1 0001  
                        ?_TMR_Timer2 0001                         ?_MSC_DelayMS 00B9  
                             ??_main 00C0               __end_ofi2_IR_ResetData 1BC8  
                      ___fttol@sign1 0187                          ?i2___lwtoft 0088  
                      __activetblptr 000002                         ?i2_RF_Enable 0001  
                  _ADC_ConversionInt 1AF2                  TMR_Timer2Start@time 0003  
                __end_of_Init_System 157A                    i1_TMR_ResetTimer1 18B0  
                    ??_RF_SetSquelch 00B5                      _ADC_SampleCount 0100  
                 ?_ADC_ConversionInt 0001        i2FSH_VerifyWriteIntArray@data 0088  
              FSH_EraseBlock@highint 0009              __size_of_FSH_EraseBlock 0072  
           __size_ofi2_TMR_Timer0Int 0010               ??i2_MSC_CleanBufferInt 0084  
                          ??_MTR_IN1 00B5                            ??_MTR_IN2 00B5  
             i1IR_LoadCode@CodeSize1 002F               i1IR_LoadCode@CodeSize2 0036  
                 ?i1_TMR_ResetTimer1 0001                               _ADRESH 000FC4  
                             _ADRESL 000FC3             i2FSH_Write_IR_RF@highint 0097  
            __end_of_IR_SavedTiming0 24C0              __end_of_IR_SavedTiming1 2580  
                   __end_of___ftpack 0F58                       RF_LoadCode@Low 0195  
           __size_of_TMR_ResetTimer0 0020             __size_of_TMR_ResetTimer1 0020  
           __size_of_TMR_ResetTimer2 0020                     _TMR_Timer0Status 1BD4  
                 __size_of_InitMOTOR 0004                     _TMR_Timer1Status 1BCE  
                             i1l1401 0706                               i1l1317 0F64  
                             i1l1329 0FC2                               i1l1385 091A  
                             i1l1387 0962                               i1l5011 0A70  
                             i1l5031 0AC8                               i1l4401 0F76  
                             i1l5009 0A66                               i1l4411 0FB8  
                             i1l4403 0F8A                               i1l5043 0AF4  
                             i1l5035 0AD0                               i1l5027 0AB8  
                             i1l5301 3518                               i1l5213 3376  
                             i1l5037 0ADC                               i1l4407 0F9C  
                             i1l5231 33B8                               i1l5223 338A  
                             i1l5039 0AE0                               i2l1401 07DC  
                             i1l4425 0FD4                               i1l4409 0FAE  
                             i1l5233 33DA                               i1l5217 337E  
                             i1l4355 1702                               i1l4371 15E6  
                             i1l5323 356E                               i1l5307 352C  
                             i1l5251 3448                               i1l5243 3422  
                             i2l1317 0FEE                               i1l4613 118C  
                             i1l5237 33FE                               i1l6301 2BE8  
                             i1l4375 1600                               i1l5415 3732  
                             i1l5343 35BC                               i1l5327 357A  
                             i1l5271 3494                               i1l5263 3484  
                             i2l1329 104C                               i1l4625 11C2  
                             i1l4561 0DDC                               i1l5441 3778  
                             i1l5433 376A                               i1l5409 36F2  
                             i1l5249 3440                               i1l6313 2DCE  
                             i1l5515 093E                               i1l6251 0BB6  
                             i1l5371 3638                               i1l5355 35F6  
                             i1l5339 35B0                               i1l5283 34CE  
                             i1l5267 3488                               i1l6323 2DF2  
                             i1l6307 2CBE                               i1l6331 2E1A  
                             i1l6411 182C                               i1l4629 11C8  
                             i1l4645 0C9E                               i1l4549 0DB8  
                             i1l5445 377E                               i1l5429 3760  
                             i1l5437 376E                               i1l5357 35FA  
                             i1l6261 2816                               i1l6333 2E24  
                             i1l4399 0F6C                               i1l5391 3682  
                             i1l5383 3672                               i1l5287 34DA  
                             i1l4903 1326                               i1l6431 175A  
                             i1l6407 1824                               i1l4665 11D4  
                             i1l4569 0E14                               i1l5385 3676  
                             i1l5369 3634                               i1l6361 2EC6  
                             i1l6353 2EB2                               i1l6345 2E4C  
                             i1l6337 2E2E                               i1l6329 2E18  
                             i1l6281 2ADE                               i1l5299 3514  
                             i1l4763 14A6                               i1l6355 2EB4  
                             i1l6275 29CE                               i1l6427 1750  
                             i1l5389 367E                               i1l4909 133E  
                             i1l5661 3B4A                               i1l6381 2EFC  
                             i1l6357 2EBE                               i1l6349 2E80  
                             i1l6293 2B26                               i1l6269 28F8  
                     __CFG_WDTEN$OFF 000000                               i1l4935 067E  
                             i1l4679 122E                               i1l5399 36DC  
                             i1l5671 3BAA                               i1l6367 2EDE  
                             i1l6287 2B00                               i1l6295 2B28  
                             i1l6391 0000                               i1l5497 08FA  
                             i1l4769 14D6                               i1l5657 3B20  
                             i1l6297 2B34                               i2l5051 09B6  
                             i1l4939 069E                               i1l5667 3B80  
                             i1l6379 2EF8                               i1l6715 01A2  
                             i1l6707 0184                               i1l6635 0086  
                             i1l6651 00BA                               i1l5685 3C06  
                             i1l6741 01F0                               i1l6645 00A6  
                             i2l5071 0A10                               i1l6671 0100  
                             i1l6639 0098                               i2l4441 1026  
                             i2l4433 0FF6                               i2l5049 09AC  
                             i2l6201 3E16                               i1l6673 0106  
                             i1l6681 0122                               i1l6649 00B6  
                             i2l4443 1038                               i2l4435 1000  
                             i2l5083 0A3C                               i2l5075 0A18  
                             i2l5067 0A00                               i1l4899 1308  
                             i1l6739 01E6                               i1l6747 01FA  
                             i2l4445 1042                               i2l4437 1014  
                             i2l5077 0A24                               i2l4383 1660  
                             i2l5079 0A28                               i2l6215 3E44  
                             i2l6207 3E2E                               i1l5969 1922  
                             i2l4379 1646                               i2l4803 0EAC  
                             i2l4459 105E                               i2l6163 3CBE  
                             i2l4389 16DA                               i2l6173 3DCC  
                             i2l6159 3C28                               i2l6175 3DCE  
                             i2l6183 3DD8                               i2l4841 1156  
                             i2l4825 1116                               i2l4745 1632  
                             i2l4921 137E                               i2l5641 0550  
                             i2l6193 3E02                               i2l5803 3096  
                             i2l4739 160E                               i2l6187 3DE4  
                             i2l6195 3E04                               i2l6603 0438  
                             i2l4837 114E                               i2l5901 3242  
                             i2l5733 2F32                               i2l4917 1360  
                             i2l5637 052A                               i2l6197 3E0E  
                             i2l4783 0E50                               i2l5823 30EC  
                             i2l5815 30D2                               i2l4927 1396  
                             i2l4857 0BFC                               i2l5905 324A  
                             i2l5817 30D6                               i2l5753 2FB2  
                             i2l5729 2F2A                               i2l6393 0000  
                             i2l4891 128E                               i2l4795 0E74  
                             i2l5931 3302                               i2l5915 32A8  
                             i2l5907 324E                               i2l5843 313E  
                             i2l5747 2F6C                               i2l5739 2F3E  
                             i2l4877 1234                               i2l5925 32C0  
                             i2l5765 2FF4                               i2l5749 2F8E  
                             i2l4973 0754                               _TABLAT 000FF5  
                             i2l5871 31BE                               i2l5855 3176  
                             i2l5839 3132                               i2l5783 3042  
                             i2l5767 2FFE                               i2l5759 2FD6  
                             i2l6575 03CA                               i2l6559 038A  
                             i2l5961 3350                               i2l5945 3330  
                             i2l5953 333E                               i2l5873 31C2  
                             i2l4977 0774                               i2l6577 03D0  
                             i2l5859 3182                               i2l5787 304E  
                             i2l5779 303E                               i2l5957 334A  
                             i2l5949 333A                               i2l5885 31FE  
                             i2l5887 3202                               i2l5799 308A  
                             i2l5899 323E               i1IR_LoadCode@HighBound 003A  
                   __end_of___lwtoft 1738                               u471_41 0764  
                             u536_21 08EA                               u464_21 066E  
                             _OSCCON 000FD3                               u538_21 090A  
                             u466_21 068E                               u474_21 0A5E  
                             u482_41 09A4                   __size_of_InitFlash 0004  
                             u469_41 0744                  ??_ADC_ConversionInt 00B5  
                       ??_ADC_Module 00B5                         _System_State 01AE  
                ??i1_TMR_ResetTimer1 0002               i2FSH_EraseBlock@lowint 0089  
                          ??_InitADC 00B6                            ??_InitLDO 00B6  
                       ?_IR_LoadCode 0001              __end_of_FSH_Write_IR_RF 3782  
           __size_of_TMR_Timer0Start 0010             __size_of_TMR_Timer1Start 0010  
                             _InitIR 19E6                               _InitRF 157A  
           __size_of_TMR_Timer2Start 0018                       i2_RF_ResetData 1BB8  
       __end_of_IR_CalculateCodesize 14A4         __end_of_RF_CalculateCodesize 1548  
         MSC_BufferCopyIntConst@from 0007                       __CFG_XINST$OFF 000000  
    __size_ofi1_IR_CalculateCodesize 003C                           _Timer2Post 0062  
                   __end_of_high_isr 047C                    ?i1_BUT_ReadButton 0001  
                             ___ftge 1290               i1IR_ReadReceiver@value 0001  
                   i2_FSH_EraseBlock 10E8              __size_of_BUT_ReadButton 0022  
                     __CFG_STVREN$ON 000000                            ??___ftdiv 0012  
                          ??___ftmul 018D                            ??___fttol 00B9  
       __size_of_BUT_IR_PinChangeInt 0010                       ?_TMR_Timer0Int 0001  
                     ?_TMR_Timer1Int 0001                       ?_TMR_Timer2Int 0001  
           i2MSC_CleanBufferInt@data 0080                       ?_TMR_Timer1Osc 0001  
                 ??i1_BUT_ReadButton 0001                    __end_of_RF_Enable 3FF8  
                             clear_0 1072                               clear_1 107E  
                             clear_2 108A                               clear_3 1096  
                             clear_4 10A2                  __size_of_RF_DataInt 0014  
          __end_of_ADC_ConversionInt 1B02                      ?i2_IR_ResetData 0001  
            ?i2_RF_CalculateCodesize 0001                  __size_of_RF_Disable 0012  
          __end_ofi1_TMR_ResetTimer1 18D0                ___ftmul@f3_as_product 0192  
                  __end_ofi1___ftmul 0734                    __end_ofi1___fttol 0B06  
                       __pdataCOMRAM 006D   __size_ofi2_FSH_VerifyWriteIntArray 0060  
                 __end_of_ADC_Module 1AF2                  __size_of_MTR_Rotate 009C  
                  __end_ofi2___ftmul 080A                    __end_ofi2___fttol 0A4E  
         ?i2_FSH_VerifyWriteIntArray 0080              _FSH_VerifyWriteIntArray 11D0  
                       __mediumconst 2800                            ??_low_isr 004C  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                       _IR_DataHolder1 0300  
               IR_LoadCode@CodeSize1 019B                 IR_LoadCode@CodeSize2 01A2  
                       ?_RF_LoadCode 0001                 _ADC_CalculateVoltage 0B06  
                __size_ofi1___ftpack 008A                    i2_TMR_ResetTimer0 18D0  
                    __CFG_FOSC$HSPLL 000000              __p_RF_SavedTiming_const 2580  
                    TMR_Timer0@state 00B5                      TMR_Timer1@state 00B5  
        i2FSH_Write_IR_RF@WriteTries 009F                           __accesstop 0080  
            __end_of__initialization 10DA                  __size_ofi1___lwtoft 0024  
                    TMR_Timer2@state 00B5                    __end_of_SYS_Sleep 0000  
               IR_LoadCode@HighBound 01A6                         ?_RF_Receiver 0001  
                __size_ofi2___ftpack 008A               __end_ofi2_RF_ResetData 1BC0  
                 ?i2_TMR_ResetTimer0 0001                           ___ftge@ff1 00B5  
                         ___ftge@ff2 00B8                  __size_of_TMR_Timer0 0010  
                __size_of_TMR_Timer1 0010                  __size_of_TMR_Timer2 0010  
                    i1___ftpack@sign 0005               ??i2_FSH_AddressToBlock 0084  
                      ___rparam_used 000000                           ___ftdiv@f1 000C  
                         ___ftdiv@f2 000F                           ___ftdiv@f3 0016  
                          ?_LDO_Pass 0001                  __size_ofi2___lwtoft 0024  
           FSH_EraseBlock@WriteTries 000B                       i2___ftpack@arg 0080  
    __size_of_MSC_BufferCopyIntConst 0098                       i2___ftpack@exp 0083  
                  i1RF_DataInt@state 0001                     ??_SYS_DisableInt 00B5  
                     high_isr@RFtemp 00B3                          ?_InitButton 0001  
                         ___ftmul@f1 0187                           ___ftmul@f2 018A  
                         ___fttol@f1 00B5                       __pcstackCOMRAM 0001  
                        ?_InitTimer0 0001                          ?_InitTimer1 0001  
                        ?_InitTimer2 0001                          ?_InitTimers 0001  
                ??i2_TMR_ResetTimer0 0081                         __pidataBANK1 1BC8  
               IR_ReadReceiver@value 00B5         _IR_SavedTiming1_absconstaddr 0024C0  
                     i2___ftmul@sign 0095                        ?i1_RF_DataInt 0001  
            _FlashWaste_absconstaddr 002600                          _Init_System 1548  
     __end_ofi2_RF_CalculateCodesize 163C                    __end_of_InitMOTOR 1BDE  
                        _Button_Data 0102                       i2___fttol@exp1 008E  
                          ?i1___ftge 000C                    __end_of_InitFlash 1BE2  
                         ___lwtoft@c 00BD                       i2___fttol@lval 008A  
         __end_of_MSC_CleanBufferInt 15DC                            ?i2___ftge 008B  
            ??i1_BUT_IR_PinChangeInt 0001             ?_SYS_ConfigureOscillator 0001  
   __end_ofi2_SYS_ActivityTimerReset 0000                      i1_TMR_Timer0Int 1B7A  
             i1_IR_CalculateCodesize 14A4    __end_ofi2_FSH_VerifyWriteIntArray 1290  
                    i1___fttol@sign1 000A                     RF_Receiver@state 00B5  
               i2FSH_WriteIntArray@i 008B                        ?_MSC_DelayNOP 00B5  
          __end_ofi2_TMR_ResetTimer0 18F0                        ?_MSC_BlinkLED 018B  
            ?_SYS_ActivityTimerReset 0001                ?_ADC_CalculateVoltage 0001  
               i1_MSC_CleanBufferInt 15DC                        ?i2_RF_DataInt 0001  
                         __pbssBANK0 00C0                           __pbssBANK1 0100  
                         __pbssBANK2 0200                           __pbssBANK3 0300  
                  _FSH_WriteIntArray 0C60                            ?_Init_App 0001  
                   RF_CheckCode@High 00A7                        ?i2_RF_Disable 0001  
                      ?i1_TMR_Timer0 0001                        ?i1_TMR_Timer1 0001  
                      ?i1_TMR_Timer2 0001                    i1IR_LoadCode@Low1 0029  
                  i1IR_LoadCode@Low2 0030              i2FSH_EraseBlock@Address 0084  
                  ??i2_TMR_Timer0Int 0080             i1TMR_ResetTimer1@TimerOn 0002  
                    ?i2_RF_ResetData 0001                   ?_FSH_WriteIntArray 0005  
                         ??_LDO_Pass 00B5                    ??_TMR_ResetTimer0 00B6  
                  ??_TMR_ResetTimer1 00B6                    ??_TMR_ResetTimer2 0002  
                   ?_FSH_Write_IR_RF 0001                              ?_InitIR 0001  
                            ?_InitRF 0001       i2FSH_VerifyWriteIntArray@Array 0083  
                    ??_TMR_Timer0Int 00B5                      ??_TMR_Timer1Int 00B5  
                    ??_TMR_Timer2Int 00B5                      ??_TMR_Timer1Osc 00B5  
                            ?___ftge 00B5                  ??_FSH_WriteIntArray 000A  
                     ??i1_RF_DataInt 0001                        ?_IR_CheckCode 0001  
             __size_of_SYS_EnableInt 0000          __end_ofi1_ADC_ChangeChannel 192C  
                  ??_TMR_Timer0Start 0082                    ??_TMR_Timer1Start 0003  
                  ??_TMR_Timer2Start 0005                    i2RF_DataInt@state 0080  
                          ?___ftpack 00B5                 __size_ofi1_RF_Enable 0012  
                         ??i1___ftge 0012                      RF_LoadCode@High 0198  
                      ?i2_TMR_Timer0 0001           __size_of_ADC_ConversionInt 0010  
          ??_FSH_VerifyWriteIntArray 0006                           ??i2___ftge 0091  
                          ?___lwtoft 00BD           __size_ofi1_TMR_ResetTimer1 0020  
  __size_ofi2_MSC_BufferCopyIntConst 0098            ?i2_MSC_BufferCopyIntConst 0086  
             _MSC_BufferCopyIntConst 0D9C                         _Flash_Status 0103  
               __size_of_MSC_DelayMS 004E                        MSC_DelayMS@US 00B9  
            i2FSH_EraseBlock@highint 0088                        MSC_DelayNOP@i 00B7  
             __size_ofi1_IR_LoadCode 023C                              _TBLPTRH 000FF7  
                            _TBLPTRL 000FF6                              _TBLPTRU 000FF8  
               _IR_CalculateCodesize 1468                       _FSH_EraseBlock 115E  
          i2MSC_BufferCopyIntConst@i 008F                 _RF_CalculateCodesize 1516  
               __size_ofi2_RF_Enable 0012                       ??_MSC_DelayNOP 00B7  
     __end_of_SYS_ActivityTimerReset 0000                              _IR_Data 0104  
                __size_of_InitButton 000C                       ??_MSC_BlinkLED 00BE  
                            _MTR_IN1 0000                              _MTR_IN2 0000  
                            _RF_Data 0105                  __size_of_InitTimer0 0020  
                __size_of_InitTimer1 001A                  __size_of_InitTimer2 0018  
                      MSC_BlinkLED@i 018F           __end_of_FSH_AddressToBlock 1712  
          __end_of_FSH_WriteIntArray 0D00                  __size_of_InitTimers 000C  
                     ??i2_RF_DataInt 0080                            ?_high_isr 0001  
              ?i1_MSC_CleanBufferInt 0001                         ??_RF_DataInt 00B5  
                     ??i2_RF_Disable 0081    __size_ofi1_SYS_ActivityTimerReset 0000  
                     ??i1_TMR_Timer0 0001                       ??i1_TMR_Timer1 0001  
                     ??i1_TMR_Timer2 0001                    _ADC_CurrentSource 006D  
                       ??_RF_Disable 0002            ?i1_SYS_ActivityTimerReset 0001  
                         ??_Init_App 00B5                      _Timer2PostCount 0064  
                    ADC_Module@state 00B5                              _InitADC 175E  
                       ??_MTR_Rotate 00BE                              _InitLDO 19A8  
        MSC_BufferCopyIntConst@count 000C                            _ADC_Start 1BE2  
                            __Hparam 0000          MSC_BufferCopyIntConst@shift 000E  
                    __size_of_InitIR 0012                      __size_of_InitRF 0032  
                            __Lparam 0000             __size_of_RF_SetBandwidth 002A  
         __end_of_TMR_Timer1Function 1696                i2MSC_CleanBufferInt@i 0084  
               __size_of_IR_LoadCode 0252                       _BUT_ReadButton 17CA  
                     ??_IR_CheckCode 003D                      __size_of___ftge 005A  
                       ??i1___ftpack 0006                 i2TMR_Timer0Int@state 0080  
                            ___ftdiv 08DA                              ___ftmul 0588  
                            ___fttol 080A              __end_ofi1_TMR_Timer0Int 1B88  
    __end_of_SYS_ConfigureOscillator 1BA8                         ??i1___lwtoft 000C  
           __end_of_TMR_Timer0Status 1BDA             __end_of_TMR_Timer1Status 1BD4  
                            __pcinit 106C                       ??i2_TMR_Timer0 0080  
                       ??i2___ftpack 0085                           ??___ftpack 00BA  
                      ?_IR_ResetData 0001              i2___ftmul@f3_as_product 0096  
                            __ramtop 0400                         ??_TMR_Timer0 00B5  
                       ??_TMR_Timer1 00B5                         ??_TMR_Timer2 00B5  
                            __ptext0 3E4C                              __ptext1 0000  
                            __ptext2 1BA0                              __ptext3 142C  
                            __ptext4 0000                              __ptext5 0000  
                            __ptext6 0000                              __ptext7 024C  
                            __ptext8 1516                              __ptext9 3FE6  
                 __end_of_RF_DataInt 19D2                         ??i2___lwtoft 008B  
                         ??___lwtoft 00C0                            _T0CONbits 000FD5  
                          _T1CONbits 000FCD                   __end_of_RF_Disable 1A0A  
                          _T2CONbits 000FCA               __end_of_FSH_EraseBlock 11D0  
        __end_ofi2_FSH_WriteIntArray 0C60                ?_IR_CalculateCodesize 00B5  
              ?_RF_CalculateCodesize 0001                   __end_of_MTR_Rotate 0D9C  
                            _low_isr 0018          FSH_WriteIntArray@ConstArray 0005  
             ??_ADC_CalculateVoltage 0029             BUT_IR_PinChangeInt@state 00B5  
         __size_ofi2_TMR_ResetTimer0 0020             __end_ofi2_FSH_EraseBlock 115E  
           __p_IR_SavedTiming0_const 2400                        _SYS_EnableInt 0000  
           __p_IR_SavedTiming1_const 24C0             i2_SYS_ActivityTimerReset 0000  
                         ??_high_isr 00AB                       __pintcode_body 0364  
                _BUT_IR_PinChangeInt 1AD2                        ?_RF_CheckCode 0001  
               end_of_initialization 10DA                   __end_ofi1___ftpack 0FE2  
                      __Lmediumconst 2800                     IR_LoadCode@High1 0198  
                   IR_LoadCode@High2 019F                 __size_of_RF_LoadCode 0118  
                            int_func 0364                   __end_ofi1___lwtoft 17A6  
                 __end_ofi2___ftpack 106C                   __end_of_TMR_Timer0 1AB2  
                 __end_of_TMR_Timer1 1A92                   __end_of_TMR_Timer2 1A72  
                         ?_ADC_Start 0001               __end_of_BUT_ReadButton 17EC  
               __size_of_RF_Receiver 0010            FSH_Write_IR_RF@RAMaddress 0021  
                 __end_ofi2___lwtoft 17CA                        i1_IR_LoadCode 39D4  
                   FSH_Write_IR_RF@i 001E                     FSH_Write_IR_RF@j 001C  
            i1IR_CalculateCodesize@i 0007               FSH_WriteIntArray@Array 0008  
                            postdec1 000FE5                              postdec2 000FDD  
                   ??i2_IR_ResetData 0081                              postinc0 000FEE  
                            postinc2 000FDE               TMR_Timer1Function@mode 00B7  
               ?_BUT_IR_PinChangeInt 0001                    i1_IR_ReadReceiver 180E  
                     ??_IR_ResetData 0002                  __p_FlashWaste_const 2600  
          FSH_AddressToBlock@Address 0001               __size_ofi2_RF_LoadCode 010C  
                 ?i1_IR_ReadReceiver 0001           i1BUT_IR_PinChangeInt@state 0001  
                          _IRStarted 0069             __size_of_IR_ReadReceiver 0022  
                          _RF_Enable 3FE6                      ?_FSH_EraseBlock 0005  
                          _TRISAbits 000F92          ??i2_FSH_VerifyWriteIntArray 0085  
                          _TRISBbits 000F93                            _TRISCbits 000F94  
          __size_ofi1_BUT_ReadButton 0026                  ??i1_IR_ReadReceiver 0001  
                     ?_SYS_EnableInt 0001                            _RFStarted 00C7  
             ??i1_MSC_CleanBufferInt 0005                            i1___ftmul 065E  
                          i1___fttol 0A4E                __end_of_RF_SetSquelch 1AC2  
                     ??_RF_CheckCode 00A2           __size_of_FSH_WriteIntArray 00A0  
                      IR_CheckCode@i 004B                            i2___ftmul 0734  
                          i2___fttol 0994                 __end_ofi1_RF_DataInt 1A2E  
      __size_ofi2_MSC_CleanBufferInt 0030                        ?_RF_ResetData 0001  
                        ___ftdiv@exp 0019                       ?i1_IR_LoadCode 0001  
                    i2___ftpack@sign 0084                      ?_BUT_ReadButton 0001  
                       ??_InitButton 00B6                   __end_of_FlashWaste 2800  
                          _SYS_Sleep 0000                          ___ftmul@exp 0190  
                       ??_InitTimer0 00B7                         ??_InitTimer1 00B8  
                       ??_InitTimer2 00B6                       __end_of_InitIR 19F8  
                     __end_of_InitRF 15AC                    __size_of_LDO_Pass 0000  
                       ??_InitTimers 00B8            __end_ofi1_IR_ReadReceiver 1830  
        _RF_SavedTiming_absconstaddr 002580                 __end_of_MSC_DelayNOP 1946  
              ??_BUT_IR_PinChangeInt 00B5             i1MSC_CleanBufferInt@data 0001  
               __end_of_MSC_BlinkLED 142C                       __end_of___ftge 12EA  
                       ?_Init_System 0001                 __end_ofi2_RF_DataInt 19E6  
                   ?i1_TMR_Timer0Int 0001                        __pidataCOMRAM 1BE6  
               __end_ofi2_RF_Disable 1A40                    ??_RF_SetBandwidth 00B5  
               __end_ofi1_TMR_Timer0 1B7A                 __end_ofi1_TMR_Timer1 1B6C  
               __end_ofi1_TMR_Timer2 1B5E                        low_isr@IRtemp 0058  
            ?i1_IR_CalculateCodesize 0001        ADC_CalculateVoltage@ADCcounts 002C  
                         ?_RF_Enable 0001               ??_IR_CalculateCodesize 00B8  
             ??_RF_CalculateCodesize 00B5                            _InitMOTOR 1BDA  
                       _ButtonChange 0066                    __size_ofi1___ftge 0058  
              i1BUT_ReadButton@value 0001                  start_initialization 106C  
                  __size_ofi2___ftge 0058       __size_ofi1_BUT_IR_PinChangeInt 000E  
                  _ADC_ChangeChannel 18F0                            _InitFlash 1BDE  
             ADC_ConversionInt@state 00B5        __end_ofi1_BUT_IR_PinChangeInt 1B50  
                    i2_TMR_Timer0Int 1B32                           ?i1___ftmul 001B  
                         ?i1___fttol 0001                      _TMR_ResetTimer0 1870  
                    i2___fttol@sign1 0089                      _TMR_ResetTimer1 1830  
                    _TMR_ResetTimer2 1890                   ?_ADC_ChangeChannel 0001  
                 __end_of_InitButton 1BA0                     ??i2_RF_ResetData 0080  
               __end_of_IR_CheckCode 2F04                           ?i2___ftmul 008B  
                         ?i2___fttol 0080                   __end_of_InitTimer0 1870  
                 __end_of_InitTimer1 1960                   __end_of_InitTimer2 1978  
                 __end_of_InitTimers 1B94                   _MSC_CleanBufferInt 15AC  
                     ??_RF_ResetData 0001                        i2_RF_LoadCode 047C  
               __end_ofi2_TMR_Timer0 1B32     __size_of_SYS_ConfigureOscillator 0008  
                ??_ADC_ChangeChannel 00B5                      _TMR_Timer0Start 1B12  
                    _TMR_Timer1Start 1B02                      _TMR_Timer2Start 1990  
               FSH_EraseBlock@lowint 000A                    __size_of_Init_App 0036  
                        ??_ADC_Start 00B5                             ??_InitIR 00BB  
                           ??_InitRF 00BB                  ?_MSC_CleanBufferInt 00B5  
          i2_FSH_VerifyWriteIntArray 1230                           ?_SYS_Sleep 0001  
      __size_ofi2_FSH_AddressToBlock 002A                            _Timer2Use 006C  
   __end_ofi2_MSC_BufferCopyIntConst 0ECC               TMR_ResetTimer0@TimerOn 00B6  
                MSC_CleanBufferInt@i 00B9                             ??___ftge 00BB  
             TMR_ResetTimer1@TimerOn 00B6                IR_CalculateCodesize@i 00BB  
             TMR_ResetTimer2@TimerOn 0002                          __pdataBANK1 01A9  
              RF_CalculateCodesize@i 00B5       __end_ofi1_IR_CalculateCodesize 14E0  
            ?_MSC_BufferCopyIntConst 0007     __end_ofi1_SYS_ActivityTimerReset 0000  
          __end_of_ADC_ChangeChannel 190E                    __size_of___ftpack 008C  
                         ?_InitMOTOR 0001                        _IR_DataTiming 0200  
               ??_MSC_CleanBufferInt 00B9                          __pbssCOMRAM 005A  
                    ??_SYS_EnableInt 00B6                           ?_InitFlash 0001  
                  __size_of___lwtoft 0026                        __pcstackBANK0 0080  
                      __pcstackBANK1 0187                   i1IR_LoadCode@High1 002C  
                 i1IR_LoadCode@High2 0033                             ?_MTR_IN1 0001  
                           ?_MTR_IN2 0001           i2FSH_WriteIntArray@address 008C  
                  ??_IR_ReadReceiver 00B5                  __CFG_CCP2MX$DEFAULT 000000  
                     ?i2_RF_LoadCode 0001                  IR_LoadCode@LowBound 01A3  
            MSC_CleanBufferInt@count 00B7                 __end_of_IR_ResetData 1BB8  
                  __size_of_high_isr 0474                      ??i1_IR_LoadCode 0029  
                           ?_InitADC 0001                             ?_InitLDO 0001  
                    RF_CheckCode@Low 00A4                   _FSH_AddressToBlock 16EA  
                _System_State_Change 0106           __size_ofi1_IR_ReadReceiver 0022  
                          __pintcode 0008            i1MSC_CleanBufferInt@count 0003  
                      __pmediumconst 2800                      RF_DataInt@state 00B5  
                      ??i1_RF_Enable 0002                            __ptext100 1B12  
                          __ptext101 18D0                            __ptext110 160C  
                          __ptext102 1B22                            __ptext111 2F04  
                          __ptext103 3C10                            __ptext120 1230  
                          __ptext112 1BB8                            __ptext104 047C  
                          __ptext121 10E8                            __ptext113 0E34  
                          __ptext105 17A6                            __ptext122 16C0  
                          __ptext114 163C                            __ptext106 0994  
                          __ptext115 1BC0                            __ptext107 0734  
                          __ptext116 1A40                            __ptext108 0FE2  
                          __ptext117 1B32                            __ptext109 1342  
                          __ptext118 19D2                            __ptext119 0BBC  
                           ?___ftdiv 000C                             ?___ftmul 0187  
                           ?___fttol 00B5       __end_of_MSC_BufferCopyIntConst 0E34  
              __end_of_TMR_Timer0Int 1AA2                __end_of_TMR_Timer1Int 1A82  
              __end_of_TMR_Timer2Int 1A62                 __end_of_RF_CheckCode 3E4C  
              __end_of_TMR_Timer1Osc 1990                          __pintcodelo 0018  
           __size_of_FSH_Write_IR_RF 042E                         MSC_DelayMS@i 0187  
            __end_ofi2_TMR_Timer0Int 1B42                    ?_TMR_Timer0Status 0001  
                ?_FSH_AddressToBlock 0001                    ?_TMR_Timer1Status 0001  
                      ??_MSC_DelayMS 00BD           ??i2_SYS_ActivityTimerReset 0080  
            __size_of_SYS_DisableInt 0000              __end_of_TMR_ResetTimer0 1890  
            __end_of_TMR_ResetTimer1 1850              __end_of_TMR_ResetTimer2 18B0  
                      ??i2_RF_Enable 0081                   ??_TMR_Timer0Status 0080  
                        ??_RF_Enable 00B6                   ??_TMR_Timer1Status 0001  
                 _TMR_Timer1Function 166C         __size_ofi1_ADC_ChangeChannel 001E  
              __size_ofi1_RF_DataInt 0012                             ?_low_isr 0001  
                   i1_BUT_ReadButton 1738                          ??i1___ftmul 0021  
                        ??i1___fttol 0005              __end_of_TMR_Timer0Start 1B22  
            __end_of_TMR_Timer1Start 1B12              __end_of_TMR_Timer2Start 19A8  
                        ??i2___ftmul 0091                          ??i2___fttol 0084  
                  ?i2_FSH_EraseBlock 0084                  ?_TMR_Timer1Function 0001  
               ??_FSH_AddressToBlock 0005                             _DC_Motor 00C5  
                 ??i2_FSH_EraseBlock 0088                  RF_SetBandwidth@band 00B5  
                      ??_IR_LoadCode 00C0                __size_of_MSC_DelayNOP 001A  
                      LDO_Pass@state 00B5                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D                             _LDO_Pass 0000  
              __size_of_MSC_BlinkLED 0044          FSH_VerifyWriteIntArray@data 0009  
                    IR_LoadCode@Low1 0195                      IR_LoadCode@Low2 019C  
                           i1u420_20 0C9A                             i1u413_20 117A  
                           i1u414_20 1186                             i1u422_20 121E  
                           i1u419_20 0C8E                             i1u524_25 368E  
                        ??_SYS_Sleep 00B5                             i1u377_20 16F8  
              __size_ofi2_RF_DataInt 0014                             i1u476_20 0A8E  
           ??i2_RF_CalculateCodesize 0080                             i1u476_25 0A86  
                           _PIR1bits 000F9E                             i2u380_40 16D0  
                           i2u452_40 0BEA                             i2u453_40 0BF6  
                           i2u446_40 1104                             i2u447_40 1110  
                           i2u455_40 127E                             _IRChange 0067  
                           i2u484_40 09D4                             i2u484_45 09CC  
                           i2u596_45 325A                             _RCONbits 000FD0  
         i2MSC_BufferCopyIntConst@to 0089                __size_ofi2_RF_Disable 0012  
                   __CFG_WDTPS$32768 000000                __size_ofi1_TMR_Timer0 000E  
              __size_ofi1_TMR_Timer1 000E                __size_ofi1_TMR_Timer2 000E  
               i1TMR_Timer0Int@state 0001             ?_FSH_VerifyWriteIntArray 0001  
               ??_TMR_Timer1Function 00B7                             _IR_Saved 01AC  
                   ??_FSH_EraseBlock 0009                         i1_RF_DataInt 1A1C  
           i2_MSC_BufferCopyIntConst 0E34                             _RF_Saved 01AD  
               __end_of_RF_ResetData 1BB0                    i2_FSH_Write_IR_RF 2F04  
                           i1___ftge 12EA                           _ADCON0bits 000FC2  
                         _ADCON1bits 000FC1                           _ADCON2bits 000FC0  
                           i2___ftge 1342                 __size_of_Init_System 0032  
         __size_of_ADC_ChangeChannel 001E                  __end_ofi1_RF_Enable 1A1C  
                 ?i2_FSH_Write_IR_RF 0001                          ??_InitMOTOR 00B5  
              __size_of_IR_CheckCode 0702                          ??_InitFlash 00B5  
                __end_of_MSC_DelayMS 13E8             i1_SYS_ActivityTimerReset 0000  
                    ??i2_RF_LoadCode 0099                __size_ofi2_TMR_Timer0 0010  
                       _MSC_DelayNOP 192C                          _INTCON2bits 000FF1  
                      ??_RF_LoadCode 00C0                  __end_ofi2_RF_Enable 1A52  
                        _INTCON3bits 000FF0                  ??i2_FSH_Write_IR_RF 0091  
                          copy_data0 10BC                     __size_of_MTR_IN1 0000  
                   __size_of_MTR_IN2 0000                         _MSC_BlinkLED 13E8  
         i2FSH_VerifyWriteIntArray@i 008B        __size_of_ADC_CalculateVoltage 00B6  
                       i2_RF_DataInt 19D2              _SYS_ConfigureOscillator 1BA0  
                   ??_BUT_ReadButton 00B5         __size_ofi2_FSH_WriteIntArray 00A4  
                           _Init_App 14E0                        ??_RF_Receiver 00B5  
                       i2_RF_Disable 1A2E                             _Rail_VIN 01A9  
     FSH_Write_IR_RF@FlashWasteindex 001A     i2FSH_Write_IR_RF@FlashWasteindex 0099  
                         _ADC_Module 1AE2               FSH_Write_IR_RF@highint 0018  
                       i1_TMR_Timer0 1B6C                         i1_TMR_Timer1 1B5E  
                       i1_TMR_Timer2 1B50            FSH_Write_IR_RF@WriteTries 0020  
                         _EECON1bits 000FA6                             __Hparam0 0000  
                   __size_of_InitADC 0024                     __size_of_InitLDO 0016  
                    _RF_SetBandwidth 1696                             __Lparam0 0000  
            i2RF_CalculateCodesize@i 0080         __end_ofi2_MSC_CleanBufferInt 166C  
                __end_of_IR_LoadCode 39D4            __end_ofi2_FSH_Write_IR_RF 3354  
                       _IR_CheckCode 2802                         _IR_DataPlace 006B  
                   __size_of___ftdiv 00BA                     __size_of___ftmul 00D6  
                   __size_of___fttol 00D0                   i2FSH_Write_IR_RF@i 009D  
                 i2FSH_Write_IR_RF@j 009B                             ___ftpack 0ECC  
                   ?i2_TMR_Timer0Int 0001             ??_SYS_ActivityTimerReset 00B5  
                       i2_TMR_Timer0 1B22                             ___lwtoft 1712  
             MSC_CleanBufferInt@data 00B5    FSH_VerifyWriteIntArray@ConstArray 0001  
i2FSH_VerifyWriteIntArray@ConstArray 0080                     ?_TMR_ResetTimer0 0001  
                   ?_TMR_ResetTimer1 0001                     ?_TMR_ResetTimer2 0001  
                low_isr@button_state 0057                        _RF_DataTiming 0107  
                  ??_FSH_Write_IR_RF 0012                __size_of_IR_ResetData 0008  
                   __size_of_low_isr 0230                             __ptext10 0D00  
                           __ptext11 0000                             __ptext20 1A62  
                           __ptext12 0000                             __ptext21 1946  
                           __ptext13 13E8                             __ptext30 1AA2  
                           __ptext22 1A72                             __ptext14 139A  
                           __ptext31 157A                             __ptext23 166C  
                           __ptext15 192C                             __ptext40 15AC  
                           __ptext32 1AB2                             __ptext24 1978  
                           __ptext16 1548                             __ptext41 1BDE  
                           __ptext33 1696                             __ptext25 1830  
                           __ptext17 1B88                             __ptext50 14E0  
                           __ptext42 1B94                             __ptext34 1AC2  
                           __ptext26 1A82                             __ptext18 1960  
                           __ptext51 3782                             __ptext43 17CA  
                           __ptext35 19BE                             __ptext27 1850  
                           __ptext19 1A52                             __ptext60 0000  
                           __ptext52 1712                             __ptext44 1AD2  
                           __ptext36 1BDA                             __ptext28 1A92  
                           __ptext61 180E                             __ptext53 080A  
                           __ptext45 175E                             __ptext37 19A8  
                           __ptext29 1870                             __ptext70 1B5E  
                           __ptext62 1738                             __ptext54 0588  
                           __ptext46 1AE2                             __ptext38 0000  
                           __ptext71 19F8                             __ptext63 1B42  
                           __ptext55 0ECC                             __ptext47 1AF2  
                           __ptext39 19E6                             __ptext80 0D9C  
                           __ptext72 1B6C                             __ptext64 1990  
                           __ptext56 1290                             __ptext48 18F0  
                           __ptext81 15DC                             __ptext73 2802  
                           __ptext65 1890                             __ptext57 1468  
                           __ptext49 17EC                             __ptext90 0B06  
                           __ptext82 1BB0                             __ptext74 39D4  
                           __ptext66 1B50                             __ptext58 1BE2  
                           __ptext91 1782                             __ptext83 1A0A  
                           __ptext75 0A4E                             __ptext67 1BCE  
                           __ptext92 065E                             __ptext84 1B7A  
                           __ptext76 12EA                             __ptext68 1B02  
                           __ptext93 190E                             __ptext85 1A1C  
                           __ptext77 14A4                             __ptext69 18B0  
                           __ptext94 08DA                             __ptext86 0C60  
                           __ptext78 3354                             __ptext95 0F58  
                           __ptext87 11D0                             __ptext79 1BA8  
                           __ptext88 115E                             __ptext97 0000  
                           __ptext89 16EA                             __ptext98 1A2E  
                           __ptext99 1BD4        i2MSC_BufferCopyIntConst@count 008B  
      i2MSC_BufferCopyIntConst@shift 008D                    i1TMR_Timer0@state 0001  
                   ?_TMR_Timer0Start 0001                     ?_TMR_Timer1Start 0001  
                           _high_isr 0008                    i1TMR_Timer1@state 0001  
                   ?_TMR_Timer2Start 0003                    i1TMR_Timer2@state 0001  
      __size_ofi1_MSC_CleanBufferInt 0030                        __size_of_main 019A  
        __end_of_BUT_IR_PinChangeInt 1AE2                       _Activity_Timer 005A  
           i2FSH_WriteIntArray@Array 0087                  __end_of_RF_LoadCode 0364  
    __end_of_FSH_VerifyWriteIntArray 1230                __size_of_RF_CheckCode 023C  
           IR_CalculateCodesize@Code 00B5      __size_ofi2_RF_CalculateCodesize 0030  
                       MTR_IN1@state 00B5                  __end_of_RF_Receiver 1AD2  
                       MTR_IN2@state 00B5                             int$flags 006E  
      i2FSH_WriteIntArray@ConstArray 0084                          i1_RF_Enable 1A0A  
                  _SYS_ActivityTimer 142C               __size_of_RF_SetSquelch 0010  
                 ?_SYS_ActivityTimer 0001                         _IR_ResetData 1BB0  
                     _SYS_DisableInt 0000                      _IR_ReadReceiver 17EC  
                        _MSC_DelayMS 139A                         _IRValue_prev 00C6  
                        i2_RF_Enable 1A40                          _OSCTUNEbits 000F9B  
                         _INTCONbits 000FF2         __end_ofi2_FSH_AddressToBlock 16EA  
            __size_ofi2_IR_ResetData 0008                FSH_Write_IR_RF@lowint 0019  
           __size_ofi1_TMR_Timer0Int 000E        __size_of_IR_CalculateCodesize 003C  
                ??_SYS_ActivityTimer 00B6        __size_of_RF_CalculateCodesize 0032  
              FSH_Write_IR_RF@status 001D            ??_SYS_ConfigureOscillator 00B5  
                   MSC_DelayNOP@NOPs 00B5                   FSH_WriteIntArray@i 000C  
              i1_BUT_IR_PinChangeInt 1B42             FSH_WriteIntArray@address 000D  
                       _RF_CheckCode 3C10           i1IR_CalculateCodesize@Code 0001  
                           intlevel1 0000                             intlevel2 0000  
                        _IR_CodeSize 006A              __end_of_RF_SetBandwidth 16C0  
                       _RF_DataPlace 00C9                        RF_CheckCode@i 00AA  
                        ?_ADC_Module 0001                    i2TMR_Timer0@state 0080  
        i2FSH_Write_IR_RF@RAMaddress 00A0                          _IR_LoadCode 3782  
                i1_ADC_ChangeChannel 190E                           _OSCCONbits 000FD3  
           __end_ofi1_BUT_ReadButton 175E            __end_of_SYS_ActivityTimer 1468  
                     _RF_SavedTiming 2580                __size_of_RF_ResetData 0008  
         __size_ofi2_FSH_Write_IR_RF 0450               __end_of_SYS_DisableInt 0000  
        i2FSH_AddressToBlock@Address 0080      __size_of_SYS_ActivityTimerReset 0000  
                        _IR_SyncHigh 005E                 ?i1_ADC_ChangeChannel 0001  
                        _RF_CodeSize 00C8          __size_of_MSC_CleanBufferInt 0030  
             i2_RF_CalculateCodesize 160C                __end_of_SYS_EnableInt 0000  
                      _RF_SetSquelch 1AB2                          _RF_LoadCode 024C  
                         _RF_DataInt 19BE                 i2_MSC_CleanBufferInt 163C  
          __size_of_TMR_Timer0Status 0006            __size_of_TMR_Timer1Status 0006  
                         _IR_SyncLow 0060                    MSC_BlinkLED@blink 018B  
                         _RF_Disable 19F8                    MSC_BlinkLED@speed 018D  
                       _RF_ResetData 1BA8                          _RF_Receiver 1AC2  
           i2TMR_ResetTimer0@TimerOn 0081                           _MTR_Rotate 0D00  
         i2FSH_EraseBlock@WriteTries 008A                __end_ofi1_IR_LoadCode 3C10  
         ??i2_MSC_BufferCopyIntConst 008F               __end_of_RF_SavedTiming 2600  
            __size_ofi2_RF_ResetData 0008  
