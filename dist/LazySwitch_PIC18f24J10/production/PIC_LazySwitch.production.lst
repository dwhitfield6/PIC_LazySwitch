

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Aug 26 18:50:25 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F24J10
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    57                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    71                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    72  0000                     
    73                           	psect	idataBANK0
    74  001488                     __pidataBANK0:
    75                           	opt stack 0
    76                           
    77                           ;initializer for _ButtonValue_prev
    78  001488  01                 	db	1
    79                           
    80                           ;initializer for _RF_Saved
    81  001489  5C                 	db	92
    82                           
    83                           ;initializer for _System_State
    84  00148A  08                 	db	8
    85                           
    86                           	psect	smallconst
    87  000400                     __psmallconst:
    88                           	opt stack 0
    89  000400  00                 	db	0
    90  000401                     _PCB_Version:
    91                           	opt stack 0
    92  000401  50                 	db	80
    93  000402  43                 	db	67
    94  000403  42                 	db	66
    95  000404  20                 	db	32
    96  000405  72                 	db	114
    97  000406  65                 	db	101
    98  000407  76                 	db	118
    99  000408  41                 	db	65
   100  000409  00                 	db	0
   101  00040A                     __end_of_PCB_Version:
   102                           	opt stack 0
   103  00040A                     _CONF1_ChanE_Sync_Timing:
   104                           	opt stack 0
   105  00040A  0342               	dw	834
   106  00040C  0015               	dw	21
   107  00040E  0050               	dw	80
   108  000410  0016               	dw	22
   109  000412  0050               	dw	80
   110  000414  0015               	dw	21
   111  000416  004E               	dw	78
   112  000418  004F               	dw	79
   113  00041A  001A               	dw	26
   114  00041C  0016               	dw	22
   115  00041E  004E               	dw	78
   116  000420  004E               	dw	78
   117  000422  001B               	dw	27
   118  000424  0015               	dw	21
   119  000426  004F               	dw	79
   120  000428  004C               	dw	76
   121  00042A  0019               	dw	25
   122  00042C  0017               	dw	23
   123  00042E  004F               	dw	79
   124  000430  004B               	dw	75
   125  000432  001B               	dw	27
   126  000434  0015               	dw	21
   127  000436  0051               	dw	81
   128  000438  004B               	dw	75
   129  00043A  0019               	dw	25
   130  00043C  0016               	dw	22
   131  00043E  0051               	dw	81
   132  000440  0016               	dw	22
   133  000442  004F               	dw	79
   134  000444  0016               	dw	22
   135  000446  0050               	dw	80
   136  000448  0018               	dw	24
   137  00044A  004F               	dw	79
   138  00044C  004D               	dw	77
   139  00044E  0019               	dw	25
   140  000450  004C               	dw	76
   141  000452  001B               	dw	27
   142  000454  0015               	dw	21
   143  000456  0050               	dw	80
   144  000458  0015               	dw	21
   145  00045A  0051               	dw	81
   146  00045C  0015               	dw	21
   147  00045E  0050               	dw	80
   148  000460  0016               	dw	22
   149  000462  0050               	dw	80
   150  000464  0016               	dw	22
   151  000466  0051               	dw	81
   152  000468  0016               	dw	22
   153  00046A  004F               	dw	79
   154  00046C  0016               	dw	22
   155  00046E                     __end_of_CONF1_ChanE_Sync_Timing:
   156                           	opt stack 0
   157  00046E  00                 	db	0
   158  00046F  80                 	db	128
   159  000470  3F                 	db	63
   160  000471  72                 	db	114
   161  000472  31                 	db	49
   162  000473  3F                 	db	63
   163  000474  FE                 	db	254
   164  000475  75                 	db	117
   165  000476  3E                 	db	62
   166  000477  58                 	db	88
   167  000478  63                 	db	99
   168  000479  3D                 	db	61
   169  00047A  95                 	db	149
   170  00047B  1D                 	db	29
   171  00047C  3C                 	db	60
   172  00047D  C5                 	db	197
   173  00047E  AE                 	db	174
   174  00047F  3A                 	db	58
   175  000480  79                 	db	121
   176  000481  21                 	db	33
   177  000482  39                 	db	57
   178  000483  94                 	db	148
   179  000484  80                 	db	128
   180  000485  37                 	db	55
   181  000486  93                 	db	147
   182  000487  A7                 	db	167
   183  000488  35                 	db	53
   184  000489  56                 	db	86
   185  00048A  15                 	db	21
   186  00048B  34                 	db	52
   187  00048C                     __end_ofexp@coeff:
   188                           	opt stack 0
   189  00048C  00                 	db	0
   190  00048D  00                 	db	0
   191  00048E  00                 	db	0
   192  00048F  00                 	db	0
   193  000490  80                 	db	128
   194  000491  3F                 	db	63
   195  000492  F0                 	db	240
   196  000493  FF                 	db	255
   197  000494  BE                 	db	190
   198  000495  E2                 	db	226
   199  000496  A9                 	db	169
   200  000497  3E                 	db	62
   201  000498  83                 	db	131
   202  000499  76                 	db	118
   203  00049A  BE                 	db	190
   204  00049B  AE                 	db	174
   205  00049C  2B                 	db	43
   206  00049D  3E                 	db	62
   207  00049E  3C                 	db	60
   208  00049F  C3                 	db	195
   209  0004A0  BD                 	db	189
   210  0004A1  D2                 	db	210
   211  0004A2  13                 	db	19
   212  0004A3  3D                 	db	61
   213  0004A4  78                 	db	120
   214  0004A5  D3                 	db	211
   215  0004A6  BB                 	db	187
   216  0004A7                     __end_oflog@coeff:
   217                           	opt stack 0
   218  0000                     _ADCON1bits	set	4033
   219  0000                     _INTCON2bits	set	4081
   220  0000                     _INTCON3bits	set	4080
   221  0000                     _INTCONbits	set	4082
   222  0000                     _IPR1bits	set	3999
   223  0000                     _LATA	set	3977
   224  0000                     _LATB	set	3978
   225  0000                     _LATC	set	3979
   226  0000                     _PIE1bits	set	3997
   227  0000                     _PIR1bits	set	3998
   228  0000                     _PORTB	set	3969
   229  0000                     _PR2	set	4043
   230  0000                     _RCONbits	set	4048
   231  0000                     _T0CONbits	set	4053
   232  0000                     _T2CONbits	set	4042
   233  0000                     _TMR0H	set	4055
   234  0000                     _TMR0L	set	4054
   235  0000                     _TMR2	set	4044
   236  0000                     _TRISAbits	set	3986
   237  0000                     _TRISBbits	set	3987
   238  0000                     _TRISCbits	set	3988
   239                           
   240                           ; #config settings
   241  0004A7  00                 	db	0	; dummy byte at the end
   242  0000                     
   243                           	psect	cinit
   244  000F66                     __pcinit:
   245                           	opt stack 0
   246  000F66                     start_initialization:
   247                           	opt stack 0
   248  000F66                     __initialization:
   249                           	opt stack 0
   250                           
   251                           ; Clear objects allocated to BANK2 (240 bytes)
   252  000F66  EE02  F000         	lfsr	0,__pbssBANK2
   253  000F6A  0EF0               	movlw	240
   254  000F6C                     clear_0:
   255  000F6C  6AEE               	clrf	postinc0,c
   256  000F6E  06E8               	decf	wreg,f,c
   257  000F70  E1FD               	bnz	clear_0
   258                           
   259                           ; Clear objects allocated to BANK1 (240 bytes)
   260  000F72  EE01  F000         	lfsr	0,__pbssBANK1
   261  000F76  0EF0               	movlw	240
   262  000F78                     clear_1:
   263  000F78  6AEE               	clrf	postinc0,c
   264  000F7A  06E8               	decf	wreg,f,c
   265  000F7C  E1FD               	bnz	clear_1
   266                           
   267                           ; Clear objects allocated to BANK0 (5 bytes)
   268  000F7E  0100               	movlb	0
   269  000F80  6B9A               	clrf	(__pbssBANK0+4)& (0+255),b
   270  000F82  6B99               	clrf	(__pbssBANK0+3)& (0+255),b
   271  000F84  6B98               	clrf	(__pbssBANK0+2)& (0+255),b
   272  000F86  6B97               	clrf	(__pbssBANK0+1)& (0+255),b
   273  000F88  6B96               	clrf	__pbssBANK0& (0+255),b
   274                           
   275                           ; Clear objects allocated to COMRAM (15 bytes)
   276  000F8A  EE00  F048         	lfsr	0,__pbssCOMRAM
   277  000F8E  0E0F               	movlw	15
   278  000F90                     clear_2:
   279  000F90  6AEE               	clrf	postinc0,c
   280  000F92  06E8               	decf	wreg,f,c
   281  000F94  E1FD               	bnz	clear_2
   282                           
   283                           ; Initialize objects allocated to BANK0 (3 bytes)
   284                           ; load TBLPTR registers with __pidataBANK0
   285  000F96  0E88               	movlw	low __pidataBANK0
   286  000F98  6EF6               	movwf	tblptrl,c
   287  000F9A  0E14               	movlw	high __pidataBANK0
   288  000F9C  6EF7               	movwf	tblptrh,c
   289  000F9E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   290  000FA0  6EF8               	movwf	tblptru,c
   291  000FA2  0009               	tblrd		*+	;fetch initializer
   292  000FA4  CFF5 F09B          	movff	tablat,__pdataBANK0
   293  000FA8  0009               	tblrd		*+	;fetch initializer
   294  000FAA  CFF5 F09C          	movff	tablat,__pdataBANK0+1
   295  000FAE  0009               	tblrd		*+	;fetch initializer
   296  000FB0  CFF5 F09D          	movff	tablat,__pdataBANK0+2
   297  000FB4                     end_of_initialization:
   298                           	opt stack 0
   299  000FB4                     __end_of__initialization:
   300                           	opt stack 0
   301  000FB4  0E00               	movlw	low (__Lsmallconst shr (0+16))
   302  000FB6  6EF8               	movwf	tblptru,c
   303  000FB8  0E04               	movlw	high __Lsmallconst
   304  000FBA  6EF7               	movwf	tblptrh,c
   305  000FBC  0100               	movlb	0
   306  000FBE  EF22  F005         	goto	_main	;jump to C main() function
   307                           tblptru	equ	0xFF8
   308                           tblptrh	equ	0xFF7
   309                           tblptrl	equ	0xFF6
   310                           tablat	equ	0xFF5
   311                           postinc0	equ	0xFEE
   312                           wreg	equ	0xFE8
   313                           
   314                           	psect	bssCOMRAM
   315  000048                     __pbssCOMRAM:
   316                           	opt stack 0
   317  000048                     _RF_SyncHigh:
   318                           	opt stack 0
   319  000048                     	ds	2
   320  00004A                     _RF_SyncLow:
   321                           	opt stack 0
   322  00004A                     	ds	2
   323  00004C                     _Timer2Post:
   324                           	opt stack 0
   325  00004C                     	ds	2
   326  00004E                     _Timer2PostCount:
   327                           	opt stack 0
   328  00004E                     	ds	2
   329  000050                     _errno:
   330                           	opt stack 0
   331  000050                     	ds	2
   332  000052                     _ButtonChange:
   333                           	opt stack 0
   334  000052                     	ds	1
   335  000053                     _RFStarted:
   336                           	opt stack 0
   337  000053                     	ds	1
   338  000054                     _RF_CodeSize:
   339                           	opt stack 0
   340  000054                     	ds	1
   341  000055                     _RF_DataPlace:
   342                           	opt stack 0
   343  000055                     	ds	1
   344  000056                     _Timer2Use:
   345                           	opt stack 0
   346  000056                     	ds	1
   347                           tblptru	equ	0xFF8
   348                           tblptrh	equ	0xFF7
   349                           tblptrl	equ	0xFF6
   350                           tablat	equ	0xFF5
   351                           postinc0	equ	0xFEE
   352                           wreg	equ	0xFE8
   353                           
   354                           	psect	bssBANK0
   355  000096                     __pbssBANK0:
   356                           	opt stack 0
   357  000096                     _Button_Data:
   358                           	opt stack 0
   359  000096                     	ds	1
   360  000097                     _DC_Motor:
   361                           	opt stack 0
   362  000097                     	ds	1
   363  000098                     _IR_Data:
   364                           	opt stack 0
   365  000098                     	ds	1
   366  000099                     _RF_Data:
   367                           	opt stack 0
   368  000099                     	ds	1
   369  00009A                     _System_State_Change:
   370                           	opt stack 0
   371  00009A                     	ds	1
   372                           tblptru	equ	0xFF8
   373                           tblptrh	equ	0xFF7
   374                           tblptrl	equ	0xFF6
   375                           tablat	equ	0xFF5
   376                           postinc0	equ	0xFEE
   377                           wreg	equ	0xFE8
   378                           
   379                           	psect	dataBANK0
   380  00009B                     __pdataBANK0:
   381                           	opt stack 0
   382  00009B                     _ButtonValue_prev:
   383                           	opt stack 0
   384  00009B                     	ds	1
   385  00009C                     _RF_Saved:
   386                           	opt stack 0
   387  00009C                     	ds	1
   388  00009D                     _System_State:
   389                           	opt stack 0
   390  00009D                     	ds	1
   391                           tblptru	equ	0xFF8
   392                           tblptrh	equ	0xFF7
   393                           tblptrl	equ	0xFF6
   394                           tablat	equ	0xFF5
   395                           postinc0	equ	0xFEE
   396                           wreg	equ	0xFE8
   397                           
   398                           	psect	bssBANK1
   399  000100                     __pbssBANK1:
   400                           	opt stack 0
   401  000100                     _RF_DataTiming:
   402                           	opt stack 0
   403  000100                     	ds	240
   404                           tblptru	equ	0xFF8
   405                           tblptrh	equ	0xFF7
   406                           tblptrl	equ	0xFF6
   407                           tablat	equ	0xFF5
   408                           postinc0	equ	0xFEE
   409                           wreg	equ	0xFE8
   410                           
   411                           	psect	bssBANK2
   412  000200                     __pbssBANK2:
   413                           	opt stack 0
   414  000200                     _RF_SavedTiming:
   415                           	opt stack 0
   416  000200                     	ds	240
   417                           tblptru	equ	0xFF8
   418                           tblptrh	equ	0xFF7
   419                           tblptrl	equ	0xFF6
   420                           tablat	equ	0xFF5
   421                           postinc0	equ	0xFEE
   422                           wreg	equ	0xFE8
   423                           
   424                           	psect	cstackBANK0
   425  000080                     __pcstackBANK0:
   426                           	opt stack 0
   427  000080                     ?___fttol:
   428                           	opt stack 0
   429  000080                     RF_DataInt@state:
   430                           	opt stack 0
   431  000080                     RF_Receiver@state:
   432                           	opt stack 0
   433  000080                     RF_SetBandwidth@band:
   434                           	opt stack 0
   435  000080                     RF_SetSquelch@state:
   436                           	opt stack 0
   437  000080                     MTR_IN1@state:
   438                           	opt stack 0
   439  000080                     MTR_IN2@state:
   440                           	opt stack 0
   441  000080                     BUT_IR_PinChangeInt@state:
   442                           	opt stack 0
   443  000080                     BUT_ReadButton@value:
   444                           	opt stack 0
   445  000080                     TMR_Timer0@state:
   446                           	opt stack 0
   447  000080                     TMR_Timer2@state:
   448                           	opt stack 0
   449  000080                     TMR_Timer0Int@state:
   450                           	opt stack 0
   451  000080                     TMR_Timer2Int@state:
   452                           	opt stack 0
   453  000080                     MSC_DelayNOP@NOPs:
   454                           	opt stack 0
   455  000080                     MSC_CleanBufferInt@data:
   456                           	opt stack 0
   457  000080                     ___fttol@f1:
   458                           	opt stack 0
   459                           
   460                           ; 3 bytes @ 0x0
   461  000080                     	ds	1
   462  000081                     TMR_ResetTimer0@TimerOn:
   463                           	opt stack 0
   464                           
   465                           ; 1 bytes @ 0x1
   466  000081                     	ds	1
   467  000082                     MSC_DelayNOP@i:
   468                           	opt stack 0
   469  000082                     MSC_CleanBufferInt@count:
   470                           	opt stack 0
   471                           
   472                           ; 2 bytes @ 0x2
   473  000082                     	ds	2
   474  000084                     ??___fttol:
   475  000084                     MSC_CleanBufferInt@i:
   476                           	opt stack 0
   477  000084                     MSC_DelayMS@US:
   478                           	opt stack 0
   479                           
   480                           ; 4 bytes @ 0x4
   481  000084                     	ds	2
   482  000086                     MSC_BufferCopyIntConst@from:
   483                           	opt stack 0
   484                           
   485                           ; 2 bytes @ 0x6
   486  000086                     	ds	2
   487  000088                     ??_MSC_DelayMS:
   488  000088                     MSC_BufferCopyIntConst@to:
   489                           	opt stack 0
   490                           
   491                           ; 2 bytes @ 0x8
   492  000088                     	ds	1
   493  000089                     ___fttol@sign1:
   494                           	opt stack 0
   495  000089                     MSC_DelayMS@i:
   496                           	opt stack 0
   497                           
   498                           ; 4 bytes @ 0x9
   499  000089                     	ds	1
   500  00008A                     MSC_BufferCopyIntConst@count:
   501                           	opt stack 0
   502  00008A                     ___fttol@lval:
   503                           	opt stack 0
   504                           
   505                           ; 4 bytes @ 0xA
   506  00008A                     	ds	2
   507  00008C                     MSC_BufferCopyIntConst@shift:
   508                           	opt stack 0
   509                           
   510                           ; 2 bytes @ 0xC
   511  00008C                     	ds	1
   512  00008D                     MSC_BlinkLED@blink:
   513                           	opt stack 0
   514                           
   515                           ; 2 bytes @ 0xD
   516  00008D                     	ds	1
   517  00008E                     ___fttol@exp1:
   518                           	opt stack 0
   519  00008E                     MSC_BufferCopyIntConst@i:
   520                           	opt stack 0
   521                           
   522                           ; 2 bytes @ 0xE
   523  00008E                     	ds	1
   524  00008F                     ??_MSC_BlinkLED:
   525                           
   526                           ; 0 bytes @ 0xF
   527  00008F                     	ds	1
   528  000090                     TMR_LoadDefaultCode@Low:
   529                           	opt stack 0
   530                           
   531                           ; 3 bytes @ 0x10
   532  000090                     	ds	1
   533  000091                     MSC_BlinkLED@i:
   534                           	opt stack 0
   535                           
   536                           ; 2 bytes @ 0x11
   537  000091                     	ds	2
   538  000093                     TMR_LoadDefaultCode@High:
   539                           	opt stack 0
   540                           
   541                           ; 3 bytes @ 0x13
   542  000093                     	ds	3
   543  000096                     tblptru	equ	0xFF8
   544                           tblptrh	equ	0xFF7
   545                           tblptrl	equ	0xFF6
   546                           tablat	equ	0xFF5
   547                           postinc0	equ	0xFEE
   548                           wreg	equ	0xFE8
   549                           
   550                           ; 0 bytes @ 0x16
   551                           
   552                           	psect	cstackCOMRAM
   553  000001                     __pcstackCOMRAM:
   554                           	opt stack 0
   555  000001                     IR_ReadReceiver@value:
   556                           	opt stack 0
   557  000001                     i1BUT_ReadButton@value:
   558                           	opt stack 0
   559  000001                     i1TMR_Timer2@state:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x0
   563  000001                     	ds	1
   564  000002                     TMR_ResetTimer2@TimerOn:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x1
   568  000002                     	ds	1
   569  000003                     TMR_Timer2Start@time:
   570                           	opt stack 0
   571                           
   572                           ; 2 bytes @ 0x2
   573  000003                     	ds	2
   574  000005                     ??_low_isr:
   575                           
   576                           ; 0 bytes @ 0x4
   577  000005                     	ds	17
   578  000016                     low_isr@button_state:
   579                           	opt stack 0
   580                           
   581                           ; 1 bytes @ 0x15
   582  000016                     	ds	1
   583  000017                     ?___ftpack:
   584                           	opt stack 0
   585  000017                     i2TMR_Timer0@state:
   586                           	opt stack 0
   587  000017                     i2MSC_CleanBufferInt@data:
   588                           	opt stack 0
   589  000017                     ___ftpack@arg:
   590                           	opt stack 0
   591                           
   592                           ; 3 bytes @ 0x16
   593  000017                     	ds	1
   594  000018                     i2TMR_ResetTimer0@TimerOn:
   595                           	opt stack 0
   596                           
   597                           ; 1 bytes @ 0x17
   598  000018                     	ds	1
   599  000019                     i2MSC_CleanBufferInt@count:
   600                           	opt stack 0
   601                           
   602                           ; 2 bytes @ 0x18
   603  000019                     	ds	1
   604  00001A                     ___ftpack@exp:
   605                           	opt stack 0
   606                           
   607                           ; 1 bytes @ 0x19
   608  00001A                     	ds	1
   609  00001B                     ___ftpack@sign:
   610                           	opt stack 0
   611  00001B                     i2MSC_CleanBufferInt@i:
   612                           	opt stack 0
   613                           
   614                           ; 2 bytes @ 0x1A
   615  00001B                     	ds	1
   616  00001C                     ??___ftpack:
   617                           
   618                           ; 0 bytes @ 0x1B
   619  00001C                     	ds	1
   620  00001D                     MSC_BufferCopyInt@from:
   621                           	opt stack 0
   622                           
   623                           ; 2 bytes @ 0x1C
   624  00001D                     	ds	2
   625  00001F                     ?___lwtoft:
   626                           	opt stack 0
   627  00001F                     MSC_BufferCopyInt@to:
   628                           	opt stack 0
   629  00001F                     ___lwtoft@c:
   630                           	opt stack 0
   631                           
   632                           ; 2 bytes @ 0x1E
   633  00001F                     	ds	2
   634  000021                     MSC_BufferCopyInt@count:
   635                           	opt stack 0
   636                           
   637                           ; 2 bytes @ 0x20
   638  000021                     	ds	1
   639  000022                     ?___ftmul:
   640                           	opt stack 0
   641  000022                     ___ftge@ff1:
   642                           	opt stack 0
   643  000022                     ___ftmul@f1:
   644                           	opt stack 0
   645                           
   646                           ; 3 bytes @ 0x21
   647  000022                     	ds	1
   648  000023                     MSC_BufferCopyInt@shift:
   649                           	opt stack 0
   650                           
   651                           ; 2 bytes @ 0x22
   652  000023                     	ds	2
   653  000025                     ___ftge@ff2:
   654                           	opt stack 0
   655  000025                     ___ftmul@f2:
   656                           	opt stack 0
   657                           
   658                           ; 3 bytes @ 0x24
   659  000025                     	ds	2
   660  000027                     MSC_BufferCopyInt@i:
   661                           	opt stack 0
   662                           
   663                           ; 2 bytes @ 0x26
   664  000027                     	ds	1
   665  000028                     ??___ftmul:
   666  000028                     ??___ftge:
   667                           
   668                           ; 0 bytes @ 0x27
   669  000028                     	ds	3
   670  00002B                     ___ftmul@exp:
   671                           	opt stack 0
   672                           
   673                           ; 1 bytes @ 0x2A
   674  00002B                     	ds	1
   675  00002C                     ___ftmul@f3_as_product:
   676                           	opt stack 0
   677                           
   678                           ; 3 bytes @ 0x2B
   679  00002C                     	ds	3
   680  00002F                     ___ftmul@cntr:
   681                           	opt stack 0
   682                           
   683                           ; 1 bytes @ 0x2E
   684  00002F                     	ds	1
   685  000030                     ___ftmul@sign:
   686                           	opt stack 0
   687                           
   688                           ; 1 bytes @ 0x2F
   689  000030                     	ds	1
   690  000031                     RF_CheckCode@Low:
   691                           	opt stack 0
   692                           
   693                           ; 3 bytes @ 0x30
   694  000031                     	ds	3
   695  000034                     RF_CheckCode@High:
   696                           	opt stack 0
   697                           
   698                           ; 3 bytes @ 0x33
   699  000034                     	ds	3
   700  000037                     RF_CheckCode@i:
   701                           	opt stack 0
   702                           
   703                           ; 1 bytes @ 0x36
   704  000037                     	ds	1
   705  000038                     ??_high_isr:
   706                           
   707                           ; 0 bytes @ 0x37
   708  000038                     	ds	14
   709  000046                     high_isr@RFtemp:
   710                           	opt stack 0
   711                           
   712                           ; 2 bytes @ 0x45
   713  000046                     	ds	2
   714                           tblptru	equ	0xFF8
   715                           tblptrh	equ	0xFF7
   716                           tblptrl	equ	0xFF6
   717                           tablat	equ	0xFF5
   718                           postinc0	equ	0xFEE
   719                           wreg	equ	0xFE8
   720                           
   721 ;;
   722 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   723 ;;
   724 ;; *************** function _main *****************
   725 ;; Defined at:
   726 ;;		line 65 in file "main.c"
   727 ;; Parameters:    Size  Location     Type
   728 ;;		None
   729 ;; Auto vars:     Size  Location     Type
   730 ;;		None
   731 ;; Return value:  Size  Location     Type
   732 ;;                  2   34[None  ] int 
   733 ;; Registers used:
   734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   735 ;; Tracked objects:
   736 ;;		On entry : 0/0
   737 ;;		On exit  : 0/0
   738 ;;		Unchanged: 0/0
   739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
   740 ;;      Params:         0       0       0       0       0
   741 ;;      Locals:         0       0       0       0       0
   742 ;;      Temps:          0       0       0       0       0
   743 ;;      Totals:         0       0       0       0       0
   744 ;;Total ram usage:        0 bytes
   745 ;; Hardware stack levels required when called:   13
   746 ;; This function calls:
   747 ;;		_Init_App
   748 ;;		_Init_System
   749 ;;		_MSC_BlinkLED
   750 ;;		_MSC_DelayMS
   751 ;;		_MTR_Rotate
   752 ;;		_SYS_ConfigureOscillator
   753 ;;		_TMR_LoadDefaultCode
   754 ;; This function is called by:
   755 ;;		Startup code after reset
   756 ;; This function uses a non-reentrant model
   757 ;;
   758                           
   759                           	psect	text0
   760  000A44                     __ptext0:
   761                           	opt stack 0
   762  000A44                     _main:
   763                           	opt stack 18
   764                           
   765                           ;main.c: 68: SYS_ConfigureOscillator();
   766                           
   767                           ;incstack = 0
   768  000A44  EC40  F00A         	call	_SYS_ConfigureOscillator	;wreg free
   769                           
   770                           ;main.c: 69: Init_App();
   771  000A48  EC74  F008         	call	_Init_App	;wreg free
   772                           
   773                           ;main.c: 70: Init_System();
   774  000A4C  ECE6  F008         	call	_Init_System	;wreg free
   775                           
   776                           ;main.c: 72: if(RF_Saved == 92)
   777  000A50  0E5C               	movlw	92
   778  000A52  0100               	movlb	0	; () banked
   779  000A54  199C               	xorwf	_RF_Saved& (0+255),w,b
   780  000A56  A4D8               	btfss	status,2,c
   781  000A58  D00A               	goto	l3777
   782                           
   783                           ; BSR set to: 0
   784                           ;main.c: 73: {
   785                           ;main.c: 74: TMR_LoadDefaultCode();
   786  000A5A  EC5B  F006         	call	_TMR_LoadDefaultCode	;wreg free
   787                           
   788                           ;main.c: 75: MSC_BlinkLED(15);
   789  000A5E  0E00               	movlw	0
   790  000A60  0100               	movlb	0	; () banked
   791  000A62  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
   792  000A64  0E0F               	movlw	15
   793  000A66  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
   794  000A68  EC0C  F008         	call	_MSC_BlinkLED	;wreg free
   795                           
   796                           ;main.c: 76: }
   797  000A6C  D03F               	goto	l3811
   798  000A6E                     l3777:
   799                           
   800                           ;main.c: 77: else
   801                           ;main.c: 78: {
   802                           ;main.c: 79: MSC_BlinkLED(4);
   803  000A6E  0E00               	movlw	0
   804  000A70  0100               	movlb	0	; () banked
   805  000A72  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
   806  000A74  0E04               	movlw	4
   807  000A76  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
   808  000A78  EC0C  F008         	call	_MSC_BlinkLED	;wreg free
   809  000A7C  D037               	goto	l3811
   810  000A7E  D036               	goto	l3811
   811  000A80                     l3781:
   812                           
   813                           ;main.c: 84: {
   814                           ;main.c: 85: if(System_State == 8)
   815  000A80  0E08               	movlw	8
   816  000A82  0100               	movlb	0	; () banked
   817  000A84  199D               	xorwf	_System_State& (0+255),w,b
   818  000A86  A4D8               	btfss	status,2,c
   819  000A88  D033               	goto	l3813
   820                           
   821                           ; BSR set to: 0
   822                           ;main.c: 86: {
   823                           ;main.c: 88: if(System_State_Change)
   824  000A8A  0100               	movlb	0	; () banked
   825  000A8C  519A               	movf	_System_State_Change& (0+255),w,b
   826  000A8E  B4D8               	btfsc	status,2,c
   827  000A90  D015               	goto	l3795
   828                           
   829                           ; BSR set to: 0
   830                           ;main.c: 89: {
   831                           ;main.c: 91: (LATC &= ~0x10);
   832  000A92  988B               	bcf	3979,4,c	;volatile
   833                           
   834                           ; BSR set to: 0
   835                           ;main.c: 92: if(RF_Saved == 90)
   836  000A94  0E5A               	movlw	90
   837  000A96  0100               	movlb	0	; () banked
   838  000A98  199C               	xorwf	_RF_Saved& (0+255),w,b
   839  000A9A  A4D8               	btfss	status,2,c
   840  000A9C  D00B               	goto	l3793
   841                           
   842                           ; BSR set to: 0
   843                           ;main.c: 93: {
   844                           ;main.c: 94: MSC_BlinkLED(4);
   845  000A9E  0E00               	movlw	0
   846  000AA0  0100               	movlb	0	; () banked
   847  000AA2  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
   848  000AA4  0E04               	movlw	4
   849  000AA6  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
   850  000AA8  EC0C  F008         	call	_MSC_BlinkLED	;wreg free
   851                           
   852                           ;main.c: 95: RF_Saved = 91;
   853  000AAC  0E5B               	movlw	91
   854  000AAE  0100               	movlb	0	; () banked
   855  000AB0  6F9C               	movwf	_RF_Saved& (0+255),b
   856  000AB2  D000               	goto	l3793
   857  000AB4                     l3793:
   858                           
   859                           ; BSR set to: 0
   860                           ;main.c: 96: }
   861                           ;main.c: 97: System_State_Change = 0;
   862  000AB4  0E00               	movlw	0
   863  000AB6  0100               	movlb	0	; () banked
   864  000AB8  6F9A               	movwf	_System_State_Change& (0+255),b
   865  000ABA  D000               	goto	l3795
   866  000ABC                     l3795:
   867                           
   868                           ; BSR set to: 0
   869                           ;main.c: 98: }
   870                           ;main.c: 99: if(RF_Data || IR_Data || Button_Data)
   871  000ABC  0100               	movlb	0	; () banked
   872  000ABE  5199               	movf	_RF_Data& (0+255),w,b	;volatile
   873  000AC0  A4D8               	btfss	status,2,c
   874  000AC2  D008               	goto	l3801
   875                           
   876                           ; BSR set to: 0
   877  000AC4  0100               	movlb	0	; () banked
   878  000AC6  5198               	movf	_IR_Data& (0+255),w,b	;volatile
   879  000AC8  A4D8               	btfss	status,2,c
   880  000ACA  D004               	goto	l3801
   881                           
   882                           ; BSR set to: 0
   883  000ACC  0100               	movlb	0	; () banked
   884  000ACE  5196               	movf	_Button_Data& (0+255),w,b	;volatile
   885  000AD0  B4D8               	btfsc	status,2,c
   886  000AD2  D7D6               	goto	l3781
   887  000AD4                     l3801:
   888                           
   889                           ; BSR set to: 0
   890                           ;main.c: 100: {
   891                           ;main.c: 101: (LATC |= 0x10);
   892  000AD4  888B               	bsf	3979,4,c	;volatile
   893                           
   894                           ; BSR set to: 0
   895                           ;main.c: 102: MTR_Rotate();
   896  000AD6  EC4D  F007         	call	_MTR_Rotate	;wreg free
   897                           
   898                           ;main.c: 103: RF_Data = 0;
   899  000ADA  0E00               	movlw	0
   900  000ADC  0100               	movlb	0	; () banked
   901  000ADE  6F99               	movwf	_RF_Data& (0+255),b	;volatile
   902                           
   903                           ; BSR set to: 0
   904                           ;main.c: 104: IR_Data = 0;
   905  000AE0  0E00               	movlw	0
   906  000AE2  0100               	movlb	0	; () banked
   907  000AE4  6F98               	movwf	_IR_Data& (0+255),b	;volatile
   908                           
   909                           ; BSR set to: 0
   910                           ;main.c: 105: Button_Data = 0;
   911  000AE6  0E00               	movlw	0
   912  000AE8  0100               	movlb	0	; () banked
   913  000AEA  6F96               	movwf	_Button_Data& (0+255),b	;volatile
   914  000AEC                     l3811:
   915                           
   916                           ; BSR set to: 0
   917                           ;main.c: 106: (LATC &= ~0x10);
   918  000AEC  988B               	bcf	3979,4,c	;volatile
   919                           
   920                           ; BSR set to: 0
   921                           ;main.c: 107: }
   922                           ;main.c: 108: }
   923  000AEE  D7C8               	goto	l3781
   924  000AF0                     l3813:
   925                           
   926                           ; BSR set to: 0
   927                           ;main.c: 109: else if(System_State == 10)
   928  000AF0  0E0A               	movlw	10
   929  000AF2  0100               	movlb	0	; () banked
   930  000AF4  199D               	xorwf	_System_State& (0+255),w,b
   931  000AF6  A4D8               	btfss	status,2,c
   932  000AF8  D7C3               	goto	l3781
   933                           
   934                           ; BSR set to: 0
   935                           ;main.c: 110: {
   936                           ;main.c: 112: MSC_DelayMS(25);
   937  000AFA  0E19               	movlw	25
   938  000AFC  0100               	movlb	0	; () banked
   939  000AFE  6F84               	movwf	MSC_DelayMS@US& (0+255),b
   940  000B00  0E00               	movlw	0
   941  000B02  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
   942  000B04  0E00               	movlw	0
   943  000B06  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
   944  000B08  0E00               	movlw	0
   945  000B0A  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
   946  000B0C  EC81  F007         	call	_MSC_DelayMS	;wreg free
   947                           
   948                           ;main.c: 113: (LATC ^= 0x10);
   949  000B10  0E10               	movlw	16
   950  000B12  1A8B               	xorwf	3979,f,c	;volatile
   951                           
   952                           ;main.c: 114: if(RF_Data)
   953  000B14  0100               	movlb	0	; () banked
   954  000B16  5199               	movf	_RF_Data& (0+255),w,b	;volatile
   955  000B18  B4D8               	btfsc	status,2,c
   956  000B1A  D7B2               	goto	l3781
   957                           
   958                           ; BSR set to: 0
   959                           ;main.c: 115: {
   960                           ;main.c: 117: RF_Data = 0;
   961  000B1C  0E00               	movlw	0
   962  000B1E  0100               	movlb	0	; () banked
   963  000B20  6F99               	movwf	_RF_Data& (0+255),b	;volatile
   964                           
   965                           ;main.c: 118: System_State = 8;
   966  000B22  0E08               	movlw	8
   967  000B24  0100               	movlb	0	; () banked
   968  000B26  6F9D               	movwf	_System_State& (0+255),b
   969                           
   970                           ;main.c: 119: System_State_Change = 1;
   971  000B28  0E01               	movlw	1
   972  000B2A  0100               	movlb	0	; () banked
   973  000B2C  6F9A               	movwf	_System_State_Change& (0+255),b
   974                           
   975                           ; BSR set to: 0
   976                           
   977                           ; BSR set to: 0
   978                           
   979                           ; BSR set to: 0
   980                           
   981                           ; BSR set to: 0
   982  000B2E  D7A8               	goto	l3781
   983                           
   984                           ; BSR set to: 0
   985                           
   986                           ; BSR set to: 0
   987  000B30  EFAA  F000         	goto	start
   988  000B34                     __end_of_main:
   989                           	opt stack 0
   990                           tblptru	equ	0xFF8
   991                           tblptrh	equ	0xFF7
   992                           tblptrl	equ	0xFF6
   993                           tablat	equ	0xFF5
   994                           postinc0	equ	0xFEE
   995                           wreg	equ	0xFE8
   996                           status	equ	0xFD8
   997                           
   998 ;; *************** function _TMR_LoadDefaultCode *****************
   999 ;; Defined at:
  1000 ;;		line 219 in file "RF.c"
  1001 ;; Parameters:    Size  Location     Type
  1002 ;;		None
  1003 ;; Auto vars:     Size  Location     Type
  1004 ;;  High            3   19[BANK0 ] int 
  1005 ;;  Low             3   16[BANK0 ] int 
  1006 ;; Return value:  Size  Location     Type
  1007 ;;		None               void
  1008 ;; Registers used:
  1009 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1010 ;; Tracked objects:
  1011 ;;		On entry : 0/0
  1012 ;;		On exit  : 0/0
  1013 ;;		Unchanged: 0/0
  1014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  1015 ;;      Params:         0       0       0       0       0
  1016 ;;      Locals:         0       6       0       0       0
  1017 ;;      Temps:          0       0       0       0       0
  1018 ;;      Totals:         0       6       0       0       0
  1019 ;;Total ram usage:        6 bytes
  1020 ;; Hardware stack levels used:    1
  1021 ;; Hardware stack levels required when called:   10
  1022 ;; This function calls:
  1023 ;;		_MSC_BufferCopyIntConst
  1024 ;;		___fttol
  1025 ;; This function is called by:
  1026 ;;		_main
  1027 ;; This function uses a non-reentrant model
  1028 ;;
  1029                           
  1030                           	psect	text1
  1031  000CB6                     __ptext1:
  1032                           	opt stack 0
  1033  000CB6                     _TMR_LoadDefaultCode:
  1034                           	opt stack 20
  1035                           
  1036                           ;RF.c: 221: double Low = 0.0;
  1037                           
  1038                           ; BSR set to: 0
  1039                           ;incstack = 0
  1040  000CB6  0E00               	movlw	0
  1041  000CB8  0100               	movlb	0	; () banked
  1042  000CBA  6F90               	movwf	TMR_LoadDefaultCode@Low& (0+255),b
  1043  000CBC  0E00               	movlw	0
  1044  000CBE  0100               	movlb	0	; () banked
  1045  000CC0  6F91               	movwf	(TMR_LoadDefaultCode@Low+1)& (0+255),b
  1046  000CC2  0E00               	movlw	0
  1047  000CC4  0100               	movlb	0	; () banked
  1048  000CC6  6F92               	movwf	(TMR_LoadDefaultCode@Low+2)& (0+255),b
  1049                           
  1050                           ;RF.c: 222: double High = 0.0;
  1051  000CC8  0E00               	movlw	0
  1052  000CCA  0100               	movlb	0	; () banked
  1053  000CCC  6F93               	movwf	TMR_LoadDefaultCode@High& (0+255),b
  1054  000CCE  0E00               	movlw	0
  1055  000CD0  0100               	movlb	0	; () banked
  1056  000CD2  6F94               	movwf	(TMR_LoadDefaultCode@High+1)& (0+255),b
  1057  000CD4  0E00               	movlw	0
  1058  000CD6  0100               	movlb	0	; () banked
  1059  000CD8  6F95               	movwf	(TMR_LoadDefaultCode@High+2)& (0+255),b
  1060                           
  1061                           ;RF.c: 224: Low = (double)850 * (1.0 - 0.05);
  1062  000CDA  0EE0               	movlw	224
  1063  000CDC  0100               	movlb	0	; () banked
  1064  000CDE  6F90               	movwf	TMR_LoadDefaultCode@Low& (0+255),b
  1065  000CE0  0E49               	movlw	73
  1066  000CE2  0100               	movlb	0	; () banked
  1067  000CE4  6F91               	movwf	(TMR_LoadDefaultCode@Low+1)& (0+255),b
  1068  000CE6  0E44               	movlw	68
  1069  000CE8  0100               	movlb	0	; () banked
  1070  000CEA  6F92               	movwf	(TMR_LoadDefaultCode@Low+2)& (0+255),b
  1071                           
  1072                           ;RF.c: 225: High = (double)850 * (1.0 + 0.05);
  1073  000CEC  0E20               	movlw	32
  1074  000CEE  0100               	movlb	0	; () banked
  1075  000CF0  6F93               	movwf	TMR_LoadDefaultCode@High& (0+255),b
  1076  000CF2  0E5F               	movlw	95
  1077  000CF4  0100               	movlb	0	; () banked
  1078  000CF6  6F94               	movwf	(TMR_LoadDefaultCode@High+1)& (0+255),b
  1079  000CF8  0E44               	movlw	68
  1080  000CFA  0100               	movlb	0	; () banked
  1081  000CFC  6F95               	movwf	(TMR_LoadDefaultCode@High+2)& (0+255),b
  1082                           
  1083                           ; BSR set to: 0
  1084                           ;RF.c: 227: RF_SyncLow = (unsigned int) Low;
  1085  000CFE  C090  F080         	movff	TMR_LoadDefaultCode@Low,___fttol@f1
  1086  000D02  C091  F081         	movff	TMR_LoadDefaultCode@Low+1,___fttol@f1+1
  1087  000D06  C092  F082         	movff	TMR_LoadDefaultCode@Low+2,___fttol@f1+2
  1088  000D0A  EC50  F003         	call	___fttol	;wreg free
  1089  000D0E  C080  F04A         	movff	?___fttol,_RF_SyncLow
  1090  000D12  C081  F04B         	movff	?___fttol+1,_RF_SyncLow+1
  1091                           
  1092                           ;RF.c: 228: RF_SyncHigh = (unsigned int) High;
  1093  000D16  C093  F080         	movff	TMR_LoadDefaultCode@High,___fttol@f1
  1094  000D1A  C094  F081         	movff	TMR_LoadDefaultCode@High+1,___fttol@f1+1
  1095  000D1E  C095  F082         	movff	TMR_LoadDefaultCode@High+2,___fttol@f1+2
  1096  000D22  EC50  F003         	call	___fttol	;wreg free
  1097  000D26  C080  F048         	movff	?___fttol,_RF_SyncHigh
  1098  000D2A  C081  F049         	movff	?___fttol+1,_RF_SyncHigh+1
  1099                           
  1100                           ;RF.c: 230: MSC_BufferCopyIntConst(&CONF1_ChanE_Sync_Timing,&RF_SavedTiming,50,0);
  1101  000D2E  0E0A               	movlw	low _CONF1_ChanE_Sync_Timing
  1102  000D30  0100               	movlb	0	; () banked
  1103  000D32  6F86               	movwf	MSC_BufferCopyIntConst@from& (0+255),b
  1104  000D34  0E04               	movlw	high _CONF1_ChanE_Sync_Timing
  1105  000D36  0100               	movlb	0	; () banked
  1106  000D38  6F87               	movwf	(MSC_BufferCopyIntConst@from+1)& (0+255),b
  1107  000D3A  0E00               	movlw	low _RF_SavedTiming
  1108  000D3C  0100               	movlb	0	; () banked
  1109  000D3E  6F88               	movwf	MSC_BufferCopyIntConst@to& (0+255),b
  1110  000D40  0E02               	movlw	high _RF_SavedTiming
  1111  000D42  0100               	movlb	0	; () banked
  1112  000D44  6F89               	movwf	(MSC_BufferCopyIntConst@to+1)& (0+255),b
  1113  000D46  0E00               	movlw	0
  1114  000D48  0100               	movlb	0	; () banked
  1115  000D4A  6F8B               	movwf	(MSC_BufferCopyIntConst@count+1)& (0+255),b
  1116  000D4C  0E32               	movlw	50
  1117  000D4E  6F8A               	movwf	MSC_BufferCopyIntConst@count& (0+255),b
  1118  000D50  0E00               	movlw	0
  1119  000D52  0100               	movlb	0	; () banked
  1120  000D54  6F8D               	movwf	(MSC_BufferCopyIntConst@shift+1)& (0+255),b
  1121  000D56  0E00               	movlw	0
  1122  000D58  6F8C               	movwf	MSC_BufferCopyIntConst@shift& (0+255),b
  1123  000D5A  ECFD  F005         	call	_MSC_BufferCopyIntConst	;wreg free
  1124                           
  1125                           ;RF.c: 231: RF_CodeSize = 50;
  1126  000D5E  0E32               	movlw	50
  1127  000D60  6E54               	movwf	_RF_CodeSize,c
  1128  000D62  0012               	return		;funcret
  1129  000D64                     __end_of_TMR_LoadDefaultCode:
  1130                           	opt stack 0
  1131                           tblptru	equ	0xFF8
  1132                           tblptrh	equ	0xFF7
  1133                           tblptrl	equ	0xFF6
  1134                           tablat	equ	0xFF5
  1135                           postinc0	equ	0xFEE
  1136                           wreg	equ	0xFE8
  1137                           status	equ	0xFD8
  1138                           
  1139 ;; *************** function ___fttol *****************
  1140 ;; Defined at:
  1141 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  1142 ;; Parameters:    Size  Location     Type
  1143 ;;  f1              3    0[BANK0 ] float 
  1144 ;; Auto vars:     Size  Location     Type
  1145 ;;  lval            4   10[BANK0 ] unsigned long 
  1146 ;;  exp1            1   14[BANK0 ] unsigned char 
  1147 ;;  sign1           1    9[BANK0 ] unsigned char 
  1148 ;; Return value:  Size  Location     Type
  1149 ;;                  4    0[BANK0 ] long 
  1150 ;; Registers used:
  1151 ;;		wreg, status,2, status,0
  1152 ;; Tracked objects:
  1153 ;;		On entry : 0/0
  1154 ;;		On exit  : 0/0
  1155 ;;		Unchanged: 0/0
  1156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  1157 ;;      Params:         0       4       0       0       0
  1158 ;;      Locals:         0       6       0       0       0
  1159 ;;      Temps:          0       5       0       0       0
  1160 ;;      Totals:         0      15       0       0       0
  1161 ;;Total ram usage:       15 bytes
  1162 ;; Hardware stack levels used:    1
  1163 ;; Hardware stack levels required when called:    8
  1164 ;; This function calls:
  1165 ;;		Nothing
  1166 ;; This function is called by:
  1167 ;;		_TMR_LoadDefaultCode
  1168 ;;		_RF_CalculateNewCode
  1169 ;;		_MSC_Round
  1170 ;;		_MSC_DB_Round
  1171 ;;		_MSC_LG_Round
  1172 ;;		_MSC_Scale
  1173 ;; This function uses a non-reentrant model
  1174 ;;
  1175                           
  1176                           	psect	text2
  1177  0006A0                     __ptext2:
  1178                           	opt stack 0
  1179  0006A0                     ___fttol:
  1180                           	opt stack 21
  1181                           
  1182                           ;incstack = 0
  1183  0006A0  C082  F084         	movff	___fttol@f1+2,??___fttol
  1184  0006A4  0100               	movlb	0	; () banked
  1185  0006A6  6B85               	clrf	(??___fttol+1)& (0+255),b
  1186  0006A8  6B86               	clrf	(??___fttol+2)& (0+255),b
  1187  0006AA  0100               	movlb	0	; () banked
  1188  0006AC  3581               	rlcf	(___fttol@f1+1)& (0+255),w,b
  1189  0006AE  0100               	movlb	0	; () banked
  1190  0006B0  3784               	rlcf	??___fttol& (0+255),f,b
  1191  0006B2  E301               	bnc	u3451
  1192  0006B4  8185               	bsf	(??___fttol+1)& (0+255),0,b
  1193  0006B6                     u3451:
  1194  0006B6  0100               	movlb	0	; () banked
  1195  0006B8  5184               	movf	??___fttol& (0+255),w,b
  1196  0006BA  0100               	movlb	0	; () banked
  1197  0006BC  6F8E               	movwf	___fttol@exp1& (0+255),b
  1198  0006BE  0100               	movlb	0	; () banked
  1199  0006C0  518E               	movf	___fttol@exp1& (0+255),w,b
  1200  0006C2  A4D8               	btfss	status,2,c
  1201  0006C4  D00A               	goto	l3529
  1202                           
  1203                           ; BSR set to: 0
  1204  0006C6  0E00               	movlw	0
  1205  0006C8  0100               	movlb	0	; () banked
  1206  0006CA  6F80               	movwf	?___fttol& (0+255),b
  1207  0006CC  0E00               	movlw	0
  1208  0006CE  6F81               	movwf	(?___fttol+1)& (0+255),b
  1209  0006D0  0E00               	movlw	0
  1210  0006D2  6F82               	movwf	(?___fttol+2)& (0+255),b
  1211  0006D4  0E00               	movlw	0
  1212  0006D6  6F83               	movwf	(?___fttol+3)& (0+255),b
  1213                           
  1214                           ; BSR set to: 0
  1215  0006D8  0012               	return	
  1216  0006DA                     l3529:
  1217                           
  1218                           ; BSR set to: 0
  1219  0006DA  0E17               	movlw	23
  1220  0006DC  0100               	movlb	0	; () banked
  1221  0006DE  6F84               	movwf	??___fttol& (0+255),b
  1222  0006E0  C080  F085         	movff	___fttol@f1,??___fttol+1
  1223  0006E4  C081  F086         	movff	___fttol@f1+1,??___fttol+2
  1224  0006E8  C082  F087         	movff	___fttol@f1+2,??___fttol+3
  1225  0006EC  0100               	movlb	0	; () banked
  1226  0006EE  2984               	incf	??___fttol& (0+255),w,b
  1227  0006F0  0100               	movlb	0	; () banked
  1228  0006F2  6F88               	movwf	(??___fttol+4)& (0+255),b
  1229  0006F4  D005               	goto	u3470
  1230  0006F6                     u3475:
  1231  0006F6  0100               	movlb	0	; () banked
  1232  0006F8  90D8               	bcf	status,0,c
  1233  0006FA  3387               	rrcf	(??___fttol+3)& (0+255),f,b
  1234  0006FC  3386               	rrcf	(??___fttol+2)& (0+255),f,b
  1235  0006FE  3385               	rrcf	(??___fttol+1)& (0+255),f,b
  1236  000700                     u3470:
  1237  000700  0100               	movlb	0	; () banked
  1238  000702  2F88               	decfsz	(??___fttol+4)& (0+255),f,b
  1239  000704  D7F8               	goto	u3475
  1240  000706  0100               	movlb	0	; () banked
  1241  000708  5185               	movf	(??___fttol+1)& (0+255),w,b
  1242  00070A  0100               	movlb	0	; () banked
  1243  00070C  6F89               	movwf	___fttol@sign1& (0+255),b
  1244                           
  1245                           ; BSR set to: 0
  1246  00070E  0100               	movlb	0	; () banked
  1247  000710  8F81               	bsf	(___fttol@f1+1)& (0+255),7,b
  1248                           
  1249                           ; BSR set to: 0
  1250  000712  0EFF               	movlw	255
  1251  000714  0100               	movlb	0	; () banked
  1252  000716  1780               	andwf	___fttol@f1& (0+255),f,b
  1253  000718  0EFF               	movlw	255
  1254  00071A  0100               	movlb	0	; () banked
  1255  00071C  1781               	andwf	(___fttol@f1+1)& (0+255),f,b
  1256  00071E  0E00               	movlw	0
  1257  000720  0100               	movlb	0	; () banked
  1258  000722  1782               	andwf	(___fttol@f1+2)& (0+255),f,b
  1259                           
  1260                           ; BSR set to: 0
  1261  000724  0100               	movlb	0	; () banked
  1262  000726  5180               	movf	___fttol@f1& (0+255),w,b
  1263  000728  0100               	movlb	0	; () banked
  1264  00072A  6F8A               	movwf	___fttol@lval& (0+255),b
  1265  00072C  0100               	movlb	0	; () banked
  1266  00072E  5181               	movf	(___fttol@f1+1)& (0+255),w,b
  1267  000730  0100               	movlb	0	; () banked
  1268  000732  6F8B               	movwf	(___fttol@lval+1)& (0+255),b
  1269  000734  0100               	movlb	0	; () banked
  1270  000736  5182               	movf	(___fttol@f1+2)& (0+255),w,b
  1271  000738  0100               	movlb	0	; () banked
  1272  00073A  6F8C               	movwf	(___fttol@lval+2)& (0+255),b
  1273  00073C  0100               	movlb	0	; () banked
  1274  00073E  6B8D               	clrf	(___fttol@lval+3)& (0+255),b
  1275                           
  1276                           ; BSR set to: 0
  1277  000740  0E8E               	movlw	142
  1278  000742  0100               	movlb	0	; () banked
  1279  000744  5F8E               	subwf	___fttol@exp1& (0+255),f,b
  1280                           
  1281                           ; BSR set to: 0
  1282  000746  0100               	movlb	0	; () banked
  1283  000748  AF8E               	btfss	___fttol@exp1& (0+255),7,b
  1284  00074A  D01B               	goto	l3551
  1285                           
  1286                           ; BSR set to: 0
  1287  00074C  0100               	movlb	0	; () banked
  1288  00074E  518E               	movf	___fttol@exp1& (0+255),w,b
  1289  000750  0A80               	xorlw	128
  1290  000752  0F8F               	addlw	143
  1291  000754  B0D8               	btfsc	status,0,c
  1292  000756  D00B               	goto	l3547
  1293                           
  1294                           ; BSR set to: 0
  1295  000758  0E00               	movlw	0
  1296  00075A  0100               	movlb	0	; () banked
  1297  00075C  6F80               	movwf	?___fttol& (0+255),b
  1298  00075E  0E00               	movlw	0
  1299  000760  6F81               	movwf	(?___fttol+1)& (0+255),b
  1300  000762  0E00               	movlw	0
  1301  000764  6F82               	movwf	(?___fttol+2)& (0+255),b
  1302  000766  0E00               	movlw	0
  1303  000768  6F83               	movwf	(?___fttol+3)& (0+255),b
  1304                           
  1305                           ; BSR set to: 0
  1306  00076A  0012               	return	
  1307                           
  1308                           ; BSR set to: 0
  1309  00076C  D000               	goto	l3547
  1310  00076E                     l3547:
  1311                           
  1312                           ; BSR set to: 0
  1313  00076E  0100               	movlb	0	; () banked
  1314  000770  90D8               	bcf	status,0,c
  1315  000772  338D               	rrcf	(___fttol@lval+3)& (0+255),f,b
  1316  000774  338C               	rrcf	(___fttol@lval+2)& (0+255),f,b
  1317  000776  338B               	rrcf	(___fttol@lval+1)& (0+255),f,b
  1318  000778  338A               	rrcf	___fttol@lval& (0+255),f,b
  1319                           
  1320                           ; BSR set to: 0
  1321  00077A  0100               	movlb	0	; () banked
  1322  00077C  3F8E               	incfsz	___fttol@exp1& (0+255),f,b
  1323  00077E  D7F7               	goto	l3547
  1324                           
  1325                           ; BSR set to: 0
  1326  000780  D01F               	goto	l3561
  1327  000782                     l3551:
  1328                           
  1329                           ; BSR set to: 0
  1330  000782  0E17               	movlw	23
  1331  000784  0100               	movlb	0	; () banked
  1332  000786  658E               	cpfsgt	___fttol@exp1& (0+255),b
  1333  000788  D014               	goto	l3559
  1334                           
  1335                           ; BSR set to: 0
  1336  00078A  0E00               	movlw	0
  1337  00078C  0100               	movlb	0	; () banked
  1338  00078E  6F80               	movwf	?___fttol& (0+255),b
  1339  000790  0E00               	movlw	0
  1340  000792  6F81               	movwf	(?___fttol+1)& (0+255),b
  1341  000794  0E00               	movlw	0
  1342  000796  6F82               	movwf	(?___fttol+2)& (0+255),b
  1343  000798  0E00               	movlw	0
  1344  00079A  6F83               	movwf	(?___fttol+3)& (0+255),b
  1345                           
  1346                           ; BSR set to: 0
  1347  00079C  0012               	return	
  1348                           
  1349                           ; BSR set to: 0
  1350  00079E  D009               	goto	l3559
  1351  0007A0                     l3557:
  1352                           
  1353                           ; BSR set to: 0
  1354  0007A0  0100               	movlb	0	; () banked
  1355  0007A2  90D8               	bcf	status,0,c
  1356  0007A4  378A               	rlcf	___fttol@lval& (0+255),f,b
  1357  0007A6  378B               	rlcf	(___fttol@lval+1)& (0+255),f,b
  1358  0007A8  378C               	rlcf	(___fttol@lval+2)& (0+255),f,b
  1359  0007AA  378D               	rlcf	(___fttol@lval+3)& (0+255),f,b
  1360  0007AC  0100               	movlb	0	; () banked
  1361  0007AE  078E               	decf	___fttol@exp1& (0+255),f,b
  1362  0007B0  D000               	goto	l3559
  1363  0007B2                     l3559:
  1364                           
  1365                           ; BSR set to: 0
  1366  0007B2  0100               	movlb	0	; () banked
  1367  0007B4  518E               	movf	___fttol@exp1& (0+255),w,b
  1368  0007B6  0100               	movlb	0	; () banked
  1369  0007B8  B4D8               	btfsc	status,2,c
  1370  0007BA  D002               	goto	l3561
  1371  0007BC  D7F1               	goto	l3557
  1372                           
  1373                           ; BSR set to: 0
  1374  0007BE  D000               	goto	l3561
  1375  0007C0                     l3561:
  1376                           
  1377                           ; BSR set to: 0
  1378  0007C0  0100               	movlb	0	; () banked
  1379  0007C2  5189               	movf	___fttol@sign1& (0+255),w,b
  1380  0007C4  0100               	movlb	0	; () banked
  1381  0007C6  B4D8               	btfsc	status,2,c
  1382  0007C8  D00A               	goto	l3565
  1383                           
  1384                           ; BSR set to: 0
  1385  0007CA  0100               	movlb	0	; () banked
  1386  0007CC  1F8D               	comf	(___fttol@lval+3)& (0+255),f,b
  1387  0007CE  1F8C               	comf	(___fttol@lval+2)& (0+255),f,b
  1388  0007D0  1F8B               	comf	(___fttol@lval+1)& (0+255),f,b
  1389  0007D2  6D8A               	negf	___fttol@lval& (0+255),b
  1390  0007D4  0E00               	movlw	0
  1391  0007D6  238B               	addwfc	(___fttol@lval+1)& (0+255),f,b
  1392  0007D8  238C               	addwfc	(___fttol@lval+2)& (0+255),f,b
  1393  0007DA  238D               	addwfc	(___fttol@lval+3)& (0+255),f,b
  1394  0007DC  D000               	goto	l3565
  1395  0007DE                     l3565:
  1396                           
  1397                           ; BSR set to: 0
  1398  0007DE  C08A  F080         	movff	___fttol@lval,?___fttol
  1399  0007E2  C08B  F081         	movff	___fttol@lval+1,?___fttol+1
  1400  0007E6  C08C  F082         	movff	___fttol@lval+2,?___fttol+2
  1401  0007EA  C08D  F083         	movff	___fttol@lval+3,?___fttol+3
  1402  0007EE  0012               	return	
  1403                           
  1404                           ; BSR set to: 0
  1405                           
  1406                           ; BSR set to: 0
  1407  0007F0  0012               	return		;funcret
  1408  0007F2                     __end_of___fttol:
  1409                           	opt stack 0
  1410                           tblptru	equ	0xFF8
  1411                           tblptrh	equ	0xFF7
  1412                           tblptrl	equ	0xFF6
  1413                           tablat	equ	0xFF5
  1414                           postinc0	equ	0xFEE
  1415                           wreg	equ	0xFE8
  1416                           status	equ	0xFD8
  1417                           
  1418 ;; *************** function _MSC_BufferCopyIntConst *****************
  1419 ;; Defined at:
  1420 ;;		line 238 in file "MISC.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;  from            2    6[BANK0 ] PTR const unsigned int 
  1423 ;;		 -> CONF1_ChanE_Sync_Timing(100), 
  1424 ;;  to              2    8[BANK0 ] PTR unsigned int 
  1425 ;;		 -> RF_SavedTiming(240), 
  1426 ;;  count           2   10[BANK0 ] unsigned int 
  1427 ;;  shift           2   12[BANK0 ] unsigned int 
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;  i               2   14[BANK0 ] unsigned int 
  1430 ;; Return value:  Size  Location     Type
  1431 ;;		None               void
  1432 ;; Registers used:
  1433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  1439 ;;      Params:         0       8       0       0       0
  1440 ;;      Locals:         0       2       0       0       0
  1441 ;;      Temps:          0       0       0       0       0
  1442 ;;      Totals:         0      10       0       0       0
  1443 ;;Total ram usage:       10 bytes
  1444 ;; Hardware stack levels used:    1
  1445 ;; Hardware stack levels required when called:    9
  1446 ;; This function calls:
  1447 ;;		_MSC_CleanBufferInt
  1448 ;; This function is called by:
  1449 ;;		_TMR_LoadDefaultCode
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text3
  1454  000BFA                     __ptext3:
  1455                           	opt stack 0
  1456  000BFA                     _MSC_BufferCopyIntConst:
  1457                           	opt stack 20
  1458                           
  1459                           ;MISC.c: 240: unsigned int i=0;
  1460                           
  1461                           ; BSR set to: 0
  1462                           ;incstack = 0
  1463  000BFA  0E00               	movlw	0
  1464  000BFC  0100               	movlb	0	; () banked
  1465  000BFE  6F8F               	movwf	(MSC_BufferCopyIntConst@i+1)& (0+255),b
  1466  000C00  0E00               	movlw	0
  1467  000C02  6F8E               	movwf	MSC_BufferCopyIntConst@i& (0+255),b
  1468                           
  1469                           ; BSR set to: 0
  1470                           ;MISC.c: 241: MSC_CleanBufferInt(to,count);
  1471  000C04  C088  F080         	movff	MSC_BufferCopyIntConst@to,MSC_CleanBufferInt@data
  1472  000C08  C089  F081         	movff	MSC_BufferCopyIntConst@to+1,MSC_CleanBufferInt@data+1
  1473  000C0C  C08A  F082         	movff	MSC_BufferCopyIntConst@count,MSC_CleanBufferInt@count
  1474  000C10  C08B  F083         	movff	MSC_BufferCopyIntConst@count+1,MSC_CleanBufferInt@count+1
  1475  000C14  ECE1  F007         	call	_MSC_CleanBufferInt	;wreg free
  1476                           
  1477                           ;MISC.c: 242: for(i = shift; i>0; i--)
  1478  000C18  C08C  F08E         	movff	MSC_BufferCopyIntConst@shift,MSC_BufferCopyIntConst@i
  1479  000C1C  C08D  F08F         	movff	MSC_BufferCopyIntConst@shift+1,MSC_BufferCopyIntConst@i+1
  1480  000C20                     l3379:
  1481  000C20  0100               	movlb	0	; () banked
  1482  000C22  518E               	movf	MSC_BufferCopyIntConst@i& (0+255),w,b
  1483  000C24  0100               	movlb	0	; () banked
  1484  000C26  118F               	iorwf	(MSC_BufferCopyIntConst@i+1)& (0+255),w,b
  1485  000C28  B4D8               	btfsc	status,2,c
  1486  000C2A  D032               	goto	l3399
  1487  000C2C  D001               	goto	l3383
  1488                           
  1489                           ; BSR set to: 0
  1490  000C2E  D030               	goto	l3399
  1491  000C30                     l3383:
  1492                           
  1493                           ; BSR set to: 0
  1494                           ;MISC.c: 243: {
  1495                           ;MISC.c: 244: *to = ' ';
  1496  000C30  C088  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
  1497  000C34  C089  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
  1498  000C38  0E20               	movlw	32
  1499  000C3A  6EDE               	movwf	postinc2,c
  1500  000C3C  0E00               	movlw	0
  1501  000C3E  6EDD               	movwf	postdec2,c
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;MISC.c: 245: to++;
  1505  000C40  0E02               	movlw	2
  1506  000C42  0100               	movlb	0	; () banked
  1507  000C44  2788               	addwf	MSC_BufferCopyIntConst@to& (0+255),f,b
  1508  000C46  0E00               	movlw	0
  1509  000C48  2389               	addwfc	(MSC_BufferCopyIntConst@to+1)& (0+255),f,b
  1510                           
  1511                           ; BSR set to: 0
  1512  000C4A  0100               	movlb	0	; () banked
  1513  000C4C  078E               	decf	MSC_BufferCopyIntConst@i& (0+255),f,b
  1514  000C4E  A0D8               	btfss	status,0,c
  1515  000C50  078F               	decf	(MSC_BufferCopyIntConst@i+1)& (0+255),f,b
  1516  000C52  D7E6               	goto	l3379
  1517                           
  1518                           ; BSR set to: 0
  1519                           ;MISC.c: 246: }
  1520                           ;MISC.c: 247: while(*from != 0 && count >0)
  1521                           
  1522                           ; BSR set to: 0
  1523  000C54  D01D               	goto	l3399
  1524  000C56                     l3391:
  1525                           
  1526                           ; BSR set to: 0
  1527                           ;MISC.c: 248: {
  1528                           ;MISC.c: 249: *to = *from;
  1529  000C56  C086  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
  1530  000C5A  C087  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
  1531  000C5E                     	if	0	;tblptru may be non-zero
  1532  000C5E                     	endif
  1533  000C5E                     	if	0	;tblptru may be non-zero
  1534  000C5E                     	endif
  1535  000C5E  C088  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
  1536  000C62  C089  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
  1537  000C66  0009               	tblrd		*+
  1538  000C68  CFF5 FFDE          	movff	tablat,postinc2
  1539  000C6C  0008               	tblrd		*
  1540  000C6E  CFF5 FFDD          	movff	tablat,postdec2
  1541                           
  1542                           ; BSR set to: 0
  1543                           ;MISC.c: 250: from++;
  1544  000C72  0E02               	movlw	2
  1545  000C74  0100               	movlb	0	; () banked
  1546  000C76  2786               	addwf	MSC_BufferCopyIntConst@from& (0+255),f,b
  1547  000C78  0E00               	movlw	0
  1548  000C7A  2387               	addwfc	(MSC_BufferCopyIntConst@from+1)& (0+255),f,b
  1549                           
  1550                           ; BSR set to: 0
  1551                           ;MISC.c: 251: to++;
  1552  000C7C  0E02               	movlw	2
  1553  000C7E  0100               	movlb	0	; () banked
  1554  000C80  2788               	addwf	MSC_BufferCopyIntConst@to& (0+255),f,b
  1555  000C82  0E00               	movlw	0
  1556  000C84  2389               	addwfc	(MSC_BufferCopyIntConst@to+1)& (0+255),f,b
  1557                           
  1558                           ; BSR set to: 0
  1559                           ;MISC.c: 252: count--;
  1560  000C86  0100               	movlb	0	; () banked
  1561  000C88  078A               	decf	MSC_BufferCopyIntConst@count& (0+255),f,b
  1562  000C8A  A0D8               	btfss	status,0,c
  1563  000C8C  078B               	decf	(MSC_BufferCopyIntConst@count+1)& (0+255),f,b
  1564  000C8E  D000               	goto	l3399
  1565  000C90                     l3399:
  1566                           
  1567                           ; BSR set to: 0
  1568  000C90  C086  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
  1569  000C94  C087  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
  1570  000C98                     	if	0	;tblptru may be non-zero
  1571  000C98                     	endif
  1572  000C98                     	if	0	;tblptru may be non-zero
  1573  000C98                     	endif
  1574  000C98  0009               	tblrd		*+
  1575  000C9A  50F5               	movf	tablat,w,c
  1576  000C9C  0009               	tblrd		*+
  1577  000C9E  10F5               	iorwf	tablat,w,c
  1578  000CA0  B4D8               	btfsc	status,2,c
  1579  000CA2  0012               	return	
  1580                           
  1581                           ; BSR set to: 0
  1582  000CA4  0100               	movlb	0	; () banked
  1583  000CA6  518A               	movf	MSC_BufferCopyIntConst@count& (0+255),w,b
  1584  000CA8  0100               	movlb	0	; () banked
  1585  000CAA  118B               	iorwf	(MSC_BufferCopyIntConst@count+1)& (0+255),w,b
  1586  000CAC  B4D8               	btfsc	status,2,c
  1587  000CAE  0012               	return	
  1588  000CB0  D7D2               	goto	l3391
  1589                           
  1590                           ; BSR set to: 0
  1591  000CB2  0012               	return	
  1592                           
  1593                           ; BSR set to: 0
  1594                           
  1595                           ; BSR set to: 0
  1596  000CB4  0012               	return		;funcret
  1597  000CB6                     __end_of_MSC_BufferCopyIntConst:
  1598                           	opt stack 0
  1599                           tblptru	equ	0xFF8
  1600                           tblptrh	equ	0xFF7
  1601                           tblptrl	equ	0xFF6
  1602                           tablat	equ	0xFF5
  1603                           postinc0	equ	0xFEE
  1604                           wreg	equ	0xFE8
  1605                           postinc2	equ	0xFDE
  1606                           postdec2	equ	0xFDD
  1607                           fsr2h	equ	0xFDA
  1608                           fsr2l	equ	0xFD9
  1609                           status	equ	0xFD8
  1610                           
  1611 ;; *************** function _SYS_ConfigureOscillator *****************
  1612 ;; Defined at:
  1613 ;;		line 54 in file "SYSTEM.c"
  1614 ;; Parameters:    Size  Location     Type
  1615 ;;		None
  1616 ;; Auto vars:     Size  Location     Type
  1617 ;;		None
  1618 ;; Return value:  Size  Location     Type
  1619 ;;		None               void
  1620 ;; Registers used:
  1621 ;;		None
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  1627 ;;      Params:         0       0       0       0       0
  1628 ;;      Locals:         0       0       0       0       0
  1629 ;;      Temps:          0       0       0       0       0
  1630 ;;      Totals:         0       0       0       0       0
  1631 ;;Total ram usage:        0 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    8
  1634 ;; This function calls:
  1635 ;;		Nothing
  1636 ;; This function is called by:
  1637 ;;		_main
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           	psect	text4
  1642  001480                     __ptext4:
  1643                           	opt stack 0
  1644  001480                     _SYS_ConfigureOscillator:
  1645                           	opt stack 22
  1646                           
  1647                           ;SYSTEM.c: 57: __nop();
  1648                           
  1649                           ; BSR set to: 0
  1650                           ;incstack = 0
  1651  001480  F000               	nop	
  1652  001482  0012               	return		;funcret
  1653  001484                     __end_of_SYS_ConfigureOscillator:
  1654                           	opt stack 0
  1655                           tblptru	equ	0xFF8
  1656                           tblptrh	equ	0xFF7
  1657                           tblptrl	equ	0xFF6
  1658                           tablat	equ	0xFF5
  1659                           postinc0	equ	0xFEE
  1660                           wreg	equ	0xFE8
  1661                           postinc2	equ	0xFDE
  1662                           postdec2	equ	0xFDD
  1663                           fsr2h	equ	0xFDA
  1664                           fsr2l	equ	0xFD9
  1665                           status	equ	0xFD8
  1666                           
  1667 ;; *************** function _MTR_Rotate *****************
  1668 ;; Defined at:
  1669 ;;		line 104 in file "MOTOR.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;		None
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;		None
  1674 ;; Return value:  Size  Location     Type
  1675 ;;		None               void
  1676 ;; Registers used:
  1677 ;;		wreg, status,2, status,0, cstack
  1678 ;; Tracked objects:
  1679 ;;		On entry : 0/0
  1680 ;;		On exit  : 0/0
  1681 ;;		Unchanged: 0/0
  1682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  1683 ;;      Params:         0       0       0       0       0
  1684 ;;      Locals:         0       0       0       0       0
  1685 ;;      Temps:          0       0       0       0       0
  1686 ;;      Totals:         0       0       0       0       0
  1687 ;;Total ram usage:        0 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:   10
  1690 ;; This function calls:
  1691 ;;		_MSC_DelayMS
  1692 ;;		_MTR_IN1
  1693 ;;		_MTR_IN2
  1694 ;; This function is called by:
  1695 ;;		_main
  1696 ;; This function uses a non-reentrant model
  1697 ;;
  1698                           
  1699                           	psect	text5
  1700  000E9A                     __ptext5:
  1701                           	opt stack 0
  1702  000E9A                     _MTR_Rotate:
  1703                           	opt stack 20
  1704                           
  1705                           ;MOTOR.c: 106: if(DC_Motor == 0)
  1706                           
  1707                           ;incstack = 0
  1708  000E9A  0100               	movlb	0	; () banked
  1709  000E9C  5197               	movf	_DC_Motor& (0+255),w,b
  1710  000E9E  0100               	movlb	0	; () banked
  1711  000EA0  A4D8               	btfss	status,2,c
  1712  000EA2  D013               	goto	l3679
  1713                           
  1714                           ; BSR set to: 0
  1715                           ;MOTOR.c: 107: {
  1716                           ;MOTOR.c: 108: MTR_IN1(0);
  1717  000EA4  0E00               	movlw	0
  1718  000EA6  ECAB  F009         	call	_MTR_IN1
  1719                           
  1720                           ;MOTOR.c: 109: MTR_IN2(1);
  1721  000EAA  0E01               	movlw	1
  1722  000EAC  EC9F  F009         	call	_MTR_IN2
  1723                           
  1724                           ;MOTOR.c: 110: MSC_DelayMS(100);
  1725  000EB0  0E64               	movlw	100
  1726  000EB2  0100               	movlb	0	; () banked
  1727  000EB4  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  1728  000EB6  0E00               	movlw	0
  1729  000EB8  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  1730  000EBA  0E00               	movlw	0
  1731  000EBC  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  1732  000EBE  0E00               	movlw	0
  1733  000EC0  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  1734  000EC2  EC81  F007         	call	_MSC_DelayMS	;wreg free
  1735                           
  1736                           ;MOTOR.c: 111: DC_Motor = 1;
  1737  000EC6  0E01               	movlw	1
  1738  000EC8  D012               	goto	L1
  1739  000ECA                     l3679:
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;MOTOR.c: 113: else
  1743                           ;MOTOR.c: 114: {
  1744                           ;MOTOR.c: 115: MTR_IN1(1);
  1745  000ECA  0E01               	movlw	1
  1746  000ECC  ECAB  F009         	call	_MTR_IN1
  1747                           
  1748                           ;MOTOR.c: 116: MTR_IN2(0);
  1749  000ED0  0E00               	movlw	0
  1750  000ED2  EC9F  F009         	call	_MTR_IN2
  1751                           
  1752                           ;MOTOR.c: 117: MSC_DelayMS(100);
  1753  000ED6  0E64               	movlw	100
  1754  000ED8  0100               	movlb	0	; () banked
  1755  000EDA  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  1756  000EDC  0E00               	movlw	0
  1757  000EDE  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  1758  000EE0  0E00               	movlw	0
  1759  000EE2  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  1760  000EE4  0E00               	movlw	0
  1761  000EE6  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  1762  000EE8  EC81  F007         	call	_MSC_DelayMS	;wreg free
  1763                           
  1764                           ;MOTOR.c: 118: DC_Motor = 0;
  1765  000EEC  0E00               	movlw	0
  1766  000EEE                     L1:
  1767  000EEE  0100               	movlb	0	; () banked
  1768  000EF0  6F97               	movwf	_DC_Motor& (0+255),b
  1769  000EF2  D000               	goto	l3683
  1770  000EF4                     l3683:
  1771                           
  1772                           ; BSR set to: 0
  1773                           ;MOTOR.c: 119: }
  1774                           ;MOTOR.c: 120: MTR_IN1(0);
  1775  000EF4  0E00               	movlw	0
  1776  000EF6  ECAB  F009         	call	_MTR_IN1
  1777                           
  1778                           ;MOTOR.c: 121: MTR_IN2(0);
  1779  000EFA  0E00               	movlw	0
  1780  000EFC  EC9F  F009         	call	_MTR_IN2
  1781  000F00  0012               	return		;funcret
  1782  000F02                     __end_of_MTR_Rotate:
  1783                           	opt stack 0
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           postinc0	equ	0xFEE
  1789                           wreg	equ	0xFE8
  1790                           postinc2	equ	0xFDE
  1791                           postdec2	equ	0xFDD
  1792                           fsr2h	equ	0xFDA
  1793                           fsr2l	equ	0xFD9
  1794                           status	equ	0xFD8
  1795                           
  1796 ;; *************** function _MTR_IN2 *****************
  1797 ;; Defined at:
  1798 ;;		line 71 in file "MOTOR.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;  state           1    wreg     unsigned char 
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;  state           1    0[BANK0 ] unsigned char 
  1803 ;; Return value:  Size  Location     Type
  1804 ;;		None               void
  1805 ;; Registers used:
  1806 ;;		wreg, status,2, status,0
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  1812 ;;      Params:         0       0       0       0       0
  1813 ;;      Locals:         0       1       0       0       0
  1814 ;;      Temps:          0       0       0       0       0
  1815 ;;      Totals:         0       1       0       0       0
  1816 ;;Total ram usage:        1 bytes
  1817 ;; Hardware stack levels used:    1
  1818 ;; Hardware stack levels required when called:    8
  1819 ;; This function calls:
  1820 ;;		Nothing
  1821 ;; This function is called by:
  1822 ;;		_MTR_Rotate
  1823 ;; This function uses a non-reentrant model
  1824 ;;
  1825                           
  1826                           	psect	text6
  1827  00133E                     __ptext6:
  1828                           	opt stack 0
  1829  00133E                     _MTR_IN2:
  1830                           	opt stack 21
  1831                           
  1832                           ;incstack = 0
  1833                           ;MTR_IN2@state stored from wreg
  1834  00133E  0100               	movlb	0	; () banked
  1835  001340  6F80               	movwf	MTR_IN2@state& (0+255),b
  1836                           
  1837                           ; BSR set to: 0
  1838                           ;MOTOR.c: 73: if(state)
  1839  001342  0100               	movlb	0	; () banked
  1840  001344  5180               	movf	MTR_IN2@state& (0+255),w,b
  1841  001346  0100               	movlb	0	; () banked
  1842  001348  B4D8               	btfsc	status,2,c
  1843  00134A  D002               	goto	l3443
  1844                           
  1845                           ; BSR set to: 0
  1846                           ;MOTOR.c: 74: {
  1847                           ;MOTOR.c: 75: LATC |= 0x04;
  1848  00134C  848B               	bsf	3979,2,c	;volatile
  1849                           
  1850                           ;MOTOR.c: 76: }
  1851  00134E  0012               	return	
  1852  001350                     l3443:
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;MOTOR.c: 77: else
  1856                           ;MOTOR.c: 78: {
  1857                           ;MOTOR.c: 79: LATC &= ~0x04;
  1858  001350  948B               	bcf	3979,2,c	;volatile
  1859  001352  0012               	return	
  1860                           
  1861                           ; BSR set to: 0
  1862                           
  1863                           ; BSR set to: 0
  1864  001354  0012               	return		;funcret
  1865  001356                     __end_of_MTR_IN2:
  1866                           	opt stack 0
  1867                           tblptru	equ	0xFF8
  1868                           tblptrh	equ	0xFF7
  1869                           tblptrl	equ	0xFF6
  1870                           tablat	equ	0xFF5
  1871                           postinc0	equ	0xFEE
  1872                           wreg	equ	0xFE8
  1873                           postinc2	equ	0xFDE
  1874                           postdec2	equ	0xFDD
  1875                           fsr2h	equ	0xFDA
  1876                           fsr2l	equ	0xFD9
  1877                           status	equ	0xFD8
  1878                           
  1879 ;; *************** function _MTR_IN1 *****************
  1880 ;; Defined at:
  1881 ;;		line 54 in file "MOTOR.c"
  1882 ;; Parameters:    Size  Location     Type
  1883 ;;  state           1    wreg     unsigned char 
  1884 ;; Auto vars:     Size  Location     Type
  1885 ;;  state           1    0[BANK0 ] unsigned char 
  1886 ;; Return value:  Size  Location     Type
  1887 ;;		None               void
  1888 ;; Registers used:
  1889 ;;		wreg, status,2, status,0
  1890 ;; Tracked objects:
  1891 ;;		On entry : 0/0
  1892 ;;		On exit  : 0/0
  1893 ;;		Unchanged: 0/0
  1894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  1895 ;;      Params:         0       0       0       0       0
  1896 ;;      Locals:         0       1       0       0       0
  1897 ;;      Temps:          0       0       0       0       0
  1898 ;;      Totals:         0       1       0       0       0
  1899 ;;Total ram usage:        1 bytes
  1900 ;; Hardware stack levels used:    1
  1901 ;; Hardware stack levels required when called:    8
  1902 ;; This function calls:
  1903 ;;		Nothing
  1904 ;; This function is called by:
  1905 ;;		_MTR_Rotate
  1906 ;; This function uses a non-reentrant model
  1907 ;;
  1908                           
  1909                           	psect	text7
  1910  001356                     __ptext7:
  1911                           	opt stack 0
  1912  001356                     _MTR_IN1:
  1913                           	opt stack 21
  1914                           
  1915                           ; BSR set to: 0
  1916                           ;incstack = 0
  1917                           ;MTR_IN1@state stored from wreg
  1918  001356  0100               	movlb	0	; () banked
  1919  001358  6F80               	movwf	MTR_IN1@state& (0+255),b
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;MOTOR.c: 56: if(state)
  1923  00135A  0100               	movlb	0	; () banked
  1924  00135C  5180               	movf	MTR_IN1@state& (0+255),w,b
  1925  00135E  0100               	movlb	0	; () banked
  1926  001360  B4D8               	btfsc	status,2,c
  1927  001362  D002               	goto	l3437
  1928                           
  1929                           ; BSR set to: 0
  1930                           ;MOTOR.c: 57: {
  1931                           ;MOTOR.c: 58: LATB |= 0x08;
  1932  001364  868A               	bsf	3978,3,c	;volatile
  1933                           
  1934                           ;MOTOR.c: 59: }
  1935  001366  0012               	return	
  1936  001368                     l3437:
  1937                           
  1938                           ; BSR set to: 0
  1939                           ;MOTOR.c: 60: else
  1940                           ;MOTOR.c: 61: {
  1941                           ;MOTOR.c: 62: LATB &= ~0x08;
  1942  001368  968A               	bcf	3978,3,c	;volatile
  1943  00136A  0012               	return	
  1944                           
  1945                           ; BSR set to: 0
  1946                           
  1947                           ; BSR set to: 0
  1948  00136C  0012               	return		;funcret
  1949  00136E                     __end_of_MTR_IN1:
  1950                           	opt stack 0
  1951                           tblptru	equ	0xFF8
  1952                           tblptrh	equ	0xFF7
  1953                           tblptrl	equ	0xFF6
  1954                           tablat	equ	0xFF5
  1955                           postinc0	equ	0xFEE
  1956                           wreg	equ	0xFE8
  1957                           postinc2	equ	0xFDE
  1958                           postdec2	equ	0xFDD
  1959                           fsr2h	equ	0xFDA
  1960                           fsr2l	equ	0xFD9
  1961                           status	equ	0xFD8
  1962                           
  1963 ;; *************** function _MSC_BlinkLED *****************
  1964 ;; Defined at:
  1965 ;;		line 1158 in file "MISC.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;  blink           2   13[BANK0 ] unsigned int 
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;  i               2   17[BANK0 ] unsigned int 
  1970 ;; Return value:  Size  Location     Type
  1971 ;;		None               void
  1972 ;; Registers used:
  1973 ;;		wreg, status,2, status,0, cstack
  1974 ;; Tracked objects:
  1975 ;;		On entry : 0/0
  1976 ;;		On exit  : 0/0
  1977 ;;		Unchanged: 0/0
  1978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  1979 ;;      Params:         0       2       0       0       0
  1980 ;;      Locals:         0       2       0       0       0
  1981 ;;      Temps:          0       2       0       0       0
  1982 ;;      Totals:         0       6       0       0       0
  1983 ;;Total ram usage:        6 bytes
  1984 ;; Hardware stack levels used:    1
  1985 ;; Hardware stack levels required when called:   10
  1986 ;; This function calls:
  1987 ;;		_MSC_DelayMS
  1988 ;; This function is called by:
  1989 ;;		_main
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           	psect	text8
  1994  001018                     __ptext8:
  1995                           	opt stack 0
  1996  001018                     _MSC_BlinkLED:
  1997                           	opt stack 20
  1998                           
  1999                           ;MISC.c: 1160: unsigned int i;
  2000                           ;MISC.c: 1162: for(i=0;i<(blink<<1);i++)
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;incstack = 0
  2004  001018  0E00               	movlw	0
  2005  00101A  0100               	movlb	0	; () banked
  2006  00101C  6F92               	movwf	(MSC_BlinkLED@i+1)& (0+255),b
  2007  00101E  0E00               	movlw	0
  2008  001020  6F91               	movwf	MSC_BlinkLED@i& (0+255),b
  2009  001022  D011               	goto	l3671
  2010  001024                     l3665:
  2011                           
  2012                           ; BSR set to: 0
  2013                           ;MISC.c: 1163: {
  2014                           ;MISC.c: 1164: MSC_DelayMS(50);
  2015  001024  0E32               	movlw	50
  2016  001026  0100               	movlb	0	; () banked
  2017  001028  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  2018  00102A  0E00               	movlw	0
  2019  00102C  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  2020  00102E  0E00               	movlw	0
  2021  001030  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  2022  001032  0E00               	movlw	0
  2023  001034  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  2024  001036  EC81  F007         	call	_MSC_DelayMS	;wreg free
  2025                           
  2026                           ;MISC.c: 1165: (LATC ^= 0x10);
  2027  00103A  0E10               	movlw	16
  2028  00103C  1A8B               	xorwf	3979,f,c	;volatile
  2029  00103E  0100               	movlb	0	; () banked
  2030  001040  4B91               	infsnz	MSC_BlinkLED@i& (0+255),f,b
  2031  001042  2B92               	incf	(MSC_BlinkLED@i+1)& (0+255),f,b
  2032  001044  D000               	goto	l3671
  2033  001046                     l3671:
  2034                           
  2035                           ; BSR set to: 0
  2036  001046  C08D  F08F         	movff	MSC_BlinkLED@blink,??_MSC_BlinkLED
  2037  00104A  C08E  F090         	movff	MSC_BlinkLED@blink+1,??_MSC_BlinkLED+1
  2038  00104E  90D8               	bcf	status,0,c
  2039  001050  0100               	movlb	0	; () banked
  2040  001052  378F               	rlcf	??_MSC_BlinkLED& (0+255),f,b
  2041  001054  3790               	rlcf	(??_MSC_BlinkLED+1)& (0+255),f,b
  2042  001056  0100               	movlb	0	; () banked
  2043  001058  518F               	movf	??_MSC_BlinkLED& (0+255),w,b
  2044  00105A  0100               	movlb	0	; () banked
  2045  00105C  5D91               	subwf	MSC_BlinkLED@i& (0+255),w,b
  2046  00105E  0100               	movlb	0	; () banked
  2047  001060  5190               	movf	(??_MSC_BlinkLED+1)& (0+255),w,b
  2048  001062  0100               	movlb	0	; () banked
  2049  001064  5992               	subwfb	(MSC_BlinkLED@i+1)& (0+255),w,b
  2050  001066  A0D8               	btfss	status,0,c
  2051  001068  D7DD               	goto	l3665
  2052                           
  2053                           ; BSR set to: 0
  2054                           
  2055                           ; BSR set to: 0
  2056  00106A  0012               	return		;funcret
  2057  00106C                     __end_of_MSC_BlinkLED:
  2058                           	opt stack 0
  2059                           tblptru	equ	0xFF8
  2060                           tblptrh	equ	0xFF7
  2061                           tblptrl	equ	0xFF6
  2062                           tablat	equ	0xFF5
  2063                           postinc0	equ	0xFEE
  2064                           wreg	equ	0xFE8
  2065                           postinc2	equ	0xFDE
  2066                           postdec2	equ	0xFDD
  2067                           fsr2h	equ	0xFDA
  2068                           fsr2l	equ	0xFD9
  2069                           status	equ	0xFD8
  2070                           
  2071 ;; *************** function _MSC_DelayMS *****************
  2072 ;; Defined at:
  2073 ;;		line 47 in file "MISC.c"
  2074 ;; Parameters:    Size  Location     Type
  2075 ;;  US              4    4[BANK0 ] long 
  2076 ;; Auto vars:     Size  Location     Type
  2077 ;;  i               4    9[BANK0 ] long 
  2078 ;; Return value:  Size  Location     Type
  2079 ;;		None               void
  2080 ;; Registers used:
  2081 ;;		wreg, status,2, status,0, cstack
  2082 ;; Tracked objects:
  2083 ;;		On entry : 0/0
  2084 ;;		On exit  : 0/0
  2085 ;;		Unchanged: 0/0
  2086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2087 ;;      Params:         0       4       0       0       0
  2088 ;;      Locals:         0       4       0       0       0
  2089 ;;      Temps:          0       1       0       0       0
  2090 ;;      Totals:         0       9       0       0       0
  2091 ;;Total ram usage:        9 bytes
  2092 ;; Hardware stack levels used:    1
  2093 ;; Hardware stack levels required when called:    9
  2094 ;; This function calls:
  2095 ;;		_MSC_DelayNOP
  2096 ;; This function is called by:
  2097 ;;		_main
  2098 ;;		_MTR_Rotate
  2099 ;;		_MSC_BlinkLED
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text9
  2104  000F02                     __ptext9:
  2105                           	opt stack 0
  2106  000F02                     _MSC_DelayMS:
  2107                           	opt stack 20
  2108                           
  2109                           ;MISC.c: 49: long i;
  2110                           ;MISC.c: 51: for(i=0; i<US; i++)
  2111                           
  2112                           ; BSR set to: 0
  2113                           ;incstack = 0
  2114  000F02  0E00               	movlw	0
  2115  000F04  0100               	movlb	0	; () banked
  2116  000F06  6F89               	movwf	MSC_DelayMS@i& (0+255),b
  2117  000F08  0E00               	movlw	0
  2118  000F0A  6F8A               	movwf	(MSC_DelayMS@i+1)& (0+255),b
  2119  000F0C  0E00               	movlw	0
  2120  000F0E  6F8B               	movwf	(MSC_DelayMS@i+2)& (0+255),b
  2121  000F10  0E00               	movlw	0
  2122  000F12  6F8C               	movwf	(MSC_DelayMS@i+3)& (0+255),b
  2123  000F14  D00F               	goto	l3329
  2124  000F16                     l3325:
  2125                           
  2126                           ; BSR set to: 0
  2127                           ;MISC.c: 52: {
  2128                           ;MISC.c: 53: MSC_DelayNOP(162);
  2129  000F16  0E00               	movlw	0
  2130  000F18  0100               	movlb	0	; () banked
  2131  000F1A  6F81               	movwf	(MSC_DelayNOP@NOPs+1)& (0+255),b
  2132  000F1C  0EA2               	movlw	162
  2133  000F1E  6F80               	movwf	MSC_DelayNOP@NOPs& (0+255),b
  2134  000F20  ECFD  F008         	call	_MSC_DelayNOP	;wreg free
  2135  000F24  0E01               	movlw	1
  2136  000F26  0100               	movlb	0	; () banked
  2137  000F28  2789               	addwf	MSC_DelayMS@i& (0+255),f,b
  2138  000F2A  0E00               	movlw	0
  2139  000F2C  238A               	addwfc	(MSC_DelayMS@i+1)& (0+255),f,b
  2140  000F2E  238B               	addwfc	(MSC_DelayMS@i+2)& (0+255),f,b
  2141  000F30  238C               	addwfc	(MSC_DelayMS@i+3)& (0+255),f,b
  2142  000F32  D000               	goto	l3329
  2143  000F34                     l3329:
  2144                           
  2145                           ; BSR set to: 0
  2146  000F34  0100               	movlb	0	; () banked
  2147  000F36  5184               	movf	MSC_DelayMS@US& (0+255),w,b
  2148  000F38  0100               	movlb	0	; () banked
  2149  000F3A  5D89               	subwf	MSC_DelayMS@i& (0+255),w,b
  2150  000F3C  0100               	movlb	0	; () banked
  2151  000F3E  5185               	movf	(MSC_DelayMS@US+1)& (0+255),w,b
  2152  000F40  0100               	movlb	0	; () banked
  2153  000F42  598A               	subwfb	(MSC_DelayMS@i+1)& (0+255),w,b
  2154  000F44  0100               	movlb	0	; () banked
  2155  000F46  5186               	movf	(MSC_DelayMS@US+2)& (0+255),w,b
  2156  000F48  0100               	movlb	0	; () banked
  2157  000F4A  598B               	subwfb	(MSC_DelayMS@i+2)& (0+255),w,b
  2158  000F4C  0100               	movlb	0	; () banked
  2159  000F4E  518C               	movf	(MSC_DelayMS@i+3)& (0+255),w,b
  2160  000F50  0A80               	xorlw	128
  2161  000F52  0100               	movlb	0	; () banked
  2162  000F54  6F88               	movwf	??_MSC_DelayMS& (0+255),b
  2163  000F56  0100               	movlb	0	; () banked
  2164  000F58  5187               	movf	(MSC_DelayMS@US+3)& (0+255),w,b
  2165  000F5A  0A80               	xorlw	128
  2166  000F5C  0100               	movlb	0	; () banked
  2167  000F5E  5988               	subwfb	??_MSC_DelayMS& (0+255),w,b
  2168  000F60  A0D8               	btfss	status,0,c
  2169  000F62  D7D9               	goto	l3325
  2170                           
  2171                           ; BSR set to: 0
  2172                           
  2173                           ; BSR set to: 0
  2174  000F64  0012               	return		;funcret
  2175  000F66                     __end_of_MSC_DelayMS:
  2176                           	opt stack 0
  2177                           tblptru	equ	0xFF8
  2178                           tblptrh	equ	0xFF7
  2179                           tblptrl	equ	0xFF6
  2180                           tablat	equ	0xFF5
  2181                           postinc0	equ	0xFEE
  2182                           wreg	equ	0xFE8
  2183                           postinc2	equ	0xFDE
  2184                           postdec2	equ	0xFDD
  2185                           fsr2h	equ	0xFDA
  2186                           fsr2l	equ	0xFD9
  2187                           status	equ	0xFD8
  2188                           
  2189 ;; *************** function _MSC_DelayNOP *****************
  2190 ;; Defined at:
  2191 ;;		line 62 in file "MISC.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;  NOPs            2    0[BANK0 ] unsigned int 
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;  i               2    2[BANK0 ] unsigned int 
  2196 ;; Return value:  Size  Location     Type
  2197 ;;		None               void
  2198 ;; Registers used:
  2199 ;;		wreg, status,2, status,0
  2200 ;; Tracked objects:
  2201 ;;		On entry : 0/0
  2202 ;;		On exit  : 0/0
  2203 ;;		Unchanged: 0/0
  2204 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2205 ;;      Params:         0       2       0       0       0
  2206 ;;      Locals:         0       2       0       0       0
  2207 ;;      Temps:          0       0       0       0       0
  2208 ;;      Totals:         0       4       0       0       0
  2209 ;;Total ram usage:        4 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    8
  2212 ;; This function calls:
  2213 ;;		Nothing
  2214 ;; This function is called by:
  2215 ;;		_MSC_DelayMS
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text10
  2220  0011FA                     __ptext10:
  2221                           	opt stack 0
  2222  0011FA                     _MSC_DelayNOP:
  2223                           	opt stack 20
  2224                           
  2225                           ;MISC.c: 64: unsigned int i;
  2226                           ;MISC.c: 65: for(i=0; i<NOPs; i++)
  2227                           
  2228                           ; BSR set to: 0
  2229                           ;incstack = 0
  2230  0011FA  0E00               	movlw	0
  2231  0011FC  0100               	movlb	0	; () banked
  2232  0011FE  6F83               	movwf	(MSC_DelayNOP@i+1)& (0+255),b
  2233  001200  0E00               	movlw	0
  2234  001202  6F82               	movwf	MSC_DelayNOP@i& (0+255),b
  2235  001204  D005               	goto	l3239
  2236  001206                     l361:
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;MISC.c: 66: {
  2240                           ;MISC.c: 67: __nop();
  2241  001206  F000               	nop	
  2242  001208  0100               	movlb	0	; () banked
  2243  00120A  4B82               	infsnz	MSC_DelayNOP@i& (0+255),f,b
  2244  00120C  2B83               	incf	(MSC_DelayNOP@i+1)& (0+255),f,b
  2245  00120E  D000               	goto	l3239
  2246  001210                     l3239:
  2247                           
  2248                           ; BSR set to: 0
  2249  001210  0100               	movlb	0	; () banked
  2250  001212  5180               	movf	MSC_DelayNOP@NOPs& (0+255),w,b
  2251  001214  0100               	movlb	0	; () banked
  2252  001216  5D82               	subwf	MSC_DelayNOP@i& (0+255),w,b
  2253  001218  0100               	movlb	0	; () banked
  2254  00121A  5181               	movf	(MSC_DelayNOP@NOPs+1)& (0+255),w,b
  2255  00121C  0100               	movlb	0	; () banked
  2256  00121E  5983               	subwfb	(MSC_DelayNOP@i+1)& (0+255),w,b
  2257  001220  A0D8               	btfss	status,0,c
  2258  001222  D7F1               	goto	l361
  2259                           
  2260                           ; BSR set to: 0
  2261                           
  2262                           ; BSR set to: 0
  2263  001224  0012               	return		;funcret
  2264  001226                     __end_of_MSC_DelayNOP:
  2265                           	opt stack 0
  2266                           tblptru	equ	0xFF8
  2267                           tblptrh	equ	0xFF7
  2268                           tblptrl	equ	0xFF6
  2269                           tablat	equ	0xFF5
  2270                           postinc0	equ	0xFEE
  2271                           wreg	equ	0xFE8
  2272                           postinc2	equ	0xFDE
  2273                           postdec2	equ	0xFDD
  2274                           fsr2h	equ	0xFDA
  2275                           fsr2l	equ	0xFD9
  2276                           status	equ	0xFD8
  2277                           
  2278 ;; *************** function _Init_System *****************
  2279 ;; Defined at:
  2280 ;;		line 153 in file "USER.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;		None
  2283 ;; Auto vars:     Size  Location     Type
  2284 ;;		None
  2285 ;; Return value:  Size  Location     Type
  2286 ;;		None               void
  2287 ;; Registers used:
  2288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2289 ;; Tracked objects:
  2290 ;;		On entry : 0/0
  2291 ;;		On exit  : 0/0
  2292 ;;		Unchanged: 0/0
  2293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2294 ;;      Params:         0       0       0       0       0
  2295 ;;      Locals:         0       0       0       0       0
  2296 ;;      Temps:          0       0       0       0       0
  2297 ;;      Totals:         0       0       0       0       0
  2298 ;;Total ram usage:        0 bytes
  2299 ;; Hardware stack levels used:    1
  2300 ;; Hardware stack levels required when called:   12
  2301 ;; This function calls:
  2302 ;;		_BUT_ReadButton
  2303 ;;		_InitADC
  2304 ;;		_InitButton
  2305 ;;		_InitFlash
  2306 ;;		_InitIR
  2307 ;;		_InitLDO
  2308 ;;		_InitMOTOR
  2309 ;;		_InitRF
  2310 ;;		_InitTimers
  2311 ;; This function is called by:
  2312 ;;		_main
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text11
  2317  0011CC                     __ptext11:
  2318                           	opt stack 0
  2319  0011CC                     _Init_System:
  2320                           	opt stack 18
  2321                           
  2322                           ;USER.c: 155: InitTimers();
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;incstack = 0
  2326  0011CC  EC2D  F00A         	call	_InitTimers	;wreg free
  2327                           
  2328                           ;USER.c: 156: InitRF();
  2329  0011D0  EC56  F008         	call	_InitRF	;wreg free
  2330                           
  2331                           ;USER.c: 157: InitButton();
  2332  0011D4  EC32  F00A         	call	_InitButton	;wreg free
  2333                           
  2334                           ;USER.c: 158: InitIR();
  2335  0011D8  EC47  F00A         	call	_InitIR	;wreg free
  2336                           
  2337                           ;USER.c: 159: InitLDO();
  2338  0011DC  EC46  F00A         	call	_InitLDO	;wreg free
  2339                           
  2340                           ;USER.c: 160: InitMOTOR();
  2341  0011E0  EC42  F00A         	call	_InitMOTOR	;wreg free
  2342                           
  2343                           ;USER.c: 161: InitFlash();
  2344  0011E4  EC48  F00A         	call	_InitFlash	;wreg free
  2345                           
  2346                           ;USER.c: 162: InitADC();
  2347  0011E8  EC49  F00A         	call	_InitADC	;wreg free
  2348                           
  2349                           ;USER.c: 164: BUT_ReadButton();
  2350  0011EC  ECAF  F008         	call	_BUT_ReadButton	;wreg free
  2351                           
  2352                           ;USER.c: 165: INTCONbits.RBIF = 0;
  2353  0011F0  90F2               	bcf	intcon,0,c	;volatile
  2354                           
  2355                           ;USER.c: 168: RCONbits.IPEN = 1;
  2356  0011F2  8ED0               	bsf	4048,7,c	;volatile
  2357                           
  2358                           ;USER.c: 169: INTCONbits.GIE = 1;
  2359  0011F4  8EF2               	bsf	intcon,7,c	;volatile
  2360                           
  2361                           ;USER.c: 170: INTCONbits.PEIE = 1;
  2362  0011F6  8CF2               	bsf	intcon,6,c	;volatile
  2363  0011F8  0012               	return		;funcret
  2364  0011FA                     __end_of_Init_System:
  2365                           	opt stack 0
  2366                           tblptru	equ	0xFF8
  2367                           tblptrh	equ	0xFF7
  2368                           tblptrl	equ	0xFF6
  2369                           tablat	equ	0xFF5
  2370                           intcon	equ	0xFF2
  2371                           postinc0	equ	0xFEE
  2372                           wreg	equ	0xFE8
  2373                           postinc2	equ	0xFDE
  2374                           postdec2	equ	0xFDD
  2375                           fsr2h	equ	0xFDA
  2376                           fsr2l	equ	0xFD9
  2377                           status	equ	0xFD8
  2378                           
  2379 ;; *************** function _InitTimers *****************
  2380 ;; Defined at:
  2381 ;;		line 211 in file "TIMERS.c"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;		None
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;		None
  2386 ;; Return value:  Size  Location     Type
  2387 ;;		None               void
  2388 ;; Registers used:
  2389 ;;		wreg, status,2, cstack
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2395 ;;      Params:         0       0       0       0       0
  2396 ;;      Locals:         0       0       0       0       0
  2397 ;;      Temps:          0       0       0       0       0
  2398 ;;      Totals:         0       0       0       0       0
  2399 ;;Total ram usage:        0 bytes
  2400 ;; Hardware stack levels used:    1
  2401 ;; Hardware stack levels required when called:   11
  2402 ;; This function calls:
  2403 ;;		_InitTimer0
  2404 ;;		_InitTimer2
  2405 ;; This function is called by:
  2406 ;;		_Init_System
  2407 ;; This function uses a non-reentrant model
  2408 ;;
  2409                           
  2410                           	psect	text12
  2411  00145A                     __ptext12:
  2412                           	opt stack 0
  2413  00145A                     _InitTimers:
  2414                           	opt stack 18
  2415                           
  2416                           ;TIMERS.c: 213: InitTimer0();
  2417                           
  2418                           ;incstack = 0
  2419  00145A  EC64  F009         	call	_InitTimer0	;wreg free
  2420                           
  2421                           ;TIMERS.c: 214: InitTimer2();
  2422  00145E  EC75  F009         	call	_InitTimer2	;wreg free
  2423  001462  0012               	return		;funcret
  2424  001464                     __end_of_InitTimers:
  2425                           	opt stack 0
  2426                           tblptru	equ	0xFF8
  2427                           tblptrh	equ	0xFF7
  2428                           tblptrl	equ	0xFF6
  2429                           tablat	equ	0xFF5
  2430                           intcon	equ	0xFF2
  2431                           postinc0	equ	0xFEE
  2432                           wreg	equ	0xFE8
  2433                           postinc2	equ	0xFDE
  2434                           postdec2	equ	0xFDD
  2435                           fsr2h	equ	0xFDA
  2436                           fsr2l	equ	0xFD9
  2437                           status	equ	0xFD8
  2438                           
  2439 ;; *************** function _InitTimer2 *****************
  2440 ;; Defined at:
  2441 ;;		line 239 in file "TIMERS.c"
  2442 ;; Parameters:    Size  Location     Type
  2443 ;;		None
  2444 ;; Auto vars:     Size  Location     Type
  2445 ;;		None
  2446 ;; Return value:  Size  Location     Type
  2447 ;;		None               void
  2448 ;; Registers used:
  2449 ;;		wreg, status,2, cstack
  2450 ;; Tracked objects:
  2451 ;;		On entry : 0/0
  2452 ;;		On exit  : 0/0
  2453 ;;		Unchanged: 0/0
  2454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2455 ;;      Params:         0       0       0       0       0
  2456 ;;      Locals:         0       0       0       0       0
  2457 ;;      Temps:          0       0       0       0       0
  2458 ;;      Totals:         0       0       0       0       0
  2459 ;;Total ram usage:        0 bytes
  2460 ;; Hardware stack levels used:    1
  2461 ;; Hardware stack levels required when called:    9
  2462 ;; This function calls:
  2463 ;;		_TMR_Timer2
  2464 ;;		_TMR_Timer2Int
  2465 ;; This function is called by:
  2466 ;;		_InitTimers
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text13
  2471  0012EA                     __ptext13:
  2472                           	opt stack 0
  2473  0012EA                     _InitTimer2:
  2474                           	opt stack 19
  2475                           
  2476                           ;TIMERS.c: 241: TMR_Timer2(0);
  2477                           
  2478                           ;incstack = 0
  2479  0012EA  0E00               	movlw	0
  2480  0012EC  ECC3  F009         	call	_TMR_Timer2
  2481                           
  2482                           ;TIMERS.c: 242: T2CONbits.TOUTPS = 0b1111;
  2483  0012F0  86CA               	bsf	4042,3,c	;volatile
  2484  0012F2  88CA               	bsf	4042,4,c	;volatile
  2485  0012F4  8ACA               	bsf	4042,5,c	;volatile
  2486  0012F6  8CCA               	bsf	4042,6,c	;volatile
  2487                           
  2488                           ;TIMERS.c: 243: T2CONbits.T2CKPS = 0b11;
  2489  0012F8  0E03               	movlw	3
  2490  0012FA  12CA               	iorwf	4042,f,c	;volatile
  2491                           
  2492                           ;TIMERS.c: 244: IPR1bits.TMR2IP = 0;
  2493  0012FC  929F               	bcf	3999,1,c	;volatile
  2494                           
  2495                           ;TIMERS.c: 245: PR2 = 0xFF;
  2496  0012FE  68CB               	setf	4043,c	;volatile
  2497                           
  2498                           ;TIMERS.c: 246: TMR_Timer2Int(1);
  2499  001300  0E01               	movlw	1
  2500  001302  ECB7  F009         	call	_TMR_Timer2Int
  2501  001306  0012               	return		;funcret
  2502  001308                     __end_of_InitTimer2:
  2503                           	opt stack 0
  2504                           tblptru	equ	0xFF8
  2505                           tblptrh	equ	0xFF7
  2506                           tblptrl	equ	0xFF6
  2507                           tablat	equ	0xFF5
  2508                           intcon	equ	0xFF2
  2509                           postinc0	equ	0xFEE
  2510                           wreg	equ	0xFE8
  2511                           postinc2	equ	0xFDE
  2512                           postdec2	equ	0xFDD
  2513                           fsr2h	equ	0xFDA
  2514                           fsr2l	equ	0xFD9
  2515                           status	equ	0xFD8
  2516                           
  2517 ;; *************** function _TMR_Timer2Int *****************
  2518 ;; Defined at:
  2519 ;;		line 174 in file "TIMERS.c"
  2520 ;; Parameters:    Size  Location     Type
  2521 ;;  state           1    wreg     unsigned char 
  2522 ;; Auto vars:     Size  Location     Type
  2523 ;;  state           1    0[BANK0 ] unsigned char 
  2524 ;; Return value:  Size  Location     Type
  2525 ;;		None               void
  2526 ;; Registers used:
  2527 ;;		wreg, status,2
  2528 ;; Tracked objects:
  2529 ;;		On entry : 0/0
  2530 ;;		On exit  : 0/0
  2531 ;;		Unchanged: 0/0
  2532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2533 ;;      Params:         0       0       0       0       0
  2534 ;;      Locals:         0       1       0       0       0
  2535 ;;      Temps:          0       0       0       0       0
  2536 ;;      Totals:         0       1       0       0       0
  2537 ;;Total ram usage:        1 bytes
  2538 ;; Hardware stack levels used:    1
  2539 ;; Hardware stack levels required when called:    8
  2540 ;; This function calls:
  2541 ;;		Nothing
  2542 ;; This function is called by:
  2543 ;;		_InitTimer2
  2544 ;; This function uses a non-reentrant model
  2545 ;;
  2546                           
  2547                           	psect	text14
  2548  00136E                     __ptext14:
  2549                           	opt stack 0
  2550  00136E                     _TMR_Timer2Int:
  2551                           	opt stack 19
  2552                           
  2553                           ;incstack = 0
  2554                           ;TMR_Timer2Int@state stored from wreg
  2555  00136E  0100               	movlb	0	; () banked
  2556  001370  6F80               	movwf	TMR_Timer2Int@state& (0+255),b
  2557                           
  2558                           ; BSR set to: 0
  2559                           ;TIMERS.c: 176: if(state)
  2560  001372  0100               	movlb	0	; () banked
  2561  001374  5180               	movf	TMR_Timer2Int@state& (0+255),w,b
  2562  001376  0100               	movlb	0	; () banked
  2563  001378  B4D8               	btfsc	status,2,c
  2564  00137A  D002               	goto	l809
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;TIMERS.c: 177: {
  2568                           ;TIMERS.c: 179: PIE1bits.TMR2IE = 1;
  2569  00137C  829D               	bsf	3997,1,c	;volatile
  2570                           
  2571                           ;TIMERS.c: 180: }
  2572  00137E  0012               	return	
  2573  001380                     l809:
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;TIMERS.c: 181: else
  2577                           ;TIMERS.c: 182: {
  2578                           ;TIMERS.c: 184: PIE1bits.TMR2IE = 0;
  2579  001380  929D               	bcf	3997,1,c	;volatile
  2580  001382  0012               	return	
  2581                           
  2582                           ; BSR set to: 0
  2583                           
  2584                           ; BSR set to: 0
  2585  001384  0012               	return		;funcret
  2586  001386                     __end_of_TMR_Timer2Int:
  2587                           	opt stack 0
  2588                           tblptru	equ	0xFF8
  2589                           tblptrh	equ	0xFF7
  2590                           tblptrl	equ	0xFF6
  2591                           tablat	equ	0xFF5
  2592                           intcon	equ	0xFF2
  2593                           postinc0	equ	0xFEE
  2594                           wreg	equ	0xFE8
  2595                           postinc2	equ	0xFDE
  2596                           postdec2	equ	0xFDD
  2597                           fsr2h	equ	0xFDA
  2598                           fsr2l	equ	0xFD9
  2599                           status	equ	0xFD8
  2600                           
  2601 ;; *************** function _TMR_Timer2 *****************
  2602 ;; Defined at:
  2603 ;;		line 90 in file "TIMERS.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;  state           1    wreg     unsigned char 
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;  state           1    0[BANK0 ] unsigned char 
  2608 ;; Return value:  Size  Location     Type
  2609 ;;		None               void
  2610 ;; Registers used:
  2611 ;;		wreg, status,2
  2612 ;; Tracked objects:
  2613 ;;		On entry : 0/0
  2614 ;;		On exit  : 0/0
  2615 ;;		Unchanged: 0/0
  2616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2617 ;;      Params:         0       0       0       0       0
  2618 ;;      Locals:         0       1       0       0       0
  2619 ;;      Temps:          0       0       0       0       0
  2620 ;;      Totals:         0       1       0       0       0
  2621 ;;Total ram usage:        1 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; Hardware stack levels required when called:    8
  2624 ;; This function calls:
  2625 ;;		Nothing
  2626 ;; This function is called by:
  2627 ;;		_InitTimer2
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631                           	psect	text15
  2632  001386                     __ptext15:
  2633                           	opt stack 0
  2634  001386                     _TMR_Timer2:
  2635                           	opt stack 19
  2636                           
  2637                           ; BSR set to: 0
  2638                           ;incstack = 0
  2639                           ;TMR_Timer2@state stored from wreg
  2640  001386  0100               	movlb	0	; () banked
  2641  001388  6F80               	movwf	TMR_Timer2@state& (0+255),b
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;TIMERS.c: 92: if(state)
  2645  00138A  0100               	movlb	0	; () banked
  2646  00138C  5180               	movf	TMR_Timer2@state& (0+255),w,b
  2647  00138E  0100               	movlb	0	; () banked
  2648  001390  B4D8               	btfsc	status,2,c
  2649  001392  D002               	goto	l788
  2650                           
  2651                           ; BSR set to: 0
  2652                           ;TIMERS.c: 93: {
  2653                           ;TIMERS.c: 95: T2CONbits.TMR2ON = 1;
  2654  001394  84CA               	bsf	4042,2,c	;volatile
  2655                           
  2656                           ;TIMERS.c: 96: }
  2657  001396  0012               	return	
  2658  001398                     l788:
  2659                           
  2660                           ; BSR set to: 0
  2661                           ;TIMERS.c: 97: else
  2662                           ;TIMERS.c: 98: {
  2663                           ;TIMERS.c: 100: T2CONbits.TMR2ON = 0;
  2664  001398  94CA               	bcf	4042,2,c	;volatile
  2665  00139A  0012               	return	
  2666                           
  2667                           ; BSR set to: 0
  2668                           
  2669                           ; BSR set to: 0
  2670  00139C  0012               	return		;funcret
  2671  00139E                     __end_of_TMR_Timer2:
  2672                           	opt stack 0
  2673                           tblptru	equ	0xFF8
  2674                           tblptrh	equ	0xFF7
  2675                           tblptrl	equ	0xFF6
  2676                           tablat	equ	0xFF5
  2677                           intcon	equ	0xFF2
  2678                           postinc0	equ	0xFEE
  2679                           wreg	equ	0xFE8
  2680                           postinc2	equ	0xFDE
  2681                           postdec2	equ	0xFDD
  2682                           fsr2h	equ	0xFDA
  2683                           fsr2l	equ	0xFD9
  2684                           status	equ	0xFD8
  2685                           
  2686 ;; *************** function _InitTimer0 *****************
  2687 ;; Defined at:
  2688 ;;		line 222 in file "TIMERS.c"
  2689 ;; Parameters:    Size  Location     Type
  2690 ;;		None
  2691 ;; Auto vars:     Size  Location     Type
  2692 ;;		None
  2693 ;; Return value:  Size  Location     Type
  2694 ;;		None               void
  2695 ;; Registers used:
  2696 ;;		wreg, status,2, cstack
  2697 ;; Tracked objects:
  2698 ;;		On entry : 0/0
  2699 ;;		On exit  : 0/0
  2700 ;;		Unchanged: 0/0
  2701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2702 ;;      Params:         0       0       0       0       0
  2703 ;;      Locals:         0       0       0       0       0
  2704 ;;      Temps:          0       0       0       0       0
  2705 ;;      Totals:         0       0       0       0       0
  2706 ;;Total ram usage:        0 bytes
  2707 ;; Hardware stack levels used:    1
  2708 ;; Hardware stack levels required when called:   10
  2709 ;; This function calls:
  2710 ;;		_TMR_ResetTimer0
  2711 ;;		_TMR_Timer0
  2712 ;;		_TMR_Timer0Int
  2713 ;; This function is called by:
  2714 ;;		_InitTimers
  2715 ;; This function uses a non-reentrant model
  2716 ;;
  2717                           
  2718                           	psect	text16
  2719  0012C8                     __ptext16:
  2720                           	opt stack 0
  2721  0012C8                     _InitTimer0:
  2722                           	opt stack 18
  2723                           
  2724                           ;TIMERS.c: 224: TMR_Timer0(0);
  2725                           
  2726                           ; BSR set to: 0
  2727                           ;incstack = 0
  2728  0012C8  0E00               	movlw	0
  2729  0012CA  ECDB  F009         	call	_TMR_Timer0
  2730                           
  2731                           ;TIMERS.c: 225: TMR_ResetTimer0();
  2732  0012CE  EC13  F009         	call	_TMR_ResetTimer0	;wreg free
  2733                           
  2734                           ;TIMERS.c: 226: T0CONbits.T08BIT = 0;
  2735  0012D2  9CD5               	bcf	4053,6,c	;volatile
  2736                           
  2737                           ;TIMERS.c: 227: T0CONbits.T0CS = 0;
  2738  0012D4  9AD5               	bcf	4053,5,c	;volatile
  2739                           
  2740                           ;TIMERS.c: 228: T0CONbits.PSA = 0;
  2741  0012D6  96D5               	bcf	4053,3,c	;volatile
  2742                           
  2743                           ;TIMERS.c: 229: T0CONbits.T0PS = 0b011;
  2744  0012D8  50D5               	movf	4053,w,c	;volatile
  2745  0012DA  0BF8               	andlw	-8
  2746  0012DC  0903               	iorlw	3
  2747  0012DE  6ED5               	movwf	4053,c	;volatile
  2748                           
  2749                           ;TIMERS.c: 230: INTCON2bits.TMR0IP = 1;
  2750  0012E0  84F1               	bsf	intcon2,2,c	;volatile
  2751                           
  2752                           ;TIMERS.c: 231: TMR_Timer0Int(1);
  2753  0012E2  0E01               	movlw	1
  2754  0012E4  ECCF  F009         	call	_TMR_Timer0Int
  2755  0012E8  0012               	return		;funcret
  2756  0012EA                     __end_of_InitTimer0:
  2757                           	opt stack 0
  2758                           tblptru	equ	0xFF8
  2759                           tblptrh	equ	0xFF7
  2760                           tblptrl	equ	0xFF6
  2761                           tablat	equ	0xFF5
  2762                           intcon	equ	0xFF2
  2763                           intcon2	equ	0xFF1
  2764                           postinc0	equ	0xFEE
  2765                           wreg	equ	0xFE8
  2766                           postinc2	equ	0xFDE
  2767                           postdec2	equ	0xFDD
  2768                           fsr2h	equ	0xFDA
  2769                           fsr2l	equ	0xFD9
  2770                           status	equ	0xFD8
  2771                           
  2772 ;; *************** function _TMR_Timer0Int *****************
  2773 ;; Defined at:
  2774 ;;		line 155 in file "TIMERS.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;  state           1    wreg     unsigned char 
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;  state           1    0[BANK0 ] unsigned char 
  2779 ;; Return value:  Size  Location     Type
  2780 ;;		None               void
  2781 ;; Registers used:
  2782 ;;		wreg, status,2
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2788 ;;      Params:         0       0       0       0       0
  2789 ;;      Locals:         0       1       0       0       0
  2790 ;;      Temps:          0       0       0       0       0
  2791 ;;      Totals:         0       1       0       0       0
  2792 ;;Total ram usage:        1 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:    8
  2795 ;; This function calls:
  2796 ;;		Nothing
  2797 ;; This function is called by:
  2798 ;;		_InitTimer0
  2799 ;; This function uses a non-reentrant model
  2800 ;;
  2801                           
  2802                           	psect	text17
  2803  00139E                     __ptext17:
  2804                           	opt stack 0
  2805  00139E                     _TMR_Timer0Int:
  2806                           	opt stack 19
  2807                           
  2808                           ;incstack = 0
  2809                           ;TMR_Timer0Int@state stored from wreg
  2810  00139E  0100               	movlb	0	; () banked
  2811  0013A0  6F80               	movwf	TMR_Timer0Int@state& (0+255),b
  2812                           
  2813                           ; BSR set to: 0
  2814                           ;TIMERS.c: 157: if(state)
  2815  0013A2  0100               	movlb	0	; () banked
  2816  0013A4  5180               	movf	TMR_Timer0Int@state& (0+255),w,b
  2817  0013A6  0100               	movlb	0	; () banked
  2818  0013A8  B4D8               	btfsc	status,2,c
  2819  0013AA  D002               	goto	l804
  2820                           
  2821                           ; BSR set to: 0
  2822                           ;TIMERS.c: 158: {
  2823                           ;TIMERS.c: 160: INTCONbits.TMR0IE = 1;
  2824  0013AC  8AF2               	bsf	intcon,5,c	;volatile
  2825                           
  2826                           ;TIMERS.c: 161: }
  2827  0013AE  0012               	return	
  2828  0013B0                     l804:
  2829                           
  2830                           ; BSR set to: 0
  2831                           ;TIMERS.c: 162: else
  2832                           ;TIMERS.c: 163: {
  2833                           ;TIMERS.c: 165: INTCONbits.TMR0IE = 0;
  2834  0013B0  9AF2               	bcf	intcon,5,c	;volatile
  2835  0013B2  0012               	return	
  2836                           
  2837                           ; BSR set to: 0
  2838                           
  2839                           ; BSR set to: 0
  2840  0013B4  0012               	return		;funcret
  2841  0013B6                     __end_of_TMR_Timer0Int:
  2842                           	opt stack 0
  2843                           tblptru	equ	0xFF8
  2844                           tblptrh	equ	0xFF7
  2845                           tblptrl	equ	0xFF6
  2846                           tablat	equ	0xFF5
  2847                           intcon	equ	0xFF2
  2848                           intcon2	equ	0xFF1
  2849                           postinc0	equ	0xFEE
  2850                           wreg	equ	0xFE8
  2851                           postinc2	equ	0xFDE
  2852                           postdec2	equ	0xFDD
  2853                           fsr2h	equ	0xFDA
  2854                           fsr2l	equ	0xFD9
  2855                           status	equ	0xFD8
  2856                           
  2857 ;; *************** function _TMR_ResetTimer0 *****************
  2858 ;; Defined at:
  2859 ;;		line 109 in file "TIMERS.c"
  2860 ;; Parameters:    Size  Location     Type
  2861 ;;		None
  2862 ;; Auto vars:     Size  Location     Type
  2863 ;;  TimerOn         1    1[BANK0 ] unsigned char 
  2864 ;; Return value:  Size  Location     Type
  2865 ;;		None               void
  2866 ;; Registers used:
  2867 ;;		wreg, status,2, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2873 ;;      Params:         0       0       0       0       0
  2874 ;;      Locals:         0       1       0       0       0
  2875 ;;      Temps:          0       0       0       0       0
  2876 ;;      Totals:         0       1       0       0       0
  2877 ;;Total ram usage:        1 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    9
  2880 ;; This function calls:
  2881 ;;		_TMR_Timer0
  2882 ;; This function is called by:
  2883 ;;		_InitTimer0
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           	psect	text18
  2888  001226                     __ptext18:
  2889                           	opt stack 0
  2890  001226                     _TMR_ResetTimer0:
  2891                           	opt stack 18
  2892                           
  2893                           ;TIMERS.c: 111: unsigned char TimerOn = T0CONbits.TMR0ON;
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;incstack = 0
  2897  001226  0E00               	movlw	0
  2898  001228  BED5               	btfsc	4053,7,c	;volatile
  2899  00122A  0E01               	movlw	1
  2900  00122C  0100               	movlb	0	; () banked
  2901  00122E  6F81               	movwf	TMR_ResetTimer0@TimerOn& (0+255),b
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;TIMERS.c: 113: TMR_Timer0(0);
  2905  001230  0E00               	movlw	0
  2906  001232  ECDB  F009         	call	_TMR_Timer0
  2907                           
  2908                           ;TIMERS.c: 114: TMR0H = 0;
  2909  001236  0E00               	movlw	0
  2910  001238  6ED7               	movwf	4055,c	;volatile
  2911                           
  2912                           ;TIMERS.c: 115: TMR0L = 2;
  2913  00123A  0E02               	movlw	2
  2914  00123C  6ED6               	movwf	4054,c	;volatile
  2915                           
  2916                           ;TIMERS.c: 116: if(TimerOn)
  2917  00123E  0100               	movlb	0	; () banked
  2918  001240  5181               	movf	TMR_ResetTimer0@TimerOn& (0+255),w,b
  2919  001242  0100               	movlb	0	; () banked
  2920  001244  B4D8               	btfsc	status,2,c
  2921  001246  0012               	return	
  2922                           
  2923                           ; BSR set to: 0
  2924                           ;TIMERS.c: 117: {
  2925                           ;TIMERS.c: 118: TMR_Timer0(1);
  2926  001248  0E01               	movlw	1
  2927  00124A  ECDB  F009         	call	_TMR_Timer0
  2928  00124E  0012               	return	
  2929  001250  0012               	return		;funcret
  2930  001252                     __end_of_TMR_ResetTimer0:
  2931                           	opt stack 0
  2932                           tblptru	equ	0xFF8
  2933                           tblptrh	equ	0xFF7
  2934                           tblptrl	equ	0xFF6
  2935                           tablat	equ	0xFF5
  2936                           intcon	equ	0xFF2
  2937                           intcon2	equ	0xFF1
  2938                           postinc0	equ	0xFEE
  2939                           wreg	equ	0xFE8
  2940                           postinc2	equ	0xFDE
  2941                           postdec2	equ	0xFDD
  2942                           fsr2h	equ	0xFDA
  2943                           fsr2l	equ	0xFD9
  2944                           status	equ	0xFD8
  2945                           
  2946 ;; *************** function _TMR_Timer0 *****************
  2947 ;; Defined at:
  2948 ;;		line 71 in file "TIMERS.c"
  2949 ;; Parameters:    Size  Location     Type
  2950 ;;  state           1    wreg     unsigned char 
  2951 ;; Auto vars:     Size  Location     Type
  2952 ;;  state           1    0[BANK0 ] unsigned char 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;		None               void
  2955 ;; Registers used:
  2956 ;;		wreg, status,2
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2962 ;;      Params:         0       0       0       0       0
  2963 ;;      Locals:         0       1       0       0       0
  2964 ;;      Temps:          0       0       0       0       0
  2965 ;;      Totals:         0       1       0       0       0
  2966 ;;Total ram usage:        1 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    8
  2969 ;; This function calls:
  2970 ;;		Nothing
  2971 ;; This function is called by:
  2972 ;;		_TMR_ResetTimer0
  2973 ;;		_InitTimer0
  2974 ;; This function uses a non-reentrant model
  2975 ;;
  2976                           
  2977                           	psect	text19
  2978  0013B6                     __ptext19:
  2979                           	opt stack 0
  2980  0013B6                     _TMR_Timer0:
  2981                           	opt stack 19
  2982                           
  2983                           ;incstack = 0
  2984                           ;TMR_Timer0@state stored from wreg
  2985  0013B6  0100               	movlb	0	; () banked
  2986  0013B8  6F80               	movwf	TMR_Timer0@state& (0+255),b
  2987                           
  2988                           ; BSR set to: 0
  2989                           ;TIMERS.c: 73: if(state)
  2990  0013BA  0100               	movlb	0	; () banked
  2991  0013BC  5180               	movf	TMR_Timer0@state& (0+255),w,b
  2992  0013BE  0100               	movlb	0	; () banked
  2993  0013C0  B4D8               	btfsc	status,2,c
  2994  0013C2  D002               	goto	l783
  2995                           
  2996                           ; BSR set to: 0
  2997                           ;TIMERS.c: 74: {
  2998                           ;TIMERS.c: 76: T0CONbits.TMR0ON = 1;
  2999  0013C4  8ED5               	bsf	4053,7,c	;volatile
  3000                           
  3001                           ;TIMERS.c: 77: }
  3002  0013C6  0012               	return	
  3003  0013C8                     l783:
  3004                           
  3005                           ; BSR set to: 0
  3006                           ;TIMERS.c: 78: else
  3007                           ;TIMERS.c: 79: {
  3008                           ;TIMERS.c: 81: T0CONbits.TMR0ON = 0;
  3009  0013C8  9ED5               	bcf	4053,7,c	;volatile
  3010  0013CA  0012               	return	
  3011                           
  3012                           ; BSR set to: 0
  3013                           
  3014                           ; BSR set to: 0
  3015  0013CC  0012               	return		;funcret
  3016  0013CE                     __end_of_TMR_Timer0:
  3017                           	opt stack 0
  3018                           tblptru	equ	0xFF8
  3019                           tblptrh	equ	0xFF7
  3020                           tblptrl	equ	0xFF6
  3021                           tablat	equ	0xFF5
  3022                           intcon	equ	0xFF2
  3023                           intcon2	equ	0xFF1
  3024                           postinc0	equ	0xFEE
  3025                           wreg	equ	0xFE8
  3026                           postinc2	equ	0xFDE
  3027                           postdec2	equ	0xFDD
  3028                           fsr2h	equ	0xFDA
  3029                           fsr2l	equ	0xFD9
  3030                           status	equ	0xFD8
  3031                           
  3032 ;; *************** function _InitRF *****************
  3033 ;; Defined at:
  3034 ;;		line 173 in file "RF.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;		None
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;		None
  3039 ;; Return value:  Size  Location     Type
  3040 ;;		None               void
  3041 ;; Registers used:
  3042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3048 ;;      Params:         0       0       0       0       0
  3049 ;;      Locals:         0       0       0       0       0
  3050 ;;      Temps:          0       0       0       0       0
  3051 ;;      Totals:         0       0       0       0       0
  3052 ;;Total ram usage:        0 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; Hardware stack levels required when called:    9
  3055 ;; This function calls:
  3056 ;;		_MSC_CleanBufferInt
  3057 ;;		_RF_DataInt
  3058 ;;		_RF_Receiver
  3059 ;;		_RF_SetBandwidth
  3060 ;;		_RF_SetSquelch
  3061 ;; This function is called by:
  3062 ;;		_Init_System
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           	psect	text20
  3067  0010AC                     __ptext20:
  3068                           	opt stack 0
  3069  0010AC                     _InitRF:
  3070                           	opt stack 20
  3071                           
  3072                           ;RF.c: 175: RF_Receiver(1);
  3073                           
  3074                           ; BSR set to: 0
  3075                           ;incstack = 0
  3076  0010AC  0E01               	movlw	1
  3077  0010AE  ECF3  F009         	call	_RF_Receiver
  3078                           
  3079                           ;RF.c: 176: RF_SetBandwidth(2);
  3080  0010B2  0E02               	movlw	2
  3081  0010B4  EC92  F008         	call	_RF_SetBandwidth
  3082                           
  3083                           ;RF.c: 177: MSC_CleanBufferInt(&RF_DataTiming,120);
  3084  0010B8  0E00               	movlw	low _RF_DataTiming
  3085  0010BA  0100               	movlb	0	; () banked
  3086  0010BC  6F80               	movwf	MSC_CleanBufferInt@data& (0+255),b
  3087  0010BE  0E01               	movlw	high _RF_DataTiming
  3088  0010C0  0100               	movlb	0	; () banked
  3089  0010C2  6F81               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  3090  0010C4  0E00               	movlw	0
  3091  0010C6  0100               	movlb	0	; () banked
  3092  0010C8  6F83               	movwf	(MSC_CleanBufferInt@count+1)& (0+255),b
  3093  0010CA  0E78               	movlw	120
  3094  0010CC  6F82               	movwf	MSC_CleanBufferInt@count& (0+255),b
  3095  0010CE  ECE1  F007         	call	_MSC_CleanBufferInt	;wreg free
  3096                           
  3097                           ;RF.c: 178: RF_SetSquelch(1);
  3098  0010D2  0E01               	movlw	1
  3099  0010D4  ECE7  F009         	call	_RF_SetSquelch
  3100                           
  3101                           ;RF.c: 179: INTCON3bits.INT1P = 1;
  3102  0010D8  8CF0               	bsf	intcon3,6,c	;volatile
  3103                           
  3104                           ;RF.c: 180: INTCON3bits.INT2P = 1;
  3105  0010DA  8EF0               	bsf	intcon3,7,c	;volatile
  3106                           
  3107                           ;RF.c: 181: INTCON2bits.INTEDG1 = 1;
  3108  0010DC  8AF1               	bsf	intcon2,5,c	;volatile
  3109                           
  3110                           ;RF.c: 182: INTCON2bits.INTEDG2 = 0;
  3111  0010DE  98F1               	bcf	intcon2,4,c	;volatile
  3112                           
  3113                           ;RF.c: 183: RF_DataInt(1);
  3114  0010E0  0E01               	movlw	1
  3115  0010E2  EC84  F009         	call	_RF_DataInt
  3116  0010E6  0012               	return		;funcret
  3117  0010E8                     __end_of_InitRF:
  3118                           	opt stack 0
  3119                           tblptru	equ	0xFF8
  3120                           tblptrh	equ	0xFF7
  3121                           tblptrl	equ	0xFF6
  3122                           tablat	equ	0xFF5
  3123                           intcon	equ	0xFF2
  3124                           intcon2	equ	0xFF1
  3125                           intcon3	equ	0xFF0
  3126                           postinc0	equ	0xFEE
  3127                           wreg	equ	0xFE8
  3128                           postinc2	equ	0xFDE
  3129                           postdec2	equ	0xFDD
  3130                           fsr2h	equ	0xFDA
  3131                           fsr2l	equ	0xFD9
  3132                           status	equ	0xFD8
  3133                           
  3134 ;; *************** function _RF_SetSquelch *****************
  3135 ;; Defined at:
  3136 ;;		line 155 in file "RF.c"
  3137 ;; Parameters:    Size  Location     Type
  3138 ;;  state           1    wreg     unsigned char 
  3139 ;; Auto vars:     Size  Location     Type
  3140 ;;  state           1    0[BANK0 ] unsigned char 
  3141 ;; Return value:  Size  Location     Type
  3142 ;;		None               void
  3143 ;; Registers used:
  3144 ;;		wreg, status,2, status,0
  3145 ;; Tracked objects:
  3146 ;;		On entry : 0/0
  3147 ;;		On exit  : 0/0
  3148 ;;		Unchanged: 0/0
  3149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3150 ;;      Params:         0       0       0       0       0
  3151 ;;      Locals:         0       1       0       0       0
  3152 ;;      Temps:          0       0       0       0       0
  3153 ;;      Totals:         0       1       0       0       0
  3154 ;;Total ram usage:        1 bytes
  3155 ;; Hardware stack levels used:    1
  3156 ;; Hardware stack levels required when called:    8
  3157 ;; This function calls:
  3158 ;;		Nothing
  3159 ;; This function is called by:
  3160 ;;		_InitRF
  3161 ;; This function uses a non-reentrant model
  3162 ;;
  3163                           
  3164                           	psect	text21
  3165  0013CE                     __ptext21:
  3166                           	opt stack 0
  3167  0013CE                     _RF_SetSquelch:
  3168                           	opt stack 20
  3169                           
  3170                           ;incstack = 0
  3171                           ;RF_SetSquelch@state stored from wreg
  3172  0013CE  0100               	movlb	0	; () banked
  3173  0013D0  6F80               	movwf	RF_SetSquelch@state& (0+255),b
  3174                           
  3175                           ; BSR set to: 0
  3176                           ;RF.c: 157: if(!state)
  3177  0013D2  0100               	movlb	0	; () banked
  3178  0013D4  5180               	movf	RF_SetSquelch@state& (0+255),w,b
  3179  0013D6  0100               	movlb	0	; () banked
  3180  0013D8  A4D8               	btfss	status,2,c
  3181  0013DA  D002               	goto	l3225
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;RF.c: 158: {
  3185                           ;RF.c: 160: LATA |= 0x20;
  3186  0013DC  8A89               	bsf	3977,5,c	;volatile
  3187                           
  3188                           ;RF.c: 161: }
  3189  0013DE  0012               	return	
  3190  0013E0                     l3225:
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;RF.c: 162: else
  3194                           ;RF.c: 163: {
  3195                           ;RF.c: 165: LATA &= ~0x20;
  3196  0013E0  9A89               	bcf	3977,5,c	;volatile
  3197  0013E2  0012               	return	
  3198                           
  3199                           ; BSR set to: 0
  3200                           
  3201                           ; BSR set to: 0
  3202  0013E4  0012               	return		;funcret
  3203  0013E6                     __end_of_RF_SetSquelch:
  3204                           	opt stack 0
  3205                           tblptru	equ	0xFF8
  3206                           tblptrh	equ	0xFF7
  3207                           tblptrl	equ	0xFF6
  3208                           tablat	equ	0xFF5
  3209                           intcon	equ	0xFF2
  3210                           intcon2	equ	0xFF1
  3211                           intcon3	equ	0xFF0
  3212                           postinc0	equ	0xFEE
  3213                           wreg	equ	0xFE8
  3214                           postinc2	equ	0xFDE
  3215                           postdec2	equ	0xFDD
  3216                           fsr2h	equ	0xFDA
  3217                           fsr2l	equ	0xFD9
  3218                           status	equ	0xFD8
  3219                           
  3220 ;; *************** function _RF_SetBandwidth *****************
  3221 ;; Defined at:
  3222 ;;		line 121 in file "RF.c"
  3223 ;; Parameters:    Size  Location     Type
  3224 ;;  band            1    wreg     unsigned char 
  3225 ;; Auto vars:     Size  Location     Type
  3226 ;;  band            1    0[BANK0 ] unsigned char 
  3227 ;; Return value:  Size  Location     Type
  3228 ;;		None               void
  3229 ;; Registers used:
  3230 ;;		wreg, status,2, status,0
  3231 ;; Tracked objects:
  3232 ;;		On entry : 0/0
  3233 ;;		On exit  : 0/0
  3234 ;;		Unchanged: 0/0
  3235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3236 ;;      Params:         0       0       0       0       0
  3237 ;;      Locals:         0       1       0       0       0
  3238 ;;      Temps:          0       0       0       0       0
  3239 ;;      Totals:         0       1       0       0       0
  3240 ;;Total ram usage:        1 bytes
  3241 ;; Hardware stack levels used:    1
  3242 ;; Hardware stack levels required when called:    8
  3243 ;; This function calls:
  3244 ;;		Nothing
  3245 ;; This function is called by:
  3246 ;;		_InitRF
  3247 ;; This function uses a non-reentrant model
  3248 ;;
  3249                           
  3250                           	psect	text22
  3251  001124                     __ptext22:
  3252                           	opt stack 0
  3253  001124                     _RF_SetBandwidth:
  3254                           	opt stack 20
  3255                           
  3256                           ; BSR set to: 0
  3257                           ;incstack = 0
  3258                           ;RF_SetBandwidth@band stored from wreg
  3259  001124  0100               	movlb	0	; () banked
  3260  001126  6F80               	movwf	RF_SetBandwidth@band& (0+255),b
  3261                           
  3262                           ; BSR set to: 0
  3263                           ;RF.c: 123: if(band == 0)
  3264  001128  0100               	movlb	0	; () banked
  3265  00112A  5180               	movf	RF_SetBandwidth@band& (0+255),w,b
  3266  00112C  0100               	movlb	0	; () banked
  3267  00112E  A4D8               	btfss	status,2,c
  3268  001130  D003               	goto	l3211
  3269                           
  3270                           ; BSR set to: 0
  3271                           ;RF.c: 124: {
  3272                           ;RF.c: 126: LATC &= ~0x40;
  3273  001132  9C8B               	bcf	3979,6,c	;volatile
  3274                           
  3275                           ;RF.c: 127: LATC &= ~0x80;
  3276  001134  9E8B               	bcf	3979,7,c	;volatile
  3277                           
  3278                           ;RF.c: 128: }
  3279  001136  0012               	return	
  3280  001138                     l3211:
  3281                           
  3282                           ; BSR set to: 0
  3283                           ;RF.c: 129: else if(band == 1)
  3284  001138  0100               	movlb	0	; () banked
  3285  00113A  0580               	decf	RF_SetBandwidth@band& (0+255),w,b
  3286  00113C  A4D8               	btfss	status,2,c
  3287  00113E  D003               	goto	l3215
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;RF.c: 130: {
  3291                           ;RF.c: 132: LATC |= 0x40;
  3292  001140  8C8B               	bsf	3979,6,c	;volatile
  3293                           
  3294                           ;RF.c: 133: LATC &= ~0x80;
  3295  001142  9E8B               	bcf	3979,7,c	;volatile
  3296                           
  3297                           ;RF.c: 134: }
  3298  001144  0012               	return	
  3299  001146                     l3215:
  3300                           
  3301                           ; BSR set to: 0
  3302                           ;RF.c: 135: else if(band == 2)
  3303  001146  0E02               	movlw	2
  3304  001148  0100               	movlb	0	; () banked
  3305  00114A  1980               	xorwf	RF_SetBandwidth@band& (0+255),w,b
  3306  00114C  A4D8               	btfss	status,2,c
  3307  00114E  D003               	goto	l3219
  3308                           
  3309                           ; BSR set to: 0
  3310                           ;RF.c: 136: {
  3311                           ;RF.c: 138: LATC &= ~0x40;
  3312  001150  9C8B               	bcf	3979,6,c	;volatile
  3313                           
  3314                           ;RF.c: 139: LATC |= 0x80;
  3315  001152  8E8B               	bsf	3979,7,c	;volatile
  3316                           
  3317                           ;RF.c: 140: }
  3318  001154  0012               	return	
  3319  001156                     l3219:
  3320                           
  3321                           ; BSR set to: 0
  3322                           ;RF.c: 141: else
  3323                           ;RF.c: 142: {
  3324                           ;RF.c: 144: LATC |= 0x40;
  3325  001156  8C8B               	bsf	3979,6,c	;volatile
  3326                           
  3327                           ;RF.c: 145: LATC |= 0x80;
  3328  001158  8E8B               	bsf	3979,7,c	;volatile
  3329                           
  3330                           ; BSR set to: 0
  3331                           
  3332                           ; BSR set to: 0
  3333  00115A  0012               	return	
  3334                           
  3335                           ; BSR set to: 0
  3336                           
  3337                           ; BSR set to: 0
  3338  00115C  0012               	return		;funcret
  3339  00115E                     __end_of_RF_SetBandwidth:
  3340                           	opt stack 0
  3341                           tblptru	equ	0xFF8
  3342                           tblptrh	equ	0xFF7
  3343                           tblptrl	equ	0xFF6
  3344                           tablat	equ	0xFF5
  3345                           intcon	equ	0xFF2
  3346                           intcon2	equ	0xFF1
  3347                           intcon3	equ	0xFF0
  3348                           postinc0	equ	0xFEE
  3349                           wreg	equ	0xFE8
  3350                           postinc2	equ	0xFDE
  3351                           postdec2	equ	0xFDD
  3352                           fsr2h	equ	0xFDA
  3353                           fsr2l	equ	0xFD9
  3354                           status	equ	0xFD8
  3355                           
  3356 ;; *************** function _RF_Receiver *****************
  3357 ;; Defined at:
  3358 ;;		line 102 in file "RF.c"
  3359 ;; Parameters:    Size  Location     Type
  3360 ;;  state           1    wreg     unsigned char 
  3361 ;; Auto vars:     Size  Location     Type
  3362 ;;  state           1    0[BANK0 ] unsigned char 
  3363 ;; Return value:  Size  Location     Type
  3364 ;;		None               void
  3365 ;; Registers used:
  3366 ;;		wreg, status,2, status,0
  3367 ;; Tracked objects:
  3368 ;;		On entry : 0/0
  3369 ;;		On exit  : 0/0
  3370 ;;		Unchanged: 0/0
  3371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3372 ;;      Params:         0       0       0       0       0
  3373 ;;      Locals:         0       1       0       0       0
  3374 ;;      Temps:          0       0       0       0       0
  3375 ;;      Totals:         0       1       0       0       0
  3376 ;;Total ram usage:        1 bytes
  3377 ;; Hardware stack levels used:    1
  3378 ;; Hardware stack levels required when called:    8
  3379 ;; This function calls:
  3380 ;;		Nothing
  3381 ;; This function is called by:
  3382 ;;		_InitRF
  3383 ;; This function uses a non-reentrant model
  3384 ;;
  3385                           
  3386                           	psect	text23
  3387  0013E6                     __ptext23:
  3388                           	opt stack 0
  3389  0013E6                     _RF_Receiver:
  3390                           	opt stack 20
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;incstack = 0
  3394                           ;RF_Receiver@state stored from wreg
  3395  0013E6  0100               	movlb	0	; () banked
  3396  0013E8  6F80               	movwf	RF_Receiver@state& (0+255),b
  3397                           
  3398                           ; BSR set to: 0
  3399                           ;RF.c: 104: if(!state)
  3400  0013EA  0100               	movlb	0	; () banked
  3401  0013EC  5180               	movf	RF_Receiver@state& (0+255),w,b
  3402  0013EE  0100               	movlb	0	; () banked
  3403  0013F0  A4D8               	btfss	status,2,c
  3404  0013F2  D002               	goto	l3205
  3405                           
  3406                           ; BSR set to: 0
  3407                           ;RF.c: 105: {
  3408                           ;RF.c: 107: LATA |= 0x04;
  3409  0013F4  8489               	bsf	3977,2,c	;volatile
  3410                           
  3411                           ;RF.c: 108: }
  3412  0013F6  0012               	return	
  3413  0013F8                     l3205:
  3414                           
  3415                           ; BSR set to: 0
  3416                           ;RF.c: 109: else
  3417                           ;RF.c: 110: {
  3418                           ;RF.c: 112: LATA &= ~0x04;
  3419  0013F8  9489               	bcf	3977,2,c	;volatile
  3420  0013FA  0012               	return	
  3421                           
  3422                           ; BSR set to: 0
  3423                           
  3424                           ; BSR set to: 0
  3425  0013FC  0012               	return		;funcret
  3426  0013FE                     __end_of_RF_Receiver:
  3427                           	opt stack 0
  3428                           tblptru	equ	0xFF8
  3429                           tblptrh	equ	0xFF7
  3430                           tblptrl	equ	0xFF6
  3431                           tablat	equ	0xFF5
  3432                           intcon	equ	0xFF2
  3433                           intcon2	equ	0xFF1
  3434                           intcon3	equ	0xFF0
  3435                           postinc0	equ	0xFEE
  3436                           wreg	equ	0xFE8
  3437                           postinc2	equ	0xFDE
  3438                           postdec2	equ	0xFDD
  3439                           fsr2h	equ	0xFDA
  3440                           fsr2l	equ	0xFD9
  3441                           status	equ	0xFD8
  3442                           
  3443 ;; *************** function _RF_DataInt *****************
  3444 ;; Defined at:
  3445 ;;		line 80 in file "RF.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;  state           1    wreg     unsigned char 
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;  state           1    0[BANK0 ] unsigned char 
  3450 ;; Return value:  Size  Location     Type
  3451 ;;		None               void
  3452 ;; Registers used:
  3453 ;;		wreg, status,2
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3459 ;;      Params:         0       0       0       0       0
  3460 ;;      Locals:         0       1       0       0       0
  3461 ;;      Temps:          0       0       0       0       0
  3462 ;;      Totals:         0       1       0       0       0
  3463 ;;Total ram usage:        1 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    8
  3466 ;; This function calls:
  3467 ;;		Nothing
  3468 ;; This function is called by:
  3469 ;;		_InitRF
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           	psect	text24
  3474  001308                     __ptext24:
  3475                           	opt stack 0
  3476  001308                     _RF_DataInt:
  3477                           	opt stack 20
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;incstack = 0
  3481                           ;RF_DataInt@state stored from wreg
  3482  001308  0100               	movlb	0	; () banked
  3483  00130A  6F80               	movwf	RF_DataInt@state& (0+255),b
  3484                           
  3485                           ; BSR set to: 0
  3486                           ;RF.c: 82: if(state)
  3487  00130C  0100               	movlb	0	; () banked
  3488  00130E  5180               	movf	RF_DataInt@state& (0+255),w,b
  3489  001310  0100               	movlb	0	; () banked
  3490  001312  B4D8               	btfsc	status,2,c
  3491  001314  D003               	goto	l252
  3492                           
  3493                           ; BSR set to: 0
  3494                           ;RF.c: 83: {
  3495                           ;RF.c: 85: INTCON3bits.INT1E = 1;
  3496  001316  86F0               	bsf	intcon3,3,c	;volatile
  3497                           
  3498                           ;RF.c: 86: INTCON3bits.INT2E = 1;
  3499  001318  88F0               	bsf	intcon3,4,c	;volatile
  3500                           
  3501                           ;RF.c: 87: }
  3502  00131A  0012               	return	
  3503  00131C                     l252:
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;RF.c: 88: else
  3507                           ;RF.c: 89: {
  3508                           ;RF.c: 91: INTCON3bits.INT1E = 0;
  3509  00131C  96F0               	bcf	intcon3,3,c	;volatile
  3510                           
  3511                           ;RF.c: 92: INTCON3bits.INT2E = 0;
  3512  00131E  98F0               	bcf	intcon3,4,c	;volatile
  3513  001320  0012               	return	
  3514                           
  3515                           ; BSR set to: 0
  3516                           
  3517                           ; BSR set to: 0
  3518  001322  0012               	return		;funcret
  3519  001324                     __end_of_RF_DataInt:
  3520                           	opt stack 0
  3521                           tblptru	equ	0xFF8
  3522                           tblptrh	equ	0xFF7
  3523                           tblptrl	equ	0xFF6
  3524                           tablat	equ	0xFF5
  3525                           intcon	equ	0xFF2
  3526                           intcon2	equ	0xFF1
  3527                           intcon3	equ	0xFF0
  3528                           postinc0	equ	0xFEE
  3529                           wreg	equ	0xFE8
  3530                           postinc2	equ	0xFDE
  3531                           postdec2	equ	0xFDD
  3532                           fsr2h	equ	0xFDA
  3533                           fsr2l	equ	0xFD9
  3534                           status	equ	0xFD8
  3535                           
  3536 ;; *************** function _MSC_CleanBufferInt *****************
  3537 ;; Defined at:
  3538 ;;		line 166 in file "MISC.c"
  3539 ;; Parameters:    Size  Location     Type
  3540 ;;  data            2    0[BANK0 ] PTR unsigned int 
  3541 ;;		 -> RF_SavedTiming(240), RF_DataTiming(240), 
  3542 ;;  count           2    2[BANK0 ] unsigned int 
  3543 ;; Auto vars:     Size  Location     Type
  3544 ;;  i               2    4[BANK0 ] unsigned int 
  3545 ;; Return value:  Size  Location     Type
  3546 ;;		None               void
  3547 ;; Registers used:
  3548 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3549 ;; Tracked objects:
  3550 ;;		On entry : 0/0
  3551 ;;		On exit  : 0/0
  3552 ;;		Unchanged: 0/0
  3553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3554 ;;      Params:         0       4       0       0       0
  3555 ;;      Locals:         0       2       0       0       0
  3556 ;;      Temps:          0       0       0       0       0
  3557 ;;      Totals:         0       6       0       0       0
  3558 ;;Total ram usage:        6 bytes
  3559 ;; Hardware stack levels used:    1
  3560 ;; Hardware stack levels required when called:    8
  3561 ;; This function calls:
  3562 ;;		Nothing
  3563 ;; This function is called by:
  3564 ;;		_InitRF
  3565 ;;		_MSC_BufferCopyIntConst
  3566 ;; This function uses a non-reentrant model
  3567 ;;
  3568                           
  3569                           	psect	text25
  3570  000FC2                     __ptext25:
  3571                           	opt stack 0
  3572  000FC2                     _MSC_CleanBufferInt:
  3573                           	opt stack 20
  3574                           
  3575                           ;MISC.c: 168: unsigned int i=0;
  3576                           
  3577                           ; BSR set to: 0
  3578                           ;incstack = 0
  3579  000FC2  0E00               	movlw	0
  3580  000FC4  0100               	movlb	0	; () banked
  3581  000FC6  6F85               	movwf	(MSC_CleanBufferInt@i+1)& (0+255),b
  3582  000FC8  0E00               	movlw	0
  3583  000FCA  6F84               	movwf	MSC_CleanBufferInt@i& (0+255),b
  3584                           
  3585                           ;MISC.c: 169: for(i=0; i<count;i++)
  3586  000FCC  0E00               	movlw	0
  3587  000FCE  0100               	movlb	0	; () banked
  3588  000FD0  6F85               	movwf	(MSC_CleanBufferInt@i+1)& (0+255),b
  3589  000FD2  0E00               	movlw	0
  3590  000FD4  6F84               	movwf	MSC_CleanBufferInt@i& (0+255),b
  3591  000FD6  D015               	goto	l3233
  3592  000FD8                     l3229:
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;MISC.c: 170: {
  3596                           ;MISC.c: 171: data[i]= 0;
  3597  000FD8  90D8               	bcf	status,0,c
  3598  000FDA  0100               	movlb	0	; () banked
  3599  000FDC  3584               	rlcf	MSC_CleanBufferInt@i& (0+255),w,b
  3600  000FDE  6ED9               	movwf	fsr2l,c
  3601  000FE0  0100               	movlb	0	; () banked
  3602  000FE2  3585               	rlcf	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  3603  000FE4  6EDA               	movwf	fsr2h,c
  3604  000FE6  0100               	movlb	0	; () banked
  3605  000FE8  5180               	movf	MSC_CleanBufferInt@data& (0+255),w,b
  3606  000FEA  26D9               	addwf	fsr2l,f,c
  3607  000FEC  0100               	movlb	0	; () banked
  3608  000FEE  5181               	movf	(MSC_CleanBufferInt@data+1)& (0+255),w,b
  3609  000FF0  22DA               	addwfc	fsr2h,f,c
  3610  000FF2  0E00               	movlw	0
  3611  000FF4  6EDE               	movwf	postinc2,c
  3612  000FF6  0E00               	movlw	0
  3613  000FF8  6EDD               	movwf	postdec2,c
  3614                           
  3615                           ; BSR set to: 0
  3616  000FFA  0100               	movlb	0	; () banked
  3617  000FFC  4B84               	infsnz	MSC_CleanBufferInt@i& (0+255),f,b
  3618  000FFE  2B85               	incf	(MSC_CleanBufferInt@i+1)& (0+255),f,b
  3619  001000  D000               	goto	l3233
  3620  001002                     l3233:
  3621                           
  3622                           ; BSR set to: 0
  3623  001002  0100               	movlb	0	; () banked
  3624  001004  5182               	movf	MSC_CleanBufferInt@count& (0+255),w,b
  3625  001006  0100               	movlb	0	; () banked
  3626  001008  5D84               	subwf	MSC_CleanBufferInt@i& (0+255),w,b
  3627  00100A  0100               	movlb	0	; () banked
  3628  00100C  5183               	movf	(MSC_CleanBufferInt@count+1)& (0+255),w,b
  3629  00100E  0100               	movlb	0	; () banked
  3630  001010  5985               	subwfb	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  3631  001012  A0D8               	btfss	status,0,c
  3632  001014  D7E1               	goto	l3229
  3633                           
  3634                           ; BSR set to: 0
  3635                           
  3636                           ; BSR set to: 0
  3637  001016  0012               	return		;funcret
  3638  001018                     __end_of_MSC_CleanBufferInt:
  3639                           	opt stack 0
  3640                           tblptru	equ	0xFF8
  3641                           tblptrh	equ	0xFF7
  3642                           tblptrl	equ	0xFF6
  3643                           tablat	equ	0xFF5
  3644                           intcon	equ	0xFF2
  3645                           intcon2	equ	0xFF1
  3646                           intcon3	equ	0xFF0
  3647                           postinc0	equ	0xFEE
  3648                           wreg	equ	0xFE8
  3649                           postinc2	equ	0xFDE
  3650                           postdec2	equ	0xFDD
  3651                           fsr2h	equ	0xFDA
  3652                           fsr2l	equ	0xFD9
  3653                           status	equ	0xFD8
  3654                           
  3655 ;; *************** function _InitMOTOR *****************
  3656 ;; Defined at:
  3657 ;;		line 92 in file "MOTOR.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;		None
  3660 ;; Auto vars:     Size  Location     Type
  3661 ;;		None
  3662 ;; Return value:  Size  Location     Type
  3663 ;;		None               void
  3664 ;; Registers used:
  3665 ;;		None
  3666 ;; Tracked objects:
  3667 ;;		On entry : 0/0
  3668 ;;		On exit  : 0/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3671 ;;      Params:         0       0       0       0       0
  3672 ;;      Locals:         0       0       0       0       0
  3673 ;;      Temps:          0       0       0       0       0
  3674 ;;      Totals:         0       0       0       0       0
  3675 ;;Total ram usage:        0 bytes
  3676 ;; Hardware stack levels used:    1
  3677 ;; Hardware stack levels required when called:    8
  3678 ;; This function calls:
  3679 ;;		Nothing
  3680 ;; This function is called by:
  3681 ;;		_Init_System
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           	psect	text26
  3686  001484                     __ptext26:
  3687                           	opt stack 0
  3688  001484                     _InitMOTOR:
  3689                           	opt stack 21
  3690                           
  3691                           ;MOTOR.c: 95: __nop();
  3692                           
  3693                           ; BSR set to: 0
  3694                           ;incstack = 0
  3695  001484  F000               	nop	
  3696  001486  0012               	return		;funcret
  3697  001488                     __end_of_InitMOTOR:
  3698                           	opt stack 0
  3699                           tblptru	equ	0xFF8
  3700                           tblptrh	equ	0xFF7
  3701                           tblptrl	equ	0xFF6
  3702                           tablat	equ	0xFF5
  3703                           intcon	equ	0xFF2
  3704                           intcon2	equ	0xFF1
  3705                           intcon3	equ	0xFF0
  3706                           postinc0	equ	0xFEE
  3707                           wreg	equ	0xFE8
  3708                           postinc2	equ	0xFDE
  3709                           postdec2	equ	0xFDD
  3710                           fsr2h	equ	0xFDA
  3711                           fsr2l	equ	0xFD9
  3712                           status	equ	0xFD8
  3713                           
  3714 ;; *************** function _InitLDO *****************
  3715 ;; Defined at:
  3716 ;;		line 55 in file "LDO.c"
  3717 ;; Parameters:    Size  Location     Type
  3718 ;;		None
  3719 ;; Auto vars:     Size  Location     Type
  3720 ;;		None
  3721 ;; Return value:  Size  Location     Type
  3722 ;;		None               void
  3723 ;; Registers used:
  3724 ;;		None
  3725 ;; Tracked objects:
  3726 ;;		On entry : 0/0
  3727 ;;		On exit  : 0/0
  3728 ;;		Unchanged: 0/0
  3729 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3730 ;;      Params:         0       0       0       0       0
  3731 ;;      Locals:         0       0       0       0       0
  3732 ;;      Temps:          0       0       0       0       0
  3733 ;;      Totals:         0       0       0       0       0
  3734 ;;Total ram usage:        0 bytes
  3735 ;; Hardware stack levels used:    1
  3736 ;; Hardware stack levels required when called:    8
  3737 ;; This function calls:
  3738 ;;		Nothing
  3739 ;; This function is called by:
  3740 ;;		_Init_System
  3741 ;; This function uses a non-reentrant model
  3742 ;;
  3743                           
  3744                           	psect	text27
  3745  00148C                     __ptext27:
  3746                           	opt stack 0
  3747  00148C                     _InitLDO:
  3748                           	opt stack 21
  3749                           
  3750                           ;incstack = 0
  3751  00148C  0012               	return		;funcret
  3752  00148E                     __end_of_InitLDO:
  3753                           	opt stack 0
  3754                           tblptru	equ	0xFF8
  3755                           tblptrh	equ	0xFF7
  3756                           tblptrl	equ	0xFF6
  3757                           tablat	equ	0xFF5
  3758                           intcon	equ	0xFF2
  3759                           intcon2	equ	0xFF1
  3760                           intcon3	equ	0xFF0
  3761                           postinc0	equ	0xFEE
  3762                           wreg	equ	0xFE8
  3763                           postinc2	equ	0xFDE
  3764                           postdec2	equ	0xFDD
  3765                           fsr2h	equ	0xFDA
  3766                           fsr2l	equ	0xFD9
  3767                           status	equ	0xFD8
  3768                           
  3769 ;; *************** function _InitIR *****************
  3770 ;; Defined at:
  3771 ;;		line 56 in file "IR.c"
  3772 ;; Parameters:    Size  Location     Type
  3773 ;;		None
  3774 ;; Auto vars:     Size  Location     Type
  3775 ;;		None
  3776 ;; Return value:  Size  Location     Type
  3777 ;;		None               void
  3778 ;; Registers used:
  3779 ;;		None
  3780 ;; Tracked objects:
  3781 ;;		On entry : 0/0
  3782 ;;		On exit  : 0/0
  3783 ;;		Unchanged: 0/0
  3784 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3785 ;;      Params:         0       0       0       0       0
  3786 ;;      Locals:         0       0       0       0       0
  3787 ;;      Temps:          0       0       0       0       0
  3788 ;;      Totals:         0       0       0       0       0
  3789 ;;Total ram usage:        0 bytes
  3790 ;; Hardware stack levels used:    1
  3791 ;; Hardware stack levels required when called:    8
  3792 ;; This function calls:
  3793 ;;		Nothing
  3794 ;; This function is called by:
  3795 ;;		_Init_System
  3796 ;; This function uses a non-reentrant model
  3797 ;;
  3798                           
  3799                           	psect	text28
  3800  00148E                     __ptext28:
  3801                           	opt stack 0
  3802  00148E                     _InitIR:
  3803                           	opt stack 21
  3804                           
  3805                           ;incstack = 0
  3806  00148E  0012               	return		;funcret
  3807  001490                     __end_of_InitIR:
  3808                           	opt stack 0
  3809                           tblptru	equ	0xFF8
  3810                           tblptrh	equ	0xFF7
  3811                           tblptrl	equ	0xFF6
  3812                           tablat	equ	0xFF5
  3813                           intcon	equ	0xFF2
  3814                           intcon2	equ	0xFF1
  3815                           intcon3	equ	0xFF0
  3816                           postinc0	equ	0xFEE
  3817                           wreg	equ	0xFE8
  3818                           postinc2	equ	0xFDE
  3819                           postdec2	equ	0xFDD
  3820                           fsr2h	equ	0xFDA
  3821                           fsr2l	equ	0xFD9
  3822                           status	equ	0xFD8
  3823                           
  3824 ;; *************** function _InitFlash *****************
  3825 ;; Defined at:
  3826 ;;		line 55 in file "FLASH.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;		None
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;		None
  3831 ;; Return value:  Size  Location     Type
  3832 ;;		None               void
  3833 ;; Registers used:
  3834 ;;		None
  3835 ;; Tracked objects:
  3836 ;;		On entry : 0/0
  3837 ;;		On exit  : 0/0
  3838 ;;		Unchanged: 0/0
  3839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3840 ;;      Params:         0       0       0       0       0
  3841 ;;      Locals:         0       0       0       0       0
  3842 ;;      Temps:          0       0       0       0       0
  3843 ;;      Totals:         0       0       0       0       0
  3844 ;;Total ram usage:        0 bytes
  3845 ;; Hardware stack levels used:    1
  3846 ;; Hardware stack levels required when called:    8
  3847 ;; This function calls:
  3848 ;;		Nothing
  3849 ;; This function is called by:
  3850 ;;		_Init_System
  3851 ;; This function uses a non-reentrant model
  3852 ;;
  3853                           
  3854                           	psect	text29
  3855  001490                     __ptext29:
  3856                           	opt stack 0
  3857  001490                     _InitFlash:
  3858                           	opt stack 21
  3859                           
  3860                           ;incstack = 0
  3861  001490  0012               	return		;funcret
  3862  001492                     __end_of_InitFlash:
  3863                           	opt stack 0
  3864                           tblptru	equ	0xFF8
  3865                           tblptrh	equ	0xFF7
  3866                           tblptrl	equ	0xFF6
  3867                           tablat	equ	0xFF5
  3868                           intcon	equ	0xFF2
  3869                           intcon2	equ	0xFF1
  3870                           intcon3	equ	0xFF0
  3871                           postinc0	equ	0xFEE
  3872                           wreg	equ	0xFE8
  3873                           postinc2	equ	0xFDE
  3874                           postdec2	equ	0xFDD
  3875                           fsr2h	equ	0xFDA
  3876                           fsr2l	equ	0xFD9
  3877                           status	equ	0xFD8
  3878                           
  3879 ;; *************** function _InitButton *****************
  3880 ;; Defined at:
  3881 ;;		line 77 in file "BUTTON.c"
  3882 ;; Parameters:    Size  Location     Type
  3883 ;;		None
  3884 ;; Auto vars:     Size  Location     Type
  3885 ;;		None
  3886 ;; Return value:  Size  Location     Type
  3887 ;;		None               void
  3888 ;; Registers used:
  3889 ;;		wreg, status,2, cstack
  3890 ;; Tracked objects:
  3891 ;;		On entry : 0/0
  3892 ;;		On exit  : 0/0
  3893 ;;		Unchanged: 0/0
  3894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3895 ;;      Params:         0       0       0       0       0
  3896 ;;      Locals:         0       0       0       0       0
  3897 ;;      Temps:          0       0       0       0       0
  3898 ;;      Totals:         0       0       0       0       0
  3899 ;;Total ram usage:        0 bytes
  3900 ;; Hardware stack levels used:    1
  3901 ;; Hardware stack levels required when called:    9
  3902 ;; This function calls:
  3903 ;;		_BUT_IR_PinChangeInt
  3904 ;; This function is called by:
  3905 ;;		_Init_System
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909                           	psect	text30
  3910  001464                     __ptext30:
  3911                           	opt stack 0
  3912  001464                     _InitButton:
  3913                           	opt stack 20
  3914                           
  3915                           ;BUTTON.c: 80: INTCON2bits.RBIP = 0;
  3916                           
  3917                           ;incstack = 0
  3918  001464  90F1               	bcf	intcon2,0,c	;volatile
  3919                           
  3920                           ;BUTTON.c: 81: BUT_IR_PinChangeInt(1);
  3921  001466  0E01               	movlw	1
  3922  001468  ECFF  F009         	call	_BUT_IR_PinChangeInt
  3923  00146C  0012               	return		;funcret
  3924  00146E                     __end_of_InitButton:
  3925                           	opt stack 0
  3926                           tblptru	equ	0xFF8
  3927                           tblptrh	equ	0xFF7
  3928                           tblptrl	equ	0xFF6
  3929                           tablat	equ	0xFF5
  3930                           intcon	equ	0xFF2
  3931                           intcon2	equ	0xFF1
  3932                           intcon3	equ	0xFF0
  3933                           postinc0	equ	0xFEE
  3934                           wreg	equ	0xFE8
  3935                           postinc2	equ	0xFDE
  3936                           postdec2	equ	0xFDD
  3937                           fsr2h	equ	0xFDA
  3938                           fsr2l	equ	0xFD9
  3939                           status	equ	0xFD8
  3940                           
  3941 ;; *************** function _BUT_IR_PinChangeInt *****************
  3942 ;; Defined at:
  3943 ;;		line 54 in file "BUTTON.c"
  3944 ;; Parameters:    Size  Location     Type
  3945 ;;  state           1    wreg     unsigned char 
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;  state           1    0[BANK0 ] unsigned char 
  3948 ;; Return value:  Size  Location     Type
  3949 ;;		None               void
  3950 ;; Registers used:
  3951 ;;		wreg, status,2
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3957 ;;      Params:         0       0       0       0       0
  3958 ;;      Locals:         0       1       0       0       0
  3959 ;;      Temps:          0       0       0       0       0
  3960 ;;      Totals:         0       1       0       0       0
  3961 ;;Total ram usage:        1 bytes
  3962 ;; Hardware stack levels used:    1
  3963 ;; Hardware stack levels required when called:    8
  3964 ;; This function calls:
  3965 ;;		Nothing
  3966 ;; This function is called by:
  3967 ;;		_InitButton
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text31
  3972  0013FE                     __ptext31:
  3973                           	opt stack 0
  3974  0013FE                     _BUT_IR_PinChangeInt:
  3975                           	opt stack 20
  3976                           
  3977                           ;incstack = 0
  3978                           ;BUT_IR_PinChangeInt@state stored from wreg
  3979  0013FE  0100               	movlb	0	; () banked
  3980  001400  6F80               	movwf	BUT_IR_PinChangeInt@state& (0+255),b
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;BUTTON.c: 56: if(state)
  3984  001402  0100               	movlb	0	; () banked
  3985  001404  5180               	movf	BUT_IR_PinChangeInt@state& (0+255),w,b
  3986  001406  0100               	movlb	0	; () banked
  3987  001408  B4D8               	btfsc	status,2,c
  3988  00140A  D002               	goto	l735
  3989                           
  3990                           ; BSR set to: 0
  3991                           ;BUTTON.c: 57: {
  3992                           ;BUTTON.c: 59: INTCONbits.RBIE = 1;
  3993  00140C  86F2               	bsf	intcon,3,c	;volatile
  3994                           
  3995                           ;BUTTON.c: 60: }
  3996  00140E  0012               	return	
  3997  001410                     l735:
  3998                           
  3999                           ; BSR set to: 0
  4000                           ;BUTTON.c: 61: else
  4001                           ;BUTTON.c: 62: {
  4002                           ;BUTTON.c: 64: INTCONbits.RBIE = 0;
  4003  001410  96F2               	bcf	intcon,3,c	;volatile
  4004  001412  0012               	return	
  4005                           
  4006                           ; BSR set to: 0
  4007                           
  4008                           ; BSR set to: 0
  4009  001414  0012               	return		;funcret
  4010  001416                     __end_of_BUT_IR_PinChangeInt:
  4011                           	opt stack 0
  4012                           tblptru	equ	0xFF8
  4013                           tblptrh	equ	0xFF7
  4014                           tblptrl	equ	0xFF6
  4015                           tablat	equ	0xFF5
  4016                           intcon	equ	0xFF2
  4017                           intcon2	equ	0xFF1
  4018                           intcon3	equ	0xFF0
  4019                           postinc0	equ	0xFEE
  4020                           wreg	equ	0xFE8
  4021                           postinc2	equ	0xFDE
  4022                           postdec2	equ	0xFDD
  4023                           fsr2h	equ	0xFDA
  4024                           fsr2l	equ	0xFD9
  4025                           status	equ	0xFD8
  4026                           
  4027 ;; *************** function _InitADC *****************
  4028 ;; Defined at:
  4029 ;;		line 55 in file "ADC.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;		None
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;		None               void
  4036 ;; Registers used:
  4037 ;;		None
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : 0/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4043 ;;      Params:         0       0       0       0       0
  4044 ;;      Locals:         0       0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0
  4046 ;;      Totals:         0       0       0       0       0
  4047 ;;Total ram usage:        0 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:    8
  4050 ;; This function calls:
  4051 ;;		Nothing
  4052 ;; This function is called by:
  4053 ;;		_Init_System
  4054 ;; This function uses a non-reentrant model
  4055 ;;
  4056                           
  4057                           	psect	text32
  4058  001492                     __ptext32:
  4059                           	opt stack 0
  4060  001492                     _InitADC:
  4061                           	opt stack 21
  4062                           
  4063                           ; BSR set to: 0
  4064                           ;incstack = 0
  4065  001492  0012               	return		;funcret
  4066  001494                     __end_of_InitADC:
  4067                           	opt stack 0
  4068                           tblptru	equ	0xFF8
  4069                           tblptrh	equ	0xFF7
  4070                           tblptrl	equ	0xFF6
  4071                           tablat	equ	0xFF5
  4072                           intcon	equ	0xFF2
  4073                           intcon2	equ	0xFF1
  4074                           intcon3	equ	0xFF0
  4075                           postinc0	equ	0xFEE
  4076                           wreg	equ	0xFE8
  4077                           postinc2	equ	0xFDE
  4078                           postdec2	equ	0xFDD
  4079                           fsr2h	equ	0xFDA
  4080                           fsr2l	equ	0xFD9
  4081                           status	equ	0xFD8
  4082                           
  4083 ;; *************** function _BUT_ReadButton *****************
  4084 ;; Defined at:
  4085 ;;		line 90 in file "BUTTON.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;		None
  4088 ;; Auto vars:     Size  Location     Type
  4089 ;;  value           1    0[BANK0 ] unsigned char 
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  1    wreg      unsigned char 
  4092 ;; Registers used:
  4093 ;;		wreg, status,2, status,0
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 0/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4099 ;;      Params:         0       0       0       0       0
  4100 ;;      Locals:         0       1       0       0       0
  4101 ;;      Temps:          0       0       0       0       0
  4102 ;;      Totals:         0       1       0       0       0
  4103 ;;Total ram usage:        1 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    8
  4106 ;; This function calls:
  4107 ;;		Nothing
  4108 ;; This function is called by:
  4109 ;;		_Init_System
  4110 ;; This function uses a non-reentrant model
  4111 ;;
  4112                           
  4113                           	psect	text33
  4114  00115E                     __ptext33:
  4115                           	opt stack 0
  4116  00115E                     _BUT_ReadButton:
  4117                           	opt stack 21
  4118                           
  4119                           ;BUTTON.c: 92: unsigned char value = PORTB;
  4120                           
  4121                           ;incstack = 0
  4122  00115E  CF81 F080          	movff	3969,BUT_ReadButton@value	;volatile
  4123                           
  4124                           ;BUTTON.c: 93: if((value & 0x20) == 0)
  4125  001162  0100               	movlb	0	; () banked
  4126  001164  BB80               	btfsc	BUT_ReadButton@value& (0+255),5,b
  4127  001166  D00B               	goto	l3341
  4128                           
  4129                           ; BSR set to: 0
  4130                           ;BUTTON.c: 94: {
  4131                           ;BUTTON.c: 96: if(ButtonValue_prev == 0)
  4132  001168  0100               	movlb	0	; () banked
  4133  00116A  519B               	movf	_ButtonValue_prev& (0+255),w,b
  4134  00116C  A4D8               	btfss	status,2,c
  4135  00116E  D002               	goto	l744
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;BUTTON.c: 97: {
  4139                           ;BUTTON.c: 98: ButtonChange = 1;
  4140  001170  0E01               	movlw	1
  4141  001172  6E52               	movwf	_ButtonChange,c
  4142  001174                     l744:
  4143                           
  4144                           ; BSR set to: 0
  4145                           ;BUTTON.c: 99: }
  4146                           ;BUTTON.c: 100: ButtonValue_prev = 1;
  4147  001174  0E01               	movlw	1
  4148  001176  0100               	movlb	0	; () banked
  4149  001178  6F9B               	movwf	_ButtonValue_prev& (0+255),b
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;BUTTON.c: 101: return 1;
  4153  00117A  0E01               	movlw	1
  4154                           
  4155                           ; BSR set to: 0
  4156  00117C  0012               	return	
  4157  00117E                     l3341:
  4158                           
  4159                           ; BSR set to: 0
  4160                           ;BUTTON.c: 102: }
  4161                           ;BUTTON.c: 105: if(ButtonValue_prev == 1)
  4162  00117E  0100               	movlb	0	; () banked
  4163  001180  059B               	decf	_ButtonValue_prev& (0+255),w,b
  4164  001182  A4D8               	btfss	status,2,c
  4165  001184  D002               	goto	l746
  4166                           
  4167                           ; BSR set to: 0
  4168                           ;BUTTON.c: 106: {
  4169                           ;BUTTON.c: 107: ButtonChange = 1;
  4170  001186  0E01               	movlw	1
  4171  001188  6E52               	movwf	_ButtonChange,c
  4172  00118A                     l746:
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;BUTTON.c: 108: }
  4176                           ;BUTTON.c: 109: ButtonValue_prev = 0;
  4177  00118A  0E00               	movlw	0
  4178  00118C  0100               	movlb	0	; () banked
  4179  00118E  6F9B               	movwf	_ButtonValue_prev& (0+255),b
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;BUTTON.c: 110: return 0;
  4183  001190  0E00               	movlw	0
  4184  001192  0012               	return	
  4185                           
  4186                           ; BSR set to: 0
  4187                           
  4188                           ; BSR set to: 0
  4189  001194  0012               	return		;funcret
  4190  001196                     __end_of_BUT_ReadButton:
  4191                           	opt stack 0
  4192                           tblptru	equ	0xFF8
  4193                           tblptrh	equ	0xFF7
  4194                           tblptrl	equ	0xFF6
  4195                           tablat	equ	0xFF5
  4196                           intcon	equ	0xFF2
  4197                           intcon2	equ	0xFF1
  4198                           intcon3	equ	0xFF0
  4199                           postinc0	equ	0xFEE
  4200                           wreg	equ	0xFE8
  4201                           postinc2	equ	0xFDE
  4202                           postdec2	equ	0xFDD
  4203                           fsr2h	equ	0xFDA
  4204                           fsr2l	equ	0xFD9
  4205                           status	equ	0xFD8
  4206                           
  4207 ;; *************** function _Init_App *****************
  4208 ;; Defined at:
  4209 ;;		line 72 in file "USER.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;		None
  4212 ;; Auto vars:     Size  Location     Type
  4213 ;;		None
  4214 ;; Return value:  Size  Location     Type
  4215 ;;		None               void
  4216 ;; Registers used:
  4217 ;;		wreg, status,2
  4218 ;; Tracked objects:
  4219 ;;		On entry : 0/0
  4220 ;;		On exit  : 0/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4223 ;;      Params:         0       0       0       0       0
  4224 ;;      Locals:         0       0       0       0       0
  4225 ;;      Temps:          0       0       0       0       0
  4226 ;;      Totals:         0       0       0       0       0
  4227 ;;Total ram usage:        0 bytes
  4228 ;; Hardware stack levels used:    1
  4229 ;; Hardware stack levels required when called:    8
  4230 ;; This function calls:
  4231 ;;		Nothing
  4232 ;; This function is called by:
  4233 ;;		_main
  4234 ;; This function uses a non-reentrant model
  4235 ;;
  4236                           
  4237                           	psect	text34
  4238  0010E8                     __ptext34:
  4239                           	opt stack 0
  4240  0010E8                     _Init_App:
  4241                           	opt stack 22
  4242                           
  4243                           ;USER.c: 74: LATA = 0;
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;incstack = 0
  4247  0010E8  0E00               	movlw	0
  4248  0010EA  6E89               	movwf	3977,c	;volatile
  4249                           
  4250                           ;USER.c: 75: LATB = 0;
  4251  0010EC  0E00               	movlw	0
  4252  0010EE  6E8A               	movwf	3978,c	;volatile
  4253                           
  4254                           ;USER.c: 76: LATC = 0;
  4255  0010F0  0E00               	movlw	0
  4256  0010F2  6E8B               	movwf	3979,c	;volatile
  4257                           
  4258                           ;USER.c: 78: ADCON1bits.PCFG = 0b1101;
  4259  0010F4  50C1               	movf	4033,w,c	;volatile
  4260  0010F6  0BF0               	andlw	-16
  4261  0010F8  090D               	iorlw	13
  4262  0010FA  6EC1               	movwf	4033,c	;volatile
  4263                           
  4264                           ;USER.c: 81: TRISCbits.TRISC0 = 1;
  4265  0010FC  8094               	bsf	3988,0,c	;volatile
  4266                           
  4267                           ;USER.c: 82: TRISCbits.TRISC1 = 1;
  4268  0010FE  8294               	bsf	3988,1,c	;volatile
  4269                           
  4270                           ;USER.c: 85: TRISAbits.TRISA0 = 1;
  4271  001100  8092               	bsf	3986,0,c	;volatile
  4272                           
  4273                           ;USER.c: 89: TRISAbits.TRISA1 = 1;
  4274  001102  8292               	bsf	3986,1,c	;volatile
  4275                           
  4276                           ;USER.c: 92: TRISAbits.TRISA2 = 0;
  4277  001104  9492               	bcf	3986,2,c	;volatile
  4278                           
  4279                           ;USER.c: 95: TRISAbits.TRISA5 = 0;
  4280  001106  9A92               	bcf	3986,5,c	;volatile
  4281                           
  4282                           ;USER.c: 98: TRISBbits.TRISB1 = 1;
  4283  001108  8293               	bsf	3987,1,c	;volatile
  4284                           
  4285                           ;USER.c: 99: TRISBbits.TRISB2 = 1;
  4286  00110A  8493               	bsf	3987,2,c	;volatile
  4287                           
  4288                           ;USER.c: 103: TRISBbits.TRISB3 = 0;
  4289  00110C  9693               	bcf	3987,3,c	;volatile
  4290                           
  4291                           ;USER.c: 106: TRISCbits.TRISC2 = 0;
  4292  00110E  9494               	bcf	3988,2,c	;volatile
  4293                           
  4294                           ;USER.c: 110: TRISCbits.TRISC3 = 1;
  4295  001110  8694               	bsf	3988,3,c	;volatile
  4296                           
  4297                           ;USER.c: 113: TRISCbits.TRISC5 = 0;
  4298  001112  9A94               	bcf	3988,5,c	;volatile
  4299                           
  4300                           ;USER.c: 117: TRISCbits.TRISC4 = 0;
  4301  001114  9894               	bcf	3988,4,c	;volatile
  4302                           
  4303                           ;USER.c: 121: TRISBbits.TRISB0 = 1;
  4304  001116  8093               	bsf	3987,0,c	;volatile
  4305                           
  4306                           ;USER.c: 122: TRISBbits.TRISB4 = 1;
  4307  001118  8893               	bsf	3987,4,c	;volatile
  4308                           
  4309                           ;USER.c: 126: TRISBbits.TRISB5 = 1;
  4310  00111A  8A93               	bsf	3987,5,c	;volatile
  4311                           
  4312                           ;USER.c: 130: TRISAbits.TRISA3 = 1;
  4313  00111C  8692               	bsf	3986,3,c	;volatile
  4314                           
  4315                           ;USER.c: 142: TRISCbits.TRISC6 = 0;
  4316  00111E  9C94               	bcf	3988,6,c	;volatile
  4317                           
  4318                           ;USER.c: 143: TRISCbits.TRISC7 = 0;
  4319  001120  9E94               	bcf	3988,7,c	;volatile
  4320  001122  0012               	return		;funcret
  4321  001124                     __end_of_Init_App:
  4322                           	opt stack 0
  4323                           tblptru	equ	0xFF8
  4324                           tblptrh	equ	0xFF7
  4325                           tblptrl	equ	0xFF6
  4326                           tablat	equ	0xFF5
  4327                           intcon	equ	0xFF2
  4328                           intcon2	equ	0xFF1
  4329                           intcon3	equ	0xFF0
  4330                           postinc0	equ	0xFEE
  4331                           wreg	equ	0xFE8
  4332                           postinc2	equ	0xFDE
  4333                           postdec2	equ	0xFDD
  4334                           fsr2h	equ	0xFDA
  4335                           fsr2l	equ	0xFD9
  4336                           status	equ	0xFD8
  4337                           
  4338 ;; *************** function _low_isr *****************
  4339 ;; Defined at:
  4340 ;;		line 123 in file "INTERRUPTS.c"
  4341 ;; Parameters:    Size  Location     Type
  4342 ;;		None
  4343 ;; Auto vars:     Size  Location     Type
  4344 ;;  button_state    1   21[COMRAM] unsigned char 
  4345 ;; Return value:  Size  Location     Type
  4346 ;;		None               void
  4347 ;; Registers used:
  4348 ;;		wreg, status,2, status,0, cstack
  4349 ;; Tracked objects:
  4350 ;;		On entry : 0/0
  4351 ;;		On exit  : 0/0
  4352 ;;		Unchanged: 0/0
  4353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4354 ;;      Params:         0       0       0       0       0
  4355 ;;      Locals:         1       0       0       0       0
  4356 ;;      Temps:         17       0       0       0       0
  4357 ;;      Totals:        18       0       0       0       0
  4358 ;;Total ram usage:       18 bytes
  4359 ;; Hardware stack levels used:    1
  4360 ;; Hardware stack levels required when called:    7
  4361 ;; This function calls:
  4362 ;;		_IR_ReadReceiver
  4363 ;;		_TMR_Timer2Start
  4364 ;;		i1_BUT_ReadButton
  4365 ;;		i1_TMR_Timer2
  4366 ;; This function is called by:
  4367 ;;		Interrupt level 1
  4368 ;; This function uses a non-reentrant model
  4369 ;;
  4370                           
  4371                           	psect	intcodelo
  4372  000018                     __pintcodelo:
  4373                           	opt stack 0
  4374  000018                     _low_isr:
  4375                           	opt stack 18
  4376                           
  4377                           ;incstack = 0
  4378  000018  CFD8 F005          	movff	status,??_low_isr
  4379  00001C  CFE8 F006          	movff	wreg,??_low_isr+1
  4380  000020  CFE0 F007          	movff	bsr,??_low_isr+2
  4381  000024  CFFA F008          	movff	pclath,??_low_isr+3
  4382  000028  CFFB F009          	movff	pclatu,??_low_isr+4
  4383  00002C  CFE9 F00A          	movff	fsr0l,??_low_isr+5
  4384  000030  CFEA F00B          	movff	fsr0h,??_low_isr+6
  4385  000034  CFE1 F00C          	movff	fsr1l,??_low_isr+7
  4386  000038  CFE2 F00D          	movff	fsr1h,??_low_isr+8
  4387  00003C  CFD9 F00E          	movff	fsr2l,??_low_isr+9
  4388  000040  CFDA F00F          	movff	fsr2h,??_low_isr+10
  4389  000044  CFF3 F010          	movff	prodl,??_low_isr+11
  4390  000048  CFF4 F011          	movff	prodh,??_low_isr+12
  4391  00004C  CFF6 F012          	movff	tblptrl,??_low_isr+13
  4392  000050  CFF7 F013          	movff	tblptrh,??_low_isr+14
  4393  000054  CFF8 F014          	movff	tblptru,??_low_isr+15
  4394  000058  CFF5 F015          	movff	tablat,??_low_isr+16
  4395                           
  4396                           ;INTERRUPTS.c: 125: unsigned char button_state;
  4397                           ;INTERRUPTS.c: 127: if(INTCONbits.RBIF)
  4398  00005C  A0F2               	btfss	intcon,0,c	;volatile
  4399  00005E  D034               	goto	i1l134
  4400                           
  4401                           ;INTERRUPTS.c: 128: {
  4402                           ;INTERRUPTS.c: 133: button_state = BUT_ReadButton();
  4403  000060  ECCB  F008         	call	i1_BUT_ReadButton	;wreg free
  4404  000064  6E16               	movwf	low_isr@button_state,c
  4405                           
  4406                           ;INTERRUPTS.c: 134: if(ButtonChange)
  4407  000066  5052               	movf	_ButtonChange,w,c
  4408  000068  B4D8               	btfsc	status,2,c
  4409  00006A  D029               	goto	i1l3899
  4410                           
  4411                           ;INTERRUPTS.c: 135: {
  4412                           ;INTERRUPTS.c: 136: TMR_Timer2(0);
  4413  00006C  0E00               	movlw	0
  4414  00006E  EC0B  F00A         	call	i1_TMR_Timer2
  4415                           
  4416                           ;INTERRUPTS.c: 139: if(button_state)
  4417  000072  5016               	movf	low_isr@button_state,w,c
  4418  000074  B4D8               	btfsc	status,2,c
  4419  000076  D00E               	goto	i1l3889
  4420                           
  4421                           ;INTERRUPTS.c: 140: {
  4422                           ;INTERRUPTS.c: 142: if(System_State == 8)
  4423  000078  0E08               	movlw	8
  4424  00007A  0100               	movlb	0	; () banked
  4425  00007C  199D               	xorwf	_System_State& (0+255),w,b
  4426  00007E  A4D8               	btfss	status,2,c
  4427  000080  D01B               	goto	i1l3897
  4428                           
  4429                           ; BSR set to: 0
  4430                           ;INTERRUPTS.c: 143: {
  4431                           ;INTERRUPTS.c: 144: Timer2Use = 17;
  4432  000082  0E11               	movlw	17
  4433  000084  6E56               	movwf	_Timer2Use,c
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;INTERRUPTS.c: 145: TMR_Timer2Start(100);
  4437  000086  0E00               	movlw	0
  4438  000088  6E04               	movwf	TMR_Timer2Start@time+1,c
  4439  00008A  0E64               	movlw	100
  4440  00008C  6E03               	movwf	TMR_Timer2Start@time,c
  4441  00008E  EC92  F009         	call	_TMR_Timer2Start	;wreg free
  4442                           
  4443                           ;INTERRUPTS.c: 146: }
  4444                           ;INTERRUPTS.c: 147: }
  4445  000092  D012               	goto	i1l3897
  4446  000094                     i1l3889:
  4447                           
  4448                           ;INTERRUPTS.c: 148: else
  4449                           ;INTERRUPTS.c: 149: {
  4450                           ;INTERRUPTS.c: 150: if(System_State != 10)
  4451  000094  0E0A               	movlw	10
  4452  000096  0100               	movlb	0	; () banked
  4453  000098  199D               	xorwf	_System_State& (0+255),w,b
  4454  00009A  B4D8               	btfsc	status,2,c
  4455  00009C  D004               	goto	i1l3893
  4456                           
  4457                           ; BSR set to: 0
  4458                           ;INTERRUPTS.c: 151: {
  4459                           ;INTERRUPTS.c: 153: Button_Data = 1;
  4460  00009E  0E01               	movlw	1
  4461  0000A0  0100               	movlb	0	; () banked
  4462  0000A2  6F96               	movwf	_Button_Data& (0+255),b	;volatile
  4463                           
  4464                           ;INTERRUPTS.c: 154: }
  4465  0000A4  D009               	goto	i1l3897
  4466  0000A6                     i1l3893:
  4467                           
  4468                           ; BSR set to: 0
  4469                           ;INTERRUPTS.c: 155: else
  4470                           ;INTERRUPTS.c: 156: {
  4471                           ;INTERRUPTS.c: 157: Timer2Use = 18;
  4472  0000A6  0E12               	movlw	18
  4473  0000A8  6E56               	movwf	_Timer2Use,c
  4474                           
  4475                           ; BSR set to: 0
  4476                           ;INTERRUPTS.c: 158: TMR_Timer2Start(70);
  4477  0000AA  0E00               	movlw	0
  4478  0000AC  6E04               	movwf	TMR_Timer2Start@time+1,c
  4479  0000AE  0E46               	movlw	70
  4480  0000B0  6E03               	movwf	TMR_Timer2Start@time,c
  4481  0000B2  EC92  F009         	call	_TMR_Timer2Start	;wreg free
  4482  0000B6  D000               	goto	i1l3897
  4483  0000B8                     i1l3897:
  4484                           
  4485                           ;INTERRUPTS.c: 159: }
  4486                           ;INTERRUPTS.c: 160: }
  4487                           ;INTERRUPTS.c: 161: ButtonChange = 0;
  4488  0000B8  0E00               	movlw	0
  4489  0000BA  6E52               	movwf	_ButtonChange,c
  4490                           
  4491                           ;INTERRUPTS.c: 162: }
  4492  0000BC  D003               	goto	i1l3901
  4493  0000BE                     i1l3899:
  4494                           
  4495                           ;INTERRUPTS.c: 163: else
  4496                           ;INTERRUPTS.c: 164: {
  4497                           ;INTERRUPTS.c: 165: IR_ReadReceiver();
  4498  0000BE  EC3C  F00A         	call	_IR_ReadReceiver	;wreg free
  4499  0000C2  D000               	goto	i1l3901
  4500  0000C4                     i1l3901:
  4501                           
  4502                           ;INTERRUPTS.c: 166: }
  4503                           ;INTERRUPTS.c: 167: INTCONbits.RBIF = 0;
  4504  0000C4  90F2               	bcf	intcon,0,c	;volatile
  4505                           
  4506                           ;INTERRUPTS.c: 168: }
  4507  0000C6  D023               	goto	i1l150
  4508  0000C8                     i1l134:
  4509                           
  4510                           ;INTERRUPTS.c: 169: else if(PIR1bits.TMR2IF)
  4511  0000C8  A29E               	btfss	3998,1,c	;volatile
  4512  0000CA  D01F               	goto	i1l143
  4513                           
  4514                           ;INTERRUPTS.c: 170: {
  4515                           ;INTERRUPTS.c: 172: if(Timer2PostCount >= Timer2Post)
  4516  0000CC  504C               	movf	_Timer2Post,w,c
  4517  0000CE  5C4E               	subwf	_Timer2PostCount,w,c
  4518  0000D0  504D               	movf	_Timer2Post+1,w,c
  4519  0000D2  584F               	subwfb	_Timer2PostCount+1,w,c
  4520  0000D4  A0D8               	btfss	status,0,c
  4521  0000D6  D014               	goto	i1l3915
  4522                           
  4523                           ;INTERRUPTS.c: 173: {
  4524                           ;INTERRUPTS.c: 174: TMR_Timer2(0);
  4525  0000D8  0E00               	movlw	0
  4526  0000DA  EC0B  F00A         	call	i1_TMR_Timer2
  4527                           
  4528                           ;INTERRUPTS.c: 175: if(Timer2Use == 17)
  4529  0000DE  0E11               	movlw	17
  4530  0000E0  1856               	xorwf	_Timer2Use,w,c
  4531  0000E2  A4D8               	btfss	status,2,c
  4532  0000E4  D002               	goto	i1l3911
  4533                           
  4534                           ;INTERRUPTS.c: 176: {
  4535                           ;INTERRUPTS.c: 178: System_State = 10;
  4536  0000E6  0E0A               	movlw	10
  4537  0000E8  D005               	goto	L2
  4538  0000EA                     i1l3911:
  4539                           
  4540                           ;INTERRUPTS.c: 181: else if(Timer2Use == 18)
  4541  0000EA  0E12               	movlw	18
  4542  0000EC  1856               	xorwf	_Timer2Use,w,c
  4543  0000EE  A4D8               	btfss	status,2,c
  4544  0000F0  D00A               	goto	i1l3917
  4545                           
  4546                           ;INTERRUPTS.c: 182: {
  4547                           ;INTERRUPTS.c: 183: System_State = 8;
  4548  0000F2  0E08               	movlw	8
  4549  0000F4                     L2:
  4550  0000F4  0100               	movlb	0	; () banked
  4551  0000F6  6F9D               	movwf	_System_State& (0+255),b
  4552                           
  4553                           ;INTERRUPTS.c: 184: System_State_Change = 1;
  4554  0000F8  0E01               	movlw	1
  4555  0000FA  0100               	movlb	0	; () banked
  4556  0000FC  6F9A               	movwf	_System_State_Change& (0+255),b
  4557                           
  4558                           ; BSR set to: 0
  4559                           ;INTERRUPTS.c: 185: }
  4560                           ;INTERRUPTS.c: 186: }
  4561                           
  4562                           ; BSR set to: 0
  4563  0000FE  D003               	goto	i1l3917
  4564  000100                     i1l3915:
  4565                           
  4566                           ;INTERRUPTS.c: 187: else
  4567                           ;INTERRUPTS.c: 188: {
  4568                           ;INTERRUPTS.c: 189: Timer2PostCount++;
  4569  000100  4A4E               	infsnz	_Timer2PostCount,f,c
  4570  000102  2A4F               	incf	_Timer2PostCount+1,f,c
  4571  000104  D000               	goto	i1l3917
  4572  000106                     i1l3917:
  4573                           
  4574                           ;INTERRUPTS.c: 190: }
  4575                           ;INTERRUPTS.c: 191: PIR1bits.TMR2IF = 0;
  4576  000106  929E               	bcf	3998,1,c	;volatile
  4577                           
  4578                           ;INTERRUPTS.c: 192: }
  4579  000108  D002               	goto	i1l150
  4580  00010A                     i1l143:
  4581                           
  4582                           ;INTERRUPTS.c: 193: else
  4583                           ;INTERRUPTS.c: 194: {
  4584                           ;INTERRUPTS.c: 196: __nop();
  4585  00010A  F000               	nop	
  4586  00010C  D000               	goto	i1l150
  4587  00010E                     i1l150:
  4588  00010E  C015  FFF5         	movff	??_low_isr+16,tablat
  4589  000112  C014  FFF8         	movff	??_low_isr+15,tblptru
  4590  000116  C013  FFF7         	movff	??_low_isr+14,tblptrh
  4591  00011A  C012  FFF6         	movff	??_low_isr+13,tblptrl
  4592  00011E  C011  FFF4         	movff	??_low_isr+12,prodh
  4593  000122  C010  FFF3         	movff	??_low_isr+11,prodl
  4594  000126  C00F  FFDA         	movff	??_low_isr+10,fsr2h
  4595  00012A  C00E  FFD9         	movff	??_low_isr+9,fsr2l
  4596  00012E  C00D  FFE2         	movff	??_low_isr+8,fsr1h
  4597  000132  C00C  FFE1         	movff	??_low_isr+7,fsr1l
  4598  000136  C00B  FFEA         	movff	??_low_isr+6,fsr0h
  4599  00013A  C00A  FFE9         	movff	??_low_isr+5,fsr0l
  4600  00013E  C009  FFFB         	movff	??_low_isr+4,pclatu
  4601  000142  C008  FFFA         	movff	??_low_isr+3,pclath
  4602  000146  C007  FFE0         	movff	??_low_isr+2,bsr
  4603  00014A  C006  FFE8         	movff	??_low_isr+1,wreg
  4604  00014E  C005  FFD8         	movff	??_low_isr,status
  4605  000152  0010               	retfie	
  4606  000154                     __end_of_low_isr:
  4607                           	opt stack 0
  4608                           pclatu	equ	0xFFB
  4609                           pclath	equ	0xFFA
  4610                           tblptru	equ	0xFF8
  4611                           tblptrh	equ	0xFF7
  4612                           tblptrl	equ	0xFF6
  4613                           tablat	equ	0xFF5
  4614                           prodh	equ	0xFF4
  4615                           prodl	equ	0xFF3
  4616                           intcon	equ	0xFF2
  4617                           intcon2	equ	0xFF1
  4618                           intcon3	equ	0xFF0
  4619                           postinc0	equ	0xFEE
  4620                           fsr0h	equ	0xFEA
  4621                           fsr0l	equ	0xFE9
  4622                           wreg	equ	0xFE8
  4623                           fsr1h	equ	0xFE2
  4624                           fsr1l	equ	0xFE1
  4625                           bsr	equ	0xFE0
  4626                           postinc2	equ	0xFDE
  4627                           postdec2	equ	0xFDD
  4628                           fsr2h	equ	0xFDA
  4629                           fsr2l	equ	0xFD9
  4630                           status	equ	0xFD8
  4631                           
  4632 ;; *************** function i1_BUT_ReadButton *****************
  4633 ;; Defined at:
  4634 ;;		line 90 in file "BUTTON.c"
  4635 ;; Parameters:    Size  Location     Type
  4636 ;;		None
  4637 ;; Auto vars:     Size  Location     Type
  4638 ;;  BUT_ReadButt    1    0[COMRAM] unsigned char 
  4639 ;; Return value:  Size  Location     Type
  4640 ;;                  1    wreg      unsigned char 
  4641 ;; Registers used:
  4642 ;;		wreg, status,2, status,0
  4643 ;; Tracked objects:
  4644 ;;		On entry : 0/0
  4645 ;;		On exit  : 0/0
  4646 ;;		Unchanged: 0/0
  4647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4648 ;;      Params:         0       0       0       0       0
  4649 ;;      Locals:         1       0       0       0       0
  4650 ;;      Temps:          0       0       0       0       0
  4651 ;;      Totals:         1       0       0       0       0
  4652 ;;Total ram usage:        1 bytes
  4653 ;; Hardware stack levels used:    1
  4654 ;; Hardware stack levels required when called:    4
  4655 ;; This function calls:
  4656 ;;		Nothing
  4657 ;; This function is called by:
  4658 ;;		_low_isr
  4659 ;; This function uses a non-reentrant model
  4660 ;;
  4661                           
  4662                           	psect	text36
  4663  001196                     __ptext36:
  4664                           	opt stack 0
  4665  001196                     i1_BUT_ReadButton:
  4666                           	opt stack 20
  4667                           
  4668                           ;BUTTON.c: 92: unsigned char value = PORTB;
  4669                           
  4670                           ;incstack = 0
  4671  001196  CF81 F001          	movff	3969,i1BUT_ReadButton@value	;volatile
  4672                           
  4673                           ;BUTTON.c: 93: if((value & 0x20) == 0)
  4674  00119A  BA01               	btfsc	i1BUT_ReadButton@value,5,c
  4675  00119C  D00B               	goto	i1l3757
  4676                           
  4677                           ;BUTTON.c: 94: {
  4678                           ;BUTTON.c: 96: if(ButtonValue_prev == 0)
  4679  00119E  0100               	movlb	0	; () banked
  4680  0011A0  519B               	movf	_ButtonValue_prev& (0+255),w,b
  4681  0011A2  A4D8               	btfss	status,2,c
  4682  0011A4  D002               	goto	i1l744
  4683                           
  4684                           ; BSR set to: 0
  4685                           ;BUTTON.c: 97: {
  4686                           ;BUTTON.c: 98: ButtonChange = 1;
  4687  0011A6  0E01               	movlw	1
  4688  0011A8  6E52               	movwf	_ButtonChange,c
  4689  0011AA                     i1l744:
  4690                           
  4691                           ; BSR set to: 0
  4692                           ;BUTTON.c: 99: }
  4693                           ;BUTTON.c: 100: ButtonValue_prev = 1;
  4694  0011AA  0E01               	movlw	1
  4695  0011AC  0100               	movlb	0	; () banked
  4696  0011AE  6F9B               	movwf	_ButtonValue_prev& (0+255),b
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;BUTTON.c: 101: return 1;
  4700  0011B0  0E01               	movlw	1
  4701                           
  4702                           ; BSR set to: 0
  4703  0011B2  0012               	return	
  4704  0011B4                     i1l3757:
  4705                           
  4706                           ;BUTTON.c: 102: }
  4707                           ;BUTTON.c: 105: if(ButtonValue_prev == 1)
  4708  0011B4  0100               	movlb	0	; () banked
  4709  0011B6  059B               	decf	_ButtonValue_prev& (0+255),w,b
  4710  0011B8  A4D8               	btfss	status,2,c
  4711  0011BA  D002               	goto	i1l746
  4712                           
  4713                           ; BSR set to: 0
  4714                           ;BUTTON.c: 106: {
  4715                           ;BUTTON.c: 107: ButtonChange = 1;
  4716  0011BC  0E01               	movlw	1
  4717  0011BE  6E52               	movwf	_ButtonChange,c
  4718  0011C0                     i1l746:
  4719                           
  4720                           ; BSR set to: 0
  4721                           ;BUTTON.c: 108: }
  4722                           ;BUTTON.c: 109: ButtonValue_prev = 0;
  4723  0011C0  0E00               	movlw	0
  4724  0011C2  0100               	movlb	0	; () banked
  4725  0011C4  6F9B               	movwf	_ButtonValue_prev& (0+255),b
  4726                           
  4727                           ; BSR set to: 0
  4728                           ;BUTTON.c: 110: return 0;
  4729  0011C6  0E00               	movlw	0
  4730  0011C8  0012               	return	
  4731                           
  4732                           ; BSR set to: 0
  4733                           
  4734                           ; BSR set to: 0
  4735  0011CA  0012               	return		;funcret
  4736  0011CC                     __end_ofi1_BUT_ReadButton:
  4737                           	opt stack 0
  4738                           pclatu	equ	0xFFB
  4739                           pclath	equ	0xFFA
  4740                           tblptru	equ	0xFF8
  4741                           tblptrh	equ	0xFF7
  4742                           tblptrl	equ	0xFF6
  4743                           tablat	equ	0xFF5
  4744                           prodh	equ	0xFF4
  4745                           prodl	equ	0xFF3
  4746                           intcon	equ	0xFF2
  4747                           intcon2	equ	0xFF1
  4748                           intcon3	equ	0xFF0
  4749                           postinc0	equ	0xFEE
  4750                           fsr0h	equ	0xFEA
  4751                           fsr0l	equ	0xFE9
  4752                           wreg	equ	0xFE8
  4753                           fsr1h	equ	0xFE2
  4754                           fsr1l	equ	0xFE1
  4755                           bsr	equ	0xFE0
  4756                           postinc2	equ	0xFDE
  4757                           postdec2	equ	0xFDD
  4758                           fsr2h	equ	0xFDA
  4759                           fsr2l	equ	0xFD9
  4760                           status	equ	0xFD8
  4761                           
  4762 ;; *************** function _TMR_Timer2Start *****************
  4763 ;; Defined at:
  4764 ;;		line 266 in file "TIMERS.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;  time            2    2[COMRAM] unsigned int 
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;		None
  4769 ;; Return value:  Size  Location     Type
  4770 ;;		None               void
  4771 ;; Registers used:
  4772 ;;		wreg, status,2, cstack
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4778 ;;      Params:         2       0       0       0       0
  4779 ;;      Locals:         0       0       0       0       0
  4780 ;;      Temps:          0       0       0       0       0
  4781 ;;      Totals:         2       0       0       0       0
  4782 ;;Total ram usage:        2 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    6
  4785 ;; This function calls:
  4786 ;;		_TMR_ResetTimer2
  4787 ;;		i1_TMR_Timer2
  4788 ;; This function is called by:
  4789 ;;		_low_isr
  4790 ;; This function uses a non-reentrant model
  4791 ;;
  4792                           
  4793                           	psect	text37
  4794  001324                     __ptext37:
  4795                           	opt stack 0
  4796  001324                     _TMR_Timer2Start:
  4797                           	opt stack 18
  4798                           
  4799                           ;TIMERS.c: 268: TMR_Timer2(0);
  4800                           
  4801                           ; BSR set to: 0
  4802                           ;incstack = 0
  4803  001324  0E00               	movlw	0
  4804  001326  EC0B  F00A         	call	i1_TMR_Timer2
  4805                           
  4806                           ;TIMERS.c: 269: Timer2Post = time;
  4807  00132A  C003  F04C         	movff	TMR_Timer2Start@time,_Timer2Post
  4808  00132E  C004  F04D         	movff	TMR_Timer2Start@time+1,_Timer2Post+1
  4809                           
  4810                           ;TIMERS.c: 270: TMR_ResetTimer2();
  4811  001332  EC29  F009         	call	_TMR_ResetTimer2	;wreg free
  4812                           
  4813                           ;TIMERS.c: 271: TMR_Timer2(1);
  4814  001336  0E01               	movlw	1
  4815  001338  EC0B  F00A         	call	i1_TMR_Timer2
  4816  00133C  0012               	return		;funcret
  4817  00133E                     __end_of_TMR_Timer2Start:
  4818                           	opt stack 0
  4819                           pclatu	equ	0xFFB
  4820                           pclath	equ	0xFFA
  4821                           tblptru	equ	0xFF8
  4822                           tblptrh	equ	0xFF7
  4823                           tblptrl	equ	0xFF6
  4824                           tablat	equ	0xFF5
  4825                           prodh	equ	0xFF4
  4826                           prodl	equ	0xFF3
  4827                           intcon	equ	0xFF2
  4828                           intcon2	equ	0xFF1
  4829                           intcon3	equ	0xFF0
  4830                           postinc0	equ	0xFEE
  4831                           fsr0h	equ	0xFEA
  4832                           fsr0l	equ	0xFE9
  4833                           wreg	equ	0xFE8
  4834                           fsr1h	equ	0xFE2
  4835                           fsr1l	equ	0xFE1
  4836                           bsr	equ	0xFE0
  4837                           postinc2	equ	0xFDE
  4838                           postdec2	equ	0xFDD
  4839                           fsr2h	equ	0xFDA
  4840                           fsr2l	equ	0xFD9
  4841                           status	equ	0xFD8
  4842                           
  4843 ;; *************** function _TMR_ResetTimer2 *****************
  4844 ;; Defined at:
  4845 ;;		line 127 in file "TIMERS.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;		None
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  TimerOn         1    1[COMRAM] unsigned char 
  4850 ;; Return value:  Size  Location     Type
  4851 ;;		None               void
  4852 ;; Registers used:
  4853 ;;		wreg, status,2, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : 0/0
  4856 ;;		On exit  : 0/0
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4859 ;;      Params:         0       0       0       0       0
  4860 ;;      Locals:         1       0       0       0       0
  4861 ;;      Temps:          0       0       0       0       0
  4862 ;;      Totals:         1       0       0       0       0
  4863 ;;Total ram usage:        1 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:    5
  4866 ;; This function calls:
  4867 ;;		i1_TMR_Timer2
  4868 ;; This function is called by:
  4869 ;;		_TMR_Timer2Start
  4870 ;; This function uses a non-reentrant model
  4871 ;;
  4872                           
  4873                           	psect	text38
  4874  001252                     __ptext38:
  4875                           	opt stack 0
  4876  001252                     _TMR_ResetTimer2:
  4877                           	opt stack 18
  4878                           
  4879                           ;TIMERS.c: 129: unsigned char TimerOn = T2CONbits.TMR2ON;
  4880                           
  4881                           ;incstack = 0
  4882  001252  0E00               	movlw	0
  4883  001254  B4CA               	btfsc	4042,2,c	;volatile
  4884  001256  0E01               	movlw	1
  4885  001258  6E02               	movwf	TMR_ResetTimer2@TimerOn,c
  4886                           
  4887                           ;TIMERS.c: 131: TMR_Timer2(0);
  4888  00125A  0E00               	movlw	0
  4889  00125C  EC0B  F00A         	call	i1_TMR_Timer2
  4890                           
  4891                           ;TIMERS.c: 132: Timer2PostCount = 0;
  4892  001260  0E00               	movlw	0
  4893  001262  6E4F               	movwf	_Timer2PostCount+1,c
  4894  001264  0E00               	movlw	0
  4895  001266  6E4E               	movwf	_Timer2PostCount,c
  4896                           
  4897                           ;TIMERS.c: 133: TMR2 = 0;
  4898  001268  0E00               	movlw	0
  4899  00126A  6ECC               	movwf	4044,c	;volatile
  4900                           
  4901                           ;TIMERS.c: 134: if(TimerOn)
  4902  00126C  5002               	movf	TMR_ResetTimer2@TimerOn,w,c
  4903  00126E  B4D8               	btfsc	status,2,c
  4904  001270  0012               	return	
  4905                           
  4906                           ;TIMERS.c: 135: {
  4907                           ;TIMERS.c: 136: TMR_Timer2(1);
  4908  001272  0E01               	movlw	1
  4909  001274  EC0B  F00A         	call	i1_TMR_Timer2
  4910  001278  0012               	return	
  4911  00127A  0012               	return		;funcret
  4912  00127C                     __end_of_TMR_ResetTimer2:
  4913                           	opt stack 0
  4914                           pclatu	equ	0xFFB
  4915                           pclath	equ	0xFFA
  4916                           tblptru	equ	0xFF8
  4917                           tblptrh	equ	0xFF7
  4918                           tblptrl	equ	0xFF6
  4919                           tablat	equ	0xFF5
  4920                           prodh	equ	0xFF4
  4921                           prodl	equ	0xFF3
  4922                           intcon	equ	0xFF2
  4923                           intcon2	equ	0xFF1
  4924                           intcon3	equ	0xFF0
  4925                           postinc0	equ	0xFEE
  4926                           fsr0h	equ	0xFEA
  4927                           fsr0l	equ	0xFE9
  4928                           wreg	equ	0xFE8
  4929                           fsr1h	equ	0xFE2
  4930                           fsr1l	equ	0xFE1
  4931                           bsr	equ	0xFE0
  4932                           postinc2	equ	0xFDE
  4933                           postdec2	equ	0xFDD
  4934                           fsr2h	equ	0xFDA
  4935                           fsr2l	equ	0xFD9
  4936                           status	equ	0xFD8
  4937                           
  4938 ;; *************** function i1_TMR_Timer2 *****************
  4939 ;; Defined at:
  4940 ;;		line 90 in file "TIMERS.c"
  4941 ;; Parameters:    Size  Location     Type
  4942 ;;  state           1    wreg     unsigned char 
  4943 ;; Auto vars:     Size  Location     Type
  4944 ;;  state           1    0[COMRAM] unsigned char 
  4945 ;; Return value:  Size  Location     Type
  4946 ;;		None               void
  4947 ;; Registers used:
  4948 ;;		wreg, status,2
  4949 ;; Tracked objects:
  4950 ;;		On entry : 0/0
  4951 ;;		On exit  : 0/0
  4952 ;;		Unchanged: 0/0
  4953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4954 ;;      Params:         0       0       0       0       0
  4955 ;;      Locals:         1       0       0       0       0
  4956 ;;      Temps:          0       0       0       0       0
  4957 ;;      Totals:         1       0       0       0       0
  4958 ;;Total ram usage:        1 bytes
  4959 ;; Hardware stack levels used:    1
  4960 ;; Hardware stack levels required when called:    4
  4961 ;; This function calls:
  4962 ;;		Nothing
  4963 ;; This function is called by:
  4964 ;;		_low_isr
  4965 ;;		_TMR_ResetTimer2
  4966 ;;		_TMR_Timer2Start
  4967 ;; This function uses a non-reentrant model
  4968 ;;
  4969                           
  4970                           	psect	text39
  4971  001416                     __ptext39:
  4972                           	opt stack 0
  4973  001416                     i1_TMR_Timer2:
  4974                           	opt stack 20
  4975                           
  4976                           ;incstack = 0
  4977                           ;i1TMR_Timer2@state stored from wreg
  4978  001416  6E01               	movwf	i1TMR_Timer2@state,c
  4979                           
  4980                           ;TIMERS.c: 92: if(state)
  4981  001418  5001               	movf	i1TMR_Timer2@state,w,c
  4982  00141A  B4D8               	btfsc	status,2,c
  4983  00141C  D002               	goto	i1l788
  4984                           
  4985                           ;TIMERS.c: 93: {
  4986                           ;TIMERS.c: 95: T2CONbits.TMR2ON = 1;
  4987  00141E  84CA               	bsf	4042,2,c	;volatile
  4988                           
  4989                           ;TIMERS.c: 96: }
  4990  001420  0012               	return	
  4991  001422                     i1l788:
  4992                           
  4993                           ;TIMERS.c: 97: else
  4994                           ;TIMERS.c: 98: {
  4995                           ;TIMERS.c: 100: T2CONbits.TMR2ON = 0;
  4996  001422  94CA               	bcf	4042,2,c	;volatile
  4997  001424  0012               	return	
  4998  001426  0012               	return		;funcret
  4999  001428                     __end_ofi1_TMR_Timer2:
  5000                           	opt stack 0
  5001                           pclatu	equ	0xFFB
  5002                           pclath	equ	0xFFA
  5003                           tblptru	equ	0xFF8
  5004                           tblptrh	equ	0xFF7
  5005                           tblptrl	equ	0xFF6
  5006                           tablat	equ	0xFF5
  5007                           prodh	equ	0xFF4
  5008                           prodl	equ	0xFF3
  5009                           intcon	equ	0xFF2
  5010                           intcon2	equ	0xFF1
  5011                           intcon3	equ	0xFF0
  5012                           postinc0	equ	0xFEE
  5013                           fsr0h	equ	0xFEA
  5014                           fsr0l	equ	0xFE9
  5015                           wreg	equ	0xFE8
  5016                           fsr1h	equ	0xFE2
  5017                           fsr1l	equ	0xFE1
  5018                           bsr	equ	0xFE0
  5019                           postinc2	equ	0xFDE
  5020                           postdec2	equ	0xFDD
  5021                           fsr2h	equ	0xFDA
  5022                           fsr2l	equ	0xFD9
  5023                           status	equ	0xFD8
  5024                           
  5025 ;; *************** function _IR_ReadReceiver *****************
  5026 ;; Defined at:
  5027 ;;		line 66 in file "IR.c"
  5028 ;; Parameters:    Size  Location     Type
  5029 ;;		None
  5030 ;; Auto vars:     Size  Location     Type
  5031 ;;  value           1    0[COMRAM] unsigned char 
  5032 ;; Return value:  Size  Location     Type
  5033 ;;                  1    wreg      unsigned char 
  5034 ;; Registers used:
  5035 ;;		None
  5036 ;; Tracked objects:
  5037 ;;		On entry : 0/0
  5038 ;;		On exit  : 0/0
  5039 ;;		Unchanged: 0/0
  5040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5041 ;;      Params:         0       0       0       0       0
  5042 ;;      Locals:         1       0       0       0       0
  5043 ;;      Temps:          0       0       0       0       0
  5044 ;;      Totals:         1       0       0       0       0
  5045 ;;Total ram usage:        1 bytes
  5046 ;; Hardware stack levels used:    1
  5047 ;; Hardware stack levels required when called:    4
  5048 ;; This function calls:
  5049 ;;		Nothing
  5050 ;; This function is called by:
  5051 ;;		_low_isr
  5052 ;; This function uses a non-reentrant model
  5053 ;;
  5054                           
  5055                           	psect	text40
  5056  001478                     __ptext40:
  5057                           	opt stack 0
  5058  001478                     _IR_ReadReceiver:
  5059                           	opt stack 20
  5060                           
  5061                           ;IR.c: 70: if(value & 0x10)
  5062                           
  5063                           ;incstack = 0
  5064  001478  CF81 F001          	movff	3969,IR_ReadReceiver@value	;volatile
  5065                           
  5066                           ;IR.c: 71: {
  5067                           ;IR.c: 72: return 1;
  5068                           ;	Return value of _IR_ReadReceiver is never used
  5069  00147C  0012               	return	
  5070                           
  5071                           ;IR.c: 73: }
  5072                           ;IR.c: 74: return 0;
  5073                           ;	Return value of _IR_ReadReceiver is never used
  5074  00147E  0012               	return		;funcret
  5075  001480                     __end_of_IR_ReadReceiver:
  5076                           	opt stack 0
  5077                           pclatu	equ	0xFFB
  5078                           pclath	equ	0xFFA
  5079                           tblptru	equ	0xFF8
  5080                           tblptrh	equ	0xFF7
  5081                           tblptrl	equ	0xFF6
  5082                           tablat	equ	0xFF5
  5083                           prodh	equ	0xFF4
  5084                           prodl	equ	0xFF3
  5085                           intcon	equ	0xFF2
  5086                           intcon2	equ	0xFF1
  5087                           intcon3	equ	0xFF0
  5088                           postinc0	equ	0xFEE
  5089                           fsr0h	equ	0xFEA
  5090                           fsr0l	equ	0xFE9
  5091                           wreg	equ	0xFE8
  5092                           fsr1h	equ	0xFE2
  5093                           fsr1l	equ	0xFE1
  5094                           bsr	equ	0xFE0
  5095                           postinc2	equ	0xFDE
  5096                           postdec2	equ	0xFDD
  5097                           fsr2h	equ	0xFDA
  5098                           fsr2l	equ	0xFD9
  5099                           status	equ	0xFD8
  5100                           
  5101 ;; *************** function _high_isr *****************
  5102 ;; Defined at:
  5103 ;;		line 47 in file "INTERRUPTS.c"
  5104 ;; Parameters:    Size  Location     Type
  5105 ;;		None
  5106 ;; Auto vars:     Size  Location     Type
  5107 ;;  RFtemp          2   69[COMRAM] unsigned int 
  5108 ;; Return value:  Size  Location     Type
  5109 ;;		None               void
  5110 ;; Registers used:
  5111 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5112 ;; Tracked objects:
  5113 ;;		On entry : 0/0
  5114 ;;		On exit  : 0/0
  5115 ;;		Unchanged: 0/0
  5116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5117 ;;      Params:         0       0       0       0       0
  5118 ;;      Locals:         2       0       0       0       0
  5119 ;;      Temps:         14       0       0       0       0
  5120 ;;      Totals:        16       0       0       0       0
  5121 ;;Total ram usage:       16 bytes
  5122 ;; Hardware stack levels used:    1
  5123 ;; Hardware stack levels required when called:    3
  5124 ;; This function calls:
  5125 ;;		_RF_CheckCode
  5126 ;;		_RF_ResetRFData
  5127 ;;		_TMR_Timer0Start
  5128 ;;		_TMR_Timer0Status
  5129 ;;		i2_TMR_ResetTimer0
  5130 ;;		i2_TMR_Timer0
  5131 ;; This function is called by:
  5132 ;;		Interrupt level 2
  5133 ;; This function uses a non-reentrant model
  5134 ;;
  5135                           
  5136                           	psect	intcode
  5137  000008                     __pintcode:
  5138                           	opt stack 0
  5139  000008                     _high_isr:
  5140                           	opt stack 18
  5141                           
  5142                           ;incstack = 0
  5143  000008  CFFA F038          	movff	pclath,??_high_isr
  5144  00000C  CFFB F039          	movff	pclatu,??_high_isr+1
  5145  000010  CFE9 F03A          	movff	fsr0l,??_high_isr+2
  5146  000014  EFF9  F003         	goto	int_func
  5147                           pclatu	equ	0xFFB
  5148                           pclath	equ	0xFFA
  5149                           tblptru	equ	0xFF8
  5150                           tblptrh	equ	0xFF7
  5151                           tblptrl	equ	0xFF6
  5152                           tablat	equ	0xFF5
  5153                           prodh	equ	0xFF4
  5154                           prodl	equ	0xFF3
  5155                           intcon	equ	0xFF2
  5156                           intcon2	equ	0xFF1
  5157                           intcon3	equ	0xFF0
  5158                           postinc0	equ	0xFEE
  5159                           fsr0h	equ	0xFEA
  5160                           fsr0l	equ	0xFE9
  5161                           wreg	equ	0xFE8
  5162                           fsr1h	equ	0xFE2
  5163                           fsr1l	equ	0xFE1
  5164                           bsr	equ	0xFE0
  5165                           postinc2	equ	0xFDE
  5166                           postdec2	equ	0xFDD
  5167                           fsr2h	equ	0xFDA
  5168                           fsr2l	equ	0xFD9
  5169                           status	equ	0xFD8
  5170                           
  5171                           	psect	intcode_body
  5172  0007F2                     __pintcode_body:
  5173                           	opt stack 18
  5174  0007F2                     int_func:
  5175                           	opt stack 18
  5176  0007F2  CFEA F03B          	movff	fsr0h,??_high_isr+3
  5177  0007F6  CFE1 F03C          	movff	fsr1l,??_high_isr+4
  5178  0007FA  CFE2 F03D          	movff	fsr1h,??_high_isr+5
  5179  0007FE  CFD9 F03E          	movff	fsr2l,??_high_isr+6
  5180  000802  CFDA F03F          	movff	fsr2h,??_high_isr+7
  5181  000806  CFF3 F040          	movff	prodl,??_high_isr+8
  5182  00080A  CFF4 F041          	movff	prodh,??_high_isr+9
  5183  00080E  CFF6 F042          	movff	tblptrl,??_high_isr+10
  5184  000812  CFF7 F043          	movff	tblptrh,??_high_isr+11
  5185  000816  CFF8 F044          	movff	tblptru,??_high_isr+12
  5186  00081A  CFF5 F045          	movff	tablat,??_high_isr+13
  5187                           
  5188                           ;INTERRUPTS.c: 49: unsigned int RFtemp = 0;
  5189  00081E  0E00               	movlw	0
  5190  000820  6E47               	movwf	high_isr@RFtemp+1,c
  5191  000822  0E00               	movlw	0
  5192  000824  6E46               	movwf	high_isr@RFtemp,c
  5193                           
  5194                           ;INTERRUPTS.c: 51: if(INTCON3bits.INT1IF || INTCON3bits.INT2IF)
  5195  000826  B0F0               	btfsc	intcon3,0,c	;volatile
  5196  000828  D002               	goto	i2l3829
  5197  00082A  A2F0               	btfss	intcon3,1,c	;volatile
  5198  00082C  D060               	goto	i2l114
  5199  00082E                     i2l3829:
  5200                           
  5201                           ;INTERRUPTS.c: 52: {
  5202                           ;INTERRUPTS.c: 54: if(!TMR_Timer0Status())
  5203  00082E  EC26  F00A         	call	_TMR_Timer0Status	;wreg free
  5204  000832  0900               	iorlw	0
  5205  000834  A4D8               	btfss	status,2,c
  5206  000836  D003               	goto	i2l117
  5207                           
  5208                           ;INTERRUPTS.c: 55: {
  5209                           ;INTERRUPTS.c: 57: TMR_Timer0Start();
  5210  000838  EC14  F00A         	call	_TMR_Timer0Start	;wreg free
  5211                           
  5212                           ;INTERRUPTS.c: 58: }
  5213  00083C  D055               	goto	i2l3865
  5214  00083E                     i2l117:
  5215                           
  5216                           ;INTERRUPTS.c: 59: else
  5217                           ;INTERRUPTS.c: 60: {
  5218                           ;INTERRUPTS.c: 61: RFtemp = TMR0L;
  5219  00083E  CFD6 F046          	movff	4054,high_isr@RFtemp	;volatile
  5220  000842  6A47               	clrf	high_isr@RFtemp+1,c
  5221                           
  5222                           ;INTERRUPTS.c: 62: RFtemp += (unsigned int)TMR0H << 8;
  5223  000844  50D7               	movf	4055,w,c	;volatile
  5224  000846  2647               	addwf	high_isr@RFtemp+1,f,c
  5225                           
  5226                           ;INTERRUPTS.c: 63: if(!RFStarted)
  5227  000848  5053               	movf	_RFStarted,w,c
  5228  00084A  A4D8               	btfss	status,2,c
  5229  00084C  D023               	goto	i2l119
  5230                           
  5231                           ;INTERRUPTS.c: 64: {
  5232                           ;INTERRUPTS.c: 65: if(System_State == 8)
  5233  00084E  0E08               	movlw	8
  5234  000850  0100               	movlb	0	; () banked
  5235  000852  199D               	xorwf	_System_State& (0+255),w,b
  5236  000854  A4D8               	btfss	status,2,c
  5237  000856  D00F               	goto	i2l3843
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;INTERRUPTS.c: 66: {
  5241                           ;INTERRUPTS.c: 67: if(RFtemp >= RF_SyncLow && RFtemp <= RF_SyncHigh)
  5242  000858  504A               	movf	_RF_SyncLow,w,c
  5243  00085A  5C46               	subwf	high_isr@RFtemp,w,c
  5244  00085C  504B               	movf	_RF_SyncLow+1,w,c
  5245  00085E  5847               	subwfb	high_isr@RFtemp+1,w,c
  5246  000860  A0D8               	btfss	status,0,c
  5247  000862  D018               	goto	i2l119
  5248                           
  5249                           ; BSR set to: 0
  5250  000864  5046               	movf	high_isr@RFtemp,w,c
  5251  000866  5C48               	subwf	_RF_SyncHigh,w,c
  5252  000868  5047               	movf	high_isr@RFtemp+1,w,c
  5253  00086A  5849               	subwfb	_RF_SyncHigh+1,w,c
  5254  00086C  A0D8               	btfss	status,0,c
  5255  00086E  D012               	goto	i2l119
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;INTERRUPTS.c: 68: {
  5259                           ;INTERRUPTS.c: 69: RFStarted = 1;
  5260  000870  0E01               	movlw	1
  5261  000872  6E53               	movwf	_RFStarted,c
  5262                           
  5263                           ; BSR set to: 0
  5264                           ;INTERRUPTS.c: 70: }
  5265                           ;INTERRUPTS.c: 71: }
  5266  000874  D00F               	goto	i2l119
  5267  000876                     i2l3843:
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;INTERRUPTS.c: 72: else
  5271                           ;INTERRUPTS.c: 73: {
  5272                           ;INTERRUPTS.c: 74: if(RFtemp >= 400 && RFtemp <= 1000)
  5273  000876  0E90               	movlw	144
  5274  000878  5C46               	subwf	high_isr@RFtemp,w,c
  5275  00087A  0E01               	movlw	1
  5276  00087C  5847               	subwfb	high_isr@RFtemp+1,w,c
  5277  00087E  A0D8               	btfss	status,0,c
  5278  000880  D009               	goto	i2l119
  5279                           
  5280                           ; BSR set to: 0
  5281  000882  0EE9               	movlw	233
  5282  000884  5C46               	subwf	high_isr@RFtemp,w,c
  5283  000886  0E03               	movlw	3
  5284  000888  5847               	subwfb	high_isr@RFtemp+1,w,c
  5285  00088A  B0D8               	btfsc	status,0,c
  5286  00088C  D003               	goto	i2l119
  5287                           
  5288                           ; BSR set to: 0
  5289                           ;INTERRUPTS.c: 75: {
  5290                           ;INTERRUPTS.c: 76: RFStarted = 1;
  5291  00088E  0E01               	movlw	1
  5292  000890  6E53               	movwf	_RFStarted,c
  5293                           
  5294                           ; BSR set to: 0
  5295  000892  D000               	goto	i2l119
  5296  000894                     i2l119:
  5297                           
  5298                           ;INTERRUPTS.c: 77: }
  5299                           ;INTERRUPTS.c: 78: }
  5300                           ;INTERRUPTS.c: 79: }
  5301                           ;INTERRUPTS.c: 80: if(RFStarted)
  5302  000894  5053               	movf	_RFStarted,w,c
  5303  000896  B4D8               	btfsc	status,2,c
  5304  000898  D024               	goto	i2l124
  5305                           
  5306                           ;INTERRUPTS.c: 81: {
  5307                           ;INTERRUPTS.c: 82: if(RF_DataPlace < 120)
  5308  00089A  0E78               	movlw	120
  5309  00089C  6055               	cpfslt	_RF_DataPlace,c
  5310  00089E  D01B               	goto	i2l3863
  5311                           
  5312                           ;INTERRUPTS.c: 83: {
  5313                           ;INTERRUPTS.c: 84: RF_DataTiming[RF_DataPlace] = RFtemp;
  5314  0008A0  5055               	movf	_RF_DataPlace,w,c
  5315  0008A2  0D02               	mullw	2
  5316  0008A4  0E00               	movlw	low _RF_DataTiming
  5317  0008A6  24F3               	addwf	prodl,w,c
  5318  0008A8  6ED9               	movwf	fsr2l,c
  5319  0008AA  0E01               	movlw	high _RF_DataTiming
  5320  0008AC  20F4               	addwfc	prodh,w,c
  5321  0008AE  6EDA               	movwf	fsr2h,c
  5322  0008B0  C046  FFDE         	movff	high_isr@RFtemp,postinc2
  5323  0008B4  C047  FFDD         	movff	high_isr@RFtemp+1,postdec2
  5324                           
  5325                           ;INTERRUPTS.c: 85: RF_DataPlace++;
  5326  0008B8  2A55               	incf	_RF_DataPlace,f,c
  5327                           
  5328                           ;INTERRUPTS.c: 86: if(RF_DataPlace >= RF_CodeSize)
  5329  0008BA  5054               	movf	_RF_CodeSize,w,c
  5330  0008BC  5C55               	subwf	_RF_DataPlace,w,c
  5331  0008BE  A0D8               	btfss	status,0,c
  5332  0008C0  D010               	goto	i2l124
  5333                           
  5334                           ;INTERRUPTS.c: 87: {
  5335                           ;INTERRUPTS.c: 88: RF_Data = RF_CheckCode();
  5336  0008C2  EC54  F002         	call	_RF_CheckCode	;wreg free
  5337  0008C6  0100               	movlb	0	; () banked
  5338  0008C8  6F99               	movwf	_RF_Data& (0+255),b	;volatile
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;INTERRUPTS.c: 89: TMR_Timer0(0);
  5342  0008CA  0E00               	movlw	0
  5343  0008CC  EC1D  F00A         	call	i2_TMR_Timer0
  5344                           
  5345                           ;INTERRUPTS.c: 90: RF_ResetRFData();
  5346  0008D0  EC37  F00A         	call	_RF_ResetRFData	;wreg free
  5347                           
  5348                           ;INTERRUPTS.c: 91: }
  5349                           ;INTERRUPTS.c: 92: }
  5350  0008D4  D006               	goto	i2l124
  5351  0008D6                     i2l3863:
  5352                           
  5353                           ;INTERRUPTS.c: 93: else
  5354                           ;INTERRUPTS.c: 94: {
  5355                           ;INTERRUPTS.c: 96: TMR_Timer0(0);
  5356  0008D6  0E00               	movlw	0
  5357  0008D8  EC1D  F00A         	call	i2_TMR_Timer0
  5358                           
  5359                           ;INTERRUPTS.c: 97: RF_ResetRFData();
  5360  0008DC  EC37  F00A         	call	_RF_ResetRFData	;wreg free
  5361  0008E0  D000               	goto	i2l124
  5362  0008E2                     i2l124:
  5363                           
  5364                           ;INTERRUPTS.c: 98: }
  5365                           ;INTERRUPTS.c: 99: }
  5366                           ;INTERRUPTS.c: 100: TMR_ResetTimer0();
  5367  0008E2  EC3E  F009         	call	i2_TMR_ResetTimer0	;wreg free
  5368  0008E6  D000               	goto	i2l3865
  5369  0008E8                     i2l3865:
  5370                           
  5371                           ;INTERRUPTS.c: 101: }
  5372                           ;INTERRUPTS.c: 102: INTCON3bits.INT1IF = 0;
  5373  0008E8  90F0               	bcf	intcon3,0,c	;volatile
  5374                           
  5375                           ;INTERRUPTS.c: 103: INTCON3bits.INT2IF = 0;
  5376  0008EA  92F0               	bcf	intcon3,1,c	;volatile
  5377                           
  5378                           ;INTERRUPTS.c: 104: }
  5379  0008EC  D00D               	goto	i2l131
  5380  0008EE                     i2l114:
  5381                           
  5382                           ;INTERRUPTS.c: 105: else if(INTCONbits.TMR0IF)
  5383  0008EE  A4F2               	btfss	intcon,2,c	;volatile
  5384  0008F0  D009               	goto	i2l129
  5385                           
  5386                           ;INTERRUPTS.c: 106: {
  5387                           ;INTERRUPTS.c: 108: TMR_Timer0(0);
  5388  0008F2  0E00               	movlw	0
  5389  0008F4  EC1D  F00A         	call	i2_TMR_Timer0
  5390                           
  5391                           ;INTERRUPTS.c: 109: TMR_ResetTimer0();
  5392  0008F8  EC3E  F009         	call	i2_TMR_ResetTimer0	;wreg free
  5393                           
  5394                           ;INTERRUPTS.c: 110: RF_ResetRFData();
  5395  0008FC  EC37  F00A         	call	_RF_ResetRFData	;wreg free
  5396                           
  5397                           ;INTERRUPTS.c: 111: INTCONbits.TMR0IF = 0;
  5398  000900  94F2               	bcf	intcon,2,c	;volatile
  5399                           
  5400                           ;INTERRUPTS.c: 112: }
  5401  000902  D002               	goto	i2l131
  5402  000904                     i2l129:
  5403                           
  5404                           ;INTERRUPTS.c: 113: else
  5405                           ;INTERRUPTS.c: 114: {
  5406                           ;INTERRUPTS.c: 116: __nop();
  5407  000904  F000               	nop	
  5408  000906  D000               	goto	i2l131
  5409  000908                     i2l131:
  5410  000908  C045  FFF5         	movff	??_high_isr+13,tablat
  5411  00090C  C044  FFF8         	movff	??_high_isr+12,tblptru
  5412  000910  C043  FFF7         	movff	??_high_isr+11,tblptrh
  5413  000914  C042  FFF6         	movff	??_high_isr+10,tblptrl
  5414  000918  C041  FFF4         	movff	??_high_isr+9,prodh
  5415  00091C  C040  FFF3         	movff	??_high_isr+8,prodl
  5416  000920  C03F  FFDA         	movff	??_high_isr+7,fsr2h
  5417  000924  C03E  FFD9         	movff	??_high_isr+6,fsr2l
  5418  000928  C03D  FFE2         	movff	??_high_isr+5,fsr1h
  5419  00092C  C03C  FFE1         	movff	??_high_isr+4,fsr1l
  5420  000930  C03B  FFEA         	movff	??_high_isr+3,fsr0h
  5421  000934  C03A  FFE9         	movff	??_high_isr+2,fsr0l
  5422  000938  C039  FFFB         	movff	??_high_isr+1,pclatu
  5423  00093C  C038  FFFA         	movff	??_high_isr,pclath
  5424  000940  0011               	retfie		f
  5425  000942                     __end_of_high_isr:
  5426                           	opt stack 0
  5427                           pclatu	equ	0xFFB
  5428                           pclath	equ	0xFFA
  5429                           tblptru	equ	0xFF8
  5430                           tblptrh	equ	0xFF7
  5431                           tblptrl	equ	0xFF6
  5432                           tablat	equ	0xFF5
  5433                           prodh	equ	0xFF4
  5434                           prodl	equ	0xFF3
  5435                           intcon	equ	0xFF2
  5436                           intcon2	equ	0xFF1
  5437                           intcon3	equ	0xFF0
  5438                           postinc0	equ	0xFEE
  5439                           fsr0h	equ	0xFEA
  5440                           fsr0l	equ	0xFE9
  5441                           wreg	equ	0xFE8
  5442                           fsr1h	equ	0xFE2
  5443                           fsr1l	equ	0xFE1
  5444                           bsr	equ	0xFE0
  5445                           postinc2	equ	0xFDE
  5446                           postdec2	equ	0xFDD
  5447                           fsr2h	equ	0xFDA
  5448                           fsr2l	equ	0xFD9
  5449                           status	equ	0xFD8
  5450                           
  5451 ;; *************** function _TMR_Timer0Status *****************
  5452 ;; Defined at:
  5453 ;;		line 56 in file "TIMERS.c"
  5454 ;; Parameters:    Size  Location     Type
  5455 ;;		None
  5456 ;; Auto vars:     Size  Location     Type
  5457 ;;		None
  5458 ;; Return value:  Size  Location     Type
  5459 ;;                  1    wreg      unsigned char 
  5460 ;; Registers used:
  5461 ;;		wreg
  5462 ;; Tracked objects:
  5463 ;;		On entry : 0/0
  5464 ;;		On exit  : 0/0
  5465 ;;		Unchanged: 0/0
  5466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5467 ;;      Params:         0       0       0       0       0
  5468 ;;      Locals:         0       0       0       0       0
  5469 ;;      Temps:          0       0       0       0       0
  5470 ;;      Totals:         0       0       0       0       0
  5471 ;;Total ram usage:        0 bytes
  5472 ;; Hardware stack levels used:    1
  5473 ;; This function calls:
  5474 ;;		Nothing
  5475 ;; This function is called by:
  5476 ;;		_high_isr
  5477 ;; This function uses a non-reentrant model
  5478 ;;
  5479                           
  5480                           	psect	text42
  5481  00144C                     __ptext42:
  5482                           	opt stack 0
  5483  00144C                     _TMR_Timer0Status:
  5484                           	opt stack 20
  5485                           
  5486                           ;TIMERS.c: 58: if(T0CONbits.TMR0ON)
  5487                           
  5488                           ;incstack = 0
  5489  00144C  AED5               	btfss	4053,7,c	;volatile
  5490  00144E  D002               	goto	i2l3693
  5491                           
  5492                           ;TIMERS.c: 59: {
  5493                           ;TIMERS.c: 61: return 1;
  5494  001450  0E01               	movlw	1
  5495  001452  0012               	return	
  5496  001454                     i2l3693:
  5497                           
  5498                           ;TIMERS.c: 62: }
  5499                           ;TIMERS.c: 63: return 0;
  5500  001454  0E00               	movlw	0
  5501  001456  0012               	return	
  5502  001458  0012               	return		;funcret
  5503  00145A                     __end_of_TMR_Timer0Status:
  5504                           	opt stack 0
  5505                           pclatu	equ	0xFFB
  5506                           pclath	equ	0xFFA
  5507                           tblptru	equ	0xFF8
  5508                           tblptrh	equ	0xFF7
  5509                           tblptrl	equ	0xFF6
  5510                           tablat	equ	0xFF5
  5511                           prodh	equ	0xFF4
  5512                           prodl	equ	0xFF3
  5513                           intcon	equ	0xFF2
  5514                           intcon2	equ	0xFF1
  5515                           intcon3	equ	0xFF0
  5516                           postinc0	equ	0xFEE
  5517                           fsr0h	equ	0xFEA
  5518                           fsr0l	equ	0xFE9
  5519                           wreg	equ	0xFE8
  5520                           fsr1h	equ	0xFE2
  5521                           fsr1l	equ	0xFE1
  5522                           bsr	equ	0xFE0
  5523                           postinc2	equ	0xFDE
  5524                           postdec2	equ	0xFDD
  5525                           fsr2h	equ	0xFDA
  5526                           fsr2l	equ	0xFD9
  5527                           status	equ	0xFD8
  5528                           
  5529 ;; *************** function _TMR_Timer0Start *****************
  5530 ;; Defined at:
  5531 ;;		line 254 in file "TIMERS.c"
  5532 ;; Parameters:    Size  Location     Type
  5533 ;;		None
  5534 ;; Auto vars:     Size  Location     Type
  5535 ;;		None
  5536 ;; Return value:  Size  Location     Type
  5537 ;;		None               void
  5538 ;; Registers used:
  5539 ;;		wreg, status,2, cstack
  5540 ;; Tracked objects:
  5541 ;;		On entry : 0/0
  5542 ;;		On exit  : 0/0
  5543 ;;		Unchanged: 0/0
  5544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5545 ;;      Params:         0       0       0       0       0
  5546 ;;      Locals:         0       0       0       0       0
  5547 ;;      Temps:          0       0       0       0       0
  5548 ;;      Totals:         0       0       0       0       0
  5549 ;;Total ram usage:        0 bytes
  5550 ;; Hardware stack levels used:    1
  5551 ;; Hardware stack levels required when called:    2
  5552 ;; This function calls:
  5553 ;;		i2_TMR_ResetTimer0
  5554 ;;		i2_TMR_Timer0
  5555 ;; This function is called by:
  5556 ;;		_high_isr
  5557 ;; This function uses a non-reentrant model
  5558 ;;
  5559                           
  5560                           	psect	text43
  5561  001428                     __ptext43:
  5562                           	opt stack 0
  5563  001428                     _TMR_Timer0Start:
  5564                           	opt stack 18
  5565                           
  5566                           ;TIMERS.c: 256: TMR_Timer0(0);
  5567                           
  5568                           ;incstack = 0
  5569  001428  0E00               	movlw	0
  5570  00142A  EC1D  F00A         	call	i2_TMR_Timer0
  5571                           
  5572                           ;TIMERS.c: 257: TMR_ResetTimer0();
  5573  00142E  EC3E  F009         	call	i2_TMR_ResetTimer0	;wreg free
  5574                           
  5575                           ;TIMERS.c: 258: TMR_Timer0(1);
  5576  001432  0E01               	movlw	1
  5577  001434  EC1D  F00A         	call	i2_TMR_Timer0
  5578  001438  0012               	return		;funcret
  5579  00143A                     __end_of_TMR_Timer0Start:
  5580                           	opt stack 0
  5581                           pclatu	equ	0xFFB
  5582                           pclath	equ	0xFFA
  5583                           tblptru	equ	0xFF8
  5584                           tblptrh	equ	0xFF7
  5585                           tblptrl	equ	0xFF6
  5586                           tablat	equ	0xFF5
  5587                           prodh	equ	0xFF4
  5588                           prodl	equ	0xFF3
  5589                           intcon	equ	0xFF2
  5590                           intcon2	equ	0xFF1
  5591                           intcon3	equ	0xFF0
  5592                           postinc0	equ	0xFEE
  5593                           fsr0h	equ	0xFEA
  5594                           fsr0l	equ	0xFE9
  5595                           wreg	equ	0xFE8
  5596                           fsr1h	equ	0xFE2
  5597                           fsr1l	equ	0xFE1
  5598                           bsr	equ	0xFE0
  5599                           postinc2	equ	0xFDE
  5600                           postdec2	equ	0xFDD
  5601                           fsr2h	equ	0xFDA
  5602                           fsr2l	equ	0xFD9
  5603                           status	equ	0xFD8
  5604                           
  5605 ;; *************** function i2_TMR_ResetTimer0 *****************
  5606 ;; Defined at:
  5607 ;;		line 109 in file "TIMERS.c"
  5608 ;; Parameters:    Size  Location     Type
  5609 ;;		None
  5610 ;; Auto vars:     Size  Location     Type
  5611 ;;  TMR_ResetTim    1   23[COMRAM] unsigned char 
  5612 ;; Return value:  Size  Location     Type
  5613 ;;		None               void
  5614 ;; Registers used:
  5615 ;;		wreg, status,2, cstack
  5616 ;; Tracked objects:
  5617 ;;		On entry : 0/0
  5618 ;;		On exit  : 0/0
  5619 ;;		Unchanged: 0/0
  5620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5621 ;;      Params:         0       0       0       0       0
  5622 ;;      Locals:         1       0       0       0       0
  5623 ;;      Temps:          0       0       0       0       0
  5624 ;;      Totals:         1       0       0       0       0
  5625 ;;Total ram usage:        1 bytes
  5626 ;; Hardware stack levels used:    1
  5627 ;; Hardware stack levels required when called:    1
  5628 ;; This function calls:
  5629 ;;		i2_TMR_Timer0
  5630 ;; This function is called by:
  5631 ;;		_high_isr
  5632 ;;		_TMR_Timer0Start
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           	psect	text44
  5637  00127C                     __ptext44:
  5638                           	opt stack 0
  5639  00127C                     i2_TMR_ResetTimer0:
  5640                           	opt stack 19
  5641                           
  5642                           ;TIMERS.c: 111: unsigned char TimerOn = T0CONbits.TMR0ON;
  5643                           
  5644                           ;incstack = 0
  5645  00127C  0E00               	movlw	0
  5646  00127E  BED5               	btfsc	4053,7,c	;volatile
  5647  001280  0E01               	movlw	1
  5648  001282  6E18               	movwf	i2TMR_ResetTimer0@TimerOn,c
  5649                           
  5650                           ;TIMERS.c: 113: TMR_Timer0(0);
  5651  001284  0E00               	movlw	0
  5652  001286  EC1D  F00A         	call	i2_TMR_Timer0
  5653                           
  5654                           ;TIMERS.c: 114: TMR0H = 0;
  5655  00128A  0E00               	movlw	0
  5656  00128C  6ED7               	movwf	4055,c	;volatile
  5657                           
  5658                           ;TIMERS.c: 115: TMR0L = 2;
  5659  00128E  0E02               	movlw	2
  5660  001290  6ED6               	movwf	4054,c	;volatile
  5661                           
  5662                           ;TIMERS.c: 116: if(TimerOn)
  5663  001292  5018               	movf	i2TMR_ResetTimer0@TimerOn,w,c
  5664  001294  B4D8               	btfsc	status,2,c
  5665  001296  0012               	return	
  5666                           
  5667                           ;TIMERS.c: 117: {
  5668                           ;TIMERS.c: 118: TMR_Timer0(1);
  5669  001298  0E01               	movlw	1
  5670  00129A  EC1D  F00A         	call	i2_TMR_Timer0
  5671  00129E  0012               	return	
  5672  0012A0  0012               	return		;funcret
  5673  0012A2                     __end_ofi2_TMR_ResetTimer0:
  5674                           	opt stack 0
  5675                           pclatu	equ	0xFFB
  5676                           pclath	equ	0xFFA
  5677                           tblptru	equ	0xFF8
  5678                           tblptrh	equ	0xFF7
  5679                           tblptrl	equ	0xFF6
  5680                           tablat	equ	0xFF5
  5681                           prodh	equ	0xFF4
  5682                           prodl	equ	0xFF3
  5683                           intcon	equ	0xFF2
  5684                           intcon2	equ	0xFF1
  5685                           intcon3	equ	0xFF0
  5686                           postinc0	equ	0xFEE
  5687                           fsr0h	equ	0xFEA
  5688                           fsr0l	equ	0xFE9
  5689                           wreg	equ	0xFE8
  5690                           fsr1h	equ	0xFE2
  5691                           fsr1l	equ	0xFE1
  5692                           bsr	equ	0xFE0
  5693                           postinc2	equ	0xFDE
  5694                           postdec2	equ	0xFDD
  5695                           fsr2h	equ	0xFDA
  5696                           fsr2l	equ	0xFD9
  5697                           status	equ	0xFD8
  5698                           
  5699 ;; *************** function i2_TMR_Timer0 *****************
  5700 ;; Defined at:
  5701 ;;		line 71 in file "TIMERS.c"
  5702 ;; Parameters:    Size  Location     Type
  5703 ;;  state           1    wreg     unsigned char 
  5704 ;; Auto vars:     Size  Location     Type
  5705 ;;  state           1   22[COMRAM] unsigned char 
  5706 ;; Return value:  Size  Location     Type
  5707 ;;		None               void
  5708 ;; Registers used:
  5709 ;;		wreg, status,2
  5710 ;; Tracked objects:
  5711 ;;		On entry : 0/0
  5712 ;;		On exit  : 0/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5715 ;;      Params:         0       0       0       0       0
  5716 ;;      Locals:         1       0       0       0       0
  5717 ;;      Temps:          0       0       0       0       0
  5718 ;;      Totals:         1       0       0       0       0
  5719 ;;Total ram usage:        1 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; This function calls:
  5722 ;;		Nothing
  5723 ;; This function is called by:
  5724 ;;		_high_isr
  5725 ;;		_TMR_Timer0Start
  5726 ;;		i2_TMR_ResetTimer0
  5727 ;; This function uses a non-reentrant model
  5728 ;;
  5729                           
  5730                           	psect	text45
  5731  00143A                     __ptext45:
  5732                           	opt stack 0
  5733  00143A                     i2_TMR_Timer0:
  5734                           	opt stack 20
  5735                           
  5736                           ;incstack = 0
  5737                           ;i2TMR_Timer0@state stored from wreg
  5738  00143A  6E17               	movwf	i2TMR_Timer0@state,c
  5739                           
  5740                           ;TIMERS.c: 73: if(state)
  5741  00143C  5017               	movf	i2TMR_Timer0@state,w,c
  5742  00143E  B4D8               	btfsc	status,2,c
  5743  001440  D002               	goto	i2l783
  5744                           
  5745                           ;TIMERS.c: 74: {
  5746                           ;TIMERS.c: 76: T0CONbits.TMR0ON = 1;
  5747  001442  8ED5               	bsf	4053,7,c	;volatile
  5748                           
  5749                           ;TIMERS.c: 77: }
  5750  001444  0012               	return	
  5751  001446                     i2l783:
  5752                           
  5753                           ;TIMERS.c: 78: else
  5754                           ;TIMERS.c: 79: {
  5755                           ;TIMERS.c: 81: T0CONbits.TMR0ON = 0;
  5756  001446  9ED5               	bcf	4053,7,c	;volatile
  5757  001448  0012               	return	
  5758  00144A  0012               	return		;funcret
  5759  00144C                     __end_ofi2_TMR_Timer0:
  5760                           	opt stack 0
  5761                           pclatu	equ	0xFFB
  5762                           pclath	equ	0xFFA
  5763                           tblptru	equ	0xFF8
  5764                           tblptrh	equ	0xFF7
  5765                           tblptrl	equ	0xFF6
  5766                           tablat	equ	0xFF5
  5767                           prodh	equ	0xFF4
  5768                           prodl	equ	0xFF3
  5769                           intcon	equ	0xFF2
  5770                           intcon2	equ	0xFF1
  5771                           intcon3	equ	0xFF0
  5772                           postinc0	equ	0xFEE
  5773                           fsr0h	equ	0xFEA
  5774                           fsr0l	equ	0xFE9
  5775                           wreg	equ	0xFE8
  5776                           fsr1h	equ	0xFE2
  5777                           fsr1l	equ	0xFE1
  5778                           bsr	equ	0xFE0
  5779                           postinc2	equ	0xFDE
  5780                           postdec2	equ	0xFDD
  5781                           fsr2h	equ	0xFDA
  5782                           fsr2l	equ	0xFD9
  5783                           status	equ	0xFD8
  5784                           
  5785 ;; *************** function _RF_ResetRFData *****************
  5786 ;; Defined at:
  5787 ;;		line 191 in file "RF.c"
  5788 ;; Parameters:    Size  Location     Type
  5789 ;;		None
  5790 ;; Auto vars:     Size  Location     Type
  5791 ;;		None
  5792 ;; Return value:  Size  Location     Type
  5793 ;;		None               void
  5794 ;; Registers used:
  5795 ;;		wreg, status,2
  5796 ;; Tracked objects:
  5797 ;;		On entry : 0/0
  5798 ;;		On exit  : 0/0
  5799 ;;		Unchanged: 0/0
  5800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5801 ;;      Params:         0       0       0       0       0
  5802 ;;      Locals:         0       0       0       0       0
  5803 ;;      Temps:          0       0       0       0       0
  5804 ;;      Totals:         0       0       0       0       0
  5805 ;;Total ram usage:        0 bytes
  5806 ;; Hardware stack levels used:    1
  5807 ;; This function calls:
  5808 ;;		Nothing
  5809 ;; This function is called by:
  5810 ;;		_high_isr
  5811 ;; This function uses a non-reentrant model
  5812 ;;
  5813                           
  5814                           	psect	text46
  5815  00146E                     __ptext46:
  5816                           	opt stack 0
  5817  00146E                     _RF_ResetRFData:
  5818                           	opt stack 20
  5819                           
  5820                           ;RF.c: 193: RF_DataPlace = 0;
  5821                           
  5822                           ;incstack = 0
  5823  00146E  0E00               	movlw	0
  5824  001470  6E55               	movwf	_RF_DataPlace,c
  5825                           
  5826                           ;RF.c: 194: RFStarted = 0;
  5827  001472  0E00               	movlw	0
  5828  001474  6E53               	movwf	_RFStarted,c
  5829  001476  0012               	return		;funcret
  5830  001478                     __end_of_RF_ResetRFData:
  5831                           	opt stack 0
  5832                           pclatu	equ	0xFFB
  5833                           pclath	equ	0xFFA
  5834                           tblptru	equ	0xFF8
  5835                           tblptrh	equ	0xFF7
  5836                           tblptrl	equ	0xFF6
  5837                           tablat	equ	0xFF5
  5838                           prodh	equ	0xFF4
  5839                           prodl	equ	0xFF3
  5840                           intcon	equ	0xFF2
  5841                           intcon2	equ	0xFF1
  5842                           intcon3	equ	0xFF0
  5843                           postinc0	equ	0xFEE
  5844                           fsr0h	equ	0xFEA
  5845                           fsr0l	equ	0xFE9
  5846                           wreg	equ	0xFE8
  5847                           fsr1h	equ	0xFE2
  5848                           fsr1l	equ	0xFE1
  5849                           bsr	equ	0xFE0
  5850                           postinc2	equ	0xFDE
  5851                           postdec2	equ	0xFDD
  5852                           fsr2h	equ	0xFDA
  5853                           fsr2l	equ	0xFD9
  5854                           status	equ	0xFD8
  5855                           
  5856 ;; *************** function _RF_CheckCode *****************
  5857 ;; Defined at:
  5858 ;;		line 240 in file "RF.c"
  5859 ;; Parameters:    Size  Location     Type
  5860 ;;		None
  5861 ;; Auto vars:     Size  Location     Type
  5862 ;;  High            3   51[COMRAM] unsigned char 
  5863 ;;  Low             3   48[COMRAM] unsigned char 
  5864 ;;  i               1   54[COMRAM] unsigned char 
  5865 ;; Return value:  Size  Location     Type
  5866 ;;                  1    wreg      unsigned char 
  5867 ;; Registers used:
  5868 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5874 ;;      Params:         0       0       0       0       0
  5875 ;;      Locals:         7       0       0       0       0
  5876 ;;      Temps:          0       0       0       0       0
  5877 ;;      Totals:         7       0       0       0       0
  5878 ;;Total ram usage:        7 bytes
  5879 ;; Hardware stack levels used:    1
  5880 ;; Hardware stack levels required when called:    2
  5881 ;; This function calls:
  5882 ;;		_MSC_BufferCopyInt
  5883 ;;		___ftge
  5884 ;;		___ftmul
  5885 ;;		___lwtoft
  5886 ;; This function is called by:
  5887 ;;		_high_isr
  5888 ;; This function uses a non-reentrant model
  5889 ;;
  5890                           
  5891                           	psect	text47
  5892  0004A8                     __ptext47:
  5893                           	opt stack 0
  5894  0004A8                     _RF_CheckCode:
  5895                           	opt stack 18
  5896                           
  5897                           ;RF.c: 242: unsigned char i;
  5898                           ;RF.c: 243: double Low = 0.0;
  5899                           
  5900                           ;incstack = 0
  5901  0004A8  0E00               	movlw	0
  5902  0004AA  6E31               	movwf	RF_CheckCode@Low,c
  5903  0004AC  0E00               	movlw	0
  5904  0004AE  6E32               	movwf	RF_CheckCode@Low+1,c
  5905  0004B0  0E00               	movlw	0
  5906  0004B2  6E33               	movwf	RF_CheckCode@Low+2,c
  5907                           
  5908                           ;RF.c: 244: double High = 0.0;
  5909  0004B4  0E00               	movlw	0
  5910  0004B6  6E34               	movwf	RF_CheckCode@High,c
  5911  0004B8  0E00               	movlw	0
  5912  0004BA  6E35               	movwf	RF_CheckCode@High+1,c
  5913  0004BC  0E00               	movlw	0
  5914  0004BE  6E36               	movwf	RF_CheckCode@High+2,c
  5915                           
  5916                           ;RF.c: 246: if(System_State == 8)
  5917  0004C0  0E08               	movlw	8
  5918  0004C2  0100               	movlb	0	; () banked
  5919  0004C4  199D               	xorwf	_System_State& (0+255),w,b
  5920  0004C6  A4D8               	btfss	status,2,c
  5921  0004C8  D0CF               	goto	i2l3727
  5922                           
  5923                           ; BSR set to: 0
  5924                           ;RF.c: 247: {
  5925                           ;RF.c: 248: for(i=0; i<RF_CodeSize;i++)
  5926  0004CA  0E00               	movlw	0
  5927  0004CC  6E37               	movwf	RF_CheckCode@i,c
  5928  0004CE  D0C6               	goto	i2l3719
  5929  0004D0                     i2l3705:
  5930                           
  5931                           ;RF.c: 249: {
  5932                           ;RF.c: 250: if(i == 0)
  5933  0004D0  5037               	movf	RF_CheckCode@i,w,c
  5934  0004D2  A4D8               	btfss	status,2,c
  5935  0004D4  D03F               	goto	i2l3709
  5936                           
  5937                           ;RF.c: 251: {
  5938                           ;RF.c: 252: Low = (double)RF_SavedTiming[i] * (1.0 - 0.05);
  5939  0004D6  5037               	movf	RF_CheckCode@i,w,c
  5940  0004D8  0D02               	mullw	2
  5941  0004DA  0E00               	movlw	low _RF_SavedTiming
  5942  0004DC  24F3               	addwf	prodl,w,c
  5943  0004DE  6ED9               	movwf	fsr2l,c
  5944  0004E0  0E02               	movlw	high _RF_SavedTiming
  5945  0004E2  20F4               	addwfc	prodh,w,c
  5946  0004E4  6EDA               	movwf	fsr2h,c
  5947  0004E6  CFDE F01F          	movff	postinc2,___lwtoft@c
  5948  0004EA  CFDD F020          	movff	postdec2,___lwtoft@c+1
  5949  0004EE  EC51  F009         	call	___lwtoft	;wreg free
  5950  0004F2  C01F  F022         	movff	?___lwtoft,___ftmul@f1
  5951  0004F6  C020  F023         	movff	?___lwtoft+1,___ftmul@f1+1
  5952  0004FA  C021  F024         	movff	?___lwtoft+2,___ftmul@f1+2
  5953  0004FE  0E33               	movlw	51
  5954  000500  6E25               	movwf	___ftmul@f2,c
  5955  000502  0E73               	movlw	115
  5956  000504  6E26               	movwf	___ftmul@f2+1,c
  5957  000506  0E3F               	movlw	63
  5958  000508  6E27               	movwf	___ftmul@f2+2,c
  5959  00050A  ECA1  F004         	call	___ftmul	;wreg free
  5960  00050E  C022  F031         	movff	?___ftmul,RF_CheckCode@Low
  5961  000512  C023  F032         	movff	?___ftmul+1,RF_CheckCode@Low+1
  5962  000516  C024  F033         	movff	?___ftmul+2,RF_CheckCode@Low+2
  5963                           
  5964                           ;RF.c: 253: High = (double)RF_SavedTiming[i] * (1.0 + 0.05);
  5965  00051A  5037               	movf	RF_CheckCode@i,w,c
  5966  00051C  0D02               	mullw	2
  5967  00051E  0E00               	movlw	low _RF_SavedTiming
  5968  000520  24F3               	addwf	prodl,w,c
  5969  000522  6ED9               	movwf	fsr2l,c
  5970  000524  0E02               	movlw	high _RF_SavedTiming
  5971  000526  20F4               	addwfc	prodh,w,c
  5972  000528  6EDA               	movwf	fsr2h,c
  5973  00052A  CFDE F01F          	movff	postinc2,___lwtoft@c
  5974  00052E  CFDD F020          	movff	postdec2,___lwtoft@c+1
  5975  000532  EC51  F009         	call	___lwtoft	;wreg free
  5976  000536  C01F  F022         	movff	?___lwtoft,___ftmul@f1
  5977  00053A  C020  F023         	movff	?___lwtoft+1,___ftmul@f1+1
  5978  00053E  C021  F024         	movff	?___lwtoft+2,___ftmul@f1+2
  5979  000542  0E66               	movlw	102
  5980  000544  6E25               	movwf	___ftmul@f2,c
  5981  000546  0E86               	movlw	134
  5982  000548  6E26               	movwf	___ftmul@f2+1,c
  5983  00054A  0E3F               	movlw	63
  5984  00054C  6E27               	movwf	___ftmul@f2+2,c
  5985  00054E  ECA1  F004         	call	___ftmul	;wreg free
  5986  000552  D03E               	goto	L3
  5987  000554                     i2l3709:
  5988                           
  5989                           ;RF.c: 255: else
  5990                           ;RF.c: 256: {
  5991                           ;RF.c: 257: Low = (double)RF_SavedTiming[i] * (1.0 - 0.5);
  5992  000554  5037               	movf	RF_CheckCode@i,w,c
  5993  000556  0D02               	mullw	2
  5994  000558  0E00               	movlw	low _RF_SavedTiming
  5995  00055A  24F3               	addwf	prodl,w,c
  5996  00055C  6ED9               	movwf	fsr2l,c
  5997  00055E  0E02               	movlw	high _RF_SavedTiming
  5998  000560  20F4               	addwfc	prodh,w,c
  5999  000562  6EDA               	movwf	fsr2h,c
  6000  000564  CFDE F01F          	movff	postinc2,___lwtoft@c
  6001  000568  CFDD F020          	movff	postdec2,___lwtoft@c+1
  6002  00056C  EC51  F009         	call	___lwtoft	;wreg free
  6003  000570  C01F  F022         	movff	?___lwtoft,___ftmul@f1
  6004  000574  C020  F023         	movff	?___lwtoft+1,___ftmul@f1+1
  6005  000578  C021  F024         	movff	?___lwtoft+2,___ftmul@f1+2
  6006  00057C  0E00               	movlw	0
  6007  00057E  6E25               	movwf	___ftmul@f2,c
  6008  000580  0E00               	movlw	0
  6009  000582  6E26               	movwf	___ftmul@f2+1,c
  6010  000584  0E3F               	movlw	63
  6011  000586  6E27               	movwf	___ftmul@f2+2,c
  6012  000588  ECA1  F004         	call	___ftmul	;wreg free
  6013  00058C  C022  F031         	movff	?___ftmul,RF_CheckCode@Low
  6014  000590  C023  F032         	movff	?___ftmul+1,RF_CheckCode@Low+1
  6015  000594  C024  F033         	movff	?___ftmul+2,RF_CheckCode@Low+2
  6016                           
  6017                           ;RF.c: 258: High = (double)RF_SavedTiming[i] * (1.0 + 0.5);
  6018  000598  5037               	movf	RF_CheckCode@i,w,c
  6019  00059A  0D02               	mullw	2
  6020  00059C  0E00               	movlw	low _RF_SavedTiming
  6021  00059E  24F3               	addwf	prodl,w,c
  6022  0005A0  6ED9               	movwf	fsr2l,c
  6023  0005A2  0E02               	movlw	high _RF_SavedTiming
  6024  0005A4  20F4               	addwfc	prodh,w,c
  6025  0005A6  6EDA               	movwf	fsr2h,c
  6026  0005A8  CFDE F01F          	movff	postinc2,___lwtoft@c
  6027  0005AC  CFDD F020          	movff	postdec2,___lwtoft@c+1
  6028  0005B0  EC51  F009         	call	___lwtoft	;wreg free
  6029  0005B4  C01F  F022         	movff	?___lwtoft,___ftmul@f1
  6030  0005B8  C020  F023         	movff	?___lwtoft+1,___ftmul@f1+1
  6031  0005BC  C021  F024         	movff	?___lwtoft+2,___ftmul@f1+2
  6032  0005C0  0E00               	movlw	0
  6033  0005C2  6E25               	movwf	___ftmul@f2,c
  6034  0005C4  0EC0               	movlw	192
  6035  0005C6  6E26               	movwf	___ftmul@f2+1,c
  6036  0005C8  0E3F               	movlw	63
  6037  0005CA  6E27               	movwf	___ftmul@f2+2,c
  6038  0005CC  ECA1  F004         	call	___ftmul	;wreg free
  6039  0005D0                     L3:
  6040  0005D0  C022  F034         	movff	?___ftmul,RF_CheckCode@High
  6041  0005D4  C023  F035         	movff	?___ftmul+1,RF_CheckCode@High+1
  6042  0005D8  C024  F036         	movff	?___ftmul+2,RF_CheckCode@High+2
  6043                           
  6044                           ;RF.c: 259: }
  6045                           ;RF.c: 261: if((double)RF_DataTiming[i] < Low || (double)RF_DataTiming[i] > High )
  6046  0005DC  5037               	movf	RF_CheckCode@i,w,c
  6047  0005DE  0D02               	mullw	2
  6048  0005E0  0E00               	movlw	low _RF_DataTiming
  6049  0005E2  24F3               	addwf	prodl,w,c
  6050  0005E4  6ED9               	movwf	fsr2l,c
  6051  0005E6  0E01               	movlw	high _RF_DataTiming
  6052  0005E8  20F4               	addwfc	prodh,w,c
  6053  0005EA  6EDA               	movwf	fsr2h,c
  6054  0005EC  CFDE F01F          	movff	postinc2,___lwtoft@c
  6055  0005F0  CFDD F020          	movff	postdec2,___lwtoft@c+1
  6056  0005F4  EC51  F009         	call	___lwtoft	;wreg free
  6057  0005F8  C01F  F022         	movff	?___lwtoft,___ftge@ff1
  6058  0005FC  C020  F023         	movff	?___lwtoft+1,___ftge@ff1+1
  6059  000600  C021  F024         	movff	?___lwtoft+2,___ftge@ff1+2
  6060  000604  C031  F025         	movff	RF_CheckCode@Low,___ftge@ff2
  6061  000608  C032  F026         	movff	RF_CheckCode@Low+1,___ftge@ff2+1
  6062  00060C  C033  F027         	movff	RF_CheckCode@Low+2,___ftge@ff2+2
  6063  000610  EC02  F007         	call	___ftge	;wreg free
  6064  000614  A0D8               	btfss	status,0,c
  6065  000616  D01E               	goto	i2l3713
  6066  000618  C034  F022         	movff	RF_CheckCode@High,___ftge@ff1
  6067  00061C  C035  F023         	movff	RF_CheckCode@High+1,___ftge@ff1+1
  6068  000620  C036  F024         	movff	RF_CheckCode@High+2,___ftge@ff1+2
  6069  000624  5037               	movf	RF_CheckCode@i,w,c
  6070  000626  0D02               	mullw	2
  6071  000628  0E00               	movlw	low _RF_DataTiming
  6072  00062A  24F3               	addwf	prodl,w,c
  6073  00062C  6ED9               	movwf	fsr2l,c
  6074  00062E  0E01               	movlw	high _RF_DataTiming
  6075  000630  20F4               	addwfc	prodh,w,c
  6076  000632  6EDA               	movwf	fsr2h,c
  6077  000634  CFDE F01F          	movff	postinc2,___lwtoft@c
  6078  000638  CFDD F020          	movff	postdec2,___lwtoft@c+1
  6079  00063C  EC51  F009         	call	___lwtoft	;wreg free
  6080  000640  C01F  F025         	movff	?___lwtoft,___ftge@ff2
  6081  000644  C020  F026         	movff	?___lwtoft+1,___ftge@ff2+1
  6082  000648  C021  F027         	movff	?___lwtoft+2,___ftge@ff2+2
  6083  00064C  EC02  F007         	call	___ftge	;wreg free
  6084  000650  B0D8               	btfsc	status,0,c
  6085  000652  D002               	goto	i2l3717
  6086  000654                     i2l3713:
  6087                           
  6088                           ;RF.c: 262: {
  6089                           ;RF.c: 263: return 0;
  6090  000654  0E00               	movlw	0
  6091  000656  0012               	return	
  6092  000658                     i2l3717:
  6093  000658  2A37               	incf	RF_CheckCode@i,f,c
  6094  00065A  D000               	goto	i2l3719
  6095  00065C                     i2l3719:
  6096  00065C  5054               	movf	_RF_CodeSize,w,c
  6097  00065E  5C37               	subwf	RF_CheckCode@i,w,c
  6098  000660  A0D8               	btfss	status,0,c
  6099  000662  D736               	goto	i2l3705
  6100                           
  6101                           ;RF.c: 264: }
  6102                           ;RF.c: 265: }
  6103                           ;RF.c: 266: return 1;
  6104  000664  0E01               	movlw	1
  6105                           
  6106                           ;RF.c: 267: }
  6107  000666  0012               	return	
  6108  000668                     i2l3727:
  6109                           
  6110                           ;RF.c: 268: else
  6111                           ;RF.c: 269: {
  6112                           ;RF.c: 270: if(RF_DataPlace >= 20)
  6113  000668  0E13               	movlw	19
  6114  00066A  6455               	cpfsgt	_RF_DataPlace,c
  6115  00066C  D016               	goto	i2l3733
  6116                           
  6117                           ;RF.c: 271: {
  6118                           ;RF.c: 273: MSC_BufferCopyInt(&RF_DataTiming,&RF_SavedTiming,120,0);
  6119  00066E  0E00               	movlw	low _RF_DataTiming
  6120  000670  6E1D               	movwf	MSC_BufferCopyInt@from,c
  6121  000672  0E01               	movlw	high _RF_DataTiming
  6122  000674  6E1E               	movwf	MSC_BufferCopyInt@from+1,c
  6123  000676  0E00               	movlw	low _RF_SavedTiming
  6124  000678  6E1F               	movwf	MSC_BufferCopyInt@to,c
  6125  00067A  0E02               	movlw	high _RF_SavedTiming
  6126  00067C  6E20               	movwf	MSC_BufferCopyInt@to+1,c
  6127  00067E  0E00               	movlw	0
  6128  000680  6E22               	movwf	MSC_BufferCopyInt@count+1,c
  6129  000682  0E78               	movlw	120
  6130  000684  6E21               	movwf	MSC_BufferCopyInt@count,c
  6131  000686  0E00               	movlw	0
  6132  000688  6E24               	movwf	MSC_BufferCopyInt@shift+1,c
  6133  00068A  0E00               	movlw	0
  6134  00068C  6E23               	movwf	MSC_BufferCopyInt@shift,c
  6135  00068E  ECB2  F006         	call	_MSC_BufferCopyInt	;wreg free
  6136                           
  6137                           ;RF.c: 274: RF_Saved = 90;
  6138  000692  0E5A               	movlw	90
  6139  000694  0100               	movlb	0	; () banked
  6140  000696  6F9C               	movwf	_RF_Saved& (0+255),b
  6141  000698  D000               	goto	i2l3733
  6142  00069A                     i2l3733:
  6143                           
  6144                           ;RF.c: 275: }
  6145                           ;RF.c: 276: return 1;
  6146  00069A  0E01               	movlw	1
  6147  00069C  0012               	return	
  6148  00069E  0012               	return		;funcret
  6149  0006A0                     __end_of_RF_CheckCode:
  6150                           	opt stack 0
  6151                           pclatu	equ	0xFFB
  6152                           pclath	equ	0xFFA
  6153                           tblptru	equ	0xFF8
  6154                           tblptrh	equ	0xFF7
  6155                           tblptrl	equ	0xFF6
  6156                           tablat	equ	0xFF5
  6157                           prodh	equ	0xFF4
  6158                           prodl	equ	0xFF3
  6159                           intcon	equ	0xFF2
  6160                           intcon2	equ	0xFF1
  6161                           intcon3	equ	0xFF0
  6162                           postinc0	equ	0xFEE
  6163                           fsr0h	equ	0xFEA
  6164                           fsr0l	equ	0xFE9
  6165                           wreg	equ	0xFE8
  6166                           fsr1h	equ	0xFE2
  6167                           fsr1l	equ	0xFE1
  6168                           bsr	equ	0xFE0
  6169                           postinc2	equ	0xFDE
  6170                           postdec2	equ	0xFDD
  6171                           fsr2h	equ	0xFDA
  6172                           fsr2l	equ	0xFD9
  6173                           status	equ	0xFD8
  6174                           
  6175 ;; *************** function ___lwtoft *****************
  6176 ;; Defined at:
  6177 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  6178 ;; Parameters:    Size  Location     Type
  6179 ;;  c               2   30[COMRAM] unsigned int 
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;		None
  6182 ;; Return value:  Size  Location     Type
  6183 ;;                  3   30[COMRAM] float 
  6184 ;; Registers used:
  6185 ;;		wreg, status,2, status,0, cstack
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/0
  6188 ;;		On exit  : 0/0
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6191 ;;      Params:         3       0       0       0       0
  6192 ;;      Locals:         0       0       0       0       0
  6193 ;;      Temps:          0       0       0       0       0
  6194 ;;      Totals:         3       0       0       0       0
  6195 ;;Total ram usage:        3 bytes
  6196 ;; Hardware stack levels used:    1
  6197 ;; Hardware stack levels required when called:    1
  6198 ;; This function calls:
  6199 ;;		___ftpack
  6200 ;; This function is called by:
  6201 ;;		_RF_CheckCode
  6202 ;;		_RF_CalculateNewCode
  6203 ;; This function uses a non-reentrant model
  6204 ;;
  6205                           
  6206                           	psect	text48
  6207  0012A2                     __ptext48:
  6208                           	opt stack 0
  6209  0012A2                     ___lwtoft:
  6210                           	opt stack 18
  6211                           
  6212                           ;incstack = 0
  6213  0012A2  C01F  F017         	movff	___lwtoft@c,___ftpack@arg
  6214  0012A6  C020  F018         	movff	___lwtoft@c+1,___ftpack@arg+1
  6215  0012AA  6A19               	clrf	___ftpack@arg+2,c
  6216  0012AC  0E8E               	movlw	142
  6217  0012AE  6E1A               	movwf	___ftpack@exp,c
  6218  0012B0  0E00               	movlw	0
  6219  0012B2  6E1B               	movwf	___ftpack@sign,c
  6220  0012B4  EC9A  F005         	call	___ftpack	;wreg free
  6221  0012B8  C017  F01F         	movff	?___ftpack,?___lwtoft
  6222  0012BC  C018  F020         	movff	?___ftpack+1,?___lwtoft+1
  6223  0012C0  C019  F021         	movff	?___ftpack+2,?___lwtoft+2
  6224  0012C4  0012               	return	
  6225  0012C6  0012               	return		;funcret
  6226  0012C8                     __end_of___lwtoft:
  6227                           	opt stack 0
  6228                           pclatu	equ	0xFFB
  6229                           pclath	equ	0xFFA
  6230                           tblptru	equ	0xFF8
  6231                           tblptrh	equ	0xFF7
  6232                           tblptrl	equ	0xFF6
  6233                           tablat	equ	0xFF5
  6234                           prodh	equ	0xFF4
  6235                           prodl	equ	0xFF3
  6236                           intcon	equ	0xFF2
  6237                           intcon2	equ	0xFF1
  6238                           intcon3	equ	0xFF0
  6239                           postinc0	equ	0xFEE
  6240                           fsr0h	equ	0xFEA
  6241                           fsr0l	equ	0xFE9
  6242                           wreg	equ	0xFE8
  6243                           fsr1h	equ	0xFE2
  6244                           fsr1l	equ	0xFE1
  6245                           bsr	equ	0xFE0
  6246                           postinc2	equ	0xFDE
  6247                           postdec2	equ	0xFDD
  6248                           fsr2h	equ	0xFDA
  6249                           fsr2l	equ	0xFD9
  6250                           status	equ	0xFD8
  6251                           
  6252 ;; *************** function ___ftmul *****************
  6253 ;; Defined at:
  6254 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;  f1              3   33[COMRAM] float 
  6257 ;;  f2              3   36[COMRAM] float 
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;  f3_as_produc    3   43[COMRAM] unsigned um
  6260 ;;  sign            1   47[COMRAM] unsigned char 
  6261 ;;  cntr            1   46[COMRAM] unsigned char 
  6262 ;;  exp             1   42[COMRAM] unsigned char 
  6263 ;; Return value:  Size  Location     Type
  6264 ;;                  3   33[COMRAM] float 
  6265 ;; Registers used:
  6266 ;;		wreg, status,2, status,0, cstack
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6272 ;;      Params:         6       0       0       0       0
  6273 ;;      Locals:         6       0       0       0       0
  6274 ;;      Temps:          3       0       0       0       0
  6275 ;;      Totals:        15       0       0       0       0
  6276 ;;Total ram usage:       15 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:    1
  6279 ;; This function calls:
  6280 ;;		___ftpack
  6281 ;; This function is called by:
  6282 ;;		_RF_CheckCode
  6283 ;;		_RF_CalculateNewCode
  6284 ;;		_MSC_Scale
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           	psect	text49
  6289  000942                     __ptext49:
  6290                           	opt stack 0
  6291  000942                     ___ftmul:
  6292                           	opt stack 18
  6293                           
  6294                           ;incstack = 0
  6295  000942  C024  F028         	movff	___ftmul@f1+2,??___ftmul
  6296  000946  6A29               	clrf	(??___ftmul+1)& (0+255),c
  6297  000948  6A2A               	clrf	(??___ftmul+2)& (0+255),c
  6298  00094A  3423               	rlcf	___ftmul@f1+1,w,c
  6299  00094C  3628               	rlcf	??___ftmul& (0+255),f,c
  6300  00094E  E301               	bnc	u336_41
  6301  000950  8029               	bsf	(??___ftmul+1)& (0+255),0,c
  6302  000952                     u336_41:
  6303  000952  5028               	movf	??___ftmul,w,c
  6304  000954  6E2B               	movwf	___ftmul@exp,c
  6305  000956  502B               	movf	___ftmul@exp,w,c
  6306  000958  A4D8               	btfss	status,2,c
  6307  00095A  D007               	goto	i2l3463
  6308  00095C  0E00               	movlw	0
  6309  00095E  6E22               	movwf	?___ftmul,c
  6310  000960  0E00               	movlw	0
  6311  000962  6E23               	movwf	?___ftmul+1,c
  6312  000964  0E00               	movlw	0
  6313  000966  6E24               	movwf	?___ftmul+2,c
  6314  000968  0012               	return	
  6315  00096A                     i2l3463:
  6316  00096A  C027  F028         	movff	___ftmul@f2+2,??___ftmul
  6317  00096E  6A29               	clrf	(??___ftmul+1)& (0+255),c
  6318  000970  6A2A               	clrf	(??___ftmul+2)& (0+255),c
  6319  000972  3426               	rlcf	___ftmul@f2+1,w,c
  6320  000974  3628               	rlcf	??___ftmul& (0+255),f,c
  6321  000976  E301               	bnc	u338_41
  6322  000978  8029               	bsf	(??___ftmul+1)& (0+255),0,c
  6323  00097A                     u338_41:
  6324  00097A  5028               	movf	??___ftmul,w,c
  6325  00097C  6E30               	movwf	___ftmul@sign,c
  6326  00097E  5030               	movf	___ftmul@sign,w,c
  6327  000980  A4D8               	btfss	status,2,c
  6328  000982  D007               	goto	i2l3469
  6329  000984  0E00               	movlw	0
  6330  000986  6E22               	movwf	?___ftmul,c
  6331  000988  0E00               	movlw	0
  6332  00098A  6E23               	movwf	?___ftmul+1,c
  6333  00098C  0E00               	movlw	0
  6334  00098E  6E24               	movwf	?___ftmul+2,c
  6335  000990  0012               	return	
  6336  000992                     i2l3469:
  6337  000992  5030               	movf	___ftmul@sign,w,c
  6338  000994  0F7B               	addlw	123
  6339  000996  262B               	addwf	___ftmul@exp,f,c
  6340  000998  C024  F030         	movff	___ftmul@f1+2,___ftmul@sign
  6341  00099C  5027               	movf	___ftmul@f2+2,w,c
  6342  00099E  1A30               	xorwf	___ftmul@sign,f,c
  6343  0009A0  0E80               	movlw	128
  6344  0009A2  1630               	andwf	___ftmul@sign,f,c
  6345  0009A4  8E23               	bsf	___ftmul@f1+1,7,c
  6346  0009A6  8E26               	bsf	___ftmul@f2+1,7,c
  6347  0009A8  0EFF               	movlw	255
  6348  0009AA  1625               	andwf	___ftmul@f2,f,c
  6349  0009AC  0EFF               	movlw	255
  6350  0009AE  1626               	andwf	___ftmul@f2+1,f,c
  6351  0009B0  0E00               	movlw	0
  6352  0009B2  1627               	andwf	___ftmul@f2+2,f,c
  6353  0009B4  0E00               	movlw	0
  6354  0009B6  6E2C               	movwf	___ftmul@f3_as_product,c
  6355  0009B8  0E00               	movlw	0
  6356  0009BA  6E2D               	movwf	___ftmul@f3_as_product+1,c
  6357  0009BC  0E00               	movlw	0
  6358  0009BE  6E2E               	movwf	___ftmul@f3_as_product+2,c
  6359  0009C0  0E07               	movlw	7
  6360  0009C2  6E2F               	movwf	___ftmul@cntr,c
  6361  0009C4  D000               	goto	i2l3483
  6362  0009C6                     i2l3483:
  6363  0009C6  A022               	btfss	___ftmul@f1,0,c
  6364  0009C8  D007               	goto	i2l3487
  6365  0009CA  5025               	movf	___ftmul@f2,w,c
  6366  0009CC  262C               	addwf	___ftmul@f3_as_product,f,c
  6367  0009CE  5026               	movf	___ftmul@f2+1,w,c
  6368  0009D0  222D               	addwfc	___ftmul@f3_as_product+1,f,c
  6369  0009D2  5027               	movf	___ftmul@f2+2,w,c
  6370  0009D4  222E               	addwfc	___ftmul@f3_as_product+2,f,c
  6371  0009D6  D000               	goto	i2l3487
  6372  0009D8                     i2l3487:
  6373  0009D8  90D8               	bcf	status,0,c
  6374  0009DA  3224               	rrcf	___ftmul@f1+2,f,c
  6375  0009DC  3223               	rrcf	___ftmul@f1+1,f,c
  6376  0009DE  3222               	rrcf	___ftmul@f1,f,c
  6377  0009E0  90D8               	bcf	status,0,c
  6378  0009E2  3625               	rlcf	___ftmul@f2,f,c
  6379  0009E4  3626               	rlcf	___ftmul@f2+1,f,c
  6380  0009E6  3627               	rlcf	___ftmul@f2+2,f,c
  6381  0009E8  2E2F               	decfsz	___ftmul@cntr,f,c
  6382  0009EA  D7ED               	goto	i2l3483
  6383  0009EC  D000               	goto	i2l3491
  6384  0009EE                     i2l3491:
  6385  0009EE  0E09               	movlw	9
  6386  0009F0  6E2F               	movwf	___ftmul@cntr,c
  6387  0009F2  D000               	goto	i2l3493
  6388  0009F4                     i2l3493:
  6389  0009F4  A022               	btfss	___ftmul@f1,0,c
  6390  0009F6  D007               	goto	i2l3497
  6391  0009F8  5025               	movf	___ftmul@f2,w,c
  6392  0009FA  262C               	addwf	___ftmul@f3_as_product,f,c
  6393  0009FC  5026               	movf	___ftmul@f2+1,w,c
  6394  0009FE  222D               	addwfc	___ftmul@f3_as_product+1,f,c
  6395  000A00  5027               	movf	___ftmul@f2+2,w,c
  6396  000A02  222E               	addwfc	___ftmul@f3_as_product+2,f,c
  6397  000A04  D000               	goto	i2l3497
  6398  000A06                     i2l3497:
  6399  000A06  90D8               	bcf	status,0,c
  6400  000A08  3224               	rrcf	___ftmul@f1+2,f,c
  6401  000A0A  3223               	rrcf	___ftmul@f1+1,f,c
  6402  000A0C  3222               	rrcf	___ftmul@f1,f,c
  6403  000A0E  90D8               	bcf	status,0,c
  6404  000A10  322E               	rrcf	___ftmul@f3_as_product+2,f,c
  6405  000A12  322D               	rrcf	___ftmul@f3_as_product+1,f,c
  6406  000A14  322C               	rrcf	___ftmul@f3_as_product,f,c
  6407  000A16  2E2F               	decfsz	___ftmul@cntr,f,c
  6408  000A18  D7ED               	goto	i2l3493
  6409  000A1A  D000               	goto	i2l3501
  6410  000A1C                     i2l3501:
  6411  000A1C  C02C  F017         	movff	___ftmul@f3_as_product,___ftpack@arg
  6412  000A20  C02D  F018         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  6413  000A24  C02E  F019         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  6414  000A28  C02B  F01A         	movff	___ftmul@exp,___ftpack@exp
  6415  000A2C  C030  F01B         	movff	___ftmul@sign,___ftpack@sign
  6416  000A30  EC9A  F005         	call	___ftpack	;wreg free
  6417  000A34  C017  F022         	movff	?___ftpack,?___ftmul
  6418  000A38  C018  F023         	movff	?___ftpack+1,?___ftmul+1
  6419  000A3C  C019  F024         	movff	?___ftpack+2,?___ftmul+2
  6420  000A40  0012               	return	
  6421  000A42  0012               	return		;funcret
  6422  000A44                     __end_of___ftmul:
  6423                           	opt stack 0
  6424                           pclatu	equ	0xFFB
  6425                           pclath	equ	0xFFA
  6426                           tblptru	equ	0xFF8
  6427                           tblptrh	equ	0xFF7
  6428                           tblptrl	equ	0xFF6
  6429                           tablat	equ	0xFF5
  6430                           prodh	equ	0xFF4
  6431                           prodl	equ	0xFF3
  6432                           intcon	equ	0xFF2
  6433                           intcon2	equ	0xFF1
  6434                           intcon3	equ	0xFF0
  6435                           postinc0	equ	0xFEE
  6436                           fsr0h	equ	0xFEA
  6437                           fsr0l	equ	0xFE9
  6438                           wreg	equ	0xFE8
  6439                           fsr1h	equ	0xFE2
  6440                           fsr1l	equ	0xFE1
  6441                           bsr	equ	0xFE0
  6442                           postinc2	equ	0xFDE
  6443                           postdec2	equ	0xFDD
  6444                           fsr2h	equ	0xFDA
  6445                           fsr2l	equ	0xFD9
  6446                           status	equ	0xFD8
  6447                           
  6448 ;; *************** function ___ftpack *****************
  6449 ;; Defined at:
  6450 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;  arg             3   22[COMRAM] unsigned um
  6453 ;;  exp             1   25[COMRAM] unsigned char 
  6454 ;;  sign            1   26[COMRAM] unsigned char 
  6455 ;; Auto vars:     Size  Location     Type
  6456 ;;		None
  6457 ;; Return value:  Size  Location     Type
  6458 ;;                  3   22[COMRAM] float 
  6459 ;; Registers used:
  6460 ;;		wreg, status,2, status,0
  6461 ;; Tracked objects:
  6462 ;;		On entry : 0/0
  6463 ;;		On exit  : 0/0
  6464 ;;		Unchanged: 0/0
  6465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6466 ;;      Params:         5       0       0       0       0
  6467 ;;      Locals:         0       0       0       0       0
  6468 ;;      Temps:          3       0       0       0       0
  6469 ;;      Totals:         8       0       0       0       0
  6470 ;;Total ram usage:        8 bytes
  6471 ;; Hardware stack levels used:    1
  6472 ;; This function calls:
  6473 ;;		Nothing
  6474 ;; This function is called by:
  6475 ;;		___ftmul
  6476 ;;		___lwtoft
  6477 ;; This function uses a non-reentrant model
  6478 ;;
  6479                           
  6480                           	psect	text50
  6481  000B34                     __ptext50:
  6482                           	opt stack 0
  6483  000B34                     ___ftpack:
  6484                           	opt stack 18
  6485                           
  6486                           ;incstack = 0
  6487  000B34  501A               	movf	___ftpack@exp,w,c
  6488  000B36  B4D8               	btfsc	status,2,c
  6489  000B38  D005               	goto	i2l3275
  6490  000B3A  5017               	movf	___ftpack@arg,w,c
  6491  000B3C  1018               	iorwf	___ftpack@arg+1,w,c
  6492  000B3E  1019               	iorwf	___ftpack@arg+2,w,c
  6493  000B40  A4D8               	btfss	status,2,c
  6494  000B42  D00E               	goto	i2l3281
  6495  000B44                     i2l3275:
  6496  000B44  0E00               	movlw	0
  6497  000B46  6E17               	movwf	?___ftpack,c
  6498  000B48  0E00               	movlw	0
  6499  000B4A  6E18               	movwf	?___ftpack+1,c
  6500  000B4C  0E00               	movlw	0
  6501  000B4E  6E19               	movwf	?___ftpack+2,c
  6502  000B50  0012               	return	
  6503  000B52  D006               	goto	i2l3281
  6504  000B54                     i2l3279:
  6505  000B54  2A1A               	incf	___ftpack@exp,f,c
  6506  000B56  90D8               	bcf	status,0,c
  6507  000B58  3219               	rrcf	___ftpack@arg+2,f,c
  6508  000B5A  3218               	rrcf	___ftpack@arg+1,f,c
  6509  000B5C  3217               	rrcf	___ftpack@arg,f,c
  6510  000B5E  D000               	goto	i2l3281
  6511  000B60                     i2l3281:
  6512  000B60  0E00               	movlw	0
  6513  000B62  1417               	andwf	___ftpack@arg,w,c
  6514  000B64  6E1C               	movwf	??___ftpack& (0+255),c
  6515  000B66  0E00               	movlw	0
  6516  000B68  1418               	andwf	___ftpack@arg+1,w,c
  6517  000B6A  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  6518  000B6C  0EFE               	movlw	254
  6519  000B6E  1419               	andwf	___ftpack@arg+2,w,c
  6520  000B70  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  6521  000B72  501C               	movf	??___ftpack,w,c
  6522  000B74  101D               	iorwf	??___ftpack+1,w,c
  6523  000B76  101E               	iorwf	??___ftpack+2,w,c
  6524  000B78  B4D8               	btfsc	status,2,c
  6525  000B7A  D00E               	goto	i2l3287
  6526  000B7C  D7EB               	goto	i2l3279
  6527  000B7E  D00C               	goto	i2l3287
  6528  000B80                     i2l3283:
  6529  000B80  2A1A               	incf	___ftpack@exp,f,c
  6530  000B82  0E01               	movlw	1
  6531  000B84  2617               	addwf	___ftpack@arg,f,c
  6532  000B86  0E00               	movlw	0
  6533  000B88  2218               	addwfc	___ftpack@arg+1,f,c
  6534  000B8A  0E00               	movlw	0
  6535  000B8C  2219               	addwfc	___ftpack@arg+2,f,c
  6536  000B8E  90D8               	bcf	status,0,c
  6537  000B90  3219               	rrcf	___ftpack@arg+2,f,c
  6538  000B92  3218               	rrcf	___ftpack@arg+1,f,c
  6539  000B94  3217               	rrcf	___ftpack@arg,f,c
  6540  000B96  D000               	goto	i2l3287
  6541  000B98                     i2l3287:
  6542  000B98  0E00               	movlw	0
  6543  000B9A  1417               	andwf	___ftpack@arg,w,c
  6544  000B9C  6E1C               	movwf	??___ftpack& (0+255),c
  6545  000B9E  0E00               	movlw	0
  6546  000BA0  1418               	andwf	___ftpack@arg+1,w,c
  6547  000BA2  6E1D               	movwf	(??___ftpack+1)& (0+255),c
  6548  000BA4  0EFF               	movlw	255
  6549  000BA6  1419               	andwf	___ftpack@arg+2,w,c
  6550  000BA8  6E1E               	movwf	(??___ftpack+2)& (0+255),c
  6551  000BAA  501C               	movf	??___ftpack,w,c
  6552  000BAC  101D               	iorwf	??___ftpack+1,w,c
  6553  000BAE  101E               	iorwf	??___ftpack+2,w,c
  6554  000BB0  B4D8               	btfsc	status,2,c
  6555  000BB2  D008               	goto	i2l3291
  6556  000BB4  D7E5               	goto	i2l3283
  6557  000BB6  D006               	goto	i2l3291
  6558  000BB8                     i2l3289:
  6559  000BB8  061A               	decf	___ftpack@exp,f,c
  6560  000BBA  90D8               	bcf	status,0,c
  6561  000BBC  3617               	rlcf	___ftpack@arg,f,c
  6562  000BBE  3618               	rlcf	___ftpack@arg+1,f,c
  6563  000BC0  3619               	rlcf	___ftpack@arg+2,f,c
  6564  000BC2  D000               	goto	i2l3291
  6565  000BC4                     i2l3291:
  6566  000BC4  BE18               	btfsc	___ftpack@arg+1,7,c
  6567  000BC6  D004               	goto	i2l1158
  6568  000BC8  0E02               	movlw	2
  6569  000BCA  601A               	cpfslt	___ftpack@exp,c
  6570  000BCC  D7F5               	goto	i2l3289
  6571  000BCE  D000               	goto	i2l1158
  6572  000BD0                     i2l1158:
  6573  000BD0  B01A               	btfsc	___ftpack@exp,0,c
  6574  000BD2  D002               	goto	i2l3297
  6575  000BD4  9E18               	bcf	___ftpack@arg+1,7,c
  6576  000BD6  D000               	goto	i2l3297
  6577  000BD8                     i2l3297:
  6578  000BD8  90D8               	bcf	status,0,c
  6579  000BDA  321A               	rrcf	___ftpack@exp,f,c
  6580  000BDC  501A               	movf	___ftpack@exp,w,c
  6581  000BDE  1219               	iorwf	___ftpack@arg+2,f,c
  6582  000BE0  501B               	movf	___ftpack@sign,w,c
  6583  000BE2  B4D8               	btfsc	status,2,c
  6584  000BE4  D002               	goto	i2l3303
  6585  000BE6  8E19               	bsf	___ftpack@arg+2,7,c
  6586  000BE8  D000               	goto	i2l3303
  6587  000BEA                     i2l3303:
  6588  000BEA  C017  F017         	movff	___ftpack@arg,?___ftpack
  6589  000BEE  C018  F018         	movff	___ftpack@arg+1,?___ftpack+1
  6590  000BF2  C019  F019         	movff	___ftpack@arg+2,?___ftpack+2
  6591  000BF6  0012               	return	
  6592  000BF8  0012               	return		;funcret
  6593  000BFA                     __end_of___ftpack:
  6594                           	opt stack 0
  6595                           pclatu	equ	0xFFB
  6596                           pclath	equ	0xFFA
  6597                           tblptru	equ	0xFF8
  6598                           tblptrh	equ	0xFF7
  6599                           tblptrl	equ	0xFF6
  6600                           tablat	equ	0xFF5
  6601                           prodh	equ	0xFF4
  6602                           prodl	equ	0xFF3
  6603                           intcon	equ	0xFF2
  6604                           intcon2	equ	0xFF1
  6605                           intcon3	equ	0xFF0
  6606                           postinc0	equ	0xFEE
  6607                           fsr0h	equ	0xFEA
  6608                           fsr0l	equ	0xFE9
  6609                           wreg	equ	0xFE8
  6610                           fsr1h	equ	0xFE2
  6611                           fsr1l	equ	0xFE1
  6612                           bsr	equ	0xFE0
  6613                           postinc2	equ	0xFDE
  6614                           postdec2	equ	0xFDD
  6615                           fsr2h	equ	0xFDA
  6616                           fsr2l	equ	0xFD9
  6617                           status	equ	0xFD8
  6618                           
  6619 ;; *************** function ___ftge *****************
  6620 ;; Defined at:
  6621 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  6622 ;; Parameters:    Size  Location     Type
  6623 ;;  ff1             3   33[COMRAM] float 
  6624 ;;  ff2             3   36[COMRAM] float 
  6625 ;; Auto vars:     Size  Location     Type
  6626 ;;		None
  6627 ;; Return value:  Size  Location     Type
  6628 ;;		None               void
  6629 ;; Registers used:
  6630 ;;		wreg, status,2, status,0
  6631 ;; Tracked objects:
  6632 ;;		On entry : 0/0
  6633 ;;		On exit  : 0/0
  6634 ;;		Unchanged: 0/0
  6635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6636 ;;      Params:         6       0       0       0       0
  6637 ;;      Locals:         0       0       0       0       0
  6638 ;;      Temps:          3       0       0       0       0
  6639 ;;      Totals:         9       0       0       0       0
  6640 ;;Total ram usage:        9 bytes
  6641 ;; Hardware stack levels used:    1
  6642 ;; This function calls:
  6643 ;;		Nothing
  6644 ;; This function is called by:
  6645 ;;		_RF_CheckCode
  6646 ;; This function uses a non-reentrant model
  6647 ;;
  6648                           
  6649                           	psect	text51
  6650  000E04                     __ptext51:
  6651                           	opt stack 0
  6652  000E04                     ___ftge:
  6653                           	opt stack 19
  6654                           
  6655                           ;incstack = 0
  6656  000E04  AE24               	btfss	___ftge@ff1+2,7,c
  6657  000E06  D017               	goto	i2l3509
  6658  000E08  C022  F028         	movff	___ftge@ff1,??___ftge
  6659  000E0C  C023  F029         	movff	___ftge@ff1+1,??___ftge+1
  6660  000E10  C024  F02A         	movff	___ftge@ff1+2,??___ftge+2
  6661  000E14  1E28               	comf	??___ftge,f,c
  6662  000E16  1E29               	comf	??___ftge+1,f,c
  6663  000E18  1E2A               	comf	??___ftge+2,f,c
  6664  000E1A  2A28               	incf	??___ftge,f,c
  6665  000E1C  0E00               	movlw	0
  6666  000E1E  2229               	addwfc	??___ftge+1,f,c
  6667  000E20  222A               	addwfc	??___ftge+2,f,c
  6668  000E22  0E00               	movlw	0
  6669  000E24  2428               	addwf	??___ftge,w,c
  6670  000E26  6E22               	movwf	___ftge@ff1,c
  6671  000E28  0E00               	movlw	0
  6672  000E2A  2029               	addwfc	??___ftge+1,w,c
  6673  000E2C  6E23               	movwf	___ftge@ff1+1,c
  6674  000E2E  0E80               	movlw	128
  6675  000E30  202A               	addwfc	??___ftge+2,w,c
  6676  000E32  6E24               	movwf	___ftge@ff1+2,c
  6677  000E34  D000               	goto	i2l3509
  6678  000E36                     i2l3509:
  6679  000E36  AE27               	btfss	___ftge@ff2+2,7,c
  6680  000E38  D017               	goto	i2l3513
  6681  000E3A  C025  F028         	movff	___ftge@ff2,??___ftge
  6682  000E3E  C026  F029         	movff	___ftge@ff2+1,??___ftge+1
  6683  000E42  C027  F02A         	movff	___ftge@ff2+2,??___ftge+2
  6684  000E46  1E28               	comf	??___ftge,f,c
  6685  000E48  1E29               	comf	??___ftge+1,f,c
  6686  000E4A  1E2A               	comf	??___ftge+2,f,c
  6687  000E4C  2A28               	incf	??___ftge,f,c
  6688  000E4E  0E00               	movlw	0
  6689  000E50  2229               	addwfc	??___ftge+1,f,c
  6690  000E52  222A               	addwfc	??___ftge+2,f,c
  6691  000E54  0E00               	movlw	0
  6692  000E56  2428               	addwf	??___ftge,w,c
  6693  000E58  6E25               	movwf	___ftge@ff2,c
  6694  000E5A  0E00               	movlw	0
  6695  000E5C  2029               	addwfc	??___ftge+1,w,c
  6696  000E5E  6E26               	movwf	___ftge@ff2+1,c
  6697  000E60  0E80               	movlw	128
  6698  000E62  202A               	addwfc	??___ftge+2,w,c
  6699  000E64  6E27               	movwf	___ftge@ff2+2,c
  6700  000E66  D000               	goto	i2l3513
  6701  000E68                     i2l3513:
  6702  000E68  0E00               	movlw	0
  6703  000E6A  1A22               	xorwf	___ftge@ff1,f,c
  6704  000E6C  0E00               	movlw	0
  6705  000E6E  1A23               	xorwf	___ftge@ff1+1,f,c
  6706  000E70  0E80               	movlw	128
  6707  000E72  1A24               	xorwf	___ftge@ff1+2,f,c
  6708  000E74  0E00               	movlw	0
  6709  000E76  1A25               	xorwf	___ftge@ff2,f,c
  6710  000E78  0E00               	movlw	0
  6711  000E7A  1A26               	xorwf	___ftge@ff2+1,f,c
  6712  000E7C  0E80               	movlw	128
  6713  000E7E  1A27               	xorwf	___ftge@ff2+2,f,c
  6714  000E80  5025               	movf	___ftge@ff2,w,c
  6715  000E82  5C22               	subwf	___ftge@ff1,w,c
  6716  000E84  5026               	movf	___ftge@ff2+1,w,c
  6717  000E86  5823               	subwfb	___ftge@ff1+1,w,c
  6718  000E88  5027               	movf	___ftge@ff2+2,w,c
  6719  000E8A  5824               	subwfb	___ftge@ff1+2,w,c
  6720  000E8C  B0D8               	btfsc	status,0,c
  6721  000E8E  D002               	goto	i2l3519
  6722  000E90  90D8               	bcf	status,0,c
  6723  000E92  0012               	return	
  6724  000E94                     i2l3519:
  6725  000E94  80D8               	bsf	status,0,c
  6726  000E96  0012               	return	
  6727  000E98  0012               	return		;funcret
  6728  000E9A                     __end_of___ftge:
  6729                           	opt stack 0
  6730                           pclatu	equ	0xFFB
  6731                           pclath	equ	0xFFA
  6732                           tblptru	equ	0xFF8
  6733                           tblptrh	equ	0xFF7
  6734                           tblptrl	equ	0xFF6
  6735                           tablat	equ	0xFF5
  6736                           prodh	equ	0xFF4
  6737                           prodl	equ	0xFF3
  6738                           intcon	equ	0xFF2
  6739                           intcon2	equ	0xFF1
  6740                           intcon3	equ	0xFF0
  6741                           postinc0	equ	0xFEE
  6742                           fsr0h	equ	0xFEA
  6743                           fsr0l	equ	0xFE9
  6744                           wreg	equ	0xFE8
  6745                           fsr1h	equ	0xFE2
  6746                           fsr1l	equ	0xFE1
  6747                           bsr	equ	0xFE0
  6748                           postinc2	equ	0xFDE
  6749                           postdec2	equ	0xFDD
  6750                           fsr2h	equ	0xFDA
  6751                           fsr2l	equ	0xFD9
  6752                           status	equ	0xFD8
  6753                           
  6754 ;; *************** function _MSC_BufferCopyInt *****************
  6755 ;; Defined at:
  6756 ;;		line 215 in file "MISC.c"
  6757 ;; Parameters:    Size  Location     Type
  6758 ;;  from            2   28[COMRAM] PTR unsigned int 
  6759 ;;		 -> RF_DataTiming(240), 
  6760 ;;  to              2   30[COMRAM] PTR unsigned int 
  6761 ;;		 -> RF_SavedTiming(240), 
  6762 ;;  count           2   32[COMRAM] unsigned int 
  6763 ;;  shift           2   34[COMRAM] unsigned int 
  6764 ;; Auto vars:     Size  Location     Type
  6765 ;;  i               2   38[COMRAM] unsigned int 
  6766 ;; Return value:  Size  Location     Type
  6767 ;;		None               void
  6768 ;; Registers used:
  6769 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6770 ;; Tracked objects:
  6771 ;;		On entry : 0/0
  6772 ;;		On exit  : 0/0
  6773 ;;		Unchanged: 0/0
  6774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6775 ;;      Params:         8       0       0       0       0
  6776 ;;      Locals:         2       0       0       0       0
  6777 ;;      Temps:          2       0       0       0       0
  6778 ;;      Totals:        12       0       0       0       0
  6779 ;;Total ram usage:       12 bytes
  6780 ;; Hardware stack levels used:    1
  6781 ;; Hardware stack levels required when called:    1
  6782 ;; This function calls:
  6783 ;;		i2_MSC_CleanBufferInt
  6784 ;; This function is called by:
  6785 ;;		_RF_CheckCode
  6786 ;; This function uses a non-reentrant model
  6787 ;;
  6788                           
  6789                           	psect	text52
  6790  000D64                     __ptext52:
  6791                           	opt stack 0
  6792  000D64                     _MSC_BufferCopyInt:
  6793                           	opt stack 18
  6794                           
  6795                           ;MISC.c: 217: unsigned int i=0;
  6796                           
  6797                           ;incstack = 0
  6798  000D64  0E00               	movlw	0
  6799  000D66  6E28               	movwf	MSC_BufferCopyInt@i+1,c
  6800  000D68  0E00               	movlw	0
  6801  000D6A  6E27               	movwf	MSC_BufferCopyInt@i,c
  6802                           
  6803                           ;MISC.c: 218: MSC_CleanBufferInt(to,count);
  6804  000D6C  C01F  F017         	movff	MSC_BufferCopyInt@to,i2MSC_CleanBufferInt@data
  6805  000D70  C020  F018         	movff	MSC_BufferCopyInt@to+1,i2MSC_CleanBufferInt@data+1
  6806  000D74  C021  F019         	movff	MSC_BufferCopyInt@count,i2MSC_CleanBufferInt@count
  6807  000D78  C022  F01A         	movff	MSC_BufferCopyInt@count+1,i2MSC_CleanBufferInt@count+1
  6808  000D7C  EC36  F008         	call	i2_MSC_CleanBufferInt	;wreg free
  6809                           
  6810                           ;MISC.c: 219: for(i = shift; i>0; i--)
  6811  000D80  C023  F027         	movff	MSC_BufferCopyInt@shift,MSC_BufferCopyInt@i
  6812  000D84  C024  F028         	movff	MSC_BufferCopyInt@shift+1,MSC_BufferCopyInt@i+1
  6813  000D88                     i2l3409:
  6814  000D88  5027               	movf	MSC_BufferCopyInt@i,w,c
  6815  000D8A  1028               	iorwf	MSC_BufferCopyInt@i+1,w,c
  6816  000D8C  B4D8               	btfsc	status,2,c
  6817  000D8E  D02B               	goto	i2l3429
  6818  000D90  D001               	goto	i2l3413
  6819  000D92  D029               	goto	i2l3429
  6820  000D94                     i2l3413:
  6821                           
  6822                           ;MISC.c: 220: {
  6823                           ;MISC.c: 221: *to = ' ';
  6824  000D94  C01F  FFD9         	movff	MSC_BufferCopyInt@to,fsr2l
  6825  000D98  C020  FFDA         	movff	MSC_BufferCopyInt@to+1,fsr2h
  6826  000D9C  0E20               	movlw	32
  6827  000D9E  6EDE               	movwf	postinc2,c
  6828  000DA0  0E00               	movlw	0
  6829  000DA2  6EDD               	movwf	postdec2,c
  6830                           
  6831                           ;MISC.c: 222: to++;
  6832  000DA4  0E02               	movlw	2
  6833  000DA6  261F               	addwf	MSC_BufferCopyInt@to,f,c
  6834  000DA8  0E00               	movlw	0
  6835  000DAA  2220               	addwfc	MSC_BufferCopyInt@to+1,f,c
  6836  000DAC  0627               	decf	MSC_BufferCopyInt@i,f,c
  6837  000DAE  A0D8               	btfss	status,0,c
  6838  000DB0  0628               	decf	MSC_BufferCopyInt@i+1,f,c
  6839  000DB2  D7EA               	goto	i2l3409
  6840                           
  6841                           ;MISC.c: 223: }
  6842                           ;MISC.c: 224: while(*from != 0 && count >0)
  6843  000DB4  D018               	goto	i2l3429
  6844  000DB6                     i2l3421:
  6845                           
  6846                           ;MISC.c: 225: {
  6847                           ;MISC.c: 226: *to = *from;
  6848  000DB6  C01D  FFD9         	movff	MSC_BufferCopyInt@from,fsr2l
  6849  000DBA  C01E  FFDA         	movff	MSC_BufferCopyInt@from+1,fsr2h
  6850  000DBE  C01F  FFE1         	movff	MSC_BufferCopyInt@to,fsr1l
  6851  000DC2  C020  FFE2         	movff	MSC_BufferCopyInt@to+1,fsr1h
  6852  000DC6  CFDE FFE6          	movff	postinc2,postinc1
  6853  000DCA  CFDD FFE5          	movff	postdec2,postdec1
  6854                           
  6855                           ;MISC.c: 227: from++;
  6856  000DCE  0E02               	movlw	2
  6857  000DD0  261D               	addwf	MSC_BufferCopyInt@from,f,c
  6858  000DD2  0E00               	movlw	0
  6859  000DD4  221E               	addwfc	MSC_BufferCopyInt@from+1,f,c
  6860                           
  6861                           ;MISC.c: 228: to++;
  6862  000DD6  0E02               	movlw	2
  6863  000DD8  261F               	addwf	MSC_BufferCopyInt@to,f,c
  6864  000DDA  0E00               	movlw	0
  6865  000DDC  2220               	addwfc	MSC_BufferCopyInt@to+1,f,c
  6866                           
  6867                           ;MISC.c: 229: count--;
  6868  000DDE  0621               	decf	MSC_BufferCopyInt@count,f,c
  6869  000DE0  A0D8               	btfss	status,0,c
  6870  000DE2  0622               	decf	MSC_BufferCopyInt@count+1,f,c
  6871  000DE4  D000               	goto	i2l3429
  6872  000DE6                     i2l3429:
  6873  000DE6  C01D  FFD9         	movff	MSC_BufferCopyInt@from,fsr2l
  6874  000DEA  C01E  FFDA         	movff	MSC_BufferCopyInt@from+1,fsr2h
  6875  000DEE  50DE               	movf	postinc2,w,c
  6876  000DF0  10DE               	iorwf	postinc2,w,c
  6877  000DF2  B4D8               	btfsc	status,2,c
  6878  000DF4  0012               	return	
  6879  000DF6  5021               	movf	MSC_BufferCopyInt@count,w,c
  6880  000DF8  1022               	iorwf	MSC_BufferCopyInt@count+1,w,c
  6881  000DFA  B4D8               	btfsc	status,2,c
  6882  000DFC  0012               	return	
  6883  000DFE  D7DB               	goto	i2l3421
  6884  000E00  0012               	return	
  6885  000E02  0012               	return		;funcret
  6886  000E04                     __end_of_MSC_BufferCopyInt:
  6887                           	opt stack 0
  6888                           pclatu	equ	0xFFB
  6889                           pclath	equ	0xFFA
  6890                           tblptru	equ	0xFF8
  6891                           tblptrh	equ	0xFF7
  6892                           tblptrl	equ	0xFF6
  6893                           tablat	equ	0xFF5
  6894                           prodh	equ	0xFF4
  6895                           prodl	equ	0xFF3
  6896                           intcon	equ	0xFF2
  6897                           intcon2	equ	0xFF1
  6898                           intcon3	equ	0xFF0
  6899                           postinc0	equ	0xFEE
  6900                           fsr0h	equ	0xFEA
  6901                           fsr0l	equ	0xFE9
  6902                           wreg	equ	0xFE8
  6903                           postinc1	equ	0xFE6
  6904                           postdec1	equ	0xFE5
  6905                           fsr1h	equ	0xFE2
  6906                           fsr1l	equ	0xFE1
  6907                           bsr	equ	0xFE0
  6908                           postinc2	equ	0xFDE
  6909                           postdec2	equ	0xFDD
  6910                           fsr2h	equ	0xFDA
  6911                           fsr2l	equ	0xFD9
  6912                           status	equ	0xFD8
  6913                           
  6914 ;; *************** function i2_MSC_CleanBufferInt *****************
  6915 ;; Defined at:
  6916 ;;		line 166 in file "MISC.c"
  6917 ;; Parameters:    Size  Location     Type
  6918 ;;  data            2   22[COMRAM] PTR unsigned int 
  6919 ;;		 -> RF_SavedTiming(240), RF_DataTiming(240), 
  6920 ;;  count           2   24[COMRAM] unsigned int 
  6921 ;; Auto vars:     Size  Location     Type
  6922 ;;  MSC_CleanBuf    2   26[COMRAM] unsigned int 
  6923 ;; Return value:  Size  Location     Type
  6924 ;;		None               void
  6925 ;; Registers used:
  6926 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6927 ;; Tracked objects:
  6928 ;;		On entry : 0/0
  6929 ;;		On exit  : 0/0
  6930 ;;		Unchanged: 0/0
  6931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6932 ;;      Params:         4       0       0       0       0
  6933 ;;      Locals:         2       0       0       0       0
  6934 ;;      Temps:          0       0       0       0       0
  6935 ;;      Totals:         6       0       0       0       0
  6936 ;;Total ram usage:        6 bytes
  6937 ;; Hardware stack levels used:    1
  6938 ;; This function calls:
  6939 ;;		Nothing
  6940 ;; This function is called by:
  6941 ;;		_MSC_BufferCopyInt
  6942 ;; This function uses a non-reentrant model
  6943 ;;
  6944                           
  6945                           	psect	text53
  6946  00106C                     __ptext53:
  6947                           	opt stack 0
  6948  00106C                     i2_MSC_CleanBufferInt:
  6949                           	opt stack 18
  6950                           
  6951                           ;MISC.c: 168: unsigned int i=0;
  6952                           
  6953                           ;incstack = 0
  6954  00106C  0E00               	movlw	0
  6955  00106E  6E1C               	movwf	i2MSC_CleanBufferInt@i+1,c
  6956  001070  0E00               	movlw	0
  6957  001072  6E1B               	movwf	i2MSC_CleanBufferInt@i,c
  6958                           
  6959                           ;MISC.c: 169: for(i=0; i<count;i++)
  6960  001074  0E00               	movlw	0
  6961  001076  6E1C               	movwf	i2MSC_CleanBufferInt@i+1,c
  6962  001078  0E00               	movlw	0
  6963  00107A  6E1B               	movwf	i2MSC_CleanBufferInt@i,c
  6964  00107C  D010               	goto	i2l3313
  6965  00107E                     i2l3309:
  6966                           
  6967                           ;MISC.c: 170: {
  6968                           ;MISC.c: 171: data[i]= 0;
  6969  00107E  90D8               	bcf	status,0,c
  6970  001080  341B               	rlcf	i2MSC_CleanBufferInt@i,w,c
  6971  001082  6ED9               	movwf	fsr2l,c
  6972  001084  341C               	rlcf	i2MSC_CleanBufferInt@i+1,w,c
  6973  001086  6EDA               	movwf	fsr2h,c
  6974  001088  5017               	movf	i2MSC_CleanBufferInt@data,w,c
  6975  00108A  26D9               	addwf	fsr2l,f,c
  6976  00108C  5018               	movf	i2MSC_CleanBufferInt@data+1,w,c
  6977  00108E  22DA               	addwfc	fsr2h,f,c
  6978  001090  0E00               	movlw	0
  6979  001092  6EDE               	movwf	postinc2,c
  6980  001094  0E00               	movlw	0
  6981  001096  6EDD               	movwf	postdec2,c
  6982  001098  4A1B               	infsnz	i2MSC_CleanBufferInt@i,f,c
  6983  00109A  2A1C               	incf	i2MSC_CleanBufferInt@i+1,f,c
  6984  00109C  D000               	goto	i2l3313
  6985  00109E                     i2l3313:
  6986  00109E  5019               	movf	i2MSC_CleanBufferInt@count,w,c
  6987  0010A0  5C1B               	subwf	i2MSC_CleanBufferInt@i,w,c
  6988  0010A2  501A               	movf	i2MSC_CleanBufferInt@count+1,w,c
  6989  0010A4  581C               	subwfb	i2MSC_CleanBufferInt@i+1,w,c
  6990  0010A6  A0D8               	btfss	status,0,c
  6991  0010A8  D7EA               	goto	i2l3309
  6992  0010AA  0012               	return		;funcret
  6993  0010AC                     __end_ofi2_MSC_CleanBufferInt:
  6994                           	opt stack 0
  6995                           pclatu	equ	0xFFB
  6996                           pclath	equ	0xFFA
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           intcon	equ	0xFF2
  7004                           intcon2	equ	0xFF1
  7005                           intcon3	equ	0xFF0
  7006                           postinc0	equ	0xFEE
  7007                           fsr0h	equ	0xFEA
  7008                           fsr0l	equ	0xFE9
  7009                           wreg	equ	0xFE8
  7010                           postinc1	equ	0xFE6
  7011                           postdec1	equ	0xFE5
  7012                           fsr1h	equ	0xFE2
  7013                           fsr1l	equ	0xFE1
  7014                           bsr	equ	0xFE0
  7015                           postinc2	equ	0xFDE
  7016                           postdec2	equ	0xFDD
  7017                           fsr2h	equ	0xFDA
  7018                           fsr2l	equ	0xFD9
  7019                           status	equ	0xFD8
  7020                           pclatu	equ	0xFFB
  7021                           pclath	equ	0xFFA
  7022                           tblptru	equ	0xFF8
  7023                           tblptrh	equ	0xFF7
  7024                           tblptrl	equ	0xFF6
  7025                           tablat	equ	0xFF5
  7026                           prodh	equ	0xFF4
  7027                           prodl	equ	0xFF3
  7028                           intcon	equ	0xFF2
  7029                           intcon2	equ	0xFF1
  7030                           intcon3	equ	0xFF0
  7031                           postinc0	equ	0xFEE
  7032                           fsr0h	equ	0xFEA
  7033                           fsr0l	equ	0xFE9
  7034                           wreg	equ	0xFE8
  7035                           postinc1	equ	0xFE6
  7036                           postdec1	equ	0xFE5
  7037                           fsr1h	equ	0xFE2
  7038                           fsr1l	equ	0xFE1
  7039                           bsr	equ	0xFE0
  7040                           postinc2	equ	0xFDE
  7041                           postdec2	equ	0xFDD
  7042                           fsr2h	equ	0xFDA
  7043                           fsr2l	equ	0xFD9
  7044                           status	equ	0xFD8
  7045                           
  7046                           	psect	rparam
  7047  0000                     pclatu	equ	0xFFB
  7048                           pclath	equ	0xFFA
  7049                           tblptru	equ	0xFF8
  7050                           tblptrh	equ	0xFF7
  7051                           tblptrl	equ	0xFF6
  7052                           tablat	equ	0xFF5
  7053                           prodh	equ	0xFF4
  7054                           prodl	equ	0xFF3
  7055                           intcon	equ	0xFF2
  7056                           intcon2	equ	0xFF1
  7057                           intcon3	equ	0xFF0
  7058                           postinc0	equ	0xFEE
  7059                           fsr0h	equ	0xFEA
  7060                           fsr0l	equ	0xFE9
  7061                           wreg	equ	0xFE8
  7062                           postinc1	equ	0xFE6
  7063                           postdec1	equ	0xFE5
  7064                           fsr1h	equ	0xFE2
  7065                           fsr1l	equ	0xFE1
  7066                           bsr	equ	0xFE0
  7067                           postinc2	equ	0xFDE
  7068                           postdec2	equ	0xFDD
  7069                           fsr2h	equ	0xFDA
  7070                           fsr2l	equ	0xFD9
  7071                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    166
    Data        3
    BSS         500
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     71      86
    BANK0           128     22      30
    BANK1           256      0     240
    BANK2           256      0     240
    BANK3           256      0       0

Pointer List with Targets:

    MSC_BufferCopyIntConst@from	PTR const unsigned int  size(2) Largest target is 100
		 -> CONF1_ChanE_Sync_Timing(CODE[100]), 

    MSC_BufferCopyIntConst@to	PTR unsigned int  size(2) Largest target is 240
		 -> RF_SavedTiming(BANK2[240]), 

    MSC_BufferCopyInt@from	PTR unsigned int  size(2) Largest target is 240
		 -> RF_DataTiming(BANK1[240]), 

    MSC_BufferCopyInt@to	PTR unsigned int  size(2) Largest target is 240
		 -> RF_SavedTiming(BANK2[240]), 

    MSC_CleanBufferInt@data	PTR unsigned int  size(2) Largest target is 240
		 -> RF_SavedTiming(BANK2[240]), RF_DataTiming(BANK1[240]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    _high_isr->_RF_CheckCode
    _TMR_Timer0Start->i2_TMR_ResetTimer0
    i2_TMR_ResetTimer0->i2_TMR_Timer0
    _RF_CheckCode->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft
    ___ftge->___lwtoft
    _MSC_BufferCopyInt->i2_MSC_CleanBufferInt

Critical Paths under _low_isr in COMRAM

    _low_isr->_TMR_Timer2Start
    _TMR_Timer2Start->_TMR_ResetTimer2
    _TMR_ResetTimer2->i1_TMR_Timer2

Critical Paths under _main in BANK0

    _main->_TMR_LoadDefaultCode
    _TMR_LoadDefaultCode->_MSC_BufferCopyIntConst
    _MSC_BufferCopyIntConst->_MSC_CleanBufferInt
    _MTR_Rotate->_MSC_DelayMS
    _MSC_BlinkLED->_MSC_DelayMS
    _MSC_DelayMS->_MSC_DelayNOP
    _InitTimer2->_TMR_Timer2
    _InitTimer2->_TMR_Timer2Int
    _InitTimer0->_TMR_ResetTimer0
    _TMR_ResetTimer0->_TMR_Timer0
    _InitRF->_MSC_CleanBufferInt
    _InitButton->_BUT_IR_PinChangeInt

Critical Paths under _high_isr in BANK0

    None.

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3627
                           _Init_App
                        _Init_System
                       _MSC_BlinkLED
                        _MSC_DelayMS
                         _MTR_Rotate
            _SYS_ConfigureOscillator
                _TMR_LoadDefaultCode
 ---------------------------------------------------------------------------------
 (1) _TMR_LoadDefaultCode                                  6     6      0    1640
                                             16 BANK0      6     6      0
             _MSC_BufferCopyIntConst
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     796
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (2) _MSC_BufferCopyIntConst                              10     2      8     796
                                              6 BANK0     10     2      8
                 _MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (1) _SYS_ConfigureOscillator                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MTR_Rotate                                           0     0      0     401
                        _MSC_DelayMS
                            _MTR_IN1
                            _MTR_IN2
 ---------------------------------------------------------------------------------
 (2) _MTR_IN2                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTR_IN1                                              1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MSC_BlinkLED                                         6     4      2     562
                                             13 BANK0      6     4      2
                        _MSC_DelayMS
 ---------------------------------------------------------------------------------
 (2) _MSC_DelayMS                                          9     5      4     357
                                              4 BANK0      9     5      4
                       _MSC_DelayNOP
 ---------------------------------------------------------------------------------
 (3) _MSC_DelayNOP                                         4     2      2      99
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0     667
                     _BUT_ReadButton
                            _InitADC
                         _InitButton
                          _InitFlash
                             _InitIR
                            _InitLDO
                          _InitMOTOR
                             _InitRF
                         _InitTimers
 ---------------------------------------------------------------------------------
 (2) _InitTimers                                           0     0      0     133
                         _InitTimer0
                         _InitTimer2
 ---------------------------------------------------------------------------------
 (3) _InitTimer2                                           0     0      0      44
                         _TMR_Timer2
                      _TMR_Timer2Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2Int                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer0                                           0     0      0      89
                    _TMR_ResetTimer0
                         _TMR_Timer0
                      _TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer0Int                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_ResetTimer0                                      1     1      0      45
                                              1 BANK0      1     1      0
                         _TMR_Timer0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer0                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitRF                                               0     0      0     489
                 _MSC_CleanBufferInt
                         _RF_DataInt
                        _RF_Receiver
                    _RF_SetBandwidth
                      _RF_SetSquelch
 ---------------------------------------------------------------------------------
 (3) _RF_SetSquelch                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_SetBandwidth                                      1     1      0      66
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_Receiver                                          1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_DataInt                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _MSC_CleanBufferInt                                   6     2      4     357
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _InitMOTOR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitLDO                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitIR                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitFlash                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitButton                                           0     0      0      22
                _BUT_IR_PinChangeInt
 ---------------------------------------------------------------------------------
 (3) _BUT_IR_PinChangeInt                                  1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _BUT_ReadButton                                       1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_App                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _low_isr                                             18    18      0     286
                                              4 COMRAM    18    18      0
                    _IR_ReadReceiver
                    _TMR_Timer2Start
                   i1_BUT_ReadButton
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (7) i1_BUT_ReadButton                                     1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _TMR_Timer2Start                                      2     0      2     195
                                              2 COMRAM     2     0      2
                    _TMR_ResetTimer2
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) _TMR_ResetTimer2                                      1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (7) i1_TMR_Timer2                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (7) _IR_ReadReceiver                                      1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _high_isr                                           16    16      0    7057
                                             55 COMRAM    16    16      0
                       _RF_CheckCode
                     _RF_ResetRFData
                    _TMR_Timer0Start
                   _TMR_Timer0Status
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (11) _TMR_Timer0Status                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR_Timer0Start                                     0     0      0      67
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (11) i2_TMR_ResetTimer0                                   1     1      0      45
                                             23 COMRAM     1     1      0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (11) i2_TMR_Timer0                                        1     1      0      22
                                             22 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (11) _RF_ResetRFData                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _RF_CheckCode                                        7     7      0    6810
                                             48 COMRAM     7     7      0
                  _MSC_BufferCopyInt
                             ___ftge
                            ___ftmul
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (12) ___lwtoft                                            3     0      3    2075
                                             30 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (12) ___ftmul                                            15     9      6    3257
                                             33 COMRAM    15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (13) ___ftpack                                            8     3      5    1629
                                             22 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (12) ___ftge                                              9     3      6     668
                                             33 COMRAM     9     3      6
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (12) _MSC_BufferCopyInt                                  12     4      8     582
                                             28 COMRAM    12     4      8
               i2_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (13) i2_MSC_CleanBufferInt                                6     2      4     143
                                             22 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_App
   _Init_System
     _BUT_ReadButton
     _InitADC
     _InitButton
       _BUT_IR_PinChangeInt
     _InitFlash
     _InitIR
     _InitLDO
     _InitMOTOR
     _InitRF
       _MSC_CleanBufferInt
       _RF_DataInt
       _RF_Receiver
       _RF_SetBandwidth
       _RF_SetSquelch
     _InitTimers
       _InitTimer0
         _TMR_ResetTimer0
           _TMR_Timer0
         _TMR_Timer0
         _TMR_Timer0Int
       _InitTimer2
         _TMR_Timer2
         _TMR_Timer2Int
   _MSC_BlinkLED
     _MSC_DelayMS
       _MSC_DelayNOP
   _MSC_DelayMS
     _MSC_DelayNOP
   _MTR_Rotate
     _MSC_DelayMS
       _MSC_DelayNOP
     _MTR_IN1
     _MTR_IN2
   _SYS_ConfigureOscillator
   _TMR_LoadDefaultCode
     _MSC_BufferCopyIntConst
       _MSC_CleanBufferInt
     ___fttol

 _low_isr (ROOT)
   _IR_ReadReceiver
   _TMR_Timer2Start
     _TMR_ResetTimer2
       i1_TMR_Timer2
     i1_TMR_Timer2
   i1_BUT_ReadButton
   i1_TMR_Timer2

 _high_isr (ROOT)
   _RF_CheckCode
     _MSC_BufferCopyInt
       i2_MSC_CleanBufferInt
     ___ftge
       ___lwtoft (ARG)
         ___ftpack
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___lwtoft
       ___ftpack
   _RF_ResetRFData
   _TMR_Timer0Start
     i2_TMR_ResetTimer0
       i2_TMR_Timer0
     i2_TMR_Timer0
   _TMR_Timer0Status
   i2_TMR_ResetTimer0
     i2_TMR_Timer0
   i2_TMR_Timer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3FF      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      F0       8       93.8%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0      F0       6       93.8%
BITBANK0            80      0       0       3        0.0%
BANK0               80     16      1E       4       23.4%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     47      56       1       67.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     254      11        0.0%
DATA                 0      0     254      13        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Aug 26 18:50:25 2015

         MSC_BufferCopyIntConst@i 008E           __end_of_IR_ReadReceiver 1480  
        MSC_BufferCopyIntConst@to 0088                        _RF_SyncLow 004A  
              TMR_Timer0Int@state 0080                       __CFG_CP0$ON 000000  
                     _RF_SyncHigh 0048         i2MSC_CleanBufferInt@count 0019  
                              bsr 000FE0                        _TMR_Timer0 13B6  
                      _TMR_Timer2 1386                               l252 131C  
                             l361 1206                               l804 13B0  
                             l735 1410                               l744 1174  
                             l809 1380                               l746 118A  
                             l783 13C8                               l788 1398  
                             _PR2 000FCB                TMR_Timer2Int@state 0080  
                             prod 000FF3                               wreg 000FE8  
                  ?_RF_SetSquelch 0001                              l3211 1138  
                            l3205 13F8                              l3215 1146  
                            l3233 1002                              l3225 13E0  
           ?i2_MSC_CleanBufferInt 0017                              l3219 1156  
                            l3341 117E                              l3229 0FD8  
                            l3325 0F16                              l3239 1210  
                            l3329 0F34                              l3443 1350  
                            l3437 1368                              l3391 0C56  
                            l3383 0C30                              l3551 0782  
                            l3561 07C0                              l3529 06DA  
                            l3801 0AD4                              l3379 0C20  
                            l3547 076E                              l3811 0AEC  
                            l3565 07DE                              l3557 07A0  
                            l3813 0AF0                              l3671 1046  
                            l3399 0C90                              l3559 07B2  
                            l3665 1024                              l3683 0EF4  
                            l3781 0A80                              l3679 0ECA  
                            l3793 0AB4                              l3777 0A6E  
                            l3795 0ABC             ??_TMR_LoadDefaultCode 0090  
                            _LATA 000F89                              _LATB 000F8A  
                            _LATC 000F8B                              u3451 06B6  
                            u3470 0700                              u3475 06F6  
                            _TMR2 000FCC                  ?_RF_SetBandwidth 0001  
          __size_of_TMR_Timer0Int 0018            __size_of_TMR_Timer2Int 0018  
                 __end_of_MTR_IN1 136E                   __end_of_MTR_IN2 1356  
                            _main 0A44                      ___ftpack@arg 0017  
                    ___ftpack@exp 001A                              fsr0h 000FEA  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              fsr1l 000FE1  
                            fsr2l 000FD9                              pclat 000FFA  
                            prodh 000FF4                              prodl 000FF3  
                            start 0154                     __CFG_IESO$OFF 000000  
                   __CFG_FOSC2$ON 000000                MSC_BufferCopyInt@i 0027  
                 ?_RF_ResetRFData 0001                      ___ftmul@cntr 002F  
                    ___param_bank 000010                      ___ftmul@sign 0030  
                 __end_of_InitADC 1494                   __end_of_InitLDO 148E  
                    ___fttol@exp1 008E                     ??_Init_System 0086  
                    ___fttol@lval 008A                             ?_main 0001  
                 __end_of___ftmul 0A44                   __end_of___fttol 07F2  
                           i1l150 010E                             i1l134 00C8  
                           i1l143 010A                             i2l114 08EE  
                           i2l131 0908                             i2l124 08E2  
                           i2l117 083E                             i2l119 0894  
                           i2l129 0904                             i1l744 11AA  
                           i1l746 11C0                             i1l788 1422  
                           i2l783 1446                             _TMR0H 000FD7  
                           _TMR0L 000FD6                             _PORTB 000F81  
             BUT_ReadButton@value 0080                    __CFG_FCMEN$OFF 000000  
               _MSC_BufferCopyInt 0D64                             _errno 0050  
                   ___ftpack@sign 001B                RF_SetSquelch@state 0080  
                     ?_RF_DataInt 0001                   __end_of_low_isr 0154  
              ?_MSC_BufferCopyInt 001D                             tablat 000FF5  
         _CONF1_ChanE_Sync_Timing 040A                             status 000FD8  
                     ?_MTR_Rotate 0001               MSC_BufferCopyInt@to 001F  
        ??_MSC_BufferCopyIntConst 008E               ??_MSC_BufferCopyInt 0025  
                      _InitButton 1464                   __initialization 0F66  
                      _InitTimer0 12C8                        _InitTimer2 12EA  
                      _InitTimers 145A                      __end_of_main 0B34  
                ?_IR_ReadReceiver 0001                  _ButtonValue_prev 009B  
                __end_of_Init_App 1124                     _TMR_Timer0Int 139E  
                   _TMR_Timer2Int 136E                       ?_TMR_Timer0 0001  
                     ?_TMR_Timer2 0001                      ?_MSC_DelayMS 0084  
                          ??_main 0096                     ___fttol@sign1 0089  
                   __activetblptr 000001               TMR_Timer2Start@time 0003  
             __end_of_Init_System 11FA         __end_of_MSC_BufferCopyInt 0E04  
                 ??_RF_SetSquelch 0080            ??i2_MSC_CleanBufferInt 001B  
                       ??_MTR_IN1 0080                         ??_MTR_IN2 0080  
                __end_of___ftpack 0BFA          __size_of_TMR_ResetTimer0 002C  
        __size_of_TMR_ResetTimer2 002A                  _TMR_Timer0Status 144C  
              __size_of_InitMOTOR 0004                            i1l3901 00C4  
                          i2l1158 0BD0                            i1l3911 00EA  
                          i1l3915 0100                            i1l3757 11B4  
                          i1l3917 0106                            i2l3303 0BEA  
                          i2l3313 109E                            i2l3309 107E  
                          i2l3421 0DB6                            i2l3413 0D94  
                          i2l3501 0A1C                            i1l3893 00A6  
                  __CFG_WDTEN$OFF 000000                            i2l3409 0D88  
                          i2l3513 0E68                            i2l3281 0B60  
                          i1l3897 00B8                            i1l3889 0094  
                          i2l3291 0BC4                            i2l3283 0B80  
                          i2l3275 0B44                            i1l3899 00BE  
                          i2l3429 0DE6                            i2l3509 0E36  
                          i2l3519 0E94                            i2l3287 0B98  
                          i2l3279 0B54                            i2l3463 096A  
                          i2l3297 0BD8                            i2l3289 0BB8  
                          i2l3713 0654                            i2l3705 04D0  
                          i2l3491 09EE                            i2l3483 09C6  
                          i2l3493 09F4                            i2l3469 0992  
                          i2l3733 069A                            i2l3717 0658  
                          i2l3709 0554                            i2l3487 09D8  
                          i2l3719 065C                            i2l3727 0668  
                          i2l3497 0A06                            i2l3843 0876  
                          i2l3693 1454                            i2l3829 082E  
                          i2l3863 08D6                            i2l3865 08E8  
                          u336_41 0952                  __end_of___lwtoft 12C8  
                          u338_41 097A                __size_of_InitFlash 0002  
                    _System_State 009D                         ??_InitADC 0080  
                       ??_InitLDO 0080          __size_of_TMR_Timer0Start 0012  
                          _InitIR 148E                            _InitRF 10AC  
        __size_of_TMR_Timer2Start 001A        MSC_BufferCopyIntConst@from 0086  
                  __CFG_XINST$OFF 000000                        _Timer2Post 004C  
                __end_of_high_isr 0942                 ?i1_BUT_ReadButton 0001  
                          ___ftge 0E04           __size_of_BUT_ReadButton 0038  
                  __CFG_STVREN$ON 000000                         ??___ftmul 0028  
                       ??___fttol 0084      __size_of_BUT_IR_PinChangeInt 0018  
                  ?_TMR_Timer0Int 0001                    ?_TMR_Timer2Int 0001  
        i2MSC_CleanBufferInt@data 0017                ??i1_BUT_ReadButton 0001  
                          clear_0 0F6C                            clear_1 0F78  
                          clear_2 0F90               __size_of_RF_DataInt 001C  
           ___ftmul@f3_as_product 002C               __size_of_MTR_Rotate 0068  
                    __mediumconst 0000                         ??_low_isr 0005  
                          tblptrh 000FF7                            tblptrl 000FF6  
                          tblptru 000FF8                 i2_TMR_ResetTimer0 127C  
                 __CFG_FOSC$HSPLL 000000                  __end_ofexp@coeff 048C  
                __end_oflog@coeff 04A7                   TMR_Timer0@state 0080  
                      __accesstop 0080           __end_of__initialization 0FB4  
                 TMR_Timer2@state 0080                      ?_RF_Receiver 0001  
              ?i2_TMR_ResetTimer0 0001                        ___ftge@ff1 0022  
                      ___ftge@ff2 0025               __size_of_TMR_Timer0 0018  
             __size_of_TMR_Timer2 0018                     ___rparam_used 000001  
 __size_of_MSC_BufferCopyIntConst 00BC                    high_isr@RFtemp 0046  
                     ?_InitButton 0001                        ___ftmul@f1 0022  
                      ___ftmul@f2 0025                        ___fttol@f1 0080  
                  __pcstackCOMRAM 0001                       ?_InitTimer0 0001  
                     ?_InitTimer2 0001                       ?_InitTimers 0001  
             ??i2_TMR_ResetTimer0 0018                      __pidataBANK0 1488  
            IR_ReadReceiver@value 0001                       _Init_System 11CC  
               __end_of_InitMOTOR 1488                       _Button_Data 0096  
               __end_of_InitFlash 1492                        ___lwtoft@c 001F  
      __end_of_MSC_CleanBufferInt 1018          ?_SYS_ConfigureOscillator 0001  
      __size_of_MSC_BufferCopyInt 00A0                  RF_Receiver@state 0080  
                   ?_MSC_DelayNOP 0080         __end_ofi2_TMR_ResetTimer0 12A2  
                   ?_MSC_BlinkLED 008D                        __pbssBANK0 0096  
                      __pbssBANK1 0100                        __pbssBANK2 0200  
                       ?_Init_App 0001                  RF_CheckCode@High 0034  
                   ?i1_TMR_Timer2 0001                  ??_RF_ResetRFData 0017  
               ??_TMR_ResetTimer0 0081                 ??_TMR_ResetTimer2 0002  
                         ?_InitIR 0001                           ?_InitRF 0001  
                 ??_TMR_Timer0Int 0080                   ??_TMR_Timer2Int 0080  
                         ?___ftge 0022                 ??_TMR_Timer0Start 0019  
               ??_TMR_Timer2Start 0005                         ?___ftpack 0017  
                   ?i2_TMR_Timer0 0001                         ?___lwtoft 001F  
          _MSC_BufferCopyIntConst 0BFA              __size_of_MSC_DelayMS 0064  
     __end_of_TMR_LoadDefaultCode 0D64                     MSC_DelayMS@US 0084  
                   MSC_DelayNOP@i 0082                    ??_MSC_DelayNOP 0082  
                         _IR_Data 0098               __size_of_InitButton 000A  
                  ??_MSC_BlinkLED 008F                           _MTR_IN1 1356  
                         _MTR_IN2 133E                           _RF_Data 0099  
             __size_of_InitTimer0 0022               __size_of_InitTimer2 001E  
                   MSC_BlinkLED@i 0091               __size_of_InitTimers 000A  
                       ?_high_isr 0001                      ??_RF_DataInt 0080  
                  ??i1_TMR_Timer2 0001                        ??_Init_App 0080  
                 _Timer2PostCount 004E                           _InitADC 1492  
                    ??_MTR_Rotate 008D                           _InitLDO 148C  
     MSC_BufferCopyIntConst@count 008A                           __Hparam 0000  
     MSC_BufferCopyIntConst@shift 008C                   __size_of_InitIR 0002  
                 __size_of_InitRF 003C                           __Lparam 0000  
        __size_of_RF_SetBandwidth 003A             i2MSC_CleanBufferInt@i 001B  
                  _BUT_ReadButton 115E                   __size_of___ftge 0096  
                         ___ftmul 0942                           ___fttol 06A0  
                    __psmallconst 0400   __end_of_SYS_ConfigureOscillator 1484  
        __end_of_TMR_Timer0Status 145A                           __pcinit 0F66  
                  ??i2_TMR_Timer0 0017                        ??___ftpack 001C  
                         __ramtop 0400                      ??_TMR_Timer0 0080  
                    ??_TMR_Timer2 0080                           __ptext0 0A44  
                         __ptext1 0CB6                           __ptext2 06A0  
                         __ptext3 0BFA                           __ptext4 1480  
                         __ptext5 0E9A                           __ptext6 133E  
                         __ptext7 1356                           __ptext8 1018  
                         __ptext9 0F02                __end_of_RF_DataInt 1324  
                      ??___lwtoft 0022                         _T0CONbits 000FD5  
                       _T2CONbits 000FCA                __end_of_MTR_Rotate 0F02  
                         _low_isr 0018          BUT_IR_PinChangeInt@state 0080  
      __size_ofi2_TMR_ResetTimer0 0026                        ??_high_isr 0038  
                  __pintcode_body 07F2               _BUT_IR_PinChangeInt 13FE  
                   ?_RF_CheckCode 0001              end_of_initialization 0FB4  
          TMR_LoadDefaultCode@Low 0090                           int_func 07F2  
              __end_of_TMR_Timer0 13CE                __end_of_TMR_Timer2 139E  
          __end_of_BUT_ReadButton 1196              __size_of_RF_Receiver 0018  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE              ?_BUT_IR_PinChangeInt 0001  
        __size_of_IR_ReadReceiver 0008                         _TRISAbits 000F92  
           MSC_BufferCopyInt@from 001D                         _TRISBbits 000F93  
                       _TRISCbits 000F94         __size_ofi1_BUT_ReadButton 0036  
                       _RFStarted 0053             __end_of_RF_SetSquelch 13E6  
                  ??_RF_CheckCode 0031     __size_ofi2_MSC_CleanBufferInt 0040  
                 ?_BUT_ReadButton 0001                      ??_InitButton 0081  
                     ___ftmul@exp 002B                      ??_InitTimer0 0082  
                    ??_InitTimer2 0081                    __end_of_InitIR 1490  
                  __end_of_InitRF 10E8                      ??_InitTimers 0082  
            __end_of_MSC_DelayNOP 1226             ??_BUT_IR_PinChangeInt 0080  
            __end_of_MSC_BlinkLED 106C                    __end_of___ftge 0E9A  
                    ?_Init_System 0001                 ??_RF_SetBandwidth 0080  
            __end_ofi1_TMR_Timer2 1428                         _InitMOTOR 1484  
                    _ButtonChange 0052             i1BUT_ReadButton@value 0001  
             start_initialization 0F66                         _InitFlash 1490  
                 _TMR_ResetTimer0 1226                   _TMR_ResetTimer2 1252  
              __end_of_InitButton 146E                __end_of_InitTimer0 12EA  
              __end_of_InitTimer2 1308                __end_of_InitTimers 1464  
              _MSC_CleanBufferInt 0FC2              __end_ofi2_TMR_Timer0 144C  
__size_of_SYS_ConfigureOscillator 0004                   _TMR_Timer0Start 1428  
                 _TMR_Timer2Start 1324                 __size_of_Init_App 003C  
                        ??_InitIR 0080                          ??_InitRF 0086  
             ?_MSC_CleanBufferInt 0080                         _Timer2Use 0056  
          TMR_ResetTimer0@TimerOn 0081               MSC_CleanBufferInt@i 0084  
                        ??___ftge 0028            TMR_ResetTimer2@TimerOn 0002  
                     __pdataBANK0 009B           ?_MSC_BufferCopyIntConst 0086  
               __size_of___ftpack 00C6                        ?_InitMOTOR 0001  
            ??_MSC_CleanBufferInt 0084                       __pbssCOMRAM 0048  
                      ?_InitFlash 0001                 __size_of___lwtoft 0026  
                   __pcstackBANK0 0080                          ?_MTR_IN1 0001  
                        ?_MTR_IN2 0001                 ??_IR_ReadReceiver 0001  
             __CFG_CCP2MX$DEFAULT 000000           MSC_CleanBufferInt@count 0082  
               __size_of_high_isr 093A                          ?_InitADC 0001  
                        ?_InitLDO 0001                   RF_CheckCode@Low 0031  
             _System_State_Change 009A                         __pintcode 0008  
                 RF_DataInt@state 0080                          ?___ftmul 0022  
                        ?___fttol 0080    __end_of_MSC_BufferCopyIntConst 0CB6  
           __end_of_TMR_Timer0Int 13B6             __end_of_TMR_Timer2Int 1386  
            __end_of_RF_CheckCode 06A0                       __pintcodelo 0018  
                    MSC_DelayMS@i 0089                 ?_TMR_Timer0Status 0001  
                   ??_MSC_DelayMS 0088           __end_of_TMR_ResetTimer0 1252  
         __end_of_TMR_ResetTimer2 127C                ??_TMR_Timer0Status 0017  
                     __smallconst 0400                          ?_low_isr 0001  
                i1_BUT_ReadButton 1196               __end_of_PCB_Version 040A  
         __end_of_TMR_Timer0Start 143A           __end_of_TMR_Timer2Start 133E  
    __size_of_TMR_LoadDefaultCode 00AE                          _DC_Motor 0097  
             RF_SetBandwidth@band 0080             __size_of_MSC_DelayNOP 002C  
                        _IPR1bits 000F9F                          _PIE1bits 000F9D  
           __size_of_MSC_BlinkLED 0054                          _PIR1bits 000F9E  
                        _RCONbits 000FD0                  __CFG_WDTPS$32768 000000  
           __size_ofi1_TMR_Timer2 0012           __size_of_RF_ResetRFData 000A  
                        _RF_Saved 009C   __end_of_CONF1_ChanE_Sync_Timing 046E  
                      _ADCON1bits 000FC1              __size_of_Init_System 002E  
                     ??_InitMOTOR 0080                       ??_InitFlash 0080  
             __end_of_MSC_DelayMS 0F66             __size_ofi2_TMR_Timer0 0012  
                    _MSC_DelayNOP 11FA                       _INTCON2bits 000FF1  
                     _INTCON3bits 000FF0                  __size_of_MTR_IN1 0018  
                __size_of_MTR_IN2 0018                      _MSC_BlinkLED 1018  
         _SYS_ConfigureOscillator 1480                  ??_BUT_ReadButton 0080  
                        _Init_App 10E8                     ??_RF_Receiver 0080  
                    i1_TMR_Timer2 1416                  __size_of_InitADC 0002  
                __size_of_InitLDO 0002                   _RF_SetBandwidth 1124  
                        __Hrparam 0000                          __Lrparam 0000  
                    __Lsmallconst 0400      __end_ofi2_MSC_CleanBufferInt 10AC  
                __size_of___ftmul 0102                  __size_of___fttol 0152  
                        ___ftpack 0B34                      i2_TMR_Timer0 143A  
                     _PCB_Version 0401                          ___lwtoft 12A2  
          MSC_CleanBufferInt@data 0080                  ?_TMR_ResetTimer0 0001  
                ?_TMR_ResetTimer2 0001               low_isr@button_state 0016  
                   _RF_DataTiming 0100                  __size_of_low_isr 013C  
                        __ptext10 11FA                          __ptext11 11CC  
                        __ptext20 10AC                          __ptext12 145A  
                        __ptext21 13CE                          __ptext13 12EA  
                        __ptext30 1464                          __ptext22 1124  
                        __ptext14 136E                          __ptext31 13FE  
                        __ptext23 13E6                          __ptext15 1386  
                        __ptext40 1478                          __ptext32 1492  
                        __ptext24 1308                          __ptext16 12C8  
                        __ptext33 115E                          __ptext25 0FC2  
                        __ptext17 139E                          __ptext50 0B34  
                        __ptext42 144C                          __ptext34 10E8  
                        __ptext26 1484                          __ptext18 1226  
                        __ptext51 0E04                          __ptext43 1428  
                        __ptext27 148C                          __ptext19 13B6  
                        __ptext52 0D64                          __ptext44 127C  
                        __ptext36 1196                          __ptext28 148E  
                        __ptext53 106C                          __ptext45 143A  
                        __ptext37 1324                          __ptext29 1490  
                        __ptext46 146E                          __ptext38 1252  
                        __ptext47 04A8                          __ptext39 1416  
                        __ptext48 12A2                          __ptext49 0942  
                ?_TMR_Timer0Start 0001                          _high_isr 0008  
                ?_TMR_Timer2Start 0003                 i1TMR_Timer2@state 0001  
                   __size_of_main 00F0       __end_of_BUT_IR_PinChangeInt 1416  
           __size_of_RF_CheckCode 01F8                      MTR_IN1@state 0080  
             __end_of_RF_Receiver 13FE                      MTR_IN2@state 0080  
          __size_of_RF_SetSquelch 0018                   _IR_ReadReceiver 1478  
                     _MSC_DelayMS 0F02                          exp@coeff 046E  
                        log@coeff 048C                        _INTCONbits 000FF2  
         TMR_LoadDefaultCode@High 0093         ??_SYS_ConfigureOscillator 0080  
                MSC_DelayNOP@NOPs 0080                      _RF_CheckCode 04A8  
                        intlevel1 0000                          intlevel2 0000  
         __end_of_RF_SetBandwidth 115E                      _RF_DataPlace 0055  
                   RF_CheckCode@i 0037                 i2TMR_Timer0@state 0017  
        __end_ofi1_BUT_ReadButton 11CC                    _RF_SavedTiming 0200  
                  _RF_ResetRFData 146E               _TMR_LoadDefaultCode 0CB6  
                     _RF_CodeSize 0054       __size_of_MSC_CleanBufferInt 0056  
                   _RF_SetSquelch 13CE                        _RF_DataInt 1308  
            i2_MSC_CleanBufferInt 106C         __size_of_TMR_Timer0Status 000E  
            ?_TMR_LoadDefaultCode 0001                 MSC_BlinkLED@blink 008D  
                     _RF_Receiver 13E6          i2TMR_ResetTimer0@TimerOn 0018  
                      _MTR_Rotate 0E9A            MSC_BufferCopyInt@count 0021  
          __end_of_RF_ResetRFData 1478            MSC_BufferCopyInt@shift 0023  
