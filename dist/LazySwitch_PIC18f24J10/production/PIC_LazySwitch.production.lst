

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Aug 28 20:08:08 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F24J10
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	_FlashWaste_const,global,ovrld,reloc=2,class=CODE,delta=1
     9                           	psect	_IR_SavedTiming_const,global,ovrld,reloc=2,class=CODE,delta=1
    10                           	psect	_RF_SavedTiming_const,global,ovrld,reloc=2,class=CODE,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   116                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   143                           	psect	param0,global,class=BANK0,space=1,delta=1
   144  0000                     
   145                           	psect	idataCOMRAM
   146  001D70                     __pidataCOMRAM:
   147                           	opt stack 0
   148                           
   149                           ;initializer for _ADC_CurrentSource
   150  001D70  0A                 	db	10
   151                           
   152                           	psect	idataBANK0
   153  001D58                     __pidataBANK0:
   154                           	opt stack 0
   155                           
   156                           ;initializer for _Rail_VIN
   157  001D58  00                 	db	0
   158  001D59  90                 	db	144
   159  001D5A  40                 	db	64
   160                           
   161                           ;initializer for _IR_Saved
   162  001D5B  5B                 	db	91
   163                           
   164                           ;initializer for _RF_Saved
   165  001D5C  5B                 	db	91
   166                           
   167                           ;initializer for _System_State
   168  001D5D  08                 	db	8
   169                           
   170                           	psect	mediumconst
   171  002800                     __pmediumconst:
   172                           	opt stack 0
   173  002800  00                 	db	0
   174  002801                     _PCB_Version:
   175                           	opt stack 0
   176  002801  50                 	db	80
   177  002802  43                 	db	67
   178  002803  42                 	db	66
   179  002804  20                 	db	32
   180  002805  72                 	db	114
   181  002806  65                 	db	101
   182  002807  76                 	db	118
   183  002808  42                 	db	66
   184  002809  00                 	db	0
   185  00280A                     __end_of_PCB_Version:
   186                           	opt stack 0
   187  0000                     _FlashWaste_absconstaddr	set	9728
   188  0000                     _IR_SavedTiming_absconstaddr	set	9216
   189  0000                     _RF_SavedTiming_absconstaddr	set	9472
   190  00280A  00                 	db	0
   191  00280B  80                 	db	128
   192  00280C  3F                 	db	63
   193  00280D  72                 	db	114
   194  00280E  31                 	db	49
   195  00280F  3F                 	db	63
   196  002810  FE                 	db	254
   197  002811  75                 	db	117
   198  002812  3E                 	db	62
   199  002813  58                 	db	88
   200  002814  63                 	db	99
   201  002815  3D                 	db	61
   202  002816  95                 	db	149
   203  002817  1D                 	db	29
   204  002818  3C                 	db	60
   205  002819  C5                 	db	197
   206  00281A  AE                 	db	174
   207  00281B  3A                 	db	58
   208  00281C  79                 	db	121
   209  00281D  21                 	db	33
   210  00281E  39                 	db	57
   211  00281F  94                 	db	148
   212  002820  80                 	db	128
   213  002821  37                 	db	55
   214  002822  93                 	db	147
   215  002823  A7                 	db	167
   216  002824  35                 	db	53
   217  002825  56                 	db	86
   218  002826  15                 	db	21
   219  002827  34                 	db	52
   220  002828                     __end_ofexp@coeff:
   221                           	opt stack 0
   222  002828  00                 	db	0
   223  002829  00                 	db	0
   224  00282A  00                 	db	0
   225  00282B  00                 	db	0
   226  00282C  80                 	db	128
   227  00282D  3F                 	db	63
   228  00282E  F0                 	db	240
   229  00282F  FF                 	db	255
   230  002830  BE                 	db	190
   231  002831  E2                 	db	226
   232  002832  A9                 	db	169
   233  002833  3E                 	db	62
   234  002834  83                 	db	131
   235  002835  76                 	db	118
   236  002836  BE                 	db	190
   237  002837  AE                 	db	174
   238  002838  2B                 	db	43
   239  002839  3E                 	db	62
   240  00283A  3C                 	db	60
   241  00283B  C3                 	db	195
   242  00283C  BD                 	db	189
   243  00283D  D2                 	db	210
   244  00283E  13                 	db	19
   245  00283F  3D                 	db	61
   246  002840  78                 	db	120
   247  002841  D3                 	db	211
   248  002842  BB                 	db	187
   249  002843                     __end_oflog@coeff:
   250                           	opt stack 0
   251  0000                     _FlashWaste_absconstaddr	set	9728
   252  002843  00                 	db	0	; dummy byte at the end
   253  0000                     
   254                           	psect	_FlashWaste_const
   255  002600                     __p_FlashWaste_const:
   256                           	opt stack 0
   257  002600                     _FlashWaste:
   258                           	opt stack 0
   259  002600  DA                 	db	218
   260  002601  DA                 	db	218
   261  002602  DA                 	db	218
   262  002603  DA                 	db	218
   263  002604  DA                 	db	218
   264  002605  DA                 	db	218
   265  002606  DA                 	db	218
   266  002607  DA                 	db	218
   267  002608  DA                 	db	218
   268  002609  DA                 	db	218
   269  00260A  DA                 	db	218
   270  00260B  DA                 	db	218
   271  00260C  DA                 	db	218
   272  00260D  DA                 	db	218
   273  00260E  DA                 	db	218
   274  00260F  DA                 	db	218
   275  002610  DA                 	db	218
   276  002611  DA                 	db	218
   277  002612  DA                 	db	218
   278  002613  DA                 	db	218
   279  002614  DA                 	db	218
   280  002615  DA                 	db	218
   281  002616  DA                 	db	218
   282  002617  DA                 	db	218
   283  002618  DA                 	db	218
   284  002619  DA                 	db	218
   285  00261A  DA                 	db	218
   286  00261B  DA                 	db	218
   287  00261C  DA                 	db	218
   288  00261D  DA                 	db	218
   289  00261E  DA                 	db	218
   290  00261F  DA                 	db	218
   291  002620  DA                 	db	218
   292  002621  DA                 	db	218
   293  002622  DA                 	db	218
   294  002623  DA                 	db	218
   295  002624  DA                 	db	218
   296  002625  DA                 	db	218
   297  002626  DA                 	db	218
   298  002627  DA                 	db	218
   299  002628  DA                 	db	218
   300  002629  DA                 	db	218
   301  00262A  DA                 	db	218
   302  00262B  DA                 	db	218
   303  00262C  DA                 	db	218
   304  00262D  DA                 	db	218
   305  00262E  DA                 	db	218
   306  00262F  DA                 	db	218
   307  002630  DA                 	db	218
   308  002631  DA                 	db	218
   309  002632  DA                 	db	218
   310  002633  DA                 	db	218
   311  002634  DA                 	db	218
   312  002635  DA                 	db	218
   313  002636  DA                 	db	218
   314  002637  DA                 	db	218
   315  002638  DA                 	db	218
   316  002639  DA                 	db	218
   317  00263A  DA                 	db	218
   318  00263B  DA                 	db	218
   319  00263C  DA                 	db	218
   320  00263D  DA                 	db	218
   321  00263E  DA                 	db	218
   322  00263F  DA                 	db	218
   323  002640  DA                 	db	218
   324  002641  DA                 	db	218
   325  002642  DA                 	db	218
   326  002643  DA                 	db	218
   327  002644  DA                 	db	218
   328  002645  DA                 	db	218
   329  002646  DA                 	db	218
   330  002647  DA                 	db	218
   331  002648  DA                 	db	218
   332  002649  DA                 	db	218
   333  00264A  DA                 	db	218
   334  00264B  DA                 	db	218
   335  00264C  DA                 	db	218
   336  00264D  DA                 	db	218
   337  00264E  DA                 	db	218
   338  00264F  DA                 	db	218
   339  002650  DA                 	db	218
   340  002651  DA                 	db	218
   341  002652  DA                 	db	218
   342  002653  DA                 	db	218
   343  002654  DA                 	db	218
   344  002655  DA                 	db	218
   345  002656  DA                 	db	218
   346  002657  DA                 	db	218
   347  002658  DA                 	db	218
   348  002659  DA                 	db	218
   349  00265A  DA                 	db	218
   350  00265B  DA                 	db	218
   351  00265C  DA                 	db	218
   352  00265D  DA                 	db	218
   353  00265E  DA                 	db	218
   354  00265F  DA                 	db	218
   355  002660  DA                 	db	218
   356  002661  DA                 	db	218
   357  002662  DA                 	db	218
   358  002663  DA                 	db	218
   359  002664  DA                 	db	218
   360  002665  DA                 	db	218
   361  002666  DA                 	db	218
   362  002667  DA                 	db	218
   363  002668  DA                 	db	218
   364  002669  DA                 	db	218
   365  00266A  DA                 	db	218
   366  00266B  DA                 	db	218
   367  00266C  DA                 	db	218
   368  00266D  DA                 	db	218
   369  00266E  DA                 	db	218
   370  00266F  DA                 	db	218
   371  002670  DA                 	db	218
   372  002671  DA                 	db	218
   373  002672  DA                 	db	218
   374  002673  DA                 	db	218
   375  002674  DA                 	db	218
   376  002675  DA                 	db	218
   377  002676  DA                 	db	218
   378  002677  DA                 	db	218
   379  002678  DA                 	db	218
   380  002679  DA                 	db	218
   381  00267A  DA                 	db	218
   382  00267B  DA                 	db	218
   383  00267C  DA                 	db	218
   384  00267D  DA                 	db	218
   385  00267E  DA                 	db	218
   386  00267F  DA                 	db	218
   387  002680  DA                 	db	218
   388  002681  DA                 	db	218
   389  002682  DA                 	db	218
   390  002683  DA                 	db	218
   391  002684  DA                 	db	218
   392  002685  DA                 	db	218
   393  002686  DA                 	db	218
   394  002687  DA                 	db	218
   395  002688  DA                 	db	218
   396  002689  DA                 	db	218
   397  00268A  DA                 	db	218
   398  00268B  DA                 	db	218
   399  00268C  DA                 	db	218
   400  00268D  DA                 	db	218
   401  00268E  DA                 	db	218
   402  00268F  DA                 	db	218
   403  002690  DA                 	db	218
   404  002691  DA                 	db	218
   405  002692  DA                 	db	218
   406  002693  DA                 	db	218
   407  002694  DA                 	db	218
   408  002695  DA                 	db	218
   409  002696  DA                 	db	218
   410  002697  DA                 	db	218
   411  002698  DA                 	db	218
   412  002699  DA                 	db	218
   413  00269A  DA                 	db	218
   414  00269B  DA                 	db	218
   415  00269C  DA                 	db	218
   416  00269D  DA                 	db	218
   417  00269E  DA                 	db	218
   418  00269F  DA                 	db	218
   419  0026A0  DA                 	db	218
   420  0026A1  DA                 	db	218
   421  0026A2  DA                 	db	218
   422  0026A3  DA                 	db	218
   423  0026A4  DA                 	db	218
   424  0026A5  DA                 	db	218
   425  0026A6  DA                 	db	218
   426  0026A7  DA                 	db	218
   427  0026A8  DA                 	db	218
   428  0026A9  DA                 	db	218
   429  0026AA  DA                 	db	218
   430  0026AB  DA                 	db	218
   431  0026AC  DA                 	db	218
   432  0026AD  DA                 	db	218
   433  0026AE  DA                 	db	218
   434  0026AF  DA                 	db	218
   435  0026B0  DA                 	db	218
   436  0026B1  DA                 	db	218
   437  0026B2  DA                 	db	218
   438  0026B3  DA                 	db	218
   439  0026B4  DA                 	db	218
   440  0026B5  DA                 	db	218
   441  0026B6  DA                 	db	218
   442  0026B7  DA                 	db	218
   443  0026B8  DA                 	db	218
   444  0026B9  DA                 	db	218
   445  0026BA  DA                 	db	218
   446  0026BB  DA                 	db	218
   447  0026BC  DA                 	db	218
   448  0026BD  DA                 	db	218
   449  0026BE  DA                 	db	218
   450  0026BF  DA                 	db	218
   451  0026C0  DA                 	db	218
   452  0026C1  DA                 	db	218
   453  0026C2  DA                 	db	218
   454  0026C3  DA                 	db	218
   455  0026C4  DA                 	db	218
   456  0026C5  DA                 	db	218
   457  0026C6  DA                 	db	218
   458  0026C7  DA                 	db	218
   459  0026C8  DA                 	db	218
   460  0026C9  DA                 	db	218
   461  0026CA  DA                 	db	218
   462  0026CB  DA                 	db	218
   463  0026CC  DA                 	db	218
   464  0026CD  DA                 	db	218
   465  0026CE  DA                 	db	218
   466  0026CF  DA                 	db	218
   467  0026D0  DA                 	db	218
   468  0026D1  DA                 	db	218
   469  0026D2  DA                 	db	218
   470  0026D3  DA                 	db	218
   471  0026D4  DA                 	db	218
   472  0026D5  DA                 	db	218
   473  0026D6  DA                 	db	218
   474  0026D7  DA                 	db	218
   475  0026D8  DA                 	db	218
   476  0026D9  DA                 	db	218
   477  0026DA  DA                 	db	218
   478  0026DB  DA                 	db	218
   479  0026DC  DA                 	db	218
   480  0026DD  DA                 	db	218
   481  0026DE  DA                 	db	218
   482  0026DF  DA                 	db	218
   483  0026E0  DA                 	db	218
   484  0026E1  DA                 	db	218
   485  0026E2  DA                 	db	218
   486  0026E3  DA                 	db	218
   487  0026E4  DA                 	db	218
   488  0026E5  DA                 	db	218
   489  0026E6  DA                 	db	218
   490  0026E7  DA                 	db	218
   491  0026E8  DA                 	db	218
   492  0026E9  DA                 	db	218
   493  0026EA  DA                 	db	218
   494  0026EB  DA                 	db	218
   495  0026EC  DA                 	db	218
   496  0026ED  DA                 	db	218
   497  0026EE  DA                 	db	218
   498  0026EF  DA                 	db	218
   499  0026F0  DA                 	db	218
   500  0026F1  DA                 	db	218
   501  0026F2  DA                 	db	218
   502  0026F3  DA                 	db	218
   503  0026F4  DA                 	db	218
   504  0026F5  DA                 	db	218
   505  0026F6  DA                 	db	218
   506  0026F7  DA                 	db	218
   507  0026F8  DA                 	db	218
   508  0026F9  DA                 	db	218
   509  0026FA  DA                 	db	218
   510  0026FB  DA                 	db	218
   511  0026FC  DA                 	db	218
   512  0026FD  DA                 	db	218
   513  0026FE  DA                 	db	218
   514  0026FF  DA                 	db	218
   515  002700  DA                 	db	218
   516  002701  DA                 	db	218
   517  002702  DA                 	db	218
   518  002703  DA                 	db	218
   519  002704  DA                 	db	218
   520  002705  DA                 	db	218
   521  002706  DA                 	db	218
   522  002707  DA                 	db	218
   523  002708  DA                 	db	218
   524  002709  DA                 	db	218
   525  00270A  DA                 	db	218
   526  00270B  DA                 	db	218
   527  00270C  DA                 	db	218
   528  00270D  DA                 	db	218
   529  00270E  DA                 	db	218
   530  00270F  DA                 	db	218
   531  002710  DA                 	db	218
   532  002711  DA                 	db	218
   533  002712  DA                 	db	218
   534  002713  DA                 	db	218
   535  002714  DA                 	db	218
   536  002715  DA                 	db	218
   537  002716  DA                 	db	218
   538  002717  DA                 	db	218
   539  002718  DA                 	db	218
   540  002719  DA                 	db	218
   541  00271A  DA                 	db	218
   542  00271B  DA                 	db	218
   543  00271C  DA                 	db	218
   544  00271D  DA                 	db	218
   545  00271E  DA                 	db	218
   546  00271F  DA                 	db	218
   547  002720  DA                 	db	218
   548  002721  DA                 	db	218
   549  002722  DA                 	db	218
   550  002723  DA                 	db	218
   551  002724  DA                 	db	218
   552  002725  DA                 	db	218
   553  002726  DA                 	db	218
   554  002727  DA                 	db	218
   555  002728  DA                 	db	218
   556  002729  DA                 	db	218
   557  00272A  DA                 	db	218
   558  00272B  DA                 	db	218
   559  00272C  DA                 	db	218
   560  00272D  DA                 	db	218
   561  00272E  DA                 	db	218
   562  00272F  DA                 	db	218
   563  002730  DA                 	db	218
   564  002731  DA                 	db	218
   565  002732  DA                 	db	218
   566  002733  DA                 	db	218
   567  002734  DA                 	db	218
   568  002735  DA                 	db	218
   569  002736  DA                 	db	218
   570  002737  DA                 	db	218
   571  002738  DA                 	db	218
   572  002739  DA                 	db	218
   573  00273A  DA                 	db	218
   574  00273B  DA                 	db	218
   575  00273C  DA                 	db	218
   576  00273D  DA                 	db	218
   577  00273E  DA                 	db	218
   578  00273F  DA                 	db	218
   579  002740  DA                 	db	218
   580  002741  DA                 	db	218
   581  002742  DA                 	db	218
   582  002743  DA                 	db	218
   583  002744  DA                 	db	218
   584  002745  DA                 	db	218
   585  002746  DA                 	db	218
   586  002747  DA                 	db	218
   587  002748  DA                 	db	218
   588  002749  DA                 	db	218
   589  00274A  DA                 	db	218
   590  00274B  DA                 	db	218
   591  00274C  DA                 	db	218
   592  00274D  DA                 	db	218
   593  00274E  DA                 	db	218
   594  00274F  DA                 	db	218
   595  002750  DA                 	db	218
   596  002751  DA                 	db	218
   597  002752  DA                 	db	218
   598  002753  DA                 	db	218
   599  002754  DA                 	db	218
   600  002755  DA                 	db	218
   601  002756  DA                 	db	218
   602  002757  DA                 	db	218
   603  002758  DA                 	db	218
   604  002759  DA                 	db	218
   605  00275A  DA                 	db	218
   606  00275B  DA                 	db	218
   607  00275C  DA                 	db	218
   608  00275D  DA                 	db	218
   609  00275E  DA                 	db	218
   610  00275F  DA                 	db	218
   611  002760  DA                 	db	218
   612  002761  DA                 	db	218
   613  002762  DA                 	db	218
   614  002763  DA                 	db	218
   615  002764  DA                 	db	218
   616  002765  DA                 	db	218
   617  002766  DA                 	db	218
   618  002767  DA                 	db	218
   619  002768  DA                 	db	218
   620  002769  DA                 	db	218
   621  00276A  DA                 	db	218
   622  00276B  DA                 	db	218
   623  00276C  DA                 	db	218
   624  00276D  DA                 	db	218
   625  00276E  DA                 	db	218
   626  00276F  DA                 	db	218
   627  002770  DA                 	db	218
   628  002771  DA                 	db	218
   629  002772  DA                 	db	218
   630  002773  DA                 	db	218
   631  002774  DA                 	db	218
   632  002775  DA                 	db	218
   633  002776  DA                 	db	218
   634  002777  DA                 	db	218
   635  002778  DA                 	db	218
   636  002779  DA                 	db	218
   637  00277A  DA                 	db	218
   638  00277B  DA                 	db	218
   639  00277C  DA                 	db	218
   640  00277D  DA                 	db	218
   641  00277E  DA                 	db	218
   642  00277F  DA                 	db	218
   643  002780  DA                 	db	218
   644  002781  DA                 	db	218
   645  002782  DA                 	db	218
   646  002783  DA                 	db	218
   647  002784  DA                 	db	218
   648  002785  DA                 	db	218
   649  002786  DA                 	db	218
   650  002787  DA                 	db	218
   651  002788  DA                 	db	218
   652  002789  DA                 	db	218
   653  00278A  DA                 	db	218
   654  00278B  DA                 	db	218
   655  00278C  DA                 	db	218
   656  00278D  DA                 	db	218
   657  00278E  DA                 	db	218
   658  00278F  DA                 	db	218
   659  002790  DA                 	db	218
   660  002791  DA                 	db	218
   661  002792  DA                 	db	218
   662  002793  DA                 	db	218
   663  002794  DA                 	db	218
   664  002795  DA                 	db	218
   665  002796  DA                 	db	218
   666  002797  DA                 	db	218
   667  002798  DA                 	db	218
   668  002799  DA                 	db	218
   669  00279A  DA                 	db	218
   670  00279B  DA                 	db	218
   671  00279C  DA                 	db	218
   672  00279D  DA                 	db	218
   673  00279E  DA                 	db	218
   674  00279F  DA                 	db	218
   675  0027A0  DA                 	db	218
   676  0027A1  DA                 	db	218
   677  0027A2  DA                 	db	218
   678  0027A3  DA                 	db	218
   679  0027A4  DA                 	db	218
   680  0027A5  DA                 	db	218
   681  0027A6  DA                 	db	218
   682  0027A7  DA                 	db	218
   683  0027A8  DA                 	db	218
   684  0027A9  DA                 	db	218
   685  0027AA  DA                 	db	218
   686  0027AB  DA                 	db	218
   687  0027AC  DA                 	db	218
   688  0027AD  DA                 	db	218
   689  0027AE  DA                 	db	218
   690  0027AF  DA                 	db	218
   691  0027B0  DA                 	db	218
   692  0027B1  DA                 	db	218
   693  0027B2  DA                 	db	218
   694  0027B3  DA                 	db	218
   695  0027B4  DA                 	db	218
   696  0027B5  DA                 	db	218
   697  0027B6  DA                 	db	218
   698  0027B7  DA                 	db	218
   699  0027B8  DA                 	db	218
   700  0027B9  DA                 	db	218
   701  0027BA  DA                 	db	218
   702  0027BB  DA                 	db	218
   703  0027BC  DA                 	db	218
   704  0027BD  DA                 	db	218
   705  0027BE  DA                 	db	218
   706  0027BF  DA                 	db	218
   707  0027C0  DA                 	db	218
   708  0027C1  DA                 	db	218
   709  0027C2  DA                 	db	218
   710  0027C3  DA                 	db	218
   711  0027C4  DA                 	db	218
   712  0027C5  DA                 	db	218
   713  0027C6  DA                 	db	218
   714  0027C7  DA                 	db	218
   715  0027C8  DA                 	db	218
   716  0027C9  DA                 	db	218
   717  0027CA  DA                 	db	218
   718  0027CB  DA                 	db	218
   719  0027CC  DA                 	db	218
   720  0027CD  DA                 	db	218
   721  0027CE  DA                 	db	218
   722  0027CF  DA                 	db	218
   723  0027D0  DA                 	db	218
   724  0027D1  DA                 	db	218
   725  0027D2  DA                 	db	218
   726  0027D3  DA                 	db	218
   727  0027D4  DA                 	db	218
   728  0027D5  DA                 	db	218
   729  0027D6  DA                 	db	218
   730  0027D7  DA                 	db	218
   731  0027D8  DA                 	db	218
   732  0027D9  DA                 	db	218
   733  0027DA  DA                 	db	218
   734  0027DB  DA                 	db	218
   735  0027DC  DA                 	db	218
   736  0027DD  DA                 	db	218
   737  0027DE  DA                 	db	218
   738  0027DF  DA                 	db	218
   739  0027E0  DA                 	db	218
   740  0027E1  DA                 	db	218
   741  0027E2  DA                 	db	218
   742  0027E3  DA                 	db	218
   743  0027E4  DA                 	db	218
   744  0027E5  DA                 	db	218
   745  0027E6  DA                 	db	218
   746  0027E7  DA                 	db	218
   747  0027E8  DA                 	db	218
   748  0027E9  DA                 	db	218
   749  0027EA  DA                 	db	218
   750  0027EB  DA                 	db	218
   751  0027EC  DA                 	db	218
   752  0027ED  DA                 	db	218
   753  0027EE  DA                 	db	218
   754  0027EF  DA                 	db	218
   755  0027F0  DA                 	db	218
   756  0027F1  DA                 	db	218
   757  0027F2  DA                 	db	218
   758  0027F3  DA                 	db	218
   759  0027F4  DA                 	db	218
   760  0027F5  DA                 	db	218
   761  0027F6  DA                 	db	218
   762  0027F7  DA                 	db	218
   763  0027F8  DA                 	db	218
   764  0027F9  DA                 	db	218
   765  0027FA  DA                 	db	218
   766  0027FB  DA                 	db	218
   767  0027FC  DA                 	db	218
   768  0027FD  DA                 	db	218
   769  0027FE  DA                 	db	218
   770  0027FF  DA                 	db	218
   771  002800                     __end_of_FlashWaste:
   772                           	opt stack 0
   773  0000                     _IR_SavedTiming_absconstaddr	set	9216
   774                           
   775                           	psect	_IR_SavedTiming_const
   776  002400                     __p_IR_SavedTiming_const:
   777                           	opt stack 0
   778  002400                     _IR_SavedTiming:
   779                           	opt stack 0
   780  002400  2198               	dw	8600
   781  002402  1068               	dw	4200
   782  002404  01C2               	dw	450
   783  002406  04B0               	dw	1200
   784  002408  01C2               	dw	450
   785  00240A  01C2               	dw	450
   786  00240C  01C2               	dw	450
   787  00240E  04B0               	dw	1200
   788  002410  01C2               	dw	450
   789  002412  04B0               	dw	1200
   790  002414  01C2               	dw	450
   791  002416  01C2               	dw	450
   792  002418  01C2               	dw	450
   793  00241A  04B0               	dw	1200
   794  00241C  01C2               	dw	450
   795  00241E  01C2               	dw	450
   796  002420  01C2               	dw	450
   797  002422  04B0               	dw	1200
   798  002424  01C2               	dw	450
   799  002426  01C2               	dw	450
   800  002428  01C2               	dw	450
   801  00242A  04B0               	dw	1200
   802  00242C  01C2               	dw	450
   803  00242E  01C2               	dw	450
   804  002430  01C2               	dw	450
   805  002432  01C2               	dw	450
   806  002434  01C2               	dw	450
   807  002436  04B0               	dw	1200
   808  002438  01C2               	dw	450
   809  00243A  01C2               	dw	450
   810  00243C  01C2               	dw	450
   811  00243E  04B0               	dw	1200
   812  002440  01C2               	dw	450
   813  002442  01C2               	dw	450
   814  002444  01C2               	dw	450
   815  002446  01C2               	dw	450
   816  002448  01C2               	dw	450
   817  00244A  04B0               	dw	1200
   818  00244C  01C2               	dw	450
   819  00244E  01C2               	dw	450
   820  002450  01C2               	dw	450
   821  002452  04B0               	dw	1200
   822  002454  01C2               	dw	450
   823  002456  01C2               	dw	450
   824  002458  01C2               	dw	450
   825  00245A  01C2               	dw	450
   826  00245C  01C2               	dw	450
   827  00245E  01C2               	dw	450
   828  002460  01C2               	dw	450
   829  002462  01C2               	dw	450
   830  002464  01C2               	dw	450
   831  002466  04B0               	dw	1200
   832  002468  01C2               	dw	450
   833  00246A  01C2               	dw	450
   834  00246C  01C2               	dw	450
   835  00246E  04B0               	dw	1200
   836  002470  01C2               	dw	450
   837  002472  01C2               	dw	450
   838  002474  01C2               	dw	450
   839  002476  04B0               	dw	1200
   840  002478  01C2               	dw	450
   841  00247A  04B0               	dw	1200
   842  00247C  01C2               	dw	450
   843  00247E  04B0               	dw	1200
   844  002480  01C2               	dw	450
   845  002482  04B0               	dw	1200
   846  002484  01C2               	dw	450
   847  002486  00                 	db	0
   848  002487  00                 	db	0
   849  002488  00                 	db	0
   850  002489  00                 	db	0
   851  00248A  00                 	db	0
   852  00248B  00                 	db	0
   853  00248C  00                 	db	0
   854  00248D  00                 	db	0
   855  00248E  00                 	db	0
   856  00248F  00                 	db	0
   857  002490  00                 	db	0
   858  002491  00                 	db	0
   859  002492  00                 	db	0
   860  002493  00                 	db	0
   861  002494  00                 	db	0
   862  002495  00                 	db	0
   863  002496  00                 	db	0
   864  002497  00                 	db	0
   865  002498  00                 	db	0
   866  002499  00                 	db	0
   867  00249A  00                 	db	0
   868  00249B  00                 	db	0
   869  00249C  00                 	db	0
   870  00249D  00                 	db	0
   871  00249E  00                 	db	0
   872  00249F  00                 	db	0
   873  0024A0  00                 	db	0
   874  0024A1  00                 	db	0
   875  0024A2  00                 	db	0
   876  0024A3  00                 	db	0
   877  0024A4  00                 	db	0
   878  0024A5  00                 	db	0
   879  0024A6  00                 	db	0
   880  0024A7  00                 	db	0
   881  0024A8  00                 	db	0
   882  0024A9  00                 	db	0
   883  0024AA  00                 	db	0
   884  0024AB  00                 	db	0
   885  0024AC  00                 	db	0
   886  0024AD  00                 	db	0
   887  0024AE  00                 	db	0
   888  0024AF  00                 	db	0
   889  0024B0  00                 	db	0
   890  0024B1  00                 	db	0
   891  0024B2  00                 	db	0
   892  0024B3  00                 	db	0
   893  0024B4  00                 	db	0
   894  0024B5  00                 	db	0
   895  0024B6  00                 	db	0
   896  0024B7  00                 	db	0
   897  0024B8  00                 	db	0
   898  0024B9  00                 	db	0
   899  0024BA  00                 	db	0
   900  0024BB  00                 	db	0
   901  0024BC  00                 	db	0
   902  0024BD  00                 	db	0
   903  0024BE  00                 	db	0
   904  0024BF  00                 	db	0
   905  0024C0  00                 	db	0
   906  0024C1  00                 	db	0
   907  0024C2  00                 	db	0
   908  0024C3  00                 	db	0
   909  0024C4  00                 	db	0
   910  0024C5  00                 	db	0
   911  0024C6  00                 	db	0
   912  0024C7  00                 	db	0
   913  0024C8  00                 	db	0
   914  0024C9  00                 	db	0
   915  0024CA  00                 	db	0
   916  0024CB  00                 	db	0
   917  0024CC  00                 	db	0
   918  0024CD  00                 	db	0
   919  0024CE  00                 	db	0
   920  0024CF  00                 	db	0
   921  0024D0  00                 	db	0
   922  0024D1  00                 	db	0
   923  0024D2  00                 	db	0
   924  0024D3  00                 	db	0
   925  0024D4  00                 	db	0
   926  0024D5  00                 	db	0
   927  0024D6  00                 	db	0
   928  0024D7  00                 	db	0
   929  0024D8  00                 	db	0
   930  0024D9  00                 	db	0
   931  0024DA  00                 	db	0
   932  0024DB  00                 	db	0
   933  0024DC  00                 	db	0
   934  0024DD  00                 	db	0
   935  0024DE  00                 	db	0
   936  0024DF  00                 	db	0
   937  0024E0  00                 	db	0
   938  0024E1  00                 	db	0
   939  0024E2  00                 	db	0
   940  0024E3  00                 	db	0
   941  0024E4  00                 	db	0
   942  0024E5  00                 	db	0
   943  0024E6  00                 	db	0
   944  0024E7  00                 	db	0
   945  0024E8  00                 	db	0
   946  0024E9  00                 	db	0
   947  0024EA  00                 	db	0
   948  0024EB  00                 	db	0
   949  0024EC  00                 	db	0
   950  0024ED  00                 	db	0
   951  0024EE  00                 	db	0
   952  0024EF  00                 	db	0
   953  0024F0  00                 	db	0
   954  0024F1  00                 	db	0
   955  0024F2  00                 	db	0
   956  0024F3  00                 	db	0
   957  0024F4  00                 	db	0
   958  0024F5  00                 	db	0
   959  0024F6  00                 	db	0
   960  0024F7  00                 	db	0
   961  0024F8  00                 	db	0
   962  0024F9  00                 	db	0
   963  0024FA  00                 	db	0
   964  0024FB  00                 	db	0
   965  0024FC  00                 	db	0
   966  0024FD  00                 	db	0
   967  0024FE  00                 	db	0
   968  0024FF  00                 	db	0
   969  002500                     __end_of_IR_SavedTiming:
   970                           	opt stack 0
   971  0000                     _RF_SavedTiming_absconstaddr	set	9472
   972                           
   973                           	psect	_RF_SavedTiming_const
   974  002500                     __p_RF_SavedTiming_const:
   975                           	opt stack 0
   976  002500                     _RF_SavedTiming:
   977                           	opt stack 0
   978  002500  0342               	dw	834
   979  002502  0015               	dw	21
   980  002504  0050               	dw	80
   981  002506  0016               	dw	22
   982  002508  0050               	dw	80
   983  00250A  0015               	dw	21
   984  00250C  004E               	dw	78
   985  00250E  004F               	dw	79
   986  002510  001A               	dw	26
   987  002512  0016               	dw	22
   988  002514  004E               	dw	78
   989  002516  004E               	dw	78
   990  002518  001B               	dw	27
   991  00251A  0015               	dw	21
   992  00251C  004F               	dw	79
   993  00251E  004C               	dw	76
   994  002520  0019               	dw	25
   995  002522  0017               	dw	23
   996  002524  004F               	dw	79
   997  002526  004B               	dw	75
   998  002528  001B               	dw	27
   999  00252A  0015               	dw	21
  1000  00252C  0051               	dw	81
  1001  00252E  004B               	dw	75
  1002  002530  0019               	dw	25
  1003  002532  0016               	dw	22
  1004  002534  0051               	dw	81
  1005  002536  0016               	dw	22
  1006  002538  004F               	dw	79
  1007  00253A  0016               	dw	22
  1008  00253C  0050               	dw	80
  1009  00253E  0018               	dw	24
  1010  002540  004F               	dw	79
  1011  002542  004D               	dw	77
  1012  002544  0019               	dw	25
  1013  002546  004C               	dw	76
  1014  002548  001B               	dw	27
  1015  00254A  0015               	dw	21
  1016  00254C  0050               	dw	80
  1017  00254E  0015               	dw	21
  1018  002550  0051               	dw	81
  1019  002552  0015               	dw	21
  1020  002554  0050               	dw	80
  1021  002556  0016               	dw	22
  1022  002558  0050               	dw	80
  1023  00255A  0016               	dw	22
  1024  00255C  0051               	dw	81
  1025  00255E  0016               	dw	22
  1026  002560  004F               	dw	79
  1027  002562  0016               	dw	22
  1028  002564  00                 	db	0
  1029  002565  00                 	db	0
  1030  002566  00                 	db	0
  1031  002567  00                 	db	0
  1032  002568  00                 	db	0
  1033  002569  00                 	db	0
  1034  00256A  00                 	db	0
  1035  00256B  00                 	db	0
  1036  00256C  00                 	db	0
  1037  00256D  00                 	db	0
  1038  00256E  00                 	db	0
  1039  00256F  00                 	db	0
  1040  002570  00                 	db	0
  1041  002571  00                 	db	0
  1042  002572  00                 	db	0
  1043  002573  00                 	db	0
  1044  002574  00                 	db	0
  1045  002575  00                 	db	0
  1046  002576  00                 	db	0
  1047  002577  00                 	db	0
  1048  002578  00                 	db	0
  1049  002579  00                 	db	0
  1050  00257A  00                 	db	0
  1051  00257B  00                 	db	0
  1052  00257C  00                 	db	0
  1053  00257D  00                 	db	0
  1054  00257E  00                 	db	0
  1055  00257F  00                 	db	0
  1056  002580  00                 	db	0
  1057  002581  00                 	db	0
  1058  002582  00                 	db	0
  1059  002583  00                 	db	0
  1060  002584  00                 	db	0
  1061  002585  00                 	db	0
  1062  002586  00                 	db	0
  1063  002587  00                 	db	0
  1064  002588  00                 	db	0
  1065  002589  00                 	db	0
  1066  00258A  00                 	db	0
  1067  00258B  00                 	db	0
  1068  00258C  00                 	db	0
  1069  00258D  00                 	db	0
  1070  00258E  00                 	db	0
  1071  00258F  00                 	db	0
  1072  002590  00                 	db	0
  1073  002591  00                 	db	0
  1074  002592  00                 	db	0
  1075  002593  00                 	db	0
  1076  002594  00                 	db	0
  1077  002595  00                 	db	0
  1078  002596  00                 	db	0
  1079  002597  00                 	db	0
  1080  002598  00                 	db	0
  1081  002599  00                 	db	0
  1082  00259A  00                 	db	0
  1083  00259B  00                 	db	0
  1084  00259C  00                 	db	0
  1085  00259D  00                 	db	0
  1086  00259E  00                 	db	0
  1087  00259F  00                 	db	0
  1088  0025A0  00                 	db	0
  1089  0025A1  00                 	db	0
  1090  0025A2  00                 	db	0
  1091  0025A3  00                 	db	0
  1092  0025A4  00                 	db	0
  1093  0025A5  00                 	db	0
  1094  0025A6  00                 	db	0
  1095  0025A7  00                 	db	0
  1096  0025A8  00                 	db	0
  1097  0025A9  00                 	db	0
  1098  0025AA  00                 	db	0
  1099  0025AB  00                 	db	0
  1100  0025AC  00                 	db	0
  1101  0025AD  00                 	db	0
  1102  0025AE  00                 	db	0
  1103  0025AF  00                 	db	0
  1104  0025B0  00                 	db	0
  1105  0025B1  00                 	db	0
  1106  0025B2  00                 	db	0
  1107  0025B3  00                 	db	0
  1108  0025B4  00                 	db	0
  1109  0025B5  00                 	db	0
  1110  0025B6  00                 	db	0
  1111  0025B7  00                 	db	0
  1112  0025B8  00                 	db	0
  1113  0025B9  00                 	db	0
  1114  0025BA  00                 	db	0
  1115  0025BB  00                 	db	0
  1116  0025BC  00                 	db	0
  1117  0025BD  00                 	db	0
  1118  0025BE  00                 	db	0
  1119  0025BF  00                 	db	0
  1120  0025C0  00                 	db	0
  1121  0025C1  00                 	db	0
  1122  0025C2  00                 	db	0
  1123  0025C3  00                 	db	0
  1124  0025C4  00                 	db	0
  1125  0025C5  00                 	db	0
  1126  0025C6  00                 	db	0
  1127  0025C7  00                 	db	0
  1128  0025C8  00                 	db	0
  1129  0025C9  00                 	db	0
  1130  0025CA  00                 	db	0
  1131  0025CB  00                 	db	0
  1132  0025CC  00                 	db	0
  1133  0025CD  00                 	db	0
  1134  0025CE  00                 	db	0
  1135  0025CF  00                 	db	0
  1136  0025D0  00                 	db	0
  1137  0025D1  00                 	db	0
  1138  0025D2  00                 	db	0
  1139  0025D3  00                 	db	0
  1140  0025D4  00                 	db	0
  1141  0025D5  00                 	db	0
  1142  0025D6  00                 	db	0
  1143  0025D7  00                 	db	0
  1144  0025D8  00                 	db	0
  1145  0025D9  00                 	db	0
  1146  0025DA  00                 	db	0
  1147  0025DB  00                 	db	0
  1148  0025DC  00                 	db	0
  1149  0025DD  00                 	db	0
  1150  0025DE  00                 	db	0
  1151  0025DF  00                 	db	0
  1152  0025E0  00                 	db	0
  1153  0025E1  00                 	db	0
  1154  0025E2  00                 	db	0
  1155  0025E3  00                 	db	0
  1156  0025E4  00                 	db	0
  1157  0025E5  00                 	db	0
  1158  0025E6  00                 	db	0
  1159  0025E7  00                 	db	0
  1160  0025E8  00                 	db	0
  1161  0025E9  00                 	db	0
  1162  0025EA  00                 	db	0
  1163  0025EB  00                 	db	0
  1164  0025EC  00                 	db	0
  1165  0025ED  00                 	db	0
  1166  0025EE  00                 	db	0
  1167  0025EF  00                 	db	0
  1168  0025F0  00                 	db	0
  1169  0025F1  00                 	db	0
  1170  0025F2  00                 	db	0
  1171  0025F3  00                 	db	0
  1172  0025F4  00                 	db	0
  1173  0025F5  00                 	db	0
  1174  0025F6  00                 	db	0
  1175  0025F7  00                 	db	0
  1176  0025F8  00                 	db	0
  1177  0025F9  00                 	db	0
  1178  0025FA  00                 	db	0
  1179  0025FB  00                 	db	0
  1180  0025FC  00                 	db	0
  1181  0025FD  00                 	db	0
  1182  0025FE  00                 	db	0
  1183  0025FF  00                 	db	0
  1184  002600                     __end_of_RF_SavedTiming:
  1185                           	opt stack 0
  1186  0000                     _ADCON0bits	set	4034
  1187  0000                     _ADCON1bits	set	4033
  1188  0000                     _ADCON2bits	set	4032
  1189  0000                     _ADRESH	set	4036
  1190  0000                     _ADRESL	set	4035
  1191  0000                     _EECON1bits	set	4006
  1192  0000                     _INTCON2bits	set	4081
  1193  0000                     _INTCON3bits	set	4080
  1194  0000                     _INTCONbits	set	4082
  1195  0000                     _IPR1bits	set	3999
  1196  0000                     _LATA	set	3977
  1197  0000                     _LATB	set	3978
  1198  0000                     _LATC	set	3979
  1199  0000                     _OSCCON	set	4051
  1200  0000                     _OSCCONbits	set	4051
  1201  0000                     _OSCTUNEbits	set	3995
  1202  0000                     _PIE1bits	set	3997
  1203  0000                     _PIR1bits	set	3998
  1204  0000                     _PORTB	set	3969
  1205  0000                     _PR2	set	4043
  1206  0000                     _RCONbits	set	4048
  1207  0000                     _T0CONbits	set	4053
  1208  0000                     _T1CONbits	set	4045
  1209  0000                     _T2CONbits	set	4042
  1210  0000                     _TABLAT	set	4085
  1211  0000                     _TBLPTRH	set	4087
  1212  0000                     _TBLPTRL	set	4086
  1213  0000                     _TBLPTRU	set	4088
  1214  0000                     _TMR0H	set	4055
  1215  0000                     _TMR0L	set	4054
  1216  0000                     _TMR1H	set	4047
  1217  0000                     _TMR1L	set	4046
  1218  0000                     _TMR2	set	4044
  1219  0000                     _TRISAbits	set	3986
  1220  0000                     _TRISBbits	set	3987
  1221  0000                     _TRISCbits	set	3988
  1222                           
  1223                           ; #config settings
  1224  0000                     
  1225                           	psect	cinit
  1226  000FCE                     __pcinit:
  1227                           	opt stack 0
  1228  000FCE                     start_initialization:
  1229                           	opt stack 0
  1230  000FCE                     __initialization:
  1231                           	opt stack 0
  1232                           
  1233                           ; Clear objects allocated to BANK3 (256 bytes)
  1234  000FCE  EE03  F000         	lfsr	0,__pbssBANK3
  1235  000FD2  EE11 F000          	lfsr	1,256
  1236  000FD6                     clear_0:
  1237  000FD6  6AEE               	clrf	postinc0,c
  1238  000FD8  50E5               	movf	postdec1,w,c
  1239  000FDA  50E1               	movf	fsr1l,w,c
  1240  000FDC  E1FC               	bnz	clear_0
  1241  000FDE  50E2               	movf	fsr1h,w,c
  1242  000FE0  E1FA               	bnz	clear_0
  1243                           
  1244                           ; Clear objects allocated to BANK2 (256 bytes)
  1245  000FE2  EE02  F000         	lfsr	0,__pbssBANK2
  1246  000FE6  EE11 F000          	lfsr	1,256
  1247  000FEA                     clear_1:
  1248  000FEA  6AEE               	clrf	postinc0,c
  1249  000FEC  50E5               	movf	postdec1,w,c
  1250  000FEE  50E1               	movf	fsr1l,w,c
  1251  000FF0  E1FC               	bnz	clear_1
  1252  000FF2  50E2               	movf	fsr1h,w,c
  1253  000FF4  E1FA               	bnz	clear_1
  1254                           
  1255                           ; Clear objects allocated to BANK1 (128 bytes)
  1256  000FF6  EE01  F000         	lfsr	0,__pbssBANK1
  1257  000FFA  0E80               	movlw	128
  1258  000FFC                     clear_2:
  1259  000FFC  6AEE               	clrf	postinc0,c
  1260  000FFE  06E8               	decf	wreg,f,c
  1261  001000  E1FD               	bnz	clear_2
  1262                           
  1263                           ; Clear objects allocated to BANK0 (17 bytes)
  1264  001002  EE00  F0BC         	lfsr	0,__pbssBANK0
  1265  001006  0E11               	movlw	17
  1266  001008                     clear_3:
  1267  001008  6AEE               	clrf	postinc0,c
  1268  00100A  06E8               	decf	wreg,f,c
  1269  00100C  E1FD               	bnz	clear_3
  1270                           
  1271                           ; Clear objects allocated to COMRAM (23 bytes)
  1272  00100E  EE00  F048         	lfsr	0,__pbssCOMRAM
  1273  001012  0E17               	movlw	23
  1274  001014                     clear_4:
  1275  001014  6AEE               	clrf	postinc0,c
  1276  001016  06E8               	decf	wreg,f,c
  1277  001018  E1FD               	bnz	clear_4
  1278                           
  1279                           ; Initialize objects allocated to BANK0 (6 bytes)
  1280                           ; load TBLPTR registers with __pidataBANK0
  1281  00101A  0E58               	movlw	low __pidataBANK0
  1282  00101C  6EF6               	movwf	tblptrl,c
  1283  00101E  0E1D               	movlw	high __pidataBANK0
  1284  001020  6EF7               	movwf	tblptrh,c
  1285  001022  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1286  001024  6EF8               	movwf	tblptru,c
  1287  001026  EE00  F0CD         	lfsr	0,__pdataBANK0
  1288  00102A  EE10 F006          	lfsr	1,6
  1289  00102E                     copy_data0:
  1290  00102E  0009               	tblrd		*+
  1291  001030  CFF5 FFEE          	movff	tablat,postinc0
  1292  001034  50E5               	movf	postdec1,w,c
  1293  001036  50E1               	movf	fsr1l,w,c
  1294  001038  E1FA               	bnz	copy_data0
  1295                           
  1296                           ; Initialize objects allocated to COMRAM (1 bytes)
  1297                           ; load TBLPTR registers with __pidataCOMRAM
  1298  00103A  0E70               	movlw	low __pidataCOMRAM
  1299  00103C  6EF6               	movwf	tblptrl,c
  1300  00103E  0E1D               	movlw	high __pidataCOMRAM
  1301  001040  6EF7               	movwf	tblptrh,c
  1302  001042  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1303  001044  6EF8               	movwf	tblptru,c
  1304  001046  0009               	tblrd		*+	;fetch initializer
  1305  001048  CFF5 F05F          	movff	tablat,__pdataCOMRAM
  1306  00104C                     end_of_initialization:
  1307                           	opt stack 0
  1308  00104C                     __end_of__initialization:
  1309                           	opt stack 0
  1310  00104C  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1311  00104E  6EF8               	movwf	tblptru,c
  1312  001050  0100               	movlb	0
  1313  001052  EF11  F01C         	goto	_main	;jump to C main() function
  1314                           tblptru	equ	0xFF8
  1315                           tblptrh	equ	0xFF7
  1316                           tblptrl	equ	0xFF6
  1317                           tablat	equ	0xFF5
  1318                           postinc0	equ	0xFEE
  1319                           wreg	equ	0xFE8
  1320                           postdec1	equ	0xFE5
  1321                           fsr1h	equ	0xFE2
  1322                           fsr1l	equ	0xFE1
  1323                           
  1324                           	psect	bssCOMRAM
  1325  000048                     __pbssCOMRAM:
  1326                           	opt stack 0
  1327  000048                     _Activity_Timer:
  1328                           	opt stack 0
  1329  000048                     	ds	4
  1330  00004C                     _Rail_RSSI:
  1331                           	opt stack 0
  1332  00004C                     	ds	3
  1333  00004F                     _IR_SyncHigh:
  1334                           	opt stack 0
  1335  00004F                     	ds	2
  1336  000051                     _IR_SyncLow:
  1337                           	opt stack 0
  1338  000051                     	ds	2
  1339  000053                     _Timer2Post:
  1340                           	opt stack 0
  1341  000053                     	ds	2
  1342  000055                     _Timer2PostCount:
  1343                           	opt stack 0
  1344  000055                     	ds	2
  1345  000057                     _errno:
  1346                           	opt stack 0
  1347  000057                     	ds	2
  1348  000059                     _ButtonChange:
  1349                           	opt stack 0
  1350  000059                     	ds	1
  1351  00005A                     _IRChange:
  1352                           	opt stack 0
  1353  00005A                     	ds	1
  1354  00005B                     _IRStarted:
  1355                           	opt stack 0
  1356  00005B                     	ds	1
  1357  00005C                     _IR_CodeSize:
  1358                           	opt stack 0
  1359  00005C                     	ds	1
  1360  00005D                     _IR_DataPlace:
  1361                           	opt stack 0
  1362  00005D                     	ds	1
  1363  00005E                     _Timer2Use:
  1364                           	opt stack 0
  1365  00005E                     	ds	1
  1366                           tblptru	equ	0xFF8
  1367                           tblptrh	equ	0xFF7
  1368                           tblptrl	equ	0xFF6
  1369                           tablat	equ	0xFF5
  1370                           postinc0	equ	0xFEE
  1371                           wreg	equ	0xFE8
  1372                           postdec1	equ	0xFE5
  1373                           fsr1h	equ	0xFE2
  1374                           fsr1l	equ	0xFE1
  1375                           
  1376                           	psect	dataCOMRAM
  1377  00005F                     __pdataCOMRAM:
  1378                           	opt stack 0
  1379  00005F                     _ADC_CurrentSource:
  1380                           	opt stack 0
  1381  00005F                     	ds	1
  1382                           tblptru	equ	0xFF8
  1383                           tblptrh	equ	0xFF7
  1384                           tblptrl	equ	0xFF6
  1385                           tablat	equ	0xFF5
  1386                           postinc0	equ	0xFEE
  1387                           wreg	equ	0xFE8
  1388                           postdec1	equ	0xFE5
  1389                           fsr1h	equ	0xFE2
  1390                           fsr1l	equ	0xFE1
  1391                           
  1392                           	psect	bssBANK0
  1393  0000BC                     __pbssBANK0:
  1394                           	opt stack 0
  1395  0000BC                     _ADC_SampleCount:
  1396                           	opt stack 0
  1397  0000BC                     	ds	2
  1398  0000BE                     _RF_SyncHigh:
  1399                           	opt stack 0
  1400  0000BE                     	ds	2
  1401  0000C0                     _RF_SyncLow:
  1402                           	opt stack 0
  1403  0000C0                     	ds	2
  1404  0000C2                     _ButtonValue_prev:
  1405                           	opt stack 0
  1406  0000C2                     	ds	1
  1407  0000C3                     _Button_Data:
  1408                           	opt stack 0
  1409  0000C3                     	ds	1
  1410  0000C4                     _DC_Motor:
  1411                           	opt stack 0
  1412  0000C4                     	ds	1
  1413  0000C5                     _Flash_Status:
  1414                           	opt stack 0
  1415  0000C5                     	ds	1
  1416  0000C6                     _IRValue_prev:
  1417                           	opt stack 0
  1418  0000C6                     	ds	1
  1419  0000C7                     _IR_Data:
  1420                           	opt stack 0
  1421  0000C7                     	ds	1
  1422  0000C8                     _RFStarted:
  1423                           	opt stack 0
  1424  0000C8                     	ds	1
  1425  0000C9                     _RF_CodeSize:
  1426                           	opt stack 0
  1427  0000C9                     	ds	1
  1428  0000CA                     _RF_Data:
  1429                           	opt stack 0
  1430  0000CA                     	ds	1
  1431  0000CB                     _RF_DataPlace:
  1432                           	opt stack 0
  1433  0000CB                     	ds	1
  1434  0000CC                     _System_State_Change:
  1435                           	opt stack 0
  1436  0000CC                     	ds	1
  1437                           tblptru	equ	0xFF8
  1438                           tblptrh	equ	0xFF7
  1439                           tblptrl	equ	0xFF6
  1440                           tablat	equ	0xFF5
  1441                           postinc0	equ	0xFEE
  1442                           wreg	equ	0xFE8
  1443                           postdec1	equ	0xFE5
  1444                           fsr1h	equ	0xFE2
  1445                           fsr1l	equ	0xFE1
  1446                           
  1447                           	psect	dataBANK0
  1448  0000CD                     __pdataBANK0:
  1449                           	opt stack 0
  1450  0000CD                     _Rail_VIN:
  1451                           	opt stack 0
  1452  0000CD                     	ds	3
  1453  0000D0                     _IR_Saved:
  1454                           	opt stack 0
  1455  0000D0                     	ds	1
  1456  0000D1                     _RF_Saved:
  1457                           	opt stack 0
  1458  0000D1                     	ds	1
  1459  0000D2                     _System_State:
  1460                           	opt stack 0
  1461  0000D2                     	ds	1
  1462                           tblptru	equ	0xFF8
  1463                           tblptrh	equ	0xFF7
  1464                           tblptrl	equ	0xFF6
  1465                           tablat	equ	0xFF5
  1466                           postinc0	equ	0xFEE
  1467                           wreg	equ	0xFE8
  1468                           postdec1	equ	0xFE5
  1469                           fsr1h	equ	0xFE2
  1470                           fsr1l	equ	0xFE1
  1471                           
  1472                           	psect	bssBANK1
  1473  000100                     __pbssBANK1:
  1474                           	opt stack 0
  1475  000100                     _FlashBuffer:
  1476                           	opt stack 0
  1477  000100                     	ds	128
  1478                           tblptru	equ	0xFF8
  1479                           tblptrh	equ	0xFF7
  1480                           tblptrl	equ	0xFF6
  1481                           tablat	equ	0xFF5
  1482                           postinc0	equ	0xFEE
  1483                           wreg	equ	0xFE8
  1484                           postdec1	equ	0xFE5
  1485                           fsr1h	equ	0xFE2
  1486                           fsr1l	equ	0xFE1
  1487                           
  1488                           	psect	bssBANK2
  1489  000200                     __pbssBANK2:
  1490                           	opt stack 0
  1491  000200                     _IR_DataTiming:
  1492                           	opt stack 0
  1493  000200                     	ds	256
  1494                           tblptru	equ	0xFF8
  1495                           tblptrh	equ	0xFF7
  1496                           tblptrl	equ	0xFF6
  1497                           tablat	equ	0xFF5
  1498                           postinc0	equ	0xFEE
  1499                           wreg	equ	0xFE8
  1500                           postdec1	equ	0xFE5
  1501                           fsr1h	equ	0xFE2
  1502                           fsr1l	equ	0xFE1
  1503                           
  1504                           	psect	bssBANK3
  1505  000300                     __pbssBANK3:
  1506                           	opt stack 0
  1507  000300                     _RF_DataTiming:
  1508                           	opt stack 0
  1509  000300                     	ds	256
  1510                           tblptru	equ	0xFF8
  1511                           tblptrh	equ	0xFF7
  1512                           tblptrl	equ	0xFF6
  1513                           tablat	equ	0xFF5
  1514                           postinc0	equ	0xFEE
  1515                           wreg	equ	0xFE8
  1516                           postdec1	equ	0xFE5
  1517                           fsr1h	equ	0xFE2
  1518                           fsr1l	equ	0xFE1
  1519                           
  1520                           	psect	cstackBANK1
  1521  000180                     __pcstackBANK1:
  1522                           	opt stack 0
  1523  000180                     ?___ftpack:
  1524                           	opt stack 0
  1525  000180                     ?___fttol:
  1526                           	opt stack 0
  1527  000180                     RF_DataInt@state:
  1528                           	opt stack 0
  1529  000180                     RF_Receiver@state:
  1530                           	opt stack 0
  1531  000180                     RF_SetBandwidth@band:
  1532                           	opt stack 0
  1533  000180                     RF_SetSquelch@state:
  1534                           	opt stack 0
  1535  000180                     RF_CalculateCodesize@i:
  1536                           	opt stack 0
  1537  000180                     MTR_IN1@state:
  1538                           	opt stack 0
  1539  000180                     MTR_IN2@state:
  1540                           	opt stack 0
  1541  000180                     IR_ReadReceiver@value:
  1542                           	opt stack 0
  1543  000180                     IR_CalculateCodesize@i:
  1544                           	opt stack 0
  1545  000180                     LDO_Pass@state:
  1546                           	opt stack 0
  1547  000180                     BUT_IR_PinChangeInt@state:
  1548                           	opt stack 0
  1549  000180                     BUT_ReadButton@value:
  1550                           	opt stack 0
  1551  000180                     TMR_Timer0@state:
  1552                           	opt stack 0
  1553  000180                     TMR_Timer1@state:
  1554                           	opt stack 0
  1555  000180                     TMR_Timer2@state:
  1556                           	opt stack 0
  1557  000180                     TMR_Timer0Int@state:
  1558                           	opt stack 0
  1559  000180                     TMR_Timer1Int@state:
  1560                           	opt stack 0
  1561  000180                     TMR_Timer2Int@state:
  1562                           	opt stack 0
  1563  000180                     TMR_Timer1Osc@state:
  1564                           	opt stack 0
  1565  000180                     ADC_Module@state:
  1566                           	opt stack 0
  1567  000180                     ADC_ConversionInt@state:
  1568                           	opt stack 0
  1569  000180                     MSC_DelayNOP@NOPs:
  1570                           	opt stack 0
  1571  000180                     MSC_CleanBufferInt@data:
  1572                           	opt stack 0
  1573  000180                     ___ftpack@arg:
  1574                           	opt stack 0
  1575  000180                     ___ftge@ff1:
  1576                           	opt stack 0
  1577  000180                     ___fttol@f1:
  1578                           	opt stack 0
  1579                           
  1580                           ; 3 bytes @ 0x0
  1581  000180                     	ds	1
  1582  000181                     TMR_ResetTimer0@TimerOn:
  1583                           	opt stack 0
  1584  000181                     TMR_ResetTimer1@TimerOn:
  1585                           	opt stack 0
  1586                           
  1587                           ; 1 bytes @ 0x1
  1588  000181                     	ds	1
  1589  000182                     TMR_Timer1Function@mode:
  1590                           	opt stack 0
  1591  000182                     MSC_DelayNOP@i:
  1592                           	opt stack 0
  1593  000182                     MSC_CleanBufferInt@count:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x2
  1597  000182                     	ds	1
  1598  000183                     ___ftpack@exp:
  1599                           	opt stack 0
  1600  000183                     ___ftge@ff2:
  1601                           	opt stack 0
  1602                           
  1603                           ; 3 bytes @ 0x3
  1604  000183                     	ds	1
  1605  000184                     ??___fttol:
  1606  000184                     ___ftpack@sign:
  1607                           	opt stack 0
  1608  000184                     MSC_CleanBufferInt@i:
  1609                           	opt stack 0
  1610  000184                     MSC_DelayMS@US:
  1611                           	opt stack 0
  1612                           
  1613                           ; 4 bytes @ 0x4
  1614  000184                     	ds	1
  1615  000185                     ??___ftpack:
  1616                           
  1617                           ; 0 bytes @ 0x5
  1618  000185                     	ds	1
  1619  000186                     ??___ftge:
  1620                           
  1621                           ; 0 bytes @ 0x6
  1622  000186                     	ds	2
  1623  000188                     ??_MSC_DelayMS:
  1624  000188                     ?___lwtoft:
  1625                           	opt stack 0
  1626  000188                     ___lwtoft@c:
  1627                           	opt stack 0
  1628                           
  1629                           ; 2 bytes @ 0x8
  1630  000188                     	ds	1
  1631  000189                     ___fttol@sign1:
  1632                           	opt stack 0
  1633  000189                     MSC_DelayMS@i:
  1634                           	opt stack 0
  1635                           
  1636                           ; 4 bytes @ 0x9
  1637  000189                     	ds	1
  1638  00018A                     ___fttol@lval:
  1639                           	opt stack 0
  1640                           
  1641                           ; 4 bytes @ 0xA
  1642  00018A                     	ds	1
  1643  00018B                     ?___ftmul:
  1644                           	opt stack 0
  1645  00018B                     ___ftmul@f1:
  1646                           	opt stack 0
  1647                           
  1648                           ; 3 bytes @ 0xB
  1649  00018B                     	ds	2
  1650  00018D                     MSC_BlinkLED@blink:
  1651                           	opt stack 0
  1652                           
  1653                           ; 2 bytes @ 0xD
  1654  00018D                     	ds	1
  1655  00018E                     ___fttol@exp1:
  1656                           	opt stack 0
  1657  00018E                     ___ftmul@f2:
  1658                           	opt stack 0
  1659                           
  1660                           ; 3 bytes @ 0xE
  1661  00018E                     	ds	1
  1662  00018F                     MSC_BlinkLED@speed:
  1663                           	opt stack 0
  1664                           
  1665                           ; 2 bytes @ 0xF
  1666  00018F                     	ds	2
  1667  000191                     ??_MSC_BlinkLED:
  1668  000191                     ??___ftmul:
  1669                           
  1670                           ; 0 bytes @ 0x11
  1671  000191                     	ds	2
  1672  000193                     MSC_BlinkLED@i:
  1673                           	opt stack 0
  1674                           
  1675                           ; 2 bytes @ 0x13
  1676  000193                     	ds	1
  1677  000194                     ___ftmul@exp:
  1678                           	opt stack 0
  1679                           
  1680                           ; 1 bytes @ 0x14
  1681  000194                     	ds	1
  1682  000195                     ___ftmul@f3_as_product:
  1683                           	opt stack 0
  1684                           
  1685                           ; 3 bytes @ 0x15
  1686  000195                     	ds	3
  1687  000198                     ___ftmul@cntr:
  1688                           	opt stack 0
  1689                           
  1690                           ; 1 bytes @ 0x18
  1691  000198                     	ds	1
  1692  000199                     ___ftmul@sign:
  1693                           	opt stack 0
  1694                           
  1695                           ; 1 bytes @ 0x19
  1696  000199                     	ds	1
  1697  00019A                     RF_LoadCode@Low:
  1698                           	opt stack 0
  1699  00019A                     IR_LoadCode@Low:
  1700                           	opt stack 0
  1701                           
  1702                           ; 3 bytes @ 0x1A
  1703  00019A                     	ds	3
  1704  00019D                     RF_LoadCode@High:
  1705                           	opt stack 0
  1706  00019D                     IR_LoadCode@High:
  1707                           	opt stack 0
  1708                           
  1709                           ; 3 bytes @ 0x1D
  1710  00019D                     	ds	3
  1711  0001A0                     tblptru	equ	0xFF8
  1712                           tblptrh	equ	0xFF7
  1713                           tblptrl	equ	0xFF6
  1714                           tablat	equ	0xFF5
  1715                           postinc0	equ	0xFEE
  1716                           wreg	equ	0xFE8
  1717                           postdec1	equ	0xFE5
  1718                           fsr1h	equ	0xFE2
  1719                           fsr1l	equ	0xFE1
  1720                           
  1721                           ; 0 bytes @ 0x20
  1722                           
  1723                           	psect	cstackBANK0
  1724  000080                     __pcstackBANK0:
  1725                           	opt stack 0
  1726  000080                     ?i2___ftpack:
  1727                           	opt stack 0
  1728  000080                     i2RF_DataInt@state:
  1729                           	opt stack 0
  1730  000080                     i2TMR_Timer0@state:
  1731                           	opt stack 0
  1732  000080                     i2TMR_Timer0Int@state:
  1733                           	opt stack 0
  1734  000080                     i2MSC_DelayNOP@NOPs:
  1735                           	opt stack 0
  1736  000080                     i2MSC_CleanBufferInt@data:
  1737                           	opt stack 0
  1738  000080                     i2FSH_VerifyWriteIntArray@ConstArray:
  1739                           	opt stack 0
  1740  000080                     i2___ftpack@arg:
  1741                           	opt stack 0
  1742  000080                     i2FSH_AddressToBlock@Address:
  1743                           	opt stack 0
  1744                           
  1745                           ; 4 bytes @ 0x0
  1746  000080                     	ds	1
  1747  000081                     i2TMR_ResetTimer0@TimerOn:
  1748                           	opt stack 0
  1749                           
  1750                           ; 1 bytes @ 0x1
  1751  000081                     	ds	1
  1752  000082                     i2MSC_DelayNOP@i:
  1753                           	opt stack 0
  1754  000082                     i2MSC_CleanBufferInt@count:
  1755                           	opt stack 0
  1756                           
  1757                           ; 2 bytes @ 0x2
  1758  000082                     	ds	1
  1759  000083                     i2___ftpack@exp:
  1760                           	opt stack 0
  1761  000083                     i2FSH_VerifyWriteIntArray@Array:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0x3
  1765  000083                     	ds	1
  1766  000084                     i2___ftpack@sign:
  1767                           	opt stack 0
  1768  000084                     i2MSC_CleanBufferInt@i:
  1769                           	opt stack 0
  1770  000084                     i2FSH_WriteIntArray@Array:
  1771                           	opt stack 0
  1772  000084                     i2MSC_DelayMS@US:
  1773                           	opt stack 0
  1774                           
  1775                           ; 4 bytes @ 0x4
  1776  000084                     	ds	1
  1777  000085                     ??i2_FSH_VerifyWriteIntArray:
  1778  000085                     ??i2___ftpack:
  1779                           
  1780                           ; 0 bytes @ 0x5
  1781  000085                     	ds	1
  1782  000086                     i2MSC_BufferCopyIntConst@from:
  1783                           	opt stack 0
  1784                           
  1785                           ; 3 bytes @ 0x6
  1786  000086                     	ds	1
  1787  000087                     ??i2_FSH_WriteIntArray:
  1788                           
  1789                           ; 0 bytes @ 0x7
  1790  000087                     	ds	1
  1791  000088                     ??i2_MSC_DelayMS:
  1792  000088                     ?i2___lwtoft:
  1793                           	opt stack 0
  1794  000088                     i2___lwtoft@c:
  1795                           	opt stack 0
  1796                           
  1797                           ; 2 bytes @ 0x8
  1798  000088                     	ds	1
  1799  000089                     i2MSC_BufferCopyIntConst@to:
  1800                           	opt stack 0
  1801  000089                     i2MSC_DelayMS@i:
  1802                           	opt stack 0
  1803                           
  1804                           ; 4 bytes @ 0x9
  1805  000089                     	ds	1
  1806  00008A                     i2FSH_VerifyWriteIntArray@i:
  1807                           	opt stack 0
  1808                           
  1809                           ; 1 bytes @ 0xA
  1810  00008A                     	ds	1
  1811  00008B                     ?i2___ftmul:
  1812                           	opt stack 0
  1813  00008B                     i2MSC_BufferCopyIntConst@count:
  1814                           	opt stack 0
  1815  00008B                     i2___ftge@ff1:
  1816                           	opt stack 0
  1817  00008B                     i2___ftmul@f1:
  1818                           	opt stack 0
  1819                           
  1820                           ; 3 bytes @ 0xB
  1821  00008B                     	ds	1
  1822  00008C                     i2FSH_WriteIntArray@i:
  1823                           	opt stack 0
  1824                           
  1825                           ; 1 bytes @ 0xC
  1826  00008C                     	ds	1
  1827  00008D                     i2MSC_BufferCopyIntConst@shift:
  1828                           	opt stack 0
  1829  00008D                     i2FSH_EraseBlock@Address:
  1830                           	opt stack 0
  1831                           
  1832                           ; 4 bytes @ 0xD
  1833  00008D                     	ds	1
  1834  00008E                     i2___ftge@ff2:
  1835                           	opt stack 0
  1836  00008E                     i2___ftmul@f2:
  1837                           	opt stack 0
  1838                           
  1839                           ; 3 bytes @ 0xE
  1840  00008E                     	ds	1
  1841  00008F                     i2MSC_BufferCopyIntConst@i:
  1842                           	opt stack 0
  1843                           
  1844                           ; 2 bytes @ 0xF
  1845  00008F                     	ds	2
  1846  000091                     ??i2___ftge:
  1847  000091                     ??i2___ftmul:
  1848  000091                     i2FSH_EraseBlock@highint:
  1849                           	opt stack 0
  1850                           
  1851                           ; 1 bytes @ 0x11
  1852  000091                     	ds	1
  1853  000092                     i2FSH_EraseBlock@lowint:
  1854                           	opt stack 0
  1855                           
  1856                           ; 1 bytes @ 0x12
  1857  000092                     	ds	1
  1858  000093                     i2FSH_EraseBlock@WriteTries:
  1859                           	opt stack 0
  1860                           
  1861                           ; 1 bytes @ 0x13
  1862  000093                     	ds	1
  1863  000094                     ??i2_FSH_Write_IR_RF:
  1864  000094                     i2___ftmul@exp:
  1865                           	opt stack 0
  1866                           
  1867                           ; 1 bytes @ 0x14
  1868  000094                     	ds	1
  1869  000095                     i2___ftmul@f3_as_product:
  1870                           	opt stack 0
  1871                           
  1872                           ; 3 bytes @ 0x15
  1873  000095                     	ds	3
  1874  000098                     i2___ftmul@cntr:
  1875                           	opt stack 0
  1876                           
  1877                           ; 1 bytes @ 0x18
  1878  000098                     	ds	1
  1879  000099                     i2___ftmul@sign:
  1880                           	opt stack 0
  1881                           
  1882                           ; 1 bytes @ 0x19
  1883  000099                     	ds	1
  1884  00009A                     i2FSH_Write_IR_RF@highint:
  1885                           	opt stack 0
  1886                           
  1887                           ; 1 bytes @ 0x1A
  1888  00009A                     	ds	1
  1889  00009B                     i2FSH_Write_IR_RF@lowint:
  1890                           	opt stack 0
  1891                           
  1892                           ; 1 bytes @ 0x1B
  1893  00009B                     	ds	1
  1894  00009C                     i2FSH_Write_IR_RF@FlashWasteindex:
  1895                           	opt stack 0
  1896                           
  1897                           ; 2 bytes @ 0x1C
  1898  00009C                     	ds	2
  1899  00009E                     i2FSH_Write_IR_RF@j:
  1900                           	opt stack 0
  1901                           
  1902                           ; 1 bytes @ 0x1E
  1903  00009E                     	ds	1
  1904  00009F                     i2FSH_Write_IR_RF@status:
  1905                           	opt stack 0
  1906                           
  1907                           ; 1 bytes @ 0x1F
  1908  00009F                     	ds	1
  1909  0000A0                     i2FSH_Write_IR_RF@i:
  1910                           	opt stack 0
  1911                           
  1912                           ; 2 bytes @ 0x20
  1913  0000A0                     	ds	2
  1914  0000A2                     i2FSH_Write_IR_RF@WriteTries:
  1915                           	opt stack 0
  1916                           
  1917                           ; 1 bytes @ 0x22
  1918  0000A2                     	ds	1
  1919  0000A3                     
  1920                           ; 0 bytes @ 0x23
  1921  0000A3                     	ds	2
  1922  0000A5                     RF_CheckCode@Low:
  1923                           	opt stack 0
  1924                           
  1925                           ; 3 bytes @ 0x25
  1926  0000A5                     	ds	3
  1927  0000A8                     RF_CheckCode@High:
  1928                           	opt stack 0
  1929                           
  1930                           ; 3 bytes @ 0x28
  1931  0000A8                     	ds	3
  1932  0000AB                     RF_CheckCode@i:
  1933                           	opt stack 0
  1934                           
  1935                           ; 1 bytes @ 0x2B
  1936  0000AB                     	ds	1
  1937  0000AC                     ??_high_isr:
  1938                           
  1939                           ; 0 bytes @ 0x2C
  1940  0000AC                     	ds	14
  1941  0000BA                     high_isr@RFtemp:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0x3A
  1945  0000BA                     	ds	2
  1946                           tblptru	equ	0xFF8
  1947                           tblptrh	equ	0xFF7
  1948                           tblptrl	equ	0xFF6
  1949                           tablat	equ	0xFF5
  1950                           postinc0	equ	0xFEE
  1951                           wreg	equ	0xFE8
  1952                           postdec1	equ	0xFE5
  1953                           fsr1h	equ	0xFE2
  1954                           fsr1l	equ	0xFE1
  1955                           
  1956                           	psect	cstackCOMRAM
  1957  000001                     __pcstackCOMRAM:
  1958                           	opt stack 0
  1959  000001                     ?i1___ftpack:
  1960                           	opt stack 0
  1961  000001                     i1RF_DataInt@state:
  1962                           	opt stack 0
  1963  000001                     i1IR_ReadReceiver@value:
  1964                           	opt stack 0
  1965  000001                     i1BUT_ReadButton@value:
  1966                           	opt stack 0
  1967  000001                     i1TMR_Timer0@state:
  1968                           	opt stack 0
  1969  000001                     i1TMR_Timer1@state:
  1970                           	opt stack 0
  1971  000001                     i1TMR_Timer2@state:
  1972                           	opt stack 0
  1973  000001                     i1TMR_Timer0Int@state:
  1974                           	opt stack 0
  1975  000001                     i1MSC_DelayNOP@NOPs:
  1976                           	opt stack 0
  1977  000001                     i1MSC_CleanBufferInt@data:
  1978                           	opt stack 0
  1979  000001                     FSH_VerifyWriteIntArray@ConstArray:
  1980                           	opt stack 0
  1981  000001                     i1___ftpack@arg:
  1982                           	opt stack 0
  1983  000001                     FSH_AddressToBlock@Address:
  1984                           	opt stack 0
  1985                           
  1986                           ; 4 bytes @ 0x0
  1987  000001                     	ds	1
  1988  000002                     TMR_ResetTimer2@TimerOn:
  1989                           	opt stack 0
  1990  000002                     i1TMR_ResetTimer1@TimerOn:
  1991                           	opt stack 0
  1992                           
  1993                           ; 1 bytes @ 0x1
  1994  000002                     	ds	1
  1995  000003                     TMR_Timer2Start@time:
  1996                           	opt stack 0
  1997  000003                     i1MSC_DelayNOP@i:
  1998                           	opt stack 0
  1999  000003                     i1MSC_CleanBufferInt@count:
  2000                           	opt stack 0
  2001                           
  2002                           ; 2 bytes @ 0x2
  2003  000003                     	ds	1
  2004  000004                     i1___ftpack@exp:
  2005                           	opt stack 0
  2006  000004                     FSH_VerifyWriteIntArray@Array:
  2007                           	opt stack 0
  2008                           
  2009                           ; 2 bytes @ 0x3
  2010  000004                     	ds	1
  2011  000005                     i1___ftpack@sign:
  2012                           	opt stack 0
  2013  000005                     i1MSC_CleanBufferInt@i:
  2014                           	opt stack 0
  2015  000005                     FSH_WriteIntArray@Array:
  2016                           	opt stack 0
  2017  000005                     i1MSC_DelayMS@US:
  2018                           	opt stack 0
  2019                           
  2020                           ; 4 bytes @ 0x4
  2021  000005                     	ds	1
  2022  000006                     ??_FSH_VerifyWriteIntArray:
  2023  000006                     ??i1___ftpack:
  2024                           
  2025                           ; 0 bytes @ 0x5
  2026  000006                     	ds	1
  2027  000007                     MSC_BufferCopyIntConst@from:
  2028                           	opt stack 0
  2029                           
  2030                           ; 3 bytes @ 0x6
  2031  000007                     	ds	1
  2032  000008                     ??_FSH_WriteIntArray:
  2033                           
  2034                           ; 0 bytes @ 0x7
  2035  000008                     	ds	1
  2036  000009                     ??i1_MSC_DelayMS:
  2037  000009                     ?i1___lwtoft:
  2038                           	opt stack 0
  2039  000009                     i1___lwtoft@c:
  2040                           	opt stack 0
  2041                           
  2042                           ; 2 bytes @ 0x8
  2043  000009                     	ds	1
  2044  00000A                     MSC_BufferCopyIntConst@to:
  2045                           	opt stack 0
  2046  00000A                     i1MSC_DelayMS@i:
  2047                           	opt stack 0
  2048                           
  2049                           ; 4 bytes @ 0x9
  2050  00000A                     	ds	1
  2051  00000B                     FSH_VerifyWriteIntArray@i:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0xA
  2055  00000B                     	ds	1
  2056  00000C                     ?___ftdiv:
  2057                           	opt stack 0
  2058  00000C                     MSC_BufferCopyIntConst@count:
  2059                           	opt stack 0
  2060  00000C                     ___ftdiv@f1:
  2061                           	opt stack 0
  2062  00000C                     i1___ftge@ff1:
  2063                           	opt stack 0
  2064                           
  2065                           ; 3 bytes @ 0xB
  2066  00000C                     	ds	1
  2067  00000D                     FSH_WriteIntArray@i:
  2068                           	opt stack 0
  2069                           
  2070                           ; 1 bytes @ 0xC
  2071  00000D                     	ds	1
  2072  00000E                     MSC_BufferCopyIntConst@shift:
  2073                           	opt stack 0
  2074  00000E                     FSH_EraseBlock@Address:
  2075                           	opt stack 0
  2076                           
  2077                           ; 4 bytes @ 0xD
  2078  00000E                     	ds	1
  2079  00000F                     ___ftdiv@f2:
  2080                           	opt stack 0
  2081  00000F                     i1___ftge@ff2:
  2082                           	opt stack 0
  2083                           
  2084                           ; 3 bytes @ 0xE
  2085  00000F                     	ds	1
  2086  000010                     MSC_BufferCopyIntConst@i:
  2087                           	opt stack 0
  2088                           
  2089                           ; 2 bytes @ 0xF
  2090  000010                     	ds	2
  2091  000012                     ??___ftdiv:
  2092  000012                     ??i1___ftge:
  2093  000012                     FSH_EraseBlock@highint:
  2094                           	opt stack 0
  2095                           
  2096                           ; 1 bytes @ 0x11
  2097  000012                     	ds	1
  2098  000013                     FSH_EraseBlock@lowint:
  2099                           	opt stack 0
  2100                           
  2101                           ; 1 bytes @ 0x12
  2102  000013                     	ds	1
  2103  000014                     FSH_EraseBlock@WriteTries:
  2104                           	opt stack 0
  2105                           
  2106                           ; 1 bytes @ 0x13
  2107  000014                     	ds	1
  2108  000015                     ??_FSH_Write_IR_RF:
  2109  000015                     ___ftdiv@cntr:
  2110                           	opt stack 0
  2111                           
  2112                           ; 1 bytes @ 0x14
  2113  000015                     	ds	1
  2114  000016                     ___ftdiv@f3:
  2115                           	opt stack 0
  2116                           
  2117                           ; 3 bytes @ 0x15
  2118  000016                     	ds	3
  2119  000019                     ___ftdiv@exp:
  2120                           	opt stack 0
  2121                           
  2122                           ; 1 bytes @ 0x18
  2123  000019                     	ds	1
  2124  00001A                     ___ftdiv@sign:
  2125                           	opt stack 0
  2126                           
  2127                           ; 1 bytes @ 0x19
  2128  00001A                     	ds	1
  2129  00001B                     ?i1___ftmul:
  2130                           	opt stack 0
  2131  00001B                     FSH_Write_IR_RF@highint:
  2132                           	opt stack 0
  2133  00001B                     i1___ftmul@f1:
  2134                           	opt stack 0
  2135                           
  2136                           ; 3 bytes @ 0x1A
  2137  00001B                     	ds	1
  2138  00001C                     FSH_Write_IR_RF@lowint:
  2139                           	opt stack 0
  2140                           
  2141                           ; 1 bytes @ 0x1B
  2142  00001C                     	ds	1
  2143  00001D                     FSH_Write_IR_RF@FlashWasteindex:
  2144                           	opt stack 0
  2145                           
  2146                           ; 2 bytes @ 0x1C
  2147  00001D                     	ds	1
  2148  00001E                     i1___ftmul@f2:
  2149                           	opt stack 0
  2150                           
  2151                           ; 3 bytes @ 0x1D
  2152  00001E                     	ds	1
  2153  00001F                     FSH_Write_IR_RF@j:
  2154                           	opt stack 0
  2155                           
  2156                           ; 1 bytes @ 0x1E
  2157  00001F                     	ds	1
  2158  000020                     FSH_Write_IR_RF@status:
  2159                           	opt stack 0
  2160                           
  2161                           ; 1 bytes @ 0x1F
  2162  000020                     	ds	1
  2163  000021                     ??i1___ftmul:
  2164  000021                     FSH_Write_IR_RF@i:
  2165                           	opt stack 0
  2166                           
  2167                           ; 2 bytes @ 0x20
  2168  000021                     	ds	2
  2169  000023                     FSH_Write_IR_RF@WriteTries:
  2170                           	opt stack 0
  2171                           
  2172                           ; 1 bytes @ 0x22
  2173  000023                     	ds	1
  2174  000024                     i1___ftmul@exp:
  2175                           	opt stack 0
  2176                           
  2177                           ; 1 bytes @ 0x23
  2178  000024                     	ds	1
  2179  000025                     i1___ftmul@f3_as_product:
  2180                           	opt stack 0
  2181                           
  2182                           ; 3 bytes @ 0x24
  2183  000025                     	ds	3
  2184  000028                     i1___ftmul@cntr:
  2185                           	opt stack 0
  2186                           
  2187                           ; 1 bytes @ 0x27
  2188  000028                     	ds	1
  2189  000029                     i1___ftmul@sign:
  2190                           	opt stack 0
  2191                           
  2192                           ; 1 bytes @ 0x28
  2193  000029                     	ds	1
  2194  00002A                     ADC_CalculateVoltage@ADCcounts:
  2195                           	opt stack 0
  2196                           
  2197                           ; 2 bytes @ 0x29
  2198  00002A                     	ds	2
  2199  00002C                     IR_CheckCode@Low:
  2200                           	opt stack 0
  2201  00002C                     ADC_CalculateVoltage@Voltage:
  2202                           	opt stack 0
  2203                           
  2204                           ; 3 bytes @ 0x2B
  2205  00002C                     	ds	3
  2206  00002F                     IR_CheckCode@High:
  2207                           	opt stack 0
  2208                           
  2209                           ; 3 bytes @ 0x2E
  2210  00002F                     	ds	3
  2211  000032                     IR_CheckCode@i:
  2212                           	opt stack 0
  2213                           
  2214                           ; 1 bytes @ 0x31
  2215  000032                     	ds	1
  2216  000033                     ??_low_isr:
  2217                           
  2218                           ; 0 bytes @ 0x32
  2219  000033                     	ds	17
  2220  000044                     low_isr@IR_state:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x43
  2224  000044                     	ds	1
  2225  000045                     low_isr@button_state:
  2226                           	opt stack 0
  2227                           
  2228                           ; 1 bytes @ 0x44
  2229  000045                     	ds	1
  2230  000046                     low_isr@IRtemp:
  2231                           	opt stack 0
  2232                           
  2233                           ; 2 bytes @ 0x45
  2234  000046                     	ds	2
  2235                           tblptru	equ	0xFF8
  2236                           tblptrh	equ	0xFF7
  2237                           tblptrl	equ	0xFF6
  2238                           tablat	equ	0xFF5
  2239                           postinc0	equ	0xFEE
  2240                           wreg	equ	0xFE8
  2241                           postdec1	equ	0xFE5
  2242                           fsr1h	equ	0xFE2
  2243                           fsr1l	equ	0xFE1
  2244                           
  2245 ;;
  2246 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2247 ;;
  2248 ;; *************** function _main *****************
  2249 ;; Defined at:
  2250 ;;		line 76 in file "main.c"
  2251 ;; Parameters:    Size  Location     Type
  2252 ;;		None
  2253 ;; Auto vars:     Size  Location     Type
  2254 ;;		None
  2255 ;; Return value:  Size  Location     Type
  2256 ;;                  2   52[None  ] int 
  2257 ;; Registers used:
  2258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2259 ;; Tracked objects:
  2260 ;;		On entry : 0/0
  2261 ;;		On exit  : 0/0
  2262 ;;		Unchanged: 0/0
  2263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2264 ;;      Params:         0       0       0       0       0
  2265 ;;      Locals:         0       0       0       0       0
  2266 ;;      Temps:          0       0       0       0       0
  2267 ;;      Totals:         0       0       0       0       0
  2268 ;;Total ram usage:        0 bytes
  2269 ;; Hardware stack levels required when called:   18
  2270 ;; This function calls:
  2271 ;;		_ADC_Start
  2272 ;;		_IR_LoadCode
  2273 ;;		_Init_App
  2274 ;;		_Init_System
  2275 ;;		_MSC_BlinkLED
  2276 ;;		_MSC_DelayMS
  2277 ;;		_MTR_Rotate
  2278 ;;		_RF_LoadCode
  2279 ;;		_SYS_ActivityTimer
  2280 ;;		_SYS_ConfigureOscillator
  2281 ;;		___ftge
  2282 ;; This function is called by:
  2283 ;;		Startup code after reset
  2284 ;; This function uses a non-reentrant model
  2285 ;;
  2286                           
  2287                           	psect	text0
  2288  003822                     __ptext0:
  2289                           	opt stack 0
  2290  003822                     _main:
  2291                           	opt stack 13
  2292                           
  2293                           ;main.c: 79: SYS_ConfigureOscillator();
  2294                           
  2295                           ;incstack = 0
  2296  003822  EC99  F00E         	call	_SYS_ConfigureOscillator	;wreg free
  2297                           
  2298                           ;main.c: 80: Init_App();
  2299  003826  EC92  F00A         	call	_Init_App	;wreg free
  2300                           
  2301                           ;main.c: 81: Init_System();
  2302  00382A  EC3B  F00B         	call	_Init_System	;wreg free
  2303                           
  2304                           ;main.c: 84: RF_LoadCode();
  2305  00382E  EC64  F003         	call	_RF_LoadCode	;wreg free
  2306                           
  2307                           ;main.c: 85: IR_LoadCode();
  2308  003832  ECD9  F003         	call	_IR_LoadCode	;wreg free
  2309                           
  2310                           ;main.c: 86: MSC_BlinkLED(4,50);
  2311  003836  0E00               	movlw	0
  2312  003838  0101               	movlb	1	; () banked
  2313  00383A  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2314  00383C  0E04               	movlw	4
  2315  00383E  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2316  003840  0E00               	movlw	0
  2317  003842  0101               	movlb	1	; () banked
  2318  003844  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2319  003846  0E32               	movlw	50
  2320  003848  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2321  00384A  ECC1  F009         	call	_MSC_BlinkLED	;wreg free
  2322                           
  2323                           ;main.c: 87: (LATC &= ~0x10);
  2324  00384E  988B               	bcf	3979,4,c	;volatile
  2325  003850  D000               	goto	l7954
  2326  003852                     l7954:
  2327                           
  2328                           ;main.c: 90: {
  2329                           ;main.c: 91: if(System_State == 8)
  2330  003852  0E08               	movlw	8
  2331  003854  0100               	movlb	0	; () banked
  2332  003856  19D2               	xorwf	_System_State& (0+255),w,b
  2333  003858  A4D8               	btfss	status,2,c
  2334  00385A  D0AA               	goto	l8010
  2335                           
  2336                           ; BSR set to: 0
  2337                           ;main.c: 92: {
  2338                           ;main.c: 94: if(System_State_Change)
  2339  00385C  0100               	movlb	0	; () banked
  2340  00385E  51CC               	movf	_System_State_Change& (0+255),w,b
  2341  003860  B4D8               	btfsc	status,2,c
  2342  003862  D053               	goto	l7982
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;main.c: 95: {
  2346                           ;main.c: 97: (LATC &= ~0x10);
  2347  003864  988B               	bcf	3979,4,c	;volatile
  2348                           
  2349                           ; BSR set to: 0
  2350                           ;main.c: 98: if(RF_Saved == 90)
  2351  003866  0E5A               	movlw	90
  2352  003868  0100               	movlb	0	; () banked
  2353  00386A  19D1               	xorwf	_RF_Saved& (0+255),w,b
  2354  00386C  A4D8               	btfss	status,2,c
  2355  00386E  D022               	goto	l7970
  2356                           
  2357                           ; BSR set to: 0
  2358                           ;main.c: 99: {
  2359                           ;main.c: 100: if(Flash_Status == 1)
  2360  003870  0100               	movlb	0	; () banked
  2361  003872  05C5               	decf	_Flash_Status& (0+255),w,b
  2362  003874  A4D8               	btfss	status,2,c
  2363  003876  D00D               	goto	l7966
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;main.c: 101: {
  2367                           ;main.c: 102: MSC_BlinkLED(4,50);
  2368  003878  0E00               	movlw	0
  2369  00387A  0101               	movlb	1	; () banked
  2370  00387C  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2371  00387E  0E04               	movlw	4
  2372  003880  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2373  003882  0E00               	movlw	0
  2374  003884  0101               	movlb	1	; () banked
  2375  003886  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2376  003888  0E32               	movlw	50
  2377  00388A  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2378  00388C  ECC1  F009         	call	_MSC_BlinkLED	;wreg free
  2379                           
  2380                           ;main.c: 103: }
  2381  003890  D00D               	goto	l7968
  2382  003892                     l7966:
  2383                           
  2384                           ;main.c: 104: else
  2385                           ;main.c: 105: {
  2386                           ;main.c: 106: MSC_BlinkLED(6,75);
  2387  003892  0E00               	movlw	0
  2388  003894  0101               	movlb	1	; () banked
  2389  003896  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2390  003898  0E06               	movlw	6
  2391  00389A  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2392  00389C  0E00               	movlw	0
  2393  00389E  0101               	movlb	1	; () banked
  2394  0038A0  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2395  0038A2  0E4B               	movlw	75
  2396  0038A4  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2397  0038A6  ECC1  F009         	call	_MSC_BlinkLED	;wreg free
  2398  0038AA  D000               	goto	l7968
  2399  0038AC                     l7968:
  2400                           
  2401                           ;main.c: 107: }
  2402                           ;main.c: 108: RF_Saved = 91;
  2403  0038AC  0E5B               	movlw	91
  2404  0038AE  0100               	movlb	0	; () banked
  2405  0038B0  6FD1               	movwf	_RF_Saved& (0+255),b
  2406  0038B2  D000               	goto	l7970
  2407  0038B4                     l7970:
  2408                           
  2409                           ; BSR set to: 0
  2410                           ;main.c: 109: }
  2411                           ;main.c: 110: if(IR_Saved == 90)
  2412  0038B4  0E5A               	movlw	90
  2413  0038B6  0100               	movlb	0	; () banked
  2414  0038B8  19D0               	xorwf	_IR_Saved& (0+255),w,b
  2415  0038BA  A4D8               	btfss	status,2,c
  2416  0038BC  D022               	goto	l7980
  2417                           
  2418                           ; BSR set to: 0
  2419                           ;main.c: 111: {
  2420                           ;main.c: 112: if(Flash_Status == 1)
  2421  0038BE  0100               	movlb	0	; () banked
  2422  0038C0  05C5               	decf	_Flash_Status& (0+255),w,b
  2423  0038C2  A4D8               	btfss	status,2,c
  2424  0038C4  D00D               	goto	l7976
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;main.c: 113: {
  2428                           ;main.c: 114: MSC_BlinkLED(4,50);
  2429  0038C6  0E00               	movlw	0
  2430  0038C8  0101               	movlb	1	; () banked
  2431  0038CA  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2432  0038CC  0E04               	movlw	4
  2433  0038CE  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2434  0038D0  0E00               	movlw	0
  2435  0038D2  0101               	movlb	1	; () banked
  2436  0038D4  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2437  0038D6  0E32               	movlw	50
  2438  0038D8  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2439  0038DA  ECC1  F009         	call	_MSC_BlinkLED	;wreg free
  2440                           
  2441                           ;main.c: 115: }
  2442  0038DE  D00D               	goto	l7978
  2443  0038E0                     l7976:
  2444                           
  2445                           ;main.c: 116: else
  2446                           ;main.c: 117: {
  2447                           ;main.c: 118: MSC_BlinkLED(6,75);
  2448  0038E0  0E00               	movlw	0
  2449  0038E2  0101               	movlb	1	; () banked
  2450  0038E4  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2451  0038E6  0E06               	movlw	6
  2452  0038E8  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2453  0038EA  0E00               	movlw	0
  2454  0038EC  0101               	movlb	1	; () banked
  2455  0038EE  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2456  0038F0  0E4B               	movlw	75
  2457  0038F2  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2458  0038F4  ECC1  F009         	call	_MSC_BlinkLED	;wreg free
  2459  0038F8  D000               	goto	l7978
  2460  0038FA                     l7978:
  2461                           
  2462                           ;main.c: 119: }
  2463                           ;main.c: 120: IR_Saved = 91;
  2464  0038FA  0E5B               	movlw	91
  2465  0038FC  0100               	movlb	0	; () banked
  2466  0038FE  6FD0               	movwf	_IR_Saved& (0+255),b
  2467  003900  D000               	goto	l7980
  2468  003902                     l7980:
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;main.c: 121: }
  2472                           ;main.c: 122: System_State_Change = 0;
  2473  003902  0E00               	movlw	0
  2474  003904  0100               	movlb	0	; () banked
  2475  003906  6FCC               	movwf	_System_State_Change& (0+255),b
  2476  003908  D000               	goto	l7982
  2477  00390A                     l7982:
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;main.c: 123: }
  2481                           ;main.c: 124: if(RF_Data || IR_Data || Button_Data)
  2482  00390A  0100               	movlb	0	; () banked
  2483  00390C  51CA               	movf	_RF_Data& (0+255),w,b	;volatile
  2484  00390E  A4D8               	btfss	status,2,c
  2485  003910  D008               	goto	l7988
  2486                           
  2487                           ; BSR set to: 0
  2488  003912  0100               	movlb	0	; () banked
  2489  003914  51C7               	movf	_IR_Data& (0+255),w,b	;volatile
  2490  003916  A4D8               	btfss	status,2,c
  2491  003918  D004               	goto	l7988
  2492                           
  2493                           ; BSR set to: 0
  2494  00391A  0100               	movlb	0	; () banked
  2495  00391C  51C3               	movf	_Button_Data& (0+255),w,b	;volatile
  2496  00391E  B4D8               	btfsc	status,2,c
  2497  003920  D00E               	goto	l8000
  2498  003922                     l7988:
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;main.c: 125: {
  2502                           ;main.c: 126: (LATC |= 0x10);
  2503  003922  888B               	bsf	3979,4,c	;volatile
  2504                           
  2505                           ; BSR set to: 0
  2506                           ;main.c: 127: MTR_Rotate();
  2507  003924  ECA4  F008         	call	_MTR_Rotate	;wreg free
  2508                           
  2509                           ;main.c: 128: RF_Data = 0;
  2510  003928  0E00               	movlw	0
  2511  00392A  0100               	movlb	0	; () banked
  2512  00392C  6FCA               	movwf	_RF_Data& (0+255),b	;volatile
  2513                           
  2514                           ; BSR set to: 0
  2515                           ;main.c: 129: IR_Data = 0;
  2516  00392E  0E00               	movlw	0
  2517  003930  0100               	movlb	0	; () banked
  2518  003932  6FC7               	movwf	_IR_Data& (0+255),b	;volatile
  2519                           
  2520                           ; BSR set to: 0
  2521                           ;main.c: 130: Button_Data = 0;
  2522  003934  0E00               	movlw	0
  2523  003936  0100               	movlb	0	; () banked
  2524  003938  6FC3               	movwf	_Button_Data& (0+255),b	;volatile
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;main.c: 131: (LATC &= ~0x10);
  2528  00393A  988B               	bcf	3979,4,c	;volatile
  2529  00393C  D000               	goto	l8000
  2530  00393E                     l8000:
  2531                           
  2532                           ; BSR set to: 0
  2533                           ;main.c: 132: }
  2534                           ;main.c: 133: if(Rail_VIN < 3.5 || Rail_VIN > 5.5 )
  2535  00393E  C0CD  F180         	movff	_Rail_VIN,___ftge@ff1
  2536  003942  C0CE  F181         	movff	_Rail_VIN+1,___ftge@ff1+1
  2537  003946  C0CF  F182         	movff	_Rail_VIN+2,___ftge@ff1+2
  2538  00394A  0E00               	movlw	0
  2539  00394C  0101               	movlb	1	; () banked
  2540  00394E  6F83               	movwf	___ftge@ff2& (0+255),b
  2541  003950  0E60               	movlw	96
  2542  003952  0101               	movlb	1	; () banked
  2543  003954  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2544  003956  0E40               	movlw	64
  2545  003958  0101               	movlb	1	; () banked
  2546  00395A  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2547  00395C  ECB5  F004         	call	___ftge	;wreg free
  2548  003960  0101               	movlb	1	; () banked
  2549  003962  A0D8               	btfss	status,0,c
  2550  003964  D014               	goto	l8004
  2551                           
  2552                           ; BSR set to: 1
  2553  003966  0E00               	movlw	0
  2554  003968  0101               	movlb	1	; () banked
  2555  00396A  6F80               	movwf	___ftge@ff1& (0+255),b
  2556  00396C  0EB0               	movlw	176
  2557  00396E  0101               	movlb	1	; () banked
  2558  003970  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  2559  003972  0E40               	movlw	64
  2560  003974  0101               	movlb	1	; () banked
  2561  003976  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  2562  003978  C0CD  F183         	movff	_Rail_VIN,___ftge@ff2
  2563  00397C  C0CE  F184         	movff	_Rail_VIN+1,___ftge@ff2+1
  2564  003980  C0CF  F185         	movff	_Rail_VIN+2,___ftge@ff2+2
  2565  003984  ECB5  F004         	call	___ftge	;wreg free
  2566  003988  0101               	movlb	1	; () banked
  2567  00398A  B0D8               	btfsc	status,0,c
  2568  00398C  D00E               	goto	l8008
  2569  00398E                     l8004:
  2570                           
  2571                           ; BSR set to: 1
  2572                           ;main.c: 134: {
  2573                           ;main.c: 135: MSC_DelayMS(100);
  2574  00398E  0E64               	movlw	100
  2575  003990  0101               	movlb	1	; () banked
  2576  003992  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  2577  003994  0E00               	movlw	0
  2578  003996  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  2579  003998  0E00               	movlw	0
  2580  00399A  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  2581  00399C  0E00               	movlw	0
  2582  00399E  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  2583  0039A0  ECD8  F008         	call	_MSC_DelayMS	;wreg free
  2584                           
  2585                           ;main.c: 136: (LATC ^= 0x10);
  2586  0039A4  0E10               	movlw	16
  2587  0039A6  1A8B               	xorwf	3979,f,c	;volatile
  2588  0039A8  D000               	goto	l8008
  2589  0039AA                     l8008:
  2590                           
  2591                           ;main.c: 137: }
  2592                           ;main.c: 138: SYS_ActivityTimer();
  2593  0039AA  EC6D  F00B         	call	_SYS_ActivityTimer	;wreg free
  2594                           
  2595                           ;main.c: 139: }
  2596  0039AE  D02D               	goto	l8022
  2597  0039B0                     l8010:
  2598                           
  2599                           ;main.c: 140: else if(System_State == 10)
  2600  0039B0  0E0A               	movlw	10
  2601  0039B2  0100               	movlb	0	; () banked
  2602  0039B4  19D2               	xorwf	_System_State& (0+255),w,b
  2603  0039B6  A4D8               	btfss	status,2,c
  2604  0039B8  D028               	goto	l8022
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;main.c: 141: {
  2608                           ;main.c: 143: MSC_DelayMS(25);
  2609  0039BA  0E19               	movlw	25
  2610  0039BC  0101               	movlb	1	; () banked
  2611  0039BE  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  2612  0039C0  0E00               	movlw	0
  2613  0039C2  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  2614  0039C4  0E00               	movlw	0
  2615  0039C6  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  2616  0039C8  0E00               	movlw	0
  2617  0039CA  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  2618  0039CC  ECD8  F008         	call	_MSC_DelayMS	;wreg free
  2619                           
  2620                           ;main.c: 144: (LATC ^= 0x10);
  2621  0039D0  0E10               	movlw	16
  2622  0039D2  1A8B               	xorwf	3979,f,c	;volatile
  2623                           
  2624                           ;main.c: 145: if(RF_Data)
  2625  0039D4  0100               	movlb	0	; () banked
  2626  0039D6  51CA               	movf	_RF_Data& (0+255),w,b	;volatile
  2627  0039D8  B4D8               	btfsc	status,2,c
  2628  0039DA  D009               	goto	l70
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;main.c: 146: {
  2632                           ;main.c: 148: RF_Data = 0;
  2633  0039DC  0E00               	movlw	0
  2634  0039DE  0100               	movlb	0	; () banked
  2635  0039E0  6FCA               	movwf	_RF_Data& (0+255),b	;volatile
  2636                           
  2637                           ;main.c: 149: System_State = 8;
  2638  0039E2  0E08               	movlw	8
  2639  0039E4  0100               	movlb	0	; () banked
  2640  0039E6  6FD2               	movwf	_System_State& (0+255),b
  2641                           
  2642                           ;main.c: 150: System_State_Change = 1;
  2643  0039E8  0E01               	movlw	1
  2644  0039EA  0100               	movlb	0	; () banked
  2645  0039EC  6FCC               	movwf	_System_State_Change& (0+255),b
  2646  0039EE                     l70:
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;main.c: 151: }
  2650                           ;main.c: 152: if(IR_Data)
  2651  0039EE  0100               	movlb	0	; () banked
  2652  0039F0  51C7               	movf	_IR_Data& (0+255),w,b	;volatile
  2653  0039F2  B4D8               	btfsc	status,2,c
  2654  0039F4  D00A               	goto	l8022
  2655                           
  2656                           ; BSR set to: 0
  2657                           ;main.c: 153: {
  2658                           ;main.c: 155: IR_Data = 0;
  2659  0039F6  0E00               	movlw	0
  2660  0039F8  0100               	movlb	0	; () banked
  2661  0039FA  6FC7               	movwf	_IR_Data& (0+255),b	;volatile
  2662                           
  2663                           ;main.c: 156: System_State = 8;
  2664  0039FC  0E08               	movlw	8
  2665  0039FE  0100               	movlb	0	; () banked
  2666  003A00  6FD2               	movwf	_System_State& (0+255),b
  2667                           
  2668                           ;main.c: 157: System_State_Change = 1;
  2669  003A02  0E01               	movlw	1
  2670  003A04  0100               	movlb	0	; () banked
  2671  003A06  6FCC               	movwf	_System_State_Change& (0+255),b
  2672                           
  2673                           ; BSR set to: 0
  2674                           
  2675                           ; BSR set to: 0
  2676  003A08  D000               	goto	l8022
  2677  003A0A                     l8022:
  2678                           
  2679                           ;main.c: 158: }
  2680                           ;main.c: 159: }
  2681                           ;main.c: 161: ADC_SampleCount++;
  2682  003A0A  0100               	movlb	0	; () banked
  2683  003A0C  4BBC               	infsnz	_ADC_SampleCount& (0+255),f,b
  2684  003A0E  2BBD               	incf	(_ADC_SampleCount+1)& (0+255),f,b
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;main.c: 162: if(ADC_SampleCount > 10)
  2688  003A10  0100               	movlb	0	; () banked
  2689  003A12  51BD               	movf	(_ADC_SampleCount+1)& (0+255),w,b
  2690  003A14  E105               	bnz	u8970
  2691  003A16  0E0B               	movlw	11
  2692  003A18  0100               	movlb	0	; () banked
  2693  003A1A  5DBC               	subwf	_ADC_SampleCount& (0+255),w,b
  2694  003A1C  A0D8               	btfss	status,0,c
  2695  003A1E  D719               	goto	l7954
  2696  003A20                     u8970:
  2697                           
  2698                           ; BSR set to: 0
  2699                           ;main.c: 163: {
  2700                           ;main.c: 164: ADC_Start();
  2701  003A20  ECB6  F00E         	call	_ADC_Start	;wreg free
  2702                           
  2703                           ;main.c: 165: ADC_SampleCount = 0;
  2704  003A24  0E00               	movlw	0
  2705  003A26  0100               	movlb	0	; () banked
  2706  003A28  6FBD               	movwf	(_ADC_SampleCount+1)& (0+255),b
  2707  003A2A  0E00               	movlw	0
  2708  003A2C  6FBC               	movwf	_ADC_SampleCount& (0+255),b
  2709                           
  2710                           ; BSR set to: 0
  2711                           
  2712                           ; BSR set to: 0
  2713  003A2E  D711               	goto	l7954
  2714                           
  2715                           ; BSR set to: 0
  2716                           
  2717                           ; BSR set to: 0
  2718  003A30  EF4B  F001         	goto	start
  2719  003A34                     __end_of_main:
  2720                           	opt stack 0
  2721                           tblptru	equ	0xFF8
  2722                           tblptrh	equ	0xFF7
  2723                           tblptrl	equ	0xFF6
  2724                           tablat	equ	0xFF5
  2725                           postinc0	equ	0xFEE
  2726                           wreg	equ	0xFE8
  2727                           postdec1	equ	0xFE5
  2728                           fsr1h	equ	0xFE2
  2729                           fsr1l	equ	0xFE1
  2730                           status	equ	0xFD8
  2731                           
  2732 ;; *************** function ___ftge *****************
  2733 ;; Defined at:
  2734 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  2735 ;; Parameters:    Size  Location     Type
  2736 ;;  ff1             3    0[BANK1 ] float 
  2737 ;;  ff2             3    3[BANK1 ] float 
  2738 ;; Auto vars:     Size  Location     Type
  2739 ;;		None
  2740 ;; Return value:  Size  Location     Type
  2741 ;;		None               void
  2742 ;; Registers used:
  2743 ;;		wreg, status,2, status,0
  2744 ;; Tracked objects:
  2745 ;;		On entry : 0/0
  2746 ;;		On exit  : 0/0
  2747 ;;		Unchanged: 0/0
  2748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2749 ;;      Params:         0       0       6       0       0
  2750 ;;      Locals:         0       0       0       0       0
  2751 ;;      Temps:          0       0       3       0       0
  2752 ;;      Totals:         0       0       9       0       0
  2753 ;;Total ram usage:        9 bytes
  2754 ;; Hardware stack levels used:    1
  2755 ;; Hardware stack levels required when called:   12
  2756 ;; This function calls:
  2757 ;;		Nothing
  2758 ;; This function is called by:
  2759 ;;		_main
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           	psect	text1
  2764  00096A                     __ptext1:
  2765                           	opt stack 0
  2766  00096A                     ___ftge:
  2767                           	opt stack 18
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;incstack = 0
  2771  00096A  0101               	movlb	1	; () banked
  2772  00096C  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  2773  00096E  D01E               	goto	l7926
  2774                           
  2775                           ; BSR set to: 1
  2776  000970  C180  F186         	movff	___ftge@ff1,??___ftge
  2777  000974  C181  F187         	movff	___ftge@ff1+1,??___ftge+1
  2778  000978  C182  F188         	movff	___ftge@ff1+2,??___ftge+2
  2779  00097C  0101               	movlb	1	; () banked
  2780  00097E  1F86               	comf	??___ftge& (0+255),f,b
  2781  000980  1F87               	comf	(??___ftge+1)& (0+255),f,b
  2782  000982  1F88               	comf	(??___ftge+2)& (0+255),f,b
  2783  000984  2B86               	incf	??___ftge& (0+255),f,b
  2784  000986  0E00               	movlw	0
  2785  000988  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  2786  00098A  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  2787  00098C  0E00               	movlw	0
  2788  00098E  0101               	movlb	1	; () banked
  2789  000990  2586               	addwf	??___ftge& (0+255),w,b
  2790  000992  0101               	movlb	1	; () banked
  2791  000994  6F80               	movwf	___ftge@ff1& (0+255),b
  2792  000996  0E00               	movlw	0
  2793  000998  0101               	movlb	1	; () banked
  2794  00099A  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  2795  00099C  0101               	movlb	1	; () banked
  2796  00099E  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  2797  0009A0  0E80               	movlw	128
  2798  0009A2  0101               	movlb	1	; () banked
  2799  0009A4  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  2800  0009A6  0101               	movlb	1	; () banked
  2801  0009A8  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  2802  0009AA  D000               	goto	l7926
  2803  0009AC                     l7926:
  2804                           
  2805                           ; BSR set to: 1
  2806  0009AC  0101               	movlb	1	; () banked
  2807  0009AE  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  2808  0009B0  D01E               	goto	l7930
  2809                           
  2810                           ; BSR set to: 1
  2811  0009B2  C183  F186         	movff	___ftge@ff2,??___ftge
  2812  0009B6  C184  F187         	movff	___ftge@ff2+1,??___ftge+1
  2813  0009BA  C185  F188         	movff	___ftge@ff2+2,??___ftge+2
  2814  0009BE  0101               	movlb	1	; () banked
  2815  0009C0  1F86               	comf	??___ftge& (0+255),f,b
  2816  0009C2  1F87               	comf	(??___ftge+1)& (0+255),f,b
  2817  0009C4  1F88               	comf	(??___ftge+2)& (0+255),f,b
  2818  0009C6  2B86               	incf	??___ftge& (0+255),f,b
  2819  0009C8  0E00               	movlw	0
  2820  0009CA  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  2821  0009CC  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  2822  0009CE  0E00               	movlw	0
  2823  0009D0  0101               	movlb	1	; () banked
  2824  0009D2  2586               	addwf	??___ftge& (0+255),w,b
  2825  0009D4  0101               	movlb	1	; () banked
  2826  0009D6  6F83               	movwf	___ftge@ff2& (0+255),b
  2827  0009D8  0E00               	movlw	0
  2828  0009DA  0101               	movlb	1	; () banked
  2829  0009DC  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  2830  0009DE  0101               	movlb	1	; () banked
  2831  0009E0  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2832  0009E2  0E80               	movlw	128
  2833  0009E4  0101               	movlb	1	; () banked
  2834  0009E6  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  2835  0009E8  0101               	movlb	1	; () banked
  2836  0009EA  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2837  0009EC  D000               	goto	l7930
  2838  0009EE                     l7930:
  2839                           
  2840                           ; BSR set to: 1
  2841  0009EE  0E00               	movlw	0
  2842  0009F0  0101               	movlb	1	; () banked
  2843  0009F2  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  2844  0009F4  0E00               	movlw	0
  2845  0009F6  0101               	movlb	1	; () banked
  2846  0009F8  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  2847  0009FA  0E80               	movlw	128
  2848  0009FC  0101               	movlb	1	; () banked
  2849  0009FE  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  2850                           
  2851                           ; BSR set to: 1
  2852  000A00  0E00               	movlw	0
  2853  000A02  0101               	movlb	1	; () banked
  2854  000A04  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  2855  000A06  0E00               	movlw	0
  2856  000A08  0101               	movlb	1	; () banked
  2857  000A0A  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  2858  000A0C  0E80               	movlw	128
  2859  000A0E  0101               	movlb	1	; () banked
  2860  000A10  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  2861  000A12  0101               	movlb	1	; () banked
  2862  000A14  5183               	movf	___ftge@ff2& (0+255),w,b
  2863  000A16  0101               	movlb	1	; () banked
  2864  000A18  5D80               	subwf	___ftge@ff1& (0+255),w,b
  2865  000A1A  0101               	movlb	1	; () banked
  2866  000A1C  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  2867  000A1E  0101               	movlb	1	; () banked
  2868  000A20  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  2869  000A22  0101               	movlb	1	; () banked
  2870  000A24  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  2871  000A26  0101               	movlb	1	; () banked
  2872  000A28  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  2873  000A2A  B0D8               	btfsc	status,0,c
  2874  000A2C  D002               	goto	l7936
  2875                           
  2876                           ; BSR set to: 1
  2877  000A2E  90D8               	bcf	status,0,c
  2878  000A30  0012               	return	
  2879  000A32                     l7936:
  2880                           
  2881                           ; BSR set to: 1
  2882  000A32  80D8               	bsf	status,0,c
  2883                           
  2884                           ; BSR set to: 1
  2885  000A34  0012               	return	
  2886                           
  2887                           ; BSR set to: 1
  2888                           
  2889                           ; BSR set to: 1
  2890  000A36  0012               	return		;funcret
  2891  000A38                     __end_of___ftge:
  2892                           	opt stack 0
  2893                           tblptru	equ	0xFF8
  2894                           tblptrh	equ	0xFF7
  2895                           tblptrl	equ	0xFF6
  2896                           tablat	equ	0xFF5
  2897                           postinc0	equ	0xFEE
  2898                           wreg	equ	0xFE8
  2899                           postdec1	equ	0xFE5
  2900                           fsr1h	equ	0xFE2
  2901                           fsr1l	equ	0xFE1
  2902                           status	equ	0xFD8
  2903                           
  2904 ;; *************** function _SYS_ConfigureOscillator *****************
  2905 ;; Defined at:
  2906 ;;		line 77 in file "SYSTEM.c"
  2907 ;; Parameters:    Size  Location     Type
  2908 ;;		None
  2909 ;; Auto vars:     Size  Location     Type
  2910 ;;		None
  2911 ;; Return value:  Size  Location     Type
  2912 ;;		None               void
  2913 ;; Registers used:
  2914 ;;		None
  2915 ;; Tracked objects:
  2916 ;;		On entry : 0/0
  2917 ;;		On exit  : 0/0
  2918 ;;		Unchanged: 0/0
  2919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2920 ;;      Params:         0       0       0       0       0
  2921 ;;      Locals:         0       0       0       0       0
  2922 ;;      Temps:          0       0       0       0       0
  2923 ;;      Totals:         0       0       0       0       0
  2924 ;;Total ram usage:        0 bytes
  2925 ;; Hardware stack levels used:    1
  2926 ;; Hardware stack levels required when called:   12
  2927 ;; This function calls:
  2928 ;;		Nothing
  2929 ;; This function is called by:
  2930 ;;		_main
  2931 ;; This function uses a non-reentrant model
  2932 ;;
  2933                           
  2934                           	psect	text2
  2935  001D32                     __ptext2:
  2936                           	opt stack 0
  2937  001D32                     _SYS_ConfigureOscillator:
  2938                           	opt stack 18
  2939                           
  2940                           ;SYSTEM.c: 80: OSCTUNEbits.PLLEN = 1;
  2941                           
  2942                           ; BSR set to: 1
  2943                           ;incstack = 0
  2944  001D32  8C9B               	bsf	3995,6,c	;volatile
  2945                           
  2946                           ;SYSTEM.c: 81: while(!OSCCONbits.OSTS);
  2947  001D34  D000               	goto	l316
  2948  001D36                     l316:
  2949  001D36  A6D3               	btfss	4051,3,c	;volatile
  2950  001D38  D7FE               	goto	l316
  2951  001D3A  0012               	return		;funcret
  2952  001D3C                     __end_of_SYS_ConfigureOscillator:
  2953                           	opt stack 0
  2954                           tblptru	equ	0xFF8
  2955                           tblptrh	equ	0xFF7
  2956                           tblptrl	equ	0xFF6
  2957                           tablat	equ	0xFF5
  2958                           postinc0	equ	0xFEE
  2959                           wreg	equ	0xFE8
  2960                           postdec1	equ	0xFE5
  2961                           fsr1h	equ	0xFE2
  2962                           fsr1l	equ	0xFE1
  2963                           status	equ	0xFD8
  2964                           
  2965 ;; *************** function _SYS_ActivityTimer *****************
  2966 ;; Defined at:
  2967 ;;		line 90 in file "SYSTEM.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;		None
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;		None
  2972 ;; Return value:  Size  Location     Type
  2973 ;;		None               void
  2974 ;; Registers used:
  2975 ;;		wreg, status,2, status,0, cstack
  2976 ;; Tracked objects:
  2977 ;;		On entry : 0/0
  2978 ;;		On exit  : 0/0
  2979 ;;		Unchanged: 0/0
  2980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2981 ;;      Params:         0       0       0       0       0
  2982 ;;      Locals:         0       0       0       0       0
  2983 ;;      Temps:          0       0       0       0       0
  2984 ;;      Totals:         0       0       0       0       0
  2985 ;;Total ram usage:        0 bytes
  2986 ;; Hardware stack levels used:    1
  2987 ;; Hardware stack levels required when called:   13
  2988 ;; This function calls:
  2989 ;;		_SYS_ActivityTimerReset
  2990 ;;		_SYS_Sleep
  2991 ;; This function is called by:
  2992 ;;		_main
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           	psect	text3
  2997  0016DA                     __ptext3:
  2998                           	opt stack 0
  2999  0016DA                     _SYS_ActivityTimer:
  3000                           	opt stack 17
  3001                           
  3002                           ;SYSTEM.c: 92: if(Activity_Timer > 1000)
  3003                           
  3004                           ;incstack = 0
  3005  0016DA  504B               	movf	_Activity_Timer+3,w,c
  3006  0016DC  104A               	iorwf	_Activity_Timer+2,w,c
  3007  0016DE  E106               	bnz	u8790
  3008  0016E0  0EE9               	movlw	233
  3009  0016E2  5C48               	subwf	_Activity_Timer,w,c
  3010  0016E4  0E03               	movlw	3
  3011  0016E6  5849               	subwfb	_Activity_Timer+1,w,c
  3012  0016E8  A0D8               	btfss	status,0,c
  3013  0016EA  D005               	goto	l7918
  3014  0016EC                     u8790:
  3015                           
  3016                           ;SYSTEM.c: 93: {
  3017                           ;SYSTEM.c: 94: SYS_ActivityTimerReset();
  3018  0016EC  ECFF  F00D         	call	_SYS_ActivityTimerReset	;wreg free
  3019                           
  3020                           ;SYSTEM.c: 95: SYS_Sleep();
  3021  0016F0  ECAF  F00E         	call	_SYS_Sleep	;wreg free
  3022                           
  3023                           ;SYSTEM.c: 96: }
  3024  0016F4  0012               	return	
  3025  0016F6                     l7918:
  3026                           
  3027                           ;SYSTEM.c: 97: else
  3028                           ;SYSTEM.c: 98: {
  3029                           ;SYSTEM.c: 99: Activity_Timer++;
  3030  0016F6  0E01               	movlw	1
  3031  0016F8  2648               	addwf	_Activity_Timer,f,c
  3032  0016FA  0E00               	movlw	0
  3033  0016FC  2249               	addwfc	_Activity_Timer+1,f,c
  3034  0016FE  224A               	addwfc	_Activity_Timer+2,f,c
  3035  001700  224B               	addwfc	_Activity_Timer+3,f,c
  3036  001702  0012               	return	
  3037  001704  0012               	return		;funcret
  3038  001706                     __end_of_SYS_ActivityTimer:
  3039                           	opt stack 0
  3040                           tblptru	equ	0xFF8
  3041                           tblptrh	equ	0xFF7
  3042                           tblptrl	equ	0xFF6
  3043                           tablat	equ	0xFF5
  3044                           postinc0	equ	0xFEE
  3045                           wreg	equ	0xFE8
  3046                           postdec1	equ	0xFE5
  3047                           fsr1h	equ	0xFE2
  3048                           fsr1l	equ	0xFE1
  3049                           status	equ	0xFD8
  3050                           
  3051 ;; *************** function _SYS_Sleep *****************
  3052 ;; Defined at:
  3053 ;;		line 66 in file "SYSTEM.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;		None
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;		None
  3058 ;; Return value:  Size  Location     Type
  3059 ;;		None               void
  3060 ;; Registers used:
  3061 ;;		status,2, status,0
  3062 ;; Tracked objects:
  3063 ;;		On entry : 0/0
  3064 ;;		On exit  : 0/0
  3065 ;;		Unchanged: 0/0
  3066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3067 ;;      Params:         0       0       0       0       0
  3068 ;;      Locals:         0       0       0       0       0
  3069 ;;      Temps:          0       0       0       0       0
  3070 ;;      Totals:         0       0       0       0       0
  3071 ;;Total ram usage:        0 bytes
  3072 ;; Hardware stack levels used:    1
  3073 ;; Hardware stack levels required when called:   12
  3074 ;; This function calls:
  3075 ;;		Nothing
  3076 ;; This function is called by:
  3077 ;;		_SYS_ActivityTimer
  3078 ;; This function uses a non-reentrant model
  3079 ;;
  3080                           
  3081                           	psect	text4
  3082  001D5E                     __ptext4:
  3083                           	opt stack 0
  3084  001D5E                     _SYS_Sleep:
  3085                           	opt stack 17
  3086                           
  3087                           ;SYSTEM.c: 68: OSCCON &= ~0b10000000;
  3088                           
  3089                           ;incstack = 0
  3090  001D5E  9ED3               	bcf	4051,7,c	;volatile
  3091  001D60  0003               	sleep		;# 
  3092  001D62  0012               	return		;funcret
  3093  001D64                     __end_of_SYS_Sleep:
  3094                           	opt stack 0
  3095                           tblptru	equ	0xFF8
  3096                           tblptrh	equ	0xFF7
  3097                           tblptrl	equ	0xFF6
  3098                           tablat	equ	0xFF5
  3099                           postinc0	equ	0xFEE
  3100                           wreg	equ	0xFE8
  3101                           postdec1	equ	0xFE5
  3102                           fsr1h	equ	0xFE2
  3103                           fsr1l	equ	0xFE1
  3104                           status	equ	0xFD8
  3105                           
  3106 ;; *************** function _SYS_ActivityTimerReset *****************
  3107 ;; Defined at:
  3108 ;;		line 109 in file "SYSTEM.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;		None
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;		None
  3113 ;; Return value:  Size  Location     Type
  3114 ;;		None               void
  3115 ;; Registers used:
  3116 ;;		wreg, status,2
  3117 ;; Tracked objects:
  3118 ;;		On entry : 0/0
  3119 ;;		On exit  : 0/0
  3120 ;;		Unchanged: 0/0
  3121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3122 ;;      Params:         0       0       0       0       0
  3123 ;;      Locals:         0       0       0       0       0
  3124 ;;      Temps:          0       0       0       0       0
  3125 ;;      Totals:         0       0       0       0       0
  3126 ;;Total ram usage:        0 bytes
  3127 ;; Hardware stack levels used:    1
  3128 ;; Hardware stack levels required when called:   12
  3129 ;; This function calls:
  3130 ;;		Nothing
  3131 ;; This function is called by:
  3132 ;;		_SYS_ActivityTimer
  3133 ;; This function uses a non-reentrant model
  3134 ;;
  3135                           
  3136                           	psect	text5
  3137  001BFE                     __ptext5:
  3138                           	opt stack 0
  3139  001BFE                     _SYS_ActivityTimerReset:
  3140                           	opt stack 17
  3141                           
  3142                           ;SYSTEM.c: 111: Activity_Timer = 0;
  3143                           
  3144                           ;incstack = 0
  3145  001BFE  0E00               	movlw	0
  3146  001C00  6E48               	movwf	_Activity_Timer,c
  3147  001C02  0E00               	movlw	0
  3148  001C04  6E49               	movwf	_Activity_Timer+1,c
  3149  001C06  0E00               	movlw	0
  3150  001C08  6E4A               	movwf	_Activity_Timer+2,c
  3151  001C0A  0E00               	movlw	0
  3152  001C0C  6E4B               	movwf	_Activity_Timer+3,c
  3153  001C0E  0012               	return		;funcret
  3154  001C10                     __end_of_SYS_ActivityTimerReset:
  3155                           	opt stack 0
  3156                           tblptru	equ	0xFF8
  3157                           tblptrh	equ	0xFF7
  3158                           tblptrl	equ	0xFF6
  3159                           tablat	equ	0xFF5
  3160                           postinc0	equ	0xFEE
  3161                           wreg	equ	0xFE8
  3162                           postdec1	equ	0xFE5
  3163                           fsr1h	equ	0xFE2
  3164                           fsr1l	equ	0xFE1
  3165                           status	equ	0xFD8
  3166                           
  3167 ;; *************** function _RF_LoadCode *****************
  3168 ;; Defined at:
  3169 ;;		line 232 in file "RF.c"
  3170 ;; Parameters:    Size  Location     Type
  3171 ;;		None
  3172 ;; Auto vars:     Size  Location     Type
  3173 ;;  High            3   29[BANK1 ] float 
  3174 ;;  Low             3   26[BANK1 ] float 
  3175 ;; Return value:  Size  Location     Type
  3176 ;;		None               void
  3177 ;; Registers used:
  3178 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3179 ;; Tracked objects:
  3180 ;;		On entry : 0/0
  3181 ;;		On exit  : 0/0
  3182 ;;		Unchanged: 0/0
  3183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3184 ;;      Params:         0       0       0       0       0
  3185 ;;      Locals:         0       0       6       0       0
  3186 ;;      Temps:          0       0       0       0       0
  3187 ;;      Totals:         0       0       6       0       0
  3188 ;;Total ram usage:        6 bytes
  3189 ;; Hardware stack levels used:    1
  3190 ;; Hardware stack levels required when called:   14
  3191 ;; This function calls:
  3192 ;;		_RF_CalculateCodesize
  3193 ;;		___ftmul
  3194 ;;		___fttol
  3195 ;;		___lwtoft
  3196 ;; This function is called by:
  3197 ;;		_main
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           	psect	text6
  3202  0006C8                     __ptext6:
  3203                           	opt stack 0
  3204  0006C8                     _RF_LoadCode:
  3205                           	opt stack 16
  3206                           
  3207                           ;RF.c: 234: double Low = 0.0;
  3208                           
  3209                           ;incstack = 0
  3210  0006C8  0E00               	movlw	0
  3211  0006CA  0101               	movlb	1	; () banked
  3212  0006CC  6F9A               	movwf	RF_LoadCode@Low& (0+255),b
  3213  0006CE  0E00               	movlw	0
  3214  0006D0  0101               	movlb	1	; () banked
  3215  0006D2  6F9B               	movwf	(RF_LoadCode@Low+1)& (0+255),b
  3216  0006D4  0E00               	movlw	0
  3217  0006D6  0101               	movlb	1	; () banked
  3218  0006D8  6F9C               	movwf	(RF_LoadCode@Low+2)& (0+255),b
  3219                           
  3220                           ;RF.c: 235: double High = 0.0;
  3221  0006DA  0E00               	movlw	0
  3222  0006DC  0101               	movlb	1	; () banked
  3223  0006DE  6F9D               	movwf	RF_LoadCode@High& (0+255),b
  3224  0006E0  0E00               	movlw	0
  3225  0006E2  0101               	movlb	1	; () banked
  3226  0006E4  6F9E               	movwf	(RF_LoadCode@High+1)& (0+255),b
  3227  0006E6  0E00               	movlw	0
  3228  0006E8  0101               	movlb	1	; () banked
  3229  0006EA  6F9F               	movwf	(RF_LoadCode@High+2)& (0+255),b
  3230                           
  3231                           ; BSR set to: 1
  3232                           ;RF.c: 237: Low = (double)RF_SavedTiming[0] * (1.0 - 0.02);
  3233  0006EC  0E00               	movlw	0
  3234  0006EE  6EF6               	movwf	tblptrl,c
  3235  0006F0                     	if	1	;There is more than 1 active tblptr byte
  3236  0006F0  0E25               	movlw	37
  3237  0006F2  6EF7               	movwf	tblptrh,c
  3238  0006F4                     	endif
  3239  0006F4                     	if	0	;There are less than 3 active tblptr bytes
  3240  0006F4                     	endif
  3241  0006F4  0009               	tblrd		*+
  3242  0006F6  CFF5 F188          	movff	tablat,___lwtoft@c
  3243  0006FA  000A               	tblrd		*-
  3244  0006FC  CFF5 F189          	movff	tablat,___lwtoft@c+1
  3245  000700  ECC5  F00B         	call	___lwtoft	;wreg free
  3246  000704  C188  F18B         	movff	?___lwtoft,___ftmul@f1
  3247  000708  C189  F18C         	movff	?___lwtoft+1,___ftmul@f1+1
  3248  00070C  C18A  F18D         	movff	?___lwtoft+2,___ftmul@f1+2
  3249  000710  0EE1               	movlw	225
  3250  000712  0101               	movlb	1	; () banked
  3251  000714  6F8E               	movwf	___ftmul@f2& (0+255),b
  3252  000716  0E7A               	movlw	122
  3253  000718  0101               	movlb	1	; () banked
  3254  00071A  6F8F               	movwf	(___ftmul@f2+1)& (0+255),b
  3255  00071C  0E3F               	movlw	63
  3256  00071E  0101               	movlb	1	; () banked
  3257  000720  6F90               	movwf	(___ftmul@f2+2)& (0+255),b
  3258  000722  ECDA  F01D         	call	___ftmul	;wreg free
  3259  000726  C18B  F19A         	movff	?___ftmul,RF_LoadCode@Low
  3260  00072A  C18C  F19B         	movff	?___ftmul+1,RF_LoadCode@Low+1
  3261  00072E  C18D  F19C         	movff	?___ftmul+2,RF_LoadCode@Low+2
  3262                           
  3263                           ;RF.c: 238: High = (double)RF_SavedTiming[0] * (1.0 + 0.02);
  3264  000732  0E00               	movlw	0
  3265  000734  6EF6               	movwf	tblptrl,c
  3266  000736                     	if	1	;There is more than 1 active tblptr byte
  3267  000736  0E25               	movlw	37
  3268  000738  6EF7               	movwf	tblptrh,c
  3269  00073A                     	endif
  3270  00073A                     	if	0	;There are less than 3 active tblptr bytes
  3271  00073A                     	endif
  3272  00073A  0009               	tblrd		*+
  3273  00073C  CFF5 F188          	movff	tablat,___lwtoft@c
  3274  000740  000A               	tblrd		*-
  3275  000742  CFF5 F189          	movff	tablat,___lwtoft@c+1
  3276  000746  ECC5  F00B         	call	___lwtoft	;wreg free
  3277  00074A  C188  F18B         	movff	?___lwtoft,___ftmul@f1
  3278  00074E  C189  F18C         	movff	?___lwtoft+1,___ftmul@f1+1
  3279  000752  C18A  F18D         	movff	?___lwtoft+2,___ftmul@f1+2
  3280  000756  0E8F               	movlw	143
  3281  000758  0101               	movlb	1	; () banked
  3282  00075A  6F8E               	movwf	___ftmul@f2& (0+255),b
  3283  00075C  0E82               	movlw	130
  3284  00075E  0101               	movlb	1	; () banked
  3285  000760  6F8F               	movwf	(___ftmul@f2+1)& (0+255),b
  3286  000762  0E3F               	movlw	63
  3287  000764  0101               	movlb	1	; () banked
  3288  000766  6F90               	movwf	(___ftmul@f2+2)& (0+255),b
  3289  000768  ECDA  F01D         	call	___ftmul	;wreg free
  3290  00076C  C18B  F19D         	movff	?___ftmul,RF_LoadCode@High
  3291  000770  C18C  F19E         	movff	?___ftmul+1,RF_LoadCode@High+1
  3292  000774  C18D  F19F         	movff	?___ftmul+2,RF_LoadCode@High+2
  3293                           
  3294                           ;RF.c: 240: RF_SyncLow = (unsigned int) Low;
  3295  000778  C19A  F180         	movff	RF_LoadCode@Low,___fttol@f1
  3296  00077C  C19B  F181         	movff	RF_LoadCode@Low+1,___fttol@f1+1
  3297  000780  C19C  F182         	movff	RF_LoadCode@Low+2,___fttol@f1+2
  3298  000784  EC46  F01F         	call	___fttol	;wreg free
  3299  000788  C180  F0C0         	movff	?___fttol,_RF_SyncLow
  3300  00078C  C181  F0C1         	movff	?___fttol+1,_RF_SyncLow+1
  3301                           
  3302                           ;RF.c: 241: RF_SyncHigh = (unsigned int) High;
  3303  000790  C19D  F180         	movff	RF_LoadCode@High,___fttol@f1
  3304  000794  C19E  F181         	movff	RF_LoadCode@High+1,___fttol@f1+1
  3305  000798  C19F  F182         	movff	RF_LoadCode@High+2,___fttol@f1+2
  3306  00079C  EC46  F01F         	call	___fttol	;wreg free
  3307  0007A0  C180  F0BE         	movff	?___fttol,_RF_SyncHigh
  3308  0007A4  C181  F0BF         	movff	?___fttol+1,_RF_SyncHigh+1
  3309                           
  3310                           ;RF.c: 243: RF_CodeSize = RF_CalculateCodesize();
  3311  0007A8  EC0E  F00A         	call	_RF_CalculateCodesize	;wreg free
  3312  0007AC  0100               	movlb	0	; () banked
  3313  0007AE  6FC9               	movwf	_RF_CodeSize& (0+255),b
  3314                           
  3315                           ; BSR set to: 0
  3316  0007B0  0012               	return		;funcret
  3317  0007B2                     __end_of_RF_LoadCode:
  3318                           	opt stack 0
  3319                           tblptru	equ	0xFF8
  3320                           tblptrh	equ	0xFF7
  3321                           tblptrl	equ	0xFF6
  3322                           tablat	equ	0xFF5
  3323                           postinc0	equ	0xFEE
  3324                           wreg	equ	0xFE8
  3325                           postdec1	equ	0xFE5
  3326                           fsr1h	equ	0xFE2
  3327                           fsr1l	equ	0xFE1
  3328                           status	equ	0xFD8
  3329                           
  3330 ;; *************** function _RF_CalculateCodesize *****************
  3331 ;; Defined at:
  3332 ;;		line 251 in file "RF.c"
  3333 ;; Parameters:    Size  Location     Type
  3334 ;;		None
  3335 ;; Auto vars:     Size  Location     Type
  3336 ;;  i               1    0[BANK1 ] unsigned char 
  3337 ;; Return value:  Size  Location     Type
  3338 ;;                  1    wreg      unsigned char 
  3339 ;; Registers used:
  3340 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3341 ;; Tracked objects:
  3342 ;;		On entry : 0/0
  3343 ;;		On exit  : 0/0
  3344 ;;		Unchanged: 0/0
  3345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3346 ;;      Params:         0       0       0       0       0
  3347 ;;      Locals:         0       0       1       0       0
  3348 ;;      Temps:          0       0       0       0       0
  3349 ;;      Totals:         0       0       1       0       0
  3350 ;;Total ram usage:        1 bytes
  3351 ;; Hardware stack levels used:    1
  3352 ;; Hardware stack levels required when called:   12
  3353 ;; This function calls:
  3354 ;;		Nothing
  3355 ;; This function is called by:
  3356 ;;		_RF_LoadCode
  3357 ;; This function uses a non-reentrant model
  3358 ;;
  3359                           
  3360                           	psect	text7
  3361  00141C                     __ptext7:
  3362                           	opt stack 0
  3363  00141C                     _RF_CalculateCodesize:
  3364                           	opt stack 17
  3365                           
  3366                           ;RF.c: 253: unsigned char i;
  3367                           ;RF.c: 255: for(i=0; i<128;i++)
  3368                           
  3369                           ; BSR set to: 0
  3370                           ;incstack = 0
  3371  00141C  0E00               	movlw	0
  3372  00141E  0101               	movlb	1	; () banked
  3373  001420  6F80               	movwf	RF_CalculateCodesize@i& (0+255),b
  3374  001422                     l7648:
  3375                           
  3376                           ; BSR set to: 1
  3377  001422  0E7F               	movlw	127
  3378  001424  0101               	movlb	1	; () banked
  3379  001426  6580               	cpfsgt	RF_CalculateCodesize@i& (0+255),b
  3380  001428  D001               	goto	l7652
  3381                           
  3382                           ; BSR set to: 1
  3383  00142A  D018               	goto	l7662
  3384  00142C                     l7652:
  3385                           
  3386                           ; BSR set to: 1
  3387                           ;RF.c: 256: {
  3388                           ;RF.c: 257: if(RF_SavedTiming[i] == 0)
  3389  00142C  0101               	movlb	1	; () banked
  3390  00142E  5180               	movf	RF_CalculateCodesize@i& (0+255),w,b
  3391  001430  0D02               	mullw	2
  3392  001432  0E00               	movlw	0
  3393  001434  24F3               	addwf	prodl,w,c
  3394  001436  6EF6               	movwf	tblptrl,c
  3395  001438  0E25               	movlw	37
  3396  00143A  20F4               	addwfc	prodh,w,c
  3397  00143C  6EF7               	movwf	tblptrh,c
  3398  00143E  6AF8               	clrf	tblptru,c
  3399  001440  0E00               	movlw	0
  3400  001442  22F8               	addwfc	tblptru,f,c
  3401  001444  0009               	tblrd		*+
  3402  001446  50F5               	movf	tablat,w,c
  3403  001448  0009               	tblrd		*+
  3404  00144A  10F5               	iorwf	tablat,w,c
  3405  00144C  A4D8               	btfss	status,2,c
  3406  00144E  D003               	goto	l7658
  3407                           
  3408                           ; BSR set to: 1
  3409                           ;RF.c: 258: {
  3410                           ;RF.c: 259: return i;
  3411  001450  0101               	movlb	1	; () banked
  3412  001452  5180               	movf	RF_CalculateCodesize@i& (0+255),w,b
  3413                           
  3414                           ; BSR set to: 1
  3415  001454  0012               	return	
  3416  001456                     l7658:
  3417                           
  3418                           ; BSR set to: 1
  3419  001456  0101               	movlb	1	; () banked
  3420  001458  2B80               	incf	RF_CalculateCodesize@i& (0+255),f,b
  3421  00145A  D7E3               	goto	l7648
  3422  00145C                     l7662:
  3423                           
  3424                           ; BSR set to: 1
  3425                           ;RF.c: 260: }
  3426                           ;RF.c: 261: }
  3427                           ;RF.c: 262: return 128;
  3428  00145C  0E80               	movlw	128
  3429  00145E  0012               	return	
  3430                           
  3431                           ; BSR set to: 1
  3432                           
  3433                           ; BSR set to: 1
  3434  001460  0012               	return		;funcret
  3435  001462                     __end_of_RF_CalculateCodesize:
  3436                           	opt stack 0
  3437                           tblptru	equ	0xFF8
  3438                           tblptrh	equ	0xFF7
  3439                           tblptrl	equ	0xFF6
  3440                           tablat	equ	0xFF5
  3441                           prodh	equ	0xFF4
  3442                           prodl	equ	0xFF3
  3443                           postinc0	equ	0xFEE
  3444                           wreg	equ	0xFE8
  3445                           postdec1	equ	0xFE5
  3446                           fsr1h	equ	0xFE2
  3447                           fsr1l	equ	0xFE1
  3448                           status	equ	0xFD8
  3449                           
  3450 ;; *************** function _MTR_Rotate *****************
  3451 ;; Defined at:
  3452 ;;		line 104 in file "MOTOR.c"
  3453 ;; Parameters:    Size  Location     Type
  3454 ;;		None
  3455 ;; Auto vars:     Size  Location     Type
  3456 ;;		None
  3457 ;; Return value:  Size  Location     Type
  3458 ;;		None               void
  3459 ;; Registers used:
  3460 ;;		wreg, status,2, status,0, cstack
  3461 ;; Tracked objects:
  3462 ;;		On entry : 0/0
  3463 ;;		On exit  : 0/0
  3464 ;;		Unchanged: 0/0
  3465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3466 ;;      Params:         0       0       0       0       0
  3467 ;;      Locals:         0       0       0       0       0
  3468 ;;      Temps:          0       0       0       0       0
  3469 ;;      Totals:         0       0       0       0       0
  3470 ;;Total ram usage:        0 bytes
  3471 ;; Hardware stack levels used:    1
  3472 ;; Hardware stack levels required when called:   14
  3473 ;; This function calls:
  3474 ;;		_MSC_DelayMS
  3475 ;;		_MTR_IN1
  3476 ;;		_MTR_IN2
  3477 ;; This function is called by:
  3478 ;;		_main
  3479 ;; This function uses a non-reentrant model
  3480 ;;
  3481                           
  3482                           	psect	text8
  3483  001148                     __ptext8:
  3484                           	opt stack 0
  3485  001148                     _MTR_Rotate:
  3486                           	opt stack 16
  3487                           
  3488                           ;MOTOR.c: 106: if(DC_Motor == 0)
  3489                           
  3490                           ; BSR set to: 1
  3491                           ;incstack = 0
  3492  001148  0100               	movlb	0	; () banked
  3493  00114A  51C4               	movf	_DC_Motor& (0+255),w,b
  3494  00114C  0100               	movlb	0	; () banked
  3495  00114E  A4D8               	btfss	status,2,c
  3496  001150  D013               	goto	l7904
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;MOTOR.c: 107: {
  3500                           ;MOTOR.c: 108: MTR_IN1(0);
  3501  001152  0E00               	movlw	0
  3502  001154  EC23  F00D         	call	_MTR_IN1
  3503                           
  3504                           ;MOTOR.c: 109: MTR_IN2(1);
  3505  001158  0E01               	movlw	1
  3506  00115A  EC17  F00D         	call	_MTR_IN2
  3507                           
  3508                           ;MOTOR.c: 110: MSC_DelayMS(100);
  3509  00115E  0E64               	movlw	100
  3510  001160  0101               	movlb	1	; () banked
  3511  001162  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  3512  001164  0E00               	movlw	0
  3513  001166  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  3514  001168  0E00               	movlw	0
  3515  00116A  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  3516  00116C  0E00               	movlw	0
  3517  00116E  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  3518  001170  ECD8  F008         	call	_MSC_DelayMS	;wreg free
  3519                           
  3520                           ;MOTOR.c: 111: DC_Motor = 1;
  3521  001174  0E01               	movlw	1
  3522  001176  D012               	goto	L1
  3523  001178                     l7904:
  3524                           
  3525                           ; BSR set to: 0
  3526                           ;MOTOR.c: 113: else
  3527                           ;MOTOR.c: 114: {
  3528                           ;MOTOR.c: 115: MTR_IN1(1);
  3529  001178  0E01               	movlw	1
  3530  00117A  EC23  F00D         	call	_MTR_IN1
  3531                           
  3532                           ;MOTOR.c: 116: MTR_IN2(0);
  3533  00117E  0E00               	movlw	0
  3534  001180  EC17  F00D         	call	_MTR_IN2
  3535                           
  3536                           ;MOTOR.c: 117: MSC_DelayMS(100);
  3537  001184  0E64               	movlw	100
  3538  001186  0101               	movlb	1	; () banked
  3539  001188  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  3540  00118A  0E00               	movlw	0
  3541  00118C  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  3542  00118E  0E00               	movlw	0
  3543  001190  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  3544  001192  0E00               	movlw	0
  3545  001194  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  3546  001196  ECD8  F008         	call	_MSC_DelayMS	;wreg free
  3547                           
  3548                           ;MOTOR.c: 118: DC_Motor = 0;
  3549  00119A  0E00               	movlw	0
  3550  00119C                     L1:
  3551  00119C  0100               	movlb	0	; () banked
  3552  00119E  6FC4               	movwf	_DC_Motor& (0+255),b
  3553  0011A0  D000               	goto	l7908
  3554  0011A2                     l7908:
  3555                           
  3556                           ; BSR set to: 0
  3557                           ;MOTOR.c: 119: }
  3558                           ;MOTOR.c: 120: MTR_IN1(0);
  3559  0011A2  0E00               	movlw	0
  3560  0011A4  EC23  F00D         	call	_MTR_IN1
  3561                           
  3562                           ;MOTOR.c: 121: MTR_IN2(0);
  3563  0011A8  0E00               	movlw	0
  3564  0011AA  EC17  F00D         	call	_MTR_IN2
  3565  0011AE  0012               	return		;funcret
  3566  0011B0                     __end_of_MTR_Rotate:
  3567                           	opt stack 0
  3568                           tblptru	equ	0xFF8
  3569                           tblptrh	equ	0xFF7
  3570                           tblptrl	equ	0xFF6
  3571                           tablat	equ	0xFF5
  3572                           prodh	equ	0xFF4
  3573                           prodl	equ	0xFF3
  3574                           postinc0	equ	0xFEE
  3575                           wreg	equ	0xFE8
  3576                           postdec1	equ	0xFE5
  3577                           fsr1h	equ	0xFE2
  3578                           fsr1l	equ	0xFE1
  3579                           status	equ	0xFD8
  3580                           
  3581 ;; *************** function _MTR_IN2 *****************
  3582 ;; Defined at:
  3583 ;;		line 71 in file "MOTOR.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;  state           1    wreg     unsigned char 
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;  state           1    0[BANK1 ] unsigned char 
  3588 ;; Return value:  Size  Location     Type
  3589 ;;		None               void
  3590 ;; Registers used:
  3591 ;;		wreg, status,2, status,0
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3597 ;;      Params:         0       0       0       0       0
  3598 ;;      Locals:         0       0       1       0       0
  3599 ;;      Temps:          0       0       0       0       0
  3600 ;;      Totals:         0       0       1       0       0
  3601 ;;Total ram usage:        1 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:   12
  3604 ;; This function calls:
  3605 ;;		Nothing
  3606 ;; This function is called by:
  3607 ;;		_MTR_Rotate
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text9
  3612  001A2E                     __ptext9:
  3613                           	opt stack 0
  3614  001A2E                     _MTR_IN2:
  3615                           	opt stack 17
  3616                           
  3617                           ;incstack = 0
  3618                           ;MTR_IN2@state stored from wreg
  3619  001A2E  0101               	movlb	1	; () banked
  3620  001A30  6F80               	movwf	MTR_IN2@state& (0+255),b
  3621                           
  3622                           ; BSR set to: 1
  3623                           ;MOTOR.c: 73: if(state)
  3624  001A32  0101               	movlb	1	; () banked
  3625  001A34  5180               	movf	MTR_IN2@state& (0+255),w,b
  3626  001A36  0101               	movlb	1	; () banked
  3627  001A38  B4D8               	btfsc	status,2,c
  3628  001A3A  D002               	goto	l7676
  3629                           
  3630                           ; BSR set to: 1
  3631                           ;MOTOR.c: 74: {
  3632                           ;MOTOR.c: 75: LATC |= 0x04;
  3633  001A3C  848B               	bsf	3979,2,c	;volatile
  3634                           
  3635                           ;MOTOR.c: 76: }
  3636  001A3E  0012               	return	
  3637  001A40                     l7676:
  3638                           
  3639                           ; BSR set to: 1
  3640                           ;MOTOR.c: 77: else
  3641                           ;MOTOR.c: 78: {
  3642                           ;MOTOR.c: 79: LATC &= ~0x04;
  3643  001A40  948B               	bcf	3979,2,c	;volatile
  3644  001A42  0012               	return	
  3645                           
  3646                           ; BSR set to: 1
  3647                           
  3648                           ; BSR set to: 1
  3649  001A44  0012               	return		;funcret
  3650  001A46                     __end_of_MTR_IN2:
  3651                           	opt stack 0
  3652                           tblptru	equ	0xFF8
  3653                           tblptrh	equ	0xFF7
  3654                           tblptrl	equ	0xFF6
  3655                           tablat	equ	0xFF5
  3656                           prodh	equ	0xFF4
  3657                           prodl	equ	0xFF3
  3658                           postinc0	equ	0xFEE
  3659                           wreg	equ	0xFE8
  3660                           postdec1	equ	0xFE5
  3661                           fsr1h	equ	0xFE2
  3662                           fsr1l	equ	0xFE1
  3663                           status	equ	0xFD8
  3664                           
  3665 ;; *************** function _MTR_IN1 *****************
  3666 ;; Defined at:
  3667 ;;		line 54 in file "MOTOR.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;  state           1    wreg     unsigned char 
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  state           1    0[BANK1 ] unsigned char 
  3672 ;; Return value:  Size  Location     Type
  3673 ;;		None               void
  3674 ;; Registers used:
  3675 ;;		wreg, status,2, status,0
  3676 ;; Tracked objects:
  3677 ;;		On entry : 0/0
  3678 ;;		On exit  : 0/0
  3679 ;;		Unchanged: 0/0
  3680 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3681 ;;      Params:         0       0       0       0       0
  3682 ;;      Locals:         0       0       1       0       0
  3683 ;;      Temps:          0       0       0       0       0
  3684 ;;      Totals:         0       0       1       0       0
  3685 ;;Total ram usage:        1 bytes
  3686 ;; Hardware stack levels used:    1
  3687 ;; Hardware stack levels required when called:   12
  3688 ;; This function calls:
  3689 ;;		Nothing
  3690 ;; This function is called by:
  3691 ;;		_MTR_Rotate
  3692 ;; This function uses a non-reentrant model
  3693 ;;
  3694                           
  3695                           	psect	text10
  3696  001A46                     __ptext10:
  3697                           	opt stack 0
  3698  001A46                     _MTR_IN1:
  3699                           	opt stack 17
  3700                           
  3701                           ; BSR set to: 1
  3702                           ;incstack = 0
  3703                           ;MTR_IN1@state stored from wreg
  3704  001A46  0101               	movlb	1	; () banked
  3705  001A48  6F80               	movwf	MTR_IN1@state& (0+255),b
  3706                           
  3707                           ; BSR set to: 1
  3708                           ;MOTOR.c: 56: if(state)
  3709  001A4A  0101               	movlb	1	; () banked
  3710  001A4C  5180               	movf	MTR_IN1@state& (0+255),w,b
  3711  001A4E  0101               	movlb	1	; () banked
  3712  001A50  B4D8               	btfsc	status,2,c
  3713  001A52  D002               	goto	l7670
  3714                           
  3715                           ; BSR set to: 1
  3716                           ;MOTOR.c: 57: {
  3717                           ;MOTOR.c: 58: LATB |= 0x08;
  3718  001A54  868A               	bsf	3978,3,c	;volatile
  3719                           
  3720                           ;MOTOR.c: 59: }
  3721  001A56  0012               	return	
  3722  001A58                     l7670:
  3723                           
  3724                           ; BSR set to: 1
  3725                           ;MOTOR.c: 60: else
  3726                           ;MOTOR.c: 61: {
  3727                           ;MOTOR.c: 62: LATB &= ~0x08;
  3728  001A58  968A               	bcf	3978,3,c	;volatile
  3729  001A5A  0012               	return	
  3730                           
  3731                           ; BSR set to: 1
  3732                           
  3733                           ; BSR set to: 1
  3734  001A5C  0012               	return		;funcret
  3735  001A5E                     __end_of_MTR_IN1:
  3736                           	opt stack 0
  3737                           tblptru	equ	0xFF8
  3738                           tblptrh	equ	0xFF7
  3739                           tblptrl	equ	0xFF6
  3740                           tablat	equ	0xFF5
  3741                           prodh	equ	0xFF4
  3742                           prodl	equ	0xFF3
  3743                           postinc0	equ	0xFEE
  3744                           wreg	equ	0xFE8
  3745                           postdec1	equ	0xFE5
  3746                           fsr1h	equ	0xFE2
  3747                           fsr1l	equ	0xFE1
  3748                           status	equ	0xFD8
  3749                           
  3750 ;; *************** function _MSC_BlinkLED *****************
  3751 ;; Defined at:
  3752 ;;		line 1158 in file "MISC.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;  blink           2   13[BANK1 ] unsigned int 
  3755 ;;  speed           2   15[BANK1 ] unsigned int 
  3756 ;; Auto vars:     Size  Location     Type
  3757 ;;  i               2   19[BANK1 ] unsigned int 
  3758 ;; Return value:  Size  Location     Type
  3759 ;;		None               void
  3760 ;; Registers used:
  3761 ;;		wreg, status,2, status,0, cstack
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3767 ;;      Params:         0       0       4       0       0
  3768 ;;      Locals:         0       0       2       0       0
  3769 ;;      Temps:          0       0       2       0       0
  3770 ;;      Totals:         0       0       8       0       0
  3771 ;;Total ram usage:        8 bytes
  3772 ;; Hardware stack levels used:    1
  3773 ;; Hardware stack levels required when called:   14
  3774 ;; This function calls:
  3775 ;;		_MSC_DelayMS
  3776 ;; This function is called by:
  3777 ;;		_main
  3778 ;; This function uses a non-reentrant model
  3779 ;;
  3780                           
  3781                           	psect	text11
  3782  001382                     __ptext11:
  3783                           	opt stack 0
  3784  001382                     _MSC_BlinkLED:
  3785                           	opt stack 16
  3786                           
  3787                           ;MISC.c: 1160: unsigned int i;
  3788                           ;MISC.c: 1162: for(i=0;i<(blink<<1);i++)
  3789                           
  3790                           ; BSR set to: 1
  3791                           ;incstack = 0
  3792  001382  0E00               	movlw	0
  3793  001384  0101               	movlb	1	; () banked
  3794  001386  6F94               	movwf	(MSC_BlinkLED@i+1)& (0+255),b
  3795  001388  0E00               	movlw	0
  3796  00138A  6F93               	movwf	MSC_BlinkLED@i& (0+255),b
  3797  00138C  D00F               	goto	l7896
  3798  00138E                     l7890:
  3799                           
  3800                           ; BSR set to: 1
  3801                           ;MISC.c: 1163: {
  3802                           ;MISC.c: 1164: MSC_DelayMS(speed);
  3803  00138E  C18F  F184         	movff	MSC_BlinkLED@speed,MSC_DelayMS@US
  3804  001392  C190  F185         	movff	MSC_BlinkLED@speed+1,MSC_DelayMS@US+1
  3805  001396  0101               	movlb	1	; () banked
  3806  001398  6B86               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  3807  00139A  6B87               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  3808  00139C  ECD8  F008         	call	_MSC_DelayMS	;wreg free
  3809                           
  3810                           ;MISC.c: 1165: (LATC ^= 0x10);
  3811  0013A0  0E10               	movlw	16
  3812  0013A2  1A8B               	xorwf	3979,f,c	;volatile
  3813  0013A4  0101               	movlb	1	; () banked
  3814  0013A6  4B93               	infsnz	MSC_BlinkLED@i& (0+255),f,b
  3815  0013A8  2B94               	incf	(MSC_BlinkLED@i+1)& (0+255),f,b
  3816  0013AA  D000               	goto	l7896
  3817  0013AC                     l7896:
  3818                           
  3819                           ; BSR set to: 1
  3820  0013AC  C18D  F191         	movff	MSC_BlinkLED@blink,??_MSC_BlinkLED
  3821  0013B0  C18E  F192         	movff	MSC_BlinkLED@blink+1,??_MSC_BlinkLED+1
  3822  0013B4  90D8               	bcf	status,0,c
  3823  0013B6  0101               	movlb	1	; () banked
  3824  0013B8  3791               	rlcf	??_MSC_BlinkLED& (0+255),f,b
  3825  0013BA  3792               	rlcf	(??_MSC_BlinkLED+1)& (0+255),f,b
  3826  0013BC  0101               	movlb	1	; () banked
  3827  0013BE  5191               	movf	??_MSC_BlinkLED& (0+255),w,b
  3828  0013C0  0101               	movlb	1	; () banked
  3829  0013C2  5D93               	subwf	MSC_BlinkLED@i& (0+255),w,b
  3830  0013C4  0101               	movlb	1	; () banked
  3831  0013C6  5192               	movf	(??_MSC_BlinkLED+1)& (0+255),w,b
  3832  0013C8  0101               	movlb	1	; () banked
  3833  0013CA  5994               	subwfb	(MSC_BlinkLED@i+1)& (0+255),w,b
  3834  0013CC  A0D8               	btfss	status,0,c
  3835  0013CE  D7DF               	goto	l7890
  3836                           
  3837                           ; BSR set to: 1
  3838                           
  3839                           ; BSR set to: 1
  3840  0013D0  0012               	return		;funcret
  3841  0013D2                     __end_of_MSC_BlinkLED:
  3842                           	opt stack 0
  3843                           tblptru	equ	0xFF8
  3844                           tblptrh	equ	0xFF7
  3845                           tblptrl	equ	0xFF6
  3846                           tablat	equ	0xFF5
  3847                           prodh	equ	0xFF4
  3848                           prodl	equ	0xFF3
  3849                           postinc0	equ	0xFEE
  3850                           wreg	equ	0xFE8
  3851                           postdec1	equ	0xFE5
  3852                           fsr1h	equ	0xFE2
  3853                           fsr1l	equ	0xFE1
  3854                           status	equ	0xFD8
  3855                           
  3856 ;; *************** function _MSC_DelayMS *****************
  3857 ;; Defined at:
  3858 ;;		line 47 in file "MISC.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;  US              4    4[BANK1 ] long 
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  i               4    9[BANK1 ] long 
  3863 ;; Return value:  Size  Location     Type
  3864 ;;		None               void
  3865 ;; Registers used:
  3866 ;;		wreg, status,2, status,0, cstack
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3872 ;;      Params:         0       0       4       0       0
  3873 ;;      Locals:         0       0       4       0       0
  3874 ;;      Temps:          0       0       1       0       0
  3875 ;;      Totals:         0       0       9       0       0
  3876 ;;Total ram usage:        9 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:   13
  3879 ;; This function calls:
  3880 ;;		_MSC_DelayNOP
  3881 ;; This function is called by:
  3882 ;;		_main
  3883 ;;		_MTR_Rotate
  3884 ;;		_MSC_BlinkLED
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           	psect	text12
  3889  0011B0                     __ptext12:
  3890                           	opt stack 0
  3891  0011B0                     _MSC_DelayMS:
  3892                           	opt stack 16
  3893                           
  3894                           ;MISC.c: 49: long i;
  3895                           ;MISC.c: 51: for(i=0; i<US; i++)
  3896                           
  3897                           ; BSR set to: 1
  3898                           ;incstack = 0
  3899  0011B0  0E00               	movlw	0
  3900  0011B2  0101               	movlb	1	; () banked
  3901  0011B4  6F89               	movwf	MSC_DelayMS@i& (0+255),b
  3902  0011B6  0E00               	movlw	0
  3903  0011B8  6F8A               	movwf	(MSC_DelayMS@i+1)& (0+255),b
  3904  0011BA  0E00               	movlw	0
  3905  0011BC  6F8B               	movwf	(MSC_DelayMS@i+2)& (0+255),b
  3906  0011BE  0E00               	movlw	0
  3907  0011C0  6F8C               	movwf	(MSC_DelayMS@i+3)& (0+255),b
  3908  0011C2  D00F               	goto	l7574
  3909  0011C4                     l7570:
  3910                           
  3911                           ; BSR set to: 1
  3912                           ;MISC.c: 52: {
  3913                           ;MISC.c: 53: MSC_DelayNOP(466);
  3914  0011C4  0E01               	movlw	1
  3915  0011C6  0101               	movlb	1	; () banked
  3916  0011C8  6F81               	movwf	(MSC_DelayNOP@NOPs+1)& (0+255),b
  3917  0011CA  0ED2               	movlw	210
  3918  0011CC  6F80               	movwf	MSC_DelayNOP@NOPs& (0+255),b
  3919  0011CE  EC83  F00B         	call	_MSC_DelayNOP	;wreg free
  3920  0011D2  0E01               	movlw	1
  3921  0011D4  0101               	movlb	1	; () banked
  3922  0011D6  2789               	addwf	MSC_DelayMS@i& (0+255),f,b
  3923  0011D8  0E00               	movlw	0
  3924  0011DA  238A               	addwfc	(MSC_DelayMS@i+1)& (0+255),f,b
  3925  0011DC  238B               	addwfc	(MSC_DelayMS@i+2)& (0+255),f,b
  3926  0011DE  238C               	addwfc	(MSC_DelayMS@i+3)& (0+255),f,b
  3927  0011E0  D000               	goto	l7574
  3928  0011E2                     l7574:
  3929                           
  3930                           ; BSR set to: 1
  3931  0011E2  0101               	movlb	1	; () banked
  3932  0011E4  5184               	movf	MSC_DelayMS@US& (0+255),w,b
  3933  0011E6  0101               	movlb	1	; () banked
  3934  0011E8  5D89               	subwf	MSC_DelayMS@i& (0+255),w,b
  3935  0011EA  0101               	movlb	1	; () banked
  3936  0011EC  5185               	movf	(MSC_DelayMS@US+1)& (0+255),w,b
  3937  0011EE  0101               	movlb	1	; () banked
  3938  0011F0  598A               	subwfb	(MSC_DelayMS@i+1)& (0+255),w,b
  3939  0011F2  0101               	movlb	1	; () banked
  3940  0011F4  5186               	movf	(MSC_DelayMS@US+2)& (0+255),w,b
  3941  0011F6  0101               	movlb	1	; () banked
  3942  0011F8  598B               	subwfb	(MSC_DelayMS@i+2)& (0+255),w,b
  3943  0011FA  0101               	movlb	1	; () banked
  3944  0011FC  518C               	movf	(MSC_DelayMS@i+3)& (0+255),w,b
  3945  0011FE  0A80               	xorlw	128
  3946  001200  0101               	movlb	1	; () banked
  3947  001202  6F88               	movwf	??_MSC_DelayMS& (0+255),b
  3948  001204  0101               	movlb	1	; () banked
  3949  001206  5187               	movf	(MSC_DelayMS@US+3)& (0+255),w,b
  3950  001208  0A80               	xorlw	128
  3951  00120A  0101               	movlb	1	; () banked
  3952  00120C  5988               	subwfb	??_MSC_DelayMS& (0+255),w,b
  3953  00120E  A0D8               	btfss	status,0,c
  3954  001210  D7D9               	goto	l7570
  3955                           
  3956                           ; BSR set to: 1
  3957                           
  3958                           ; BSR set to: 1
  3959  001212  0012               	return		;funcret
  3960  001214                     __end_of_MSC_DelayMS:
  3961                           	opt stack 0
  3962                           tblptru	equ	0xFF8
  3963                           tblptrh	equ	0xFF7
  3964                           tblptrl	equ	0xFF6
  3965                           tablat	equ	0xFF5
  3966                           prodh	equ	0xFF4
  3967                           prodl	equ	0xFF3
  3968                           postinc0	equ	0xFEE
  3969                           wreg	equ	0xFE8
  3970                           postdec1	equ	0xFE5
  3971                           fsr1h	equ	0xFE2
  3972                           fsr1l	equ	0xFE1
  3973                           status	equ	0xFD8
  3974                           
  3975 ;; *************** function _MSC_DelayNOP *****************
  3976 ;; Defined at:
  3977 ;;		line 62 in file "MISC.c"
  3978 ;; Parameters:    Size  Location     Type
  3979 ;;  NOPs            2    0[BANK1 ] unsigned int 
  3980 ;; Auto vars:     Size  Location     Type
  3981 ;;  i               2    2[BANK1 ] unsigned int 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;		None               void
  3984 ;; Registers used:
  3985 ;;		wreg, status,2, status,0
  3986 ;; Tracked objects:
  3987 ;;		On entry : 0/0
  3988 ;;		On exit  : 0/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3991 ;;      Params:         0       0       2       0       0
  3992 ;;      Locals:         0       0       2       0       0
  3993 ;;      Temps:          0       0       0       0       0
  3994 ;;      Totals:         0       0       4       0       0
  3995 ;;Total ram usage:        4 bytes
  3996 ;; Hardware stack levels used:    1
  3997 ;; Hardware stack levels required when called:   12
  3998 ;; This function calls:
  3999 ;;		Nothing
  4000 ;; This function is called by:
  4001 ;;		_MSC_DelayMS
  4002 ;; This function uses a non-reentrant model
  4003 ;;
  4004                           
  4005                           	psect	text13
  4006  001706                     __ptext13:
  4007                           	opt stack 0
  4008  001706                     _MSC_DelayNOP:
  4009                           	opt stack 16
  4010                           
  4011                           ;MISC.c: 64: unsigned int i;
  4012                           ;MISC.c: 65: for(i=0; i<NOPs; i++)
  4013                           
  4014                           ; BSR set to: 1
  4015                           ;incstack = 0
  4016  001706  0E00               	movlw	0
  4017  001708  0101               	movlb	1	; () banked
  4018  00170A  6F83               	movwf	(MSC_DelayNOP@i+1)& (0+255),b
  4019  00170C  0E00               	movlw	0
  4020  00170E  6F82               	movwf	MSC_DelayNOP@i& (0+255),b
  4021  001710  D005               	goto	l7474
  4022  001712                     l596:
  4023                           
  4024                           ; BSR set to: 1
  4025                           ;MISC.c: 66: {
  4026                           ;MISC.c: 67: __nop();
  4027  001712  F000               	nop	
  4028  001714  0101               	movlb	1	; () banked
  4029  001716  4B82               	infsnz	MSC_DelayNOP@i& (0+255),f,b
  4030  001718  2B83               	incf	(MSC_DelayNOP@i+1)& (0+255),f,b
  4031  00171A  D000               	goto	l7474
  4032  00171C                     l7474:
  4033                           
  4034                           ; BSR set to: 1
  4035  00171C  0101               	movlb	1	; () banked
  4036  00171E  5180               	movf	MSC_DelayNOP@NOPs& (0+255),w,b
  4037  001720  0101               	movlb	1	; () banked
  4038  001722  5D82               	subwf	MSC_DelayNOP@i& (0+255),w,b
  4039  001724  0101               	movlb	1	; () banked
  4040  001726  5181               	movf	(MSC_DelayNOP@NOPs+1)& (0+255),w,b
  4041  001728  0101               	movlb	1	; () banked
  4042  00172A  5983               	subwfb	(MSC_DelayNOP@i+1)& (0+255),w,b
  4043  00172C  A0D8               	btfss	status,0,c
  4044  00172E  D7F1               	goto	l596
  4045                           
  4046                           ; BSR set to: 1
  4047                           
  4048                           ; BSR set to: 1
  4049  001730  0012               	return		;funcret
  4050  001732                     __end_of_MSC_DelayNOP:
  4051                           	opt stack 0
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           prodh	equ	0xFF4
  4057                           prodl	equ	0xFF3
  4058                           postinc0	equ	0xFEE
  4059                           wreg	equ	0xFE8
  4060                           postdec1	equ	0xFE5
  4061                           fsr1h	equ	0xFE2
  4062                           fsr1l	equ	0xFE1
  4063                           status	equ	0xFD8
  4064                           
  4065 ;; *************** function _Init_System *****************
  4066 ;; Defined at:
  4067 ;;		line 153 in file "USER.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;		None
  4070 ;; Auto vars:     Size  Location     Type
  4071 ;;		None
  4072 ;; Return value:  Size  Location     Type
  4073 ;;		None               void
  4074 ;; Registers used:
  4075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4076 ;; Tracked objects:
  4077 ;;		On entry : 0/0
  4078 ;;		On exit  : 0/0
  4079 ;;		Unchanged: 0/0
  4080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4081 ;;      Params:         0       0       0       0       0
  4082 ;;      Locals:         0       0       0       0       0
  4083 ;;      Temps:          0       0       0       0       0
  4084 ;;      Totals:         0       0       0       0       0
  4085 ;;Total ram usage:        0 bytes
  4086 ;; Hardware stack levels used:    1
  4087 ;; Hardware stack levels required when called:   17
  4088 ;; This function calls:
  4089 ;;		_BUT_ReadButton
  4090 ;;		_IR_ReadReceiver
  4091 ;;		_InitADC
  4092 ;;		_InitButton
  4093 ;;		_InitFlash
  4094 ;;		_InitIR
  4095 ;;		_InitLDO
  4096 ;;		_InitMOTOR
  4097 ;;		_InitRF
  4098 ;;		_InitTimers
  4099 ;; This function is called by:
  4100 ;;		_main
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           	psect	text14
  4105  001676                     __ptext14:
  4106                           	opt stack 0
  4107  001676                     _Init_System:
  4108                           	opt stack 13
  4109                           
  4110                           ;USER.c: 155: InitTimers();
  4111                           
  4112                           ; BSR set to: 1
  4113                           ;incstack = 0
  4114  001676  EC61  F00E         	call	_InitTimers	;wreg free
  4115                           
  4116                           ;USER.c: 156: InitRF();
  4117  00167A  EC74  F00A         	call	_InitRF	;wreg free
  4118                           
  4119                           ;USER.c: 157: InitButton();
  4120  00167E  EC68  F00E         	call	_InitButton	;wreg free
  4121                           
  4122                           ;USER.c: 158: InitIR();
  4123  001682  ECEE  F00C         	call	_InitIR	;wreg free
  4124                           
  4125                           ;USER.c: 159: InitLDO();
  4126  001686  ECA8  F00E         	call	_InitLDO	;wreg free
  4127                           
  4128                           ;USER.c: 160: InitMOTOR();
  4129  00168A  ECB2  F00E         	call	_InitMOTOR	;wreg free
  4130                           
  4131                           ;USER.c: 161: InitFlash();
  4132  00168E  ECB4  F00E         	call	_InitFlash	;wreg free
  4133                           
  4134                           ;USER.c: 162: InitADC();
  4135  001692  EC32  F00C         	call	_InitADC	;wreg free
  4136                           
  4137                           ;USER.c: 164: BUT_ReadButton();
  4138  001696  ECCD  F00A         	call	_BUT_ReadButton	;wreg free
  4139                           
  4140                           ;USER.c: 165: IR_ReadReceiver();
  4141  00169A  ECE9  F00A         	call	_IR_ReadReceiver	;wreg free
  4142                           
  4143                           ;USER.c: 166: INTCONbits.RBIF = 0;
  4144  00169E  90F2               	bcf	intcon,0,c	;volatile
  4145                           
  4146                           ;USER.c: 169: RCONbits.IPEN = 1;
  4147  0016A0  8ED0               	bsf	4048,7,c	;volatile
  4148                           
  4149                           ;USER.c: 170: INTCONbits.GIE = 1;
  4150  0016A2  8EF2               	bsf	intcon,7,c	;volatile
  4151                           
  4152                           ;USER.c: 171: INTCONbits.PEIE = 1;
  4153  0016A4  8CF2               	bsf	intcon,6,c	;volatile
  4154  0016A6  0012               	return		;funcret
  4155  0016A8                     __end_of_Init_System:
  4156                           	opt stack 0
  4157                           tblptru	equ	0xFF8
  4158                           tblptrh	equ	0xFF7
  4159                           tblptrl	equ	0xFF6
  4160                           tablat	equ	0xFF5
  4161                           prodh	equ	0xFF4
  4162                           prodl	equ	0xFF3
  4163                           intcon	equ	0xFF2
  4164                           postinc0	equ	0xFEE
  4165                           wreg	equ	0xFE8
  4166                           postdec1	equ	0xFE5
  4167                           fsr1h	equ	0xFE2
  4168                           fsr1l	equ	0xFE1
  4169                           status	equ	0xFD8
  4170                           
  4171 ;; *************** function _InitTimers *****************
  4172 ;; Defined at:
  4173 ;;		line 304 in file "TIMERS.c"
  4174 ;; Parameters:    Size  Location     Type
  4175 ;;		None
  4176 ;; Auto vars:     Size  Location     Type
  4177 ;;		None
  4178 ;; Return value:  Size  Location     Type
  4179 ;;		None               void
  4180 ;; Registers used:
  4181 ;;		wreg, status,2, status,0, cstack
  4182 ;; Tracked objects:
  4183 ;;		On entry : 0/0
  4184 ;;		On exit  : 0/0
  4185 ;;		Unchanged: 0/0
  4186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4187 ;;      Params:         0       0       0       0       0
  4188 ;;      Locals:         0       0       0       0       0
  4189 ;;      Temps:          0       0       0       0       0
  4190 ;;      Totals:         0       0       0       0       0
  4191 ;;Total ram usage:        0 bytes
  4192 ;; Hardware stack levels used:    1
  4193 ;; Hardware stack levels required when called:   16
  4194 ;; This function calls:
  4195 ;;		_InitTimer0
  4196 ;;		_InitTimer1
  4197 ;;		_InitTimer2
  4198 ;; This function is called by:
  4199 ;;		_Init_System
  4200 ;; This function uses a non-reentrant model
  4201 ;;
  4202                           
  4203                           	psect	text15
  4204  001CC2                     __ptext15:
  4205                           	opt stack 0
  4206  001CC2                     _InitTimers:
  4207                           	opt stack 13
  4208                           
  4209                           ;TIMERS.c: 306: InitTimer0();
  4210                           
  4211                           ;incstack = 0
  4212  001CC2  EC92  F00C         	call	_InitTimer0	;wreg free
  4213                           
  4214                           ;TIMERS.c: 307: InitTimer1();
  4215  001CC6  ECD2  F00C         	call	_InitTimer1	;wreg free
  4216                           
  4217                           ;TIMERS.c: 308: InitTimer2();
  4218  001CCA  ECC3  F00C         	call	_InitTimer2	;wreg free
  4219  001CCE  0012               	return		;funcret
  4220  001CD0                     __end_of_InitTimers:
  4221                           	opt stack 0
  4222                           tblptru	equ	0xFF8
  4223                           tblptrh	equ	0xFF7
  4224                           tblptrl	equ	0xFF6
  4225                           tablat	equ	0xFF5
  4226                           prodh	equ	0xFF4
  4227                           prodl	equ	0xFF3
  4228                           intcon	equ	0xFF2
  4229                           postinc0	equ	0xFEE
  4230                           wreg	equ	0xFE8
  4231                           postdec1	equ	0xFE5
  4232                           fsr1h	equ	0xFE2
  4233                           fsr1l	equ	0xFE1
  4234                           status	equ	0xFD8
  4235                           
  4236 ;; *************** function _InitTimer2 *****************
  4237 ;; Defined at:
  4238 ;;		line 348 in file "TIMERS.c"
  4239 ;; Parameters:    Size  Location     Type
  4240 ;;		None
  4241 ;; Auto vars:     Size  Location     Type
  4242 ;;		None
  4243 ;; Return value:  Size  Location     Type
  4244 ;;		None               void
  4245 ;; Registers used:
  4246 ;;		wreg, status,2, cstack
  4247 ;; Tracked objects:
  4248 ;;		On entry : 0/0
  4249 ;;		On exit  : 0/0
  4250 ;;		Unchanged: 0/0
  4251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4252 ;;      Params:         0       0       0       0       0
  4253 ;;      Locals:         0       0       0       0       0
  4254 ;;      Temps:          0       0       0       0       0
  4255 ;;      Totals:         0       0       0       0       0
  4256 ;;Total ram usage:        0 bytes
  4257 ;; Hardware stack levels used:    1
  4258 ;; Hardware stack levels required when called:   13
  4259 ;; This function calls:
  4260 ;;		_TMR_Timer2
  4261 ;;		_TMR_Timer2Int
  4262 ;; This function is called by:
  4263 ;;		_InitTimers
  4264 ;; This function uses a non-reentrant model
  4265 ;;
  4266                           
  4267                           	psect	text16
  4268  001986                     __ptext16:
  4269                           	opt stack 0
  4270  001986                     _InitTimer2:
  4271                           	opt stack 15
  4272                           
  4273                           ;TIMERS.c: 350: TMR_Timer2(0);
  4274                           
  4275                           ;incstack = 0
  4276  001986  0E00               	movlw	0
  4277  001988  EC3B  F00D         	call	_TMR_Timer2
  4278                           
  4279                           ;TIMERS.c: 351: T2CONbits.TOUTPS = 0b1111;
  4280  00198C  86CA               	bsf	4042,3,c	;volatile
  4281  00198E  88CA               	bsf	4042,4,c	;volatile
  4282  001990  8ACA               	bsf	4042,5,c	;volatile
  4283  001992  8CCA               	bsf	4042,6,c	;volatile
  4284                           
  4285                           ;TIMERS.c: 352: T2CONbits.T2CKPS = 0b11;
  4286  001994  0E03               	movlw	3
  4287  001996  12CA               	iorwf	4042,f,c	;volatile
  4288                           
  4289                           ;TIMERS.c: 353: IPR1bits.TMR2IP = 0;
  4290  001998  929F               	bcf	3999,1,c	;volatile
  4291                           
  4292                           ;TIMERS.c: 354: PR2 = 0xFF;
  4293  00199A  68CB               	setf	4043,c	;volatile
  4294                           
  4295                           ;TIMERS.c: 355: TMR_Timer2Int(1);
  4296  00199C  0E01               	movlw	1
  4297  00199E  EC2F  F00D         	call	_TMR_Timer2Int
  4298  0019A2  0012               	return		;funcret
  4299  0019A4                     __end_of_InitTimer2:
  4300                           	opt stack 0
  4301                           tblptru	equ	0xFF8
  4302                           tblptrh	equ	0xFF7
  4303                           tblptrl	equ	0xFF6
  4304                           tablat	equ	0xFF5
  4305                           prodh	equ	0xFF4
  4306                           prodl	equ	0xFF3
  4307                           intcon	equ	0xFF2
  4308                           postinc0	equ	0xFEE
  4309                           wreg	equ	0xFE8
  4310                           postdec1	equ	0xFE5
  4311                           fsr1h	equ	0xFE2
  4312                           fsr1l	equ	0xFE1
  4313                           status	equ	0xFD8
  4314                           
  4315 ;; *************** function _TMR_Timer2Int *****************
  4316 ;; Defined at:
  4317 ;;		line 246 in file "TIMERS.c"
  4318 ;; Parameters:    Size  Location     Type
  4319 ;;  state           1    wreg     unsigned char 
  4320 ;; Auto vars:     Size  Location     Type
  4321 ;;  state           1    0[BANK1 ] unsigned char 
  4322 ;; Return value:  Size  Location     Type
  4323 ;;		None               void
  4324 ;; Registers used:
  4325 ;;		wreg, status,2
  4326 ;; Tracked objects:
  4327 ;;		On entry : 0/0
  4328 ;;		On exit  : 0/0
  4329 ;;		Unchanged: 0/0
  4330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4331 ;;      Params:         0       0       0       0       0
  4332 ;;      Locals:         0       0       1       0       0
  4333 ;;      Temps:          0       0       0       0       0
  4334 ;;      Totals:         0       0       1       0       0
  4335 ;;Total ram usage:        1 bytes
  4336 ;; Hardware stack levels used:    1
  4337 ;; Hardware stack levels required when called:   12
  4338 ;; This function calls:
  4339 ;;		Nothing
  4340 ;; This function is called by:
  4341 ;;		_InitTimer2
  4342 ;; This function uses a non-reentrant model
  4343 ;;
  4344                           
  4345                           	psect	text17
  4346  001A5E                     __ptext17:
  4347                           	opt stack 0
  4348  001A5E                     _TMR_Timer2Int:
  4349                           	opt stack 15
  4350                           
  4351                           ;incstack = 0
  4352                           ;TMR_Timer2Int@state stored from wreg
  4353  001A5E  0101               	movlb	1	; () banked
  4354  001A60  6F80               	movwf	TMR_Timer2Int@state& (0+255),b
  4355                           
  4356                           ; BSR set to: 1
  4357                           ;TIMERS.c: 248: if(state)
  4358  001A62  0101               	movlb	1	; () banked
  4359  001A64  5180               	movf	TMR_Timer2Int@state& (0+255),w,b
  4360  001A66  0101               	movlb	1	; () banked
  4361  001A68  B4D8               	btfsc	status,2,c
  4362  001A6A  D002               	goto	l1074
  4363                           
  4364                           ; BSR set to: 1
  4365                           ;TIMERS.c: 249: {
  4366                           ;TIMERS.c: 251: PIE1bits.TMR2IE = 1;
  4367  001A6C  829D               	bsf	3997,1,c	;volatile
  4368                           
  4369                           ;TIMERS.c: 252: }
  4370  001A6E  0012               	return	
  4371  001A70                     l1074:
  4372                           
  4373                           ; BSR set to: 1
  4374                           ;TIMERS.c: 253: else
  4375                           ;TIMERS.c: 254: {
  4376                           ;TIMERS.c: 256: PIE1bits.TMR2IE = 0;
  4377  001A70  929D               	bcf	3997,1,c	;volatile
  4378  001A72  0012               	return	
  4379                           
  4380                           ; BSR set to: 1
  4381                           
  4382                           ; BSR set to: 1
  4383  001A74  0012               	return		;funcret
  4384  001A76                     __end_of_TMR_Timer2Int:
  4385                           	opt stack 0
  4386                           tblptru	equ	0xFF8
  4387                           tblptrh	equ	0xFF7
  4388                           tblptrl	equ	0xFF6
  4389                           tablat	equ	0xFF5
  4390                           prodh	equ	0xFF4
  4391                           prodl	equ	0xFF3
  4392                           intcon	equ	0xFF2
  4393                           postinc0	equ	0xFEE
  4394                           wreg	equ	0xFE8
  4395                           postdec1	equ	0xFE5
  4396                           fsr1h	equ	0xFE2
  4397                           fsr1l	equ	0xFE1
  4398                           status	equ	0xFD8
  4399                           
  4400 ;; *************** function _TMR_Timer2 *****************
  4401 ;; Defined at:
  4402 ;;		line 125 in file "TIMERS.c"
  4403 ;; Parameters:    Size  Location     Type
  4404 ;;  state           1    wreg     unsigned char 
  4405 ;; Auto vars:     Size  Location     Type
  4406 ;;  state           1    0[BANK1 ] unsigned char 
  4407 ;; Return value:  Size  Location     Type
  4408 ;;		None               void
  4409 ;; Registers used:
  4410 ;;		wreg, status,2
  4411 ;; Tracked objects:
  4412 ;;		On entry : 0/0
  4413 ;;		On exit  : 0/0
  4414 ;;		Unchanged: 0/0
  4415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4416 ;;      Params:         0       0       0       0       0
  4417 ;;      Locals:         0       0       1       0       0
  4418 ;;      Temps:          0       0       0       0       0
  4419 ;;      Totals:         0       0       1       0       0
  4420 ;;Total ram usage:        1 bytes
  4421 ;; Hardware stack levels used:    1
  4422 ;; Hardware stack levels required when called:   12
  4423 ;; This function calls:
  4424 ;;		Nothing
  4425 ;; This function is called by:
  4426 ;;		_InitTimer2
  4427 ;; This function uses a non-reentrant model
  4428 ;;
  4429                           
  4430                           	psect	text18
  4431  001A76                     __ptext18:
  4432                           	opt stack 0
  4433  001A76                     _TMR_Timer2:
  4434                           	opt stack 15
  4435                           
  4436                           ; BSR set to: 1
  4437                           ;incstack = 0
  4438                           ;TMR_Timer2@state stored from wreg
  4439  001A76  0101               	movlb	1	; () banked
  4440  001A78  6F80               	movwf	TMR_Timer2@state& (0+255),b
  4441                           
  4442                           ; BSR set to: 1
  4443                           ;TIMERS.c: 127: if(state)
  4444  001A7A  0101               	movlb	1	; () banked
  4445  001A7C  5180               	movf	TMR_Timer2@state& (0+255),w,b
  4446  001A7E  0101               	movlb	1	; () banked
  4447  001A80  B4D8               	btfsc	status,2,c
  4448  001A82  D002               	goto	l1044
  4449                           
  4450                           ; BSR set to: 1
  4451                           ;TIMERS.c: 128: {
  4452                           ;TIMERS.c: 130: T2CONbits.TMR2ON = 1;
  4453  001A84  84CA               	bsf	4042,2,c	;volatile
  4454                           
  4455                           ;TIMERS.c: 131: }
  4456  001A86  0012               	return	
  4457  001A88                     l1044:
  4458                           
  4459                           ; BSR set to: 1
  4460                           ;TIMERS.c: 132: else
  4461                           ;TIMERS.c: 133: {
  4462                           ;TIMERS.c: 135: T2CONbits.TMR2ON = 0;
  4463  001A88  94CA               	bcf	4042,2,c	;volatile
  4464  001A8A  0012               	return	
  4465                           
  4466                           ; BSR set to: 1
  4467                           
  4468                           ; BSR set to: 1
  4469  001A8C  0012               	return		;funcret
  4470  001A8E                     __end_of_TMR_Timer2:
  4471                           	opt stack 0
  4472                           tblptru	equ	0xFF8
  4473                           tblptrh	equ	0xFF7
  4474                           tblptrl	equ	0xFF6
  4475                           tablat	equ	0xFF5
  4476                           prodh	equ	0xFF4
  4477                           prodl	equ	0xFF3
  4478                           intcon	equ	0xFF2
  4479                           postinc0	equ	0xFEE
  4480                           wreg	equ	0xFE8
  4481                           postdec1	equ	0xFE5
  4482                           fsr1h	equ	0xFE2
  4483                           fsr1l	equ	0xFE1
  4484                           status	equ	0xFD8
  4485                           
  4486 ;; *************** function _InitTimer1 *****************
  4487 ;; Defined at:
  4488 ;;		line 333 in file "TIMERS.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;		None
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;		None
  4493 ;; Return value:  Size  Location     Type
  4494 ;;		None               void
  4495 ;; Registers used:
  4496 ;;		wreg, status,2, status,0, cstack
  4497 ;; Tracked objects:
  4498 ;;		On entry : 0/0
  4499 ;;		On exit  : 0/0
  4500 ;;		Unchanged: 0/0
  4501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4502 ;;      Params:         0       0       0       0       0
  4503 ;;      Locals:         0       0       0       0       0
  4504 ;;      Temps:          0       0       0       0       0
  4505 ;;      Totals:         0       0       0       0       0
  4506 ;;Total ram usage:        0 bytes
  4507 ;; Hardware stack levels used:    1
  4508 ;; Hardware stack levels required when called:   15
  4509 ;; This function calls:
  4510 ;;		_TMR_ResetTimer1
  4511 ;;		_TMR_Timer1
  4512 ;;		_TMR_Timer1Function
  4513 ;;		_TMR_Timer1Int
  4514 ;; This function is called by:
  4515 ;;		_InitTimers
  4516 ;; This function uses a non-reentrant model
  4517 ;;
  4518                           
  4519                           	psect	text19
  4520  0019A4                     __ptext19:
  4521                           	opt stack 0
  4522  0019A4                     _InitTimer1:
  4523                           	opt stack 13
  4524                           
  4525                           ;TIMERS.c: 335: TMR_Timer1(0);
  4526                           
  4527                           ; BSR set to: 1
  4528                           ;incstack = 0
  4529  0019A4  0E00               	movlw	0
  4530  0019A6  EC53  F00D         	call	_TMR_Timer1
  4531                           
  4532                           ;TIMERS.c: 336: TMR_ResetTimer1();
  4533  0019AA  EC99  F00B         	call	_TMR_ResetTimer1	;wreg free
  4534                           
  4535                           ;TIMERS.c: 337: T1CONbits.RD16 = 1;
  4536  0019AE  8ECD               	bsf	4045,7,c	;volatile
  4537                           
  4538                           ;TIMERS.c: 338: TMR_Timer1Function(16);
  4539  0019B0  0E10               	movlw	16
  4540  0019B2  EC54  F00B         	call	_TMR_Timer1Function
  4541                           
  4542                           ;TIMERS.c: 339: IPR1bits.TMR1IP = 0;
  4543  0019B6  909F               	bcf	3999,0,c	;volatile
  4544                           
  4545                           ;TIMERS.c: 340: TMR_Timer1Int(1);
  4546  0019B8  0E01               	movlw	1
  4547  0019BA  EC47  F00D         	call	_TMR_Timer1Int
  4548  0019BE  0012               	return		;funcret
  4549  0019C0                     __end_of_InitTimer1:
  4550                           	opt stack 0
  4551                           tblptru	equ	0xFF8
  4552                           tblptrh	equ	0xFF7
  4553                           tblptrl	equ	0xFF6
  4554                           tablat	equ	0xFF5
  4555                           prodh	equ	0xFF4
  4556                           prodl	equ	0xFF3
  4557                           intcon	equ	0xFF2
  4558                           postinc0	equ	0xFEE
  4559                           wreg	equ	0xFE8
  4560                           postdec1	equ	0xFE5
  4561                           fsr1h	equ	0xFE2
  4562                           fsr1l	equ	0xFE1
  4563                           status	equ	0xFD8
  4564                           
  4565 ;; *************** function _TMR_Timer1Int *****************
  4566 ;; Defined at:
  4567 ;;		line 227 in file "TIMERS.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;  state           1    wreg     unsigned char 
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  state           1    0[BANK1 ] unsigned char 
  4572 ;; Return value:  Size  Location     Type
  4573 ;;		None               void
  4574 ;; Registers used:
  4575 ;;		wreg, status,2
  4576 ;; Tracked objects:
  4577 ;;		On entry : 0/0
  4578 ;;		On exit  : 0/0
  4579 ;;		Unchanged: 0/0
  4580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4581 ;;      Params:         0       0       0       0       0
  4582 ;;      Locals:         0       0       1       0       0
  4583 ;;      Temps:          0       0       0       0       0
  4584 ;;      Totals:         0       0       1       0       0
  4585 ;;Total ram usage:        1 bytes
  4586 ;; Hardware stack levels used:    1
  4587 ;; Hardware stack levels required when called:   12
  4588 ;; This function calls:
  4589 ;;		Nothing
  4590 ;; This function is called by:
  4591 ;;		_InitTimer1
  4592 ;; This function uses a non-reentrant model
  4593 ;;
  4594                           
  4595                           	psect	text20
  4596  001A8E                     __ptext20:
  4597                           	opt stack 0
  4598  001A8E                     _TMR_Timer1Int:
  4599                           	opt stack 15
  4600                           
  4601                           ;incstack = 0
  4602                           ;TMR_Timer1Int@state stored from wreg
  4603  001A8E  0101               	movlb	1	; () banked
  4604  001A90  6F80               	movwf	TMR_Timer1Int@state& (0+255),b
  4605                           
  4606                           ; BSR set to: 1
  4607                           ;TIMERS.c: 229: if(state)
  4608  001A92  0101               	movlb	1	; () banked
  4609  001A94  5180               	movf	TMR_Timer1Int@state& (0+255),w,b
  4610  001A96  0101               	movlb	1	; () banked
  4611  001A98  B4D8               	btfsc	status,2,c
  4612  001A9A  D002               	goto	l1069
  4613                           
  4614                           ; BSR set to: 1
  4615                           ;TIMERS.c: 230: {
  4616                           ;TIMERS.c: 232: PIE1bits.TMR1IE = 1;
  4617  001A9C  809D               	bsf	3997,0,c	;volatile
  4618                           
  4619                           ;TIMERS.c: 233: }
  4620  001A9E  0012               	return	
  4621  001AA0                     l1069:
  4622                           
  4623                           ; BSR set to: 1
  4624                           ;TIMERS.c: 234: else
  4625                           ;TIMERS.c: 235: {
  4626                           ;TIMERS.c: 237: PIE1bits.TMR1IE = 0;
  4627  001AA0  909D               	bcf	3997,0,c	;volatile
  4628  001AA2  0012               	return	
  4629                           
  4630                           ; BSR set to: 1
  4631                           
  4632                           ; BSR set to: 1
  4633  001AA4  0012               	return		;funcret
  4634  001AA6                     __end_of_TMR_Timer1Int:
  4635                           	opt stack 0
  4636                           tblptru	equ	0xFF8
  4637                           tblptrh	equ	0xFF7
  4638                           tblptrl	equ	0xFF6
  4639                           tablat	equ	0xFF5
  4640                           prodh	equ	0xFF4
  4641                           prodl	equ	0xFF3
  4642                           intcon	equ	0xFF2
  4643                           postinc0	equ	0xFEE
  4644                           wreg	equ	0xFE8
  4645                           postdec1	equ	0xFE5
  4646                           fsr1h	equ	0xFE2
  4647                           fsr1l	equ	0xFE1
  4648                           status	equ	0xFD8
  4649                           
  4650 ;; *************** function _TMR_Timer1Function *****************
  4651 ;; Defined at:
  4652 ;;		line 402 in file "TIMERS.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;  mode            1    wreg     unsigned char 
  4655 ;; Auto vars:     Size  Location     Type
  4656 ;;  mode            1    2[BANK1 ] unsigned char 
  4657 ;; Return value:  Size  Location     Type
  4658 ;;		None               void
  4659 ;; Registers used:
  4660 ;;		wreg, status,2, status,0, cstack
  4661 ;; Tracked objects:
  4662 ;;		On entry : 0/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4666 ;;      Params:         0       0       0       0       0
  4667 ;;      Locals:         0       0       1       0       0
  4668 ;;      Temps:          0       0       0       0       0
  4669 ;;      Totals:         0       0       1       0       0
  4670 ;;Total ram usage:        1 bytes
  4671 ;; Hardware stack levels used:    1
  4672 ;; Hardware stack levels required when called:   14
  4673 ;; This function calls:
  4674 ;;		_TMR_ResetTimer1
  4675 ;;		_TMR_Timer1
  4676 ;;		_TMR_Timer1Osc
  4677 ;; This function is called by:
  4678 ;;		_InitTimer1
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           	psect	text21
  4683  0016A8                     __ptext21:
  4684                           	opt stack 0
  4685  0016A8                     _TMR_Timer1Function:
  4686                           	opt stack 13
  4687                           
  4688                           ; BSR set to: 1
  4689                           ;incstack = 0
  4690                           ;TMR_Timer1Function@mode stored from wreg
  4691  0016A8  0101               	movlb	1	; () banked
  4692  0016AA  6F82               	movwf	TMR_Timer1Function@mode& (0+255),b
  4693                           
  4694                           ; BSR set to: 1
  4695                           ;TIMERS.c: 404: TMR_Timer1(0);
  4696  0016AC  0E00               	movlw	0
  4697  0016AE  EC53  F00D         	call	_TMR_Timer1
  4698                           
  4699                           ;TIMERS.c: 405: if(mode == 15)
  4700  0016B2  0E0F               	movlw	15
  4701  0016B4  0101               	movlb	1	; () banked
  4702  0016B6  1982               	xorwf	TMR_Timer1Function@mode& (0+255),w,b
  4703  0016B8  A4D8               	btfss	status,2,c
  4704  0016BA  D006               	goto	l7402
  4705                           
  4706                           ; BSR set to: 1
  4707                           ;TIMERS.c: 406: {
  4708                           ;TIMERS.c: 407: T1CONbits.T1CKPS = 0b00;
  4709  0016BC  0ECF               	movlw	-49
  4710  0016BE  16CD               	andwf	4045,f,c	;volatile
  4711                           
  4712                           ; BSR set to: 1
  4713                           ;TIMERS.c: 408: TMR_Timer1Osc(1);
  4714  0016C0  0E01               	movlw	1
  4715  0016C2  ECA3  F00C         	call	_TMR_Timer1Osc
  4716                           
  4717                           ;TIMERS.c: 409: }
  4718  0016C6  D006               	goto	l7406
  4719  0016C8                     l7402:
  4720                           
  4721                           ;TIMERS.c: 410: else
  4722                           ;TIMERS.c: 411: {
  4723                           ;TIMERS.c: 412: T1CONbits.T1CKPS = 0b11;
  4724  0016C8  0E30               	movlw	48
  4725  0016CA  12CD               	iorwf	4045,f,c	;volatile
  4726                           
  4727                           ;TIMERS.c: 413: TMR_Timer1Osc(0);
  4728  0016CC  0E00               	movlw	0
  4729  0016CE  ECA3  F00C         	call	_TMR_Timer1Osc
  4730  0016D2  D000               	goto	l7406
  4731  0016D4                     l7406:
  4732                           
  4733                           ;TIMERS.c: 414: }
  4734                           ;TIMERS.c: 415: TMR_ResetTimer1();
  4735  0016D4  EC99  F00B         	call	_TMR_ResetTimer1	;wreg free
  4736  0016D8  0012               	return		;funcret
  4737  0016DA                     __end_of_TMR_Timer1Function:
  4738                           	opt stack 0
  4739                           tblptru	equ	0xFF8
  4740                           tblptrh	equ	0xFF7
  4741                           tblptrl	equ	0xFF6
  4742                           tablat	equ	0xFF5
  4743                           prodh	equ	0xFF4
  4744                           prodl	equ	0xFF3
  4745                           intcon	equ	0xFF2
  4746                           postinc0	equ	0xFEE
  4747                           wreg	equ	0xFE8
  4748                           postdec1	equ	0xFE5
  4749                           fsr1h	equ	0xFE2
  4750                           fsr1l	equ	0xFE1
  4751                           status	equ	0xFD8
  4752                           
  4753 ;; *************** function _TMR_Timer1Osc *****************
  4754 ;; Defined at:
  4755 ;;		line 265 in file "TIMERS.c"
  4756 ;; Parameters:    Size  Location     Type
  4757 ;;  state           1    wreg     unsigned char 
  4758 ;; Auto vars:     Size  Location     Type
  4759 ;;  state           1    0[BANK1 ] unsigned char 
  4760 ;; Return value:  Size  Location     Type
  4761 ;;		None               void
  4762 ;; Registers used:
  4763 ;;		wreg, status,2
  4764 ;; Tracked objects:
  4765 ;;		On entry : 0/0
  4766 ;;		On exit  : 0/0
  4767 ;;		Unchanged: 0/0
  4768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4769 ;;      Params:         0       0       0       0       0
  4770 ;;      Locals:         0       0       1       0       0
  4771 ;;      Temps:          0       0       0       0       0
  4772 ;;      Totals:         0       0       1       0       0
  4773 ;;Total ram usage:        1 bytes
  4774 ;; Hardware stack levels used:    1
  4775 ;; Hardware stack levels required when called:   12
  4776 ;; This function calls:
  4777 ;;		Nothing
  4778 ;; This function is called by:
  4779 ;;		_TMR_Timer1Function
  4780 ;; This function uses a non-reentrant model
  4781 ;;
  4782                           
  4783                           	psect	text22
  4784  001946                     __ptext22:
  4785                           	opt stack 0
  4786  001946                     _TMR_Timer1Osc:
  4787                           	opt stack 14
  4788                           
  4789                           ;incstack = 0
  4790                           ;TMR_Timer1Osc@state stored from wreg
  4791  001946  0101               	movlb	1	; () banked
  4792  001948  6F80               	movwf	TMR_Timer1Osc@state& (0+255),b
  4793                           
  4794                           ; BSR set to: 1
  4795                           ;TIMERS.c: 267: if(state)
  4796  00194A  0101               	movlb	1	; () banked
  4797  00194C  5180               	movf	TMR_Timer1Osc@state& (0+255),w,b
  4798  00194E  0101               	movlb	1	; () banked
  4799  001950  B4D8               	btfsc	status,2,c
  4800  001952  D004               	goto	l1079
  4801                           
  4802                           ; BSR set to: 1
  4803                           ;TIMERS.c: 268: {
  4804                           ;TIMERS.c: 269: T1CONbits.T1RUN = 1;
  4805  001954  8CCD               	bsf	4045,6,c	;volatile
  4806                           
  4807                           ;TIMERS.c: 270: T1CONbits.T1OSCEN = 1;
  4808  001956  86CD               	bsf	4045,3,c	;volatile
  4809                           
  4810                           ;TIMERS.c: 271: T1CONbits.TMR1CS = 1;
  4811  001958  82CD               	bsf	4045,1,c	;volatile
  4812                           
  4813                           ;TIMERS.c: 272: }
  4814  00195A  0012               	return	
  4815  00195C                     l1079:
  4816                           
  4817                           ; BSR set to: 1
  4818                           ;TIMERS.c: 273: else
  4819                           ;TIMERS.c: 274: {
  4820                           ;TIMERS.c: 275: T1CONbits.T1RUN = 0;
  4821  00195C  9CCD               	bcf	4045,6,c	;volatile
  4822                           
  4823                           ;TIMERS.c: 276: T1CONbits.T1OSCEN = 0;
  4824  00195E  96CD               	bcf	4045,3,c	;volatile
  4825                           
  4826                           ;TIMERS.c: 277: T1CONbits.TMR1CS = 0;
  4827  001960  92CD               	bcf	4045,1,c	;volatile
  4828  001962  0012               	return	
  4829                           
  4830                           ; BSR set to: 1
  4831                           
  4832                           ; BSR set to: 1
  4833  001964  0012               	return		;funcret
  4834  001966                     __end_of_TMR_Timer1Osc:
  4835                           	opt stack 0
  4836                           tblptru	equ	0xFF8
  4837                           tblptrh	equ	0xFF7
  4838                           tblptrl	equ	0xFF6
  4839                           tablat	equ	0xFF5
  4840                           prodh	equ	0xFF4
  4841                           prodl	equ	0xFF3
  4842                           intcon	equ	0xFF2
  4843                           postinc0	equ	0xFEE
  4844                           wreg	equ	0xFE8
  4845                           postdec1	equ	0xFE5
  4846                           fsr1h	equ	0xFE2
  4847                           fsr1l	equ	0xFE1
  4848                           status	equ	0xFD8
  4849                           
  4850 ;; *************** function _TMR_ResetTimer1 *****************
  4851 ;; Defined at:
  4852 ;;		line 162 in file "TIMERS.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;		None
  4855 ;; Auto vars:     Size  Location     Type
  4856 ;;  TimerOn         1    1[BANK1 ] unsigned char 
  4857 ;; Return value:  Size  Location     Type
  4858 ;;		None               void
  4859 ;; Registers used:
  4860 ;;		wreg, status,2, cstack
  4861 ;; Tracked objects:
  4862 ;;		On entry : 0/0
  4863 ;;		On exit  : 0/0
  4864 ;;		Unchanged: 0/0
  4865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4866 ;;      Params:         0       0       0       0       0
  4867 ;;      Locals:         0       0       1       0       0
  4868 ;;      Temps:          0       0       0       0       0
  4869 ;;      Totals:         0       0       1       0       0
  4870 ;;Total ram usage:        1 bytes
  4871 ;; Hardware stack levels used:    1
  4872 ;; Hardware stack levels required when called:   13
  4873 ;; This function calls:
  4874 ;;		_TMR_Timer1
  4875 ;; This function is called by:
  4876 ;;		_InitTimer1
  4877 ;;		_TMR_Timer1Function
  4878 ;; This function uses a non-reentrant model
  4879 ;;
  4880                           
  4881                           	psect	text23
  4882  001732                     __ptext23:
  4883                           	opt stack 0
  4884  001732                     _TMR_ResetTimer1:
  4885                           	opt stack 13
  4886                           
  4887                           ;TIMERS.c: 164: unsigned char TimerOn = T1CONbits.TMR1ON;
  4888                           
  4889                           ; BSR set to: 1
  4890                           ;incstack = 0
  4891  001732  0E00               	movlw	0
  4892  001734  B0CD               	btfsc	4045,0,c	;volatile
  4893  001736  0E01               	movlw	1
  4894  001738  0101               	movlb	1	; () banked
  4895  00173A  6F81               	movwf	TMR_ResetTimer1@TimerOn& (0+255),b
  4896                           
  4897                           ; BSR set to: 1
  4898                           ;TIMERS.c: 166: TMR_Timer1(0);
  4899  00173C  0E00               	movlw	0
  4900  00173E  EC53  F00D         	call	_TMR_Timer1
  4901                           
  4902                           ;TIMERS.c: 167: TMR1H = 0;
  4903  001742  0E00               	movlw	0
  4904  001744  6ECF               	movwf	4047,c	;volatile
  4905                           
  4906                           ;TIMERS.c: 168: TMR1L = 2;
  4907  001746  0E02               	movlw	2
  4908  001748  6ECE               	movwf	4046,c	;volatile
  4909                           
  4910                           ;TIMERS.c: 169: if(TimerOn)
  4911  00174A  0101               	movlb	1	; () banked
  4912  00174C  5181               	movf	TMR_ResetTimer1@TimerOn& (0+255),w,b
  4913  00174E  0101               	movlb	1	; () banked
  4914  001750  B4D8               	btfsc	status,2,c
  4915  001752  0012               	return	
  4916                           
  4917                           ; BSR set to: 1
  4918                           ;TIMERS.c: 170: {
  4919                           ;TIMERS.c: 171: TMR_Timer1(1);
  4920  001754  0E01               	movlw	1
  4921  001756  EC53  F00D         	call	_TMR_Timer1
  4922  00175A  0012               	return	
  4923  00175C  0012               	return		;funcret
  4924  00175E                     __end_of_TMR_ResetTimer1:
  4925                           	opt stack 0
  4926                           tblptru	equ	0xFF8
  4927                           tblptrh	equ	0xFF7
  4928                           tblptrl	equ	0xFF6
  4929                           tablat	equ	0xFF5
  4930                           prodh	equ	0xFF4
  4931                           prodl	equ	0xFF3
  4932                           intcon	equ	0xFF2
  4933                           postinc0	equ	0xFEE
  4934                           wreg	equ	0xFE8
  4935                           postdec1	equ	0xFE5
  4936                           fsr1h	equ	0xFE2
  4937                           fsr1l	equ	0xFE1
  4938                           status	equ	0xFD8
  4939                           
  4940 ;; *************** function _TMR_Timer1 *****************
  4941 ;; Defined at:
  4942 ;;		line 106 in file "TIMERS.c"
  4943 ;; Parameters:    Size  Location     Type
  4944 ;;  state           1    wreg     unsigned char 
  4945 ;; Auto vars:     Size  Location     Type
  4946 ;;  state           1    0[BANK1 ] unsigned char 
  4947 ;; Return value:  Size  Location     Type
  4948 ;;		None               void
  4949 ;; Registers used:
  4950 ;;		wreg, status,2
  4951 ;; Tracked objects:
  4952 ;;		On entry : 0/0
  4953 ;;		On exit  : 0/0
  4954 ;;		Unchanged: 0/0
  4955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4956 ;;      Params:         0       0       0       0       0
  4957 ;;      Locals:         0       0       1       0       0
  4958 ;;      Temps:          0       0       0       0       0
  4959 ;;      Totals:         0       0       1       0       0
  4960 ;;Total ram usage:        1 bytes
  4961 ;; Hardware stack levels used:    1
  4962 ;; Hardware stack levels required when called:   12
  4963 ;; This function calls:
  4964 ;;		Nothing
  4965 ;; This function is called by:
  4966 ;;		_TMR_ResetTimer1
  4967 ;;		_InitTimer1
  4968 ;;		_TMR_Timer1Function
  4969 ;; This function uses a non-reentrant model
  4970 ;;
  4971                           
  4972                           	psect	text24
  4973  001AA6                     __ptext24:
  4974                           	opt stack 0
  4975  001AA6                     _TMR_Timer1:
  4976                           	opt stack 14
  4977                           
  4978                           ;incstack = 0
  4979                           ;TMR_Timer1@state stored from wreg
  4980  001AA6  0101               	movlb	1	; () banked
  4981  001AA8  6F80               	movwf	TMR_Timer1@state& (0+255),b
  4982                           
  4983                           ; BSR set to: 1
  4984                           ;TIMERS.c: 108: if(state)
  4985  001AAA  0101               	movlb	1	; () banked
  4986  001AAC  5180               	movf	TMR_Timer1@state& (0+255),w,b
  4987  001AAE  0101               	movlb	1	; () banked
  4988  001AB0  B4D8               	btfsc	status,2,c
  4989  001AB2  D002               	goto	l1039
  4990                           
  4991                           ; BSR set to: 1
  4992                           ;TIMERS.c: 109: {
  4993                           ;TIMERS.c: 111: T1CONbits.TMR1ON = 1;
  4994  001AB4  80CD               	bsf	4045,0,c	;volatile
  4995                           
  4996                           ;TIMERS.c: 112: }
  4997  001AB6  0012               	return	
  4998  001AB8                     l1039:
  4999                           
  5000                           ; BSR set to: 1
  5001                           ;TIMERS.c: 113: else
  5002                           ;TIMERS.c: 114: {
  5003                           ;TIMERS.c: 116: T1CONbits.TMR1ON = 0;
  5004  001AB8  90CD               	bcf	4045,0,c	;volatile
  5005  001ABA  0012               	return	
  5006                           
  5007                           ; BSR set to: 1
  5008                           
  5009                           ; BSR set to: 1
  5010  001ABC  0012               	return		;funcret
  5011  001ABE                     __end_of_TMR_Timer1:
  5012                           	opt stack 0
  5013                           tblptru	equ	0xFF8
  5014                           tblptrh	equ	0xFF7
  5015                           tblptrl	equ	0xFF6
  5016                           tablat	equ	0xFF5
  5017                           prodh	equ	0xFF4
  5018                           prodl	equ	0xFF3
  5019                           intcon	equ	0xFF2
  5020                           postinc0	equ	0xFEE
  5021                           wreg	equ	0xFE8
  5022                           postdec1	equ	0xFE5
  5023                           fsr1h	equ	0xFE2
  5024                           fsr1l	equ	0xFE1
  5025                           status	equ	0xFD8
  5026                           
  5027 ;; *************** function _InitTimer0 *****************
  5028 ;; Defined at:
  5029 ;;		line 316 in file "TIMERS.c"
  5030 ;; Parameters:    Size  Location     Type
  5031 ;;		None
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;		None
  5034 ;; Return value:  Size  Location     Type
  5035 ;;		None               void
  5036 ;; Registers used:
  5037 ;;		wreg, status,2, cstack
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5043 ;;      Params:         0       0       0       0       0
  5044 ;;      Locals:         0       0       0       0       0
  5045 ;;      Temps:          0       0       0       0       0
  5046 ;;      Totals:         0       0       0       0       0
  5047 ;;Total ram usage:        0 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; Hardware stack levels required when called:   14
  5050 ;; This function calls:
  5051 ;;		_TMR_ResetTimer0
  5052 ;;		_TMR_Timer0
  5053 ;;		_TMR_Timer0Int
  5054 ;; This function is called by:
  5055 ;;		_InitTimers
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text25
  5060  001924                     __ptext25:
  5061                           	opt stack 0
  5062  001924                     _InitTimer0:
  5063                           	opt stack 14
  5064                           
  5065                           ;TIMERS.c: 318: TMR_Timer0(0);
  5066                           
  5067                           ; BSR set to: 1
  5068                           ;incstack = 0
  5069  001924  0E00               	movlw	0
  5070  001926  EC6B  F00D         	call	_TMR_Timer0
  5071                           
  5072                           ;TIMERS.c: 319: TMR_ResetTimer0();
  5073  00192A  ECAF  F00B         	call	_TMR_ResetTimer0	;wreg free
  5074                           
  5075                           ;TIMERS.c: 320: T0CONbits.T08BIT = 0;
  5076  00192E  9CD5               	bcf	4053,6,c	;volatile
  5077                           
  5078                           ;TIMERS.c: 321: T0CONbits.T0CS = 0;
  5079  001930  9AD5               	bcf	4053,5,c	;volatile
  5080                           
  5081                           ;TIMERS.c: 322: T0CONbits.PSA = 0;
  5082  001932  96D5               	bcf	4053,3,c	;volatile
  5083                           
  5084                           ;TIMERS.c: 323: T0CONbits.T0PS = 0b101;
  5085  001934  50D5               	movf	4053,w,c	;volatile
  5086  001936  0BF8               	andlw	-8
  5087  001938  0905               	iorlw	5
  5088  00193A  6ED5               	movwf	4053,c	;volatile
  5089                           
  5090                           ;TIMERS.c: 324: INTCON2bits.TMR0IP = 1;
  5091  00193C  84F1               	bsf	intcon2,2,c	;volatile
  5092                           
  5093                           ;TIMERS.c: 325: TMR_Timer0Int(1);
  5094  00193E  0E01               	movlw	1
  5095  001940  EC5F  F00D         	call	_TMR_Timer0Int
  5096  001944  0012               	return		;funcret
  5097  001946                     __end_of_InitTimer0:
  5098                           	opt stack 0
  5099                           tblptru	equ	0xFF8
  5100                           tblptrh	equ	0xFF7
  5101                           tblptrl	equ	0xFF6
  5102                           tablat	equ	0xFF5
  5103                           prodh	equ	0xFF4
  5104                           prodl	equ	0xFF3
  5105                           intcon	equ	0xFF2
  5106                           intcon2	equ	0xFF1
  5107                           postinc0	equ	0xFEE
  5108                           wreg	equ	0xFE8
  5109                           postdec1	equ	0xFE5
  5110                           fsr1h	equ	0xFE2
  5111                           fsr1l	equ	0xFE1
  5112                           status	equ	0xFD8
  5113                           
  5114 ;; *************** function _TMR_Timer0Int *****************
  5115 ;; Defined at:
  5116 ;;		line 208 in file "TIMERS.c"
  5117 ;; Parameters:    Size  Location     Type
  5118 ;;  state           1    wreg     unsigned char 
  5119 ;; Auto vars:     Size  Location     Type
  5120 ;;  state           1    0[BANK1 ] unsigned char 
  5121 ;; Return value:  Size  Location     Type
  5122 ;;		None               void
  5123 ;; Registers used:
  5124 ;;		wreg, status,2
  5125 ;; Tracked objects:
  5126 ;;		On entry : 0/0
  5127 ;;		On exit  : 0/0
  5128 ;;		Unchanged: 0/0
  5129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5130 ;;      Params:         0       0       0       0       0
  5131 ;;      Locals:         0       0       1       0       0
  5132 ;;      Temps:          0       0       0       0       0
  5133 ;;      Totals:         0       0       1       0       0
  5134 ;;Total ram usage:        1 bytes
  5135 ;; Hardware stack levels used:    1
  5136 ;; Hardware stack levels required when called:   12
  5137 ;; This function calls:
  5138 ;;		Nothing
  5139 ;; This function is called by:
  5140 ;;		_InitTimer0
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text26
  5145  001ABE                     __ptext26:
  5146                           	opt stack 0
  5147  001ABE                     _TMR_Timer0Int:
  5148                           	opt stack 15
  5149                           
  5150                           ;incstack = 0
  5151                           ;TMR_Timer0Int@state stored from wreg
  5152  001ABE  0101               	movlb	1	; () banked
  5153  001AC0  6F80               	movwf	TMR_Timer0Int@state& (0+255),b
  5154                           
  5155                           ; BSR set to: 1
  5156                           ;TIMERS.c: 210: if(state)
  5157  001AC2  0101               	movlb	1	; () banked
  5158  001AC4  5180               	movf	TMR_Timer0Int@state& (0+255),w,b
  5159  001AC6  0101               	movlb	1	; () banked
  5160  001AC8  B4D8               	btfsc	status,2,c
  5161  001ACA  D002               	goto	l1064
  5162                           
  5163                           ; BSR set to: 1
  5164                           ;TIMERS.c: 211: {
  5165                           ;TIMERS.c: 213: INTCONbits.TMR0IE = 1;
  5166  001ACC  8AF2               	bsf	intcon,5,c	;volatile
  5167                           
  5168                           ;TIMERS.c: 214: }
  5169  001ACE  0012               	return	
  5170  001AD0                     l1064:
  5171                           
  5172                           ; BSR set to: 1
  5173                           ;TIMERS.c: 215: else
  5174                           ;TIMERS.c: 216: {
  5175                           ;TIMERS.c: 218: INTCONbits.TMR0IE = 0;
  5176  001AD0  9AF2               	bcf	intcon,5,c	;volatile
  5177  001AD2  0012               	return	
  5178                           
  5179                           ; BSR set to: 1
  5180                           
  5181                           ; BSR set to: 1
  5182  001AD4  0012               	return		;funcret
  5183  001AD6                     __end_of_TMR_Timer0Int:
  5184                           	opt stack 0
  5185                           tblptru	equ	0xFF8
  5186                           tblptrh	equ	0xFF7
  5187                           tblptrl	equ	0xFF6
  5188                           tablat	equ	0xFF5
  5189                           prodh	equ	0xFF4
  5190                           prodl	equ	0xFF3
  5191                           intcon	equ	0xFF2
  5192                           intcon2	equ	0xFF1
  5193                           postinc0	equ	0xFEE
  5194                           wreg	equ	0xFE8
  5195                           postdec1	equ	0xFE5
  5196                           fsr1h	equ	0xFE2
  5197                           fsr1l	equ	0xFE1
  5198                           status	equ	0xFD8
  5199                           
  5200 ;; *************** function _TMR_ResetTimer0 *****************
  5201 ;; Defined at:
  5202 ;;		line 144 in file "TIMERS.c"
  5203 ;; Parameters:    Size  Location     Type
  5204 ;;		None
  5205 ;; Auto vars:     Size  Location     Type
  5206 ;;  TimerOn         1    1[BANK1 ] unsigned char 
  5207 ;; Return value:  Size  Location     Type
  5208 ;;		None               void
  5209 ;; Registers used:
  5210 ;;		wreg, status,2, cstack
  5211 ;; Tracked objects:
  5212 ;;		On entry : 0/0
  5213 ;;		On exit  : 0/0
  5214 ;;		Unchanged: 0/0
  5215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5216 ;;      Params:         0       0       0       0       0
  5217 ;;      Locals:         0       0       1       0       0
  5218 ;;      Temps:          0       0       0       0       0
  5219 ;;      Totals:         0       0       1       0       0
  5220 ;;Total ram usage:        1 bytes
  5221 ;; Hardware stack levels used:    1
  5222 ;; Hardware stack levels required when called:   13
  5223 ;; This function calls:
  5224 ;;		_TMR_Timer0
  5225 ;; This function is called by:
  5226 ;;		_InitTimer0
  5227 ;; This function uses a non-reentrant model
  5228 ;;
  5229                           
  5230                           	psect	text27
  5231  00175E                     __ptext27:
  5232                           	opt stack 0
  5233  00175E                     _TMR_ResetTimer0:
  5234                           	opt stack 14
  5235                           
  5236                           ;TIMERS.c: 146: unsigned char TimerOn = T0CONbits.TMR0ON;
  5237                           
  5238                           ; BSR set to: 1
  5239                           ;incstack = 0
  5240  00175E  0E00               	movlw	0
  5241  001760  BED5               	btfsc	4053,7,c	;volatile
  5242  001762  0E01               	movlw	1
  5243  001764  0101               	movlb	1	; () banked
  5244  001766  6F81               	movwf	TMR_ResetTimer0@TimerOn& (0+255),b
  5245                           
  5246                           ; BSR set to: 1
  5247                           ;TIMERS.c: 148: TMR_Timer0(0);
  5248  001768  0E00               	movlw	0
  5249  00176A  EC6B  F00D         	call	_TMR_Timer0
  5250                           
  5251                           ;TIMERS.c: 149: TMR0H = 0;
  5252  00176E  0E00               	movlw	0
  5253  001770  6ED7               	movwf	4055,c	;volatile
  5254                           
  5255                           ;TIMERS.c: 150: TMR0L = 2;
  5256  001772  0E02               	movlw	2
  5257  001774  6ED6               	movwf	4054,c	;volatile
  5258                           
  5259                           ;TIMERS.c: 151: if(TimerOn)
  5260  001776  0101               	movlb	1	; () banked
  5261  001778  5181               	movf	TMR_ResetTimer0@TimerOn& (0+255),w,b
  5262  00177A  0101               	movlb	1	; () banked
  5263  00177C  B4D8               	btfsc	status,2,c
  5264  00177E  0012               	return	
  5265                           
  5266                           ; BSR set to: 1
  5267                           ;TIMERS.c: 152: {
  5268                           ;TIMERS.c: 153: TMR_Timer0(1);
  5269  001780  0E01               	movlw	1
  5270  001782  EC6B  F00D         	call	_TMR_Timer0
  5271  001786  0012               	return	
  5272  001788  0012               	return		;funcret
  5273  00178A                     __end_of_TMR_ResetTimer0:
  5274                           	opt stack 0
  5275                           tblptru	equ	0xFF8
  5276                           tblptrh	equ	0xFF7
  5277                           tblptrl	equ	0xFF6
  5278                           tablat	equ	0xFF5
  5279                           prodh	equ	0xFF4
  5280                           prodl	equ	0xFF3
  5281                           intcon	equ	0xFF2
  5282                           intcon2	equ	0xFF1
  5283                           postinc0	equ	0xFEE
  5284                           wreg	equ	0xFE8
  5285                           postdec1	equ	0xFE5
  5286                           fsr1h	equ	0xFE2
  5287                           fsr1l	equ	0xFE1
  5288                           status	equ	0xFD8
  5289                           
  5290 ;; *************** function _TMR_Timer0 *****************
  5291 ;; Defined at:
  5292 ;;		line 87 in file "TIMERS.c"
  5293 ;; Parameters:    Size  Location     Type
  5294 ;;  state           1    wreg     unsigned char 
  5295 ;; Auto vars:     Size  Location     Type
  5296 ;;  state           1    0[BANK1 ] unsigned char 
  5297 ;; Return value:  Size  Location     Type
  5298 ;;		None               void
  5299 ;; Registers used:
  5300 ;;		wreg, status,2
  5301 ;; Tracked objects:
  5302 ;;		On entry : 0/0
  5303 ;;		On exit  : 0/0
  5304 ;;		Unchanged: 0/0
  5305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5306 ;;      Params:         0       0       0       0       0
  5307 ;;      Locals:         0       0       1       0       0
  5308 ;;      Temps:          0       0       0       0       0
  5309 ;;      Totals:         0       0       1       0       0
  5310 ;;Total ram usage:        1 bytes
  5311 ;; Hardware stack levels used:    1
  5312 ;; Hardware stack levels required when called:   12
  5313 ;; This function calls:
  5314 ;;		Nothing
  5315 ;; This function is called by:
  5316 ;;		_TMR_ResetTimer0
  5317 ;;		_InitTimer0
  5318 ;; This function uses a non-reentrant model
  5319 ;;
  5320                           
  5321                           	psect	text28
  5322  001AD6                     __ptext28:
  5323                           	opt stack 0
  5324  001AD6                     _TMR_Timer0:
  5325                           	opt stack 15
  5326                           
  5327                           ;incstack = 0
  5328                           ;TMR_Timer0@state stored from wreg
  5329  001AD6  0101               	movlb	1	; () banked
  5330  001AD8  6F80               	movwf	TMR_Timer0@state& (0+255),b
  5331                           
  5332                           ; BSR set to: 1
  5333                           ;TIMERS.c: 89: if(state)
  5334  001ADA  0101               	movlb	1	; () banked
  5335  001ADC  5180               	movf	TMR_Timer0@state& (0+255),w,b
  5336  001ADE  0101               	movlb	1	; () banked
  5337  001AE0  B4D8               	btfsc	status,2,c
  5338  001AE2  D002               	goto	l1034
  5339                           
  5340                           ; BSR set to: 1
  5341                           ;TIMERS.c: 90: {
  5342                           ;TIMERS.c: 92: T0CONbits.TMR0ON = 1;
  5343  001AE4  8ED5               	bsf	4053,7,c	;volatile
  5344                           
  5345                           ;TIMERS.c: 93: }
  5346  001AE6  0012               	return	
  5347  001AE8                     l1034:
  5348                           
  5349                           ; BSR set to: 1
  5350                           ;TIMERS.c: 94: else
  5351                           ;TIMERS.c: 95: {
  5352                           ;TIMERS.c: 97: T0CONbits.TMR0ON = 0;
  5353  001AE8  9ED5               	bcf	4053,7,c	;volatile
  5354  001AEA  0012               	return	
  5355                           
  5356                           ; BSR set to: 1
  5357                           
  5358                           ; BSR set to: 1
  5359  001AEC  0012               	return		;funcret
  5360  001AEE                     __end_of_TMR_Timer0:
  5361                           	opt stack 0
  5362                           tblptru	equ	0xFF8
  5363                           tblptrh	equ	0xFF7
  5364                           tblptrl	equ	0xFF6
  5365                           tablat	equ	0xFF5
  5366                           prodh	equ	0xFF4
  5367                           prodl	equ	0xFF3
  5368                           intcon	equ	0xFF2
  5369                           intcon2	equ	0xFF1
  5370                           postinc0	equ	0xFEE
  5371                           wreg	equ	0xFE8
  5372                           postdec1	equ	0xFE5
  5373                           fsr1h	equ	0xFE2
  5374                           fsr1l	equ	0xFE1
  5375                           status	equ	0xFD8
  5376                           
  5377 ;; *************** function _InitRF *****************
  5378 ;; Defined at:
  5379 ;;		line 177 in file "RF.c"
  5380 ;; Parameters:    Size  Location     Type
  5381 ;;		None
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;		None
  5384 ;; Return value:  Size  Location     Type
  5385 ;;		None               void
  5386 ;; Registers used:
  5387 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 0/0
  5390 ;;		On exit  : 0/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5393 ;;      Params:         0       0       0       0       0
  5394 ;;      Locals:         0       0       0       0       0
  5395 ;;      Temps:          0       0       0       0       0
  5396 ;;      Totals:         0       0       0       0       0
  5397 ;;Total ram usage:        0 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:   13
  5400 ;; This function calls:
  5401 ;;		_MSC_CleanBufferInt
  5402 ;;		_RF_DataInt
  5403 ;;		_RF_Receiver
  5404 ;;		_RF_SetBandwidth
  5405 ;;		_RF_SetSquelch
  5406 ;; This function is called by:
  5407 ;;		_Init_System
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           	psect	text29
  5412  0014E8                     __ptext29:
  5413                           	opt stack 0
  5414  0014E8                     _InitRF:
  5415                           	opt stack 16
  5416                           
  5417                           ;RF.c: 179: RF_Receiver(1);
  5418                           
  5419                           ; BSR set to: 1
  5420                           ;incstack = 0
  5421  0014E8  0E01               	movlw	1
  5422  0014EA  EC83  F00D         	call	_RF_Receiver
  5423                           
  5424                           ;RF.c: 180: RF_SetBandwidth(2);
  5425  0014EE  0E02               	movlw	2
  5426  0014F0  ECB0  F00A         	call	_RF_SetBandwidth
  5427                           
  5428                           ;RF.c: 181: MSC_CleanBufferInt(&RF_DataTiming,128);
  5429  0014F4  0E00               	movlw	low _RF_DataTiming
  5430  0014F6  0101               	movlb	1	; () banked
  5431  0014F8  6F80               	movwf	MSC_CleanBufferInt@data& (0+255),b
  5432  0014FA  0E03               	movlw	high _RF_DataTiming
  5433  0014FC  0101               	movlb	1	; () banked
  5434  0014FE  6F81               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  5435  001500  0E00               	movlw	0
  5436  001502  0101               	movlb	1	; () banked
  5437  001504  6F83               	movwf	(MSC_CleanBufferInt@count+1)& (0+255),b
  5438  001506  0E80               	movlw	128
  5439  001508  6F82               	movwf	MSC_CleanBufferInt@count& (0+255),b
  5440  00150A  EC6B  F009         	call	_MSC_CleanBufferInt	;wreg free
  5441                           
  5442                           ;RF.c: 182: RF_SetSquelch(1);
  5443  00150E  0E01               	movlw	1
  5444  001510  EC77  F00D         	call	_RF_SetSquelch
  5445                           
  5446                           ;RF.c: 183: INTCON3bits.INT1P = 1;
  5447  001514  8CF0               	bsf	intcon3,6,c	;volatile
  5448                           
  5449                           ;RF.c: 184: INTCON3bits.INT2P = 1;
  5450  001516  8EF0               	bsf	intcon3,7,c	;volatile
  5451                           
  5452                           ;RF.c: 185: INTCON2bits.INTEDG1 = 1;
  5453  001518  8AF1               	bsf	intcon2,5,c	;volatile
  5454                           
  5455                           ;RF.c: 186: INTCON2bits.INTEDG2 = 0;
  5456  00151A  98F1               	bcf	intcon2,4,c	;volatile
  5457                           
  5458                           ;RF.c: 187: RF_DataInt(1);
  5459  00151C  0E01               	movlw	1
  5460  00151E  ECE0  F00C         	call	_RF_DataInt
  5461  001522  0012               	return		;funcret
  5462  001524                     __end_of_InitRF:
  5463                           	opt stack 0
  5464                           tblptru	equ	0xFF8
  5465                           tblptrh	equ	0xFF7
  5466                           tblptrl	equ	0xFF6
  5467                           tablat	equ	0xFF5
  5468                           prodh	equ	0xFF4
  5469                           prodl	equ	0xFF3
  5470                           intcon	equ	0xFF2
  5471                           intcon2	equ	0xFF1
  5472                           intcon3	equ	0xFF0
  5473                           postinc0	equ	0xFEE
  5474                           wreg	equ	0xFE8
  5475                           postdec1	equ	0xFE5
  5476                           fsr1h	equ	0xFE2
  5477                           fsr1l	equ	0xFE1
  5478                           status	equ	0xFD8
  5479                           
  5480 ;; *************** function _RF_SetSquelch *****************
  5481 ;; Defined at:
  5482 ;;		line 153 in file "RF.c"
  5483 ;; Parameters:    Size  Location     Type
  5484 ;;  state           1    wreg     unsigned char 
  5485 ;; Auto vars:     Size  Location     Type
  5486 ;;  state           1    0[BANK1 ] unsigned char 
  5487 ;; Return value:  Size  Location     Type
  5488 ;;		None               void
  5489 ;; Registers used:
  5490 ;;		wreg, status,2, status,0
  5491 ;; Tracked objects:
  5492 ;;		On entry : 0/0
  5493 ;;		On exit  : 0/0
  5494 ;;		Unchanged: 0/0
  5495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5496 ;;      Params:         0       0       0       0       0
  5497 ;;      Locals:         0       0       1       0       0
  5498 ;;      Temps:          0       0       0       0       0
  5499 ;;      Totals:         0       0       1       0       0
  5500 ;;Total ram usage:        1 bytes
  5501 ;; Hardware stack levels used:    1
  5502 ;; Hardware stack levels required when called:   12
  5503 ;; This function calls:
  5504 ;;		Nothing
  5505 ;; This function is called by:
  5506 ;;		_InitRF
  5507 ;; This function uses a non-reentrant model
  5508 ;;
  5509                           
  5510                           	psect	text30
  5511  001AEE                     __ptext30:
  5512                           	opt stack 0
  5513  001AEE                     _RF_SetSquelch:
  5514                           	opt stack 16
  5515                           
  5516                           ;incstack = 0
  5517                           ;RF_SetSquelch@state stored from wreg
  5518  001AEE  0101               	movlb	1	; () banked
  5519  001AF0  6F80               	movwf	RF_SetSquelch@state& (0+255),b
  5520                           
  5521                           ; BSR set to: 1
  5522                           ;RF.c: 155: if(!state)
  5523  001AF2  0101               	movlb	1	; () banked
  5524  001AF4  5180               	movf	RF_SetSquelch@state& (0+255),w,b
  5525  001AF6  0101               	movlb	1	; () banked
  5526  001AF8  A4D8               	btfss	status,2,c
  5527  001AFA  D002               	goto	l7454
  5528                           
  5529                           ; BSR set to: 1
  5530                           ;RF.c: 156: {
  5531                           ;RF.c: 158: LATA |= 0x20;
  5532  001AFC  8A89               	bsf	3977,5,c	;volatile
  5533                           
  5534                           ;RF.c: 159: }
  5535  001AFE  0012               	return	
  5536  001B00                     l7454:
  5537                           
  5538                           ; BSR set to: 1
  5539                           ;RF.c: 160: else
  5540                           ;RF.c: 161: {
  5541                           ;RF.c: 163: LATA &= ~0x20;
  5542  001B00  9A89               	bcf	3977,5,c	;volatile
  5543  001B02  0012               	return	
  5544                           
  5545                           ; BSR set to: 1
  5546                           
  5547                           ; BSR set to: 1
  5548  001B04  0012               	return		;funcret
  5549  001B06                     __end_of_RF_SetSquelch:
  5550                           	opt stack 0
  5551                           tblptru	equ	0xFF8
  5552                           tblptrh	equ	0xFF7
  5553                           tblptrl	equ	0xFF6
  5554                           tablat	equ	0xFF5
  5555                           prodh	equ	0xFF4
  5556                           prodl	equ	0xFF3
  5557                           intcon	equ	0xFF2
  5558                           intcon2	equ	0xFF1
  5559                           intcon3	equ	0xFF0
  5560                           postinc0	equ	0xFEE
  5561                           wreg	equ	0xFE8
  5562                           postdec1	equ	0xFE5
  5563                           fsr1h	equ	0xFE2
  5564                           fsr1l	equ	0xFE1
  5565                           status	equ	0xFD8
  5566                           
  5567 ;; *************** function _RF_SetBandwidth *****************
  5568 ;; Defined at:
  5569 ;;		line 119 in file "RF.c"
  5570 ;; Parameters:    Size  Location     Type
  5571 ;;  band            1    wreg     unsigned char 
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;  band            1    0[BANK1 ] unsigned char 
  5574 ;; Return value:  Size  Location     Type
  5575 ;;		None               void
  5576 ;; Registers used:
  5577 ;;		wreg, status,2, status,0
  5578 ;; Tracked objects:
  5579 ;;		On entry : 0/0
  5580 ;;		On exit  : 0/0
  5581 ;;		Unchanged: 0/0
  5582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5583 ;;      Params:         0       0       0       0       0
  5584 ;;      Locals:         0       0       1       0       0
  5585 ;;      Temps:          0       0       0       0       0
  5586 ;;      Totals:         0       0       1       0       0
  5587 ;;Total ram usage:        1 bytes
  5588 ;; Hardware stack levels used:    1
  5589 ;; Hardware stack levels required when called:   12
  5590 ;; This function calls:
  5591 ;;		Nothing
  5592 ;; This function is called by:
  5593 ;;		_InitRF
  5594 ;; This function uses a non-reentrant model
  5595 ;;
  5596                           
  5597                           	psect	text31
  5598  001560                     __ptext31:
  5599                           	opt stack 0
  5600  001560                     _RF_SetBandwidth:
  5601                           	opt stack 16
  5602                           
  5603                           ; BSR set to: 1
  5604                           ;incstack = 0
  5605                           ;RF_SetBandwidth@band stored from wreg
  5606  001560  0101               	movlb	1	; () banked
  5607  001562  6F80               	movwf	RF_SetBandwidth@band& (0+255),b
  5608                           
  5609                           ; BSR set to: 1
  5610                           ;RF.c: 121: if(band == 0)
  5611  001564  0101               	movlb	1	; () banked
  5612  001566  5180               	movf	RF_SetBandwidth@band& (0+255),w,b
  5613  001568  0101               	movlb	1	; () banked
  5614  00156A  A4D8               	btfss	status,2,c
  5615  00156C  D003               	goto	l7440
  5616                           
  5617                           ; BSR set to: 1
  5618                           ;RF.c: 122: {
  5619                           ;RF.c: 124: LATC &= ~0x40;
  5620  00156E  9C8B               	bcf	3979,6,c	;volatile
  5621                           
  5622                           ;RF.c: 125: LATC &= ~0x80;
  5623  001570  9E8B               	bcf	3979,7,c	;volatile
  5624                           
  5625                           ;RF.c: 126: }
  5626  001572  0012               	return	
  5627  001574                     l7440:
  5628                           
  5629                           ; BSR set to: 1
  5630                           ;RF.c: 127: else if(band == 1)
  5631  001574  0101               	movlb	1	; () banked
  5632  001576  0580               	decf	RF_SetBandwidth@band& (0+255),w,b
  5633  001578  A4D8               	btfss	status,2,c
  5634  00157A  D003               	goto	l7444
  5635                           
  5636                           ; BSR set to: 1
  5637                           ;RF.c: 128: {
  5638                           ;RF.c: 130: LATC |= 0x40;
  5639  00157C  8C8B               	bsf	3979,6,c	;volatile
  5640                           
  5641                           ;RF.c: 131: LATC &= ~0x80;
  5642  00157E  9E8B               	bcf	3979,7,c	;volatile
  5643                           
  5644                           ;RF.c: 132: }
  5645  001580  0012               	return	
  5646  001582                     l7444:
  5647                           
  5648                           ; BSR set to: 1
  5649                           ;RF.c: 133: else if(band == 2)
  5650  001582  0E02               	movlw	2
  5651  001584  0101               	movlb	1	; () banked
  5652  001586  1980               	xorwf	RF_SetBandwidth@band& (0+255),w,b
  5653  001588  A4D8               	btfss	status,2,c
  5654  00158A  D003               	goto	l7448
  5655                           
  5656                           ; BSR set to: 1
  5657                           ;RF.c: 134: {
  5658                           ;RF.c: 136: LATC &= ~0x40;
  5659  00158C  9C8B               	bcf	3979,6,c	;volatile
  5660                           
  5661                           ;RF.c: 137: LATC |= 0x80;
  5662  00158E  8E8B               	bsf	3979,7,c	;volatile
  5663                           
  5664                           ;RF.c: 138: }
  5665  001590  0012               	return	
  5666  001592                     l7448:
  5667                           
  5668                           ; BSR set to: 1
  5669                           ;RF.c: 139: else
  5670                           ;RF.c: 140: {
  5671                           ;RF.c: 142: LATC |= 0x40;
  5672  001592  8C8B               	bsf	3979,6,c	;volatile
  5673                           
  5674                           ;RF.c: 143: LATC |= 0x80;
  5675  001594  8E8B               	bsf	3979,7,c	;volatile
  5676                           
  5677                           ; BSR set to: 1
  5678                           
  5679                           ; BSR set to: 1
  5680  001596  0012               	return	
  5681                           
  5682                           ; BSR set to: 1
  5683                           
  5684                           ; BSR set to: 1
  5685  001598  0012               	return		;funcret
  5686  00159A                     __end_of_RF_SetBandwidth:
  5687                           	opt stack 0
  5688                           tblptru	equ	0xFF8
  5689                           tblptrh	equ	0xFF7
  5690                           tblptrl	equ	0xFF6
  5691                           tablat	equ	0xFF5
  5692                           prodh	equ	0xFF4
  5693                           prodl	equ	0xFF3
  5694                           intcon	equ	0xFF2
  5695                           intcon2	equ	0xFF1
  5696                           intcon3	equ	0xFF0
  5697                           postinc0	equ	0xFEE
  5698                           wreg	equ	0xFE8
  5699                           postdec1	equ	0xFE5
  5700                           fsr1h	equ	0xFE2
  5701                           fsr1l	equ	0xFE1
  5702                           status	equ	0xFD8
  5703                           
  5704 ;; *************** function _RF_Receiver *****************
  5705 ;; Defined at:
  5706 ;;		line 100 in file "RF.c"
  5707 ;; Parameters:    Size  Location     Type
  5708 ;;  state           1    wreg     unsigned char 
  5709 ;; Auto vars:     Size  Location     Type
  5710 ;;  state           1    0[BANK1 ] unsigned char 
  5711 ;; Return value:  Size  Location     Type
  5712 ;;		None               void
  5713 ;; Registers used:
  5714 ;;		wreg, status,2, status,0
  5715 ;; Tracked objects:
  5716 ;;		On entry : 0/0
  5717 ;;		On exit  : 0/0
  5718 ;;		Unchanged: 0/0
  5719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5720 ;;      Params:         0       0       0       0       0
  5721 ;;      Locals:         0       0       1       0       0
  5722 ;;      Temps:          0       0       0       0       0
  5723 ;;      Totals:         0       0       1       0       0
  5724 ;;Total ram usage:        1 bytes
  5725 ;; Hardware stack levels used:    1
  5726 ;; Hardware stack levels required when called:   12
  5727 ;; This function calls:
  5728 ;;		Nothing
  5729 ;; This function is called by:
  5730 ;;		_InitRF
  5731 ;; This function uses a non-reentrant model
  5732 ;;
  5733                           
  5734                           	psect	text32
  5735  001B06                     __ptext32:
  5736                           	opt stack 0
  5737  001B06                     _RF_Receiver:
  5738                           	opt stack 16
  5739                           
  5740                           ; BSR set to: 1
  5741                           ;incstack = 0
  5742                           ;RF_Receiver@state stored from wreg
  5743  001B06  0101               	movlb	1	; () banked
  5744  001B08  6F80               	movwf	RF_Receiver@state& (0+255),b
  5745                           
  5746                           ; BSR set to: 1
  5747                           ;RF.c: 102: if(!state)
  5748  001B0A  0101               	movlb	1	; () banked
  5749  001B0C  5180               	movf	RF_Receiver@state& (0+255),w,b
  5750  001B0E  0101               	movlb	1	; () banked
  5751  001B10  A4D8               	btfss	status,2,c
  5752  001B12  D002               	goto	l7434
  5753                           
  5754                           ; BSR set to: 1
  5755                           ;RF.c: 103: {
  5756                           ;RF.c: 105: LATA |= 0x04;
  5757  001B14  8489               	bsf	3977,2,c	;volatile
  5758                           
  5759                           ;RF.c: 106: }
  5760  001B16  0012               	return	
  5761  001B18                     l7434:
  5762                           
  5763                           ; BSR set to: 1
  5764                           ;RF.c: 107: else
  5765                           ;RF.c: 108: {
  5766                           ;RF.c: 110: LATA &= ~0x04;
  5767  001B18  9489               	bcf	3977,2,c	;volatile
  5768  001B1A  0012               	return	
  5769                           
  5770                           ; BSR set to: 1
  5771                           
  5772                           ; BSR set to: 1
  5773  001B1C  0012               	return		;funcret
  5774  001B1E                     __end_of_RF_Receiver:
  5775                           	opt stack 0
  5776                           tblptru	equ	0xFF8
  5777                           tblptrh	equ	0xFF7
  5778                           tblptrl	equ	0xFF6
  5779                           tablat	equ	0xFF5
  5780                           prodh	equ	0xFF4
  5781                           prodl	equ	0xFF3
  5782                           intcon	equ	0xFF2
  5783                           intcon2	equ	0xFF1
  5784                           intcon3	equ	0xFF0
  5785                           postinc0	equ	0xFEE
  5786                           wreg	equ	0xFE8
  5787                           postdec1	equ	0xFE5
  5788                           fsr1h	equ	0xFE2
  5789                           fsr1l	equ	0xFE1
  5790                           status	equ	0xFD8
  5791                           
  5792 ;; *************** function _RF_DataInt *****************
  5793 ;; Defined at:
  5794 ;;		line 78 in file "RF.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;  state           1    wreg     unsigned char 
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;  state           1    0[BANK1 ] unsigned char 
  5799 ;; Return value:  Size  Location     Type
  5800 ;;		None               void
  5801 ;; Registers used:
  5802 ;;		wreg, status,2
  5803 ;; Tracked objects:
  5804 ;;		On entry : 0/0
  5805 ;;		On exit  : 0/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5808 ;;      Params:         0       0       0       0       0
  5809 ;;      Locals:         0       0       1       0       0
  5810 ;;      Temps:          0       0       0       0       0
  5811 ;;      Totals:         0       0       1       0       0
  5812 ;;Total ram usage:        1 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:   12
  5815 ;; This function calls:
  5816 ;;		Nothing
  5817 ;; This function is called by:
  5818 ;;		_InitRF
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           	psect	text33
  5823  0019C0                     __ptext33:
  5824                           	opt stack 0
  5825  0019C0                     _RF_DataInt:
  5826                           	opt stack 16
  5827                           
  5828                           ; BSR set to: 1
  5829                           ;incstack = 0
  5830                           ;RF_DataInt@state stored from wreg
  5831  0019C0  0101               	movlb	1	; () banked
  5832  0019C2  6F80               	movwf	RF_DataInt@state& (0+255),b
  5833                           
  5834                           ; BSR set to: 1
  5835                           ;RF.c: 80: if(state)
  5836  0019C4  0101               	movlb	1	; () banked
  5837  0019C6  5180               	movf	RF_DataInt@state& (0+255),w,b
  5838  0019C8  0101               	movlb	1	; () banked
  5839  0019CA  B4D8               	btfsc	status,2,c
  5840  0019CC  D003               	goto	l382
  5841                           
  5842                           ; BSR set to: 1
  5843                           ;RF.c: 81: {
  5844                           ;RF.c: 83: INTCON3bits.INT1E = 1;
  5845  0019CE  86F0               	bsf	intcon3,3,c	;volatile
  5846                           
  5847                           ;RF.c: 84: INTCON3bits.INT2E = 1;
  5848  0019D0  88F0               	bsf	intcon3,4,c	;volatile
  5849                           
  5850                           ;RF.c: 85: }
  5851  0019D2  0012               	return	
  5852  0019D4                     l382:
  5853                           
  5854                           ; BSR set to: 1
  5855                           ;RF.c: 86: else
  5856                           ;RF.c: 87: {
  5857                           ;RF.c: 89: INTCON3bits.INT1E = 0;
  5858  0019D4  96F0               	bcf	intcon3,3,c	;volatile
  5859                           
  5860                           ;RF.c: 90: INTCON3bits.INT2E = 0;
  5861  0019D6  98F0               	bcf	intcon3,4,c	;volatile
  5862  0019D8  0012               	return	
  5863                           
  5864                           ; BSR set to: 1
  5865                           
  5866                           ; BSR set to: 1
  5867  0019DA  0012               	return		;funcret
  5868  0019DC                     __end_of_RF_DataInt:
  5869                           	opt stack 0
  5870                           tblptru	equ	0xFF8
  5871                           tblptrh	equ	0xFF7
  5872                           tblptrl	equ	0xFF6
  5873                           tablat	equ	0xFF5
  5874                           prodh	equ	0xFF4
  5875                           prodl	equ	0xFF3
  5876                           intcon	equ	0xFF2
  5877                           intcon2	equ	0xFF1
  5878                           intcon3	equ	0xFF0
  5879                           postinc0	equ	0xFEE
  5880                           wreg	equ	0xFE8
  5881                           postdec1	equ	0xFE5
  5882                           fsr1h	equ	0xFE2
  5883                           fsr1l	equ	0xFE1
  5884                           status	equ	0xFD8
  5885                           
  5886 ;; *************** function _InitMOTOR *****************
  5887 ;; Defined at:
  5888 ;;		line 92 in file "MOTOR.c"
  5889 ;; Parameters:    Size  Location     Type
  5890 ;;		None
  5891 ;; Auto vars:     Size  Location     Type
  5892 ;;		None
  5893 ;; Return value:  Size  Location     Type
  5894 ;;		None               void
  5895 ;; Registers used:
  5896 ;;		None
  5897 ;; Tracked objects:
  5898 ;;		On entry : 0/0
  5899 ;;		On exit  : 0/0
  5900 ;;		Unchanged: 0/0
  5901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5902 ;;      Params:         0       0       0       0       0
  5903 ;;      Locals:         0       0       0       0       0
  5904 ;;      Temps:          0       0       0       0       0
  5905 ;;      Totals:         0       0       0       0       0
  5906 ;;Total ram usage:        0 bytes
  5907 ;; Hardware stack levels used:    1
  5908 ;; Hardware stack levels required when called:   12
  5909 ;; This function calls:
  5910 ;;		Nothing
  5911 ;; This function is called by:
  5912 ;;		_Init_System
  5913 ;; This function uses a non-reentrant model
  5914 ;;
  5915                           
  5916                           	psect	text34
  5917  001D64                     __ptext34:
  5918                           	opt stack 0
  5919  001D64                     _InitMOTOR:
  5920                           	opt stack 17
  5921                           
  5922                           ;MOTOR.c: 95: __nop();
  5923                           
  5924                           ; BSR set to: 1
  5925                           ;incstack = 0
  5926  001D64  F000               	nop	
  5927  001D66  0012               	return		;funcret
  5928  001D68                     __end_of_InitMOTOR:
  5929                           	opt stack 0
  5930                           tblptru	equ	0xFF8
  5931                           tblptrh	equ	0xFF7
  5932                           tblptrl	equ	0xFF6
  5933                           tablat	equ	0xFF5
  5934                           prodh	equ	0xFF4
  5935                           prodl	equ	0xFF3
  5936                           intcon	equ	0xFF2
  5937                           intcon2	equ	0xFF1
  5938                           intcon3	equ	0xFF0
  5939                           postinc0	equ	0xFEE
  5940                           wreg	equ	0xFE8
  5941                           postdec1	equ	0xFE5
  5942                           fsr1h	equ	0xFE2
  5943                           fsr1l	equ	0xFE1
  5944                           status	equ	0xFD8
  5945                           
  5946 ;; *************** function _InitLDO *****************
  5947 ;; Defined at:
  5948 ;;		line 75 in file "LDO.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;		None
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;		None
  5953 ;; Return value:  Size  Location     Type
  5954 ;;		None               void
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0, cstack
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5962 ;;      Params:         0       0       0       0       0
  5963 ;;      Locals:         0       0       0       0       0
  5964 ;;      Temps:          0       0       0       0       0
  5965 ;;      Totals:         0       0       0       0       0
  5966 ;;Total ram usage:        0 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:   13
  5969 ;; This function calls:
  5970 ;;		_LDO_Pass
  5971 ;; This function is called by:
  5972 ;;		_Init_System
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976                           	psect	text35
  5977  001D50                     __ptext35:
  5978                           	opt stack 0
  5979  001D50                     _InitLDO:
  5980                           	opt stack 16
  5981                           
  5982                           ;LDO.c: 77: LDO_Pass(0);
  5983                           
  5984                           ;incstack = 0
  5985  001D50  0E00               	movlw	0
  5986  001D52  ECEF  F01F         	call	_LDO_Pass
  5987  001D56  0012               	return		;funcret
  5988  001D58                     __end_of_InitLDO:
  5989                           	opt stack 0
  5990                           tblptru	equ	0xFF8
  5991                           tblptrh	equ	0xFF7
  5992                           tblptrl	equ	0xFF6
  5993                           tablat	equ	0xFF5
  5994                           prodh	equ	0xFF4
  5995                           prodl	equ	0xFF3
  5996                           intcon	equ	0xFF2
  5997                           intcon2	equ	0xFF1
  5998                           intcon3	equ	0xFF0
  5999                           postinc0	equ	0xFEE
  6000                           wreg	equ	0xFE8
  6001                           postdec1	equ	0xFE5
  6002                           fsr1h	equ	0xFE2
  6003                           fsr1l	equ	0xFE1
  6004                           status	equ	0xFD8
  6005                           
  6006 ;; *************** function _LDO_Pass *****************
  6007 ;; Defined at:
  6008 ;;		line 52 in file "LDO.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  state           1    wreg     unsigned char 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  state           1    0[BANK1 ] unsigned char 
  6013 ;; Return value:  Size  Location     Type
  6014 ;;		None               void
  6015 ;; Registers used:
  6016 ;;		wreg, status,2, status,0
  6017 ;; Tracked objects:
  6018 ;;		On entry : 0/0
  6019 ;;		On exit  : 0/0
  6020 ;;		Unchanged: 0/0
  6021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6022 ;;      Params:         0       0       0       0       0
  6023 ;;      Locals:         0       0       1       0       0
  6024 ;;      Temps:          0       0       0       0       0
  6025 ;;      Totals:         0       0       1       0       0
  6026 ;;Total ram usage:        1 bytes
  6027 ;; Hardware stack levels used:    1
  6028 ;; Hardware stack levels required when called:   12
  6029 ;; This function calls:
  6030 ;;		Nothing
  6031 ;; This function is called by:
  6032 ;;		_InitLDO
  6033 ;; This function uses a non-reentrant model
  6034 ;;
  6035                           
  6036                           	psect	text36
  6037  003FDE                     __ptext36:
  6038                           	opt stack 0
  6039  003FDE                     _LDO_Pass:
  6040                           	opt stack 16
  6041                           
  6042                           ;incstack = 0
  6043                           ;LDO_Pass@state stored from wreg
  6044  003FDE  0101               	movlb	1	; () banked
  6045  003FE0  6F80               	movwf	LDO_Pass@state& (0+255),b
  6046                           
  6047                           ; BSR set to: 1
  6048                           ;LDO.c: 54: if(state)
  6049  003FE2  0101               	movlb	1	; () banked
  6050  003FE4  5180               	movf	LDO_Pass@state& (0+255),w,b
  6051  003FE6  0101               	movlb	1	; () banked
  6052  003FE8  B4D8               	btfsc	status,2,c
  6053  003FEA  D003               	goto	l571
  6054                           
  6055                           ; BSR set to: 1
  6056                           ;LDO.c: 55: {
  6057                           ;LDO.c: 57: TRISCbits.TRISC5 = 0;
  6058  003FEC  9A94               	bcf	3988,5,c	;volatile
  6059                           
  6060                           ; BSR set to: 1
  6061                           ;LDO.c: 58: LATC &= ~0x20;
  6062  003FEE  9A8B               	bcf	3979,5,c	;volatile
  6063                           
  6064                           ;LDO.c: 59: }
  6065  003FF0  0012               	return	
  6066  003FF2                     l571:
  6067                           
  6068                           ; BSR set to: 1
  6069                           ;LDO.c: 60: else
  6070                           ;LDO.c: 61: {
  6071                           ;LDO.c: 63: TRISCbits.TRISC5 = 1;
  6072  003FF2  8A94               	bsf	3988,5,c	;volatile
  6073  003FF4  0012               	return	
  6074                           
  6075                           ; BSR set to: 1
  6076                           
  6077                           ; BSR set to: 1
  6078  003FF6  0012               	return		;funcret
  6079  003FF8                     __end_of_LDO_Pass:
  6080                           	opt stack 0
  6081                           tblptru	equ	0xFF8
  6082                           tblptrh	equ	0xFF7
  6083                           tblptrl	equ	0xFF6
  6084                           tablat	equ	0xFF5
  6085                           prodh	equ	0xFF4
  6086                           prodl	equ	0xFF3
  6087                           intcon	equ	0xFF2
  6088                           intcon2	equ	0xFF1
  6089                           intcon3	equ	0xFF0
  6090                           postinc0	equ	0xFEE
  6091                           wreg	equ	0xFE8
  6092                           postdec1	equ	0xFE5
  6093                           fsr1h	equ	0xFE2
  6094                           fsr1l	equ	0xFE1
  6095                           status	equ	0xFD8
  6096                           
  6097 ;; *************** function _InitIR *****************
  6098 ;; Defined at:
  6099 ;;		line 70 in file "IR.c"
  6100 ;; Parameters:    Size  Location     Type
  6101 ;;		None
  6102 ;; Auto vars:     Size  Location     Type
  6103 ;;		None
  6104 ;; Return value:  Size  Location     Type
  6105 ;;		None               void
  6106 ;; Registers used:
  6107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6108 ;; Tracked objects:
  6109 ;;		On entry : 0/0
  6110 ;;		On exit  : 0/0
  6111 ;;		Unchanged: 0/0
  6112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6113 ;;      Params:         0       0       0       0       0
  6114 ;;      Locals:         0       0       0       0       0
  6115 ;;      Temps:          0       0       0       0       0
  6116 ;;      Totals:         0       0       0       0       0
  6117 ;;Total ram usage:        0 bytes
  6118 ;; Hardware stack levels used:    1
  6119 ;; Hardware stack levels required when called:   13
  6120 ;; This function calls:
  6121 ;;		_MSC_CleanBufferInt
  6122 ;; This function is called by:
  6123 ;;		_Init_System
  6124 ;; This function uses a non-reentrant model
  6125 ;;
  6126                           
  6127                           	psect	text37
  6128  0019DC                     __ptext37:
  6129                           	opt stack 0
  6130  0019DC                     _InitIR:
  6131                           	opt stack 16
  6132                           
  6133                           ;IR.c: 72: MSC_CleanBufferInt(&IR_DataTiming,128);
  6134                           
  6135                           ; BSR set to: 1
  6136                           ;incstack = 0
  6137  0019DC  0E00               	movlw	low _IR_DataTiming
  6138  0019DE  0101               	movlb	1	; () banked
  6139  0019E0  6F80               	movwf	MSC_CleanBufferInt@data& (0+255),b
  6140  0019E2  0E02               	movlw	high _IR_DataTiming
  6141  0019E4  0101               	movlb	1	; () banked
  6142  0019E6  6F81               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  6143  0019E8  0E00               	movlw	0
  6144  0019EA  0101               	movlb	1	; () banked
  6145  0019EC  6F83               	movwf	(MSC_CleanBufferInt@count+1)& (0+255),b
  6146  0019EE  0E80               	movlw	128
  6147  0019F0  6F82               	movwf	MSC_CleanBufferInt@count& (0+255),b
  6148  0019F2  EC6B  F009         	call	_MSC_CleanBufferInt	;wreg free
  6149  0019F6  0012               	return		;funcret
  6150  0019F8                     __end_of_InitIR:
  6151                           	opt stack 0
  6152                           tblptru	equ	0xFF8
  6153                           tblptrh	equ	0xFF7
  6154                           tblptrl	equ	0xFF6
  6155                           tablat	equ	0xFF5
  6156                           prodh	equ	0xFF4
  6157                           prodl	equ	0xFF3
  6158                           intcon	equ	0xFF2
  6159                           intcon2	equ	0xFF1
  6160                           intcon3	equ	0xFF0
  6161                           postinc0	equ	0xFEE
  6162                           wreg	equ	0xFE8
  6163                           postdec1	equ	0xFE5
  6164                           fsr1h	equ	0xFE2
  6165                           fsr1l	equ	0xFE1
  6166                           status	equ	0xFD8
  6167                           
  6168 ;; *************** function _MSC_CleanBufferInt *****************
  6169 ;; Defined at:
  6170 ;;		line 166 in file "MISC.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;  data            2    0[BANK1 ] PTR unsigned int 
  6173 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
  6174 ;;  count           2    2[BANK1 ] unsigned int 
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;  i               2    4[BANK1 ] unsigned int 
  6177 ;; Return value:  Size  Location     Type
  6178 ;;		None               void
  6179 ;; Registers used:
  6180 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6186 ;;      Params:         0       0       4       0       0
  6187 ;;      Locals:         0       0       2       0       0
  6188 ;;      Temps:          0       0       0       0       0
  6189 ;;      Totals:         0       0       6       0       0
  6190 ;;Total ram usage:        6 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:   12
  6193 ;; This function calls:
  6194 ;;		Nothing
  6195 ;; This function is called by:
  6196 ;;		_InitRF
  6197 ;;		_InitIR
  6198 ;;		_MSC_BufferCopyInt
  6199 ;; This function uses a non-reentrant model
  6200 ;;
  6201                           
  6202                           	psect	text38
  6203  0012D6                     __ptext38:
  6204                           	opt stack 0
  6205  0012D6                     _MSC_CleanBufferInt:
  6206                           	opt stack 16
  6207                           
  6208                           ;MISC.c: 168: unsigned int i=0;
  6209                           
  6210                           ;incstack = 0
  6211  0012D6  0E00               	movlw	0
  6212  0012D8  0101               	movlb	1	; () banked
  6213  0012DA  6F85               	movwf	(MSC_CleanBufferInt@i+1)& (0+255),b
  6214  0012DC  0E00               	movlw	0
  6215  0012DE  6F84               	movwf	MSC_CleanBufferInt@i& (0+255),b
  6216                           
  6217                           ;MISC.c: 169: for(i=0; i<count;i++)
  6218  0012E0  0E00               	movlw	0
  6219  0012E2  0101               	movlb	1	; () banked
  6220  0012E4  6F85               	movwf	(MSC_CleanBufferInt@i+1)& (0+255),b
  6221  0012E6  0E00               	movlw	0
  6222  0012E8  6F84               	movwf	MSC_CleanBufferInt@i& (0+255),b
  6223  0012EA  D015               	goto	l7462
  6224  0012EC                     l7458:
  6225                           
  6226                           ; BSR set to: 1
  6227                           ;MISC.c: 170: {
  6228                           ;MISC.c: 171: data[i]= 0;
  6229  0012EC  90D8               	bcf	status,0,c
  6230  0012EE  0101               	movlb	1	; () banked
  6231  0012F0  3584               	rlcf	MSC_CleanBufferInt@i& (0+255),w,b
  6232  0012F2  6ED9               	movwf	fsr2l,c
  6233  0012F4  0101               	movlb	1	; () banked
  6234  0012F6  3585               	rlcf	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  6235  0012F8  6EDA               	movwf	fsr2h,c
  6236  0012FA  0101               	movlb	1	; () banked
  6237  0012FC  5180               	movf	MSC_CleanBufferInt@data& (0+255),w,b
  6238  0012FE  26D9               	addwf	fsr2l,f,c
  6239  001300  0101               	movlb	1	; () banked
  6240  001302  5181               	movf	(MSC_CleanBufferInt@data+1)& (0+255),w,b
  6241  001304  22DA               	addwfc	fsr2h,f,c
  6242  001306  0E00               	movlw	0
  6243  001308  6EDE               	movwf	postinc2,c
  6244  00130A  0E00               	movlw	0
  6245  00130C  6EDD               	movwf	postdec2,c
  6246                           
  6247                           ; BSR set to: 1
  6248  00130E  0101               	movlb	1	; () banked
  6249  001310  4B84               	infsnz	MSC_CleanBufferInt@i& (0+255),f,b
  6250  001312  2B85               	incf	(MSC_CleanBufferInt@i+1)& (0+255),f,b
  6251  001314  D000               	goto	l7462
  6252  001316                     l7462:
  6253                           
  6254                           ; BSR set to: 1
  6255  001316  0101               	movlb	1	; () banked
  6256  001318  5182               	movf	MSC_CleanBufferInt@count& (0+255),w,b
  6257  00131A  0101               	movlb	1	; () banked
  6258  00131C  5D84               	subwf	MSC_CleanBufferInt@i& (0+255),w,b
  6259  00131E  0101               	movlb	1	; () banked
  6260  001320  5183               	movf	(MSC_CleanBufferInt@count+1)& (0+255),w,b
  6261  001322  0101               	movlb	1	; () banked
  6262  001324  5985               	subwfb	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  6263  001326  A0D8               	btfss	status,0,c
  6264  001328  D7E1               	goto	l7458
  6265                           
  6266                           ; BSR set to: 1
  6267                           
  6268                           ; BSR set to: 1
  6269  00132A  0012               	return		;funcret
  6270  00132C                     __end_of_MSC_CleanBufferInt:
  6271                           	opt stack 0
  6272                           tblptru	equ	0xFF8
  6273                           tblptrh	equ	0xFF7
  6274                           tblptrl	equ	0xFF6
  6275                           tablat	equ	0xFF5
  6276                           prodh	equ	0xFF4
  6277                           prodl	equ	0xFF3
  6278                           intcon	equ	0xFF2
  6279                           intcon2	equ	0xFF1
  6280                           intcon3	equ	0xFF0
  6281                           postinc0	equ	0xFEE
  6282                           wreg	equ	0xFE8
  6283                           postdec1	equ	0xFE5
  6284                           fsr1h	equ	0xFE2
  6285                           fsr1l	equ	0xFE1
  6286                           postinc2	equ	0xFDE
  6287                           postdec2	equ	0xFDD
  6288                           fsr2h	equ	0xFDA
  6289                           fsr2l	equ	0xFD9
  6290                           status	equ	0xFD8
  6291                           
  6292 ;; *************** function _InitFlash *****************
  6293 ;; Defined at:
  6294 ;;		line 74 in file "FLASH.c"
  6295 ;; Parameters:    Size  Location     Type
  6296 ;;		None
  6297 ;; Auto vars:     Size  Location     Type
  6298 ;;		None
  6299 ;; Return value:  Size  Location     Type
  6300 ;;		None               void
  6301 ;; Registers used:
  6302 ;;		None
  6303 ;; Tracked objects:
  6304 ;;		On entry : 0/0
  6305 ;;		On exit  : 0/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6308 ;;      Params:         0       0       0       0       0
  6309 ;;      Locals:         0       0       0       0       0
  6310 ;;      Temps:          0       0       0       0       0
  6311 ;;      Totals:         0       0       0       0       0
  6312 ;;Total ram usage:        0 bytes
  6313 ;; Hardware stack levels used:    1
  6314 ;; Hardware stack levels required when called:   12
  6315 ;; This function calls:
  6316 ;;		Nothing
  6317 ;; This function is called by:
  6318 ;;		_Init_System
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text39
  6323  001D68                     __ptext39:
  6324                           	opt stack 0
  6325  001D68                     _InitFlash:
  6326                           	opt stack 17
  6327                           
  6328                           ;FLASH.c: 77: __nop();
  6329                           
  6330                           ; BSR set to: 1
  6331                           ;incstack = 0
  6332  001D68  F000               	nop	
  6333  001D6A  0012               	return		;funcret
  6334  001D6C                     __end_of_InitFlash:
  6335                           	opt stack 0
  6336                           tblptru	equ	0xFF8
  6337                           tblptrh	equ	0xFF7
  6338                           tblptrl	equ	0xFF6
  6339                           tablat	equ	0xFF5
  6340                           prodh	equ	0xFF4
  6341                           prodl	equ	0xFF3
  6342                           intcon	equ	0xFF2
  6343                           intcon2	equ	0xFF1
  6344                           intcon3	equ	0xFF0
  6345                           postinc0	equ	0xFEE
  6346                           wreg	equ	0xFE8
  6347                           postdec1	equ	0xFE5
  6348                           fsr1h	equ	0xFE2
  6349                           fsr1l	equ	0xFE1
  6350                           postinc2	equ	0xFDE
  6351                           postdec2	equ	0xFDD
  6352                           fsr2h	equ	0xFDA
  6353                           fsr2l	equ	0xFD9
  6354                           status	equ	0xFD8
  6355                           
  6356 ;; *************** function _InitButton *****************
  6357 ;; Defined at:
  6358 ;;		line 78 in file "BUTTON.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;		None
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;		None
  6363 ;; Return value:  Size  Location     Type
  6364 ;;		None               void
  6365 ;; Registers used:
  6366 ;;		wreg, status,2, status,0, cstack
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6372 ;;      Params:         0       0       0       0       0
  6373 ;;      Locals:         0       0       0       0       0
  6374 ;;      Temps:          0       0       0       0       0
  6375 ;;      Totals:         0       0       0       0       0
  6376 ;;Total ram usage:        0 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:   13
  6379 ;; This function calls:
  6380 ;;		_BUT_IR_PinChangeInt
  6381 ;;		_BUT_ReadButton
  6382 ;; This function is called by:
  6383 ;;		_Init_System
  6384 ;; This function uses a non-reentrant model
  6385 ;;
  6386                           
  6387                           	psect	text40
  6388  001CD0                     __ptext40:
  6389                           	opt stack 0
  6390  001CD0                     _InitButton:
  6391                           	opt stack 16
  6392                           
  6393                           ;BUTTON.c: 81: INTCON2bits.RBIP = 0;
  6394                           
  6395                           ;incstack = 0
  6396  001CD0  90F1               	bcf	intcon2,0,c	;volatile
  6397                           
  6398                           ;BUTTON.c: 82: BUT_ReadButton();
  6399  001CD2  ECCD  F00A         	call	_BUT_ReadButton	;wreg free
  6400                           
  6401                           ;BUTTON.c: 83: BUT_IR_PinChangeInt(1);
  6402  001CD6  0E01               	movlw	1
  6403  001CD8  EC8F  F00D         	call	_BUT_IR_PinChangeInt
  6404  001CDC  0012               	return		;funcret
  6405  001CDE                     __end_of_InitButton:
  6406                           	opt stack 0
  6407                           tblptru	equ	0xFF8
  6408                           tblptrh	equ	0xFF7
  6409                           tblptrl	equ	0xFF6
  6410                           tablat	equ	0xFF5
  6411                           prodh	equ	0xFF4
  6412                           prodl	equ	0xFF3
  6413                           intcon	equ	0xFF2
  6414                           intcon2	equ	0xFF1
  6415                           intcon3	equ	0xFF0
  6416                           postinc0	equ	0xFEE
  6417                           wreg	equ	0xFE8
  6418                           postdec1	equ	0xFE5
  6419                           fsr1h	equ	0xFE2
  6420                           fsr1l	equ	0xFE1
  6421                           postinc2	equ	0xFDE
  6422                           postdec2	equ	0xFDD
  6423                           fsr2h	equ	0xFDA
  6424                           fsr2l	equ	0xFD9
  6425                           status	equ	0xFD8
  6426                           
  6427 ;; *************** function _BUT_ReadButton *****************
  6428 ;; Defined at:
  6429 ;;		line 92 in file "BUTTON.c"
  6430 ;; Parameters:    Size  Location     Type
  6431 ;;		None
  6432 ;; Auto vars:     Size  Location     Type
  6433 ;;  value           1    0[BANK1 ] unsigned char 
  6434 ;; Return value:  Size  Location     Type
  6435 ;;                  1    wreg      unsigned char 
  6436 ;; Registers used:
  6437 ;;		wreg, status,2, status,0
  6438 ;; Tracked objects:
  6439 ;;		On entry : 0/0
  6440 ;;		On exit  : 0/0
  6441 ;;		Unchanged: 0/0
  6442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6443 ;;      Params:         0       0       0       0       0
  6444 ;;      Locals:         0       0       1       0       0
  6445 ;;      Temps:          0       0       0       0       0
  6446 ;;      Totals:         0       0       1       0       0
  6447 ;;Total ram usage:        1 bytes
  6448 ;; Hardware stack levels used:    1
  6449 ;; Hardware stack levels required when called:   12
  6450 ;; This function calls:
  6451 ;;		Nothing
  6452 ;; This function is called by:
  6453 ;;		_Init_System
  6454 ;;		_InitButton
  6455 ;; This function uses a non-reentrant model
  6456 ;;
  6457                           
  6458                           	psect	text41
  6459  00159A                     __ptext41:
  6460                           	opt stack 0
  6461  00159A                     _BUT_ReadButton:
  6462                           	opt stack 16
  6463                           
  6464                           ;BUTTON.c: 94: unsigned char value = PORTB;
  6465                           
  6466                           ;incstack = 0
  6467  00159A  CF81 F180          	movff	3969,BUT_ReadButton@value	;volatile
  6468                           
  6469                           ;BUTTON.c: 95: if((value & 0x20) == 0)
  6470  00159E  0101               	movlb	1	; () banked
  6471  0015A0  BB80               	btfsc	BUT_ReadButton@value& (0+255),5,b
  6472  0015A2  D00B               	goto	l7418
  6473                           
  6474                           ; BSR set to: 1
  6475                           ;BUTTON.c: 96: {
  6476                           ;BUTTON.c: 98: if(ButtonValue_prev == 0)
  6477  0015A4  0100               	movlb	0	; () banked
  6478  0015A6  51C2               	movf	_ButtonValue_prev& (0+255),w,b
  6479  0015A8  A4D8               	btfss	status,2,c
  6480  0015AA  D002               	goto	l981
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;BUTTON.c: 99: {
  6484                           ;BUTTON.c: 100: ButtonChange = 1;
  6485  0015AC  0E01               	movlw	1
  6486  0015AE  6E59               	movwf	_ButtonChange,c
  6487  0015B0                     l981:
  6488                           
  6489                           ; BSR set to: 0
  6490                           ;BUTTON.c: 101: }
  6491                           ;BUTTON.c: 102: ButtonValue_prev = 1;
  6492  0015B0  0E01               	movlw	1
  6493  0015B2  0100               	movlb	0	; () banked
  6494  0015B4  6FC2               	movwf	_ButtonValue_prev& (0+255),b
  6495                           
  6496                           ; BSR set to: 0
  6497                           ;BUTTON.c: 103: return 1;
  6498  0015B6  0E01               	movlw	1
  6499                           
  6500                           ; BSR set to: 0
  6501  0015B8  0012               	return	
  6502  0015BA                     l7418:
  6503                           
  6504                           ;BUTTON.c: 104: }
  6505                           ;BUTTON.c: 107: if(ButtonValue_prev == 1)
  6506  0015BA  0100               	movlb	0	; () banked
  6507  0015BC  05C2               	decf	_ButtonValue_prev& (0+255),w,b
  6508  0015BE  A4D8               	btfss	status,2,c
  6509  0015C0  D002               	goto	l983
  6510                           
  6511                           ; BSR set to: 0
  6512                           ;BUTTON.c: 108: {
  6513                           ;BUTTON.c: 109: ButtonChange = 1;
  6514  0015C2  0E01               	movlw	1
  6515  0015C4  6E59               	movwf	_ButtonChange,c
  6516  0015C6                     l983:
  6517                           
  6518                           ; BSR set to: 0
  6519                           ;BUTTON.c: 110: }
  6520                           ;BUTTON.c: 111: ButtonValue_prev = 0;
  6521  0015C6  0E00               	movlw	0
  6522  0015C8  0100               	movlb	0	; () banked
  6523  0015CA  6FC2               	movwf	_ButtonValue_prev& (0+255),b
  6524                           
  6525                           ; BSR set to: 0
  6526                           ;BUTTON.c: 112: return 0;
  6527  0015CC  0E00               	movlw	0
  6528  0015CE  0012               	return	
  6529                           
  6530                           ; BSR set to: 0
  6531                           
  6532                           ; BSR set to: 0
  6533  0015D0  0012               	return		;funcret
  6534  0015D2                     __end_of_BUT_ReadButton:
  6535                           	opt stack 0
  6536                           tblptru	equ	0xFF8
  6537                           tblptrh	equ	0xFF7
  6538                           tblptrl	equ	0xFF6
  6539                           tablat	equ	0xFF5
  6540                           prodh	equ	0xFF4
  6541                           prodl	equ	0xFF3
  6542                           intcon	equ	0xFF2
  6543                           intcon2	equ	0xFF1
  6544                           intcon3	equ	0xFF0
  6545                           postinc0	equ	0xFEE
  6546                           wreg	equ	0xFE8
  6547                           postdec1	equ	0xFE5
  6548                           fsr1h	equ	0xFE2
  6549                           fsr1l	equ	0xFE1
  6550                           postinc2	equ	0xFDE
  6551                           postdec2	equ	0xFDD
  6552                           fsr2h	equ	0xFDA
  6553                           fsr2l	equ	0xFD9
  6554                           status	equ	0xFD8
  6555                           
  6556 ;; *************** function _BUT_IR_PinChangeInt *****************
  6557 ;; Defined at:
  6558 ;;		line 55 in file "BUTTON.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;  state           1    wreg     unsigned char 
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;  state           1    0[BANK1 ] unsigned char 
  6563 ;; Return value:  Size  Location     Type
  6564 ;;		None               void
  6565 ;; Registers used:
  6566 ;;		wreg, status,2
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6572 ;;      Params:         0       0       0       0       0
  6573 ;;      Locals:         0       0       1       0       0
  6574 ;;      Temps:          0       0       0       0       0
  6575 ;;      Totals:         0       0       1       0       0
  6576 ;;Total ram usage:        1 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:   12
  6579 ;; This function calls:
  6580 ;;		Nothing
  6581 ;; This function is called by:
  6582 ;;		_InitButton
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           	psect	text42
  6587  001B1E                     __ptext42:
  6588                           	opt stack 0
  6589  001B1E                     _BUT_IR_PinChangeInt:
  6590                           	opt stack 16
  6591                           
  6592                           ; BSR set to: 0
  6593                           ;incstack = 0
  6594                           ;BUT_IR_PinChangeInt@state stored from wreg
  6595  001B1E  0101               	movlb	1	; () banked
  6596  001B20  6F80               	movwf	BUT_IR_PinChangeInt@state& (0+255),b
  6597                           
  6598                           ; BSR set to: 1
  6599                           ;BUTTON.c: 57: if(state)
  6600  001B22  0101               	movlb	1	; () banked
  6601  001B24  5180               	movf	BUT_IR_PinChangeInt@state& (0+255),w,b
  6602  001B26  0101               	movlb	1	; () banked
  6603  001B28  B4D8               	btfsc	status,2,c
  6604  001B2A  D002               	goto	l972
  6605                           
  6606                           ; BSR set to: 1
  6607                           ;BUTTON.c: 58: {
  6608                           ;BUTTON.c: 60: INTCONbits.RBIE = 1;
  6609  001B2C  86F2               	bsf	intcon,3,c	;volatile
  6610                           
  6611                           ;BUTTON.c: 61: }
  6612  001B2E  0012               	return	
  6613  001B30                     l972:
  6614                           
  6615                           ; BSR set to: 1
  6616                           ;BUTTON.c: 62: else
  6617                           ;BUTTON.c: 63: {
  6618                           ;BUTTON.c: 65: INTCONbits.RBIE = 0;
  6619  001B30  96F2               	bcf	intcon,3,c	;volatile
  6620  001B32  0012               	return	
  6621                           
  6622                           ; BSR set to: 1
  6623                           
  6624                           ; BSR set to: 1
  6625  001B34  0012               	return		;funcret
  6626  001B36                     __end_of_BUT_IR_PinChangeInt:
  6627                           	opt stack 0
  6628                           tblptru	equ	0xFF8
  6629                           tblptrh	equ	0xFF7
  6630                           tblptrl	equ	0xFF6
  6631                           tablat	equ	0xFF5
  6632                           prodh	equ	0xFF4
  6633                           prodl	equ	0xFF3
  6634                           intcon	equ	0xFF2
  6635                           intcon2	equ	0xFF1
  6636                           intcon3	equ	0xFF0
  6637                           postinc0	equ	0xFEE
  6638                           wreg	equ	0xFE8
  6639                           postdec1	equ	0xFE5
  6640                           fsr1h	equ	0xFE2
  6641                           fsr1l	equ	0xFE1
  6642                           postinc2	equ	0xFDE
  6643                           postdec2	equ	0xFDD
  6644                           fsr2h	equ	0xFDA
  6645                           fsr2l	equ	0xFD9
  6646                           status	equ	0xFD8
  6647                           
  6648 ;; *************** function _InitADC *****************
  6649 ;; Defined at:
  6650 ;;		line 122 in file "ADC.c"
  6651 ;; Parameters:    Size  Location     Type
  6652 ;;		None
  6653 ;; Auto vars:     Size  Location     Type
  6654 ;;		None
  6655 ;; Return value:  Size  Location     Type
  6656 ;;		None               void
  6657 ;; Registers used:
  6658 ;;		wreg, status,2, status,0, cstack
  6659 ;; Tracked objects:
  6660 ;;		On entry : 0/0
  6661 ;;		On exit  : 0/0
  6662 ;;		Unchanged: 0/0
  6663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6664 ;;      Params:         0       0       0       0       0
  6665 ;;      Locals:         0       0       0       0       0
  6666 ;;      Temps:          0       0       0       0       0
  6667 ;;      Totals:         0       0       0       0       0
  6668 ;;Total ram usage:        0 bytes
  6669 ;; Hardware stack levels used:    1
  6670 ;; Hardware stack levels required when called:   13
  6671 ;; This function calls:
  6672 ;;		_ADC_ChangeChannel
  6673 ;;		_ADC_ConversionInt
  6674 ;;		_ADC_Module
  6675 ;; This function is called by:
  6676 ;;		_Init_System
  6677 ;; This function uses a non-reentrant model
  6678 ;;
  6679                           
  6680                           	psect	text43
  6681  001864                     __ptext43:
  6682                           	opt stack 0
  6683  001864                     _InitADC:
  6684                           	opt stack 16
  6685                           
  6686                           ;ADC.c: 124: ADCON1bits.VCFG1 = 0;
  6687                           
  6688                           ; BSR set to: 1
  6689                           ;incstack = 0
  6690  001864  9AC1               	bcf	4033,5,c	;volatile
  6691                           
  6692                           ;ADC.c: 125: ADCON1bits.VCFG0 = 0;
  6693  001866  98C1               	bcf	4033,4,c	;volatile
  6694                           
  6695                           ;ADC.c: 126: ADCON2bits.ADFM = 1;
  6696  001868  8EC0               	bsf	4032,7,c	;volatile
  6697                           
  6698                           ;ADC.c: 127: ADCON2bits.ACQT = 0b111;
  6699  00186A  86C0               	bsf	4032,3,c	;volatile
  6700  00186C  88C0               	bsf	4032,4,c	;volatile
  6701  00186E  8AC0               	bsf	4032,5,c	;volatile
  6702                           
  6703                           ;ADC.c: 128: ADCON2bits.ADCS = 0b110;
  6704  001870  50C0               	movf	4032,w,c	;volatile
  6705  001872  0BF8               	andlw	-8
  6706  001874  0906               	iorlw	6
  6707  001876  6EC0               	movwf	4032,c	;volatile
  6708                           
  6709                           ;ADC.c: 129: IPR1bits.ADIP = 0;
  6710  001878  9C9F               	bcf	3999,6,c	;volatile
  6711                           
  6712                           ;ADC.c: 130: ADC_ChangeChannel();
  6713  00187A  EC46  F00C         	call	_ADC_ChangeChannel	;wreg free
  6714                           
  6715                           ;ADC.c: 131: ADC_ConversionInt(1);
  6716  00187E  0E01               	movlw	1
  6717  001880  ECA7  F00D         	call	_ADC_ConversionInt
  6718                           
  6719                           ;ADC.c: 132: ADC_Module(1);
  6720  001884  0E01               	movlw	1
  6721  001886  EC9B  F00D         	call	_ADC_Module
  6722  00188A  0012               	return		;funcret
  6723  00188C                     __end_of_InitADC:
  6724                           	opt stack 0
  6725                           tblptru	equ	0xFF8
  6726                           tblptrh	equ	0xFF7
  6727                           tblptrl	equ	0xFF6
  6728                           tablat	equ	0xFF5
  6729                           prodh	equ	0xFF4
  6730                           prodl	equ	0xFF3
  6731                           intcon	equ	0xFF2
  6732                           intcon2	equ	0xFF1
  6733                           intcon3	equ	0xFF0
  6734                           postinc0	equ	0xFEE
  6735                           wreg	equ	0xFE8
  6736                           postdec1	equ	0xFE5
  6737                           fsr1h	equ	0xFE2
  6738                           fsr1l	equ	0xFE1
  6739                           postinc2	equ	0xFDE
  6740                           postdec2	equ	0xFDD
  6741                           fsr2h	equ	0xFDA
  6742                           fsr2l	equ	0xFD9
  6743                           status	equ	0xFD8
  6744                           
  6745 ;; *************** function _ADC_Module *****************
  6746 ;; Defined at:
  6747 ;;		line 56 in file "ADC.c"
  6748 ;; Parameters:    Size  Location     Type
  6749 ;;  state           1    wreg     unsigned char 
  6750 ;; Auto vars:     Size  Location     Type
  6751 ;;  state           1    0[BANK1 ] unsigned char 
  6752 ;; Return value:  Size  Location     Type
  6753 ;;		None               void
  6754 ;; Registers used:
  6755 ;;		wreg, status,2
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6761 ;;      Params:         0       0       0       0       0
  6762 ;;      Locals:         0       0       1       0       0
  6763 ;;      Temps:          0       0       0       0       0
  6764 ;;      Totals:         0       0       1       0       0
  6765 ;;Total ram usage:        1 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:   12
  6768 ;; This function calls:
  6769 ;;		Nothing
  6770 ;; This function is called by:
  6771 ;;		_InitADC
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           	psect	text44
  6776  001B36                     __ptext44:
  6777                           	opt stack 0
  6778  001B36                     _ADC_Module:
  6779                           	opt stack 16
  6780                           
  6781                           ;incstack = 0
  6782                           ;ADC_Module@state stored from wreg
  6783  001B36  0101               	movlb	1	; () banked
  6784  001B38  6F80               	movwf	ADC_Module@state& (0+255),b
  6785                           
  6786                           ; BSR set to: 1
  6787                           ;ADC.c: 58: if(state)
  6788  001B3A  0101               	movlb	1	; () banked
  6789  001B3C  5180               	movf	ADC_Module@state& (0+255),w,b
  6790  001B3E  0101               	movlb	1	; () banked
  6791  001B40  B4D8               	btfsc	status,2,c
  6792  001B42  D002               	goto	l1266
  6793                           
  6794                           ; BSR set to: 1
  6795                           ;ADC.c: 59: {
  6796                           ;ADC.c: 61: ADCON0bits.ADON = 1;
  6797  001B44  80C2               	bsf	4034,0,c	;volatile
  6798                           
  6799                           ;ADC.c: 62: }
  6800  001B46  0012               	return	
  6801  001B48                     l1266:
  6802                           
  6803                           ; BSR set to: 1
  6804                           ;ADC.c: 63: else
  6805                           ;ADC.c: 64: {
  6806                           ;ADC.c: 66: ADCON0bits.ADON = 0;
  6807  001B48  90C2               	bcf	4034,0,c	;volatile
  6808  001B4A  0012               	return	
  6809                           
  6810                           ; BSR set to: 1
  6811                           
  6812                           ; BSR set to: 1
  6813  001B4C  0012               	return		;funcret
  6814  001B4E                     __end_of_ADC_Module:
  6815                           	opt stack 0
  6816                           tblptru	equ	0xFF8
  6817                           tblptrh	equ	0xFF7
  6818                           tblptrl	equ	0xFF6
  6819                           tablat	equ	0xFF5
  6820                           prodh	equ	0xFF4
  6821                           prodl	equ	0xFF3
  6822                           intcon	equ	0xFF2
  6823                           intcon2	equ	0xFF1
  6824                           intcon3	equ	0xFF0
  6825                           postinc0	equ	0xFEE
  6826                           wreg	equ	0xFE8
  6827                           postdec1	equ	0xFE5
  6828                           fsr1h	equ	0xFE2
  6829                           fsr1l	equ	0xFE1
  6830                           postinc2	equ	0xFDE
  6831                           postdec2	equ	0xFDD
  6832                           fsr2h	equ	0xFDA
  6833                           fsr2l	equ	0xFD9
  6834                           status	equ	0xFD8
  6835                           
  6836 ;; *************** function _ADC_ConversionInt *****************
  6837 ;; Defined at:
  6838 ;;		line 99 in file "ADC.c"
  6839 ;; Parameters:    Size  Location     Type
  6840 ;;  state           1    wreg     unsigned char 
  6841 ;; Auto vars:     Size  Location     Type
  6842 ;;  state           1    0[BANK1 ] unsigned char 
  6843 ;; Return value:  Size  Location     Type
  6844 ;;		None               void
  6845 ;; Registers used:
  6846 ;;		wreg, status,2
  6847 ;; Tracked objects:
  6848 ;;		On entry : 0/0
  6849 ;;		On exit  : 0/0
  6850 ;;		Unchanged: 0/0
  6851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6852 ;;      Params:         0       0       0       0       0
  6853 ;;      Locals:         0       0       1       0       0
  6854 ;;      Temps:          0       0       0       0       0
  6855 ;;      Totals:         0       0       1       0       0
  6856 ;;Total ram usage:        1 bytes
  6857 ;; Hardware stack levels used:    1
  6858 ;; Hardware stack levels required when called:   12
  6859 ;; This function calls:
  6860 ;;		Nothing
  6861 ;; This function is called by:
  6862 ;;		_InitADC
  6863 ;; This function uses a non-reentrant model
  6864 ;;
  6865                           
  6866                           	psect	text45
  6867  001B4E                     __ptext45:
  6868                           	opt stack 0
  6869  001B4E                     _ADC_ConversionInt:
  6870                           	opt stack 16
  6871                           
  6872                           ; BSR set to: 1
  6873                           ;incstack = 0
  6874                           ;ADC_ConversionInt@state stored from wreg
  6875  001B4E  0101               	movlb	1	; () banked
  6876  001B50  6F80               	movwf	ADC_ConversionInt@state& (0+255),b
  6877                           
  6878                           ; BSR set to: 1
  6879                           ;ADC.c: 101: if(state)
  6880  001B52  0101               	movlb	1	; () banked
  6881  001B54  5180               	movf	ADC_ConversionInt@state& (0+255),w,b
  6882  001B56  0101               	movlb	1	; () banked
  6883  001B58  B4D8               	btfsc	status,2,c
  6884  001B5A  D002               	goto	l1278
  6885                           
  6886                           ; BSR set to: 1
  6887                           ;ADC.c: 102: {
  6888                           ;ADC.c: 104: PIE1bits.ADIE = 1;
  6889  001B5C  8C9D               	bsf	3997,6,c	;volatile
  6890                           
  6891                           ;ADC.c: 105: }
  6892  001B5E  0012               	return	
  6893  001B60                     l1278:
  6894                           
  6895                           ; BSR set to: 1
  6896                           ;ADC.c: 106: else
  6897                           ;ADC.c: 107: {
  6898                           ;ADC.c: 109: PIE1bits.ADIE = 0;
  6899  001B60  9C9D               	bcf	3997,6,c	;volatile
  6900  001B62  0012               	return	
  6901                           
  6902                           ; BSR set to: 1
  6903                           
  6904                           ; BSR set to: 1
  6905  001B64  0012               	return		;funcret
  6906  001B66                     __end_of_ADC_ConversionInt:
  6907                           	opt stack 0
  6908                           tblptru	equ	0xFF8
  6909                           tblptrh	equ	0xFF7
  6910                           tblptrl	equ	0xFF6
  6911                           tablat	equ	0xFF5
  6912                           prodh	equ	0xFF4
  6913                           prodl	equ	0xFF3
  6914                           intcon	equ	0xFF2
  6915                           intcon2	equ	0xFF1
  6916                           intcon3	equ	0xFF0
  6917                           postinc0	equ	0xFEE
  6918                           wreg	equ	0xFE8
  6919                           postdec1	equ	0xFE5
  6920                           fsr1h	equ	0xFE2
  6921                           fsr1l	equ	0xFE1
  6922                           postinc2	equ	0xFDE
  6923                           postdec2	equ	0xFDD
  6924                           fsr2h	equ	0xFDA
  6925                           fsr2l	equ	0xFD9
  6926                           status	equ	0xFD8
  6927                           
  6928 ;; *************** function _ADC_ChangeChannel *****************
  6929 ;; Defined at:
  6930 ;;		line 166 in file "ADC.c"
  6931 ;; Parameters:    Size  Location     Type
  6932 ;;		None
  6933 ;; Auto vars:     Size  Location     Type
  6934 ;;		None
  6935 ;; Return value:  Size  Location     Type
  6936 ;;		None               void
  6937 ;; Registers used:
  6938 ;;		wreg, status,2, status,0
  6939 ;; Tracked objects:
  6940 ;;		On entry : 0/0
  6941 ;;		On exit  : 0/0
  6942 ;;		Unchanged: 0/0
  6943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6944 ;;      Params:         0       0       0       0       0
  6945 ;;      Locals:         0       0       0       0       0
  6946 ;;      Temps:          0       0       0       0       0
  6947 ;;      Totals:         0       0       0       0       0
  6948 ;;Total ram usage:        0 bytes
  6949 ;; Hardware stack levels used:    1
  6950 ;; Hardware stack levels required when called:   12
  6951 ;; This function calls:
  6952 ;;		Nothing
  6953 ;; This function is called by:
  6954 ;;		_InitADC
  6955 ;; This function uses a non-reentrant model
  6956 ;;
  6957                           
  6958                           	psect	text46
  6959  00188C                     __ptext46:
  6960                           	opt stack 0
  6961  00188C                     _ADC_ChangeChannel:
  6962                           	opt stack 16
  6963                           
  6964                           ;ADC.c: 168: if(ADC_CurrentSource == 10)
  6965                           
  6966                           ; BSR set to: 1
  6967                           ;incstack = 0
  6968  00188C  0E0A               	movlw	10
  6969  00188E  185F               	xorwf	_ADC_CurrentSource,w,c
  6970  001890  A4D8               	btfss	status,2,c
  6971  001892  D007               	goto	l7528
  6972                           
  6973                           ;ADC.c: 169: {
  6974                           ;ADC.c: 170: ADC_CurrentSource = 11;
  6975  001894  0E0B               	movlw	11
  6976  001896  6E5F               	movwf	_ADC_CurrentSource,c
  6977                           
  6978                           ;ADC.c: 171: ADCON0bits.CHS = 1;
  6979  001898  50C2               	movf	4034,w,c	;volatile
  6980  00189A  0BC3               	andlw	-61
  6981  00189C  0904               	iorlw	4
  6982  00189E  6EC2               	movwf	4034,c	;volatile
  6983                           
  6984                           ;ADC.c: 172: }
  6985  0018A0  0012               	return	
  6986  0018A2                     l7528:
  6987                           
  6988                           ;ADC.c: 173: else
  6989                           ;ADC.c: 174: {
  6990                           ;ADC.c: 175: ADC_CurrentSource = 10;
  6991  0018A2  0E0A               	movlw	10
  6992  0018A4  6E5F               	movwf	_ADC_CurrentSource,c
  6993                           
  6994                           ;ADC.c: 176: ADCON0bits.CHS = 0;
  6995  0018A6  94C2               	bcf	4034,2,c	;volatile
  6996  0018A8  96C2               	bcf	4034,3,c	;volatile
  6997  0018AA  98C2               	bcf	4034,4,c	;volatile
  6998  0018AC  9AC2               	bcf	4034,5,c	;volatile
  6999  0018AE  0012               	return	
  7000  0018B0  0012               	return		;funcret
  7001  0018B2                     __end_of_ADC_ChangeChannel:
  7002                           	opt stack 0
  7003                           tblptru	equ	0xFF8
  7004                           tblptrh	equ	0xFF7
  7005                           tblptrl	equ	0xFF6
  7006                           tablat	equ	0xFF5
  7007                           prodh	equ	0xFF4
  7008                           prodl	equ	0xFF3
  7009                           intcon	equ	0xFF2
  7010                           intcon2	equ	0xFF1
  7011                           intcon3	equ	0xFF0
  7012                           postinc0	equ	0xFEE
  7013                           wreg	equ	0xFE8
  7014                           postdec1	equ	0xFE5
  7015                           fsr1h	equ	0xFE2
  7016                           fsr1l	equ	0xFE1
  7017                           postinc2	equ	0xFDE
  7018                           postdec2	equ	0xFDD
  7019                           fsr2h	equ	0xFDA
  7020                           fsr2l	equ	0xFD9
  7021                           status	equ	0xFD8
  7022                           
  7023 ;; *************** function _IR_ReadReceiver *****************
  7024 ;; Defined at:
  7025 ;;		line 80 in file "IR.c"
  7026 ;; Parameters:    Size  Location     Type
  7027 ;;		None
  7028 ;; Auto vars:     Size  Location     Type
  7029 ;;  value           1    0[BANK1 ] unsigned char 
  7030 ;; Return value:  Size  Location     Type
  7031 ;;                  1    wreg      unsigned char 
  7032 ;; Registers used:
  7033 ;;		wreg, status,2, status,0
  7034 ;; Tracked objects:
  7035 ;;		On entry : 0/0
  7036 ;;		On exit  : 0/0
  7037 ;;		Unchanged: 0/0
  7038 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7039 ;;      Params:         0       0       0       0       0
  7040 ;;      Locals:         0       0       1       0       0
  7041 ;;      Temps:          0       0       0       0       0
  7042 ;;      Totals:         0       0       1       0       0
  7043 ;;Total ram usage:        1 bytes
  7044 ;; Hardware stack levels used:    1
  7045 ;; Hardware stack levels required when called:   12
  7046 ;; This function calls:
  7047 ;;		Nothing
  7048 ;; This function is called by:
  7049 ;;		_Init_System
  7050 ;; This function uses a non-reentrant model
  7051 ;;
  7052                           
  7053                           	psect	text47
  7054  0015D2                     __ptext47:
  7055                           	opt stack 0
  7056  0015D2                     _IR_ReadReceiver:
  7057                           	opt stack 17
  7058                           
  7059                           ;IR.c: 82: unsigned char value = PORTB;
  7060                           
  7061                           ;incstack = 0
  7062  0015D2  CF81 F180          	movff	3969,IR_ReadReceiver@value	;volatile
  7063                           
  7064                           ;IR.c: 84: if(value & 0x10)
  7065  0015D6  0101               	movlb	1	; () banked
  7066  0015D8  A980               	btfss	IR_ReadReceiver@value& (0+255),4,b
  7067  0015DA  D00B               	goto	l7588
  7068                           
  7069                           ; BSR set to: 1
  7070                           ;IR.c: 85: {
  7071                           ;IR.c: 86: if(IRValue_prev == 0)
  7072  0015DC  0100               	movlb	0	; () banked
  7073  0015DE  51C6               	movf	_IRValue_prev& (0+255),w,b
  7074  0015E0  A4D8               	btfss	status,2,c
  7075  0015E2  D002               	goto	l519
  7076                           
  7077                           ; BSR set to: 0
  7078                           ;IR.c: 87: {
  7079                           ;IR.c: 88: IRChange = 1;
  7080  0015E4  0E01               	movlw	1
  7081  0015E6  6E5A               	movwf	_IRChange,c
  7082  0015E8                     l519:
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;IR.c: 89: }
  7086                           ;IR.c: 90: IRValue_prev = 1;
  7087  0015E8  0E01               	movlw	1
  7088  0015EA  0100               	movlb	0	; () banked
  7089  0015EC  6FC6               	movwf	_IRValue_prev& (0+255),b
  7090                           
  7091                           ; BSR set to: 0
  7092                           ;IR.c: 91: return 1;
  7093  0015EE  0E01               	movlw	1
  7094                           
  7095                           ; BSR set to: 0
  7096  0015F0  0012               	return	
  7097  0015F2                     l7588:
  7098                           
  7099                           ;IR.c: 92: }
  7100                           ;IR.c: 94: if(IRValue_prev == 1)
  7101  0015F2  0100               	movlb	0	; () banked
  7102  0015F4  05C6               	decf	_IRValue_prev& (0+255),w,b
  7103  0015F6  A4D8               	btfss	status,2,c
  7104  0015F8  D002               	goto	l521
  7105                           
  7106                           ; BSR set to: 0
  7107                           ;IR.c: 95: {
  7108                           ;IR.c: 96: IRChange = 1;
  7109  0015FA  0E01               	movlw	1
  7110  0015FC  6E5A               	movwf	_IRChange,c
  7111  0015FE                     l521:
  7112                           
  7113                           ; BSR set to: 0
  7114                           ;IR.c: 97: }
  7115                           ;IR.c: 98: IRValue_prev = 0;
  7116  0015FE  0E00               	movlw	0
  7117  001600  0100               	movlb	0	; () banked
  7118  001602  6FC6               	movwf	_IRValue_prev& (0+255),b
  7119                           
  7120                           ; BSR set to: 0
  7121                           ;IR.c: 99: return 0;
  7122  001604  0E00               	movlw	0
  7123  001606  0012               	return	
  7124                           
  7125                           ; BSR set to: 0
  7126                           
  7127                           ; BSR set to: 0
  7128  001608  0012               	return		;funcret
  7129  00160A                     __end_of_IR_ReadReceiver:
  7130                           	opt stack 0
  7131                           tblptru	equ	0xFF8
  7132                           tblptrh	equ	0xFF7
  7133                           tblptrl	equ	0xFF6
  7134                           tablat	equ	0xFF5
  7135                           prodh	equ	0xFF4
  7136                           prodl	equ	0xFF3
  7137                           intcon	equ	0xFF2
  7138                           intcon2	equ	0xFF1
  7139                           intcon3	equ	0xFF0
  7140                           postinc0	equ	0xFEE
  7141                           wreg	equ	0xFE8
  7142                           postdec1	equ	0xFE5
  7143                           fsr1h	equ	0xFE2
  7144                           fsr1l	equ	0xFE1
  7145                           postinc2	equ	0xFDE
  7146                           postdec2	equ	0xFDD
  7147                           fsr2h	equ	0xFDA
  7148                           fsr2l	equ	0xFD9
  7149                           status	equ	0xFD8
  7150                           
  7151 ;; *************** function _Init_App *****************
  7152 ;; Defined at:
  7153 ;;		line 72 in file "USER.c"
  7154 ;; Parameters:    Size  Location     Type
  7155 ;;		None
  7156 ;; Auto vars:     Size  Location     Type
  7157 ;;		None
  7158 ;; Return value:  Size  Location     Type
  7159 ;;		None               void
  7160 ;; Registers used:
  7161 ;;		wreg, status,2
  7162 ;; Tracked objects:
  7163 ;;		On entry : 0/0
  7164 ;;		On exit  : 0/0
  7165 ;;		Unchanged: 0/0
  7166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7167 ;;      Params:         0       0       0       0       0
  7168 ;;      Locals:         0       0       0       0       0
  7169 ;;      Temps:          0       0       0       0       0
  7170 ;;      Totals:         0       0       0       0       0
  7171 ;;Total ram usage:        0 bytes
  7172 ;; Hardware stack levels used:    1
  7173 ;; Hardware stack levels required when called:   12
  7174 ;; This function calls:
  7175 ;;		Nothing
  7176 ;; This function is called by:
  7177 ;;		_main
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           	psect	text48
  7182  001524                     __ptext48:
  7183                           	opt stack 0
  7184  001524                     _Init_App:
  7185                           	opt stack 18
  7186                           
  7187                           ;USER.c: 74: LATA = 0;
  7188                           
  7189                           ; BSR set to: 0
  7190                           ;incstack = 0
  7191  001524  0E00               	movlw	0
  7192  001526  6E89               	movwf	3977,c	;volatile
  7193                           
  7194                           ;USER.c: 75: LATB = 0;
  7195  001528  0E00               	movlw	0
  7196  00152A  6E8A               	movwf	3978,c	;volatile
  7197                           
  7198                           ;USER.c: 76: LATC = 0;
  7199  00152C  0E00               	movlw	0
  7200  00152E  6E8B               	movwf	3979,c	;volatile
  7201                           
  7202                           ;USER.c: 78: ADCON1bits.PCFG = 0b1101;
  7203  001530  50C1               	movf	4033,w,c	;volatile
  7204  001532  0BF0               	andlw	-16
  7205  001534  090D               	iorlw	13
  7206  001536  6EC1               	movwf	4033,c	;volatile
  7207                           
  7208                           ;USER.c: 81: TRISCbits.TRISC0 = 1;
  7209  001538  8094               	bsf	3988,0,c	;volatile
  7210                           
  7211                           ;USER.c: 82: TRISCbits.TRISC1 = 1;
  7212  00153A  8294               	bsf	3988,1,c	;volatile
  7213                           
  7214                           ;USER.c: 85: TRISAbits.TRISA0 = 1;
  7215  00153C  8092               	bsf	3986,0,c	;volatile
  7216                           
  7217                           ;USER.c: 89: TRISAbits.TRISA1 = 1;
  7218  00153E  8292               	bsf	3986,1,c	;volatile
  7219                           
  7220                           ;USER.c: 92: TRISAbits.TRISA2 = 0;
  7221  001540  9492               	bcf	3986,2,c	;volatile
  7222                           
  7223                           ;USER.c: 95: TRISAbits.TRISA5 = 0;
  7224  001542  9A92               	bcf	3986,5,c	;volatile
  7225                           
  7226                           ;USER.c: 98: TRISBbits.TRISB1 = 1;
  7227  001544  8293               	bsf	3987,1,c	;volatile
  7228                           
  7229                           ;USER.c: 99: TRISBbits.TRISB2 = 1;
  7230  001546  8493               	bsf	3987,2,c	;volatile
  7231                           
  7232                           ;USER.c: 103: TRISBbits.TRISB3 = 0;
  7233  001548  9693               	bcf	3987,3,c	;volatile
  7234                           
  7235                           ;USER.c: 106: TRISCbits.TRISC2 = 0;
  7236  00154A  9494               	bcf	3988,2,c	;volatile
  7237                           
  7238                           ;USER.c: 110: TRISCbits.TRISC3 = 1;
  7239  00154C  8694               	bsf	3988,3,c	;volatile
  7240                           
  7241                           ;USER.c: 113: TRISCbits.TRISC5 = 1;
  7242  00154E  8A94               	bsf	3988,5,c	;volatile
  7243                           
  7244                           ;USER.c: 117: TRISCbits.TRISC4 = 0;
  7245  001550  9894               	bcf	3988,4,c	;volatile
  7246                           
  7247                           ;USER.c: 121: TRISBbits.TRISB0 = 1;
  7248  001552  8093               	bsf	3987,0,c	;volatile
  7249                           
  7250                           ;USER.c: 122: TRISBbits.TRISB4 = 1;
  7251  001554  8893               	bsf	3987,4,c	;volatile
  7252                           
  7253                           ;USER.c: 126: TRISBbits.TRISB5 = 1;
  7254  001556  8A93               	bsf	3987,5,c	;volatile
  7255                           
  7256                           ;USER.c: 130: TRISAbits.TRISA3 = 1;
  7257  001558  8692               	bsf	3986,3,c	;volatile
  7258                           
  7259                           ;USER.c: 142: TRISCbits.TRISC6 = 0;
  7260  00155A  9C94               	bcf	3988,6,c	;volatile
  7261                           
  7262                           ;USER.c: 143: TRISCbits.TRISC7 = 0;
  7263  00155C  9E94               	bcf	3988,7,c	;volatile
  7264  00155E  0012               	return		;funcret
  7265  001560                     __end_of_Init_App:
  7266                           	opt stack 0
  7267                           tblptru	equ	0xFF8
  7268                           tblptrh	equ	0xFF7
  7269                           tblptrl	equ	0xFF6
  7270                           tablat	equ	0xFF5
  7271                           prodh	equ	0xFF4
  7272                           prodl	equ	0xFF3
  7273                           intcon	equ	0xFF2
  7274                           intcon2	equ	0xFF1
  7275                           intcon3	equ	0xFF0
  7276                           postinc0	equ	0xFEE
  7277                           wreg	equ	0xFE8
  7278                           postdec1	equ	0xFE5
  7279                           fsr1h	equ	0xFE2
  7280                           fsr1l	equ	0xFE1
  7281                           postinc2	equ	0xFDE
  7282                           postdec2	equ	0xFDD
  7283                           fsr2h	equ	0xFDA
  7284                           fsr2l	equ	0xFD9
  7285                           status	equ	0xFD8
  7286                           
  7287 ;; *************** function _IR_LoadCode *****************
  7288 ;; Defined at:
  7289 ;;		line 129 in file "IR.c"
  7290 ;; Parameters:    Size  Location     Type
  7291 ;;		None
  7292 ;; Auto vars:     Size  Location     Type
  7293 ;;  High            3   29[BANK1 ] unsigned char 
  7294 ;;  Low             3   26[BANK1 ] unsigned char 
  7295 ;; Return value:  Size  Location     Type
  7296 ;;		None               void
  7297 ;; Registers used:
  7298 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7299 ;; Tracked objects:
  7300 ;;		On entry : 0/0
  7301 ;;		On exit  : 0/0
  7302 ;;		Unchanged: 0/0
  7303 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7304 ;;      Params:         0       0       0       0       0
  7305 ;;      Locals:         0       0       6       0       0
  7306 ;;      Temps:          0       0       0       0       0
  7307 ;;      Totals:         0       0       6       0       0
  7308 ;;Total ram usage:        6 bytes
  7309 ;; Hardware stack levels used:    1
  7310 ;; Hardware stack levels required when called:   14
  7311 ;; This function calls:
  7312 ;;		_IR_CalculateCodesize
  7313 ;;		___ftmul
  7314 ;;		___fttol
  7315 ;;		___lwtoft
  7316 ;; This function is called by:
  7317 ;;		_main
  7318 ;; This function uses a non-reentrant model
  7319 ;;
  7320                           
  7321                           	psect	text49
  7322  0007B2                     __ptext49:
  7323                           	opt stack 0
  7324  0007B2                     _IR_LoadCode:
  7325                           	opt stack 16
  7326                           
  7327                           ;IR.c: 131: double Low = 0.0;
  7328                           
  7329                           ;incstack = 0
  7330  0007B2  0E00               	movlw	0
  7331  0007B4  0101               	movlb	1	; () banked
  7332  0007B6  6F9A               	movwf	IR_LoadCode@Low& (0+255),b
  7333  0007B8  0E00               	movlw	0
  7334  0007BA  0101               	movlb	1	; () banked
  7335  0007BC  6F9B               	movwf	(IR_LoadCode@Low+1)& (0+255),b
  7336  0007BE  0E00               	movlw	0
  7337  0007C0  0101               	movlb	1	; () banked
  7338  0007C2  6F9C               	movwf	(IR_LoadCode@Low+2)& (0+255),b
  7339                           
  7340                           ;IR.c: 132: double High = 0.0;
  7341  0007C4  0E00               	movlw	0
  7342  0007C6  0101               	movlb	1	; () banked
  7343  0007C8  6F9D               	movwf	IR_LoadCode@High& (0+255),b
  7344  0007CA  0E00               	movlw	0
  7345  0007CC  0101               	movlb	1	; () banked
  7346  0007CE  6F9E               	movwf	(IR_LoadCode@High+1)& (0+255),b
  7347  0007D0  0E00               	movlw	0
  7348  0007D2  0101               	movlb	1	; () banked
  7349  0007D4  6F9F               	movwf	(IR_LoadCode@High+2)& (0+255),b
  7350                           
  7351                           ; BSR set to: 1
  7352                           ;IR.c: 134: Low = (double)IR_SavedTiming[0] * (1.0 - 0.3);
  7353  0007D6  0E00               	movlw	0
  7354  0007D8  6EF6               	movwf	tblptrl,c
  7355  0007DA                     	if	1	;There is more than 1 active tblptr byte
  7356  0007DA  0E24               	movlw	36
  7357  0007DC  6EF7               	movwf	tblptrh,c
  7358  0007DE                     	endif
  7359  0007DE                     	if	0	;There are less than 3 active tblptr bytes
  7360  0007DE                     	endif
  7361  0007DE  0009               	tblrd		*+
  7362  0007E0  CFF5 F188          	movff	tablat,___lwtoft@c
  7363  0007E4  000A               	tblrd		*-
  7364  0007E6  CFF5 F189          	movff	tablat,___lwtoft@c+1
  7365  0007EA  ECC5  F00B         	call	___lwtoft	;wreg free
  7366  0007EE  C188  F18B         	movff	?___lwtoft,___ftmul@f1
  7367  0007F2  C189  F18C         	movff	?___lwtoft+1,___ftmul@f1+1
  7368  0007F6  C18A  F18D         	movff	?___lwtoft+2,___ftmul@f1+2
  7369  0007FA  0E33               	movlw	51
  7370  0007FC  0101               	movlb	1	; () banked
  7371  0007FE  6F8E               	movwf	___ftmul@f2& (0+255),b
  7372  000800  0E33               	movlw	51
  7373  000802  0101               	movlb	1	; () banked
  7374  000804  6F8F               	movwf	(___ftmul@f2+1)& (0+255),b
  7375  000806  0E3F               	movlw	63
  7376  000808  0101               	movlb	1	; () banked
  7377  00080A  6F90               	movwf	(___ftmul@f2+2)& (0+255),b
  7378  00080C  ECDA  F01D         	call	___ftmul	;wreg free
  7379  000810  C18B  F19A         	movff	?___ftmul,IR_LoadCode@Low
  7380  000814  C18C  F19B         	movff	?___ftmul+1,IR_LoadCode@Low+1
  7381  000818  C18D  F19C         	movff	?___ftmul+2,IR_LoadCode@Low+2
  7382                           
  7383                           ;IR.c: 135: High = (double)IR_SavedTiming[0] * (1.0 + 0.3);
  7384  00081C  0E00               	movlw	0
  7385  00081E  6EF6               	movwf	tblptrl,c
  7386  000820                     	if	1	;There is more than 1 active tblptr byte
  7387  000820  0E24               	movlw	36
  7388  000822  6EF7               	movwf	tblptrh,c
  7389  000824                     	endif
  7390  000824                     	if	0	;There are less than 3 active tblptr bytes
  7391  000824                     	endif
  7392  000824  0009               	tblrd		*+
  7393  000826  CFF5 F188          	movff	tablat,___lwtoft@c
  7394  00082A  000A               	tblrd		*-
  7395  00082C  CFF5 F189          	movff	tablat,___lwtoft@c+1
  7396  000830  ECC5  F00B         	call	___lwtoft	;wreg free
  7397  000834  C188  F18B         	movff	?___lwtoft,___ftmul@f1
  7398  000838  C189  F18C         	movff	?___lwtoft+1,___ftmul@f1+1
  7399  00083C  C18A  F18D         	movff	?___lwtoft+2,___ftmul@f1+2
  7400  000840  0E66               	movlw	102
  7401  000842  0101               	movlb	1	; () banked
  7402  000844  6F8E               	movwf	___ftmul@f2& (0+255),b
  7403  000846  0EA6               	movlw	166
  7404  000848  0101               	movlb	1	; () banked
  7405  00084A  6F8F               	movwf	(___ftmul@f2+1)& (0+255),b
  7406  00084C  0E3F               	movlw	63
  7407  00084E  0101               	movlb	1	; () banked
  7408  000850  6F90               	movwf	(___ftmul@f2+2)& (0+255),b
  7409  000852  ECDA  F01D         	call	___ftmul	;wreg free
  7410  000856  C18B  F19D         	movff	?___ftmul,IR_LoadCode@High
  7411  00085A  C18C  F19E         	movff	?___ftmul+1,IR_LoadCode@High+1
  7412  00085E  C18D  F19F         	movff	?___ftmul+2,IR_LoadCode@High+2
  7413                           
  7414                           ;IR.c: 137: IR_SyncLow = (unsigned int) Low;
  7415  000862  C19A  F180         	movff	IR_LoadCode@Low,___fttol@f1
  7416  000866  C19B  F181         	movff	IR_LoadCode@Low+1,___fttol@f1+1
  7417  00086A  C19C  F182         	movff	IR_LoadCode@Low+2,___fttol@f1+2
  7418  00086E  EC46  F01F         	call	___fttol	;wreg free
  7419  000872  C180  F051         	movff	?___fttol,_IR_SyncLow
  7420  000876  C181  F052         	movff	?___fttol+1,_IR_SyncLow+1
  7421                           
  7422                           ;IR.c: 138: IR_SyncHigh = (unsigned int) High;
  7423  00087A  C19D  F180         	movff	IR_LoadCode@High,___fttol@f1
  7424  00087E  C19E  F181         	movff	IR_LoadCode@High+1,___fttol@f1+1
  7425  000882  C19F  F182         	movff	IR_LoadCode@High+2,___fttol@f1+2
  7426  000886  EC46  F01F         	call	___fttol	;wreg free
  7427  00088A  C180  F04F         	movff	?___fttol,_IR_SyncHigh
  7428  00088E  C181  F050         	movff	?___fttol+1,_IR_SyncHigh+1
  7429                           
  7430                           ;IR.c: 140: IR_CodeSize = IR_CalculateCodesize();
  7431  000892  EC31  F00A         	call	_IR_CalculateCodesize	;wreg free
  7432  000896  6E5C               	movwf	_IR_CodeSize,c
  7433  000898  0012               	return		;funcret
  7434  00089A                     __end_of_IR_LoadCode:
  7435                           	opt stack 0
  7436                           tblptru	equ	0xFF8
  7437                           tblptrh	equ	0xFF7
  7438                           tblptrl	equ	0xFF6
  7439                           tablat	equ	0xFF5
  7440                           prodh	equ	0xFF4
  7441                           prodl	equ	0xFF3
  7442                           intcon	equ	0xFF2
  7443                           intcon2	equ	0xFF1
  7444                           intcon3	equ	0xFF0
  7445                           postinc0	equ	0xFEE
  7446                           wreg	equ	0xFE8
  7447                           postdec1	equ	0xFE5
  7448                           fsr1h	equ	0xFE2
  7449                           fsr1l	equ	0xFE1
  7450                           postinc2	equ	0xFDE
  7451                           postdec2	equ	0xFDD
  7452                           fsr2h	equ	0xFDA
  7453                           fsr2l	equ	0xFD9
  7454                           status	equ	0xFD8
  7455                           
  7456 ;; *************** function ___lwtoft *****************
  7457 ;; Defined at:
  7458 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  7459 ;; Parameters:    Size  Location     Type
  7460 ;;  c               2    8[BANK1 ] unsigned int 
  7461 ;; Auto vars:     Size  Location     Type
  7462 ;;		None
  7463 ;; Return value:  Size  Location     Type
  7464 ;;                  3    8[BANK1 ] float 
  7465 ;; Registers used:
  7466 ;;		wreg, status,2, status,0, cstack
  7467 ;; Tracked objects:
  7468 ;;		On entry : 0/0
  7469 ;;		On exit  : 0/0
  7470 ;;		Unchanged: 0/0
  7471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7472 ;;      Params:         0       0       3       0       0
  7473 ;;      Locals:         0       0       0       0       0
  7474 ;;      Temps:          0       0       0       0       0
  7475 ;;      Totals:         0       0       3       0       0
  7476 ;;Total ram usage:        3 bytes
  7477 ;; Hardware stack levels used:    1
  7478 ;; Hardware stack levels required when called:   13
  7479 ;; This function calls:
  7480 ;;		___ftpack
  7481 ;; This function is called by:
  7482 ;;		_RF_LoadCode
  7483 ;;		_IR_LoadCode
  7484 ;; This function uses a non-reentrant model
  7485 ;;
  7486                           
  7487                           	psect	text50
  7488  00178A                     __ptext50:
  7489                           	opt stack 0
  7490  00178A                     ___lwtoft:
  7491                           	opt stack 16
  7492                           
  7493                           ;incstack = 0
  7494  00178A  C188  F180         	movff	___lwtoft@c,___ftpack@arg
  7495  00178E  C189  F181         	movff	___lwtoft@c+1,___ftpack@arg+1
  7496  001792  0101               	movlb	1	; () banked
  7497  001794  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  7498  001796  0E8E               	movlw	142
  7499  001798  0101               	movlb	1	; () banked
  7500  00179A  6F83               	movwf	___ftpack@exp& (0+255),b
  7501  00179C  0E00               	movlw	0
  7502  00179E  0101               	movlb	1	; () banked
  7503  0017A0  6F84               	movwf	___ftpack@sign& (0+255),b
  7504  0017A2  EC4D  F001         	call	___ftpack	;wreg free
  7505  0017A6  C180  F188         	movff	?___ftpack,?___lwtoft
  7506  0017AA  C181  F189         	movff	?___ftpack+1,?___lwtoft+1
  7507  0017AE  C182  F18A         	movff	?___ftpack+2,?___lwtoft+2
  7508  0017B2  0012               	return	
  7509  0017B4  0012               	return		;funcret
  7510  0017B6                     __end_of___lwtoft:
  7511                           	opt stack 0
  7512                           tblptru	equ	0xFF8
  7513                           tblptrh	equ	0xFF7
  7514                           tblptrl	equ	0xFF6
  7515                           tablat	equ	0xFF5
  7516                           prodh	equ	0xFF4
  7517                           prodl	equ	0xFF3
  7518                           intcon	equ	0xFF2
  7519                           intcon2	equ	0xFF1
  7520                           intcon3	equ	0xFF0
  7521                           postinc0	equ	0xFEE
  7522                           wreg	equ	0xFE8
  7523                           postdec1	equ	0xFE5
  7524                           fsr1h	equ	0xFE2
  7525                           fsr1l	equ	0xFE1
  7526                           postinc2	equ	0xFDE
  7527                           postdec2	equ	0xFDD
  7528                           fsr2h	equ	0xFDA
  7529                           fsr2l	equ	0xFD9
  7530                           status	equ	0xFD8
  7531                           
  7532 ;; *************** function ___fttol *****************
  7533 ;; Defined at:
  7534 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  7535 ;; Parameters:    Size  Location     Type
  7536 ;;  f1              3    0[BANK1 ] float 
  7537 ;; Auto vars:     Size  Location     Type
  7538 ;;  lval            4   10[BANK1 ] unsigned long 
  7539 ;;  exp1            1   14[BANK1 ] unsigned char 
  7540 ;;  sign1           1    9[BANK1 ] unsigned char 
  7541 ;; Return value:  Size  Location     Type
  7542 ;;                  4    0[BANK1 ] long 
  7543 ;; Registers used:
  7544 ;;		wreg, status,2, status,0
  7545 ;; Tracked objects:
  7546 ;;		On entry : 0/0
  7547 ;;		On exit  : 0/0
  7548 ;;		Unchanged: 0/0
  7549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7550 ;;      Params:         0       0       4       0       0
  7551 ;;      Locals:         0       0       6       0       0
  7552 ;;      Temps:          0       0       5       0       0
  7553 ;;      Totals:         0       0      15       0       0
  7554 ;;Total ram usage:       15 bytes
  7555 ;; Hardware stack levels used:    1
  7556 ;; Hardware stack levels required when called:   12
  7557 ;; This function calls:
  7558 ;;		Nothing
  7559 ;; This function is called by:
  7560 ;;		_RF_LoadCode
  7561 ;;		_IR_LoadCode
  7562 ;;		_MSC_Round
  7563 ;;		_MSC_DB_Round
  7564 ;;		_MSC_LG_Round
  7565 ;;		_MSC_Scale
  7566 ;; This function uses a non-reentrant model
  7567 ;;
  7568                           
  7569                           	psect	text51
  7570  003E8C                     __ptext51:
  7571                           	opt stack 0
  7572  003E8C                     ___fttol:
  7573                           	opt stack 17
  7574                           
  7575                           ;incstack = 0
  7576  003E8C  C182  F184         	movff	___fttol@f1+2,??___fttol
  7577  003E90  0101               	movlb	1	; () banked
  7578  003E92  6B85               	clrf	(??___fttol+1)& (0+255),b
  7579  003E94  6B86               	clrf	(??___fttol+2)& (0+255),b
  7580  003E96  0101               	movlb	1	; () banked
  7581  003E98  3581               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7582  003E9A  0101               	movlb	1	; () banked
  7583  003E9C  3784               	rlcf	??___fttol& (0+255),f,b
  7584  003E9E  E301               	bnc	u8681
  7585  003EA0  8185               	bsf	(??___fttol+1)& (0+255),0,b
  7586  003EA2                     u8681:
  7587  003EA2  0101               	movlb	1	; () banked
  7588  003EA4  5184               	movf	??___fttol& (0+255),w,b
  7589  003EA6  0101               	movlb	1	; () banked
  7590  003EA8  6F8E               	movwf	___fttol@exp1& (0+255),b
  7591  003EAA  0101               	movlb	1	; () banked
  7592  003EAC  518E               	movf	___fttol@exp1& (0+255),w,b
  7593  003EAE  A4D8               	btfss	status,2,c
  7594  003EB0  D00A               	goto	l7752
  7595                           
  7596                           ; BSR set to: 1
  7597  003EB2  0E00               	movlw	0
  7598  003EB4  0101               	movlb	1	; () banked
  7599  003EB6  6F80               	movwf	?___fttol& (0+255),b
  7600  003EB8  0E00               	movlw	0
  7601  003EBA  6F81               	movwf	(?___fttol+1)& (0+255),b
  7602  003EBC  0E00               	movlw	0
  7603  003EBE  6F82               	movwf	(?___fttol+2)& (0+255),b
  7604  003EC0  0E00               	movlw	0
  7605  003EC2  6F83               	movwf	(?___fttol+3)& (0+255),b
  7606                           
  7607                           ; BSR set to: 1
  7608  003EC4  0012               	return	
  7609  003EC6                     l7752:
  7610                           
  7611                           ; BSR set to: 1
  7612  003EC6  0E17               	movlw	23
  7613  003EC8  0101               	movlb	1	; () banked
  7614  003ECA  6F84               	movwf	??___fttol& (0+255),b
  7615  003ECC  C180  F185         	movff	___fttol@f1,??___fttol+1
  7616  003ED0  C181  F186         	movff	___fttol@f1+1,??___fttol+2
  7617  003ED4  C182  F187         	movff	___fttol@f1+2,??___fttol+3
  7618  003ED8  0101               	movlb	1	; () banked
  7619  003EDA  2984               	incf	??___fttol& (0+255),w,b
  7620  003EDC  0101               	movlb	1	; () banked
  7621  003EDE  6F88               	movwf	(??___fttol+4)& (0+255),b
  7622  003EE0  D005               	goto	u8700
  7623  003EE2                     u8705:
  7624  003EE2  0101               	movlb	1	; () banked
  7625  003EE4  90D8               	bcf	status,0,c
  7626  003EE6  3387               	rrcf	(??___fttol+3)& (0+255),f,b
  7627  003EE8  3386               	rrcf	(??___fttol+2)& (0+255),f,b
  7628  003EEA  3385               	rrcf	(??___fttol+1)& (0+255),f,b
  7629  003EEC                     u8700:
  7630  003EEC  0101               	movlb	1	; () banked
  7631  003EEE  2F88               	decfsz	(??___fttol+4)& (0+255),f,b
  7632  003EF0  D7F8               	goto	u8705
  7633  003EF2  0101               	movlb	1	; () banked
  7634  003EF4  5185               	movf	(??___fttol+1)& (0+255),w,b
  7635  003EF6  0101               	movlb	1	; () banked
  7636  003EF8  6F89               	movwf	___fttol@sign1& (0+255),b
  7637                           
  7638                           ; BSR set to: 1
  7639  003EFA  0101               	movlb	1	; () banked
  7640  003EFC  8F81               	bsf	(___fttol@f1+1)& (0+255),7,b
  7641                           
  7642                           ; BSR set to: 1
  7643  003EFE  0EFF               	movlw	255
  7644  003F00  0101               	movlb	1	; () banked
  7645  003F02  1780               	andwf	___fttol@f1& (0+255),f,b
  7646  003F04  0EFF               	movlw	255
  7647  003F06  0101               	movlb	1	; () banked
  7648  003F08  1781               	andwf	(___fttol@f1+1)& (0+255),f,b
  7649  003F0A  0E00               	movlw	0
  7650  003F0C  0101               	movlb	1	; () banked
  7651  003F0E  1782               	andwf	(___fttol@f1+2)& (0+255),f,b
  7652                           
  7653                           ; BSR set to: 1
  7654  003F10  0101               	movlb	1	; () banked
  7655  003F12  5180               	movf	___fttol@f1& (0+255),w,b
  7656  003F14  0101               	movlb	1	; () banked
  7657  003F16  6F8A               	movwf	___fttol@lval& (0+255),b
  7658  003F18  0101               	movlb	1	; () banked
  7659  003F1A  5181               	movf	(___fttol@f1+1)& (0+255),w,b
  7660  003F1C  0101               	movlb	1	; () banked
  7661  003F1E  6F8B               	movwf	(___fttol@lval+1)& (0+255),b
  7662  003F20  0101               	movlb	1	; () banked
  7663  003F22  5182               	movf	(___fttol@f1+2)& (0+255),w,b
  7664  003F24  0101               	movlb	1	; () banked
  7665  003F26  6F8C               	movwf	(___fttol@lval+2)& (0+255),b
  7666  003F28  0101               	movlb	1	; () banked
  7667  003F2A  6B8D               	clrf	(___fttol@lval+3)& (0+255),b
  7668                           
  7669                           ; BSR set to: 1
  7670  003F2C  0E8E               	movlw	142
  7671  003F2E  0101               	movlb	1	; () banked
  7672  003F30  5F8E               	subwf	___fttol@exp1& (0+255),f,b
  7673                           
  7674                           ; BSR set to: 1
  7675  003F32  0101               	movlb	1	; () banked
  7676  003F34  AF8E               	btfss	___fttol@exp1& (0+255),7,b
  7677  003F36  D01B               	goto	l7774
  7678                           
  7679                           ; BSR set to: 1
  7680  003F38  0101               	movlb	1	; () banked
  7681  003F3A  518E               	movf	___fttol@exp1& (0+255),w,b
  7682  003F3C  0A80               	xorlw	128
  7683  003F3E  0F8F               	addlw	143
  7684  003F40  B0D8               	btfsc	status,0,c
  7685  003F42  D00B               	goto	l7770
  7686                           
  7687                           ; BSR set to: 1
  7688  003F44  0E00               	movlw	0
  7689  003F46  0101               	movlb	1	; () banked
  7690  003F48  6F80               	movwf	?___fttol& (0+255),b
  7691  003F4A  0E00               	movlw	0
  7692  003F4C  6F81               	movwf	(?___fttol+1)& (0+255),b
  7693  003F4E  0E00               	movlw	0
  7694  003F50  6F82               	movwf	(?___fttol+2)& (0+255),b
  7695  003F52  0E00               	movlw	0
  7696  003F54  6F83               	movwf	(?___fttol+3)& (0+255),b
  7697                           
  7698                           ; BSR set to: 1
  7699  003F56  0012               	return	
  7700                           
  7701                           ; BSR set to: 1
  7702  003F58  D000               	goto	l7770
  7703  003F5A                     l7770:
  7704                           
  7705                           ; BSR set to: 1
  7706  003F5A  0101               	movlb	1	; () banked
  7707  003F5C  90D8               	bcf	status,0,c
  7708  003F5E  338D               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7709  003F60  338C               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7710  003F62  338B               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7711  003F64  338A               	rrcf	___fttol@lval& (0+255),f,b
  7712                           
  7713                           ; BSR set to: 1
  7714  003F66  0101               	movlb	1	; () banked
  7715  003F68  3F8E               	incfsz	___fttol@exp1& (0+255),f,b
  7716  003F6A  D7F7               	goto	l7770
  7717                           
  7718                           ; BSR set to: 1
  7719  003F6C  D01F               	goto	l7784
  7720  003F6E                     l7774:
  7721                           
  7722                           ; BSR set to: 1
  7723  003F6E  0E17               	movlw	23
  7724  003F70  0101               	movlb	1	; () banked
  7725  003F72  658E               	cpfsgt	___fttol@exp1& (0+255),b
  7726  003F74  D014               	goto	l7782
  7727                           
  7728                           ; BSR set to: 1
  7729  003F76  0E00               	movlw	0
  7730  003F78  0101               	movlb	1	; () banked
  7731  003F7A  6F80               	movwf	?___fttol& (0+255),b
  7732  003F7C  0E00               	movlw	0
  7733  003F7E  6F81               	movwf	(?___fttol+1)& (0+255),b
  7734  003F80  0E00               	movlw	0
  7735  003F82  6F82               	movwf	(?___fttol+2)& (0+255),b
  7736  003F84  0E00               	movlw	0
  7737  003F86  6F83               	movwf	(?___fttol+3)& (0+255),b
  7738                           
  7739                           ; BSR set to: 1
  7740  003F88  0012               	return	
  7741                           
  7742                           ; BSR set to: 1
  7743  003F8A  D009               	goto	l7782
  7744  003F8C                     l7780:
  7745                           
  7746                           ; BSR set to: 1
  7747  003F8C  0101               	movlb	1	; () banked
  7748  003F8E  90D8               	bcf	status,0,c
  7749  003F90  378A               	rlcf	___fttol@lval& (0+255),f,b
  7750  003F92  378B               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7751  003F94  378C               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7752  003F96  378D               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7753  003F98  0101               	movlb	1	; () banked
  7754  003F9A  078E               	decf	___fttol@exp1& (0+255),f,b
  7755  003F9C  D000               	goto	l7782
  7756  003F9E                     l7782:
  7757                           
  7758                           ; BSR set to: 1
  7759  003F9E  0101               	movlb	1	; () banked
  7760  003FA0  518E               	movf	___fttol@exp1& (0+255),w,b
  7761  003FA2  0101               	movlb	1	; () banked
  7762  003FA4  B4D8               	btfsc	status,2,c
  7763  003FA6  D002               	goto	l7784
  7764  003FA8  D7F1               	goto	l7780
  7765                           
  7766                           ; BSR set to: 1
  7767  003FAA  D000               	goto	l7784
  7768  003FAC                     l7784:
  7769                           
  7770                           ; BSR set to: 1
  7771  003FAC  0101               	movlb	1	; () banked
  7772  003FAE  5189               	movf	___fttol@sign1& (0+255),w,b
  7773  003FB0  0101               	movlb	1	; () banked
  7774  003FB2  B4D8               	btfsc	status,2,c
  7775  003FB4  D00A               	goto	l7788
  7776                           
  7777                           ; BSR set to: 1
  7778  003FB6  0101               	movlb	1	; () banked
  7779  003FB8  1F8D               	comf	(___fttol@lval+3)& (0+255),f,b
  7780  003FBA  1F8C               	comf	(___fttol@lval+2)& (0+255),f,b
  7781  003FBC  1F8B               	comf	(___fttol@lval+1)& (0+255),f,b
  7782  003FBE  6D8A               	negf	___fttol@lval& (0+255),b
  7783  003FC0  0E00               	movlw	0
  7784  003FC2  238B               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7785  003FC4  238C               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7786  003FC6  238D               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7787  003FC8  D000               	goto	l7788
  7788  003FCA                     l7788:
  7789                           
  7790                           ; BSR set to: 1
  7791  003FCA  C18A  F180         	movff	___fttol@lval,?___fttol
  7792  003FCE  C18B  F181         	movff	___fttol@lval+1,?___fttol+1
  7793  003FD2  C18C  F182         	movff	___fttol@lval+2,?___fttol+2
  7794  003FD6  C18D  F183         	movff	___fttol@lval+3,?___fttol+3
  7795  003FDA  0012               	return	
  7796                           
  7797                           ; BSR set to: 1
  7798                           
  7799                           ; BSR set to: 1
  7800  003FDC  0012               	return		;funcret
  7801  003FDE                     __end_of___fttol:
  7802                           	opt stack 0
  7803                           tblptru	equ	0xFF8
  7804                           tblptrh	equ	0xFF7
  7805                           tblptrl	equ	0xFF6
  7806                           tablat	equ	0xFF5
  7807                           prodh	equ	0xFF4
  7808                           prodl	equ	0xFF3
  7809                           intcon	equ	0xFF2
  7810                           intcon2	equ	0xFF1
  7811                           intcon3	equ	0xFF0
  7812                           postinc0	equ	0xFEE
  7813                           wreg	equ	0xFE8
  7814                           postdec1	equ	0xFE5
  7815                           fsr1h	equ	0xFE2
  7816                           fsr1l	equ	0xFE1
  7817                           postinc2	equ	0xFDE
  7818                           postdec2	equ	0xFDD
  7819                           fsr2h	equ	0xFDA
  7820                           fsr2l	equ	0xFD9
  7821                           status	equ	0xFD8
  7822                           
  7823 ;; *************** function ___ftmul *****************
  7824 ;; Defined at:
  7825 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  7826 ;; Parameters:    Size  Location     Type
  7827 ;;  f1              3   11[BANK1 ] float 
  7828 ;;  f2              3   14[BANK1 ] float 
  7829 ;; Auto vars:     Size  Location     Type
  7830 ;;  f3_as_produc    3   21[BANK1 ] unsigned um
  7831 ;;  sign            1   25[BANK1 ] unsigned char 
  7832 ;;  cntr            1   24[BANK1 ] unsigned char 
  7833 ;;  exp             1   20[BANK1 ] unsigned char 
  7834 ;; Return value:  Size  Location     Type
  7835 ;;                  3   11[BANK1 ] float 
  7836 ;; Registers used:
  7837 ;;		wreg, status,2, status,0, cstack
  7838 ;; Tracked objects:
  7839 ;;		On entry : 0/0
  7840 ;;		On exit  : 0/0
  7841 ;;		Unchanged: 0/0
  7842 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7843 ;;      Params:         0       0       6       0       0
  7844 ;;      Locals:         0       0       6       0       0
  7845 ;;      Temps:          0       0       3       0       0
  7846 ;;      Totals:         0       0      15       0       0
  7847 ;;Total ram usage:       15 bytes
  7848 ;; Hardware stack levels used:    1
  7849 ;; Hardware stack levels required when called:   13
  7850 ;; This function calls:
  7851 ;;		___ftpack
  7852 ;; This function is called by:
  7853 ;;		_RF_LoadCode
  7854 ;;		_IR_LoadCode
  7855 ;;		_MSC_Scale
  7856 ;; This function uses a non-reentrant model
  7857 ;;
  7858                           
  7859                           	psect	text52
  7860  003BB4                     __ptext52:
  7861                           	opt stack 0
  7862  003BB4                     ___ftmul:
  7863                           	opt stack 16
  7864                           
  7865                           ; BSR set to: 1
  7866                           ;incstack = 0
  7867  003BB4  C18D  F191         	movff	___ftmul@f1+2,??___ftmul
  7868  003BB8  0101               	movlb	1	; () banked
  7869  003BBA  6B92               	clrf	(??___ftmul+1)& (0+255),b
  7870  003BBC  6B93               	clrf	(??___ftmul+2)& (0+255),b
  7871  003BBE  0101               	movlb	1	; () banked
  7872  003BC0  358C               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7873  003BC2  0101               	movlb	1	; () banked
  7874  003BC4  3791               	rlcf	??___ftmul& (0+255),f,b
  7875  003BC6  E301               	bnc	u8621
  7876  003BC8  8192               	bsf	(??___ftmul+1)& (0+255),0,b
  7877  003BCA                     u8621:
  7878  003BCA  0101               	movlb	1	; () banked
  7879  003BCC  5191               	movf	??___ftmul& (0+255),w,b
  7880  003BCE  0101               	movlb	1	; () banked
  7881  003BD0  6F94               	movwf	___ftmul@exp& (0+255),b
  7882  003BD2  0101               	movlb	1	; () banked
  7883  003BD4  5194               	movf	___ftmul@exp& (0+255),w,b
  7884  003BD6  A4D8               	btfss	status,2,c
  7885  003BD8  D00A               	goto	l7704
  7886                           
  7887                           ; BSR set to: 1
  7888  003BDA  0E00               	movlw	0
  7889  003BDC  0101               	movlb	1	; () banked
  7890  003BDE  6F8B               	movwf	?___ftmul& (0+255),b
  7891  003BE0  0E00               	movlw	0
  7892  003BE2  0101               	movlb	1	; () banked
  7893  003BE4  6F8C               	movwf	(?___ftmul+1)& (0+255),b
  7894  003BE6  0E00               	movlw	0
  7895  003BE8  0101               	movlb	1	; () banked
  7896  003BEA  6F8D               	movwf	(?___ftmul+2)& (0+255),b
  7897                           
  7898                           ; BSR set to: 1
  7899  003BEC  0012               	return	
  7900  003BEE                     l7704:
  7901                           
  7902                           ; BSR set to: 1
  7903  003BEE  C190  F191         	movff	___ftmul@f2+2,??___ftmul
  7904  003BF2  0101               	movlb	1	; () banked
  7905  003BF4  6B92               	clrf	(??___ftmul+1)& (0+255),b
  7906  003BF6  6B93               	clrf	(??___ftmul+2)& (0+255),b
  7907  003BF8  0101               	movlb	1	; () banked
  7908  003BFA  358F               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7909  003BFC  0101               	movlb	1	; () banked
  7910  003BFE  3791               	rlcf	??___ftmul& (0+255),f,b
  7911  003C00  E301               	bnc	u8641
  7912  003C02  8192               	bsf	(??___ftmul+1)& (0+255),0,b
  7913  003C04                     u8641:
  7914  003C04  0101               	movlb	1	; () banked
  7915  003C06  5191               	movf	??___ftmul& (0+255),w,b
  7916  003C08  0101               	movlb	1	; () banked
  7917  003C0A  6F99               	movwf	___ftmul@sign& (0+255),b
  7918  003C0C  0101               	movlb	1	; () banked
  7919  003C0E  5199               	movf	___ftmul@sign& (0+255),w,b
  7920  003C10  A4D8               	btfss	status,2,c
  7921  003C12  D00A               	goto	l7710
  7922                           
  7923                           ; BSR set to: 1
  7924  003C14  0E00               	movlw	0
  7925  003C16  0101               	movlb	1	; () banked
  7926  003C18  6F8B               	movwf	?___ftmul& (0+255),b
  7927  003C1A  0E00               	movlw	0
  7928  003C1C  0101               	movlb	1	; () banked
  7929  003C1E  6F8C               	movwf	(?___ftmul+1)& (0+255),b
  7930  003C20  0E00               	movlw	0
  7931  003C22  0101               	movlb	1	; () banked
  7932  003C24  6F8D               	movwf	(?___ftmul+2)& (0+255),b
  7933                           
  7934                           ; BSR set to: 1
  7935  003C26  0012               	return	
  7936  003C28                     l7710:
  7937                           
  7938                           ; BSR set to: 1
  7939  003C28  0101               	movlb	1	; () banked
  7940  003C2A  5199               	movf	___ftmul@sign& (0+255),w,b
  7941  003C2C  0F7B               	addlw	123
  7942  003C2E  0101               	movlb	1	; () banked
  7943  003C30  2794               	addwf	___ftmul@exp& (0+255),f,b
  7944                           
  7945                           ; BSR set to: 1
  7946  003C32  C18D  F199         	movff	___ftmul@f1+2,___ftmul@sign
  7947  003C36  0101               	movlb	1	; () banked
  7948  003C38  5190               	movf	(___ftmul@f2+2)& (0+255),w,b
  7949  003C3A  0101               	movlb	1	; () banked
  7950  003C3C  1B99               	xorwf	___ftmul@sign& (0+255),f,b
  7951  003C3E  0E80               	movlw	128
  7952  003C40  0101               	movlb	1	; () banked
  7953  003C42  1799               	andwf	___ftmul@sign& (0+255),f,b
  7954                           
  7955                           ; BSR set to: 1
  7956  003C44  0101               	movlb	1	; () banked
  7957  003C46  8F8C               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7958                           
  7959                           ; BSR set to: 1
  7960  003C48  0101               	movlb	1	; () banked
  7961  003C4A  8F8F               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7962                           
  7963                           ; BSR set to: 1
  7964  003C4C  0EFF               	movlw	255
  7965  003C4E  0101               	movlb	1	; () banked
  7966  003C50  178E               	andwf	___ftmul@f2& (0+255),f,b
  7967  003C52  0EFF               	movlw	255
  7968  003C54  0101               	movlb	1	; () banked
  7969  003C56  178F               	andwf	(___ftmul@f2+1)& (0+255),f,b
  7970  003C58  0E00               	movlw	0
  7971  003C5A  0101               	movlb	1	; () banked
  7972  003C5C  1790               	andwf	(___ftmul@f2+2)& (0+255),f,b
  7973                           
  7974                           ; BSR set to: 1
  7975  003C5E  0E00               	movlw	0
  7976  003C60  0101               	movlb	1	; () banked
  7977  003C62  6F95               	movwf	___ftmul@f3_as_product& (0+255),b
  7978  003C64  0E00               	movlw	0
  7979  003C66  0101               	movlb	1	; () banked
  7980  003C68  6F96               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  7981  003C6A  0E00               	movlw	0
  7982  003C6C  0101               	movlb	1	; () banked
  7983  003C6E  6F97               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  7984                           
  7985                           ; BSR set to: 1
  7986  003C70  0E07               	movlw	7
  7987  003C72  0101               	movlb	1	; () banked
  7988  003C74  6F98               	movwf	___ftmul@cntr& (0+255),b
  7989  003C76  D000               	goto	l7724
  7990  003C78                     l7724:
  7991                           
  7992                           ; BSR set to: 1
  7993  003C78  0101               	movlb	1	; () banked
  7994  003C7A  A18B               	btfss	___ftmul@f1& (0+255),0,b
  7995  003C7C  D00D               	goto	l7728
  7996                           
  7997                           ; BSR set to: 1
  7998  003C7E  0101               	movlb	1	; () banked
  7999  003C80  518E               	movf	___ftmul@f2& (0+255),w,b
  8000  003C82  0101               	movlb	1	; () banked
  8001  003C84  2795               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8002  003C86  0101               	movlb	1	; () banked
  8003  003C88  518F               	movf	(___ftmul@f2+1)& (0+255),w,b
  8004  003C8A  0101               	movlb	1	; () banked
  8005  003C8C  2396               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8006  003C8E  0101               	movlb	1	; () banked
  8007  003C90  5190               	movf	(___ftmul@f2+2)& (0+255),w,b
  8008  003C92  0101               	movlb	1	; () banked
  8009  003C94  2397               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8010  003C96  D000               	goto	l7728
  8011  003C98                     l7728:
  8012                           
  8013                           ; BSR set to: 1
  8014  003C98  0101               	movlb	1	; () banked
  8015  003C9A  90D8               	bcf	status,0,c
  8016  003C9C  338D               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8017  003C9E  338C               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8018  003CA0  338B               	rrcf	___ftmul@f1& (0+255),f,b
  8019  003CA2  0101               	movlb	1	; () banked
  8020  003CA4  90D8               	bcf	status,0,c
  8021  003CA6  378E               	rlcf	___ftmul@f2& (0+255),f,b
  8022  003CA8  378F               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8023  003CAA  3790               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8024                           
  8025                           ; BSR set to: 1
  8026  003CAC  0101               	movlb	1	; () banked
  8027  003CAE  2F98               	decfsz	___ftmul@cntr& (0+255),f,b
  8028  003CB0  D7E3               	goto	l7724
  8029  003CB2  D000               	goto	l7732
  8030  003CB4                     l7732:
  8031                           
  8032                           ; BSR set to: 1
  8033  003CB4  0E09               	movlw	9
  8034  003CB6  0101               	movlb	1	; () banked
  8035  003CB8  6F98               	movwf	___ftmul@cntr& (0+255),b
  8036  003CBA  D000               	goto	l7734
  8037  003CBC                     l7734:
  8038                           
  8039                           ; BSR set to: 1
  8040  003CBC  0101               	movlb	1	; () banked
  8041  003CBE  A18B               	btfss	___ftmul@f1& (0+255),0,b
  8042  003CC0  D00D               	goto	l7738
  8043                           
  8044                           ; BSR set to: 1
  8045  003CC2  0101               	movlb	1	; () banked
  8046  003CC4  518E               	movf	___ftmul@f2& (0+255),w,b
  8047  003CC6  0101               	movlb	1	; () banked
  8048  003CC8  2795               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8049  003CCA  0101               	movlb	1	; () banked
  8050  003CCC  518F               	movf	(___ftmul@f2+1)& (0+255),w,b
  8051  003CCE  0101               	movlb	1	; () banked
  8052  003CD0  2396               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8053  003CD2  0101               	movlb	1	; () banked
  8054  003CD4  5190               	movf	(___ftmul@f2+2)& (0+255),w,b
  8055  003CD6  0101               	movlb	1	; () banked
  8056  003CD8  2397               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8057  003CDA  D000               	goto	l7738
  8058  003CDC                     l7738:
  8059                           
  8060                           ; BSR set to: 1
  8061  003CDC  0101               	movlb	1	; () banked
  8062  003CDE  90D8               	bcf	status,0,c
  8063  003CE0  338D               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8064  003CE2  338C               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8065  003CE4  338B               	rrcf	___ftmul@f1& (0+255),f,b
  8066  003CE6  0101               	movlb	1	; () banked
  8067  003CE8  90D8               	bcf	status,0,c
  8068  003CEA  3397               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8069  003CEC  3396               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8070  003CEE  3395               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8071                           
  8072                           ; BSR set to: 1
  8073  003CF0  0101               	movlb	1	; () banked
  8074  003CF2  2F98               	decfsz	___ftmul@cntr& (0+255),f,b
  8075  003CF4  D7E3               	goto	l7734
  8076  003CF6  D000               	goto	l7742
  8077  003CF8                     l7742:
  8078                           
  8079                           ; BSR set to: 1
  8080  003CF8  C195  F180         	movff	___ftmul@f3_as_product,___ftpack@arg
  8081  003CFC  C196  F181         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8082  003D00  C197  F182         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8083  003D04  C194  F183         	movff	___ftmul@exp,___ftpack@exp
  8084  003D08  C199  F184         	movff	___ftmul@sign,___ftpack@sign
  8085  003D0C  EC4D  F001         	call	___ftpack	;wreg free
  8086  003D10  C180  F18B         	movff	?___ftpack,?___ftmul
  8087  003D14  C181  F18C         	movff	?___ftpack+1,?___ftmul+1
  8088  003D18  C182  F18D         	movff	?___ftpack+2,?___ftmul+2
  8089  003D1C  0012               	return	
  8090  003D1E  0012               	return		;funcret
  8091  003D20                     __end_of___ftmul:
  8092                           	opt stack 0
  8093                           tblptru	equ	0xFF8
  8094                           tblptrh	equ	0xFF7
  8095                           tblptrl	equ	0xFF6
  8096                           tablat	equ	0xFF5
  8097                           prodh	equ	0xFF4
  8098                           prodl	equ	0xFF3
  8099                           intcon	equ	0xFF2
  8100                           intcon2	equ	0xFF1
  8101                           intcon3	equ	0xFF0
  8102                           postinc0	equ	0xFEE
  8103                           wreg	equ	0xFE8
  8104                           postdec1	equ	0xFE5
  8105                           fsr1h	equ	0xFE2
  8106                           fsr1l	equ	0xFE1
  8107                           postinc2	equ	0xFDE
  8108                           postdec2	equ	0xFDD
  8109                           fsr2h	equ	0xFDA
  8110                           fsr2l	equ	0xFD9
  8111                           status	equ	0xFD8
  8112                           
  8113 ;; *************** function ___ftpack *****************
  8114 ;; Defined at:
  8115 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  8116 ;; Parameters:    Size  Location     Type
  8117 ;;  arg             3    0[BANK1 ] unsigned um
  8118 ;;  exp             1    3[BANK1 ] unsigned char 
  8119 ;;  sign            1    4[BANK1 ] unsigned char 
  8120 ;; Auto vars:     Size  Location     Type
  8121 ;;		None
  8122 ;; Return value:  Size  Location     Type
  8123 ;;                  3    0[BANK1 ] float 
  8124 ;; Registers used:
  8125 ;;		wreg, status,2, status,0
  8126 ;; Tracked objects:
  8127 ;;		On entry : 0/0
  8128 ;;		On exit  : 0/0
  8129 ;;		Unchanged: 0/0
  8130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8131 ;;      Params:         0       0       5       0       0
  8132 ;;      Locals:         0       0       0       0       0
  8133 ;;      Temps:          0       0       3       0       0
  8134 ;;      Totals:         0       0       8       0       0
  8135 ;;Total ram usage:        8 bytes
  8136 ;; Hardware stack levels used:    1
  8137 ;; Hardware stack levels required when called:   12
  8138 ;; This function calls:
  8139 ;;		Nothing
  8140 ;; This function is called by:
  8141 ;;		___ftmul
  8142 ;;		___lwtoft
  8143 ;; This function uses a non-reentrant model
  8144 ;;
  8145                           
  8146                           	psect	text53
  8147  00029A                     __ptext53:
  8148                           	opt stack 0
  8149  00029A                     ___ftpack:
  8150                           	opt stack 16
  8151                           
  8152                           ;incstack = 0
  8153  00029A  0101               	movlb	1	; () banked
  8154  00029C  5183               	movf	___ftpack@exp& (0+255),w,b
  8155  00029E  0101               	movlb	1	; () banked
  8156  0002A0  B4D8               	btfsc	status,2,c
  8157  0002A2  D008               	goto	l7536
  8158                           
  8159                           ; BSR set to: 1
  8160  0002A4  0101               	movlb	1	; () banked
  8161  0002A6  5180               	movf	___ftpack@arg& (0+255),w,b
  8162  0002A8  0101               	movlb	1	; () banked
  8163  0002AA  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  8164  0002AC  0101               	movlb	1	; () banked
  8165  0002AE  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  8166  0002B0  A4D8               	btfss	status,2,c
  8167  0002B2  D013               	goto	l7542
  8168  0002B4                     l7536:
  8169                           
  8170                           ; BSR set to: 1
  8171  0002B4  0E00               	movlw	0
  8172  0002B6  0101               	movlb	1	; () banked
  8173  0002B8  6F80               	movwf	?___ftpack& (0+255),b
  8174  0002BA  0E00               	movlw	0
  8175  0002BC  0101               	movlb	1	; () banked
  8176  0002BE  6F81               	movwf	(?___ftpack+1)& (0+255),b
  8177  0002C0  0E00               	movlw	0
  8178  0002C2  0101               	movlb	1	; () banked
  8179  0002C4  6F82               	movwf	(?___ftpack+2)& (0+255),b
  8180                           
  8181                           ; BSR set to: 1
  8182  0002C6  0012               	return	
  8183                           
  8184                           ; BSR set to: 1
  8185  0002C8  D008               	goto	l7542
  8186  0002CA                     l7540:
  8187                           
  8188                           ; BSR set to: 1
  8189  0002CA  0101               	movlb	1	; () banked
  8190  0002CC  2B83               	incf	___ftpack@exp& (0+255),f,b
  8191  0002CE  0101               	movlb	1	; () banked
  8192  0002D0  90D8               	bcf	status,0,c
  8193  0002D2  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8194  0002D4  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8195  0002D6  3380               	rrcf	___ftpack@arg& (0+255),f,b
  8196  0002D8  D000               	goto	l7542
  8197  0002DA                     l7542:
  8198                           
  8199                           ; BSR set to: 1
  8200  0002DA  0E00               	movlw	0
  8201  0002DC  0101               	movlb	1	; () banked
  8202  0002DE  1580               	andwf	___ftpack@arg& (0+255),w,b
  8203  0002E0  0101               	movlb	1	; () banked
  8204  0002E2  6F85               	movwf	??___ftpack& (0+255),b
  8205  0002E4  0E00               	movlw	0
  8206  0002E6  0101               	movlb	1	; () banked
  8207  0002E8  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  8208  0002EA  0101               	movlb	1	; () banked
  8209  0002EC  6F86               	movwf	(??___ftpack+1)& (0+255),b
  8210  0002EE  0EFE               	movlw	254
  8211  0002F0  0101               	movlb	1	; () banked
  8212  0002F2  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8213  0002F4  0101               	movlb	1	; () banked
  8214  0002F6  6F87               	movwf	(??___ftpack+2)& (0+255),b
  8215  0002F8  0101               	movlb	1	; () banked
  8216  0002FA  5185               	movf	??___ftpack& (0+255),w,b
  8217  0002FC  0101               	movlb	1	; () banked
  8218  0002FE  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  8219  000300  0101               	movlb	1	; () banked
  8220  000302  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  8221  000304  B4D8               	btfsc	status,2,c
  8222  000306  D013               	goto	l7548
  8223  000308  D7E0               	goto	l7540
  8224                           
  8225                           ; BSR set to: 1
  8226  00030A  D011               	goto	l7548
  8227  00030C                     l7544:
  8228                           
  8229                           ; BSR set to: 1
  8230  00030C  0101               	movlb	1	; () banked
  8231  00030E  2B83               	incf	___ftpack@exp& (0+255),f,b
  8232                           
  8233                           ; BSR set to: 1
  8234  000310  0E01               	movlw	1
  8235  000312  0101               	movlb	1	; () banked
  8236  000314  2780               	addwf	___ftpack@arg& (0+255),f,b
  8237  000316  0E00               	movlw	0
  8238  000318  0101               	movlb	1	; () banked
  8239  00031A  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  8240  00031C  0E00               	movlw	0
  8241  00031E  0101               	movlb	1	; () banked
  8242  000320  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  8243  000322  0101               	movlb	1	; () banked
  8244  000324  90D8               	bcf	status,0,c
  8245  000326  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8246  000328  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8247  00032A  3380               	rrcf	___ftpack@arg& (0+255),f,b
  8248  00032C  D000               	goto	l7548
  8249  00032E                     l7548:
  8250                           
  8251                           ; BSR set to: 1
  8252  00032E  0E00               	movlw	0
  8253  000330  0101               	movlb	1	; () banked
  8254  000332  1580               	andwf	___ftpack@arg& (0+255),w,b
  8255  000334  0101               	movlb	1	; () banked
  8256  000336  6F85               	movwf	??___ftpack& (0+255),b
  8257  000338  0E00               	movlw	0
  8258  00033A  0101               	movlb	1	; () banked
  8259  00033C  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  8260  00033E  0101               	movlb	1	; () banked
  8261  000340  6F86               	movwf	(??___ftpack+1)& (0+255),b
  8262  000342  0EFF               	movlw	255
  8263  000344  0101               	movlb	1	; () banked
  8264  000346  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8265  000348  0101               	movlb	1	; () banked
  8266  00034A  6F87               	movwf	(??___ftpack+2)& (0+255),b
  8267  00034C  0101               	movlb	1	; () banked
  8268  00034E  5185               	movf	??___ftpack& (0+255),w,b
  8269  000350  0101               	movlb	1	; () banked
  8270  000352  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  8271  000354  0101               	movlb	1	; () banked
  8272  000356  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  8273  000358  B4D8               	btfsc	status,2,c
  8274  00035A  D00A               	goto	l7552
  8275  00035C  D7D7               	goto	l7544
  8276                           
  8277                           ; BSR set to: 1
  8278  00035E  D008               	goto	l7552
  8279  000360                     l7550:
  8280                           
  8281                           ; BSR set to: 1
  8282  000360  0101               	movlb	1	; () banked
  8283  000362  0783               	decf	___ftpack@exp& (0+255),f,b
  8284  000364  0101               	movlb	1	; () banked
  8285  000366  90D8               	bcf	status,0,c
  8286  000368  3780               	rlcf	___ftpack@arg& (0+255),f,b
  8287  00036A  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  8288  00036C  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  8289  00036E  D000               	goto	l7552
  8290  000370                     l7552:
  8291                           
  8292                           ; BSR set to: 1
  8293  000370  0101               	movlb	1	; () banked
  8294  000372  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  8295  000374  D005               	goto	l1615
  8296                           
  8297                           ; BSR set to: 1
  8298  000376  0E02               	movlw	2
  8299  000378  0101               	movlb	1	; () banked
  8300  00037A  6183               	cpfslt	___ftpack@exp& (0+255),b
  8301  00037C  D7F1               	goto	l7550
  8302  00037E  D000               	goto	l1615
  8303  000380                     l1615:
  8304                           
  8305                           ; BSR set to: 1
  8306  000380  0101               	movlb	1	; () banked
  8307  000382  B183               	btfsc	___ftpack@exp& (0+255),0,b
  8308  000384  D003               	goto	l7558
  8309                           
  8310                           ; BSR set to: 1
  8311  000386  0101               	movlb	1	; () banked
  8312  000388  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  8313  00038A  D000               	goto	l7558
  8314  00038C                     l7558:
  8315                           
  8316                           ; BSR set to: 1
  8317  00038C  0101               	movlb	1	; () banked
  8318  00038E  90D8               	bcf	status,0,c
  8319  000390  3383               	rrcf	___ftpack@exp& (0+255),f,b
  8320  000392  0101               	movlb	1	; () banked
  8321  000394  5183               	movf	___ftpack@exp& (0+255),w,b
  8322  000396  0101               	movlb	1	; () banked
  8323  000398  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  8324                           
  8325                           ; BSR set to: 1
  8326  00039A  0101               	movlb	1	; () banked
  8327  00039C  5184               	movf	___ftpack@sign& (0+255),w,b
  8328  00039E  0101               	movlb	1	; () banked
  8329  0003A0  B4D8               	btfsc	status,2,c
  8330  0003A2  D003               	goto	l7564
  8331                           
  8332                           ; BSR set to: 1
  8333  0003A4  0101               	movlb	1	; () banked
  8334  0003A6  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  8335  0003A8  D000               	goto	l7564
  8336  0003AA                     l7564:
  8337                           
  8338                           ; BSR set to: 1
  8339  0003AA  C180  F180         	movff	___ftpack@arg,?___ftpack
  8340  0003AE  C181  F181         	movff	___ftpack@arg+1,?___ftpack+1
  8341  0003B2  C182  F182         	movff	___ftpack@arg+2,?___ftpack+2
  8342  0003B6  0012               	return	
  8343                           
  8344                           ; BSR set to: 1
  8345                           
  8346                           ; BSR set to: 1
  8347  0003B8  0012               	return		;funcret
  8348  0003BA                     __end_of___ftpack:
  8349                           	opt stack 0
  8350                           tblptru	equ	0xFF8
  8351                           tblptrh	equ	0xFF7
  8352                           tblptrl	equ	0xFF6
  8353                           tablat	equ	0xFF5
  8354                           prodh	equ	0xFF4
  8355                           prodl	equ	0xFF3
  8356                           intcon	equ	0xFF2
  8357                           intcon2	equ	0xFF1
  8358                           intcon3	equ	0xFF0
  8359                           postinc0	equ	0xFEE
  8360                           wreg	equ	0xFE8
  8361                           postdec1	equ	0xFE5
  8362                           fsr1h	equ	0xFE2
  8363                           fsr1l	equ	0xFE1
  8364                           postinc2	equ	0xFDE
  8365                           postdec2	equ	0xFDD
  8366                           fsr2h	equ	0xFDA
  8367                           fsr2l	equ	0xFD9
  8368                           status	equ	0xFD8
  8369                           
  8370 ;; *************** function _IR_CalculateCodesize *****************
  8371 ;; Defined at:
  8372 ;;		line 148 in file "IR.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;		None
  8375 ;; Auto vars:     Size  Location     Type
  8376 ;;  i               1    0[BANK1 ] unsigned char 
  8377 ;; Return value:  Size  Location     Type
  8378 ;;                  1    wreg      unsigned char 
  8379 ;; Registers used:
  8380 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8381 ;; Tracked objects:
  8382 ;;		On entry : 0/0
  8383 ;;		On exit  : 0/0
  8384 ;;		Unchanged: 0/0
  8385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8386 ;;      Params:         0       0       0       0       0
  8387 ;;      Locals:         0       0       1       0       0
  8388 ;;      Temps:          0       0       0       0       0
  8389 ;;      Totals:         0       0       1       0       0
  8390 ;;Total ram usage:        1 bytes
  8391 ;; Hardware stack levels used:    1
  8392 ;; Hardware stack levels required when called:   12
  8393 ;; This function calls:
  8394 ;;		Nothing
  8395 ;; This function is called by:
  8396 ;;		_IR_LoadCode
  8397 ;; This function uses a non-reentrant model
  8398 ;;
  8399                           
  8400                           	psect	text54
  8401  001462                     __ptext54:
  8402                           	opt stack 0
  8403  001462                     _IR_CalculateCodesize:
  8404                           	opt stack 17
  8405                           
  8406                           ;IR.c: 150: unsigned char i;
  8407                           ;IR.c: 152: for(i=0; i<128;i++)
  8408                           
  8409                           ; BSR set to: 1
  8410                           ;incstack = 0
  8411  001462  0E00               	movlw	0
  8412  001464  0101               	movlb	1	; () banked
  8413  001466  6F80               	movwf	IR_CalculateCodesize@i& (0+255),b
  8414  001468                     l7680:
  8415                           
  8416                           ; BSR set to: 1
  8417  001468  0E7F               	movlw	127
  8418  00146A  0101               	movlb	1	; () banked
  8419  00146C  6580               	cpfsgt	IR_CalculateCodesize@i& (0+255),b
  8420  00146E  D001               	goto	l7684
  8421                           
  8422                           ; BSR set to: 1
  8423  001470  D018               	goto	l7694
  8424  001472                     l7684:
  8425                           
  8426                           ; BSR set to: 1
  8427                           ;IR.c: 153: {
  8428                           ;IR.c: 154: if(IR_SavedTiming[i] == 0)
  8429  001472  0101               	movlb	1	; () banked
  8430  001474  5180               	movf	IR_CalculateCodesize@i& (0+255),w,b
  8431  001476  0D02               	mullw	2
  8432  001478  0E00               	movlw	0
  8433  00147A  24F3               	addwf	prodl,w,c
  8434  00147C  6EF6               	movwf	tblptrl,c
  8435  00147E  0E24               	movlw	36
  8436  001480  20F4               	addwfc	prodh,w,c
  8437  001482  6EF7               	movwf	tblptrh,c
  8438  001484  6AF8               	clrf	tblptru,c
  8439  001486  0E00               	movlw	0
  8440  001488  22F8               	addwfc	tblptru,f,c
  8441  00148A  0009               	tblrd		*+
  8442  00148C  50F5               	movf	tablat,w,c
  8443  00148E  0009               	tblrd		*+
  8444  001490  10F5               	iorwf	tablat,w,c
  8445  001492  A4D8               	btfss	status,2,c
  8446  001494  D003               	goto	l7690
  8447                           
  8448                           ; BSR set to: 1
  8449                           ;IR.c: 155: {
  8450                           ;IR.c: 156: return i;
  8451  001496  0101               	movlb	1	; () banked
  8452  001498  5180               	movf	IR_CalculateCodesize@i& (0+255),w,b
  8453                           
  8454                           ; BSR set to: 1
  8455  00149A  0012               	return	
  8456  00149C                     l7690:
  8457                           
  8458                           ; BSR set to: 1
  8459  00149C  0101               	movlb	1	; () banked
  8460  00149E  2B80               	incf	IR_CalculateCodesize@i& (0+255),f,b
  8461  0014A0  D7E3               	goto	l7680
  8462  0014A2                     l7694:
  8463                           
  8464                           ; BSR set to: 1
  8465                           ;IR.c: 157: }
  8466                           ;IR.c: 158: }
  8467                           ;IR.c: 159: return 128;
  8468  0014A2  0E80               	movlw	128
  8469  0014A4  0012               	return	
  8470                           
  8471                           ; BSR set to: 1
  8472                           
  8473                           ; BSR set to: 1
  8474  0014A6  0012               	return		;funcret
  8475  0014A8                     __end_of_IR_CalculateCodesize:
  8476                           	opt stack 0
  8477                           tblptru	equ	0xFF8
  8478                           tblptrh	equ	0xFF7
  8479                           tblptrl	equ	0xFF6
  8480                           tablat	equ	0xFF5
  8481                           prodh	equ	0xFF4
  8482                           prodl	equ	0xFF3
  8483                           intcon	equ	0xFF2
  8484                           intcon2	equ	0xFF1
  8485                           intcon3	equ	0xFF0
  8486                           postinc0	equ	0xFEE
  8487                           wreg	equ	0xFE8
  8488                           postdec1	equ	0xFE5
  8489                           fsr1h	equ	0xFE2
  8490                           fsr1l	equ	0xFE1
  8491                           postinc2	equ	0xFDE
  8492                           postdec2	equ	0xFDD
  8493                           fsr2h	equ	0xFDA
  8494                           fsr2l	equ	0xFD9
  8495                           status	equ	0xFD8
  8496                           
  8497 ;; *************** function _ADC_Start *****************
  8498 ;; Defined at:
  8499 ;;		line 75 in file "ADC.c"
  8500 ;; Parameters:    Size  Location     Type
  8501 ;;		None
  8502 ;; Auto vars:     Size  Location     Type
  8503 ;;		None
  8504 ;; Return value:  Size  Location     Type
  8505 ;;		None               void
  8506 ;; Registers used:
  8507 ;;		None
  8508 ;; Tracked objects:
  8509 ;;		On entry : 0/0
  8510 ;;		On exit  : 0/0
  8511 ;;		Unchanged: 0/0
  8512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8513 ;;      Params:         0       0       0       0       0
  8514 ;;      Locals:         0       0       0       0       0
  8515 ;;      Temps:          0       0       0       0       0
  8516 ;;      Totals:         0       0       0       0       0
  8517 ;;Total ram usage:        0 bytes
  8518 ;; Hardware stack levels used:    1
  8519 ;; Hardware stack levels required when called:   12
  8520 ;; This function calls:
  8521 ;;		Nothing
  8522 ;; This function is called by:
  8523 ;;		_main
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           	psect	text55
  8528  001D6C                     __ptext55:
  8529                           	opt stack 0
  8530  001D6C                     _ADC_Start:
  8531                           	opt stack 18
  8532                           
  8533                           ;ADC.c: 77: ADCON0bits.GO = 1;
  8534                           
  8535                           ; BSR set to: 1
  8536                           ;incstack = 0
  8537  001D6C  82C2               	bsf	4034,1,c	;volatile
  8538  001D6E  0012               	return		;funcret
  8539  001D70                     __end_of_ADC_Start:
  8540                           	opt stack 0
  8541                           tblptru	equ	0xFF8
  8542                           tblptrh	equ	0xFF7
  8543                           tblptrl	equ	0xFF6
  8544                           tablat	equ	0xFF5
  8545                           prodh	equ	0xFF4
  8546                           prodl	equ	0xFF3
  8547                           intcon	equ	0xFF2
  8548                           intcon2	equ	0xFF1
  8549                           intcon3	equ	0xFF0
  8550                           postinc0	equ	0xFEE
  8551                           wreg	equ	0xFE8
  8552                           postdec1	equ	0xFE5
  8553                           fsr1h	equ	0xFE2
  8554                           fsr1l	equ	0xFE1
  8555                           postinc2	equ	0xFDE
  8556                           postdec2	equ	0xFDD
  8557                           fsr2h	equ	0xFDA
  8558                           fsr2l	equ	0xFD9
  8559                           status	equ	0xFD8
  8560                           
  8561 ;; *************** function _low_isr *****************
  8562 ;; Defined at:
  8563 ;;		line 122 in file "INTERRUPTS.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;		None
  8566 ;; Auto vars:     Size  Location     Type
  8567 ;;  IRtemp          2   69[COMRAM] unsigned int 
  8568 ;;  button_state    1   68[COMRAM] unsigned char 
  8569 ;;  IR_state        1   67[COMRAM] unsigned char 
  8570 ;; Return value:  Size  Location     Type
  8571 ;;		None               void
  8572 ;; Registers used:
  8573 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8579 ;;      Params:         0       0       0       0       0
  8580 ;;      Locals:         4       0       0       0       0
  8581 ;;      Temps:         17       0       0       0       0
  8582 ;;      Totals:        21       0       0       0       0
  8583 ;;Total ram usage:       21 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; Hardware stack levels required when called:   11
  8586 ;; This function calls:
  8587 ;;		_ADC_CalculateVoltage
  8588 ;;		_IR_CheckCode
  8589 ;;		_IR_CleanBuffer
  8590 ;;		_IR_ResetData
  8591 ;;		_RF_Disable
  8592 ;;		_TMR_Timer1Start
  8593 ;;		_TMR_Timer1Status
  8594 ;;		_TMR_Timer2Start
  8595 ;;		i1_BUT_ReadButton
  8596 ;;		i1_IR_ReadReceiver
  8597 ;;		i1_SYS_ActivityTimerReset
  8598 ;;		i1_TMR_ResetTimer1
  8599 ;;		i1_TMR_Timer1
  8600 ;;		i1_TMR_Timer2
  8601 ;; This function is called by:
  8602 ;;		Interrupt level 1
  8603 ;; This function uses a non-reentrant model
  8604 ;;
  8605                           
  8606                           	psect	intcodelo
  8607  000018                     __pintcodelo:
  8608                           	opt stack 0
  8609  000018                     _low_isr:
  8610                           	opt stack 13
  8611                           
  8612                           ;incstack = 0
  8613  000018  CFD8 F033          	movff	status,??_low_isr
  8614  00001C  CFE8 F034          	movff	wreg,??_low_isr+1
  8615  000020  CFE0 F035          	movff	bsr,??_low_isr+2
  8616  000024  CFFA F036          	movff	pclath,??_low_isr+3
  8617  000028  CFFB F037          	movff	pclatu,??_low_isr+4
  8618  00002C  CFE9 F038          	movff	fsr0l,??_low_isr+5
  8619  000030  CFEA F039          	movff	fsr0h,??_low_isr+6
  8620  000034  CFE1 F03A          	movff	fsr1l,??_low_isr+7
  8621  000038  CFE2 F03B          	movff	fsr1h,??_low_isr+8
  8622  00003C  CFD9 F03C          	movff	fsr2l,??_low_isr+9
  8623  000040  CFDA F03D          	movff	fsr2h,??_low_isr+10
  8624  000044  CFF3 F03E          	movff	prodl,??_low_isr+11
  8625  000048  CFF4 F03F          	movff	prodh,??_low_isr+12
  8626  00004C  CFF6 F040          	movff	tblptrl,??_low_isr+13
  8627  000050  CFF7 F041          	movff	tblptrh,??_low_isr+14
  8628  000054  CFF8 F042          	movff	tblptru,??_low_isr+15
  8629  000058  CFF5 F043          	movff	tablat,??_low_isr+16
  8630                           
  8631                           ;INTERRUPTS.c: 124: unsigned char button_state;
  8632                           ;INTERRUPTS.c: 125: unsigned char IR_state;
  8633                           ;INTERRUPTS.c: 126: unsigned int IRtemp = 0;
  8634  00005C  0E00               	movlw	0
  8635  00005E  6E47               	movwf	low_isr@IRtemp+1,c
  8636  000060  0E00               	movlw	0
  8637  000062  6E46               	movwf	low_isr@IRtemp,c
  8638                           
  8639                           ;INTERRUPTS.c: 128: if(INTCONbits.RBIF)
  8640  000064  A0F2               	btfss	intcon,0,c	;volatile
  8641  000066  D0B1               	goto	i1l202
  8642                           
  8643                           ;INTERRUPTS.c: 129: {
  8644                           ;INTERRUPTS.c: 134: button_state = BUT_ReadButton();
  8645  000068  EC20  F00B         	call	i1_BUT_ReadButton	;wreg free
  8646  00006C  6E45               	movwf	low_isr@button_state,c
  8647                           
  8648                           ;INTERRUPTS.c: 135: IR_state = IR_ReadReceiver();
  8649  00006E  EC05  F00B         	call	i1_IR_ReadReceiver	;wreg free
  8650  000072  6E44               	movwf	low_isr@IR_state,c
  8651                           
  8652                           ;INTERRUPTS.c: 136: SYS_ActivityTimerReset();
  8653  000074  EC08  F00E         	call	i1_SYS_ActivityTimerReset	;wreg free
  8654                           
  8655                           ;INTERRUPTS.c: 137: if(ButtonChange)
  8656  000078  5059               	movf	_ButtonChange,w,c
  8657  00007A  B4D8               	btfsc	status,2,c
  8658  00007C  D03A               	goto	i1l7172
  8659                           
  8660                           ;INTERRUPTS.c: 138: {
  8661                           ;INTERRUPTS.c: 140: TMR_Timer2(0);
  8662  00007E  0E00               	movlw	0
  8663  000080  EC11  F00E         	call	i1_TMR_Timer2
  8664                           
  8665                           ;INTERRUPTS.c: 141: if(button_state)
  8666  000084  5045               	movf	low_isr@button_state,w,c
  8667  000086  B4D8               	btfsc	status,2,c
  8668  000088  D017               	goto	i1l7160
  8669                           
  8670                           ;INTERRUPTS.c: 142: {
  8671                           ;INTERRUPTS.c: 144: if(System_State == 8)
  8672  00008A  0E08               	movlw	8
  8673  00008C  0100               	movlb	0	; () banked
  8674  00008E  19D2               	xorwf	_System_State& (0+255),w,b
  8675  000090  A4D8               	btfss	status,2,c
  8676  000092  D009               	goto	i1l7156
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;INTERRUPTS.c: 145: {
  8680                           ;INTERRUPTS.c: 146: Timer2Use = 17;
  8681  000094  0E11               	movlw	17
  8682  000096  6E5E               	movwf	_Timer2Use,c
  8683                           
  8684                           ; BSR set to: 0
  8685                           ;INTERRUPTS.c: 147: TMR_Timer2Start(400);
  8686  000098  0E01               	movlw	1
  8687  00009A  6E04               	movwf	TMR_Timer2Start@time+1,c
  8688  00009C  0E90               	movlw	144
  8689  00009E  6E03               	movwf	TMR_Timer2Start@time,c
  8690  0000A0  EC0A  F00D         	call	_TMR_Timer2Start	;wreg free
  8691                           
  8692                           ;INTERRUPTS.c: 148: }
  8693  0000A4  D023               	goto	i1l7170
  8694  0000A6                     i1l7156:
  8695                           
  8696                           ;INTERRUPTS.c: 149: else
  8697                           ;INTERRUPTS.c: 150: {
  8698                           ;INTERRUPTS.c: 151: Timer2Use = 19;
  8699  0000A6  0E13               	movlw	19
  8700  0000A8  6E5E               	movwf	_Timer2Use,c
  8701                           
  8702                           ;INTERRUPTS.c: 152: TMR_Timer2Start(8);
  8703  0000AA  0E00               	movlw	0
  8704  0000AC  6E04               	movwf	TMR_Timer2Start@time+1,c
  8705  0000AE  0E08               	movlw	8
  8706  0000B0  6E03               	movwf	TMR_Timer2Start@time,c
  8707  0000B2  EC0A  F00D         	call	_TMR_Timer2Start	;wreg free
  8708                           
  8709                           ;INTERRUPTS.c: 153: }
  8710                           ;INTERRUPTS.c: 154: }
  8711  0000B6  D01A               	goto	i1l7170
  8712  0000B8                     i1l7160:
  8713                           
  8714                           ;INTERRUPTS.c: 155: else
  8715                           ;INTERRUPTS.c: 156: {
  8716                           ;INTERRUPTS.c: 157: if(System_State != 10)
  8717  0000B8  0E0A               	movlw	10
  8718  0000BA  0100               	movlb	0	; () banked
  8719  0000BC  19D2               	xorwf	_System_State& (0+255),w,b
  8720  0000BE  B4D8               	btfsc	status,2,c
  8721  0000C0  D00C               	goto	i1l7166
  8722                           
  8723                           ; BSR set to: 0
  8724                           ;INTERRUPTS.c: 158: {
  8725                           ;INTERRUPTS.c: 160: Button_Data = 1;
  8726  0000C2  0E01               	movlw	1
  8727  0000C4  0100               	movlb	0	; () banked
  8728  0000C6  6FC3               	movwf	_Button_Data& (0+255),b	;volatile
  8729                           
  8730                           ;INTERRUPTS.c: 161: Timer2Use = 19;
  8731  0000C8  0E13               	movlw	19
  8732  0000CA  6E5E               	movwf	_Timer2Use,c
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;INTERRUPTS.c: 162: TMR_Timer2Start(8);
  8736  0000CC  0E00               	movlw	0
  8737  0000CE  6E04               	movwf	TMR_Timer2Start@time+1,c
  8738  0000D0  0E08               	movlw	8
  8739  0000D2  6E03               	movwf	TMR_Timer2Start@time,c
  8740  0000D4  EC0A  F00D         	call	_TMR_Timer2Start	;wreg free
  8741                           
  8742                           ;INTERRUPTS.c: 163: }
  8743  0000D8  D009               	goto	i1l7170
  8744  0000DA                     i1l7166:
  8745                           
  8746                           ;INTERRUPTS.c: 164: else
  8747                           ;INTERRUPTS.c: 165: {
  8748                           ;INTERRUPTS.c: 166: Timer2Use = 18;
  8749  0000DA  0E12               	movlw	18
  8750  0000DC  6E5E               	movwf	_Timer2Use,c
  8751                           
  8752                           ;INTERRUPTS.c: 167: TMR_Timer2Start(500);
  8753  0000DE  0E01               	movlw	1
  8754  0000E0  6E04               	movwf	TMR_Timer2Start@time+1,c
  8755  0000E2  0EF4               	movlw	244
  8756  0000E4  6E03               	movwf	TMR_Timer2Start@time,c
  8757  0000E6  EC0A  F00D         	call	_TMR_Timer2Start	;wreg free
  8758  0000EA  D000               	goto	i1l7170
  8759  0000EC                     i1l7170:
  8760                           
  8761                           ;INTERRUPTS.c: 168: }
  8762                           ;INTERRUPTS.c: 169: }
  8763                           ;INTERRUPTS.c: 170: ButtonChange = 0;
  8764  0000EC  0E00               	movlw	0
  8765  0000EE  6E59               	movwf	_ButtonChange,c
  8766                           
  8767                           ;INTERRUPTS.c: 171: }
  8768  0000F0  D06A               	goto	i1l210
  8769  0000F2                     i1l7172:
  8770                           
  8771                           ;INTERRUPTS.c: 172: else if(IRChange)
  8772  0000F2  505A               	movf	_IRChange,w,c
  8773  0000F4  B4D8               	btfsc	status,2,c
  8774  0000F6  D065               	goto	i1l211
  8775                           
  8776                           ;INTERRUPTS.c: 173: {
  8777                           ;INTERRUPTS.c: 175: if(!TMR_Timer1Status())
  8778  0000F8  EC6F  F00E         	call	_TMR_Timer1Status	;wreg free
  8779  0000FC  0900               	iorlw	0
  8780  0000FE  A4D8               	btfss	status,2,c
  8781  000100  D003               	goto	i1l212
  8782                           
  8783                           ;INTERRUPTS.c: 176: {
  8784                           ;INTERRUPTS.c: 178: TMR_Timer1Start();
  8785  000102  EC1A  F00E         	call	_TMR_Timer1Start	;wreg free
  8786                           
  8787                           ;INTERRUPTS.c: 179: }
  8788  000106  D05A               	goto	i1l7218
  8789  000108                     i1l212:
  8790                           
  8791                           ;INTERRUPTS.c: 180: else
  8792                           ;INTERRUPTS.c: 181: {
  8793                           ;INTERRUPTS.c: 182: IRtemp = TMR1L;
  8794  000108  CFCE F046          	movff	4046,low_isr@IRtemp	;volatile
  8795  00010C  6A47               	clrf	low_isr@IRtemp+1,c
  8796                           
  8797                           ;INTERRUPTS.c: 183: IRtemp += (unsigned int)TMR1H << 8;
  8798  00010E  50CF               	movf	4047,w,c	;volatile
  8799  000110  2647               	addwf	low_isr@IRtemp+1,f,c
  8800                           
  8801                           ;INTERRUPTS.c: 184: TMR_ResetTimer1();
  8802  000112  EC59  F00C         	call	i1_TMR_ResetTimer1	;wreg free
  8803                           
  8804                           ;INTERRUPTS.c: 185: if(!IRStarted)
  8805  000116  505B               	movf	_IRStarted,w,c
  8806  000118  A4D8               	btfss	status,2,c
  8807  00011A  D023               	goto	i1l214
  8808                           
  8809                           ;INTERRUPTS.c: 186: {
  8810                           ;INTERRUPTS.c: 187: if(System_State == 8)
  8811  00011C  0E08               	movlw	8
  8812  00011E  0100               	movlb	0	; () banked
  8813  000120  19D2               	xorwf	_System_State& (0+255),w,b
  8814  000122  A4D8               	btfss	status,2,c
  8815  000124  D00F               	goto	i1l7192
  8816                           
  8817                           ; BSR set to: 0
  8818                           ;INTERRUPTS.c: 188: {
  8819                           ;INTERRUPTS.c: 189: if(IRtemp >= IR_SyncLow && IRtemp <= IR_SyncHigh)
  8820  000126  5051               	movf	_IR_SyncLow,w,c
  8821  000128  5C46               	subwf	low_isr@IRtemp,w,c
  8822  00012A  5052               	movf	_IR_SyncLow+1,w,c
  8823  00012C  5847               	subwfb	low_isr@IRtemp+1,w,c
  8824  00012E  A0D8               	btfss	status,0,c
  8825  000130  D018               	goto	i1l214
  8826                           
  8827                           ; BSR set to: 0
  8828  000132  5046               	movf	low_isr@IRtemp,w,c
  8829  000134  5C4F               	subwf	_IR_SyncHigh,w,c
  8830  000136  5047               	movf	low_isr@IRtemp+1,w,c
  8831  000138  5850               	subwfb	_IR_SyncHigh+1,w,c
  8832  00013A  A0D8               	btfss	status,0,c
  8833  00013C  D012               	goto	i1l214
  8834                           
  8835                           ; BSR set to: 0
  8836                           ;INTERRUPTS.c: 190: {
  8837                           ;INTERRUPTS.c: 191: IRStarted = 1;
  8838  00013E  0E01               	movlw	1
  8839  000140  6E5B               	movwf	_IRStarted,c
  8840                           
  8841                           ; BSR set to: 0
  8842                           ;INTERRUPTS.c: 192: }
  8843                           ;INTERRUPTS.c: 193: }
  8844  000142  D00F               	goto	i1l214
  8845  000144                     i1l7192:
  8846                           
  8847                           ; BSR set to: 0
  8848                           ;INTERRUPTS.c: 194: else
  8849                           ;INTERRUPTS.c: 195: {
  8850                           ;INTERRUPTS.c: 196: if(IRtemp >= 6000 && IRtemp <= 10000)
  8851  000144  0E70               	movlw	112
  8852  000146  5C46               	subwf	low_isr@IRtemp,w,c
  8853  000148  0E17               	movlw	23
  8854  00014A  5847               	subwfb	low_isr@IRtemp+1,w,c
  8855  00014C  A0D8               	btfss	status,0,c
  8856  00014E  D009               	goto	i1l214
  8857                           
  8858                           ; BSR set to: 0
  8859  000150  0E11               	movlw	17
  8860  000152  5C46               	subwf	low_isr@IRtemp,w,c
  8861  000154  0E27               	movlw	39
  8862  000156  5847               	subwfb	low_isr@IRtemp+1,w,c
  8863  000158  B0D8               	btfsc	status,0,c
  8864  00015A  D003               	goto	i1l214
  8865                           
  8866                           ; BSR set to: 0
  8867                           ;INTERRUPTS.c: 197: {
  8868                           ;INTERRUPTS.c: 198: IRStarted = 1;
  8869  00015C  0E01               	movlw	1
  8870  00015E  6E5B               	movwf	_IRStarted,c
  8871                           
  8872                           ; BSR set to: 0
  8873  000160  D000               	goto	i1l214
  8874  000162                     i1l214:
  8875                           
  8876                           ;INTERRUPTS.c: 199: }
  8877                           ;INTERRUPTS.c: 200: }
  8878                           ;INTERRUPTS.c: 201: }
  8879                           ;INTERRUPTS.c: 202: if(IRStarted)
  8880  000162  505B               	movf	_IRStarted,w,c
  8881  000164  B4D8               	btfsc	status,2,c
  8882  000166  D02A               	goto	i1l7218
  8883                           
  8884                           ;INTERRUPTS.c: 203: {
  8885                           ;INTERRUPTS.c: 204: RF_Disable();
  8886  000168  ECE1  F00D         	call	_RF_Disable	;wreg free
  8887                           
  8888                           ;INTERRUPTS.c: 205: if(IR_DataPlace < 128)
  8889  00016C  0E80               	movlw	128
  8890  00016E  605D               	cpfslt	_IR_DataPlace,c
  8891  000170  D025               	goto	i1l7218
  8892                           
  8893                           ;INTERRUPTS.c: 206: {
  8894                           ;INTERRUPTS.c: 207: IR_DataTiming[IR_DataPlace] = IRtemp;
  8895  000172  505D               	movf	_IR_DataPlace,w,c
  8896  000174  0D02               	mullw	2
  8897  000176  0E00               	movlw	low _IR_DataTiming
  8898  000178  24F3               	addwf	prodl,w,c
  8899  00017A  6ED9               	movwf	fsr2l,c
  8900  00017C  0E02               	movlw	high _IR_DataTiming
  8901  00017E  20F4               	addwfc	prodh,w,c
  8902  000180  6EDA               	movwf	fsr2h,c
  8903  000182  C046  FFDE         	movff	low_isr@IRtemp,postinc2
  8904  000186  C047  FFDD         	movff	low_isr@IRtemp+1,postdec2
  8905                           
  8906                           ;INTERRUPTS.c: 208: IR_DataPlace++;
  8907  00018A  2A5D               	incf	_IR_DataPlace,f,c
  8908                           
  8909                           ;INTERRUPTS.c: 209: if(System_State == 8)
  8910  00018C  0E08               	movlw	8
  8911  00018E  0100               	movlb	0	; () banked
  8912  000190  19D2               	xorwf	_System_State& (0+255),w,b
  8913  000192  A4D8               	btfss	status,2,c
  8914  000194  D013               	goto	i1l7218
  8915                           
  8916                           ; BSR set to: 0
  8917                           ;INTERRUPTS.c: 210: {
  8918                           ;INTERRUPTS.c: 211: if(IR_DataPlace >= IR_CodeSize)
  8919  000196  505C               	movf	_IR_CodeSize,w,c
  8920  000198  5C5D               	subwf	_IR_DataPlace,w,c
  8921  00019A  A0D8               	btfss	status,0,c
  8922  00019C  D00F               	goto	i1l7218
  8923                           
  8924                           ; BSR set to: 0
  8925                           ;INTERRUPTS.c: 212: {
  8926                           ;INTERRUPTS.c: 213: if(!IR_Data)
  8927  00019E  0100               	movlb	0	; () banked
  8928  0001A0  51C7               	movf	_IR_Data& (0+255),w,b	;volatile
  8929  0001A2  A4D8               	btfss	status,2,c
  8930  0001A4  D005               	goto	i1l7214
  8931                           
  8932                           ; BSR set to: 0
  8933                           ;INTERRUPTS.c: 214: {
  8934                           ;INTERRUPTS.c: 215: IR_Data = IR_CheckCode();
  8935  0001A6  ECCC  F018         	call	_IR_CheckCode	;wreg free
  8936  0001AA  0100               	movlb	0	; () banked
  8937  0001AC  6FC7               	movwf	_IR_Data& (0+255),b	;volatile
  8938  0001AE  D000               	goto	i1l7214
  8939  0001B0                     i1l7214:
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;INTERRUPTS.c: 216: }
  8943                           ;INTERRUPTS.c: 217: TMR_Timer1(0);
  8944  0001B0  0E00               	movlw	0
  8945  0001B2  EC23  F00E         	call	i1_TMR_Timer1
  8946                           
  8947                           ;INTERRUPTS.c: 218: IR_ResetData();
  8948  0001B6  EC7D  F00E         	call	_IR_ResetData	;wreg free
  8949  0001BA  D000               	goto	i1l7218
  8950  0001BC                     i1l7218:
  8951                           
  8952                           ;INTERRUPTS.c: 219: }
  8953                           ;INTERRUPTS.c: 220: }
  8954                           ;INTERRUPTS.c: 221: }
  8955                           ;INTERRUPTS.c: 222: }
  8956                           ;INTERRUPTS.c: 223: }
  8957                           ;INTERRUPTS.c: 224: IRChange = 0;
  8958  0001BC  0E00               	movlw	0
  8959  0001BE  6E5A               	movwf	_IRChange,c
  8960                           
  8961                           ;INTERRUPTS.c: 225: }
  8962  0001C0  D002               	goto	i1l210
  8963  0001C2                     i1l211:
  8964                           
  8965                           ;INTERRUPTS.c: 226: else
  8966                           ;INTERRUPTS.c: 227: {
  8967                           ;INTERRUPTS.c: 229: __nop();
  8968  0001C2  F000               	nop	
  8969  0001C4  D000               	goto	i1l210
  8970  0001C6                     i1l210:
  8971                           
  8972                           ;INTERRUPTS.c: 230: }
  8973                           ;INTERRUPTS.c: 231: INTCONbits.RBIF = 0;
  8974  0001C6  90F2               	bcf	intcon,0,c	;volatile
  8975                           
  8976                           ;INTERRUPTS.c: 232: }
  8977  0001C8  D043               	goto	i1l239
  8978  0001CA                     i1l202:
  8979                           
  8980                           ;INTERRUPTS.c: 233: else if(PIR1bits.TMR2IF)
  8981  0001CA  A29E               	btfss	3998,1,c	;volatile
  8982  0001CC  D01F               	goto	i1l226
  8983                           
  8984                           ;INTERRUPTS.c: 234: {
  8985                           ;INTERRUPTS.c: 236: if(Timer2PostCount >= Timer2Post)
  8986  0001CE  5053               	movf	_Timer2Post,w,c
  8987  0001D0  5C55               	subwf	_Timer2PostCount,w,c
  8988  0001D2  5054               	movf	_Timer2Post+1,w,c
  8989  0001D4  5856               	subwfb	_Timer2PostCount+1,w,c
  8990  0001D6  A0D8               	btfss	status,0,c
  8991  0001D8  D014               	goto	i1l7232
  8992                           
  8993                           ;INTERRUPTS.c: 237: {
  8994                           ;INTERRUPTS.c: 238: TMR_Timer2(0);
  8995  0001DA  0E00               	movlw	0
  8996  0001DC  EC11  F00E         	call	i1_TMR_Timer2
  8997                           
  8998                           ;INTERRUPTS.c: 239: if(Timer2Use == 17)
  8999  0001E0  0E11               	movlw	17
  9000  0001E2  185E               	xorwf	_Timer2Use,w,c
  9001  0001E4  A4D8               	btfss	status,2,c
  9002  0001E6  D002               	goto	i1l7228
  9003                           
  9004                           ;INTERRUPTS.c: 240: {
  9005                           ;INTERRUPTS.c: 242: System_State = 10;
  9006  0001E8  0E0A               	movlw	10
  9007  0001EA  D005               	goto	L2
  9008  0001EC                     i1l7228:
  9009                           
  9010                           ;INTERRUPTS.c: 245: else if(Timer2Use == 18)
  9011  0001EC  0E12               	movlw	18
  9012  0001EE  185E               	xorwf	_Timer2Use,w,c
  9013  0001F0  A4D8               	btfss	status,2,c
  9014  0001F2  D00A               	goto	i1l7234
  9015                           
  9016                           ;INTERRUPTS.c: 246: {
  9017                           ;INTERRUPTS.c: 247: System_State = 8;
  9018  0001F4  0E08               	movlw	8
  9019  0001F6                     L2:
  9020  0001F6  0100               	movlb	0	; () banked
  9021  0001F8  6FD2               	movwf	_System_State& (0+255),b
  9022                           
  9023                           ;INTERRUPTS.c: 248: System_State_Change = 1;
  9024  0001FA  0E01               	movlw	1
  9025  0001FC  0100               	movlb	0	; () banked
  9026  0001FE  6FCC               	movwf	_System_State_Change& (0+255),b
  9027                           
  9028                           ; BSR set to: 0
  9029                           ;INTERRUPTS.c: 249: }
  9030                           ;INTERRUPTS.c: 250: }
  9031                           
  9032                           ; BSR set to: 0
  9033  000200  D003               	goto	i1l7234
  9034  000202                     i1l7232:
  9035                           
  9036                           ;INTERRUPTS.c: 251: else
  9037                           ;INTERRUPTS.c: 252: {
  9038                           ;INTERRUPTS.c: 253: Timer2PostCount++;
  9039  000202  4A55               	infsnz	_Timer2PostCount,f,c
  9040  000204  2A56               	incf	_Timer2PostCount+1,f,c
  9041  000206  D000               	goto	i1l7234
  9042  000208                     i1l7234:
  9043                           
  9044                           ;INTERRUPTS.c: 254: }
  9045                           ;INTERRUPTS.c: 255: PIR1bits.TMR2IF = 0;
  9046  000208  929E               	bcf	3998,1,c	;volatile
  9047                           
  9048                           ;INTERRUPTS.c: 256: }
  9049  00020A  D022               	goto	i1l239
  9050  00020C                     i1l226:
  9051                           
  9052                           ;INTERRUPTS.c: 257: else if(PIR1bits.ADIF)
  9053  00020C  AC9E               	btfss	3998,6,c	;volatile
  9054  00020E  D004               	goto	i1l233
  9055                           
  9056                           ;INTERRUPTS.c: 258: {
  9057                           ;INTERRUPTS.c: 260: ADC_CalculateVoltage();
  9058  000210  ECE7  F005         	call	_ADC_CalculateVoltage	;wreg free
  9059                           
  9060                           ;INTERRUPTS.c: 261: PIR1bits.ADIF = 0;
  9061  000214  9C9E               	bcf	3998,6,c	;volatile
  9062                           
  9063                           ;INTERRUPTS.c: 262: }
  9064  000216  D01C               	goto	i1l239
  9065  000218                     i1l233:
  9066                           
  9067                           ;INTERRUPTS.c: 263: else if(PIR1bits.TMR1IF)
  9068  000218  A09E               	btfss	3998,0,c	;volatile
  9069  00021A  D018               	goto	i1l235
  9070                           
  9071                           ;INTERRUPTS.c: 264: {
  9072                           ;INTERRUPTS.c: 266: TMR_Timer1(0);
  9073  00021C  0E00               	movlw	0
  9074  00021E  EC23  F00E         	call	i1_TMR_Timer1
  9075                           
  9076                           ;INTERRUPTS.c: 267: if(System_State == 10)
  9077  000222  0E0A               	movlw	10
  9078  000224  0100               	movlb	0	; () banked
  9079  000226  19D2               	xorwf	_System_State& (0+255),w,b
  9080  000228  A4D8               	btfss	status,2,c
  9081  00022A  D008               	goto	i1l7248
  9082                           
  9083                           ; BSR set to: 0
  9084                           ;INTERRUPTS.c: 268: {
  9085                           ;INTERRUPTS.c: 269: if(IR_DataPlace >= 40)
  9086  00022C  0E27               	movlw	39
  9087  00022E  645D               	cpfsgt	_IR_DataPlace,c
  9088  000230  D005               	goto	i1l7248
  9089                           
  9090                           ; BSR set to: 0
  9091                           ;INTERRUPTS.c: 270: {
  9092                           ;INTERRUPTS.c: 272: IR_Data = IR_CheckCode();
  9093  000232  ECCC  F018         	call	_IR_CheckCode	;wreg free
  9094  000236  0100               	movlb	0	; () banked
  9095  000238  6FC7               	movwf	_IR_Data& (0+255),b	;volatile
  9096                           
  9097                           ; BSR set to: 0
  9098  00023A  D000               	goto	i1l7248
  9099  00023C                     i1l7248:
  9100                           
  9101                           ; BSR set to: 0
  9102                           ;INTERRUPTS.c: 273: }
  9103                           ;INTERRUPTS.c: 274: }
  9104                           ;INTERRUPTS.c: 275: TMR_ResetTimer1();
  9105  00023C  EC59  F00C         	call	i1_TMR_ResetTimer1	;wreg free
  9106                           
  9107                           ;INTERRUPTS.c: 276: IR_ResetData();
  9108  000240  EC7D  F00E         	call	_IR_ResetData	;wreg free
  9109                           
  9110                           ;INTERRUPTS.c: 277: IR_CleanBuffer();
  9111  000244  ECCB  F00D         	call	_IR_CleanBuffer	;wreg free
  9112                           
  9113                           ;INTERRUPTS.c: 278: PIR1bits.TMR1IF = 0;
  9114  000248  909E               	bcf	3998,0,c	;volatile
  9115                           
  9116                           ;INTERRUPTS.c: 279: }
  9117  00024A  D002               	goto	i1l239
  9118  00024C                     i1l235:
  9119                           
  9120                           ;INTERRUPTS.c: 280: else
  9121                           ;INTERRUPTS.c: 281: {
  9122                           ;INTERRUPTS.c: 283: __nop();
  9123  00024C  F000               	nop	
  9124  00024E  D000               	goto	i1l239
  9125  000250                     i1l239:
  9126  000250  C043  FFF5         	movff	??_low_isr+16,tablat
  9127  000254  C042  FFF8         	movff	??_low_isr+15,tblptru
  9128  000258  C041  FFF7         	movff	??_low_isr+14,tblptrh
  9129  00025C  C040  FFF6         	movff	??_low_isr+13,tblptrl
  9130  000260  C03F  FFF4         	movff	??_low_isr+12,prodh
  9131  000264  C03E  FFF3         	movff	??_low_isr+11,prodl
  9132  000268  C03D  FFDA         	movff	??_low_isr+10,fsr2h
  9133  00026C  C03C  FFD9         	movff	??_low_isr+9,fsr2l
  9134  000270  C03B  FFE2         	movff	??_low_isr+8,fsr1h
  9135  000274  C03A  FFE1         	movff	??_low_isr+7,fsr1l
  9136  000278  C039  FFEA         	movff	??_low_isr+6,fsr0h
  9137  00027C  C038  FFE9         	movff	??_low_isr+5,fsr0l
  9138  000280  C037  FFFB         	movff	??_low_isr+4,pclatu
  9139  000284  C036  FFFA         	movff	??_low_isr+3,pclath
  9140  000288  C035  FFE0         	movff	??_low_isr+2,bsr
  9141  00028C  C034  FFE8         	movff	??_low_isr+1,wreg
  9142  000290  C033  FFD8         	movff	??_low_isr,status
  9143  000294  0010               	retfie	
  9144  000296                     __end_of_low_isr:
  9145                           	opt stack 0
  9146                           pclatu	equ	0xFFB
  9147                           pclath	equ	0xFFA
  9148                           tblptru	equ	0xFF8
  9149                           tblptrh	equ	0xFF7
  9150                           tblptrl	equ	0xFF6
  9151                           tablat	equ	0xFF5
  9152                           prodh	equ	0xFF4
  9153                           prodl	equ	0xFF3
  9154                           intcon	equ	0xFF2
  9155                           intcon2	equ	0xFF1
  9156                           intcon3	equ	0xFF0
  9157                           postinc0	equ	0xFEE
  9158                           fsr0h	equ	0xFEA
  9159                           fsr0l	equ	0xFE9
  9160                           wreg	equ	0xFE8
  9161                           postdec1	equ	0xFE5
  9162                           fsr1h	equ	0xFE2
  9163                           fsr1l	equ	0xFE1
  9164                           bsr	equ	0xFE0
  9165                           postinc2	equ	0xFDE
  9166                           postdec2	equ	0xFDD
  9167                           fsr2h	equ	0xFDA
  9168                           fsr2l	equ	0xFD9
  9169                           status	equ	0xFD8
  9170                           
  9171 ;; *************** function i1_SYS_ActivityTimerReset *****************
  9172 ;; Defined at:
  9173 ;;		line 109 in file "SYSTEM.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;		None
  9176 ;; Auto vars:     Size  Location     Type
  9177 ;;		None
  9178 ;; Return value:  Size  Location     Type
  9179 ;;		None               void
  9180 ;; Registers used:
  9181 ;;		wreg, status,2
  9182 ;; Tracked objects:
  9183 ;;		On entry : 0/0
  9184 ;;		On exit  : 0/0
  9185 ;;		Unchanged: 0/0
  9186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9187 ;;      Params:         0       0       0       0       0
  9188 ;;      Locals:         0       0       0       0       0
  9189 ;;      Temps:          0       0       0       0       0
  9190 ;;      Totals:         0       0       0       0       0
  9191 ;;Total ram usage:        0 bytes
  9192 ;; Hardware stack levels used:    1
  9193 ;; Hardware stack levels required when called:    6
  9194 ;; This function calls:
  9195 ;;		Nothing
  9196 ;; This function is called by:
  9197 ;;		_low_isr
  9198 ;; This function uses a non-reentrant model
  9199 ;;
  9200                           
  9201                           	psect	text57
  9202  001C10                     __ptext57:
  9203                           	opt stack 0
  9204  001C10                     i1_SYS_ActivityTimerReset:
  9205                           	opt stack 17
  9206                           
  9207                           ;SYSTEM.c: 111: Activity_Timer = 0;
  9208                           
  9209                           ;incstack = 0
  9210  001C10  0E00               	movlw	0
  9211  001C12  6E48               	movwf	_Activity_Timer,c
  9212  001C14  0E00               	movlw	0
  9213  001C16  6E49               	movwf	_Activity_Timer+1,c
  9214  001C18  0E00               	movlw	0
  9215  001C1A  6E4A               	movwf	_Activity_Timer+2,c
  9216  001C1C  0E00               	movlw	0
  9217  001C1E  6E4B               	movwf	_Activity_Timer+3,c
  9218  001C20  0012               	return		;funcret
  9219  001C22                     __end_ofi1_SYS_ActivityTimerReset:
  9220                           	opt stack 0
  9221                           pclatu	equ	0xFFB
  9222                           pclath	equ	0xFFA
  9223                           tblptru	equ	0xFF8
  9224                           tblptrh	equ	0xFF7
  9225                           tblptrl	equ	0xFF6
  9226                           tablat	equ	0xFF5
  9227                           prodh	equ	0xFF4
  9228                           prodl	equ	0xFF3
  9229                           intcon	equ	0xFF2
  9230                           intcon2	equ	0xFF1
  9231                           intcon3	equ	0xFF0
  9232                           postinc0	equ	0xFEE
  9233                           fsr0h	equ	0xFEA
  9234                           fsr0l	equ	0xFE9
  9235                           wreg	equ	0xFE8
  9236                           postdec1	equ	0xFE5
  9237                           fsr1h	equ	0xFE2
  9238                           fsr1l	equ	0xFE1
  9239                           bsr	equ	0xFE0
  9240                           postinc2	equ	0xFDE
  9241                           postdec2	equ	0xFDD
  9242                           fsr2h	equ	0xFDA
  9243                           fsr2l	equ	0xFD9
  9244                           status	equ	0xFD8
  9245                           
  9246 ;; *************** function i1_IR_ReadReceiver *****************
  9247 ;; Defined at:
  9248 ;;		line 80 in file "IR.c"
  9249 ;; Parameters:    Size  Location     Type
  9250 ;;		None
  9251 ;; Auto vars:     Size  Location     Type
  9252 ;;  IR_ReadRecei    1    0[COMRAM] unsigned char 
  9253 ;; Return value:  Size  Location     Type
  9254 ;;                  1    wreg      unsigned char 
  9255 ;; Registers used:
  9256 ;;		wreg, status,2, status,0
  9257 ;; Tracked objects:
  9258 ;;		On entry : 0/0
  9259 ;;		On exit  : 0/0
  9260 ;;		Unchanged: 0/0
  9261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9262 ;;      Params:         0       0       0       0       0
  9263 ;;      Locals:         1       0       0       0       0
  9264 ;;      Temps:          0       0       0       0       0
  9265 ;;      Totals:         1       0       0       0       0
  9266 ;;Total ram usage:        1 bytes
  9267 ;; Hardware stack levels used:    1
  9268 ;; Hardware stack levels required when called:    6
  9269 ;; This function calls:
  9270 ;;		Nothing
  9271 ;; This function is called by:
  9272 ;;		_low_isr
  9273 ;; This function uses a non-reentrant model
  9274 ;;
  9275                           
  9276                           	psect	text58
  9277  00160A                     __ptext58:
  9278                           	opt stack 0
  9279  00160A                     i1_IR_ReadReceiver:
  9280                           	opt stack 17
  9281                           
  9282                           ;IR.c: 82: unsigned char value = PORTB;
  9283                           
  9284                           ;incstack = 0
  9285  00160A  CF81 F001          	movff	3969,i1IR_ReadReceiver@value	;volatile
  9286                           
  9287                           ;IR.c: 84: if(value & 0x10)
  9288  00160E  A801               	btfss	i1IR_ReadReceiver@value,4,c
  9289  001610  D00B               	goto	i1l6964
  9290                           
  9291                           ;IR.c: 85: {
  9292                           ;IR.c: 86: if(IRValue_prev == 0)
  9293  001612  0100               	movlb	0	; () banked
  9294  001614  51C6               	movf	_IRValue_prev& (0+255),w,b
  9295  001616  A4D8               	btfss	status,2,c
  9296  001618  D002               	goto	i1l519
  9297                           
  9298                           ; BSR set to: 0
  9299                           ;IR.c: 87: {
  9300                           ;IR.c: 88: IRChange = 1;
  9301  00161A  0E01               	movlw	1
  9302  00161C  6E5A               	movwf	_IRChange,c
  9303  00161E                     i1l519:
  9304                           
  9305                           ; BSR set to: 0
  9306                           ;IR.c: 89: }
  9307                           ;IR.c: 90: IRValue_prev = 1;
  9308  00161E  0E01               	movlw	1
  9309  001620  0100               	movlb	0	; () banked
  9310  001622  6FC6               	movwf	_IRValue_prev& (0+255),b
  9311                           
  9312                           ; BSR set to: 0
  9313                           ;IR.c: 91: return 1;
  9314  001624  0E01               	movlw	1
  9315                           
  9316                           ; BSR set to: 0
  9317  001626  0012               	return	
  9318  001628                     i1l6964:
  9319                           
  9320                           ;IR.c: 92: }
  9321                           ;IR.c: 94: if(IRValue_prev == 1)
  9322  001628  0100               	movlb	0	; () banked
  9323  00162A  05C6               	decf	_IRValue_prev& (0+255),w,b
  9324  00162C  A4D8               	btfss	status,2,c
  9325  00162E  D002               	goto	i1l521
  9326                           
  9327                           ; BSR set to: 0
  9328                           ;IR.c: 95: {
  9329                           ;IR.c: 96: IRChange = 1;
  9330  001630  0E01               	movlw	1
  9331  001632  6E5A               	movwf	_IRChange,c
  9332  001634                     i1l521:
  9333                           
  9334                           ; BSR set to: 0
  9335                           ;IR.c: 97: }
  9336                           ;IR.c: 98: IRValue_prev = 0;
  9337  001634  0E00               	movlw	0
  9338  001636  0100               	movlb	0	; () banked
  9339  001638  6FC6               	movwf	_IRValue_prev& (0+255),b
  9340                           
  9341                           ; BSR set to: 0
  9342                           ;IR.c: 99: return 0;
  9343  00163A  0E00               	movlw	0
  9344  00163C  0012               	return	
  9345                           
  9346                           ; BSR set to: 0
  9347                           
  9348                           ; BSR set to: 0
  9349  00163E  0012               	return		;funcret
  9350  001640                     __end_ofi1_IR_ReadReceiver:
  9351                           	opt stack 0
  9352                           pclatu	equ	0xFFB
  9353                           pclath	equ	0xFFA
  9354                           tblptru	equ	0xFF8
  9355                           tblptrh	equ	0xFF7
  9356                           tblptrl	equ	0xFF6
  9357                           tablat	equ	0xFF5
  9358                           prodh	equ	0xFF4
  9359                           prodl	equ	0xFF3
  9360                           intcon	equ	0xFF2
  9361                           intcon2	equ	0xFF1
  9362                           intcon3	equ	0xFF0
  9363                           postinc0	equ	0xFEE
  9364                           fsr0h	equ	0xFEA
  9365                           fsr0l	equ	0xFE9
  9366                           wreg	equ	0xFE8
  9367                           postdec1	equ	0xFE5
  9368                           fsr1h	equ	0xFE2
  9369                           fsr1l	equ	0xFE1
  9370                           bsr	equ	0xFE0
  9371                           postinc2	equ	0xFDE
  9372                           postdec2	equ	0xFDD
  9373                           fsr2h	equ	0xFDA
  9374                           fsr2l	equ	0xFD9
  9375                           status	equ	0xFD8
  9376                           
  9377 ;; *************** function i1_BUT_ReadButton *****************
  9378 ;; Defined at:
  9379 ;;		line 92 in file "BUTTON.c"
  9380 ;; Parameters:    Size  Location     Type
  9381 ;;		None
  9382 ;; Auto vars:     Size  Location     Type
  9383 ;;  BUT_ReadButt    1    0[COMRAM] unsigned char 
  9384 ;; Return value:  Size  Location     Type
  9385 ;;                  1    wreg      unsigned char 
  9386 ;; Registers used:
  9387 ;;		wreg, status,2, status,0
  9388 ;; Tracked objects:
  9389 ;;		On entry : 0/0
  9390 ;;		On exit  : 0/0
  9391 ;;		Unchanged: 0/0
  9392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9393 ;;      Params:         0       0       0       0       0
  9394 ;;      Locals:         1       0       0       0       0
  9395 ;;      Temps:          0       0       0       0       0
  9396 ;;      Totals:         1       0       0       0       0
  9397 ;;Total ram usage:        1 bytes
  9398 ;; Hardware stack levels used:    1
  9399 ;; Hardware stack levels required when called:    6
  9400 ;; This function calls:
  9401 ;;		Nothing
  9402 ;; This function is called by:
  9403 ;;		_low_isr
  9404 ;; This function uses a non-reentrant model
  9405 ;;
  9406                           
  9407                           	psect	text59
  9408  001640                     __ptext59:
  9409                           	opt stack 0
  9410  001640                     i1_BUT_ReadButton:
  9411                           	opt stack 17
  9412                           
  9413                           ;BUTTON.c: 94: unsigned char value = PORTB;
  9414                           
  9415                           ; BSR set to: 0
  9416                           ;incstack = 0
  9417  001640  CF81 F001          	movff	3969,i1BUT_ReadButton@value	;volatile
  9418                           
  9419                           ;BUTTON.c: 95: if((value & 0x20) == 0)
  9420  001644  BA01               	btfsc	i1BUT_ReadButton@value,5,c
  9421  001646  D00B               	goto	i1l6982
  9422                           
  9423                           ;BUTTON.c: 96: {
  9424                           ;BUTTON.c: 98: if(ButtonValue_prev == 0)
  9425  001648  0100               	movlb	0	; () banked
  9426  00164A  51C2               	movf	_ButtonValue_prev& (0+255),w,b
  9427  00164C  A4D8               	btfss	status,2,c
  9428  00164E  D002               	goto	i1l981
  9429                           
  9430                           ; BSR set to: 0
  9431                           ;BUTTON.c: 99: {
  9432                           ;BUTTON.c: 100: ButtonChange = 1;
  9433  001650  0E01               	movlw	1
  9434  001652  6E59               	movwf	_ButtonChange,c
  9435  001654                     i1l981:
  9436                           
  9437                           ; BSR set to: 0
  9438                           ;BUTTON.c: 101: }
  9439                           ;BUTTON.c: 102: ButtonValue_prev = 1;
  9440  001654  0E01               	movlw	1
  9441  001656  0100               	movlb	0	; () banked
  9442  001658  6FC2               	movwf	_ButtonValue_prev& (0+255),b
  9443                           
  9444                           ; BSR set to: 0
  9445                           ;BUTTON.c: 103: return 1;
  9446  00165A  0E01               	movlw	1
  9447                           
  9448                           ; BSR set to: 0
  9449  00165C  0012               	return	
  9450  00165E                     i1l6982:
  9451                           
  9452                           ;BUTTON.c: 104: }
  9453                           ;BUTTON.c: 107: if(ButtonValue_prev == 1)
  9454  00165E  0100               	movlb	0	; () banked
  9455  001660  05C2               	decf	_ButtonValue_prev& (0+255),w,b
  9456  001662  A4D8               	btfss	status,2,c
  9457  001664  D002               	goto	i1l983
  9458                           
  9459                           ; BSR set to: 0
  9460                           ;BUTTON.c: 108: {
  9461                           ;BUTTON.c: 109: ButtonChange = 1;
  9462  001666  0E01               	movlw	1
  9463  001668  6E59               	movwf	_ButtonChange,c
  9464  00166A                     i1l983:
  9465                           
  9466                           ; BSR set to: 0
  9467                           ;BUTTON.c: 110: }
  9468                           ;BUTTON.c: 111: ButtonValue_prev = 0;
  9469  00166A  0E00               	movlw	0
  9470  00166C  0100               	movlb	0	; () banked
  9471  00166E  6FC2               	movwf	_ButtonValue_prev& (0+255),b
  9472                           
  9473                           ; BSR set to: 0
  9474                           ;BUTTON.c: 112: return 0;
  9475  001670  0E00               	movlw	0
  9476  001672  0012               	return	
  9477                           
  9478                           ; BSR set to: 0
  9479                           
  9480                           ; BSR set to: 0
  9481  001674  0012               	return		;funcret
  9482  001676                     __end_ofi1_BUT_ReadButton:
  9483                           	opt stack 0
  9484                           pclatu	equ	0xFFB
  9485                           pclath	equ	0xFFA
  9486                           tblptru	equ	0xFF8
  9487                           tblptrh	equ	0xFF7
  9488                           tblptrl	equ	0xFF6
  9489                           tablat	equ	0xFF5
  9490                           prodh	equ	0xFF4
  9491                           prodl	equ	0xFF3
  9492                           intcon	equ	0xFF2
  9493                           intcon2	equ	0xFF1
  9494                           intcon3	equ	0xFF0
  9495                           postinc0	equ	0xFEE
  9496                           fsr0h	equ	0xFEA
  9497                           fsr0l	equ	0xFE9
  9498                           wreg	equ	0xFE8
  9499                           postdec1	equ	0xFE5
  9500                           fsr1h	equ	0xFE2
  9501                           fsr1l	equ	0xFE1
  9502                           bsr	equ	0xFE0
  9503                           postinc2	equ	0xFDE
  9504                           postdec2	equ	0xFDD
  9505                           fsr2h	equ	0xFDA
  9506                           fsr2l	equ	0xFD9
  9507                           status	equ	0xFD8
  9508                           
  9509 ;; *************** function _TMR_Timer2Start *****************
  9510 ;; Defined at:
  9511 ;;		line 387 in file "TIMERS.c"
  9512 ;; Parameters:    Size  Location     Type
  9513 ;;  time            2    2[COMRAM] unsigned int 
  9514 ;; Auto vars:     Size  Location     Type
  9515 ;;		None
  9516 ;; Return value:  Size  Location     Type
  9517 ;;		None               void
  9518 ;; Registers used:
  9519 ;;		wreg, status,2, cstack
  9520 ;; Tracked objects:
  9521 ;;		On entry : 0/0
  9522 ;;		On exit  : 0/0
  9523 ;;		Unchanged: 0/0
  9524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9525 ;;      Params:         2       0       0       0       0
  9526 ;;      Locals:         0       0       0       0       0
  9527 ;;      Temps:          0       0       0       0       0
  9528 ;;      Totals:         2       0       0       0       0
  9529 ;;Total ram usage:        2 bytes
  9530 ;; Hardware stack levels used:    1
  9531 ;; Hardware stack levels required when called:    8
  9532 ;; This function calls:
  9533 ;;		_TMR_ResetTimer2
  9534 ;;		i1_TMR_Timer2
  9535 ;; This function is called by:
  9536 ;;		_low_isr
  9537 ;; This function uses a non-reentrant model
  9538 ;;
  9539                           
  9540                           	psect	text60
  9541  001A14                     __ptext60:
  9542                           	opt stack 0
  9543  001A14                     _TMR_Timer2Start:
  9544                           	opt stack 15
  9545                           
  9546                           ;TIMERS.c: 389: TMR_Timer2(0);
  9547                           
  9548                           ; BSR set to: 0
  9549                           ;incstack = 0
  9550  001A14  0E00               	movlw	0
  9551  001A16  EC11  F00E         	call	i1_TMR_Timer2
  9552                           
  9553                           ;TIMERS.c: 390: Timer2Post = time;
  9554  001A1A  C003  F053         	movff	TMR_Timer2Start@time,_Timer2Post
  9555  001A1E  C004  F054         	movff	TMR_Timer2Start@time+1,_Timer2Post+1
  9556                           
  9557                           ;TIMERS.c: 391: TMR_ResetTimer2();
  9558  001A22  EC1D  F00C         	call	_TMR_ResetTimer2	;wreg free
  9559                           
  9560                           ;TIMERS.c: 392: TMR_Timer2(1);
  9561  001A26  0E01               	movlw	1
  9562  001A28  EC11  F00E         	call	i1_TMR_Timer2
  9563  001A2C  0012               	return		;funcret
  9564  001A2E                     __end_of_TMR_Timer2Start:
  9565                           	opt stack 0
  9566                           pclatu	equ	0xFFB
  9567                           pclath	equ	0xFFA
  9568                           tblptru	equ	0xFF8
  9569                           tblptrh	equ	0xFF7
  9570                           tblptrl	equ	0xFF6
  9571                           tablat	equ	0xFF5
  9572                           prodh	equ	0xFF4
  9573                           prodl	equ	0xFF3
  9574                           intcon	equ	0xFF2
  9575                           intcon2	equ	0xFF1
  9576                           intcon3	equ	0xFF0
  9577                           postinc0	equ	0xFEE
  9578                           fsr0h	equ	0xFEA
  9579                           fsr0l	equ	0xFE9
  9580                           wreg	equ	0xFE8
  9581                           postdec1	equ	0xFE5
  9582                           fsr1h	equ	0xFE2
  9583                           fsr1l	equ	0xFE1
  9584                           bsr	equ	0xFE0
  9585                           postinc2	equ	0xFDE
  9586                           postdec2	equ	0xFDD
  9587                           fsr2h	equ	0xFDA
  9588                           fsr2l	equ	0xFD9
  9589                           status	equ	0xFD8
  9590                           
  9591 ;; *************** function _TMR_ResetTimer2 *****************
  9592 ;; Defined at:
  9593 ;;		line 180 in file "TIMERS.c"
  9594 ;; Parameters:    Size  Location     Type
  9595 ;;		None
  9596 ;; Auto vars:     Size  Location     Type
  9597 ;;  TimerOn         1    1[COMRAM] unsigned char 
  9598 ;; Return value:  Size  Location     Type
  9599 ;;		None               void
  9600 ;; Registers used:
  9601 ;;		wreg, status,2, cstack
  9602 ;; Tracked objects:
  9603 ;;		On entry : 0/0
  9604 ;;		On exit  : 0/0
  9605 ;;		Unchanged: 0/0
  9606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9607 ;;      Params:         0       0       0       0       0
  9608 ;;      Locals:         1       0       0       0       0
  9609 ;;      Temps:          0       0       0       0       0
  9610 ;;      Totals:         1       0       0       0       0
  9611 ;;Total ram usage:        1 bytes
  9612 ;; Hardware stack levels used:    1
  9613 ;; Hardware stack levels required when called:    7
  9614 ;; This function calls:
  9615 ;;		i1_TMR_Timer2
  9616 ;; This function is called by:
  9617 ;;		_TMR_Timer2Start
  9618 ;; This function uses a non-reentrant model
  9619 ;;
  9620                           
  9621                           	psect	text61
  9622  00183A                     __ptext61:
  9623                           	opt stack 0
  9624  00183A                     _TMR_ResetTimer2:
  9625                           	opt stack 15
  9626                           
  9627                           ;TIMERS.c: 182: unsigned char TimerOn = T2CONbits.TMR2ON;
  9628                           
  9629                           ;incstack = 0
  9630  00183A  0E00               	movlw	0
  9631  00183C  B4CA               	btfsc	4042,2,c	;volatile
  9632  00183E  0E01               	movlw	1
  9633  001840  6E02               	movwf	TMR_ResetTimer2@TimerOn,c
  9634                           
  9635                           ;TIMERS.c: 184: TMR_Timer2(0);
  9636  001842  0E00               	movlw	0
  9637  001844  EC11  F00E         	call	i1_TMR_Timer2
  9638                           
  9639                           ;TIMERS.c: 185: Timer2PostCount = 0;
  9640  001848  0E00               	movlw	0
  9641  00184A  6E56               	movwf	_Timer2PostCount+1,c
  9642  00184C  0E00               	movlw	0
  9643  00184E  6E55               	movwf	_Timer2PostCount,c
  9644                           
  9645                           ;TIMERS.c: 186: TMR2 = 0;
  9646  001850  0E00               	movlw	0
  9647  001852  6ECC               	movwf	4044,c	;volatile
  9648                           
  9649                           ;TIMERS.c: 187: if(TimerOn)
  9650  001854  5002               	movf	TMR_ResetTimer2@TimerOn,w,c
  9651  001856  B4D8               	btfsc	status,2,c
  9652  001858  0012               	return	
  9653                           
  9654                           ;TIMERS.c: 188: {
  9655                           ;TIMERS.c: 189: TMR_Timer2(1);
  9656  00185A  0E01               	movlw	1
  9657  00185C  EC11  F00E         	call	i1_TMR_Timer2
  9658  001860  0012               	return	
  9659  001862  0012               	return		;funcret
  9660  001864                     __end_of_TMR_ResetTimer2:
  9661                           	opt stack 0
  9662                           pclatu	equ	0xFFB
  9663                           pclath	equ	0xFFA
  9664                           tblptru	equ	0xFF8
  9665                           tblptrh	equ	0xFF7
  9666                           tblptrl	equ	0xFF6
  9667                           tablat	equ	0xFF5
  9668                           prodh	equ	0xFF4
  9669                           prodl	equ	0xFF3
  9670                           intcon	equ	0xFF2
  9671                           intcon2	equ	0xFF1
  9672                           intcon3	equ	0xFF0
  9673                           postinc0	equ	0xFEE
  9674                           fsr0h	equ	0xFEA
  9675                           fsr0l	equ	0xFE9
  9676                           wreg	equ	0xFE8
  9677                           postdec1	equ	0xFE5
  9678                           fsr1h	equ	0xFE2
  9679                           fsr1l	equ	0xFE1
  9680                           bsr	equ	0xFE0
  9681                           postinc2	equ	0xFDE
  9682                           postdec2	equ	0xFDD
  9683                           fsr2h	equ	0xFDA
  9684                           fsr2l	equ	0xFD9
  9685                           status	equ	0xFD8
  9686                           
  9687 ;; *************** function i1_TMR_Timer2 *****************
  9688 ;; Defined at:
  9689 ;;		line 125 in file "TIMERS.c"
  9690 ;; Parameters:    Size  Location     Type
  9691 ;;  state           1    wreg     unsigned char 
  9692 ;; Auto vars:     Size  Location     Type
  9693 ;;  state           1    0[COMRAM] unsigned char 
  9694 ;; Return value:  Size  Location     Type
  9695 ;;		None               void
  9696 ;; Registers used:
  9697 ;;		wreg, status,2
  9698 ;; Tracked objects:
  9699 ;;		On entry : 0/0
  9700 ;;		On exit  : 0/0
  9701 ;;		Unchanged: 0/0
  9702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9703 ;;      Params:         0       0       0       0       0
  9704 ;;      Locals:         1       0       0       0       0
  9705 ;;      Temps:          0       0       0       0       0
  9706 ;;      Totals:         1       0       0       0       0
  9707 ;;Total ram usage:        1 bytes
  9708 ;; Hardware stack levels used:    1
  9709 ;; Hardware stack levels required when called:    6
  9710 ;; This function calls:
  9711 ;;		Nothing
  9712 ;; This function is called by:
  9713 ;;		_low_isr
  9714 ;;		_TMR_ResetTimer2
  9715 ;;		_TMR_Timer2Start
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           	psect	text62
  9720  001C22                     __ptext62:
  9721                           	opt stack 0
  9722  001C22                     i1_TMR_Timer2:
  9723                           	opt stack 17
  9724                           
  9725                           ;incstack = 0
  9726                           ;i1TMR_Timer2@state stored from wreg
  9727  001C22  6E01               	movwf	i1TMR_Timer2@state,c
  9728                           
  9729                           ;TIMERS.c: 127: if(state)
  9730  001C24  5001               	movf	i1TMR_Timer2@state,w,c
  9731  001C26  B4D8               	btfsc	status,2,c
  9732  001C28  D002               	goto	i1l1044
  9733                           
  9734                           ;TIMERS.c: 128: {
  9735                           ;TIMERS.c: 130: T2CONbits.TMR2ON = 1;
  9736  001C2A  84CA               	bsf	4042,2,c	;volatile
  9737                           
  9738                           ;TIMERS.c: 131: }
  9739  001C2C  0012               	return	
  9740  001C2E                     i1l1044:
  9741                           
  9742                           ;TIMERS.c: 132: else
  9743                           ;TIMERS.c: 133: {
  9744                           ;TIMERS.c: 135: T2CONbits.TMR2ON = 0;
  9745  001C2E  94CA               	bcf	4042,2,c	;volatile
  9746  001C30  0012               	return	
  9747  001C32  0012               	return		;funcret
  9748  001C34                     __end_ofi1_TMR_Timer2:
  9749                           	opt stack 0
  9750                           pclatu	equ	0xFFB
  9751                           pclath	equ	0xFFA
  9752                           tblptru	equ	0xFF8
  9753                           tblptrh	equ	0xFF7
  9754                           tblptrl	equ	0xFF6
  9755                           tablat	equ	0xFF5
  9756                           prodh	equ	0xFF4
  9757                           prodl	equ	0xFF3
  9758                           intcon	equ	0xFF2
  9759                           intcon2	equ	0xFF1
  9760                           intcon3	equ	0xFF0
  9761                           postinc0	equ	0xFEE
  9762                           fsr0h	equ	0xFEA
  9763                           fsr0l	equ	0xFE9
  9764                           wreg	equ	0xFE8
  9765                           postdec1	equ	0xFE5
  9766                           fsr1h	equ	0xFE2
  9767                           fsr1l	equ	0xFE1
  9768                           bsr	equ	0xFE0
  9769                           postinc2	equ	0xFDE
  9770                           postdec2	equ	0xFDD
  9771                           fsr2h	equ	0xFDA
  9772                           fsr2l	equ	0xFD9
  9773                           status	equ	0xFD8
  9774                           
  9775 ;; *************** function _TMR_Timer1Status *****************
  9776 ;; Defined at:
  9777 ;;		line 72 in file "TIMERS.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;		None
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;		None
  9782 ;; Return value:  Size  Location     Type
  9783 ;;                  1    wreg      unsigned char 
  9784 ;; Registers used:
  9785 ;;		wreg
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9791 ;;      Params:         0       0       0       0       0
  9792 ;;      Locals:         0       0       0       0       0
  9793 ;;      Temps:          0       0       0       0       0
  9794 ;;      Totals:         0       0       0       0       0
  9795 ;;Total ram usage:        0 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    6
  9798 ;; This function calls:
  9799 ;;		Nothing
  9800 ;; This function is called by:
  9801 ;;		_low_isr
  9802 ;; This function uses a non-reentrant model
  9803 ;;
  9804                           
  9805                           	psect	text63
  9806  001CDE                     __ptext63:
  9807                           	opt stack 0
  9808  001CDE                     _TMR_Timer1Status:
  9809                           	opt stack 17
  9810                           
  9811                           ;TIMERS.c: 74: if(T1CONbits.TMR1ON)
  9812                           
  9813                           ;incstack = 0
  9814  001CDE  A0CD               	btfss	4045,0,c	;volatile
  9815  001CE0  D002               	goto	i1l6830
  9816                           
  9817                           ;TIMERS.c: 75: {
  9818                           ;TIMERS.c: 77: return 1;
  9819  001CE2  0E01               	movlw	1
  9820  001CE4  0012               	return	
  9821  001CE6                     i1l6830:
  9822                           
  9823                           ;TIMERS.c: 78: }
  9824                           ;TIMERS.c: 79: return 0;
  9825  001CE6  0E00               	movlw	0
  9826  001CE8  0012               	return	
  9827  001CEA  0012               	return		;funcret
  9828  001CEC                     __end_of_TMR_Timer1Status:
  9829                           	opt stack 0
  9830                           pclatu	equ	0xFFB
  9831                           pclath	equ	0xFFA
  9832                           tblptru	equ	0xFF8
  9833                           tblptrh	equ	0xFF7
  9834                           tblptrl	equ	0xFF6
  9835                           tablat	equ	0xFF5
  9836                           prodh	equ	0xFF4
  9837                           prodl	equ	0xFF3
  9838                           intcon	equ	0xFF2
  9839                           intcon2	equ	0xFF1
  9840                           intcon3	equ	0xFF0
  9841                           postinc0	equ	0xFEE
  9842                           fsr0h	equ	0xFEA
  9843                           fsr0l	equ	0xFE9
  9844                           wreg	equ	0xFE8
  9845                           postdec1	equ	0xFE5
  9846                           fsr1h	equ	0xFE2
  9847                           fsr1l	equ	0xFE1
  9848                           bsr	equ	0xFE0
  9849                           postinc2	equ	0xFDE
  9850                           postdec2	equ	0xFDD
  9851                           fsr2h	equ	0xFDA
  9852                           fsr2l	equ	0xFD9
  9853                           status	equ	0xFD8
  9854                           
  9855 ;; *************** function _TMR_Timer1Start *****************
  9856 ;; Defined at:
  9857 ;;		line 375 in file "TIMERS.c"
  9858 ;; Parameters:    Size  Location     Type
  9859 ;;		None
  9860 ;; Auto vars:     Size  Location     Type
  9861 ;;		None
  9862 ;; Return value:  Size  Location     Type
  9863 ;;		None               void
  9864 ;; Registers used:
  9865 ;;		wreg, status,2, cstack
  9866 ;; Tracked objects:
  9867 ;;		On entry : 0/0
  9868 ;;		On exit  : 0/0
  9869 ;;		Unchanged: 0/0
  9870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9871 ;;      Params:         0       0       0       0       0
  9872 ;;      Locals:         0       0       0       0       0
  9873 ;;      Temps:          0       0       0       0       0
  9874 ;;      Totals:         0       0       0       0       0
  9875 ;;Total ram usage:        0 bytes
  9876 ;; Hardware stack levels used:    1
  9877 ;; Hardware stack levels required when called:    8
  9878 ;; This function calls:
  9879 ;;		i1_TMR_ResetTimer1
  9880 ;;		i1_TMR_Timer1
  9881 ;; This function is called by:
  9882 ;;		_low_isr
  9883 ;; This function uses a non-reentrant model
  9884 ;;
  9885                           
  9886                           	psect	text64
  9887  001C34                     __ptext64:
  9888                           	opt stack 0
  9889  001C34                     _TMR_Timer1Start:
  9890                           	opt stack 15
  9891                           
  9892                           ;TIMERS.c: 377: TMR_Timer1(0);
  9893                           
  9894                           ;incstack = 0
  9895  001C34  0E00               	movlw	0
  9896  001C36  EC23  F00E         	call	i1_TMR_Timer1
  9897                           
  9898                           ;TIMERS.c: 378: TMR_ResetTimer1();
  9899  001C3A  EC59  F00C         	call	i1_TMR_ResetTimer1	;wreg free
  9900                           
  9901                           ;TIMERS.c: 379: TMR_Timer1(1);
  9902  001C3E  0E01               	movlw	1
  9903  001C40  EC23  F00E         	call	i1_TMR_Timer1
  9904  001C44  0012               	return		;funcret
  9905  001C46                     __end_of_TMR_Timer1Start:
  9906                           	opt stack 0
  9907                           pclatu	equ	0xFFB
  9908                           pclath	equ	0xFFA
  9909                           tblptru	equ	0xFF8
  9910                           tblptrh	equ	0xFF7
  9911                           tblptrl	equ	0xFF6
  9912                           tablat	equ	0xFF5
  9913                           prodh	equ	0xFF4
  9914                           prodl	equ	0xFF3
  9915                           intcon	equ	0xFF2
  9916                           intcon2	equ	0xFF1
  9917                           intcon3	equ	0xFF0
  9918                           postinc0	equ	0xFEE
  9919                           fsr0h	equ	0xFEA
  9920                           fsr0l	equ	0xFE9
  9921                           wreg	equ	0xFE8
  9922                           postdec1	equ	0xFE5
  9923                           fsr1h	equ	0xFE2
  9924                           fsr1l	equ	0xFE1
  9925                           bsr	equ	0xFE0
  9926                           postinc2	equ	0xFDE
  9927                           postdec2	equ	0xFDD
  9928                           fsr2h	equ	0xFDA
  9929                           fsr2l	equ	0xFD9
  9930                           status	equ	0xFD8
  9931                           
  9932 ;; *************** function i1_TMR_ResetTimer1 *****************
  9933 ;; Defined at:
  9934 ;;		line 162 in file "TIMERS.c"
  9935 ;; Parameters:    Size  Location     Type
  9936 ;;		None
  9937 ;; Auto vars:     Size  Location     Type
  9938 ;;  TMR_ResetTim    1    1[COMRAM] unsigned char 
  9939 ;; Return value:  Size  Location     Type
  9940 ;;		None               void
  9941 ;; Registers used:
  9942 ;;		wreg, status,2, cstack
  9943 ;; Tracked objects:
  9944 ;;		On entry : 0/0
  9945 ;;		On exit  : 0/0
  9946 ;;		Unchanged: 0/0
  9947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9948 ;;      Params:         0       0       0       0       0
  9949 ;;      Locals:         1       0       0       0       0
  9950 ;;      Temps:          0       0       0       0       0
  9951 ;;      Totals:         1       0       0       0       0
  9952 ;;Total ram usage:        1 bytes
  9953 ;; Hardware stack levels used:    1
  9954 ;; Hardware stack levels required when called:    7
  9955 ;; This function calls:
  9956 ;;		i1_TMR_Timer1
  9957 ;; This function is called by:
  9958 ;;		_low_isr
  9959 ;;		_TMR_Timer1Start
  9960 ;; This function uses a non-reentrant model
  9961 ;;
  9962                           
  9963                           	psect	text65
  9964  0018B2                     __ptext65:
  9965                           	opt stack 0
  9966  0018B2                     i1_TMR_ResetTimer1:
  9967                           	opt stack 16
  9968                           
  9969                           ;TIMERS.c: 164: unsigned char TimerOn = T1CONbits.TMR1ON;
  9970                           
  9971                           ;incstack = 0
  9972  0018B2  0E00               	movlw	0
  9973  0018B4  B0CD               	btfsc	4045,0,c	;volatile
  9974  0018B6  0E01               	movlw	1
  9975  0018B8  6E02               	movwf	i1TMR_ResetTimer1@TimerOn,c
  9976                           
  9977                           ;TIMERS.c: 166: TMR_Timer1(0);
  9978  0018BA  0E00               	movlw	0
  9979  0018BC  EC23  F00E         	call	i1_TMR_Timer1
  9980                           
  9981                           ;TIMERS.c: 167: TMR1H = 0;
  9982  0018C0  0E00               	movlw	0
  9983  0018C2  6ECF               	movwf	4047,c	;volatile
  9984                           
  9985                           ;TIMERS.c: 168: TMR1L = 2;
  9986  0018C4  0E02               	movlw	2
  9987  0018C6  6ECE               	movwf	4046,c	;volatile
  9988                           
  9989                           ;TIMERS.c: 169: if(TimerOn)
  9990  0018C8  5002               	movf	i1TMR_ResetTimer1@TimerOn,w,c
  9991  0018CA  B4D8               	btfsc	status,2,c
  9992  0018CC  0012               	return	
  9993                           
  9994                           ;TIMERS.c: 170: {
  9995                           ;TIMERS.c: 171: TMR_Timer1(1);
  9996  0018CE  0E01               	movlw	1
  9997  0018D0  EC23  F00E         	call	i1_TMR_Timer1
  9998  0018D4  0012               	return	
  9999  0018D6  0012               	return		;funcret
 10000  0018D8                     __end_ofi1_TMR_ResetTimer1:
 10001                           	opt stack 0
 10002                           pclatu	equ	0xFFB
 10003                           pclath	equ	0xFFA
 10004                           tblptru	equ	0xFF8
 10005                           tblptrh	equ	0xFF7
 10006                           tblptrl	equ	0xFF6
 10007                           tablat	equ	0xFF5
 10008                           prodh	equ	0xFF4
 10009                           prodl	equ	0xFF3
 10010                           intcon	equ	0xFF2
 10011                           intcon2	equ	0xFF1
 10012                           intcon3	equ	0xFF0
 10013                           postinc0	equ	0xFEE
 10014                           fsr0h	equ	0xFEA
 10015                           fsr0l	equ	0xFE9
 10016                           wreg	equ	0xFE8
 10017                           postdec1	equ	0xFE5
 10018                           fsr1h	equ	0xFE2
 10019                           fsr1l	equ	0xFE1
 10020                           bsr	equ	0xFE0
 10021                           postinc2	equ	0xFDE
 10022                           postdec2	equ	0xFDD
 10023                           fsr2h	equ	0xFDA
 10024                           fsr2l	equ	0xFD9
 10025                           status	equ	0xFD8
 10026                           
 10027 ;; *************** function i1_TMR_Timer1 *****************
 10028 ;; Defined at:
 10029 ;;		line 106 in file "TIMERS.c"
 10030 ;; Parameters:    Size  Location     Type
 10031 ;;  state           1    wreg     unsigned char 
 10032 ;; Auto vars:     Size  Location     Type
 10033 ;;  state           1    0[COMRAM] unsigned char 
 10034 ;; Return value:  Size  Location     Type
 10035 ;;		None               void
 10036 ;; Registers used:
 10037 ;;		wreg, status,2
 10038 ;; Tracked objects:
 10039 ;;		On entry : 0/0
 10040 ;;		On exit  : 0/0
 10041 ;;		Unchanged: 0/0
 10042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10043 ;;      Params:         0       0       0       0       0
 10044 ;;      Locals:         1       0       0       0       0
 10045 ;;      Temps:          0       0       0       0       0
 10046 ;;      Totals:         1       0       0       0       0
 10047 ;;Total ram usage:        1 bytes
 10048 ;; Hardware stack levels used:    1
 10049 ;; Hardware stack levels required when called:    6
 10050 ;; This function calls:
 10051 ;;		Nothing
 10052 ;; This function is called by:
 10053 ;;		_low_isr
 10054 ;;		_TMR_Timer1Start
 10055 ;;		i1_TMR_ResetTimer1
 10056 ;; This function uses a non-reentrant model
 10057 ;;
 10058                           
 10059                           	psect	text66
 10060  001C46                     __ptext66:
 10061                           	opt stack 0
 10062  001C46                     i1_TMR_Timer1:
 10063                           	opt stack 17
 10064                           
 10065                           ;incstack = 0
 10066                           ;i1TMR_Timer1@state stored from wreg
 10067  001C46  6E01               	movwf	i1TMR_Timer1@state,c
 10068                           
 10069                           ;TIMERS.c: 108: if(state)
 10070  001C48  5001               	movf	i1TMR_Timer1@state,w,c
 10071  001C4A  B4D8               	btfsc	status,2,c
 10072  001C4C  D002               	goto	i1l1039
 10073                           
 10074                           ;TIMERS.c: 109: {
 10075                           ;TIMERS.c: 111: T1CONbits.TMR1ON = 1;
 10076  001C4E  80CD               	bsf	4045,0,c	;volatile
 10077                           
 10078                           ;TIMERS.c: 112: }
 10079  001C50  0012               	return	
 10080  001C52                     i1l1039:
 10081                           
 10082                           ;TIMERS.c: 113: else
 10083                           ;TIMERS.c: 114: {
 10084                           ;TIMERS.c: 116: T1CONbits.TMR1ON = 0;
 10085  001C52  90CD               	bcf	4045,0,c	;volatile
 10086  001C54  0012               	return	
 10087  001C56  0012               	return		;funcret
 10088  001C58                     __end_ofi1_TMR_Timer1:
 10089                           	opt stack 0
 10090                           pclatu	equ	0xFFB
 10091                           pclath	equ	0xFFA
 10092                           tblptru	equ	0xFF8
 10093                           tblptrh	equ	0xFF7
 10094                           tblptrl	equ	0xFF6
 10095                           tablat	equ	0xFF5
 10096                           prodh	equ	0xFF4
 10097                           prodl	equ	0xFF3
 10098                           intcon	equ	0xFF2
 10099                           intcon2	equ	0xFF1
 10100                           intcon3	equ	0xFF0
 10101                           postinc0	equ	0xFEE
 10102                           fsr0h	equ	0xFEA
 10103                           fsr0l	equ	0xFE9
 10104                           wreg	equ	0xFE8
 10105                           postdec1	equ	0xFE5
 10106                           fsr1h	equ	0xFE2
 10107                           fsr1l	equ	0xFE1
 10108                           bsr	equ	0xFE0
 10109                           postinc2	equ	0xFDE
 10110                           postdec2	equ	0xFDD
 10111                           fsr2h	equ	0xFDA
 10112                           fsr2l	equ	0xFD9
 10113                           status	equ	0xFD8
 10114                           
 10115 ;; *************** function _RF_Disable *****************
 10116 ;; Defined at:
 10117 ;;		line 195 in file "RF.c"
 10118 ;; Parameters:    Size  Location     Type
 10119 ;;		None
 10120 ;; Auto vars:     Size  Location     Type
 10121 ;;		None
 10122 ;; Return value:  Size  Location     Type
 10123 ;;		None               void
 10124 ;; Registers used:
 10125 ;;		wreg, status,2, cstack
 10126 ;; Tracked objects:
 10127 ;;		On entry : 0/0
 10128 ;;		On exit  : 0/0
 10129 ;;		Unchanged: 0/0
 10130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10131 ;;      Params:         0       0       0       0       0
 10132 ;;      Locals:         0       0       0       0       0
 10133 ;;      Temps:          0       0       0       0       0
 10134 ;;      Totals:         0       0       0       0       0
 10135 ;;Total ram usage:        0 bytes
 10136 ;; Hardware stack levels used:    1
 10137 ;; Hardware stack levels required when called:    7
 10138 ;; This function calls:
 10139 ;;		i1_RF_DataInt
 10140 ;;		i1_TMR_Timer0
 10141 ;;		i1_TMR_Timer0Int
 10142 ;; This function is called by:
 10143 ;;		_low_isr
 10144 ;; This function uses a non-reentrant model
 10145 ;;
 10146                           
 10147                           	psect	text67
 10148  001BC2                     __ptext67:
 10149                           	opt stack 0
 10150  001BC2                     _RF_Disable:
 10151                           	opt stack 16
 10152                           
 10153                           ;RF.c: 197: RF_DataInt(0);
 10154                           
 10155                           ;incstack = 0
 10156  001BC2  0E00               	movlw	0
 10157  001BC4  ECD6  F00D         	call	i1_RF_DataInt
 10158                           
 10159                           ;RF.c: 198: TMR_Timer0Int(0);
 10160  001BC8  0E00               	movlw	0
 10161  001BCA  EC35  F00E         	call	i1_TMR_Timer0Int
 10162                           
 10163                           ;RF.c: 199: TMR_Timer0(0);
 10164  001BCE  0E00               	movlw	0
 10165  001BD0  EC2C  F00E         	call	i1_TMR_Timer0
 10166  001BD4  0012               	return		;funcret
 10167  001BD6                     __end_of_RF_Disable:
 10168                           	opt stack 0
 10169                           pclatu	equ	0xFFB
 10170                           pclath	equ	0xFFA
 10171                           tblptru	equ	0xFF8
 10172                           tblptrh	equ	0xFF7
 10173                           tblptrl	equ	0xFF6
 10174                           tablat	equ	0xFF5
 10175                           prodh	equ	0xFF4
 10176                           prodl	equ	0xFF3
 10177                           intcon	equ	0xFF2
 10178                           intcon2	equ	0xFF1
 10179                           intcon3	equ	0xFF0
 10180                           postinc0	equ	0xFEE
 10181                           fsr0h	equ	0xFEA
 10182                           fsr0l	equ	0xFE9
 10183                           wreg	equ	0xFE8
 10184                           postdec1	equ	0xFE5
 10185                           fsr1h	equ	0xFE2
 10186                           fsr1l	equ	0xFE1
 10187                           bsr	equ	0xFE0
 10188                           postinc2	equ	0xFDE
 10189                           postdec2	equ	0xFDD
 10190                           fsr2h	equ	0xFDA
 10191                           fsr2l	equ	0xFD9
 10192                           status	equ	0xFD8
 10193                           
 10194 ;; *************** function i1_TMR_Timer0 *****************
 10195 ;; Defined at:
 10196 ;;		line 87 in file "TIMERS.c"
 10197 ;; Parameters:    Size  Location     Type
 10198 ;;  state           1    wreg     unsigned char 
 10199 ;; Auto vars:     Size  Location     Type
 10200 ;;  state           1    0[COMRAM] unsigned char 
 10201 ;; Return value:  Size  Location     Type
 10202 ;;		None               void
 10203 ;; Registers used:
 10204 ;;		wreg, status,2
 10205 ;; Tracked objects:
 10206 ;;		On entry : 0/0
 10207 ;;		On exit  : 0/0
 10208 ;;		Unchanged: 0/0
 10209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10210 ;;      Params:         0       0       0       0       0
 10211 ;;      Locals:         1       0       0       0       0
 10212 ;;      Temps:          0       0       0       0       0
 10213 ;;      Totals:         1       0       0       0       0
 10214 ;;Total ram usage:        1 bytes
 10215 ;; Hardware stack levels used:    1
 10216 ;; Hardware stack levels required when called:    6
 10217 ;; This function calls:
 10218 ;;		Nothing
 10219 ;; This function is called by:
 10220 ;;		_RF_Disable
 10221 ;; This function uses a non-reentrant model
 10222 ;;
 10223                           
 10224                           	psect	text68
 10225  001C58                     __ptext68:
 10226                           	opt stack 0
 10227  001C58                     i1_TMR_Timer0:
 10228                           	opt stack 16
 10229                           
 10230                           ;incstack = 0
 10231                           ;i1TMR_Timer0@state stored from wreg
 10232  001C58  6E01               	movwf	i1TMR_Timer0@state,c
 10233                           
 10234                           ;TIMERS.c: 89: if(state)
 10235  001C5A  5001               	movf	i1TMR_Timer0@state,w,c
 10236  001C5C  B4D8               	btfsc	status,2,c
 10237  001C5E  D002               	goto	i1l1034
 10238                           
 10239                           ;TIMERS.c: 90: {
 10240                           ;TIMERS.c: 92: T0CONbits.TMR0ON = 1;
 10241  001C60  8ED5               	bsf	4053,7,c	;volatile
 10242                           
 10243                           ;TIMERS.c: 93: }
 10244  001C62  0012               	return	
 10245  001C64                     i1l1034:
 10246                           
 10247                           ;TIMERS.c: 94: else
 10248                           ;TIMERS.c: 95: {
 10249                           ;TIMERS.c: 97: T0CONbits.TMR0ON = 0;
 10250  001C64  9ED5               	bcf	4053,7,c	;volatile
 10251  001C66  0012               	return	
 10252  001C68  0012               	return		;funcret
 10253  001C6A                     __end_ofi1_TMR_Timer0:
 10254                           	opt stack 0
 10255                           pclatu	equ	0xFFB
 10256                           pclath	equ	0xFFA
 10257                           tblptru	equ	0xFF8
 10258                           tblptrh	equ	0xFF7
 10259                           tblptrl	equ	0xFF6
 10260                           tablat	equ	0xFF5
 10261                           prodh	equ	0xFF4
 10262                           prodl	equ	0xFF3
 10263                           intcon	equ	0xFF2
 10264                           intcon2	equ	0xFF1
 10265                           intcon3	equ	0xFF0
 10266                           postinc0	equ	0xFEE
 10267                           fsr0h	equ	0xFEA
 10268                           fsr0l	equ	0xFE9
 10269                           wreg	equ	0xFE8
 10270                           postdec1	equ	0xFE5
 10271                           fsr1h	equ	0xFE2
 10272                           fsr1l	equ	0xFE1
 10273                           bsr	equ	0xFE0
 10274                           postinc2	equ	0xFDE
 10275                           postdec2	equ	0xFDD
 10276                           fsr2h	equ	0xFDA
 10277                           fsr2l	equ	0xFD9
 10278                           status	equ	0xFD8
 10279                           
 10280 ;; *************** function _IR_CleanBuffer *****************
 10281 ;; Defined at:
 10282 ;;		line 119 in file "IR.c"
 10283 ;; Parameters:    Size  Location     Type
 10284 ;;		None
 10285 ;; Auto vars:     Size  Location     Type
 10286 ;;		None
 10287 ;; Return value:  Size  Location     Type
 10288 ;;		None               void
 10289 ;; Registers used:
 10290 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10291 ;; Tracked objects:
 10292 ;;		On entry : 0/0
 10293 ;;		On exit  : 0/0
 10294 ;;		Unchanged: 0/0
 10295 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10296 ;;      Params:         0       0       0       0       0
 10297 ;;      Locals:         0       0       0       0       0
 10298 ;;      Temps:          0       0       0       0       0
 10299 ;;      Totals:         0       0       0       0       0
 10300 ;;Total ram usage:        0 bytes
 10301 ;; Hardware stack levels used:    1
 10302 ;; Hardware stack levels required when called:    7
 10303 ;; This function calls:
 10304 ;;		i1_MSC_CleanBufferInt
 10305 ;; This function is called by:
 10306 ;;		_low_isr
 10307 ;; This function uses a non-reentrant model
 10308 ;;
 10309                           
 10310                           	psect	text69
 10311  001B96                     __ptext69:
 10312                           	opt stack 0
 10313  001B96                     _IR_CleanBuffer:
 10314                           	opt stack 16
 10315                           
 10316                           ;IR.c: 121: MSC_CleanBufferInt(&IR_DataTiming,128);
 10317                           
 10318                           ;incstack = 0
 10319  001B96  0E00               	movlw	low _IR_DataTiming
 10320  001B98  6E01               	movwf	i1MSC_CleanBufferInt@data,c
 10321  001B9A  0E02               	movlw	high _IR_DataTiming
 10322  001B9C  6E02               	movwf	i1MSC_CleanBufferInt@data+1,c
 10323  001B9E  0E00               	movlw	0
 10324  001BA0  6E04               	movwf	i1MSC_CleanBufferInt@count+1,c
 10325  001BA2  0E80               	movlw	128
 10326  001BA4  6E03               	movwf	i1MSC_CleanBufferInt@count,c
 10327  001BA6  EC54  F00A         	call	i1_MSC_CleanBufferInt	;wreg free
 10328  001BAA  0012               	return		;funcret
 10329  001BAC                     __end_of_IR_CleanBuffer:
 10330                           	opt stack 0
 10331                           pclatu	equ	0xFFB
 10332                           pclath	equ	0xFFA
 10333                           tblptru	equ	0xFF8
 10334                           tblptrh	equ	0xFF7
 10335                           tblptrl	equ	0xFF6
 10336                           tablat	equ	0xFF5
 10337                           prodh	equ	0xFF4
 10338                           prodl	equ	0xFF3
 10339                           intcon	equ	0xFF2
 10340                           intcon2	equ	0xFF1
 10341                           intcon3	equ	0xFF0
 10342                           postinc0	equ	0xFEE
 10343                           fsr0h	equ	0xFEA
 10344                           fsr0l	equ	0xFE9
 10345                           wreg	equ	0xFE8
 10346                           postdec1	equ	0xFE5
 10347                           fsr1h	equ	0xFE2
 10348                           fsr1l	equ	0xFE1
 10349                           bsr	equ	0xFE0
 10350                           postinc2	equ	0xFDE
 10351                           postdec2	equ	0xFDD
 10352                           fsr2h	equ	0xFDA
 10353                           fsr2l	equ	0xFD9
 10354                           status	equ	0xFD8
 10355                           
 10356 ;; *************** function _IR_CheckCode *****************
 10357 ;; Defined at:
 10358 ;;		line 168 in file "IR.c"
 10359 ;; Parameters:    Size  Location     Type
 10360 ;;		None
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;  High            3   46[COMRAM] unsigned char 
 10363 ;;  Low             3   43[COMRAM] unsigned char 
 10364 ;;  i               1   49[COMRAM] unsigned char 
 10365 ;; Return value:  Size  Location     Type
 10366 ;;                  1    wreg      unsigned char 
 10367 ;; Registers used:
 10368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10369 ;; Tracked objects:
 10370 ;;		On entry : 0/0
 10371 ;;		On exit  : 0/0
 10372 ;;		Unchanged: 0/0
 10373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10374 ;;      Params:         0       0       0       0       0
 10375 ;;      Locals:         7       0       0       0       0
 10376 ;;      Temps:          2       0       0       0       0
 10377 ;;      Totals:         9       0       0       0       0
 10378 ;;Total ram usage:        9 bytes
 10379 ;; Hardware stack levels used:    1
 10380 ;; Hardware stack levels required when called:   10
 10381 ;; This function calls:
 10382 ;;		_FSH_Write_IR_RF
 10383 ;;		i1___ftge
 10384 ;;		i1___ftmul
 10385 ;;		i1___lwtoft
 10386 ;; This function is called by:
 10387 ;;		_low_isr
 10388 ;; This function uses a non-reentrant model
 10389 ;;
 10390                           
 10391                           	psect	text70
 10392  003198                     __ptext70:
 10393                           	opt stack 0
 10394  003198                     _IR_CheckCode:
 10395                           	opt stack 13
 10396                           
 10397                           ;IR.c: 170: unsigned char i;
 10398                           ;IR.c: 171: double Low = 0.0;
 10399                           
 10400                           ;incstack = 0
 10401  003198  0E00               	movlw	0
 10402  00319A  6E2C               	movwf	IR_CheckCode@Low,c
 10403  00319C  0E00               	movlw	0
 10404  00319E  6E2D               	movwf	IR_CheckCode@Low+1,c
 10405  0031A0  0E00               	movlw	0
 10406  0031A2  6E2E               	movwf	IR_CheckCode@Low+2,c
 10407                           
 10408                           ;IR.c: 172: double High = 0.0;
 10409  0031A4  0E00               	movlw	0
 10410  0031A6  6E2F               	movwf	IR_CheckCode@High,c
 10411  0031A8  0E00               	movlw	0
 10412  0031AA  6E30               	movwf	IR_CheckCode@High+1,c
 10413  0031AC  0E00               	movlw	0
 10414  0031AE  6E31               	movwf	IR_CheckCode@High+2,c
 10415                           
 10416                           ;IR.c: 174: if(System_State == 8)
 10417  0031B0  0E08               	movlw	8
 10418  0031B2  0100               	movlb	0	; () banked
 10419  0031B4  19D2               	xorwf	_System_State& (0+255),w,b
 10420  0031B6  A4D8               	btfss	status,2,c
 10421  0031B8  D163               	goto	i1l6874
 10422                           
 10423                           ; BSR set to: 0
 10424                           ;IR.c: 175: {
 10425                           ;IR.c: 176: for(i=0; i<IR_CodeSize;i++)
 10426  0031BA  0E00               	movlw	0
 10427  0031BC  6E32               	movwf	IR_CheckCode@i,c
 10428  0031BE  D15A               	goto	i1l6866
 10429  0031C0                     i1l6844:
 10430                           
 10431                           ;IR.c: 177: {
 10432                           ;IR.c: 178: if(IR_SavedTiming[i] > 4000)
 10433  0031C0  5032               	movf	IR_CheckCode@i,w,c
 10434  0031C2  0D02               	mullw	2
 10435  0031C4  0E00               	movlw	0
 10436  0031C6  24F3               	addwf	prodl,w,c
 10437  0031C8  6EF6               	movwf	tblptrl,c
 10438  0031CA  0E24               	movlw	36
 10439  0031CC  20F4               	addwfc	prodh,w,c
 10440  0031CE  6EF7               	movwf	tblptrh,c
 10441  0031D0  6AF8               	clrf	tblptru,c
 10442  0031D2  0E00               	movlw	0
 10443  0031D4  22F8               	addwfc	tblptru,f,c
 10444  0031D6  0009               	tblrd		*+
 10445  0031D8  0EA1               	movlw	161
 10446  0031DA  5EF5               	subwf	tablat,f,c
 10447  0031DC  0009               	tblrd		*+
 10448  0031DE  0E0F               	movlw	15
 10449  0031E0  5AF5               	subwfb	tablat,f,c
 10450  0031E2  A0D8               	btfss	status,0,c
 10451  0031E4  D049               	goto	i1l6848
 10452                           
 10453                           ;IR.c: 179: {
 10454                           ;IR.c: 180: Low = (double)IR_SavedTiming[i] * (1.0 - 0.3);
 10455  0031E6  5032               	movf	IR_CheckCode@i,w,c
 10456  0031E8  0D02               	mullw	2
 10457  0031EA  0E00               	movlw	0
 10458  0031EC  24F3               	addwf	prodl,w,c
 10459  0031EE  6EF6               	movwf	tblptrl,c
 10460  0031F0  0E24               	movlw	36
 10461  0031F2  20F4               	addwfc	prodh,w,c
 10462  0031F4  6EF7               	movwf	tblptrh,c
 10463  0031F6  6AF8               	clrf	tblptru,c
 10464  0031F8  0E00               	movlw	0
 10465  0031FA  22F8               	addwfc	tblptru,f,c
 10466  0031FC  0009               	tblrd		*+
 10467  0031FE  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10468  003202  000A               	tblrd		*-
 10469  003204  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10470  003208  EC6C  F00C         	call	i1___lwtoft	;wreg free
 10471  00320C  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10472  003210  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10473  003214  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10474  003218  0E33               	movlw	51
 10475  00321A  6E1E               	movwf	i1___ftmul@f2,c
 10476  00321C  0E33               	movlw	51
 10477  00321E  6E1F               	movwf	i1___ftmul@f2+1,c
 10478  003220  0E3F               	movlw	63
 10479  003222  6E20               	movwf	i1___ftmul@f2+2,c
 10480  003224  EC6D  F002         	call	i1___ftmul	;wreg free
 10481  003228  C01B  F02C         	movff	?i1___ftmul,IR_CheckCode@Low
 10482  00322C  C01C  F02D         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10483  003230  C01D  F02E         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10484                           
 10485                           ;IR.c: 181: High = (double)IR_SavedTiming[i] * (1.0 + 0.3);
 10486  003234  5032               	movf	IR_CheckCode@i,w,c
 10487  003236  0D02               	mullw	2
 10488  003238  0E00               	movlw	0
 10489  00323A  24F3               	addwf	prodl,w,c
 10490  00323C  6EF6               	movwf	tblptrl,c
 10491  00323E  0E24               	movlw	36
 10492  003240  20F4               	addwfc	prodh,w,c
 10493  003242  6EF7               	movwf	tblptrh,c
 10494  003244  6AF8               	clrf	tblptru,c
 10495  003246  0E00               	movlw	0
 10496  003248  22F8               	addwfc	tblptru,f,c
 10497  00324A  0009               	tblrd		*+
 10498  00324C  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10499  003250  000A               	tblrd		*-
 10500  003252  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10501  003256  EC6C  F00C         	call	i1___lwtoft	;wreg free
 10502  00325A  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10503  00325E  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10504  003262  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10505  003266  0E66               	movlw	102
 10506  003268  6E1E               	movwf	i1___ftmul@f2,c
 10507  00326A  0EA6               	movlw	166
 10508  00326C  6E1F               	movwf	i1___ftmul@f2+1,c
 10509  00326E  0E3F               	movlw	63
 10510  003270  6E20               	movwf	i1___ftmul@f2+2,c
 10511  003272  EC6D  F002         	call	i1___ftmul	;wreg free
 10512  003276  D0B7               	goto	L4
 10513  003278                     i1l6848:
 10514                           
 10515                           ;IR.c: 183: else if(IR_SavedTiming[i] <= 4000 && IR_SavedTiming[i] > 1000)
 10516  003278  5032               	movf	IR_CheckCode@i,w,c
 10517  00327A  0D02               	mullw	2
 10518  00327C  0E00               	movlw	0
 10519  00327E  24F3               	addwf	prodl,w,c
 10520  003280  6EF6               	movwf	tblptrl,c
 10521  003282  0E24               	movlw	36
 10522  003284  20F4               	addwfc	prodh,w,c
 10523  003286  6EF7               	movwf	tblptrh,c
 10524  003288  6AF8               	clrf	tblptru,c
 10525  00328A  0E00               	movlw	0
 10526  00328C  22F8               	addwfc	tblptru,f,c
 10527  00328E  0009               	tblrd		*+
 10528  003290  0EA1               	movlw	161
 10529  003292  5EF5               	subwf	tablat,f,c
 10530  003294  0009               	tblrd		*+
 10531  003296  0E0F               	movlw	15
 10532  003298  5AF5               	subwfb	tablat,f,c
 10533  00329A  B0D8               	btfsc	status,0,c
 10534  00329C  D05C               	goto	i1l6854
 10535  00329E  5032               	movf	IR_CheckCode@i,w,c
 10536  0032A0  0D02               	mullw	2
 10537  0032A2  0E00               	movlw	0
 10538  0032A4  24F3               	addwf	prodl,w,c
 10539  0032A6  6EF6               	movwf	tblptrl,c
 10540  0032A8  0E24               	movlw	36
 10541  0032AA  20F4               	addwfc	prodh,w,c
 10542  0032AC  6EF7               	movwf	tblptrh,c
 10543  0032AE  6AF8               	clrf	tblptru,c
 10544  0032B0  0E00               	movlw	0
 10545  0032B2  22F8               	addwfc	tblptru,f,c
 10546  0032B4  0009               	tblrd		*+
 10547  0032B6  0EE9               	movlw	233
 10548  0032B8  5EF5               	subwf	tablat,f,c
 10549  0032BA  0009               	tblrd		*+
 10550  0032BC  0E03               	movlw	3
 10551  0032BE  5AF5               	subwfb	tablat,f,c
 10552  0032C0  A0D8               	btfss	status,0,c
 10553  0032C2  D049               	goto	i1l6854
 10554                           
 10555                           ;IR.c: 184: {
 10556                           ;IR.c: 185: Low = (double)IR_SavedTiming[i] * (1.0 - 0.75);
 10557  0032C4  5032               	movf	IR_CheckCode@i,w,c
 10558  0032C6  0D02               	mullw	2
 10559  0032C8  0E00               	movlw	0
 10560  0032CA  24F3               	addwf	prodl,w,c
 10561  0032CC  6EF6               	movwf	tblptrl,c
 10562  0032CE  0E24               	movlw	36
 10563  0032D0  20F4               	addwfc	prodh,w,c
 10564  0032D2  6EF7               	movwf	tblptrh,c
 10565  0032D4  6AF8               	clrf	tblptru,c
 10566  0032D6  0E00               	movlw	0
 10567  0032D8  22F8               	addwfc	tblptru,f,c
 10568  0032DA  0009               	tblrd		*+
 10569  0032DC  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10570  0032E0  000A               	tblrd		*-
 10571  0032E2  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10572  0032E6  EC6C  F00C         	call	i1___lwtoft	;wreg free
 10573  0032EA  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10574  0032EE  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10575  0032F2  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10576  0032F6  0E00               	movlw	0
 10577  0032F8  6E1E               	movwf	i1___ftmul@f2,c
 10578  0032FA  0E80               	movlw	128
 10579  0032FC  6E1F               	movwf	i1___ftmul@f2+1,c
 10580  0032FE  0E3E               	movlw	62
 10581  003300  6E20               	movwf	i1___ftmul@f2+2,c
 10582  003302  EC6D  F002         	call	i1___ftmul	;wreg free
 10583  003306  C01B  F02C         	movff	?i1___ftmul,IR_CheckCode@Low
 10584  00330A  C01C  F02D         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10585  00330E  C01D  F02E         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10586                           
 10587                           ;IR.c: 186: High = (double)IR_SavedTiming[i] * (1.0 + 0.75);
 10588  003312  5032               	movf	IR_CheckCode@i,w,c
 10589  003314  0D02               	mullw	2
 10590  003316  0E00               	movlw	0
 10591  003318  24F3               	addwf	prodl,w,c
 10592  00331A  6EF6               	movwf	tblptrl,c
 10593  00331C  0E24               	movlw	36
 10594  00331E  20F4               	addwfc	prodh,w,c
 10595  003320  6EF7               	movwf	tblptrh,c
 10596  003322  6AF8               	clrf	tblptru,c
 10597  003324  0E00               	movlw	0
 10598  003326  22F8               	addwfc	tblptru,f,c
 10599  003328  0009               	tblrd		*+
 10600  00332A  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10601  00332E  000A               	tblrd		*-
 10602  003330  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10603  003334  EC6C  F00C         	call	i1___lwtoft	;wreg free
 10604  003338  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10605  00333C  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10606  003340  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10607  003344  0E00               	movlw	0
 10608  003346  6E1E               	movwf	i1___ftmul@f2,c
 10609  003348  0EE0               	movlw	224
 10610  00334A  6E1F               	movwf	i1___ftmul@f2+1,c
 10611  00334C  0E3F               	movlw	63
 10612  00334E  6E20               	movwf	i1___ftmul@f2+2,c
 10613  003350  EC6D  F002         	call	i1___ftmul	;wreg free
 10614  003354  D048               	goto	L4
 10615  003356                     i1l6854:
 10616                           
 10617                           ;IR.c: 188: else
 10618                           ;IR.c: 189: {
 10619                           ;IR.c: 190: Low = (double)IR_SavedTiming[i] * (1.0 - 1.1);
 10620  003356  5032               	movf	IR_CheckCode@i,w,c
 10621  003358  0D02               	mullw	2
 10622  00335A  0E00               	movlw	0
 10623  00335C  24F3               	addwf	prodl,w,c
 10624  00335E  6EF6               	movwf	tblptrl,c
 10625  003360  0E24               	movlw	36
 10626  003362  20F4               	addwfc	prodh,w,c
 10627  003364  6EF7               	movwf	tblptrh,c
 10628  003366  6AF8               	clrf	tblptru,c
 10629  003368  0E00               	movlw	0
 10630  00336A  22F8               	addwfc	tblptru,f,c
 10631  00336C  0009               	tblrd		*+
 10632  00336E  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10633  003372  000A               	tblrd		*-
 10634  003374  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10635  003378  EC6C  F00C         	call	i1___lwtoft	;wreg free
 10636  00337C  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10637  003380  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10638  003384  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10639  003388  0ECD               	movlw	205
 10640  00338A  6E1E               	movwf	i1___ftmul@f2,c
 10641  00338C  0ECC               	movlw	204
 10642  00338E  6E1F               	movwf	i1___ftmul@f2+1,c
 10643  003390  0EBD               	movlw	189
 10644  003392  6E20               	movwf	i1___ftmul@f2+2,c
 10645  003394  EC6D  F002         	call	i1___ftmul	;wreg free
 10646  003398  C01B  F02C         	movff	?i1___ftmul,IR_CheckCode@Low
 10647  00339C  C01C  F02D         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10648  0033A0  C01D  F02E         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10649                           
 10650                           ;IR.c: 191: High = (double)IR_SavedTiming[i] * (1.0 + 1.1);
 10651  0033A4  5032               	movf	IR_CheckCode@i,w,c
 10652  0033A6  0D02               	mullw	2
 10653  0033A8  0E00               	movlw	0
 10654  0033AA  24F3               	addwf	prodl,w,c
 10655  0033AC  6EF6               	movwf	tblptrl,c
 10656  0033AE  0E24               	movlw	36
 10657  0033B0  20F4               	addwfc	prodh,w,c
 10658  0033B2  6EF7               	movwf	tblptrh,c
 10659  0033B4  6AF8               	clrf	tblptru,c
 10660  0033B6  0E00               	movlw	0
 10661  0033B8  22F8               	addwfc	tblptru,f,c
 10662  0033BA  0009               	tblrd		*+
 10663  0033BC  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10664  0033C0  000A               	tblrd		*-
 10665  0033C2  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10666  0033C6  EC6C  F00C         	call	i1___lwtoft	;wreg free
 10667  0033CA  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10668  0033CE  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10669  0033D2  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10670  0033D6  0E66               	movlw	102
 10671  0033D8  6E1E               	movwf	i1___ftmul@f2,c
 10672  0033DA  0E06               	movlw	6
 10673  0033DC  6E1F               	movwf	i1___ftmul@f2+1,c
 10674  0033DE  0E40               	movlw	64
 10675  0033E0  6E20               	movwf	i1___ftmul@f2+2,c
 10676  0033E2  EC6D  F002         	call	i1___ftmul	;wreg free
 10677  0033E6                     L4:
 10678  0033E6  C01B  F02F         	movff	?i1___ftmul,IR_CheckCode@High
 10679  0033EA  C01C  F030         	movff	?i1___ftmul+1,IR_CheckCode@High+1
 10680  0033EE  C01D  F031         	movff	?i1___ftmul+2,IR_CheckCode@High+2
 10681  0033F2  D000               	goto	i1l6856
 10682  0033F4                     i1l6856:
 10683                           
 10684                           ;IR.c: 192: }
 10685                           ;IR.c: 194: if((double)IR_DataTiming[i] < Low || (double)IR_DataTiming[i] > High )
 10686  0033F4  5032               	movf	IR_CheckCode@i,w,c
 10687  0033F6  0D02               	mullw	2
 10688  0033F8  0E00               	movlw	low _IR_DataTiming
 10689  0033FA  24F3               	addwf	prodl,w,c
 10690  0033FC  6ED9               	movwf	fsr2l,c
 10691  0033FE  0E02               	movlw	high _IR_DataTiming
 10692  003400  20F4               	addwfc	prodh,w,c
 10693  003402  6EDA               	movwf	fsr2h,c
 10694  003404  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10695  003408  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10696  00340C  EC6C  F00C         	call	i1___lwtoft	;wreg free
 10697  003410  C009  F00C         	movff	?i1___lwtoft,i1___ftge@ff1
 10698  003414  C00A  F00D         	movff	?i1___lwtoft+1,i1___ftge@ff1+1
 10699  003418  C00B  F00E         	movff	?i1___lwtoft+2,i1___ftge@ff1+2
 10700  00341C  C02C  F00F         	movff	IR_CheckCode@Low,i1___ftge@ff2
 10701  003420  C02D  F010         	movff	IR_CheckCode@Low+1,i1___ftge@ff2+1
 10702  003424  C02E  F011         	movff	IR_CheckCode@Low+2,i1___ftge@ff2+2
 10703  003428  EC55  F007         	call	i1___ftge	;wreg free
 10704  00342C  A0D8               	btfss	status,0,c
 10705  00342E  D01E               	goto	i1l6860
 10706  003430  C02F  F00C         	movff	IR_CheckCode@High,i1___ftge@ff1
 10707  003434  C030  F00D         	movff	IR_CheckCode@High+1,i1___ftge@ff1+1
 10708  003438  C031  F00E         	movff	IR_CheckCode@High+2,i1___ftge@ff1+2
 10709  00343C  5032               	movf	IR_CheckCode@i,w,c
 10710  00343E  0D02               	mullw	2
 10711  003440  0E00               	movlw	low _IR_DataTiming
 10712  003442  24F3               	addwf	prodl,w,c
 10713  003444  6ED9               	movwf	fsr2l,c
 10714  003446  0E02               	movlw	high _IR_DataTiming
 10715  003448  20F4               	addwfc	prodh,w,c
 10716  00344A  6EDA               	movwf	fsr2h,c
 10717  00344C  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10718  003450  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10719  003454  EC6C  F00C         	call	i1___lwtoft	;wreg free
 10720  003458  C009  F00F         	movff	?i1___lwtoft,i1___ftge@ff2
 10721  00345C  C00A  F010         	movff	?i1___lwtoft+1,i1___ftge@ff2+1
 10722  003460  C00B  F011         	movff	?i1___lwtoft+2,i1___ftge@ff2+2
 10723  003464  EC55  F007         	call	i1___ftge	;wreg free
 10724  003468  B0D8               	btfsc	status,0,c
 10725  00346A  D002               	goto	i1l6864
 10726  00346C                     i1l6860:
 10727                           
 10728                           ;IR.c: 195: {
 10729                           ;IR.c: 196: return 0;
 10730  00346C  0E00               	movlw	0
 10731  00346E  0012               	return	
 10732  003470                     i1l6864:
 10733  003470  2A32               	incf	IR_CheckCode@i,f,c
 10734  003472  D000               	goto	i1l6866
 10735  003474                     i1l6866:
 10736  003474  505C               	movf	_IR_CodeSize,w,c
 10737  003476  5C32               	subwf	IR_CheckCode@i,w,c
 10738  003478  A0D8               	btfss	status,0,c
 10739  00347A  D6A2               	goto	i1l6844
 10740                           
 10741                           ;IR.c: 197: }
 10742                           ;IR.c: 198: }
 10743                           ;IR.c: 199: return 1;
 10744  00347C  0E01               	movlw	1
 10745                           
 10746                           ;IR.c: 200: }
 10747  00347E  0012               	return	
 10748  003480                     i1l6874:
 10749                           
 10750                           ;IR.c: 201: else
 10751                           ;IR.c: 202: {
 10752                           ;IR.c: 203: if(IR_DataPlace >= 40)
 10753  003480  0E27               	movlw	39
 10754  003482  645D               	cpfsgt	_IR_DataPlace,c
 10755  003484  D06F               	goto	i1l6912
 10756                           
 10757                           ;IR.c: 204: {
 10758                           ;IR.c: 205: for(i=0;i<IR_DataPlace;i++)
 10759  003486  0E00               	movlw	0
 10760  003488  6E32               	movwf	IR_CheckCode@i,c
 10761  00348A  D04A               	goto	i1l6896
 10762  00348C                     i1l6878:
 10763                           
 10764                           ;IR.c: 206: {
 10765                           ;IR.c: 207: if(IR_DataTiming[i] < 40)
 10766  00348C  5032               	movf	IR_CheckCode@i,w,c
 10767  00348E  0D02               	mullw	2
 10768  003490  0E00               	movlw	low _IR_DataTiming
 10769  003492  24F3               	addwf	prodl,w,c
 10770  003494  6ED9               	movwf	fsr2l,c
 10771  003496  0E02               	movlw	high _IR_DataTiming
 10772  003498  20F4               	addwfc	prodh,w,c
 10773  00349A  6EDA               	movwf	fsr2h,c
 10774  00349C  0E01               	movlw	1
 10775  00349E  50DB               	movf	plusw2,w,c
 10776  0034A0  E107               	bnz	i1l6886
 10777  0034A2  0E28               	movlw	40
 10778  0034A4  5CDE               	subwf	postinc2,w,c
 10779  0034A6  B0D8               	btfsc	status,0,c
 10780  0034A8  D003               	goto	i1l6886
 10781                           
 10782                           ;IR.c: 208: {
 10783                           ;IR.c: 210: return 0;
 10784  0034AA  0E00               	movlw	0
 10785  0034AC  0012               	return	
 10786                           
 10787                           ;IR.c: 211: }
 10788  0034AE  D036               	goto	i1l6894
 10789  0034B0                     i1l6886:
 10790                           
 10791                           ;IR.c: 212: else if(IR_DataTiming[i] < 200)
 10792  0034B0  5032               	movf	IR_CheckCode@i,w,c
 10793  0034B2  0D02               	mullw	2
 10794  0034B4  0E00               	movlw	low _IR_DataTiming
 10795  0034B6  24F3               	addwf	prodl,w,c
 10796  0034B8  6ED9               	movwf	fsr2l,c
 10797  0034BA  0E02               	movlw	high _IR_DataTiming
 10798  0034BC  20F4               	addwfc	prodh,w,c
 10799  0034BE  6EDA               	movwf	fsr2h,c
 10800  0034C0  0E01               	movlw	1
 10801  0034C2  50DB               	movf	plusw2,w,c
 10802  0034C4  E110               	bnz	i1l6890
 10803  0034C6  0EC8               	movlw	200
 10804  0034C8  5CDE               	subwf	postinc2,w,c
 10805  0034CA  B0D8               	btfsc	status,0,c
 10806  0034CC  D00C               	goto	i1l6890
 10807                           
 10808                           ;IR.c: 213: {
 10809                           ;IR.c: 214: IR_DataTiming[i] +=350;
 10810  0034CE  5032               	movf	IR_CheckCode@i,w,c
 10811  0034D0  0D02               	mullw	2
 10812  0034D2  0E00               	movlw	low _IR_DataTiming
 10813  0034D4  24F3               	addwf	prodl,w,c
 10814  0034D6  6ED9               	movwf	fsr2l,c
 10815  0034D8  0E02               	movlw	high _IR_DataTiming
 10816  0034DA  20F4               	addwfc	prodh,w,c
 10817  0034DC  6EDA               	movwf	fsr2h,c
 10818  0034DE  0E5E               	movlw	94
 10819  0034E0  26DE               	addwf	postinc2,f,c
 10820  0034E2  0E01               	movlw	1
 10821  0034E4  D019               	goto	L5
 10822  0034E6                     i1l6890:
 10823                           
 10824                           ;IR.c: 216: else if(IR_DataTiming[i] < 320)
 10825  0034E6  5032               	movf	IR_CheckCode@i,w,c
 10826  0034E8  0D02               	mullw	2
 10827  0034EA  0E00               	movlw	low _IR_DataTiming
 10828  0034EC  24F3               	addwf	prodl,w,c
 10829  0034EE  6ED9               	movwf	fsr2l,c
 10830  0034F0  0E02               	movlw	high _IR_DataTiming
 10831  0034F2  20F4               	addwfc	prodh,w,c
 10832  0034F4  6EDA               	movwf	fsr2h,c
 10833  0034F6  0E40               	movlw	64
 10834  0034F8  5CDE               	subwf	postinc2,w,c
 10835  0034FA  0E01               	movlw	1
 10836  0034FC  58DE               	subwfb	postinc2,w,c
 10837  0034FE  B0D8               	btfsc	status,0,c
 10838  003500  D00D               	goto	i1l6894
 10839                           
 10840                           ;IR.c: 217: {
 10841                           ;IR.c: 218: IR_DataTiming[i] +=150;
 10842  003502  5032               	movf	IR_CheckCode@i,w,c
 10843  003504  0D02               	mullw	2
 10844  003506  0E00               	movlw	low _IR_DataTiming
 10845  003508  24F3               	addwf	prodl,w,c
 10846  00350A  6ED9               	movwf	fsr2l,c
 10847  00350C  0E02               	movlw	high _IR_DataTiming
 10848  00350E  20F4               	addwfc	prodh,w,c
 10849  003510  6EDA               	movwf	fsr2h,c
 10850  003512  0E96               	movlw	150
 10851  003514  26DE               	addwf	postinc2,f,c
 10852  003516  0E00               	movlw	0
 10853  003518                     L5:
 10854  003518  22DD               	addwfc	postdec2,f,c
 10855  00351A  D000               	goto	i1l6894
 10856  00351C                     i1l6894:
 10857  00351C  2A32               	incf	IR_CheckCode@i,f,c
 10858  00351E  D000               	goto	i1l6896
 10859  003520                     i1l6896:
 10860  003520  505D               	movf	_IR_DataPlace,w,c
 10861  003522  5C32               	subwf	IR_CheckCode@i,w,c
 10862  003524  A0D8               	btfss	status,0,c
 10863  003526  D7B2               	goto	i1l6878
 10864                           
 10865                           ;IR.c: 219: }
 10866                           ;IR.c: 220: }
 10867                           ;IR.c: 221: for(i=IR_DataPlace;i<128;i++)
 10868  003528  C05D  F032         	movff	_IR_DataPlace,IR_CheckCode@i
 10869  00352C  D00E               	goto	i1l6906
 10870  00352E  D010               	goto	i1l562
 10871  003530                     i1l6902:
 10872                           
 10873                           ;IR.c: 222: {
 10874                           ;IR.c: 224: IR_DataTiming[i] = 0;
 10875  003530  5032               	movf	IR_CheckCode@i,w,c
 10876  003532  0D02               	mullw	2
 10877  003534  0E00               	movlw	low _IR_DataTiming
 10878  003536  24F3               	addwf	prodl,w,c
 10879  003538  6ED9               	movwf	fsr2l,c
 10880  00353A  0E02               	movlw	high _IR_DataTiming
 10881  00353C  20F4               	addwfc	prodh,w,c
 10882  00353E  6EDA               	movwf	fsr2h,c
 10883  003540  0E00               	movlw	0
 10884  003542  6EDE               	movwf	postinc2,c
 10885  003544  0E00               	movlw	0
 10886  003546  6EDD               	movwf	postdec2,c
 10887  003548  2A32               	incf	IR_CheckCode@i,f,c
 10888  00354A                     i1l6906:
 10889  00354A  0E7F               	movlw	127
 10890  00354C  6432               	cpfsgt	IR_CheckCode@i,c
 10891  00354E  D7F0               	goto	i1l6902
 10892  003550                     i1l562:
 10893                           
 10894                           ;IR.c: 225: }
 10895                           ;IR.c: 228: IR_CodeSize = IR_DataPlace;
 10896  003550  C05D  F05C         	movff	_IR_DataPlace,_IR_CodeSize
 10897                           
 10898                           ;IR.c: 229: IR_Saved = 90;
 10899  003554  0E5A               	movlw	90
 10900  003556  0100               	movlb	0	; () banked
 10901  003558  6FD0               	movwf	_IR_Saved& (0+255),b
 10902                           
 10903                           ; BSR set to: 0
 10904                           ;IR.c: 230: Flash_Status = FSH_Write_IR_RF();
 10905  00355A  ECC6  F016         	call	_FSH_Write_IR_RF	;wreg free
 10906  00355E  0100               	movlb	0	; () banked
 10907  003560  6FC5               	movwf	_Flash_Status& (0+255),b
 10908  003562  D000               	goto	i1l6912
 10909  003564                     i1l6912:
 10910                           
 10911                           ;IR.c: 231: }
 10912                           ;IR.c: 232: return 0;
 10913  003564  0E00               	movlw	0
 10914  003566  0012               	return	
 10915  003568  0012               	return		;funcret
 10916  00356A                     __end_of_IR_CheckCode:
 10917                           	opt stack 0
 10918                           pclatu	equ	0xFFB
 10919                           pclath	equ	0xFFA
 10920                           tblptru	equ	0xFF8
 10921                           tblptrh	equ	0xFF7
 10922                           tblptrl	equ	0xFF6
 10923                           tablat	equ	0xFF5
 10924                           prodh	equ	0xFF4
 10925                           prodl	equ	0xFF3
 10926                           intcon	equ	0xFF2
 10927                           intcon2	equ	0xFF1
 10928                           intcon3	equ	0xFF0
 10929                           postinc0	equ	0xFEE
 10930                           fsr0h	equ	0xFEA
 10931                           fsr0l	equ	0xFE9
 10932                           wreg	equ	0xFE8
 10933                           postdec1	equ	0xFE5
 10934                           fsr1h	equ	0xFE2
 10935                           fsr1l	equ	0xFE1
 10936                           bsr	equ	0xFE0
 10937                           postinc2	equ	0xFDE
 10938                           postdec2	equ	0xFDD
 10939                           plusw2	equ	0xFDB
 10940                           fsr2h	equ	0xFDA
 10941                           fsr2l	equ	0xFD9
 10942                           status	equ	0xFD8
 10943                           
 10944 ;; *************** function i1___ftge *****************
 10945 ;; Defined at:
 10946 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 10947 ;; Parameters:    Size  Location     Type
 10948 ;;  ff1             3   11[COMRAM] float 
 10949 ;;  ff2             3   14[COMRAM] float 
 10950 ;; Auto vars:     Size  Location     Type
 10951 ;;		None
 10952 ;; Return value:  Size  Location     Type
 10953 ;;		None               void
 10954 ;; Registers used:
 10955 ;;		wreg, status,2, status,0
 10956 ;; Tracked objects:
 10957 ;;		On entry : 0/0
 10958 ;;		On exit  : 0/0
 10959 ;;		Unchanged: 0/0
 10960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10961 ;;      Params:         6       0       0       0       0
 10962 ;;      Locals:         0       0       0       0       0
 10963 ;;      Temps:          3       0       0       0       0
 10964 ;;      Totals:         9       0       0       0       0
 10965 ;;Total ram usage:        9 bytes
 10966 ;; Hardware stack levels used:    1
 10967 ;; Hardware stack levels required when called:    6
 10968 ;; This function calls:
 10969 ;;		Nothing
 10970 ;; This function is called by:
 10971 ;;		_IR_CheckCode
 10972 ;; This function uses a non-reentrant model
 10973 ;;
 10974                           
 10975                           	psect	text71
 10976  000EAA                     __ptext71:
 10977                           	opt stack 0
 10978  000EAA                     i1___ftge:
 10979                           	opt stack 16
 10980                           
 10981                           ;incstack = 0
 10982  000EAA  AE0E               	btfss	i1___ftge@ff1+2,7,c
 10983  000EAC  D017               	goto	i1l6484
 10984  000EAE  C00C  F012         	movff	i1___ftge@ff1,??i1___ftge
 10985  000EB2  C00D  F013         	movff	i1___ftge@ff1+1,??i1___ftge+1
 10986  000EB6  C00E  F014         	movff	i1___ftge@ff1+2,??i1___ftge+2
 10987  000EBA  1E12               	comf	??i1___ftge,f,c
 10988  000EBC  1E13               	comf	??i1___ftge+1,f,c
 10989  000EBE  1E14               	comf	??i1___ftge+2,f,c
 10990  000EC0  2A12               	incf	??i1___ftge,f,c
 10991  000EC2  0E00               	movlw	0
 10992  000EC4  2213               	addwfc	??i1___ftge+1,f,c
 10993  000EC6  2214               	addwfc	??i1___ftge+2,f,c
 10994  000EC8  0E00               	movlw	0
 10995  000ECA  2412               	addwf	??i1___ftge,w,c
 10996  000ECC  6E0C               	movwf	i1___ftge@ff1,c
 10997  000ECE  0E00               	movlw	0
 10998  000ED0  2013               	addwfc	??i1___ftge+1,w,c
 10999  000ED2  6E0D               	movwf	i1___ftge@ff1+1,c
 11000  000ED4  0E80               	movlw	128
 11001  000ED6  2014               	addwfc	??i1___ftge+2,w,c
 11002  000ED8  6E0E               	movwf	i1___ftge@ff1+2,c
 11003  000EDA  D000               	goto	i1l6484
 11004  000EDC                     i1l6484:
 11005  000EDC  AE11               	btfss	i1___ftge@ff2+2,7,c
 11006  000EDE  D017               	goto	i1l6488
 11007  000EE0  C00F  F012         	movff	i1___ftge@ff2,??i1___ftge
 11008  000EE4  C010  F013         	movff	i1___ftge@ff2+1,??i1___ftge+1
 11009  000EE8  C011  F014         	movff	i1___ftge@ff2+2,??i1___ftge+2
 11010  000EEC  1E12               	comf	??i1___ftge,f,c
 11011  000EEE  1E13               	comf	??i1___ftge+1,f,c
 11012  000EF0  1E14               	comf	??i1___ftge+2,f,c
 11013  000EF2  2A12               	incf	??i1___ftge,f,c
 11014  000EF4  0E00               	movlw	0
 11015  000EF6  2213               	addwfc	??i1___ftge+1,f,c
 11016  000EF8  2214               	addwfc	??i1___ftge+2,f,c
 11017  000EFA  0E00               	movlw	0
 11018  000EFC  2412               	addwf	??i1___ftge,w,c
 11019  000EFE  6E0F               	movwf	i1___ftge@ff2,c
 11020  000F00  0E00               	movlw	0
 11021  000F02  2013               	addwfc	??i1___ftge+1,w,c
 11022  000F04  6E10               	movwf	i1___ftge@ff2+1,c
 11023  000F06  0E80               	movlw	128
 11024  000F08  2014               	addwfc	??i1___ftge+2,w,c
 11025  000F0A  6E11               	movwf	i1___ftge@ff2+2,c
 11026  000F0C  D000               	goto	i1l6488
 11027  000F0E                     i1l6488:
 11028  000F0E  0E00               	movlw	0
 11029  000F10  1A0C               	xorwf	i1___ftge@ff1,f,c
 11030  000F12  0E00               	movlw	0
 11031  000F14  1A0D               	xorwf	i1___ftge@ff1+1,f,c
 11032  000F16  0E80               	movlw	128
 11033  000F18  1A0E               	xorwf	i1___ftge@ff1+2,f,c
 11034  000F1A  0E00               	movlw	0
 11035  000F1C  1A0F               	xorwf	i1___ftge@ff2,f,c
 11036  000F1E  0E00               	movlw	0
 11037  000F20  1A10               	xorwf	i1___ftge@ff2+1,f,c
 11038  000F22  0E80               	movlw	128
 11039  000F24  1A11               	xorwf	i1___ftge@ff2+2,f,c
 11040  000F26  500F               	movf	i1___ftge@ff2,w,c
 11041  000F28  5C0C               	subwf	i1___ftge@ff1,w,c
 11042  000F2A  5010               	movf	i1___ftge@ff2+1,w,c
 11043  000F2C  580D               	subwfb	i1___ftge@ff1+1,w,c
 11044  000F2E  5011               	movf	i1___ftge@ff2+2,w,c
 11045  000F30  580E               	subwfb	i1___ftge@ff1+2,w,c
 11046  000F32  B0D8               	btfsc	status,0,c
 11047  000F34  D002               	goto	i1l6494
 11048  000F36  90D8               	bcf	status,0,c
 11049  000F38  0012               	return	
 11050  000F3A                     i1l6494:
 11051  000F3A  80D8               	bsf	status,0,c
 11052  000F3C  0012               	return	
 11053  000F3E  0012               	return		;funcret
 11054  000F40                     __end_ofi1___ftge:
 11055                           	opt stack 0
 11056                           pclatu	equ	0xFFB
 11057                           pclath	equ	0xFFA
 11058                           tblptru	equ	0xFF8
 11059                           tblptrh	equ	0xFF7
 11060                           tblptrl	equ	0xFF6
 11061                           tablat	equ	0xFF5
 11062                           prodh	equ	0xFF4
 11063                           prodl	equ	0xFF3
 11064                           intcon	equ	0xFF2
 11065                           intcon2	equ	0xFF1
 11066                           intcon3	equ	0xFF0
 11067                           postinc0	equ	0xFEE
 11068                           fsr0h	equ	0xFEA
 11069                           fsr0l	equ	0xFE9
 11070                           wreg	equ	0xFE8
 11071                           postdec1	equ	0xFE5
 11072                           fsr1h	equ	0xFE2
 11073                           fsr1l	equ	0xFE1
 11074                           bsr	equ	0xFE0
 11075                           postinc2	equ	0xFDE
 11076                           postdec2	equ	0xFDD
 11077                           plusw2	equ	0xFDB
 11078                           fsr2h	equ	0xFDA
 11079                           fsr2l	equ	0xFD9
 11080                           status	equ	0xFD8
 11081                           
 11082 ;; *************** function _FSH_Write_IR_RF *****************
 11083 ;; Defined at:
 11084 ;;		line 183 in file "FLASH.c"
 11085 ;; Parameters:    Size  Location     Type
 11086 ;;		None
 11087 ;; Auto vars:     Size  Location     Type
 11088 ;;  i               2   32[COMRAM] unsigned int 
 11089 ;;  FlashWastein    2   28[COMRAM] unsigned int 
 11090 ;;  WriteTries      1   34[COMRAM] unsigned char 
 11091 ;;  status          1   31[COMRAM] unsigned char 
 11092 ;;  j               1   30[COMRAM] unsigned char 
 11093 ;;  lowint          1   27[COMRAM] unsigned char 
 11094 ;;  highint         1   26[COMRAM] unsigned char 
 11095 ;; Return value:  Size  Location     Type
 11096 ;;                  1    wreg      unsigned char 
 11097 ;; Registers used:
 11098 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11099 ;; Tracked objects:
 11100 ;;		On entry : 0/0
 11101 ;;		On exit  : 0/0
 11102 ;;		Unchanged: 0/0
 11103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11104 ;;      Params:         0       0       0       0       0
 11105 ;;      Locals:         9       0       0       0       0
 11106 ;;      Temps:          6       0       0       0       0
 11107 ;;      Totals:        15       0       0       0       0
 11108 ;;Total ram usage:       15 bytes
 11109 ;; Hardware stack levels used:    1
 11110 ;; Hardware stack levels required when called:    9
 11111 ;; This function calls:
 11112 ;;		_FSH_AddressToBlock
 11113 ;;		_FSH_EraseBlock
 11114 ;;		_FSH_Sequence
 11115 ;;		_FSH_VerifyWriteIntArray
 11116 ;;		_FSH_WriteIntArray
 11117 ;;		_IR_ResetData
 11118 ;;		_MSC_BufferCopyIntConst
 11119 ;;		_RF_ResetData
 11120 ;; This function is called by:
 11121 ;;		_IR_CheckCode
 11122 ;; This function uses a non-reentrant model
 11123 ;;
 11124                           
 11125                           	psect	text72
 11126  002D8C                     __ptext72:
 11127                           	opt stack 0
 11128  002D8C                     _FSH_Write_IR_RF:
 11129                           	opt stack 13
 11130                           
 11131                           ;FLASH.c: 185: unsigned int i;
 11132                           ;FLASH.c: 186: unsigned char j;
 11133                           ;FLASH.c: 187: unsigned char highint = INTCONbits.GIE;
 11134                           
 11135                           ;incstack = 0
 11136  002D8C  0E00               	movlw	0
 11137  002D8E  BEF2               	btfsc	intcon,7,c	;volatile
 11138  002D90  0E01               	movlw	1
 11139  002D92  6E1B               	movwf	FSH_Write_IR_RF@highint,c
 11140                           
 11141                           ;FLASH.c: 188: unsigned char lowint = INTCONbits.PEIE;
 11142  002D94  0E00               	movlw	0
 11143  002D96  BCF2               	btfsc	intcon,6,c	;volatile
 11144  002D98  0E01               	movlw	1
 11145  002D9A  6E1C               	movwf	FSH_Write_IR_RF@lowint,c
 11146                           
 11147                           ;FLASH.c: 189: unsigned char WriteTries;
 11148                           ;FLASH.c: 190: unsigned char status = 0;
 11149  002D9C  0E00               	movlw	0
 11150  002D9E  6E20               	movwf	FSH_Write_IR_RF@status,c
 11151                           
 11152                           ;FLASH.c: 191: unsigned int FlashWasteindex = 0;
 11153  002DA0  0E00               	movlw	0
 11154  002DA2  6E1E               	movwf	FSH_Write_IR_RF@FlashWasteindex+1,c
 11155  002DA4  0E00               	movlw	0
 11156  002DA6  6E1D               	movwf	FSH_Write_IR_RF@FlashWasteindex,c
 11157                           
 11158                           ;FLASH.c: 193: INTCONbits.GIE = 0;
 11159  002DA8  9EF2               	bcf	intcon,7,c	;volatile
 11160                           
 11161                           ;FLASH.c: 194: INTCONbits.PEIE = 0;
 11162  002DAA  9CF2               	bcf	intcon,6,c	;volatile
 11163                           
 11164                           ;FLASH.c: 196: if(IR_Saved == 90 && RF_Saved == 90)
 11165  002DAC  0E5A               	movlw	90
 11166  002DAE  0100               	movlb	0	; () banked
 11167  002DB0  19D0               	xorwf	_IR_Saved& (0+255),w,b
 11168  002DB2  A4D8               	btfss	status,2,c
 11169  002DB4  D007               	goto	i1l5846
 11170                           
 11171                           ; BSR set to: 0
 11172  002DB6  0E5A               	movlw	90
 11173  002DB8  0100               	movlb	0	; () banked
 11174  002DBA  19D1               	xorwf	_RF_Saved& (0+255),w,b
 11175  002DBC  A4D8               	btfss	status,2,c
 11176  002DBE  D002               	goto	i1l5846
 11177  002DC0  D00B               	goto	i1l5850
 11178                           
 11179                           ; BSR set to: 0
 11180                           ;FLASH.c: 202: }
 11181                           
 11182                           ;FLASH.c: 201: goto END;
 11183                           
 11184                           ;FLASH.c: 200: RF_Saved = 91;
 11185                           
 11186                           ; BSR set to: 0
 11187                           ;FLASH.c: 197: {
 11188                           ;FLASH.c: 199: IR_Saved = 91;
 11189  002DC2  D012               	goto	i1l5852
 11190  002DC4                     i1l5846:
 11191                           
 11192                           ; BSR set to: 0
 11193                           ;FLASH.c: 203: else if(IR_Saved != 90 && RF_Saved != 90)
 11194  002DC4  0E5A               	movlw	90
 11195  002DC6  0100               	movlb	0	; () banked
 11196  002DC8  19D0               	xorwf	_IR_Saved& (0+255),w,b
 11197  002DCA  B4D8               	btfsc	status,2,c
 11198  002DCC  D00D               	goto	i1l5852
 11199                           
 11200                           ; BSR set to: 0
 11201  002DCE  0E5A               	movlw	90
 11202  002DD0  0100               	movlb	0	; () banked
 11203  002DD2  19D1               	xorwf	_RF_Saved& (0+255),w,b
 11204  002DD4  B4D8               	btfsc	status,2,c
 11205  002DD6  D008               	goto	i1l5852
 11206  002DD8                     i1l5850:
 11207                           
 11208                           ; BSR set to: 0
 11209                           ;FLASH.c: 204: {
 11210                           ;FLASH.c: 206: IR_Saved = 91;
 11211  002DD8  0E5B               	movlw	91
 11212  002DDA  0100               	movlb	0	; () banked
 11213  002DDC  6FD0               	movwf	_IR_Saved& (0+255),b
 11214                           
 11215                           ;FLASH.c: 207: RF_Saved = 91;
 11216  002DDE  0E5B               	movlw	91
 11217  002DE0  0100               	movlb	0	; () banked
 11218  002DE2  6FD1               	movwf	_RF_Saved& (0+255),b
 11219                           
 11220                           ;FLASH.c: 208: goto END;
 11221  002DE4  D1CC               	goto	i1l1185
 11222                           
 11223                           ; BSR set to: 0
 11224  002DE6  D000               	goto	i1l5852
 11225  002DE8                     i1l5852:
 11226                           
 11227                           ; BSR set to: 0
 11228                           ;FLASH.c: 209: }
 11229                           ;FLASH.c: 211: if(IR_Saved == 90)
 11230  002DE8  0E5A               	movlw	90
 11231  002DEA  0100               	movlb	0	; () banked
 11232  002DEC  19D0               	xorwf	_IR_Saved& (0+255),w,b
 11233  002DEE  A4D8               	btfss	status,2,c
 11234  002DF0  D017               	goto	i1l5858
 11235                           
 11236                           ; BSR set to: 0
 11237                           ;FLASH.c: 212: {
 11238                           ;FLASH.c: 214: RF_ResetData();
 11239  002DF2  EC76  F00E         	call	_RF_ResetData	;wreg free
 11240                           
 11241                           ;FLASH.c: 215: MSC_BufferCopyIntConst(&RF_SavedTiming,&RF_DataTiming, 128, 0);
 11242  002DF6  0E00               	movlw	0
 11243  002DF8  6E07               	movwf	MSC_BufferCopyIntConst@from,c
 11244  002DFA  0E25               	movlw	37
 11245  002DFC  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 11246  002DFE  0E00               	movlw	0
 11247  002E00  6E09               	movwf	MSC_BufferCopyIntConst@from+2,c
 11248  002E02  0E00               	movlw	low _RF_DataTiming
 11249  002E04  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 11250  002E06  0E03               	movlw	high _RF_DataTiming
 11251  002E08  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 11252  002E0A  0E00               	movlw	0
 11253  002E0C  6E0D               	movwf	MSC_BufferCopyIntConst@count+1,c
 11254  002E0E  0E80               	movlw	128
 11255  002E10  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 11256  002E12  0E00               	movlw	0
 11257  002E14  6E0F               	movwf	MSC_BufferCopyIntConst@shift+1,c
 11258  002E16  0E00               	movlw	0
 11259  002E18  6E0E               	movwf	MSC_BufferCopyIntConst@shift,c
 11260  002E1A  ECAD  F006         	call	_MSC_BufferCopyIntConst	;wreg free
 11261                           
 11262                           ;FLASH.c: 216: }
 11263  002E1E  D017               	goto	i1l5862
 11264  002E20                     i1l5858:
 11265                           
 11266                           ;FLASH.c: 217: else
 11267                           ;FLASH.c: 218: {
 11268                           ;FLASH.c: 220: IR_ResetData();
 11269  002E20  EC7D  F00E         	call	_IR_ResetData	;wreg free
 11270                           
 11271                           ;FLASH.c: 221: MSC_BufferCopyIntConst(&IR_SavedTiming,&IR_DataTiming, 128, 0);
 11272  002E24  0E00               	movlw	0
 11273  002E26  6E07               	movwf	MSC_BufferCopyIntConst@from,c
 11274  002E28  0E24               	movlw	36
 11275  002E2A  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 11276  002E2C  0E00               	movlw	0
 11277  002E2E  6E09               	movwf	MSC_BufferCopyIntConst@from+2,c
 11278  002E30  0E00               	movlw	low _IR_DataTiming
 11279  002E32  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 11280  002E34  0E02               	movlw	high _IR_DataTiming
 11281  002E36  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 11282  002E38  0E00               	movlw	0
 11283  002E3A  6E0D               	movwf	MSC_BufferCopyIntConst@count+1,c
 11284  002E3C  0E80               	movlw	128
 11285  002E3E  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 11286  002E40  0E00               	movlw	0
 11287  002E42  6E0F               	movwf	MSC_BufferCopyIntConst@shift+1,c
 11288  002E44  0E00               	movlw	0
 11289  002E46  6E0E               	movwf	MSC_BufferCopyIntConst@shift,c
 11290  002E48  ECAD  F006         	call	_MSC_BufferCopyIntConst	;wreg free
 11291  002E4C  D000               	goto	i1l5862
 11292  002E4E                     i1l5862:
 11293                           
 11294                           ;FLASH.c: 222: }
 11295                           ;FLASH.c: 224: FSH_EraseBlock(&IR_SavedTiming);
 11296  002E4E  0E00               	movlw	0
 11297  002E50  6E0E               	movwf	FSH_EraseBlock@Address,c
 11298  002E52  0E24               	movlw	36
 11299  002E54  6E0F               	movwf	FSH_EraseBlock@Address+1,c
 11300  002E56  0E00               	movlw	0
 11301  002E58  6E10               	movwf	FSH_EraseBlock@Address+2,c
 11302  002E5A  0E00               	movlw	0
 11303  002E5C  6E11               	movwf	FSH_EraseBlock@Address+3,c
 11304  002E5E  EC2B  F008         	call	_FSH_EraseBlock	;wreg free
 11305                           
 11306                           ;FLASH.c: 229: WriteTries = 1;
 11307  002E62  0E01               	movlw	1
 11308  002E64  6E23               	movwf	FSH_Write_IR_RF@WriteTries,c
 11309  002E66  D000               	goto	i1l5866
 11310  002E68                     i1l5866:
 11311                           
 11312                           ;FLASH.c: 233: FSH_WriteIntArray(&IR_SavedTiming[0]);
 11313  002E68  0E00               	movlw	0
 11314  002E6A  6E05               	movwf	FSH_WriteIntArray@Array,c
 11315  002E6C  0E24               	movlw	36
 11316  002E6E  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11317  002E70  0E00               	movlw	0
 11318  002E72  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11319  002E74  EC07  F007         	call	_FSH_WriteIntArray	;wreg free
 11320                           
 11321                           ;FLASH.c: 236: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[0],&IR_DataTiming[0]))
 11322  002E78  0E00               	movlw	0
 11323  002E7A  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11324  002E7C  0E24               	movlw	36
 11325  002E7E  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11326  002E80  0E00               	movlw	0
 11327  002E82  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11328  002E84  0E00               	movlw	low _IR_DataTiming
 11329  002E86  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11330  002E88  0E02               	movlw	high _IR_DataTiming
 11331  002E8A  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11332  002E8C  EC3C  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 11333  002E90  0900               	iorlw	0
 11334  002E92  A4D8               	btfss	status,2,c
 11335  002E94  D008               	goto	i1l5878
 11336                           
 11337                           ;FLASH.c: 237: {
 11338                           ;FLASH.c: 238: WriteTries++;
 11339  002E96  2A23               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11340                           
 11341                           ;FLASH.c: 239: if(WriteTries > 10)
 11342  002E98  0E0A               	movlw	10
 11343  002E9A  6423               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11344  002E9C  D7E5               	goto	i1l5866
 11345  002E9E  D160               	goto	i1l6018
 11346                           
 11347                           ;FLASH.c: 243: }
 11348                           
 11349                           ;FLASH.c: 242: goto END;
 11350                           
 11351                           ;FLASH.c: 240: {
 11352                           ;FLASH.c: 241: status = 0;
 11353  002EA0  D002               	goto	i1l5878
 11354                           
 11355                           ;FLASH.c: 244: else
 11356                           ;FLASH.c: 245: {
 11357                           ;FLASH.c: 246: goto REDO1;
 11358  002EA2  D7E2               	goto	i1l5866
 11359  002EA4  D000               	goto	i1l5878
 11360  002EA6                     i1l5878:
 11361                           
 11362                           ;FLASH.c: 247: }
 11363                           ;FLASH.c: 248: }
 11364                           ;FLASH.c: 251: WriteTries = 1;
 11365  002EA6  0E01               	movlw	1
 11366  002EA8  6E23               	movwf	FSH_Write_IR_RF@WriteTries,c
 11367  002EAA  D000               	goto	i1l5880
 11368  002EAC                     i1l5880:
 11369                           
 11370                           ;FLASH.c: 255: FSH_WriteIntArray(&IR_SavedTiming[32]);
 11371  002EAC  0E40               	movlw	64
 11372  002EAE  6E05               	movwf	FSH_WriteIntArray@Array,c
 11373  002EB0  0E24               	movlw	36
 11374  002EB2  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11375  002EB4  0E00               	movlw	0
 11376  002EB6  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11377  002EB8  EC07  F007         	call	_FSH_WriteIntArray	;wreg free
 11378                           
 11379                           ;FLASH.c: 258: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[32],&IR_DataTiming[32]))
 11380  002EBC  0E40               	movlw	64
 11381  002EBE  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11382  002EC0  0E24               	movlw	36
 11383  002EC2  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11384  002EC4  0E00               	movlw	0
 11385  002EC6  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11386  002EC8  0E40               	movlw	low (_IR_DataTiming+64)
 11387  002ECA  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11388  002ECC  0E02               	movlw	high (_IR_DataTiming+64)
 11389  002ECE  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11390  002ED0  EC3C  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 11391  002ED4  0900               	iorlw	0
 11392  002ED6  A4D8               	btfss	status,2,c
 11393  002ED8  D008               	goto	i1l5892
 11394                           
 11395                           ;FLASH.c: 259: {
 11396                           ;FLASH.c: 260: WriteTries++;
 11397  002EDA  2A23               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11398                           
 11399                           ;FLASH.c: 261: if(WriteTries > 10)
 11400  002EDC  0E0A               	movlw	10
 11401  002EDE  6423               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11402  002EE0  D7E5               	goto	i1l5880
 11403  002EE2  D13E               	goto	i1l6018
 11404                           
 11405                           ;FLASH.c: 265: }
 11406                           
 11407                           ;FLASH.c: 264: goto END;
 11408                           
 11409                           ;FLASH.c: 262: {
 11410                           ;FLASH.c: 263: status = 0;
 11411  002EE4  D002               	goto	i1l5892
 11412                           
 11413                           ;FLASH.c: 266: else
 11414                           ;FLASH.c: 267: {
 11415                           ;FLASH.c: 268: goto REDO2;
 11416  002EE6  D7E2               	goto	i1l5880
 11417  002EE8  D000               	goto	i1l5892
 11418  002EEA                     i1l5892:
 11419                           
 11420                           ;FLASH.c: 269: }
 11421                           ;FLASH.c: 270: }
 11422                           ;FLASH.c: 273: WriteTries = 1;
 11423  002EEA  0E01               	movlw	1
 11424  002EEC  6E23               	movwf	FSH_Write_IR_RF@WriteTries,c
 11425  002EEE  D000               	goto	i1l5894
 11426  002EF0                     i1l5894:
 11427                           
 11428                           ;FLASH.c: 277: FSH_WriteIntArray(&IR_SavedTiming[64]);
 11429  002EF0  0E80               	movlw	128
 11430  002EF2  6E05               	movwf	FSH_WriteIntArray@Array,c
 11431  002EF4  0E24               	movlw	36
 11432  002EF6  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11433  002EF8  0E00               	movlw	0
 11434  002EFA  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11435  002EFC  EC07  F007         	call	_FSH_WriteIntArray	;wreg free
 11436                           
 11437                           ;FLASH.c: 280: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[64],&IR_DataTiming[64]))
 11438  002F00  0E80               	movlw	128
 11439  002F02  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11440  002F04  0E24               	movlw	36
 11441  002F06  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11442  002F08  0E00               	movlw	0
 11443  002F0A  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11444  002F0C  0E80               	movlw	low (_IR_DataTiming+128)
 11445  002F0E  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11446  002F10  0E02               	movlw	high (_IR_DataTiming+128)
 11447  002F12  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11448  002F14  EC3C  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 11449  002F18  0900               	iorlw	0
 11450  002F1A  A4D8               	btfss	status,2,c
 11451  002F1C  D008               	goto	i1l5906
 11452                           
 11453                           ;FLASH.c: 281: {
 11454                           ;FLASH.c: 282: WriteTries++;
 11455  002F1E  2A23               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11456                           
 11457                           ;FLASH.c: 283: if(WriteTries > 10)
 11458  002F20  0E0A               	movlw	10
 11459  002F22  6423               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11460  002F24  D7E5               	goto	i1l5894
 11461  002F26  D11C               	goto	i1l6018
 11462                           
 11463                           ;FLASH.c: 287: }
 11464                           
 11465                           ;FLASH.c: 286: goto END;
 11466                           
 11467                           ;FLASH.c: 284: {
 11468                           ;FLASH.c: 285: status = 0;
 11469  002F28  D002               	goto	i1l5906
 11470                           
 11471                           ;FLASH.c: 288: else
 11472                           ;FLASH.c: 289: {
 11473                           ;FLASH.c: 290: goto REDO3;
 11474  002F2A  D7E2               	goto	i1l5894
 11475  002F2C  D000               	goto	i1l5906
 11476  002F2E                     i1l5906:
 11477                           
 11478                           ;FLASH.c: 291: }
 11479                           ;FLASH.c: 292: }
 11480                           ;FLASH.c: 295: WriteTries = 1;
 11481  002F2E  0E01               	movlw	1
 11482  002F30  6E23               	movwf	FSH_Write_IR_RF@WriteTries,c
 11483  002F32  D000               	goto	i1l5908
 11484  002F34                     i1l5908:
 11485                           
 11486                           ;FLASH.c: 299: FSH_WriteIntArray(&IR_SavedTiming[96]);
 11487  002F34  0EC0               	movlw	192
 11488  002F36  6E05               	movwf	FSH_WriteIntArray@Array,c
 11489  002F38  0E24               	movlw	36
 11490  002F3A  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11491  002F3C  0E00               	movlw	0
 11492  002F3E  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11493  002F40  EC07  F007         	call	_FSH_WriteIntArray	;wreg free
 11494                           
 11495                           ;FLASH.c: 302: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[96],&IR_DataTiming[96]))
 11496  002F44  0EC0               	movlw	192
 11497  002F46  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11498  002F48  0E24               	movlw	36
 11499  002F4A  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11500  002F4C  0E00               	movlw	0
 11501  002F4E  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11502  002F50  0EC0               	movlw	low (_IR_DataTiming+192)
 11503  002F52  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11504  002F54  0E02               	movlw	high (_IR_DataTiming+192)
 11505  002F56  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11506  002F58  EC3C  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 11507  002F5C  0900               	iorlw	0
 11508  002F5E  A4D8               	btfss	status,2,c
 11509  002F60  D008               	goto	i1l5920
 11510                           
 11511                           ;FLASH.c: 303: {
 11512                           ;FLASH.c: 304: WriteTries++;
 11513  002F62  2A23               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11514                           
 11515                           ;FLASH.c: 305: if(WriteTries > 10)
 11516  002F64  0E0A               	movlw	10
 11517  002F66  6423               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11518  002F68  D7E5               	goto	i1l5908
 11519  002F6A  D0FA               	goto	i1l6018
 11520                           
 11521                           ;FLASH.c: 309: }
 11522                           
 11523                           ;FLASH.c: 308: goto END;
 11524                           
 11525                           ;FLASH.c: 306: {
 11526                           ;FLASH.c: 307: status = 0;
 11527  002F6C  D002               	goto	i1l5920
 11528                           
 11529                           ;FLASH.c: 310: else
 11530                           ;FLASH.c: 311: {
 11531                           ;FLASH.c: 312: goto REDO4;
 11532  002F6E  D7E2               	goto	i1l5908
 11533  002F70  D000               	goto	i1l5920
 11534  002F72                     i1l5920:
 11535                           
 11536                           ;FLASH.c: 313: }
 11537                           ;FLASH.c: 314: }
 11538                           ;FLASH.c: 317: WriteTries = 1;
 11539  002F72  0E01               	movlw	1
 11540  002F74  6E23               	movwf	FSH_Write_IR_RF@WriteTries,c
 11541  002F76  D000               	goto	i1l5922
 11542  002F78                     i1l5922:
 11543                           
 11544                           ;FLASH.c: 321: FSH_WriteIntArray(&RF_SavedTiming[0]);
 11545  002F78  0E00               	movlw	0
 11546  002F7A  6E05               	movwf	FSH_WriteIntArray@Array,c
 11547  002F7C  0E25               	movlw	37
 11548  002F7E  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11549  002F80  0E00               	movlw	0
 11550  002F82  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11551  002F84  EC07  F007         	call	_FSH_WriteIntArray	;wreg free
 11552                           
 11553                           ;FLASH.c: 324: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]))
 11554  002F88  0E00               	movlw	0
 11555  002F8A  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11556  002F8C  0E25               	movlw	37
 11557  002F8E  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11558  002F90  0E00               	movlw	0
 11559  002F92  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11560  002F94  0E00               	movlw	low _RF_DataTiming
 11561  002F96  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11562  002F98  0E03               	movlw	high _RF_DataTiming
 11563  002F9A  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11564  002F9C  EC3C  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 11565  002FA0  0900               	iorlw	0
 11566  002FA2  A4D8               	btfss	status,2,c
 11567  002FA4  D008               	goto	i1l5934
 11568                           
 11569                           ;FLASH.c: 325: {
 11570                           ;FLASH.c: 326: WriteTries++;
 11571  002FA6  2A23               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11572                           
 11573                           ;FLASH.c: 327: if(WriteTries > 10)
 11574  002FA8  0E0A               	movlw	10
 11575  002FAA  6423               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11576  002FAC  D7E5               	goto	i1l5922
 11577  002FAE  D0D8               	goto	i1l6018
 11578                           
 11579                           ;FLASH.c: 331: }
 11580                           
 11581                           ;FLASH.c: 330: goto END;
 11582                           
 11583                           ;FLASH.c: 328: {
 11584                           ;FLASH.c: 329: status = 0;
 11585  002FB0  D002               	goto	i1l5934
 11586                           
 11587                           ;FLASH.c: 332: else
 11588                           ;FLASH.c: 333: {
 11589                           ;FLASH.c: 334: goto REDO5;
 11590  002FB2  D7E2               	goto	i1l5922
 11591  002FB4  D000               	goto	i1l5934
 11592  002FB6                     i1l5934:
 11593                           
 11594                           ;FLASH.c: 335: }
 11595                           ;FLASH.c: 336: }
 11596                           ;FLASH.c: 339: WriteTries = 1;
 11597  002FB6  0E01               	movlw	1
 11598  002FB8  6E23               	movwf	FSH_Write_IR_RF@WriteTries,c
 11599  002FBA  D000               	goto	i1l5936
 11600  002FBC                     i1l5936:
 11601                           
 11602                           ;FLASH.c: 343: FSH_WriteIntArray(&RF_SavedTiming[32]);
 11603  002FBC  0E40               	movlw	64
 11604  002FBE  6E05               	movwf	FSH_WriteIntArray@Array,c
 11605  002FC0  0E25               	movlw	37
 11606  002FC2  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11607  002FC4  0E00               	movlw	0
 11608  002FC6  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11609  002FC8  EC07  F007         	call	_FSH_WriteIntArray	;wreg free
 11610                           
 11611                           ;FLASH.c: 346: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]))
 11612  002FCC  0E40               	movlw	64
 11613  002FCE  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11614  002FD0  0E25               	movlw	37
 11615  002FD2  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11616  002FD4  0E00               	movlw	0
 11617  002FD6  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11618  002FD8  0E40               	movlw	low (_RF_DataTiming+64)
 11619  002FDA  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11620  002FDC  0E03               	movlw	high (_RF_DataTiming+64)
 11621  002FDE  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11622  002FE0  EC3C  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 11623  002FE4  0900               	iorlw	0
 11624  002FE6  A4D8               	btfss	status,2,c
 11625  002FE8  D008               	goto	i1l5948
 11626                           
 11627                           ;FLASH.c: 347: {
 11628                           ;FLASH.c: 348: WriteTries++;
 11629  002FEA  2A23               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11630                           
 11631                           ;FLASH.c: 349: if(WriteTries > 10)
 11632  002FEC  0E0A               	movlw	10
 11633  002FEE  6423               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11634  002FF0  D7E5               	goto	i1l5936
 11635  002FF2  D0B6               	goto	i1l6018
 11636                           
 11637                           ;FLASH.c: 353: }
 11638                           
 11639                           ;FLASH.c: 352: goto END;
 11640                           
 11641                           ;FLASH.c: 350: {
 11642                           ;FLASH.c: 351: status = 0;
 11643  002FF4  D002               	goto	i1l5948
 11644                           
 11645                           ;FLASH.c: 354: else
 11646                           ;FLASH.c: 355: {
 11647                           ;FLASH.c: 356: goto REDO6;
 11648  002FF6  D7E2               	goto	i1l5936
 11649  002FF8  D000               	goto	i1l5948
 11650  002FFA                     i1l5948:
 11651                           
 11652                           ;FLASH.c: 357: }
 11653                           ;FLASH.c: 358: }
 11654                           ;FLASH.c: 361: WriteTries = 1;
 11655  002FFA  0E01               	movlw	1
 11656  002FFC  6E23               	movwf	FSH_Write_IR_RF@WriteTries,c
 11657  002FFE  D000               	goto	i1l5950
 11658  003000                     i1l5950:
 11659                           
 11660                           ;FLASH.c: 365: FSH_WriteIntArray(&RF_SavedTiming[64]);
 11661  003000  0E80               	movlw	128
 11662  003002  6E05               	movwf	FSH_WriteIntArray@Array,c
 11663  003004  0E25               	movlw	37
 11664  003006  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11665  003008  0E00               	movlw	0
 11666  00300A  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11667  00300C  EC07  F007         	call	_FSH_WriteIntArray	;wreg free
 11668                           
 11669                           ;FLASH.c: 368: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[64],&RF_DataTiming[64]))
 11670  003010  0E80               	movlw	128
 11671  003012  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11672  003014  0E25               	movlw	37
 11673  003016  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11674  003018  0E00               	movlw	0
 11675  00301A  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11676  00301C  0E80               	movlw	low (_RF_DataTiming+128)
 11677  00301E  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11678  003020  0E03               	movlw	high (_RF_DataTiming+128)
 11679  003022  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11680  003024  EC3C  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 11681  003028  0900               	iorlw	0
 11682  00302A  A4D8               	btfss	status,2,c
 11683  00302C  D008               	goto	i1l5962
 11684                           
 11685                           ;FLASH.c: 369: {
 11686                           ;FLASH.c: 370: WriteTries++;
 11687  00302E  2A23               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11688                           
 11689                           ;FLASH.c: 371: if(WriteTries > 10)
 11690  003030  0E0A               	movlw	10
 11691  003032  6423               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11692  003034  D7E5               	goto	i1l5950
 11693  003036  D094               	goto	i1l6018
 11694                           
 11695                           ;FLASH.c: 375: }
 11696                           
 11697                           ;FLASH.c: 374: goto END;
 11698                           
 11699                           ;FLASH.c: 372: {
 11700                           ;FLASH.c: 373: status = 0;
 11701  003038  D002               	goto	i1l5962
 11702                           
 11703                           ;FLASH.c: 376: else
 11704                           ;FLASH.c: 377: {
 11705                           ;FLASH.c: 378: goto REDO7;
 11706  00303A  D7E2               	goto	i1l5950
 11707  00303C  D000               	goto	i1l5962
 11708  00303E                     i1l5962:
 11709                           
 11710                           ;FLASH.c: 379: }
 11711                           ;FLASH.c: 380: }
 11712                           ;FLASH.c: 383: WriteTries = 1;
 11713  00303E  0E01               	movlw	1
 11714  003040  6E23               	movwf	FSH_Write_IR_RF@WriteTries,c
 11715  003042  D000               	goto	i1l5964
 11716  003044                     i1l5964:
 11717                           
 11718                           ;FLASH.c: 387: FSH_WriteIntArray(&RF_SavedTiming[96]);
 11719  003044  0EC0               	movlw	192
 11720  003046  6E05               	movwf	FSH_WriteIntArray@Array,c
 11721  003048  0E25               	movlw	37
 11722  00304A  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11723  00304C  0E00               	movlw	0
 11724  00304E  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11725  003050  EC07  F007         	call	_FSH_WriteIntArray	;wreg free
 11726                           
 11727                           ;FLASH.c: 390: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[96],&RF_DataTiming[96]))
 11728  003054  0EC0               	movlw	192
 11729  003056  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11730  003058  0E25               	movlw	37
 11731  00305A  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11732  00305C  0E00               	movlw	0
 11733  00305E  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11734  003060  0EC0               	movlw	low (_RF_DataTiming+192)
 11735  003062  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11736  003064  0E03               	movlw	high (_RF_DataTiming+192)
 11737  003066  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11738  003068  EC3C  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 11739  00306C  0900               	iorlw	0
 11740  00306E  A4D8               	btfss	status,2,c
 11741  003070  D008               	goto	i1l5976
 11742                           
 11743                           ;FLASH.c: 391: {
 11744                           ;FLASH.c: 392: WriteTries++;
 11745  003072  2A23               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11746                           
 11747                           ;FLASH.c: 393: if(WriteTries > 10)
 11748  003074  0E0A               	movlw	10
 11749  003076  6423               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11750  003078  D7E5               	goto	i1l5964
 11751  00307A  D072               	goto	i1l6018
 11752                           
 11753                           ;FLASH.c: 397: }
 11754                           
 11755                           ;FLASH.c: 396: goto END;
 11756                           
 11757                           ;FLASH.c: 394: {
 11758                           ;FLASH.c: 395: status = 0;
 11759  00307C  D002               	goto	i1l5976
 11760                           
 11761                           ;FLASH.c: 398: else
 11762                           ;FLASH.c: 399: {
 11763                           ;FLASH.c: 400: goto REDO8;
 11764  00307E  D7E2               	goto	i1l5964
 11765  003080  D000               	goto	i1l5976
 11766  003082                     i1l5976:
 11767                           
 11768                           ;FLASH.c: 401: }
 11769                           ;FLASH.c: 402: }
 11770                           ;FLASH.c: 405: for(j=8;j<16;j++)
 11771  003082  0E08               	movlw	8
 11772  003084  6E1F               	movwf	FSH_Write_IR_RF@j,c
 11773  003086                     i1l5978:
 11774  003086  0E0F               	movlw	15
 11775  003088  641F               	cpfsgt	FSH_Write_IR_RF@j,c
 11776  00308A  D001               	goto	i1l5982
 11777  00308C  D076               	goto	i1l6030
 11778  00308E                     i1l5982:
 11779                           
 11780                           ;FLASH.c: 406: {
 11781                           ;FLASH.c: 407: WriteTries = 1;
 11782  00308E  0E01               	movlw	1
 11783  003090  6E23               	movwf	FSH_Write_IR_RF@WriteTries,c
 11784  003092                     i1l1224:
 11785                           
 11786                           ;FLASH.c: 410: i=0;
 11787  003092  0E00               	movlw	0
 11788  003094  6E22               	movwf	FSH_Write_IR_RF@i+1,c
 11789  003096  0E00               	movlw	0
 11790  003098  6E21               	movwf	FSH_Write_IR_RF@i,c
 11791                           
 11792                           ;FLASH.c: 411: FlashWasteindex = i + 64*(j-8);
 11793  00309A  501F               	movf	FSH_Write_IR_RF@j,w,c
 11794  00309C  6E15               	movwf	??_FSH_Write_IR_RF& (0+255),c
 11795  00309E  6A16               	clrf	(??_FSH_Write_IR_RF+1)& (0+255),c
 11796  0030A0  0E06               	movlw	6
 11797  0030A2                     i1u623_25:
 11798  0030A2  90D8               	bcf	status,0,c
 11799  0030A4  3615               	rlcf	??_FSH_Write_IR_RF,f,c
 11800  0030A6  3616               	rlcf	??_FSH_Write_IR_RF+1,f,c
 11801  0030A8  2EE8               	decfsz	wreg,f,c
 11802  0030AA  D7FB               	goto	i1u623_25
 11803  0030AC  5021               	movf	FSH_Write_IR_RF@i,w,c
 11804  0030AE  2615               	addwf	??_FSH_Write_IR_RF,f,c
 11805  0030B0  5022               	movf	FSH_Write_IR_RF@i+1,w,c
 11806  0030B2  2216               	addwfc	??_FSH_Write_IR_RF+1,f,c
 11807  0030B4  0E00               	movlw	0
 11808  0030B6  2415               	addwf	??_FSH_Write_IR_RF,w,c
 11809  0030B8  6E1D               	movwf	FSH_Write_IR_RF@FlashWasteindex,c
 11810  0030BA  0EFE               	movlw	254
 11811  0030BC  2016               	addwfc	??_FSH_Write_IR_RF+1,w,c
 11812  0030BE  6E1E               	movwf	FSH_Write_IR_RF@FlashWasteindex+1,c
 11813                           
 11814                           ;FLASH.c: 412: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 11815  0030C0  0E00               	movlw	0
 11816  0030C2  6E15               	movwf	??_FSH_Write_IR_RF& (0+255),c
 11817  0030C4  0E26               	movlw	38
 11818  0030C6  6E16               	movwf	(??_FSH_Write_IR_RF+1)& (0+255),c
 11819  0030C8  0E00               	movlw	0
 11820  0030CA  6E17               	movwf	(??_FSH_Write_IR_RF+2)& (0+255),c
 11821  0030CC  501D               	movf	FSH_Write_IR_RF@FlashWasteindex,w,c
 11822  0030CE  2415               	addwf	??_FSH_Write_IR_RF,w,c
 11823  0030D0  6E18               	movwf	(??_FSH_Write_IR_RF+3)& (0+255),c
 11824  0030D2  501E               	movf	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 11825  0030D4  2016               	addwfc	??_FSH_Write_IR_RF+1,w,c
 11826  0030D6  6E19               	movwf	(??_FSH_Write_IR_RF+4)& (0+255),c
 11827  0030D8  0E00               	movlw	0
 11828  0030DA  2017               	addwfc	??_FSH_Write_IR_RF+2,w,c
 11829  0030DC  6E1A               	movwf	(??_FSH_Write_IR_RF+5)& (0+255),c
 11830  0030DE  5018               	movf	??_FSH_Write_IR_RF+3,w,c
 11831  0030E0  6E01               	movwf	FSH_AddressToBlock@Address,c
 11832  0030E2  5019               	movf	??_FSH_Write_IR_RF+4,w,c
 11833  0030E4  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 11834  0030E6  501A               	movf	??_FSH_Write_IR_RF+5,w,c
 11835  0030E8  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 11836  0030EA  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 11837  0030EC  EC59  F00E         	call	_FSH_AddressToBlock	;wreg free
 11838                           
 11839                           ;FLASH.c: 413: for(i = 0; i<64; i++)
 11840  0030F0  0E00               	movlw	0
 11841  0030F2  6E22               	movwf	FSH_Write_IR_RF@i+1,c
 11842  0030F4  0E00               	movlw	0
 11843  0030F6  6E21               	movwf	FSH_Write_IR_RF@i,c
 11844  0030F8  5022               	movf	FSH_Write_IR_RF@i+1,w,c
 11845  0030FA  E10E               	bnz	i1l1226
 11846  0030FC  0E40               	movlw	64
 11847  0030FE  5C21               	subwf	FSH_Write_IR_RF@i,w,c
 11848  003100  B0D8               	btfsc	status,0,c
 11849  003102  D00A               	goto	i1l1226
 11850  003104  D001               	goto	i1l5994
 11851  003106  D008               	goto	i1l1226
 11852  003108                     i1l5994:
 11853                           
 11854                           ;FLASH.c: 414: {
 11855                           ;FLASH.c: 416: TABLAT = 0xDA;
 11856  003108  0EDA               	movlw	218
 11857  00310A  6EF5               	movwf	tablat,c	;volatile
 11858  00310C  000D               	tblwt		*+	;# 
 11859  00310E  4A21               	infsnz	FSH_Write_IR_RF@i,f,c
 11860  003110  2A22               	incf	FSH_Write_IR_RF@i+1,f,c
 11861  003112  5022               	movf	FSH_Write_IR_RF@i+1,w,c
 11862  003114  E101               	bnz	i1u625_20
 11863  003116  D7F2               	goto	L7
 11864  003118                     i1u625_20:
 11865  003118                     i1l1226:
 11866                           
 11867                           ;FLASH.c: 418: }
 11868                           ;FLASH.c: 419: EECON1bits.WREN = 1;
 11869  003118  84A6               	bsf	4006,2,c	;volatile
 11870                           
 11871                           ;FLASH.c: 420: EECON1bits.FREE = 0;
 11872  00311A  98A6               	bcf	4006,4,c	;volatile
 11873                           
 11874                           ;FLASH.c: 421: FSH_Sequence();
 11875  00311C  EC9E  F00E         	call	_FSH_Sequence	;wreg free
 11876                           
 11877                           ;FLASH.c: 422: EECON1bits.WR = 1;
 11878  003120  82A6               	bsf	4006,1,c	;volatile
 11879                           
 11880                           ;FLASH.c: 423: EECON1bits.WREN = 1;
 11881  003122  84A6               	bsf	4006,2,c	;volatile
 11882                           
 11883                           ;FLASH.c: 426: for(i=0; i<64;i++)
 11884  003124  0E00               	movlw	0
 11885  003126  6E22               	movwf	FSH_Write_IR_RF@i+1,c
 11886  003128  0E00               	movlw	0
 11887  00312A  6E21               	movwf	FSH_Write_IR_RF@i,c
 11888  00312C                     i1l6008:
 11889  00312C  5022               	movf	FSH_Write_IR_RF@i+1,w,c
 11890  00312E  E123               	bnz	i1l6026
 11891  003130  0E40               	movlw	64
 11892  003132  5C21               	subwf	FSH_Write_IR_RF@i,w,c
 11893  003134  B0D8               	btfsc	status,0,c
 11894  003136  D01F               	goto	i1l6026
 11895  003138  D001               	goto	i1l6012
 11896  00313A  D01D               	goto	i1l6026
 11897  00313C                     i1l6012:
 11898                           
 11899                           ;FLASH.c: 427: {
 11900                           ;FLASH.c: 428: if(FlashWaste[FlashWasteindex] != 0xDA)
 11901  00313C  0E00               	movlw	0
 11902  00313E  241D               	addwf	FSH_Write_IR_RF@FlashWasteindex,w,c
 11903  003140  6EF6               	movwf	tblptrl,c
 11904  003142  0E26               	movlw	38
 11905  003144  201E               	addwfc	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 11906  003146  6EF7               	movwf	tblptrh,c
 11907  003148  6AF8               	clrf	tblptru,c
 11908  00314A  0E00               	movlw	0
 11909  00314C  22F8               	addwfc	tblptru,f,c
 11910  00314E  0008               	tblrd		*
 11911  003150  50F5               	movf	tablat,w,c
 11912  003152  0ADA               	xorlw	218
 11913  003154  B4D8               	btfsc	status,2,c
 11914  003156  D009               	goto	i1l6022
 11915                           
 11916                           ;FLASH.c: 429: {
 11917                           ;FLASH.c: 430: WriteTries++;
 11918  003158  2A23               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11919                           
 11920                           ;FLASH.c: 431: if(WriteTries > 10)
 11921  00315A  0E0A               	movlw	10
 11922  00315C  6423               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11923  00315E  D799               	goto	i1l1224
 11924  003160                     i1l6018:
 11925                           
 11926                           ;FLASH.c: 432: {
 11927                           ;FLASH.c: 433: status = 0;
 11928  003160  0E00               	movlw	0
 11929  003162  D00C               	goto	L6
 11930                           
 11931                           ;FLASH.c: 435: }
 11932                           
 11933                           ;FLASH.c: 434: goto END;
 11934  003164  D002               	goto	i1l6022
 11935                           
 11936                           ;FLASH.c: 436: else
 11937                           ;FLASH.c: 437: {
 11938                           ;FLASH.c: 438: goto REDO9;
 11939  003166  D795               	goto	i1l1224
 11940  003168  D000               	goto	i1l6022
 11941  00316A                     i1l6022:
 11942                           
 11943                           ;FLASH.c: 439: }
 11944                           ;FLASH.c: 440: }
 11945                           ;FLASH.c: 441: FlashWasteindex++;
 11946  00316A  4A1D               	infsnz	FSH_Write_IR_RF@FlashWasteindex,f,c
 11947  00316C  2A1E               	incf	FSH_Write_IR_RF@FlashWasteindex+1,f,c
 11948  00316E  4A21               	infsnz	FSH_Write_IR_RF@i,f,c
 11949  003170  2A22               	incf	FSH_Write_IR_RF@i+1,f,c
 11950  003172  D7DC               	goto	i1l6008
 11951  003174  D000               	goto	i1l6026
 11952  003176                     i1l6026:
 11953  003176  2A1F               	incf	FSH_Write_IR_RF@j,f,c
 11954  003178  D786               	goto	i1l5978
 11955  00317A                     i1l6030:
 11956                           
 11957                           ;FLASH.c: 442: }
 11958                           ;FLASH.c: 443: }
 11959                           ;FLASH.c: 444: status = 1;
 11960  00317A  0E01               	movlw	1
 11961  00317C                     L6:
 11962  00317C  6E20               	movwf	FSH_Write_IR_RF@status,c
 11963  00317E                     i1l1185:
 11964                           
 11965                           ;FLASH.c: 447: if(highint)
 11966  00317E  501B               	movf	FSH_Write_IR_RF@highint,w,c
 11967  003180  B4D8               	btfsc	status,2,c
 11968  003182  D002               	goto	i1l6034
 11969                           
 11970                           ;FLASH.c: 448: {
 11971                           ;FLASH.c: 449: INTCONbits.GIE = 1;
 11972  003184  8EF2               	bsf	intcon,7,c	;volatile
 11973  003186  D000               	goto	i1l6034
 11974  003188                     i1l6034:
 11975                           
 11976                           ;FLASH.c: 450: }
 11977                           ;FLASH.c: 451: if(lowint)
 11978  003188  501C               	movf	FSH_Write_IR_RF@lowint,w,c
 11979  00318A  B4D8               	btfsc	status,2,c
 11980  00318C  D002               	goto	i1l6038
 11981                           
 11982                           ;FLASH.c: 452: {
 11983                           ;FLASH.c: 453: INTCONbits.PEIE = 1;
 11984  00318E  8CF2               	bsf	intcon,6,c	;volatile
 11985  003190  D000               	goto	i1l6038
 11986  003192                     i1l6038:
 11987                           
 11988                           ;FLASH.c: 454: }
 11989                           ;FLASH.c: 455: return status;
 11990  003192  5020               	movf	FSH_Write_IR_RF@status,w,c
 11991  003194  0012               	return	
 11992  003196  0012               	return		;funcret
 11993  003198                     __end_of_FSH_Write_IR_RF:
 11994                           	opt stack 0
 11995                           pclatu	equ	0xFFB
 11996                           pclath	equ	0xFFA
 11997                           tblptru	equ	0xFF8
 11998                           tblptrh	equ	0xFF7
 11999                           tblptrl	equ	0xFF6
 12000                           tablat	equ	0xFF5
 12001                           prodh	equ	0xFF4
 12002                           prodl	equ	0xFF3
 12003                           intcon	equ	0xFF2
 12004                           intcon2	equ	0xFF1
 12005                           intcon3	equ	0xFF0
 12006                           postinc0	equ	0xFEE
 12007                           fsr0h	equ	0xFEA
 12008                           fsr0l	equ	0xFE9
 12009                           wreg	equ	0xFE8
 12010                           postdec1	equ	0xFE5
 12011                           fsr1h	equ	0xFE2
 12012                           fsr1l	equ	0xFE1
 12013                           bsr	equ	0xFE0
 12014                           postinc2	equ	0xFDE
 12015                           postdec2	equ	0xFDD
 12016                           plusw2	equ	0xFDB
 12017                           fsr2h	equ	0xFDA
 12018                           fsr2l	equ	0xFD9
 12019                           status	equ	0xFD8
 12020                           
 12021 ;; *************** function _RF_ResetData *****************
 12022 ;; Defined at:
 12023 ;;		line 221 in file "RF.c"
 12024 ;; Parameters:    Size  Location     Type
 12025 ;;		None
 12026 ;; Auto vars:     Size  Location     Type
 12027 ;;		None
 12028 ;; Return value:  Size  Location     Type
 12029 ;;		None               void
 12030 ;; Registers used:
 12031 ;;		wreg, status,2
 12032 ;; Tracked objects:
 12033 ;;		On entry : 0/0
 12034 ;;		On exit  : 0/0
 12035 ;;		Unchanged: 0/0
 12036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12037 ;;      Params:         0       0       0       0       0
 12038 ;;      Locals:         0       0       0       0       0
 12039 ;;      Temps:          0       0       0       0       0
 12040 ;;      Totals:         0       0       0       0       0
 12041 ;;Total ram usage:        0 bytes
 12042 ;; Hardware stack levels used:    1
 12043 ;; Hardware stack levels required when called:    6
 12044 ;; This function calls:
 12045 ;;		Nothing
 12046 ;; This function is called by:
 12047 ;;		_FSH_Write_IR_RF
 12048 ;; This function uses a non-reentrant model
 12049 ;;
 12050                           
 12051                           	psect	text73
 12052  001CEC                     __ptext73:
 12053                           	opt stack 0
 12054  001CEC                     _RF_ResetData:
 12055                           	opt stack 15
 12056                           
 12057                           ;RF.c: 223: RF_DataPlace = 0;
 12058                           
 12059                           ;incstack = 0
 12060  001CEC  0E00               	movlw	0
 12061  001CEE  0100               	movlb	0	; () banked
 12062  001CF0  6FCB               	movwf	_RF_DataPlace& (0+255),b
 12063                           
 12064                           ;RF.c: 224: RFStarted = 0;
 12065  001CF2  0E00               	movlw	0
 12066  001CF4  0100               	movlb	0	; () banked
 12067  001CF6  6FC8               	movwf	_RFStarted& (0+255),b
 12068                           
 12069                           ; BSR set to: 0
 12070  001CF8  0012               	return		;funcret
 12071  001CFA                     __end_of_RF_ResetData:
 12072                           	opt stack 0
 12073                           pclatu	equ	0xFFB
 12074                           pclath	equ	0xFFA
 12075                           tblptru	equ	0xFF8
 12076                           tblptrh	equ	0xFF7
 12077                           tblptrl	equ	0xFF6
 12078                           tablat	equ	0xFF5
 12079                           prodh	equ	0xFF4
 12080                           prodl	equ	0xFF3
 12081                           intcon	equ	0xFF2
 12082                           intcon2	equ	0xFF1
 12083                           intcon3	equ	0xFF0
 12084                           postinc0	equ	0xFEE
 12085                           fsr0h	equ	0xFEA
 12086                           fsr0l	equ	0xFE9
 12087                           wreg	equ	0xFE8
 12088                           postdec1	equ	0xFE5
 12089                           fsr1h	equ	0xFE2
 12090                           fsr1l	equ	0xFE1
 12091                           bsr	equ	0xFE0
 12092                           postinc2	equ	0xFDE
 12093                           postdec2	equ	0xFDD
 12094                           plusw2	equ	0xFDB
 12095                           fsr2h	equ	0xFDA
 12096                           fsr2l	equ	0xFD9
 12097                           status	equ	0xFD8
 12098                           
 12099 ;; *************** function _MSC_BufferCopyIntConst *****************
 12100 ;; Defined at:
 12101 ;;		line 238 in file "MISC.c"
 12102 ;; Parameters:    Size  Location     Type
 12103 ;;  from            3    6[COMRAM] PTR const unsigned int 
 12104 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 12105 ;;  to              2    9[COMRAM] PTR unsigned int 
 12106 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 12107 ;;  count           2   11[COMRAM] unsigned int 
 12108 ;;  shift           2   13[COMRAM] unsigned int 
 12109 ;; Auto vars:     Size  Location     Type
 12110 ;;  i               2   15[COMRAM] unsigned int 
 12111 ;; Return value:  Size  Location     Type
 12112 ;;		None               void
 12113 ;; Registers used:
 12114 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12115 ;; Tracked objects:
 12116 ;;		On entry : 0/0
 12117 ;;		On exit  : 0/0
 12118 ;;		Unchanged: 0/0
 12119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12120 ;;      Params:         9       0       0       0       0
 12121 ;;      Locals:         2       0       0       0       0
 12122 ;;      Temps:          0       0       0       0       0
 12123 ;;      Totals:        11       0       0       0       0
 12124 ;;Total ram usage:       11 bytes
 12125 ;; Hardware stack levels used:    1
 12126 ;; Hardware stack levels required when called:    7
 12127 ;; This function calls:
 12128 ;;		i1_MSC_CleanBufferInt
 12129 ;; This function is called by:
 12130 ;;		_FSH_Write_IR_RF
 12131 ;; This function uses a non-reentrant model
 12132 ;;
 12133                           
 12134                           	psect	text74
 12135  000D5A                     __ptext74:
 12136                           	opt stack 0
 12137  000D5A                     _MSC_BufferCopyIntConst:
 12138                           	opt stack 14
 12139                           
 12140                           ;MISC.c: 240: unsigned int i=0;
 12141                           
 12142                           ; BSR set to: 0
 12143                           ;incstack = 0
 12144  000D5A  0E00               	movlw	0
 12145  000D5C  6E11               	movwf	MSC_BufferCopyIntConst@i+1,c
 12146  000D5E  0E00               	movlw	0
 12147  000D60  6E10               	movwf	MSC_BufferCopyIntConst@i,c
 12148                           
 12149                           ;MISC.c: 241: MSC_CleanBufferInt(to,count);
 12150  000D62  C00A  F001         	movff	MSC_BufferCopyIntConst@to,i1MSC_CleanBufferInt@data
 12151  000D66  C00B  F002         	movff	MSC_BufferCopyIntConst@to+1,i1MSC_CleanBufferInt@data+1
 12152  000D6A  C00C  F003         	movff	MSC_BufferCopyIntConst@count,i1MSC_CleanBufferInt@count
 12153  000D6E  C00D  F004         	movff	MSC_BufferCopyIntConst@count+1,i1MSC_CleanBufferInt@count+1
 12154  000D72  EC54  F00A         	call	i1_MSC_CleanBufferInt	;wreg free
 12155                           
 12156                           ;MISC.c: 242: for(i = shift; i>0; i--)
 12157  000D76  C00E  F010         	movff	MSC_BufferCopyIntConst@shift,MSC_BufferCopyIntConst@i
 12158  000D7A  C00F  F011         	movff	MSC_BufferCopyIntConst@shift+1,MSC_BufferCopyIntConst@i+1
 12159  000D7E                     i1l5330:
 12160  000D7E  5010               	movf	MSC_BufferCopyIntConst@i,w,c
 12161  000D80  1011               	iorwf	MSC_BufferCopyIntConst@i+1,w,c
 12162  000D82  B4D8               	btfsc	status,2,c
 12163  000D84  D031               	goto	i1l5350
 12164  000D86  D001               	goto	i1l5334
 12165  000D88  D02F               	goto	i1l5350
 12166  000D8A                     i1l5334:
 12167                           
 12168                           ;MISC.c: 243: {
 12169                           ;MISC.c: 244: *to = ' ';
 12170  000D8A  C00A  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
 12171  000D8E  C00B  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
 12172  000D92  0E20               	movlw	32
 12173  000D94  6EDE               	movwf	postinc2,c
 12174  000D96  0E00               	movlw	0
 12175  000D98  6EDD               	movwf	postdec2,c
 12176                           
 12177                           ;MISC.c: 245: to++;
 12178  000D9A  0E02               	movlw	2
 12179  000D9C  260A               	addwf	MSC_BufferCopyIntConst@to,f,c
 12180  000D9E  0E00               	movlw	0
 12181  000DA0  220B               	addwfc	MSC_BufferCopyIntConst@to+1,f,c
 12182  000DA2  0610               	decf	MSC_BufferCopyIntConst@i,f,c
 12183  000DA4  A0D8               	btfss	status,0,c
 12184  000DA6  0611               	decf	MSC_BufferCopyIntConst@i+1,f,c
 12185  000DA8  D7EA               	goto	i1l5330
 12186                           
 12187                           ;MISC.c: 246: }
 12188                           ;MISC.c: 247: while(*from != 0 && count >0)
 12189  000DAA  D01E               	goto	i1l5350
 12190  000DAC                     i1l5342:
 12191                           
 12192                           ;MISC.c: 248: {
 12193                           ;MISC.c: 249: *to = *from;
 12194  000DAC  C007  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
 12195  000DB0  C008  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
 12196  000DB4  C009  FFF8         	movff	MSC_BufferCopyIntConst@from+2,tblptru
 12197  000DB8  C00A  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
 12198  000DBC  C00B  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
 12199  000DC0  0009               	tblrd		*+
 12200  000DC2  CFF5 FFDE          	movff	tablat,postinc2
 12201  000DC6  0008               	tblrd		*
 12202  000DC8  CFF5 FFDD          	movff	tablat,postdec2
 12203                           
 12204                           ;MISC.c: 250: from++;
 12205  000DCC  0E02               	movlw	2
 12206  000DCE  2607               	addwf	MSC_BufferCopyIntConst@from,f,c
 12207  000DD0  0E00               	movlw	0
 12208  000DD2  2208               	addwfc	MSC_BufferCopyIntConst@from+1,f,c
 12209  000DD4  0E00               	movlw	0
 12210  000DD6  2209               	addwfc	MSC_BufferCopyIntConst@from+2,f,c
 12211                           
 12212                           ;MISC.c: 251: to++;
 12213  000DD8  0E02               	movlw	2
 12214  000DDA  260A               	addwf	MSC_BufferCopyIntConst@to,f,c
 12215  000DDC  0E00               	movlw	0
 12216  000DDE  220B               	addwfc	MSC_BufferCopyIntConst@to+1,f,c
 12217                           
 12218                           ;MISC.c: 252: count--;
 12219  000DE0  060C               	decf	MSC_BufferCopyIntConst@count,f,c
 12220  000DE2  A0D8               	btfss	status,0,c
 12221  000DE4  060D               	decf	MSC_BufferCopyIntConst@count+1,f,c
 12222  000DE6  D000               	goto	i1l5350
 12223  000DE8                     i1l5350:
 12224  000DE8  C007  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
 12225  000DEC  C008  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
 12226  000DF0  C009  FFF8         	movff	MSC_BufferCopyIntConst@from+2,tblptru
 12227  000DF4  0009               	tblrd		*+
 12228  000DF6  50F5               	movf	tablat,w,c
 12229  000DF8  0009               	tblrd		*+
 12230  000DFA  10F5               	iorwf	tablat,w,c
 12231  000DFC  B4D8               	btfsc	status,2,c
 12232  000DFE  0012               	return	
 12233  000E00  500C               	movf	MSC_BufferCopyIntConst@count,w,c
 12234  000E02  100D               	iorwf	MSC_BufferCopyIntConst@count+1,w,c
 12235  000E04  B4D8               	btfsc	status,2,c
 12236  000E06  0012               	return	
 12237  000E08  D7D1               	goto	i1l5342
 12238  000E0A  0012               	return	
 12239  000E0C  0012               	return		;funcret
 12240  000E0E                     __end_of_MSC_BufferCopyIntConst:
 12241                           	opt stack 0
 12242                           pclatu	equ	0xFFB
 12243                           pclath	equ	0xFFA
 12244                           tblptru	equ	0xFF8
 12245                           tblptrh	equ	0xFF7
 12246                           tblptrl	equ	0xFF6
 12247                           tablat	equ	0xFF5
 12248                           prodh	equ	0xFF4
 12249                           prodl	equ	0xFF3
 12250                           intcon	equ	0xFF2
 12251                           intcon2	equ	0xFF1
 12252                           intcon3	equ	0xFF0
 12253                           postinc0	equ	0xFEE
 12254                           fsr0h	equ	0xFEA
 12255                           fsr0l	equ	0xFE9
 12256                           wreg	equ	0xFE8
 12257                           postdec1	equ	0xFE5
 12258                           fsr1h	equ	0xFE2
 12259                           fsr1l	equ	0xFE1
 12260                           bsr	equ	0xFE0
 12261                           postinc2	equ	0xFDE
 12262                           postdec2	equ	0xFDD
 12263                           plusw2	equ	0xFDB
 12264                           fsr2h	equ	0xFDA
 12265                           fsr2l	equ	0xFD9
 12266                           status	equ	0xFD8
 12267                           
 12268 ;; *************** function i1_MSC_CleanBufferInt *****************
 12269 ;; Defined at:
 12270 ;;		line 166 in file "MISC.c"
 12271 ;; Parameters:    Size  Location     Type
 12272 ;;  data            2    0[COMRAM] PTR unsigned int 
 12273 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 12274 ;;  count           2    2[COMRAM] unsigned int 
 12275 ;; Auto vars:     Size  Location     Type
 12276 ;;  MSC_CleanBuf    2    4[COMRAM] unsigned int 
 12277 ;; Return value:  Size  Location     Type
 12278 ;;		None               void
 12279 ;; Registers used:
 12280 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12281 ;; Tracked objects:
 12282 ;;		On entry : 0/0
 12283 ;;		On exit  : 0/0
 12284 ;;		Unchanged: 0/0
 12285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12286 ;;      Params:         4       0       0       0       0
 12287 ;;      Locals:         2       0       0       0       0
 12288 ;;      Temps:          0       0       0       0       0
 12289 ;;      Totals:         6       0       0       0       0
 12290 ;;Total ram usage:        6 bytes
 12291 ;; Hardware stack levels used:    1
 12292 ;; Hardware stack levels required when called:    6
 12293 ;; This function calls:
 12294 ;;		Nothing
 12295 ;; This function is called by:
 12296 ;;		_IR_CleanBuffer
 12297 ;;		_MSC_BufferCopyIntConst
 12298 ;; This function uses a non-reentrant model
 12299 ;;
 12300                           
 12301                           	psect	text75
 12302  0014A8                     __ptext75:
 12303                           	opt stack 0
 12304  0014A8                     i1_MSC_CleanBufferInt:
 12305                           	opt stack 16
 12306                           
 12307                           ;MISC.c: 168: unsigned int i=0;
 12308                           
 12309                           ;incstack = 0
 12310  0014A8  0E00               	movlw	0
 12311  0014AA  6E06               	movwf	i1MSC_CleanBufferInt@i+1,c
 12312  0014AC  0E00               	movlw	0
 12313  0014AE  6E05               	movwf	i1MSC_CleanBufferInt@i,c
 12314                           
 12315                           ;MISC.c: 169: for(i=0; i<count;i++)
 12316  0014B0  0E00               	movlw	0
 12317  0014B2  6E06               	movwf	i1MSC_CleanBufferInt@i+1,c
 12318  0014B4  0E00               	movlw	0
 12319  0014B6  6E05               	movwf	i1MSC_CleanBufferInt@i,c
 12320  0014B8  D010               	goto	i1l5232
 12321  0014BA                     i1l5228:
 12322                           
 12323                           ;MISC.c: 170: {
 12324                           ;MISC.c: 171: data[i]= 0;
 12325  0014BA  90D8               	bcf	status,0,c
 12326  0014BC  3405               	rlcf	i1MSC_CleanBufferInt@i,w,c
 12327  0014BE  6ED9               	movwf	fsr2l,c
 12328  0014C0  3406               	rlcf	i1MSC_CleanBufferInt@i+1,w,c
 12329  0014C2  6EDA               	movwf	fsr2h,c
 12330  0014C4  5001               	movf	i1MSC_CleanBufferInt@data,w,c
 12331  0014C6  26D9               	addwf	fsr2l,f,c
 12332  0014C8  5002               	movf	i1MSC_CleanBufferInt@data+1,w,c
 12333  0014CA  22DA               	addwfc	fsr2h,f,c
 12334  0014CC  0E00               	movlw	0
 12335  0014CE  6EDE               	movwf	postinc2,c
 12336  0014D0  0E00               	movlw	0
 12337  0014D2  6EDD               	movwf	postdec2,c
 12338  0014D4  4A05               	infsnz	i1MSC_CleanBufferInt@i,f,c
 12339  0014D6  2A06               	incf	i1MSC_CleanBufferInt@i+1,f,c
 12340  0014D8  D000               	goto	i1l5232
 12341  0014DA                     i1l5232:
 12342  0014DA  5003               	movf	i1MSC_CleanBufferInt@count,w,c
 12343  0014DC  5C05               	subwf	i1MSC_CleanBufferInt@i,w,c
 12344  0014DE  5004               	movf	i1MSC_CleanBufferInt@count+1,w,c
 12345  0014E0  5806               	subwfb	i1MSC_CleanBufferInt@i+1,w,c
 12346  0014E2  A0D8               	btfss	status,0,c
 12347  0014E4  D7EA               	goto	i1l5228
 12348  0014E6  0012               	return		;funcret
 12349  0014E8                     __end_ofi1_MSC_CleanBufferInt:
 12350                           	opt stack 0
 12351                           pclatu	equ	0xFFB
 12352                           pclath	equ	0xFFA
 12353                           tblptru	equ	0xFF8
 12354                           tblptrh	equ	0xFF7
 12355                           tblptrl	equ	0xFF6
 12356                           tablat	equ	0xFF5
 12357                           prodh	equ	0xFF4
 12358                           prodl	equ	0xFF3
 12359                           intcon	equ	0xFF2
 12360                           intcon2	equ	0xFF1
 12361                           intcon3	equ	0xFF0
 12362                           postinc0	equ	0xFEE
 12363                           fsr0h	equ	0xFEA
 12364                           fsr0l	equ	0xFE9
 12365                           wreg	equ	0xFE8
 12366                           postdec1	equ	0xFE5
 12367                           fsr1h	equ	0xFE2
 12368                           fsr1l	equ	0xFE1
 12369                           bsr	equ	0xFE0
 12370                           postinc2	equ	0xFDE
 12371                           postdec2	equ	0xFDD
 12372                           plusw2	equ	0xFDB
 12373                           fsr2h	equ	0xFDA
 12374                           fsr2l	equ	0xFD9
 12375                           status	equ	0xFD8
 12376                           
 12377 ;; *************** function _IR_ResetData *****************
 12378 ;; Defined at:
 12379 ;;		line 107 in file "IR.c"
 12380 ;; Parameters:    Size  Location     Type
 12381 ;;		None
 12382 ;; Auto vars:     Size  Location     Type
 12383 ;;		None
 12384 ;; Return value:  Size  Location     Type
 12385 ;;		None               void
 12386 ;; Registers used:
 12387 ;;		wreg, status,2, cstack
 12388 ;; Tracked objects:
 12389 ;;		On entry : 0/0
 12390 ;;		On exit  : 0/0
 12391 ;;		Unchanged: 0/0
 12392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12393 ;;      Params:         0       0       0       0       0
 12394 ;;      Locals:         0       0       0       0       0
 12395 ;;      Temps:          0       0       0       0       0
 12396 ;;      Totals:         0       0       0       0       0
 12397 ;;Total ram usage:        0 bytes
 12398 ;; Hardware stack levels used:    1
 12399 ;; Hardware stack levels required when called:    8
 12400 ;; This function calls:
 12401 ;;		_RF_Enable
 12402 ;; This function is called by:
 12403 ;;		_low_isr
 12404 ;;		_FSH_Write_IR_RF
 12405 ;; This function uses a non-reentrant model
 12406 ;;
 12407                           
 12408                           	psect	text76
 12409  001CFA                     __ptext76:
 12410                           	opt stack 0
 12411  001CFA                     _IR_ResetData:
 12412                           	opt stack 15
 12413                           
 12414                           ;IR.c: 109: IR_DataPlace = 0;
 12415                           
 12416                           ;incstack = 0
 12417  001CFA  0E00               	movlw	0
 12418  001CFC  6E5D               	movwf	_IR_DataPlace,c
 12419                           
 12420                           ;IR.c: 110: IRStarted = 0;
 12421  001CFE  0E00               	movlw	0
 12422  001D00  6E5B               	movwf	_IRStarted,c
 12423                           
 12424                           ;IR.c: 111: RF_Enable();
 12425  001D02  ECEB  F00D         	call	_RF_Enable	;wreg free
 12426  001D06  0012               	return		;funcret
 12427  001D08                     __end_of_IR_ResetData:
 12428                           	opt stack 0
 12429                           pclatu	equ	0xFFB
 12430                           pclath	equ	0xFFA
 12431                           tblptru	equ	0xFF8
 12432                           tblptrh	equ	0xFF7
 12433                           tblptrl	equ	0xFF6
 12434                           tablat	equ	0xFF5
 12435                           prodh	equ	0xFF4
 12436                           prodl	equ	0xFF3
 12437                           intcon	equ	0xFF2
 12438                           intcon2	equ	0xFF1
 12439                           intcon3	equ	0xFF0
 12440                           postinc0	equ	0xFEE
 12441                           fsr0h	equ	0xFEA
 12442                           fsr0l	equ	0xFE9
 12443                           wreg	equ	0xFE8
 12444                           postdec1	equ	0xFE5
 12445                           fsr1h	equ	0xFE2
 12446                           fsr1l	equ	0xFE1
 12447                           bsr	equ	0xFE0
 12448                           postinc2	equ	0xFDE
 12449                           postdec2	equ	0xFDD
 12450                           plusw2	equ	0xFDB
 12451                           fsr2h	equ	0xFDA
 12452                           fsr2l	equ	0xFD9
 12453                           status	equ	0xFD8
 12454                           
 12455 ;; *************** function _RF_Enable *****************
 12456 ;; Defined at:
 12457 ;;		line 206 in file "RF.c"
 12458 ;; Parameters:    Size  Location     Type
 12459 ;;		None
 12460 ;; Auto vars:     Size  Location     Type
 12461 ;;		None
 12462 ;; Return value:  Size  Location     Type
 12463 ;;		None               void
 12464 ;; Registers used:
 12465 ;;		wreg, status,2, cstack
 12466 ;; Tracked objects:
 12467 ;;		On entry : 0/0
 12468 ;;		On exit  : 0/0
 12469 ;;		Unchanged: 0/0
 12470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12471 ;;      Params:         0       0       0       0       0
 12472 ;;      Locals:         0       0       0       0       0
 12473 ;;      Temps:          0       0       0       0       0
 12474 ;;      Totals:         0       0       0       0       0
 12475 ;;Total ram usage:        0 bytes
 12476 ;; Hardware stack levels used:    1
 12477 ;; Hardware stack levels required when called:    7
 12478 ;; This function calls:
 12479 ;;		i1_RF_DataInt
 12480 ;;		i1_TMR_Timer0Int
 12481 ;; This function is called by:
 12482 ;;		_IR_ResetData
 12483 ;; This function uses a non-reentrant model
 12484 ;;
 12485                           
 12486                           	psect	text77
 12487  001BD6                     __ptext77:
 12488                           	opt stack 0
 12489  001BD6                     _RF_Enable:
 12490                           	opt stack 15
 12491                           
 12492                           ;RF.c: 208: INTCON3bits.INT1IF = 0;
 12493                           
 12494                           ;incstack = 0
 12495  001BD6  90F0               	bcf	intcon3,0,c	;volatile
 12496                           
 12497                           ;RF.c: 209: INTCON3bits.INT2IF = 0;
 12498  001BD8  92F0               	bcf	intcon3,1,c	;volatile
 12499                           
 12500                           ;RF.c: 210: INTCONbits.TMR0IF = 0;
 12501  001BDA  94F2               	bcf	intcon,2,c	;volatile
 12502                           
 12503                           ;RF.c: 211: RF_DataInt(1);
 12504  001BDC  0E01               	movlw	1
 12505  001BDE  ECD6  F00D         	call	i1_RF_DataInt
 12506                           
 12507                           ;RF.c: 212: TMR_Timer0Int(1);
 12508  001BE2  0E01               	movlw	1
 12509  001BE4  EC35  F00E         	call	i1_TMR_Timer0Int
 12510  001BE8  0012               	return		;funcret
 12511  001BEA                     __end_of_RF_Enable:
 12512                           	opt stack 0
 12513                           pclatu	equ	0xFFB
 12514                           pclath	equ	0xFFA
 12515                           tblptru	equ	0xFF8
 12516                           tblptrh	equ	0xFF7
 12517                           tblptrl	equ	0xFF6
 12518                           tablat	equ	0xFF5
 12519                           prodh	equ	0xFF4
 12520                           prodl	equ	0xFF3
 12521                           intcon	equ	0xFF2
 12522                           intcon2	equ	0xFF1
 12523                           intcon3	equ	0xFF0
 12524                           postinc0	equ	0xFEE
 12525                           fsr0h	equ	0xFEA
 12526                           fsr0l	equ	0xFE9
 12527                           wreg	equ	0xFE8
 12528                           postdec1	equ	0xFE5
 12529                           fsr1h	equ	0xFE2
 12530                           fsr1l	equ	0xFE1
 12531                           bsr	equ	0xFE0
 12532                           postinc2	equ	0xFDE
 12533                           postdec2	equ	0xFDD
 12534                           plusw2	equ	0xFDB
 12535                           fsr2h	equ	0xFDA
 12536                           fsr2l	equ	0xFD9
 12537                           status	equ	0xFD8
 12538                           
 12539 ;; *************** function i1_TMR_Timer0Int *****************
 12540 ;; Defined at:
 12541 ;;		line 208 in file "TIMERS.c"
 12542 ;; Parameters:    Size  Location     Type
 12543 ;;  state           1    wreg     unsigned char 
 12544 ;; Auto vars:     Size  Location     Type
 12545 ;;  state           1    0[COMRAM] unsigned char 
 12546 ;; Return value:  Size  Location     Type
 12547 ;;		None               void
 12548 ;; Registers used:
 12549 ;;		wreg, status,2
 12550 ;; Tracked objects:
 12551 ;;		On entry : 0/0
 12552 ;;		On exit  : 0/0
 12553 ;;		Unchanged: 0/0
 12554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12555 ;;      Params:         0       0       0       0       0
 12556 ;;      Locals:         1       0       0       0       0
 12557 ;;      Temps:          0       0       0       0       0
 12558 ;;      Totals:         1       0       0       0       0
 12559 ;;Total ram usage:        1 bytes
 12560 ;; Hardware stack levels used:    1
 12561 ;; Hardware stack levels required when called:    6
 12562 ;; This function calls:
 12563 ;;		Nothing
 12564 ;; This function is called by:
 12565 ;;		_RF_Disable
 12566 ;;		_RF_Enable
 12567 ;; This function uses a non-reentrant model
 12568 ;;
 12569                           
 12570                           	psect	text78
 12571  001C6A                     __ptext78:
 12572                           	opt stack 0
 12573  001C6A                     i1_TMR_Timer0Int:
 12574                           	opt stack 16
 12575                           
 12576                           ;incstack = 0
 12577                           ;i1TMR_Timer0Int@state stored from wreg
 12578  001C6A  6E01               	movwf	i1TMR_Timer0Int@state,c
 12579                           
 12580                           ;TIMERS.c: 210: if(state)
 12581  001C6C  5001               	movf	i1TMR_Timer0Int@state,w,c
 12582  001C6E  B4D8               	btfsc	status,2,c
 12583  001C70  D002               	goto	i1l1064
 12584                           
 12585                           ;TIMERS.c: 211: {
 12586                           ;TIMERS.c: 213: INTCONbits.TMR0IE = 1;
 12587  001C72  8AF2               	bsf	intcon,5,c	;volatile
 12588                           
 12589                           ;TIMERS.c: 214: }
 12590  001C74  0012               	return	
 12591  001C76                     i1l1064:
 12592                           
 12593                           ;TIMERS.c: 215: else
 12594                           ;TIMERS.c: 216: {
 12595                           ;TIMERS.c: 218: INTCONbits.TMR0IE = 0;
 12596  001C76  9AF2               	bcf	intcon,5,c	;volatile
 12597  001C78  0012               	return	
 12598  001C7A  0012               	return		;funcret
 12599  001C7C                     __end_ofi1_TMR_Timer0Int:
 12600                           	opt stack 0
 12601                           pclatu	equ	0xFFB
 12602                           pclath	equ	0xFFA
 12603                           tblptru	equ	0xFF8
 12604                           tblptrh	equ	0xFF7
 12605                           tblptrl	equ	0xFF6
 12606                           tablat	equ	0xFF5
 12607                           prodh	equ	0xFF4
 12608                           prodl	equ	0xFF3
 12609                           intcon	equ	0xFF2
 12610                           intcon2	equ	0xFF1
 12611                           intcon3	equ	0xFF0
 12612                           postinc0	equ	0xFEE
 12613                           fsr0h	equ	0xFEA
 12614                           fsr0l	equ	0xFE9
 12615                           wreg	equ	0xFE8
 12616                           postdec1	equ	0xFE5
 12617                           fsr1h	equ	0xFE2
 12618                           fsr1l	equ	0xFE1
 12619                           bsr	equ	0xFE0
 12620                           postinc2	equ	0xFDE
 12621                           postdec2	equ	0xFDD
 12622                           plusw2	equ	0xFDB
 12623                           fsr2h	equ	0xFDA
 12624                           fsr2l	equ	0xFD9
 12625                           status	equ	0xFD8
 12626                           
 12627 ;; *************** function i1_RF_DataInt *****************
 12628 ;; Defined at:
 12629 ;;		line 78 in file "RF.c"
 12630 ;; Parameters:    Size  Location     Type
 12631 ;;  state           1    wreg     unsigned char 
 12632 ;; Auto vars:     Size  Location     Type
 12633 ;;  state           1    0[COMRAM] unsigned char 
 12634 ;; Return value:  Size  Location     Type
 12635 ;;		None               void
 12636 ;; Registers used:
 12637 ;;		wreg, status,2
 12638 ;; Tracked objects:
 12639 ;;		On entry : 0/0
 12640 ;;		On exit  : 0/0
 12641 ;;		Unchanged: 0/0
 12642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12643 ;;      Params:         0       0       0       0       0
 12644 ;;      Locals:         1       0       0       0       0
 12645 ;;      Temps:          0       0       0       0       0
 12646 ;;      Totals:         1       0       0       0       0
 12647 ;;Total ram usage:        1 bytes
 12648 ;; Hardware stack levels used:    1
 12649 ;; Hardware stack levels required when called:    6
 12650 ;; This function calls:
 12651 ;;		Nothing
 12652 ;; This function is called by:
 12653 ;;		_RF_Disable
 12654 ;;		_RF_Enable
 12655 ;; This function uses a non-reentrant model
 12656 ;;
 12657                           
 12658                           	psect	text79
 12659  001BAC                     __ptext79:
 12660                           	opt stack 0
 12661  001BAC                     i1_RF_DataInt:
 12662                           	opt stack 16
 12663                           
 12664                           ;incstack = 0
 12665                           ;i1RF_DataInt@state stored from wreg
 12666  001BAC  6E01               	movwf	i1RF_DataInt@state,c
 12667                           
 12668                           ;RF.c: 80: if(state)
 12669  001BAE  5001               	movf	i1RF_DataInt@state,w,c
 12670  001BB0  B4D8               	btfsc	status,2,c
 12671  001BB2  D003               	goto	i1l382
 12672                           
 12673                           ;RF.c: 81: {
 12674                           ;RF.c: 83: INTCON3bits.INT1E = 1;
 12675  001BB4  86F0               	bsf	intcon3,3,c	;volatile
 12676                           
 12677                           ;RF.c: 84: INTCON3bits.INT2E = 1;
 12678  001BB6  88F0               	bsf	intcon3,4,c	;volatile
 12679                           
 12680                           ;RF.c: 85: }
 12681  001BB8  0012               	return	
 12682  001BBA                     i1l382:
 12683                           
 12684                           ;RF.c: 86: else
 12685                           ;RF.c: 87: {
 12686                           ;RF.c: 89: INTCON3bits.INT1E = 0;
 12687  001BBA  96F0               	bcf	intcon3,3,c	;volatile
 12688                           
 12689                           ;RF.c: 90: INTCON3bits.INT2E = 0;
 12690  001BBC  98F0               	bcf	intcon3,4,c	;volatile
 12691  001BBE  0012               	return	
 12692  001BC0  0012               	return		;funcret
 12693  001BC2                     __end_ofi1_RF_DataInt:
 12694                           	opt stack 0
 12695                           pclatu	equ	0xFFB
 12696                           pclath	equ	0xFFA
 12697                           tblptru	equ	0xFF8
 12698                           tblptrh	equ	0xFF7
 12699                           tblptrl	equ	0xFF6
 12700                           tablat	equ	0xFF5
 12701                           prodh	equ	0xFF4
 12702                           prodl	equ	0xFF3
 12703                           intcon	equ	0xFF2
 12704                           intcon2	equ	0xFF1
 12705                           intcon3	equ	0xFF0
 12706                           postinc0	equ	0xFEE
 12707                           fsr0h	equ	0xFEA
 12708                           fsr0l	equ	0xFE9
 12709                           wreg	equ	0xFE8
 12710                           postdec1	equ	0xFE5
 12711                           fsr1h	equ	0xFE2
 12712                           fsr1l	equ	0xFE1
 12713                           bsr	equ	0xFE0
 12714                           postinc2	equ	0xFDE
 12715                           postdec2	equ	0xFDD
 12716                           plusw2	equ	0xFDB
 12717                           fsr2h	equ	0xFDA
 12718                           fsr2l	equ	0xFD9
 12719                           status	equ	0xFD8
 12720                           
 12721 ;; *************** function _FSH_WriteIntArray *****************
 12722 ;; Defined at:
 12723 ;;		line 135 in file "FLASH.c"
 12724 ;; Parameters:    Size  Location     Type
 12725 ;;  Array           3    4[COMRAM] PTR unsigned int 
 12726 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 12727 ;; Auto vars:     Size  Location     Type
 12728 ;;  i               1   12[COMRAM] unsigned char 
 12729 ;; Return value:  Size  Location     Type
 12730 ;;		None               void
 12731 ;; Registers used:
 12732 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12733 ;; Tracked objects:
 12734 ;;		On entry : 0/0
 12735 ;;		On exit  : 0/0
 12736 ;;		Unchanged: 0/0
 12737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12738 ;;      Params:         3       0       0       0       0
 12739 ;;      Locals:         1       0       0       0       0
 12740 ;;      Temps:          5       0       0       0       0
 12741 ;;      Totals:         9       0       0       0       0
 12742 ;;Total ram usage:        9 bytes
 12743 ;; Hardware stack levels used:    1
 12744 ;; Hardware stack levels required when called:    7
 12745 ;; This function calls:
 12746 ;;		_FSH_AddressToBlock
 12747 ;;		_FSH_Sequence
 12748 ;; This function is called by:
 12749 ;;		_FSH_Write_IR_RF
 12750 ;; This function uses a non-reentrant model
 12751 ;;
 12752                           
 12753                           	psect	text80
 12754  000E0E                     __ptext80:
 12755                           	opt stack 0
 12756  000E0E                     _FSH_WriteIntArray:
 12757                           	opt stack 14
 12758                           
 12759                           ;FLASH.c: 137: unsigned char i;
 12760                           ;FLASH.c: 139: FSH_AddressToBlock(Array);
 12761                           
 12762                           ;incstack = 0
 12763  000E0E  5005               	movf	FSH_WriteIntArray@Array,w,c
 12764  000E10  6E01               	movwf	FSH_AddressToBlock@Address,c
 12765  000E12  5006               	movf	FSH_WriteIntArray@Array+1,w,c
 12766  000E14  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 12767  000E16  5007               	movf	FSH_WriteIntArray@Array+2,w,c
 12768  000E18  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 12769  000E1A  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 12770  000E1C  EC59  F00E         	call	_FSH_AddressToBlock	;wreg free
 12771                           
 12772                           ;FLASH.c: 141: for(i = 0; i<32; i++)
 12773  000E20  0E00               	movlw	0
 12774  000E22  6E0D               	movwf	FSH_WriteIntArray@i,c
 12775  000E24  D034               	goto	i1l5450
 12776  000E26  D036               	goto	i1l1171
 12777  000E28                     i1l5446:
 12778                           
 12779                           ;FLASH.c: 142: {
 12780                           ;FLASH.c: 144: TABLAT =(Array[i] & 0xFF00) >> 8;
 12781  000E28  500D               	movf	FSH_WriteIntArray@i,w,c
 12782  000E2A  0D02               	mullw	2
 12783  000E2C  50F3               	movf	prodl,w,c
 12784  000E2E  2405               	addwf	FSH_WriteIntArray@Array,w,c
 12785  000E30  6E08               	movwf	??_FSH_WriteIntArray& (0+255),c
 12786  000E32  50F4               	movf	prodh,w,c
 12787  000E34  2006               	addwfc	FSH_WriteIntArray@Array+1,w,c
 12788  000E36  6E09               	movwf	(??_FSH_WriteIntArray+1)& (0+255),c
 12789  000E38  0E00               	movlw	0
 12790  000E3A  2007               	addwfc	FSH_WriteIntArray@Array+2,w,c
 12791  000E3C  6E0A               	movwf	(??_FSH_WriteIntArray+2)& (0+255),c
 12792  000E3E  C008  FFF6         	movff	??_FSH_WriteIntArray,tblptrl
 12793  000E42  C009  FFF7         	movff	??_FSH_WriteIntArray+1,tblptrh
 12794  000E46  C00A  FFF8         	movff	??_FSH_WriteIntArray+2,tblptru
 12795  000E4A  0009               	tblrd		*+
 12796  000E4C  CFF5 F00B          	movff	tablat,??_FSH_WriteIntArray+3
 12797  000E50  0009               	tblrd		*+
 12798  000E52  CFF5 F00C          	movff	tablat,??_FSH_WriteIntArray+4
 12799  000E56  C00C  F00B         	movff	??_FSH_WriteIntArray+4,??_FSH_WriteIntArray+3
 12800  000E5A  6A0C               	clrf	??_FSH_WriteIntArray+4,c
 12801  000E5C  500B               	movf	??_FSH_WriteIntArray+3,w,c
 12802  000E5E  6EF5               	movwf	tablat,c	;volatile
 12803  000E60  000D               	tblwt		*+	;# 
 12804                           
 12805                           ;FLASH.c: 146: TABLAT = (Array[i] & 0x00FF);
 12806  000E62  500D               	movf	FSH_WriteIntArray@i,w,c
 12807  000E64  0D02               	mullw	2
 12808  000E66  50F3               	movf	prodl,w,c
 12809  000E68  2405               	addwf	FSH_WriteIntArray@Array,w,c
 12810  000E6A  6E08               	movwf	??_FSH_WriteIntArray& (0+255),c
 12811  000E6C  50F4               	movf	prodh,w,c
 12812  000E6E  2006               	addwfc	FSH_WriteIntArray@Array+1,w,c
 12813  000E70  6E09               	movwf	(??_FSH_WriteIntArray+1)& (0+255),c
 12814  000E72  0E00               	movlw	0
 12815  000E74  2007               	addwfc	FSH_WriteIntArray@Array+2,w,c
 12816  000E76  6E0A               	movwf	(??_FSH_WriteIntArray+2)& (0+255),c
 12817  000E78  C008  FFF6         	movff	??_FSH_WriteIntArray,tblptrl
 12818  000E7C  C009  FFF7         	movff	??_FSH_WriteIntArray+1,tblptrh
 12819  000E80  C00A  FFF8         	movff	??_FSH_WriteIntArray+2,tblptru
 12820  000E84  0008               	tblrd		*
 12821  000E86  CFF5 FFF5          	movff	tablat,tablat	;volatile
 12822  000E8A  000D               	tblwt		*+	;# 
 12823  000E8C  2A0D               	incf	FSH_WriteIntArray@i,f,c
 12824  000E8E                     i1l5450:
 12825  000E8E  0E1F               	movlw	31
 12826  000E90  640D               	cpfsgt	FSH_WriteIntArray@i,c
 12827  000E92  D7CA               	goto	i1l5446
 12828  000E94                     i1l1171:
 12829                           
 12830                           ;FLASH.c: 148: }
 12831                           ;FLASH.c: 149: EECON1bits.WRERR = 0;
 12832  000E94  96A6               	bcf	4006,3,c	;volatile
 12833                           
 12834                           ;FLASH.c: 150: EECON1bits.WREN = 1;
 12835  000E96  84A6               	bsf	4006,2,c	;volatile
 12836                           
 12837                           ;FLASH.c: 151: EECON1bits.FREE = 0;
 12838  000E98  98A6               	bcf	4006,4,c	;volatile
 12839                           
 12840                           ;FLASH.c: 152: FSH_Sequence();
 12841  000E9A  EC9E  F00E         	call	_FSH_Sequence	;wreg free
 12842                           
 12843                           ;FLASH.c: 153: EECON1bits.WR = 1;
 12844  000E9E  82A6               	bsf	4006,1,c	;volatile
 12845                           
 12846                           ;FLASH.c: 154: while(EECON1bits.WRERR);
 12847  000EA0  D000               	goto	i1l1172
 12848  000EA2                     i1l1172:
 12849  000EA2  B6A6               	btfsc	4006,3,c	;volatile
 12850  000EA4  D7FE               	goto	i1l1172
 12851                           
 12852                           ;FLASH.c: 155: EECON1bits.WREN = 0;
 12853  000EA6  94A6               	bcf	4006,2,c	;volatile
 12854  000EA8  0012               	return		;funcret
 12855  000EAA                     __end_of_FSH_WriteIntArray:
 12856                           	opt stack 0
 12857                           pclatu	equ	0xFFB
 12858                           pclath	equ	0xFFA
 12859                           tblptru	equ	0xFF8
 12860                           tblptrh	equ	0xFF7
 12861                           tblptrl	equ	0xFF6
 12862                           tablat	equ	0xFF5
 12863                           prodh	equ	0xFF4
 12864                           prodl	equ	0xFF3
 12865                           intcon	equ	0xFF2
 12866                           intcon2	equ	0xFF1
 12867                           intcon3	equ	0xFF0
 12868                           postinc0	equ	0xFEE
 12869                           fsr0h	equ	0xFEA
 12870                           fsr0l	equ	0xFE9
 12871                           wreg	equ	0xFE8
 12872                           postdec1	equ	0xFE5
 12873                           fsr1h	equ	0xFE2
 12874                           fsr1l	equ	0xFE1
 12875                           bsr	equ	0xFE0
 12876                           postinc2	equ	0xFDE
 12877                           postdec2	equ	0xFDD
 12878                           plusw2	equ	0xFDB
 12879                           fsr2h	equ	0xFDA
 12880                           fsr2l	equ	0xFD9
 12881                           status	equ	0xFD8
 12882                           
 12883 ;; *************** function _FSH_VerifyWriteIntArray *****************
 12884 ;; Defined at:
 12885 ;;		line 163 in file "FLASH.c"
 12886 ;; Parameters:    Size  Location     Type
 12887 ;;  ConstArray      3    0[COMRAM] PTR const unsigned int 
 12888 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 12889 ;;  Array           2    3[COMRAM] PTR unsigned int 
 12890 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 12891 ;; Auto vars:     Size  Location     Type
 12892 ;;  i               1   10[COMRAM] unsigned char 
 12893 ;; Return value:  Size  Location     Type
 12894 ;;                  1    wreg      unsigned char 
 12895 ;; Registers used:
 12896 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 12897 ;; Tracked objects:
 12898 ;;		On entry : 0/0
 12899 ;;		On exit  : 0/0
 12900 ;;		Unchanged: 0/0
 12901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12902 ;;      Params:         5       0       0       0       0
 12903 ;;      Locals:         1       0       0       0       0
 12904 ;;      Temps:          5       0       0       0       0
 12905 ;;      Totals:        11       0       0       0       0
 12906 ;;Total ram usage:       11 bytes
 12907 ;; Hardware stack levels used:    1
 12908 ;; Hardware stack levels required when called:    6
 12909 ;; This function calls:
 12910 ;;		Nothing
 12911 ;; This function is called by:
 12912 ;;		_FSH_Write_IR_RF
 12913 ;; This function uses a non-reentrant model
 12914 ;;
 12915                           
 12916                           	psect	text81
 12917  001278                     __ptext81:
 12918                           	opt stack 0
 12919  001278                     _FSH_VerifyWriteIntArray:
 12920                           	opt stack 15
 12921                           
 12922                           ;FLASH.c: 165: unsigned char i;
 12923                           ;FLASH.c: 167: for(i = 0; i<32; i++)
 12924                           
 12925                           ;incstack = 0
 12926  001278  0E00               	movlw	0
 12927  00127A  6E0B               	movwf	FSH_VerifyWriteIntArray@i,c
 12928  00127C                     i1l5458:
 12929  00127C  0E1F               	movlw	31
 12930  00127E  640B               	cpfsgt	FSH_VerifyWriteIntArray@i,c
 12931  001280  D001               	goto	i1l5462
 12932  001282  D026               	goto	i1l5472
 12933  001284                     i1l5462:
 12934                           
 12935                           ;FLASH.c: 168: {
 12936                           ;FLASH.c: 169: if(ConstArray[i] != Array[i])
 12937  001284  500B               	movf	FSH_VerifyWriteIntArray@i,w,c
 12938  001286  0D02               	mullw	2
 12939  001288  50F3               	movf	prodl,w,c
 12940  00128A  2404               	addwf	FSH_VerifyWriteIntArray@Array,w,c
 12941  00128C  6ED9               	movwf	fsr2l,c
 12942  00128E  50F4               	movf	prodh,w,c
 12943  001290  2005               	addwfc	FSH_VerifyWriteIntArray@Array+1,w,c
 12944  001292  6EDA               	movwf	fsr2h,c
 12945  001294  500B               	movf	FSH_VerifyWriteIntArray@i,w,c
 12946  001296  0D02               	mullw	2
 12947  001298  50F3               	movf	prodl,w,c
 12948  00129A  2401               	addwf	FSH_VerifyWriteIntArray@ConstArray,w,c
 12949  00129C  6E08               	movwf	(??_FSH_VerifyWriteIntArray+2)& (0+255),c
 12950  00129E  50F4               	movf	prodh,w,c
 12951  0012A0  2002               	addwfc	FSH_VerifyWriteIntArray@ConstArray+1,w,c
 12952  0012A2  6E09               	movwf	(??_FSH_VerifyWriteIntArray+3)& (0+255),c
 12953  0012A4  0E00               	movlw	0
 12954  0012A6  2003               	addwfc	FSH_VerifyWriteIntArray@ConstArray+2,w,c
 12955  0012A8  6E0A               	movwf	(??_FSH_VerifyWriteIntArray+4)& (0+255),c
 12956  0012AA  C008  FFF6         	movff	??_FSH_VerifyWriteIntArray+2,tblptrl
 12957  0012AE  C009  FFF7         	movff	??_FSH_VerifyWriteIntArray+3,tblptrh
 12958  0012B2  C00A  FFF8         	movff	??_FSH_VerifyWriteIntArray+4,tblptru
 12959  0012B6  50DE               	movf	postinc2,w,c
 12960  0012B8  0009               	tblrd		*+
 12961  0012BA  18F5               	xorwf	tablat,w,c
 12962  0012BC  E105               	bnz	i1u548_20
 12963  0012BE  50DE               	movf	postinc2,w,c
 12964  0012C0  0009               	tblrd		*+
 12965  0012C2  18F5               	xorwf	tablat,w,c
 12966  0012C4  B4D8               	btfsc	status,2,c
 12967  0012C6  D002               	goto	i1l5468
 12968  0012C8                     i1u548_20:
 12969                           
 12970                           ;FLASH.c: 170: {
 12971                           ;FLASH.c: 171: return 0;
 12972  0012C8  0E00               	movlw	0
 12973  0012CA  0012               	return	
 12974  0012CC                     i1l5468:
 12975  0012CC  2A0B               	incf	FSH_VerifyWriteIntArray@i,f,c
 12976  0012CE  D7D6               	goto	i1l5458
 12977  0012D0                     i1l5472:
 12978                           
 12979                           ;FLASH.c: 172: }
 12980                           ;FLASH.c: 173: }
 12981                           ;FLASH.c: 174: return 1;
 12982  0012D0  0E01               	movlw	1
 12983  0012D2  0012               	return	
 12984  0012D4  0012               	return		;funcret
 12985  0012D6                     __end_of_FSH_VerifyWriteIntArray:
 12986                           	opt stack 0
 12987                           pclatu	equ	0xFFB
 12988                           pclath	equ	0xFFA
 12989                           tblptru	equ	0xFF8
 12990                           tblptrh	equ	0xFF7
 12991                           tblptrl	equ	0xFF6
 12992                           tablat	equ	0xFF5
 12993                           prodh	equ	0xFF4
 12994                           prodl	equ	0xFF3
 12995                           intcon	equ	0xFF2
 12996                           intcon2	equ	0xFF1
 12997                           intcon3	equ	0xFF0
 12998                           postinc0	equ	0xFEE
 12999                           fsr0h	equ	0xFEA
 13000                           fsr0l	equ	0xFE9
 13001                           wreg	equ	0xFE8
 13002                           postdec1	equ	0xFE5
 13003                           fsr1h	equ	0xFE2
 13004                           fsr1l	equ	0xFE1
 13005                           bsr	equ	0xFE0
 13006                           postinc2	equ	0xFDE
 13007                           postdec2	equ	0xFDD
 13008                           plusw2	equ	0xFDB
 13009                           fsr2h	equ	0xFDA
 13010                           fsr2l	equ	0xFD9
 13011                           status	equ	0xFD8
 13012                           
 13013 ;; *************** function _FSH_EraseBlock *****************
 13014 ;; Defined at:
 13015 ;;		line 86 in file "FLASH.c"
 13016 ;; Parameters:    Size  Location     Type
 13017 ;;  Address         4   13[COMRAM] unsigned long 
 13018 ;; Auto vars:     Size  Location     Type
 13019 ;;  i               4    0        unsigned long 
 13020 ;;  WriteTries      1   19[COMRAM] unsigned char 
 13021 ;;  lowint          1   18[COMRAM] unsigned char 
 13022 ;;  highint         1   17[COMRAM] unsigned char 
 13023 ;; Return value:  Size  Location     Type
 13024 ;;		None               void
 13025 ;; Registers used:
 13026 ;;		wreg, status,2, status,0, cstack
 13027 ;; Tracked objects:
 13028 ;;		On entry : 0/0
 13029 ;;		On exit  : 0/0
 13030 ;;		Unchanged: 0/0
 13031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13032 ;;      Params:         4       0       0       0       0
 13033 ;;      Locals:         3       0       0       0       0
 13034 ;;      Temps:          0       0       0       0       0
 13035 ;;      Totals:         7       0       0       0       0
 13036 ;;Total ram usage:        7 bytes
 13037 ;; Hardware stack levels used:    1
 13038 ;; Hardware stack levels required when called:    8
 13039 ;; This function calls:
 13040 ;;		_FSH_AddressToBlock
 13041 ;;		_FSH_Sequence
 13042 ;;		i1_MSC_DelayMS
 13043 ;; This function is called by:
 13044 ;;		_FSH_Write_IR_RF
 13045 ;; This function uses a non-reentrant model
 13046 ;;
 13047                           
 13048                           	psect	text82
 13049  001056                     __ptext82:
 13050                           	opt stack 0
 13051  001056                     _FSH_EraseBlock:
 13052                           	opt stack 13
 13053                           
 13054                           ;FLASH.c: 88: unsigned char highint = INTCONbits.GIE;
 13055                           
 13056                           ;incstack = 0
 13057  001056  0E00               	movlw	0
 13058  001058  BEF2               	btfsc	intcon,7,c	;volatile
 13059  00105A  0E01               	movlw	1
 13060  00105C  6E12               	movwf	FSH_EraseBlock@highint,c
 13061                           
 13062                           ;FLASH.c: 89: unsigned char lowint = INTCONbits.PEIE;
 13063  00105E  0E00               	movlw	0
 13064  001060  BCF2               	btfsc	intcon,6,c	;volatile
 13065  001062  0E01               	movlw	1
 13066  001064  6E13               	movwf	FSH_EraseBlock@lowint,c
 13067                           
 13068                           ;FLASH.c: 90: unsigned char WriteTries;
 13069                           ;FLASH.c: 91: unsigned long i;
 13070                           ;FLASH.c: 93: INTCONbits.GIE = 0;
 13071  001066  9EF2               	bcf	intcon,7,c	;volatile
 13072                           
 13073                           ;FLASH.c: 94: INTCONbits.PEIE = 0;
 13074  001068  9CF2               	bcf	intcon,6,c	;volatile
 13075  00106A  D000               	goto	i1l5400
 13076  00106C                     i1l5400:
 13077                           
 13078                           ;FLASH.c: 97: FSH_AddressToBlock(Address);
 13079  00106C  C00E  F001         	movff	FSH_EraseBlock@Address,FSH_AddressToBlock@Address
 13080  001070  C00F  F002         	movff	FSH_EraseBlock@Address+1,FSH_AddressToBlock@Address+1
 13081  001074  C010  F003         	movff	FSH_EraseBlock@Address+2,FSH_AddressToBlock@Address+2
 13082  001078  C011  F004         	movff	FSH_EraseBlock@Address+3,FSH_AddressToBlock@Address+3
 13083  00107C  EC59  F00E         	call	_FSH_AddressToBlock	;wreg free
 13084                           
 13085                           ;FLASH.c: 99: WriteTries = 1;
 13086  001080  0E01               	movlw	1
 13087  001082  6E14               	movwf	FSH_EraseBlock@WriteTries,c
 13088                           
 13089                           ;FLASH.c: 101: EECON1bits.WRERR = 0;
 13090  001084  96A6               	bcf	4006,3,c	;volatile
 13091                           
 13092                           ;FLASH.c: 102: EECON1bits.WREN = 1;
 13093  001086  84A6               	bsf	4006,2,c	;volatile
 13094                           
 13095                           ;FLASH.c: 103: EECON1bits.FREE = 1;
 13096  001088  88A6               	bsf	4006,4,c	;volatile
 13097                           
 13098                           ;FLASH.c: 104: FSH_Sequence();
 13099  00108A  EC9E  F00E         	call	_FSH_Sequence	;wreg free
 13100                           
 13101                           ;FLASH.c: 105: EECON1bits.WR = 1;
 13102  00108E  82A6               	bsf	4006,1,c	;volatile
 13103                           
 13104                           ;FLASH.c: 106: __nop();
 13105  001090  F000               	nop	
 13106                           
 13107                           ;FLASH.c: 107: __nop();
 13108  001092  F000               	nop	
 13109                           
 13110                           ;FLASH.c: 108: MSC_DelayMS(500);
 13111  001094  0EF4               	movlw	244
 13112  001096  6E05               	movwf	i1MSC_DelayMS@US,c
 13113  001098  0E01               	movlw	1
 13114  00109A  6E06               	movwf	i1MSC_DelayMS@US+1,c
 13115  00109C  0E00               	movlw	0
 13116  00109E  6E07               	movwf	i1MSC_DelayMS@US+2,c
 13117  0010A0  0E00               	movlw	0
 13118  0010A2  6E08               	movwf	i1MSC_DelayMS@US+3,c
 13119  0010A4  ECE9  F009         	call	i1_MSC_DelayMS	;wreg free
 13120                           
 13121                           ;FLASH.c: 110: EECON1bits.WREN = 0;
 13122  0010A8  94A6               	bcf	4006,2,c	;volatile
 13123                           
 13124                           ;FLASH.c: 111: if(EECON1bits.WRERR)
 13125  0010AA  A6A6               	btfss	4006,3,c	;volatile
 13126  0010AC  D006               	goto	i1l5430
 13127                           
 13128                           ;FLASH.c: 112: {
 13129                           ;FLASH.c: 113: WriteTries++;
 13130  0010AE  2A14               	incf	FSH_EraseBlock@WriteTries,f,c
 13131                           
 13132                           ;FLASH.c: 114: if(WriteTries < 10)
 13133  0010B0  0E0A               	movlw	10
 13134  0010B2  6014               	cpfslt	FSH_EraseBlock@WriteTries,c
 13135  0010B4  D002               	goto	i1l5430
 13136                           
 13137                           ;FLASH.c: 115: {
 13138                           ;FLASH.c: 116: goto restart;
 13139  0010B6  D7DA               	goto	i1l5400
 13140  0010B8  D000               	goto	i1l5430
 13141  0010BA                     i1l5430:
 13142                           
 13143                           ;FLASH.c: 117: }
 13144                           ;FLASH.c: 118: }
 13145                           ;FLASH.c: 120: if(highint)
 13146  0010BA  5012               	movf	FSH_EraseBlock@highint,w,c
 13147  0010BC  B4D8               	btfsc	status,2,c
 13148  0010BE  D002               	goto	i1l5434
 13149                           
 13150                           ;FLASH.c: 121: {
 13151                           ;FLASH.c: 122: INTCONbits.GIE = 1;
 13152  0010C0  8EF2               	bsf	intcon,7,c	;volatile
 13153  0010C2  D000               	goto	i1l5434
 13154  0010C4                     i1l5434:
 13155                           
 13156                           ;FLASH.c: 123: }
 13157                           ;FLASH.c: 124: if(lowint)
 13158  0010C4  5013               	movf	FSH_EraseBlock@lowint,w,c
 13159  0010C6  B4D8               	btfsc	status,2,c
 13160  0010C8  0012               	return	
 13161                           
 13162                           ;FLASH.c: 125: {
 13163                           ;FLASH.c: 126: INTCONbits.PEIE = 1;
 13164  0010CA  8CF2               	bsf	intcon,6,c	;volatile
 13165  0010CC  0012               	return	
 13166  0010CE  0012               	return		;funcret
 13167  0010D0                     __end_of_FSH_EraseBlock:
 13168                           	opt stack 0
 13169                           pclatu	equ	0xFFB
 13170                           pclath	equ	0xFFA
 13171                           tblptru	equ	0xFF8
 13172                           tblptrh	equ	0xFF7
 13173                           tblptrl	equ	0xFF6
 13174                           tablat	equ	0xFF5
 13175                           prodh	equ	0xFF4
 13176                           prodl	equ	0xFF3
 13177                           intcon	equ	0xFF2
 13178                           intcon2	equ	0xFF1
 13179                           intcon3	equ	0xFF0
 13180                           postinc0	equ	0xFEE
 13181                           fsr0h	equ	0xFEA
 13182                           fsr0l	equ	0xFE9
 13183                           wreg	equ	0xFE8
 13184                           postdec1	equ	0xFE5
 13185                           fsr1h	equ	0xFE2
 13186                           fsr1l	equ	0xFE1
 13187                           bsr	equ	0xFE0
 13188                           postinc2	equ	0xFDE
 13189                           postdec2	equ	0xFDD
 13190                           plusw2	equ	0xFDB
 13191                           fsr2h	equ	0xFDA
 13192                           fsr2l	equ	0xFD9
 13193                           status	equ	0xFD8
 13194                           
 13195 ;; *************** function i1_MSC_DelayMS *****************
 13196 ;; Defined at:
 13197 ;;		line 47 in file "MISC.c"
 13198 ;; Parameters:    Size  Location     Type
 13199 ;;  US              4    4[COMRAM] long 
 13200 ;; Auto vars:     Size  Location     Type
 13201 ;;  MSC_DelayMS     4    9[COMRAM] long 
 13202 ;; Return value:  Size  Location     Type
 13203 ;;		None               void
 13204 ;; Registers used:
 13205 ;;		wreg, status,2, status,0, cstack
 13206 ;; Tracked objects:
 13207 ;;		On entry : 0/0
 13208 ;;		On exit  : 0/0
 13209 ;;		Unchanged: 0/0
 13210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13211 ;;      Params:         4       0       0       0       0
 13212 ;;      Locals:         4       0       0       0       0
 13213 ;;      Temps:          1       0       0       0       0
 13214 ;;      Totals:         9       0       0       0       0
 13215 ;;Total ram usage:        9 bytes
 13216 ;; Hardware stack levels used:    1
 13217 ;; Hardware stack levels required when called:    7
 13218 ;; This function calls:
 13219 ;;		i1_MSC_DelayNOP
 13220 ;; This function is called by:
 13221 ;;		_FSH_EraseBlock
 13222 ;; This function uses a non-reentrant model
 13223 ;;
 13224                           
 13225                           	psect	text83
 13226  0013D2                     __ptext83:
 13227                           	opt stack 0
 13228  0013D2                     i1_MSC_DelayMS:
 13229                           	opt stack 13
 13230                           
 13231                           ;MISC.c: 49: long i;
 13232                           ;MISC.c: 51: for(i=0; i<US; i++)
 13233                           
 13234                           ;incstack = 0
 13235  0013D2  0E00               	movlw	0
 13236  0013D4  6E0A               	movwf	i1MSC_DelayMS@i,c
 13237  0013D6  0E00               	movlw	0
 13238  0013D8  6E0B               	movwf	i1MSC_DelayMS@i+1,c
 13239  0013DA  0E00               	movlw	0
 13240  0013DC  6E0C               	movwf	i1MSC_DelayMS@i+2,c
 13241  0013DE  0E00               	movlw	0
 13242  0013E0  6E0D               	movwf	i1MSC_DelayMS@i+3,c
 13243  0013E2  D00D               	goto	i1l5216
 13244  0013E4                     i1l5212:
 13245                           
 13246                           ;MISC.c: 52: {
 13247                           ;MISC.c: 53: MSC_DelayNOP(466);
 13248  0013E4  0E01               	movlw	1
 13249  0013E6  6E02               	movwf	i1MSC_DelayNOP@NOPs+1,c
 13250  0013E8  0ED2               	movlw	210
 13251  0013EA  6E01               	movwf	i1MSC_DelayNOP@NOPs,c
 13252  0013EC  ECB3  F00C         	call	i1_MSC_DelayNOP	;wreg free
 13253  0013F0  0E01               	movlw	1
 13254  0013F2  260A               	addwf	i1MSC_DelayMS@i,f,c
 13255  0013F4  0E00               	movlw	0
 13256  0013F6  220B               	addwfc	i1MSC_DelayMS@i+1,f,c
 13257  0013F8  220C               	addwfc	i1MSC_DelayMS@i+2,f,c
 13258  0013FA  220D               	addwfc	i1MSC_DelayMS@i+3,f,c
 13259  0013FC  D000               	goto	i1l5216
 13260  0013FE                     i1l5216:
 13261  0013FE  5005               	movf	i1MSC_DelayMS@US,w,c
 13262  001400  5C0A               	subwf	i1MSC_DelayMS@i,w,c
 13263  001402  5006               	movf	i1MSC_DelayMS@US+1,w,c
 13264  001404  580B               	subwfb	i1MSC_DelayMS@i+1,w,c
 13265  001406  5007               	movf	i1MSC_DelayMS@US+2,w,c
 13266  001408  580C               	subwfb	i1MSC_DelayMS@i+2,w,c
 13267  00140A  500D               	movf	i1MSC_DelayMS@i+3,w,c
 13268  00140C  0A80               	xorlw	128
 13269  00140E  6E09               	movwf	??i1_MSC_DelayMS& (0+255),c
 13270  001410  5008               	movf	i1MSC_DelayMS@US+3,w,c
 13271  001412  0A80               	xorlw	128
 13272  001414  5809               	subwfb	??i1_MSC_DelayMS& (0+255),w,c
 13273  001416  A0D8               	btfss	status,0,c
 13274  001418  D7E5               	goto	i1l5212
 13275  00141A  0012               	return		;funcret
 13276  00141C                     __end_ofi1_MSC_DelayMS:
 13277                           	opt stack 0
 13278                           pclatu	equ	0xFFB
 13279                           pclath	equ	0xFFA
 13280                           tblptru	equ	0xFF8
 13281                           tblptrh	equ	0xFF7
 13282                           tblptrl	equ	0xFF6
 13283                           tablat	equ	0xFF5
 13284                           prodh	equ	0xFF4
 13285                           prodl	equ	0xFF3
 13286                           intcon	equ	0xFF2
 13287                           intcon2	equ	0xFF1
 13288                           intcon3	equ	0xFF0
 13289                           postinc0	equ	0xFEE
 13290                           fsr0h	equ	0xFEA
 13291                           fsr0l	equ	0xFE9
 13292                           wreg	equ	0xFE8
 13293                           postdec1	equ	0xFE5
 13294                           fsr1h	equ	0xFE2
 13295                           fsr1l	equ	0xFE1
 13296                           bsr	equ	0xFE0
 13297                           postinc2	equ	0xFDE
 13298                           postdec2	equ	0xFDD
 13299                           plusw2	equ	0xFDB
 13300                           fsr2h	equ	0xFDA
 13301                           fsr2l	equ	0xFD9
 13302                           status	equ	0xFD8
 13303                           
 13304 ;; *************** function i1_MSC_DelayNOP *****************
 13305 ;; Defined at:
 13306 ;;		line 62 in file "MISC.c"
 13307 ;; Parameters:    Size  Location     Type
 13308 ;;  NOPs            2    0[COMRAM] unsigned int 
 13309 ;; Auto vars:     Size  Location     Type
 13310 ;;  MSC_DelayNOP    2    2[COMRAM] unsigned int 
 13311 ;; Return value:  Size  Location     Type
 13312 ;;		None               void
 13313 ;; Registers used:
 13314 ;;		wreg, status,2, status,0
 13315 ;; Tracked objects:
 13316 ;;		On entry : 0/0
 13317 ;;		On exit  : 0/0
 13318 ;;		Unchanged: 0/0
 13319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13320 ;;      Params:         2       0       0       0       0
 13321 ;;      Locals:         2       0       0       0       0
 13322 ;;      Temps:          0       0       0       0       0
 13323 ;;      Totals:         4       0       0       0       0
 13324 ;;Total ram usage:        4 bytes
 13325 ;; Hardware stack levels used:    1
 13326 ;; Hardware stack levels required when called:    6
 13327 ;; This function calls:
 13328 ;;		Nothing
 13329 ;; This function is called by:
 13330 ;;		i1_MSC_DelayMS
 13331 ;; This function uses a non-reentrant model
 13332 ;;
 13333                           
 13334                           	psect	text84
 13335  001966                     __ptext84:
 13336                           	opt stack 0
 13337  001966                     i1_MSC_DelayNOP:
 13338                           	opt stack 13
 13339                           
 13340                           ;MISC.c: 64: unsigned int i;
 13341                           ;MISC.c: 65: for(i=0; i<NOPs; i++)
 13342                           
 13343                           ;incstack = 0
 13344  001966  0E00               	movlw	0
 13345  001968  6E04               	movwf	i1MSC_DelayNOP@i+1,c
 13346  00196A  0E00               	movlw	0
 13347  00196C  6E03               	movwf	i1MSC_DelayNOP@i,c
 13348  00196E  D004               	goto	i1l5136
 13349  001970                     i1l596:
 13350                           
 13351                           ;MISC.c: 66: {
 13352                           ;MISC.c: 67: __nop();
 13353  001970  F000               	nop	
 13354  001972  4A03               	infsnz	i1MSC_DelayNOP@i,f,c
 13355  001974  2A04               	incf	i1MSC_DelayNOP@i+1,f,c
 13356  001976  D000               	goto	i1l5136
 13357  001978                     i1l5136:
 13358  001978  5001               	movf	i1MSC_DelayNOP@NOPs,w,c
 13359  00197A  5C03               	subwf	i1MSC_DelayNOP@i,w,c
 13360  00197C  5002               	movf	i1MSC_DelayNOP@NOPs+1,w,c
 13361  00197E  5804               	subwfb	i1MSC_DelayNOP@i+1,w,c
 13362  001980  A0D8               	btfss	status,0,c
 13363  001982  D7F6               	goto	i1l596
 13364  001984  0012               	return		;funcret
 13365  001986                     __end_ofi1_MSC_DelayNOP:
 13366                           	opt stack 0
 13367                           pclatu	equ	0xFFB
 13368                           pclath	equ	0xFFA
 13369                           tblptru	equ	0xFF8
 13370                           tblptrh	equ	0xFF7
 13371                           tblptrl	equ	0xFF6
 13372                           tablat	equ	0xFF5
 13373                           prodh	equ	0xFF4
 13374                           prodl	equ	0xFF3
 13375                           intcon	equ	0xFF2
 13376                           intcon2	equ	0xFF1
 13377                           intcon3	equ	0xFF0
 13378                           postinc0	equ	0xFEE
 13379                           fsr0h	equ	0xFEA
 13380                           fsr0l	equ	0xFE9
 13381                           wreg	equ	0xFE8
 13382                           postdec1	equ	0xFE5
 13383                           fsr1h	equ	0xFE2
 13384                           fsr1l	equ	0xFE1
 13385                           bsr	equ	0xFE0
 13386                           postinc2	equ	0xFDE
 13387                           postdec2	equ	0xFDD
 13388                           plusw2	equ	0xFDB
 13389                           fsr2h	equ	0xFDA
 13390                           fsr2l	equ	0xFD9
 13391                           status	equ	0xFD8
 13392                           
 13393 ;; *************** function _FSH_Sequence *****************
 13394 ;; Defined at:
 13395 ;;		line 57 in file "FLASH.c"
 13396 ;; Parameters:    Size  Location     Type
 13397 ;;		None
 13398 ;; Auto vars:     Size  Location     Type
 13399 ;;		None
 13400 ;; Return value:  Size  Location     Type
 13401 ;;		None               void
 13402 ;; Registers used:
 13403 ;;		None
 13404 ;; Tracked objects:
 13405 ;;		On entry : 0/0
 13406 ;;		On exit  : 0/0
 13407 ;;		Unchanged: 0/0
 13408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13409 ;;      Params:         0       0       0       0       0
 13410 ;;      Locals:         0       0       0       0       0
 13411 ;;      Temps:          0       0       0       0       0
 13412 ;;      Totals:         0       0       0       0       0
 13413 ;;Total ram usage:        0 bytes
 13414 ;; Hardware stack levels used:    1
 13415 ;; Hardware stack levels required when called:    6
 13416 ;; This function calls:
 13417 ;;		Nothing
 13418 ;; This function is called by:
 13419 ;;		_FSH_EraseBlock
 13420 ;;		_FSH_WriteIntArray
 13421 ;;		_FSH_Write_IR_RF
 13422 ;; This function uses a non-reentrant model
 13423 ;;
 13424                           
 13425                           	psect	text85
 13426  001D3C                     __ptext85:
 13427                           	opt stack 0
 13428  001D3C                     _FSH_Sequence:
 13429                           	opt stack 14
 13430                           
 13431                           ;incstack = 0
 13432  001D3C  0E55               	movlw	85	;# 
 13433  001D3E  6EA7               	movwf	4007,c	;# 
 13434  001D40  0EAA               	movlw	170	;# 
 13435  001D42  6EA7               	movwf	4007,c	;# 
 13436  001D44  0012               	return		;funcret
 13437  001D46                     __end_of_FSH_Sequence:
 13438                           	opt stack 0
 13439                           pclatu	equ	0xFFB
 13440                           pclath	equ	0xFFA
 13441                           tblptru	equ	0xFF8
 13442                           tblptrh	equ	0xFF7
 13443                           tblptrl	equ	0xFF6
 13444                           tablat	equ	0xFF5
 13445                           prodh	equ	0xFF4
 13446                           prodl	equ	0xFF3
 13447                           intcon	equ	0xFF2
 13448                           intcon2	equ	0xFF1
 13449                           intcon3	equ	0xFF0
 13450                           postinc0	equ	0xFEE
 13451                           fsr0h	equ	0xFEA
 13452                           fsr0l	equ	0xFE9
 13453                           wreg	equ	0xFE8
 13454                           postdec1	equ	0xFE5
 13455                           fsr1h	equ	0xFE2
 13456                           fsr1l	equ	0xFE1
 13457                           bsr	equ	0xFE0
 13458                           postinc2	equ	0xFDE
 13459                           postdec2	equ	0xFDD
 13460                           plusw2	equ	0xFDB
 13461                           fsr2h	equ	0xFDA
 13462                           fsr2l	equ	0xFD9
 13463                           status	equ	0xFD8
 13464                           
 13465 ;; *************** function _FSH_AddressToBlock *****************
 13466 ;; Defined at:
 13467 ;;		line 464 in file "FLASH.c"
 13468 ;; Parameters:    Size  Location     Type
 13469 ;;  Address         4    0[COMRAM] unsigned long 
 13470 ;; Auto vars:     Size  Location     Type
 13471 ;;		None
 13472 ;; Return value:  Size  Location     Type
 13473 ;;		None               void
 13474 ;; Registers used:
 13475 ;;		wreg, status,2, status,0
 13476 ;; Tracked objects:
 13477 ;;		On entry : 0/0
 13478 ;;		On exit  : 0/0
 13479 ;;		Unchanged: 0/0
 13480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13481 ;;      Params:         4       0       0       0       0
 13482 ;;      Locals:         0       0       0       0       0
 13483 ;;      Temps:          0       0       0       0       0
 13484 ;;      Totals:         4       0       0       0       0
 13485 ;;Total ram usage:        4 bytes
 13486 ;; Hardware stack levels used:    1
 13487 ;; Hardware stack levels required when called:    6
 13488 ;; This function calls:
 13489 ;;		Nothing
 13490 ;; This function is called by:
 13491 ;;		_FSH_EraseBlock
 13492 ;;		_FSH_WriteIntArray
 13493 ;;		_FSH_Write_IR_RF
 13494 ;; This function uses a non-reentrant model
 13495 ;;
 13496                           
 13497                           	psect	text86
 13498  001CB2                     __ptext86:
 13499                           	opt stack 0
 13500  001CB2                     _FSH_AddressToBlock:
 13501                           	opt stack 14
 13502                           
 13503                           ;FLASH.c: 466: TBLPTRU = (Address & 0x002F0000) >> 16;
 13504                           
 13505                           ;incstack = 0
 13506  001CB2  5003               	movf	FSH_AddressToBlock@Address+2,w,c
 13507  001CB4  0B2F               	andlw	47
 13508  001CB6  6EF8               	movwf	tblptru,c	;volatile
 13509                           
 13510                           ;FLASH.c: 467: TBLPTRH = (Address & 0x0000FF00) >> 8;
 13511  001CB8  C002  FFF7         	movff	FSH_AddressToBlock@Address+1,tblptrh	;volatile
 13512                           
 13513                           ;FLASH.c: 468: TBLPTRL = (Address & 0x000000FF);
 13514  001CBC  C001  FFF6         	movff	FSH_AddressToBlock@Address,tblptrl	;volatile
 13515  001CC0  0012               	return		;funcret
 13516  001CC2                     __end_of_FSH_AddressToBlock:
 13517                           	opt stack 0
 13518                           pclatu	equ	0xFFB
 13519                           pclath	equ	0xFFA
 13520                           tblptru	equ	0xFF8
 13521                           tblptrh	equ	0xFF7
 13522                           tblptrl	equ	0xFF6
 13523                           tablat	equ	0xFF5
 13524                           prodh	equ	0xFF4
 13525                           prodl	equ	0xFF3
 13526                           intcon	equ	0xFF2
 13527                           intcon2	equ	0xFF1
 13528                           intcon3	equ	0xFF0
 13529                           postinc0	equ	0xFEE
 13530                           fsr0h	equ	0xFEA
 13531                           fsr0l	equ	0xFE9
 13532                           wreg	equ	0xFE8
 13533                           postdec1	equ	0xFE5
 13534                           fsr1h	equ	0xFE2
 13535                           fsr1l	equ	0xFE1
 13536                           bsr	equ	0xFE0
 13537                           postinc2	equ	0xFDE
 13538                           postdec2	equ	0xFDD
 13539                           plusw2	equ	0xFDB
 13540                           fsr2h	equ	0xFDA
 13541                           fsr2l	equ	0xFD9
 13542                           status	equ	0xFD8
 13543                           
 13544 ;; *************** function _ADC_CalculateVoltage *****************
 13545 ;; Defined at:
 13546 ;;		line 140 in file "ADC.c"
 13547 ;; Parameters:    Size  Location     Type
 13548 ;;		None
 13549 ;; Auto vars:     Size  Location     Type
 13550 ;;  Voltage         3   43[COMRAM] unsigned long 
 13551 ;;  ADCcounts       2   41[COMRAM] unsigned int 
 13552 ;; Return value:  Size  Location     Type
 13553 ;;		None               void
 13554 ;; Registers used:
 13555 ;;		wreg, status,2, status,0, cstack
 13556 ;; Tracked objects:
 13557 ;;		On entry : 0/0
 13558 ;;		On exit  : 0/0
 13559 ;;		Unchanged: 0/0
 13560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13561 ;;      Params:         0       0       0       0       0
 13562 ;;      Locals:         5       0       0       0       0
 13563 ;;      Temps:          0       0       0       0       0
 13564 ;;      Totals:         5       0       0       0       0
 13565 ;;Total ram usage:        5 bytes
 13566 ;; Hardware stack levels used:    1
 13567 ;; Hardware stack levels required when called:    8
 13568 ;; This function calls:
 13569 ;;		___ftdiv
 13570 ;;		i1_ADC_ChangeChannel
 13571 ;;		i1___ftmul
 13572 ;;		i1___lwtoft
 13573 ;; This function is called by:
 13574 ;;		_low_isr
 13575 ;; This function uses a non-reentrant model
 13576 ;;
 13577                           
 13578                           	psect	text87
 13579  000BCE                     __ptext87:
 13580                           	opt stack 0
 13581  000BCE                     _ADC_CalculateVoltage:
 13582                           	opt stack 15
 13583                           
 13584                           ;ADC.c: 142: unsigned int ADCcounts;
 13585                           ;ADC.c: 143: double Voltage;
 13586                           ;ADC.c: 145: ADCcounts = ADRESH;
 13587                           
 13588                           ;incstack = 0
 13589  000BCE  CFC4 F02A          	movff	4036,ADC_CalculateVoltage@ADCcounts	;volatile
 13590  000BD2  6A2B               	clrf	ADC_CalculateVoltage@ADCcounts+1,c
 13591                           
 13592                           ;ADC.c: 146: ADCcounts <<= 8;
 13593  000BD4  502A               	movf	ADC_CalculateVoltage@ADCcounts,w,c
 13594  000BD6  6E2B               	movwf	ADC_CalculateVoltage@ADCcounts+1,c
 13595  000BD8  6A2A               	clrf	ADC_CalculateVoltage@ADCcounts,c
 13596                           
 13597                           ;ADC.c: 147: ADCcounts += ADRESL;
 13598  000BDA  50C3               	movf	4035,w,c	;volatile
 13599  000BDC  262A               	addwf	ADC_CalculateVoltage@ADCcounts,f,c
 13600  000BDE  0E00               	movlw	0
 13601  000BE0  222B               	addwfc	ADC_CalculateVoltage@ADCcounts+1,f,c
 13602                           
 13603                           ;ADC.c: 149: Voltage = ((double)ADCcounts / (1 << 10)) * 3.3;
 13604  000BE2  0E00               	movlw	0
 13605  000BE4  6E0F               	movwf	___ftdiv@f2,c
 13606  000BE6  0E80               	movlw	128
 13607  000BE8  6E10               	movwf	___ftdiv@f2+1,c
 13608  000BEA  0E44               	movlw	68
 13609  000BEC  6E11               	movwf	___ftdiv@f2+2,c
 13610  000BEE  C02A  F009         	movff	ADC_CalculateVoltage@ADCcounts,i1___lwtoft@c
 13611  000BF2  C02B  F00A         	movff	ADC_CalculateVoltage@ADCcounts+1,i1___lwtoft@c+1
 13612  000BF6  EC6C  F00C         	call	i1___lwtoft	;wreg free
 13613  000BFA  C009  F00C         	movff	?i1___lwtoft,___ftdiv@f1
 13614  000BFE  C00A  F00D         	movff	?i1___lwtoft+1,___ftdiv@f1+1
 13615  000C02  C00B  F00E         	movff	?i1___lwtoft+2,___ftdiv@f1+2
 13616  000C06  ECEE  F002         	call	___ftdiv	;wreg free
 13617  000C0A  C00C  F01B         	movff	?___ftdiv,i1___ftmul@f1
 13618  000C0E  C00D  F01C         	movff	?___ftdiv+1,i1___ftmul@f1+1
 13619  000C12  C00E  F01D         	movff	?___ftdiv+2,i1___ftmul@f1+2
 13620  000C16  0E33               	movlw	51
 13621  000C18  6E1E               	movwf	i1___ftmul@f2,c
 13622  000C1A  0E53               	movlw	83
 13623  000C1C  6E1F               	movwf	i1___ftmul@f2+1,c
 13624  000C1E  0E40               	movlw	64
 13625  000C20  6E20               	movwf	i1___ftmul@f2+2,c
 13626  000C22  EC6D  F002         	call	i1___ftmul	;wreg free
 13627  000C26  C01B  F02C         	movff	?i1___ftmul,ADC_CalculateVoltage@Voltage
 13628  000C2A  C01C  F02D         	movff	?i1___ftmul+1,ADC_CalculateVoltage@Voltage+1
 13629  000C2E  C01D  F02E         	movff	?i1___ftmul+2,ADC_CalculateVoltage@Voltage+2
 13630                           
 13631                           ;ADC.c: 150: if(ADC_CurrentSource == 10)
 13632  000C32  0E0A               	movlw	10
 13633  000C34  185F               	xorwf	_ADC_CurrentSource,w,c
 13634  000C36  A4D8               	btfss	status,2,c
 13635  000C38  D023               	goto	i1l1286
 13636                           
 13637                           ;ADC.c: 151: {
 13638                           ;ADC.c: 152: Rail_VIN = Voltage * (200000.0 + 500000.0) / 200000.0;
 13639  000C3A  0EE6               	movlw	230
 13640  000C3C  6E1E               	movwf	i1___ftmul@f2,c
 13641  000C3E  0E2A               	movlw	42
 13642  000C40  6E1F               	movwf	i1___ftmul@f2+1,c
 13643  000C42  0E49               	movlw	73
 13644  000C44  6E20               	movwf	i1___ftmul@f2+2,c
 13645  000C46  C02C  F01B         	movff	ADC_CalculateVoltage@Voltage,i1___ftmul@f1
 13646  000C4A  C02D  F01C         	movff	ADC_CalculateVoltage@Voltage+1,i1___ftmul@f1+1
 13647  000C4E  C02E  F01D         	movff	ADC_CalculateVoltage@Voltage+2,i1___ftmul@f1+2
 13648  000C52  EC6D  F002         	call	i1___ftmul	;wreg free
 13649  000C56  C01B  F00C         	movff	?i1___ftmul,___ftdiv@f1
 13650  000C5A  C01C  F00D         	movff	?i1___ftmul+1,___ftdiv@f1+1
 13651  000C5E  C01D  F00E         	movff	?i1___ftmul+2,___ftdiv@f1+2
 13652  000C62  0E50               	movlw	80
 13653  000C64  6E0F               	movwf	___ftdiv@f2,c
 13654  000C66  0E43               	movlw	67
 13655  000C68  6E10               	movwf	___ftdiv@f2+1,c
 13656  000C6A  0E48               	movlw	72
 13657  000C6C  6E11               	movwf	___ftdiv@f2+2,c
 13658  000C6E  ECEE  F002         	call	___ftdiv	;wreg free
 13659  000C72  C00C  F0CD         	movff	?___ftdiv,_Rail_VIN
 13660  000C76  C00D  F0CE         	movff	?___ftdiv+1,_Rail_VIN+1
 13661  000C7A  C00E  F0CF         	movff	?___ftdiv+2,_Rail_VIN+2
 13662                           
 13663                           ;ADC.c: 153: }
 13664  000C7E  D007               	goto	i1l6928
 13665  000C80                     i1l1286:
 13666                           
 13667                           ;ADC.c: 154: else
 13668                           ;ADC.c: 155: {
 13669                           ;ADC.c: 156: Rail_RSSI = Voltage;
 13670  000C80  C02C  F04C         	movff	ADC_CalculateVoltage@Voltage,_Rail_RSSI
 13671  000C84  C02D  F04D         	movff	ADC_CalculateVoltage@Voltage+1,_Rail_RSSI+1
 13672  000C88  C02E  F04E         	movff	ADC_CalculateVoltage@Voltage+2,_Rail_RSSI+2
 13673  000C8C  D000               	goto	i1l6928
 13674  000C8E                     i1l6928:
 13675                           
 13676                           ;ADC.c: 157: }
 13677                           ;ADC.c: 158: ADC_ChangeChannel();
 13678  000C8E  EC7F  F00C         	call	i1_ADC_ChangeChannel	;wreg free
 13679  000C92  0012               	return		;funcret
 13680  000C94                     __end_of_ADC_CalculateVoltage:
 13681                           	opt stack 0
 13682                           pclatu	equ	0xFFB
 13683                           pclath	equ	0xFFA
 13684                           tblptru	equ	0xFF8
 13685                           tblptrh	equ	0xFF7
 13686                           tblptrl	equ	0xFF6
 13687                           tablat	equ	0xFF5
 13688                           prodh	equ	0xFF4
 13689                           prodl	equ	0xFF3
 13690                           intcon	equ	0xFF2
 13691                           intcon2	equ	0xFF1
 13692                           intcon3	equ	0xFF0
 13693                           postinc0	equ	0xFEE
 13694                           fsr0h	equ	0xFEA
 13695                           fsr0l	equ	0xFE9
 13696                           wreg	equ	0xFE8
 13697                           postdec1	equ	0xFE5
 13698                           fsr1h	equ	0xFE2
 13699                           fsr1l	equ	0xFE1
 13700                           bsr	equ	0xFE0
 13701                           postinc2	equ	0xFDE
 13702                           postdec2	equ	0xFDD
 13703                           plusw2	equ	0xFDB
 13704                           fsr2h	equ	0xFDA
 13705                           fsr2l	equ	0xFD9
 13706                           status	equ	0xFD8
 13707                           
 13708 ;; *************** function i1___lwtoft *****************
 13709 ;; Defined at:
 13710 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
 13711 ;; Parameters:    Size  Location     Type
 13712 ;;  c               2    8[COMRAM] unsigned int 
 13713 ;; Auto vars:     Size  Location     Type
 13714 ;;		None
 13715 ;; Return value:  Size  Location     Type
 13716 ;;                  3    8[COMRAM] float 
 13717 ;; Registers used:
 13718 ;;		wreg, status,2, status,0, cstack
 13719 ;; Tracked objects:
 13720 ;;		On entry : 0/0
 13721 ;;		On exit  : 0/0
 13722 ;;		Unchanged: 0/0
 13723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13724 ;;      Params:         3       0       0       0       0
 13725 ;;      Locals:         0       0       0       0       0
 13726 ;;      Temps:          0       0       0       0       0
 13727 ;;      Totals:         3       0       0       0       0
 13728 ;;Total ram usage:        3 bytes
 13729 ;; Hardware stack levels used:    1
 13730 ;; Hardware stack levels required when called:    7
 13731 ;; This function calls:
 13732 ;;		i1___ftpack
 13733 ;; This function is called by:
 13734 ;;		_IR_CheckCode
 13735 ;;		_ADC_CalculateVoltage
 13736 ;; This function uses a non-reentrant model
 13737 ;;
 13738                           
 13739                           	psect	text88
 13740  0018D8                     __ptext88:
 13741                           	opt stack 0
 13742  0018D8                     i1___lwtoft:
 13743                           	opt stack 15
 13744                           
 13745                           ;incstack = 0
 13746  0018D8  C009  F001         	movff	i1___lwtoft@c,i1___ftpack@arg
 13747  0018DC  C00A  F002         	movff	i1___lwtoft@c+1,i1___ftpack@arg+1
 13748  0018E0  6A03               	clrf	i1___ftpack@arg+2,c
 13749  0018E2  0E8E               	movlw	142
 13750  0018E4  6E04               	movwf	i1___ftpack@exp,c
 13751  0018E6  0E00               	movlw	0
 13752  0018E8  6E05               	movwf	i1___ftpack@sign,c
 13753  0018EA  EC4A  F006         	call	i1___ftpack	;wreg free
 13754  0018EE  C001  F009         	movff	?i1___ftpack,?i1___lwtoft
 13755  0018F2  C002  F00A         	movff	?i1___ftpack+1,?i1___lwtoft+1
 13756  0018F6  C003  F00B         	movff	?i1___ftpack+2,?i1___lwtoft+2
 13757  0018FA  0012               	return	
 13758  0018FC  0012               	return		;funcret
 13759  0018FE                     __end_ofi1___lwtoft:
 13760                           	opt stack 0
 13761                           pclatu	equ	0xFFB
 13762                           pclath	equ	0xFFA
 13763                           tblptru	equ	0xFF8
 13764                           tblptrh	equ	0xFF7
 13765                           tblptrl	equ	0xFF6
 13766                           tablat	equ	0xFF5
 13767                           prodh	equ	0xFF4
 13768                           prodl	equ	0xFF3
 13769                           intcon	equ	0xFF2
 13770                           intcon2	equ	0xFF1
 13771                           intcon3	equ	0xFF0
 13772                           postinc0	equ	0xFEE
 13773                           fsr0h	equ	0xFEA
 13774                           fsr0l	equ	0xFE9
 13775                           wreg	equ	0xFE8
 13776                           postdec1	equ	0xFE5
 13777                           fsr1h	equ	0xFE2
 13778                           fsr1l	equ	0xFE1
 13779                           bsr	equ	0xFE0
 13780                           postinc2	equ	0xFDE
 13781                           postdec2	equ	0xFDD
 13782                           plusw2	equ	0xFDB
 13783                           fsr2h	equ	0xFDA
 13784                           fsr2l	equ	0xFD9
 13785                           status	equ	0xFD8
 13786                           
 13787 ;; *************** function i1___ftmul *****************
 13788 ;; Defined at:
 13789 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 13790 ;; Parameters:    Size  Location     Type
 13791 ;;  f1              3   26[COMRAM] float 
 13792 ;;  f2              3   29[COMRAM] float 
 13793 ;; Auto vars:     Size  Location     Type
 13794 ;;  __ftmul         3   36[COMRAM] unsigned um
 13795 ;;  __ftmul         1   40[COMRAM] unsigned char 
 13796 ;;  __ftmul         1   39[COMRAM] unsigned char 
 13797 ;;  __ftmul         1   35[COMRAM] unsigned char 
 13798 ;; Return value:  Size  Location     Type
 13799 ;;                  3   26[COMRAM] float 
 13800 ;; Registers used:
 13801 ;;		wreg, status,2, status,0, cstack
 13802 ;; Tracked objects:
 13803 ;;		On entry : 0/0
 13804 ;;		On exit  : 0/0
 13805 ;;		Unchanged: 0/0
 13806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13807 ;;      Params:         6       0       0       0       0
 13808 ;;      Locals:         6       0       0       0       0
 13809 ;;      Temps:          3       0       0       0       0
 13810 ;;      Totals:        15       0       0       0       0
 13811 ;;Total ram usage:       15 bytes
 13812 ;; Hardware stack levels used:    1
 13813 ;; Hardware stack levels required when called:    7
 13814 ;; This function calls:
 13815 ;;		i1___ftpack
 13816 ;; This function is called by:
 13817 ;;		_IR_CheckCode
 13818 ;;		_ADC_CalculateVoltage
 13819 ;; This function uses a non-reentrant model
 13820 ;;
 13821                           
 13822                           	psect	text89
 13823  0004DA                     __ptext89:
 13824                           	opt stack 0
 13825  0004DA                     i1___ftmul:
 13826                           	opt stack 15
 13827                           
 13828                           ;incstack = 0
 13829  0004DA  C01D  F021         	movff	i1___ftmul@f1+2,??i1___ftmul
 13830  0004DE  6A22               	clrf	(??i1___ftmul+1)& (0+255),c
 13831  0004E0  6A23               	clrf	(??i1___ftmul+2)& (0+255),c
 13832  0004E2  341C               	rlcf	i1___ftmul@f1+1,w,c
 13833  0004E4  3621               	rlcf	??i1___ftmul& (0+255),f,c
 13834  0004E6  E301               	bnc	u700_21
 13835  0004E8  8022               	bsf	(??i1___ftmul+1)& (0+255),0,c
 13836  0004EA                     u700_21:
 13837  0004EA  5021               	movf	??i1___ftmul,w,c
 13838  0004EC  6E24               	movwf	i1___ftmul@exp,c
 13839  0004EE  5024               	movf	i1___ftmul@exp,w,c
 13840  0004F0  A4D8               	btfss	status,2,c
 13841  0004F2  D007               	goto	i1l6522
 13842  0004F4  0E00               	movlw	0
 13843  0004F6  6E1B               	movwf	?i1___ftmul,c
 13844  0004F8  0E00               	movlw	0
 13845  0004FA  6E1C               	movwf	?i1___ftmul+1,c
 13846  0004FC  0E00               	movlw	0
 13847  0004FE  6E1D               	movwf	?i1___ftmul+2,c
 13848  000500  0012               	return	
 13849  000502                     i1l6522:
 13850  000502  C020  F021         	movff	i1___ftmul@f2+2,??i1___ftmul
 13851  000506  6A22               	clrf	(??i1___ftmul+1)& (0+255),c
 13852  000508  6A23               	clrf	(??i1___ftmul+2)& (0+255),c
 13853  00050A  341F               	rlcf	i1___ftmul@f2+1,w,c
 13854  00050C  3621               	rlcf	??i1___ftmul& (0+255),f,c
 13855  00050E  E301               	bnc	u702_21
 13856  000510  8022               	bsf	(??i1___ftmul+1)& (0+255),0,c
 13857  000512                     u702_21:
 13858  000512  5021               	movf	??i1___ftmul,w,c
 13859  000514  6E29               	movwf	i1___ftmul@sign,c
 13860  000516  5029               	movf	i1___ftmul@sign,w,c
 13861  000518  A4D8               	btfss	status,2,c
 13862  00051A  D007               	goto	i1l6528
 13863  00051C  0E00               	movlw	0
 13864  00051E  6E1B               	movwf	?i1___ftmul,c
 13865  000520  0E00               	movlw	0
 13866  000522  6E1C               	movwf	?i1___ftmul+1,c
 13867  000524  0E00               	movlw	0
 13868  000526  6E1D               	movwf	?i1___ftmul+2,c
 13869  000528  0012               	return	
 13870  00052A                     i1l6528:
 13871  00052A  5029               	movf	i1___ftmul@sign,w,c
 13872  00052C  0F7B               	addlw	123
 13873  00052E  2624               	addwf	i1___ftmul@exp,f,c
 13874  000530  C01D  F029         	movff	i1___ftmul@f1+2,i1___ftmul@sign
 13875  000534  5020               	movf	i1___ftmul@f2+2,w,c
 13876  000536  1A29               	xorwf	i1___ftmul@sign,f,c
 13877  000538  0E80               	movlw	128
 13878  00053A  1629               	andwf	i1___ftmul@sign,f,c
 13879  00053C  8E1C               	bsf	i1___ftmul@f1+1,7,c
 13880  00053E  8E1F               	bsf	i1___ftmul@f2+1,7,c
 13881  000540  0EFF               	movlw	255
 13882  000542  161E               	andwf	i1___ftmul@f2,f,c
 13883  000544  0EFF               	movlw	255
 13884  000546  161F               	andwf	i1___ftmul@f2+1,f,c
 13885  000548  0E00               	movlw	0
 13886  00054A  1620               	andwf	i1___ftmul@f2+2,f,c
 13887  00054C  0E00               	movlw	0
 13888  00054E  6E25               	movwf	i1___ftmul@f3_as_product,c
 13889  000550  0E00               	movlw	0
 13890  000552  6E26               	movwf	i1___ftmul@f3_as_product+1,c
 13891  000554  0E00               	movlw	0
 13892  000556  6E27               	movwf	i1___ftmul@f3_as_product+2,c
 13893  000558  0E07               	movlw	7
 13894  00055A  6E28               	movwf	i1___ftmul@cntr,c
 13895  00055C  D000               	goto	i1l6542
 13896  00055E                     i1l6542:
 13897  00055E  A01B               	btfss	i1___ftmul@f1,0,c
 13898  000560  D007               	goto	i1l6546
 13899  000562  501E               	movf	i1___ftmul@f2,w,c
 13900  000564  2625               	addwf	i1___ftmul@f3_as_product,f,c
 13901  000566  501F               	movf	i1___ftmul@f2+1,w,c
 13902  000568  2226               	addwfc	i1___ftmul@f3_as_product+1,f,c
 13903  00056A  5020               	movf	i1___ftmul@f2+2,w,c
 13904  00056C  2227               	addwfc	i1___ftmul@f3_as_product+2,f,c
 13905  00056E  D000               	goto	i1l6546
 13906  000570                     i1l6546:
 13907  000570  90D8               	bcf	status,0,c
 13908  000572  321D               	rrcf	i1___ftmul@f1+2,f,c
 13909  000574  321C               	rrcf	i1___ftmul@f1+1,f,c
 13910  000576  321B               	rrcf	i1___ftmul@f1,f,c
 13911  000578  90D8               	bcf	status,0,c
 13912  00057A  361E               	rlcf	i1___ftmul@f2,f,c
 13913  00057C  361F               	rlcf	i1___ftmul@f2+1,f,c
 13914  00057E  3620               	rlcf	i1___ftmul@f2+2,f,c
 13915  000580  2E28               	decfsz	i1___ftmul@cntr,f,c
 13916  000582  D7ED               	goto	i1l6542
 13917  000584  D000               	goto	i1l6550
 13918  000586                     i1l6550:
 13919  000586  0E09               	movlw	9
 13920  000588  6E28               	movwf	i1___ftmul@cntr,c
 13921  00058A  D000               	goto	i1l6552
 13922  00058C                     i1l6552:
 13923  00058C  A01B               	btfss	i1___ftmul@f1,0,c
 13924  00058E  D007               	goto	i1l6556
 13925  000590  501E               	movf	i1___ftmul@f2,w,c
 13926  000592  2625               	addwf	i1___ftmul@f3_as_product,f,c
 13927  000594  501F               	movf	i1___ftmul@f2+1,w,c
 13928  000596  2226               	addwfc	i1___ftmul@f3_as_product+1,f,c
 13929  000598  5020               	movf	i1___ftmul@f2+2,w,c
 13930  00059A  2227               	addwfc	i1___ftmul@f3_as_product+2,f,c
 13931  00059C  D000               	goto	i1l6556
 13932  00059E                     i1l6556:
 13933  00059E  90D8               	bcf	status,0,c
 13934  0005A0  321D               	rrcf	i1___ftmul@f1+2,f,c
 13935  0005A2  321C               	rrcf	i1___ftmul@f1+1,f,c
 13936  0005A4  321B               	rrcf	i1___ftmul@f1,f,c
 13937  0005A6  90D8               	bcf	status,0,c
 13938  0005A8  3227               	rrcf	i1___ftmul@f3_as_product+2,f,c
 13939  0005AA  3226               	rrcf	i1___ftmul@f3_as_product+1,f,c
 13940  0005AC  3225               	rrcf	i1___ftmul@f3_as_product,f,c
 13941  0005AE  2E28               	decfsz	i1___ftmul@cntr,f,c
 13942  0005B0  D7ED               	goto	i1l6552
 13943  0005B2  D000               	goto	i1l6560
 13944  0005B4                     i1l6560:
 13945  0005B4  C025  F001         	movff	i1___ftmul@f3_as_product,i1___ftpack@arg
 13946  0005B8  C026  F002         	movff	i1___ftmul@f3_as_product+1,i1___ftpack@arg+1
 13947  0005BC  C027  F003         	movff	i1___ftmul@f3_as_product+2,i1___ftpack@arg+2
 13948  0005C0  C024  F004         	movff	i1___ftmul@exp,i1___ftpack@exp
 13949  0005C4  C029  F005         	movff	i1___ftmul@sign,i1___ftpack@sign
 13950  0005C8  EC4A  F006         	call	i1___ftpack	;wreg free
 13951  0005CC  C001  F01B         	movff	?i1___ftpack,?i1___ftmul
 13952  0005D0  C002  F01C         	movff	?i1___ftpack+1,?i1___ftmul+1
 13953  0005D4  C003  F01D         	movff	?i1___ftpack+2,?i1___ftmul+2
 13954  0005D8  0012               	return	
 13955  0005DA  0012               	return		;funcret
 13956  0005DC                     __end_ofi1___ftmul:
 13957                           	opt stack 0
 13958                           pclatu	equ	0xFFB
 13959                           pclath	equ	0xFFA
 13960                           tblptru	equ	0xFF8
 13961                           tblptrh	equ	0xFF7
 13962                           tblptrl	equ	0xFF6
 13963                           tablat	equ	0xFF5
 13964                           prodh	equ	0xFF4
 13965                           prodl	equ	0xFF3
 13966                           intcon	equ	0xFF2
 13967                           intcon2	equ	0xFF1
 13968                           intcon3	equ	0xFF0
 13969                           postinc0	equ	0xFEE
 13970                           fsr0h	equ	0xFEA
 13971                           fsr0l	equ	0xFE9
 13972                           wreg	equ	0xFE8
 13973                           postdec1	equ	0xFE5
 13974                           fsr1h	equ	0xFE2
 13975                           fsr1l	equ	0xFE1
 13976                           bsr	equ	0xFE0
 13977                           postinc2	equ	0xFDE
 13978                           postdec2	equ	0xFDD
 13979                           plusw2	equ	0xFDB
 13980                           fsr2h	equ	0xFDA
 13981                           fsr2l	equ	0xFD9
 13982                           status	equ	0xFD8
 13983                           
 13984 ;; *************** function i1_ADC_ChangeChannel *****************
 13985 ;; Defined at:
 13986 ;;		line 166 in file "ADC.c"
 13987 ;; Parameters:    Size  Location     Type
 13988 ;;		None
 13989 ;; Auto vars:     Size  Location     Type
 13990 ;;		None
 13991 ;; Return value:  Size  Location     Type
 13992 ;;		None               void
 13993 ;; Registers used:
 13994 ;;		wreg, status,2, status,0
 13995 ;; Tracked objects:
 13996 ;;		On entry : 0/0
 13997 ;;		On exit  : 0/0
 13998 ;;		Unchanged: 0/0
 13999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14000 ;;      Params:         0       0       0       0       0
 14001 ;;      Locals:         0       0       0       0       0
 14002 ;;      Temps:          0       0       0       0       0
 14003 ;;      Totals:         0       0       0       0       0
 14004 ;;Total ram usage:        0 bytes
 14005 ;; Hardware stack levels used:    1
 14006 ;; Hardware stack levels required when called:    6
 14007 ;; This function calls:
 14008 ;;		Nothing
 14009 ;; This function is called by:
 14010 ;;		_ADC_CalculateVoltage
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           	psect	text90
 14015  0018FE                     __ptext90:
 14016                           	opt stack 0
 14017  0018FE                     i1_ADC_ChangeChannel:
 14018                           	opt stack 16
 14019                           
 14020                           ;ADC.c: 168: if(ADC_CurrentSource == 10)
 14021                           
 14022                           ;incstack = 0
 14023  0018FE  0E0A               	movlw	10
 14024  001900  185F               	xorwf	_ADC_CurrentSource,w,c
 14025  001902  A4D8               	btfss	status,2,c
 14026  001904  D007               	goto	i1l6476
 14027                           
 14028                           ;ADC.c: 169: {
 14029                           ;ADC.c: 170: ADC_CurrentSource = 11;
 14030  001906  0E0B               	movlw	11
 14031  001908  6E5F               	movwf	_ADC_CurrentSource,c
 14032                           
 14033                           ;ADC.c: 171: ADCON0bits.CHS = 1;
 14034  00190A  50C2               	movf	4034,w,c	;volatile
 14035  00190C  0BC3               	andlw	-61
 14036  00190E  0904               	iorlw	4
 14037  001910  6EC2               	movwf	4034,c	;volatile
 14038                           
 14039                           ;ADC.c: 172: }
 14040  001912  0012               	return	
 14041  001914                     i1l6476:
 14042                           
 14043                           ;ADC.c: 173: else
 14044                           ;ADC.c: 174: {
 14045                           ;ADC.c: 175: ADC_CurrentSource = 10;
 14046  001914  0E0A               	movlw	10
 14047  001916  6E5F               	movwf	_ADC_CurrentSource,c
 14048                           
 14049                           ;ADC.c: 176: ADCON0bits.CHS = 0;
 14050  001918  94C2               	bcf	4034,2,c	;volatile
 14051  00191A  96C2               	bcf	4034,3,c	;volatile
 14052  00191C  98C2               	bcf	4034,4,c	;volatile
 14053  00191E  9AC2               	bcf	4034,5,c	;volatile
 14054  001920  0012               	return	
 14055  001922  0012               	return		;funcret
 14056  001924                     __end_ofi1_ADC_ChangeChannel:
 14057                           	opt stack 0
 14058                           pclatu	equ	0xFFB
 14059                           pclath	equ	0xFFA
 14060                           tblptru	equ	0xFF8
 14061                           tblptrh	equ	0xFF7
 14062                           tblptrl	equ	0xFF6
 14063                           tablat	equ	0xFF5
 14064                           prodh	equ	0xFF4
 14065                           prodl	equ	0xFF3
 14066                           intcon	equ	0xFF2
 14067                           intcon2	equ	0xFF1
 14068                           intcon3	equ	0xFF0
 14069                           postinc0	equ	0xFEE
 14070                           fsr0h	equ	0xFEA
 14071                           fsr0l	equ	0xFE9
 14072                           wreg	equ	0xFE8
 14073                           postdec1	equ	0xFE5
 14074                           fsr1h	equ	0xFE2
 14075                           fsr1l	equ	0xFE1
 14076                           bsr	equ	0xFE0
 14077                           postinc2	equ	0xFDE
 14078                           postdec2	equ	0xFDD
 14079                           plusw2	equ	0xFDB
 14080                           fsr2h	equ	0xFDA
 14081                           fsr2l	equ	0xFD9
 14082                           status	equ	0xFD8
 14083                           
 14084 ;; *************** function ___ftdiv *****************
 14085 ;; Defined at:
 14086 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
 14087 ;; Parameters:    Size  Location     Type
 14088 ;;  f1              3   11[COMRAM] float 
 14089 ;;  f2              3   14[COMRAM] float 
 14090 ;; Auto vars:     Size  Location     Type
 14091 ;;  f3              3   21[COMRAM] float 
 14092 ;;  sign            1   25[COMRAM] unsigned char 
 14093 ;;  exp             1   24[COMRAM] unsigned char 
 14094 ;;  cntr            1   20[COMRAM] unsigned char 
 14095 ;; Return value:  Size  Location     Type
 14096 ;;                  3   11[COMRAM] float 
 14097 ;; Registers used:
 14098 ;;		wreg, status,2, status,0, cstack
 14099 ;; Tracked objects:
 14100 ;;		On entry : 0/0
 14101 ;;		On exit  : 0/0
 14102 ;;		Unchanged: 0/0
 14103 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14104 ;;      Params:         6       0       0       0       0
 14105 ;;      Locals:         6       0       0       0       0
 14106 ;;      Temps:          3       0       0       0       0
 14107 ;;      Totals:        15       0       0       0       0
 14108 ;;Total ram usage:       15 bytes
 14109 ;; Hardware stack levels used:    1
 14110 ;; Hardware stack levels required when called:    7
 14111 ;; This function calls:
 14112 ;;		i1___ftpack
 14113 ;; This function is called by:
 14114 ;;		_ADC_CalculateVoltage
 14115 ;;		_MSC_Scale
 14116 ;; This function uses a non-reentrant model
 14117 ;;
 14118                           
 14119                           	psect	text91
 14120  0005DC                     __ptext91:
 14121                           	opt stack 0
 14122  0005DC                     ___ftdiv:
 14123                           	opt stack 15
 14124                           
 14125                           ;incstack = 0
 14126  0005DC  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
 14127  0005E0  6A13               	clrf	(??___ftdiv+1)& (0+255),c
 14128  0005E2  6A14               	clrf	(??___ftdiv+2)& (0+255),c
 14129  0005E4  340D               	rlcf	___ftdiv@f1+1,w,c
 14130  0005E6  3612               	rlcf	??___ftdiv& (0+255),f,c
 14131  0005E8  E301               	bnc	u639_21
 14132  0005EA  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
 14133  0005EC                     u639_21:
 14134  0005EC  5012               	movf	??___ftdiv,w,c
 14135  0005EE  6E19               	movwf	___ftdiv@exp,c
 14136  0005F0  5019               	movf	___ftdiv@exp,w,c
 14137  0005F2  A4D8               	btfss	status,2,c
 14138  0005F4  D007               	goto	i1l6092
 14139  0005F6  0E00               	movlw	0
 14140  0005F8  6E0C               	movwf	?___ftdiv,c
 14141  0005FA  0E00               	movlw	0
 14142  0005FC  6E0D               	movwf	?___ftdiv+1,c
 14143  0005FE  0E00               	movlw	0
 14144  000600  6E0E               	movwf	?___ftdiv+2,c
 14145  000602  0012               	return	
 14146  000604                     i1l6092:
 14147  000604  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
 14148  000608  6A13               	clrf	(??___ftdiv+1)& (0+255),c
 14149  00060A  6A14               	clrf	(??___ftdiv+2)& (0+255),c
 14150  00060C  3410               	rlcf	___ftdiv@f2+1,w,c
 14151  00060E  3612               	rlcf	??___ftdiv& (0+255),f,c
 14152  000610  E301               	bnc	u641_21
 14153  000612  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
 14154  000614                     u641_21:
 14155  000614  5012               	movf	??___ftdiv,w,c
 14156  000616  6E1A               	movwf	___ftdiv@sign,c
 14157  000618  501A               	movf	___ftdiv@sign,w,c
 14158  00061A  A4D8               	btfss	status,2,c
 14159  00061C  D007               	goto	i1l6098
 14160  00061E  0E00               	movlw	0
 14161  000620  6E0C               	movwf	?___ftdiv,c
 14162  000622  0E00               	movlw	0
 14163  000624  6E0D               	movwf	?___ftdiv+1,c
 14164  000626  0E00               	movlw	0
 14165  000628  6E0E               	movwf	?___ftdiv+2,c
 14166  00062A  0012               	return	
 14167  00062C                     i1l6098:
 14168  00062C  0E00               	movlw	0
 14169  00062E  6E16               	movwf	___ftdiv@f3,c
 14170  000630  0E00               	movlw	0
 14171  000632  6E17               	movwf	___ftdiv@f3+1,c
 14172  000634  0E00               	movlw	0
 14173  000636  6E18               	movwf	___ftdiv@f3+2,c
 14174  000638  501A               	movf	___ftdiv@sign,w,c
 14175  00063A  0F89               	addlw	137
 14176  00063C  5E19               	subwf	___ftdiv@exp,f,c
 14177  00063E  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
 14178  000642  5011               	movf	___ftdiv@f2+2,w,c
 14179  000644  1A1A               	xorwf	___ftdiv@sign,f,c
 14180  000646  0E80               	movlw	128
 14181  000648  161A               	andwf	___ftdiv@sign,f,c
 14182  00064A  8E0D               	bsf	___ftdiv@f1+1,7,c
 14183  00064C  0EFF               	movlw	255
 14184  00064E  160C               	andwf	___ftdiv@f1,f,c
 14185  000650  0EFF               	movlw	255
 14186  000652  160D               	andwf	___ftdiv@f1+1,f,c
 14187  000654  0E00               	movlw	0
 14188  000656  160E               	andwf	___ftdiv@f1+2,f,c
 14189  000658  8E10               	bsf	___ftdiv@f2+1,7,c
 14190  00065A  0EFF               	movlw	255
 14191  00065C  160F               	andwf	___ftdiv@f2,f,c
 14192  00065E  0EFF               	movlw	255
 14193  000660  1610               	andwf	___ftdiv@f2+1,f,c
 14194  000662  0E00               	movlw	0
 14195  000664  1611               	andwf	___ftdiv@f2+2,f,c
 14196  000666  0E18               	movlw	24
 14197  000668  6E15               	movwf	___ftdiv@cntr,c
 14198  00066A  D000               	goto	i1l6118
 14199  00066C                     i1l6118:
 14200  00066C  90D8               	bcf	status,0,c
 14201  00066E  3616               	rlcf	___ftdiv@f3,f,c
 14202  000670  3617               	rlcf	___ftdiv@f3+1,f,c
 14203  000672  3618               	rlcf	___ftdiv@f3+2,f,c
 14204  000674  500F               	movf	___ftdiv@f2,w,c
 14205  000676  5C0C               	subwf	___ftdiv@f1,w,c
 14206  000678  5010               	movf	___ftdiv@f2+1,w,c
 14207  00067A  580D               	subwfb	___ftdiv@f1+1,w,c
 14208  00067C  5011               	movf	___ftdiv@f2+2,w,c
 14209  00067E  580E               	subwfb	___ftdiv@f1+2,w,c
 14210  000680  A0D8               	btfss	status,0,c
 14211  000682  D007               	goto	i1l1679
 14212  000684  500F               	movf	___ftdiv@f2,w,c
 14213  000686  5E0C               	subwf	___ftdiv@f1,f,c
 14214  000688  5010               	movf	___ftdiv@f2+1,w,c
 14215  00068A  5A0D               	subwfb	___ftdiv@f1+1,f,c
 14216  00068C  5011               	movf	___ftdiv@f2+2,w,c
 14217  00068E  5A0E               	subwfb	___ftdiv@f1+2,f,c
 14218  000690  8016               	bsf	___ftdiv@f3,0,c
 14219  000692                     i1l1679:
 14220  000692  90D8               	bcf	status,0,c
 14221  000694  360C               	rlcf	___ftdiv@f1,f,c
 14222  000696  360D               	rlcf	___ftdiv@f1+1,f,c
 14223  000698  360E               	rlcf	___ftdiv@f1+2,f,c
 14224  00069A  2E15               	decfsz	___ftdiv@cntr,f,c
 14225  00069C  D7E7               	goto	i1l6118
 14226  00069E  D000               	goto	i1l6128
 14227  0006A0                     i1l6128:
 14228  0006A0  C016  F001         	movff	___ftdiv@f3,i1___ftpack@arg
 14229  0006A4  C017  F002         	movff	___ftdiv@f3+1,i1___ftpack@arg+1
 14230  0006A8  C018  F003         	movff	___ftdiv@f3+2,i1___ftpack@arg+2
 14231  0006AC  C019  F004         	movff	___ftdiv@exp,i1___ftpack@exp
 14232  0006B0  C01A  F005         	movff	___ftdiv@sign,i1___ftpack@sign
 14233  0006B4  EC4A  F006         	call	i1___ftpack	;wreg free
 14234  0006B8  C001  F00C         	movff	?i1___ftpack,?___ftdiv
 14235  0006BC  C002  F00D         	movff	?i1___ftpack+1,?___ftdiv+1
 14236  0006C0  C003  F00E         	movff	?i1___ftpack+2,?___ftdiv+2
 14237  0006C4  0012               	return	
 14238  0006C6  0012               	return		;funcret
 14239  0006C8                     __end_of___ftdiv:
 14240                           	opt stack 0
 14241                           pclatu	equ	0xFFB
 14242                           pclath	equ	0xFFA
 14243                           tblptru	equ	0xFF8
 14244                           tblptrh	equ	0xFF7
 14245                           tblptrl	equ	0xFF6
 14246                           tablat	equ	0xFF5
 14247                           prodh	equ	0xFF4
 14248                           prodl	equ	0xFF3
 14249                           intcon	equ	0xFF2
 14250                           intcon2	equ	0xFF1
 14251                           intcon3	equ	0xFF0
 14252                           postinc0	equ	0xFEE
 14253                           fsr0h	equ	0xFEA
 14254                           fsr0l	equ	0xFE9
 14255                           wreg	equ	0xFE8
 14256                           postdec1	equ	0xFE5
 14257                           fsr1h	equ	0xFE2
 14258                           fsr1l	equ	0xFE1
 14259                           bsr	equ	0xFE0
 14260                           postinc2	equ	0xFDE
 14261                           postdec2	equ	0xFDD
 14262                           plusw2	equ	0xFDB
 14263                           fsr2h	equ	0xFDA
 14264                           fsr2l	equ	0xFD9
 14265                           status	equ	0xFD8
 14266                           
 14267 ;; *************** function i1___ftpack *****************
 14268 ;; Defined at:
 14269 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 14270 ;; Parameters:    Size  Location     Type
 14271 ;;  arg             3    0[COMRAM] unsigned um
 14272 ;;  exp             1    3[COMRAM] unsigned char 
 14273 ;;  sign            1    4[COMRAM] unsigned char 
 14274 ;; Auto vars:     Size  Location     Type
 14275 ;;		None
 14276 ;; Return value:  Size  Location     Type
 14277 ;;                  3    0[COMRAM] float 
 14278 ;; Registers used:
 14279 ;;		wreg, status,2, status,0
 14280 ;; Tracked objects:
 14281 ;;		On entry : 0/0
 14282 ;;		On exit  : 0/0
 14283 ;;		Unchanged: 0/0
 14284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14285 ;;      Params:         5       0       0       0       0
 14286 ;;      Locals:         0       0       0       0       0
 14287 ;;      Temps:          3       0       0       0       0
 14288 ;;      Totals:         8       0       0       0       0
 14289 ;;Total ram usage:        8 bytes
 14290 ;; Hardware stack levels used:    1
 14291 ;; Hardware stack levels required when called:    6
 14292 ;; This function calls:
 14293 ;;		Nothing
 14294 ;; This function is called by:
 14295 ;;		___ftdiv
 14296 ;;		i1___ftmul
 14297 ;;		i1___lwtoft
 14298 ;; This function uses a non-reentrant model
 14299 ;;
 14300                           
 14301                           	psect	text92
 14302  000C94                     __ptext92:
 14303                           	opt stack 0
 14304  000C94                     i1___ftpack:
 14305                           	opt stack 15
 14306                           
 14307                           ;incstack = 0
 14308  000C94  5004               	movf	i1___ftpack@exp,w,c
 14309  000C96  B4D8               	btfsc	status,2,c
 14310  000C98  D005               	goto	i1l5662
 14311  000C9A  5001               	movf	i1___ftpack@arg,w,c
 14312  000C9C  1002               	iorwf	i1___ftpack@arg+1,w,c
 14313  000C9E  1003               	iorwf	i1___ftpack@arg+2,w,c
 14314  000CA0  A4D8               	btfss	status,2,c
 14315  000CA2  D00E               	goto	i1l5668
 14316  000CA4                     i1l5662:
 14317  000CA4  0E00               	movlw	0
 14318  000CA6  6E01               	movwf	?i1___ftpack,c
 14319  000CA8  0E00               	movlw	0
 14320  000CAA  6E02               	movwf	?i1___ftpack+1,c
 14321  000CAC  0E00               	movlw	0
 14322  000CAE  6E03               	movwf	?i1___ftpack+2,c
 14323  000CB0  0012               	return	
 14324  000CB2  D006               	goto	i1l5668
 14325  000CB4                     i1l5666:
 14326  000CB4  2A04               	incf	i1___ftpack@exp,f,c
 14327  000CB6  90D8               	bcf	status,0,c
 14328  000CB8  3203               	rrcf	i1___ftpack@arg+2,f,c
 14329  000CBA  3202               	rrcf	i1___ftpack@arg+1,f,c
 14330  000CBC  3201               	rrcf	i1___ftpack@arg,f,c
 14331  000CBE  D000               	goto	i1l5668
 14332  000CC0                     i1l5668:
 14333  000CC0  0E00               	movlw	0
 14334  000CC2  1401               	andwf	i1___ftpack@arg,w,c
 14335  000CC4  6E06               	movwf	??i1___ftpack& (0+255),c
 14336  000CC6  0E00               	movlw	0
 14337  000CC8  1402               	andwf	i1___ftpack@arg+1,w,c
 14338  000CCA  6E07               	movwf	(??i1___ftpack+1)& (0+255),c
 14339  000CCC  0EFE               	movlw	254
 14340  000CCE  1403               	andwf	i1___ftpack@arg+2,w,c
 14341  000CD0  6E08               	movwf	(??i1___ftpack+2)& (0+255),c
 14342  000CD2  5006               	movf	??i1___ftpack,w,c
 14343  000CD4  1007               	iorwf	??i1___ftpack+1,w,c
 14344  000CD6  1008               	iorwf	??i1___ftpack+2,w,c
 14345  000CD8  B4D8               	btfsc	status,2,c
 14346  000CDA  D00E               	goto	i1l5674
 14347  000CDC  D7EB               	goto	i1l5666
 14348  000CDE  D00C               	goto	i1l5674
 14349  000CE0                     i1l5670:
 14350  000CE0  2A04               	incf	i1___ftpack@exp,f,c
 14351  000CE2  0E01               	movlw	1
 14352  000CE4  2601               	addwf	i1___ftpack@arg,f,c
 14353  000CE6  0E00               	movlw	0
 14354  000CE8  2202               	addwfc	i1___ftpack@arg+1,f,c
 14355  000CEA  0E00               	movlw	0
 14356  000CEC  2203               	addwfc	i1___ftpack@arg+2,f,c
 14357  000CEE  90D8               	bcf	status,0,c
 14358  000CF0  3203               	rrcf	i1___ftpack@arg+2,f,c
 14359  000CF2  3202               	rrcf	i1___ftpack@arg+1,f,c
 14360  000CF4  3201               	rrcf	i1___ftpack@arg,f,c
 14361  000CF6  D000               	goto	i1l5674
 14362  000CF8                     i1l5674:
 14363  000CF8  0E00               	movlw	0
 14364  000CFA  1401               	andwf	i1___ftpack@arg,w,c
 14365  000CFC  6E06               	movwf	??i1___ftpack& (0+255),c
 14366  000CFE  0E00               	movlw	0
 14367  000D00  1402               	andwf	i1___ftpack@arg+1,w,c
 14368  000D02  6E07               	movwf	(??i1___ftpack+1)& (0+255),c
 14369  000D04  0EFF               	movlw	255
 14370  000D06  1403               	andwf	i1___ftpack@arg+2,w,c
 14371  000D08  6E08               	movwf	(??i1___ftpack+2)& (0+255),c
 14372  000D0A  5006               	movf	??i1___ftpack,w,c
 14373  000D0C  1007               	iorwf	??i1___ftpack+1,w,c
 14374  000D0E  1008               	iorwf	??i1___ftpack+2,w,c
 14375  000D10  B4D8               	btfsc	status,2,c
 14376  000D12  D008               	goto	i1l5678
 14377  000D14  D7E5               	goto	i1l5670
 14378  000D16  D006               	goto	i1l5678
 14379  000D18                     i1l5676:
 14380  000D18  0604               	decf	i1___ftpack@exp,f,c
 14381  000D1A  90D8               	bcf	status,0,c
 14382  000D1C  3601               	rlcf	i1___ftpack@arg,f,c
 14383  000D1E  3602               	rlcf	i1___ftpack@arg+1,f,c
 14384  000D20  3603               	rlcf	i1___ftpack@arg+2,f,c
 14385  000D22  D000               	goto	i1l5678
 14386  000D24                     i1l5678:
 14387  000D24  BE02               	btfsc	i1___ftpack@arg+1,7,c
 14388  000D26  D004               	goto	i1l1615
 14389  000D28  0E02               	movlw	2
 14390  000D2A  6004               	cpfslt	i1___ftpack@exp,c
 14391  000D2C  D7F5               	goto	i1l5676
 14392  000D2E  D000               	goto	i1l1615
 14393  000D30                     i1l1615:
 14394  000D30  B004               	btfsc	i1___ftpack@exp,0,c
 14395  000D32  D002               	goto	i1l5684
 14396  000D34  9E02               	bcf	i1___ftpack@arg+1,7,c
 14397  000D36  D000               	goto	i1l5684
 14398  000D38                     i1l5684:
 14399  000D38  90D8               	bcf	status,0,c
 14400  000D3A  3204               	rrcf	i1___ftpack@exp,f,c
 14401  000D3C  5004               	movf	i1___ftpack@exp,w,c
 14402  000D3E  1203               	iorwf	i1___ftpack@arg+2,f,c
 14403  000D40  5005               	movf	i1___ftpack@sign,w,c
 14404  000D42  B4D8               	btfsc	status,2,c
 14405  000D44  D002               	goto	i1l5690
 14406  000D46  8E03               	bsf	i1___ftpack@arg+2,7,c
 14407  000D48  D000               	goto	i1l5690
 14408  000D4A                     i1l5690:
 14409  000D4A  C001  F001         	movff	i1___ftpack@arg,?i1___ftpack
 14410  000D4E  C002  F002         	movff	i1___ftpack@arg+1,?i1___ftpack+1
 14411  000D52  C003  F003         	movff	i1___ftpack@arg+2,?i1___ftpack+2
 14412  000D56  0012               	return	
 14413  000D58  0012               	return		;funcret
 14414  000D5A                     __end_ofi1___ftpack:
 14415                           	opt stack 0
 14416                           pclatu	equ	0xFFB
 14417                           pclath	equ	0xFFA
 14418                           tblptru	equ	0xFF8
 14419                           tblptrh	equ	0xFF7
 14420                           tblptrl	equ	0xFF6
 14421                           tablat	equ	0xFF5
 14422                           prodh	equ	0xFF4
 14423                           prodl	equ	0xFF3
 14424                           intcon	equ	0xFF2
 14425                           intcon2	equ	0xFF1
 14426                           intcon3	equ	0xFF0
 14427                           postinc0	equ	0xFEE
 14428                           fsr0h	equ	0xFEA
 14429                           fsr0l	equ	0xFE9
 14430                           wreg	equ	0xFE8
 14431                           postdec1	equ	0xFE5
 14432                           fsr1h	equ	0xFE2
 14433                           fsr1l	equ	0xFE1
 14434                           bsr	equ	0xFE0
 14435                           postinc2	equ	0xFDE
 14436                           postdec2	equ	0xFDD
 14437                           plusw2	equ	0xFDB
 14438                           fsr2h	equ	0xFDA
 14439                           fsr2l	equ	0xFD9
 14440                           status	equ	0xFD8
 14441                           
 14442 ;; *************** function _high_isr *****************
 14443 ;; Defined at:
 14444 ;;		line 48 in file "INTERRUPTS.c"
 14445 ;; Parameters:    Size  Location     Type
 14446 ;;		None
 14447 ;; Auto vars:     Size  Location     Type
 14448 ;;  RFtemp          2   58[BANK0 ] unsigned int 
 14449 ;; Return value:  Size  Location     Type
 14450 ;;		None               void
 14451 ;; Registers used:
 14452 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14453 ;; Tracked objects:
 14454 ;;		On entry : 0/0
 14455 ;;		On exit  : 0/0
 14456 ;;		Unchanged: 0/0
 14457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14458 ;;      Params:         0       0       0       0       0
 14459 ;;      Locals:         0       2       0       0       0
 14460 ;;      Temps:          0      14       0       0       0
 14461 ;;      Totals:         0      16       0       0       0
 14462 ;;Total ram usage:       16 bytes
 14463 ;; Hardware stack levels used:    1
 14464 ;; Hardware stack levels required when called:    5
 14465 ;; This function calls:
 14466 ;;		_RF_CheckCode
 14467 ;;		_TMR_Timer0Start
 14468 ;;		_TMR_Timer0Status
 14469 ;;		i2_RF_ResetData
 14470 ;;		i2_SYS_ActivityTimerReset
 14471 ;;		i2_TMR_ResetTimer0
 14472 ;;		i2_TMR_Timer0
 14473 ;; This function is called by:
 14474 ;;		Interrupt level 2
 14475 ;; This function uses a non-reentrant model
 14476 ;;
 14477                           
 14478                           	psect	intcode
 14479  000008                     __pintcode:
 14480                           	opt stack 0
 14481  000008                     _high_isr:
 14482                           	opt stack 13
 14483                           
 14484                           ;incstack = 0
 14485  000008  CFFA F0AC          	movff	pclath,??_high_isr
 14486  00000C  CFFB F0AD          	movff	pclatu,??_high_isr+1
 14487  000010  CFE9 F0AE          	movff	fsr0l,??_high_isr+2
 14488  000014  EF1A  F01D         	goto	int_func
 14489                           pclatu	equ	0xFFB
 14490                           pclath	equ	0xFFA
 14491                           tblptru	equ	0xFF8
 14492                           tblptrh	equ	0xFF7
 14493                           tblptrl	equ	0xFF6
 14494                           tablat	equ	0xFF5
 14495                           prodh	equ	0xFF4
 14496                           prodl	equ	0xFF3
 14497                           intcon	equ	0xFF2
 14498                           intcon2	equ	0xFF1
 14499                           intcon3	equ	0xFF0
 14500                           postinc0	equ	0xFEE
 14501                           fsr0h	equ	0xFEA
 14502                           fsr0l	equ	0xFE9
 14503                           wreg	equ	0xFE8
 14504                           postdec1	equ	0xFE5
 14505                           fsr1h	equ	0xFE2
 14506                           fsr1l	equ	0xFE1
 14507                           bsr	equ	0xFE0
 14508                           postinc2	equ	0xFDE
 14509                           postdec2	equ	0xFDD
 14510                           plusw2	equ	0xFDB
 14511                           fsr2h	equ	0xFDA
 14512                           fsr2l	equ	0xFD9
 14513                           status	equ	0xFD8
 14514                           
 14515                           	psect	intcode_body
 14516  003A34                     __pintcode_body:
 14517                           	opt stack 13
 14518  003A34                     int_func:
 14519                           	opt stack 13
 14520  003A34  CFEA F0AF          	movff	fsr0h,??_high_isr+3
 14521  003A38  CFE1 F0B0          	movff	fsr1l,??_high_isr+4
 14522  003A3C  CFE2 F0B1          	movff	fsr1h,??_high_isr+5
 14523  003A40  CFD9 F0B2          	movff	fsr2l,??_high_isr+6
 14524  003A44  CFDA F0B3          	movff	fsr2h,??_high_isr+7
 14525  003A48  CFF3 F0B4          	movff	prodl,??_high_isr+8
 14526  003A4C  CFF4 F0B5          	movff	prodh,??_high_isr+9
 14527  003A50  CFF6 F0B6          	movff	tblptrl,??_high_isr+10
 14528  003A54  CFF7 F0B7          	movff	tblptrh,??_high_isr+11
 14529  003A58  CFF8 F0B8          	movff	tblptru,??_high_isr+12
 14530  003A5C  CFF5 F0B9          	movff	tablat,??_high_isr+13
 14531                           
 14532                           ;INTERRUPTS.c: 50: unsigned int RFtemp = 0;
 14533  003A60  0E00               	movlw	0
 14534  003A62  0100               	movlb	0	; () banked
 14535  003A64  6FBB               	movwf	(high_isr@RFtemp+1)& (0+255),b
 14536  003A66  0E00               	movlw	0
 14537  003A68  6FBA               	movwf	high_isr@RFtemp& (0+255),b
 14538                           
 14539                           ; BSR set to: 0
 14540                           ;INTERRUPTS.c: 52: if(INTCON3bits.INT1IF || INTCON3bits.INT2IF)
 14541  003A6A  B0F0               	btfsc	intcon3,0,c	;volatile
 14542  003A6C  D002               	goto	i2l7086
 14543                           
 14544                           ; BSR set to: 0
 14545  003A6E  A2F0               	btfss	intcon3,1,c	;volatile
 14546  003A70  D077               	goto	i2l182
 14547  003A72                     i2l7086:
 14548                           
 14549                           ; BSR set to: 0
 14550                           ;INTERRUPTS.c: 53: {
 14551                           ;INTERRUPTS.c: 55: if(!TMR_Timer0Status())
 14552  003A72  EC84  F00E         	call	_TMR_Timer0Status	;wreg free
 14553  003A76  0900               	iorlw	0
 14554  003A78  A4D8               	btfss	status,2,c
 14555  003A7A  D003               	goto	i2l185
 14556                           
 14557                           ;INTERRUPTS.c: 56: {
 14558                           ;INTERRUPTS.c: 58: TMR_Timer0Start();
 14559  003A7C  EC47  F00E         	call	_TMR_Timer0Start	;wreg free
 14560                           
 14561                           ;INTERRUPTS.c: 59: }
 14562  003A80  D06C               	goto	i2l7128
 14563  003A82                     i2l185:
 14564                           
 14565                           ;INTERRUPTS.c: 60: else
 14566                           ;INTERRUPTS.c: 61: {
 14567                           ;INTERRUPTS.c: 62: RFtemp = TMR0L;
 14568  003A82  CFD6 F0BA          	movff	4054,high_isr@RFtemp	;volatile
 14569  003A86  0100               	movlb	0	; () banked
 14570  003A88  6BBB               	clrf	(high_isr@RFtemp+1)& (0+255),b
 14571                           
 14572                           ; BSR set to: 0
 14573                           ;INTERRUPTS.c: 63: RFtemp += (unsigned int)TMR0H << 8;
 14574  003A8A  50D7               	movf	4055,w,c	;volatile
 14575  003A8C  0100               	movlb	0	; () banked
 14576  003A8E  27BB               	addwf	(high_isr@RFtemp+1)& (0+255),f,b
 14577                           
 14578                           ; BSR set to: 0
 14579                           ;INTERRUPTS.c: 64: TMR_ResetTimer0();
 14580  003A90  ECDB  F00B         	call	i2_TMR_ResetTimer0	;wreg free
 14581                           
 14582                           ;INTERRUPTS.c: 65: if(!RFStarted)
 14583  003A94  0100               	movlb	0	; () banked
 14584  003A96  51C8               	movf	_RFStarted& (0+255),w,b
 14585  003A98  A4D8               	btfss	status,2,c
 14586  003A9A  D031               	goto	i2l187
 14587                           
 14588                           ; BSR set to: 0
 14589                           ;INTERRUPTS.c: 66: {
 14590                           ;INTERRUPTS.c: 67: if(System_State == 8)
 14591  003A9C  0E08               	movlw	8
 14592  003A9E  0100               	movlb	0	; () banked
 14593  003AA0  19D2               	xorwf	_System_State& (0+255),w,b
 14594  003AA2  A4D8               	btfss	status,2,c
 14595  003AA4  D018               	goto	i2l7104
 14596                           
 14597                           ; BSR set to: 0
 14598                           ;INTERRUPTS.c: 68: {
 14599                           ;INTERRUPTS.c: 69: if(RFtemp >= RF_SyncLow && RFtemp <= RF_SyncHigh)
 14600  003AA6  0100               	movlb	0	; () banked
 14601  003AA8  51C0               	movf	_RF_SyncLow& (0+255),w,b
 14602  003AAA  0100               	movlb	0	; () banked
 14603  003AAC  5DBA               	subwf	high_isr@RFtemp& (0+255),w,b
 14604  003AAE  0100               	movlb	0	; () banked
 14605  003AB0  51C1               	movf	(_RF_SyncLow+1)& (0+255),w,b
 14606  003AB2  0100               	movlb	0	; () banked
 14607  003AB4  59BB               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14608  003AB6  A0D8               	btfss	status,0,c
 14609  003AB8  D022               	goto	i2l187
 14610                           
 14611                           ; BSR set to: 0
 14612  003ABA  0100               	movlb	0	; () banked
 14613  003ABC  51BA               	movf	high_isr@RFtemp& (0+255),w,b
 14614  003ABE  0100               	movlb	0	; () banked
 14615  003AC0  5DBE               	subwf	_RF_SyncHigh& (0+255),w,b
 14616  003AC2  0100               	movlb	0	; () banked
 14617  003AC4  51BB               	movf	(high_isr@RFtemp+1)& (0+255),w,b
 14618  003AC6  0100               	movlb	0	; () banked
 14619  003AC8  59BF               	subwfb	(_RF_SyncHigh+1)& (0+255),w,b
 14620  003ACA  A0D8               	btfss	status,0,c
 14621  003ACC  D018               	goto	i2l187
 14622                           
 14623                           ; BSR set to: 0
 14624                           ;INTERRUPTS.c: 70: {
 14625                           ;INTERRUPTS.c: 71: RFStarted = 1;
 14626  003ACE  0E01               	movlw	1
 14627  003AD0  0100               	movlb	0	; () banked
 14628  003AD2  6FC8               	movwf	_RFStarted& (0+255),b
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;INTERRUPTS.c: 72: }
 14632                           ;INTERRUPTS.c: 73: }
 14633  003AD4  D014               	goto	i2l187
 14634  003AD6                     i2l7104:
 14635                           
 14636                           ; BSR set to: 0
 14637                           ;INTERRUPTS.c: 74: else
 14638                           ;INTERRUPTS.c: 75: {
 14639                           ;INTERRUPTS.c: 76: if(RFtemp >= 400 && RFtemp <= 1000)
 14640  003AD6  0E90               	movlw	144
 14641  003AD8  0100               	movlb	0	; () banked
 14642  003ADA  5DBA               	subwf	high_isr@RFtemp& (0+255),w,b
 14643  003ADC  0E01               	movlw	1
 14644  003ADE  0100               	movlb	0	; () banked
 14645  003AE0  59BB               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14646  003AE2  A0D8               	btfss	status,0,c
 14647  003AE4  D00C               	goto	i2l187
 14648                           
 14649                           ; BSR set to: 0
 14650  003AE6  0EE9               	movlw	233
 14651  003AE8  0100               	movlb	0	; () banked
 14652  003AEA  5DBA               	subwf	high_isr@RFtemp& (0+255),w,b
 14653  003AEC  0E03               	movlw	3
 14654  003AEE  0100               	movlb	0	; () banked
 14655  003AF0  59BB               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14656  003AF2  B0D8               	btfsc	status,0,c
 14657  003AF4  D004               	goto	i2l187
 14658                           
 14659                           ; BSR set to: 0
 14660                           ;INTERRUPTS.c: 77: {
 14661                           ;INTERRUPTS.c: 78: RFStarted = 1;
 14662  003AF6  0E01               	movlw	1
 14663  003AF8  0100               	movlb	0	; () banked
 14664  003AFA  6FC8               	movwf	_RFStarted& (0+255),b
 14665                           
 14666                           ; BSR set to: 0
 14667  003AFC  D000               	goto	i2l187
 14668  003AFE                     i2l187:
 14669                           
 14670                           ; BSR set to: 0
 14671                           ;INTERRUPTS.c: 79: }
 14672                           ;INTERRUPTS.c: 80: }
 14673                           ;INTERRUPTS.c: 81: }
 14674                           ;INTERRUPTS.c: 82: if(RFStarted)
 14675  003AFE  0100               	movlb	0	; () banked
 14676  003B00  51C8               	movf	_RFStarted& (0+255),w,b
 14677  003B02  B4D8               	btfsc	status,2,c
 14678  003B04  D02A               	goto	i2l7128
 14679                           
 14680                           ; BSR set to: 0
 14681                           ;INTERRUPTS.c: 83: {
 14682                           ;INTERRUPTS.c: 84: SYS_ActivityTimerReset();
 14683  003B06  EC3E  F00E         	call	i2_SYS_ActivityTimerReset	;wreg free
 14684                           
 14685                           ;INTERRUPTS.c: 85: if(RF_DataPlace < 128)
 14686  003B0A  0E80               	movlw	128
 14687  003B0C  0100               	movlb	0	; () banked
 14688  003B0E  61CB               	cpfslt	_RF_DataPlace& (0+255),b
 14689  003B10  D024               	goto	i2l7128
 14690                           
 14691                           ; BSR set to: 0
 14692                           ;INTERRUPTS.c: 86: {
 14693                           ;INTERRUPTS.c: 87: RF_DataTiming[RF_DataPlace] = RFtemp;
 14694  003B12  0100               	movlb	0	; () banked
 14695  003B14  51CB               	movf	_RF_DataPlace& (0+255),w,b
 14696  003B16  0D02               	mullw	2
 14697  003B18  0E00               	movlw	low _RF_DataTiming
 14698  003B1A  24F3               	addwf	prodl,w,c
 14699  003B1C  6ED9               	movwf	fsr2l,c
 14700  003B1E  0E03               	movlw	high _RF_DataTiming
 14701  003B20  20F4               	addwfc	prodh,w,c
 14702  003B22  6EDA               	movwf	fsr2h,c
 14703  003B24  C0BA  FFDE         	movff	high_isr@RFtemp,postinc2
 14704  003B28  C0BB  FFDD         	movff	high_isr@RFtemp+1,postdec2
 14705                           
 14706                           ; BSR set to: 0
 14707                           ;INTERRUPTS.c: 88: RF_DataPlace++;
 14708  003B2C  0100               	movlb	0	; () banked
 14709  003B2E  2BCB               	incf	_RF_DataPlace& (0+255),f,b
 14710                           
 14711                           ; BSR set to: 0
 14712                           ;INTERRUPTS.c: 89: if(RF_DataPlace >= RF_CodeSize)
 14713  003B30  0100               	movlb	0	; () banked
 14714  003B32  51C9               	movf	_RF_CodeSize& (0+255),w,b
 14715  003B34  0100               	movlb	0	; () banked
 14716  003B36  5DCB               	subwf	_RF_DataPlace& (0+255),w,b
 14717  003B38  A0D8               	btfss	status,0,c
 14718  003B3A  D00F               	goto	i2l7128
 14719                           
 14720                           ; BSR set to: 0
 14721                           ;INTERRUPTS.c: 90: {
 14722                           ;INTERRUPTS.c: 91: if(!RF_Data)
 14723  003B3C  0100               	movlb	0	; () banked
 14724  003B3E  51CA               	movf	_RF_Data& (0+255),w,b	;volatile
 14725  003B40  A4D8               	btfss	status,2,c
 14726  003B42  D005               	goto	i2l7124
 14727                           
 14728                           ; BSR set to: 0
 14729                           ;INTERRUPTS.c: 92: {
 14730                           ;INTERRUPTS.c: 93: RF_Data = RF_CheckCode();
 14731  003B44  ECB5  F01A         	call	_RF_CheckCode	;wreg free
 14732  003B48  0100               	movlb	0	; () banked
 14733  003B4A  6FCA               	movwf	_RF_Data& (0+255),b	;volatile
 14734  003B4C  D000               	goto	i2l7124
 14735  003B4E                     i2l7124:
 14736                           
 14737                           ; BSR set to: 0
 14738                           ;INTERRUPTS.c: 94: }
 14739                           ;INTERRUPTS.c: 95: TMR_Timer0(0);
 14740  003B4E  0E00               	movlw	0
 14741  003B50  ECB3  F00D         	call	i2_TMR_Timer0
 14742                           
 14743                           ;INTERRUPTS.c: 96: RF_ResetData();
 14744  003B54  EC8B  F00E         	call	i2_RF_ResetData	;wreg free
 14745  003B58  D000               	goto	i2l7128
 14746  003B5A                     i2l7128:
 14747                           
 14748                           ;INTERRUPTS.c: 97: }
 14749                           ;INTERRUPTS.c: 98: }
 14750                           ;INTERRUPTS.c: 99: }
 14751                           ;INTERRUPTS.c: 100: }
 14752                           ;INTERRUPTS.c: 101: INTCON3bits.INT1IF = 0;
 14753  003B5A  90F0               	bcf	intcon3,0,c	;volatile
 14754                           
 14755                           ;INTERRUPTS.c: 102: INTCON3bits.INT2IF = 0;
 14756  003B5C  92F0               	bcf	intcon3,1,c	;volatile
 14757                           
 14758                           ;INTERRUPTS.c: 103: }
 14759  003B5E  D00D               	goto	i2l199
 14760  003B60                     i2l182:
 14761                           
 14762                           ; BSR set to: 0
 14763                           ;INTERRUPTS.c: 104: else if(INTCONbits.TMR0IF)
 14764  003B60  A4F2               	btfss	intcon,2,c	;volatile
 14765  003B62  D009               	goto	i2l197
 14766                           
 14767                           ; BSR set to: 0
 14768                           ;INTERRUPTS.c: 105: {
 14769                           ;INTERRUPTS.c: 107: TMR_Timer0(0);
 14770  003B64  0E00               	movlw	0
 14771  003B66  ECB3  F00D         	call	i2_TMR_Timer0
 14772                           
 14773                           ;INTERRUPTS.c: 108: TMR_ResetTimer0();
 14774  003B6A  ECDB  F00B         	call	i2_TMR_ResetTimer0	;wreg free
 14775                           
 14776                           ;INTERRUPTS.c: 109: RF_ResetData();
 14777  003B6E  EC8B  F00E         	call	i2_RF_ResetData	;wreg free
 14778                           
 14779                           ;INTERRUPTS.c: 110: INTCONbits.TMR0IF = 0;
 14780  003B72  94F2               	bcf	intcon,2,c	;volatile
 14781                           
 14782                           ;INTERRUPTS.c: 111: }
 14783  003B74  D002               	goto	i2l199
 14784  003B76                     i2l197:
 14785                           
 14786                           ; BSR set to: 0
 14787                           ;INTERRUPTS.c: 112: else
 14788                           ;INTERRUPTS.c: 113: {
 14789                           ;INTERRUPTS.c: 115: __nop();
 14790  003B76  F000               	nop	
 14791  003B78  D000               	goto	i2l199
 14792  003B7A                     i2l199:
 14793  003B7A  C0B9  FFF5         	movff	??_high_isr+13,tablat
 14794  003B7E  C0B8  FFF8         	movff	??_high_isr+12,tblptru
 14795  003B82  C0B7  FFF7         	movff	??_high_isr+11,tblptrh
 14796  003B86  C0B6  FFF6         	movff	??_high_isr+10,tblptrl
 14797  003B8A  C0B5  FFF4         	movff	??_high_isr+9,prodh
 14798  003B8E  C0B4  FFF3         	movff	??_high_isr+8,prodl
 14799  003B92  C0B3  FFDA         	movff	??_high_isr+7,fsr2h
 14800  003B96  C0B2  FFD9         	movff	??_high_isr+6,fsr2l
 14801  003B9A  C0B1  FFE2         	movff	??_high_isr+5,fsr1h
 14802  003B9E  C0B0  FFE1         	movff	??_high_isr+4,fsr1l
 14803  003BA2  C0AF  FFEA         	movff	??_high_isr+3,fsr0h
 14804  003BA6  C0AE  FFE9         	movff	??_high_isr+2,fsr0l
 14805  003BAA  C0AD  FFFB         	movff	??_high_isr+1,pclatu
 14806  003BAE  C0AC  FFFA         	movff	??_high_isr,pclath
 14807  003BB2  0011               	retfie		f
 14808  003BB4                     __end_of_high_isr:
 14809                           	opt stack 0
 14810                           pclatu	equ	0xFFB
 14811                           pclath	equ	0xFFA
 14812                           tblptru	equ	0xFF8
 14813                           tblptrh	equ	0xFF7
 14814                           tblptrl	equ	0xFF6
 14815                           tablat	equ	0xFF5
 14816                           prodh	equ	0xFF4
 14817                           prodl	equ	0xFF3
 14818                           intcon	equ	0xFF2
 14819                           intcon2	equ	0xFF1
 14820                           intcon3	equ	0xFF0
 14821                           postinc0	equ	0xFEE
 14822                           fsr0h	equ	0xFEA
 14823                           fsr0l	equ	0xFE9
 14824                           wreg	equ	0xFE8
 14825                           postdec1	equ	0xFE5
 14826                           fsr1h	equ	0xFE2
 14827                           fsr1l	equ	0xFE1
 14828                           bsr	equ	0xFE0
 14829                           postinc2	equ	0xFDE
 14830                           postdec2	equ	0xFDD
 14831                           plusw2	equ	0xFDB
 14832                           fsr2h	equ	0xFDA
 14833                           fsr2l	equ	0xFD9
 14834                           status	equ	0xFD8
 14835                           
 14836 ;; *************** function i2_SYS_ActivityTimerReset *****************
 14837 ;; Defined at:
 14838 ;;		line 109 in file "SYSTEM.c"
 14839 ;; Parameters:    Size  Location     Type
 14840 ;;		None
 14841 ;; Auto vars:     Size  Location     Type
 14842 ;;		None
 14843 ;; Return value:  Size  Location     Type
 14844 ;;		None               void
 14845 ;; Registers used:
 14846 ;;		wreg, status,2
 14847 ;; Tracked objects:
 14848 ;;		On entry : 0/0
 14849 ;;		On exit  : 0/0
 14850 ;;		Unchanged: 0/0
 14851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14852 ;;      Params:         0       0       0       0       0
 14853 ;;      Locals:         0       0       0       0       0
 14854 ;;      Temps:          0       0       0       0       0
 14855 ;;      Totals:         0       0       0       0       0
 14856 ;;Total ram usage:        0 bytes
 14857 ;; Hardware stack levels used:    1
 14858 ;; This function calls:
 14859 ;;		Nothing
 14860 ;; This function is called by:
 14861 ;;		_high_isr
 14862 ;; This function uses a non-reentrant model
 14863 ;;
 14864                           
 14865                           	psect	text94
 14866  001C7C                     __ptext94:
 14867                           	opt stack 0
 14868  001C7C                     i2_SYS_ActivityTimerReset:
 14869                           	opt stack 17
 14870                           
 14871                           ;SYSTEM.c: 111: Activity_Timer = 0;
 14872                           
 14873                           ;incstack = 0
 14874  001C7C  0E00               	movlw	0
 14875  001C7E  6E48               	movwf	_Activity_Timer,c
 14876  001C80  0E00               	movlw	0
 14877  001C82  6E49               	movwf	_Activity_Timer+1,c
 14878  001C84  0E00               	movlw	0
 14879  001C86  6E4A               	movwf	_Activity_Timer+2,c
 14880  001C88  0E00               	movlw	0
 14881  001C8A  6E4B               	movwf	_Activity_Timer+3,c
 14882  001C8C  0012               	return		;funcret
 14883  001C8E                     __end_ofi2_SYS_ActivityTimerReset:
 14884                           	opt stack 0
 14885                           pclatu	equ	0xFFB
 14886                           pclath	equ	0xFFA
 14887                           tblptru	equ	0xFF8
 14888                           tblptrh	equ	0xFF7
 14889                           tblptrl	equ	0xFF6
 14890                           tablat	equ	0xFF5
 14891                           prodh	equ	0xFF4
 14892                           prodl	equ	0xFF3
 14893                           intcon	equ	0xFF2
 14894                           intcon2	equ	0xFF1
 14895                           intcon3	equ	0xFF0
 14896                           postinc0	equ	0xFEE
 14897                           fsr0h	equ	0xFEA
 14898                           fsr0l	equ	0xFE9
 14899                           wreg	equ	0xFE8
 14900                           postdec1	equ	0xFE5
 14901                           fsr1h	equ	0xFE2
 14902                           fsr1l	equ	0xFE1
 14903                           bsr	equ	0xFE0
 14904                           postinc2	equ	0xFDE
 14905                           postdec2	equ	0xFDD
 14906                           plusw2	equ	0xFDB
 14907                           fsr2h	equ	0xFDA
 14908                           fsr2l	equ	0xFD9
 14909                           status	equ	0xFD8
 14910                           
 14911 ;; *************** function _TMR_Timer0Status *****************
 14912 ;; Defined at:
 14913 ;;		line 56 in file "TIMERS.c"
 14914 ;; Parameters:    Size  Location     Type
 14915 ;;		None
 14916 ;; Auto vars:     Size  Location     Type
 14917 ;;		None
 14918 ;; Return value:  Size  Location     Type
 14919 ;;                  1    wreg      unsigned char 
 14920 ;; Registers used:
 14921 ;;		wreg
 14922 ;; Tracked objects:
 14923 ;;		On entry : 0/0
 14924 ;;		On exit  : 0/0
 14925 ;;		Unchanged: 0/0
 14926 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14927 ;;      Params:         0       0       0       0       0
 14928 ;;      Locals:         0       0       0       0       0
 14929 ;;      Temps:          0       0       0       0       0
 14930 ;;      Totals:         0       0       0       0       0
 14931 ;;Total ram usage:        0 bytes
 14932 ;; Hardware stack levels used:    1
 14933 ;; This function calls:
 14934 ;;		Nothing
 14935 ;; This function is called by:
 14936 ;;		_high_isr
 14937 ;; This function uses a non-reentrant model
 14938 ;;
 14939                           
 14940                           	psect	text95
 14941  001D08                     __ptext95:
 14942                           	opt stack 0
 14943  001D08                     _TMR_Timer0Status:
 14944                           	opt stack 17
 14945                           
 14946                           ;TIMERS.c: 58: if(T0CONbits.TMR0ON)
 14947                           
 14948                           ;incstack = 0
 14949  001D08  AED5               	btfss	4053,7,c	;volatile
 14950  001D0A  D002               	goto	i2l6752
 14951                           
 14952                           ;TIMERS.c: 59: {
 14953                           ;TIMERS.c: 61: return 1;
 14954  001D0C  0E01               	movlw	1
 14955  001D0E  0012               	return	
 14956  001D10                     i2l6752:
 14957                           
 14958                           ;TIMERS.c: 62: }
 14959                           ;TIMERS.c: 63: return 0;
 14960  001D10  0E00               	movlw	0
 14961  001D12  0012               	return	
 14962  001D14  0012               	return		;funcret
 14963  001D16                     __end_of_TMR_Timer0Status:
 14964                           	opt stack 0
 14965                           pclatu	equ	0xFFB
 14966                           pclath	equ	0xFFA
 14967                           tblptru	equ	0xFF8
 14968                           tblptrh	equ	0xFF7
 14969                           tblptrl	equ	0xFF6
 14970                           tablat	equ	0xFF5
 14971                           prodh	equ	0xFF4
 14972                           prodl	equ	0xFF3
 14973                           intcon	equ	0xFF2
 14974                           intcon2	equ	0xFF1
 14975                           intcon3	equ	0xFF0
 14976                           postinc0	equ	0xFEE
 14977                           fsr0h	equ	0xFEA
 14978                           fsr0l	equ	0xFE9
 14979                           wreg	equ	0xFE8
 14980                           postdec1	equ	0xFE5
 14981                           fsr1h	equ	0xFE2
 14982                           fsr1l	equ	0xFE1
 14983                           bsr	equ	0xFE0
 14984                           postinc2	equ	0xFDE
 14985                           postdec2	equ	0xFDD
 14986                           plusw2	equ	0xFDB
 14987                           fsr2h	equ	0xFDA
 14988                           fsr2l	equ	0xFD9
 14989                           status	equ	0xFD8
 14990                           
 14991 ;; *************** function _TMR_Timer0Start *****************
 14992 ;; Defined at:
 14993 ;;		line 363 in file "TIMERS.c"
 14994 ;; Parameters:    Size  Location     Type
 14995 ;;		None
 14996 ;; Auto vars:     Size  Location     Type
 14997 ;;		None
 14998 ;; Return value:  Size  Location     Type
 14999 ;;		None               void
 15000 ;; Registers used:
 15001 ;;		wreg, status,2, cstack
 15002 ;; Tracked objects:
 15003 ;;		On entry : 0/0
 15004 ;;		On exit  : 0/0
 15005 ;;		Unchanged: 0/0
 15006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15007 ;;      Params:         0       0       0       0       0
 15008 ;;      Locals:         0       0       0       0       0
 15009 ;;      Temps:          0       0       0       0       0
 15010 ;;      Totals:         0       0       0       0       0
 15011 ;;Total ram usage:        0 bytes
 15012 ;; Hardware stack levels used:    1
 15013 ;; Hardware stack levels required when called:    2
 15014 ;; This function calls:
 15015 ;;		i2_TMR_ResetTimer0
 15016 ;;		i2_TMR_Timer0
 15017 ;; This function is called by:
 15018 ;;		_high_isr
 15019 ;; This function uses a non-reentrant model
 15020 ;;
 15021                           
 15022                           	psect	text96
 15023  001C8E                     __ptext96:
 15024                           	opt stack 0
 15025  001C8E                     _TMR_Timer0Start:
 15026                           	opt stack 15
 15027                           
 15028                           ;TIMERS.c: 365: TMR_Timer0(0);
 15029                           
 15030                           ;incstack = 0
 15031  001C8E  0E00               	movlw	0
 15032  001C90  ECB3  F00D         	call	i2_TMR_Timer0
 15033                           
 15034                           ;TIMERS.c: 366: TMR_ResetTimer0();
 15035  001C94  ECDB  F00B         	call	i2_TMR_ResetTimer0	;wreg free
 15036                           
 15037                           ;TIMERS.c: 367: TMR_Timer0(1);
 15038  001C98  0E01               	movlw	1
 15039  001C9A  ECB3  F00D         	call	i2_TMR_Timer0
 15040  001C9E  0012               	return		;funcret
 15041  001CA0                     __end_of_TMR_Timer0Start:
 15042                           	opt stack 0
 15043                           pclatu	equ	0xFFB
 15044                           pclath	equ	0xFFA
 15045                           tblptru	equ	0xFF8
 15046                           tblptrh	equ	0xFF7
 15047                           tblptrl	equ	0xFF6
 15048                           tablat	equ	0xFF5
 15049                           prodh	equ	0xFF4
 15050                           prodl	equ	0xFF3
 15051                           intcon	equ	0xFF2
 15052                           intcon2	equ	0xFF1
 15053                           intcon3	equ	0xFF0
 15054                           postinc0	equ	0xFEE
 15055                           fsr0h	equ	0xFEA
 15056                           fsr0l	equ	0xFE9
 15057                           wreg	equ	0xFE8
 15058                           postdec1	equ	0xFE5
 15059                           fsr1h	equ	0xFE2
 15060                           fsr1l	equ	0xFE1
 15061                           bsr	equ	0xFE0
 15062                           postinc2	equ	0xFDE
 15063                           postdec2	equ	0xFDD
 15064                           plusw2	equ	0xFDB
 15065                           fsr2h	equ	0xFDA
 15066                           fsr2l	equ	0xFD9
 15067                           status	equ	0xFD8
 15068                           
 15069 ;; *************** function i2_TMR_ResetTimer0 *****************
 15070 ;; Defined at:
 15071 ;;		line 144 in file "TIMERS.c"
 15072 ;; Parameters:    Size  Location     Type
 15073 ;;		None
 15074 ;; Auto vars:     Size  Location     Type
 15075 ;;  TMR_ResetTim    1    1[BANK0 ] unsigned char 
 15076 ;; Return value:  Size  Location     Type
 15077 ;;		None               void
 15078 ;; Registers used:
 15079 ;;		wreg, status,2, cstack
 15080 ;; Tracked objects:
 15081 ;;		On entry : 0/0
 15082 ;;		On exit  : 0/0
 15083 ;;		Unchanged: 0/0
 15084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15085 ;;      Params:         0       0       0       0       0
 15086 ;;      Locals:         0       1       0       0       0
 15087 ;;      Temps:          0       0       0       0       0
 15088 ;;      Totals:         0       1       0       0       0
 15089 ;;Total ram usage:        1 bytes
 15090 ;; Hardware stack levels used:    1
 15091 ;; Hardware stack levels required when called:    1
 15092 ;; This function calls:
 15093 ;;		i2_TMR_Timer0
 15094 ;; This function is called by:
 15095 ;;		_high_isr
 15096 ;;		_TMR_Timer0Start
 15097 ;; This function uses a non-reentrant model
 15098 ;;
 15099                           
 15100                           	psect	text97
 15101  0017B6                     __ptext97:
 15102                           	opt stack 0
 15103  0017B6                     i2_TMR_ResetTimer0:
 15104                           	opt stack 16
 15105                           
 15106                           ;TIMERS.c: 146: unsigned char TimerOn = T0CONbits.TMR0ON;
 15107                           
 15108                           ;incstack = 0
 15109  0017B6  0E00               	movlw	0
 15110  0017B8  BED5               	btfsc	4053,7,c	;volatile
 15111  0017BA  0E01               	movlw	1
 15112  0017BC  0100               	movlb	0	; () banked
 15113  0017BE  6F81               	movwf	i2TMR_ResetTimer0@TimerOn& (0+255),b
 15114                           
 15115                           ; BSR set to: 0
 15116                           ;TIMERS.c: 148: TMR_Timer0(0);
 15117  0017C0  0E00               	movlw	0
 15118  0017C2  ECB3  F00D         	call	i2_TMR_Timer0
 15119                           
 15120                           ;TIMERS.c: 149: TMR0H = 0;
 15121  0017C6  0E00               	movlw	0
 15122  0017C8  6ED7               	movwf	4055,c	;volatile
 15123                           
 15124                           ;TIMERS.c: 150: TMR0L = 2;
 15125  0017CA  0E02               	movlw	2
 15126  0017CC  6ED6               	movwf	4054,c	;volatile
 15127                           
 15128                           ;TIMERS.c: 151: if(TimerOn)
 15129  0017CE  0100               	movlb	0	; () banked
 15130  0017D0  5181               	movf	i2TMR_ResetTimer0@TimerOn& (0+255),w,b
 15131  0017D2  0100               	movlb	0	; () banked
 15132  0017D4  B4D8               	btfsc	status,2,c
 15133  0017D6  0012               	return	
 15134                           
 15135                           ; BSR set to: 0
 15136                           ;TIMERS.c: 152: {
 15137                           ;TIMERS.c: 153: TMR_Timer0(1);
 15138  0017D8  0E01               	movlw	1
 15139  0017DA  ECB3  F00D         	call	i2_TMR_Timer0
 15140  0017DE  0012               	return	
 15141  0017E0  0012               	return		;funcret
 15142  0017E2                     __end_ofi2_TMR_ResetTimer0:
 15143                           	opt stack 0
 15144                           pclatu	equ	0xFFB
 15145                           pclath	equ	0xFFA
 15146                           tblptru	equ	0xFF8
 15147                           tblptrh	equ	0xFF7
 15148                           tblptrl	equ	0xFF6
 15149                           tablat	equ	0xFF5
 15150                           prodh	equ	0xFF4
 15151                           prodl	equ	0xFF3
 15152                           intcon	equ	0xFF2
 15153                           intcon2	equ	0xFF1
 15154                           intcon3	equ	0xFF0
 15155                           postinc0	equ	0xFEE
 15156                           fsr0h	equ	0xFEA
 15157                           fsr0l	equ	0xFE9
 15158                           wreg	equ	0xFE8
 15159                           postdec1	equ	0xFE5
 15160                           fsr1h	equ	0xFE2
 15161                           fsr1l	equ	0xFE1
 15162                           bsr	equ	0xFE0
 15163                           postinc2	equ	0xFDE
 15164                           postdec2	equ	0xFDD
 15165                           plusw2	equ	0xFDB
 15166                           fsr2h	equ	0xFDA
 15167                           fsr2l	equ	0xFD9
 15168                           status	equ	0xFD8
 15169                           
 15170 ;; *************** function i2_TMR_Timer0 *****************
 15171 ;; Defined at:
 15172 ;;		line 87 in file "TIMERS.c"
 15173 ;; Parameters:    Size  Location     Type
 15174 ;;  state           1    wreg     unsigned char 
 15175 ;; Auto vars:     Size  Location     Type
 15176 ;;  state           1    0[BANK0 ] unsigned char 
 15177 ;; Return value:  Size  Location     Type
 15178 ;;		None               void
 15179 ;; Registers used:
 15180 ;;		wreg, status,2
 15181 ;; Tracked objects:
 15182 ;;		On entry : 0/0
 15183 ;;		On exit  : 0/0
 15184 ;;		Unchanged: 0/0
 15185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15186 ;;      Params:         0       0       0       0       0
 15187 ;;      Locals:         0       1       0       0       0
 15188 ;;      Temps:          0       0       0       0       0
 15189 ;;      Totals:         0       1       0       0       0
 15190 ;;Total ram usage:        1 bytes
 15191 ;; Hardware stack levels used:    1
 15192 ;; This function calls:
 15193 ;;		Nothing
 15194 ;; This function is called by:
 15195 ;;		_high_isr
 15196 ;;		_TMR_Timer0Start
 15197 ;;		i2_TMR_ResetTimer0
 15198 ;; This function uses a non-reentrant model
 15199 ;;
 15200                           
 15201                           	psect	text98
 15202  001B66                     __ptext98:
 15203                           	opt stack 0
 15204  001B66                     i2_TMR_Timer0:
 15205                           	opt stack 17
 15206                           
 15207                           ;incstack = 0
 15208                           ;i2TMR_Timer0@state stored from wreg
 15209  001B66  0100               	movlb	0	; () banked
 15210  001B68  6F80               	movwf	i2TMR_Timer0@state& (0+255),b
 15211                           
 15212                           ; BSR set to: 0
 15213                           ;TIMERS.c: 89: if(state)
 15214  001B6A  0100               	movlb	0	; () banked
 15215  001B6C  5180               	movf	i2TMR_Timer0@state& (0+255),w,b
 15216  001B6E  0100               	movlb	0	; () banked
 15217  001B70  B4D8               	btfsc	status,2,c
 15218  001B72  D002               	goto	i2l1034
 15219                           
 15220                           ; BSR set to: 0
 15221                           ;TIMERS.c: 90: {
 15222                           ;TIMERS.c: 92: T0CONbits.TMR0ON = 1;
 15223  001B74  8ED5               	bsf	4053,7,c	;volatile
 15224                           
 15225                           ;TIMERS.c: 93: }
 15226  001B76  0012               	return	
 15227  001B78                     i2l1034:
 15228                           
 15229                           ; BSR set to: 0
 15230                           ;TIMERS.c: 94: else
 15231                           ;TIMERS.c: 95: {
 15232                           ;TIMERS.c: 97: T0CONbits.TMR0ON = 0;
 15233  001B78  9ED5               	bcf	4053,7,c	;volatile
 15234  001B7A  0012               	return	
 15235                           
 15236                           ; BSR set to: 0
 15237                           
 15238                           ; BSR set to: 0
 15239  001B7C  0012               	return		;funcret
 15240  001B7E                     __end_ofi2_TMR_Timer0:
 15241                           	opt stack 0
 15242                           pclatu	equ	0xFFB
 15243                           pclath	equ	0xFFA
 15244                           tblptru	equ	0xFF8
 15245                           tblptrh	equ	0xFF7
 15246                           tblptrl	equ	0xFF6
 15247                           tablat	equ	0xFF5
 15248                           prodh	equ	0xFF4
 15249                           prodl	equ	0xFF3
 15250                           intcon	equ	0xFF2
 15251                           intcon2	equ	0xFF1
 15252                           intcon3	equ	0xFF0
 15253                           postinc0	equ	0xFEE
 15254                           fsr0h	equ	0xFEA
 15255                           fsr0l	equ	0xFE9
 15256                           wreg	equ	0xFE8
 15257                           postdec1	equ	0xFE5
 15258                           fsr1h	equ	0xFE2
 15259                           fsr1l	equ	0xFE1
 15260                           bsr	equ	0xFE0
 15261                           postinc2	equ	0xFDE
 15262                           postdec2	equ	0xFDD
 15263                           plusw2	equ	0xFDB
 15264                           fsr2h	equ	0xFDA
 15265                           fsr2l	equ	0xFD9
 15266                           status	equ	0xFD8
 15267                           
 15268 ;; *************** function _RF_CheckCode *****************
 15269 ;; Defined at:
 15270 ;;		line 271 in file "RF.c"
 15271 ;; Parameters:    Size  Location     Type
 15272 ;;		None
 15273 ;; Auto vars:     Size  Location     Type
 15274 ;;  High            3   40[BANK0 ] unsigned char 
 15275 ;;  Low             3   37[BANK0 ] unsigned char 
 15276 ;;  i               1   43[BANK0 ] unsigned char 
 15277 ;; Return value:  Size  Location     Type
 15278 ;;                  1    wreg      unsigned char 
 15279 ;; Registers used:
 15280 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15281 ;; Tracked objects:
 15282 ;;		On entry : 0/0
 15283 ;;		On exit  : 0/0
 15284 ;;		Unchanged: 0/0
 15285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15286 ;;      Params:         0       0       0       0       0
 15287 ;;      Locals:         0       7       0       0       0
 15288 ;;      Temps:          0       2       0       0       0
 15289 ;;      Totals:         0       9       0       0       0
 15290 ;;Total ram usage:        9 bytes
 15291 ;; Hardware stack levels used:    1
 15292 ;; Hardware stack levels required when called:    4
 15293 ;; This function calls:
 15294 ;;		i2_FSH_Write_IR_RF
 15295 ;;		i2___ftge
 15296 ;;		i2___ftmul
 15297 ;;		i2___lwtoft
 15298 ;; This function is called by:
 15299 ;;		_high_isr
 15300 ;; This function uses a non-reentrant model
 15301 ;;
 15302                           
 15303                           	psect	text99
 15304  00356A                     __ptext99:
 15305                           	opt stack 0
 15306  00356A                     _RF_CheckCode:
 15307                           	opt stack 13
 15308                           
 15309                           ;RF.c: 273: unsigned char i;
 15310                           ;RF.c: 274: double Low = 0.0;
 15311                           
 15312                           ; BSR set to: 0
 15313                           ;incstack = 0
 15314  00356A  0E00               	movlw	0
 15315  00356C  0100               	movlb	0	; () banked
 15316  00356E  6FA5               	movwf	RF_CheckCode@Low& (0+255),b
 15317  003570  0E00               	movlw	0
 15318  003572  0100               	movlb	0	; () banked
 15319  003574  6FA6               	movwf	(RF_CheckCode@Low+1)& (0+255),b
 15320  003576  0E00               	movlw	0
 15321  003578  0100               	movlb	0	; () banked
 15322  00357A  6FA7               	movwf	(RF_CheckCode@Low+2)& (0+255),b
 15323                           
 15324                           ;RF.c: 275: double High = 0.0;
 15325  00357C  0E00               	movlw	0
 15326  00357E  0100               	movlb	0	; () banked
 15327  003580  6FA8               	movwf	RF_CheckCode@High& (0+255),b
 15328  003582  0E00               	movlw	0
 15329  003584  0100               	movlb	0	; () banked
 15330  003586  6FA9               	movwf	(RF_CheckCode@High+1)& (0+255),b
 15331  003588  0E00               	movlw	0
 15332  00358A  0100               	movlb	0	; () banked
 15333  00358C  6FAA               	movwf	(RF_CheckCode@High+2)& (0+255),b
 15334                           
 15335                           ; BSR set to: 0
 15336                           ;RF.c: 277: if(System_State == 8)
 15337  00358E  0E08               	movlw	8
 15338  003590  0100               	movlb	0	; () banked
 15339  003592  19D2               	xorwf	_System_State& (0+255),w,b
 15340  003594  A4D8               	btfss	status,2,c
 15341  003596  D0FE               	goto	i2l6788
 15342                           
 15343                           ; BSR set to: 0
 15344                           ;RF.c: 278: {
 15345                           ;RF.c: 279: for(i=0; i<RF_CodeSize;i++)
 15346  003598  0E00               	movlw	0
 15347  00359A  0100               	movlb	0	; () banked
 15348  00359C  6FAB               	movwf	RF_CheckCode@i& (0+255),b
 15349  00359E  D0F2               	goto	i2l6780
 15350  0035A0                     i2l6764:
 15351                           
 15352                           ; BSR set to: 0
 15353                           ;RF.c: 280: {
 15354                           ;RF.c: 281: if(i == 0)
 15355  0035A0  0100               	movlb	0	; () banked
 15356  0035A2  51AB               	movf	RF_CheckCode@i& (0+255),w,b
 15357  0035A4  0100               	movlb	0	; () banked
 15358  0035A6  A4D8               	btfss	status,2,c
 15359  0035A8  D051               	goto	i2l6768
 15360                           
 15361                           ; BSR set to: 0
 15362                           ;RF.c: 282: {
 15363                           ;RF.c: 283: Low = (double)RF_SavedTiming[i] * (1.0 - 0.02);
 15364  0035AA  0100               	movlb	0	; () banked
 15365  0035AC  51AB               	movf	RF_CheckCode@i& (0+255),w,b
 15366  0035AE  0D02               	mullw	2
 15367  0035B0  0E00               	movlw	0
 15368  0035B2  24F3               	addwf	prodl,w,c
 15369  0035B4  6EF6               	movwf	tblptrl,c
 15370  0035B6  0E25               	movlw	37
 15371  0035B8  20F4               	addwfc	prodh,w,c
 15372  0035BA  6EF7               	movwf	tblptrh,c
 15373  0035BC  6AF8               	clrf	tblptru,c
 15374  0035BE  0E00               	movlw	0
 15375  0035C0  22F8               	addwfc	tblptru,f,c
 15376  0035C2  0009               	tblrd		*+
 15377  0035C4  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15378  0035C8  000A               	tblrd		*-
 15379  0035CA  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15380  0035CE  ECF1  F00B         	call	i2___lwtoft	;wreg free
 15381  0035D2  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15382  0035D6  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15383  0035DA  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15384  0035DE  0EE1               	movlw	225
 15385  0035E0  0100               	movlb	0	; () banked
 15386  0035E2  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15387  0035E4  0E7A               	movlw	122
 15388  0035E6  0100               	movlb	0	; () banked
 15389  0035E8  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15390  0035EA  0E3F               	movlw	63
 15391  0035EC  0100               	movlb	0	; () banked
 15392  0035EE  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15393  0035F0  EC90  F01E         	call	i2___ftmul	;wreg free
 15394  0035F4  C08B  F0A5         	movff	?i2___ftmul,RF_CheckCode@Low
 15395  0035F8  C08C  F0A6         	movff	?i2___ftmul+1,RF_CheckCode@Low+1
 15396  0035FC  C08D  F0A7         	movff	?i2___ftmul+2,RF_CheckCode@Low+2
 15397                           
 15398                           ;RF.c: 284: High = (double)RF_SavedTiming[i] * (1.0 + 0.02);
 15399  003600  0100               	movlb	0	; () banked
 15400  003602  51AB               	movf	RF_CheckCode@i& (0+255),w,b
 15401  003604  0D02               	mullw	2
 15402  003606  0E00               	movlw	0
 15403  003608  24F3               	addwf	prodl,w,c
 15404  00360A  6EF6               	movwf	tblptrl,c
 15405  00360C  0E25               	movlw	37
 15406  00360E  20F4               	addwfc	prodh,w,c
 15407  003610  6EF7               	movwf	tblptrh,c
 15408  003612  6AF8               	clrf	tblptru,c
 15409  003614  0E00               	movlw	0
 15410  003616  22F8               	addwfc	tblptru,f,c
 15411  003618  0009               	tblrd		*+
 15412  00361A  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15413  00361E  000A               	tblrd		*-
 15414  003620  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15415  003624  ECF1  F00B         	call	i2___lwtoft	;wreg free
 15416  003628  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15417  00362C  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15418  003630  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15419  003634  0E8F               	movlw	143
 15420  003636  0100               	movlb	0	; () banked
 15421  003638  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15422  00363A  0E82               	movlw	130
 15423  00363C  0100               	movlb	0	; () banked
 15424  00363E  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15425  003640  0E3F               	movlw	63
 15426  003642  0100               	movlb	0	; () banked
 15427  003644  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15428  003646  EC90  F01E         	call	i2___ftmul	;wreg free
 15429  00364A  D050               	goto	L8
 15430  00364C                     i2l6768:
 15431                           
 15432                           ;RF.c: 286: else
 15433                           ;RF.c: 287: {
 15434                           ;RF.c: 288: Low = (double)RF_SavedTiming[i] * (1.0 - 0.5);
 15435  00364C  0100               	movlb	0	; () banked
 15436  00364E  51AB               	movf	RF_CheckCode@i& (0+255),w,b
 15437  003650  0D02               	mullw	2
 15438  003652  0E00               	movlw	0
 15439  003654  24F3               	addwf	prodl,w,c
 15440  003656  6EF6               	movwf	tblptrl,c
 15441  003658  0E25               	movlw	37
 15442  00365A  20F4               	addwfc	prodh,w,c
 15443  00365C  6EF7               	movwf	tblptrh,c
 15444  00365E  6AF8               	clrf	tblptru,c
 15445  003660  0E00               	movlw	0
 15446  003662  22F8               	addwfc	tblptru,f,c
 15447  003664  0009               	tblrd		*+
 15448  003666  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15449  00366A  000A               	tblrd		*-
 15450  00366C  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15451  003670  ECF1  F00B         	call	i2___lwtoft	;wreg free
 15452  003674  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15453  003678  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15454  00367C  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15455  003680  0E00               	movlw	0
 15456  003682  0100               	movlb	0	; () banked
 15457  003684  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15458  003686  0E00               	movlw	0
 15459  003688  0100               	movlb	0	; () banked
 15460  00368A  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15461  00368C  0E3F               	movlw	63
 15462  00368E  0100               	movlb	0	; () banked
 15463  003690  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15464  003692  EC90  F01E         	call	i2___ftmul	;wreg free
 15465  003696  C08B  F0A5         	movff	?i2___ftmul,RF_CheckCode@Low
 15466  00369A  C08C  F0A6         	movff	?i2___ftmul+1,RF_CheckCode@Low+1
 15467  00369E  C08D  F0A7         	movff	?i2___ftmul+2,RF_CheckCode@Low+2
 15468                           
 15469                           ;RF.c: 289: High = (double)RF_SavedTiming[i] * (1.0 + 0.5);
 15470  0036A2  0100               	movlb	0	; () banked
 15471  0036A4  51AB               	movf	RF_CheckCode@i& (0+255),w,b
 15472  0036A6  0D02               	mullw	2
 15473  0036A8  0E00               	movlw	0
 15474  0036AA  24F3               	addwf	prodl,w,c
 15475  0036AC  6EF6               	movwf	tblptrl,c
 15476  0036AE  0E25               	movlw	37
 15477  0036B0  20F4               	addwfc	prodh,w,c
 15478  0036B2  6EF7               	movwf	tblptrh,c
 15479  0036B4  6AF8               	clrf	tblptru,c
 15480  0036B6  0E00               	movlw	0
 15481  0036B8  22F8               	addwfc	tblptru,f,c
 15482  0036BA  0009               	tblrd		*+
 15483  0036BC  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15484  0036C0  000A               	tblrd		*-
 15485  0036C2  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15486  0036C6  ECF1  F00B         	call	i2___lwtoft	;wreg free
 15487  0036CA  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15488  0036CE  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15489  0036D2  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15490  0036D6  0E00               	movlw	0
 15491  0036D8  0100               	movlb	0	; () banked
 15492  0036DA  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15493  0036DC  0EC0               	movlw	192
 15494  0036DE  0100               	movlb	0	; () banked
 15495  0036E0  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15496  0036E2  0E3F               	movlw	63
 15497  0036E4  0100               	movlb	0	; () banked
 15498  0036E6  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15499  0036E8  EC90  F01E         	call	i2___ftmul	;wreg free
 15500  0036EC                     L8:
 15501  0036EC  C08B  F0A8         	movff	?i2___ftmul,RF_CheckCode@High
 15502  0036F0  C08C  F0A9         	movff	?i2___ftmul+1,RF_CheckCode@High+1
 15503  0036F4  C08D  F0AA         	movff	?i2___ftmul+2,RF_CheckCode@High+2
 15504  0036F8  D000               	goto	i2l6770
 15505  0036FA                     i2l6770:
 15506                           
 15507                           ;RF.c: 290: }
 15508                           ;RF.c: 292: if((double)RF_DataTiming[i] < Low || (double)RF_DataTiming[i] > High )
 15509  0036FA  0100               	movlb	0	; () banked
 15510  0036FC  51AB               	movf	RF_CheckCode@i& (0+255),w,b
 15511  0036FE  0D02               	mullw	2
 15512  003700  0E00               	movlw	low _RF_DataTiming
 15513  003702  24F3               	addwf	prodl,w,c
 15514  003704  6ED9               	movwf	fsr2l,c
 15515  003706  0E03               	movlw	high _RF_DataTiming
 15516  003708  20F4               	addwfc	prodh,w,c
 15517  00370A  6EDA               	movwf	fsr2h,c
 15518  00370C  CFDE F088          	movff	postinc2,i2___lwtoft@c
 15519  003710  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 15520  003714  ECF1  F00B         	call	i2___lwtoft	;wreg free
 15521  003718  C088  F08B         	movff	?i2___lwtoft,i2___ftge@ff1
 15522  00371C  C089  F08C         	movff	?i2___lwtoft+1,i2___ftge@ff1+1
 15523  003720  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftge@ff1+2
 15524  003724  C0A5  F08E         	movff	RF_CheckCode@Low,i2___ftge@ff2
 15525  003728  C0A6  F08F         	movff	RF_CheckCode@Low+1,i2___ftge@ff2+1
 15526  00372C  C0A7  F090         	movff	RF_CheckCode@Low+2,i2___ftge@ff2+2
 15527  003730  EC1C  F005         	call	i2___ftge	;wreg free
 15528  003734  0100               	movlb	0	; () banked
 15529  003736  A0D8               	btfss	status,0,c
 15530  003738  D020               	goto	i2l6774
 15531                           
 15532                           ; BSR set to: 0
 15533  00373A  C0A8  F08B         	movff	RF_CheckCode@High,i2___ftge@ff1
 15534  00373E  C0A9  F08C         	movff	RF_CheckCode@High+1,i2___ftge@ff1+1
 15535  003742  C0AA  F08D         	movff	RF_CheckCode@High+2,i2___ftge@ff1+2
 15536  003746  0100               	movlb	0	; () banked
 15537  003748  51AB               	movf	RF_CheckCode@i& (0+255),w,b
 15538  00374A  0D02               	mullw	2
 15539  00374C  0E00               	movlw	low _RF_DataTiming
 15540  00374E  24F3               	addwf	prodl,w,c
 15541  003750  6ED9               	movwf	fsr2l,c
 15542  003752  0E03               	movlw	high _RF_DataTiming
 15543  003754  20F4               	addwfc	prodh,w,c
 15544  003756  6EDA               	movwf	fsr2h,c
 15545  003758  CFDE F088          	movff	postinc2,i2___lwtoft@c
 15546  00375C  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 15547  003760  ECF1  F00B         	call	i2___lwtoft	;wreg free
 15548  003764  C088  F08E         	movff	?i2___lwtoft,i2___ftge@ff2
 15549  003768  C089  F08F         	movff	?i2___lwtoft+1,i2___ftge@ff2+1
 15550  00376C  C08A  F090         	movff	?i2___lwtoft+2,i2___ftge@ff2+2
 15551  003770  EC1C  F005         	call	i2___ftge	;wreg free
 15552  003774  0100               	movlb	0	; () banked
 15553  003776  B0D8               	btfsc	status,0,c
 15554  003778  D002               	goto	i2l6778
 15555  00377A                     i2l6774:
 15556                           
 15557                           ; BSR set to: 0
 15558                           ;RF.c: 293: {
 15559                           ;RF.c: 294: return 0;
 15560  00377A  0E00               	movlw	0
 15561                           
 15562                           ; BSR set to: 0
 15563  00377C  0012               	return	
 15564  00377E                     i2l6778:
 15565                           
 15566                           ; BSR set to: 0
 15567  00377E  0100               	movlb	0	; () banked
 15568  003780  2BAB               	incf	RF_CheckCode@i& (0+255),f,b
 15569  003782  D000               	goto	i2l6780
 15570  003784                     i2l6780:
 15571                           
 15572                           ; BSR set to: 0
 15573  003784  0100               	movlb	0	; () banked
 15574  003786  51C9               	movf	_RF_CodeSize& (0+255),w,b
 15575  003788  0100               	movlb	0	; () banked
 15576  00378A  5DAB               	subwf	RF_CheckCode@i& (0+255),w,b
 15577  00378C  A0D8               	btfss	status,0,c
 15578  00378E  D708               	goto	i2l6764
 15579                           
 15580                           ; BSR set to: 0
 15581                           ;RF.c: 295: }
 15582                           ;RF.c: 296: }
 15583                           ;RF.c: 297: return 1;
 15584                           
 15585                           ; BSR set to: 0
 15586  003790  0E01               	movlw	1
 15587                           
 15588                           ; BSR set to: 0
 15589                           ;RF.c: 298: }
 15590                           
 15591                           ; BSR set to: 0
 15592  003792  0012               	return	
 15593  003794                     i2l6788:
 15594                           
 15595                           ; BSR set to: 0
 15596                           ;RF.c: 299: else
 15597                           ;RF.c: 300: {
 15598                           ;RF.c: 301: if(RF_DataPlace >= 20)
 15599  003794  0E13               	movlw	19
 15600  003796  0100               	movlb	0	; () banked
 15601  003798  65CB               	cpfsgt	_RF_DataPlace& (0+255),b
 15602  00379A  D040               	goto	i2l6816
 15603                           
 15604                           ; BSR set to: 0
 15605                           ;RF.c: 302: {
 15606                           ;RF.c: 303: for(i=0;i<RF_DataPlace;i++)
 15607  00379C  0E00               	movlw	0
 15608  00379E  0100               	movlb	0	; () banked
 15609  0037A0  6FAB               	movwf	RF_CheckCode@i& (0+255),b
 15610  0037A2  D015               	goto	i2l6800
 15611  0037A4                     i2l6792:
 15612                           
 15613                           ; BSR set to: 0
 15614                           ;RF.c: 304: {
 15615                           ;RF.c: 305: if(RF_DataTiming[i] < 5)
 15616  0037A4  0100               	movlb	0	; () banked
 15617  0037A6  51AB               	movf	RF_CheckCode@i& (0+255),w,b
 15618  0037A8  0D02               	mullw	2
 15619  0037AA  0E00               	movlw	low _RF_DataTiming
 15620  0037AC  24F3               	addwf	prodl,w,c
 15621  0037AE  6ED9               	movwf	fsr2l,c
 15622  0037B0  0E03               	movlw	high _RF_DataTiming
 15623  0037B2  20F4               	addwfc	prodh,w,c
 15624  0037B4  6EDA               	movwf	fsr2h,c
 15625  0037B6  0E01               	movlw	1
 15626  0037B8  50DB               	movf	plusw2,w,c
 15627  0037BA  E106               	bnz	i2l6798
 15628  0037BC  0E05               	movlw	5
 15629  0037BE  5CDE               	subwf	postinc2,w,c
 15630  0037C0  B0D8               	btfsc	status,0,c
 15631  0037C2  D002               	goto	i2l6798
 15632                           
 15633                           ; BSR set to: 0
 15634                           ;RF.c: 306: {
 15635                           ;RF.c: 308: return 0;
 15636  0037C4  0E00               	movlw	0
 15637                           
 15638                           ; BSR set to: 0
 15639  0037C6  0012               	return	
 15640  0037C8                     i2l6798:
 15641                           
 15642                           ; BSR set to: 0
 15643  0037C8  0100               	movlb	0	; () banked
 15644  0037CA  2BAB               	incf	RF_CheckCode@i& (0+255),f,b
 15645  0037CC  D000               	goto	i2l6800
 15646  0037CE                     i2l6800:
 15647                           
 15648                           ; BSR set to: 0
 15649  0037CE  0100               	movlb	0	; () banked
 15650  0037D0  51CB               	movf	_RF_DataPlace& (0+255),w,b
 15651  0037D2  0100               	movlb	0	; () banked
 15652  0037D4  5DAB               	subwf	RF_CheckCode@i& (0+255),w,b
 15653  0037D6  A0D8               	btfss	status,0,c
 15654  0037D8  D7E5               	goto	i2l6792
 15655                           
 15656                           ; BSR set to: 0
 15657                           ;RF.c: 309: }
 15658                           ;RF.c: 310: }
 15659                           ;RF.c: 312: for(i=RF_DataPlace;i<128;i++)
 15660  0037DA  C0CB  F0AB         	movff	_RF_DataPlace,RF_CheckCode@i
 15661  0037DE  D010               	goto	i2l6810
 15662                           
 15663                           ; BSR set to: 0
 15664                           
 15665                           ; BSR set to: 0
 15666  0037E0  D013               	goto	i2l444
 15667  0037E2                     i2l6806:
 15668                           
 15669                           ; BSR set to: 0
 15670                           ;RF.c: 313: {
 15671                           ;RF.c: 315: RF_DataTiming[i] = 0;
 15672  0037E2  0100               	movlb	0	; () banked
 15673  0037E4  51AB               	movf	RF_CheckCode@i& (0+255),w,b
 15674  0037E6  0D02               	mullw	2
 15675  0037E8  0E00               	movlw	low _RF_DataTiming
 15676  0037EA  24F3               	addwf	prodl,w,c
 15677  0037EC  6ED9               	movwf	fsr2l,c
 15678  0037EE  0E03               	movlw	high _RF_DataTiming
 15679  0037F0  20F4               	addwfc	prodh,w,c
 15680  0037F2  6EDA               	movwf	fsr2h,c
 15681  0037F4  0E00               	movlw	0
 15682  0037F6  6EDE               	movwf	postinc2,c
 15683  0037F8  0E00               	movlw	0
 15684  0037FA  6EDD               	movwf	postdec2,c
 15685                           
 15686                           ; BSR set to: 0
 15687  0037FC  0100               	movlb	0	; () banked
 15688  0037FE  2BAB               	incf	RF_CheckCode@i& (0+255),f,b
 15689  003800                     i2l6810:
 15690                           
 15691                           ; BSR set to: 0
 15692  003800  0E7F               	movlw	127
 15693  003802  0100               	movlb	0	; () banked
 15694  003804  65AB               	cpfsgt	RF_CheckCode@i& (0+255),b
 15695  003806  D7ED               	goto	i2l6806
 15696  003808                     i2l444:
 15697                           
 15698                           ; BSR set to: 0
 15699                           ;RF.c: 316: }
 15700                           ;RF.c: 319: RF_CodeSize = RF_DataPlace;
 15701  003808  C0CB  F0C9         	movff	_RF_DataPlace,_RF_CodeSize
 15702                           
 15703                           ; BSR set to: 0
 15704                           ;RF.c: 320: RF_Saved = 90;
 15705  00380C  0E5A               	movlw	90
 15706  00380E  0100               	movlb	0	; () banked
 15707  003810  6FD1               	movwf	_RF_Saved& (0+255),b
 15708                           
 15709                           ; BSR set to: 0
 15710                           ;RF.c: 321: Flash_Status = FSH_Write_IR_RF();
 15711  003812  EC22  F014         	call	i2_FSH_Write_IR_RF	;wreg free
 15712  003816  0100               	movlb	0	; () banked
 15713  003818  6FC5               	movwf	_Flash_Status& (0+255),b
 15714  00381A  D000               	goto	i2l6816
 15715  00381C                     i2l6816:
 15716                           
 15717                           ; BSR set to: 0
 15718                           ;RF.c: 322: }
 15719                           ;RF.c: 323: return 0;
 15720  00381C  0E00               	movlw	0
 15721                           
 15722                           ; BSR set to: 0
 15723  00381E  0012               	return	
 15724                           
 15725                           ; BSR set to: 0
 15726                           
 15727                           ; BSR set to: 0
 15728  003820  0012               	return		;funcret
 15729  003822                     __end_of_RF_CheckCode:
 15730                           	opt stack 0
 15731                           pclatu	equ	0xFFB
 15732                           pclath	equ	0xFFA
 15733                           tblptru	equ	0xFF8
 15734                           tblptrh	equ	0xFF7
 15735                           tblptrl	equ	0xFF6
 15736                           tablat	equ	0xFF5
 15737                           prodh	equ	0xFF4
 15738                           prodl	equ	0xFF3
 15739                           intcon	equ	0xFF2
 15740                           intcon2	equ	0xFF1
 15741                           intcon3	equ	0xFF0
 15742                           postinc0	equ	0xFEE
 15743                           fsr0h	equ	0xFEA
 15744                           fsr0l	equ	0xFE9
 15745                           wreg	equ	0xFE8
 15746                           postdec1	equ	0xFE5
 15747                           fsr1h	equ	0xFE2
 15748                           fsr1l	equ	0xFE1
 15749                           bsr	equ	0xFE0
 15750                           postinc2	equ	0xFDE
 15751                           postdec2	equ	0xFDD
 15752                           plusw2	equ	0xFDB
 15753                           fsr2h	equ	0xFDA
 15754                           fsr2l	equ	0xFD9
 15755                           status	equ	0xFD8
 15756                           
 15757 ;; *************** function i2___lwtoft *****************
 15758 ;; Defined at:
 15759 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
 15760 ;; Parameters:    Size  Location     Type
 15761 ;;  c               2    8[BANK0 ] unsigned int 
 15762 ;; Auto vars:     Size  Location     Type
 15763 ;;		None
 15764 ;; Return value:  Size  Location     Type
 15765 ;;                  3    8[BANK0 ] float 
 15766 ;; Registers used:
 15767 ;;		wreg, status,2, status,0, cstack
 15768 ;; Tracked objects:
 15769 ;;		On entry : 0/0
 15770 ;;		On exit  : 0/0
 15771 ;;		Unchanged: 0/0
 15772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15773 ;;      Params:         0       3       0       0       0
 15774 ;;      Locals:         0       0       0       0       0
 15775 ;;      Temps:          0       0       0       0       0
 15776 ;;      Totals:         0       3       0       0       0
 15777 ;;Total ram usage:        3 bytes
 15778 ;; Hardware stack levels used:    1
 15779 ;; Hardware stack levels required when called:    1
 15780 ;; This function calls:
 15781 ;;		i2___ftpack
 15782 ;; This function is called by:
 15783 ;;		_RF_CheckCode
 15784 ;; This function uses a non-reentrant model
 15785 ;;
 15786                           
 15787                           	psect	text100
 15788  0017E2                     __ptext100:
 15789                           	opt stack 0
 15790  0017E2                     i2___lwtoft:
 15791                           	opt stack 15
 15792                           
 15793                           ; BSR set to: 0
 15794                           ;incstack = 0
 15795  0017E2  C088  F080         	movff	i2___lwtoft@c,i2___ftpack@arg
 15796  0017E6  C089  F081         	movff	i2___lwtoft@c+1,i2___ftpack@arg+1
 15797  0017EA  0100               	movlb	0	; () banked
 15798  0017EC  6B82               	clrf	(i2___ftpack@arg+2)& (0+255),b
 15799  0017EE  0E8E               	movlw	142
 15800  0017F0  0100               	movlb	0	; () banked
 15801  0017F2  6F83               	movwf	i2___ftpack@exp& (0+255),b
 15802  0017F4  0E00               	movlw	0
 15803  0017F6  0100               	movlb	0	; () banked
 15804  0017F8  6F84               	movwf	i2___ftpack@sign& (0+255),b
 15805  0017FA  ECDD  F001         	call	i2___ftpack	;wreg free
 15806  0017FE  C080  F088         	movff	?i2___ftpack,?i2___lwtoft
 15807  001802  C081  F089         	movff	?i2___ftpack+1,?i2___lwtoft+1
 15808  001806  C082  F08A         	movff	?i2___ftpack+2,?i2___lwtoft+2
 15809  00180A  0012               	return	
 15810  00180C  0012               	return		;funcret
 15811  00180E                     __end_ofi2___lwtoft:
 15812                           	opt stack 0
 15813                           pclatu	equ	0xFFB
 15814                           pclath	equ	0xFFA
 15815                           tblptru	equ	0xFF8
 15816                           tblptrh	equ	0xFF7
 15817                           tblptrl	equ	0xFF6
 15818                           tablat	equ	0xFF5
 15819                           prodh	equ	0xFF4
 15820                           prodl	equ	0xFF3
 15821                           intcon	equ	0xFF2
 15822                           intcon2	equ	0xFF1
 15823                           intcon3	equ	0xFF0
 15824                           postinc0	equ	0xFEE
 15825                           fsr0h	equ	0xFEA
 15826                           fsr0l	equ	0xFE9
 15827                           wreg	equ	0xFE8
 15828                           postdec1	equ	0xFE5
 15829                           fsr1h	equ	0xFE2
 15830                           fsr1l	equ	0xFE1
 15831                           bsr	equ	0xFE0
 15832                           postinc2	equ	0xFDE
 15833                           postdec2	equ	0xFDD
 15834                           plusw2	equ	0xFDB
 15835                           fsr2h	equ	0xFDA
 15836                           fsr2l	equ	0xFD9
 15837                           status	equ	0xFD8
 15838                           
 15839 ;; *************** function i2___ftmul *****************
 15840 ;; Defined at:
 15841 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 15842 ;; Parameters:    Size  Location     Type
 15843 ;;  f1              3   11[BANK0 ] float 
 15844 ;;  f2              3   14[BANK0 ] float 
 15845 ;; Auto vars:     Size  Location     Type
 15846 ;;  __ftmul         3   21[BANK0 ] unsigned um
 15847 ;;  __ftmul         1   25[BANK0 ] unsigned char 
 15848 ;;  __ftmul         1   24[BANK0 ] unsigned char 
 15849 ;;  __ftmul         1   20[BANK0 ] unsigned char 
 15850 ;; Return value:  Size  Location     Type
 15851 ;;                  3   11[BANK0 ] float 
 15852 ;; Registers used:
 15853 ;;		wreg, status,2, status,0, cstack
 15854 ;; Tracked objects:
 15855 ;;		On entry : 0/0
 15856 ;;		On exit  : 0/0
 15857 ;;		Unchanged: 0/0
 15858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15859 ;;      Params:         0       6       0       0       0
 15860 ;;      Locals:         0       6       0       0       0
 15861 ;;      Temps:          0       3       0       0       0
 15862 ;;      Totals:         0      15       0       0       0
 15863 ;;Total ram usage:       15 bytes
 15864 ;; Hardware stack levels used:    1
 15865 ;; Hardware stack levels required when called:    1
 15866 ;; This function calls:
 15867 ;;		i2___ftpack
 15868 ;; This function is called by:
 15869 ;;		_RF_CheckCode
 15870 ;; This function uses a non-reentrant model
 15871 ;;
 15872                           
 15873                           	psect	text101
 15874  003D20                     __ptext101:
 15875                           	opt stack 0
 15876  003D20                     i2___ftmul:
 15877                           	opt stack 15
 15878                           
 15879                           ;incstack = 0
 15880  003D20  C08D  F091         	movff	i2___ftmul@f1+2,??i2___ftmul
 15881  003D24  0100               	movlb	0	; () banked
 15882  003D26  6B92               	clrf	(??i2___ftmul+1)& (0+255),b
 15883  003D28  6B93               	clrf	(??i2___ftmul+2)& (0+255),b
 15884  003D2A  0100               	movlb	0	; () banked
 15885  003D2C  358C               	rlcf	(i2___ftmul@f1+1)& (0+255),w,b
 15886  003D2E  0100               	movlb	0	; () banked
 15887  003D30  3791               	rlcf	??i2___ftmul& (0+255),f,b
 15888  003D32  E301               	bnc	u706_41
 15889  003D34  8192               	bsf	(??i2___ftmul+1)& (0+255),0,b
 15890  003D36                     u706_41:
 15891  003D36  0100               	movlb	0	; () banked
 15892  003D38  5191               	movf	??i2___ftmul& (0+255),w,b
 15893  003D3A  0100               	movlb	0	; () banked
 15894  003D3C  6F94               	movwf	i2___ftmul@exp& (0+255),b
 15895  003D3E  0100               	movlb	0	; () banked
 15896  003D40  5194               	movf	i2___ftmul@exp& (0+255),w,b
 15897  003D42  A4D8               	btfss	status,2,c
 15898  003D44  D00A               	goto	i2l6570
 15899                           
 15900                           ; BSR set to: 0
 15901  003D46  0E00               	movlw	0
 15902  003D48  0100               	movlb	0	; () banked
 15903  003D4A  6F8B               	movwf	?i2___ftmul& (0+255),b
 15904  003D4C  0E00               	movlw	0
 15905  003D4E  0100               	movlb	0	; () banked
 15906  003D50  6F8C               	movwf	(?i2___ftmul+1)& (0+255),b
 15907  003D52  0E00               	movlw	0
 15908  003D54  0100               	movlb	0	; () banked
 15909  003D56  6F8D               	movwf	(?i2___ftmul+2)& (0+255),b
 15910                           
 15911                           ; BSR set to: 0
 15912  003D58  0012               	return	
 15913  003D5A                     i2l6570:
 15914                           
 15915                           ; BSR set to: 0
 15916  003D5A  C090  F091         	movff	i2___ftmul@f2+2,??i2___ftmul
 15917  003D5E  0100               	movlb	0	; () banked
 15918  003D60  6B92               	clrf	(??i2___ftmul+1)& (0+255),b
 15919  003D62  6B93               	clrf	(??i2___ftmul+2)& (0+255),b
 15920  003D64  0100               	movlb	0	; () banked
 15921  003D66  358F               	rlcf	(i2___ftmul@f2+1)& (0+255),w,b
 15922  003D68  0100               	movlb	0	; () banked
 15923  003D6A  3791               	rlcf	??i2___ftmul& (0+255),f,b
 15924  003D6C  E301               	bnc	u708_41
 15925  003D6E  8192               	bsf	(??i2___ftmul+1)& (0+255),0,b
 15926  003D70                     u708_41:
 15927  003D70  0100               	movlb	0	; () banked
 15928  003D72  5191               	movf	??i2___ftmul& (0+255),w,b
 15929  003D74  0100               	movlb	0	; () banked
 15930  003D76  6F99               	movwf	i2___ftmul@sign& (0+255),b
 15931  003D78  0100               	movlb	0	; () banked
 15932  003D7A  5199               	movf	i2___ftmul@sign& (0+255),w,b
 15933  003D7C  A4D8               	btfss	status,2,c
 15934  003D7E  D00A               	goto	i2l6576
 15935                           
 15936                           ; BSR set to: 0
 15937  003D80  0E00               	movlw	0
 15938  003D82  0100               	movlb	0	; () banked
 15939  003D84  6F8B               	movwf	?i2___ftmul& (0+255),b
 15940  003D86  0E00               	movlw	0
 15941  003D88  0100               	movlb	0	; () banked
 15942  003D8A  6F8C               	movwf	(?i2___ftmul+1)& (0+255),b
 15943  003D8C  0E00               	movlw	0
 15944  003D8E  0100               	movlb	0	; () banked
 15945  003D90  6F8D               	movwf	(?i2___ftmul+2)& (0+255),b
 15946                           
 15947                           ; BSR set to: 0
 15948  003D92  0012               	return	
 15949  003D94                     i2l6576:
 15950                           
 15951                           ; BSR set to: 0
 15952  003D94  0100               	movlb	0	; () banked
 15953  003D96  5199               	movf	i2___ftmul@sign& (0+255),w,b
 15954  003D98  0F7B               	addlw	123
 15955  003D9A  0100               	movlb	0	; () banked
 15956  003D9C  2794               	addwf	i2___ftmul@exp& (0+255),f,b
 15957                           
 15958                           ; BSR set to: 0
 15959  003D9E  C08D  F099         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 15960  003DA2  0100               	movlb	0	; () banked
 15961  003DA4  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 15962  003DA6  0100               	movlb	0	; () banked
 15963  003DA8  1B99               	xorwf	i2___ftmul@sign& (0+255),f,b
 15964  003DAA  0E80               	movlw	128
 15965  003DAC  0100               	movlb	0	; () banked
 15966  003DAE  1799               	andwf	i2___ftmul@sign& (0+255),f,b
 15967                           
 15968                           ; BSR set to: 0
 15969  003DB0  0100               	movlb	0	; () banked
 15970  003DB2  8F8C               	bsf	(i2___ftmul@f1+1)& (0+255),7,b
 15971                           
 15972                           ; BSR set to: 0
 15973  003DB4  0100               	movlb	0	; () banked
 15974  003DB6  8F8F               	bsf	(i2___ftmul@f2+1)& (0+255),7,b
 15975                           
 15976                           ; BSR set to: 0
 15977  003DB8  0EFF               	movlw	255
 15978  003DBA  0100               	movlb	0	; () banked
 15979  003DBC  178E               	andwf	i2___ftmul@f2& (0+255),f,b
 15980  003DBE  0EFF               	movlw	255
 15981  003DC0  0100               	movlb	0	; () banked
 15982  003DC2  178F               	andwf	(i2___ftmul@f2+1)& (0+255),f,b
 15983  003DC4  0E00               	movlw	0
 15984  003DC6  0100               	movlb	0	; () banked
 15985  003DC8  1790               	andwf	(i2___ftmul@f2+2)& (0+255),f,b
 15986                           
 15987                           ; BSR set to: 0
 15988  003DCA  0E00               	movlw	0
 15989  003DCC  0100               	movlb	0	; () banked
 15990  003DCE  6F95               	movwf	i2___ftmul@f3_as_product& (0+255),b
 15991  003DD0  0E00               	movlw	0
 15992  003DD2  0100               	movlb	0	; () banked
 15993  003DD4  6F96               	movwf	(i2___ftmul@f3_as_product+1)& (0+255),b
 15994  003DD6  0E00               	movlw	0
 15995  003DD8  0100               	movlb	0	; () banked
 15996  003DDA  6F97               	movwf	(i2___ftmul@f3_as_product+2)& (0+255),b
 15997                           
 15998                           ; BSR set to: 0
 15999  003DDC  0E07               	movlw	7
 16000  003DDE  0100               	movlb	0	; () banked
 16001  003DE0  6F98               	movwf	i2___ftmul@cntr& (0+255),b
 16002  003DE2  D000               	goto	i2l6590
 16003  003DE4                     i2l6590:
 16004                           
 16005                           ; BSR set to: 0
 16006  003DE4  0100               	movlb	0	; () banked
 16007  003DE6  A18B               	btfss	i2___ftmul@f1& (0+255),0,b
 16008  003DE8  D00D               	goto	i2l6594
 16009                           
 16010                           ; BSR set to: 0
 16011  003DEA  0100               	movlb	0	; () banked
 16012  003DEC  518E               	movf	i2___ftmul@f2& (0+255),w,b
 16013  003DEE  0100               	movlb	0	; () banked
 16014  003DF0  2795               	addwf	i2___ftmul@f3_as_product& (0+255),f,b
 16015  003DF2  0100               	movlb	0	; () banked
 16016  003DF4  518F               	movf	(i2___ftmul@f2+1)& (0+255),w,b
 16017  003DF6  0100               	movlb	0	; () banked
 16018  003DF8  2396               	addwfc	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16019  003DFA  0100               	movlb	0	; () banked
 16020  003DFC  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 16021  003DFE  0100               	movlb	0	; () banked
 16022  003E00  2397               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16023  003E02  D000               	goto	i2l6594
 16024  003E04                     i2l6594:
 16025                           
 16026                           ; BSR set to: 0
 16027  003E04  0100               	movlb	0	; () banked
 16028  003E06  90D8               	bcf	status,0,c
 16029  003E08  338D               	rrcf	(i2___ftmul@f1+2)& (0+255),f,b
 16030  003E0A  338C               	rrcf	(i2___ftmul@f1+1)& (0+255),f,b
 16031  003E0C  338B               	rrcf	i2___ftmul@f1& (0+255),f,b
 16032  003E0E  0100               	movlb	0	; () banked
 16033  003E10  90D8               	bcf	status,0,c
 16034  003E12  378E               	rlcf	i2___ftmul@f2& (0+255),f,b
 16035  003E14  378F               	rlcf	(i2___ftmul@f2+1)& (0+255),f,b
 16036  003E16  3790               	rlcf	(i2___ftmul@f2+2)& (0+255),f,b
 16037                           
 16038                           ; BSR set to: 0
 16039  003E18  0100               	movlb	0	; () banked
 16040  003E1A  2F98               	decfsz	i2___ftmul@cntr& (0+255),f,b
 16041  003E1C  D7E3               	goto	i2l6590
 16042  003E1E  D000               	goto	i2l6598
 16043  003E20                     i2l6598:
 16044                           
 16045                           ; BSR set to: 0
 16046  003E20  0E09               	movlw	9
 16047  003E22  0100               	movlb	0	; () banked
 16048  003E24  6F98               	movwf	i2___ftmul@cntr& (0+255),b
 16049  003E26  D000               	goto	i2l6600
 16050  003E28                     i2l6600:
 16051                           
 16052                           ; BSR set to: 0
 16053  003E28  0100               	movlb	0	; () banked
 16054  003E2A  A18B               	btfss	i2___ftmul@f1& (0+255),0,b
 16055  003E2C  D00D               	goto	i2l6604
 16056                           
 16057                           ; BSR set to: 0
 16058  003E2E  0100               	movlb	0	; () banked
 16059  003E30  518E               	movf	i2___ftmul@f2& (0+255),w,b
 16060  003E32  0100               	movlb	0	; () banked
 16061  003E34  2795               	addwf	i2___ftmul@f3_as_product& (0+255),f,b
 16062  003E36  0100               	movlb	0	; () banked
 16063  003E38  518F               	movf	(i2___ftmul@f2+1)& (0+255),w,b
 16064  003E3A  0100               	movlb	0	; () banked
 16065  003E3C  2396               	addwfc	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16066  003E3E  0100               	movlb	0	; () banked
 16067  003E40  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 16068  003E42  0100               	movlb	0	; () banked
 16069  003E44  2397               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16070  003E46  D000               	goto	i2l6604
 16071  003E48                     i2l6604:
 16072                           
 16073                           ; BSR set to: 0
 16074  003E48  0100               	movlb	0	; () banked
 16075  003E4A  90D8               	bcf	status,0,c
 16076  003E4C  338D               	rrcf	(i2___ftmul@f1+2)& (0+255),f,b
 16077  003E4E  338C               	rrcf	(i2___ftmul@f1+1)& (0+255),f,b
 16078  003E50  338B               	rrcf	i2___ftmul@f1& (0+255),f,b
 16079  003E52  0100               	movlb	0	; () banked
 16080  003E54  90D8               	bcf	status,0,c
 16081  003E56  3397               	rrcf	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16082  003E58  3396               	rrcf	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16083  003E5A  3395               	rrcf	i2___ftmul@f3_as_product& (0+255),f,b
 16084                           
 16085                           ; BSR set to: 0
 16086  003E5C  0100               	movlb	0	; () banked
 16087  003E5E  2F98               	decfsz	i2___ftmul@cntr& (0+255),f,b
 16088  003E60  D7E3               	goto	i2l6600
 16089  003E62  D000               	goto	i2l6608
 16090  003E64                     i2l6608:
 16091                           
 16092                           ; BSR set to: 0
 16093  003E64  C095  F080         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 16094  003E68  C096  F081         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 16095  003E6C  C097  F082         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 16096  003E70  C094  F083         	movff	i2___ftmul@exp,i2___ftpack@exp
 16097  003E74  C099  F084         	movff	i2___ftmul@sign,i2___ftpack@sign
 16098  003E78  ECDD  F001         	call	i2___ftpack	;wreg free
 16099  003E7C  C080  F08B         	movff	?i2___ftpack,?i2___ftmul
 16100  003E80  C081  F08C         	movff	?i2___ftpack+1,?i2___ftmul+1
 16101  003E84  C082  F08D         	movff	?i2___ftpack+2,?i2___ftmul+2
 16102  003E88  0012               	return	
 16103  003E8A  0012               	return		;funcret
 16104  003E8C                     __end_ofi2___ftmul:
 16105                           	opt stack 0
 16106                           pclatu	equ	0xFFB
 16107                           pclath	equ	0xFFA
 16108                           tblptru	equ	0xFF8
 16109                           tblptrh	equ	0xFF7
 16110                           tblptrl	equ	0xFF6
 16111                           tablat	equ	0xFF5
 16112                           prodh	equ	0xFF4
 16113                           prodl	equ	0xFF3
 16114                           intcon	equ	0xFF2
 16115                           intcon2	equ	0xFF1
 16116                           intcon3	equ	0xFF0
 16117                           postinc0	equ	0xFEE
 16118                           fsr0h	equ	0xFEA
 16119                           fsr0l	equ	0xFE9
 16120                           wreg	equ	0xFE8
 16121                           postdec1	equ	0xFE5
 16122                           fsr1h	equ	0xFE2
 16123                           fsr1l	equ	0xFE1
 16124                           bsr	equ	0xFE0
 16125                           postinc2	equ	0xFDE
 16126                           postdec2	equ	0xFDD
 16127                           plusw2	equ	0xFDB
 16128                           fsr2h	equ	0xFDA
 16129                           fsr2l	equ	0xFD9
 16130                           status	equ	0xFD8
 16131                           
 16132 ;; *************** function i2___ftpack *****************
 16133 ;; Defined at:
 16134 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 16135 ;; Parameters:    Size  Location     Type
 16136 ;;  arg             3    0[BANK0 ] unsigned um
 16137 ;;  exp             1    3[BANK0 ] unsigned char 
 16138 ;;  sign            1    4[BANK0 ] unsigned char 
 16139 ;; Auto vars:     Size  Location     Type
 16140 ;;		None
 16141 ;; Return value:  Size  Location     Type
 16142 ;;                  3    0[BANK0 ] float 
 16143 ;; Registers used:
 16144 ;;		wreg, status,2, status,0
 16145 ;; Tracked objects:
 16146 ;;		On entry : 0/0
 16147 ;;		On exit  : 0/0
 16148 ;;		Unchanged: 0/0
 16149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16150 ;;      Params:         0       5       0       0       0
 16151 ;;      Locals:         0       0       0       0       0
 16152 ;;      Temps:          0       3       0       0       0
 16153 ;;      Totals:         0       8       0       0       0
 16154 ;;Total ram usage:        8 bytes
 16155 ;; Hardware stack levels used:    1
 16156 ;; This function calls:
 16157 ;;		Nothing
 16158 ;; This function is called by:
 16159 ;;		i2___ftmul
 16160 ;;		i2___lwtoft
 16161 ;; This function uses a non-reentrant model
 16162 ;;
 16163                           
 16164                           	psect	text102
 16165  0003BA                     __ptext102:
 16166                           	opt stack 0
 16167  0003BA                     i2___ftpack:
 16168                           	opt stack 15
 16169                           
 16170                           ;incstack = 0
 16171  0003BA  0100               	movlb	0	; () banked
 16172  0003BC  5183               	movf	i2___ftpack@exp& (0+255),w,b
 16173  0003BE  0100               	movlb	0	; () banked
 16174  0003C0  B4D8               	btfsc	status,2,c
 16175  0003C2  D008               	goto	i2l5698
 16176                           
 16177                           ; BSR set to: 0
 16178  0003C4  0100               	movlb	0	; () banked
 16179  0003C6  5180               	movf	i2___ftpack@arg& (0+255),w,b
 16180  0003C8  0100               	movlb	0	; () banked
 16181  0003CA  1181               	iorwf	(i2___ftpack@arg+1)& (0+255),w,b
 16182  0003CC  0100               	movlb	0	; () banked
 16183  0003CE  1182               	iorwf	(i2___ftpack@arg+2)& (0+255),w,b
 16184  0003D0  A4D8               	btfss	status,2,c
 16185  0003D2  D013               	goto	i2l5704
 16186  0003D4                     i2l5698:
 16187                           
 16188                           ; BSR set to: 0
 16189  0003D4  0E00               	movlw	0
 16190  0003D6  0100               	movlb	0	; () banked
 16191  0003D8  6F80               	movwf	?i2___ftpack& (0+255),b
 16192  0003DA  0E00               	movlw	0
 16193  0003DC  0100               	movlb	0	; () banked
 16194  0003DE  6F81               	movwf	(?i2___ftpack+1)& (0+255),b
 16195  0003E0  0E00               	movlw	0
 16196  0003E2  0100               	movlb	0	; () banked
 16197  0003E4  6F82               	movwf	(?i2___ftpack+2)& (0+255),b
 16198                           
 16199                           ; BSR set to: 0
 16200  0003E6  0012               	return	
 16201                           
 16202                           ; BSR set to: 0
 16203  0003E8  D008               	goto	i2l5704
 16204  0003EA                     i2l5702:
 16205                           
 16206                           ; BSR set to: 0
 16207  0003EA  0100               	movlb	0	; () banked
 16208  0003EC  2B83               	incf	i2___ftpack@exp& (0+255),f,b
 16209  0003EE  0100               	movlb	0	; () banked
 16210  0003F0  90D8               	bcf	status,0,c
 16211  0003F2  3382               	rrcf	(i2___ftpack@arg+2)& (0+255),f,b
 16212  0003F4  3381               	rrcf	(i2___ftpack@arg+1)& (0+255),f,b
 16213  0003F6  3380               	rrcf	i2___ftpack@arg& (0+255),f,b
 16214  0003F8  D000               	goto	i2l5704
 16215  0003FA                     i2l5704:
 16216                           
 16217                           ; BSR set to: 0
 16218  0003FA  0E00               	movlw	0
 16219  0003FC  0100               	movlb	0	; () banked
 16220  0003FE  1580               	andwf	i2___ftpack@arg& (0+255),w,b
 16221  000400  0100               	movlb	0	; () banked
 16222  000402  6F85               	movwf	??i2___ftpack& (0+255),b
 16223  000404  0E00               	movlw	0
 16224  000406  0100               	movlb	0	; () banked
 16225  000408  1581               	andwf	(i2___ftpack@arg+1)& (0+255),w,b
 16226  00040A  0100               	movlb	0	; () banked
 16227  00040C  6F86               	movwf	(??i2___ftpack+1)& (0+255),b
 16228  00040E  0EFE               	movlw	254
 16229  000410  0100               	movlb	0	; () banked
 16230  000412  1582               	andwf	(i2___ftpack@arg+2)& (0+255),w,b
 16231  000414  0100               	movlb	0	; () banked
 16232  000416  6F87               	movwf	(??i2___ftpack+2)& (0+255),b
 16233  000418  0100               	movlb	0	; () banked
 16234  00041A  5185               	movf	??i2___ftpack& (0+255),w,b
 16235  00041C  0100               	movlb	0	; () banked
 16236  00041E  1186               	iorwf	(??i2___ftpack+1)& (0+255),w,b
 16237  000420  0100               	movlb	0	; () banked
 16238  000422  1187               	iorwf	(??i2___ftpack+2)& (0+255),w,b
 16239  000424  B4D8               	btfsc	status,2,c
 16240  000426  D013               	goto	i2l5710
 16241  000428  D7E0               	goto	i2l5702
 16242                           
 16243                           ; BSR set to: 0
 16244  00042A  D011               	goto	i2l5710
 16245  00042C                     i2l5706:
 16246                           
 16247                           ; BSR set to: 0
 16248  00042C  0100               	movlb	0	; () banked
 16249  00042E  2B83               	incf	i2___ftpack@exp& (0+255),f,b
 16250                           
 16251                           ; BSR set to: 0
 16252  000430  0E01               	movlw	1
 16253  000432  0100               	movlb	0	; () banked
 16254  000434  2780               	addwf	i2___ftpack@arg& (0+255),f,b
 16255  000436  0E00               	movlw	0
 16256  000438  0100               	movlb	0	; () banked
 16257  00043A  2381               	addwfc	(i2___ftpack@arg+1)& (0+255),f,b
 16258  00043C  0E00               	movlw	0
 16259  00043E  0100               	movlb	0	; () banked
 16260  000440  2382               	addwfc	(i2___ftpack@arg+2)& (0+255),f,b
 16261  000442  0100               	movlb	0	; () banked
 16262  000444  90D8               	bcf	status,0,c
 16263  000446  3382               	rrcf	(i2___ftpack@arg+2)& (0+255),f,b
 16264  000448  3381               	rrcf	(i2___ftpack@arg+1)& (0+255),f,b
 16265  00044A  3380               	rrcf	i2___ftpack@arg& (0+255),f,b
 16266  00044C  D000               	goto	i2l5710
 16267  00044E                     i2l5710:
 16268                           
 16269                           ; BSR set to: 0
 16270  00044E  0E00               	movlw	0
 16271  000450  0100               	movlb	0	; () banked
 16272  000452  1580               	andwf	i2___ftpack@arg& (0+255),w,b
 16273  000454  0100               	movlb	0	; () banked
 16274  000456  6F85               	movwf	??i2___ftpack& (0+255),b
 16275  000458  0E00               	movlw	0
 16276  00045A  0100               	movlb	0	; () banked
 16277  00045C  1581               	andwf	(i2___ftpack@arg+1)& (0+255),w,b
 16278  00045E  0100               	movlb	0	; () banked
 16279  000460  6F86               	movwf	(??i2___ftpack+1)& (0+255),b
 16280  000462  0EFF               	movlw	255
 16281  000464  0100               	movlb	0	; () banked
 16282  000466  1582               	andwf	(i2___ftpack@arg+2)& (0+255),w,b
 16283  000468  0100               	movlb	0	; () banked
 16284  00046A  6F87               	movwf	(??i2___ftpack+2)& (0+255),b
 16285  00046C  0100               	movlb	0	; () banked
 16286  00046E  5185               	movf	??i2___ftpack& (0+255),w,b
 16287  000470  0100               	movlb	0	; () banked
 16288  000472  1186               	iorwf	(??i2___ftpack+1)& (0+255),w,b
 16289  000474  0100               	movlb	0	; () banked
 16290  000476  1187               	iorwf	(??i2___ftpack+2)& (0+255),w,b
 16291  000478  B4D8               	btfsc	status,2,c
 16292  00047A  D00A               	goto	i2l5714
 16293  00047C  D7D7               	goto	i2l5706
 16294                           
 16295                           ; BSR set to: 0
 16296  00047E  D008               	goto	i2l5714
 16297  000480                     i2l5712:
 16298                           
 16299                           ; BSR set to: 0
 16300  000480  0100               	movlb	0	; () banked
 16301  000482  0783               	decf	i2___ftpack@exp& (0+255),f,b
 16302  000484  0100               	movlb	0	; () banked
 16303  000486  90D8               	bcf	status,0,c
 16304  000488  3780               	rlcf	i2___ftpack@arg& (0+255),f,b
 16305  00048A  3781               	rlcf	(i2___ftpack@arg+1)& (0+255),f,b
 16306  00048C  3782               	rlcf	(i2___ftpack@arg+2)& (0+255),f,b
 16307  00048E  D000               	goto	i2l5714
 16308  000490                     i2l5714:
 16309                           
 16310                           ; BSR set to: 0
 16311  000490  0100               	movlb	0	; () banked
 16312  000492  BF81               	btfsc	(i2___ftpack@arg+1)& (0+255),7,b
 16313  000494  D005               	goto	i2l1615
 16314                           
 16315                           ; BSR set to: 0
 16316  000496  0E02               	movlw	2
 16317  000498  0100               	movlb	0	; () banked
 16318  00049A  6183               	cpfslt	i2___ftpack@exp& (0+255),b
 16319  00049C  D7F1               	goto	i2l5712
 16320  00049E  D000               	goto	i2l1615
 16321  0004A0                     i2l1615:
 16322                           
 16323                           ; BSR set to: 0
 16324  0004A0  0100               	movlb	0	; () banked
 16325  0004A2  B183               	btfsc	i2___ftpack@exp& (0+255),0,b
 16326  0004A4  D003               	goto	i2l5720
 16327                           
 16328                           ; BSR set to: 0
 16329  0004A6  0100               	movlb	0	; () banked
 16330  0004A8  9F81               	bcf	(i2___ftpack@arg+1)& (0+255),7,b
 16331  0004AA  D000               	goto	i2l5720
 16332  0004AC                     i2l5720:
 16333                           
 16334                           ; BSR set to: 0
 16335  0004AC  0100               	movlb	0	; () banked
 16336  0004AE  90D8               	bcf	status,0,c
 16337  0004B0  3383               	rrcf	i2___ftpack@exp& (0+255),f,b
 16338  0004B2  0100               	movlb	0	; () banked
 16339  0004B4  5183               	movf	i2___ftpack@exp& (0+255),w,b
 16340  0004B6  0100               	movlb	0	; () banked
 16341  0004B8  1382               	iorwf	(i2___ftpack@arg+2)& (0+255),f,b
 16342                           
 16343                           ; BSR set to: 0
 16344  0004BA  0100               	movlb	0	; () banked
 16345  0004BC  5184               	movf	i2___ftpack@sign& (0+255),w,b
 16346  0004BE  0100               	movlb	0	; () banked
 16347  0004C0  B4D8               	btfsc	status,2,c
 16348  0004C2  D003               	goto	i2l5726
 16349                           
 16350                           ; BSR set to: 0
 16351  0004C4  0100               	movlb	0	; () banked
 16352  0004C6  8F82               	bsf	(i2___ftpack@arg+2)& (0+255),7,b
 16353  0004C8  D000               	goto	i2l5726
 16354  0004CA                     i2l5726:
 16355                           
 16356                           ; BSR set to: 0
 16357  0004CA  C080  F080         	movff	i2___ftpack@arg,?i2___ftpack
 16358  0004CE  C081  F081         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 16359  0004D2  C082  F082         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 16360  0004D6  0012               	return	
 16361                           
 16362                           ; BSR set to: 0
 16363                           
 16364                           ; BSR set to: 0
 16365  0004D8  0012               	return		;funcret
 16366  0004DA                     __end_ofi2___ftpack:
 16367                           	opt stack 0
 16368                           pclatu	equ	0xFFB
 16369                           pclath	equ	0xFFA
 16370                           tblptru	equ	0xFF8
 16371                           tblptrh	equ	0xFF7
 16372                           tblptrl	equ	0xFF6
 16373                           tablat	equ	0xFF5
 16374                           prodh	equ	0xFF4
 16375                           prodl	equ	0xFF3
 16376                           intcon	equ	0xFF2
 16377                           intcon2	equ	0xFF1
 16378                           intcon3	equ	0xFF0
 16379                           postinc0	equ	0xFEE
 16380                           fsr0h	equ	0xFEA
 16381                           fsr0l	equ	0xFE9
 16382                           wreg	equ	0xFE8
 16383                           postdec1	equ	0xFE5
 16384                           fsr1h	equ	0xFE2
 16385                           fsr1l	equ	0xFE1
 16386                           bsr	equ	0xFE0
 16387                           postinc2	equ	0xFDE
 16388                           postdec2	equ	0xFDD
 16389                           plusw2	equ	0xFDB
 16390                           fsr2h	equ	0xFDA
 16391                           fsr2l	equ	0xFD9
 16392                           status	equ	0xFD8
 16393                           
 16394 ;; *************** function i2___ftge *****************
 16395 ;; Defined at:
 16396 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 16397 ;; Parameters:    Size  Location     Type
 16398 ;;  ff1             3   11[BANK0 ] float 
 16399 ;;  ff2             3   14[BANK0 ] float 
 16400 ;; Auto vars:     Size  Location     Type
 16401 ;;		None
 16402 ;; Return value:  Size  Location     Type
 16403 ;;		None               void
 16404 ;; Registers used:
 16405 ;;		wreg, status,2, status,0
 16406 ;; Tracked objects:
 16407 ;;		On entry : 0/0
 16408 ;;		On exit  : 0/0
 16409 ;;		Unchanged: 0/0
 16410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16411 ;;      Params:         0       6       0       0       0
 16412 ;;      Locals:         0       0       0       0       0
 16413 ;;      Temps:          0       3       0       0       0
 16414 ;;      Totals:         0       9       0       0       0
 16415 ;;Total ram usage:        9 bytes
 16416 ;; Hardware stack levels used:    1
 16417 ;; This function calls:
 16418 ;;		Nothing
 16419 ;; This function is called by:
 16420 ;;		_RF_CheckCode
 16421 ;; This function uses a non-reentrant model
 16422 ;;
 16423                           
 16424                           	psect	text103
 16425  000A38                     __ptext103:
 16426                           	opt stack 0
 16427  000A38                     i2___ftge:
 16428                           	opt stack 16
 16429                           
 16430                           ; BSR set to: 0
 16431                           ;incstack = 0
 16432  000A38  0100               	movlb	0	; () banked
 16433  000A3A  AF8D               	btfss	(i2___ftge@ff1+2)& (0+255),7,b
 16434  000A3C  D01E               	goto	i2l6502
 16435                           
 16436                           ; BSR set to: 0
 16437  000A3E  C08B  F091         	movff	i2___ftge@ff1,??i2___ftge
 16438  000A42  C08C  F092         	movff	i2___ftge@ff1+1,??i2___ftge+1
 16439  000A46  C08D  F093         	movff	i2___ftge@ff1+2,??i2___ftge+2
 16440  000A4A  0100               	movlb	0	; () banked
 16441  000A4C  1F91               	comf	??i2___ftge& (0+255),f,b
 16442  000A4E  1F92               	comf	(??i2___ftge+1)& (0+255),f,b
 16443  000A50  1F93               	comf	(??i2___ftge+2)& (0+255),f,b
 16444  000A52  2B91               	incf	??i2___ftge& (0+255),f,b
 16445  000A54  0E00               	movlw	0
 16446  000A56  2392               	addwfc	(??i2___ftge+1)& (0+255),f,b
 16447  000A58  2393               	addwfc	(??i2___ftge+2)& (0+255),f,b
 16448  000A5A  0E00               	movlw	0
 16449  000A5C  0100               	movlb	0	; () banked
 16450  000A5E  2591               	addwf	??i2___ftge& (0+255),w,b
 16451  000A60  0100               	movlb	0	; () banked
 16452  000A62  6F8B               	movwf	i2___ftge@ff1& (0+255),b
 16453  000A64  0E00               	movlw	0
 16454  000A66  0100               	movlb	0	; () banked
 16455  000A68  2192               	addwfc	(??i2___ftge+1)& (0+255),w,b
 16456  000A6A  0100               	movlb	0	; () banked
 16457  000A6C  6F8C               	movwf	(i2___ftge@ff1+1)& (0+255),b
 16458  000A6E  0E80               	movlw	128
 16459  000A70  0100               	movlb	0	; () banked
 16460  000A72  2193               	addwfc	(??i2___ftge+2)& (0+255),w,b
 16461  000A74  0100               	movlb	0	; () banked
 16462  000A76  6F8D               	movwf	(i2___ftge@ff1+2)& (0+255),b
 16463  000A78  D000               	goto	i2l6502
 16464  000A7A                     i2l6502:
 16465                           
 16466                           ; BSR set to: 0
 16467  000A7A  0100               	movlb	0	; () banked
 16468  000A7C  AF90               	btfss	(i2___ftge@ff2+2)& (0+255),7,b
 16469  000A7E  D01E               	goto	i2l6506
 16470                           
 16471                           ; BSR set to: 0
 16472  000A80  C08E  F091         	movff	i2___ftge@ff2,??i2___ftge
 16473  000A84  C08F  F092         	movff	i2___ftge@ff2+1,??i2___ftge+1
 16474  000A88  C090  F093         	movff	i2___ftge@ff2+2,??i2___ftge+2
 16475  000A8C  0100               	movlb	0	; () banked
 16476  000A8E  1F91               	comf	??i2___ftge& (0+255),f,b
 16477  000A90  1F92               	comf	(??i2___ftge+1)& (0+255),f,b
 16478  000A92  1F93               	comf	(??i2___ftge+2)& (0+255),f,b
 16479  000A94  2B91               	incf	??i2___ftge& (0+255),f,b
 16480  000A96  0E00               	movlw	0
 16481  000A98  2392               	addwfc	(??i2___ftge+1)& (0+255),f,b
 16482  000A9A  2393               	addwfc	(??i2___ftge+2)& (0+255),f,b
 16483  000A9C  0E00               	movlw	0
 16484  000A9E  0100               	movlb	0	; () banked
 16485  000AA0  2591               	addwf	??i2___ftge& (0+255),w,b
 16486  000AA2  0100               	movlb	0	; () banked
 16487  000AA4  6F8E               	movwf	i2___ftge@ff2& (0+255),b
 16488  000AA6  0E00               	movlw	0
 16489  000AA8  0100               	movlb	0	; () banked
 16490  000AAA  2192               	addwfc	(??i2___ftge+1)& (0+255),w,b
 16491  000AAC  0100               	movlb	0	; () banked
 16492  000AAE  6F8F               	movwf	(i2___ftge@ff2+1)& (0+255),b
 16493  000AB0  0E80               	movlw	128
 16494  000AB2  0100               	movlb	0	; () banked
 16495  000AB4  2193               	addwfc	(??i2___ftge+2)& (0+255),w,b
 16496  000AB6  0100               	movlb	0	; () banked
 16497  000AB8  6F90               	movwf	(i2___ftge@ff2+2)& (0+255),b
 16498  000ABA  D000               	goto	i2l6506
 16499  000ABC                     i2l6506:
 16500                           
 16501                           ; BSR set to: 0
 16502  000ABC  0E00               	movlw	0
 16503  000ABE  0100               	movlb	0	; () banked
 16504  000AC0  1B8B               	xorwf	i2___ftge@ff1& (0+255),f,b
 16505  000AC2  0E00               	movlw	0
 16506  000AC4  0100               	movlb	0	; () banked
 16507  000AC6  1B8C               	xorwf	(i2___ftge@ff1+1)& (0+255),f,b
 16508  000AC8  0E80               	movlw	128
 16509  000ACA  0100               	movlb	0	; () banked
 16510  000ACC  1B8D               	xorwf	(i2___ftge@ff1+2)& (0+255),f,b
 16511                           
 16512                           ; BSR set to: 0
 16513  000ACE  0E00               	movlw	0
 16514  000AD0  0100               	movlb	0	; () banked
 16515  000AD2  1B8E               	xorwf	i2___ftge@ff2& (0+255),f,b
 16516  000AD4  0E00               	movlw	0
 16517  000AD6  0100               	movlb	0	; () banked
 16518  000AD8  1B8F               	xorwf	(i2___ftge@ff2+1)& (0+255),f,b
 16519  000ADA  0E80               	movlw	128
 16520  000ADC  0100               	movlb	0	; () banked
 16521  000ADE  1B90               	xorwf	(i2___ftge@ff2+2)& (0+255),f,b
 16522  000AE0  0100               	movlb	0	; () banked
 16523  000AE2  518E               	movf	i2___ftge@ff2& (0+255),w,b
 16524  000AE4  0100               	movlb	0	; () banked
 16525  000AE6  5D8B               	subwf	i2___ftge@ff1& (0+255),w,b
 16526  000AE8  0100               	movlb	0	; () banked
 16527  000AEA  518F               	movf	(i2___ftge@ff2+1)& (0+255),w,b
 16528  000AEC  0100               	movlb	0	; () banked
 16529  000AEE  598C               	subwfb	(i2___ftge@ff1+1)& (0+255),w,b
 16530  000AF0  0100               	movlb	0	; () banked
 16531  000AF2  5190               	movf	(i2___ftge@ff2+2)& (0+255),w,b
 16532  000AF4  0100               	movlb	0	; () banked
 16533  000AF6  598D               	subwfb	(i2___ftge@ff1+2)& (0+255),w,b
 16534  000AF8  B0D8               	btfsc	status,0,c
 16535  000AFA  D002               	goto	i2l6512
 16536                           
 16537                           ; BSR set to: 0
 16538  000AFC  90D8               	bcf	status,0,c
 16539  000AFE  0012               	return	
 16540  000B00                     i2l6512:
 16541                           
 16542                           ; BSR set to: 0
 16543  000B00  80D8               	bsf	status,0,c
 16544                           
 16545                           ; BSR set to: 0
 16546  000B02  0012               	return	
 16547                           
 16548                           ; BSR set to: 0
 16549                           
 16550                           ; BSR set to: 0
 16551  000B04  0012               	return		;funcret
 16552  000B06                     __end_ofi2___ftge:
 16553                           	opt stack 0
 16554                           pclatu	equ	0xFFB
 16555                           pclath	equ	0xFFA
 16556                           tblptru	equ	0xFF8
 16557                           tblptrh	equ	0xFF7
 16558                           tblptrl	equ	0xFF6
 16559                           tablat	equ	0xFF5
 16560                           prodh	equ	0xFF4
 16561                           prodl	equ	0xFF3
 16562                           intcon	equ	0xFF2
 16563                           intcon2	equ	0xFF1
 16564                           intcon3	equ	0xFF0
 16565                           postinc0	equ	0xFEE
 16566                           fsr0h	equ	0xFEA
 16567                           fsr0l	equ	0xFE9
 16568                           wreg	equ	0xFE8
 16569                           postdec1	equ	0xFE5
 16570                           fsr1h	equ	0xFE2
 16571                           fsr1l	equ	0xFE1
 16572                           bsr	equ	0xFE0
 16573                           postinc2	equ	0xFDE
 16574                           postdec2	equ	0xFDD
 16575                           plusw2	equ	0xFDB
 16576                           fsr2h	equ	0xFDA
 16577                           fsr2l	equ	0xFD9
 16578                           status	equ	0xFD8
 16579                           
 16580 ;; *************** function i2_FSH_Write_IR_RF *****************
 16581 ;; Defined at:
 16582 ;;		line 183 in file "FLASH.c"
 16583 ;; Parameters:    Size  Location     Type
 16584 ;;		None
 16585 ;; Auto vars:     Size  Location     Type
 16586 ;;  FSH_Write_IR    2   32[BANK0 ] unsigned int 
 16587 ;;  FSH_Write_IR    2   28[BANK0 ] unsigned int 
 16588 ;;  FSH_Write_IR    1   34[BANK0 ] unsigned char 
 16589 ;;  FSH_Write_IR    1   31[BANK0 ] unsigned char 
 16590 ;;  FSH_Write_IR    1   30[BANK0 ] unsigned char 
 16591 ;;  FSH_Write_IR    1   27[BANK0 ] unsigned char 
 16592 ;;  FSH_Write_IR    1   26[BANK0 ] unsigned char 
 16593 ;; Return value:  Size  Location     Type
 16594 ;;                  1    wreg      unsigned char 
 16595 ;; Registers used:
 16596 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16597 ;; Tracked objects:
 16598 ;;		On entry : 0/0
 16599 ;;		On exit  : 0/0
 16600 ;;		Unchanged: 0/0
 16601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16602 ;;      Params:         0       0       0       0       0
 16603 ;;      Locals:         0       9       0       0       0
 16604 ;;      Temps:          0       6       0       0       0
 16605 ;;      Totals:         0      15       0       0       0
 16606 ;;Total ram usage:       15 bytes
 16607 ;; Hardware stack levels used:    1
 16608 ;; Hardware stack levels required when called:    3
 16609 ;; This function calls:
 16610 ;;		i2_FSH_AddressToBlock
 16611 ;;		i2_FSH_EraseBlock
 16612 ;;		i2_FSH_Sequence
 16613 ;;		i2_FSH_VerifyWriteIntArray
 16614 ;;		i2_FSH_WriteIntArray
 16615 ;;		i2_IR_ResetData
 16616 ;;		i2_MSC_BufferCopyIntConst
 16617 ;;		i2_RF_ResetData
 16618 ;; This function is called by:
 16619 ;;		_RF_CheckCode
 16620 ;; This function uses a non-reentrant model
 16621 ;;
 16622                           
 16623                           	psect	text104
 16624  002844                     __ptext104:
 16625                           	opt stack 0
 16626  002844                     i2_FSH_Write_IR_RF:
 16627                           	opt stack 13
 16628                           
 16629                           ;FLASH.c: 185: unsigned int i;
 16630                           ;FLASH.c: 186: unsigned char j;
 16631                           ;FLASH.c: 187: unsigned char highint = INTCONbits.GIE;
 16632                           
 16633                           ; BSR set to: 0
 16634                           ;incstack = 0
 16635  002844  0E00               	movlw	0
 16636  002846  BEF2               	btfsc	intcon,7,c	;volatile
 16637  002848  0E01               	movlw	1
 16638  00284A  0100               	movlb	0	; () banked
 16639  00284C  6F9A               	movwf	i2FSH_Write_IR_RF@highint& (0+255),b
 16640                           
 16641                           ;FLASH.c: 188: unsigned char lowint = INTCONbits.PEIE;
 16642  00284E  0E00               	movlw	0
 16643  002850  BCF2               	btfsc	intcon,6,c	;volatile
 16644  002852  0E01               	movlw	1
 16645  002854  0100               	movlb	0	; () banked
 16646  002856  6F9B               	movwf	i2FSH_Write_IR_RF@lowint& (0+255),b
 16647                           
 16648                           ; BSR set to: 0
 16649                           ;FLASH.c: 189: unsigned char WriteTries;
 16650                           ;FLASH.c: 190: unsigned char status = 0;
 16651  002858  0E00               	movlw	0
 16652  00285A  0100               	movlb	0	; () banked
 16653  00285C  6F9F               	movwf	i2FSH_Write_IR_RF@status& (0+255),b
 16654                           
 16655                           ; BSR set to: 0
 16656                           ;FLASH.c: 191: unsigned int FlashWasteindex = 0;
 16657  00285E  0E00               	movlw	0
 16658  002860  0100               	movlb	0	; () banked
 16659  002862  6F9D               	movwf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),b
 16660  002864  0E00               	movlw	0
 16661  002866  6F9C               	movwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),b
 16662                           
 16663                           ; BSR set to: 0
 16664                           ;FLASH.c: 193: INTCONbits.GIE = 0;
 16665  002868  9EF2               	bcf	intcon,7,c	;volatile
 16666                           
 16667                           ; BSR set to: 0
 16668                           ;FLASH.c: 194: INTCONbits.PEIE = 0;
 16669  00286A  9CF2               	bcf	intcon,6,c	;volatile
 16670                           
 16671                           ; BSR set to: 0
 16672                           ;FLASH.c: 196: if(IR_Saved == 90 && RF_Saved == 90)
 16673  00286C  0E5A               	movlw	90
 16674  00286E  0100               	movlb	0	; () banked
 16675  002870  19D0               	xorwf	_IR_Saved& (0+255),w,b
 16676  002872  A4D8               	btfss	status,2,c
 16677  002874  D007               	goto	i2l6276
 16678                           
 16679                           ; BSR set to: 0
 16680  002876  0E5A               	movlw	90
 16681  002878  0100               	movlb	0	; () banked
 16682  00287A  19D1               	xorwf	_RF_Saved& (0+255),w,b
 16683  00287C  A4D8               	btfss	status,2,c
 16684  00287E  D002               	goto	i2l6276
 16685  002880  D00B               	goto	i2l6280
 16686                           
 16687                           ; BSR set to: 0
 16688                           ;FLASH.c: 202: }
 16689                           
 16690                           ;FLASH.c: 201: goto END;
 16691                           
 16692                           ;FLASH.c: 200: RF_Saved = 91;
 16693                           
 16694                           ; BSR set to: 0
 16695                           ;FLASH.c: 197: {
 16696                           ;FLASH.c: 199: IR_Saved = 91;
 16697  002882  D012               	goto	i2l6282
 16698  002884                     i2l6276:
 16699                           
 16700                           ; BSR set to: 0
 16701                           ;FLASH.c: 203: else if(IR_Saved != 90 && RF_Saved != 90)
 16702  002884  0E5A               	movlw	90
 16703  002886  0100               	movlb	0	; () banked
 16704  002888  19D0               	xorwf	_IR_Saved& (0+255),w,b
 16705  00288A  B4D8               	btfsc	status,2,c
 16706  00288C  D00D               	goto	i2l6282
 16707                           
 16708                           ; BSR set to: 0
 16709  00288E  0E5A               	movlw	90
 16710  002890  0100               	movlb	0	; () banked
 16711  002892  19D1               	xorwf	_RF_Saved& (0+255),w,b
 16712  002894  B4D8               	btfsc	status,2,c
 16713  002896  D008               	goto	i2l6282
 16714  002898                     i2l6280:
 16715                           
 16716                           ; BSR set to: 0
 16717                           ;FLASH.c: 204: {
 16718                           ;FLASH.c: 206: IR_Saved = 91;
 16719  002898  0E5B               	movlw	91
 16720  00289A  0100               	movlb	0	; () banked
 16721  00289C  6FD0               	movwf	_IR_Saved& (0+255),b
 16722                           
 16723                           ;FLASH.c: 207: RF_Saved = 91;
 16724  00289E  0E5B               	movlw	91
 16725  0028A0  0100               	movlb	0	; () banked
 16726  0028A2  6FD1               	movwf	_RF_Saved& (0+255),b
 16727                           
 16728                           ;FLASH.c: 208: goto END;
 16729  0028A4  D261               	goto	i2l1185
 16730                           
 16731                           ; BSR set to: 0
 16732  0028A6  D000               	goto	i2l6282
 16733  0028A8                     i2l6282:
 16734                           
 16735                           ; BSR set to: 0
 16736                           ;FLASH.c: 209: }
 16737                           ;FLASH.c: 211: if(IR_Saved == 90)
 16738  0028A8  0E5A               	movlw	90
 16739  0028AA  0100               	movlb	0	; () banked
 16740  0028AC  19D0               	xorwf	_IR_Saved& (0+255),w,b
 16741  0028AE  A4D8               	btfss	status,2,c
 16742  0028B0  D01E               	goto	i2l6288
 16743                           
 16744                           ; BSR set to: 0
 16745                           ;FLASH.c: 212: {
 16746                           ;FLASH.c: 214: RF_ResetData();
 16747  0028B2  EC8B  F00E         	call	i2_RF_ResetData	;wreg free
 16748                           
 16749                           ;FLASH.c: 215: MSC_BufferCopyIntConst(&RF_SavedTiming,&RF_DataTiming, 128, 0);
 16750  0028B6  0E00               	movlw	0
 16751  0028B8  0100               	movlb	0	; () banked
 16752  0028BA  6F86               	movwf	i2MSC_BufferCopyIntConst@from& (0+255),b
 16753  0028BC  0E25               	movlw	37
 16754  0028BE  0100               	movlb	0	; () banked
 16755  0028C0  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 16756  0028C2  0E00               	movlw	0
 16757  0028C4  0100               	movlb	0	; () banked
 16758  0028C6  6F88               	movwf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 16759  0028C8  0E00               	movlw	low _RF_DataTiming
 16760  0028CA  0100               	movlb	0	; () banked
 16761  0028CC  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 16762  0028CE  0E03               	movlw	high _RF_DataTiming
 16763  0028D0  0100               	movlb	0	; () banked
 16764  0028D2  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 16765  0028D4  0E00               	movlw	0
 16766  0028D6  0100               	movlb	0	; () banked
 16767  0028D8  6F8C               	movwf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 16768  0028DA  0E80               	movlw	128
 16769  0028DC  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 16770  0028DE  0E00               	movlw	0
 16771  0028E0  0100               	movlb	0	; () banked
 16772  0028E2  6F8E               	movwf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 16773  0028E4  0E00               	movlw	0
 16774  0028E6  6F8D               	movwf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 16775  0028E8  EC83  F005         	call	i2_MSC_BufferCopyIntConst	;wreg free
 16776                           
 16777                           ;FLASH.c: 216: }
 16778  0028EC  D01E               	goto	i2l6292
 16779  0028EE                     i2l6288:
 16780                           
 16781                           ;FLASH.c: 217: else
 16782                           ;FLASH.c: 218: {
 16783                           ;FLASH.c: 220: IR_ResetData();
 16784  0028EE  EC92  F00E         	call	i2_IR_ResetData	;wreg free
 16785                           
 16786                           ;FLASH.c: 221: MSC_BufferCopyIntConst(&IR_SavedTiming,&IR_DataTiming, 128, 0);
 16787  0028F2  0E00               	movlw	0
 16788  0028F4  0100               	movlb	0	; () banked
 16789  0028F6  6F86               	movwf	i2MSC_BufferCopyIntConst@from& (0+255),b
 16790  0028F8  0E24               	movlw	36
 16791  0028FA  0100               	movlb	0	; () banked
 16792  0028FC  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 16793  0028FE  0E00               	movlw	0
 16794  002900  0100               	movlb	0	; () banked
 16795  002902  6F88               	movwf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 16796  002904  0E00               	movlw	low _IR_DataTiming
 16797  002906  0100               	movlb	0	; () banked
 16798  002908  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 16799  00290A  0E02               	movlw	high _IR_DataTiming
 16800  00290C  0100               	movlb	0	; () banked
 16801  00290E  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 16802  002910  0E00               	movlw	0
 16803  002912  0100               	movlb	0	; () banked
 16804  002914  6F8C               	movwf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 16805  002916  0E80               	movlw	128
 16806  002918  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 16807  00291A  0E00               	movlw	0
 16808  00291C  0100               	movlb	0	; () banked
 16809  00291E  6F8E               	movwf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 16810  002920  0E00               	movlw	0
 16811  002922  6F8D               	movwf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 16812  002924  EC83  F005         	call	i2_MSC_BufferCopyIntConst	;wreg free
 16813  002928  D000               	goto	i2l6292
 16814  00292A                     i2l6292:
 16815                           
 16816                           ;FLASH.c: 222: }
 16817                           ;FLASH.c: 224: FSH_EraseBlock(&IR_SavedTiming);
 16818  00292A  0E00               	movlw	0
 16819  00292C  0100               	movlb	0	; () banked
 16820  00292E  6F8D               	movwf	i2FSH_EraseBlock@Address& (0+255),b
 16821  002930  0E24               	movlw	36
 16822  002932  6F8E               	movwf	(i2FSH_EraseBlock@Address+1)& (0+255),b
 16823  002934  0E00               	movlw	0
 16824  002936  6F8F               	movwf	(i2FSH_EraseBlock@Address+2)& (0+255),b
 16825  002938  0E00               	movlw	0
 16826  00293A  6F90               	movwf	(i2FSH_EraseBlock@Address+3)& (0+255),b
 16827  00293C  ECA0  F007         	call	i2_FSH_EraseBlock	;wreg free
 16828                           
 16829                           ;FLASH.c: 229: WriteTries = 1;
 16830  002940  0E01               	movlw	1
 16831  002942  0100               	movlb	0	; () banked
 16832  002944  6FA2               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16833  002946  D000               	goto	i2l6296
 16834  002948                     i2l6296:
 16835                           
 16836                           ; BSR set to: 0
 16837                           ;FLASH.c: 233: FSH_WriteIntArray(&IR_SavedTiming[0]);
 16838  002948  0E00               	movlw	0
 16839  00294A  0100               	movlb	0	; () banked
 16840  00294C  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 16841  00294E  0E24               	movlw	36
 16842  002950  0100               	movlb	0	; () banked
 16843  002952  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 16844  002954  0E00               	movlw	0
 16845  002956  0100               	movlb	0	; () banked
 16846  002958  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 16847  00295A  EC4D  F004         	call	i2_FSH_WriteIntArray	;wreg free
 16848                           
 16849                           ;FLASH.c: 236: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[0],&IR_DataTiming[0]))
 16850  00295E  0E00               	movlw	0
 16851  002960  0100               	movlb	0	; () banked
 16852  002962  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 16853  002964  0E24               	movlw	36
 16854  002966  0100               	movlb	0	; () banked
 16855  002968  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 16856  00296A  0E00               	movlw	0
 16857  00296C  0100               	movlb	0	; () banked
 16858  00296E  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 16859  002970  0E00               	movlw	low _IR_DataTiming
 16860  002972  0100               	movlb	0	; () banked
 16861  002974  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 16862  002976  0E02               	movlw	high _IR_DataTiming
 16863  002978  0100               	movlb	0	; () banked
 16864  00297A  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 16865  00297C  EC68  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 16866  002980  0900               	iorlw	0
 16867  002982  A4D8               	btfss	status,2,c
 16868  002984  D00A               	goto	i2l6308
 16869                           
 16870                           ;FLASH.c: 237: {
 16871                           ;FLASH.c: 238: WriteTries++;
 16872  002986  0100               	movlb	0	; () banked
 16873  002988  2BA2               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 16874                           
 16875                           ; BSR set to: 0
 16876                           ;FLASH.c: 239: if(WriteTries > 10)
 16877  00298A  0E0A               	movlw	10
 16878  00298C  0100               	movlb	0	; () banked
 16879  00298E  65A2               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16880  002990  D7DB               	goto	i2l6296
 16881  002992  D1D7               	goto	i2l6448
 16882                           
 16883                           ; BSR set to: 0
 16884                           ;FLASH.c: 243: }
 16885                           
 16886                           ;FLASH.c: 242: goto END;
 16887                           
 16888                           ; BSR set to: 0
 16889                           ;FLASH.c: 240: {
 16890                           ;FLASH.c: 241: status = 0;
 16891  002994  D002               	goto	i2l6308
 16892                           
 16893                           ; BSR set to: 0
 16894                           ;FLASH.c: 244: else
 16895                           ;FLASH.c: 245: {
 16896                           ;FLASH.c: 246: goto REDO1;
 16897  002996  D7D8               	goto	i2l6296
 16898                           
 16899                           ; BSR set to: 0
 16900  002998  D000               	goto	i2l6308
 16901  00299A                     i2l6308:
 16902                           
 16903                           ;FLASH.c: 247: }
 16904                           ;FLASH.c: 248: }
 16905                           ;FLASH.c: 251: WriteTries = 1;
 16906  00299A  0E01               	movlw	1
 16907  00299C  0100               	movlb	0	; () banked
 16908  00299E  6FA2               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16909  0029A0  D000               	goto	i2l6310
 16910  0029A2                     i2l6310:
 16911                           
 16912                           ; BSR set to: 0
 16913                           ;FLASH.c: 255: FSH_WriteIntArray(&IR_SavedTiming[32]);
 16914  0029A2  0E40               	movlw	64
 16915  0029A4  0100               	movlb	0	; () banked
 16916  0029A6  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 16917  0029A8  0E24               	movlw	36
 16918  0029AA  0100               	movlb	0	; () banked
 16919  0029AC  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 16920  0029AE  0E00               	movlw	0
 16921  0029B0  0100               	movlb	0	; () banked
 16922  0029B2  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 16923  0029B4  EC4D  F004         	call	i2_FSH_WriteIntArray	;wreg free
 16924                           
 16925                           ;FLASH.c: 258: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[32],&IR_DataTiming[32]))
 16926  0029B8  0E40               	movlw	64
 16927  0029BA  0100               	movlb	0	; () banked
 16928  0029BC  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 16929  0029BE  0E24               	movlw	36
 16930  0029C0  0100               	movlb	0	; () banked
 16931  0029C2  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 16932  0029C4  0E00               	movlw	0
 16933  0029C6  0100               	movlb	0	; () banked
 16934  0029C8  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 16935  0029CA  0E40               	movlw	low (_IR_DataTiming+64)
 16936  0029CC  0100               	movlb	0	; () banked
 16937  0029CE  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 16938  0029D0  0E02               	movlw	high (_IR_DataTiming+64)
 16939  0029D2  0100               	movlb	0	; () banked
 16940  0029D4  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 16941  0029D6  EC68  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 16942  0029DA  0900               	iorlw	0
 16943  0029DC  A4D8               	btfss	status,2,c
 16944  0029DE  D00A               	goto	i2l6322
 16945                           
 16946                           ;FLASH.c: 259: {
 16947                           ;FLASH.c: 260: WriteTries++;
 16948  0029E0  0100               	movlb	0	; () banked
 16949  0029E2  2BA2               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 16950                           
 16951                           ; BSR set to: 0
 16952                           ;FLASH.c: 261: if(WriteTries > 10)
 16953  0029E4  0E0A               	movlw	10
 16954  0029E6  0100               	movlb	0	; () banked
 16955  0029E8  65A2               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16956  0029EA  D7DB               	goto	i2l6310
 16957  0029EC  D1AA               	goto	i2l6448
 16958                           
 16959                           ; BSR set to: 0
 16960                           ;FLASH.c: 265: }
 16961                           
 16962                           ;FLASH.c: 264: goto END;
 16963                           
 16964                           ; BSR set to: 0
 16965                           ;FLASH.c: 262: {
 16966                           ;FLASH.c: 263: status = 0;
 16967  0029EE  D002               	goto	i2l6322
 16968                           
 16969                           ; BSR set to: 0
 16970                           ;FLASH.c: 266: else
 16971                           ;FLASH.c: 267: {
 16972                           ;FLASH.c: 268: goto REDO2;
 16973  0029F0  D7D8               	goto	i2l6310
 16974                           
 16975                           ; BSR set to: 0
 16976  0029F2  D000               	goto	i2l6322
 16977  0029F4                     i2l6322:
 16978                           
 16979                           ;FLASH.c: 269: }
 16980                           ;FLASH.c: 270: }
 16981                           ;FLASH.c: 273: WriteTries = 1;
 16982  0029F4  0E01               	movlw	1
 16983  0029F6  0100               	movlb	0	; () banked
 16984  0029F8  6FA2               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16985  0029FA  D000               	goto	i2l6324
 16986  0029FC                     i2l6324:
 16987                           
 16988                           ; BSR set to: 0
 16989                           ;FLASH.c: 277: FSH_WriteIntArray(&IR_SavedTiming[64]);
 16990  0029FC  0E80               	movlw	128
 16991  0029FE  0100               	movlb	0	; () banked
 16992  002A00  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 16993  002A02  0E24               	movlw	36
 16994  002A04  0100               	movlb	0	; () banked
 16995  002A06  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 16996  002A08  0E00               	movlw	0
 16997  002A0A  0100               	movlb	0	; () banked
 16998  002A0C  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 16999  002A0E  EC4D  F004         	call	i2_FSH_WriteIntArray	;wreg free
 17000                           
 17001                           ;FLASH.c: 280: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[64],&IR_DataTiming[64]))
 17002  002A12  0E80               	movlw	128
 17003  002A14  0100               	movlb	0	; () banked
 17004  002A16  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17005  002A18  0E24               	movlw	36
 17006  002A1A  0100               	movlb	0	; () banked
 17007  002A1C  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17008  002A1E  0E00               	movlw	0
 17009  002A20  0100               	movlb	0	; () banked
 17010  002A22  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17011  002A24  0E80               	movlw	low (_IR_DataTiming+128)
 17012  002A26  0100               	movlb	0	; () banked
 17013  002A28  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17014  002A2A  0E02               	movlw	high (_IR_DataTiming+128)
 17015  002A2C  0100               	movlb	0	; () banked
 17016  002A2E  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17017  002A30  EC68  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17018  002A34  0900               	iorlw	0
 17019  002A36  A4D8               	btfss	status,2,c
 17020  002A38  D00A               	goto	i2l6336
 17021                           
 17022                           ;FLASH.c: 281: {
 17023                           ;FLASH.c: 282: WriteTries++;
 17024  002A3A  0100               	movlb	0	; () banked
 17025  002A3C  2BA2               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17026                           
 17027                           ; BSR set to: 0
 17028                           ;FLASH.c: 283: if(WriteTries > 10)
 17029  002A3E  0E0A               	movlw	10
 17030  002A40  0100               	movlb	0	; () banked
 17031  002A42  65A2               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17032  002A44  D7DB               	goto	i2l6324
 17033  002A46  D17D               	goto	i2l6448
 17034                           
 17035                           ; BSR set to: 0
 17036                           ;FLASH.c: 287: }
 17037                           
 17038                           ;FLASH.c: 286: goto END;
 17039                           
 17040                           ; BSR set to: 0
 17041                           ;FLASH.c: 284: {
 17042                           ;FLASH.c: 285: status = 0;
 17043  002A48  D002               	goto	i2l6336
 17044                           
 17045                           ; BSR set to: 0
 17046                           ;FLASH.c: 288: else
 17047                           ;FLASH.c: 289: {
 17048                           ;FLASH.c: 290: goto REDO3;
 17049  002A4A  D7D8               	goto	i2l6324
 17050                           
 17051                           ; BSR set to: 0
 17052  002A4C  D000               	goto	i2l6336
 17053  002A4E                     i2l6336:
 17054                           
 17055                           ;FLASH.c: 291: }
 17056                           ;FLASH.c: 292: }
 17057                           ;FLASH.c: 295: WriteTries = 1;
 17058  002A4E  0E01               	movlw	1
 17059  002A50  0100               	movlb	0	; () banked
 17060  002A52  6FA2               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17061  002A54  D000               	goto	i2l6338
 17062  002A56                     i2l6338:
 17063                           
 17064                           ; BSR set to: 0
 17065                           ;FLASH.c: 299: FSH_WriteIntArray(&IR_SavedTiming[96]);
 17066  002A56  0EC0               	movlw	192
 17067  002A58  0100               	movlb	0	; () banked
 17068  002A5A  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17069  002A5C  0E24               	movlw	36
 17070  002A5E  0100               	movlb	0	; () banked
 17071  002A60  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17072  002A62  0E00               	movlw	0
 17073  002A64  0100               	movlb	0	; () banked
 17074  002A66  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 17075  002A68  EC4D  F004         	call	i2_FSH_WriteIntArray	;wreg free
 17076                           
 17077                           ;FLASH.c: 302: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[96],&IR_DataTiming[96]))
 17078  002A6C  0EC0               	movlw	192
 17079  002A6E  0100               	movlb	0	; () banked
 17080  002A70  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17081  002A72  0E24               	movlw	36
 17082  002A74  0100               	movlb	0	; () banked
 17083  002A76  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17084  002A78  0E00               	movlw	0
 17085  002A7A  0100               	movlb	0	; () banked
 17086  002A7C  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17087  002A7E  0EC0               	movlw	low (_IR_DataTiming+192)
 17088  002A80  0100               	movlb	0	; () banked
 17089  002A82  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17090  002A84  0E02               	movlw	high (_IR_DataTiming+192)
 17091  002A86  0100               	movlb	0	; () banked
 17092  002A88  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17093  002A8A  EC68  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17094  002A8E  0900               	iorlw	0
 17095  002A90  A4D8               	btfss	status,2,c
 17096  002A92  D00A               	goto	i2l6350
 17097                           
 17098                           ;FLASH.c: 303: {
 17099                           ;FLASH.c: 304: WriteTries++;
 17100  002A94  0100               	movlb	0	; () banked
 17101  002A96  2BA2               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17102                           
 17103                           ; BSR set to: 0
 17104                           ;FLASH.c: 305: if(WriteTries > 10)
 17105  002A98  0E0A               	movlw	10
 17106  002A9A  0100               	movlb	0	; () banked
 17107  002A9C  65A2               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17108  002A9E  D7DB               	goto	i2l6338
 17109  002AA0  D150               	goto	i2l6448
 17110                           
 17111                           ; BSR set to: 0
 17112                           ;FLASH.c: 309: }
 17113                           
 17114                           ;FLASH.c: 308: goto END;
 17115                           
 17116                           ; BSR set to: 0
 17117                           ;FLASH.c: 306: {
 17118                           ;FLASH.c: 307: status = 0;
 17119  002AA2  D002               	goto	i2l6350
 17120                           
 17121                           ; BSR set to: 0
 17122                           ;FLASH.c: 310: else
 17123                           ;FLASH.c: 311: {
 17124                           ;FLASH.c: 312: goto REDO4;
 17125  002AA4  D7D8               	goto	i2l6338
 17126                           
 17127                           ; BSR set to: 0
 17128  002AA6  D000               	goto	i2l6350
 17129  002AA8                     i2l6350:
 17130                           
 17131                           ;FLASH.c: 313: }
 17132                           ;FLASH.c: 314: }
 17133                           ;FLASH.c: 317: WriteTries = 1;
 17134  002AA8  0E01               	movlw	1
 17135  002AAA  0100               	movlb	0	; () banked
 17136  002AAC  6FA2               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17137  002AAE  D000               	goto	i2l6352
 17138  002AB0                     i2l6352:
 17139                           
 17140                           ; BSR set to: 0
 17141                           ;FLASH.c: 321: FSH_WriteIntArray(&RF_SavedTiming[0]);
 17142  002AB0  0E00               	movlw	0
 17143  002AB2  0100               	movlb	0	; () banked
 17144  002AB4  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17145  002AB6  0E25               	movlw	37
 17146  002AB8  0100               	movlb	0	; () banked
 17147  002ABA  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17148  002ABC  0E00               	movlw	0
 17149  002ABE  0100               	movlb	0	; () banked
 17150  002AC0  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 17151  002AC2  EC4D  F004         	call	i2_FSH_WriteIntArray	;wreg free
 17152                           
 17153                           ;FLASH.c: 324: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]))
 17154  002AC6  0E00               	movlw	0
 17155  002AC8  0100               	movlb	0	; () banked
 17156  002ACA  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17157  002ACC  0E25               	movlw	37
 17158  002ACE  0100               	movlb	0	; () banked
 17159  002AD0  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17160  002AD2  0E00               	movlw	0
 17161  002AD4  0100               	movlb	0	; () banked
 17162  002AD6  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17163  002AD8  0E00               	movlw	low _RF_DataTiming
 17164  002ADA  0100               	movlb	0	; () banked
 17165  002ADC  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17166  002ADE  0E03               	movlw	high _RF_DataTiming
 17167  002AE0  0100               	movlb	0	; () banked
 17168  002AE2  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17169  002AE4  EC68  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17170  002AE8  0900               	iorlw	0
 17171  002AEA  A4D8               	btfss	status,2,c
 17172  002AEC  D00A               	goto	i2l6364
 17173                           
 17174                           ;FLASH.c: 325: {
 17175                           ;FLASH.c: 326: WriteTries++;
 17176  002AEE  0100               	movlb	0	; () banked
 17177  002AF0  2BA2               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17178                           
 17179                           ; BSR set to: 0
 17180                           ;FLASH.c: 327: if(WriteTries > 10)
 17181  002AF2  0E0A               	movlw	10
 17182  002AF4  0100               	movlb	0	; () banked
 17183  002AF6  65A2               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17184  002AF8  D7DB               	goto	i2l6352
 17185  002AFA  D123               	goto	i2l6448
 17186                           
 17187                           ; BSR set to: 0
 17188                           ;FLASH.c: 331: }
 17189                           
 17190                           ;FLASH.c: 330: goto END;
 17191                           
 17192                           ; BSR set to: 0
 17193                           ;FLASH.c: 328: {
 17194                           ;FLASH.c: 329: status = 0;
 17195  002AFC  D002               	goto	i2l6364
 17196                           
 17197                           ; BSR set to: 0
 17198                           ;FLASH.c: 332: else
 17199                           ;FLASH.c: 333: {
 17200                           ;FLASH.c: 334: goto REDO5;
 17201  002AFE  D7D8               	goto	i2l6352
 17202                           
 17203                           ; BSR set to: 0
 17204  002B00  D000               	goto	i2l6364
 17205  002B02                     i2l6364:
 17206                           
 17207                           ;FLASH.c: 335: }
 17208                           ;FLASH.c: 336: }
 17209                           ;FLASH.c: 339: WriteTries = 1;
 17210  002B02  0E01               	movlw	1
 17211  002B04  0100               	movlb	0	; () banked
 17212  002B06  6FA2               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17213  002B08  D000               	goto	i2l6366
 17214  002B0A                     i2l6366:
 17215                           
 17216                           ; BSR set to: 0
 17217                           ;FLASH.c: 343: FSH_WriteIntArray(&RF_SavedTiming[32]);
 17218  002B0A  0E40               	movlw	64
 17219  002B0C  0100               	movlb	0	; () banked
 17220  002B0E  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17221  002B10  0E25               	movlw	37
 17222  002B12  0100               	movlb	0	; () banked
 17223  002B14  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17224  002B16  0E00               	movlw	0
 17225  002B18  0100               	movlb	0	; () banked
 17226  002B1A  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 17227  002B1C  EC4D  F004         	call	i2_FSH_WriteIntArray	;wreg free
 17228                           
 17229                           ;FLASH.c: 346: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]))
 17230  002B20  0E40               	movlw	64
 17231  002B22  0100               	movlb	0	; () banked
 17232  002B24  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17233  002B26  0E25               	movlw	37
 17234  002B28  0100               	movlb	0	; () banked
 17235  002B2A  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17236  002B2C  0E00               	movlw	0
 17237  002B2E  0100               	movlb	0	; () banked
 17238  002B30  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17239  002B32  0E40               	movlw	low (_RF_DataTiming+64)
 17240  002B34  0100               	movlb	0	; () banked
 17241  002B36  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17242  002B38  0E03               	movlw	high (_RF_DataTiming+64)
 17243  002B3A  0100               	movlb	0	; () banked
 17244  002B3C  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17245  002B3E  EC68  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17246  002B42  0900               	iorlw	0
 17247  002B44  A4D8               	btfss	status,2,c
 17248  002B46  D00A               	goto	i2l6378
 17249                           
 17250                           ;FLASH.c: 347: {
 17251                           ;FLASH.c: 348: WriteTries++;
 17252  002B48  0100               	movlb	0	; () banked
 17253  002B4A  2BA2               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17254                           
 17255                           ; BSR set to: 0
 17256                           ;FLASH.c: 349: if(WriteTries > 10)
 17257  002B4C  0E0A               	movlw	10
 17258  002B4E  0100               	movlb	0	; () banked
 17259  002B50  65A2               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17260  002B52  D7DB               	goto	i2l6366
 17261  002B54  D0F6               	goto	i2l6448
 17262                           
 17263                           ; BSR set to: 0
 17264                           ;FLASH.c: 353: }
 17265                           
 17266                           ;FLASH.c: 352: goto END;
 17267                           
 17268                           ; BSR set to: 0
 17269                           ;FLASH.c: 350: {
 17270                           ;FLASH.c: 351: status = 0;
 17271  002B56  D002               	goto	i2l6378
 17272                           
 17273                           ; BSR set to: 0
 17274                           ;FLASH.c: 354: else
 17275                           ;FLASH.c: 355: {
 17276                           ;FLASH.c: 356: goto REDO6;
 17277  002B58  D7D8               	goto	i2l6366
 17278                           
 17279                           ; BSR set to: 0
 17280  002B5A  D000               	goto	i2l6378
 17281  002B5C                     i2l6378:
 17282                           
 17283                           ;FLASH.c: 357: }
 17284                           ;FLASH.c: 358: }
 17285                           ;FLASH.c: 361: WriteTries = 1;
 17286  002B5C  0E01               	movlw	1
 17287  002B5E  0100               	movlb	0	; () banked
 17288  002B60  6FA2               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17289  002B62  D000               	goto	i2l6380
 17290  002B64                     i2l6380:
 17291                           
 17292                           ; BSR set to: 0
 17293                           ;FLASH.c: 365: FSH_WriteIntArray(&RF_SavedTiming[64]);
 17294  002B64  0E80               	movlw	128
 17295  002B66  0100               	movlb	0	; () banked
 17296  002B68  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17297  002B6A  0E25               	movlw	37
 17298  002B6C  0100               	movlb	0	; () banked
 17299  002B6E  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17300  002B70  0E00               	movlw	0
 17301  002B72  0100               	movlb	0	; () banked
 17302  002B74  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 17303  002B76  EC4D  F004         	call	i2_FSH_WriteIntArray	;wreg free
 17304                           
 17305                           ;FLASH.c: 368: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[64],&RF_DataTiming[64]))
 17306  002B7A  0E80               	movlw	128
 17307  002B7C  0100               	movlb	0	; () banked
 17308  002B7E  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17309  002B80  0E25               	movlw	37
 17310  002B82  0100               	movlb	0	; () banked
 17311  002B84  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17312  002B86  0E00               	movlw	0
 17313  002B88  0100               	movlb	0	; () banked
 17314  002B8A  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17315  002B8C  0E80               	movlw	low (_RF_DataTiming+128)
 17316  002B8E  0100               	movlb	0	; () banked
 17317  002B90  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17318  002B92  0E03               	movlw	high (_RF_DataTiming+128)
 17319  002B94  0100               	movlb	0	; () banked
 17320  002B96  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17321  002B98  EC68  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17322  002B9C  0900               	iorlw	0
 17323  002B9E  A4D8               	btfss	status,2,c
 17324  002BA0  D00A               	goto	i2l6392
 17325                           
 17326                           ;FLASH.c: 369: {
 17327                           ;FLASH.c: 370: WriteTries++;
 17328  002BA2  0100               	movlb	0	; () banked
 17329  002BA4  2BA2               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17330                           
 17331                           ; BSR set to: 0
 17332                           ;FLASH.c: 371: if(WriteTries > 10)
 17333  002BA6  0E0A               	movlw	10
 17334  002BA8  0100               	movlb	0	; () banked
 17335  002BAA  65A2               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17336  002BAC  D7DB               	goto	i2l6380
 17337  002BAE  D0C9               	goto	i2l6448
 17338                           
 17339                           ; BSR set to: 0
 17340                           ;FLASH.c: 375: }
 17341                           
 17342                           ;FLASH.c: 374: goto END;
 17343                           
 17344                           ; BSR set to: 0
 17345                           ;FLASH.c: 372: {
 17346                           ;FLASH.c: 373: status = 0;
 17347  002BB0  D002               	goto	i2l6392
 17348                           
 17349                           ; BSR set to: 0
 17350                           ;FLASH.c: 376: else
 17351                           ;FLASH.c: 377: {
 17352                           ;FLASH.c: 378: goto REDO7;
 17353  002BB2  D7D8               	goto	i2l6380
 17354                           
 17355                           ; BSR set to: 0
 17356  002BB4  D000               	goto	i2l6392
 17357  002BB6                     i2l6392:
 17358                           
 17359                           ;FLASH.c: 379: }
 17360                           ;FLASH.c: 380: }
 17361                           ;FLASH.c: 383: WriteTries = 1;
 17362  002BB6  0E01               	movlw	1
 17363  002BB8  0100               	movlb	0	; () banked
 17364  002BBA  6FA2               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17365  002BBC  D000               	goto	i2l6394
 17366  002BBE                     i2l6394:
 17367                           
 17368                           ; BSR set to: 0
 17369                           ;FLASH.c: 387: FSH_WriteIntArray(&RF_SavedTiming[96]);
 17370  002BBE  0EC0               	movlw	192
 17371  002BC0  0100               	movlb	0	; () banked
 17372  002BC2  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17373  002BC4  0E25               	movlw	37
 17374  002BC6  0100               	movlb	0	; () banked
 17375  002BC8  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17376  002BCA  0E00               	movlw	0
 17377  002BCC  0100               	movlb	0	; () banked
 17378  002BCE  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 17379  002BD0  EC4D  F004         	call	i2_FSH_WriteIntArray	;wreg free
 17380                           
 17381                           ;FLASH.c: 390: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[96],&RF_DataTiming[96]))
 17382  002BD4  0EC0               	movlw	192
 17383  002BD6  0100               	movlb	0	; () banked
 17384  002BD8  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17385  002BDA  0E25               	movlw	37
 17386  002BDC  0100               	movlb	0	; () banked
 17387  002BDE  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17388  002BE0  0E00               	movlw	0
 17389  002BE2  0100               	movlb	0	; () banked
 17390  002BE4  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17391  002BE6  0EC0               	movlw	low (_RF_DataTiming+192)
 17392  002BE8  0100               	movlb	0	; () banked
 17393  002BEA  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17394  002BEC  0E03               	movlw	high (_RF_DataTiming+192)
 17395  002BEE  0100               	movlb	0	; () banked
 17396  002BF0  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17397  002BF2  EC68  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17398  002BF6  0900               	iorlw	0
 17399  002BF8  A4D8               	btfss	status,2,c
 17400  002BFA  D00A               	goto	i2l6406
 17401                           
 17402                           ;FLASH.c: 391: {
 17403                           ;FLASH.c: 392: WriteTries++;
 17404  002BFC  0100               	movlb	0	; () banked
 17405  002BFE  2BA2               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17406                           
 17407                           ; BSR set to: 0
 17408                           ;FLASH.c: 393: if(WriteTries > 10)
 17409  002C00  0E0A               	movlw	10
 17410  002C02  0100               	movlb	0	; () banked
 17411  002C04  65A2               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17412  002C06  D7DB               	goto	i2l6394
 17413  002C08  D09C               	goto	i2l6448
 17414                           
 17415                           ; BSR set to: 0
 17416                           ;FLASH.c: 397: }
 17417                           
 17418                           ;FLASH.c: 396: goto END;
 17419                           
 17420                           ; BSR set to: 0
 17421                           ;FLASH.c: 394: {
 17422                           ;FLASH.c: 395: status = 0;
 17423  002C0A  D002               	goto	i2l6406
 17424                           
 17425                           ; BSR set to: 0
 17426                           ;FLASH.c: 398: else
 17427                           ;FLASH.c: 399: {
 17428                           ;FLASH.c: 400: goto REDO8;
 17429  002C0C  D7D8               	goto	i2l6394
 17430                           
 17431                           ; BSR set to: 0
 17432  002C0E  D000               	goto	i2l6406
 17433  002C10                     i2l6406:
 17434                           
 17435                           ;FLASH.c: 401: }
 17436                           ;FLASH.c: 402: }
 17437                           ;FLASH.c: 405: for(j=8;j<16;j++)
 17438  002C10  0E08               	movlw	8
 17439  002C12  0100               	movlb	0	; () banked
 17440  002C14  6F9E               	movwf	i2FSH_Write_IR_RF@j& (0+255),b
 17441  002C16                     i2l6408:
 17442                           
 17443                           ; BSR set to: 0
 17444  002C16  0E0F               	movlw	15
 17445  002C18  0100               	movlb	0	; () banked
 17446  002C1A  659E               	cpfsgt	i2FSH_Write_IR_RF@j& (0+255),b
 17447  002C1C  D001               	goto	i2l6412
 17448                           
 17449                           ; BSR set to: 0
 17450  002C1E  D0A1               	goto	i2l6460
 17451  002C20                     i2l6412:
 17452                           
 17453                           ; BSR set to: 0
 17454                           ;FLASH.c: 406: {
 17455                           ;FLASH.c: 407: WriteTries = 1;
 17456  002C20  0E01               	movlw	1
 17457  002C22  0100               	movlb	0	; () banked
 17458  002C24  6FA2               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17459  002C26                     i2l1224:
 17460                           
 17461                           ; BSR set to: 0
 17462                           ;FLASH.c: 410: i=0;
 17463  002C26  0E00               	movlw	0
 17464  002C28  0100               	movlb	0	; () banked
 17465  002C2A  6FA1               	movwf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 17466  002C2C  0E00               	movlw	0
 17467  002C2E  6FA0               	movwf	i2FSH_Write_IR_RF@i& (0+255),b
 17468                           
 17469                           ; BSR set to: 0
 17470                           ;FLASH.c: 411: FlashWasteindex = i + 64*(j-8);
 17471  002C30  0100               	movlb	0	; () banked
 17472  002C32  519E               	movf	i2FSH_Write_IR_RF@j& (0+255),w,b
 17473  002C34  0100               	movlb	0	; () banked
 17474  002C36  6F94               	movwf	??i2_FSH_Write_IR_RF& (0+255),b
 17475  002C38  6B95               	clrf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 17476  002C3A  0E06               	movlw	6
 17477  002C3C                     i2u683_45:
 17478  002C3C  90D8               	bcf	status,0,c
 17479  002C3E  0100               	movlb	0	; () banked
 17480  002C40  3794               	rlcf	??i2_FSH_Write_IR_RF& (0+255),f,b
 17481  002C42  3795               	rlcf	(??i2_FSH_Write_IR_RF+1)& (0+255),f,b
 17482  002C44  2EE8               	decfsz	wreg,f,c
 17483  002C46  D7FA               	goto	i2u683_45
 17484  002C48  0100               	movlb	0	; () banked
 17485  002C4A  51A0               	movf	i2FSH_Write_IR_RF@i& (0+255),w,b
 17486  002C4C  0100               	movlb	0	; () banked
 17487  002C4E  2794               	addwf	??i2_FSH_Write_IR_RF& (0+255),f,b
 17488  002C50  0100               	movlb	0	; () banked
 17489  002C52  51A1               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17490  002C54  0100               	movlb	0	; () banked
 17491  002C56  2395               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),f,b
 17492  002C58  0E00               	movlw	0
 17493  002C5A  0100               	movlb	0	; () banked
 17494  002C5C  2594               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 17495  002C5E  0100               	movlb	0	; () banked
 17496  002C60  6F9C               	movwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),b
 17497  002C62  0EFE               	movlw	254
 17498  002C64  0100               	movlb	0	; () banked
 17499  002C66  2195               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 17500  002C68  0100               	movlb	0	; () banked
 17501  002C6A  6F9D               	movwf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),b
 17502                           
 17503                           ; BSR set to: 0
 17504                           ;FLASH.c: 412: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 17505  002C6C  0E00               	movlw	0
 17506  002C6E  0100               	movlb	0	; () banked
 17507  002C70  6F94               	movwf	??i2_FSH_Write_IR_RF& (0+255),b
 17508  002C72  0E26               	movlw	38
 17509  002C74  6F95               	movwf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 17510  002C76  0E00               	movlw	0
 17511  002C78  6F96               	movwf	(??i2_FSH_Write_IR_RF+2)& (0+255),b
 17512  002C7A  0100               	movlb	0	; () banked
 17513  002C7C  519C               	movf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 17514  002C7E  0100               	movlb	0	; () banked
 17515  002C80  2594               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 17516  002C82  0100               	movlb	0	; () banked
 17517  002C84  6F97               	movwf	(??i2_FSH_Write_IR_RF+3)& (0+255),b
 17518  002C86  0100               	movlb	0	; () banked
 17519  002C88  519D               	movf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 17520  002C8A  0100               	movlb	0	; () banked
 17521  002C8C  2195               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 17522  002C8E  0100               	movlb	0	; () banked
 17523  002C90  6F98               	movwf	(??i2_FSH_Write_IR_RF+4)& (0+255),b
 17524  002C92  0E00               	movlw	0
 17525  002C94  0100               	movlb	0	; () banked
 17526  002C96  2196               	addwfc	(??i2_FSH_Write_IR_RF+2)& (0+255),w,b
 17527  002C98  0100               	movlb	0	; () banked
 17528  002C9A  6F99               	movwf	(??i2_FSH_Write_IR_RF+5)& (0+255),b
 17529  002C9C  0100               	movlb	0	; () banked
 17530  002C9E  5197               	movf	(??i2_FSH_Write_IR_RF+3)& (0+255),w,b
 17531  002CA0  0100               	movlb	0	; () banked
 17532  002CA2  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 17533  002CA4  0100               	movlb	0	; () banked
 17534  002CA6  5198               	movf	(??i2_FSH_Write_IR_RF+4)& (0+255),w,b
 17535  002CA8  0100               	movlb	0	; () banked
 17536  002CAA  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 17537  002CAC  0100               	movlb	0	; () banked
 17538  002CAE  5199               	movf	(??i2_FSH_Write_IR_RF+5)& (0+255),w,b
 17539  002CB0  0100               	movlb	0	; () banked
 17540  002CB2  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 17541  002CB4  0100               	movlb	0	; () banked
 17542  002CB6  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 17543  002CB8  EC50  F00E         	call	i2_FSH_AddressToBlock	;wreg free
 17544                           
 17545                           ;FLASH.c: 413: for(i = 0; i<64; i++)
 17546  002CBC  0E00               	movlw	0
 17547  002CBE  0100               	movlb	0	; () banked
 17548  002CC0  6FA1               	movwf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 17549  002CC2  0E00               	movlw	0
 17550  002CC4  6FA0               	movwf	i2FSH_Write_IR_RF@i& (0+255),b
 17551                           
 17552                           ; BSR set to: 0
 17553  002CC6  0100               	movlb	0	; () banked
 17554  002CC8  51A1               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17555  002CCA  E111               	bnz	i2l1226
 17556  002CCC  0E40               	movlw	64
 17557  002CCE  0100               	movlb	0	; () banked
 17558  002CD0  5DA0               	subwf	i2FSH_Write_IR_RF@i& (0+255),w,b
 17559  002CD2  B0D8               	btfsc	status,0,c
 17560  002CD4  D00C               	goto	i2l1226
 17561  002CD6  D001               	goto	i2l6424
 17562                           
 17563                           ; BSR set to: 0
 17564  002CD8  D00A               	goto	i2l1226
 17565  002CDA                     i2l6424:
 17566                           
 17567                           ; BSR set to: 0
 17568                           ;FLASH.c: 414: {
 17569                           ;FLASH.c: 416: TABLAT = 0xDA;
 17570  002CDA  0EDA               	movlw	218
 17571  002CDC  6EF5               	movwf	tablat,c	;volatile
 17572  002CDE  000D               	tblwt		*+	;# 
 17573  002CE0  0100               	movlb	0	; () banked
 17574  002CE2  4BA0               	infsnz	i2FSH_Write_IR_RF@i& (0+255),f,b
 17575  002CE4  2BA1               	incf	(i2FSH_Write_IR_RF@i+1)& (0+255),f,b
 17576                           
 17577                           ; BSR set to: 0
 17578  002CE6  0100               	movlb	0	; () banked
 17579  002CE8  51A1               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17580  002CEA  E101               	bnz	i2u685_40
 17581  002CEC  D7EF               	goto	L10
 17582  002CEE                     i2u685_40:
 17583  002CEE                     i2l1226:
 17584                           
 17585                           ; BSR set to: 0
 17586                           ;FLASH.c: 418: }
 17587                           ;FLASH.c: 419: EECON1bits.WREN = 1;
 17588  002CEE  84A6               	bsf	4006,2,c	;volatile
 17589                           
 17590                           ;FLASH.c: 420: EECON1bits.FREE = 0;
 17591  002CF0  98A6               	bcf	4006,4,c	;volatile
 17592                           
 17593                           ; BSR set to: 0
 17594                           ;FLASH.c: 421: FSH_Sequence();
 17595  002CF2  ECA3  F00E         	call	i2_FSH_Sequence	;wreg free
 17596                           
 17597                           ;FLASH.c: 422: EECON1bits.WR = 1;
 17598  002CF6  82A6               	bsf	4006,1,c	;volatile
 17599                           
 17600                           ;FLASH.c: 423: EECON1bits.WREN = 1;
 17601  002CF8  84A6               	bsf	4006,2,c	;volatile
 17602                           
 17603                           ;FLASH.c: 426: for(i=0; i<64;i++)
 17604  002CFA  0E00               	movlw	0
 17605  002CFC  0100               	movlb	0	; () banked
 17606  002CFE  6FA1               	movwf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 17607  002D00  0E00               	movlw	0
 17608  002D02  6FA0               	movwf	i2FSH_Write_IR_RF@i& (0+255),b
 17609  002D04                     i2l6438:
 17610                           
 17611                           ; BSR set to: 0
 17612  002D04  0100               	movlb	0	; () banked
 17613  002D06  51A1               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17614  002D08  E129               	bnz	i2l6456
 17615  002D0A  0E40               	movlw	64
 17616  002D0C  0100               	movlb	0	; () banked
 17617  002D0E  5DA0               	subwf	i2FSH_Write_IR_RF@i& (0+255),w,b
 17618  002D10  B0D8               	btfsc	status,0,c
 17619  002D12  D024               	goto	i2l6456
 17620  002D14  D001               	goto	i2l6442
 17621                           
 17622                           ; BSR set to: 0
 17623  002D16  D022               	goto	i2l6456
 17624  002D18                     i2l6442:
 17625                           
 17626                           ; BSR set to: 0
 17627                           ;FLASH.c: 427: {
 17628                           ;FLASH.c: 428: if(FlashWaste[FlashWasteindex] != 0xDA)
 17629  002D18  0E00               	movlw	0
 17630  002D1A  0100               	movlb	0	; () banked
 17631  002D1C  259C               	addwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 17632  002D1E  6EF6               	movwf	tblptrl,c
 17633  002D20  0E26               	movlw	38
 17634  002D22  219D               	addwfc	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 17635  002D24  6EF7               	movwf	tblptrh,c
 17636  002D26  6AF8               	clrf	tblptru,c
 17637  002D28  0E00               	movlw	0
 17638  002D2A  22F8               	addwfc	tblptru,f,c
 17639  002D2C  0008               	tblrd		*
 17640  002D2E  50F5               	movf	tablat,w,c
 17641  002D30  0ADA               	xorlw	218
 17642  002D32  B4D8               	btfsc	status,2,c
 17643  002D34  D00B               	goto	i2l6452
 17644                           
 17645                           ; BSR set to: 0
 17646                           ;FLASH.c: 429: {
 17647                           ;FLASH.c: 430: WriteTries++;
 17648  002D36  0100               	movlb	0	; () banked
 17649  002D38  2BA2               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17650                           
 17651                           ; BSR set to: 0
 17652                           ;FLASH.c: 431: if(WriteTries > 10)
 17653  002D3A  0E0A               	movlw	10
 17654  002D3C  0100               	movlb	0	; () banked
 17655  002D3E  65A2               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17656  002D40  D772               	goto	i2l1224
 17657  002D42                     i2l6448:
 17658                           
 17659                           ; BSR set to: 0
 17660                           ;FLASH.c: 432: {
 17661                           ;FLASH.c: 433: status = 0;
 17662  002D42  0E00               	movlw	0
 17663  002D44  D00F               	goto	L9
 17664                           
 17665                           ; BSR set to: 0
 17666                           ;FLASH.c: 435: }
 17667                           
 17668                           ;FLASH.c: 434: goto END;
 17669  002D46  D002               	goto	i2l6452
 17670                           
 17671                           ; BSR set to: 0
 17672                           ;FLASH.c: 436: else
 17673                           ;FLASH.c: 437: {
 17674                           ;FLASH.c: 438: goto REDO9;
 17675  002D48  D76E               	goto	i2l1224
 17676                           
 17677                           ; BSR set to: 0
 17678  002D4A  D000               	goto	i2l6452
 17679  002D4C                     i2l6452:
 17680                           
 17681                           ; BSR set to: 0
 17682                           ;FLASH.c: 439: }
 17683                           ;FLASH.c: 440: }
 17684                           ;FLASH.c: 441: FlashWasteindex++;
 17685  002D4C  0100               	movlb	0	; () banked
 17686  002D4E  4B9C               	infsnz	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),f,b
 17687  002D50  2B9D               	incf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),f,b
 17688  002D52  0100               	movlb	0	; () banked
 17689  002D54  4BA0               	infsnz	i2FSH_Write_IR_RF@i& (0+255),f,b
 17690  002D56  2BA1               	incf	(i2FSH_Write_IR_RF@i+1)& (0+255),f,b
 17691  002D58  D7D5               	goto	i2l6438
 17692                           
 17693                           ; BSR set to: 0
 17694  002D5A  D000               	goto	i2l6456
 17695  002D5C                     i2l6456:
 17696                           
 17697                           ; BSR set to: 0
 17698  002D5C  0100               	movlb	0	; () banked
 17699  002D5E  2B9E               	incf	i2FSH_Write_IR_RF@j& (0+255),f,b
 17700  002D60  D75A               	goto	i2l6408
 17701  002D62                     i2l6460:
 17702                           
 17703                           ; BSR set to: 0
 17704                           ;FLASH.c: 442: }
 17705                           ;FLASH.c: 443: }
 17706                           ;FLASH.c: 444: status = 1;
 17707  002D62  0E01               	movlw	1
 17708  002D64                     L9:
 17709  002D64  0100               	movlb	0	; () banked
 17710  002D66  6F9F               	movwf	i2FSH_Write_IR_RF@status& (0+255),b
 17711  002D68                     i2l1185:
 17712                           
 17713                           ; BSR set to: 0
 17714                           ;FLASH.c: 447: if(highint)
 17715  002D68  0100               	movlb	0	; () banked
 17716  002D6A  519A               	movf	i2FSH_Write_IR_RF@highint& (0+255),w,b
 17717  002D6C  0100               	movlb	0	; () banked
 17718  002D6E  B4D8               	btfsc	status,2,c
 17719  002D70  D002               	goto	i2l6464
 17720                           
 17721                           ; BSR set to: 0
 17722                           ;FLASH.c: 448: {
 17723                           ;FLASH.c: 449: INTCONbits.GIE = 1;
 17724  002D72  8EF2               	bsf	intcon,7,c	;volatile
 17725  002D74  D000               	goto	i2l6464
 17726  002D76                     i2l6464:
 17727                           
 17728                           ; BSR set to: 0
 17729                           ;FLASH.c: 450: }
 17730                           ;FLASH.c: 451: if(lowint)
 17731  002D76  0100               	movlb	0	; () banked
 17732  002D78  519B               	movf	i2FSH_Write_IR_RF@lowint& (0+255),w,b
 17733  002D7A  0100               	movlb	0	; () banked
 17734  002D7C  B4D8               	btfsc	status,2,c
 17735  002D7E  D002               	goto	i2l6468
 17736                           
 17737                           ; BSR set to: 0
 17738                           ;FLASH.c: 452: {
 17739                           ;FLASH.c: 453: INTCONbits.PEIE = 1;
 17740  002D80  8CF2               	bsf	intcon,6,c	;volatile
 17741  002D82  D000               	goto	i2l6468
 17742  002D84                     i2l6468:
 17743                           
 17744                           ; BSR set to: 0
 17745                           ;FLASH.c: 454: }
 17746                           ;FLASH.c: 455: return status;
 17747  002D84  0100               	movlb	0	; () banked
 17748  002D86  519F               	movf	i2FSH_Write_IR_RF@status& (0+255),w,b
 17749  002D88  0012               	return	
 17750                           
 17751                           ; BSR set to: 0
 17752                           
 17753                           ; BSR set to: 0
 17754  002D8A  0012               	return		;funcret
 17755  002D8C                     __end_ofi2_FSH_Write_IR_RF:
 17756                           	opt stack 0
 17757                           pclatu	equ	0xFFB
 17758                           pclath	equ	0xFFA
 17759                           tblptru	equ	0xFF8
 17760                           tblptrh	equ	0xFF7
 17761                           tblptrl	equ	0xFF6
 17762                           tablat	equ	0xFF5
 17763                           prodh	equ	0xFF4
 17764                           prodl	equ	0xFF3
 17765                           intcon	equ	0xFF2
 17766                           intcon2	equ	0xFF1
 17767                           intcon3	equ	0xFF0
 17768                           postinc0	equ	0xFEE
 17769                           fsr0h	equ	0xFEA
 17770                           fsr0l	equ	0xFE9
 17771                           wreg	equ	0xFE8
 17772                           postdec1	equ	0xFE5
 17773                           fsr1h	equ	0xFE2
 17774                           fsr1l	equ	0xFE1
 17775                           bsr	equ	0xFE0
 17776                           postinc2	equ	0xFDE
 17777                           postdec2	equ	0xFDD
 17778                           plusw2	equ	0xFDB
 17779                           fsr2h	equ	0xFDA
 17780                           fsr2l	equ	0xFD9
 17781                           status	equ	0xFD8
 17782                           
 17783 ;; *************** function i2_RF_ResetData *****************
 17784 ;; Defined at:
 17785 ;;		line 221 in file "RF.c"
 17786 ;; Parameters:    Size  Location     Type
 17787 ;;		None
 17788 ;; Auto vars:     Size  Location     Type
 17789 ;;		None
 17790 ;; Return value:  Size  Location     Type
 17791 ;;		None               void
 17792 ;; Registers used:
 17793 ;;		wreg, status,2
 17794 ;; Tracked objects:
 17795 ;;		On entry : 0/0
 17796 ;;		On exit  : 0/0
 17797 ;;		Unchanged: 0/0
 17798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17799 ;;      Params:         0       0       0       0       0
 17800 ;;      Locals:         0       0       0       0       0
 17801 ;;      Temps:          0       0       0       0       0
 17802 ;;      Totals:         0       0       0       0       0
 17803 ;;Total ram usage:        0 bytes
 17804 ;; Hardware stack levels used:    1
 17805 ;; This function calls:
 17806 ;;		Nothing
 17807 ;; This function is called by:
 17808 ;;		_high_isr
 17809 ;;		i2_FSH_Write_IR_RF
 17810 ;; This function uses a non-reentrant model
 17811 ;;
 17812                           
 17813                           	psect	text105
 17814  001D16                     __ptext105:
 17815                           	opt stack 0
 17816  001D16                     i2_RF_ResetData:
 17817                           	opt stack 17
 17818                           
 17819                           ;RF.c: 223: RF_DataPlace = 0;
 17820                           
 17821                           ; BSR set to: 0
 17822                           ;incstack = 0
 17823  001D16  0E00               	movlw	0
 17824  001D18  0100               	movlb	0	; () banked
 17825  001D1A  6FCB               	movwf	_RF_DataPlace& (0+255),b
 17826                           
 17827                           ;RF.c: 224: RFStarted = 0;
 17828  001D1C  0E00               	movlw	0
 17829  001D1E  0100               	movlb	0	; () banked
 17830  001D20  6FC8               	movwf	_RFStarted& (0+255),b
 17831                           
 17832                           ; BSR set to: 0
 17833  001D22  0012               	return		;funcret
 17834  001D24                     __end_ofi2_RF_ResetData:
 17835                           	opt stack 0
 17836                           pclatu	equ	0xFFB
 17837                           pclath	equ	0xFFA
 17838                           tblptru	equ	0xFF8
 17839                           tblptrh	equ	0xFF7
 17840                           tblptrl	equ	0xFF6
 17841                           tablat	equ	0xFF5
 17842                           prodh	equ	0xFF4
 17843                           prodl	equ	0xFF3
 17844                           intcon	equ	0xFF2
 17845                           intcon2	equ	0xFF1
 17846                           intcon3	equ	0xFF0
 17847                           postinc0	equ	0xFEE
 17848                           fsr0h	equ	0xFEA
 17849                           fsr0l	equ	0xFE9
 17850                           wreg	equ	0xFE8
 17851                           postdec1	equ	0xFE5
 17852                           fsr1h	equ	0xFE2
 17853                           fsr1l	equ	0xFE1
 17854                           bsr	equ	0xFE0
 17855                           postinc2	equ	0xFDE
 17856                           postdec2	equ	0xFDD
 17857                           plusw2	equ	0xFDB
 17858                           fsr2h	equ	0xFDA
 17859                           fsr2l	equ	0xFD9
 17860                           status	equ	0xFD8
 17861                           
 17862 ;; *************** function i2_MSC_BufferCopyIntConst *****************
 17863 ;; Defined at:
 17864 ;;		line 238 in file "MISC.c"
 17865 ;; Parameters:    Size  Location     Type
 17866 ;;  from            3    6[BANK0 ] PTR const unsigned int 
 17867 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 17868 ;;  to              2    9[BANK0 ] PTR unsigned int 
 17869 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 17870 ;;  count           2   11[BANK0 ] unsigned int 
 17871 ;;  shift           2   13[BANK0 ] unsigned int 
 17872 ;; Auto vars:     Size  Location     Type
 17873 ;;  MSC_BufferCo    2   15[BANK0 ] unsigned int 
 17874 ;; Return value:  Size  Location     Type
 17875 ;;		None               void
 17876 ;; Registers used:
 17877 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17878 ;; Tracked objects:
 17879 ;;		On entry : 0/0
 17880 ;;		On exit  : 0/0
 17881 ;;		Unchanged: 0/0
 17882 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17883 ;;      Params:         0       9       0       0       0
 17884 ;;      Locals:         0       2       0       0       0
 17885 ;;      Temps:          0       0       0       0       0
 17886 ;;      Totals:         0      11       0       0       0
 17887 ;;Total ram usage:       11 bytes
 17888 ;; Hardware stack levels used:    1
 17889 ;; Hardware stack levels required when called:    1
 17890 ;; This function calls:
 17891 ;;		i2_MSC_CleanBufferInt
 17892 ;; This function is called by:
 17893 ;;		i2_FSH_Write_IR_RF
 17894 ;; This function uses a non-reentrant model
 17895 ;;
 17896                           
 17897                           	psect	text106
 17898  000B06                     __ptext106:
 17899                           	opt stack 0
 17900  000B06                     i2_MSC_BufferCopyIntConst:
 17901                           	opt stack 14
 17902                           
 17903                           ;MISC.c: 240: unsigned int i=0;
 17904                           
 17905                           ; BSR set to: 0
 17906                           ;incstack = 0
 17907  000B06  0E00               	movlw	0
 17908  000B08  0100               	movlb	0	; () banked
 17909  000B0A  6F90               	movwf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),b
 17910  000B0C  0E00               	movlw	0
 17911  000B0E  6F8F               	movwf	i2MSC_BufferCopyIntConst@i& (0+255),b
 17912                           
 17913                           ; BSR set to: 0
 17914                           ;MISC.c: 241: MSC_CleanBufferInt(to,count);
 17915  000B10  C089  F080         	movff	i2MSC_BufferCopyIntConst@to,i2MSC_CleanBufferInt@data
 17916  000B14  C08A  F081         	movff	i2MSC_BufferCopyIntConst@to+1,i2MSC_CleanBufferInt@data+1
 17917  000B18  C08B  F082         	movff	i2MSC_BufferCopyIntConst@count,i2MSC_CleanBufferInt@count
 17918  000B1C  C08C  F083         	movff	i2MSC_BufferCopyIntConst@count+1,i2MSC_CleanBufferInt@count+1
 17919  000B20  EC96  F009         	call	i2_MSC_CleanBufferInt	;wreg free
 17920                           
 17921                           ;MISC.c: 242: for(i = shift; i>0; i--)
 17922  000B24  C08D  F08F         	movff	i2MSC_BufferCopyIntConst@shift,i2MSC_BufferCopyIntConst@i
 17923  000B28  C08E  F090         	movff	i2MSC_BufferCopyIntConst@shift+1,i2MSC_BufferCopyIntConst@i+1
 17924  000B2C                     i2l5540:
 17925  000B2C  0100               	movlb	0	; () banked
 17926  000B2E  518F               	movf	i2MSC_BufferCopyIntConst@i& (0+255),w,b
 17927  000B30  0100               	movlb	0	; () banked
 17928  000B32  1190               	iorwf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),w,b
 17929  000B34  B4D8               	btfsc	status,2,c
 17930  000B36  D036               	goto	i2l5560
 17931  000B38  D001               	goto	i2l5544
 17932                           
 17933                           ; BSR set to: 0
 17934  000B3A  D034               	goto	i2l5560
 17935  000B3C                     i2l5544:
 17936                           
 17937                           ; BSR set to: 0
 17938                           ;MISC.c: 243: {
 17939                           ;MISC.c: 244: *to = ' ';
 17940  000B3C  C089  FFD9         	movff	i2MSC_BufferCopyIntConst@to,fsr2l
 17941  000B40  C08A  FFDA         	movff	i2MSC_BufferCopyIntConst@to+1,fsr2h
 17942  000B44  0E20               	movlw	32
 17943  000B46  6EDE               	movwf	postinc2,c
 17944  000B48  0E00               	movlw	0
 17945  000B4A  6EDD               	movwf	postdec2,c
 17946                           
 17947                           ; BSR set to: 0
 17948                           ;MISC.c: 245: to++;
 17949  000B4C  0E02               	movlw	2
 17950  000B4E  0100               	movlb	0	; () banked
 17951  000B50  2789               	addwf	i2MSC_BufferCopyIntConst@to& (0+255),f,b
 17952  000B52  0E00               	movlw	0
 17953  000B54  238A               	addwfc	(i2MSC_BufferCopyIntConst@to+1)& (0+255),f,b
 17954                           
 17955                           ; BSR set to: 0
 17956  000B56  0100               	movlb	0	; () banked
 17957  000B58  078F               	decf	i2MSC_BufferCopyIntConst@i& (0+255),f,b
 17958  000B5A  A0D8               	btfss	status,0,c
 17959  000B5C  0790               	decf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),f,b
 17960  000B5E  D7E6               	goto	i2l5540
 17961                           
 17962                           ; BSR set to: 0
 17963                           ;MISC.c: 246: }
 17964                           ;MISC.c: 247: while(*from != 0 && count >0)
 17965                           
 17966                           ; BSR set to: 0
 17967  000B60  D021               	goto	i2l5560
 17968  000B62                     i2l5552:
 17969                           
 17970                           ; BSR set to: 0
 17971                           ;MISC.c: 248: {
 17972                           ;MISC.c: 249: *to = *from;
 17973  000B62  C086  FFF6         	movff	i2MSC_BufferCopyIntConst@from,tblptrl
 17974  000B66  C087  FFF7         	movff	i2MSC_BufferCopyIntConst@from+1,tblptrh
 17975  000B6A  C088  FFF8         	movff	i2MSC_BufferCopyIntConst@from+2,tblptru
 17976  000B6E  C089  FFD9         	movff	i2MSC_BufferCopyIntConst@to,fsr2l
 17977  000B72  C08A  FFDA         	movff	i2MSC_BufferCopyIntConst@to+1,fsr2h
 17978  000B76  0009               	tblrd		*+
 17979  000B78  CFF5 FFDE          	movff	tablat,postinc2
 17980  000B7C  0008               	tblrd		*
 17981  000B7E  CFF5 FFDD          	movff	tablat,postdec2
 17982                           
 17983                           ; BSR set to: 0
 17984                           ;MISC.c: 250: from++;
 17985  000B82  0100               	movlb	0	; () banked
 17986  000B84  0E02               	movlw	2
 17987  000B86  2786               	addwf	i2MSC_BufferCopyIntConst@from& (0+255),f,b
 17988  000B88  0E00               	movlw	0
 17989  000B8A  2387               	addwfc	(i2MSC_BufferCopyIntConst@from+1)& (0+255),f,b
 17990  000B8C  0E00               	movlw	0
 17991  000B8E  2388               	addwfc	(i2MSC_BufferCopyIntConst@from+2)& (0+255),f,b
 17992                           
 17993                           ; BSR set to: 0
 17994                           ;MISC.c: 251: to++;
 17995  000B90  0E02               	movlw	2
 17996  000B92  0100               	movlb	0	; () banked
 17997  000B94  2789               	addwf	i2MSC_BufferCopyIntConst@to& (0+255),f,b
 17998  000B96  0E00               	movlw	0
 17999  000B98  238A               	addwfc	(i2MSC_BufferCopyIntConst@to+1)& (0+255),f,b
 18000                           
 18001                           ; BSR set to: 0
 18002                           ;MISC.c: 252: count--;
 18003  000B9A  0100               	movlb	0	; () banked
 18004  000B9C  078B               	decf	i2MSC_BufferCopyIntConst@count& (0+255),f,b
 18005  000B9E  A0D8               	btfss	status,0,c
 18006  000BA0  078C               	decf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),f,b
 18007  000BA2  D000               	goto	i2l5560
 18008  000BA4                     i2l5560:
 18009                           
 18010                           ; BSR set to: 0
 18011  000BA4  C086  FFF6         	movff	i2MSC_BufferCopyIntConst@from,tblptrl
 18012  000BA8  C087  FFF7         	movff	i2MSC_BufferCopyIntConst@from+1,tblptrh
 18013  000BAC  C088  FFF8         	movff	i2MSC_BufferCopyIntConst@from+2,tblptru
 18014  000BB0  0009               	tblrd		*+
 18015  000BB2  50F5               	movf	tablat,w,c
 18016  000BB4  0009               	tblrd		*+
 18017  000BB6  10F5               	iorwf	tablat,w,c
 18018  000BB8  B4D8               	btfsc	status,2,c
 18019  000BBA  0012               	return	
 18020                           
 18021                           ; BSR set to: 0
 18022  000BBC  0100               	movlb	0	; () banked
 18023  000BBE  518B               	movf	i2MSC_BufferCopyIntConst@count& (0+255),w,b
 18024  000BC0  0100               	movlb	0	; () banked
 18025  000BC2  118C               	iorwf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),w,b
 18026  000BC4  B4D8               	btfsc	status,2,c
 18027  000BC6  0012               	return	
 18028  000BC8  D7CC               	goto	i2l5552
 18029                           
 18030                           ; BSR set to: 0
 18031  000BCA  0012               	return	
 18032                           
 18033                           ; BSR set to: 0
 18034                           
 18035                           ; BSR set to: 0
 18036  000BCC  0012               	return		;funcret
 18037  000BCE                     __end_ofi2_MSC_BufferCopyIntConst:
 18038                           	opt stack 0
 18039                           pclatu	equ	0xFFB
 18040                           pclath	equ	0xFFA
 18041                           tblptru	equ	0xFF8
 18042                           tblptrh	equ	0xFF7
 18043                           tblptrl	equ	0xFF6
 18044                           tablat	equ	0xFF5
 18045                           prodh	equ	0xFF4
 18046                           prodl	equ	0xFF3
 18047                           intcon	equ	0xFF2
 18048                           intcon2	equ	0xFF1
 18049                           intcon3	equ	0xFF0
 18050                           postinc0	equ	0xFEE
 18051                           fsr0h	equ	0xFEA
 18052                           fsr0l	equ	0xFE9
 18053                           wreg	equ	0xFE8
 18054                           postdec1	equ	0xFE5
 18055                           fsr1h	equ	0xFE2
 18056                           fsr1l	equ	0xFE1
 18057                           bsr	equ	0xFE0
 18058                           postinc2	equ	0xFDE
 18059                           postdec2	equ	0xFDD
 18060                           plusw2	equ	0xFDB
 18061                           fsr2h	equ	0xFDA
 18062                           fsr2l	equ	0xFD9
 18063                           status	equ	0xFD8
 18064                           
 18065 ;; *************** function i2_MSC_CleanBufferInt *****************
 18066 ;; Defined at:
 18067 ;;		line 166 in file "MISC.c"
 18068 ;; Parameters:    Size  Location     Type
 18069 ;;  data            2    0[BANK0 ] PTR unsigned int 
 18070 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 18071 ;;  count           2    2[BANK0 ] unsigned int 
 18072 ;; Auto vars:     Size  Location     Type
 18073 ;;  MSC_CleanBuf    2    4[BANK0 ] unsigned int 
 18074 ;; Return value:  Size  Location     Type
 18075 ;;		None               void
 18076 ;; Registers used:
 18077 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18078 ;; Tracked objects:
 18079 ;;		On entry : 0/0
 18080 ;;		On exit  : 0/0
 18081 ;;		Unchanged: 0/0
 18082 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18083 ;;      Params:         0       4       0       0       0
 18084 ;;      Locals:         0       2       0       0       0
 18085 ;;      Temps:          0       0       0       0       0
 18086 ;;      Totals:         0       6       0       0       0
 18087 ;;Total ram usage:        6 bytes
 18088 ;; Hardware stack levels used:    1
 18089 ;; This function calls:
 18090 ;;		Nothing
 18091 ;; This function is called by:
 18092 ;;		i2_MSC_BufferCopyIntConst
 18093 ;; This function uses a non-reentrant model
 18094 ;;
 18095                           
 18096                           	psect	text107
 18097  00132C                     __ptext107:
 18098                           	opt stack 0
 18099  00132C                     i2_MSC_CleanBufferInt:
 18100                           	opt stack 14
 18101                           
 18102                           ;MISC.c: 168: unsigned int i=0;
 18103                           
 18104                           ; BSR set to: 0
 18105                           ;incstack = 0
 18106  00132C  0E00               	movlw	0
 18107  00132E  0100               	movlb	0	; () banked
 18108  001330  6F85               	movwf	(i2MSC_CleanBufferInt@i+1)& (0+255),b
 18109  001332  0E00               	movlw	0
 18110  001334  6F84               	movwf	i2MSC_CleanBufferInt@i& (0+255),b
 18111                           
 18112                           ;MISC.c: 169: for(i=0; i<count;i++)
 18113  001336  0E00               	movlw	0
 18114  001338  0100               	movlb	0	; () banked
 18115  00133A  6F85               	movwf	(i2MSC_CleanBufferInt@i+1)& (0+255),b
 18116  00133C  0E00               	movlw	0
 18117  00133E  6F84               	movwf	i2MSC_CleanBufferInt@i& (0+255),b
 18118  001340  D015               	goto	i2l5240
 18119  001342                     i2l5236:
 18120                           
 18121                           ; BSR set to: 0
 18122                           ;MISC.c: 170: {
 18123                           ;MISC.c: 171: data[i]= 0;
 18124  001342  90D8               	bcf	status,0,c
 18125  001344  0100               	movlb	0	; () banked
 18126  001346  3584               	rlcf	i2MSC_CleanBufferInt@i& (0+255),w,b
 18127  001348  6ED9               	movwf	fsr2l,c
 18128  00134A  0100               	movlb	0	; () banked
 18129  00134C  3585               	rlcf	(i2MSC_CleanBufferInt@i+1)& (0+255),w,b
 18130  00134E  6EDA               	movwf	fsr2h,c
 18131  001350  0100               	movlb	0	; () banked
 18132  001352  5180               	movf	i2MSC_CleanBufferInt@data& (0+255),w,b
 18133  001354  26D9               	addwf	fsr2l,f,c
 18134  001356  0100               	movlb	0	; () banked
 18135  001358  5181               	movf	(i2MSC_CleanBufferInt@data+1)& (0+255),w,b
 18136  00135A  22DA               	addwfc	fsr2h,f,c
 18137  00135C  0E00               	movlw	0
 18138  00135E  6EDE               	movwf	postinc2,c
 18139  001360  0E00               	movlw	0
 18140  001362  6EDD               	movwf	postdec2,c
 18141                           
 18142                           ; BSR set to: 0
 18143  001364  0100               	movlb	0	; () banked
 18144  001366  4B84               	infsnz	i2MSC_CleanBufferInt@i& (0+255),f,b
 18145  001368  2B85               	incf	(i2MSC_CleanBufferInt@i+1)& (0+255),f,b
 18146  00136A  D000               	goto	i2l5240
 18147  00136C                     i2l5240:
 18148                           
 18149                           ; BSR set to: 0
 18150  00136C  0100               	movlb	0	; () banked
 18151  00136E  5182               	movf	i2MSC_CleanBufferInt@count& (0+255),w,b
 18152  001370  0100               	movlb	0	; () banked
 18153  001372  5D84               	subwf	i2MSC_CleanBufferInt@i& (0+255),w,b
 18154  001374  0100               	movlb	0	; () banked
 18155  001376  5183               	movf	(i2MSC_CleanBufferInt@count+1)& (0+255),w,b
 18156  001378  0100               	movlb	0	; () banked
 18157  00137A  5985               	subwfb	(i2MSC_CleanBufferInt@i+1)& (0+255),w,b
 18158  00137C  A0D8               	btfss	status,0,c
 18159  00137E  D7E1               	goto	i2l5236
 18160                           
 18161                           ; BSR set to: 0
 18162                           
 18163                           ; BSR set to: 0
 18164  001380  0012               	return		;funcret
 18165  001382                     __end_ofi2_MSC_CleanBufferInt:
 18166                           	opt stack 0
 18167                           pclatu	equ	0xFFB
 18168                           pclath	equ	0xFFA
 18169                           tblptru	equ	0xFF8
 18170                           tblptrh	equ	0xFF7
 18171                           tblptrl	equ	0xFF6
 18172                           tablat	equ	0xFF5
 18173                           prodh	equ	0xFF4
 18174                           prodl	equ	0xFF3
 18175                           intcon	equ	0xFF2
 18176                           intcon2	equ	0xFF1
 18177                           intcon3	equ	0xFF0
 18178                           postinc0	equ	0xFEE
 18179                           fsr0h	equ	0xFEA
 18180                           fsr0l	equ	0xFE9
 18181                           wreg	equ	0xFE8
 18182                           postdec1	equ	0xFE5
 18183                           fsr1h	equ	0xFE2
 18184                           fsr1l	equ	0xFE1
 18185                           bsr	equ	0xFE0
 18186                           postinc2	equ	0xFDE
 18187                           postdec2	equ	0xFDD
 18188                           plusw2	equ	0xFDB
 18189                           fsr2h	equ	0xFDA
 18190                           fsr2l	equ	0xFD9
 18191                           status	equ	0xFD8
 18192                           
 18193 ;; *************** function i2_IR_ResetData *****************
 18194 ;; Defined at:
 18195 ;;		line 107 in file "IR.c"
 18196 ;; Parameters:    Size  Location     Type
 18197 ;;		None
 18198 ;; Auto vars:     Size  Location     Type
 18199 ;;		None
 18200 ;; Return value:  Size  Location     Type
 18201 ;;		None               void
 18202 ;; Registers used:
 18203 ;;		wreg, status,2, cstack
 18204 ;; Tracked objects:
 18205 ;;		On entry : 0/0
 18206 ;;		On exit  : 0/0
 18207 ;;		Unchanged: 0/0
 18208 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18209 ;;      Params:         0       0       0       0       0
 18210 ;;      Locals:         0       0       0       0       0
 18211 ;;      Temps:          0       0       0       0       0
 18212 ;;      Totals:         0       0       0       0       0
 18213 ;;Total ram usage:        0 bytes
 18214 ;; Hardware stack levels used:    1
 18215 ;; Hardware stack levels required when called:    2
 18216 ;; This function calls:
 18217 ;;		i2_RF_Enable
 18218 ;; This function is called by:
 18219 ;;		i2_FSH_Write_IR_RF
 18220 ;; This function uses a non-reentrant model
 18221 ;;
 18222                           
 18223                           	psect	text108
 18224  001D24                     __ptext108:
 18225                           	opt stack 0
 18226  001D24                     i2_IR_ResetData:
 18227                           	opt stack 13
 18228                           
 18229                           ;IR.c: 109: IR_DataPlace = 0;
 18230                           
 18231                           ; BSR set to: 0
 18232                           ;incstack = 0
 18233  001D24  0E00               	movlw	0
 18234  001D26  6E5D               	movwf	_IR_DataPlace,c
 18235                           
 18236                           ;IR.c: 110: IRStarted = 0;
 18237  001D28  0E00               	movlw	0
 18238  001D2A  6E5B               	movwf	_IRStarted,c
 18239                           
 18240                           ;IR.c: 111: RF_Enable();
 18241  001D2C  ECF5  F00D         	call	i2_RF_Enable	;wreg free
 18242  001D30  0012               	return		;funcret
 18243  001D32                     __end_ofi2_IR_ResetData:
 18244                           	opt stack 0
 18245                           pclatu	equ	0xFFB
 18246                           pclath	equ	0xFFA
 18247                           tblptru	equ	0xFF8
 18248                           tblptrh	equ	0xFF7
 18249                           tblptrl	equ	0xFF6
 18250                           tablat	equ	0xFF5
 18251                           prodh	equ	0xFF4
 18252                           prodl	equ	0xFF3
 18253                           intcon	equ	0xFF2
 18254                           intcon2	equ	0xFF1
 18255                           intcon3	equ	0xFF0
 18256                           postinc0	equ	0xFEE
 18257                           fsr0h	equ	0xFEA
 18258                           fsr0l	equ	0xFE9
 18259                           wreg	equ	0xFE8
 18260                           postdec1	equ	0xFE5
 18261                           fsr1h	equ	0xFE2
 18262                           fsr1l	equ	0xFE1
 18263                           bsr	equ	0xFE0
 18264                           postinc2	equ	0xFDE
 18265                           postdec2	equ	0xFDD
 18266                           plusw2	equ	0xFDB
 18267                           fsr2h	equ	0xFDA
 18268                           fsr2l	equ	0xFD9
 18269                           status	equ	0xFD8
 18270                           
 18271 ;; *************** function i2_RF_Enable *****************
 18272 ;; Defined at:
 18273 ;;		line 206 in file "RF.c"
 18274 ;; Parameters:    Size  Location     Type
 18275 ;;		None
 18276 ;; Auto vars:     Size  Location     Type
 18277 ;;		None
 18278 ;; Return value:  Size  Location     Type
 18279 ;;		None               void
 18280 ;; Registers used:
 18281 ;;		wreg, status,2, cstack
 18282 ;; Tracked objects:
 18283 ;;		On entry : 0/0
 18284 ;;		On exit  : 0/0
 18285 ;;		Unchanged: 0/0
 18286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18287 ;;      Params:         0       0       0       0       0
 18288 ;;      Locals:         0       0       0       0       0
 18289 ;;      Temps:          0       0       0       0       0
 18290 ;;      Totals:         0       0       0       0       0
 18291 ;;Total ram usage:        0 bytes
 18292 ;; Hardware stack levels used:    1
 18293 ;; Hardware stack levels required when called:    1
 18294 ;; This function calls:
 18295 ;;		i2_RF_DataInt
 18296 ;;		i2_TMR_Timer0Int
 18297 ;; This function is called by:
 18298 ;;		i2_IR_ResetData
 18299 ;; This function uses a non-reentrant model
 18300 ;;
 18301                           
 18302                           	psect	text109
 18303  001BEA                     __ptext109:
 18304                           	opt stack 0
 18305  001BEA                     i2_RF_Enable:
 18306                           	opt stack 13
 18307                           
 18308                           ;RF.c: 208: INTCON3bits.INT1IF = 0;
 18309                           
 18310                           ;incstack = 0
 18311  001BEA  90F0               	bcf	intcon3,0,c	;volatile
 18312                           
 18313                           ;RF.c: 209: INTCON3bits.INT2IF = 0;
 18314  001BEC  92F0               	bcf	intcon3,1,c	;volatile
 18315                           
 18316                           ;RF.c: 210: INTCONbits.TMR0IF = 0;
 18317  001BEE  94F2               	bcf	intcon,2,c	;volatile
 18318                           
 18319                           ;RF.c: 211: RF_DataInt(1);
 18320  001BF0  0E01               	movlw	1
 18321  001BF2  ECFC  F00C         	call	i2_RF_DataInt
 18322                           
 18323                           ;RF.c: 212: TMR_Timer0Int(1);
 18324  001BF6  0E01               	movlw	1
 18325  001BF8  ECBF  F00D         	call	i2_TMR_Timer0Int
 18326  001BFC  0012               	return		;funcret
 18327  001BFE                     __end_ofi2_RF_Enable:
 18328                           	opt stack 0
 18329                           pclatu	equ	0xFFB
 18330                           pclath	equ	0xFFA
 18331                           tblptru	equ	0xFF8
 18332                           tblptrh	equ	0xFF7
 18333                           tblptrl	equ	0xFF6
 18334                           tablat	equ	0xFF5
 18335                           prodh	equ	0xFF4
 18336                           prodl	equ	0xFF3
 18337                           intcon	equ	0xFF2
 18338                           intcon2	equ	0xFF1
 18339                           intcon3	equ	0xFF0
 18340                           postinc0	equ	0xFEE
 18341                           fsr0h	equ	0xFEA
 18342                           fsr0l	equ	0xFE9
 18343                           wreg	equ	0xFE8
 18344                           postdec1	equ	0xFE5
 18345                           fsr1h	equ	0xFE2
 18346                           fsr1l	equ	0xFE1
 18347                           bsr	equ	0xFE0
 18348                           postinc2	equ	0xFDE
 18349                           postdec2	equ	0xFDD
 18350                           plusw2	equ	0xFDB
 18351                           fsr2h	equ	0xFDA
 18352                           fsr2l	equ	0xFD9
 18353                           status	equ	0xFD8
 18354                           
 18355 ;; *************** function i2_TMR_Timer0Int *****************
 18356 ;; Defined at:
 18357 ;;		line 208 in file "TIMERS.c"
 18358 ;; Parameters:    Size  Location     Type
 18359 ;;  state           1    wreg     unsigned char 
 18360 ;; Auto vars:     Size  Location     Type
 18361 ;;  state           1    0[BANK0 ] unsigned char 
 18362 ;; Return value:  Size  Location     Type
 18363 ;;		None               void
 18364 ;; Registers used:
 18365 ;;		wreg, status,2
 18366 ;; Tracked objects:
 18367 ;;		On entry : 0/0
 18368 ;;		On exit  : 0/0
 18369 ;;		Unchanged: 0/0
 18370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18371 ;;      Params:         0       0       0       0       0
 18372 ;;      Locals:         0       1       0       0       0
 18373 ;;      Temps:          0       0       0       0       0
 18374 ;;      Totals:         0       1       0       0       0
 18375 ;;Total ram usage:        1 bytes
 18376 ;; Hardware stack levels used:    1
 18377 ;; This function calls:
 18378 ;;		Nothing
 18379 ;; This function is called by:
 18380 ;;		i2_RF_Enable
 18381 ;; This function uses a non-reentrant model
 18382 ;;
 18383                           
 18384                           	psect	text110
 18385  001B7E                     __ptext110:
 18386                           	opt stack 0
 18387  001B7E                     i2_TMR_Timer0Int:
 18388                           	opt stack 13
 18389                           
 18390                           ;incstack = 0
 18391                           ;i2TMR_Timer0Int@state stored from wreg
 18392  001B7E  0100               	movlb	0	; () banked
 18393  001B80  6F80               	movwf	i2TMR_Timer0Int@state& (0+255),b
 18394                           
 18395                           ; BSR set to: 0
 18396                           ;TIMERS.c: 210: if(state)
 18397  001B82  0100               	movlb	0	; () banked
 18398  001B84  5180               	movf	i2TMR_Timer0Int@state& (0+255),w,b
 18399  001B86  0100               	movlb	0	; () banked
 18400  001B88  B4D8               	btfsc	status,2,c
 18401  001B8A  D002               	goto	i2l1064
 18402                           
 18403                           ; BSR set to: 0
 18404                           ;TIMERS.c: 211: {
 18405                           ;TIMERS.c: 213: INTCONbits.TMR0IE = 1;
 18406  001B8C  8AF2               	bsf	intcon,5,c	;volatile
 18407                           
 18408                           ;TIMERS.c: 214: }
 18409  001B8E  0012               	return	
 18410  001B90                     i2l1064:
 18411                           
 18412                           ; BSR set to: 0
 18413                           ;TIMERS.c: 215: else
 18414                           ;TIMERS.c: 216: {
 18415                           ;TIMERS.c: 218: INTCONbits.TMR0IE = 0;
 18416  001B90  9AF2               	bcf	intcon,5,c	;volatile
 18417  001B92  0012               	return	
 18418                           
 18419                           ; BSR set to: 0
 18420                           
 18421                           ; BSR set to: 0
 18422  001B94  0012               	return		;funcret
 18423  001B96                     __end_ofi2_TMR_Timer0Int:
 18424                           	opt stack 0
 18425                           pclatu	equ	0xFFB
 18426                           pclath	equ	0xFFA
 18427                           tblptru	equ	0xFF8
 18428                           tblptrh	equ	0xFF7
 18429                           tblptrl	equ	0xFF6
 18430                           tablat	equ	0xFF5
 18431                           prodh	equ	0xFF4
 18432                           prodl	equ	0xFF3
 18433                           intcon	equ	0xFF2
 18434                           intcon2	equ	0xFF1
 18435                           intcon3	equ	0xFF0
 18436                           postinc0	equ	0xFEE
 18437                           fsr0h	equ	0xFEA
 18438                           fsr0l	equ	0xFE9
 18439                           wreg	equ	0xFE8
 18440                           postdec1	equ	0xFE5
 18441                           fsr1h	equ	0xFE2
 18442                           fsr1l	equ	0xFE1
 18443                           bsr	equ	0xFE0
 18444                           postinc2	equ	0xFDE
 18445                           postdec2	equ	0xFDD
 18446                           plusw2	equ	0xFDB
 18447                           fsr2h	equ	0xFDA
 18448                           fsr2l	equ	0xFD9
 18449                           status	equ	0xFD8
 18450                           
 18451 ;; *************** function i2_RF_DataInt *****************
 18452 ;; Defined at:
 18453 ;;		line 78 in file "RF.c"
 18454 ;; Parameters:    Size  Location     Type
 18455 ;;  state           1    wreg     unsigned char 
 18456 ;; Auto vars:     Size  Location     Type
 18457 ;;  state           1    0[BANK0 ] unsigned char 
 18458 ;; Return value:  Size  Location     Type
 18459 ;;		None               void
 18460 ;; Registers used:
 18461 ;;		wreg, status,2
 18462 ;; Tracked objects:
 18463 ;;		On entry : 0/0
 18464 ;;		On exit  : 0/0
 18465 ;;		Unchanged: 0/0
 18466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18467 ;;      Params:         0       0       0       0       0
 18468 ;;      Locals:         0       1       0       0       0
 18469 ;;      Temps:          0       0       0       0       0
 18470 ;;      Totals:         0       1       0       0       0
 18471 ;;Total ram usage:        1 bytes
 18472 ;; Hardware stack levels used:    1
 18473 ;; This function calls:
 18474 ;;		Nothing
 18475 ;; This function is called by:
 18476 ;;		i2_RF_Enable
 18477 ;; This function uses a non-reentrant model
 18478 ;;
 18479                           
 18480                           	psect	text111
 18481  0019F8                     __ptext111:
 18482                           	opt stack 0
 18483  0019F8                     i2_RF_DataInt:
 18484                           	opt stack 13
 18485                           
 18486                           ; BSR set to: 0
 18487                           ;incstack = 0
 18488                           ;i2RF_DataInt@state stored from wreg
 18489  0019F8  0100               	movlb	0	; () banked
 18490  0019FA  6F80               	movwf	i2RF_DataInt@state& (0+255),b
 18491                           
 18492                           ; BSR set to: 0
 18493                           ;RF.c: 80: if(state)
 18494  0019FC  0100               	movlb	0	; () banked
 18495  0019FE  5180               	movf	i2RF_DataInt@state& (0+255),w,b
 18496  001A00  0100               	movlb	0	; () banked
 18497  001A02  B4D8               	btfsc	status,2,c
 18498  001A04  D003               	goto	i2l382
 18499                           
 18500                           ; BSR set to: 0
 18501                           ;RF.c: 81: {
 18502                           ;RF.c: 83: INTCON3bits.INT1E = 1;
 18503  001A06  86F0               	bsf	intcon3,3,c	;volatile
 18504                           
 18505                           ;RF.c: 84: INTCON3bits.INT2E = 1;
 18506  001A08  88F0               	bsf	intcon3,4,c	;volatile
 18507                           
 18508                           ;RF.c: 85: }
 18509  001A0A  0012               	return	
 18510  001A0C                     i2l382:
 18511                           
 18512                           ; BSR set to: 0
 18513                           ;RF.c: 86: else
 18514                           ;RF.c: 87: {
 18515                           ;RF.c: 89: INTCON3bits.INT1E = 0;
 18516  001A0C  96F0               	bcf	intcon3,3,c	;volatile
 18517                           
 18518                           ;RF.c: 90: INTCON3bits.INT2E = 0;
 18519  001A0E  98F0               	bcf	intcon3,4,c	;volatile
 18520  001A10  0012               	return	
 18521                           
 18522                           ; BSR set to: 0
 18523                           
 18524                           ; BSR set to: 0
 18525  001A12  0012               	return		;funcret
 18526  001A14                     __end_ofi2_RF_DataInt:
 18527                           	opt stack 0
 18528                           pclatu	equ	0xFFB
 18529                           pclath	equ	0xFFA
 18530                           tblptru	equ	0xFF8
 18531                           tblptrh	equ	0xFF7
 18532                           tblptrl	equ	0xFF6
 18533                           tablat	equ	0xFF5
 18534                           prodh	equ	0xFF4
 18535                           prodl	equ	0xFF3
 18536                           intcon	equ	0xFF2
 18537                           intcon2	equ	0xFF1
 18538                           intcon3	equ	0xFF0
 18539                           postinc0	equ	0xFEE
 18540                           fsr0h	equ	0xFEA
 18541                           fsr0l	equ	0xFE9
 18542                           wreg	equ	0xFE8
 18543                           postdec1	equ	0xFE5
 18544                           fsr1h	equ	0xFE2
 18545                           fsr1l	equ	0xFE1
 18546                           bsr	equ	0xFE0
 18547                           postinc2	equ	0xFDE
 18548                           postdec2	equ	0xFDD
 18549                           plusw2	equ	0xFDB
 18550                           fsr2h	equ	0xFDA
 18551                           fsr2l	equ	0xFD9
 18552                           status	equ	0xFD8
 18553                           
 18554 ;; *************** function i2_FSH_WriteIntArray *****************
 18555 ;; Defined at:
 18556 ;;		line 135 in file "FLASH.c"
 18557 ;; Parameters:    Size  Location     Type
 18558 ;;  Array           3    4[BANK0 ] PTR unsigned int 
 18559 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 18560 ;; Auto vars:     Size  Location     Type
 18561 ;;  FSH_WriteInt    1   12[BANK0 ] unsigned char 
 18562 ;; Return value:  Size  Location     Type
 18563 ;;		None               void
 18564 ;; Registers used:
 18565 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18566 ;; Tracked objects:
 18567 ;;		On entry : 0/0
 18568 ;;		On exit  : 0/0
 18569 ;;		Unchanged: 0/0
 18570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18571 ;;      Params:         0       3       0       0       0
 18572 ;;      Locals:         0       1       0       0       0
 18573 ;;      Temps:          0       5       0       0       0
 18574 ;;      Totals:         0       9       0       0       0
 18575 ;;Total ram usage:        9 bytes
 18576 ;; Hardware stack levels used:    1
 18577 ;; Hardware stack levels required when called:    1
 18578 ;; This function calls:
 18579 ;;		i2_FSH_AddressToBlock
 18580 ;;		i2_FSH_Sequence
 18581 ;; This function is called by:
 18582 ;;		i2_FSH_Write_IR_RF
 18583 ;; This function uses a non-reentrant model
 18584 ;;
 18585                           
 18586                           	psect	text112
 18587  00089A                     __ptext112:
 18588                           	opt stack 0
 18589  00089A                     i2_FSH_WriteIntArray:
 18590                           	opt stack 14
 18591                           
 18592                           ;FLASH.c: 137: unsigned char i;
 18593                           ;FLASH.c: 139: FSH_AddressToBlock(Array);
 18594                           
 18595                           ; BSR set to: 0
 18596                           ;incstack = 0
 18597  00089A  0100               	movlb	0	; () banked
 18598  00089C  5184               	movf	i2FSH_WriteIntArray@Array& (0+255),w,b
 18599  00089E  0100               	movlb	0	; () banked
 18600  0008A0  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 18601  0008A2  0100               	movlb	0	; () banked
 18602  0008A4  5185               	movf	(i2FSH_WriteIntArray@Array+1)& (0+255),w,b
 18603  0008A6  0100               	movlb	0	; () banked
 18604  0008A8  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 18605  0008AA  0100               	movlb	0	; () banked
 18606  0008AC  5186               	movf	(i2FSH_WriteIntArray@Array+2)& (0+255),w,b
 18607  0008AE  0100               	movlb	0	; () banked
 18608  0008B0  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 18609  0008B2  0100               	movlb	0	; () banked
 18610  0008B4  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 18611  0008B6  EC50  F00E         	call	i2_FSH_AddressToBlock	;wreg free
 18612                           
 18613                           ;FLASH.c: 141: for(i = 0; i<32; i++)
 18614  0008BA  0E00               	movlw	0
 18615  0008BC  0100               	movlb	0	; () banked
 18616  0008BE  6F8C               	movwf	i2FSH_WriteIntArray@i& (0+255),b
 18617  0008C0  D045               	goto	i2l5632
 18618                           
 18619                           ; BSR set to: 0
 18620                           
 18621                           ; BSR set to: 0
 18622  0008C2  D048               	goto	i2l1171
 18623  0008C4                     i2l5628:
 18624                           
 18625                           ; BSR set to: 0
 18626                           ;FLASH.c: 142: {
 18627                           ;FLASH.c: 144: TABLAT =(Array[i] & 0xFF00) >> 8;
 18628  0008C4  0100               	movlb	0	; () banked
 18629  0008C6  518C               	movf	i2FSH_WriteIntArray@i& (0+255),w,b
 18630  0008C8  0D02               	mullw	2
 18631  0008CA  50F3               	movf	prodl,w,c
 18632  0008CC  0100               	movlb	0	; () banked
 18633  0008CE  2584               	addwf	i2FSH_WriteIntArray@Array& (0+255),w,b
 18634  0008D0  0100               	movlb	0	; () banked
 18635  0008D2  6F87               	movwf	??i2_FSH_WriteIntArray& (0+255),b
 18636  0008D4  50F4               	movf	prodh,w,c
 18637  0008D6  0100               	movlb	0	; () banked
 18638  0008D8  2185               	addwfc	(i2FSH_WriteIntArray@Array+1)& (0+255),w,b
 18639  0008DA  0100               	movlb	0	; () banked
 18640  0008DC  6F88               	movwf	(??i2_FSH_WriteIntArray+1)& (0+255),b
 18641  0008DE  0E00               	movlw	0
 18642  0008E0  0100               	movlb	0	; () banked
 18643  0008E2  2186               	addwfc	(i2FSH_WriteIntArray@Array+2)& (0+255),w,b
 18644  0008E4  0100               	movlb	0	; () banked
 18645  0008E6  6F89               	movwf	(??i2_FSH_WriteIntArray+2)& (0+255),b
 18646  0008E8  C087  FFF6         	movff	??i2_FSH_WriteIntArray,tblptrl
 18647  0008EC  C088  FFF7         	movff	??i2_FSH_WriteIntArray+1,tblptrh
 18648  0008F0  C089  FFF8         	movff	??i2_FSH_WriteIntArray+2,tblptru
 18649  0008F4  0009               	tblrd		*+
 18650  0008F6  CFF5 F08A          	movff	tablat,??i2_FSH_WriteIntArray+3
 18651  0008FA  0009               	tblrd		*+
 18652  0008FC  CFF5 F08B          	movff	tablat,??i2_FSH_WriteIntArray+4
 18653  000900  C08B  F08A         	movff	??i2_FSH_WriteIntArray+4,??i2_FSH_WriteIntArray+3
 18654  000904  0100               	movlb	0	; () banked
 18655  000906  6B8B               	clrf	(??i2_FSH_WriteIntArray+4)& (0+255),b
 18656  000908  0100               	movlb	0	; () banked
 18657  00090A  518A               	movf	(??i2_FSH_WriteIntArray+3)& (0+255),w,b
 18658  00090C  6EF5               	movwf	tablat,c	;volatile
 18659  00090E  000D               	tblwt		*+	;# 
 18660                           
 18661                           ;FLASH.c: 146: TABLAT = (Array[i] & 0x00FF);
 18662  000910  0100               	movlb	0	; () banked
 18663  000912  518C               	movf	i2FSH_WriteIntArray@i& (0+255),w,b
 18664  000914  0D02               	mullw	2
 18665  000916  50F3               	movf	prodl,w,c
 18666  000918  0100               	movlb	0	; () banked
 18667  00091A  2584               	addwf	i2FSH_WriteIntArray@Array& (0+255),w,b
 18668  00091C  0100               	movlb	0	; () banked
 18669  00091E  6F87               	movwf	??i2_FSH_WriteIntArray& (0+255),b
 18670  000920  50F4               	movf	prodh,w,c
 18671  000922  0100               	movlb	0	; () banked
 18672  000924  2185               	addwfc	(i2FSH_WriteIntArray@Array+1)& (0+255),w,b
 18673  000926  0100               	movlb	0	; () banked
 18674  000928  6F88               	movwf	(??i2_FSH_WriteIntArray+1)& (0+255),b
 18675  00092A  0E00               	movlw	0
 18676  00092C  0100               	movlb	0	; () banked
 18677  00092E  2186               	addwfc	(i2FSH_WriteIntArray@Array+2)& (0+255),w,b
 18678  000930  0100               	movlb	0	; () banked
 18679  000932  6F89               	movwf	(??i2_FSH_WriteIntArray+2)& (0+255),b
 18680  000934  C087  FFF6         	movff	??i2_FSH_WriteIntArray,tblptrl
 18681  000938  C088  FFF7         	movff	??i2_FSH_WriteIntArray+1,tblptrh
 18682  00093C  C089  FFF8         	movff	??i2_FSH_WriteIntArray+2,tblptru
 18683  000940  0008               	tblrd		*
 18684  000942  CFF5 FFF5          	movff	tablat,tablat	;volatile
 18685  000946  000D               	tblwt		*+	;# 
 18686  000948  0100               	movlb	0	; () banked
 18687  00094A  2B8C               	incf	i2FSH_WriteIntArray@i& (0+255),f,b
 18688  00094C                     i2l5632:
 18689                           
 18690                           ; BSR set to: 0
 18691  00094C  0E1F               	movlw	31
 18692  00094E  0100               	movlb	0	; () banked
 18693  000950  658C               	cpfsgt	i2FSH_WriteIntArray@i& (0+255),b
 18694  000952  D7B8               	goto	i2l5628
 18695  000954                     i2l1171:
 18696                           
 18697                           ; BSR set to: 0
 18698                           ;FLASH.c: 148: }
 18699                           ;FLASH.c: 149: EECON1bits.WRERR = 0;
 18700  000954  96A6               	bcf	4006,3,c	;volatile
 18701                           
 18702                           ;FLASH.c: 150: EECON1bits.WREN = 1;
 18703  000956  84A6               	bsf	4006,2,c	;volatile
 18704                           
 18705                           ;FLASH.c: 151: EECON1bits.FREE = 0;
 18706  000958  98A6               	bcf	4006,4,c	;volatile
 18707                           
 18708                           ; BSR set to: 0
 18709                           ;FLASH.c: 152: FSH_Sequence();
 18710  00095A  ECA3  F00E         	call	i2_FSH_Sequence	;wreg free
 18711                           
 18712                           ;FLASH.c: 153: EECON1bits.WR = 1;
 18713  00095E  82A6               	bsf	4006,1,c	;volatile
 18714                           
 18715                           ;FLASH.c: 154: while(EECON1bits.WRERR);
 18716  000960  D000               	goto	i2l1172
 18717  000962                     i2l1172:
 18718  000962  B6A6               	btfsc	4006,3,c	;volatile
 18719  000964  D7FE               	goto	i2l1172
 18720                           
 18721                           ;FLASH.c: 155: EECON1bits.WREN = 0;
 18722  000966  94A6               	bcf	4006,2,c	;volatile
 18723  000968  0012               	return		;funcret
 18724  00096A                     __end_ofi2_FSH_WriteIntArray:
 18725                           	opt stack 0
 18726                           pclatu	equ	0xFFB
 18727                           pclath	equ	0xFFA
 18728                           tblptru	equ	0xFF8
 18729                           tblptrh	equ	0xFF7
 18730                           tblptrl	equ	0xFF6
 18731                           tablat	equ	0xFF5
 18732                           prodh	equ	0xFF4
 18733                           prodl	equ	0xFF3
 18734                           intcon	equ	0xFF2
 18735                           intcon2	equ	0xFF1
 18736                           intcon3	equ	0xFF0
 18737                           postinc0	equ	0xFEE
 18738                           fsr0h	equ	0xFEA
 18739                           fsr0l	equ	0xFE9
 18740                           wreg	equ	0xFE8
 18741                           postdec1	equ	0xFE5
 18742                           fsr1h	equ	0xFE2
 18743                           fsr1l	equ	0xFE1
 18744                           bsr	equ	0xFE0
 18745                           postinc2	equ	0xFDE
 18746                           postdec2	equ	0xFDD
 18747                           plusw2	equ	0xFDB
 18748                           fsr2h	equ	0xFDA
 18749                           fsr2l	equ	0xFD9
 18750                           status	equ	0xFD8
 18751                           
 18752 ;; *************** function i2_FSH_VerifyWriteIntArray *****************
 18753 ;; Defined at:
 18754 ;;		line 163 in file "FLASH.c"
 18755 ;; Parameters:    Size  Location     Type
 18756 ;;  ConstArray      3    0[BANK0 ] PTR const unsigned int 
 18757 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 18758 ;;  Array           2    3[BANK0 ] PTR unsigned int 
 18759 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 18760 ;; Auto vars:     Size  Location     Type
 18761 ;;  FSH_VerifyWr    1   10[BANK0 ] unsigned char 
 18762 ;; Return value:  Size  Location     Type
 18763 ;;                  1    wreg      unsigned char 
 18764 ;; Registers used:
 18765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18766 ;; Tracked objects:
 18767 ;;		On entry : 0/0
 18768 ;;		On exit  : 0/0
 18769 ;;		Unchanged: 0/0
 18770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18771 ;;      Params:         0       5       0       0       0
 18772 ;;      Locals:         0       1       0       0       0
 18773 ;;      Temps:          0       5       0       0       0
 18774 ;;      Totals:         0      11       0       0       0
 18775 ;;Total ram usage:       11 bytes
 18776 ;; Hardware stack levels used:    1
 18777 ;; This function calls:
 18778 ;;		Nothing
 18779 ;; This function is called by:
 18780 ;;		i2_FSH_Write_IR_RF
 18781 ;; This function uses a non-reentrant model
 18782 ;;
 18783                           
 18784                           	psect	text113
 18785  0010D0                     __ptext113:
 18786                           	opt stack 0
 18787  0010D0                     i2_FSH_VerifyWriteIntArray:
 18788                           	opt stack 15
 18789                           
 18790                           ;FLASH.c: 165: unsigned char i;
 18791                           ;FLASH.c: 167: for(i = 0; i<32; i++)
 18792                           
 18793                           ;incstack = 0
 18794  0010D0  0E00               	movlw	0
 18795  0010D2  0100               	movlb	0	; () banked
 18796  0010D4  6F8A               	movwf	i2FSH_VerifyWriteIntArray@i& (0+255),b
 18797  0010D6                     i2l5640:
 18798                           
 18799                           ; BSR set to: 0
 18800  0010D6  0E1F               	movlw	31
 18801  0010D8  0100               	movlb	0	; () banked
 18802  0010DA  658A               	cpfsgt	i2FSH_VerifyWriteIntArray@i& (0+255),b
 18803  0010DC  D001               	goto	i2l5644
 18804                           
 18805                           ; BSR set to: 0
 18806  0010DE  D031               	goto	i2l5654
 18807  0010E0                     i2l5644:
 18808                           
 18809                           ; BSR set to: 0
 18810                           ;FLASH.c: 168: {
 18811                           ;FLASH.c: 169: if(ConstArray[i] != Array[i])
 18812  0010E0  0100               	movlb	0	; () banked
 18813  0010E2  518A               	movf	i2FSH_VerifyWriteIntArray@i& (0+255),w,b
 18814  0010E4  0D02               	mullw	2
 18815  0010E6  50F3               	movf	prodl,w,c
 18816  0010E8  0100               	movlb	0	; () banked
 18817  0010EA  2583               	addwf	i2FSH_VerifyWriteIntArray@Array& (0+255),w,b
 18818  0010EC  6ED9               	movwf	fsr2l,c
 18819  0010EE  50F4               	movf	prodh,w,c
 18820  0010F0  0100               	movlb	0	; () banked
 18821  0010F2  2184               	addwfc	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),w,b
 18822  0010F4  6EDA               	movwf	fsr2h,c
 18823  0010F6  0100               	movlb	0	; () banked
 18824  0010F8  518A               	movf	i2FSH_VerifyWriteIntArray@i& (0+255),w,b
 18825  0010FA  0D02               	mullw	2
 18826  0010FC  50F3               	movf	prodl,w,c
 18827  0010FE  0100               	movlb	0	; () banked
 18828  001100  2580               	addwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),w,b
 18829  001102  0100               	movlb	0	; () banked
 18830  001104  6F87               	movwf	(??i2_FSH_VerifyWriteIntArray+2)& (0+255),b
 18831  001106  50F4               	movf	prodh,w,c
 18832  001108  0100               	movlb	0	; () banked
 18833  00110A  2181               	addwfc	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),w,b
 18834  00110C  0100               	movlb	0	; () banked
 18835  00110E  6F88               	movwf	(??i2_FSH_VerifyWriteIntArray+3)& (0+255),b
 18836  001110  0E00               	movlw	0
 18837  001112  0100               	movlb	0	; () banked
 18838  001114  2182               	addwfc	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),w,b
 18839  001116  0100               	movlb	0	; () banked
 18840  001118  6F89               	movwf	(??i2_FSH_VerifyWriteIntArray+4)& (0+255),b
 18841  00111A  C087  FFF6         	movff	??i2_FSH_VerifyWriteIntArray+2,tblptrl
 18842  00111E  C088  FFF7         	movff	??i2_FSH_VerifyWriteIntArray+3,tblptrh
 18843  001122  C089  FFF8         	movff	??i2_FSH_VerifyWriteIntArray+4,tblptru
 18844  001126  50DE               	movf	postinc2,w,c
 18845  001128  0009               	tblrd		*+
 18846  00112A  18F5               	xorwf	tablat,w,c
 18847  00112C  E105               	bnz	i2u576_40
 18848  00112E  50DE               	movf	postinc2,w,c
 18849  001130  0009               	tblrd		*+
 18850  001132  18F5               	xorwf	tablat,w,c
 18851  001134  B4D8               	btfsc	status,2,c
 18852  001136  D002               	goto	i2l5650
 18853  001138                     i2u576_40:
 18854                           
 18855                           ; BSR set to: 0
 18856                           ;FLASH.c: 170: {
 18857                           ;FLASH.c: 171: return 0;
 18858  001138  0E00               	movlw	0
 18859                           
 18860                           ; BSR set to: 0
 18861  00113A  0012               	return	
 18862  00113C                     i2l5650:
 18863                           
 18864                           ; BSR set to: 0
 18865  00113C  0100               	movlb	0	; () banked
 18866  00113E  2B8A               	incf	i2FSH_VerifyWriteIntArray@i& (0+255),f,b
 18867  001140  D7CA               	goto	i2l5640
 18868  001142                     i2l5654:
 18869                           
 18870                           ; BSR set to: 0
 18871                           ;FLASH.c: 172: }
 18872                           ;FLASH.c: 173: }
 18873                           ;FLASH.c: 174: return 1;
 18874  001142  0E01               	movlw	1
 18875  001144  0012               	return	
 18876                           
 18877                           ; BSR set to: 0
 18878                           
 18879                           ; BSR set to: 0
 18880  001146  0012               	return		;funcret
 18881  001148                     __end_ofi2_FSH_VerifyWriteIntArray:
 18882                           	opt stack 0
 18883                           pclatu	equ	0xFFB
 18884                           pclath	equ	0xFFA
 18885                           tblptru	equ	0xFF8
 18886                           tblptrh	equ	0xFF7
 18887                           tblptrl	equ	0xFF6
 18888                           tablat	equ	0xFF5
 18889                           prodh	equ	0xFF4
 18890                           prodl	equ	0xFF3
 18891                           intcon	equ	0xFF2
 18892                           intcon2	equ	0xFF1
 18893                           intcon3	equ	0xFF0
 18894                           postinc0	equ	0xFEE
 18895                           fsr0h	equ	0xFEA
 18896                           fsr0l	equ	0xFE9
 18897                           wreg	equ	0xFE8
 18898                           postdec1	equ	0xFE5
 18899                           fsr1h	equ	0xFE2
 18900                           fsr1l	equ	0xFE1
 18901                           bsr	equ	0xFE0
 18902                           postinc2	equ	0xFDE
 18903                           postdec2	equ	0xFDD
 18904                           plusw2	equ	0xFDB
 18905                           fsr2h	equ	0xFDA
 18906                           fsr2l	equ	0xFD9
 18907                           status	equ	0xFD8
 18908                           
 18909 ;; *************** function i2_FSH_EraseBlock *****************
 18910 ;; Defined at:
 18911 ;;		line 86 in file "FLASH.c"
 18912 ;; Parameters:    Size  Location     Type
 18913 ;;  Address         4   13[BANK0 ] unsigned long 
 18914 ;; Auto vars:     Size  Location     Type
 18915 ;;  FSH_EraseBlo    4    0        unsigned long 
 18916 ;;  FSH_EraseBlo    1   19[BANK0 ] unsigned char 
 18917 ;;  FSH_EraseBlo    1   18[BANK0 ] unsigned char 
 18918 ;;  FSH_EraseBlo    1   17[BANK0 ] unsigned char 
 18919 ;; Return value:  Size  Location     Type
 18920 ;;		None               void
 18921 ;; Registers used:
 18922 ;;		wreg, status,2, status,0, cstack
 18923 ;; Tracked objects:
 18924 ;;		On entry : 0/0
 18925 ;;		On exit  : 0/0
 18926 ;;		Unchanged: 0/0
 18927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18928 ;;      Params:         0       4       0       0       0
 18929 ;;      Locals:         0       3       0       0       0
 18930 ;;      Temps:          0       0       0       0       0
 18931 ;;      Totals:         0       7       0       0       0
 18932 ;;Total ram usage:        7 bytes
 18933 ;; Hardware stack levels used:    1
 18934 ;; Hardware stack levels required when called:    2
 18935 ;; This function calls:
 18936 ;;		i2_FSH_AddressToBlock
 18937 ;;		i2_FSH_Sequence
 18938 ;;		i2_MSC_DelayMS
 18939 ;; This function is called by:
 18940 ;;		i2_FSH_Write_IR_RF
 18941 ;; This function uses a non-reentrant model
 18942 ;;
 18943                           
 18944                           	psect	text114
 18945  000F40                     __ptext114:
 18946                           	opt stack 0
 18947  000F40                     i2_FSH_EraseBlock:
 18948                           	opt stack 13
 18949                           
 18950                           ;FLASH.c: 88: unsigned char highint = INTCONbits.GIE;
 18951                           
 18952                           ; BSR set to: 0
 18953                           ;incstack = 0
 18954  000F40  0E00               	movlw	0
 18955  000F42  BEF2               	btfsc	intcon,7,c	;volatile
 18956  000F44  0E01               	movlw	1
 18957  000F46  0100               	movlb	0	; () banked
 18958  000F48  6F91               	movwf	i2FSH_EraseBlock@highint& (0+255),b
 18959                           
 18960                           ;FLASH.c: 89: unsigned char lowint = INTCONbits.PEIE;
 18961  000F4A  0E00               	movlw	0
 18962  000F4C  BCF2               	btfsc	intcon,6,c	;volatile
 18963  000F4E  0E01               	movlw	1
 18964  000F50  0100               	movlb	0	; () banked
 18965  000F52  6F92               	movwf	i2FSH_EraseBlock@lowint& (0+255),b
 18966                           
 18967                           ; BSR set to: 0
 18968                           ;FLASH.c: 90: unsigned char WriteTries;
 18969                           ;FLASH.c: 91: unsigned long i;
 18970                           ;FLASH.c: 93: INTCONbits.GIE = 0;
 18971  000F54  9EF2               	bcf	intcon,7,c	;volatile
 18972                           
 18973                           ; BSR set to: 0
 18974                           ;FLASH.c: 94: INTCONbits.PEIE = 0;
 18975  000F56  9CF2               	bcf	intcon,6,c	;volatile
 18976  000F58  D000               	goto	i2l5582
 18977  000F5A                     i2l5582:
 18978                           
 18979                           ; BSR set to: 0
 18980                           ;FLASH.c: 97: FSH_AddressToBlock(Address);
 18981  000F5A  C08D  F080         	movff	i2FSH_EraseBlock@Address,i2FSH_AddressToBlock@Address
 18982  000F5E  C08E  F081         	movff	i2FSH_EraseBlock@Address+1,i2FSH_AddressToBlock@Address+1
 18983  000F62  C08F  F082         	movff	i2FSH_EraseBlock@Address+2,i2FSH_AddressToBlock@Address+2
 18984  000F66  C090  F083         	movff	i2FSH_EraseBlock@Address+3,i2FSH_AddressToBlock@Address+3
 18985  000F6A  EC50  F00E         	call	i2_FSH_AddressToBlock	;wreg free
 18986                           
 18987                           ;FLASH.c: 99: WriteTries = 1;
 18988  000F6E  0E01               	movlw	1
 18989  000F70  0100               	movlb	0	; () banked
 18990  000F72  6F93               	movwf	i2FSH_EraseBlock@WriteTries& (0+255),b
 18991                           
 18992                           ; BSR set to: 0
 18993                           ;FLASH.c: 101: EECON1bits.WRERR = 0;
 18994  000F74  96A6               	bcf	4006,3,c	;volatile
 18995                           
 18996                           ; BSR set to: 0
 18997                           ;FLASH.c: 102: EECON1bits.WREN = 1;
 18998  000F76  84A6               	bsf	4006,2,c	;volatile
 18999                           
 19000                           ; BSR set to: 0
 19001                           ;FLASH.c: 103: EECON1bits.FREE = 1;
 19002  000F78  88A6               	bsf	4006,4,c	;volatile
 19003                           
 19004                           ; BSR set to: 0
 19005                           ;FLASH.c: 104: FSH_Sequence();
 19006  000F7A  ECA3  F00E         	call	i2_FSH_Sequence	;wreg free
 19007                           
 19008                           ;FLASH.c: 105: EECON1bits.WR = 1;
 19009  000F7E  82A6               	bsf	4006,1,c	;volatile
 19010                           
 19011                           ;FLASH.c: 106: __nop();
 19012  000F80  F000               	nop	
 19013                           
 19014                           ;FLASH.c: 107: __nop();
 19015  000F82  F000               	nop	
 19016                           
 19017                           ;FLASH.c: 108: MSC_DelayMS(500);
 19018  000F84  0EF4               	movlw	244
 19019  000F86  0100               	movlb	0	; () banked
 19020  000F88  6F84               	movwf	i2MSC_DelayMS@US& (0+255),b
 19021  000F8A  0E01               	movlw	1
 19022  000F8C  6F85               	movwf	(i2MSC_DelayMS@US+1)& (0+255),b
 19023  000F8E  0E00               	movlw	0
 19024  000F90  6F86               	movwf	(i2MSC_DelayMS@US+2)& (0+255),b
 19025  000F92  0E00               	movlw	0
 19026  000F94  6F87               	movwf	(i2MSC_DelayMS@US+3)& (0+255),b
 19027  000F96  EC0A  F009         	call	i2_MSC_DelayMS	;wreg free
 19028                           
 19029                           ;FLASH.c: 110: EECON1bits.WREN = 0;
 19030  000F9A  94A6               	bcf	4006,2,c	;volatile
 19031                           
 19032                           ;FLASH.c: 111: if(EECON1bits.WRERR)
 19033  000F9C  A6A6               	btfss	4006,3,c	;volatile
 19034  000F9E  D008               	goto	i2l5612
 19035                           
 19036                           ;FLASH.c: 112: {
 19037                           ;FLASH.c: 113: WriteTries++;
 19038  000FA0  0100               	movlb	0	; () banked
 19039  000FA2  2B93               	incf	i2FSH_EraseBlock@WriteTries& (0+255),f,b
 19040                           
 19041                           ; BSR set to: 0
 19042                           ;FLASH.c: 114: if(WriteTries < 10)
 19043  000FA4  0E0A               	movlw	10
 19044  000FA6  0100               	movlb	0	; () banked
 19045  000FA8  6193               	cpfslt	i2FSH_EraseBlock@WriteTries& (0+255),b
 19046  000FAA  D002               	goto	i2l5612
 19047                           
 19048                           ; BSR set to: 0
 19049                           ;FLASH.c: 115: {
 19050                           ;FLASH.c: 116: goto restart;
 19051  000FAC  D7D6               	goto	i2l5582
 19052                           
 19053                           ; BSR set to: 0
 19054  000FAE  D000               	goto	i2l5612
 19055  000FB0                     i2l5612:
 19056                           
 19057                           ;FLASH.c: 117: }
 19058                           ;FLASH.c: 118: }
 19059                           ;FLASH.c: 120: if(highint)
 19060  000FB0  0100               	movlb	0	; () banked
 19061  000FB2  5191               	movf	i2FSH_EraseBlock@highint& (0+255),w,b
 19062  000FB4  0100               	movlb	0	; () banked
 19063  000FB6  B4D8               	btfsc	status,2,c
 19064  000FB8  D002               	goto	i2l5616
 19065                           
 19066                           ; BSR set to: 0
 19067                           ;FLASH.c: 121: {
 19068                           ;FLASH.c: 122: INTCONbits.GIE = 1;
 19069  000FBA  8EF2               	bsf	intcon,7,c	;volatile
 19070  000FBC  D000               	goto	i2l5616
 19071  000FBE                     i2l5616:
 19072                           
 19073                           ; BSR set to: 0
 19074                           ;FLASH.c: 123: }
 19075                           ;FLASH.c: 124: if(lowint)
 19076  000FBE  0100               	movlb	0	; () banked
 19077  000FC0  5192               	movf	i2FSH_EraseBlock@lowint& (0+255),w,b
 19078  000FC2  0100               	movlb	0	; () banked
 19079  000FC4  B4D8               	btfsc	status,2,c
 19080  000FC6  0012               	return	
 19081                           
 19082                           ; BSR set to: 0
 19083                           ;FLASH.c: 125: {
 19084                           ;FLASH.c: 126: INTCONbits.PEIE = 1;
 19085  000FC8  8CF2               	bsf	intcon,6,c	;volatile
 19086  000FCA  0012               	return	
 19087                           
 19088                           ; BSR set to: 0
 19089                           
 19090                           ; BSR set to: 0
 19091  000FCC  0012               	return		;funcret
 19092  000FCE                     __end_ofi2_FSH_EraseBlock:
 19093                           	opt stack 0
 19094                           pclatu	equ	0xFFB
 19095                           pclath	equ	0xFFA
 19096                           tblptru	equ	0xFF8
 19097                           tblptrh	equ	0xFF7
 19098                           tblptrl	equ	0xFF6
 19099                           tablat	equ	0xFF5
 19100                           prodh	equ	0xFF4
 19101                           prodl	equ	0xFF3
 19102                           intcon	equ	0xFF2
 19103                           intcon2	equ	0xFF1
 19104                           intcon3	equ	0xFF0
 19105                           postinc0	equ	0xFEE
 19106                           fsr0h	equ	0xFEA
 19107                           fsr0l	equ	0xFE9
 19108                           wreg	equ	0xFE8
 19109                           postdec1	equ	0xFE5
 19110                           fsr1h	equ	0xFE2
 19111                           fsr1l	equ	0xFE1
 19112                           bsr	equ	0xFE0
 19113                           postinc2	equ	0xFDE
 19114                           postdec2	equ	0xFDD
 19115                           plusw2	equ	0xFDB
 19116                           fsr2h	equ	0xFDA
 19117                           fsr2l	equ	0xFD9
 19118                           status	equ	0xFD8
 19119                           
 19120 ;; *************** function i2_MSC_DelayMS *****************
 19121 ;; Defined at:
 19122 ;;		line 47 in file "MISC.c"
 19123 ;; Parameters:    Size  Location     Type
 19124 ;;  US              4    4[BANK0 ] long 
 19125 ;; Auto vars:     Size  Location     Type
 19126 ;;  MSC_DelayMS     4    9[BANK0 ] long 
 19127 ;; Return value:  Size  Location     Type
 19128 ;;		None               void
 19129 ;; Registers used:
 19130 ;;		wreg, status,2, status,0, cstack
 19131 ;; Tracked objects:
 19132 ;;		On entry : 0/0
 19133 ;;		On exit  : 0/0
 19134 ;;		Unchanged: 0/0
 19135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 19136 ;;      Params:         0       4       0       0       0
 19137 ;;      Locals:         0       4       0       0       0
 19138 ;;      Temps:          0       1       0       0       0
 19139 ;;      Totals:         0       9       0       0       0
 19140 ;;Total ram usage:        9 bytes
 19141 ;; Hardware stack levels used:    1
 19142 ;; Hardware stack levels required when called:    1
 19143 ;; This function calls:
 19144 ;;		i2_MSC_DelayNOP
 19145 ;; This function is called by:
 19146 ;;		i2_FSH_EraseBlock
 19147 ;; This function uses a non-reentrant model
 19148 ;;
 19149                           
 19150                           	psect	text115
 19151  001214                     __ptext115:
 19152                           	opt stack 0
 19153  001214                     i2_MSC_DelayMS:
 19154                           	opt stack 13
 19155                           
 19156                           ;MISC.c: 49: long i;
 19157                           ;MISC.c: 51: for(i=0; i<US; i++)
 19158                           
 19159                           ; BSR set to: 0
 19160                           ;incstack = 0
 19161  001214  0E00               	movlw	0
 19162  001216  0100               	movlb	0	; () banked
 19163  001218  6F89               	movwf	i2MSC_DelayMS@i& (0+255),b
 19164  00121A  0E00               	movlw	0
 19165  00121C  6F8A               	movwf	(i2MSC_DelayMS@i+1)& (0+255),b
 19166  00121E  0E00               	movlw	0
 19167  001220  6F8B               	movwf	(i2MSC_DelayMS@i+2)& (0+255),b
 19168  001222  0E00               	movlw	0
 19169  001224  6F8C               	movwf	(i2MSC_DelayMS@i+3)& (0+255),b
 19170  001226  D00F               	goto	i2l5224
 19171  001228                     i2l5220:
 19172                           
 19173                           ; BSR set to: 0
 19174                           ;MISC.c: 52: {
 19175                           ;MISC.c: 53: MSC_DelayNOP(466);
 19176  001228  0E01               	movlw	1
 19177  00122A  0100               	movlb	0	; () banked
 19178  00122C  6F81               	movwf	(i2MSC_DelayNOP@NOPs+1)& (0+255),b
 19179  00122E  0ED2               	movlw	210
 19180  001230  6F80               	movwf	i2MSC_DelayNOP@NOPs& (0+255),b
 19181  001232  EC07  F00C         	call	i2_MSC_DelayNOP	;wreg free
 19182  001236  0E01               	movlw	1
 19183  001238  0100               	movlb	0	; () banked
 19184  00123A  2789               	addwf	i2MSC_DelayMS@i& (0+255),f,b
 19185  00123C  0E00               	movlw	0
 19186  00123E  238A               	addwfc	(i2MSC_DelayMS@i+1)& (0+255),f,b
 19187  001240  238B               	addwfc	(i2MSC_DelayMS@i+2)& (0+255),f,b
 19188  001242  238C               	addwfc	(i2MSC_DelayMS@i+3)& (0+255),f,b
 19189  001244  D000               	goto	i2l5224
 19190  001246                     i2l5224:
 19191                           
 19192                           ; BSR set to: 0
 19193  001246  0100               	movlb	0	; () banked
 19194  001248  5184               	movf	i2MSC_DelayMS@US& (0+255),w,b
 19195  00124A  0100               	movlb	0	; () banked
 19196  00124C  5D89               	subwf	i2MSC_DelayMS@i& (0+255),w,b
 19197  00124E  0100               	movlb	0	; () banked
 19198  001250  5185               	movf	(i2MSC_DelayMS@US+1)& (0+255),w,b
 19199  001252  0100               	movlb	0	; () banked
 19200  001254  598A               	subwfb	(i2MSC_DelayMS@i+1)& (0+255),w,b
 19201  001256  0100               	movlb	0	; () banked
 19202  001258  5186               	movf	(i2MSC_DelayMS@US+2)& (0+255),w,b
 19203  00125A  0100               	movlb	0	; () banked
 19204  00125C  598B               	subwfb	(i2MSC_DelayMS@i+2)& (0+255),w,b
 19205  00125E  0100               	movlb	0	; () banked
 19206  001260  518C               	movf	(i2MSC_DelayMS@i+3)& (0+255),w,b
 19207  001262  0A80               	xorlw	128
 19208  001264  0100               	movlb	0	; () banked
 19209  001266  6F88               	movwf	??i2_MSC_DelayMS& (0+255),b
 19210  001268  0100               	movlb	0	; () banked
 19211  00126A  5187               	movf	(i2MSC_DelayMS@US+3)& (0+255),w,b
 19212  00126C  0A80               	xorlw	128
 19213  00126E  0100               	movlb	0	; () banked
 19214  001270  5988               	subwfb	??i2_MSC_DelayMS& (0+255),w,b
 19215  001272  A0D8               	btfss	status,0,c
 19216  001274  D7D9               	goto	i2l5220
 19217                           
 19218                           ; BSR set to: 0
 19219                           
 19220                           ; BSR set to: 0
 19221  001276  0012               	return		;funcret
 19222  001278                     __end_ofi2_MSC_DelayMS:
 19223                           	opt stack 0
 19224                           pclatu	equ	0xFFB
 19225                           pclath	equ	0xFFA
 19226                           tblptru	equ	0xFF8
 19227                           tblptrh	equ	0xFF7
 19228                           tblptrl	equ	0xFF6
 19229                           tablat	equ	0xFF5
 19230                           prodh	equ	0xFF4
 19231                           prodl	equ	0xFF3
 19232                           intcon	equ	0xFF2
 19233                           intcon2	equ	0xFF1
 19234                           intcon3	equ	0xFF0
 19235                           postinc0	equ	0xFEE
 19236                           fsr0h	equ	0xFEA
 19237                           fsr0l	equ	0xFE9
 19238                           wreg	equ	0xFE8
 19239                           postdec1	equ	0xFE5
 19240                           fsr1h	equ	0xFE2
 19241                           fsr1l	equ	0xFE1
 19242                           bsr	equ	0xFE0
 19243                           postinc2	equ	0xFDE
 19244                           postdec2	equ	0xFDD
 19245                           plusw2	equ	0xFDB
 19246                           fsr2h	equ	0xFDA
 19247                           fsr2l	equ	0xFD9
 19248                           status	equ	0xFD8
 19249                           
 19250 ;; *************** function i2_MSC_DelayNOP *****************
 19251 ;; Defined at:
 19252 ;;		line 62 in file "MISC.c"
 19253 ;; Parameters:    Size  Location     Type
 19254 ;;  NOPs            2    0[BANK0 ] unsigned int 
 19255 ;; Auto vars:     Size  Location     Type
 19256 ;;  MSC_DelayNOP    2    2[BANK0 ] unsigned int 
 19257 ;; Return value:  Size  Location     Type
 19258 ;;		None               void
 19259 ;; Registers used:
 19260 ;;		wreg, status,2, status,0
 19261 ;; Tracked objects:
 19262 ;;		On entry : 0/0
 19263 ;;		On exit  : 0/0
 19264 ;;		Unchanged: 0/0
 19265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 19266 ;;      Params:         0       2       0       0       0
 19267 ;;      Locals:         0       2       0       0       0
 19268 ;;      Temps:          0       0       0       0       0
 19269 ;;      Totals:         0       4       0       0       0
 19270 ;;Total ram usage:        4 bytes
 19271 ;; Hardware stack levels used:    1
 19272 ;; This function calls:
 19273 ;;		Nothing
 19274 ;; This function is called by:
 19275 ;;		i2_MSC_DelayMS
 19276 ;; This function uses a non-reentrant model
 19277 ;;
 19278                           
 19279                           	psect	text116
 19280  00180E                     __ptext116:
 19281                           	opt stack 0
 19282  00180E                     i2_MSC_DelayNOP:
 19283                           	opt stack 13
 19284                           
 19285                           ;MISC.c: 64: unsigned int i;
 19286                           ;MISC.c: 65: for(i=0; i<NOPs; i++)
 19287                           
 19288                           ; BSR set to: 0
 19289                           ;incstack = 0
 19290  00180E  0E00               	movlw	0
 19291  001810  0100               	movlb	0	; () banked
 19292  001812  6F83               	movwf	(i2MSC_DelayNOP@i+1)& (0+255),b
 19293  001814  0E00               	movlw	0
 19294  001816  6F82               	movwf	i2MSC_DelayNOP@i& (0+255),b
 19295  001818  D005               	goto	i2l5142
 19296  00181A                     i2l596:
 19297                           
 19298                           ; BSR set to: 0
 19299                           ;MISC.c: 66: {
 19300                           ;MISC.c: 67: __nop();
 19301  00181A  F000               	nop	
 19302  00181C  0100               	movlb	0	; () banked
 19303  00181E  4B82               	infsnz	i2MSC_DelayNOP@i& (0+255),f,b
 19304  001820  2B83               	incf	(i2MSC_DelayNOP@i+1)& (0+255),f,b
 19305  001822  D000               	goto	i2l5142
 19306  001824                     i2l5142:
 19307                           
 19308                           ; BSR set to: 0
 19309  001824  0100               	movlb	0	; () banked
 19310  001826  5180               	movf	i2MSC_DelayNOP@NOPs& (0+255),w,b
 19311  001828  0100               	movlb	0	; () banked
 19312  00182A  5D82               	subwf	i2MSC_DelayNOP@i& (0+255),w,b
 19313  00182C  0100               	movlb	0	; () banked
 19314  00182E  5181               	movf	(i2MSC_DelayNOP@NOPs+1)& (0+255),w,b
 19315  001830  0100               	movlb	0	; () banked
 19316  001832  5983               	subwfb	(i2MSC_DelayNOP@i+1)& (0+255),w,b
 19317  001834  A0D8               	btfss	status,0,c
 19318  001836  D7F1               	goto	i2l596
 19319                           
 19320                           ; BSR set to: 0
 19321                           
 19322                           ; BSR set to: 0
 19323  001838  0012               	return		;funcret
 19324  00183A                     __end_ofi2_MSC_DelayNOP:
 19325                           	opt stack 0
 19326                           pclatu	equ	0xFFB
 19327                           pclath	equ	0xFFA
 19328                           tblptru	equ	0xFF8
 19329                           tblptrh	equ	0xFF7
 19330                           tblptrl	equ	0xFF6
 19331                           tablat	equ	0xFF5
 19332                           prodh	equ	0xFF4
 19333                           prodl	equ	0xFF3
 19334                           intcon	equ	0xFF2
 19335                           intcon2	equ	0xFF1
 19336                           intcon3	equ	0xFF0
 19337                           postinc0	equ	0xFEE
 19338                           fsr0h	equ	0xFEA
 19339                           fsr0l	equ	0xFE9
 19340                           wreg	equ	0xFE8
 19341                           postdec1	equ	0xFE5
 19342                           fsr1h	equ	0xFE2
 19343                           fsr1l	equ	0xFE1
 19344                           bsr	equ	0xFE0
 19345                           postinc2	equ	0xFDE
 19346                           postdec2	equ	0xFDD
 19347                           plusw2	equ	0xFDB
 19348                           fsr2h	equ	0xFDA
 19349                           fsr2l	equ	0xFD9
 19350                           status	equ	0xFD8
 19351                           
 19352 ;; *************** function i2_FSH_Sequence *****************
 19353 ;; Defined at:
 19354 ;;		line 57 in file "FLASH.c"
 19355 ;; Parameters:    Size  Location     Type
 19356 ;;		None
 19357 ;; Auto vars:     Size  Location     Type
 19358 ;;		None
 19359 ;; Return value:  Size  Location     Type
 19360 ;;		None               void
 19361 ;; Registers used:
 19362 ;;		None
 19363 ;; Tracked objects:
 19364 ;;		On entry : 0/0
 19365 ;;		On exit  : 0/0
 19366 ;;		Unchanged: 0/0
 19367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 19368 ;;      Params:         0       0       0       0       0
 19369 ;;      Locals:         0       0       0       0       0
 19370 ;;      Temps:          0       0       0       0       0
 19371 ;;      Totals:         0       0       0       0       0
 19372 ;;Total ram usage:        0 bytes
 19373 ;; Hardware stack levels used:    1
 19374 ;; This function calls:
 19375 ;;		Nothing
 19376 ;; This function is called by:
 19377 ;;		i2_FSH_EraseBlock
 19378 ;;		i2_FSH_WriteIntArray
 19379 ;;		i2_FSH_Write_IR_RF
 19380 ;; This function uses a non-reentrant model
 19381 ;;
 19382                           
 19383                           	psect	text117
 19384  001D46                     __ptext117:
 19385                           	opt stack 0
 19386  001D46                     i2_FSH_Sequence:
 19387                           	opt stack 14
 19388                           
 19389                           ; BSR set to: 0
 19390                           ;incstack = 0
 19391  001D46  0E55               	movlw	85	;# 
 19392  001D48  6EA7               	movwf	4007,c	;# 
 19393  001D4A  0EAA               	movlw	170	;# 
 19394  001D4C  6EA7               	movwf	4007,c	;# 
 19395  001D4E  0012               	return		;funcret
 19396  001D50                     __end_ofi2_FSH_Sequence:
 19397                           	opt stack 0
 19398                           pclatu	equ	0xFFB
 19399                           pclath	equ	0xFFA
 19400                           tblptru	equ	0xFF8
 19401                           tblptrh	equ	0xFF7
 19402                           tblptrl	equ	0xFF6
 19403                           tablat	equ	0xFF5
 19404                           prodh	equ	0xFF4
 19405                           prodl	equ	0xFF3
 19406                           intcon	equ	0xFF2
 19407                           intcon2	equ	0xFF1
 19408                           intcon3	equ	0xFF0
 19409                           postinc0	equ	0xFEE
 19410                           fsr0h	equ	0xFEA
 19411                           fsr0l	equ	0xFE9
 19412                           wreg	equ	0xFE8
 19413                           postdec1	equ	0xFE5
 19414                           fsr1h	equ	0xFE2
 19415                           fsr1l	equ	0xFE1
 19416                           bsr	equ	0xFE0
 19417                           postinc2	equ	0xFDE
 19418                           postdec2	equ	0xFDD
 19419                           plusw2	equ	0xFDB
 19420                           fsr2h	equ	0xFDA
 19421                           fsr2l	equ	0xFD9
 19422                           status	equ	0xFD8
 19423                           
 19424 ;; *************** function i2_FSH_AddressToBlock *****************
 19425 ;; Defined at:
 19426 ;;		line 464 in file "FLASH.c"
 19427 ;; Parameters:    Size  Location     Type
 19428 ;;  Address         4    0[BANK0 ] unsigned long 
 19429 ;; Auto vars:     Size  Location     Type
 19430 ;;		None
 19431 ;; Return value:  Size  Location     Type
 19432 ;;		None               void
 19433 ;; Registers used:
 19434 ;;		wreg, status,2, status,0
 19435 ;; Tracked objects:
 19436 ;;		On entry : 0/0
 19437 ;;		On exit  : 0/0
 19438 ;;		Unchanged: 0/0
 19439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 19440 ;;      Params:         0       4       0       0       0
 19441 ;;      Locals:         0       0       0       0       0
 19442 ;;      Temps:          0       0       0       0       0
 19443 ;;      Totals:         0       4       0       0       0
 19444 ;;Total ram usage:        4 bytes
 19445 ;; Hardware stack levels used:    1
 19446 ;; This function calls:
 19447 ;;		Nothing
 19448 ;; This function is called by:
 19449 ;;		i2_FSH_EraseBlock
 19450 ;;		i2_FSH_WriteIntArray
 19451 ;;		i2_FSH_Write_IR_RF
 19452 ;; This function uses a non-reentrant model
 19453 ;;
 19454                           
 19455                           	psect	text118
 19456  001CA0                     __ptext118:
 19457                           	opt stack 0
 19458  001CA0                     i2_FSH_AddressToBlock:
 19459                           	opt stack 14
 19460                           
 19461                           ;FLASH.c: 466: TBLPTRU = (Address & 0x002F0000) >> 16;
 19462                           
 19463                           ;incstack = 0
 19464  001CA0  0100               	movlb	0	; () banked
 19465  001CA2  5182               	movf	(i2FSH_AddressToBlock@Address+2)& (0+255),w,b
 19466  001CA4  0B2F               	andlw	47
 19467  001CA6  6EF8               	movwf	tblptru,c	;volatile
 19468                           
 19469                           ; BSR set to: 0
 19470                           ;FLASH.c: 467: TBLPTRH = (Address & 0x0000FF00) >> 8;
 19471  001CA8  C081  FFF7         	movff	i2FSH_AddressToBlock@Address+1,tblptrh	;volatile
 19472                           
 19473                           ; BSR set to: 0
 19474                           ;FLASH.c: 468: TBLPTRL = (Address & 0x000000FF);
 19475  001CAC  C080  FFF6         	movff	i2FSH_AddressToBlock@Address,tblptrl	;volatile
 19476                           
 19477                           ; BSR set to: 0
 19478  001CB0  0012               	return		;funcret
 19479  001CB2                     __end_ofi2_FSH_AddressToBlock:
 19480                           	opt stack 0
 19481                           pclatu	equ	0xFFB
 19482                           pclath	equ	0xFFA
 19483                           tblptru	equ	0xFF8
 19484                           tblptrh	equ	0xFF7
 19485                           tblptrl	equ	0xFF6
 19486                           tablat	equ	0xFF5
 19487                           prodh	equ	0xFF4
 19488                           prodl	equ	0xFF3
 19489                           intcon	equ	0xFF2
 19490                           intcon2	equ	0xFF1
 19491                           intcon3	equ	0xFF0
 19492                           postinc0	equ	0xFEE
 19493                           fsr0h	equ	0xFEA
 19494                           fsr0l	equ	0xFE9
 19495                           wreg	equ	0xFE8
 19496                           postdec1	equ	0xFE5
 19497                           fsr1h	equ	0xFE2
 19498                           fsr1l	equ	0xFE1
 19499                           bsr	equ	0xFE0
 19500                           postinc2	equ	0xFDE
 19501                           postdec2	equ	0xFDD
 19502                           plusw2	equ	0xFDB
 19503                           fsr2h	equ	0xFDA
 19504                           fsr2l	equ	0xFD9
 19505                           status	equ	0xFD8
 19506                           pclatu	equ	0xFFB
 19507                           pclath	equ	0xFFA
 19508                           tblptru	equ	0xFF8
 19509                           tblptrh	equ	0xFF7
 19510                           tblptrl	equ	0xFF6
 19511                           tablat	equ	0xFF5
 19512                           prodh	equ	0xFF4
 19513                           prodl	equ	0xFF3
 19514                           intcon	equ	0xFF2
 19515                           intcon2	equ	0xFF1
 19516                           intcon3	equ	0xFF0
 19517                           postinc0	equ	0xFEE
 19518                           fsr0h	equ	0xFEA
 19519                           fsr0l	equ	0xFE9
 19520                           wreg	equ	0xFE8
 19521                           postdec1	equ	0xFE5
 19522                           fsr1h	equ	0xFE2
 19523                           fsr1l	equ	0xFE1
 19524                           bsr	equ	0xFE0
 19525                           postinc2	equ	0xFDE
 19526                           postdec2	equ	0xFDD
 19527                           plusw2	equ	0xFDB
 19528                           fsr2h	equ	0xFDA
 19529                           fsr2l	equ	0xFD9
 19530                           status	equ	0xFD8
 19531                           
 19532                           	psect	param0
 19533  0000                     pclatu	equ	0xFFB
 19534                           pclath	equ	0xFFA
 19535                           tblptru	equ	0xFF8
 19536                           tblptrh	equ	0xFF7
 19537                           tblptrl	equ	0xFF6
 19538                           tablat	equ	0xFF5
 19539                           prodh	equ	0xFF4
 19540                           prodl	equ	0xFF3
 19541                           intcon	equ	0xFF2
 19542                           intcon2	equ	0xFF1
 19543                           intcon3	equ	0xFF0
 19544                           postinc0	equ	0xFEE
 19545                           fsr0h	equ	0xFEA
 19546                           fsr0l	equ	0xFE9
 19547                           wreg	equ	0xFE8
 19548                           postdec1	equ	0xFE5
 19549                           fsr1h	equ	0xFE2
 19550                           fsr1l	equ	0xFE1
 19551                           bsr	equ	0xFE0
 19552                           postinc2	equ	0xFDE
 19553                           postdec2	equ	0xFDD
 19554                           plusw2	equ	0xFDB
 19555                           fsr2h	equ	0xFDA
 19556                           fsr2l	equ	0xFD9
 19557                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    66
    Data        7
    BSS         680
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     71      95
    BANK0           128     60      83
    BANK1           256     32     160
    BANK2           256      0     256
    BANK3           256      0     256

Pointer List with Targets:

    FSH_VerifyWriteIntArray@Array	PTR unsigned int  size(2) Largest target is 256
		 -> IR_DataTiming(BANK2[256]), RF_DataTiming(BANK3[256]), 

    FSH_VerifyWriteIntArray@ConstArray	PTR const unsigned int  size(3) Largest target is 256
		 -> IR_SavedTiming(CODE[256]), RF_SavedTiming(CODE[256]), 

    FSH_WriteIntArray@Array	PTR unsigned int  size(3) Largest target is 256
		 -> IR_SavedTiming(CODE[256]), RF_SavedTiming(CODE[256]), 

    MSC_BufferCopyIntConst@from	PTR const unsigned int  size(3) Largest target is 256
		 -> IR_SavedTiming(CODE[256]), RF_SavedTiming(CODE[256]), 

    MSC_BufferCopyIntConst@to	PTR unsigned int  size(2) Largest target is 256
		 -> IR_DataTiming(BANK2[256]), RF_DataTiming(BANK3[256]), 

    MSC_CleanBufferInt@data	PTR unsigned int  size(2) Largest target is 256
		 -> IR_DataTiming(BANK2[256]), RF_DataTiming(BANK3[256]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    _low_isr->_IR_CheckCode
    _TMR_Timer2Start->_TMR_ResetTimer2
    _TMR_ResetTimer2->i1_TMR_Timer2
    _TMR_Timer1Start->i1_TMR_ResetTimer1
    i1_TMR_ResetTimer1->i1_TMR_Timer1
    _RF_Disable->i1_RF_DataInt
    _RF_Disable->i1_TMR_Timer0
    _RF_Disable->i1_TMR_Timer0Int
    _IR_CleanBuffer->i1_MSC_CleanBufferInt
    _IR_CheckCode->i1___ftmul
    i1___ftge->i1___lwtoft
    _FSH_Write_IR_RF->_FSH_EraseBlock
    _MSC_BufferCopyIntConst->i1_MSC_CleanBufferInt
    _RF_Enable->i1_RF_DataInt
    _RF_Enable->i1_TMR_Timer0Int
    _FSH_WriteIntArray->_FSH_AddressToBlock
    _FSH_EraseBlock->i1_MSC_DelayMS
    i1_MSC_DelayMS->i1_MSC_DelayNOP
    _ADC_CalculateVoltage->i1___ftmul
    i1___lwtoft->i1___ftpack
    i1___ftmul->___ftdiv
    ___ftdiv->i1___lwtoft

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    _high_isr->_RF_CheckCode
    _TMR_Timer0Start->i2_TMR_ResetTimer0
    i2_TMR_ResetTimer0->i2_TMR_Timer0
    _RF_CheckCode->i2_FSH_Write_IR_RF
    i2___lwtoft->i2___ftpack
    i2___ftmul->i2___lwtoft
    i2___ftge->i2___lwtoft
    i2_FSH_Write_IR_RF->i2_FSH_EraseBlock
    i2_MSC_BufferCopyIntConst->i2_MSC_CleanBufferInt
    i2_RF_Enable->i2_RF_DataInt
    i2_RF_Enable->i2_TMR_Timer0Int
    i2_FSH_WriteIntArray->i2_FSH_AddressToBlock
    i2_FSH_EraseBlock->i2_MSC_DelayMS
    i2_MSC_DelayMS->i2_MSC_DelayNOP

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_IR_LoadCode
    _main->_RF_LoadCode
    _RF_LoadCode->___ftmul
    _MTR_Rotate->_MSC_DelayMS
    _MSC_BlinkLED->_MSC_DelayMS
    _MSC_DelayMS->_MSC_DelayNOP
    _InitTimer2->_TMR_Timer2
    _InitTimer2->_TMR_Timer2Int
    _InitTimer1->_TMR_Timer1Function
    _TMR_Timer1Function->_TMR_ResetTimer1
    _TMR_ResetTimer1->_TMR_Timer1
    _InitTimer0->_TMR_ResetTimer0
    _TMR_ResetTimer0->_TMR_Timer0
    _InitRF->_MSC_CleanBufferInt
    _InitLDO->_LDO_Pass
    _InitIR->_MSC_CleanBufferInt
    _InitButton->_BUT_IR_PinChangeInt
    _InitButton->_BUT_ReadButton
    _InitADC->_ADC_ConversionInt
    _InitADC->_ADC_Module
    _IR_LoadCode->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   22239
                          _ADC_Start
                        _IR_LoadCode
                           _Init_App
                        _Init_System
                       _MSC_BlinkLED
                        _MSC_DelayMS
                         _MTR_Rotate
                        _RF_LoadCode
                  _SYS_ActivityTimer
            _SYS_ConfigureOscillator
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6    1058
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (1) _SYS_ConfigureOscillator                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYS_ActivityTimer                                    0     0      0       0
             _SYS_ActivityTimerReset
                          _SYS_Sleep
 ---------------------------------------------------------------------------------
 (2) _SYS_Sleep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYS_ActivityTimerReset                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_LoadCode                                          6     6      0    8265
                                             26 BANK1      6     6      0
               _RF_CalculateCodesize
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _RF_CalculateCodesize                                 1     1      0     130
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MTR_Rotate                                           0     0      0     618
                        _MSC_DelayMS
                            _MTR_IN1
                            _MTR_IN2
 ---------------------------------------------------------------------------------
 (2) _MTR_IN2                                              1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTR_IN1                                              1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MSC_BlinkLED                                         8     4      4    1305
                                             13 BANK1      8     4      4
                        _MSC_DelayMS
 ---------------------------------------------------------------------------------
 (2) _MSC_DelayMS                                          9     5      4     556
                                              4 BANK1      9     5      4
                       _MSC_DelayNOP
 ---------------------------------------------------------------------------------
 (3) _MSC_DelayNOP                                         4     2      2     133
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0    2172
                     _BUT_ReadButton
                    _IR_ReadReceiver
                            _InitADC
                         _InitButton
                          _InitFlash
                             _InitIR
                            _InitLDO
                          _InitMOTOR
                             _InitRF
                         _InitTimers
 ---------------------------------------------------------------------------------
 (2) _InitTimers                                           0     0      0     474
                         _InitTimer0
                         _InitTimer1
                         _InitTimer2
 ---------------------------------------------------------------------------------
 (3) _InitTimer2                                           0     0      0      62
                         _TMR_Timer2
                      _TMR_Timer2Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2Int                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer1                                           0     0      0     285
                    _TMR_ResetTimer1
                         _TMR_Timer1
                 _TMR_Timer1Function
                      _TMR_Timer1Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer1Int                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer1Function                                   1     1      0     158
                                              2 BANK1      1     1      0
                    _TMR_ResetTimer1
                         _TMR_Timer1
                      _TMR_Timer1Osc
 ---------------------------------------------------------------------------------
 (5) _TMR_Timer1Osc                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (5) _TMR_ResetTimer1                                      1     1      0      65
                                              1 BANK1      1     1      0
                         _TMR_Timer1
 ---------------------------------------------------------------------------------
 (5) _TMR_Timer1                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer0                                           0     0      0     127
                    _TMR_ResetTimer0
                         _TMR_Timer0
                      _TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer0Int                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_ResetTimer0                                      1     1      0      65
                                              1 BANK1      1     1      0
                         _TMR_Timer0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer0                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitRF                                               0     0      0     829
                 _MSC_CleanBufferInt
                         _RF_DataInt
                        _RF_Receiver
                    _RF_SetBandwidth
                      _RF_SetSquelch
 ---------------------------------------------------------------------------------
 (3) _RF_SetSquelch                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_SetBandwidth                                      1     1      0      93
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_Receiver                                          1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_DataInt                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitMOTOR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitLDO                                              0     0      0      31
                           _LDO_Pass
 ---------------------------------------------------------------------------------
 (3) _LDO_Pass                                             1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitIR                                               0     0      0     643
                 _MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (3) _MSC_CleanBufferInt                                   6     2      4     643
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) _InitFlash                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitButton                                           0     0      0      65
                _BUT_IR_PinChangeInt
                     _BUT_ReadButton
 ---------------------------------------------------------------------------------
 (3) _BUT_ReadButton                                       1     1      0      34
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _BUT_IR_PinChangeInt                                  1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitADC                                              0     0      0      62
                  _ADC_ChangeChannel
                  _ADC_ConversionInt
                         _ADC_Module
 ---------------------------------------------------------------------------------
 (3) _ADC_Module                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionInt                                    1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ChangeChannel                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IR_ReadReceiver                                      1     1      0      34
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_App                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_LoadCode                                          6     6      0    8265
                                             26 BANK1      6     6      0
               _IR_CalculateCodesize
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    2644
                                              8 BANK1      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1026
                                              0 BANK1     15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    4391
                                             11 BANK1     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1903
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (2) _IR_CalculateCodesize                                 1     1      0     130
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                             21    21      0   10795
                                             50 COMRAM    21    21      0
               _ADC_CalculateVoltage
                       _IR_CheckCode
                     _IR_CleanBuffer
                       _IR_ResetData
                         _RF_Disable
                    _TMR_Timer1Start
                   _TMR_Timer1Status
                    _TMR_Timer2Start
                   i1_BUT_ReadButton
                  i1_IR_ReadReceiver
           i1_SYS_ActivityTimerReset
                  i1_TMR_ResetTimer1
                       i1_TMR_Timer1
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) i1_SYS_ActivityTimerReset                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_IR_ReadReceiver                                    1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_BUT_ReadButton                                     1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer2Start                                      2     0      2     301
                                              2 COMRAM     2     0      2
                    _TMR_ResetTimer2
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (9) _TMR_ResetTimer2                                      1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) i1_TMR_Timer2                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer1Status                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer1Start                                      0     0      0      67
                  i1_TMR_ResetTimer1
                       i1_TMR_Timer1
 ---------------------------------------------------------------------------------
 (8) i1_TMR_ResetTimer1                                    1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer1
 ---------------------------------------------------------------------------------
 (8) i1_TMR_Timer1                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _RF_Disable                                           0     0      0      66
                       i1_RF_DataInt
                       i1_TMR_Timer0
                    i1_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (9) i1_TMR_Timer0                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _IR_CleanBuffer                                       0     0      0     195
               i1_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (8) _IR_CheckCode                                         9     9      0    6629
                                             41 COMRAM     9     9      0
                    _FSH_Write_IR_RF
                           i1___ftge
                          i1___ftmul
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (9) i1___ftge                                             9     3      6     240
                                             11 COMRAM     9     3      6
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) _FSH_Write_IR_RF                                     15    15      0    3941
                                             20 COMRAM    15    15      0
                 _FSH_AddressToBlock
                     _FSH_EraseBlock
                       _FSH_Sequence
            _FSH_VerifyWriteIntArray
                  _FSH_WriteIntArray
                       _IR_ResetData
             _MSC_BufferCopyIntConst
                       _RF_ResetData
 ---------------------------------------------------------------------------------
 (10) _RF_ResetData                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _MSC_BufferCopyIntConst                             11     2      9     846
                                              6 COMRAM    11     2      9
               i1_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (9) i1_MSC_CleanBufferInt                                 6     2      4     195
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _IR_ResetData                                         0     0      0      44
                          _RF_Enable
 ---------------------------------------------------------------------------------
 (9) _RF_Enable                                            0     0      0      44
                       i1_RF_DataInt
                    i1_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (9) i1_TMR_Timer0Int                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1_RF_DataInt                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _FSH_WriteIntArray                                   9     6      3     805
                                              4 COMRAM     9     6      3
                 _FSH_AddressToBlock
                       _FSH_Sequence
 ---------------------------------------------------------------------------------
 (10) _FSH_VerifyWriteIntArray                            11     6      5     982
                                              0 COMRAM    11     6      5
 ---------------------------------------------------------------------------------
 (10) _FSH_EraseBlock                                     11     7      4     514
                                             13 COMRAM     7     3      4
                 _FSH_AddressToBlock
                       _FSH_Sequence
                      i1_MSC_DelayMS
 ---------------------------------------------------------------------------------
 (11) i1_MSC_DelayMS                                       9     5      4     144
                                              4 COMRAM     9     5      4
                     i1_MSC_DelayNOP
 ---------------------------------------------------------------------------------
 (12) i1_MSC_DelayNOP                                      4     2      2      72
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (11) _FSH_Sequence                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _FSH_AddressToBlock                                  4     0      4     225
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (8) _ADC_CalculateVoltage                                 5     5      0    3221
                                             41 COMRAM     5     5      0
                            ___ftdiv
                i1_ADC_ChangeChannel
                          i1___ftmul
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (9) i1___lwtoft                                           3     0      3     721
                                              8 COMRAM     3     0      3
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (9) i1___ftmul                                           15     9      6    1207
                                             26 COMRAM    15     9      6
                            ___ftdiv (ARG)
                         i1___ftpack
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) i1_ADC_ChangeChannel                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    1223
                                             11 COMRAM    15     9      6
                         i1___ftpack
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _high_isr                                           16    16      0    5070
                                             44 BANK0     16    16      0
                       _RF_CheckCode
                    _TMR_Timer0Start
                   _TMR_Timer0Status
                     i2_RF_ResetData
           i2_SYS_ActivityTimerReset
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_SYS_ActivityTimerReset                            0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR_Timer0Status                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR_Timer0Start                                     0     0      0      67
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_TMR_ResetTimer0                                   1     1      0      45
                                              1 BANK0      1     1      0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_TMR_Timer0                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (14) _RF_CheckCode                                        9     9      0    4823
                                             35 BANK0      9     9      0
                  i2_FSH_Write_IR_RF
                           i2___ftge
                          i2___ftmul
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (15) i2___lwtoft                                          3     0      3     565
                                              8 BANK0      3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (15) i2___ftmul                                          15     9      6     921
                                             11 BANK0     15     9      6
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (16) i2___ftpack                                          8     3      5     387
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (15) i2___ftge                                            9     3      6     240
                                             11 BANK0      9     3      6
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (15) i2_FSH_Write_IR_RF                                  15    15      0    2755
                                             20 BANK0     15    15      0
               i2_FSH_AddressToBlock
                   i2_FSH_EraseBlock
                     i2_FSH_Sequence
          i2_FSH_VerifyWriteIntArray
                i2_FSH_WriteIntArray
                     i2_IR_ResetData
           i2_MSC_BufferCopyIntConst
                     i2_RF_ResetData
 ---------------------------------------------------------------------------------
 (14) i2_RF_ResetData                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i2_MSC_BufferCopyIntConst                           11     2      9     578
                                              6 BANK0     11     2      9
               i2_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (17) i2_MSC_CleanBufferInt                                6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (16) i2_IR_ResetData                                      0     0      0      44
                        i2_RF_Enable
 ---------------------------------------------------------------------------------
 (17) i2_RF_Enable                                         0     0      0      44
                       i2_RF_DataInt
                    i2_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (18) i2_TMR_Timer0Int                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (18) i2_RF_DataInt                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (16) i2_FSH_WriteIntArray                                 9     6      3     508
                                              4 BANK0      9     6      3
               i2_FSH_AddressToBlock
                     i2_FSH_Sequence
 ---------------------------------------------------------------------------------
 (16) i2_FSH_VerifyWriteIntArray                          11     6      5     550
                                              0 BANK0     11     6      5
 ---------------------------------------------------------------------------------
 (16) i2_FSH_EraseBlock                                   11     7      4     406
                                             13 BANK0      7     3      4
               i2_FSH_AddressToBlock
                     i2_FSH_Sequence
                      i2_MSC_DelayMS
 ---------------------------------------------------------------------------------
 (17) i2_MSC_DelayMS                                       9     5      4     144
                                              4 BANK0      9     5      4
                     i2_MSC_DelayNOP
 ---------------------------------------------------------------------------------
 (18) i2_MSC_DelayNOP                                      4     2      2      72
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (17) i2_FSH_Sequence                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i2_FSH_AddressToBlock                                4     0      4     144
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Start
   _IR_LoadCode
     _IR_CalculateCodesize
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lwtoft
       ___ftpack
   _Init_App
   _Init_System
     _BUT_ReadButton
     _IR_ReadReceiver
     _InitADC
       _ADC_ChangeChannel
       _ADC_ConversionInt
       _ADC_Module
     _InitButton
       _BUT_IR_PinChangeInt
       _BUT_ReadButton
     _InitFlash
     _InitIR
       _MSC_CleanBufferInt
     _InitLDO
       _LDO_Pass
     _InitMOTOR
     _InitRF
       _MSC_CleanBufferInt
       _RF_DataInt
       _RF_Receiver
       _RF_SetBandwidth
       _RF_SetSquelch
     _InitTimers
       _InitTimer0
         _TMR_ResetTimer0
           _TMR_Timer0
         _TMR_Timer0
         _TMR_Timer0Int
       _InitTimer1
         _TMR_ResetTimer1
           _TMR_Timer1
         _TMR_Timer1
         _TMR_Timer1Function
           _TMR_ResetTimer1
             _TMR_Timer1
           _TMR_Timer1
           _TMR_Timer1Osc
         _TMR_Timer1Int
       _InitTimer2
         _TMR_Timer2
         _TMR_Timer2Int
   _MSC_BlinkLED
     _MSC_DelayMS
       _MSC_DelayNOP
   _MSC_DelayMS
     _MSC_DelayNOP
   _MTR_Rotate
     _MSC_DelayMS
       _MSC_DelayNOP
     _MTR_IN1
     _MTR_IN2
   _RF_LoadCode
     _RF_CalculateCodesize
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lwtoft
       ___ftpack
   _SYS_ActivityTimer
     _SYS_ActivityTimerReset
     _SYS_Sleep
   _SYS_ConfigureOscillator
   ___ftge

 _low_isr (ROOT)
   _ADC_CalculateVoltage
     ___ftdiv
       i1___ftpack
       i1___lwtoft (ARG)
         i1___ftpack
     i1_ADC_ChangeChannel
     i1___ftmul
       ___ftdiv (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftpack (ARG)
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack
   _IR_CheckCode
     _FSH_Write_IR_RF
       _FSH_AddressToBlock
       _FSH_EraseBlock
         _FSH_AddressToBlock
         _FSH_Sequence
         i1_MSC_DelayMS
           i1_MSC_DelayNOP
       _FSH_Sequence
       _FSH_VerifyWriteIntArray
       _FSH_WriteIntArray
         _FSH_AddressToBlock
         _FSH_Sequence
       _IR_ResetData
         _RF_Enable
           i1_RF_DataInt
           i1_TMR_Timer0Int
       _MSC_BufferCopyIntConst
         i1_MSC_CleanBufferInt
       _RF_ResetData
     i1___ftge
       i1___lwtoft (ARG)
         i1___ftpack
     i1___ftmul
       ___ftdiv (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftpack (ARG)
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack
   _IR_CleanBuffer
     i1_MSC_CleanBufferInt
   _IR_ResetData
     _RF_Enable
       i1_RF_DataInt
       i1_TMR_Timer0Int
   _RF_Disable
     i1_RF_DataInt
     i1_TMR_Timer0
     i1_TMR_Timer0Int
   _TMR_Timer1Start
     i1_TMR_ResetTimer1
       i1_TMR_Timer1
     i1_TMR_Timer1
   _TMR_Timer1Status
   _TMR_Timer2Start
     _TMR_ResetTimer2
       i1_TMR_Timer2
     i1_TMR_Timer2
   i1_BUT_ReadButton
   i1_IR_ReadReceiver
   i1_SYS_ActivityTimerReset
   i1_TMR_ResetTimer1
     i1_TMR_Timer1
   i1_TMR_Timer1
   i1_TMR_Timer2

 _high_isr (ROOT)
   _RF_CheckCode
     i2_FSH_Write_IR_RF
       i2_FSH_AddressToBlock
       i2_FSH_EraseBlock
         i2_FSH_AddressToBlock
         i2_FSH_Sequence
         i2_MSC_DelayMS
           i2_MSC_DelayNOP
       i2_FSH_Sequence
       i2_FSH_VerifyWriteIntArray
       i2_FSH_WriteIntArray
         i2_FSH_AddressToBlock
         i2_FSH_Sequence
       i2_IR_ResetData
         i2_RF_Enable
           i2_RF_DataInt
           i2_TMR_Timer0Int
       i2_MSC_BufferCopyIntConst
         i2_MSC_CleanBufferInt
       i2_RF_ResetData
     i2___ftge
       i2___lwtoft (ARG)
         i2___ftpack
     i2___ftmul
       i2___ftpack
       i2___lwtoft (ARG)
         i2___ftpack
     i2___lwtoft
       i2___ftpack
   _TMR_Timer0Start
     i2_TMR_ResetTimer0
       i2_TMR_Timer0
     i2_TMR_Timer0
   _TMR_Timer0Status
   i2_RF_ResetData
   i2_SYS_ActivityTimerReset
   i2_TMR_ResetTimer0
     i2_TMR_Timer0
   i2_TMR_Timer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3FF      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0     100      10      100.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0     100       8      100.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     20      A0       6       62.5%
BITBANK0            80      0       0       3        0.0%
BANK0               80     3C      53       4       64.8%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     47      5F       1       74.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     352      11        0.0%
DATA                 0      0     352      13        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Aug 28 20:08:08 2015

            MSC_BufferCopyIntConst@i 0010              __end_of_IR_ReadReceiver 160A  
           MSC_BufferCopyIntConst@to 000A            __size_ofi2_FSH_EraseBlock 008E  
                         _RF_SyncLow 00C0                   TMR_Timer0Int@state 0180  
                         i1___ftpack 0C94                          _RF_SyncHigh 00BE  
                                 l70 39EE            i2MSC_CleanBufferInt@count 0082  
                                 bsr 000FE0                           i1___lwtoft 18D8  
                 __size_of_ADC_Start 0004                  i2_FSH_WriteIntArray 089A  
                 TMR_Timer1Int@state 0180           ??i1_SYS_ActivityTimerReset 0001  
                         i2___ftpack 03BA                         __CFG_CP0$OFF 000000  
                         _TMR_Timer0 1AD6                           _TMR_Timer1 1AA6  
                         _TMR_Timer2 1A76                __end_ofi2_MSC_DelayMS 1278  
                                l316 1D36                                  l521 15FE  
                                l382 19D4                                  l519 15E8  
                                l571 3FF2                                  l596 1712  
                                l972 1B30                                  l981 15B0  
                         i2___lwtoft 17E2                                  l983 15C6  
                                _PR2 000FCB                         i1___ftge@ff1 000C  
                       i1___ftge@ff2 000F                  __size_of_ADC_Module 0018  
                 TMR_Timer2Int@state 0180                ??i1_ADC_ChangeChannel 0001  
                                prod 000FF3                                  wreg 000FE8  
                       i1___ftmul@f1 001B                         i1___ftmul@f2 001E  
                    IR_CheckCode@Low 002C                   TMR_Timer1Osc@state 0180  
   __size_of_FSH_VerifyWriteIntArray 005E         FSH_VerifyWriteIntArray@Array 0004  
                     ?_RF_SetSquelch 0001                         ___ftdiv@cntr 0015  
             __end_ofi2_MSC_DelayNOP 183A                         ___ftdiv@sign 001A  
                               l1034 1AE8                                 l1044 1A88  
                               l1039 1AB8                                 l1064 1AD0  
                               l1074 1A70                                 l1069 1AA0  
                               l1079 195C                                 l1266 1B48  
                               l1278 1B60                                 l1615 0380  
              ?i2_MSC_CleanBufferInt 0080                                 l8000 393E  
                               l8010 39B0                                 l8004 398E  
                               l8022 3A0A                                 l8008 39AA  
                               l7402 16C8                                 l7406 16D4  
                               l7440 1574                                 l7418 15BA  
                               l7434 1B18                                 l7540 02CA  
                               l7444 1582                                 l7550 0360  
                               l7542 02DA                                 l7710 3C28  
                               l7462 1316                                 l7454 1B00  
                               l7552 0370                                 l7544 030C  
                               l7536 02B4                                 l7704 3BEE  
                               l7528 18A2                                 l7448 1592  
                               l7458 12EC                                 l7474 171C  
                               l7570 11C4                                 l7564 03AA  
                               l7548 032E                                 l7732 3CB4  
                               l7724 3C78                                 l7652 142C  
                               l7558 038C                                 l7742 3CF8  
                               l7734 3CBC                                 l7574 11E2  
                               l7670 1A58                                 l7662 145C  
                               l7680 1468                                 l7728 3C98  
                               l7752 3EC6                                 l7904 1178  
                               l7648 1422                                 l7690 149C  
                               l7738 3CDC                                 l7770 3F5A  
                               l7658 1456                                 l7930 09EE  
                               l7684 1472                                 l7780 3F8C  
                               l7588 15F2                                 l7676 1A40  
                               l7908 11A2                                 l7694 14A2  
                               l7782 3F9E                                 l7774 3F6E  
                               l7918 16F6                                 l7926 09AC  
                               l7784 3FAC                                 l7936 0A32  
                               l7890 138E                                 l7970 38B4  
                               l7954 3852                                 l7788 3FCA  
                               l7980 3902                                 l7966 3892  
                               l7982 390A                                 l7896 13AC  
                               l7976 38E0                                 l7968 38AC  
                               l7978 38FA                                 l7988 3922  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B             FSH_VerifyWriteIntArray@i 000B  
                               u8700 3EEC                                 u8621 3BCA  
                               u8641 3C04                                 u8705 3EE2  
                               u8681 3EA2                                 u8790 16EC  
                               u8970 3A20                                 _TMR2 000FCC  
                   ?_RF_SetBandwidth 0001                 ?i2_FSH_WriteIntArray 0084  
        ADC_CalculateVoltage@Voltage 002C               __size_of_TMR_Timer0Int 0018  
             __size_of_TMR_Timer1Int 0018               __size_of_TMR_Timer2Int 0018  
             __size_of_TMR_Timer1Osc 0020          __size_of_FSH_AddressToBlock 0010  
                  ??i1_TMR_Timer0Int 0001                      __end_of_MTR_IN1 1A5E  
                    __end_of_MTR_IN2 1A46    __size_ofi2_SYS_ActivityTimerReset 0012  
                               _main 3822            ?i2_SYS_ActivityTimerReset 0001  
             _SYS_ActivityTimerReset 1BFE                         ___ftpack@arg 0180  
                       ___ftpack@exp 0183                         i1___lwtoft@c 0009  
                               fsr0h 000FEA                                 fsr1h 000FE2  
                               fsr0l 000FE9                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               pclat 000FFA                         i2___ftge@ff1 008B  
                       i2___ftge@ff2 008E                                 prodh 000FF4  
                               prodl 000FF3                                 start 0296  
                      __CFG_IESO$OFF 000000                        __CFG_FOSC2$ON 000000  
               i2_FSH_AddressToBlock 1CA0                     IR_CheckCode@High 002F  
                       ___ftmul@cntr 0198                i1MSC_CleanBufferInt@i 0005  
                       i2___ftmul@f1 008B                         i2___ftmul@f2 008E  
                       ___param_bank 000000           __size_of_SYS_ActivityTimer 002C  
                       ___ftmul@sign 0199                      __end_of_InitADC 188C  
                    __end_of_InitLDO 1D58                        i1___ftmul@exp 0024  
                              EECON2 000FA7         __end_of_ADC_CalculateVoltage 0C94  
                       ___fttol@exp1 018E                        ??_Init_System 0186  
                    _FSH_Write_IR_RF 2D8C                         ___fttol@lval 018A  
            __size_of_IR_CleanBuffer 0016          __size_of_TMR_Timer1Function 0032  
            i1___ftmul@f3_as_product 0025                                ?_main 0001  
                   __end_of_LDO_Pass 3FF8                   i1MSC_DelayNOP@NOPs 0001  
                    __end_of___ftdiv 06C8                         i2___lwtoft@c 0088  
                    __end_of___ftmul 3D20                      __end_of___fttol 3FDE  
                              i1l210 01C6                                i1l202 01CA  
                         _FlashWaste 2600                                i1l211 01C2  
                              i1l212 0108                                i1l214 0162  
                              i1l233 0218                                i1l226 020C  
                              i1l235 024C                                i1l239 0250  
                              i1l521 1634                                i1l382 1BBA  
                              i1l519 161E                                i1l562 3550  
                              i2l182 3B60                                i2l185 3A82  
                              i2l187 3AFE                                i2l444 3808  
                              i1l596 1970                                i2l197 3B76  
                              i2l382 1A0C                                i2l199 3B7A  
                              i1l981 1654                                i1l983 166A  
                              i2l596 181A                                _TMR0H 000FD7  
                              _TMR1H 000FCF                                _TMR0L 000FD6  
                              _TMR1L 000FCE                                _PORTB 000F81  
            i2FSH_Write_IR_RF@lowint 009B                       i2_IR_ResetData 1D24  
            i2FSH_Write_IR_RF@status 009F                  BUT_ReadButton@value 0180  
                     __CFG_FCMEN$OFF 000000                                _errno 0057  
                      ___ftpack@sign 0184                   RF_SetSquelch@state 0180  
                    ?i2_MSC_DelayNOP 0080                   __size_of_RF_Enable 0014  
                        ?_RF_DataInt 0001                ??i2_FSH_WriteIntArray 0087  
                   __end_ofi1___ftge 0F40                      __end_of_low_isr 0296  
                              tablat 000FF5                     __end_ofi2___ftge 0B06  
                  __end_of_ADC_Start 1D70                          ?_RF_Disable 0001  
                              plusw2 000FDB                                status 000FD8  
                 __size_ofi1___ftmul 0102                          ?_MTR_Rotate 0001  
       i2MSC_BufferCopyIntConst@from 0086                FSH_EraseBlock@Address 000E  
           ??_MSC_BufferCopyIntConst 0010                       i1___ftpack@arg 0001  
                 __size_ofi2___ftmul 016C                       i1___ftpack@exp 0004  
              ?i2_FSH_AddressToBlock 0080                           _InitButton 1CD0  
                    __initialization 0FCE                           _InitTimer0 1924  
                         _InitTimer1 19A4                           _InitTimer2 1986  
                         _InitTimers 1CC2                         __end_of_main 3A34  
                   ?_IR_ReadReceiver 0001                        i2___ftmul@exp 0094  
                   _ButtonValue_prev 00C2         __end_ofi1_MSC_CleanBufferInt 14E8  
                        ?i1___ftpack 0001                       i1___ftmul@cntr 0028  
                     i1___ftmul@sign 0029                     __end_of_Init_App 1560  
                      _TMR_Timer0Int 1ABE                        _TMR_Timer1Int 1A8E  
                        ?i1___lwtoft 0009                        _TMR_Timer2Int 1A5E  
                      _TMR_Timer1Osc 1946                          ?i2___ftpack 0080  
                 __size_of_SYS_Sleep 0006                        ?_FSH_Sequence 0001  
                        ?_TMR_Timer0 0001                          ?_TMR_Timer1 0001  
                        ?_TMR_Timer2 0001                         ?_MSC_DelayMS 0184  
                             ??_main 01A0               __end_ofi2_IR_ResetData 1D32  
                      ___fttol@sign1 0189                          ?i2___lwtoft 0088  
                      __activetblptr 000002                         ?i2_RF_Enable 0001  
                  _ADC_ConversionInt 1B4E                  TMR_Timer2Start@time 0003  
                __end_of_Init_System 16A8                    i1_TMR_ResetTimer1 18B2  
                    ??_RF_SetSquelch 0180                      _ADC_SampleCount 00BC  
                 ?_ADC_ConversionInt 0001                FSH_EraseBlock@highint 0012  
            __size_of_FSH_EraseBlock 007A             __size_ofi2_TMR_Timer0Int 0018  
             ??i2_MSC_CleanBufferInt 0084                            ??_MTR_IN1 0180  
                          ??_MTR_IN2 0180                   ?i1_TMR_ResetTimer1 0001  
                        _FlashBuffer 0100                               _ADRESH 000FC4  
                             _ADRESL 000FC3             i2FSH_Write_IR_RF@highint 009A  
                   __end_of___ftpack 03BA                       RF_LoadCode@Low 019A  
           __size_of_TMR_ResetTimer0 002C             __size_of_TMR_ResetTimer1 002C  
           __size_of_TMR_ResetTimer2 002A                     _TMR_Timer0Status 1D08  
                 __size_of_InitMOTOR 0004                               i1l1034 1C64  
                             i1l1044 1C2E                               i1l1039 1C52  
                             i1l1064 1C76                               i1l1224 3092  
                   _TMR_Timer1Status 1CDE                               i1l1226 3118  
                             i1l1171 0E94                               i1l1172 0EA2  
                             i1l1185 317E                               i1l1286 0C80  
                             i1l1615 0D30                               i2l1034 1B78  
                             i1l5212 13E4                               i1l6012 313C  
                             i1l6022 316A                               i1l6030 317A  
                             i1l1679 0692                               i2l1064 1B90  
                             i2l1224 2C26                               i1l5136 1978  
                             i1l5216 13FE                               i1l5400 106C  
                             i1l5232 14DA                               i1l6008 312C  
                             i2l1226 2CEE                               i1l5330 0D7E  
                             i1l6034 3188                               i1l6018 3160  
                             i1l6026 3176                               i2l1171 0954  
                             i2l1172 0962                               i1l5228 14BA  
                             i1l6118 066C                               i1l5430 10BA  
                             i1l5342 0DAC                               i1l5350 0DE8  
                             i1l5334 0D8A                               i1l6038 3192  
                             i1l6128 06A0                               i2l1185 2D68  
                             i1l5434 10C4                               i1l5450 0E8E  
                             i1l6092 0604                               i1l5462 1284  
                             i1l5446 0E28                               i1l7214 01B0  
                             i2l1615 04A0                               i1l5472 12D0  
                             i1l7232 0202                               i1l7160 00B8  
                             i1l6098 062C                               i1l6522 0502  
                             i1l5458 127C                               i1l7234 0208  
                             i1l7218 01BC                               i1l7170 00EC  
                             i1l5468 12CC                               i1l7228 01EC  
                             i1l7156 00A6                               i1l7172 00F2  
                             i1l5670 0CE0                               i1l5662 0CA4  
                             i1l6550 0586                               i1l6542 055E  
                             i1l7166 00DA                       __CFG_WDTEN$OFF 000000  
                             i1l6560 05B4                               i1l6552 058C  
                             i1l6528 052A                               i1l5920 2F72  
                             i1l7248 023C                               i1l7192 0144  
                             i1l5690 0D4A                               i1l5674 0CF8  
                             i1l5666 0CB4                               i1l6546 0570  
                             i1l5922 2F78                               i1l5906 2F2E  
                             i1l5850 2DD8                               i2l5220 1228  
                             i1l5684 0D38                               i1l5676 0D18  
                             i1l5668 0CC0                               i1l6476 1914  
                             i1l6556 059E                               i1l5908 2F34  
                             i1l5852 2DE8                               i1l6484 0EDC  
                             i2l5142 1824                               i1l5678 0D24  
                             i1l5950 3000                               i1l5934 2FB6  
                             i1l5862 2E4E                               i1l5846 2DC4  
                             i1l6494 0F3A                               i1l6902 3530  
                             i1l6830 1CE6                               i2l5224 1246  
                             i2l5240 136C                               i1l5936 2FBC  
                             i1l5880 2EAC                               i1l6488 0F0E  
                             i1l6912 3564                               i1l5962 303E  
                             i1l5866 2E68                               i1l5858 2E20  
                             i1l6906 354A                               i2l5236 1342  
                             i1l5964 3044                               i1l5948 2FFA  
                             i1l5892 2EEA                               i1l6860 346C  
                             i1l6844 31C0                               i2l6310 29A2  
                             i1l5982 308E                               i1l5894 2EF0  
                             i1l5878 2EA6                               i1l6854 3356  
                             i2l7104 3AD6                               i1l6928 0C8E  
                             i1l5976 3082                               i1l6864 3470  
                             i1l6856 33F4                               i1l6848 3278  
                             i2l6322 29F4                               i1l5994 3108  
                             i1l5978 3086                               i1l6890 34E6  
                             i1l6866 3474                               i1l6874 3480  
                             i2l5612 0FB0                               i2l5540 0B2C  
                             i2l6412 2C20                               i2l6324 29FC  
                             i2l6308 299A                               i2l7124 3B4E  
                             i1l6964 1628                               i2l6406 2C10  
                             i2l6350 2AA8                               i2l6502 0A7A  
                             i2l5710 044E                               i2l5702 03EA  
                             i1l6894 351C                               i1l6886 34B0  
                             i1l6878 348C                               i1l6982 165E  
                             i2l5616 0FBE                               i2l5640 10D6  
                             i2l5632 094C                               i2l5552 0B62  
                             i2l5560 0BA4                               i2l5544 0B3C  
                             i2l6424 2CDA                               i2l6408 2C16  
                             i2l6352 2AB0                               i2l6336 2A4E  
                             i2l6280 2898                               i2l6512 0B00  
                             i2l5720 04AC                               i2l5712 0480  
                             i2l5704 03FA                               i2l6600 3E28  
                             i2l7128 3B5A                               i1l6896 3520  
                             i2l5650 113C                               i2l6442 2D18  
                             i2l6338 2A56                               i2l6282 28A8  
                             i2l6506 0ABC                               i2l5714 0490  
                             i2l5706 042C                               i2l5644 10E0  
                             i2l5628 08C4                               i2l6452 2D4C  
                             i2l6460 2D62                               i2l6380 2B64  
                             i2l6364 2B02                               i2l6292 292A  
                             i2l6276 2884                               i2l6604 3E48  
                             i2l5582 0F5A                               i2l5654 1142  
                             i2l6438 2D04                               i2l6366 2B0A  
                             i2l5726 04CA                               i2l7086 3A72  
                             i2l6464 2D76                               i2l6448 2D42  
                             i2l6456 2D5C                               i2l6392 2BB6  
                             i2l6296 2948                               i2l6288 28EE  
                             i2l6608 3E64                               i2l6800 37CE  
                             i2l6394 2BBE                               i2l6378 2B5C  
                             i2l6570 3D5A                               i2l6810 3800  
                             i2l6468 2D84                               i2l6590 3DE4  
                             i2l6806 37E2                               _TABLAT 000FF5  
                             i2l6576 3D94                               i2l6816 381C  
                             i2l6752 1D10                               i2l5698 03D4  
                             i2l6594 3E04                               i2l6770 36FA  
                             i2l6764 35A0                               i2l6780 3784  
                             i2l6598 3E20                               i2l6774 377A  
                             i2l6792 37A4                               i2l6768 364C  
                             i2l6778 377E                               i2l6788 3794  
                             i2l6798 37C8                     __end_of___lwtoft 17B6  
                             u700_21 04EA                               u702_21 0512  
                             u641_21 0614                               _OSCCON 000FD3  
                             u706_41 3D36                   __size_of_InitFlash 0004  
                             u708_41 3D70                               u639_21 05EC  
                ??_ADC_ConversionInt 0180                         ??_ADC_Module 0180  
                       _System_State 00D2                  ??i1_TMR_ResetTimer1 0002  
             i2FSH_EraseBlock@lowint 0092                            ??_InitADC 0181  
                          ??_InitLDO 0181                         ?_IR_LoadCode 0001  
            __end_of_FSH_Write_IR_RF 3198             __size_of_TMR_Timer0Start 0012  
           __size_of_TMR_Timer1Start 0012                               _InitIR 19DC  
                             _InitRF 14E8             __size_of_TMR_Timer2Start 001A  
                     i2_RF_ResetData 1D16         __end_of_IR_CalculateCodesize 14A8  
       __end_of_RF_CalculateCodesize 1462           MSC_BufferCopyIntConst@from 0007  
                     __CFG_XINST$OFF 000000                           _Timer2Post 0053  
                    low_isr@IR_state 0044                     __end_of_high_isr 3BB4  
                  ?i1_BUT_ReadButton 0001                               ___ftge 096A  
             i1IR_ReadReceiver@value 0001                     i2_FSH_EraseBlock 0F40  
            __size_of_BUT_ReadButton 0038                     ??i2_FSH_Sequence 0080  
                     __CFG_STVREN$ON 000000                            ??___ftdiv 0012  
                          ??___ftmul 0191                            ??___fttol 0184  
       __size_of_BUT_IR_PinChangeInt 0018                       ?_TMR_Timer0Int 0001  
                     ?_TMR_Timer1Int 0001                       ?_TMR_Timer2Int 0001  
           i2MSC_CleanBufferInt@data 0080                       ?_TMR_Timer1Osc 0001  
                 ??i1_BUT_ReadButton 0001                    __end_of_RF_Enable 1BEA  
                     ??_FSH_Sequence 0001                               clear_0 0FD6  
                             clear_1 0FEA                               clear_2 0FFC  
                             clear_3 1008                               clear_4 1014  
                __size_of_RF_DataInt 001C            __end_of_ADC_ConversionInt 1B66  
                    ?i2_IR_ResetData 0001                  __size_of_RF_Disable 0014  
          __end_ofi1_TMR_ResetTimer1 18D8                ___ftmul@f3_as_product 0195  
                  __end_ofi1___ftmul 05DC                     ??i1_MSC_DelayNOP 0003  
                       __pdataCOMRAM 005F   __size_ofi2_FSH_VerifyWriteIntArray 0078  
                 __end_of_ADC_Module 1B4E                  __size_of_MTR_Rotate 0068  
                  __end_ofi2___ftmul 3E8C           ?i2_FSH_VerifyWriteIntArray 0080  
            _FSH_VerifyWriteIntArray 1278                         __mediumconst 2800  
                          ??_low_isr 0033                               tblptrh 000FF7  
                             tblptrl 000FF6                               tblptru 000FF8  
                       ?_RF_LoadCode 0001                 _ADC_CalculateVoltage 0BCE  
                __size_ofi1___ftpack 00C6                    i2_TMR_ResetTimer0 17B6  
            __p_IR_SavedTiming_const 2400                      __CFG_FOSC$HSPLL 000000  
            __p_RF_SavedTiming_const 2500                     __end_ofexp@coeff 2828  
                   __end_oflog@coeff 2843                      TMR_Timer0@state 0180  
                    TMR_Timer1@state 0180          i2FSH_Write_IR_RF@WriteTries 00A2  
                         __accesstop 0080              __end_of__initialization 104C  
                __size_ofi1___lwtoft 0026                      TMR_Timer2@state 0180  
                  __end_of_SYS_Sleep 1D64                         ?_RF_Receiver 0001  
                __size_ofi2___ftpack 0120                   i2MSC_DelayNOP@NOPs 0080  
             __end_ofi2_RF_ResetData 1D24                   ?i2_TMR_ResetTimer0 0001  
                         ___ftge@ff1 0180                           ___ftge@ff2 0183  
                __size_of_TMR_Timer0 0018                  __size_of_TMR_Timer1 0018  
                __size_of_TMR_Timer2 0018                      i1___ftpack@sign 0005  
             ??i2_FSH_AddressToBlock 0084                        ___rparam_used 000000  
                         ___ftdiv@f1 000C                           ___ftdiv@f2 000F  
                         ___ftdiv@f3 0016                            ?_LDO_Pass 0001  
                __size_ofi2___lwtoft 002C             FSH_EraseBlock@WriteTries 0014  
                     i2___ftpack@arg 0080      __size_of_MSC_BufferCopyIntConst 00B4  
                     i2___ftpack@exp 0083                    i1RF_DataInt@state 0001  
                     high_isr@RFtemp 00BA                          ?_InitButton 0001  
                         ___ftmul@f1 018B                           ___ftmul@f2 018E  
                         ___fttol@f1 0180                       __pcstackCOMRAM 0001  
                        ?_InitTimer0 0001                          ?_InitTimer1 0001  
                        ?_InitTimer2 0001                          ?_InitTimers 0001  
                ??i2_TMR_ResetTimer0 0081                         __pidataBANK0 1D58  
                     _IR_CleanBuffer 1B96                 IR_ReadReceiver@value 0180  
                     i2___ftmul@cntr 0098                       i2___ftmul@sign 0099  
                      ?i1_RF_DataInt 0001              _FlashWaste_absconstaddr 002600  
                        _Init_System 1676                    __end_of_InitMOTOR 1D68  
                        _Button_Data 00C3                            ?i1___ftge 000C  
                  __end_of_InitFlash 1D6C                           ___lwtoft@c 0188  
         __end_of_MSC_CleanBufferInt 132C                            ?i2___ftge 008B  
           ?_SYS_ConfigureOscillator 0001     __end_ofi2_SYS_ActivityTimerReset 1C8E  
                    i1_TMR_Timer0Int 1C6A    __end_ofi2_FSH_VerifyWriteIntArray 1148  
                   RF_Receiver@state 0180                 i2FSH_WriteIntArray@i 008C  
                      ?_MSC_DelayNOP 0180            __end_ofi2_TMR_ResetTimer0 17E2  
                      ?_MSC_BlinkLED 018D              ?_SYS_ActivityTimerReset 0001  
              ?_ADC_CalculateVoltage 0001                 i1_MSC_CleanBufferInt 14A8  
                      ?i2_RF_DataInt 0001                           __pbssBANK0 00BC  
                         __pbssBANK1 0100                           __pbssBANK2 0200  
                         __pbssBANK3 0300                    _FSH_WriteIntArray 0E0E  
                          ?_Init_App 0001                     RF_CheckCode@High 00A8  
                      ?i1_TMR_Timer0 0001                        ?i1_TMR_Timer1 0001  
                      ?i1_TMR_Timer2 0001              i2FSH_EraseBlock@Address 008D  
                  ??i2_TMR_Timer0Int 0080             i1TMR_ResetTimer1@TimerOn 0002  
                    ?i2_RF_ResetData 0001                   ?_FSH_WriteIntArray 0005  
             __size_ofi1_MSC_DelayMS 004A                           ??_LDO_Pass 0180  
                  ??_TMR_ResetTimer0 0181                    ??_TMR_ResetTimer1 0181  
                  ??_TMR_ResetTimer2 0002                     ?_FSH_Write_IR_RF 0001  
                            ?_InitIR 0001                              ?_InitRF 0001  
     i2FSH_VerifyWriteIntArray@Array 0083               __end_of_IR_CleanBuffer 1BAC  
                    ??_TMR_Timer0Int 0180                      ??_TMR_Timer1Int 0180  
                    ??_TMR_Timer2Int 0180                      ??_TMR_Timer1Osc 0180  
                            ?___ftge 0180                  ??_FSH_WriteIntArray 0008  
                     ??i1_RF_DataInt 0001                        ?_IR_CheckCode 0001  
        __end_ofi1_ADC_ChangeChannel 1924                    ??_TMR_Timer0Start 0082  
                  ??_TMR_Timer1Start 0003                    ??_TMR_Timer2Start 0005  
                  i2RF_DataInt@state 0080                            ?___ftpack 0180  
                         ??i1___ftge 0012                      RF_LoadCode@High 019D  
                      ?i2_TMR_Timer0 0001           __size_of_ADC_ConversionInt 0018  
          ??_FSH_VerifyWriteIntArray 0006                           ??i2___ftge 0091  
                          ?___lwtoft 0188           __size_ofi1_TMR_ResetTimer1 0026  
  __size_ofi2_MSC_BufferCopyIntConst 00C8            ?i2_MSC_BufferCopyIntConst 0086  
             _MSC_BufferCopyIntConst 0D5A                     ??i2_MSC_DelayNOP 0082  
                       _Flash_Status 00C5                 __size_of_MSC_DelayMS 0064  
                      MSC_DelayMS@US 0184              i2FSH_EraseBlock@highint 0091  
                      MSC_DelayNOP@i 0182                       IR_LoadCode@Low 019A  
                            _TBLPTRH 000FF7                              _TBLPTRL 000FF6  
                            _TBLPTRU 000FF8                 _IR_CalculateCodesize 1462  
                     _FSH_EraseBlock 1056            i2MSC_BufferCopyIntConst@i 008F  
               _RF_CalculateCodesize 141C                 __size_ofi2_RF_Enable 0014  
                     ??_MSC_DelayNOP 0182       __end_of_SYS_ActivityTimerReset 1C10  
                            _IR_Data 00C7                  __size_of_InitButton 000E  
                     ??_MSC_BlinkLED 0191                              _MTR_IN1 1A46  
                            _MTR_IN2 1A2E                              _RF_Data 00CA  
                __size_of_InitTimer0 0022                  __size_of_InitTimer1 001C  
                __size_of_InitTimer2 001E                        MSC_BlinkLED@i 0193  
         __end_of_FSH_AddressToBlock 1CC2            __end_of_FSH_WriteIntArray 0EAA  
                __size_of_InitTimers 000E                       ??i2_RF_DataInt 0080  
                          ?_high_isr 0001                ?i1_MSC_CleanBufferInt 0001  
                       ??_RF_DataInt 0180    __size_ofi1_SYS_ActivityTimerReset 0012  
                     ??i1_TMR_Timer0 0001                       ??i1_TMR_Timer1 0001  
                     ??i1_TMR_Timer2 0001                    _ADC_CurrentSource 005F  
                       ??_RF_Disable 0002            ?i1_SYS_ActivityTimerReset 0001  
                         ??_Init_App 0180                 __end_of_FSH_Sequence 1D46  
                    _Timer2PostCount 0055                      ADC_Module@state 0180  
                            _InitADC 1864                         ??_MTR_Rotate 018D  
                            _InitLDO 1D50               __size_ofi2_MSC_DelayMS 0064  
        MSC_BufferCopyIntConst@count 000C                            _ADC_Start 1D6C  
                            __Hparam 0000          MSC_BufferCopyIntConst@shift 000E  
                    __size_of_InitIR 001C                      __size_of_InitRF 003C  
                            __Lparam 0000                      ?_IR_CleanBuffer 0001  
           __size_of_RF_SetBandwidth 003A           __end_of_TMR_Timer1Function 16DA  
              i2MSC_CleanBufferInt@i 0084                 __size_of_IR_LoadCode 00E8  
                     _BUT_ReadButton 159A                       ??_IR_CheckCode 002A  
                    __size_of___ftge 00CE                         ??i1___ftpack 0006  
               i2TMR_Timer0Int@state 0080                              ___ftdiv 05DC  
                            ___ftmul 3BB4                              ___fttol 3E8C  
            __end_ofi1_TMR_Timer0Int 1C7C      __end_of_SYS_ConfigureOscillator 1D3C  
                       ??i1___lwtoft 000C             __end_of_TMR_Timer0Status 1D16  
           __end_of_TMR_Timer1Status 1CEC                              __pcinit 0FCE  
                     ??i2_TMR_Timer0 0080                         ??i2___ftpack 0085  
                         ??___ftpack 0185                        ?_IR_ResetData 0001  
            i2___ftmul@f3_as_product 0095                              __ramtop 0400  
                       ??_TMR_Timer0 0180                         ??_TMR_Timer1 0180  
                       ??_TMR_Timer2 0180                              __ptext0 3822  
                            __ptext1 096A                              __ptext2 1D32  
                            __ptext3 16DA                              __ptext4 1D5E  
                            __ptext5 1BFE                              __ptext6 06C8  
                            __ptext7 141C                              __ptext8 1148  
                            __ptext9 1A2E                   __end_of_RF_DataInt 19DC  
                       ??i2___lwtoft 008B                           ??___lwtoft 018B  
                          _T0CONbits 000FD5                            _T1CONbits 000FCD  
                      i1_MSC_DelayMS 13D2                   __end_of_RF_Disable 1BD6  
                          _T2CONbits 000FCA               __end_of_FSH_EraseBlock 10D0  
        __end_ofi2_FSH_WriteIntArray 096A                ?_IR_CalculateCodesize 0001  
              ?_RF_CalculateCodesize 0001                   __end_of_MTR_Rotate 11B0  
                            _low_isr 0018               ??_ADC_CalculateVoltage 002A  
           BUT_IR_PinChangeInt@state 0180           __size_ofi2_TMR_ResetTimer0 002C  
           __end_ofi2_FSH_EraseBlock 0FCE          _IR_SavedTiming_absconstaddr 002400  
           i2_SYS_ActivityTimerReset 1C7C                           ??_high_isr 00AC  
                     __pintcode_body 3A34                  _BUT_IR_PinChangeInt 1B1E  
                      ?_RF_CheckCode 0001                 end_of_initialization 104C  
                 __end_ofi1___ftpack 0D5A                        __Lmediumconst 2800  
               __size_of_RF_LoadCode 00EA                              int_func 3A34  
                 __end_ofi1___lwtoft 18FE                   __end_ofi2___ftpack 04DA  
                 __end_of_TMR_Timer0 1AEE                   __end_of_TMR_Timer1 1ABE  
                 __end_of_TMR_Timer2 1A8E                           ?_ADC_Start 0001  
             __end_of_BUT_ReadButton 15D2                 __size_of_RF_Receiver 0018  
                 __end_ofi2___lwtoft 180E                     FSH_Write_IR_RF@i 0021  
                   FSH_Write_IR_RF@j 001F               FSH_WriteIntArray@Array 0005  
                            postdec1 000FE5                              postdec2 000FDD  
                   ??i2_IR_ResetData 0081                              postinc0 000FEE  
                            postinc2 000FDE               TMR_Timer1Function@mode 0182  
               ?_BUT_IR_PinChangeInt 0001                    i1_IR_ReadReceiver 160A  
                     ??_IR_ResetData 0002                  __p_FlashWaste_const 2600  
          FSH_AddressToBlock@Address 0001                   ?i1_IR_ReadReceiver 0001  
                     ?i1_MSC_DelayMS 0005                            _IRStarted 005B  
           __size_of_IR_ReadReceiver 0038                            _RF_Enable 1BD6  
                      i2_MSC_DelayMS 1214                      ?_FSH_EraseBlock 000E  
                          _TRISAbits 000F92          ??i2_FSH_VerifyWriteIntArray 0085  
                          _TRISBbits 000F93                            _TRISCbits 000F94  
          __size_ofi1_BUT_ReadButton 0036                  ??i1_IR_ReadReceiver 0001  
                          _RFStarted 00C8               ??i1_MSC_CleanBufferInt 0005  
                          i1___ftmul 04DA                __end_of_RF_SetSquelch 1B06  
                     ??_RF_CheckCode 00A3           __size_of_FSH_WriteIntArray 009C  
                      IR_CheckCode@i 0032                            i2___ftmul 3D20  
                    i1MSC_DelayMS@US 0005                 __end_ofi1_RF_DataInt 1BC2  
                    i1MSC_DelayNOP@i 0003        __size_ofi2_MSC_CleanBufferInt 0056  
                      ?_RF_ResetData 0001                          ___ftdiv@exp 0019  
                    i2___ftpack@sign 0084                      ?_BUT_ReadButton 0001  
                     _IR_SavedTiming 2400                         ??_InitButton 0181  
                 __end_of_FlashWaste 2800                            _SYS_Sleep 1D5E  
                        ___ftmul@exp 0194                         ??_InitTimer0 0182  
                       ??_InitTimer1 0183                         ??_InitTimer2 0181  
                     __end_of_InitIR 19F8                       __end_of_InitRF 1524  
                  __size_of_LDO_Pass 001A                         ??_InitTimers 0183  
          __end_ofi1_IR_ReadReceiver 1640          _RF_SavedTiming_absconstaddr 002500  
               __end_of_MSC_DelayNOP 1732                ??_BUT_IR_PinChangeInt 0180  
           i1MSC_CleanBufferInt@data 0001                 __end_of_MSC_BlinkLED 13D2  
                     __end_of___ftge 0A38                         ?_Init_System 0001  
               __end_ofi2_RF_DataInt 1A14                     ?i1_TMR_Timer0Int 0001  
                      __pidataCOMRAM 1D70                    ??_RF_SetBandwidth 0180  
               __end_ofi1_TMR_Timer0 1C6A                 __end_ofi1_TMR_Timer1 1C58  
               __end_ofi1_TMR_Timer2 1C34                        low_isr@IRtemp 0046  
                     ?i2_MSC_DelayMS 0084        ADC_CalculateVoltage@ADCcounts 002A  
                         ?_RF_Enable 0001               ??_IR_CalculateCodesize 0180  
             ??_RF_CalculateCodesize 0180                            _InitMOTOR 1D64  
                       _ButtonChange 0059                    __size_ofi1___ftge 0096  
              i1BUT_ReadButton@value 0001                  start_initialization 0FCE  
                  __size_ofi2___ftge 00CE                    _ADC_ChangeChannel 188C  
                          _InitFlash 1D68               ADC_ConversionInt@state 0180  
                    i2_TMR_Timer0Int 1B7E                __size_of_FSH_Sequence 000A  
                         ?i1___ftmul 001B                            _Rail_RSSI 004C  
                    _TMR_ResetTimer0 175E                      _TMR_ResetTimer1 1732  
                    _TMR_ResetTimer2 183A                   ?_ADC_ChangeChannel 0001  
                 __end_of_InitButton 1CDE                     ??i2_RF_ResetData 0080  
               __end_of_IR_CheckCode 356A                           ?i2___ftmul 008B  
                 __end_of_InitTimer0 1946                   __end_of_InitTimer1 19C0  
                 __end_of_InitTimer2 19A4                   __end_of_InitTimers 1CD0  
                 _MSC_CleanBufferInt 12D6                       ??_RF_ResetData 0001  
               __end_ofi2_TMR_Timer0 1B7E     __size_of_SYS_ConfigureOscillator 000A  
                ??_ADC_ChangeChannel 0180               __end_of_IR_SavedTiming 2500  
                    _TMR_Timer0Start 1C8E                      _TMR_Timer1Start 1C34  
                    _TMR_Timer2Start 1A14                 FSH_EraseBlock@lowint 0013  
                  __size_of_Init_App 003C                          ??_ADC_Start 0180  
                           ??_InitIR 0186                             ??_InitRF 0186  
                ?_MSC_CleanBufferInt 0180            i2_FSH_VerifyWriteIntArray 10D0  
                         ?_SYS_Sleep 0001        __size_ofi2_FSH_AddressToBlock 0012  
                          _Timer2Use 005E     __end_ofi2_MSC_BufferCopyIntConst 0BCE  
             TMR_ResetTimer0@TimerOn 0181                  MSC_CleanBufferInt@i 0184  
                           ??___ftge 0186               TMR_ResetTimer1@TimerOn 0181  
              IR_CalculateCodesize@i 0180               TMR_ResetTimer2@TimerOn 0002  
                        __pdataBANK0 00CD                RF_CalculateCodesize@i 0180  
                    ??i1_MSC_DelayMS 0009              ?_MSC_BufferCopyIntConst 0007  
                       _FSH_Sequence 1D3C     __end_ofi1_SYS_ActivityTimerReset 1C22  
          __end_of_ADC_ChangeChannel 18B2                    __size_of___ftpack 0120  
                         ?_InitMOTOR 0001                        _IR_DataTiming 0200  
               ??_MSC_CleanBufferInt 0184                          __pbssCOMRAM 0048  
                         ?_InitFlash 0001              __size_ofi2_FSH_Sequence 000A  
                  __size_of___lwtoft 002C                        __pcstackBANK0 0080  
                      __pcstackBANK1 0180                             ?_MTR_IN1 0001  
                           ?_MTR_IN2 0001                    ??_IR_ReadReceiver 0180  
                __CFG_CCP2MX$DEFAULT 000000              MSC_CleanBufferInt@count 0182  
               __end_of_IR_ResetData 1D08              __size_ofi1_MSC_DelayNOP 0020  
                  __size_of_high_isr 3BAC                     ??_IR_CleanBuffer 0007  
                           ?_InitADC 0001                             ?_InitLDO 0001  
                    RF_CheckCode@Low 00A5                   _FSH_AddressToBlock 1CB2  
                _System_State_Change 00CC           __size_ofi1_IR_ReadReceiver 0036  
                          __pintcode 0008            i1MSC_CleanBufferInt@count 0003  
                      __pmediumconst 2800                      RF_DataInt@state 0180  
                          __ptext100 17E2                            __ptext101 3D20  
                          __ptext110 1B7E                            __ptext102 03BA  
                          __ptext111 19F8                            __ptext103 0A38  
                          __ptext112 089A                            __ptext104 2844  
                          __ptext113 10D0                            __ptext105 1D16  
                          __ptext114 0F40                            __ptext106 0B06  
                          __ptext115 1214                            __ptext107 132C  
                          __ptext116 180E                            __ptext108 1D24  
                          __ptext117 1D46                            __ptext109 1BEA  
                          __ptext118 1CA0                             ?___ftdiv 000C  
                           ?___ftmul 018B                             ?___fttol 0180  
     __end_of_MSC_BufferCopyIntConst 0E0E                __end_of_TMR_Timer0Int 1AD6  
              __end_of_TMR_Timer1Int 1AA6                __end_of_TMR_Timer2Int 1A76  
               __end_of_RF_CheckCode 3822                __end_of_TMR_Timer1Osc 1966  
                    ??i2_MSC_DelayMS 0088                          __pintcodelo 0018  
           __size_of_FSH_Write_IR_RF 040C                         MSC_DelayMS@i 0189  
            __end_ofi2_TMR_Timer0Int 1B96                    ?_TMR_Timer0Status 0001  
                ?_FSH_AddressToBlock 0001                    ?_TMR_Timer1Status 0001  
                      ??_MSC_DelayMS 0188           ??i2_SYS_ActivityTimerReset 0080  
            __end_of_TMR_ResetTimer0 178A              __end_of_TMR_ResetTimer1 175E  
            __end_of_TMR_ResetTimer2 1864                        ??i2_RF_Enable 0081  
                 ??_TMR_Timer0Status 0080                          ??_RF_Enable 0002  
                 ??_TMR_Timer1Status 0001                   _TMR_Timer1Function 16A8  
       __size_ofi1_ADC_ChangeChannel 0026                __size_ofi1_RF_DataInt 0016  
                           ?_low_isr 0001                     i1_BUT_ReadButton 1640  
                        ??i1___ftmul 0021                  __end_of_PCB_Version 280A  
            __end_of_TMR_Timer0Start 1CA0              __end_of_TMR_Timer1Start 1C46  
            __end_of_TMR_Timer2Start 1A2E                          ??i2___ftmul 0091  
                  ?i2_FSH_EraseBlock 008D                  ?_TMR_Timer1Function 0001  
               ??_FSH_AddressToBlock 0005                             _DC_Motor 00C4  
                 ??i2_FSH_EraseBlock 0091                  RF_SetBandwidth@band 0180  
                      ??_IR_LoadCode 019A                __size_of_MSC_DelayNOP 002C  
                      LDO_Pass@state 0180                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D                             _LDO_Pass 3FDE  
                    IR_LoadCode@High 019D                __size_of_MSC_BlinkLED 0050  
                        ??_SYS_Sleep 0180                             i1u623_25 30A2  
                           i1u625_20 3118                __size_ofi2_RF_DataInt 001C  
                           i1u548_20 12C8                             _PIR1bits 000F9E  
                           _IRChange 005A                             i2u576_40 1138  
                           i2u683_45 2C3C                             i2u685_40 2CEE  
                           _RCONbits 000FD0           i2MSC_BufferCopyIntConst@to 0089  
                   __CFG_WDTPS$32768 000000                __size_ofi1_TMR_Timer0 0012  
              __size_ofi1_TMR_Timer1 0012                __size_ofi1_TMR_Timer2 0012  
               i1TMR_Timer0Int@state 0001             ?_FSH_VerifyWriteIntArray 0001  
               ??_TMR_Timer1Function 0182                             _IR_Saved 00D0  
                   ??_FSH_EraseBlock 0012                         i1_RF_DataInt 1BAC  
           i2_MSC_BufferCopyIntConst 0B06                             _RF_Saved 00D1  
               __end_of_RF_ResetData 1CFA                    i2_FSH_Write_IR_RF 2844  
                           i1___ftge 0EAA                           _ADCON0bits 000FC2  
                         _ADCON1bits 000FC1                           _ADCON2bits 000FC0  
                           i2___ftge 0A38                 __size_of_Init_System 0032  
         __size_of_ADC_ChangeChannel 0026                       i1MSC_DelayMS@i 000A  
                 ?i2_FSH_Write_IR_RF 0001                          ??_InitMOTOR 0180  
              __size_of_IR_CheckCode 03D2                          ??_InitFlash 0180  
                __end_of_MSC_DelayMS 1214             i1_SYS_ActivityTimerReset 1C10  
              __size_ofi2_TMR_Timer0 0018                         _MSC_DelayNOP 1706  
                        _INTCON2bits 000FF1                        ??_RF_LoadCode 019A  
                __end_ofi2_RF_Enable 1BFE                          _INTCON3bits 000FF0  
                ??i2_FSH_Write_IR_RF 0094                            copy_data0 102E  
                   __size_of_MTR_IN1 0018                     __size_of_MTR_IN2 0018  
                       _MSC_BlinkLED 1382           i2FSH_VerifyWriteIntArray@i 008A  
      __size_of_ADC_CalculateVoltage 00C6                         i2_RF_DataInt 19F8  
            _SYS_ConfigureOscillator 1D32                     ??_BUT_ReadButton 0180  
       __size_ofi2_FSH_WriteIntArray 00D0                      i2MSC_DelayMS@US 0084  
                    i2MSC_DelayNOP@i 0082                             _Init_App 1524  
                      ??_RF_Receiver 0180              __size_ofi2_MSC_DelayNOP 002C  
                           _Rail_VIN 00CD       FSH_Write_IR_RF@FlashWasteindex 001D  
   i2FSH_Write_IR_RF@FlashWasteindex 009C                           _ADC_Module 1B36  
             FSH_Write_IR_RF@highint 001B                         i1_TMR_Timer0 1C58  
                       i1_TMR_Timer1 1C46                         i1_TMR_Timer2 1C22  
          FSH_Write_IR_RF@WriteTries 0023                           _EECON1bits 000FA6  
                           __Hparam0 0000                     __size_of_InitADC 0028  
                   __size_of_InitLDO 0008                      _RF_SetBandwidth 1560  
                           __Lparam0 0000         __end_ofi2_MSC_CleanBufferInt 1382  
                __end_of_IR_LoadCode 089A            __end_ofi2_FSH_Write_IR_RF 2D8C  
                       _IR_CheckCode 3198                         _IR_DataPlace 005D  
                   __size_of___ftdiv 00EC                     __size_of___ftmul 016C  
                   __size_of___fttol 0152                   i2FSH_Write_IR_RF@i 00A0  
                 i2FSH_Write_IR_RF@j 009E                             ___ftpack 029A  
                   ?i2_TMR_Timer0Int 0001             ??_SYS_ActivityTimerReset 0180  
                       i2_TMR_Timer0 1B66                          _PCB_Version 2801  
                           ___lwtoft 178A               MSC_CleanBufferInt@data 0180  
  FSH_VerifyWriteIntArray@ConstArray 0001  i2FSH_VerifyWriteIntArray@ConstArray 0080  
                   ?_TMR_ResetTimer0 0001                     ?_TMR_ResetTimer1 0001  
                   ?_TMR_ResetTimer2 0001                       i2_FSH_Sequence 1D46  
                low_isr@button_state 0045                        _RF_DataTiming 0300  
                  ??_FSH_Write_IR_RF 0015                __size_of_IR_ResetData 000E  
                   __size_of_low_isr 027E                             __ptext10 1A46  
                           __ptext11 1382                             __ptext20 1A8E  
                           __ptext12 11B0                             __ptext21 16A8  
                           __ptext13 1706                             __ptext30 1AEE  
                           __ptext22 1946                             __ptext14 1676  
                           __ptext31 1560                             __ptext23 1732  
                           __ptext15 1CC2                             __ptext40 1CD0  
                           __ptext32 1B06                             __ptext24 1AA6  
                           __ptext16 1986                             __ptext41 159A  
                           __ptext33 19C0                             __ptext25 1924  
                           __ptext17 1A5E                             __ptext50 178A  
                           __ptext42 1B1E                             __ptext34 1D64  
                           __ptext26 1ABE                             __ptext18 1A76  
                           __ptext51 3E8C                             __ptext43 1864  
                           __ptext35 1D50                             __ptext27 175E  
                           __ptext19 19A4                             __ptext60 1A14  
                           __ptext52 3BB4                             __ptext44 1B36  
                           __ptext36 3FDE                             __ptext28 1AD6  
                           __ptext61 183A                             __ptext53 029A  
                           __ptext45 1B4E                             __ptext37 19DC  
                           __ptext29 14E8                             __ptext70 3198  
                           __ptext62 1C22                             __ptext54 1462  
                           __ptext46 188C                             __ptext38 12D6  
                           __ptext71 0EAA                             __ptext63 1CDE  
                           __ptext55 1D6C                             __ptext47 15D2  
                           __ptext39 1D68                             __ptext80 0E0E  
                           __ptext72 2D8C                             __ptext64 1C34  
                           __ptext48 1524                             __ptext81 1278  
                           __ptext73 1CEC                             __ptext65 18B2  
                           __ptext57 1C10                             __ptext49 07B2  
                           __ptext90 18FE                             __ptext82 1056  
                           __ptext74 0D5A                             __ptext66 1C46  
                           __ptext58 160A                             __ptext91 05DC  
                           __ptext83 13D2                             __ptext75 14A8  
                           __ptext67 1BC2                             __ptext59 1640  
                           __ptext92 0C94                             __ptext84 1966  
                           __ptext76 1CFA                             __ptext68 1C58  
                           __ptext85 1D3C                             __ptext77 1BD6  
                           __ptext69 1B96                             __ptext94 1C7C  
                           __ptext86 1CB2                             __ptext78 1C6A  
                           __ptext95 1D08                             __ptext87 0BCE  
                           __ptext79 1BAC                             __ptext96 1C8E  
                           __ptext88 18D8                             __ptext97 17B6  
                           __ptext89 04DA                             __ptext98 1B66  
                           __ptext99 356A        i2MSC_BufferCopyIntConst@count 008B  
      i2MSC_BufferCopyIntConst@shift 008D                    i1TMR_Timer0@state 0001  
                   ?_TMR_Timer0Start 0001                     ?_TMR_Timer1Start 0001  
                           _high_isr 0008                    i1TMR_Timer1@state 0001  
                   ?_TMR_Timer2Start 0003                    i1TMR_Timer2@state 0001  
      __size_ofi1_MSC_CleanBufferInt 0040                       i1_MSC_DelayNOP 1966  
                      __size_of_main 0212          __end_of_BUT_IR_PinChangeInt 1B36  
                     _Activity_Timer 0048             i2FSH_WriteIntArray@Array 0084  
                __end_of_RF_LoadCode 07B2      __end_of_FSH_VerifyWriteIntArray 12D6  
              __size_of_RF_CheckCode 02B8                         MTR_IN1@state 0180  
                __end_of_RF_Receiver 1B1E                         MTR_IN2@state 0180  
                  _SYS_ActivityTimer 16DA               __size_of_RF_SetSquelch 0018  
                 ?_SYS_ActivityTimer 0001                         _IR_ResetData 1CFA  
                    _IR_ReadReceiver 15D2                          _MSC_DelayMS 11B0  
             __end_ofi2_FSH_Sequence 1D50                             exp@coeff 280A  
                           log@coeff 2828                         _IRValue_prev 00C6  
                     i2MSC_DelayMS@i 0089                          i2_RF_Enable 1BEA  
                        _OSCTUNEbits 000F9B                           _INTCONbits 000FF2  
       __end_ofi2_FSH_AddressToBlock 1CB2              __size_ofi2_IR_ResetData 000E  
              FSH_Write_IR_RF@lowint 001C             __size_ofi1_TMR_Timer0Int 0012  
      __size_of_IR_CalculateCodesize 0046                  ??_SYS_ActivityTimer 0180  
      __size_of_RF_CalculateCodesize 0046                FSH_Write_IR_RF@status 0020  
          ??_SYS_ConfigureOscillator 0180                     MSC_DelayNOP@NOPs 0180  
                 FSH_WriteIntArray@i 000D               __end_ofi1_MSC_DelayNOP 1986  
                       _RF_CheckCode 356A                             intlevel1 0000  
                           intlevel2 0000                          _IR_CodeSize 005C  
            __end_of_RF_SetBandwidth 159A                         _RF_DataPlace 00CB  
                      RF_CheckCode@i 00AB                          ?_ADC_Module 0001  
                  i2TMR_Timer0@state 0080                          _IR_LoadCode 07B2  
                i1_ADC_ChangeChannel 18FE                           _OSCCONbits 000FD3  
           __end_ofi1_BUT_ReadButton 1676            __end_of_SYS_ActivityTimer 1706  
                     _RF_SavedTiming 2500                __size_of_RF_ResetData 000E  
         __size_ofi2_FSH_Write_IR_RF 0548          i2FSH_AddressToBlock@Address 0080  
              __end_ofi1_MSC_DelayMS 141C                      ?i2_FSH_Sequence 0001  
    __size_of_SYS_ActivityTimerReset 0012                          _IR_SyncHigh 004F  
               ?i1_ADC_ChangeChannel 0001                          _RF_CodeSize 00C9  
        __size_of_MSC_CleanBufferInt 0056                      ?i1_MSC_DelayNOP 0001  
                      _RF_SetSquelch 1AEE                          _RF_LoadCode 06C8  
                         _RF_DataInt 19C0                 i2_MSC_CleanBufferInt 132C  
          __size_of_TMR_Timer0Status 000E            __size_of_TMR_Timer1Status 000E  
                         _IR_SyncLow 0051                    MSC_BlinkLED@blink 018D  
                     i2_MSC_DelayNOP 180E                           _RF_Disable 1BC2  
                  MSC_BlinkLED@speed 018F                         _RF_ResetData 1CEC  
                        _RF_Receiver 1B06             i2TMR_ResetTimer0@TimerOn 0081  
                         _MTR_Rotate 1148           i2FSH_EraseBlock@WriteTries 0093  
         ??i2_MSC_BufferCopyIntConst 008F               __end_of_RF_SavedTiming 2600  
            __size_ofi2_RF_ResetData 000E  
