

Microchip Technology PIC18 PRO Macro Assembler V1.35 build -356382666 
                                                                                               Tue Sep 01 13:53:55 2015

Microchip Technology Omniscient Code Generator v1.35 (PRO mode) build 201507080246
     1                           	processor	18F24J10
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK1,global,class=CODE,delta=1
     7                           	psect	_FlashWaste_const,global,ovrld,reloc=2,class=CODE,delta=1
     8                           	psect	_IR_SavedTiming0_const,global,ovrld,reloc=2,class=CODE,delta=1
     9                           	psect	_IR_SavedTiming1_const,global,ovrld,reloc=2,class=CODE,delta=1
    10                           	psect	_RF_SavedTiming_const,global,ovrld,reloc=2,class=CODE,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   118                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
   145                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   146                           	psect	param0,global,class=BANK0,space=1,delta=1
   147                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   148  0000                     
   149                           	psect	idataCOMRAM
   150  001BA2                     __pidataCOMRAM:
   151                           	opt stack 0
   152                           
   153                           ;initializer for _ADC_CurrentSource
   154  001BA2  0A                 	db	10
   155                           
   156                           	psect	idataBANK1
   157  001B84                     __pidataBANK1:
   158                           	opt stack 0
   159                           
   160                           ;initializer for _Rail_VIN
   161  001B84  00                 	db	0
   162  001B85  90                 	db	144
   163  001B86  40                 	db	64
   164                           
   165                           ;initializer for _IR_Saved
   166  001B87  5B                 	db	91
   167                           
   168                           ;initializer for _RF_Saved
   169  001B88  5B                 	db	91
   170                           
   171                           ;initializer for _System_State
   172  001B89  08                 	db	8
   173  0000                     _FlashWaste_absconstaddr	set	9728
   174  0000                     _IR_SavedTiming0_absconstaddr	set	9216
   175  0000                     _IR_SavedTiming1_absconstaddr	set	9408
   176  0000                     _RF_SavedTiming_absconstaddr	set	9600
   177  0000                     _FlashWaste_absconstaddr	set	9728
   178                           
   179                           	psect	_FlashWaste_const
   180  002600                     __p_FlashWaste_const:
   181                           	opt stack 0
   182  002600                     _FlashWaste:
   183                           	opt stack 0
   184  002600  DA                 	db	218
   185  002601  DA                 	db	218
   186  002602  DA                 	db	218
   187  002603  DA                 	db	218
   188  002604  DA                 	db	218
   189  002605  DA                 	db	218
   190  002606  DA                 	db	218
   191  002607  DA                 	db	218
   192  002608  DA                 	db	218
   193  002609  DA                 	db	218
   194  00260A  DA                 	db	218
   195  00260B  DA                 	db	218
   196  00260C  DA                 	db	218
   197  00260D  DA                 	db	218
   198  00260E  DA                 	db	218
   199  00260F  DA                 	db	218
   200  002610  DA                 	db	218
   201  002611  DA                 	db	218
   202  002612  DA                 	db	218
   203  002613  DA                 	db	218
   204  002614  DA                 	db	218
   205  002615  DA                 	db	218
   206  002616  DA                 	db	218
   207  002617  DA                 	db	218
   208  002618  DA                 	db	218
   209  002619  DA                 	db	218
   210  00261A  DA                 	db	218
   211  00261B  DA                 	db	218
   212  00261C  DA                 	db	218
   213  00261D  DA                 	db	218
   214  00261E  DA                 	db	218
   215  00261F  DA                 	db	218
   216  002620  DA                 	db	218
   217  002621  DA                 	db	218
   218  002622  DA                 	db	218
   219  002623  DA                 	db	218
   220  002624  DA                 	db	218
   221  002625  DA                 	db	218
   222  002626  DA                 	db	218
   223  002627  DA                 	db	218
   224  002628  DA                 	db	218
   225  002629  DA                 	db	218
   226  00262A  DA                 	db	218
   227  00262B  DA                 	db	218
   228  00262C  DA                 	db	218
   229  00262D  DA                 	db	218
   230  00262E  DA                 	db	218
   231  00262F  DA                 	db	218
   232  002630  DA                 	db	218
   233  002631  DA                 	db	218
   234  002632  DA                 	db	218
   235  002633  DA                 	db	218
   236  002634  DA                 	db	218
   237  002635  DA                 	db	218
   238  002636  DA                 	db	218
   239  002637  DA                 	db	218
   240  002638  DA                 	db	218
   241  002639  DA                 	db	218
   242  00263A  DA                 	db	218
   243  00263B  DA                 	db	218
   244  00263C  DA                 	db	218
   245  00263D  DA                 	db	218
   246  00263E  DA                 	db	218
   247  00263F  DA                 	db	218
   248  002640  DA                 	db	218
   249  002641  DA                 	db	218
   250  002642  DA                 	db	218
   251  002643  DA                 	db	218
   252  002644  DA                 	db	218
   253  002645  DA                 	db	218
   254  002646  DA                 	db	218
   255  002647  DA                 	db	218
   256  002648  DA                 	db	218
   257  002649  DA                 	db	218
   258  00264A  DA                 	db	218
   259  00264B  DA                 	db	218
   260  00264C  DA                 	db	218
   261  00264D  DA                 	db	218
   262  00264E  DA                 	db	218
   263  00264F  DA                 	db	218
   264  002650  DA                 	db	218
   265  002651  DA                 	db	218
   266  002652  DA                 	db	218
   267  002653  DA                 	db	218
   268  002654  DA                 	db	218
   269  002655  DA                 	db	218
   270  002656  DA                 	db	218
   271  002657  DA                 	db	218
   272  002658  DA                 	db	218
   273  002659  DA                 	db	218
   274  00265A  DA                 	db	218
   275  00265B  DA                 	db	218
   276  00265C  DA                 	db	218
   277  00265D  DA                 	db	218
   278  00265E  DA                 	db	218
   279  00265F  DA                 	db	218
   280  002660  DA                 	db	218
   281  002661  DA                 	db	218
   282  002662  DA                 	db	218
   283  002663  DA                 	db	218
   284  002664  DA                 	db	218
   285  002665  DA                 	db	218
   286  002666  DA                 	db	218
   287  002667  DA                 	db	218
   288  002668  DA                 	db	218
   289  002669  DA                 	db	218
   290  00266A  DA                 	db	218
   291  00266B  DA                 	db	218
   292  00266C  DA                 	db	218
   293  00266D  DA                 	db	218
   294  00266E  DA                 	db	218
   295  00266F  DA                 	db	218
   296  002670  DA                 	db	218
   297  002671  DA                 	db	218
   298  002672  DA                 	db	218
   299  002673  DA                 	db	218
   300  002674  DA                 	db	218
   301  002675  DA                 	db	218
   302  002676  DA                 	db	218
   303  002677  DA                 	db	218
   304  002678  DA                 	db	218
   305  002679  DA                 	db	218
   306  00267A  DA                 	db	218
   307  00267B  DA                 	db	218
   308  00267C  DA                 	db	218
   309  00267D  DA                 	db	218
   310  00267E  DA                 	db	218
   311  00267F  DA                 	db	218
   312  002680  DA                 	db	218
   313  002681  DA                 	db	218
   314  002682  DA                 	db	218
   315  002683  DA                 	db	218
   316  002684  DA                 	db	218
   317  002685  DA                 	db	218
   318  002686  DA                 	db	218
   319  002687  DA                 	db	218
   320  002688  DA                 	db	218
   321  002689  DA                 	db	218
   322  00268A  DA                 	db	218
   323  00268B  DA                 	db	218
   324  00268C  DA                 	db	218
   325  00268D  DA                 	db	218
   326  00268E  DA                 	db	218
   327  00268F  DA                 	db	218
   328  002690  DA                 	db	218
   329  002691  DA                 	db	218
   330  002692  DA                 	db	218
   331  002693  DA                 	db	218
   332  002694  DA                 	db	218
   333  002695  DA                 	db	218
   334  002696  DA                 	db	218
   335  002697  DA                 	db	218
   336  002698  DA                 	db	218
   337  002699  DA                 	db	218
   338  00269A  DA                 	db	218
   339  00269B  DA                 	db	218
   340  00269C  DA                 	db	218
   341  00269D  DA                 	db	218
   342  00269E  DA                 	db	218
   343  00269F  DA                 	db	218
   344  0026A0  DA                 	db	218
   345  0026A1  DA                 	db	218
   346  0026A2  DA                 	db	218
   347  0026A3  DA                 	db	218
   348  0026A4  DA                 	db	218
   349  0026A5  DA                 	db	218
   350  0026A6  DA                 	db	218
   351  0026A7  DA                 	db	218
   352  0026A8  DA                 	db	218
   353  0026A9  DA                 	db	218
   354  0026AA  DA                 	db	218
   355  0026AB  DA                 	db	218
   356  0026AC  DA                 	db	218
   357  0026AD  DA                 	db	218
   358  0026AE  DA                 	db	218
   359  0026AF  DA                 	db	218
   360  0026B0  DA                 	db	218
   361  0026B1  DA                 	db	218
   362  0026B2  DA                 	db	218
   363  0026B3  DA                 	db	218
   364  0026B4  DA                 	db	218
   365  0026B5  DA                 	db	218
   366  0026B6  DA                 	db	218
   367  0026B7  DA                 	db	218
   368  0026B8  DA                 	db	218
   369  0026B9  DA                 	db	218
   370  0026BA  DA                 	db	218
   371  0026BB  DA                 	db	218
   372  0026BC  DA                 	db	218
   373  0026BD  DA                 	db	218
   374  0026BE  DA                 	db	218
   375  0026BF  DA                 	db	218
   376  0026C0  DA                 	db	218
   377  0026C1  DA                 	db	218
   378  0026C2  DA                 	db	218
   379  0026C3  DA                 	db	218
   380  0026C4  DA                 	db	218
   381  0026C5  DA                 	db	218
   382  0026C6  DA                 	db	218
   383  0026C7  DA                 	db	218
   384  0026C8  DA                 	db	218
   385  0026C9  DA                 	db	218
   386  0026CA  DA                 	db	218
   387  0026CB  DA                 	db	218
   388  0026CC  DA                 	db	218
   389  0026CD  DA                 	db	218
   390  0026CE  DA                 	db	218
   391  0026CF  DA                 	db	218
   392  0026D0  DA                 	db	218
   393  0026D1  DA                 	db	218
   394  0026D2  DA                 	db	218
   395  0026D3  DA                 	db	218
   396  0026D4  DA                 	db	218
   397  0026D5  DA                 	db	218
   398  0026D6  DA                 	db	218
   399  0026D7  DA                 	db	218
   400  0026D8  DA                 	db	218
   401  0026D9  DA                 	db	218
   402  0026DA  DA                 	db	218
   403  0026DB  DA                 	db	218
   404  0026DC  DA                 	db	218
   405  0026DD  DA                 	db	218
   406  0026DE  DA                 	db	218
   407  0026DF  DA                 	db	218
   408  0026E0  DA                 	db	218
   409  0026E1  DA                 	db	218
   410  0026E2  DA                 	db	218
   411  0026E3  DA                 	db	218
   412  0026E4  DA                 	db	218
   413  0026E5  DA                 	db	218
   414  0026E6  DA                 	db	218
   415  0026E7  DA                 	db	218
   416  0026E8  DA                 	db	218
   417  0026E9  DA                 	db	218
   418  0026EA  DA                 	db	218
   419  0026EB  DA                 	db	218
   420  0026EC  DA                 	db	218
   421  0026ED  DA                 	db	218
   422  0026EE  DA                 	db	218
   423  0026EF  DA                 	db	218
   424  0026F0  DA                 	db	218
   425  0026F1  DA                 	db	218
   426  0026F2  DA                 	db	218
   427  0026F3  DA                 	db	218
   428  0026F4  DA                 	db	218
   429  0026F5  DA                 	db	218
   430  0026F6  DA                 	db	218
   431  0026F7  DA                 	db	218
   432  0026F8  DA                 	db	218
   433  0026F9  DA                 	db	218
   434  0026FA  DA                 	db	218
   435  0026FB  DA                 	db	218
   436  0026FC  DA                 	db	218
   437  0026FD  DA                 	db	218
   438  0026FE  DA                 	db	218
   439  0026FF  DA                 	db	218
   440  002700  DA                 	db	218
   441  002701  DA                 	db	218
   442  002702  DA                 	db	218
   443  002703  DA                 	db	218
   444  002704  DA                 	db	218
   445  002705  DA                 	db	218
   446  002706  DA                 	db	218
   447  002707  DA                 	db	218
   448  002708  DA                 	db	218
   449  002709  DA                 	db	218
   450  00270A  DA                 	db	218
   451  00270B  DA                 	db	218
   452  00270C  DA                 	db	218
   453  00270D  DA                 	db	218
   454  00270E  DA                 	db	218
   455  00270F  DA                 	db	218
   456  002710  DA                 	db	218
   457  002711  DA                 	db	218
   458  002712  DA                 	db	218
   459  002713  DA                 	db	218
   460  002714  DA                 	db	218
   461  002715  DA                 	db	218
   462  002716  DA                 	db	218
   463  002717  DA                 	db	218
   464  002718  DA                 	db	218
   465  002719  DA                 	db	218
   466  00271A  DA                 	db	218
   467  00271B  DA                 	db	218
   468  00271C  DA                 	db	218
   469  00271D  DA                 	db	218
   470  00271E  DA                 	db	218
   471  00271F  DA                 	db	218
   472  002720  DA                 	db	218
   473  002721  DA                 	db	218
   474  002722  DA                 	db	218
   475  002723  DA                 	db	218
   476  002724  DA                 	db	218
   477  002725  DA                 	db	218
   478  002726  DA                 	db	218
   479  002727  DA                 	db	218
   480  002728  DA                 	db	218
   481  002729  DA                 	db	218
   482  00272A  DA                 	db	218
   483  00272B  DA                 	db	218
   484  00272C  DA                 	db	218
   485  00272D  DA                 	db	218
   486  00272E  DA                 	db	218
   487  00272F  DA                 	db	218
   488  002730  DA                 	db	218
   489  002731  DA                 	db	218
   490  002732  DA                 	db	218
   491  002733  DA                 	db	218
   492  002734  DA                 	db	218
   493  002735  DA                 	db	218
   494  002736  DA                 	db	218
   495  002737  DA                 	db	218
   496  002738  DA                 	db	218
   497  002739  DA                 	db	218
   498  00273A  DA                 	db	218
   499  00273B  DA                 	db	218
   500  00273C  DA                 	db	218
   501  00273D  DA                 	db	218
   502  00273E  DA                 	db	218
   503  00273F  DA                 	db	218
   504  002740  DA                 	db	218
   505  002741  DA                 	db	218
   506  002742  DA                 	db	218
   507  002743  DA                 	db	218
   508  002744  DA                 	db	218
   509  002745  DA                 	db	218
   510  002746  DA                 	db	218
   511  002747  DA                 	db	218
   512  002748  DA                 	db	218
   513  002749  DA                 	db	218
   514  00274A  DA                 	db	218
   515  00274B  DA                 	db	218
   516  00274C  DA                 	db	218
   517  00274D  DA                 	db	218
   518  00274E  DA                 	db	218
   519  00274F  DA                 	db	218
   520  002750  DA                 	db	218
   521  002751  DA                 	db	218
   522  002752  DA                 	db	218
   523  002753  DA                 	db	218
   524  002754  DA                 	db	218
   525  002755  DA                 	db	218
   526  002756  DA                 	db	218
   527  002757  DA                 	db	218
   528  002758  DA                 	db	218
   529  002759  DA                 	db	218
   530  00275A  DA                 	db	218
   531  00275B  DA                 	db	218
   532  00275C  DA                 	db	218
   533  00275D  DA                 	db	218
   534  00275E  DA                 	db	218
   535  00275F  DA                 	db	218
   536  002760  DA                 	db	218
   537  002761  DA                 	db	218
   538  002762  DA                 	db	218
   539  002763  DA                 	db	218
   540  002764  DA                 	db	218
   541  002765  DA                 	db	218
   542  002766  DA                 	db	218
   543  002767  DA                 	db	218
   544  002768  DA                 	db	218
   545  002769  DA                 	db	218
   546  00276A  DA                 	db	218
   547  00276B  DA                 	db	218
   548  00276C  DA                 	db	218
   549  00276D  DA                 	db	218
   550  00276E  DA                 	db	218
   551  00276F  DA                 	db	218
   552  002770  DA                 	db	218
   553  002771  DA                 	db	218
   554  002772  DA                 	db	218
   555  002773  DA                 	db	218
   556  002774  DA                 	db	218
   557  002775  DA                 	db	218
   558  002776  DA                 	db	218
   559  002777  DA                 	db	218
   560  002778  DA                 	db	218
   561  002779  DA                 	db	218
   562  00277A  DA                 	db	218
   563  00277B  DA                 	db	218
   564  00277C  DA                 	db	218
   565  00277D  DA                 	db	218
   566  00277E  DA                 	db	218
   567  00277F  DA                 	db	218
   568  002780  DA                 	db	218
   569  002781  DA                 	db	218
   570  002782  DA                 	db	218
   571  002783  DA                 	db	218
   572  002784  DA                 	db	218
   573  002785  DA                 	db	218
   574  002786  DA                 	db	218
   575  002787  DA                 	db	218
   576  002788  DA                 	db	218
   577  002789  DA                 	db	218
   578  00278A  DA                 	db	218
   579  00278B  DA                 	db	218
   580  00278C  DA                 	db	218
   581  00278D  DA                 	db	218
   582  00278E  DA                 	db	218
   583  00278F  DA                 	db	218
   584  002790  DA                 	db	218
   585  002791  DA                 	db	218
   586  002792  DA                 	db	218
   587  002793  DA                 	db	218
   588  002794  DA                 	db	218
   589  002795  DA                 	db	218
   590  002796  DA                 	db	218
   591  002797  DA                 	db	218
   592  002798  DA                 	db	218
   593  002799  DA                 	db	218
   594  00279A  DA                 	db	218
   595  00279B  DA                 	db	218
   596  00279C  DA                 	db	218
   597  00279D  DA                 	db	218
   598  00279E  DA                 	db	218
   599  00279F  DA                 	db	218
   600  0027A0  DA                 	db	218
   601  0027A1  DA                 	db	218
   602  0027A2  DA                 	db	218
   603  0027A3  DA                 	db	218
   604  0027A4  DA                 	db	218
   605  0027A5  DA                 	db	218
   606  0027A6  DA                 	db	218
   607  0027A7  DA                 	db	218
   608  0027A8  DA                 	db	218
   609  0027A9  DA                 	db	218
   610  0027AA  DA                 	db	218
   611  0027AB  DA                 	db	218
   612  0027AC  DA                 	db	218
   613  0027AD  DA                 	db	218
   614  0027AE  DA                 	db	218
   615  0027AF  DA                 	db	218
   616  0027B0  DA                 	db	218
   617  0027B1  DA                 	db	218
   618  0027B2  DA                 	db	218
   619  0027B3  DA                 	db	218
   620  0027B4  DA                 	db	218
   621  0027B5  DA                 	db	218
   622  0027B6  DA                 	db	218
   623  0027B7  DA                 	db	218
   624  0027B8  DA                 	db	218
   625  0027B9  DA                 	db	218
   626  0027BA  DA                 	db	218
   627  0027BB  DA                 	db	218
   628  0027BC  DA                 	db	218
   629  0027BD  DA                 	db	218
   630  0027BE  DA                 	db	218
   631  0027BF  DA                 	db	218
   632  0027C0  DA                 	db	218
   633  0027C1  DA                 	db	218
   634  0027C2  DA                 	db	218
   635  0027C3  DA                 	db	218
   636  0027C4  DA                 	db	218
   637  0027C5  DA                 	db	218
   638  0027C6  DA                 	db	218
   639  0027C7  DA                 	db	218
   640  0027C8  DA                 	db	218
   641  0027C9  DA                 	db	218
   642  0027CA  DA                 	db	218
   643  0027CB  DA                 	db	218
   644  0027CC  DA                 	db	218
   645  0027CD  DA                 	db	218
   646  0027CE  DA                 	db	218
   647  0027CF  DA                 	db	218
   648  0027D0  DA                 	db	218
   649  0027D1  DA                 	db	218
   650  0027D2  DA                 	db	218
   651  0027D3  DA                 	db	218
   652  0027D4  DA                 	db	218
   653  0027D5  DA                 	db	218
   654  0027D6  DA                 	db	218
   655  0027D7  DA                 	db	218
   656  0027D8  DA                 	db	218
   657  0027D9  DA                 	db	218
   658  0027DA  DA                 	db	218
   659  0027DB  DA                 	db	218
   660  0027DC  DA                 	db	218
   661  0027DD  DA                 	db	218
   662  0027DE  DA                 	db	218
   663  0027DF  DA                 	db	218
   664  0027E0  DA                 	db	218
   665  0027E1  DA                 	db	218
   666  0027E2  DA                 	db	218
   667  0027E3  DA                 	db	218
   668  0027E4  DA                 	db	218
   669  0027E5  DA                 	db	218
   670  0027E6  DA                 	db	218
   671  0027E7  DA                 	db	218
   672  0027E8  DA                 	db	218
   673  0027E9  DA                 	db	218
   674  0027EA  DA                 	db	218
   675  0027EB  DA                 	db	218
   676  0027EC  DA                 	db	218
   677  0027ED  DA                 	db	218
   678  0027EE  DA                 	db	218
   679  0027EF  DA                 	db	218
   680  0027F0  DA                 	db	218
   681  0027F1  DA                 	db	218
   682  0027F2  DA                 	db	218
   683  0027F3  DA                 	db	218
   684  0027F4  DA                 	db	218
   685  0027F5  DA                 	db	218
   686  0027F6  DA                 	db	218
   687  0027F7  DA                 	db	218
   688  0027F8  DA                 	db	218
   689  0027F9  DA                 	db	218
   690  0027FA  DA                 	db	218
   691  0027FB  DA                 	db	218
   692  0027FC  DA                 	db	218
   693  0027FD  DA                 	db	218
   694  0027FE  DA                 	db	218
   695  0027FF  DA                 	db	218
   696  002800                     __end_of_FlashWaste:
   697                           	opt stack 0
   698  0000                     _IR_SavedTiming0_absconstaddr	set	9216
   699                           
   700                           	psect	_IR_SavedTiming0_const
   701  002400                     __p_IR_SavedTiming0_const:
   702                           	opt stack 0
   703  002400                     _IR_SavedTiming0:
   704                           	opt stack 0
   705  002400  2198               	dw	8600
   706  002402  1068               	dw	4200
   707  002404  01C2               	dw	450
   708  002406  04B0               	dw	1200
   709  002408  01C2               	dw	450
   710  00240A  01C2               	dw	450
   711  00240C  01C2               	dw	450
   712  00240E  04B0               	dw	1200
   713  002410  01C2               	dw	450
   714  002412  04B0               	dw	1200
   715  002414  01C2               	dw	450
   716  002416  01C2               	dw	450
   717  002418  01C2               	dw	450
   718  00241A  04B0               	dw	1200
   719  00241C  01C2               	dw	450
   720  00241E  01C2               	dw	450
   721  002420  01C2               	dw	450
   722  002422  04B0               	dw	1200
   723  002424  01C2               	dw	450
   724  002426  01C2               	dw	450
   725  002428  01C2               	dw	450
   726  00242A  04B0               	dw	1200
   727  00242C  01C2               	dw	450
   728  00242E  01C2               	dw	450
   729  002430  01C2               	dw	450
   730  002432  01C2               	dw	450
   731  002434  01C2               	dw	450
   732  002436  04B0               	dw	1200
   733  002438  01C2               	dw	450
   734  00243A  01C2               	dw	450
   735  00243C  01C2               	dw	450
   736  00243E  04B0               	dw	1200
   737  002440  01C2               	dw	450
   738  002442  01C2               	dw	450
   739  002444  01C2               	dw	450
   740  002446  01C2               	dw	450
   741  002448  01C2               	dw	450
   742  00244A  04B0               	dw	1200
   743  00244C  01C2               	dw	450
   744  00244E  01C2               	dw	450
   745  002450  01C2               	dw	450
   746  002452  04B0               	dw	1200
   747  002454  01C2               	dw	450
   748  002456  01C2               	dw	450
   749  002458  01C2               	dw	450
   750  00245A  01C2               	dw	450
   751  00245C  01C2               	dw	450
   752  00245E  01C2               	dw	450
   753  002460  01C2               	dw	450
   754  002462  01C2               	dw	450
   755  002464  01C2               	dw	450
   756  002466  04B0               	dw	1200
   757  002468  01C2               	dw	450
   758  00246A  01C2               	dw	450
   759  00246C  01C2               	dw	450
   760  00246E  04B0               	dw	1200
   761  002470  01C2               	dw	450
   762  002472  01C2               	dw	450
   763  002474  01C2               	dw	450
   764  002476  04B0               	dw	1200
   765  002478  01C2               	dw	450
   766  00247A  04B0               	dw	1200
   767  00247C  01C2               	dw	450
   768  00247E  04B0               	dw	1200
   769  002480  01C2               	dw	450
   770  002482  04B0               	dw	1200
   771  002484  01C2               	dw	450
   772  002486  0000               	dw	0
   773  002488  0000               	dw	0
   774  00248A  0000               	dw	0
   775  00248C  0000               	dw	0
   776  00248E  0000               	dw	0
   777  002490  0000               	dw	0
   778  002492  0000               	dw	0
   779  002494  0000               	dw	0
   780  002496  0000               	dw	0
   781  002498  0000               	dw	0
   782  00249A  0000               	dw	0
   783  00249C  0000               	dw	0
   784  00249E  0000               	dw	0
   785  0024A0  0000               	dw	0
   786  0024A2  0000               	dw	0
   787  0024A4  0000               	dw	0
   788  0024A6  0000               	dw	0
   789  0024A8  0000               	dw	0
   790  0024AA  0000               	dw	0
   791  0024AC  0000               	dw	0
   792  0024AE  0000               	dw	0
   793  0024B0  0000               	dw	0
   794  0024B2  0000               	dw	0
   795  0024B4  0000               	dw	0
   796  0024B6  0000               	dw	0
   797  0024B8  0000               	dw	0
   798  0024BA  0000               	dw	0
   799  0024BC  0000               	dw	0
   800  0024BE  0000               	dw	0
   801  0024C0                     __end_of_IR_SavedTiming0:
   802                           	opt stack 0
   803  0000                     _IR_SavedTiming1_absconstaddr	set	9408
   804                           
   805                           	psect	_IR_SavedTiming1_const
   806  0024C0                     __p_IR_SavedTiming1_const:
   807                           	opt stack 0
   808  0024C0                     _IR_SavedTiming1:
   809                           	opt stack 0
   810  0024C0  2198               	dw	8600
   811  0024C2  1068               	dw	4200
   812  0024C4  01C2               	dw	450
   813  0024C6  01C2               	dw	450
   814  0024C8  01C2               	dw	450
   815  0024CA  01C2               	dw	450
   816  0024CC  01C2               	dw	450
   817  0024CE  01C2               	dw	450
   818  0024D0  01C2               	dw	450
   819  0024D2  04B0               	dw	1200
   820  0024D4  01C2               	dw	450
   821  0024D6  04B0               	dw	1200
   822  0024D8  01C2               	dw	450
   823  0024DA  04B0               	dw	1200
   824  0024DC  01C2               	dw	450
   825  0024DE  01C2               	dw	450
   826  0024E0  01C2               	dw	450
   827  0024E2  01C2               	dw	450
   828  0024E4  01C2               	dw	450
   829  0024E6  04B0               	dw	1200
   830  0024E8  01C2               	dw	450
   831  0024EA  04B0               	dw	1200
   832  0024EC  01C2               	dw	450
   833  0024EE  04B0               	dw	1200
   834  0024F0  01C2               	dw	450
   835  0024F2  01C2               	dw	450
   836  0024F4  01C2               	dw	450
   837  0024F6  01C2               	dw	450
   838  0024F8  01C2               	dw	450
   839  0024FA  01C2               	dw	450
   840  0024FC  01C2               	dw	450
   841  0024FE  04B0               	dw	1200
   842  002500  01C2               	dw	450
   843  002502  04B0               	dw	1200
   844  002504  01C2               	dw	450
   845  002506  01C2               	dw	450
   846  002508  01C2               	dw	450
   847  00250A  04B0               	dw	1200
   848  00250C  01C2               	dw	450
   849  00250E  01C2               	dw	450
   850  002510  01C2               	dw	450
   851  002512  04B0               	dw	1200
   852  002514  01C2               	dw	450
   853  002516  01C2               	dw	450
   854  002518  01C2               	dw	450
   855  00251A  01C2               	dw	450
   856  00251C  01C2               	dw	450
   857  00251E  01C2               	dw	450
   858  002520  01C2               	dw	450
   859  002522  01C2               	dw	450
   860  002524  01C2               	dw	450
   861  002526  04B0               	dw	1200
   862  002528  01C2               	dw	450
   863  00252A  01C2               	dw	450
   864  00252C  01C2               	dw	450
   865  00252E  04B0               	dw	1200
   866  002530  01C2               	dw	450
   867  002532  01C2               	dw	450
   868  002534  01C2               	dw	450
   869  002536  04B0               	dw	1200
   870  002538  01C2               	dw	450
   871  00253A  04B0               	dw	1200
   872  00253C  01C2               	dw	450
   873  00253E  04B0               	dw	1200
   874  002540  01C2               	dw	450
   875  002542  04B0               	dw	1200
   876  002544  01C2               	dw	450
   877  002546  0000               	dw	0
   878  002548  0000               	dw	0
   879  00254A  0000               	dw	0
   880  00254C  0000               	dw	0
   881  00254E  0000               	dw	0
   882  002550  0000               	dw	0
   883  002552  0000               	dw	0
   884  002554  0000               	dw	0
   885  002556  0000               	dw	0
   886  002558  0000               	dw	0
   887  00255A  0000               	dw	0
   888  00255C  0000               	dw	0
   889  00255E  0000               	dw	0
   890  002560  0000               	dw	0
   891  002562  0000               	dw	0
   892  002564  0000               	dw	0
   893  002566  0000               	dw	0
   894  002568  0000               	dw	0
   895  00256A  0000               	dw	0
   896  00256C  0000               	dw	0
   897  00256E  0000               	dw	0
   898  002570  0000               	dw	0
   899  002572  0000               	dw	0
   900  002574  0000               	dw	0
   901  002576  0000               	dw	0
   902  002578  0000               	dw	0
   903  00257A  0000               	dw	0
   904  00257C  0000               	dw	0
   905  00257E  0000               	dw	0
   906  002580                     __end_of_IR_SavedTiming1:
   907                           	opt stack 0
   908  0000                     _RF_SavedTiming_absconstaddr	set	9600
   909                           
   910                           	psect	_RF_SavedTiming_const
   911  002580                     __p_RF_SavedTiming_const:
   912                           	opt stack 0
   913  002580                     _RF_SavedTiming:
   914                           	opt stack 0
   915  002580  0342               	dw	834
   916  002582  0015               	dw	21
   917  002584  0050               	dw	80
   918  002586  0016               	dw	22
   919  002588  0050               	dw	80
   920  00258A  0015               	dw	21
   921  00258C  004E               	dw	78
   922  00258E  004F               	dw	79
   923  002590  001A               	dw	26
   924  002592  0016               	dw	22
   925  002594  004E               	dw	78
   926  002596  004E               	dw	78
   927  002598  001B               	dw	27
   928  00259A  0015               	dw	21
   929  00259C  004F               	dw	79
   930  00259E  004C               	dw	76
   931  0025A0  0019               	dw	25
   932  0025A2  0017               	dw	23
   933  0025A4  004F               	dw	79
   934  0025A6  004B               	dw	75
   935  0025A8  001B               	dw	27
   936  0025AA  0015               	dw	21
   937  0025AC  0051               	dw	81
   938  0025AE  004B               	dw	75
   939  0025B0  0019               	dw	25
   940  0025B2  0016               	dw	22
   941  0025B4  0051               	dw	81
   942  0025B6  0016               	dw	22
   943  0025B8  004F               	dw	79
   944  0025BA  0016               	dw	22
   945  0025BC  0050               	dw	80
   946  0025BE  0018               	dw	24
   947  0025C0  004F               	dw	79
   948  0025C2  004D               	dw	77
   949  0025C4  0019               	dw	25
   950  0025C6  004C               	dw	76
   951  0025C8  001B               	dw	27
   952  0025CA  0015               	dw	21
   953  0025CC  0050               	dw	80
   954  0025CE  0015               	dw	21
   955  0025D0  0051               	dw	81
   956  0025D2  0015               	dw	21
   957  0025D4  0050               	dw	80
   958  0025D6  0016               	dw	22
   959  0025D8  0050               	dw	80
   960  0025DA  0016               	dw	22
   961  0025DC  0051               	dw	81
   962  0025DE  0016               	dw	22
   963  0025E0  004F               	dw	79
   964  0025E2  0016               	dw	22
   965  0025E4  00                 	db	0
   966  0025E5  00                 	db	0
   967  0025E6  00                 	db	0
   968  0025E7  00                 	db	0
   969  0025E8  00                 	db	0
   970  0025E9  00                 	db	0
   971  0025EA  00                 	db	0
   972  0025EB  00                 	db	0
   973  0025EC  00                 	db	0
   974  0025ED  00                 	db	0
   975  0025EE  00                 	db	0
   976  0025EF  00                 	db	0
   977  0025F0  00                 	db	0
   978  0025F1  00                 	db	0
   979  0025F2  00                 	db	0
   980  0025F3  00                 	db	0
   981  0025F4  00                 	db	0
   982  0025F5  00                 	db	0
   983  0025F6  00                 	db	0
   984  0025F7  00                 	db	0
   985  0025F8  00                 	db	0
   986  0025F9  00                 	db	0
   987  0025FA  00                 	db	0
   988  0025FB  00                 	db	0
   989  0025FC  00                 	db	0
   990  0025FD  00                 	db	0
   991  0025FE  00                 	db	0
   992  0025FF  00                 	db	0
   993  002600                     __end_of_RF_SavedTiming:
   994                           	opt stack 0
   995  0000                     _ADCON0bits	set	4034
   996  0000                     _ADCON1bits	set	4033
   997  0000                     _ADCON2bits	set	4032
   998  0000                     _ADRESH	set	4036
   999  0000                     _ADRESL	set	4035
  1000  0000                     _EECON1bits	set	4006
  1001  0000                     _INTCON2bits	set	4081
  1002  0000                     _INTCON3bits	set	4080
  1003  0000                     _INTCONbits	set	4082
  1004  0000                     _IPR1bits	set	3999
  1005  0000                     _LATA	set	3977
  1006  0000                     _LATB	set	3978
  1007  0000                     _LATC	set	3979
  1008  0000                     _OSCCON	set	4051
  1009  0000                     _OSCCONbits	set	4051
  1010  0000                     _OSCTUNEbits	set	3995
  1011  0000                     _PIE1bits	set	3997
  1012  0000                     _PIR1bits	set	3998
  1013  0000                     _PORTB	set	3969
  1014  0000                     _PR2	set	4043
  1015  0000                     _RCONbits	set	4048
  1016  0000                     _T0CONbits	set	4053
  1017  0000                     _T1CONbits	set	4045
  1018  0000                     _T2CONbits	set	4042
  1019  0000                     _TABLAT	set	4085
  1020  0000                     _TBLPTRH	set	4087
  1021  0000                     _TBLPTRL	set	4086
  1022  0000                     _TBLPTRU	set	4088
  1023  0000                     _TMR0H	set	4055
  1024  0000                     _TMR0L	set	4054
  1025  0000                     _TMR1H	set	4047
  1026  0000                     _TMR1L	set	4046
  1027  0000                     _TMR2	set	4044
  1028  0000                     _TRISAbits	set	3986
  1029  0000                     _TRISBbits	set	3987
  1030  0000                     _TRISCbits	set	3988
  1031                           
  1032                           ; #config settings
  1033  0000                     
  1034                           	psect	cinit
  1035  001054                     __pcinit:
  1036                           	opt stack 0
  1037  001054                     start_initialization:
  1038                           	opt stack 0
  1039  001054                     __initialization:
  1040                           	opt stack 0
  1041                           
  1042                           ; Clear objects allocated to BANK3 (192 bytes)
  1043  001054  EE03  F000         	lfsr	0,__pbssBANK3
  1044  001058  0EC0               	movlw	192
  1045  00105A                     clear_0:
  1046  00105A  6AEE               	clrf	postinc0,c
  1047  00105C  06E8               	decf	wreg,f,c
  1048  00105E  E1FD               	bnz	clear_0
  1049                           
  1050                           ; Clear objects allocated to BANK2 (192 bytes)
  1051  001060  EE02  F000         	lfsr	0,__pbssBANK2
  1052  001064  0EC0               	movlw	192
  1053  001066                     clear_1:
  1054  001066  6AEE               	clrf	postinc0,c
  1055  001068  06E8               	decf	wreg,f,c
  1056  00106A  E1FD               	bnz	clear_1
  1057                           
  1058                           ; Clear objects allocated to BANK1 (135 bytes)
  1059  00106C  EE01  F000         	lfsr	0,__pbssBANK1
  1060  001070  0E87               	movlw	135
  1061  001072                     clear_2:
  1062  001072  6AEE               	clrf	postinc0,c
  1063  001074  06E8               	decf	wreg,f,c
  1064  001076  E1FD               	bnz	clear_2
  1065                           
  1066                           ; Clear objects allocated to BANK0 (10 bytes)
  1067  001078  EE00  F0C0         	lfsr	0,__pbssBANK0
  1068  00107C  0E0A               	movlw	10
  1069  00107E                     clear_3:
  1070  00107E  6AEE               	clrf	postinc0,c
  1071  001080  06E8               	decf	wreg,f,c
  1072  001082  E1FD               	bnz	clear_3
  1073                           
  1074                           ; Clear objects allocated to COMRAM (19 bytes)
  1075  001084  EE00  F05A         	lfsr	0,__pbssCOMRAM
  1076  001088  0E13               	movlw	19
  1077  00108A                     clear_4:
  1078  00108A  6AEE               	clrf	postinc0,c
  1079  00108C  06E8               	decf	wreg,f,c
  1080  00108E  E1FD               	bnz	clear_4
  1081                           
  1082                           ; Initialize objects allocated to BANK1 (6 bytes)
  1083                           ; load TBLPTR registers with __pidataBANK1
  1084  001090  0E84               	movlw	low __pidataBANK1
  1085  001092  6EF6               	movwf	tblptrl,c
  1086  001094  0E1B               	movlw	high __pidataBANK1
  1087  001096  6EF7               	movwf	tblptrh,c
  1088  001098  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1089  00109A  6EF8               	movwf	tblptru,c
  1090  00109C  EE01  F0A9         	lfsr	0,__pdataBANK1
  1091  0010A0  EE10 F006          	lfsr	1,6
  1092  0010A4                     copy_data0:
  1093  0010A4  0009               	tblrd		*+
  1094  0010A6  CFF5 FFEE          	movff	tablat,postinc0
  1095  0010AA  50E5               	movf	postdec1,w,c
  1096  0010AC  50E1               	movf	fsr1l,w,c
  1097  0010AE  E1FA               	bnz	copy_data0
  1098                           
  1099                           ; Initialize objects allocated to COMRAM (1 bytes)
  1100                           ; load TBLPTR registers with __pidataCOMRAM
  1101  0010B0  0EA2               	movlw	low __pidataCOMRAM
  1102  0010B2  6EF6               	movwf	tblptrl,c
  1103  0010B4  0E1B               	movlw	high __pidataCOMRAM
  1104  0010B6  6EF7               	movwf	tblptrh,c
  1105  0010B8  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1106  0010BA  6EF8               	movwf	tblptru,c
  1107  0010BC  0009               	tblrd		*+	;fetch initializer
  1108  0010BE  CFF5 F06D          	movff	tablat,__pdataCOMRAM
  1109  0010C2                     end_of_initialization:
  1110                           	opt stack 0
  1111  0010C2                     __end_of__initialization:
  1112                           	opt stack 0
  1113  0010C2  906E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1114  0010C4  926E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1115  0010C6  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1116  0010C8  6EF8               	movwf	tblptru,c
  1117  0010CA  0100               	movlb	0
  1118  0010CC  EF26  F01F         	goto	_main	;jump to C main() function
  1119                           tblptru	equ	0xFF8
  1120                           tblptrh	equ	0xFF7
  1121                           tblptrl	equ	0xFF6
  1122                           tablat	equ	0xFF5
  1123                           postinc0	equ	0xFEE
  1124                           wreg	equ	0xFE8
  1125                           postdec1	equ	0xFE5
  1126                           fsr1l	equ	0xFE1
  1127                           
  1128                           	psect	bssCOMRAM
  1129  00005A                     __pbssCOMRAM:
  1130                           	opt stack 0
  1131  00005A                     _Activity_Timer:
  1132                           	opt stack 0
  1133  00005A                     	ds	4
  1134  00005E                     _IR_SyncHigh:
  1135                           	opt stack 0
  1136  00005E                     	ds	2
  1137  000060                     _IR_SyncLow:
  1138                           	opt stack 0
  1139  000060                     	ds	2
  1140  000062                     _Timer2Post:
  1141                           	opt stack 0
  1142  000062                     	ds	2
  1143  000064                     _Timer2PostCount:
  1144                           	opt stack 0
  1145  000064                     	ds	2
  1146  000066                     _ButtonChange:
  1147                           	opt stack 0
  1148  000066                     	ds	1
  1149  000067                     _IRChange:
  1150                           	opt stack 0
  1151  000067                     	ds	1
  1152  000068                     _IRProgramCodeNumber:
  1153                           	opt stack 0
  1154  000068                     	ds	1
  1155  000069                     _IRStarted:
  1156                           	opt stack 0
  1157  000069                     	ds	1
  1158  00006A                     _IR_CodeSize:
  1159                           	opt stack 0
  1160  00006A                     	ds	1
  1161  00006B                     _IR_DataPlace:
  1162                           	opt stack 0
  1163  00006B                     	ds	1
  1164  00006C                     _Timer2Use:
  1165                           	opt stack 0
  1166  00006C                     	ds	1
  1167                           tblptru	equ	0xFF8
  1168                           tblptrh	equ	0xFF7
  1169                           tblptrl	equ	0xFF6
  1170                           tablat	equ	0xFF5
  1171                           postinc0	equ	0xFEE
  1172                           wreg	equ	0xFE8
  1173                           postdec1	equ	0xFE5
  1174                           fsr1l	equ	0xFE1
  1175                           
  1176                           	psect	dataCOMRAM
  1177  00006D                     __pdataCOMRAM:
  1178                           	opt stack 0
  1179  00006D                     _ADC_CurrentSource:
  1180                           	opt stack 0
  1181  00006D                     	ds	1
  1182                           tblptru	equ	0xFF8
  1183                           tblptrh	equ	0xFF7
  1184                           tblptrl	equ	0xFF6
  1185                           tablat	equ	0xFF5
  1186                           postinc0	equ	0xFEE
  1187                           wreg	equ	0xFE8
  1188                           postdec1	equ	0xFE5
  1189                           fsr1l	equ	0xFE1
  1190                           
  1191                           	psect	bssBANK0
  1192  0000C0                     __pbssBANK0:
  1193                           	opt stack 0
  1194  0000C0                     _RF_SyncHigh:
  1195                           	opt stack 0
  1196  0000C0                     	ds	2
  1197  0000C2                     _RF_SyncLow:
  1198                           	opt stack 0
  1199  0000C2                     	ds	2
  1200  0000C4                     _ButtonValue_prev:
  1201                           	opt stack 0
  1202  0000C4                     	ds	1
  1203  0000C5                     _DC_Motor:
  1204                           	opt stack 0
  1205  0000C5                     	ds	1
  1206  0000C6                     _IRValue_prev:
  1207                           	opt stack 0
  1208  0000C6                     	ds	1
  1209  0000C7                     _RFStarted:
  1210                           	opt stack 0
  1211  0000C7                     	ds	1
  1212  0000C8                     _RF_CodeSize:
  1213                           	opt stack 0
  1214  0000C8                     	ds	1
  1215  0000C9                     _RF_DataPlace:
  1216                           	opt stack 0
  1217  0000C9                     	ds	1
  1218                           tblptru	equ	0xFF8
  1219                           tblptrh	equ	0xFF7
  1220                           tblptrl	equ	0xFF6
  1221                           tablat	equ	0xFF5
  1222                           postinc0	equ	0xFEE
  1223                           wreg	equ	0xFE8
  1224                           postdec1	equ	0xFE5
  1225                           fsr1l	equ	0xFE1
  1226                           
  1227                           	psect	bssBANK1
  1228  000100                     __pbssBANK1:
  1229                           	opt stack 0
  1230  000100                     _ADC_SampleCount:
  1231                           	opt stack 0
  1232  000100                     	ds	2
  1233  000102                     _Button_Data:
  1234                           	opt stack 0
  1235  000102                     	ds	1
  1236  000103                     _Flash_Status:
  1237                           	opt stack 0
  1238  000103                     	ds	1
  1239  000104                     _IR_Data:
  1240                           	opt stack 0
  1241  000104                     	ds	1
  1242  000105                     _RF_Data:
  1243                           	opt stack 0
  1244  000105                     	ds	1
  1245  000106                     _System_State_Change:
  1246                           	opt stack 0
  1247  000106                     	ds	1
  1248  000107                     _RF_DataTiming:
  1249                           	opt stack 0
  1250  000107                     	ds	128
  1251                           tblptru	equ	0xFF8
  1252                           tblptrh	equ	0xFF7
  1253                           tblptrl	equ	0xFF6
  1254                           tablat	equ	0xFF5
  1255                           postinc0	equ	0xFEE
  1256                           wreg	equ	0xFE8
  1257                           postdec1	equ	0xFE5
  1258                           fsr1l	equ	0xFE1
  1259                           
  1260                           	psect	dataBANK1
  1261  0001A9                     __pdataBANK1:
  1262                           	opt stack 0
  1263  0001A9                     _Rail_VIN:
  1264                           	opt stack 0
  1265  0001A9                     	ds	3
  1266  0001AC                     _IR_Saved:
  1267                           	opt stack 0
  1268  0001AC                     	ds	1
  1269  0001AD                     _RF_Saved:
  1270                           	opt stack 0
  1271  0001AD                     	ds	1
  1272  0001AE                     _System_State:
  1273                           	opt stack 0
  1274  0001AE                     	ds	1
  1275                           tblptru	equ	0xFF8
  1276                           tblptrh	equ	0xFF7
  1277                           tblptrl	equ	0xFF6
  1278                           tablat	equ	0xFF5
  1279                           postinc0	equ	0xFEE
  1280                           wreg	equ	0xFE8
  1281                           postdec1	equ	0xFE5
  1282                           fsr1l	equ	0xFE1
  1283                           
  1284                           	psect	bssBANK2
  1285  000200                     __pbssBANK2:
  1286                           	opt stack 0
  1287  000200                     _IR_DataTiming:
  1288                           	opt stack 0
  1289  000200                     	ds	192
  1290                           tblptru	equ	0xFF8
  1291                           tblptrh	equ	0xFF7
  1292                           tblptrl	equ	0xFF6
  1293                           tablat	equ	0xFF5
  1294                           postinc0	equ	0xFEE
  1295                           wreg	equ	0xFE8
  1296                           postdec1	equ	0xFE5
  1297                           fsr1l	equ	0xFE1
  1298                           
  1299                           	psect	bssBANK3
  1300  000300                     __pbssBANK3:
  1301                           	opt stack 0
  1302  000300                     _IR_DataHolder1:
  1303                           	opt stack 0
  1304  000300                     	ds	192
  1305                           tblptru	equ	0xFF8
  1306                           tblptrh	equ	0xFF7
  1307                           tblptrl	equ	0xFF6
  1308                           tablat	equ	0xFF5
  1309                           postinc0	equ	0xFEE
  1310                           wreg	equ	0xFE8
  1311                           postdec1	equ	0xFE5
  1312                           fsr1l	equ	0xFE1
  1313                           
  1314                           	psect	cstackBANK1
  1315  000187                     __pcstackBANK1:
  1316                           	opt stack 0
  1317  000187                     ?___ftmul:
  1318                           	opt stack 0
  1319  000187                     ___fttol@sign1:
  1320                           	opt stack 0
  1321  000187                     ___ftmul@f1:
  1322                           	opt stack 0
  1323  000187                     MSC_DelayMS@i:
  1324                           	opt stack 0
  1325                           
  1326                           ; 4 bytes @ 0x0
  1327  000187                     	ds	1
  1328  000188                     ___fttol@lval:
  1329                           	opt stack 0
  1330                           
  1331                           ; 4 bytes @ 0x1
  1332  000188                     	ds	2
  1333  00018A                     ___ftmul@f2:
  1334                           	opt stack 0
  1335                           
  1336                           ; 3 bytes @ 0x3
  1337  00018A                     	ds	1
  1338  00018B                     MSC_BlinkLED@blink:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x4
  1342  00018B                     	ds	1
  1343  00018C                     ___fttol@exp1:
  1344                           	opt stack 0
  1345                           
  1346                           ; 1 bytes @ 0x5
  1347  00018C                     	ds	1
  1348  00018D                     ??___ftmul:
  1349  00018D                     MSC_BlinkLED@speed:
  1350                           	opt stack 0
  1351                           
  1352                           ; 2 bytes @ 0x6
  1353  00018D                     	ds	2
  1354  00018F                     MSC_BlinkLED@i:
  1355                           	opt stack 0
  1356                           
  1357                           ; 2 bytes @ 0x8
  1358  00018F                     	ds	1
  1359  000190                     ___ftmul@exp:
  1360                           	opt stack 0
  1361                           
  1362                           ; 1 bytes @ 0x9
  1363  000190                     	ds	1
  1364  000191                     ___ftmul@sign:
  1365                           	opt stack 0
  1366                           
  1367                           ; 1 bytes @ 0xA
  1368  000191                     	ds	1
  1369  000192                     ___ftmul@f3_as_product:
  1370                           	opt stack 0
  1371                           
  1372                           ; 3 bytes @ 0xB
  1373  000192                     	ds	3
  1374  000195                     RF_LoadCode@Low:
  1375                           	opt stack 0
  1376  000195                     IR_LoadCode@Low1:
  1377                           	opt stack 0
  1378                           
  1379                           ; 3 bytes @ 0xE
  1380  000195                     	ds	3
  1381  000198                     RF_LoadCode@High:
  1382                           	opt stack 0
  1383  000198                     IR_LoadCode@High1:
  1384                           	opt stack 0
  1385                           
  1386                           ; 3 bytes @ 0x11
  1387  000198                     	ds	3
  1388  00019B                     IR_LoadCode@CodeSize1:
  1389                           	opt stack 0
  1390                           
  1391                           ; 1 bytes @ 0x14
  1392  00019B                     	ds	1
  1393  00019C                     IR_LoadCode@Low2:
  1394                           	opt stack 0
  1395                           
  1396                           ; 3 bytes @ 0x15
  1397  00019C                     	ds	3
  1398  00019F                     IR_LoadCode@High2:
  1399                           	opt stack 0
  1400                           
  1401                           ; 3 bytes @ 0x18
  1402  00019F                     	ds	3
  1403  0001A2                     IR_LoadCode@CodeSize2:
  1404                           	opt stack 0
  1405                           
  1406                           ; 1 bytes @ 0x1B
  1407  0001A2                     	ds	1
  1408  0001A3                     IR_LoadCode@LowBound:
  1409                           	opt stack 0
  1410                           
  1411                           ; 3 bytes @ 0x1C
  1412  0001A3                     	ds	3
  1413  0001A6                     IR_LoadCode@HighBound:
  1414                           	opt stack 0
  1415                           
  1416                           ; 3 bytes @ 0x1F
  1417  0001A6                     	ds	3
  1418                           tblptru	equ	0xFF8
  1419                           tblptrh	equ	0xFF7
  1420                           tblptrl	equ	0xFF6
  1421                           tablat	equ	0xFF5
  1422                           postinc0	equ	0xFEE
  1423                           wreg	equ	0xFE8
  1424                           postdec1	equ	0xFE5
  1425                           fsr1l	equ	0xFE1
  1426                           
  1427                           	psect	cstackBANK0
  1428  000080                     __pcstackBANK0:
  1429                           	opt stack 0
  1430  000080                     ?i2___ftpack:
  1431                           	opt stack 0
  1432  000080                     ?i2___fttol:
  1433                           	opt stack 0
  1434  000080                     i2RF_CalculateCodesize@i:
  1435                           	opt stack 0
  1436  000080                     i2RF_DataInt@state:
  1437                           	opt stack 0
  1438  000080                     i2TMR_Timer0@state:
  1439                           	opt stack 0
  1440  000080                     i2TMR_Timer0Int@state:
  1441                           	opt stack 0
  1442  000080                     i2MSC_CleanBufferInt@data:
  1443                           	opt stack 0
  1444  000080                     i2FSH_VerifyWriteIntArray@ConstArray:
  1445                           	opt stack 0
  1446  000080                     i2___ftpack@arg:
  1447                           	opt stack 0
  1448  000080                     i2___fttol@f1:
  1449                           	opt stack 0
  1450  000080                     i2FSH_AddressToBlock@Address:
  1451                           	opt stack 0
  1452                           
  1453                           ; 4 bytes @ 0x0
  1454  000080                     	ds	1
  1455  000081                     i2TMR_ResetTimer0@TimerOn:
  1456                           	opt stack 0
  1457                           
  1458                           ; 1 bytes @ 0x1
  1459  000081                     	ds	1
  1460  000082                     i2MSC_CleanBufferInt@count:
  1461                           	opt stack 0
  1462                           
  1463                           ; 2 bytes @ 0x2
  1464  000082                     	ds	1
  1465  000083                     i2___ftpack@exp:
  1466                           	opt stack 0
  1467  000083                     i2FSH_VerifyWriteIntArray@Array:
  1468                           	opt stack 0
  1469                           
  1470                           ; 2 bytes @ 0x3
  1471  000083                     	ds	1
  1472  000084                     ??i2___fttol:
  1473  000084                     i2___ftpack@sign:
  1474                           	opt stack 0
  1475  000084                     i2MSC_CleanBufferInt@i:
  1476                           	opt stack 0
  1477  000084                     i2FSH_WriteIntArray@ConstArray:
  1478                           	opt stack 0
  1479  000084                     i2FSH_EraseBlock@Address:
  1480                           	opt stack 0
  1481                           
  1482                           ; 4 bytes @ 0x4
  1483  000084                     	ds	1
  1484  000085                     ??i2_FSH_VerifyWriteIntArray:
  1485  000085                     ??i2___ftpack:
  1486                           
  1487                           ; 0 bytes @ 0x5
  1488  000085                     	ds	1
  1489  000086                     i2MSC_BufferCopyIntConst@from:
  1490                           	opt stack 0
  1491                           
  1492                           ; 3 bytes @ 0x6
  1493  000086                     	ds	1
  1494  000087                     i2FSH_WriteIntArray@Array:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0x7
  1498  000087                     	ds	1
  1499  000088                     ?i2___lwtoft:
  1500                           	opt stack 0
  1501  000088                     i2FSH_EraseBlock@highint:
  1502                           	opt stack 0
  1503  000088                     i2FSH_VerifyWriteIntArray@data:
  1504                           	opt stack 0
  1505  000088                     i2___lwtoft@c:
  1506                           	opt stack 0
  1507                           
  1508                           ; 2 bytes @ 0x8
  1509  000088                     	ds	1
  1510  000089                     ??i2_FSH_WriteIntArray:
  1511  000089                     i2FSH_EraseBlock@lowint:
  1512                           	opt stack 0
  1513  000089                     i2___fttol@sign1:
  1514                           	opt stack 0
  1515  000089                     i2MSC_BufferCopyIntConst@to:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x9
  1519  000089                     	ds	1
  1520  00008A                     i2FSH_EraseBlock@WriteTries:
  1521                           	opt stack 0
  1522  00008A                     i2FSH_VerifyWriteIntArray@failcount:
  1523                           	opt stack 0
  1524  00008A                     i2___fttol@lval:
  1525                           	opt stack 0
  1526                           
  1527                           ; 4 bytes @ 0xA
  1528  00008A                     	ds	1
  1529  00008B                     ?i2___ftmul:
  1530                           	opt stack 0
  1531  00008B                     i2FSH_WriteIntArray@i:
  1532                           	opt stack 0
  1533  00008B                     i2FSH_VerifyWriteIntArray@i:
  1534                           	opt stack 0
  1535  00008B                     i2MSC_BufferCopyIntConst@count:
  1536                           	opt stack 0
  1537  00008B                     i2___ftge@ff1:
  1538                           	opt stack 0
  1539  00008B                     i2___ftmul@f1:
  1540                           	opt stack 0
  1541                           
  1542                           ; 3 bytes @ 0xB
  1543  00008B                     	ds	1
  1544  00008C                     i2FSH_WriteIntArray@address:
  1545                           	opt stack 0
  1546                           
  1547                           ; 4 bytes @ 0xC
  1548  00008C                     	ds	1
  1549  00008D                     i2MSC_BufferCopyIntConst@shift:
  1550                           	opt stack 0
  1551                           
  1552                           ; 2 bytes @ 0xD
  1553  00008D                     	ds	1
  1554  00008E                     i2___fttol@exp1:
  1555                           	opt stack 0
  1556  00008E                     i2___ftge@ff2:
  1557                           	opt stack 0
  1558  00008E                     i2___ftmul@f2:
  1559                           	opt stack 0
  1560                           
  1561                           ; 3 bytes @ 0xE
  1562  00008E                     	ds	1
  1563  00008F                     i2MSC_BufferCopyIntConst@i:
  1564                           	opt stack 0
  1565                           
  1566                           ; 2 bytes @ 0xF
  1567  00008F                     	ds	2
  1568  000091                     ??i2_FSH_Write_IR_RF:
  1569  000091                     ??i2___ftge:
  1570  000091                     ??i2___ftmul:
  1571                           
  1572                           ; 0 bytes @ 0x11
  1573  000091                     	ds	3
  1574  000094                     i2___ftmul@exp:
  1575                           	opt stack 0
  1576                           
  1577                           ; 1 bytes @ 0x14
  1578  000094                     	ds	1
  1579  000095                     i2___ftmul@sign:
  1580                           	opt stack 0
  1581                           
  1582                           ; 1 bytes @ 0x15
  1583  000095                     	ds	1
  1584  000096                     i2___ftmul@f3_as_product:
  1585                           	opt stack 0
  1586                           
  1587                           ; 3 bytes @ 0x16
  1588  000096                     	ds	1
  1589  000097                     i2FSH_Write_IR_RF@highint:
  1590                           	opt stack 0
  1591                           
  1592                           ; 1 bytes @ 0x17
  1593  000097                     	ds	1
  1594  000098                     i2FSH_Write_IR_RF@lowint:
  1595                           	opt stack 0
  1596                           
  1597                           ; 1 bytes @ 0x18
  1598  000098                     	ds	1
  1599  000099                     i2FSH_Write_IR_RF@FlashWasteindex:
  1600                           	opt stack 0
  1601  000099                     i2RF_LoadCode@Low:
  1602                           	opt stack 0
  1603                           
  1604                           ; 3 bytes @ 0x19
  1605  000099                     	ds	2
  1606  00009B                     i2FSH_Write_IR_RF@j:
  1607                           	opt stack 0
  1608                           
  1609                           ; 1 bytes @ 0x1B
  1610  00009B                     	ds	1
  1611  00009C                     i2FSH_Write_IR_RF@status:
  1612                           	opt stack 0
  1613  00009C                     i2RF_LoadCode@High:
  1614                           	opt stack 0
  1615                           
  1616                           ; 3 bytes @ 0x1C
  1617  00009C                     	ds	1
  1618  00009D                     i2FSH_Write_IR_RF@i:
  1619                           	opt stack 0
  1620                           
  1621                           ; 2 bytes @ 0x1D
  1622  00009D                     	ds	2
  1623  00009F                     i2FSH_Write_IR_RF@WriteTries:
  1624                           	opt stack 0
  1625                           
  1626                           ; 1 bytes @ 0x1F
  1627  00009F                     	ds	1
  1628  0000A0                     i2FSH_Write_IR_RF@RAMaddress:
  1629                           	opt stack 0
  1630                           
  1631                           ; 2 bytes @ 0x20
  1632  0000A0                     	ds	2
  1633  0000A2                     
  1634                           ; 0 bytes @ 0x22
  1635  0000A2                     	ds	2
  1636  0000A4                     RF_CheckCode@Low:
  1637                           	opt stack 0
  1638                           
  1639                           ; 3 bytes @ 0x24
  1640  0000A4                     	ds	3
  1641  0000A7                     RF_CheckCode@High:
  1642                           	opt stack 0
  1643                           
  1644                           ; 3 bytes @ 0x27
  1645  0000A7                     	ds	3
  1646  0000AA                     RF_CheckCode@i:
  1647                           	opt stack 0
  1648                           
  1649                           ; 1 bytes @ 0x2A
  1650  0000AA                     	ds	1
  1651  0000AB                     ??_high_isr:
  1652                           
  1653                           ; 0 bytes @ 0x2B
  1654  0000AB                     	ds	8
  1655  0000B3                     high_isr@RFtemp:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0x33
  1659  0000B3                     	ds	2
  1660  0000B5                     ?___ftpack:
  1661                           	opt stack 0
  1662  0000B5                     ?___fttol:
  1663                           	opt stack 0
  1664  0000B5                     RF_CalculateCodesize@i:
  1665                           	opt stack 0
  1666  0000B5                     RF_DataInt@state:
  1667                           	opt stack 0
  1668  0000B5                     RF_Receiver@state:
  1669                           	opt stack 0
  1670  0000B5                     RF_SetBandwidth@band:
  1671                           	opt stack 0
  1672  0000B5                     RF_SetSquelch@state:
  1673                           	opt stack 0
  1674  0000B5                     MTR_IN1@state:
  1675                           	opt stack 0
  1676  0000B5                     MTR_IN2@state:
  1677                           	opt stack 0
  1678  0000B5                     IR_ReadReceiver@value:
  1679                           	opt stack 0
  1680  0000B5                     LDO_Pass@state:
  1681                           	opt stack 0
  1682  0000B5                     BUT_ReadButton@value:
  1683                           	opt stack 0
  1684  0000B5                     BUT_IR_PinChangeInt@state:
  1685                           	opt stack 0
  1686  0000B5                     TMR_Timer0@state:
  1687                           	opt stack 0
  1688  0000B5                     TMR_Timer1@state:
  1689                           	opt stack 0
  1690  0000B5                     TMR_Timer2@state:
  1691                           	opt stack 0
  1692  0000B5                     TMR_Timer0Int@state:
  1693                           	opt stack 0
  1694  0000B5                     TMR_Timer1Int@state:
  1695                           	opt stack 0
  1696  0000B5                     TMR_Timer2Int@state:
  1697                           	opt stack 0
  1698  0000B5                     TMR_Timer1Osc@state:
  1699                           	opt stack 0
  1700  0000B5                     ADC_Module@state:
  1701                           	opt stack 0
  1702  0000B5                     ADC_ConversionInt@state:
  1703                           	opt stack 0
  1704  0000B5                     MSC_DelayNOP@NOPs:
  1705                           	opt stack 0
  1706  0000B5                     MSC_CleanBufferInt@data:
  1707                           	opt stack 0
  1708  0000B5                     IR_CalculateCodesize@Code:
  1709                           	opt stack 0
  1710  0000B5                     ___ftpack@arg:
  1711                           	opt stack 0
  1712  0000B5                     ___ftge@ff1:
  1713                           	opt stack 0
  1714  0000B5                     ___fttol@f1:
  1715                           	opt stack 0
  1716                           
  1717                           ; 3 bytes @ 0x35
  1718  0000B5                     	ds	1
  1719  0000B6                     TMR_ResetTimer0@TimerOn:
  1720                           	opt stack 0
  1721  0000B6                     TMR_ResetTimer1@TimerOn:
  1722                           	opt stack 0
  1723                           
  1724                           ; 1 bytes @ 0x36
  1725  0000B6                     	ds	1
  1726  0000B7                     TMR_Timer1Function@mode:
  1727                           	opt stack 0
  1728  0000B7                     MSC_DelayNOP@i:
  1729                           	opt stack 0
  1730  0000B7                     MSC_CleanBufferInt@count:
  1731                           	opt stack 0
  1732                           
  1733                           ; 2 bytes @ 0x37
  1734  0000B7                     	ds	1
  1735  0000B8                     ??_IR_CalculateCodesize:
  1736  0000B8                     ___ftpack@exp:
  1737                           	opt stack 0
  1738  0000B8                     ___ftge@ff2:
  1739                           	opt stack 0
  1740                           
  1741                           ; 3 bytes @ 0x38
  1742  0000B8                     	ds	1
  1743  0000B9                     ??___fttol:
  1744  0000B9                     ___ftpack@sign:
  1745                           	opt stack 0
  1746  0000B9                     MSC_CleanBufferInt@i:
  1747                           	opt stack 0
  1748  0000B9                     MSC_DelayMS@US:
  1749                           	opt stack 0
  1750                           
  1751                           ; 4 bytes @ 0x39
  1752  0000B9                     	ds	1
  1753  0000BA                     ??___ftpack:
  1754                           
  1755                           ; 0 bytes @ 0x3A
  1756  0000BA                     	ds	1
  1757  0000BB                     ??___ftge:
  1758  0000BB                     IR_CalculateCodesize@i:
  1759                           	opt stack 0
  1760                           
  1761                           ; 1 bytes @ 0x3B
  1762  0000BB                     	ds	2
  1763  0000BD                     ??_MSC_DelayMS:
  1764  0000BD                     ?___lwtoft:
  1765                           	opt stack 0
  1766  0000BD                     ___lwtoft@c:
  1767                           	opt stack 0
  1768                           
  1769                           ; 2 bytes @ 0x3D
  1770  0000BD                     	ds	1
  1771  0000BE                     ??_MSC_BlinkLED:
  1772  0000BE                     
  1773                           ; 0 bytes @ 0x3E
  1774  0000BE                     	ds	2
  1775  0000C0                     tblptru	equ	0xFF8
  1776                           tblptrh	equ	0xFF7
  1777                           tblptrl	equ	0xFF6
  1778                           tablat	equ	0xFF5
  1779                           postinc0	equ	0xFEE
  1780                           wreg	equ	0xFE8
  1781                           postdec1	equ	0xFE5
  1782                           fsr1l	equ	0xFE1
  1783                           
  1784                           ; 0 bytes @ 0x40
  1785                           
  1786                           	psect	cstackCOMRAM
  1787  000001                     __pcstackCOMRAM:
  1788                           	opt stack 0
  1789  000001                     ?i1___ftpack:
  1790                           	opt stack 0
  1791  000001                     ?i1___fttol:
  1792                           	opt stack 0
  1793  000001                     i1RF_DataInt@state:
  1794                           	opt stack 0
  1795  000001                     i1IR_ReadReceiver@value:
  1796                           	opt stack 0
  1797  000001                     i1BUT_ReadButton@value:
  1798                           	opt stack 0
  1799  000001                     i1BUT_IR_PinChangeInt@state:
  1800                           	opt stack 0
  1801  000001                     i1TMR_Timer0@state:
  1802                           	opt stack 0
  1803  000001                     i1TMR_Timer1@state:
  1804                           	opt stack 0
  1805  000001                     i1TMR_Timer2@state:
  1806                           	opt stack 0
  1807  000001                     i1TMR_Timer0Int@state:
  1808                           	opt stack 0
  1809  000001                     i1MSC_CleanBufferInt@data:
  1810                           	opt stack 0
  1811  000001                     FSH_VerifyWriteIntArray@ConstArray:
  1812                           	opt stack 0
  1813  000001                     i1IR_CalculateCodesize@Code:
  1814                           	opt stack 0
  1815  000001                     i1___ftpack@arg:
  1816                           	opt stack 0
  1817  000001                     i1___fttol@f1:
  1818                           	opt stack 0
  1819  000001                     FSH_AddressToBlock@Address:
  1820                           	opt stack 0
  1821                           
  1822                           ; 4 bytes @ 0x0
  1823  000001                     	ds	1
  1824  000002                     TMR_ResetTimer2@TimerOn:
  1825                           	opt stack 0
  1826  000002                     i1TMR_ResetTimer1@TimerOn:
  1827                           	opt stack 0
  1828                           
  1829                           ; 1 bytes @ 0x1
  1830  000002                     	ds	1
  1831  000003                     TMR_Timer2Start@time:
  1832                           	opt stack 0
  1833  000003                     i1MSC_CleanBufferInt@count:
  1834                           	opt stack 0
  1835                           
  1836                           ; 2 bytes @ 0x2
  1837  000003                     	ds	1
  1838  000004                     ??i1_IR_CalculateCodesize:
  1839  000004                     i1___ftpack@exp:
  1840                           	opt stack 0
  1841  000004                     FSH_VerifyWriteIntArray@Array:
  1842                           	opt stack 0
  1843                           
  1844                           ; 2 bytes @ 0x3
  1845  000004                     	ds	1
  1846  000005                     ??i1___fttol:
  1847  000005                     i1___ftpack@sign:
  1848                           	opt stack 0
  1849  000005                     i1MSC_CleanBufferInt@i:
  1850                           	opt stack 0
  1851  000005                     FSH_WriteIntArray@ConstArray:
  1852                           	opt stack 0
  1853  000005                     FSH_EraseBlock@Address:
  1854                           	opt stack 0
  1855                           
  1856                           ; 4 bytes @ 0x4
  1857  000005                     	ds	1
  1858  000006                     ??_FSH_VerifyWriteIntArray:
  1859  000006                     ??i1___ftpack:
  1860                           
  1861                           ; 0 bytes @ 0x5
  1862  000006                     	ds	1
  1863  000007                     i1IR_CalculateCodesize@i:
  1864                           	opt stack 0
  1865  000007                     MSC_BufferCopyIntConst@from:
  1866                           	opt stack 0
  1867                           
  1868                           ; 3 bytes @ 0x6
  1869  000007                     	ds	1
  1870  000008                     FSH_WriteIntArray@Array:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x7
  1874  000008                     	ds	1
  1875  000009                     ?i1___lwtoft:
  1876                           	opt stack 0
  1877  000009                     FSH_EraseBlock@highint:
  1878                           	opt stack 0
  1879  000009                     FSH_VerifyWriteIntArray@data:
  1880                           	opt stack 0
  1881  000009                     i1___lwtoft@c:
  1882                           	opt stack 0
  1883                           
  1884                           ; 2 bytes @ 0x8
  1885  000009                     	ds	1
  1886  00000A                     ??_FSH_WriteIntArray:
  1887  00000A                     FSH_EraseBlock@lowint:
  1888                           	opt stack 0
  1889  00000A                     i1___fttol@sign1:
  1890                           	opt stack 0
  1891  00000A                     MSC_BufferCopyIntConst@to:
  1892                           	opt stack 0
  1893                           
  1894                           ; 2 bytes @ 0x9
  1895  00000A                     	ds	1
  1896  00000B                     FSH_EraseBlock@WriteTries:
  1897                           	opt stack 0
  1898  00000B                     FSH_VerifyWriteIntArray@failcount:
  1899                           	opt stack 0
  1900  00000B                     i1___fttol@lval:
  1901                           	opt stack 0
  1902                           
  1903                           ; 4 bytes @ 0xA
  1904  00000B                     	ds	1
  1905  00000C                     ?___ftdiv:
  1906                           	opt stack 0
  1907  00000C                     FSH_WriteIntArray@i:
  1908                           	opt stack 0
  1909  00000C                     FSH_VerifyWriteIntArray@i:
  1910                           	opt stack 0
  1911  00000C                     MSC_BufferCopyIntConst@count:
  1912                           	opt stack 0
  1913  00000C                     ___ftdiv@f1:
  1914                           	opt stack 0
  1915  00000C                     i1___ftge@ff1:
  1916                           	opt stack 0
  1917                           
  1918                           ; 3 bytes @ 0xB
  1919  00000C                     	ds	1
  1920  00000D                     FSH_WriteIntArray@address:
  1921                           	opt stack 0
  1922                           
  1923                           ; 4 bytes @ 0xC
  1924  00000D                     	ds	1
  1925  00000E                     MSC_BufferCopyIntConst@shift:
  1926                           	opt stack 0
  1927                           
  1928                           ; 2 bytes @ 0xD
  1929  00000E                     	ds	1
  1930  00000F                     i1___fttol@exp1:
  1931                           	opt stack 0
  1932  00000F                     ___ftdiv@f2:
  1933                           	opt stack 0
  1934  00000F                     i1___ftge@ff2:
  1935                           	opt stack 0
  1936                           
  1937                           ; 3 bytes @ 0xE
  1938  00000F                     	ds	1
  1939  000010                     MSC_BufferCopyIntConst@i:
  1940                           	opt stack 0
  1941                           
  1942                           ; 2 bytes @ 0xF
  1943  000010                     	ds	2
  1944  000012                     ??_FSH_Write_IR_RF:
  1945  000012                     ??___ftdiv:
  1946  000012                     ??i1___ftge:
  1947                           
  1948                           ; 0 bytes @ 0x11
  1949  000012                     	ds	3
  1950  000015                     ___ftdiv@cntr:
  1951                           	opt stack 0
  1952                           
  1953                           ; 1 bytes @ 0x14
  1954  000015                     	ds	1
  1955  000016                     ___ftdiv@f3:
  1956                           	opt stack 0
  1957                           
  1958                           ; 3 bytes @ 0x15
  1959  000016                     	ds	2
  1960  000018                     FSH_Write_IR_RF@highint:
  1961                           	opt stack 0
  1962                           
  1963                           ; 1 bytes @ 0x17
  1964  000018                     	ds	1
  1965  000019                     FSH_Write_IR_RF@lowint:
  1966                           	opt stack 0
  1967  000019                     ___ftdiv@exp:
  1968                           	opt stack 0
  1969                           
  1970                           ; 1 bytes @ 0x18
  1971  000019                     	ds	1
  1972  00001A                     ___ftdiv@sign:
  1973                           	opt stack 0
  1974  00001A                     FSH_Write_IR_RF@FlashWasteindex:
  1975                           	opt stack 0
  1976                           
  1977                           ; 2 bytes @ 0x19
  1978  00001A                     	ds	1
  1979  00001B                     ?i1___ftmul:
  1980                           	opt stack 0
  1981  00001B                     i1___ftmul@f1:
  1982                           	opt stack 0
  1983                           
  1984                           ; 3 bytes @ 0x1A
  1985  00001B                     	ds	1
  1986  00001C                     FSH_Write_IR_RF@j:
  1987                           	opt stack 0
  1988                           
  1989                           ; 1 bytes @ 0x1B
  1990  00001C                     	ds	1
  1991  00001D                     FSH_Write_IR_RF@status:
  1992                           	opt stack 0
  1993                           
  1994                           ; 1 bytes @ 0x1C
  1995  00001D                     	ds	1
  1996  00001E                     FSH_Write_IR_RF@i:
  1997                           	opt stack 0
  1998  00001E                     i1___ftmul@f2:
  1999                           	opt stack 0
  2000                           
  2001                           ; 3 bytes @ 0x1D
  2002  00001E                     	ds	2
  2003  000020                     FSH_Write_IR_RF@WriteTries:
  2004                           	opt stack 0
  2005                           
  2006                           ; 1 bytes @ 0x1F
  2007  000020                     	ds	1
  2008  000021                     ??i1___ftmul:
  2009  000021                     FSH_Write_IR_RF@RAMaddress:
  2010                           	opt stack 0
  2011                           
  2012                           ; 2 bytes @ 0x20
  2013  000021                     	ds	3
  2014  000024                     i1___ftmul@exp:
  2015                           	opt stack 0
  2016                           
  2017                           ; 1 bytes @ 0x23
  2018  000024                     	ds	1
  2019  000025                     i1___ftmul@sign:
  2020                           	opt stack 0
  2021                           
  2022                           ; 1 bytes @ 0x24
  2023  000025                     	ds	1
  2024  000026                     i1___ftmul@f3_as_product:
  2025                           	opt stack 0
  2026                           
  2027                           ; 3 bytes @ 0x25
  2028  000026                     	ds	3
  2029  000029                     ADC_CalculateVoltage@Voltage:
  2030                           	opt stack 0
  2031  000029                     i1IR_LoadCode@Low1:
  2032                           	opt stack 0
  2033                           
  2034                           ; 3 bytes @ 0x28
  2035  000029                     	ds	3
  2036  00002C                     ADC_CalculateVoltage@ADCcounts:
  2037                           	opt stack 0
  2038  00002C                     i1IR_LoadCode@High1:
  2039                           	opt stack 0
  2040                           
  2041                           ; 3 bytes @ 0x2B
  2042  00002C                     	ds	3
  2043  00002F                     i1IR_LoadCode@CodeSize1:
  2044                           	opt stack 0
  2045                           
  2046                           ; 1 bytes @ 0x2E
  2047  00002F                     	ds	1
  2048  000030                     i1IR_LoadCode@Low2:
  2049                           	opt stack 0
  2050                           
  2051                           ; 3 bytes @ 0x2F
  2052  000030                     	ds	3
  2053  000033                     i1IR_LoadCode@High2:
  2054                           	opt stack 0
  2055                           
  2056                           ; 3 bytes @ 0x32
  2057  000033                     	ds	3
  2058  000036                     i1IR_LoadCode@CodeSize2:
  2059                           	opt stack 0
  2060                           
  2061                           ; 1 bytes @ 0x35
  2062  000036                     	ds	1
  2063  000037                     i1IR_LoadCode@LowBound:
  2064                           	opt stack 0
  2065                           
  2066                           ; 3 bytes @ 0x36
  2067  000037                     	ds	3
  2068  00003A                     i1IR_LoadCode@HighBound:
  2069                           	opt stack 0
  2070                           
  2071                           ; 3 bytes @ 0x39
  2072  00003A                     	ds	3
  2073  00003D                     ??_IR_CheckCode:
  2074                           
  2075                           ; 0 bytes @ 0x3C
  2076  00003D                     	ds	6
  2077  000043                     IR_CheckCode@data:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0x42
  2081  000043                     	ds	2
  2082  000045                     IR_CheckCode@High:
  2083                           	opt stack 0
  2084                           
  2085                           ; 3 bytes @ 0x44
  2086  000045                     	ds	3
  2087  000048                     IR_CheckCode@Low:
  2088                           	opt stack 0
  2089                           
  2090                           ; 3 bytes @ 0x47
  2091  000048                     	ds	3
  2092  00004B                     IR_CheckCode@i:
  2093                           	opt stack 0
  2094                           
  2095                           ; 1 bytes @ 0x4A
  2096  00004B                     	ds	1
  2097  00004C                     ??_low_isr:
  2098                           
  2099                           ; 0 bytes @ 0x4B
  2100  00004C                     	ds	11
  2101  000057                     low_isr@button_state:
  2102                           	opt stack 0
  2103                           
  2104                           ; 1 bytes @ 0x56
  2105  000057                     	ds	1
  2106  000058                     low_isr@IRtemp:
  2107                           	opt stack 0
  2108                           
  2109                           ; 2 bytes @ 0x57
  2110  000058                     	ds	2
  2111                           tblptru	equ	0xFF8
  2112                           tblptrh	equ	0xFF7
  2113                           tblptrl	equ	0xFF6
  2114                           tablat	equ	0xFF5
  2115                           postinc0	equ	0xFEE
  2116                           wreg	equ	0xFE8
  2117                           postdec1	equ	0xFE5
  2118                           fsr1l	equ	0xFE1
  2119                           
  2120 ;;
  2121 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2122 ;;
  2123 ;; *************** function _main *****************
  2124 ;; Defined at:
  2125 ;;		line 85 in file "main.c"
  2126 ;; Parameters:    Size  Location     Type
  2127 ;;		None
  2128 ;; Auto vars:     Size  Location     Type
  2129 ;;		None
  2130 ;; Return value:  Size  Location     Type
  2131 ;;                  2   58[None  ] int 
  2132 ;; Registers used:
  2133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2134 ;; Tracked objects:
  2135 ;;		On entry : 0/0
  2136 ;;		On exit  : F/1
  2137 ;;		Unchanged: 0/0
  2138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2139 ;;      Params:         0       0       0       0       0
  2140 ;;      Locals:         0       0       0       0       0
  2141 ;;      Temps:          0       0       0       0       0
  2142 ;;      Totals:         0       0       0       0       0
  2143 ;;Total ram usage:        0 bytes
  2144 ;; Hardware stack levels required when called:   18
  2145 ;; This function calls:
  2146 ;;		_ADC_Start
  2147 ;;		_IR_LoadCode
  2148 ;;		_Init_App
  2149 ;;		_Init_System
  2150 ;;		_MSC_BlinkLED
  2151 ;;		_MSC_DelayMS
  2152 ;;		_MTR_Rotate
  2153 ;;		_RF_LoadCode
  2154 ;;		_SYS_ActivityTimer
  2155 ;;		_SYS_ConfigureOscillator
  2156 ;;		_SYS_DisableInt
  2157 ;;		_SYS_EnableInt
  2158 ;;		___ftge
  2159 ;; This function is called by:
  2160 ;;		Startup code after reset
  2161 ;; This function uses a non-reentrant model
  2162 ;;
  2163                           
  2164                           	psect	text0
  2165  003E4C                     __ptext0:
  2166                           	opt stack 0
  2167  003E4C                     _main:
  2168                           	opt stack 13
  2169                           
  2170                           ;main.c: 88: SYS_ConfigureOscillator();
  2171                           
  2172                           ;incstack = 0
  2173  003E4C  ECAE  F00D         	call	_SYS_ConfigureOscillator	;wreg free
  2174                           
  2175                           ;main.c: 89: Init_App();
  2176  003E50  EC63  F00A         	call	_Init_App	;wreg free
  2177                           
  2178                           ;main.c: 90: Init_System();
  2179  003E54  EC97  F00A         	call	_Init_System	;wreg free
  2180                           
  2181                           ; BSR set to: 0
  2182                           ;main.c: 93: RF_LoadCode();
  2183  003E58  EC22  F001         	call	_RF_LoadCode	;wreg free
  2184                           
  2185                           ; BSR set to: 0
  2186                           ;main.c: 94: IR_LoadCode();
  2187  003E5C  ECC1  F01B         	call	_IR_LoadCode	;wreg free
  2188                           
  2189                           ; BSR set to: 1
  2190                           ;main.c: 95: MSC_BlinkLED(4,50);
  2191  003E60  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2192  003E62  0E04               	movlw	4
  2193  003E64  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2194  003E66  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2195  003E68  0E32               	movlw	50
  2196  003E6A  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2197  003E6C  ECE8  F009         	call	_MSC_BlinkLED	;wreg free
  2198                           
  2199                           ; BSR set to: 1
  2200                           ;main.c: 96: (LATC &= ~0x10);
  2201  003E70  988B               	bcf	3979,4,c	;volatile
  2202  003E72                     l6890:
  2203                           
  2204                           ; BSR set to: 1
  2205                           ;main.c: 99: {
  2206                           ;main.c: 100: if(System_State == 8)
  2207  003E72  0E08               	movlw	8
  2208  003E74  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  2209  003E76  E001 D089          	bnz	l6962
  2210                           
  2211                           ; BSR set to: 1
  2212                           ;main.c: 101: {
  2213                           ;main.c: 103: if(System_State_Change)
  2214  003E7A  5106               	movf	_System_State_Change& (0+255),w,b	;volatile
  2215  003E7C  E03F               	bz	l6928
  2216                           
  2217                           ; BSR set to: 1
  2218                           ;main.c: 104: {
  2219                           ;main.c: 106: (LATC &= ~0x10);
  2220  003E7E  988B               	bcf	3979,4,c	;volatile
  2221                           
  2222                           ; BSR set to: 1
  2223                           ;main.c: 107: if(RF_Saved == 90)
  2224  003E80  0E5A               	movlw	90
  2225  003E82  19AD               	xorwf	_RF_Saved& (0+255),w,b
  2226  003E84  E117               	bnz	l6910
  2227                           
  2228                           ; BSR set to: 1
  2229                           ;main.c: 108: {
  2230                           ;main.c: 109: if(Flash_Status == 1)
  2231  003E86  0503               	decf	_Flash_Status& (0+255),w,b
  2232  003E88  E10A               	bnz	l6904
  2233                           
  2234                           ; BSR set to: 1
  2235                           ;main.c: 110: {
  2236                           ;main.c: 111: MSC_BlinkLED(4,50);
  2237  003E8A  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2238  003E8C  0E04               	movlw	4
  2239  003E8E  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2240  003E90  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2241  003E92  0E32               	movlw	50
  2242  003E94  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2243  003E96  ECE8  F009         	call	_MSC_BlinkLED	;wreg free
  2244  003E9A                     l6902:
  2245                           
  2246                           ; BSR set to: 1
  2247                           ;main.c: 112: (LATC &= ~0x10);
  2248  003E9A  988B               	bcf	3979,4,c	;volatile
  2249                           
  2250                           ;main.c: 113: }
  2251  003E9C  D009               	goto	l6908
  2252  003E9E                     l6904:
  2253                           
  2254                           ; BSR set to: 1
  2255                           ;main.c: 114: else
  2256                           ;main.c: 115: {
  2257                           ;main.c: 116: MSC_BlinkLED(6,75);
  2258  003E9E  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2259  003EA0  0E06               	movlw	6
  2260  003EA2  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2261  003EA4  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2262  003EA6  0E4B               	movlw	75
  2263  003EA8  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2264  003EAA  ECE8  F009         	call	_MSC_BlinkLED	;wreg free
  2265  003EAE  D7F5               	goto	l6902
  2266  003EB0                     l6908:
  2267                           
  2268                           ; BSR set to: 1
  2269                           ;main.c: 118: }
  2270                           ;main.c: 119: RF_Saved = 91;
  2271  003EB0  0E5B               	movlw	91
  2272  003EB2  6FAD               	movwf	_RF_Saved& (0+255),b
  2273  003EB4                     l6910:
  2274                           
  2275                           ; BSR set to: 1
  2276                           ;main.c: 120: }
  2277                           ;main.c: 121: if(IR_Saved == 90)
  2278  003EB4  0E5A               	movlw	90
  2279  003EB6  19AC               	xorwf	_IR_Saved& (0+255),w,b
  2280  003EB8  E117               	bnz	i1L__ptext5
  2281                           
  2282                           ; BSR set to: 1
  2283                           ;main.c: 122: {
  2284                           ;main.c: 123: if(Flash_Status == 1)
  2285  003EBA  0503               	decf	_Flash_Status& (0+255),w,b
  2286  003EBC  E10A               	bnz	l6918
  2287                           
  2288                           ; BSR set to: 1
  2289                           ;main.c: 124: {
  2290                           ;main.c: 125: MSC_BlinkLED(4,50);
  2291  003EBE  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2292  003EC0  0E04               	movlw	4
  2293  003EC2  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2294  003EC4  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2295  003EC6  0E32               	movlw	50
  2296  003EC8  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2297  003ECA  ECE8  F009         	call	_MSC_BlinkLED	;wreg free
  2298  003ECE                     l6916:
  2299                           
  2300                           ; BSR set to: 1
  2301                           ;main.c: 126: (LATC &= ~0x10);
  2302  003ECE  988B               	bcf	3979,4,c	;volatile
  2303                           
  2304                           ;main.c: 127: }
  2305  003ED0  D009               	goto	l6922
  2306  003ED2                     l6918:
  2307                           
  2308                           ; BSR set to: 1
  2309                           ;main.c: 128: else
  2310                           ;main.c: 129: {
  2311                           ;main.c: 130: MSC_BlinkLED(6,75);
  2312  003ED2  6B8C               	clrf	(MSC_BlinkLED@blink+1)& (0+255),b
  2313  003ED4  0E06               	movlw	6
  2314  003ED6  6F8B               	movwf	MSC_BlinkLED@blink& (0+255),b
  2315  003ED8  6B8E               	clrf	(MSC_BlinkLED@speed+1)& (0+255),b
  2316  003EDA  0E4B               	movlw	75
  2317  003EDC  6F8D               	movwf	MSC_BlinkLED@speed& (0+255),b
  2318  003EDE  ECE8  F009         	call	_MSC_BlinkLED	;wreg free
  2319  003EE2  D7F5               	goto	l6916
  2320  003EE4                     l6922:
  2321                           
  2322                           ; BSR set to: 1
  2323                           ;main.c: 132: }
  2324                           ;main.c: 133: IR_Saved = 91;
  2325  003EE4  0E5B               	movlw	91
  2326  003EE6  6FAC               	movwf	_IR_Saved& (0+255),b
  2327  003EE8                     i1L__ptext5:
  2328                           	opt stack 0
  2329  003EE8                     i1L_SYS_EnableInt:
  2330                           	opt stack 0
  2331  003EE8                     i1Ll5062:
  2332                           	opt stack 17
  2333                           
  2334                           ;SYSTEM.c: 82: BUT_IR_PinChangeInt(1);
  2335  003EE8  0E01               	movlw	1
  2336  003EEA  EC47  F00D         	call	_BUT_IR_PinChangeInt
  2337                           
  2338                           ;SYSTEM.c: 83: RF_DataInt(1);
  2339  003EEE  0E01               	movlw	1
  2340  003EF0  ECC6  F00C         	call	_RF_DataInt
  2341  003EF4                     i1Ll5064:
  2342                           	opt stack 17
  2343                           
  2344                           ; BSR set to: 0
  2345                           ;SYSTEM.c: 84: INTCONbits.PEIE = 1;
  2346  003EF4  8CF2               	bsf	intcon,6,c	;volatile
  2347  003EF6                     i1Ll5066:
  2348                           	opt stack 17
  2349                           
  2350                           ; BSR set to: 0
  2351                           ;SYSTEM.c: 85: INTCONbits.GIE = 1;
  2352  003EF6  8EF2               	bsf	intcon,7,c	;volatile
  2353  003EF8                     i1Ll340:
  2354                           	opt stack 13
  2355                           
  2356                           ; BSR set to: 0
  2357                           ;main.c: 136: System_State_Change = 0;
  2358  003EF8  0101               	movlb	1	; () banked
  2359  003EFA  6B06               	clrf	_System_State_Change& (0+255),b	;volatile
  2360  003EFC                     l6928:
  2361                           
  2362                           ; BSR set to: 1
  2363                           ;main.c: 137: }
  2364                           ;main.c: 138: if(RF_Data || IR_Data || Button_Data)
  2365  003EFC  5105               	movf	_RF_Data& (0+255),w,b	;volatile
  2366  003EFE  E104               	bnz	l6934
  2367                           
  2368                           ; BSR set to: 1
  2369  003F00  5104               	movf	_IR_Data& (0+255),w,b	;volatile
  2370  003F02  E102               	bnz	l6934
  2371                           
  2372                           ; BSR set to: 1
  2373  003F04  5102               	movf	_Button_Data& (0+255),w,b	;volatile
  2374  003F06  E019               	bz	l6952
  2375  003F08                     l6934:
  2376                           
  2377                           ; BSR set to: 1
  2378                           ;main.c: 139: {
  2379                           ;main.c: 140: (LATC |= 0x10);
  2380  003F08  888B               	bsf	3979,4,c	;volatile
  2381  003F0A                     i2L__ptext1:
  2382                           	opt stack 0
  2383  003F0A                     i2L_SYS_DisableInt:
  2384                           	opt stack 0
  2385  003F0A                     i2Ll6078:
  2386                           	opt stack 18
  2387                           
  2388                           ; BSR set to: 1
  2389                           ;SYSTEM.c: 71: INTCONbits.GIE = 0;
  2390  003F0A  9EF2               	bcf	intcon,7,c	;volatile
  2391                           
  2392                           ;SYSTEM.c: 72: INTCONbits.PEIE = 0;
  2393  003F0C  9CF2               	bcf	intcon,6,c	;volatile
  2394  003F0E                     i2Ll337:
  2395                           	opt stack 13
  2396                           
  2397                           ; BSR set to: 1
  2398                           ;main.c: 142: MTR_Rotate();
  2399  003F0E  EC74  F006         	call	_MTR_Rotate	;wreg free
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;main.c: 143: MSC_DelayMS(200);
  2403  003F12  0EC8               	movlw	200
  2404  003F14  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  2405  003F16  6BBA               	clrf	(MSC_DelayMS@US+1)& (0+255),b
  2406  003F18  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  2407  003F1A  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  2408  003F1C  ECC1  F009         	call	_MSC_DelayMS	;wreg free
  2409  003F20                     i3L__ptext5:
  2410                           	opt stack 0
  2411  003F20                     i3L_SYS_EnableInt:
  2412                           	opt stack 0
  2413  003F20                     i3Ll5062:
  2414                           	opt stack 17
  2415                           
  2416                           ;SYSTEM.c: 82: BUT_IR_PinChangeInt(1);
  2417  003F20  0E01               	movlw	1
  2418  003F22  EC47  F00D         	call	_BUT_IR_PinChangeInt
  2419                           
  2420                           ;SYSTEM.c: 83: RF_DataInt(1);
  2421  003F26  0E01               	movlw	1
  2422  003F28  ECC6  F00C         	call	_RF_DataInt
  2423  003F2C                     i3Ll5064:
  2424                           	opt stack 17
  2425                           
  2426                           ; BSR set to: 0
  2427                           ;SYSTEM.c: 84: INTCONbits.PEIE = 1;
  2428  003F2C  8CF2               	bsf	intcon,6,c	;volatile
  2429  003F2E                     i3Ll5066:
  2430                           	opt stack 17
  2431                           
  2432                           ; BSR set to: 0
  2433                           ;SYSTEM.c: 85: INTCONbits.GIE = 1;
  2434  003F2E  8EF2               	bsf	intcon,7,c	;volatile
  2435  003F30                     i3Ll340:
  2436                           	opt stack 13
  2437                           
  2438                           ; BSR set to: 0
  2439                           ;main.c: 145: RF_Data = 0;
  2440  003F30  0101               	movlb	1	; () banked
  2441  003F32  6B05               	clrf	_RF_Data& (0+255),b	;volatile
  2442                           
  2443                           ; BSR set to: 1
  2444                           ;main.c: 146: IR_Data = 0;
  2445  003F34  6B04               	clrf	_IR_Data& (0+255),b	;volatile
  2446                           
  2447                           ; BSR set to: 1
  2448                           ;main.c: 147: Button_Data = 0;
  2449  003F36  6B02               	clrf	_Button_Data& (0+255),b	;volatile
  2450                           
  2451                           ; BSR set to: 1
  2452                           ;main.c: 148: (LATC &= ~0x10);
  2453  003F38  988B               	bcf	3979,4,c	;volatile
  2454  003F3A                     l6952:
  2455                           
  2456                           ; BSR set to: 1
  2457                           ;main.c: 149: }
  2458                           ;main.c: 150: if(Rail_VIN < 3.5 || Rail_VIN > 5.5 )
  2459  003F3A  C1A9  F0B5         	movff	_Rail_VIN,___ftge@ff1
  2460  003F3E  C1AA  F0B6         	movff	_Rail_VIN+1,___ftge@ff1+1
  2461  003F42  C1AB  F0B7         	movff	_Rail_VIN+2,___ftge@ff1+2
  2462  003F46  0100               	movlb	0	; () banked
  2463  003F48  6BB8               	clrf	___ftge@ff2& (0+255),b
  2464  003F4A  0E60               	movlw	96
  2465  003F4C  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  2466  003F4E  0E40               	movlw	64
  2467  003F50  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  2468  003F52  EC3C  F009         	call	___ftge	;wreg free
  2469  003F56  E30E               	bnc	l6956
  2470                           
  2471                           ; BSR set to: 0
  2472  003F58  6BB5               	clrf	___ftge@ff1& (0+255),b
  2473  003F5A  0EB0               	movlw	176
  2474  003F5C  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  2475  003F5E  0E40               	movlw	64
  2476  003F60  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  2477  003F62  C1A9  F0B8         	movff	_Rail_VIN,___ftge@ff2
  2478  003F66  C1AA  F0B9         	movff	_Rail_VIN+1,___ftge@ff2+1
  2479  003F6A  C1AB  F0BA         	movff	_Rail_VIN+2,___ftge@ff2+2
  2480  003F6E  EC3C  F009         	call	___ftge	;wreg free
  2481  003F72  E209               	bc	l6960
  2482  003F74                     l6956:
  2483                           
  2484                           ; BSR set to: 0
  2485                           ;main.c: 151: {
  2486                           ;main.c: 152: MSC_DelayMS(100);
  2487  003F74  0E64               	movlw	100
  2488  003F76  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  2489  003F78  6BBA               	clrf	(MSC_DelayMS@US+1)& (0+255),b
  2490  003F7A  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  2491  003F7C  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  2492  003F7E  ECC1  F009         	call	_MSC_DelayMS	;wreg free
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;main.c: 153: (LATC ^= 0x10);
  2496  003F82  0E10               	movlw	16
  2497  003F84  1A8B               	xorwf	3979,f,c	;volatile
  2498  003F86                     l6960:
  2499                           
  2500                           ; BSR set to: 0
  2501                           ;main.c: 154: }
  2502                           ;main.c: 155: SYS_ActivityTimer();
  2503  003F86  EC46  F00A         	call	_SYS_ActivityTimer	;wreg free
  2504                           
  2505                           ;main.c: 156: }
  2506  003F8A  D01C               	goto	l6978
  2507  003F8C                     l6962:
  2508                           
  2509                           ; BSR set to: 1
  2510                           ;main.c: 157: else if(System_State == 10)
  2511  003F8C  0E0A               	movlw	10
  2512  003F8E  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  2513  003F90  E119               	bnz	l6978
  2514                           
  2515                           ; BSR set to: 1
  2516                           ;main.c: 158: {
  2517                           ;main.c: 160: MSC_DelayMS(25);
  2518  003F92  0E19               	movlw	25
  2519  003F94  0100               	movlb	0	; () banked
  2520  003F96  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  2521  003F98  6BBA               	clrf	(MSC_DelayMS@US+1)& (0+255),b
  2522  003F9A  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  2523  003F9C  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  2524  003F9E  ECC1  F009         	call	_MSC_DelayMS	;wreg free
  2525                           
  2526                           ; BSR set to: 0
  2527                           ;main.c: 161: (LATC ^= 0x10);
  2528  003FA2  0E10               	movlw	16
  2529  003FA4  1A8B               	xorwf	3979,f,c	;volatile
  2530                           
  2531                           ; BSR set to: 0
  2532                           ;main.c: 162: if(RF_Data)
  2533  003FA6  0101               	movlb	1	; () banked
  2534  003FA8  5105               	movf	_RF_Data& (0+255),w,b	;volatile
  2535  003FAA  E005               	bz	l76
  2536                           
  2537                           ; BSR set to: 1
  2538                           ;main.c: 163: {
  2539                           ;main.c: 165: RF_Data = 0;
  2540  003FAC  6B05               	clrf	_RF_Data& (0+255),b	;volatile
  2541                           
  2542                           ; BSR set to: 1
  2543                           ;main.c: 166: System_State = 8;
  2544  003FAE  0E08               	movlw	8
  2545  003FB0  6FAE               	movwf	_System_State& (0+255),b	;volatile
  2546                           
  2547                           ;main.c: 167: System_State_Change = 1;
  2548  003FB2  0E01               	movlw	1
  2549  003FB4  6F06               	movwf	_System_State_Change& (0+255),b	;volatile
  2550  003FB6                     l76:
  2551                           
  2552                           ; BSR set to: 1
  2553                           ;main.c: 168: }
  2554                           ;main.c: 169: if(IR_Data)
  2555  003FB6  5104               	movf	_IR_Data& (0+255),w,b	;volatile
  2556  003FB8  E005               	bz	l6978
  2557                           
  2558                           ; BSR set to: 1
  2559                           ;main.c: 170: {
  2560                           ;main.c: 172: IR_Data = 0;
  2561  003FBA  6B04               	clrf	_IR_Data& (0+255),b	;volatile
  2562                           
  2563                           ; BSR set to: 1
  2564                           ;main.c: 173: System_State = 8;
  2565  003FBC  0E08               	movlw	8
  2566  003FBE  6FAE               	movwf	_System_State& (0+255),b	;volatile
  2567                           
  2568                           ;main.c: 174: System_State_Change = 1;
  2569  003FC0  0E01               	movlw	1
  2570  003FC2  6F06               	movwf	_System_State_Change& (0+255),b	;volatile
  2571  003FC4                     l6978:
  2572                           
  2573                           ;main.c: 175: }
  2574                           ;main.c: 176: }
  2575                           ;main.c: 178: ADC_SampleCount++;
  2576  003FC4  0101               	movlb	1	; () banked
  2577  003FC6  4B00               	infsnz	_ADC_SampleCount& (0+255),f,b
  2578  003FC8  2B01               	incf	(_ADC_SampleCount+1)& (0+255),f,b
  2579                           
  2580                           ; BSR set to: 1
  2581                           ;main.c: 179: if(ADC_SampleCount > 10)
  2582  003FCA  5101               	movf	(_ADC_SampleCount+1)& (0+255),w,b
  2583  003FCC  E104               	bnz	u7480
  2584  003FCE  0E0B               	movlw	11
  2585  003FD0  5D00               	subwf	_ADC_SampleCount& (0+255),w,b
  2586  003FD2  E201 D74E          	bnc	l6890
  2587  003FD6                     u7480:
  2588                           
  2589                           ; BSR set to: 1
  2590                           ;main.c: 180: {
  2591                           ;main.c: 181: ADC_Start();
  2592  003FD6  ECCF  F00D         	call	_ADC_Start	;wreg free
  2593                           
  2594                           ; BSR set to: 1
  2595                           ;main.c: 182: ADC_SampleCount = 0;
  2596  003FDA  6B00               	clrf	_ADC_SampleCount& (0+255),b
  2597  003FDC  6B01               	clrf	(_ADC_SampleCount+1)& (0+255),b
  2598  003FDE  D749               	goto	l6890
  2599  003FE0                     __end_of_main:
  2600                           	opt stack 0
  2601                           tblptru	equ	0xFF8
  2602                           tblptrh	equ	0xFF7
  2603                           tblptrl	equ	0xFF6
  2604                           tablat	equ	0xFF5
  2605                           intcon	equ	0xFF2
  2606                           postinc0	equ	0xFEE
  2607                           wreg	equ	0xFE8
  2608                           postdec1	equ	0xFE5
  2609                           fsr1l	equ	0xFE1
  2610                           
  2611 ;; *************** function _SYS_DisableInt *****************
  2612 ;; Defined at:
  2613 ;;		line 69 in file "SYSTEM.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;		None
  2616 ;; Auto vars:     Size  Location     Type
  2617 ;;		None
  2618 ;; Return value:  Size  Location     Type
  2619 ;;		None               void
  2620 ;; Registers used:
  2621 ;;		None
  2622 ;; Tracked objects:
  2623 ;;		On entry : F/1
  2624 ;;		On exit  : F/1
  2625 ;;		Unchanged: F/0
  2626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2627 ;;      Params:         0       0       0       0       0
  2628 ;;      Locals:         0       0       0       0       0
  2629 ;;      Temps:          0       0       0       0       0
  2630 ;;      Totals:         0       0       0       0       0
  2631 ;;Total ram usage:        0 bytes
  2632 ;; Hardware stack levels used:    1
  2633 ;; Hardware stack levels required when called:   12
  2634 ;; This function calls:
  2635 ;;		Nothing
  2636 ;; This function is called by:
  2637 ;;		_main
  2638 ;; This function uses a non-reentrant model
  2639 ;;
  2640                           
  2641                           	psect	text1
  2642  000000                     __ptext1:
  2643                           	opt stack 0
  2644  000000                     _SYS_DisableInt:
  2645                           	opt stack 0
  2646  000000                     __end_of_SYS_DisableInt:
  2647                           	opt stack 0
  2648                           tblptru	equ	0xFF8
  2649                           tblptrh	equ	0xFF7
  2650                           tblptrl	equ	0xFF6
  2651                           tablat	equ	0xFF5
  2652                           intcon	equ	0xFF2
  2653                           postinc0	equ	0xFEE
  2654                           wreg	equ	0xFE8
  2655                           postdec1	equ	0xFE5
  2656                           fsr1l	equ	0xFE1
  2657                           
  2658 ;; *************** function _SYS_ConfigureOscillator *****************
  2659 ;; Defined at:
  2660 ;;		line 115 in file "SYSTEM.c"
  2661 ;; Parameters:    Size  Location     Type
  2662 ;;		None
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;		None
  2665 ;; Return value:  Size  Location     Type
  2666 ;;		None               void
  2667 ;; Registers used:
  2668 ;;		None
  2669 ;; Tracked objects:
  2670 ;;		On entry : 0/0
  2671 ;;		On exit  : 0/0
  2672 ;;		Unchanged: 0/0
  2673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2674 ;;      Params:         0       0       0       0       0
  2675 ;;      Locals:         0       0       0       0       0
  2676 ;;      Temps:          0       0       0       0       0
  2677 ;;      Totals:         0       0       0       0       0
  2678 ;;Total ram usage:        0 bytes
  2679 ;; Hardware stack levels used:    1
  2680 ;; Hardware stack levels required when called:   12
  2681 ;; This function calls:
  2682 ;;		Nothing
  2683 ;; This function is called by:
  2684 ;;		_main
  2685 ;; This function uses a non-reentrant model
  2686 ;;
  2687                           
  2688                           	psect	text2
  2689  001B5C                     __ptext2:
  2690                           	opt stack 0
  2691  001B5C                     _SYS_ConfigureOscillator:
  2692                           	opt stack 18
  2693                           
  2694                           ;SYSTEM.c: 118: OSCTUNEbits.PLLEN = 1;
  2695                           
  2696                           ; BSR set to: 1
  2697                           ;incstack = 0
  2698  001B5C  8C9B               	bsf	3995,6,c	;volatile
  2699  001B5E                     l349:
  2700  001B5E  B6D3               	btfsc	4051,3,c	;volatile
  2701  001B60  0012               	return		;funcret
  2702  001B62  D7FD               	goto	l349
  2703  001B64                     __end_of_SYS_ConfigureOscillator:
  2704                           	opt stack 0
  2705                           tblptru	equ	0xFF8
  2706                           tblptrh	equ	0xFF7
  2707                           tblptrl	equ	0xFF6
  2708                           tablat	equ	0xFF5
  2709                           intcon	equ	0xFF2
  2710                           postinc0	equ	0xFEE
  2711                           wreg	equ	0xFE8
  2712                           postdec1	equ	0xFE5
  2713                           fsr1l	equ	0xFE1
  2714                           
  2715 ;; *************** function _SYS_ActivityTimer *****************
  2716 ;; Defined at:
  2717 ;;		line 128 in file "SYSTEM.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;		None
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;		None
  2722 ;; Return value:  Size  Location     Type
  2723 ;;		None               void
  2724 ;; Registers used:
  2725 ;;		wreg, status,2, status,0, cstack
  2726 ;; Tracked objects:
  2727 ;;		On entry : F/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2731 ;;      Params:         0       0       0       0       0
  2732 ;;      Locals:         0       0       0       0       0
  2733 ;;      Temps:          0       0       0       0       0
  2734 ;;      Totals:         0       0       0       0       0
  2735 ;;Total ram usage:        0 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:   14
  2738 ;; This function calls:
  2739 ;;		_SYS_ActivityTimerReset
  2740 ;;		_SYS_EnableInt
  2741 ;;		_SYS_Sleep
  2742 ;; This function is called by:
  2743 ;;		_main
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           	psect	text3
  2748  00148C                     __ptext3:
  2749                           	opt stack 0
  2750  00148C                     _SYS_ActivityTimer:
  2751                           	opt stack 16
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;SYSTEM.c: 130: if(Activity_Timer > 1000L)
  2755                           
  2756                           ;incstack = 0
  2757  00148C  505D               	movf	_Activity_Timer+3,w,c
  2758  00148E  105C               	iorwf	_Activity_Timer+2,w,c
  2759  001490  E105               	bnz	u6070
  2760  001492  0EE9               	movlw	233
  2761  001494  5C5A               	subwf	_Activity_Timer,w,c
  2762  001496  0E03               	movlw	3
  2763  001498  585B               	subwfb	_Activity_Timer+1,w,c
  2764  00149A  E30F               	bnc	l6098
  2765  00149C                     u6070:
  2766  00149C                     i4L__ptext6:
  2767                           	opt stack 0
  2768  00149C                     i4L_SYS_ActivityTimerReset:
  2769                           	opt stack 0
  2770  00149C                     i4Ll5076:
  2771                           	opt stack 17
  2772                           
  2773                           ; BSR set to: 0
  2774                           ;SYSTEM.c: 61: Activity_Timer = 0;
  2775  00149C  6A5A               	clrf	_Activity_Timer,c
  2776  00149E  6A5B               	clrf	_Activity_Timer+1,c
  2777  0014A0  6A5C               	clrf	_Activity_Timer+2,c
  2778  0014A2  6A5D               	clrf	_Activity_Timer+3,c
  2779  0014A4                     i4Ll334:
  2780                           	opt stack 0
  2781  0014A4                     i5L__ptext5:
  2782                           	opt stack 0
  2783  0014A4                     i5L_SYS_EnableInt:
  2784                           	opt stack 0
  2785  0014A4                     i5Ll5062:
  2786                           	opt stack 17
  2787                           
  2788                           ;SYSTEM.c: 82: BUT_IR_PinChangeInt(1);
  2789  0014A4  0E01               	movlw	1
  2790  0014A6  EC47  F00D         	call	_BUT_IR_PinChangeInt
  2791                           
  2792                           ;SYSTEM.c: 83: RF_DataInt(1);
  2793  0014AA  0E01               	movlw	1
  2794  0014AC  ECC6  F00C         	call	_RF_DataInt
  2795  0014B0                     i5Ll5064:
  2796                           	opt stack 17
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;SYSTEM.c: 84: INTCONbits.PEIE = 1;
  2800  0014B0  8CF2               	bsf	intcon,6,c	;volatile
  2801  0014B2                     i5Ll5066:
  2802                           	opt stack 17
  2803                           
  2804                           ; BSR set to: 0
  2805                           ;SYSTEM.c: 85: INTCONbits.GIE = 1;
  2806  0014B2  8EF2               	bsf	intcon,7,c	;volatile
  2807  0014B4                     i5Ll340:
  2808                           	opt stack 0
  2809  0014B4                     i6L__ptext4:
  2810                           	opt stack 0
  2811  0014B4                     i6L_SYS_Sleep:
  2812                           	opt stack 0
  2813  0014B4                     i6Ll5146:
  2814                           	opt stack 17
  2815                           
  2816                           ; BSR set to: 0
  2817                           ;SYSTEM.c: 95: OSCCON &= ~0b10000000;
  2818  0014B4  9ED3               	bcf	4051,7,c	;volatile
  2819  0014B6  0003               	sleep		;# 
  2820  0014B8                     i6Ll343:
  2821                           	opt stack 0
  2822  0014B8  0012               	return	
  2823  0014BA                     l6098:
  2824                           
  2825                           ; BSR set to: 0
  2826                           ;SYSTEM.c: 136: else
  2827                           ;SYSTEM.c: 137: {
  2828                           ;SYSTEM.c: 138: Activity_Timer++;
  2829  0014BA  2A5A               	incf	_Activity_Timer,f,c
  2830  0014BC  0E00               	movlw	0
  2831  0014BE  225B               	addwfc	_Activity_Timer+1,f,c
  2832  0014C0  225C               	addwfc	_Activity_Timer+2,f,c
  2833  0014C2  225D               	addwfc	_Activity_Timer+3,f,c
  2834  0014C4  0C00               	retlw	0	;funcret
  2835  0014C6                     __end_of_SYS_ActivityTimer:
  2836                           	opt stack 0
  2837                           tblptru	equ	0xFF8
  2838                           tblptrh	equ	0xFF7
  2839                           tblptrl	equ	0xFF6
  2840                           tablat	equ	0xFF5
  2841                           intcon	equ	0xFF2
  2842                           postinc0	equ	0xFEE
  2843                           wreg	equ	0xFE8
  2844                           postdec1	equ	0xFE5
  2845                           fsr1l	equ	0xFE1
  2846                           
  2847 ;; *************** function _SYS_Sleep *****************
  2848 ;; Defined at:
  2849 ;;		line 93 in file "SYSTEM.c"
  2850 ;; Parameters:    Size  Location     Type
  2851 ;;		None
  2852 ;; Auto vars:     Size  Location     Type
  2853 ;;		None
  2854 ;; Return value:  Size  Location     Type
  2855 ;;		None               void
  2856 ;; Registers used:
  2857 ;;		status,2, status,0
  2858 ;; Tracked objects:
  2859 ;;		On entry : F/0
  2860 ;;		On exit  : 0/0
  2861 ;;		Unchanged: 0/0
  2862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2863 ;;      Params:         0       0       0       0       0
  2864 ;;      Locals:         0       0       0       0       0
  2865 ;;      Temps:          0       0       0       0       0
  2866 ;;      Totals:         0       0       0       0       0
  2867 ;;Total ram usage:        0 bytes
  2868 ;; Hardware stack levels used:    1
  2869 ;; Hardware stack levels required when called:   12
  2870 ;; This function calls:
  2871 ;;		Nothing
  2872 ;; This function is called by:
  2873 ;;		_SYS_ActivityTimer
  2874 ;; This function uses a non-reentrant model
  2875 ;;
  2876                           
  2877                           	psect	text4
  2878  000000                     __ptext4:
  2879                           	opt stack 0
  2880  000000                     _SYS_Sleep:
  2881                           	opt stack 0
  2882  000000                     __end_of_SYS_Sleep:
  2883                           	opt stack 0
  2884                           tblptru	equ	0xFF8
  2885                           tblptrh	equ	0xFF7
  2886                           tblptrl	equ	0xFF6
  2887                           tablat	equ	0xFF5
  2888                           intcon	equ	0xFF2
  2889                           postinc0	equ	0xFEE
  2890                           wreg	equ	0xFE8
  2891                           postdec1	equ	0xFE5
  2892                           fsr1l	equ	0xFE1
  2893                           
  2894 ;; *************** function _SYS_EnableInt *****************
  2895 ;; Defined at:
  2896 ;;		line 80 in file "SYSTEM.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;		None
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;		None
  2901 ;; Return value:  Size  Location     Type
  2902 ;;		None               void
  2903 ;; Registers used:
  2904 ;;		wreg, status,2, cstack
  2905 ;; Tracked objects:
  2906 ;;		On entry : E/1
  2907 ;;		On exit  : F/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2910 ;;      Params:         0       0       0       0       0
  2911 ;;      Locals:         0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0
  2913 ;;      Totals:         0       0       0       0       0
  2914 ;;Total ram usage:        0 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:   13
  2917 ;; This function calls:
  2918 ;;		_BUT_IR_PinChangeInt
  2919 ;;		_RF_DataInt
  2920 ;; This function is called by:
  2921 ;;		_main
  2922 ;;		_SYS_ActivityTimer
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           	psect	text5
  2927  000000                     __ptext5:
  2928                           	opt stack 0
  2929  000000                     _SYS_EnableInt:
  2930                           	opt stack 0
  2931  000000                     __end_of_SYS_EnableInt:
  2932                           	opt stack 0
  2933                           tblptru	equ	0xFF8
  2934                           tblptrh	equ	0xFF7
  2935                           tblptrl	equ	0xFF6
  2936                           tablat	equ	0xFF5
  2937                           intcon	equ	0xFF2
  2938                           postinc0	equ	0xFEE
  2939                           wreg	equ	0xFE8
  2940                           postdec1	equ	0xFE5
  2941                           fsr1l	equ	0xFE1
  2942                           
  2943 ;; *************** function _SYS_ActivityTimerReset *****************
  2944 ;; Defined at:
  2945 ;;		line 59 in file "SYSTEM.c"
  2946 ;; Parameters:    Size  Location     Type
  2947 ;;		None
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;		None
  2950 ;; Return value:  Size  Location     Type
  2951 ;;		None               void
  2952 ;; Registers used:
  2953 ;;		None
  2954 ;; Tracked objects:
  2955 ;;		On entry : F/0
  2956 ;;		On exit  : F/0
  2957 ;;		Unchanged: F/0
  2958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2959 ;;      Params:         0       0       0       0       0
  2960 ;;      Locals:         0       0       0       0       0
  2961 ;;      Temps:          0       0       0       0       0
  2962 ;;      Totals:         0       0       0       0       0
  2963 ;;Total ram usage:        0 bytes
  2964 ;; Hardware stack levels used:    1
  2965 ;; Hardware stack levels required when called:   12
  2966 ;; This function calls:
  2967 ;;		Nothing
  2968 ;; This function is called by:
  2969 ;;		_SYS_ActivityTimer
  2970 ;; This function uses a non-reentrant model
  2971 ;;
  2972                           
  2973                           	psect	text6
  2974  000000                     __ptext6:
  2975                           	opt stack 0
  2976  000000                     _SYS_ActivityTimerReset:
  2977                           	opt stack 0
  2978  000000                     __end_of_SYS_ActivityTimerReset:
  2979                           	opt stack 0
  2980                           tblptru	equ	0xFF8
  2981                           tblptrh	equ	0xFF7
  2982                           tblptrl	equ	0xFF6
  2983                           tablat	equ	0xFF5
  2984                           intcon	equ	0xFF2
  2985                           postinc0	equ	0xFEE
  2986                           wreg	equ	0xFE8
  2987                           postdec1	equ	0xFE5
  2988                           fsr1l	equ	0xFE1
  2989                           
  2990 ;; *************** function _RF_LoadCode *****************
  2991 ;; Defined at:
  2992 ;;		line 127 in file "RF.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;		None
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  High            3   17[BANK1 ] int 
  2997 ;;  Low             3   14[BANK1 ] int 
  2998 ;; Return value:  Size  Location     Type
  2999 ;;		None               void
  3000 ;; Registers used:
  3001 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3002 ;; Tracked objects:
  3003 ;;		On entry : F/0
  3004 ;;		On exit  : F/0
  3005 ;;		Unchanged: 0/0
  3006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3007 ;;      Params:         0       0       0       0       0
  3008 ;;      Locals:         0       0       6       0       0
  3009 ;;      Temps:          0       0       0       0       0
  3010 ;;      Totals:         0       0       6       0       0
  3011 ;;Total ram usage:        6 bytes
  3012 ;; Hardware stack levels used:    1
  3013 ;; Hardware stack levels required when called:   14
  3014 ;; This function calls:
  3015 ;;		_RF_CalculateCodesize
  3016 ;;		___ftge
  3017 ;;		___ftmul
  3018 ;;		___fttol
  3019 ;;		___lwtoft
  3020 ;; This function is called by:
  3021 ;;		_main
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text7
  3026  000244                     __ptext7:
  3027                           	opt stack 0
  3028  000244                     _RF_LoadCode:
  3029                           	opt stack 16
  3030                           
  3031                           ; BSR set to: 0
  3032                           ;RF.c: 130: double High = 0.0;
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;incstack = 0
  3036  000244  0101               	movlb	1	; () banked
  3037  000246  6B98               	clrf	RF_LoadCode@High& (0+255),b
  3038  000248  6B99               	clrf	(RF_LoadCode@High+1)& (0+255),b
  3039  00024A  6B9A               	clrf	(RF_LoadCode@High+2)& (0+255),b
  3040                           
  3041                           ; BSR set to: 1
  3042                           ;RF.c: 132: Low = (double)RF_SavedTiming[0] * (1.0 - 0.02);
  3043  00024C  0E80               	movlw	128
  3044  00024E  6EF6               	movwf	tblptrl,c
  3045  000250                     	if	1	;There is more than 1 active tblptr byte
  3046  000250  0E25               	movlw	37
  3047  000252  6EF7               	movwf	tblptrh,c
  3048  000254                     	endif
  3049  000254                     	if	0	;There are less than 3 active tblptr bytes
  3050  000254                     	endif
  3051  000254  0009               	tblrd		*+
  3052  000256  CFF5 F0BD          	movff	tablat,___lwtoft@c
  3053  00025A  000A               	tblrd		*-
  3054  00025C  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  3055  000260  EC7C  F00B         	call	___lwtoft	;wreg free
  3056  000264  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  3057  000268  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  3058  00026C  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  3059  000270  0EE1               	movlw	225
  3060  000272  0101               	movlb	1	; () banked
  3061  000274  6F8A               	movwf	___ftmul@f2& (0+255),b
  3062  000276  0E7A               	movlw	122
  3063  000278  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  3064  00027A  0E3F               	movlw	63
  3065  00027C  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  3066  00027E  ECB8  F002         	call	___ftmul	;wreg free
  3067  000282  C187  F195         	movff	?___ftmul,RF_LoadCode@Low
  3068  000286  C188  F196         	movff	?___ftmul+1,RF_LoadCode@Low+1
  3069  00028A  C189  F197         	movff	?___ftmul+2,RF_LoadCode@Low+2
  3070                           
  3071                           ;RF.c: 133: High = (double)RF_SavedTiming[0] * (1.0 + 0.02);
  3072  00028E  0E80               	movlw	128
  3073  000290  6EF6               	movwf	tblptrl,c
  3074  000292                     	if	1	;There is more than 1 active tblptr byte
  3075  000292  0E25               	movlw	37
  3076  000294  6EF7               	movwf	tblptrh,c
  3077  000296                     	endif
  3078  000296                     	if	0	;There are less than 3 active tblptr bytes
  3079  000296                     	endif
  3080  000296  0009               	tblrd		*+
  3081  000298  CFF5 F0BD          	movff	tablat,___lwtoft@c
  3082  00029C  000A               	tblrd		*-
  3083  00029E  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  3084  0002A2  EC7C  F00B         	call	___lwtoft	;wreg free
  3085  0002A6  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  3086  0002AA  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  3087  0002AE  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  3088  0002B2  0E8F               	movlw	143
  3089  0002B4  0101               	movlb	1	; () banked
  3090  0002B6  6F8A               	movwf	___ftmul@f2& (0+255),b
  3091  0002B8  0E82               	movlw	130
  3092  0002BA  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  3093  0002BC  0E3F               	movlw	63
  3094  0002BE  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  3095  0002C0  ECB8  F002         	call	___ftmul	;wreg free
  3096  0002C4  C187  F198         	movff	?___ftmul,RF_LoadCode@High
  3097  0002C8  C188  F199         	movff	?___ftmul+1,RF_LoadCode@High+1
  3098  0002CC  C189  F19A         	movff	?___ftmul+2,RF_LoadCode@High+2
  3099                           
  3100                           ;RF.c: 135: if(Low < 300)
  3101  0002D0  C195  F0B5         	movff	RF_LoadCode@Low,___ftge@ff1
  3102  0002D4  C196  F0B6         	movff	RF_LoadCode@Low+1,___ftge@ff1+1
  3103  0002D8  C197  F0B7         	movff	RF_LoadCode@Low+2,___ftge@ff1+2
  3104  0002DC  0100               	movlb	0	; () banked
  3105  0002DE  6BB8               	clrf	___ftge@ff2& (0+255),b
  3106  0002E0  0E96               	movlw	150
  3107  0002E2  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  3108  0002E4  0E43               	movlw	67
  3109  0002E6  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  3110  0002E8  EC3C  F009         	call	___ftge	;wreg free
  3111  0002EC  E206               	bc	l6804
  3112                           
  3113                           ; BSR set to: 0
  3114                           ;RF.c: 136: {
  3115                           ;RF.c: 137: Low = 300;
  3116  0002EE  0101               	movlb	1	; () banked
  3117  0002F0  6B95               	clrf	RF_LoadCode@Low& (0+255),b
  3118  0002F2  0E96               	movlw	150
  3119  0002F4  6F96               	movwf	(RF_LoadCode@Low+1)& (0+255),b
  3120  0002F6  0E43               	movlw	67
  3121  0002F8  6F97               	movwf	(RF_LoadCode@Low+2)& (0+255),b
  3122  0002FA                     l6804:
  3123                           
  3124                           ;RF.c: 138: }
  3125                           ;RF.c: 139: if(High > 1400)
  3126  0002FA  0100               	movlb	0	; () banked
  3127  0002FC  6BB5               	clrf	___ftge@ff1& (0+255),b
  3128  0002FE  0EAF               	movlw	175
  3129  000300  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  3130  000302  0E44               	movlw	68
  3131  000304  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  3132  000306  C198  F0B8         	movff	RF_LoadCode@High,___ftge@ff2
  3133  00030A  C199  F0B9         	movff	RF_LoadCode@High+1,___ftge@ff2+1
  3134  00030E  C19A  F0BA         	movff	RF_LoadCode@High+2,___ftge@ff2+2
  3135  000312  EC3C  F009         	call	___ftge	;wreg free
  3136  000316  E206               	bc	l6808
  3137                           
  3138                           ; BSR set to: 0
  3139                           ;RF.c: 140: {
  3140                           ;RF.c: 141: High = 1400;
  3141  000318  0101               	movlb	1	; () banked
  3142  00031A  6B98               	clrf	RF_LoadCode@High& (0+255),b
  3143  00031C  0EAF               	movlw	175
  3144  00031E  6F99               	movwf	(RF_LoadCode@High+1)& (0+255),b
  3145  000320  0E44               	movlw	68
  3146  000322  6F9A               	movwf	(RF_LoadCode@High+2)& (0+255),b
  3147  000324                     l6808:
  3148                           
  3149                           ;RF.c: 142: }
  3150                           ;RF.c: 144: RF_SyncLow = (unsigned int) Low;
  3151  000324  C195  F0B5         	movff	RF_LoadCode@Low,___fttol@f1
  3152  000328  C196  F0B6         	movff	RF_LoadCode@Low+1,___fttol@f1+1
  3153  00032C  C197  F0B7         	movff	RF_LoadCode@Low+2,___fttol@f1+2
  3154  000330  ECF9  F003         	call	___fttol	;wreg free
  3155  000334  C0B5  F0C2         	movff	?___fttol,_RF_SyncLow
  3156  000338  C0B6  F0C3         	movff	?___fttol+1,_RF_SyncLow+1
  3157                           
  3158                           ;RF.c: 145: RF_SyncHigh = (unsigned int) High;
  3159  00033C  C198  F0B5         	movff	RF_LoadCode@High,___fttol@f1
  3160  000340  C199  F0B6         	movff	RF_LoadCode@High+1,___fttol@f1+1
  3161  000344  C19A  F0B7         	movff	RF_LoadCode@High+2,___fttol@f1+2
  3162  000348  ECF9  F003         	call	___fttol	;wreg free
  3163  00034C  C0B5  F0C0         	movff	?___fttol,_RF_SyncHigh
  3164  000350  C0B6  F0C1         	movff	?___fttol+1,_RF_SyncHigh+1
  3165                           
  3166                           ;RF.c: 147: RF_CodeSize = RF_CalculateCodesize();
  3167  000354  EC7E  F00A         	call	_RF_CalculateCodesize	;wreg free
  3168  000358  6FC8               	movwf	_RF_CodeSize& (0+255),b
  3169                           
  3170                           ; BSR set to: 0
  3171  00035A  0012               	return		;funcret
  3172  00035C                     __end_of_RF_LoadCode:
  3173                           	opt stack 0
  3174                           tblptru	equ	0xFF8
  3175                           tblptrh	equ	0xFF7
  3176                           tblptrl	equ	0xFF6
  3177                           tablat	equ	0xFF5
  3178                           intcon	equ	0xFF2
  3179                           postinc0	equ	0xFEE
  3180                           wreg	equ	0xFE8
  3181                           postdec1	equ	0xFE5
  3182                           fsr1l	equ	0xFE1
  3183                           
  3184 ;; *************** function _RF_CalculateCodesize *****************
  3185 ;; Defined at:
  3186 ;;		line 155 in file "RF.c"
  3187 ;; Parameters:    Size  Location     Type
  3188 ;;		None
  3189 ;; Auto vars:     Size  Location     Type
  3190 ;;  i               1   53[BANK0 ] unsigned char 
  3191 ;; Return value:  Size  Location     Type
  3192 ;;                  1    wreg      unsigned char 
  3193 ;; Registers used:
  3194 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3195 ;; Tracked objects:
  3196 ;;		On entry : E/0
  3197 ;;		On exit  : F/0
  3198 ;;		Unchanged: 0/0
  3199 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3200 ;;      Params:         0       0       0       0       0
  3201 ;;      Locals:         0       1       0       0       0
  3202 ;;      Temps:          0       0       0       0       0
  3203 ;;      Totals:         0       1       0       0       0
  3204 ;;Total ram usage:        1 bytes
  3205 ;; Hardware stack levels used:    1
  3206 ;; Hardware stack levels required when called:   12
  3207 ;; This function calls:
  3208 ;;		Nothing
  3209 ;; This function is called by:
  3210 ;;		_RF_LoadCode
  3211 ;; This function uses a non-reentrant model
  3212 ;;
  3213                           
  3214                           	psect	text8
  3215  0014FC                     __ptext8:
  3216                           	opt stack 0
  3217  0014FC                     _RF_CalculateCodesize:
  3218                           	opt stack 17
  3219                           
  3220                           ;RF.c: 157: unsigned char i;
  3221                           ;RF.c: 159: for(i=0; i<64;i++)
  3222                           
  3223                           ; BSR set to: 0
  3224                           ;incstack = 0
  3225  0014FC  0100               	movlb	0	; () banked
  3226  0014FE  6BB5               	clrf	RF_CalculateCodesize@i& (0+255),b
  3227  001500                     l5154:
  3228                           
  3229                           ; BSR set to: 0
  3230                           ;RF.c: 160: {
  3231                           ;RF.c: 161: if(RF_SavedTiming[i] == 0)
  3232  001500  51B5               	movf	RF_CalculateCodesize@i& (0+255),w,b
  3233  001502  0D02               	mullw	2
  3234  001504  0E80               	movlw	128
  3235  001506  24F3               	addwf	prodl,w,c
  3236  001508  6EF6               	movwf	tblptrl,c
  3237  00150A  0E25               	movlw	37
  3238  00150C  20F4               	addwfc	prodh,w,c
  3239  00150E  6EF7               	movwf	tblptrh,c
  3240  001510  6AF8               	clrf	tblptru,c
  3241  001512  0E00               	movlw	0
  3242  001514  22F8               	addwfc	tblptru,f,c
  3243  001516  0009               	tblrd		*+
  3244  001518  50F5               	movf	tablat,w,c
  3245  00151A  0009               	tblrd		*+
  3246  00151C  10F5               	iorwf	tablat,w,c
  3247  00151E  E102               	bnz	l5160
  3248                           
  3249                           ; BSR set to: 0
  3250                           ;RF.c: 162: {
  3251                           ;RF.c: 163: return i;
  3252  001520  51B5               	movf	RF_CalculateCodesize@i& (0+255),w,b
  3253  001522  0012               	return	
  3254  001524                     l5160:
  3255                           
  3256                           ; BSR set to: 0
  3257  001524  2BB5               	incf	RF_CalculateCodesize@i& (0+255),f,b
  3258                           
  3259                           ; BSR set to: 0
  3260  001526  0E3F               	movlw	63
  3261  001528  65B5               	cpfsgt	RF_CalculateCodesize@i& (0+255),b
  3262  00152A  D7EA               	goto	l5154
  3263  00152C  0C40               	retlw	64
  3264  00152E                     __end_of_RF_CalculateCodesize:
  3265                           	opt stack 0
  3266                           tblptru	equ	0xFF8
  3267                           tblptrh	equ	0xFF7
  3268                           tblptrl	equ	0xFF6
  3269                           tablat	equ	0xFF5
  3270                           prodh	equ	0xFF4
  3271                           prodl	equ	0xFF3
  3272                           intcon	equ	0xFF2
  3273                           postinc0	equ	0xFEE
  3274                           wreg	equ	0xFE8
  3275                           postdec1	equ	0xFE5
  3276                           fsr1l	equ	0xFE1
  3277                           
  3278 ;; *************** function _MTR_Rotate *****************
  3279 ;; Defined at:
  3280 ;;		line 104 in file "MOTOR.c"
  3281 ;; Parameters:    Size  Location     Type
  3282 ;;		None
  3283 ;; Auto vars:     Size  Location     Type
  3284 ;;		None
  3285 ;; Return value:  Size  Location     Type
  3286 ;;		None               void
  3287 ;; Registers used:
  3288 ;;		wreg, status,2, status,0, cstack
  3289 ;; Tracked objects:
  3290 ;;		On entry : F/1
  3291 ;;		On exit  : F/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3294 ;;      Params:         0       0       0       0       0
  3295 ;;      Locals:         0       0       0       0       0
  3296 ;;      Temps:          0       0       0       0       0
  3297 ;;      Totals:         0       0       0       0       0
  3298 ;;Total ram usage:        0 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:   14
  3301 ;; This function calls:
  3302 ;;		_MSC_DelayMS
  3303 ;;		_MTR_IN1
  3304 ;;		_MTR_IN2
  3305 ;; This function is called by:
  3306 ;;		_main
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           	psect	text9
  3311  000CE8                     __ptext9:
  3312                           	opt stack 0
  3313  000CE8                     _MTR_Rotate:
  3314                           	opt stack 16
  3315                           
  3316                           ; BSR set to: 1
  3317                           ;MOTOR.c: 106: if(DC_Motor == 0)
  3318                           
  3319                           ; BSR set to: 0
  3320                           ;incstack = 0
  3321  000CE8  0100               	movlb	0	; () banked
  3322  000CEA  51C5               	movf	_DC_Motor& (0+255),w,b
  3323  000CEC  E11D               	bnz	l6872
  3324                           
  3325                           ; BSR set to: 0
  3326                           ;MOTOR.c: 107: {
  3327                           ;MOTOR.c: 108: MTR_IN1(0);
  3328  000CEE  0E00               	movlw	0
  3329  000CF0                     i7L__ptext11:
  3330                           	opt stack 0
  3331  000CF0                     i7L_MTR_IN1:
  3332                           	opt stack 17
  3333                           
  3334                           ; BSR set to: 0
  3335                           ;incstack = 0
  3336                           ;MTR_IN1@state stored from wreg
  3337  000CF0  6FB5               	movwf	MTR_IN1@state& (0+255),b
  3338  000CF2                     i7Ll5416:
  3339                           	opt stack 17
  3340                           
  3341                           ;MOTOR.c: 56: if(state)
  3342  000CF2  0100               	movlb	0	; () banked
  3343  000CF4  51B5               	movf	MTR_IN1@state& (0+255),w,b
  3344  000CF6  B4D8               	btfsc	status,2,c
  3345  000CF8                     i7Lu5231:
  3346                           	opt stack 0
  3347  000CF8  D002               	goto	i7Ll5420
  3348  000CFA                     i7Lu5230:
  3349                           	opt stack 0
  3350  000CFA                     i7Ll5418:
  3351                           	opt stack 17
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;MOTOR.c: 57: {
  3355                           ;MOTOR.c: 58: LATB |= 0x08;
  3356  000CFA  868A               	bsf	3978,3,c	;volatile
  3357  000CFC  D001               	goto	iL44
  3358  000CFE                     i7Ll5420:
  3359                           	opt stack 17
  3360                           
  3361                           ; BSR set to: 0
  3362                           ;MOTOR.c: 60: else
  3363                           ;MOTOR.c: 61: {
  3364                           ;MOTOR.c: 62: LATB &= ~0x08;
  3365  000CFE  968A               	bcf	3978,3,c	;volatile
  3366  000D00                     i7Ll500:
  3367                           	opt stack 0
  3368  000D00                     iL44:
  3369                           
  3370                           ;MOTOR.c: 109: MTR_IN2(1);
  3371  000D00  0E01               	movlw	1
  3372  000D02                     i8L__ptext10:
  3373                           	opt stack 0
  3374  000D02                     i8L_MTR_IN2:
  3375                           	opt stack 17
  3376                           
  3377                           ; BSR set to: 0
  3378                           ;incstack = 0
  3379                           ;MTR_IN2@state stored from wreg
  3380  000D02  6FB5               	movwf	MTR_IN2@state& (0+255),b
  3381  000D04                     i8Ll5422:
  3382                           	opt stack 17
  3383                           
  3384                           ;MOTOR.c: 73: if(state)
  3385  000D04  0100               	movlb	0	; () banked
  3386  000D06  51B5               	movf	MTR_IN2@state& (0+255),w,b
  3387  000D08  B4D8               	btfsc	status,2,c
  3388  000D0A                     i8Lu5241:
  3389                           	opt stack 0
  3390  000D0A  D002               	goto	i8Ll5426
  3391  000D0C                     i8Lu5240:
  3392                           	opt stack 0
  3393  000D0C                     i8Ll5424:
  3394                           	opt stack 17
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;MOTOR.c: 74: {
  3398                           ;MOTOR.c: 75: LATC |= 0x04;
  3399  000D0C  848B               	bsf	3979,2,c	;volatile
  3400  000D0E  D001               	goto	iL54
  3401  000D10                     i8Ll5426:
  3402                           	opt stack 17
  3403                           
  3404                           ; BSR set to: 0
  3405                           ;MOTOR.c: 77: else
  3406                           ;MOTOR.c: 78: {
  3407                           ;MOTOR.c: 79: LATC &= ~0x04;
  3408  000D10  948B               	bcf	3979,2,c	;volatile
  3409  000D12                     i8Ll505:
  3410                           	opt stack 0
  3411  000D12                     iL54:
  3412                           
  3413                           ;MOTOR.c: 110: MSC_DelayMS(400);
  3414  000D12  0E90               	movlw	144
  3415  000D14  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  3416  000D16  0E01               	movlw	1
  3417  000D18  6FBA               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  3418  000D1A  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  3419  000D1C  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  3420  000D1E  ECC1  F009         	call	_MSC_DelayMS	;wreg free
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;MOTOR.c: 111: DC_Motor = 1;
  3424  000D22  0E01               	movlw	1
  3425  000D24  6FC5               	movwf	_DC_Motor& (0+255),b
  3426                           
  3427                           ;MOTOR.c: 112: }
  3428  000D26  D01B               	goto	l512
  3429  000D28                     l6872:
  3430                           
  3431                           ; BSR set to: 0
  3432                           ;MOTOR.c: 113: else
  3433                           ;MOTOR.c: 114: {
  3434                           ;MOTOR.c: 115: MTR_IN1(1);
  3435  000D28  0E01               	movlw	1
  3436  000D2A                     i9L__ptext11:
  3437                           	opt stack 0
  3438  000D2A                     i9L_MTR_IN1:
  3439                           	opt stack 17
  3440                           
  3441                           ; BSR set to: 0
  3442                           ;incstack = 0
  3443                           ;MTR_IN1@state stored from wreg
  3444  000D2A  6FB5               	movwf	MTR_IN1@state& (0+255),b
  3445  000D2C                     i9Ll5416:
  3446                           	opt stack 17
  3447                           
  3448                           ;MOTOR.c: 56: if(state)
  3449  000D2C  0100               	movlb	0	; () banked
  3450  000D2E  51B5               	movf	MTR_IN1@state& (0+255),w,b
  3451  000D30  B4D8               	btfsc	status,2,c
  3452  000D32                     i9Lu5231:
  3453                           	opt stack 0
  3454  000D32  D002               	goto	i9Ll5420
  3455  000D34                     i9Lu5230:
  3456                           	opt stack 0
  3457  000D34                     i9Ll5418:
  3458                           	opt stack 17
  3459                           
  3460                           ; BSR set to: 0
  3461                           ;MOTOR.c: 57: {
  3462                           ;MOTOR.c: 58: LATB |= 0x08;
  3463  000D34  868A               	bsf	3978,3,c	;volatile
  3464  000D36  D001               	goto	iL64
  3465  000D38                     i9Ll5420:
  3466                           	opt stack 17
  3467                           
  3468                           ; BSR set to: 0
  3469                           ;MOTOR.c: 60: else
  3470                           ;MOTOR.c: 61: {
  3471                           ;MOTOR.c: 62: LATB &= ~0x08;
  3472  000D38  968A               	bcf	3978,3,c	;volatile
  3473  000D3A                     i9Ll500:
  3474                           	opt stack 0
  3475  000D3A                     iL64:
  3476                           
  3477                           ;MOTOR.c: 116: MTR_IN2(0);
  3478  000D3A  0E00               	movlw	0
  3479  000D3C                     i10L__ptext10:
  3480                           	opt stack 0
  3481  000D3C                     i10L_MTR_IN2:
  3482                           	opt stack 17
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;incstack = 0
  3486                           ;MTR_IN2@state stored from wreg
  3487  000D3C  6FB5               	movwf	MTR_IN2@state& (0+255),b
  3488  000D3E                     i10Ll5422:
  3489                           	opt stack 17
  3490                           
  3491                           ;MOTOR.c: 73: if(state)
  3492  000D3E  0100               	movlb	0	; () banked
  3493  000D40  51B5               	movf	MTR_IN2@state& (0+255),w,b
  3494  000D42  B4D8               	btfsc	status,2,c
  3495  000D44                     i10Lu5241:
  3496                           	opt stack 0
  3497  000D44  D002               	goto	i10Ll5426
  3498  000D46                     i10Lu5240:
  3499                           	opt stack 0
  3500  000D46                     i10Ll5424:
  3501                           	opt stack 17
  3502                           
  3503                           ; BSR set to: 0
  3504                           ;MOTOR.c: 74: {
  3505                           ;MOTOR.c: 75: LATC |= 0x04;
  3506  000D46  848B               	bsf	3979,2,c	;volatile
  3507  000D48  D001               	goto	iL74
  3508  000D4A                     i10Ll5426:
  3509                           	opt stack 17
  3510                           
  3511                           ; BSR set to: 0
  3512                           ;MOTOR.c: 77: else
  3513                           ;MOTOR.c: 78: {
  3514                           ;MOTOR.c: 79: LATC &= ~0x04;
  3515  000D4A  948B               	bcf	3979,2,c	;volatile
  3516  000D4C                     i10Ll505:
  3517                           	opt stack 0
  3518  000D4C                     iL74:
  3519                           
  3520                           ;MOTOR.c: 117: MSC_DelayMS(400);
  3521  000D4C  0E90               	movlw	144
  3522  000D4E  6FB9               	movwf	MSC_DelayMS@US& (0+255),b
  3523  000D50  0E01               	movlw	1
  3524  000D52  6FBA               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  3525  000D54  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  3526  000D56  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  3527  000D58  ECC1  F009         	call	_MSC_DelayMS	;wreg free
  3528                           
  3529                           ; BSR set to: 0
  3530                           ;MOTOR.c: 118: DC_Motor = 0;
  3531  000D5C  6BC5               	clrf	_DC_Motor& (0+255),b
  3532  000D5E                     l512:
  3533                           
  3534                           ; BSR set to: 0
  3535                           ;MOTOR.c: 119: }
  3536                           ;MOTOR.c: 120: MTR_IN1(0);
  3537  000D5E  0E00               	movlw	0
  3538  000D60                     i11L__ptext11:
  3539                           	opt stack 0
  3540  000D60                     i11L_MTR_IN1:
  3541                           	opt stack 17
  3542                           
  3543                           ; BSR set to: 0
  3544                           ;incstack = 0
  3545                           ;MTR_IN1@state stored from wreg
  3546  000D60  6FB5               	movwf	MTR_IN1@state& (0+255),b
  3547  000D62                     i11Ll5416:
  3548                           	opt stack 17
  3549                           
  3550                           ;MOTOR.c: 56: if(state)
  3551  000D62  0100               	movlb	0	; () banked
  3552  000D64  51B5               	movf	MTR_IN1@state& (0+255),w,b
  3553  000D66  B4D8               	btfsc	status,2,c
  3554  000D68                     i11Lu5231:
  3555                           	opt stack 0
  3556  000D68  D002               	goto	i11Ll5420
  3557  000D6A                     i11Lu5230:
  3558                           	opt stack 0
  3559  000D6A                     i11Ll5418:
  3560                           	opt stack 17
  3561                           
  3562                           ; BSR set to: 0
  3563                           ;MOTOR.c: 57: {
  3564                           ;MOTOR.c: 58: LATB |= 0x08;
  3565  000D6A  868A               	bsf	3978,3,c	;volatile
  3566  000D6C  D001               	goto	iL84
  3567  000D6E                     i11Ll5420:
  3568                           	opt stack 17
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;MOTOR.c: 60: else
  3572                           ;MOTOR.c: 61: {
  3573                           ;MOTOR.c: 62: LATB &= ~0x08;
  3574  000D6E  968A               	bcf	3978,3,c	;volatile
  3575  000D70                     i11Ll500:
  3576                           	opt stack 0
  3577  000D70                     iL84:
  3578                           
  3579                           ;MOTOR.c: 121: MTR_IN2(0);
  3580  000D70  0E00               	movlw	0
  3581  000D72                     i12L__ptext10:
  3582                           	opt stack 0
  3583  000D72                     i12L_MTR_IN2:
  3584                           	opt stack 17
  3585                           
  3586                           ; BSR set to: 0
  3587                           ;incstack = 0
  3588                           ;MTR_IN2@state stored from wreg
  3589  000D72  6FB5               	movwf	MTR_IN2@state& (0+255),b
  3590  000D74                     i12Ll5422:
  3591                           	opt stack 17
  3592                           
  3593                           ;MOTOR.c: 73: if(state)
  3594  000D74  0100               	movlb	0	; () banked
  3595  000D76  51B5               	movf	MTR_IN2@state& (0+255),w,b
  3596  000D78  B4D8               	btfsc	status,2,c
  3597  000D7A                     i12Lu5241:
  3598                           	opt stack 0
  3599  000D7A  D002               	goto	i12Ll5426
  3600  000D7C                     i12Lu5240:
  3601                           	opt stack 0
  3602  000D7C                     i12Ll5424:
  3603                           	opt stack 17
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;MOTOR.c: 74: {
  3607                           ;MOTOR.c: 75: LATC |= 0x04;
  3608  000D7C  848B               	bsf	3979,2,c	;volatile
  3609  000D7E  0012               	return	
  3610  000D80                     i12Ll5426:
  3611                           	opt stack 17
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;MOTOR.c: 77: else
  3615                           ;MOTOR.c: 78: {
  3616                           ;MOTOR.c: 79: LATC &= ~0x04;
  3617  000D80  948B               	bcf	3979,2,c	;volatile
  3618  000D82                     i12Ll505:
  3619                           	opt stack 0
  3620  000D82  0012               	return	
  3621  000D84                     __end_of_MTR_Rotate:
  3622                           	opt stack 0
  3623                           tblptru	equ	0xFF8
  3624                           tblptrh	equ	0xFF7
  3625                           tblptrl	equ	0xFF6
  3626                           tablat	equ	0xFF5
  3627                           prodh	equ	0xFF4
  3628                           prodl	equ	0xFF3
  3629                           intcon	equ	0xFF2
  3630                           postinc0	equ	0xFEE
  3631                           wreg	equ	0xFE8
  3632                           postdec1	equ	0xFE5
  3633                           fsr1l	equ	0xFE1
  3634                           status	equ	0xFD8
  3635                           
  3636 ;; *************** function _MTR_IN2 *****************
  3637 ;; Defined at:
  3638 ;;		line 71 in file "MOTOR.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  state           1    wreg     unsigned char 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;  state           1   53[BANK0 ] unsigned char 
  3643 ;; Return value:  Size  Location     Type
  3644 ;;		None               void
  3645 ;; Registers used:
  3646 ;;		wreg, status,2, status,0
  3647 ;; Tracked objects:
  3648 ;;		On entry : F/0
  3649 ;;		On exit  : F/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3652 ;;      Params:         0       0       0       0       0
  3653 ;;      Locals:         0       1       0       0       0
  3654 ;;      Temps:          0       0       0       0       0
  3655 ;;      Totals:         0       1       0       0       0
  3656 ;;Total ram usage:        1 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:   12
  3659 ;; This function calls:
  3660 ;;		Nothing
  3661 ;; This function is called by:
  3662 ;;		_MTR_Rotate
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	text10
  3667  000000                     __ptext10:
  3668                           	opt stack 0
  3669  000000                     _MTR_IN2:
  3670                           	opt stack 0
  3671  000000                     __end_of_MTR_IN2:
  3672                           	opt stack 0
  3673                           tblptru	equ	0xFF8
  3674                           tblptrh	equ	0xFF7
  3675                           tblptrl	equ	0xFF6
  3676                           tablat	equ	0xFF5
  3677                           prodh	equ	0xFF4
  3678                           prodl	equ	0xFF3
  3679                           intcon	equ	0xFF2
  3680                           postinc0	equ	0xFEE
  3681                           wreg	equ	0xFE8
  3682                           postdec1	equ	0xFE5
  3683                           fsr1l	equ	0xFE1
  3684                           status	equ	0xFD8
  3685                           
  3686 ;; *************** function _MTR_IN1 *****************
  3687 ;; Defined at:
  3688 ;;		line 54 in file "MOTOR.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;  state           1    wreg     unsigned char 
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;  state           1   53[BANK0 ] unsigned char 
  3693 ;; Return value:  Size  Location     Type
  3694 ;;		None               void
  3695 ;; Registers used:
  3696 ;;		wreg, status,2, status,0
  3697 ;; Tracked objects:
  3698 ;;		On entry : F/0
  3699 ;;		On exit  : F/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3702 ;;      Params:         0       0       0       0       0
  3703 ;;      Locals:         0       1       0       0       0
  3704 ;;      Temps:          0       0       0       0       0
  3705 ;;      Totals:         0       1       0       0       0
  3706 ;;Total ram usage:        1 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:   12
  3709 ;; This function calls:
  3710 ;;		Nothing
  3711 ;; This function is called by:
  3712 ;;		_MTR_Rotate
  3713 ;; This function uses a non-reentrant model
  3714 ;;
  3715                           
  3716                           	psect	text11
  3717  000000                     __ptext11:
  3718                           	opt stack 0
  3719  000000                     _MTR_IN1:
  3720                           	opt stack 0
  3721  000000                     __end_of_MTR_IN1:
  3722                           	opt stack 0
  3723                           tblptru	equ	0xFF8
  3724                           tblptrh	equ	0xFF7
  3725                           tblptrl	equ	0xFF6
  3726                           tablat	equ	0xFF5
  3727                           prodh	equ	0xFF4
  3728                           prodl	equ	0xFF3
  3729                           intcon	equ	0xFF2
  3730                           postinc0	equ	0xFEE
  3731                           wreg	equ	0xFE8
  3732                           postdec1	equ	0xFE5
  3733                           fsr1l	equ	0xFE1
  3734                           status	equ	0xFD8
  3735                           
  3736 ;; *************** function _MSC_BlinkLED *****************
  3737 ;; Defined at:
  3738 ;;		line 173 in file "MISC.c"
  3739 ;; Parameters:    Size  Location     Type
  3740 ;;  blink           2    4[BANK1 ] unsigned int 
  3741 ;;  speed           2    6[BANK1 ] unsigned int 
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;  i               2    8[BANK1 ] unsigned int 
  3744 ;; Return value:  Size  Location     Type
  3745 ;;		None               void
  3746 ;; Registers used:
  3747 ;;		wreg, status,2, status,0, cstack
  3748 ;; Tracked objects:
  3749 ;;		On entry : F/1
  3750 ;;		On exit  : F/1
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3753 ;;      Params:         0       0       4       0       0
  3754 ;;      Locals:         0       0       2       0       0
  3755 ;;      Temps:          0       2       0       0       0
  3756 ;;      Totals:         0       2       6       0       0
  3757 ;;Total ram usage:        8 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; Hardware stack levels required when called:   14
  3760 ;; This function calls:
  3761 ;;		_MSC_DelayMS
  3762 ;; This function is called by:
  3763 ;;		_main
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           	psect	text12
  3768  0013D0                     __ptext12:
  3769                           	opt stack 0
  3770  0013D0                     _MSC_BlinkLED:
  3771                           	opt stack 16
  3772                           
  3773                           ; BSR set to: 1
  3774                           ;MISC.c: 175: unsigned int i;
  3775                           ;MISC.c: 177: for(i=0;i<(blink<<1);i++)
  3776                           
  3777                           ; BSR set to: 0
  3778                           ;incstack = 0
  3779  0013D0  6B8F               	clrf	MSC_BlinkLED@i& (0+255),b
  3780  0013D2  6B90               	clrf	(MSC_BlinkLED@i+1)& (0+255),b
  3781  0013D4  D00E               	goto	l6864
  3782  0013D6                     l6858:
  3783                           
  3784                           ; BSR set to: 1
  3785                           ;MISC.c: 178: {
  3786                           ;MISC.c: 179: MSC_DelayMS(speed);
  3787  0013D6  C18D  F0B9         	movff	MSC_BlinkLED@speed,MSC_DelayMS@US
  3788  0013DA  C18E  F0BA         	movff	MSC_BlinkLED@speed+1,MSC_DelayMS@US+1
  3789  0013DE  0100               	movlb	0	; () banked
  3790  0013E0  6BBB               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  3791  0013E2  6BBC               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  3792  0013E4  ECC1  F009         	call	_MSC_DelayMS	;wreg free
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;MISC.c: 180: (LATC ^= 0x10);
  3796  0013E8  0E10               	movlw	16
  3797  0013EA  1A8B               	xorwf	3979,f,c	;volatile
  3798                           
  3799                           ; BSR set to: 0
  3800  0013EC  0101               	movlb	1	; () banked
  3801  0013EE  4B8F               	infsnz	MSC_BlinkLED@i& (0+255),f,b
  3802  0013F0  2B90               	incf	(MSC_BlinkLED@i+1)& (0+255),f,b
  3803  0013F2                     l6864:
  3804                           
  3805                           ; BSR set to: 1
  3806  0013F2  C18B  F0BE         	movff	MSC_BlinkLED@blink,??_MSC_BlinkLED
  3807  0013F6  C18C  F0BF         	movff	MSC_BlinkLED@blink+1,??_MSC_BlinkLED+1
  3808  0013FA  90D8               	bcf	status,0,c
  3809  0013FC  0100               	movlb	0	; () banked
  3810  0013FE  37BE               	rlcf	??_MSC_BlinkLED& (0+255),f,b
  3811  001400  37BF               	rlcf	(??_MSC_BlinkLED+1)& (0+255),f,b
  3812  001402  51BE               	movf	??_MSC_BlinkLED& (0+255),w,b
  3813  001404  0101               	movlb	1	; () banked
  3814  001406  5D8F               	subwf	MSC_BlinkLED@i& (0+255),w,b
  3815  001408  0100               	movlb	0	; () banked
  3816  00140A  51BF               	movf	(??_MSC_BlinkLED+1)& (0+255),w,b
  3817  00140C  0101               	movlb	1	; () banked
  3818  00140E  5990               	subwfb	(MSC_BlinkLED@i+1)& (0+255),w,b
  3819  001410  E3E2               	bnc	l6858
  3820                           
  3821                           ; BSR set to: 1
  3822  001412  0012               	return		;funcret
  3823  001414                     __end_of_MSC_BlinkLED:
  3824                           	opt stack 0
  3825                           tblptru	equ	0xFF8
  3826                           tblptrh	equ	0xFF7
  3827                           tblptrl	equ	0xFF6
  3828                           tablat	equ	0xFF5
  3829                           prodh	equ	0xFF4
  3830                           prodl	equ	0xFF3
  3831                           intcon	equ	0xFF2
  3832                           postinc0	equ	0xFEE
  3833                           wreg	equ	0xFE8
  3834                           postdec1	equ	0xFE5
  3835                           fsr1l	equ	0xFE1
  3836                           status	equ	0xFD8
  3837                           
  3838 ;; *************** function _MSC_DelayMS *****************
  3839 ;; Defined at:
  3840 ;;		line 47 in file "MISC.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;  US              4   57[BANK0 ] long 
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;  i               4    0[BANK1 ] long 
  3845 ;; Return value:  Size  Location     Type
  3846 ;;		None               void
  3847 ;; Registers used:
  3848 ;;		wreg, status,2, status,0, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : F/0
  3851 ;;		On exit  : F/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3854 ;;      Params:         0       4       0       0       0
  3855 ;;      Locals:         0       0       4       0       0
  3856 ;;      Temps:          0       1       0       0       0
  3857 ;;      Totals:         0       5       4       0       0
  3858 ;;Total ram usage:        9 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:   13
  3861 ;; This function calls:
  3862 ;;		_MSC_DelayNOP
  3863 ;; This function is called by:
  3864 ;;		_main
  3865 ;;		_MTR_Rotate
  3866 ;;		_MSC_BlinkLED
  3867 ;; This function uses a non-reentrant model
  3868 ;;
  3869                           
  3870                           	psect	text13
  3871  001382                     __ptext13:
  3872                           	opt stack 0
  3873  001382                     _MSC_DelayMS:
  3874                           	opt stack 16
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;MISC.c: 49: long i;
  3878                           ;MISC.c: 51: for(i=0; i<US; i++)
  3879                           
  3880                           ; BSR set to: 1
  3881                           ;incstack = 0
  3882  001382  0101               	movlb	1	; () banked
  3883  001384  6B87               	clrf	MSC_DelayMS@i& (0+255),b
  3884  001386  6B88               	clrf	(MSC_DelayMS@i+1)& (0+255),b
  3885  001388  6B89               	clrf	(MSC_DelayMS@i+2)& (0+255),b
  3886  00138A  6B8A               	clrf	(MSC_DelayMS@i+3)& (0+255),b
  3887  00138C  D00C               	goto	l6716
  3888  00138E                     l6712:
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;MISC.c: 52: {
  3892                           ;MISC.c: 53: MSC_DelayNOP(1000);
  3893  00138E  0E03               	movlw	3
  3894  001390  6FB6               	movwf	(MSC_DelayNOP@NOPs+1)& (0+255),b
  3895  001392  0EE8               	movlw	232
  3896  001394  6FB5               	movwf	MSC_DelayNOP@NOPs& (0+255),b
  3897  001396  EC89  F00C         	call	_MSC_DelayNOP	;wreg free
  3898                           
  3899                           ; BSR set to: 0
  3900  00139A  0101               	movlb	1	; () banked
  3901  00139C  2B87               	incf	MSC_DelayMS@i& (0+255),f,b
  3902  00139E  0E00               	movlw	0
  3903  0013A0  2388               	addwfc	(MSC_DelayMS@i+1)& (0+255),f,b
  3904  0013A2  2389               	addwfc	(MSC_DelayMS@i+2)& (0+255),f,b
  3905  0013A4  238A               	addwfc	(MSC_DelayMS@i+3)& (0+255),f,b
  3906  0013A6                     l6716:
  3907                           
  3908                           ; BSR set to: 1
  3909  0013A6  0100               	movlb	0	; () banked
  3910  0013A8  51B9               	movf	MSC_DelayMS@US& (0+255),w,b
  3911  0013AA  0101               	movlb	1	; () banked
  3912  0013AC  5D87               	subwf	MSC_DelayMS@i& (0+255),w,b
  3913  0013AE  0100               	movlb	0	; () banked
  3914  0013B0  51BA               	movf	(MSC_DelayMS@US+1)& (0+255),w,b
  3915  0013B2  0101               	movlb	1	; () banked
  3916  0013B4  5988               	subwfb	(MSC_DelayMS@i+1)& (0+255),w,b
  3917  0013B6  0100               	movlb	0	; () banked
  3918  0013B8  51BB               	movf	(MSC_DelayMS@US+2)& (0+255),w,b
  3919  0013BA  0101               	movlb	1	; () banked
  3920  0013BC  5989               	subwfb	(MSC_DelayMS@i+2)& (0+255),w,b
  3921  0013BE  518A               	movf	(MSC_DelayMS@i+3)& (0+255),w,b
  3922  0013C0  0A80               	xorlw	128
  3923  0013C2  0100               	movlb	0	; () banked
  3924  0013C4  6FBD               	movwf	??_MSC_DelayMS& (0+255),b
  3925  0013C6  51BC               	movf	(MSC_DelayMS@US+3)& (0+255),w,b
  3926  0013C8  0A80               	xorlw	128
  3927  0013CA  59BD               	subwfb	??_MSC_DelayMS& (0+255),w,b
  3928  0013CC  E3E0               	bnc	l6712
  3929                           
  3930                           ; BSR set to: 0
  3931  0013CE  0012               	return		;funcret
  3932  0013D0                     __end_of_MSC_DelayMS:
  3933                           	opt stack 0
  3934                           tblptru	equ	0xFF8
  3935                           tblptrh	equ	0xFF7
  3936                           tblptrl	equ	0xFF6
  3937                           tablat	equ	0xFF5
  3938                           prodh	equ	0xFF4
  3939                           prodl	equ	0xFF3
  3940                           intcon	equ	0xFF2
  3941                           postinc0	equ	0xFEE
  3942                           wreg	equ	0xFE8
  3943                           postdec1	equ	0xFE5
  3944                           fsr1l	equ	0xFE1
  3945                           status	equ	0xFD8
  3946                           
  3947 ;; *************** function _MSC_DelayNOP *****************
  3948 ;; Defined at:
  3949 ;;		line 62 in file "MISC.c"
  3950 ;; Parameters:    Size  Location     Type
  3951 ;;  NOPs            2   53[BANK0 ] unsigned int 
  3952 ;; Auto vars:     Size  Location     Type
  3953 ;;  i               2   55[BANK0 ] unsigned int 
  3954 ;; Return value:  Size  Location     Type
  3955 ;;		None               void
  3956 ;; Registers used:
  3957 ;;		wreg, status,2, status,0
  3958 ;; Tracked objects:
  3959 ;;		On entry : F/0
  3960 ;;		On exit  : F/0
  3961 ;;		Unchanged: 0/0
  3962 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3963 ;;      Params:         0       2       0       0       0
  3964 ;;      Locals:         0       2       0       0       0
  3965 ;;      Temps:          0       0       0       0       0
  3966 ;;      Totals:         0       4       0       0       0
  3967 ;;Total ram usage:        4 bytes
  3968 ;; Hardware stack levels used:    1
  3969 ;; Hardware stack levels required when called:   12
  3970 ;; This function calls:
  3971 ;;		Nothing
  3972 ;; This function is called by:
  3973 ;;		_MSC_DelayMS
  3974 ;; This function uses a non-reentrant model
  3975 ;;
  3976                           
  3977                           	psect	text14
  3978  001912                     __ptext14:
  3979                           	opt stack 0
  3980  001912                     _MSC_DelayNOP:
  3981                           	opt stack 16
  3982                           
  3983                           ; BSR set to: 0
  3984                           ;MISC.c: 64: unsigned int i;
  3985                           ;MISC.c: 65: for(i=0; i<NOPs; i++)
  3986                           
  3987                           ; BSR set to: 0
  3988                           ;incstack = 0
  3989  001912  6BB7               	clrf	MSC_DelayNOP@i& (0+255),b
  3990  001914  6BB8               	clrf	(MSC_DelayNOP@i+1)& (0+255),b
  3991  001916  D004               	goto	l6708
  3992  001918                     l661:
  3993                           
  3994                           ; BSR set to: 0
  3995                           ;MISC.c: 66: {
  3996                           ;MISC.c: 67: __nop();
  3997  001918  F000               	nop	
  3998  00191A  0100               	movlb	0	; () banked
  3999  00191C  4BB7               	infsnz	MSC_DelayNOP@i& (0+255),f,b
  4000  00191E  2BB8               	incf	(MSC_DelayNOP@i+1)& (0+255),f,b
  4001  001920                     l6708:
  4002                           
  4003                           ; BSR set to: 0
  4004  001920  51B5               	movf	MSC_DelayNOP@NOPs& (0+255),w,b
  4005  001922  5DB7               	subwf	MSC_DelayNOP@i& (0+255),w,b
  4006  001924  51B6               	movf	(MSC_DelayNOP@NOPs+1)& (0+255),w,b
  4007  001926  59B8               	subwfb	(MSC_DelayNOP@i+1)& (0+255),w,b
  4008  001928  E3F7               	bnc	l661
  4009                           
  4010                           ; BSR set to: 0
  4011  00192A  0012               	return		;funcret
  4012  00192C                     __end_of_MSC_DelayNOP:
  4013                           	opt stack 0
  4014                           tblptru	equ	0xFF8
  4015                           tblptrh	equ	0xFF7
  4016                           tblptrl	equ	0xFF6
  4017                           tablat	equ	0xFF5
  4018                           prodh	equ	0xFF4
  4019                           prodl	equ	0xFF3
  4020                           intcon	equ	0xFF2
  4021                           postinc0	equ	0xFEE
  4022                           wreg	equ	0xFE8
  4023                           postdec1	equ	0xFE5
  4024                           fsr1l	equ	0xFE1
  4025                           status	equ	0xFD8
  4026                           
  4027 ;; *************** function _Init_System *****************
  4028 ;; Defined at:
  4029 ;;		line 153 in file "USER.c"
  4030 ;; Parameters:    Size  Location     Type
  4031 ;;		None
  4032 ;; Auto vars:     Size  Location     Type
  4033 ;;		None
  4034 ;; Return value:  Size  Location     Type
  4035 ;;		None               void
  4036 ;; Registers used:
  4037 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4038 ;; Tracked objects:
  4039 ;;		On entry : 0/0
  4040 ;;		On exit  : F/0
  4041 ;;		Unchanged: 0/0
  4042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4043 ;;      Params:         0       0       0       0       0
  4044 ;;      Locals:         0       0       0       0       0
  4045 ;;      Temps:          0       0       0       0       0
  4046 ;;      Totals:         0       0       0       0       0
  4047 ;;Total ram usage:        0 bytes
  4048 ;; Hardware stack levels used:    1
  4049 ;; Hardware stack levels required when called:   17
  4050 ;; This function calls:
  4051 ;;		_BUT_ReadButton
  4052 ;;		_IR_ReadReceiver
  4053 ;;		_InitADC
  4054 ;;		_InitButton
  4055 ;;		_InitFlash
  4056 ;;		_InitIR
  4057 ;;		_InitLDO
  4058 ;;		_InitMOTOR
  4059 ;;		_InitRF
  4060 ;;		_InitTimers
  4061 ;; This function is called by:
  4062 ;;		_main
  4063 ;; This function uses a non-reentrant model
  4064 ;;
  4065                           
  4066                           	psect	text15
  4067  00152E                     __ptext15:
  4068                           	opt stack 0
  4069  00152E                     _Init_System:
  4070                           	opt stack 13
  4071                           
  4072                           ;USER.c: 155: InitTimers();
  4073                           
  4074                           ; BSR set to: 0
  4075                           ;incstack = 0
  4076  00152E  ECA2  F00D         	call	_InitTimers	;wreg free
  4077                           
  4078                           ; BSR set to: 0
  4079                           ;USER.c: 156: InitRF();
  4080  001532  ECB0  F00A         	call	_InitRF	;wreg free
  4081                           
  4082                           ; BSR set to: 0
  4083                           ;USER.c: 157: InitButton();
  4084  001536  ECA8  F00D         	call	_InitButton	;wreg free
  4085                           
  4086                           ;USER.c: 158: InitIR();
  4087  00153A  ECDA  F00C         	call	_InitIR	;wreg free
  4088                           
  4089                           ; BSR set to: 0
  4090                           ;USER.c: 159: InitLDO();
  4091  00153E  ECBB  F00C         	call	_InitLDO	;wreg free
  4092                           
  4093                           ; BSR set to: 0
  4094                           ;USER.c: 160: InitMOTOR();
  4095  001542  ECCB  F00D         	call	_InitMOTOR	;wreg free
  4096                           
  4097                           ;USER.c: 161: InitFlash();
  4098  001546  ECCD  F00D         	call	_InitFlash	;wreg free
  4099                           
  4100                           ;USER.c: 162: InitADC();
  4101  00154A  ECA2  F00B         	call	_InitADC	;wreg free
  4102                           
  4103                           ; BSR set to: 0
  4104                           ;USER.c: 164: BUT_ReadButton();
  4105  00154E  ECD8  F00B         	call	_BUT_ReadButton	;wreg free
  4106                           
  4107                           ; BSR set to: 0
  4108                           ;USER.c: 165: IR_ReadReceiver();
  4109  001552  ECE9  F00B         	call	_IR_ReadReceiver	;wreg free
  4110                           
  4111                           ; BSR set to: 0
  4112                           ;USER.c: 166: INTCONbits.RBIF = 0;
  4113  001556  90F2               	bcf	intcon,0,c	;volatile
  4114                           
  4115                           ; BSR set to: 0
  4116                           ;USER.c: 169: RCONbits.IPEN = 1;
  4117  001558  8ED0               	bsf	4048,7,c	;volatile
  4118                           
  4119                           ; BSR set to: 0
  4120                           ;USER.c: 170: INTCONbits.GIE = 1;
  4121  00155A  8EF2               	bsf	intcon,7,c	;volatile
  4122                           
  4123                           ; BSR set to: 0
  4124                           ;USER.c: 171: INTCONbits.PEIE = 1;
  4125  00155C  8CF2               	bsf	intcon,6,c	;volatile
  4126                           
  4127                           ; BSR set to: 0
  4128  00155E  0012               	return		;funcret
  4129  001560                     __end_of_Init_System:
  4130                           	opt stack 0
  4131                           tblptru	equ	0xFF8
  4132                           tblptrh	equ	0xFF7
  4133                           tblptrl	equ	0xFF6
  4134                           tablat	equ	0xFF5
  4135                           prodh	equ	0xFF4
  4136                           prodl	equ	0xFF3
  4137                           intcon	equ	0xFF2
  4138                           postinc0	equ	0xFEE
  4139                           wreg	equ	0xFE8
  4140                           postdec1	equ	0xFE5
  4141                           fsr1l	equ	0xFE1
  4142                           status	equ	0xFD8
  4143                           
  4144 ;; *************** function _InitTimers *****************
  4145 ;; Defined at:
  4146 ;;		line 59 in file "TIMERS.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;		None
  4149 ;; Auto vars:     Size  Location     Type
  4150 ;;		None
  4151 ;; Return value:  Size  Location     Type
  4152 ;;		None               void
  4153 ;; Registers used:
  4154 ;;		wreg, status,2, status,0, cstack
  4155 ;; Tracked objects:
  4156 ;;		On entry : 0/0
  4157 ;;		On exit  : F/0
  4158 ;;		Unchanged: 0/0
  4159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4160 ;;      Params:         0       0       0       0       0
  4161 ;;      Locals:         0       0       0       0       0
  4162 ;;      Temps:          0       0       0       0       0
  4163 ;;      Totals:         0       0       0       0       0
  4164 ;;Total ram usage:        0 bytes
  4165 ;; Hardware stack levels used:    1
  4166 ;; Hardware stack levels required when called:   16
  4167 ;; This function calls:
  4168 ;;		_InitTimer0
  4169 ;;		_InitTimer1
  4170 ;;		_InitTimer2
  4171 ;; This function is called by:
  4172 ;;		_Init_System
  4173 ;; This function uses a non-reentrant model
  4174 ;;
  4175                           
  4176                           	psect	text16
  4177  001B44                     __ptext16:
  4178                           	opt stack 0
  4179  001B44                     _InitTimers:
  4180                           	opt stack 13
  4181                           
  4182                           ;TIMERS.c: 61: InitTimer0();
  4183                           
  4184                           ; BSR set to: 0
  4185                           ;incstack = 0
  4186  001B44  EC1B  F00C         	call	_InitTimer0	;wreg free
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;TIMERS.c: 62: InitTimer1();
  4190  001B48  EC96  F00C         	call	_InitTimer1	;wreg free
  4191                           
  4192                           ; BSR set to: 0
  4193                           ;TIMERS.c: 63: InitTimer2();
  4194  001B4C  EFF0  F01F         	goto	_InitTimer2	;wreg free
  4195  001B50                     __end_of_InitTimers:
  4196                           	opt stack 0
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon	equ	0xFF2
  4204                           postinc0	equ	0xFEE
  4205                           wreg	equ	0xFE8
  4206                           postdec1	equ	0xFE5
  4207                           fsr1l	equ	0xFE1
  4208                           status	equ	0xFD8
  4209                           
  4210 ;; *************** function _InitTimer2 *****************
  4211 ;; Defined at:
  4212 ;;		line 103 in file "TIMERS.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;		None
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;		None
  4217 ;; Return value:  Size  Location     Type
  4218 ;;		None               void
  4219 ;; Registers used:
  4220 ;;		wreg, status,2, cstack
  4221 ;; Tracked objects:
  4222 ;;		On entry : F/0
  4223 ;;		On exit  : F/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4226 ;;      Params:         0       0       0       0       0
  4227 ;;      Locals:         0       0       0       0       0
  4228 ;;      Temps:          0       0       0       0       0
  4229 ;;      Totals:         0       0       0       0       0
  4230 ;;Total ram usage:        0 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; Hardware stack levels required when called:   13
  4233 ;; This function calls:
  4234 ;;		_TMR_Timer2
  4235 ;;		_TMR_Timer2Int
  4236 ;; This function is called by:
  4237 ;;		_InitTimers
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text17
  4242  003FE0                     __ptext17:
  4243                           	opt stack 0
  4244  003FE0                     _InitTimer2:
  4245                           	opt stack 15
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;TIMERS.c: 105: TMR_Timer2(0);
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;incstack = 0
  4252  003FE0  0E00               	movlw	0
  4253  003FE2  EC0F  F00D         	call	_TMR_Timer2
  4254                           
  4255                           ; BSR set to: 0
  4256                           ;TIMERS.c: 106: T2CONbits.TOUTPS = 0b1111;
  4257  003FE6  0E78               	movlw	120
  4258  003FE8  12CA               	iorwf	4042,f,c	;volatile
  4259                           
  4260                           ; BSR set to: 0
  4261                           ;TIMERS.c: 107: T2CONbits.T2CKPS = 0b11;
  4262  003FEA  0E03               	movlw	3
  4263  003FEC  12CA               	iorwf	4042,f,c	;volatile
  4264                           
  4265                           ; BSR set to: 0
  4266                           ;TIMERS.c: 108: IPR1bits.TMR2IP = 0;
  4267  003FEE  929F               	bcf	3999,1,c	;volatile
  4268                           
  4269                           ; BSR set to: 0
  4270                           ;TIMERS.c: 109: PR2 = 0xFF;
  4271  003FF0  68CB               	setf	4043,c	;volatile
  4272                           
  4273                           ;TIMERS.c: 110: TMR_Timer2Int(1);
  4274  003FF2  0E01               	movlw	1
  4275  003FF4  EF07  F00D         	goto	_TMR_Timer2Int
  4276  003FF8                     __end_of_InitTimer2:
  4277                           	opt stack 0
  4278                           tblptru	equ	0xFF8
  4279                           tblptrh	equ	0xFF7
  4280                           tblptrl	equ	0xFF6
  4281                           tablat	equ	0xFF5
  4282                           prodh	equ	0xFF4
  4283                           prodl	equ	0xFF3
  4284                           intcon	equ	0xFF2
  4285                           postinc0	equ	0xFEE
  4286                           wreg	equ	0xFE8
  4287                           postdec1	equ	0xFE5
  4288                           fsr1l	equ	0xFE1
  4289                           status	equ	0xFD8
  4290                           
  4291 ;; *************** function _TMR_Timer2Int *****************
  4292 ;; Defined at:
  4293 ;;		line 370 in file "TIMERS.c"
  4294 ;; Parameters:    Size  Location     Type
  4295 ;;  state           1    wreg     unsigned char 
  4296 ;; Auto vars:     Size  Location     Type
  4297 ;;  state           1   53[BANK0 ] unsigned char 
  4298 ;; Return value:  Size  Location     Type
  4299 ;;		None               void
  4300 ;; Registers used:
  4301 ;;		wreg, status,2
  4302 ;; Tracked objects:
  4303 ;;		On entry : F/0
  4304 ;;		On exit  : F/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4307 ;;      Params:         0       0       0       0       0
  4308 ;;      Locals:         0       1       0       0       0
  4309 ;;      Temps:          0       0       0       0       0
  4310 ;;      Totals:         0       1       0       0       0
  4311 ;;Total ram usage:        1 bytes
  4312 ;; Hardware stack levels used:    1
  4313 ;; Hardware stack levels required when called:   12
  4314 ;; This function calls:
  4315 ;;		Nothing
  4316 ;; This function is called by:
  4317 ;;		_InitTimer2
  4318 ;; This function uses a non-reentrant model
  4319 ;;
  4320                           
  4321                           	psect	text18
  4322  001A0E                     __ptext18:
  4323                           	opt stack 0
  4324  001A0E                     _TMR_Timer2Int:
  4325                           	opt stack 15
  4326                           
  4327                           ; BSR set to: 0
  4328                           ;incstack = 0
  4329                           ;TMR_Timer2Int@state stored from wreg
  4330  001A0E  6FB5               	movwf	TMR_Timer2Int@state& (0+255),b
  4331                           
  4332                           ;TIMERS.c: 372: if(state)
  4333  001A10  0100               	movlb	0	; () banked
  4334  001A12  51B5               	movf	TMR_Timer2Int@state& (0+255),w,b
  4335  001A14  E002               	bz	l878
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;TIMERS.c: 373: {
  4339                           ;TIMERS.c: 375: PIE1bits.TMR2IE = 1;
  4340  001A16  829D               	bsf	3997,1,c	;volatile
  4341                           
  4342                           ;TIMERS.c: 376: }
  4343  001A18  0012               	return	
  4344  001A1A                     l878:
  4345                           
  4346                           ; BSR set to: 0
  4347                           ;TIMERS.c: 377: else
  4348                           ;TIMERS.c: 378: {
  4349                           ;TIMERS.c: 380: PIE1bits.TMR2IE = 0;
  4350  001A1A  929D               	bcf	3997,1,c	;volatile
  4351                           
  4352                           ; BSR set to: 0
  4353  001A1C  0012               	return		;funcret
  4354  001A1E                     __end_of_TMR_Timer2Int:
  4355                           	opt stack 0
  4356                           tblptru	equ	0xFF8
  4357                           tblptrh	equ	0xFF7
  4358                           tblptrl	equ	0xFF6
  4359                           tablat	equ	0xFF5
  4360                           prodh	equ	0xFF4
  4361                           prodl	equ	0xFF3
  4362                           intcon	equ	0xFF2
  4363                           postinc0	equ	0xFEE
  4364                           wreg	equ	0xFE8
  4365                           postdec1	equ	0xFE5
  4366                           fsr1l	equ	0xFE1
  4367                           status	equ	0xFD8
  4368                           
  4369 ;; *************** function _TMR_Timer2 *****************
  4370 ;; Defined at:
  4371 ;;		line 249 in file "TIMERS.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;  state           1    wreg     unsigned char 
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;  state           1   53[BANK0 ] unsigned char 
  4376 ;; Return value:  Size  Location     Type
  4377 ;;		None               void
  4378 ;; Registers used:
  4379 ;;		wreg, status,2
  4380 ;; Tracked objects:
  4381 ;;		On entry : F/0
  4382 ;;		On exit  : F/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4385 ;;      Params:         0       0       0       0       0
  4386 ;;      Locals:         0       1       0       0       0
  4387 ;;      Temps:          0       0       0       0       0
  4388 ;;      Totals:         0       1       0       0       0
  4389 ;;Total ram usage:        1 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:   12
  4392 ;; This function calls:
  4393 ;;		Nothing
  4394 ;; This function is called by:
  4395 ;;		_InitTimer2
  4396 ;; This function uses a non-reentrant model
  4397 ;;
  4398                           
  4399                           	psect	text19
  4400  001A1E                     __ptext19:
  4401                           	opt stack 0
  4402  001A1E                     _TMR_Timer2:
  4403                           	opt stack 15
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;incstack = 0
  4407                           ;TMR_Timer2@state stored from wreg
  4408  001A1E  6FB5               	movwf	TMR_Timer2@state& (0+255),b
  4409                           
  4410                           ;TIMERS.c: 251: if(state)
  4411  001A20  0100               	movlb	0	; () banked
  4412  001A22  51B5               	movf	TMR_Timer2@state& (0+255),w,b
  4413  001A24  E002               	bz	l848
  4414                           
  4415                           ; BSR set to: 0
  4416                           ;TIMERS.c: 252: {
  4417                           ;TIMERS.c: 254: T2CONbits.TMR2ON = 1;
  4418  001A26  84CA               	bsf	4042,2,c	;volatile
  4419                           
  4420                           ;TIMERS.c: 255: }
  4421  001A28  0012               	return	
  4422  001A2A                     l848:
  4423                           
  4424                           ; BSR set to: 0
  4425                           ;TIMERS.c: 256: else
  4426                           ;TIMERS.c: 257: {
  4427                           ;TIMERS.c: 259: T2CONbits.TMR2ON = 0;
  4428  001A2A  94CA               	bcf	4042,2,c	;volatile
  4429                           
  4430                           ; BSR set to: 0
  4431  001A2C  0012               	return		;funcret
  4432  001A2E                     __end_of_TMR_Timer2:
  4433                           	opt stack 0
  4434                           tblptru	equ	0xFF8
  4435                           tblptrh	equ	0xFF7
  4436                           tblptrl	equ	0xFF6
  4437                           tablat	equ	0xFF5
  4438                           prodh	equ	0xFF4
  4439                           prodl	equ	0xFF3
  4440                           intcon	equ	0xFF2
  4441                           postinc0	equ	0xFEE
  4442                           wreg	equ	0xFE8
  4443                           postdec1	equ	0xFE5
  4444                           fsr1l	equ	0xFE1
  4445                           status	equ	0xFD8
  4446                           
  4447 ;; *************** function _InitTimer1 *****************
  4448 ;; Defined at:
  4449 ;;		line 88 in file "TIMERS.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;		None
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;		None
  4454 ;; Return value:  Size  Location     Type
  4455 ;;		None               void
  4456 ;; Registers used:
  4457 ;;		wreg, status,2, status,0, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : F/0
  4460 ;;		On exit  : F/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4463 ;;      Params:         0       0       0       0       0
  4464 ;;      Locals:         0       0       0       0       0
  4465 ;;      Temps:          0       0       0       0       0
  4466 ;;      Totals:         0       0       0       0       0
  4467 ;;Total ram usage:        0 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:   15
  4470 ;; This function calls:
  4471 ;;		_TMR_ResetTimer1
  4472 ;;		_TMR_Timer1
  4473 ;;		_TMR_Timer1Function
  4474 ;;		_TMR_Timer1Int
  4475 ;; This function is called by:
  4476 ;;		_InitTimers
  4477 ;; This function uses a non-reentrant model
  4478 ;;
  4479                           
  4480                           	psect	text20
  4481  00192C                     __ptext20:
  4482                           	opt stack 0
  4483  00192C                     _InitTimer1:
  4484                           	opt stack 13
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;TIMERS.c: 90: TMR_Timer1(0);
  4488                           
  4489                           ; BSR set to: 0
  4490                           ;incstack = 0
  4491  00192C  0E00               	movlw	0
  4492  00192E  EC1F  F00D         	call	_TMR_Timer1
  4493                           
  4494                           ;TIMERS.c: 91: TMR_ResetTimer1();
  4495  001932  EC0B  F00C         	call	_TMR_ResetTimer1	;wreg free
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;TIMERS.c: 92: T1CONbits.RD16 = 1;
  4499  001936  8ECD               	bsf	4045,7,c	;volatile
  4500                           
  4501                           ; BSR set to: 0
  4502                           ;TIMERS.c: 93: TMR_Timer1Function(16);
  4503  001938  0E10               	movlw	16
  4504  00193A  EC29  F00B         	call	_TMR_Timer1Function
  4505                           
  4506                           ; BSR set to: 0
  4507                           ;TIMERS.c: 94: IPR1bits.TMR1IP = 0;
  4508  00193E  909F               	bcf	3999,0,c	;volatile
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;TIMERS.c: 95: TMR_Timer1Int(1);
  4512  001940  0E01               	movlw	1
  4513  001942  EF17  F00D         	goto	_TMR_Timer1Int
  4514  001946                     __end_of_InitTimer1:
  4515                           	opt stack 0
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           prodh	equ	0xFF4
  4521                           prodl	equ	0xFF3
  4522                           intcon	equ	0xFF2
  4523                           postinc0	equ	0xFEE
  4524                           wreg	equ	0xFE8
  4525                           postdec1	equ	0xFE5
  4526                           fsr1l	equ	0xFE1
  4527                           status	equ	0xFD8
  4528                           
  4529 ;; *************** function _TMR_Timer1Int *****************
  4530 ;; Defined at:
  4531 ;;		line 351 in file "TIMERS.c"
  4532 ;; Parameters:    Size  Location     Type
  4533 ;;  state           1    wreg     unsigned char 
  4534 ;; Auto vars:     Size  Location     Type
  4535 ;;  state           1   53[BANK0 ] unsigned char 
  4536 ;; Return value:  Size  Location     Type
  4537 ;;		None               void
  4538 ;; Registers used:
  4539 ;;		wreg, status,2
  4540 ;; Tracked objects:
  4541 ;;		On entry : F/0
  4542 ;;		On exit  : F/0
  4543 ;;		Unchanged: 0/0
  4544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4545 ;;      Params:         0       0       0       0       0
  4546 ;;      Locals:         0       1       0       0       0
  4547 ;;      Temps:          0       0       0       0       0
  4548 ;;      Totals:         0       1       0       0       0
  4549 ;;Total ram usage:        1 bytes
  4550 ;; Hardware stack levels used:    1
  4551 ;; Hardware stack levels required when called:   12
  4552 ;; This function calls:
  4553 ;;		Nothing
  4554 ;; This function is called by:
  4555 ;;		_InitTimer1
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text21
  4560  001A2E                     __ptext21:
  4561                           	opt stack 0
  4562  001A2E                     _TMR_Timer1Int:
  4563                           	opt stack 15
  4564                           
  4565                           ; BSR set to: 0
  4566                           ;incstack = 0
  4567                           ;TMR_Timer1Int@state stored from wreg
  4568  001A2E  6FB5               	movwf	TMR_Timer1Int@state& (0+255),b
  4569                           
  4570                           ;TIMERS.c: 353: if(state)
  4571  001A30  0100               	movlb	0	; () banked
  4572  001A32  51B5               	movf	TMR_Timer1Int@state& (0+255),w,b
  4573  001A34  E002               	bz	l873
  4574                           
  4575                           ; BSR set to: 0
  4576                           ;TIMERS.c: 354: {
  4577                           ;TIMERS.c: 356: PIE1bits.TMR1IE = 1;
  4578  001A36  809D               	bsf	3997,0,c	;volatile
  4579                           
  4580                           ;TIMERS.c: 357: }
  4581  001A38  0012               	return	
  4582  001A3A                     l873:
  4583                           
  4584                           ; BSR set to: 0
  4585                           ;TIMERS.c: 358: else
  4586                           ;TIMERS.c: 359: {
  4587                           ;TIMERS.c: 361: PIE1bits.TMR1IE = 0;
  4588  001A3A  909D               	bcf	3997,0,c	;volatile
  4589                           
  4590                           ; BSR set to: 0
  4591  001A3C  0012               	return		;funcret
  4592  001A3E                     __end_of_TMR_Timer1Int:
  4593                           	opt stack 0
  4594                           tblptru	equ	0xFF8
  4595                           tblptrh	equ	0xFF7
  4596                           tblptrl	equ	0xFF6
  4597                           tablat	equ	0xFF5
  4598                           prodh	equ	0xFF4
  4599                           prodl	equ	0xFF3
  4600                           intcon	equ	0xFF2
  4601                           postinc0	equ	0xFEE
  4602                           wreg	equ	0xFE8
  4603                           postdec1	equ	0xFE5
  4604                           fsr1l	equ	0xFE1
  4605                           status	equ	0xFD8
  4606                           
  4607 ;; *************** function _TMR_Timer1Function *****************
  4608 ;; Defined at:
  4609 ;;		line 157 in file "TIMERS.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;  mode            1    wreg     unsigned char 
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  mode            1   55[BANK0 ] unsigned char 
  4614 ;; Return value:  Size  Location     Type
  4615 ;;		None               void
  4616 ;; Registers used:
  4617 ;;		wreg, status,2, status,0, cstack
  4618 ;; Tracked objects:
  4619 ;;		On entry : F/0
  4620 ;;		On exit  : F/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4623 ;;      Params:         0       0       0       0       0
  4624 ;;      Locals:         0       1       0       0       0
  4625 ;;      Temps:          0       0       0       0       0
  4626 ;;      Totals:         0       1       0       0       0
  4627 ;;Total ram usage:        1 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; Hardware stack levels required when called:   14
  4630 ;; This function calls:
  4631 ;;		_TMR_ResetTimer1
  4632 ;;		_TMR_Timer1
  4633 ;;		_TMR_Timer1Osc
  4634 ;; This function is called by:
  4635 ;;		_InitTimer1
  4636 ;; This function uses a non-reentrant model
  4637 ;;
  4638                           
  4639                           	psect	text22
  4640  001652                     __ptext22:
  4641                           	opt stack 0
  4642  001652                     _TMR_Timer1Function:
  4643                           	opt stack 13
  4644                           
  4645                           ; BSR set to: 0
  4646                           ;incstack = 0
  4647                           ;TMR_Timer1Function@mode stored from wreg
  4648  001652  6FB7               	movwf	TMR_Timer1Function@mode& (0+255),b
  4649                           
  4650                           ;TIMERS.c: 159: TMR_Timer1(0);
  4651  001654  0E00               	movlw	0
  4652  001656  EC1F  F00D         	call	_TMR_Timer1
  4653                           
  4654                           ; BSR set to: 0
  4655                           ;TIMERS.c: 160: if(mode == 15)
  4656  00165A  0E0F               	movlw	15
  4657  00165C  19B7               	xorwf	TMR_Timer1Function@mode& (0+255),w,b
  4658  00165E  E107               	bnz	l4308
  4659                           
  4660                           ; BSR set to: 0
  4661                           ;TIMERS.c: 161: {
  4662                           ;TIMERS.c: 162: T1CONbits.T1CKPS = 0b00;
  4663  001660  0ECF               	movlw	-49
  4664  001662  16CD               	andwf	4045,f,c	;volatile
  4665                           
  4666                           ; BSR set to: 0
  4667                           ;TIMERS.c: 163: TMR_Timer1Osc(1);
  4668  001664  0E01               	movlw	1
  4669  001666  ECA3  F00C         	call	_TMR_Timer1Osc
  4670                           
  4671                           ;TIMERS.c: 164: }
  4672  00166A  EF0B  F00C         	goto	_TMR_ResetTimer1
  4673  00166E                     l4308:
  4674                           
  4675                           ; BSR set to: 0
  4676                           ;TIMERS.c: 165: else
  4677                           ;TIMERS.c: 166: {
  4678                           ;TIMERS.c: 167: T1CONbits.T1CKPS = 0b11;
  4679  00166E  0E30               	movlw	48
  4680  001670  12CD               	iorwf	4045,f,c	;volatile
  4681                           
  4682                           ; BSR set to: 0
  4683                           ;TIMERS.c: 168: TMR_Timer1Osc(0);
  4684  001672  0E00               	movlw	0
  4685  001674  ECA3  F00C         	call	_TMR_Timer1Osc
  4686                           
  4687                           ; BSR set to: 0
  4688                           ;TIMERS.c: 169: }
  4689                           ;TIMERS.c: 170: TMR_ResetTimer1();
  4690  001678  EF0B  F00C         	goto	_TMR_ResetTimer1	;wreg free
  4691  00167C                     __end_of_TMR_Timer1Function:
  4692                           	opt stack 0
  4693                           tblptru	equ	0xFF8
  4694                           tblptrh	equ	0xFF7
  4695                           tblptrl	equ	0xFF6
  4696                           tablat	equ	0xFF5
  4697                           prodh	equ	0xFF4
  4698                           prodl	equ	0xFF3
  4699                           intcon	equ	0xFF2
  4700                           postinc0	equ	0xFEE
  4701                           wreg	equ	0xFE8
  4702                           postdec1	equ	0xFE5
  4703                           fsr1l	equ	0xFE1
  4704                           status	equ	0xFD8
  4705                           
  4706 ;; *************** function _TMR_Timer1Osc *****************
  4707 ;; Defined at:
  4708 ;;		line 389 in file "TIMERS.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;  state           1    wreg     unsigned char 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  state           1   53[BANK0 ] unsigned char 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;		None               void
  4715 ;; Registers used:
  4716 ;;		wreg, status,2
  4717 ;; Tracked objects:
  4718 ;;		On entry : F/0
  4719 ;;		On exit  : F/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4722 ;;      Params:         0       0       0       0       0
  4723 ;;      Locals:         0       1       0       0       0
  4724 ;;      Temps:          0       0       0       0       0
  4725 ;;      Totals:         0       1       0       0       0
  4726 ;;Total ram usage:        1 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:   12
  4729 ;; This function calls:
  4730 ;;		Nothing
  4731 ;; This function is called by:
  4732 ;;		_TMR_Timer1Function
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text23
  4737  001946                     __ptext23:
  4738                           	opt stack 0
  4739  001946                     _TMR_Timer1Osc:
  4740                           	opt stack 14
  4741                           
  4742                           ; BSR set to: 0
  4743                           ;incstack = 0
  4744                           ;TMR_Timer1Osc@state stored from wreg
  4745  001946  6FB5               	movwf	TMR_Timer1Osc@state& (0+255),b
  4746                           
  4747                           ;TIMERS.c: 391: if(state)
  4748  001948  0100               	movlb	0	; () banked
  4749  00194A  51B5               	movf	TMR_Timer1Osc@state& (0+255),w,b
  4750  00194C  E004               	bz	l883
  4751                           
  4752                           ; BSR set to: 0
  4753                           ;TIMERS.c: 392: {
  4754                           ;TIMERS.c: 393: T1CONbits.T1RUN = 1;
  4755  00194E  8CCD               	bsf	4045,6,c	;volatile
  4756                           
  4757                           ;TIMERS.c: 394: T1CONbits.T1OSCEN = 1;
  4758  001950  86CD               	bsf	4045,3,c	;volatile
  4759                           
  4760                           ;TIMERS.c: 395: T1CONbits.TMR1CS = 1;
  4761  001952  82CD               	bsf	4045,1,c	;volatile
  4762                           
  4763                           ;TIMERS.c: 396: }
  4764  001954  0012               	return	
  4765  001956                     l883:
  4766                           
  4767                           ; BSR set to: 0
  4768                           ;TIMERS.c: 397: else
  4769                           ;TIMERS.c: 398: {
  4770                           ;TIMERS.c: 399: T1CONbits.T1RUN = 0;
  4771  001956  9CCD               	bcf	4045,6,c	;volatile
  4772                           
  4773                           ;TIMERS.c: 400: T1CONbits.T1OSCEN = 0;
  4774  001958  96CD               	bcf	4045,3,c	;volatile
  4775                           
  4776                           ;TIMERS.c: 401: T1CONbits.TMR1CS = 0;
  4777  00195A  92CD               	bcf	4045,1,c	;volatile
  4778                           
  4779                           ; BSR set to: 0
  4780  00195C  0012               	return		;funcret
  4781  00195E                     __end_of_TMR_Timer1Osc:
  4782                           	opt stack 0
  4783                           tblptru	equ	0xFF8
  4784                           tblptrh	equ	0xFF7
  4785                           tblptrl	equ	0xFF6
  4786                           tablat	equ	0xFF5
  4787                           prodh	equ	0xFF4
  4788                           prodl	equ	0xFF3
  4789                           intcon	equ	0xFF2
  4790                           postinc0	equ	0xFEE
  4791                           wreg	equ	0xFE8
  4792                           postdec1	equ	0xFE5
  4793                           fsr1l	equ	0xFE1
  4794                           status	equ	0xFD8
  4795                           
  4796 ;; *************** function _TMR_ResetTimer1 *****************
  4797 ;; Defined at:
  4798 ;;		line 286 in file "TIMERS.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;		None
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;  TimerOn         1   54[BANK0 ] unsigned char 
  4803 ;; Return value:  Size  Location     Type
  4804 ;;		None               void
  4805 ;; Registers used:
  4806 ;;		wreg, status,2, cstack
  4807 ;; Tracked objects:
  4808 ;;		On entry : F/0
  4809 ;;		On exit  : F/0
  4810 ;;		Unchanged: 0/0
  4811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4812 ;;      Params:         0       0       0       0       0
  4813 ;;      Locals:         0       1       0       0       0
  4814 ;;      Temps:          0       0       0       0       0
  4815 ;;      Totals:         0       1       0       0       0
  4816 ;;Total ram usage:        1 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:   13
  4819 ;; This function calls:
  4820 ;;		_TMR_Timer1
  4821 ;; This function is called by:
  4822 ;;		_InitTimer1
  4823 ;;		_TMR_Timer1Function
  4824 ;; This function uses a non-reentrant model
  4825 ;;
  4826                           
  4827                           	psect	text24
  4828  001816                     __ptext24:
  4829                           	opt stack 0
  4830  001816                     _TMR_ResetTimer1:
  4831                           	opt stack 13
  4832                           
  4833                           ; BSR set to: 0
  4834                           ;TIMERS.c: 288: unsigned char TimerOn = T1CONbits.TMR1ON;
  4835                           
  4836                           ; BSR set to: 0
  4837                           ;incstack = 0
  4838  001816  0E00               	movlw	0
  4839  001818  B0CD               	btfsc	4045,0,c	;volatile
  4840  00181A  0E01               	movlw	1
  4841  00181C  6FB6               	movwf	TMR_ResetTimer1@TimerOn& (0+255),b
  4842                           
  4843                           ; BSR set to: 0
  4844                           ;TIMERS.c: 290: TMR_Timer1(0);
  4845  00181E  0E00               	movlw	0
  4846  001820  EC1F  F00D         	call	_TMR_Timer1
  4847                           
  4848                           ; BSR set to: 0
  4849                           ;TIMERS.c: 291: TMR1H = 0;
  4850  001824  6ACF               	clrf	4047,c	;volatile
  4851                           
  4852                           ; BSR set to: 0
  4853                           ;TIMERS.c: 292: TMR1L = 2;
  4854  001826  0E02               	movlw	2
  4855  001828  6ECE               	movwf	4046,c	;volatile
  4856                           
  4857                           ; BSR set to: 0
  4858                           ;TIMERS.c: 293: if(TimerOn)
  4859  00182A  51B6               	movf	TMR_ResetTimer1@TimerOn& (0+255),w,b
  4860  00182C  B4D8               	btfsc	status,2,c
  4861  00182E  0012               	return	
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;TIMERS.c: 294: {
  4865                           ;TIMERS.c: 295: TMR_Timer1(1);
  4866  001830  0E01               	movlw	1
  4867  001832  EF1F  F00D         	goto	_TMR_Timer1
  4868  001836                     __end_of_TMR_ResetTimer1:
  4869                           	opt stack 0
  4870                           tblptru	equ	0xFF8
  4871                           tblptrh	equ	0xFF7
  4872                           tblptrl	equ	0xFF6
  4873                           tablat	equ	0xFF5
  4874                           prodh	equ	0xFF4
  4875                           prodl	equ	0xFF3
  4876                           intcon	equ	0xFF2
  4877                           postinc0	equ	0xFEE
  4878                           wreg	equ	0xFE8
  4879                           postdec1	equ	0xFE5
  4880                           fsr1l	equ	0xFE1
  4881                           status	equ	0xFD8
  4882                           
  4883 ;; *************** function _TMR_Timer1 *****************
  4884 ;; Defined at:
  4885 ;;		line 230 in file "TIMERS.c"
  4886 ;; Parameters:    Size  Location     Type
  4887 ;;  state           1    wreg     unsigned char 
  4888 ;; Auto vars:     Size  Location     Type
  4889 ;;  state           1   53[BANK0 ] unsigned char 
  4890 ;; Return value:  Size  Location     Type
  4891 ;;		None               void
  4892 ;; Registers used:
  4893 ;;		wreg, status,2
  4894 ;; Tracked objects:
  4895 ;;		On entry : 0/0
  4896 ;;		On exit  : F/0
  4897 ;;		Unchanged: 0/0
  4898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4899 ;;      Params:         0       0       0       0       0
  4900 ;;      Locals:         0       1       0       0       0
  4901 ;;      Temps:          0       0       0       0       0
  4902 ;;      Totals:         0       1       0       0       0
  4903 ;;Total ram usage:        1 bytes
  4904 ;; Hardware stack levels used:    1
  4905 ;; Hardware stack levels required when called:   12
  4906 ;; This function calls:
  4907 ;;		Nothing
  4908 ;; This function is called by:
  4909 ;;		_InitTimer1
  4910 ;;		_TMR_Timer1Function
  4911 ;;		_TMR_ResetTimer1
  4912 ;; This function uses a non-reentrant model
  4913 ;;
  4914                           
  4915                           	psect	text25
  4916  001A3E                     __ptext25:
  4917                           	opt stack 0
  4918  001A3E                     _TMR_Timer1:
  4919                           	opt stack 14
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;incstack = 0
  4923                           ;TMR_Timer1@state stored from wreg
  4924  001A3E  0100               	movlb	0	; () banked
  4925  001A40  6FB5               	movwf	TMR_Timer1@state& (0+255),b
  4926                           
  4927                           ;TIMERS.c: 232: if(state)
  4928  001A42  51B5               	movf	TMR_Timer1@state& (0+255),w,b
  4929  001A44  E002               	bz	l843
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;TIMERS.c: 233: {
  4933                           ;TIMERS.c: 235: T1CONbits.TMR1ON = 1;
  4934  001A46  80CD               	bsf	4045,0,c	;volatile
  4935                           
  4936                           ;TIMERS.c: 236: }
  4937  001A48  0012               	return	
  4938  001A4A                     l843:
  4939                           
  4940                           ; BSR set to: 0
  4941                           ;TIMERS.c: 237: else
  4942                           ;TIMERS.c: 238: {
  4943                           ;TIMERS.c: 240: T1CONbits.TMR1ON = 0;
  4944  001A4A  90CD               	bcf	4045,0,c	;volatile
  4945                           
  4946                           ; BSR set to: 0
  4947  001A4C  0012               	return		;funcret
  4948  001A4E                     __end_of_TMR_Timer1:
  4949                           	opt stack 0
  4950                           tblptru	equ	0xFF8
  4951                           tblptrh	equ	0xFF7
  4952                           tblptrl	equ	0xFF6
  4953                           tablat	equ	0xFF5
  4954                           prodh	equ	0xFF4
  4955                           prodl	equ	0xFF3
  4956                           intcon	equ	0xFF2
  4957                           postinc0	equ	0xFEE
  4958                           wreg	equ	0xFE8
  4959                           postdec1	equ	0xFE5
  4960                           fsr1l	equ	0xFE1
  4961                           status	equ	0xFD8
  4962                           
  4963 ;; *************** function _InitTimer0 *****************
  4964 ;; Defined at:
  4965 ;;		line 71 in file "TIMERS.c"
  4966 ;; Parameters:    Size  Location     Type
  4967 ;;		None
  4968 ;; Auto vars:     Size  Location     Type
  4969 ;;		None
  4970 ;; Return value:  Size  Location     Type
  4971 ;;		None               void
  4972 ;; Registers used:
  4973 ;;		wreg, status,2, cstack
  4974 ;; Tracked objects:
  4975 ;;		On entry : 0/0
  4976 ;;		On exit  : F/0
  4977 ;;		Unchanged: 0/0
  4978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4979 ;;      Params:         0       0       0       0       0
  4980 ;;      Locals:         0       0       0       0       0
  4981 ;;      Temps:          0       0       0       0       0
  4982 ;;      Totals:         0       0       0       0       0
  4983 ;;Total ram usage:        0 bytes
  4984 ;; Hardware stack levels used:    1
  4985 ;; Hardware stack levels required when called:   14
  4986 ;; This function calls:
  4987 ;;		_TMR_ResetTimer0
  4988 ;;		_TMR_Timer0
  4989 ;;		_TMR_Timer0Int
  4990 ;; This function is called by:
  4991 ;;		_InitTimers
  4992 ;; This function uses a non-reentrant model
  4993 ;;
  4994                           
  4995                           	psect	text26
  4996  001836                     __ptext26:
  4997                           	opt stack 0
  4998  001836                     _InitTimer0:
  4999                           	opt stack 14
  5000                           
  5001                           ;TIMERS.c: 73: TMR_Timer0(0);
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;incstack = 0
  5005  001836  0E00               	movlw	0
  5006  001838  EC2F  F00D         	call	_TMR_Timer0
  5007                           
  5008                           ;TIMERS.c: 74: TMR_ResetTimer0();
  5009  00183C  EC2B  F00C         	call	_TMR_ResetTimer0	;wreg free
  5010                           
  5011                           ; BSR set to: 0
  5012                           ;TIMERS.c: 75: T0CONbits.T08BIT = 0;
  5013  001840  9CD5               	bcf	4053,6,c	;volatile
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;TIMERS.c: 76: T0CONbits.T0CS = 0;
  5017  001842  9AD5               	bcf	4053,5,c	;volatile
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;TIMERS.c: 77: T0CONbits.PSA = 0;
  5021  001844  96D5               	bcf	4053,3,c	;volatile
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;TIMERS.c: 78: T0CONbits.T0PS = 0b101;
  5025  001846  50D5               	movf	4053,w,c	;volatile
  5026  001848  0BF8               	andlw	-8
  5027  00184A  0905               	iorlw	5
  5028  00184C  6ED5               	movwf	4053,c	;volatile
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;TIMERS.c: 79: INTCON2bits.TMR0IP = 1;
  5032  00184E  84F1               	bsf	intcon2,2,c	;volatile
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;TIMERS.c: 80: TMR_Timer0Int(1);
  5036  001850  0E01               	movlw	1
  5037  001852  EF27  F00D         	goto	_TMR_Timer0Int
  5038  001856                     __end_of_InitTimer0:
  5039                           	opt stack 0
  5040                           tblptru	equ	0xFF8
  5041                           tblptrh	equ	0xFF7
  5042                           tblptrl	equ	0xFF6
  5043                           tablat	equ	0xFF5
  5044                           prodh	equ	0xFF4
  5045                           prodl	equ	0xFF3
  5046                           intcon	equ	0xFF2
  5047                           intcon2	equ	0xFF1
  5048                           postinc0	equ	0xFEE
  5049                           wreg	equ	0xFE8
  5050                           postdec1	equ	0xFE5
  5051                           fsr1l	equ	0xFE1
  5052                           status	equ	0xFD8
  5053                           
  5054 ;; *************** function _TMR_Timer0Int *****************
  5055 ;; Defined at:
  5056 ;;		line 332 in file "TIMERS.c"
  5057 ;; Parameters:    Size  Location     Type
  5058 ;;  state           1    wreg     unsigned char 
  5059 ;; Auto vars:     Size  Location     Type
  5060 ;;  state           1   53[BANK0 ] unsigned char 
  5061 ;; Return value:  Size  Location     Type
  5062 ;;		None               void
  5063 ;; Registers used:
  5064 ;;		wreg, status,2
  5065 ;; Tracked objects:
  5066 ;;		On entry : F/0
  5067 ;;		On exit  : F/0
  5068 ;;		Unchanged: 0/0
  5069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5070 ;;      Params:         0       0       0       0       0
  5071 ;;      Locals:         0       1       0       0       0
  5072 ;;      Temps:          0       0       0       0       0
  5073 ;;      Totals:         0       1       0       0       0
  5074 ;;Total ram usage:        1 bytes
  5075 ;; Hardware stack levels used:    1
  5076 ;; Hardware stack levels required when called:   12
  5077 ;; This function calls:
  5078 ;;		Nothing
  5079 ;; This function is called by:
  5080 ;;		_InitTimer0
  5081 ;; This function uses a non-reentrant model
  5082 ;;
  5083                           
  5084                           	psect	text27
  5085  001A4E                     __ptext27:
  5086                           	opt stack 0
  5087  001A4E                     _TMR_Timer0Int:
  5088                           	opt stack 15
  5089                           
  5090                           ; BSR set to: 0
  5091                           ;incstack = 0
  5092                           ;TMR_Timer0Int@state stored from wreg
  5093  001A4E  6FB5               	movwf	TMR_Timer0Int@state& (0+255),b
  5094                           
  5095                           ;TIMERS.c: 334: if(state)
  5096  001A50  0100               	movlb	0	; () banked
  5097  001A52  51B5               	movf	TMR_Timer0Int@state& (0+255),w,b
  5098  001A54  E002               	bz	l868
  5099                           
  5100                           ; BSR set to: 0
  5101                           ;TIMERS.c: 335: {
  5102                           ;TIMERS.c: 337: INTCONbits.TMR0IE = 1;
  5103  001A56  8AF2               	bsf	intcon,5,c	;volatile
  5104                           
  5105                           ;TIMERS.c: 338: }
  5106  001A58  0012               	return	
  5107  001A5A                     l868:
  5108                           
  5109                           ; BSR set to: 0
  5110                           ;TIMERS.c: 339: else
  5111                           ;TIMERS.c: 340: {
  5112                           ;TIMERS.c: 342: INTCONbits.TMR0IE = 0;
  5113  001A5A  9AF2               	bcf	intcon,5,c	;volatile
  5114                           
  5115                           ; BSR set to: 0
  5116  001A5C  0012               	return		;funcret
  5117  001A5E                     __end_of_TMR_Timer0Int:
  5118                           	opt stack 0
  5119                           tblptru	equ	0xFF8
  5120                           tblptrh	equ	0xFF7
  5121                           tblptrl	equ	0xFF6
  5122                           tablat	equ	0xFF5
  5123                           prodh	equ	0xFF4
  5124                           prodl	equ	0xFF3
  5125                           intcon	equ	0xFF2
  5126                           intcon2	equ	0xFF1
  5127                           postinc0	equ	0xFEE
  5128                           wreg	equ	0xFE8
  5129                           postdec1	equ	0xFE5
  5130                           fsr1l	equ	0xFE1
  5131                           status	equ	0xFD8
  5132                           
  5133 ;; *************** function _TMR_ResetTimer0 *****************
  5134 ;; Defined at:
  5135 ;;		line 268 in file "TIMERS.c"
  5136 ;; Parameters:    Size  Location     Type
  5137 ;;		None
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  TimerOn         1   54[BANK0 ] unsigned char 
  5140 ;; Return value:  Size  Location     Type
  5141 ;;		None               void
  5142 ;; Registers used:
  5143 ;;		wreg, status,2, cstack
  5144 ;; Tracked objects:
  5145 ;;		On entry : F/0
  5146 ;;		On exit  : F/0
  5147 ;;		Unchanged: 0/0
  5148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5149 ;;      Params:         0       0       0       0       0
  5150 ;;      Locals:         0       1       0       0       0
  5151 ;;      Temps:          0       0       0       0       0
  5152 ;;      Totals:         0       1       0       0       0
  5153 ;;Total ram usage:        1 bytes
  5154 ;; Hardware stack levels used:    1
  5155 ;; Hardware stack levels required when called:   13
  5156 ;; This function calls:
  5157 ;;		_TMR_Timer0
  5158 ;; This function is called by:
  5159 ;;		_InitTimer0
  5160 ;; This function uses a non-reentrant model
  5161 ;;
  5162                           
  5163                           	psect	text28
  5164  001856                     __ptext28:
  5165                           	opt stack 0
  5166  001856                     _TMR_ResetTimer0:
  5167                           	opt stack 14
  5168                           
  5169                           ; BSR set to: 0
  5170                           ;TIMERS.c: 270: unsigned char TimerOn = T0CONbits.TMR0ON;
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;incstack = 0
  5174  001856  0E00               	movlw	0
  5175  001858  BED5               	btfsc	4053,7,c	;volatile
  5176  00185A  0E01               	movlw	1
  5177  00185C  6FB6               	movwf	TMR_ResetTimer0@TimerOn& (0+255),b
  5178                           
  5179                           ; BSR set to: 0
  5180                           ;TIMERS.c: 272: TMR_Timer0(0);
  5181  00185E  0E00               	movlw	0
  5182  001860  EC2F  F00D         	call	_TMR_Timer0
  5183                           
  5184                           ; BSR set to: 0
  5185                           ;TIMERS.c: 273: TMR0H = 0;
  5186  001864  6AD7               	clrf	4055,c	;volatile
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;TIMERS.c: 274: TMR0L = 2;
  5190  001866  0E02               	movlw	2
  5191  001868  6ED6               	movwf	4054,c	;volatile
  5192                           
  5193                           ; BSR set to: 0
  5194                           ;TIMERS.c: 275: if(TimerOn)
  5195  00186A  51B6               	movf	TMR_ResetTimer0@TimerOn& (0+255),w,b
  5196  00186C  B4D8               	btfsc	status,2,c
  5197  00186E  0012               	return	
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;TIMERS.c: 276: {
  5201                           ;TIMERS.c: 277: TMR_Timer0(1);
  5202  001870  0E01               	movlw	1
  5203  001872  EF2F  F00D         	goto	_TMR_Timer0
  5204  001876                     __end_of_TMR_ResetTimer0:
  5205                           	opt stack 0
  5206                           tblptru	equ	0xFF8
  5207                           tblptrh	equ	0xFF7
  5208                           tblptrl	equ	0xFF6
  5209                           tablat	equ	0xFF5
  5210                           prodh	equ	0xFF4
  5211                           prodl	equ	0xFF3
  5212                           intcon	equ	0xFF2
  5213                           intcon2	equ	0xFF1
  5214                           postinc0	equ	0xFEE
  5215                           wreg	equ	0xFE8
  5216                           postdec1	equ	0xFE5
  5217                           fsr1l	equ	0xFE1
  5218                           status	equ	0xFD8
  5219                           
  5220 ;; *************** function _TMR_Timer0 *****************
  5221 ;; Defined at:
  5222 ;;		line 211 in file "TIMERS.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  state           1    wreg     unsigned char 
  5225 ;; Auto vars:     Size  Location     Type
  5226 ;;  state           1   53[BANK0 ] unsigned char 
  5227 ;; Return value:  Size  Location     Type
  5228 ;;		None               void
  5229 ;; Registers used:
  5230 ;;		wreg, status,2
  5231 ;; Tracked objects:
  5232 ;;		On entry : 0/0
  5233 ;;		On exit  : F/0
  5234 ;;		Unchanged: 0/0
  5235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5236 ;;      Params:         0       0       0       0       0
  5237 ;;      Locals:         0       1       0       0       0
  5238 ;;      Temps:          0       0       0       0       0
  5239 ;;      Totals:         0       1       0       0       0
  5240 ;;Total ram usage:        1 bytes
  5241 ;; Hardware stack levels used:    1
  5242 ;; Hardware stack levels required when called:   12
  5243 ;; This function calls:
  5244 ;;		Nothing
  5245 ;; This function is called by:
  5246 ;;		_InitTimer0
  5247 ;;		_TMR_ResetTimer0
  5248 ;; This function uses a non-reentrant model
  5249 ;;
  5250                           
  5251                           	psect	text29
  5252  001A5E                     __ptext29:
  5253                           	opt stack 0
  5254  001A5E                     _TMR_Timer0:
  5255                           	opt stack 15
  5256                           
  5257                           ; BSR set to: 0
  5258                           ;incstack = 0
  5259                           ;TMR_Timer0@state stored from wreg
  5260  001A5E  0100               	movlb	0	; () banked
  5261  001A60  6FB5               	movwf	TMR_Timer0@state& (0+255),b
  5262                           
  5263                           ;TIMERS.c: 213: if(state)
  5264  001A62  51B5               	movf	TMR_Timer0@state& (0+255),w,b
  5265  001A64  E002               	bz	l838
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;TIMERS.c: 214: {
  5269                           ;TIMERS.c: 216: T0CONbits.TMR0ON = 1;
  5270  001A66  8ED5               	bsf	4053,7,c	;volatile
  5271                           
  5272                           ;TIMERS.c: 217: }
  5273  001A68  0012               	return	
  5274  001A6A                     l838:
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;TIMERS.c: 218: else
  5278                           ;TIMERS.c: 219: {
  5279                           ;TIMERS.c: 221: T0CONbits.TMR0ON = 0;
  5280  001A6A  9ED5               	bcf	4053,7,c	;volatile
  5281                           
  5282                           ; BSR set to: 0
  5283  001A6C  0012               	return		;funcret
  5284  001A6E                     __end_of_TMR_Timer0:
  5285                           	opt stack 0
  5286                           tblptru	equ	0xFF8
  5287                           tblptrh	equ	0xFF7
  5288                           tblptrl	equ	0xFF6
  5289                           tablat	equ	0xFF5
  5290                           prodh	equ	0xFF4
  5291                           prodl	equ	0xFF3
  5292                           intcon	equ	0xFF2
  5293                           intcon2	equ	0xFF1
  5294                           postinc0	equ	0xFEE
  5295                           wreg	equ	0xFE8
  5296                           postdec1	equ	0xFE5
  5297                           fsr1l	equ	0xFE1
  5298                           status	equ	0xFD8
  5299                           
  5300 ;; *************** function _InitRF *****************
  5301 ;; Defined at:
  5302 ;;		line 68 in file "RF.c"
  5303 ;; Parameters:    Size  Location     Type
  5304 ;;		None
  5305 ;; Auto vars:     Size  Location     Type
  5306 ;;		None
  5307 ;; Return value:  Size  Location     Type
  5308 ;;		None               void
  5309 ;; Registers used:
  5310 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5311 ;; Tracked objects:
  5312 ;;		On entry : F/0
  5313 ;;		On exit  : F/0
  5314 ;;		Unchanged: 0/0
  5315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5316 ;;      Params:         0       0       0       0       0
  5317 ;;      Locals:         0       0       0       0       0
  5318 ;;      Temps:          0       0       0       0       0
  5319 ;;      Totals:         0       0       0       0       0
  5320 ;;Total ram usage:        0 bytes
  5321 ;; Hardware stack levels used:    1
  5322 ;; Hardware stack levels required when called:   13
  5323 ;; This function calls:
  5324 ;;		_MSC_CleanBufferInt
  5325 ;;		_RF_DataInt
  5326 ;;		_RF_Receiver
  5327 ;;		_RF_SetBandwidth
  5328 ;;		_RF_SetSquelch
  5329 ;; This function is called by:
  5330 ;;		_Init_System
  5331 ;; This function uses a non-reentrant model
  5332 ;;
  5333                           
  5334                           	psect	text30
  5335  001560                     __ptext30:
  5336                           	opt stack 0
  5337  001560                     _InitRF:
  5338                           	opt stack 16
  5339                           
  5340                           ; BSR set to: 0
  5341                           ;RF.c: 71: RF_Receiver(1);
  5342                           
  5343                           ; BSR set to: 0
  5344                           ;incstack = 0
  5345  001560  0E01               	movlw	1
  5346  001562  EC3F  F00D         	call	_RF_Receiver
  5347                           
  5348                           ;RF.c: 72: RF_SetBandwidth(2);
  5349  001566  0E02               	movlw	2
  5350  001568  EC3E  F00B         	call	_RF_SetBandwidth
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;RF.c: 73: MSC_CleanBufferInt(&RF_DataTiming,64);
  5354  00156C  0E07               	movlw	low _RF_DataTiming
  5355  00156E  6FB5               	movwf	MSC_CleanBufferInt@data& (0+255),b
  5356  001570  0E01               	movlw	high _RF_DataTiming
  5357  001572  6FB6               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  5358  001574  6BB8               	clrf	(MSC_CleanBufferInt@count+1)& (0+255),b
  5359  001576  0E40               	movlw	64
  5360  001578  6FB7               	movwf	MSC_CleanBufferInt@count& (0+255),b
  5361  00157A  ECC9  F00A         	call	_MSC_CleanBufferInt	;wreg free
  5362                           
  5363                           ; BSR set to: 0
  5364                           ;RF.c: 74: RF_SetSquelch(1);
  5365  00157E  0E01               	movlw	1
  5366  001580  EC37  F00D         	call	_RF_SetSquelch
  5367                           
  5368                           ; BSR set to: 0
  5369                           ;RF.c: 75: INTCON3bits.INT1P = 1;
  5370  001584  8CF0               	bsf	intcon3,6,c	;volatile
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;RF.c: 76: INTCON3bits.INT2P = 1;
  5374  001586  8EF0               	bsf	intcon3,7,c	;volatile
  5375                           
  5376                           ; BSR set to: 0
  5377                           ;RF.c: 77: INTCON2bits.INTEDG1 = 1;
  5378  001588  8AF1               	bsf	intcon2,5,c	;volatile
  5379                           
  5380                           ; BSR set to: 0
  5381                           ;RF.c: 78: INTCON2bits.INTEDG2 = 0;
  5382  00158A  98F1               	bcf	intcon2,4,c	;volatile
  5383                           
  5384                           ; BSR set to: 0
  5385                           ;RF.c: 79: RF_DataInt(1);
  5386  00158C  0E01               	movlw	1
  5387  00158E  EFC6  F00C         	goto	_RF_DataInt
  5388  001592                     __end_of_InitRF:
  5389                           	opt stack 0
  5390                           tblptru	equ	0xFF8
  5391                           tblptrh	equ	0xFF7
  5392                           tblptrl	equ	0xFF6
  5393                           tablat	equ	0xFF5
  5394                           prodh	equ	0xFF4
  5395                           prodl	equ	0xFF3
  5396                           intcon	equ	0xFF2
  5397                           intcon2	equ	0xFF1
  5398                           intcon3	equ	0xFF0
  5399                           postinc0	equ	0xFEE
  5400                           wreg	equ	0xFE8
  5401                           postdec1	equ	0xFE5
  5402                           fsr1l	equ	0xFE1
  5403                           status	equ	0xFD8
  5404                           
  5405 ;; *************** function _RF_SetSquelch *****************
  5406 ;; Defined at:
  5407 ;;		line 334 in file "RF.c"
  5408 ;; Parameters:    Size  Location     Type
  5409 ;;  state           1    wreg     unsigned char 
  5410 ;; Auto vars:     Size  Location     Type
  5411 ;;  state           1   53[BANK0 ] unsigned char 
  5412 ;; Return value:  Size  Location     Type
  5413 ;;		None               void
  5414 ;; Registers used:
  5415 ;;		wreg, status,2, status,0
  5416 ;; Tracked objects:
  5417 ;;		On entry : F/0
  5418 ;;		On exit  : F/0
  5419 ;;		Unchanged: 0/0
  5420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5421 ;;      Params:         0       0       0       0       0
  5422 ;;      Locals:         0       1       0       0       0
  5423 ;;      Temps:          0       0       0       0       0
  5424 ;;      Totals:         0       1       0       0       0
  5425 ;;Total ram usage:        1 bytes
  5426 ;; Hardware stack levels used:    1
  5427 ;; Hardware stack levels required when called:   12
  5428 ;; This function calls:
  5429 ;;		Nothing
  5430 ;; This function is called by:
  5431 ;;		_InitRF
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           	psect	text31
  5436  001A6E                     __ptext31:
  5437                           	opt stack 0
  5438  001A6E                     _RF_SetSquelch:
  5439                           	opt stack 16
  5440                           
  5441                           ; BSR set to: 0
  5442                           ;incstack = 0
  5443                           ;RF_SetSquelch@state stored from wreg
  5444  001A6E  6FB5               	movwf	RF_SetSquelch@state& (0+255),b
  5445                           
  5446                           ;RF.c: 336: if(!state)
  5447  001A70  0100               	movlb	0	; () banked
  5448  001A72  51B5               	movf	RF_SetSquelch@state& (0+255),w,b
  5449  001A74  E102               	bnz	l4496
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;RF.c: 337: {
  5453                           ;RF.c: 339: LATA |= 0x20;
  5454  001A76  8A89               	bsf	3977,5,c	;volatile
  5455                           
  5456                           ;RF.c: 340: }
  5457  001A78  0012               	return	
  5458  001A7A                     l4496:
  5459                           
  5460                           ; BSR set to: 0
  5461                           ;RF.c: 341: else
  5462                           ;RF.c: 342: {
  5463                           ;RF.c: 344: LATA &= ~0x20;
  5464  001A7A  9A89               	bcf	3977,5,c	;volatile
  5465                           
  5466                           ; BSR set to: 0
  5467  001A7C  0012               	return		;funcret
  5468  001A7E                     __end_of_RF_SetSquelch:
  5469                           	opt stack 0
  5470                           tblptru	equ	0xFF8
  5471                           tblptrh	equ	0xFF7
  5472                           tblptrl	equ	0xFF6
  5473                           tablat	equ	0xFF5
  5474                           prodh	equ	0xFF4
  5475                           prodl	equ	0xFF3
  5476                           intcon	equ	0xFF2
  5477                           intcon2	equ	0xFF1
  5478                           intcon3	equ	0xFF0
  5479                           postinc0	equ	0xFEE
  5480                           wreg	equ	0xFE8
  5481                           postdec1	equ	0xFE5
  5482                           fsr1l	equ	0xFE1
  5483                           status	equ	0xFD8
  5484                           
  5485 ;; *************** function _RF_SetBandwidth *****************
  5486 ;; Defined at:
  5487 ;;		line 300 in file "RF.c"
  5488 ;; Parameters:    Size  Location     Type
  5489 ;;  band            1    wreg     unsigned char 
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;  band            1   53[BANK0 ] unsigned char 
  5492 ;; Return value:  Size  Location     Type
  5493 ;;		None               void
  5494 ;; Registers used:
  5495 ;;		wreg, status,2, status,0
  5496 ;; Tracked objects:
  5497 ;;		On entry : F/0
  5498 ;;		On exit  : F/0
  5499 ;;		Unchanged: 0/0
  5500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5501 ;;      Params:         0       0       0       0       0
  5502 ;;      Locals:         0       1       0       0       0
  5503 ;;      Temps:          0       0       0       0       0
  5504 ;;      Totals:         0       1       0       0       0
  5505 ;;Total ram usage:        1 bytes
  5506 ;; Hardware stack levels used:    1
  5507 ;; Hardware stack levels required when called:   12
  5508 ;; This function calls:
  5509 ;;		Nothing
  5510 ;; This function is called by:
  5511 ;;		_InitRF
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           	psect	text32
  5516  00167C                     __ptext32:
  5517                           	opt stack 0
  5518  00167C                     _RF_SetBandwidth:
  5519                           	opt stack 16
  5520                           
  5521                           ; BSR set to: 0
  5522                           ;incstack = 0
  5523                           ;RF_SetBandwidth@band stored from wreg
  5524  00167C  6FB5               	movwf	RF_SetBandwidth@band& (0+255),b
  5525                           
  5526                           ;RF.c: 302: if(band == 0)
  5527  00167E  0100               	movlb	0	; () banked
  5528  001680  51B5               	movf	RF_SetBandwidth@band& (0+255),w,b
  5529  001682  E103               	bnz	l4474
  5530                           
  5531                           ; BSR set to: 0
  5532                           ;RF.c: 303: {
  5533                           ;RF.c: 305: LATC &= ~0x40;
  5534  001684  9C8B               	bcf	3979,6,c	;volatile
  5535                           
  5536                           ;RF.c: 306: LATC &= ~0x80;
  5537  001686  9E8B               	bcf	3979,7,c	;volatile
  5538                           
  5539                           ;RF.c: 307: }
  5540  001688  0012               	return	
  5541  00168A                     l4474:
  5542                           
  5543                           ; BSR set to: 0
  5544                           ;RF.c: 308: else if(band == 1)
  5545  00168A  05B5               	decf	RF_SetBandwidth@band& (0+255),w,b
  5546  00168C  E103               	bnz	l4478
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;RF.c: 309: {
  5550                           ;RF.c: 311: LATC |= 0x40;
  5551  00168E  8C8B               	bsf	3979,6,c	;volatile
  5552                           
  5553                           ;RF.c: 312: LATC &= ~0x80;
  5554  001690  9E8B               	bcf	3979,7,c	;volatile
  5555                           
  5556                           ;RF.c: 313: }
  5557  001692  0012               	return	
  5558  001694                     l4478:
  5559                           
  5560                           ; BSR set to: 0
  5561                           ;RF.c: 314: else if(band == 2)
  5562  001694  0E02               	movlw	2
  5563  001696  19B5               	xorwf	RF_SetBandwidth@band& (0+255),w,b
  5564  001698  E103               	bnz	l4482
  5565                           
  5566                           ; BSR set to: 0
  5567                           ;RF.c: 315: {
  5568                           ;RF.c: 317: LATC &= ~0x40;
  5569  00169A  9C8B               	bcf	3979,6,c	;volatile
  5570                           
  5571                           ;RF.c: 318: LATC |= 0x80;
  5572  00169C  8E8B               	bsf	3979,7,c	;volatile
  5573                           
  5574                           ;RF.c: 319: }
  5575  00169E  0012               	return	
  5576  0016A0                     l4482:
  5577                           
  5578                           ; BSR set to: 0
  5579                           ;RF.c: 320: else
  5580                           ;RF.c: 321: {
  5581                           ;RF.c: 323: LATC |= 0x40;
  5582  0016A0  8C8B               	bsf	3979,6,c	;volatile
  5583                           
  5584                           ;RF.c: 324: LATC |= 0x80;
  5585  0016A2  8E8B               	bsf	3979,7,c	;volatile
  5586                           
  5587                           ; BSR set to: 0
  5588  0016A4  0012               	return		;funcret
  5589  0016A6                     __end_of_RF_SetBandwidth:
  5590                           	opt stack 0
  5591                           tblptru	equ	0xFF8
  5592                           tblptrh	equ	0xFF7
  5593                           tblptrl	equ	0xFF6
  5594                           tablat	equ	0xFF5
  5595                           prodh	equ	0xFF4
  5596                           prodl	equ	0xFF3
  5597                           intcon	equ	0xFF2
  5598                           intcon2	equ	0xFF1
  5599                           intcon3	equ	0xFF0
  5600                           postinc0	equ	0xFEE
  5601                           wreg	equ	0xFE8
  5602                           postdec1	equ	0xFE5
  5603                           fsr1l	equ	0xFE1
  5604                           status	equ	0xFD8
  5605                           
  5606 ;; *************** function _RF_Receiver *****************
  5607 ;; Defined at:
  5608 ;;		line 281 in file "RF.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;  state           1    wreg     unsigned char 
  5611 ;; Auto vars:     Size  Location     Type
  5612 ;;  state           1   53[BANK0 ] unsigned char 
  5613 ;; Return value:  Size  Location     Type
  5614 ;;		None               void
  5615 ;; Registers used:
  5616 ;;		wreg, status,2, status,0
  5617 ;; Tracked objects:
  5618 ;;		On entry : F/0
  5619 ;;		On exit  : F/0
  5620 ;;		Unchanged: 0/0
  5621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5622 ;;      Params:         0       0       0       0       0
  5623 ;;      Locals:         0       1       0       0       0
  5624 ;;      Temps:          0       0       0       0       0
  5625 ;;      Totals:         0       1       0       0       0
  5626 ;;Total ram usage:        1 bytes
  5627 ;; Hardware stack levels used:    1
  5628 ;; Hardware stack levels required when called:   12
  5629 ;; This function calls:
  5630 ;;		Nothing
  5631 ;; This function is called by:
  5632 ;;		_InitRF
  5633 ;; This function uses a non-reentrant model
  5634 ;;
  5635                           
  5636                           	psect	text33
  5637  001A7E                     __ptext33:
  5638                           	opt stack 0
  5639  001A7E                     _RF_Receiver:
  5640                           	opt stack 16
  5641                           
  5642                           ; BSR set to: 0
  5643                           ;incstack = 0
  5644                           ;RF_Receiver@state stored from wreg
  5645  001A7E  6FB5               	movwf	RF_Receiver@state& (0+255),b
  5646                           
  5647                           ;RF.c: 283: if(!state)
  5648  001A80  0100               	movlb	0	; () banked
  5649  001A82  51B5               	movf	RF_Receiver@state& (0+255),w,b
  5650  001A84  E102               	bnz	l4468
  5651                           
  5652                           ; BSR set to: 0
  5653                           ;RF.c: 284: {
  5654                           ;RF.c: 286: LATA |= 0x04;
  5655  001A86  8489               	bsf	3977,2,c	;volatile
  5656                           
  5657                           ;RF.c: 287: }
  5658  001A88  0012               	return	
  5659  001A8A                     l4468:
  5660                           
  5661                           ; BSR set to: 0
  5662                           ;RF.c: 288: else
  5663                           ;RF.c: 289: {
  5664                           ;RF.c: 291: LATA &= ~0x04;
  5665  001A8A  9489               	bcf	3977,2,c	;volatile
  5666                           
  5667                           ; BSR set to: 0
  5668  001A8C  0012               	return		;funcret
  5669  001A8E                     __end_of_RF_Receiver:
  5670                           	opt stack 0
  5671                           tblptru	equ	0xFF8
  5672                           tblptrh	equ	0xFF7
  5673                           tblptrl	equ	0xFF6
  5674                           tablat	equ	0xFF5
  5675                           prodh	equ	0xFF4
  5676                           prodl	equ	0xFF3
  5677                           intcon	equ	0xFF2
  5678                           intcon2	equ	0xFF1
  5679                           intcon3	equ	0xFF0
  5680                           postinc0	equ	0xFEE
  5681                           wreg	equ	0xFE8
  5682                           postdec1	equ	0xFE5
  5683                           fsr1l	equ	0xFE1
  5684                           status	equ	0xFD8
  5685                           
  5686 ;; *************** function _RF_DataInt *****************
  5687 ;; Defined at:
  5688 ;;		line 254 in file "RF.c"
  5689 ;; Parameters:    Size  Location     Type
  5690 ;;  state           1    wreg     unsigned char 
  5691 ;; Auto vars:     Size  Location     Type
  5692 ;;  state           1   53[BANK0 ] unsigned char 
  5693 ;; Return value:  Size  Location     Type
  5694 ;;		None               void
  5695 ;; Registers used:
  5696 ;;		wreg, status,2
  5697 ;; Tracked objects:
  5698 ;;		On entry : F/0
  5699 ;;		On exit  : F/0
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5702 ;;      Params:         0       0       0       0       0
  5703 ;;      Locals:         0       1       0       0       0
  5704 ;;      Temps:          0       0       0       0       0
  5705 ;;      Totals:         0       1       0       0       0
  5706 ;;Total ram usage:        1 bytes
  5707 ;; Hardware stack levels used:    1
  5708 ;; Hardware stack levels required when called:   12
  5709 ;; This function calls:
  5710 ;;		Nothing
  5711 ;; This function is called by:
  5712 ;;		_SYS_EnableInt
  5713 ;;		_InitRF
  5714 ;; This function uses a non-reentrant model
  5715 ;;
  5716                           
  5717                           	psect	text34
  5718  00198C                     __ptext34:
  5719                           	opt stack 0
  5720  00198C                     _RF_DataInt:
  5721                           	opt stack 17
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;incstack = 0
  5725                           ;RF_DataInt@state stored from wreg
  5726  00198C  6FB5               	movwf	RF_DataInt@state& (0+255),b
  5727                           
  5728                           ;RF.c: 257: if(state)
  5729  00198E  0100               	movlb	0	; () banked
  5730  001990  51B5               	movf	RF_DataInt@state& (0+255),w,b
  5731  001992  E003               	bz	l464
  5732                           
  5733                           ; BSR set to: 0
  5734                           ;RF.c: 258: {
  5735                           ;RF.c: 260: INTCON3bits.INT1E = 1;
  5736  001994  86F0               	bsf	intcon3,3,c	;volatile
  5737                           
  5738                           ;RF.c: 261: INTCON3bits.INT2E = 1;
  5739  001996  88F0               	bsf	intcon3,4,c	;volatile
  5740                           
  5741                           ;RF.c: 262: }
  5742  001998  0012               	return	
  5743  00199A                     l464:
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;RF.c: 263: else
  5747                           ;RF.c: 264: {
  5748                           ;RF.c: 266: INTCON3bits.INT1E = 0;
  5749  00199A  96F0               	bcf	intcon3,3,c	;volatile
  5750                           
  5751                           ;RF.c: 267: INTCON3bits.INT2E = 0;
  5752  00199C  98F0               	bcf	intcon3,4,c	;volatile
  5753                           
  5754                           ; BSR set to: 0
  5755  00199E  0012               	return		;funcret
  5756  0019A0                     __end_of_RF_DataInt:
  5757                           	opt stack 0
  5758                           tblptru	equ	0xFF8
  5759                           tblptrh	equ	0xFF7
  5760                           tblptrl	equ	0xFF6
  5761                           tablat	equ	0xFF5
  5762                           prodh	equ	0xFF4
  5763                           prodl	equ	0xFF3
  5764                           intcon	equ	0xFF2
  5765                           intcon2	equ	0xFF1
  5766                           intcon3	equ	0xFF0
  5767                           postinc0	equ	0xFEE
  5768                           wreg	equ	0xFE8
  5769                           postdec1	equ	0xFE5
  5770                           fsr1l	equ	0xFE1
  5771                           status	equ	0xFD8
  5772                           
  5773 ;; *************** function _InitMOTOR *****************
  5774 ;; Defined at:
  5775 ;;		line 92 in file "MOTOR.c"
  5776 ;; Parameters:    Size  Location     Type
  5777 ;;		None
  5778 ;; Auto vars:     Size  Location     Type
  5779 ;;		None
  5780 ;; Return value:  Size  Location     Type
  5781 ;;		None               void
  5782 ;; Registers used:
  5783 ;;		None
  5784 ;; Tracked objects:
  5785 ;;		On entry : F/0
  5786 ;;		On exit  : 0/0
  5787 ;;		Unchanged: 0/0
  5788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5789 ;;      Params:         0       0       0       0       0
  5790 ;;      Locals:         0       0       0       0       0
  5791 ;;      Temps:          0       0       0       0       0
  5792 ;;      Totals:         0       0       0       0       0
  5793 ;;Total ram usage:        0 bytes
  5794 ;; Hardware stack levels used:    1
  5795 ;; Hardware stack levels required when called:   12
  5796 ;; This function calls:
  5797 ;;		Nothing
  5798 ;; This function is called by:
  5799 ;;		_Init_System
  5800 ;; This function uses a non-reentrant model
  5801 ;;
  5802                           
  5803                           	psect	text35
  5804  001B96                     __ptext35:
  5805                           	opt stack 0
  5806  001B96                     _InitMOTOR:
  5807                           	opt stack 17
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;MOTOR.c: 95: __nop();
  5811                           
  5812                           ; BSR set to: 0
  5813                           ;incstack = 0
  5814  001B96  F000               	nop	
  5815  001B98  0012               	return		;funcret
  5816  001B9A                     __end_of_InitMOTOR:
  5817                           	opt stack 0
  5818                           tblptru	equ	0xFF8
  5819                           tblptrh	equ	0xFF7
  5820                           tblptrl	equ	0xFF6
  5821                           tablat	equ	0xFF5
  5822                           prodh	equ	0xFF4
  5823                           prodl	equ	0xFF3
  5824                           intcon	equ	0xFF2
  5825                           intcon2	equ	0xFF1
  5826                           intcon3	equ	0xFF0
  5827                           postinc0	equ	0xFEE
  5828                           wreg	equ	0xFE8
  5829                           postdec1	equ	0xFE5
  5830                           fsr1l	equ	0xFE1
  5831                           status	equ	0xFD8
  5832                           
  5833 ;; *************** function _InitLDO *****************
  5834 ;; Defined at:
  5835 ;;		line 75 in file "LDO.c"
  5836 ;; Parameters:    Size  Location     Type
  5837 ;;		None
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;		None
  5840 ;; Return value:  Size  Location     Type
  5841 ;;		None               void
  5842 ;; Registers used:
  5843 ;;		wreg, status,2, status,0, cstack
  5844 ;; Tracked objects:
  5845 ;;		On entry : F/0
  5846 ;;		On exit  : F/0
  5847 ;;		Unchanged: 0/0
  5848 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5849 ;;      Params:         0       0       0       0       0
  5850 ;;      Locals:         0       0       0       0       0
  5851 ;;      Temps:          0       0       0       0       0
  5852 ;;      Totals:         0       0       0       0       0
  5853 ;;Total ram usage:        0 bytes
  5854 ;; Hardware stack levels used:    1
  5855 ;; Hardware stack levels required when called:   13
  5856 ;; This function calls:
  5857 ;;		_LDO_Pass
  5858 ;; This function is called by:
  5859 ;;		_Init_System
  5860 ;; This function uses a non-reentrant model
  5861 ;;
  5862                           
  5863                           	psect	text36
  5864  001976                     __ptext36:
  5865                           	opt stack 0
  5866  001976                     _InitLDO:
  5867                           	opt stack 16
  5868                           
  5869                           ; BSR set to: 0
  5870                           ;LDO.c: 77: LDO_Pass(0);
  5871                           
  5872                           ;incstack = 0
  5873  001976  0E00               	movlw	0
  5874  001978                     i13L__ptext37:
  5875                           	opt stack 0
  5876  001978                     i13L_LDO_Pass:
  5877                           	opt stack 16
  5878                           
  5879                           ; BSR set to: 0
  5880                           ;incstack = 0
  5881                           ;LDO_Pass@state stored from wreg
  5882  001978  6FB5               	movwf	LDO_Pass@state& (0+255),b
  5883  00197A                     i13Ll4498:
  5884                           	opt stack 16
  5885                           
  5886                           ;LDO.c: 54: if(state)
  5887  00197A  0100               	movlb	0	; () banked
  5888  00197C  51B5               	movf	LDO_Pass@state& (0+255),w,b
  5889  00197E  B4D8               	btfsc	status,2,c
  5890  001980                     i13Lu4001:
  5891                           	opt stack 0
  5892  001980  D003               	goto	i13Ll640
  5893  001982                     i13Lu4000:
  5894                           	opt stack 0
  5895  001982                     i13Ll4500:
  5896                           	opt stack 16
  5897                           
  5898                           ; BSR set to: 0
  5899                           ;LDO.c: 55: {
  5900                           ;LDO.c: 57: TRISCbits.TRISC5 = 0;
  5901  001982  9A94               	bcf	3988,5,c	;volatile
  5902  001984                     i13Ll4502:
  5903                           	opt stack 16
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;LDO.c: 58: LATC &= ~0x20;
  5907  001984  9A8B               	bcf	3979,5,c	;volatile
  5908  001986  0012               	return	
  5909  001988                     i13Ll640:
  5910                           	opt stack 16
  5911                           
  5912                           ; BSR set to: 0
  5913                           ;LDO.c: 60: else
  5914                           ;LDO.c: 61: {
  5915                           ;LDO.c: 63: TRISCbits.TRISC5 = 1;
  5916  001988  8A94               	bsf	3988,5,c	;volatile
  5917  00198A                     i13Ll642:
  5918                           	opt stack 0
  5919  00198A  0012               	return	
  5920  00198C                     __end_of_InitLDO:
  5921                           	opt stack 0
  5922                           tblptru	equ	0xFF8
  5923                           tblptrh	equ	0xFF7
  5924                           tblptrl	equ	0xFF6
  5925                           tablat	equ	0xFF5
  5926                           prodh	equ	0xFF4
  5927                           prodl	equ	0xFF3
  5928                           intcon	equ	0xFF2
  5929                           intcon2	equ	0xFF1
  5930                           intcon3	equ	0xFF0
  5931                           postinc0	equ	0xFEE
  5932                           wreg	equ	0xFE8
  5933                           postdec1	equ	0xFE5
  5934                           fsr1l	equ	0xFE1
  5935                           status	equ	0xFD8
  5936                           
  5937 ;; *************** function _LDO_Pass *****************
  5938 ;; Defined at:
  5939 ;;		line 52 in file "LDO.c"
  5940 ;; Parameters:    Size  Location     Type
  5941 ;;  state           1    wreg     unsigned char 
  5942 ;; Auto vars:     Size  Location     Type
  5943 ;;  state           1   53[BANK0 ] unsigned char 
  5944 ;; Return value:  Size  Location     Type
  5945 ;;		None               void
  5946 ;; Registers used:
  5947 ;;		wreg, status,2, status,0
  5948 ;; Tracked objects:
  5949 ;;		On entry : F/0
  5950 ;;		On exit  : F/0
  5951 ;;		Unchanged: 0/0
  5952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5953 ;;      Params:         0       0       0       0       0
  5954 ;;      Locals:         0       1       0       0       0
  5955 ;;      Temps:          0       0       0       0       0
  5956 ;;      Totals:         0       1       0       0       0
  5957 ;;Total ram usage:        1 bytes
  5958 ;; Hardware stack levels used:    1
  5959 ;; Hardware stack levels required when called:   12
  5960 ;; This function calls:
  5961 ;;		Nothing
  5962 ;; This function is called by:
  5963 ;;		_InitLDO
  5964 ;; This function uses a non-reentrant model
  5965 ;;
  5966                           
  5967                           	psect	text37
  5968  000000                     __ptext37:
  5969                           	opt stack 0
  5970  000000                     _LDO_Pass:
  5971                           	opt stack 0
  5972  000000                     __end_of_LDO_Pass:
  5973                           	opt stack 0
  5974                           tblptru	equ	0xFF8
  5975                           tblptrh	equ	0xFF7
  5976                           tblptrl	equ	0xFF6
  5977                           tablat	equ	0xFF5
  5978                           prodh	equ	0xFF4
  5979                           prodl	equ	0xFF3
  5980                           intcon	equ	0xFF2
  5981                           intcon2	equ	0xFF1
  5982                           intcon3	equ	0xFF0
  5983                           postinc0	equ	0xFEE
  5984                           wreg	equ	0xFE8
  5985                           postdec1	equ	0xFE5
  5986                           fsr1l	equ	0xFE1
  5987                           status	equ	0xFD8
  5988                           
  5989 ;; *************** function _InitIR *****************
  5990 ;; Defined at:
  5991 ;;		line 72 in file "IR.c"
  5992 ;; Parameters:    Size  Location     Type
  5993 ;;		None
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;		None
  5996 ;; Return value:  Size  Location     Type
  5997 ;;		None               void
  5998 ;; Registers used:
  5999 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6000 ;; Tracked objects:
  6001 ;;		On entry : F/0
  6002 ;;		On exit  : F/0
  6003 ;;		Unchanged: 0/0
  6004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6005 ;;      Params:         0       0       0       0       0
  6006 ;;      Locals:         0       0       0       0       0
  6007 ;;      Temps:          0       0       0       0       0
  6008 ;;      Totals:         0       0       0       0       0
  6009 ;;Total ram usage:        0 bytes
  6010 ;; Hardware stack levels used:    1
  6011 ;; Hardware stack levels required when called:   13
  6012 ;; This function calls:
  6013 ;;		_MSC_CleanBufferInt
  6014 ;; This function is called by:
  6015 ;;		_Init_System
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           	psect	text38
  6020  0019B4                     __ptext38:
  6021                           	opt stack 0
  6022  0019B4                     _InitIR:
  6023                           	opt stack 16
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;IR.c: 74: MSC_CleanBufferInt(&IR_DataTiming,96);
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;incstack = 0
  6030  0019B4  0E00               	movlw	low _IR_DataTiming
  6031  0019B6  6FB5               	movwf	MSC_CleanBufferInt@data& (0+255),b
  6032  0019B8  0E02               	movlw	high _IR_DataTiming
  6033  0019BA  6FB6               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  6034  0019BC  6BB8               	clrf	(MSC_CleanBufferInt@count+1)& (0+255),b
  6035  0019BE  0E60               	movlw	96
  6036  0019C0  6FB7               	movwf	MSC_CleanBufferInt@count& (0+255),b
  6037  0019C2  EFC9  F00A         	goto	_MSC_CleanBufferInt	;wreg free
  6038  0019C6                     __end_of_InitIR:
  6039                           	opt stack 0
  6040                           tblptru	equ	0xFF8
  6041                           tblptrh	equ	0xFF7
  6042                           tblptrl	equ	0xFF6
  6043                           tablat	equ	0xFF5
  6044                           prodh	equ	0xFF4
  6045                           prodl	equ	0xFF3
  6046                           intcon	equ	0xFF2
  6047                           intcon2	equ	0xFF1
  6048                           intcon3	equ	0xFF0
  6049                           postinc0	equ	0xFEE
  6050                           wreg	equ	0xFE8
  6051                           postdec1	equ	0xFE5
  6052                           fsr1l	equ	0xFE1
  6053                           status	equ	0xFD8
  6054                           
  6055 ;; *************** function _MSC_CleanBufferInt *****************
  6056 ;; Defined at:
  6057 ;;		line 90 in file "MISC.c"
  6058 ;; Parameters:    Size  Location     Type
  6059 ;;  data            2   53[BANK0 ] PTR unsigned int 
  6060 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
  6061 ;;  count           2   55[BANK0 ] unsigned int 
  6062 ;; Auto vars:     Size  Location     Type
  6063 ;;  i               2   57[BANK0 ] unsigned int 
  6064 ;; Return value:  Size  Location     Type
  6065 ;;		None               void
  6066 ;; Registers used:
  6067 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6068 ;; Tracked objects:
  6069 ;;		On entry : F/0
  6070 ;;		On exit  : F/0
  6071 ;;		Unchanged: 0/0
  6072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6073 ;;      Params:         0       4       0       0       0
  6074 ;;      Locals:         0       2       0       0       0
  6075 ;;      Temps:          0       0       0       0       0
  6076 ;;      Totals:         0       6       0       0       0
  6077 ;;Total ram usage:        6 bytes
  6078 ;; Hardware stack levels used:    1
  6079 ;; Hardware stack levels required when called:   12
  6080 ;; This function calls:
  6081 ;;		Nothing
  6082 ;; This function is called by:
  6083 ;;		_InitRF
  6084 ;;		_InitIR
  6085 ;; This function uses a non-reentrant model
  6086 ;;
  6087                           
  6088                           	psect	text39
  6089  001592                     __ptext39:
  6090                           	opt stack 0
  6091  001592                     _MSC_CleanBufferInt:
  6092                           	opt stack 16
  6093                           
  6094                           ; BSR set to: 0
  6095                           ;MISC.c: 92: unsigned int i=0;
  6096                           
  6097                           ; BSR set to: 0
  6098                           ;incstack = 0
  6099  001592  6BB9               	clrf	MSC_CleanBufferInt@i& (0+255),b
  6100  001594  6BBA               	clrf	(MSC_CleanBufferInt@i+1)& (0+255),b
  6101                           
  6102                           ;MISC.c: 93: for(i=0; i<count;i++)
  6103  001596  6BB9               	clrf	MSC_CleanBufferInt@i& (0+255),b
  6104  001598  6BBA               	clrf	(MSC_CleanBufferInt@i+1)& (0+255),b
  6105  00159A  D00D               	goto	l4490
  6106  00159C                     l4486:
  6107                           
  6108                           ; BSR set to: 0
  6109                           ;MISC.c: 94: {
  6110                           ;MISC.c: 95: data[i]= 0;
  6111  00159C  90D8               	bcf	status,0,c
  6112  00159E  35B9               	rlcf	MSC_CleanBufferInt@i& (0+255),w,b
  6113  0015A0  6ED9               	movwf	fsr2l,c
  6114  0015A2  35BA               	rlcf	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  6115  0015A4  6EDA               	movwf	fsr2h,c
  6116  0015A6  51B5               	movf	MSC_CleanBufferInt@data& (0+255),w,b
  6117  0015A8  26D9               	addwf	fsr2l,f,c
  6118  0015AA  51B6               	movf	(MSC_CleanBufferInt@data+1)& (0+255),w,b
  6119  0015AC  22DA               	addwfc	fsr2h,f,c
  6120  0015AE  6ADE               	clrf	postinc2,c
  6121  0015B0  6ADD               	clrf	postdec2,c
  6122                           
  6123                           ; BSR set to: 0
  6124  0015B2  4BB9               	infsnz	MSC_CleanBufferInt@i& (0+255),f,b
  6125  0015B4  2BBA               	incf	(MSC_CleanBufferInt@i+1)& (0+255),f,b
  6126  0015B6                     l4490:
  6127                           
  6128                           ; BSR set to: 0
  6129  0015B6  51B7               	movf	MSC_CleanBufferInt@count& (0+255),w,b
  6130  0015B8  5DB9               	subwf	MSC_CleanBufferInt@i& (0+255),w,b
  6131  0015BA  51B8               	movf	(MSC_CleanBufferInt@count+1)& (0+255),w,b
  6132  0015BC  59BA               	subwfb	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  6133  0015BE  E3EE               	bnc	l4486
  6134                           
  6135                           ; BSR set to: 0
  6136  0015C0  0012               	return		;funcret
  6137  0015C2                     __end_of_MSC_CleanBufferInt:
  6138                           	opt stack 0
  6139                           tblptru	equ	0xFF8
  6140                           tblptrh	equ	0xFF7
  6141                           tblptrl	equ	0xFF6
  6142                           tablat	equ	0xFF5
  6143                           prodh	equ	0xFF4
  6144                           prodl	equ	0xFF3
  6145                           intcon	equ	0xFF2
  6146                           intcon2	equ	0xFF1
  6147                           intcon3	equ	0xFF0
  6148                           postinc0	equ	0xFEE
  6149                           wreg	equ	0xFE8
  6150                           postdec1	equ	0xFE5
  6151                           fsr1l	equ	0xFE1
  6152                           postinc2	equ	0xFDE
  6153                           postdec2	equ	0xFDD
  6154                           fsr2h	equ	0xFDA
  6155                           fsr2l	equ	0xFD9
  6156                           status	equ	0xFD8
  6157                           
  6158 ;; *************** function _InitFlash *****************
  6159 ;; Defined at:
  6160 ;;		line 60 in file "FLASH.c"
  6161 ;; Parameters:    Size  Location     Type
  6162 ;;		None
  6163 ;; Auto vars:     Size  Location     Type
  6164 ;;		None
  6165 ;; Return value:  Size  Location     Type
  6166 ;;		None               void
  6167 ;; Registers used:
  6168 ;;		None
  6169 ;; Tracked objects:
  6170 ;;		On entry : 0/0
  6171 ;;		On exit  : 0/0
  6172 ;;		Unchanged: 0/0
  6173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6174 ;;      Params:         0       0       0       0       0
  6175 ;;      Locals:         0       0       0       0       0
  6176 ;;      Temps:          0       0       0       0       0
  6177 ;;      Totals:         0       0       0       0       0
  6178 ;;Total ram usage:        0 bytes
  6179 ;; Hardware stack levels used:    1
  6180 ;; Hardware stack levels required when called:   12
  6181 ;; This function calls:
  6182 ;;		Nothing
  6183 ;; This function is called by:
  6184 ;;		_Init_System
  6185 ;; This function uses a non-reentrant model
  6186 ;;
  6187                           
  6188                           	psect	text40
  6189  001B9A                     __ptext40:
  6190                           	opt stack 0
  6191  001B9A                     _InitFlash:
  6192                           	opt stack 17
  6193                           
  6194                           ;FLASH.c: 63: __nop();
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;incstack = 0
  6198  001B9A  F000               	nop	
  6199  001B9C  0012               	return		;funcret
  6200  001B9E                     __end_of_InitFlash:
  6201                           	opt stack 0
  6202                           tblptru	equ	0xFF8
  6203                           tblptrh	equ	0xFF7
  6204                           tblptrl	equ	0xFF6
  6205                           tablat	equ	0xFF5
  6206                           prodh	equ	0xFF4
  6207                           prodl	equ	0xFF3
  6208                           intcon	equ	0xFF2
  6209                           intcon2	equ	0xFF1
  6210                           intcon3	equ	0xFF0
  6211                           postinc0	equ	0xFEE
  6212                           wreg	equ	0xFE8
  6213                           postdec1	equ	0xFE5
  6214                           fsr1l	equ	0xFE1
  6215                           postinc2	equ	0xFDE
  6216                           postdec2	equ	0xFDD
  6217                           fsr2h	equ	0xFDA
  6218                           fsr2l	equ	0xFD9
  6219                           status	equ	0xFD8
  6220                           
  6221 ;; *************** function _InitButton *****************
  6222 ;; Defined at:
  6223 ;;		line 59 in file "BUTTON.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;		None
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;		None
  6228 ;; Return value:  Size  Location     Type
  6229 ;;		None               void
  6230 ;; Registers used:
  6231 ;;		wreg, status,2, status,0, cstack
  6232 ;; Tracked objects:
  6233 ;;		On entry : F/0
  6234 ;;		On exit  : F/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6237 ;;      Params:         0       0       0       0       0
  6238 ;;      Locals:         0       0       0       0       0
  6239 ;;      Temps:          0       0       0       0       0
  6240 ;;      Totals:         0       0       0       0       0
  6241 ;;Total ram usage:        0 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; Hardware stack levels required when called:   13
  6244 ;; This function calls:
  6245 ;;		_BUT_IR_PinChangeInt
  6246 ;;		_BUT_ReadButton
  6247 ;; This function is called by:
  6248 ;;		_Init_System
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           	psect	text41
  6253  001B50                     __ptext41:
  6254                           	opt stack 0
  6255  001B50                     _InitButton:
  6256                           	opt stack 16
  6257                           
  6258                           ; BSR set to: 0
  6259                           ;BUTTON.c: 62: INTCON2bits.RBIP = 0;
  6260                           
  6261                           ;incstack = 0
  6262  001B50  90F1               	bcf	intcon2,0,c	;volatile
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;BUTTON.c: 63: BUT_ReadButton();
  6266  001B52  ECD8  F00B         	call	_BUT_ReadButton	;wreg free
  6267                           
  6268                           ; BSR set to: 0
  6269                           ;BUTTON.c: 64: BUT_IR_PinChangeInt(1);
  6270  001B56  0E01               	movlw	1
  6271  001B58  EF47  F00D         	goto	_BUT_IR_PinChangeInt
  6272  001B5C                     __end_of_InitButton:
  6273                           	opt stack 0
  6274                           tblptru	equ	0xFF8
  6275                           tblptrh	equ	0xFF7
  6276                           tblptrl	equ	0xFF6
  6277                           tablat	equ	0xFF5
  6278                           prodh	equ	0xFF4
  6279                           prodl	equ	0xFF3
  6280                           intcon	equ	0xFF2
  6281                           intcon2	equ	0xFF1
  6282                           intcon3	equ	0xFF0
  6283                           postinc0	equ	0xFEE
  6284                           wreg	equ	0xFE8
  6285                           postdec1	equ	0xFE5
  6286                           fsr1l	equ	0xFE1
  6287                           postinc2	equ	0xFDE
  6288                           postdec2	equ	0xFDD
  6289                           fsr2h	equ	0xFDA
  6290                           fsr2l	equ	0xFD9
  6291                           status	equ	0xFD8
  6292                           
  6293 ;; *************** function _BUT_ReadButton *****************
  6294 ;; Defined at:
  6295 ;;		line 73 in file "BUTTON.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;		None
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;  value           1   53[BANK0 ] unsigned char 
  6300 ;; Return value:  Size  Location     Type
  6301 ;;                  1    wreg      unsigned char 
  6302 ;; Registers used:
  6303 ;;		wreg, status,2, status,0
  6304 ;; Tracked objects:
  6305 ;;		On entry : F/0
  6306 ;;		On exit  : F/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6309 ;;      Params:         0       0       0       0       0
  6310 ;;      Locals:         0       1       0       0       0
  6311 ;;      Temps:          0       0       0       0       0
  6312 ;;      Totals:         0       1       0       0       0
  6313 ;;Total ram usage:        1 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:   12
  6316 ;; This function calls:
  6317 ;;		Nothing
  6318 ;; This function is called by:
  6319 ;;		_Init_System
  6320 ;;		_InitButton
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           	psect	text42
  6325  0017B0                     __ptext42:
  6326                           	opt stack 0
  6327  0017B0                     _BUT_ReadButton:
  6328                           	opt stack 16
  6329                           
  6330                           ; BSR set to: 0
  6331                           ;BUTTON.c: 75: unsigned char value = PORTB;
  6332                           
  6333                           ; BSR set to: 0
  6334                           ;incstack = 0
  6335  0017B0  CF81 F0B5          	movff	3969,BUT_ReadButton@value	;volatile
  6336                           
  6337                           ;BUTTON.c: 76: if((value & 0x20) == 0)
  6338  0017B4  BBB5               	btfsc	BUT_ReadButton@value& (0+255),5,b
  6339  0017B6  D007               	goto	l4442
  6340                           
  6341                           ; BSR set to: 0
  6342                           ;BUTTON.c: 77: {
  6343                           ;BUTTON.c: 79: if(ButtonValue_prev == 0)
  6344  0017B8  51C4               	movf	_ButtonValue_prev& (0+255),w,b
  6345  0017BA  E102               	bnz	l734
  6346                           
  6347                           ; BSR set to: 0
  6348                           ;BUTTON.c: 80: {
  6349                           ;BUTTON.c: 81: ButtonChange = 1;
  6350  0017BC  0E01               	movlw	1
  6351  0017BE  6E66               	movwf	_ButtonChange,c
  6352  0017C0                     l734:
  6353                           
  6354                           ; BSR set to: 0
  6355                           ;BUTTON.c: 82: }
  6356                           ;BUTTON.c: 83: ButtonValue_prev = 1;
  6357  0017C0  0E01               	movlw	1
  6358  0017C2  6FC4               	movwf	_ButtonValue_prev& (0+255),b
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;BUTTON.c: 84: return 1;
  6362  0017C4  0C01               	retlw	1
  6363  0017C6                     l4442:
  6364                           
  6365                           ; BSR set to: 0
  6366                           ;BUTTON.c: 85: }
  6367                           ;BUTTON.c: 88: if(ButtonValue_prev == 1)
  6368  0017C6  05C4               	decf	_ButtonValue_prev& (0+255),w,b
  6369  0017C8  E102               	bnz	l4446
  6370                           
  6371                           ; BSR set to: 0
  6372                           ;BUTTON.c: 89: {
  6373                           ;BUTTON.c: 90: ButtonChange = 1;
  6374  0017CA  0E01               	movlw	1
  6375  0017CC  6E66               	movwf	_ButtonChange,c
  6376  0017CE                     l4446:
  6377                           
  6378                           ; BSR set to: 0
  6379                           ;BUTTON.c: 91: }
  6380                           ;BUTTON.c: 92: ButtonValue_prev = 0;
  6381  0017CE  6BC4               	clrf	_ButtonValue_prev& (0+255),b
  6382                           
  6383                           ; BSR set to: 0
  6384                           
  6385                           ; BSR set to: 0
  6386                           ;BUTTON.c: 93: return 0;
  6387  0017D0  0C00               	retlw	0	;funcret
  6388  0017D2                     __end_of_BUT_ReadButton:
  6389                           	opt stack 0
  6390                           tblptru	equ	0xFF8
  6391                           tblptrh	equ	0xFF7
  6392                           tblptrl	equ	0xFF6
  6393                           tablat	equ	0xFF5
  6394                           prodh	equ	0xFF4
  6395                           prodl	equ	0xFF3
  6396                           intcon	equ	0xFF2
  6397                           intcon2	equ	0xFF1
  6398                           intcon3	equ	0xFF0
  6399                           postinc0	equ	0xFEE
  6400                           wreg	equ	0xFE8
  6401                           postdec1	equ	0xFE5
  6402                           fsr1l	equ	0xFE1
  6403                           postinc2	equ	0xFDE
  6404                           postdec2	equ	0xFDD
  6405                           fsr2h	equ	0xFDA
  6406                           fsr2l	equ	0xFD9
  6407                           status	equ	0xFD8
  6408                           
  6409 ;; *************** function _BUT_IR_PinChangeInt *****************
  6410 ;; Defined at:
  6411 ;;		line 101 in file "BUTTON.c"
  6412 ;; Parameters:    Size  Location     Type
  6413 ;;  state           1    wreg     unsigned char 
  6414 ;; Auto vars:     Size  Location     Type
  6415 ;;  state           1   53[BANK0 ] unsigned char 
  6416 ;; Return value:  Size  Location     Type
  6417 ;;		None               void
  6418 ;; Registers used:
  6419 ;;		wreg, status,2
  6420 ;; Tracked objects:
  6421 ;;		On entry : E/1
  6422 ;;		On exit  : F/0
  6423 ;;		Unchanged: 0/0
  6424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6425 ;;      Params:         0       0       0       0       0
  6426 ;;      Locals:         0       1       0       0       0
  6427 ;;      Temps:          0       0       0       0       0
  6428 ;;      Totals:         0       1       0       0       0
  6429 ;;Total ram usage:        1 bytes
  6430 ;; Hardware stack levels used:    1
  6431 ;; Hardware stack levels required when called:   12
  6432 ;; This function calls:
  6433 ;;		Nothing
  6434 ;; This function is called by:
  6435 ;;		_SYS_EnableInt
  6436 ;;		_InitButton
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           	psect	text43
  6441  001A8E                     __ptext43:
  6442                           	opt stack 0
  6443  001A8E                     _BUT_IR_PinChangeInt:
  6444                           	opt stack 17
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;incstack = 0
  6448                           ;BUT_IR_PinChangeInt@state stored from wreg
  6449  001A8E  0100               	movlb	0	; () banked
  6450  001A90  6FB5               	movwf	BUT_IR_PinChangeInt@state& (0+255),b
  6451                           
  6452                           ;BUTTON.c: 103: if(state)
  6453  001A92  51B5               	movf	BUT_IR_PinChangeInt@state& (0+255),w,b
  6454  001A94  E002               	bz	l739
  6455                           
  6456                           ; BSR set to: 0
  6457                           ;BUTTON.c: 104: {
  6458                           ;BUTTON.c: 106: INTCONbits.RBIE = 1;
  6459  001A96  86F2               	bsf	intcon,3,c	;volatile
  6460                           
  6461                           ;BUTTON.c: 107: }
  6462  001A98  0012               	return	
  6463  001A9A                     l739:
  6464                           
  6465                           ; BSR set to: 0
  6466                           ;BUTTON.c: 108: else
  6467                           ;BUTTON.c: 109: {
  6468                           ;BUTTON.c: 111: INTCONbits.RBIE = 0;
  6469  001A9A  96F2               	bcf	intcon,3,c	;volatile
  6470                           
  6471                           ; BSR set to: 0
  6472  001A9C  0012               	return		;funcret
  6473  001A9E                     __end_of_BUT_IR_PinChangeInt:
  6474                           	opt stack 0
  6475                           tblptru	equ	0xFF8
  6476                           tblptrh	equ	0xFF7
  6477                           tblptrl	equ	0xFF6
  6478                           tablat	equ	0xFF5
  6479                           prodh	equ	0xFF4
  6480                           prodl	equ	0xFF3
  6481                           intcon	equ	0xFF2
  6482                           intcon2	equ	0xFF1
  6483                           intcon3	equ	0xFF0
  6484                           postinc0	equ	0xFEE
  6485                           wreg	equ	0xFE8
  6486                           postdec1	equ	0xFE5
  6487                           fsr1l	equ	0xFE1
  6488                           postinc2	equ	0xFDE
  6489                           postdec2	equ	0xFDD
  6490                           fsr2h	equ	0xFDA
  6491                           fsr2l	equ	0xFD9
  6492                           status	equ	0xFD8
  6493                           
  6494 ;; *************** function _InitADC *****************
  6495 ;; Defined at:
  6496 ;;		line 61 in file "ADC.c"
  6497 ;; Parameters:    Size  Location     Type
  6498 ;;		None
  6499 ;; Auto vars:     Size  Location     Type
  6500 ;;		None
  6501 ;; Return value:  Size  Location     Type
  6502 ;;		None               void
  6503 ;; Registers used:
  6504 ;;		wreg, status,2, status,0, cstack
  6505 ;; Tracked objects:
  6506 ;;		On entry : 0/0
  6507 ;;		On exit  : F/0
  6508 ;;		Unchanged: 0/0
  6509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6510 ;;      Params:         0       0       0       0       0
  6511 ;;      Locals:         0       0       0       0       0
  6512 ;;      Temps:          0       0       0       0       0
  6513 ;;      Totals:         0       0       0       0       0
  6514 ;;Total ram usage:        0 bytes
  6515 ;; Hardware stack levels used:    1
  6516 ;; Hardware stack levels required when called:   13
  6517 ;; This function calls:
  6518 ;;		_ADC_ChangeChannel
  6519 ;;		_ADC_ConversionInt
  6520 ;;		_ADC_Module
  6521 ;; This function is called by:
  6522 ;;		_Init_System
  6523 ;; This function uses a non-reentrant model
  6524 ;;
  6525                           
  6526                           	psect	text44
  6527  001744                     __ptext44:
  6528                           	opt stack 0
  6529  001744                     _InitADC:
  6530                           	opt stack 16
  6531                           
  6532                           ;ADC.c: 63: ADCON1bits.VCFG1 = 0;
  6533                           
  6534                           ; BSR set to: 0
  6535                           ;incstack = 0
  6536  001744  9AC1               	bcf	4033,5,c	;volatile
  6537                           
  6538                           ;ADC.c: 64: ADCON1bits.VCFG0 = 0;
  6539  001746  98C1               	bcf	4033,4,c	;volatile
  6540                           
  6541                           ;ADC.c: 65: ADCON2bits.ADFM = 1;
  6542  001748  8EC0               	bsf	4032,7,c	;volatile
  6543                           
  6544                           ;ADC.c: 66: ADCON2bits.ACQT = 0b111;
  6545  00174A  0E38               	movlw	56
  6546  00174C  12C0               	iorwf	4032,f,c	;volatile
  6547                           
  6548                           ;ADC.c: 67: ADCON2bits.ADCS = 0b110;
  6549  00174E  50C0               	movf	4032,w,c	;volatile
  6550  001750  0BF8               	andlw	-8
  6551  001752  0906               	iorlw	6
  6552  001754  6EC0               	movwf	4032,c	;volatile
  6553                           
  6554                           ;ADC.c: 68: IPR1bits.ADIP = 0;
  6555  001756  9C9F               	bcf	3999,6,c	;volatile
  6556                           
  6557                           ;ADC.c: 69: ADC_ChangeChannel();
  6558  001758  EC6B  F00C         	call	_ADC_ChangeChannel	;wreg free
  6559                           
  6560                           ;ADC.c: 70: ADC_ConversionInt(1);
  6561  00175C  0E01               	movlw	1
  6562  00175E  EC57  F00D         	call	_ADC_ConversionInt
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;ADC.c: 71: ADC_Module(1);
  6566  001762  0E01               	movlw	1
  6567  001764  EF4F  F00D         	goto	_ADC_Module
  6568  001768                     __end_of_InitADC:
  6569                           	opt stack 0
  6570                           tblptru	equ	0xFF8
  6571                           tblptrh	equ	0xFF7
  6572                           tblptrl	equ	0xFF6
  6573                           tablat	equ	0xFF5
  6574                           prodh	equ	0xFF4
  6575                           prodl	equ	0xFF3
  6576                           intcon	equ	0xFF2
  6577                           intcon2	equ	0xFF1
  6578                           intcon3	equ	0xFF0
  6579                           postinc0	equ	0xFEE
  6580                           wreg	equ	0xFE8
  6581                           postdec1	equ	0xFE5
  6582                           fsr1l	equ	0xFE1
  6583                           postinc2	equ	0xFDE
  6584                           postdec2	equ	0xFDD
  6585                           fsr2h	equ	0xFDA
  6586                           fsr2l	equ	0xFD9
  6587                           status	equ	0xFD8
  6588                           
  6589 ;; *************** function _ADC_Module *****************
  6590 ;; Defined at:
  6591 ;;		line 126 in file "ADC.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;  state           1    wreg     unsigned char 
  6594 ;; Auto vars:     Size  Location     Type
  6595 ;;  state           1   53[BANK0 ] unsigned char 
  6596 ;; Return value:  Size  Location     Type
  6597 ;;		None               void
  6598 ;; Registers used:
  6599 ;;		wreg, status,2
  6600 ;; Tracked objects:
  6601 ;;		On entry : F/0
  6602 ;;		On exit  : F/0
  6603 ;;		Unchanged: 0/0
  6604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6605 ;;      Params:         0       0       0       0       0
  6606 ;;      Locals:         0       1       0       0       0
  6607 ;;      Temps:          0       0       0       0       0
  6608 ;;      Totals:         0       1       0       0       0
  6609 ;;Total ram usage:        1 bytes
  6610 ;; Hardware stack levels used:    1
  6611 ;; Hardware stack levels required when called:   12
  6612 ;; This function calls:
  6613 ;;		Nothing
  6614 ;; This function is called by:
  6615 ;;		_InitADC
  6616 ;; This function uses a non-reentrant model
  6617 ;;
  6618                           
  6619                           	psect	text45
  6620  001A9E                     __ptext45:
  6621                           	opt stack 0
  6622  001A9E                     _ADC_Module:
  6623                           	opt stack 16
  6624                           
  6625                           ; BSR set to: 0
  6626                           ;incstack = 0
  6627                           ;ADC_Module@state stored from wreg
  6628  001A9E  6FB5               	movwf	ADC_Module@state& (0+255),b
  6629                           
  6630                           ;ADC.c: 128: if(state)
  6631  001AA0  0100               	movlb	0	; () banked
  6632  001AA2  51B5               	movf	ADC_Module@state& (0+255),w,b
  6633  001AA4  E002               	bz	l1082
  6634                           
  6635                           ; BSR set to: 0
  6636                           ;ADC.c: 129: {
  6637                           ;ADC.c: 131: ADCON0bits.ADON = 1;
  6638  001AA6  80C2               	bsf	4034,0,c	;volatile
  6639                           
  6640                           ;ADC.c: 132: }
  6641  001AA8  0012               	return	
  6642  001AAA                     l1082:
  6643                           
  6644                           ; BSR set to: 0
  6645                           ;ADC.c: 133: else
  6646                           ;ADC.c: 134: {
  6647                           ;ADC.c: 136: ADCON0bits.ADON = 0;
  6648  001AAA  90C2               	bcf	4034,0,c	;volatile
  6649                           
  6650                           ; BSR set to: 0
  6651  001AAC  0012               	return		;funcret
  6652  001AAE                     __end_of_ADC_Module:
  6653                           	opt stack 0
  6654                           tblptru	equ	0xFF8
  6655                           tblptrh	equ	0xFF7
  6656                           tblptrl	equ	0xFF6
  6657                           tablat	equ	0xFF5
  6658                           prodh	equ	0xFF4
  6659                           prodl	equ	0xFF3
  6660                           intcon	equ	0xFF2
  6661                           intcon2	equ	0xFF1
  6662                           intcon3	equ	0xFF0
  6663                           postinc0	equ	0xFEE
  6664                           wreg	equ	0xFE8
  6665                           postdec1	equ	0xFE5
  6666                           fsr1l	equ	0xFE1
  6667                           postinc2	equ	0xFDE
  6668                           postdec2	equ	0xFDD
  6669                           fsr2h	equ	0xFDA
  6670                           fsr2l	equ	0xFD9
  6671                           status	equ	0xFD8
  6672                           
  6673 ;; *************** function _ADC_ConversionInt *****************
  6674 ;; Defined at:
  6675 ;;		line 169 in file "ADC.c"
  6676 ;; Parameters:    Size  Location     Type
  6677 ;;  state           1    wreg     unsigned char 
  6678 ;; Auto vars:     Size  Location     Type
  6679 ;;  state           1   53[BANK0 ] unsigned char 
  6680 ;; Return value:  Size  Location     Type
  6681 ;;		None               void
  6682 ;; Registers used:
  6683 ;;		wreg, status,2
  6684 ;; Tracked objects:
  6685 ;;		On entry : 0/0
  6686 ;;		On exit  : F/0
  6687 ;;		Unchanged: 0/0
  6688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6689 ;;      Params:         0       0       0       0       0
  6690 ;;      Locals:         0       1       0       0       0
  6691 ;;      Temps:          0       0       0       0       0
  6692 ;;      Totals:         0       1       0       0       0
  6693 ;;Total ram usage:        1 bytes
  6694 ;; Hardware stack levels used:    1
  6695 ;; Hardware stack levels required when called:   12
  6696 ;; This function calls:
  6697 ;;		Nothing
  6698 ;; This function is called by:
  6699 ;;		_InitADC
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	text46
  6704  001AAE                     __ptext46:
  6705                           	opt stack 0
  6706  001AAE                     _ADC_ConversionInt:
  6707                           	opt stack 16
  6708                           
  6709                           ; BSR set to: 0
  6710                           ;incstack = 0
  6711                           ;ADC_ConversionInt@state stored from wreg
  6712  001AAE  0100               	movlb	0	; () banked
  6713  001AB0  6FB5               	movwf	ADC_ConversionInt@state& (0+255),b
  6714                           
  6715                           ;ADC.c: 171: if(state)
  6716  001AB2  51B5               	movf	ADC_ConversionInt@state& (0+255),w,b
  6717  001AB4  E002               	bz	l1094
  6718                           
  6719                           ; BSR set to: 0
  6720                           ;ADC.c: 172: {
  6721                           ;ADC.c: 174: PIE1bits.ADIE = 1;
  6722  001AB6  8C9D               	bsf	3997,6,c	;volatile
  6723                           
  6724                           ;ADC.c: 175: }
  6725  001AB8  0012               	return	
  6726  001ABA                     l1094:
  6727                           
  6728                           ; BSR set to: 0
  6729                           ;ADC.c: 176: else
  6730                           ;ADC.c: 177: {
  6731                           ;ADC.c: 179: PIE1bits.ADIE = 0;
  6732  001ABA  9C9D               	bcf	3997,6,c	;volatile
  6733                           
  6734                           ; BSR set to: 0
  6735  001ABC  0012               	return		;funcret
  6736  001ABE                     __end_of_ADC_ConversionInt:
  6737                           	opt stack 0
  6738                           tblptru	equ	0xFF8
  6739                           tblptrh	equ	0xFF7
  6740                           tblptrl	equ	0xFF6
  6741                           tablat	equ	0xFF5
  6742                           prodh	equ	0xFF4
  6743                           prodl	equ	0xFF3
  6744                           intcon	equ	0xFF2
  6745                           intcon2	equ	0xFF1
  6746                           intcon3	equ	0xFF0
  6747                           postinc0	equ	0xFEE
  6748                           wreg	equ	0xFE8
  6749                           postdec1	equ	0xFE5
  6750                           fsr1l	equ	0xFE1
  6751                           postinc2	equ	0xFDE
  6752                           postdec2	equ	0xFDD
  6753                           fsr2h	equ	0xFDA
  6754                           fsr2l	equ	0xFD9
  6755                           status	equ	0xFD8
  6756                           
  6757 ;; *************** function _ADC_ChangeChannel *****************
  6758 ;; Defined at:
  6759 ;;		line 107 in file "ADC.c"
  6760 ;; Parameters:    Size  Location     Type
  6761 ;;		None
  6762 ;; Auto vars:     Size  Location     Type
  6763 ;;		None
  6764 ;; Return value:  Size  Location     Type
  6765 ;;		None               void
  6766 ;; Registers used:
  6767 ;;		wreg, status,2, status,0
  6768 ;; Tracked objects:
  6769 ;;		On entry : 0/0
  6770 ;;		On exit  : 0/0
  6771 ;;		Unchanged: 0/0
  6772 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6773 ;;      Params:         0       0       0       0       0
  6774 ;;      Locals:         0       0       0       0       0
  6775 ;;      Temps:          0       0       0       0       0
  6776 ;;      Totals:         0       0       0       0       0
  6777 ;;Total ram usage:        0 bytes
  6778 ;; Hardware stack levels used:    1
  6779 ;; Hardware stack levels required when called:   12
  6780 ;; This function calls:
  6781 ;;		Nothing
  6782 ;; This function is called by:
  6783 ;;		_InitADC
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text47
  6788  0018D6                     __ptext47:
  6789                           	opt stack 0
  6790  0018D6                     _ADC_ChangeChannel:
  6791                           	opt stack 16
  6792                           
  6793                           ;ADC.c: 109: if(ADC_CurrentSource == 10)
  6794                           
  6795                           ; BSR set to: 0
  6796                           ;incstack = 0
  6797  0018D6  0E0A               	movlw	10
  6798  0018D8  186D               	xorwf	_ADC_CurrentSource,w,c
  6799  0018DA  E107               	bnz	l4654
  6800                           
  6801                           ;ADC.c: 110: {
  6802                           ;ADC.c: 111: ADC_CurrentSource = 11;
  6803  0018DC  0E0B               	movlw	11
  6804  0018DE  6E6D               	movwf	_ADC_CurrentSource,c
  6805                           
  6806                           ;ADC.c: 112: ADCON0bits.CHS = 1;
  6807  0018E0  50C2               	movf	4034,w,c	;volatile
  6808  0018E2  0BC3               	andlw	-61
  6809  0018E4  0904               	iorlw	4
  6810  0018E6  6EC2               	movwf	4034,c	;volatile
  6811                           
  6812                           ;ADC.c: 113: }
  6813  0018E8  0012               	return	
  6814  0018EA                     l4654:
  6815                           
  6816                           ;ADC.c: 114: else
  6817                           ;ADC.c: 115: {
  6818                           ;ADC.c: 116: ADC_CurrentSource = 10;
  6819  0018EA  0E0A               	movlw	10
  6820  0018EC  6E6D               	movwf	_ADC_CurrentSource,c
  6821                           
  6822                           ;ADC.c: 117: ADCON0bits.CHS = 0;
  6823  0018EE  0EC3               	movlw	-61
  6824  0018F0  16C2               	andwf	4034,f,c	;volatile
  6825  0018F2  0CC3               	retlw	195	;funcret
  6826  0018F4                     __end_of_ADC_ChangeChannel:
  6827                           	opt stack 0
  6828                           tblptru	equ	0xFF8
  6829                           tblptrh	equ	0xFF7
  6830                           tblptrl	equ	0xFF6
  6831                           tablat	equ	0xFF5
  6832                           prodh	equ	0xFF4
  6833                           prodl	equ	0xFF3
  6834                           intcon	equ	0xFF2
  6835                           intcon2	equ	0xFF1
  6836                           intcon3	equ	0xFF0
  6837                           postinc0	equ	0xFEE
  6838                           wreg	equ	0xFE8
  6839                           postdec1	equ	0xFE5
  6840                           fsr1l	equ	0xFE1
  6841                           postinc2	equ	0xFDE
  6842                           postdec2	equ	0xFDD
  6843                           fsr2h	equ	0xFDA
  6844                           fsr2l	equ	0xFD9
  6845                           status	equ	0xFD8
  6846                           
  6847 ;; *************** function _IR_ReadReceiver *****************
  6848 ;; Defined at:
  6849 ;;		line 82 in file "IR.c"
  6850 ;; Parameters:    Size  Location     Type
  6851 ;;		None
  6852 ;; Auto vars:     Size  Location     Type
  6853 ;;  value           1   53[BANK0 ] unsigned char 
  6854 ;; Return value:  Size  Location     Type
  6855 ;;                  1    wreg      unsigned char 
  6856 ;; Registers used:
  6857 ;;		wreg, status,2, status,0
  6858 ;; Tracked objects:
  6859 ;;		On entry : F/0
  6860 ;;		On exit  : F/0
  6861 ;;		Unchanged: 0/0
  6862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6863 ;;      Params:         0       0       0       0       0
  6864 ;;      Locals:         0       1       0       0       0
  6865 ;;      Temps:          0       0       0       0       0
  6866 ;;      Totals:         0       1       0       0       0
  6867 ;;Total ram usage:        1 bytes
  6868 ;; Hardware stack levels used:    1
  6869 ;; Hardware stack levels required when called:   12
  6870 ;; This function calls:
  6871 ;;		Nothing
  6872 ;; This function is called by:
  6873 ;;		_Init_System
  6874 ;; This function uses a non-reentrant model
  6875 ;;
  6876                           
  6877                           	psect	text48
  6878  0017D2                     __ptext48:
  6879                           	opt stack 0
  6880  0017D2                     _IR_ReadReceiver:
  6881                           	opt stack 17
  6882                           
  6883                           ; BSR set to: 0
  6884                           ;IR.c: 84: unsigned char value = PORTB;
  6885                           
  6886                           ;incstack = 0
  6887  0017D2  CF81 F0B5          	movff	3969,IR_ReadReceiver@value	;volatile
  6888                           
  6889                           ;IR.c: 86: if(value & 0x10)
  6890  0017D6  A9B5               	btfss	IR_ReadReceiver@value& (0+255),4,b
  6891  0017D8  D007               	goto	l5088
  6892                           
  6893                           ; BSR set to: 0
  6894                           ;IR.c: 87: {
  6895                           ;IR.c: 88: if(IRValue_prev == 0)
  6896  0017DA  51C6               	movf	_IRValue_prev& (0+255),w,b
  6897  0017DC  E102               	bnz	l566
  6898                           
  6899                           ; BSR set to: 0
  6900                           ;IR.c: 89: {
  6901                           ;IR.c: 90: IRChange = 1;
  6902  0017DE  0E01               	movlw	1
  6903  0017E0  6E67               	movwf	_IRChange,c
  6904  0017E2                     l566:
  6905                           
  6906                           ; BSR set to: 0
  6907                           ;IR.c: 91: }
  6908                           ;IR.c: 92: IRValue_prev = 1;
  6909  0017E2  0E01               	movlw	1
  6910  0017E4  6FC6               	movwf	_IRValue_prev& (0+255),b
  6911                           
  6912                           ; BSR set to: 0
  6913                           ;IR.c: 93: return 1;
  6914  0017E6  0C01               	retlw	1
  6915  0017E8                     l5088:
  6916                           
  6917                           ; BSR set to: 0
  6918                           ;IR.c: 94: }
  6919                           ;IR.c: 96: if(IRValue_prev == 1)
  6920  0017E8  05C6               	decf	_IRValue_prev& (0+255),w,b
  6921  0017EA  E102               	bnz	l5092
  6922                           
  6923                           ; BSR set to: 0
  6924                           ;IR.c: 97: {
  6925                           ;IR.c: 98: IRChange = 1;
  6926  0017EC  0E01               	movlw	1
  6927  0017EE  6E67               	movwf	_IRChange,c
  6928  0017F0                     l5092:
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;IR.c: 99: }
  6932                           ;IR.c: 100: IRValue_prev = 0;
  6933  0017F0  6BC6               	clrf	_IRValue_prev& (0+255),b
  6934                           
  6935                           ; BSR set to: 0
  6936                           
  6937                           ; BSR set to: 0
  6938                           ;IR.c: 101: return 0;
  6939  0017F2  0C00               	retlw	0	;funcret
  6940  0017F4                     __end_of_IR_ReadReceiver:
  6941                           	opt stack 0
  6942                           tblptru	equ	0xFF8
  6943                           tblptrh	equ	0xFF7
  6944                           tblptrl	equ	0xFF6
  6945                           tablat	equ	0xFF5
  6946                           prodh	equ	0xFF4
  6947                           prodl	equ	0xFF3
  6948                           intcon	equ	0xFF2
  6949                           intcon2	equ	0xFF1
  6950                           intcon3	equ	0xFF0
  6951                           postinc0	equ	0xFEE
  6952                           wreg	equ	0xFE8
  6953                           postdec1	equ	0xFE5
  6954                           fsr1l	equ	0xFE1
  6955                           postinc2	equ	0xFDE
  6956                           postdec2	equ	0xFDD
  6957                           fsr2h	equ	0xFDA
  6958                           fsr2l	equ	0xFD9
  6959                           status	equ	0xFD8
  6960                           
  6961 ;; *************** function _Init_App *****************
  6962 ;; Defined at:
  6963 ;;		line 72 in file "USER.c"
  6964 ;; Parameters:    Size  Location     Type
  6965 ;;		None
  6966 ;; Auto vars:     Size  Location     Type
  6967 ;;		None
  6968 ;; Return value:  Size  Location     Type
  6969 ;;		None               void
  6970 ;; Registers used:
  6971 ;;		wreg, status,2
  6972 ;; Tracked objects:
  6973 ;;		On entry : 0/0
  6974 ;;		On exit  : 0/0
  6975 ;;		Unchanged: 0/0
  6976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6977 ;;      Params:         0       0       0       0       0
  6978 ;;      Locals:         0       0       0       0       0
  6979 ;;      Temps:          0       0       0       0       0
  6980 ;;      Totals:         0       0       0       0       0
  6981 ;;Total ram usage:        0 bytes
  6982 ;; Hardware stack levels used:    1
  6983 ;; Hardware stack levels required when called:   12
  6984 ;; This function calls:
  6985 ;;		Nothing
  6986 ;; This function is called by:
  6987 ;;		_main
  6988 ;; This function uses a non-reentrant model
  6989 ;;
  6990                           
  6991                           	psect	text49
  6992  0014C6                     __ptext49:
  6993                           	opt stack 0
  6994  0014C6                     _Init_App:
  6995                           	opt stack 18
  6996                           
  6997                           ;USER.c: 74: LATA = 0;
  6998                           
  6999                           ; BSR set to: 0
  7000                           ;incstack = 0
  7001  0014C6  6A89               	clrf	3977,c	;volatile
  7002                           
  7003                           ;USER.c: 75: LATB = 0;
  7004  0014C8  6A8A               	clrf	3978,c	;volatile
  7005                           
  7006                           ;USER.c: 76: LATC = 0;
  7007  0014CA  6A8B               	clrf	3979,c	;volatile
  7008                           
  7009                           ;USER.c: 78: ADCON1bits.PCFG = 0b1101;
  7010  0014CC  50C1               	movf	4033,w,c	;volatile
  7011  0014CE  0BF0               	andlw	-16
  7012  0014D0  090D               	iorlw	13
  7013  0014D2  6EC1               	movwf	4033,c	;volatile
  7014                           
  7015                           ;USER.c: 81: TRISCbits.TRISC0 = 1;
  7016  0014D4  8094               	bsf	3988,0,c	;volatile
  7017                           
  7018                           ;USER.c: 82: TRISCbits.TRISC1 = 1;
  7019  0014D6  8294               	bsf	3988,1,c	;volatile
  7020                           
  7021                           ;USER.c: 85: TRISAbits.TRISA0 = 1;
  7022  0014D8  8092               	bsf	3986,0,c	;volatile
  7023                           
  7024                           ;USER.c: 89: TRISAbits.TRISA1 = 1;
  7025  0014DA  8292               	bsf	3986,1,c	;volatile
  7026                           
  7027                           ;USER.c: 92: TRISAbits.TRISA2 = 0;
  7028  0014DC  9492               	bcf	3986,2,c	;volatile
  7029                           
  7030                           ;USER.c: 95: TRISAbits.TRISA5 = 0;
  7031  0014DE  9A92               	bcf	3986,5,c	;volatile
  7032                           
  7033                           ;USER.c: 98: TRISBbits.TRISB1 = 1;
  7034  0014E0  8293               	bsf	3987,1,c	;volatile
  7035                           
  7036                           ;USER.c: 99: TRISBbits.TRISB2 = 1;
  7037  0014E2  8493               	bsf	3987,2,c	;volatile
  7038                           
  7039                           ;USER.c: 103: TRISBbits.TRISB3 = 0;
  7040  0014E4  9693               	bcf	3987,3,c	;volatile
  7041                           
  7042                           ;USER.c: 106: TRISCbits.TRISC2 = 0;
  7043  0014E6  9494               	bcf	3988,2,c	;volatile
  7044                           
  7045                           ;USER.c: 110: TRISCbits.TRISC3 = 1;
  7046  0014E8  8694               	bsf	3988,3,c	;volatile
  7047                           
  7048                           ;USER.c: 113: TRISCbits.TRISC5 = 1;
  7049  0014EA  8A94               	bsf	3988,5,c	;volatile
  7050                           
  7051                           ;USER.c: 117: TRISCbits.TRISC4 = 0;
  7052  0014EC  9894               	bcf	3988,4,c	;volatile
  7053                           
  7054                           ;USER.c: 121: TRISBbits.TRISB0 = 1;
  7055  0014EE  8093               	bsf	3987,0,c	;volatile
  7056                           
  7057                           ;USER.c: 122: TRISBbits.TRISB4 = 1;
  7058  0014F0  8893               	bsf	3987,4,c	;volatile
  7059                           
  7060                           ;USER.c: 126: TRISBbits.TRISB5 = 1;
  7061  0014F2  8A93               	bsf	3987,5,c	;volatile
  7062                           
  7063                           ;USER.c: 130: TRISAbits.TRISA3 = 1;
  7064  0014F4  8692               	bsf	3986,3,c	;volatile
  7065                           
  7066                           ;USER.c: 142: TRISCbits.TRISC6 = 0;
  7067  0014F6  9C94               	bcf	3988,6,c	;volatile
  7068                           
  7069                           ;USER.c: 143: TRISCbits.TRISC7 = 0;
  7070  0014F8  9E94               	bcf	3988,7,c	;volatile
  7071  0014FA  0012               	return		;funcret
  7072  0014FC                     __end_of_Init_App:
  7073                           	opt stack 0
  7074                           tblptru	equ	0xFF8
  7075                           tblptrh	equ	0xFF7
  7076                           tblptrl	equ	0xFF6
  7077                           tablat	equ	0xFF5
  7078                           prodh	equ	0xFF4
  7079                           prodl	equ	0xFF3
  7080                           intcon	equ	0xFF2
  7081                           intcon2	equ	0xFF1
  7082                           intcon3	equ	0xFF0
  7083                           postinc0	equ	0xFEE
  7084                           wreg	equ	0xFE8
  7085                           postdec1	equ	0xFE5
  7086                           fsr1l	equ	0xFE1
  7087                           postinc2	equ	0xFDE
  7088                           postdec2	equ	0xFDD
  7089                           fsr2h	equ	0xFDA
  7090                           fsr2l	equ	0xFD9
  7091                           status	equ	0xFD8
  7092                           
  7093 ;; *************** function _IR_LoadCode *****************
  7094 ;; Defined at:
  7095 ;;		line 131 in file "IR.c"
  7096 ;; Parameters:    Size  Location     Type
  7097 ;;		None
  7098 ;; Auto vars:     Size  Location     Type
  7099 ;;  HighBound       3   31[BANK1 ] unsigned char 
  7100 ;;  LowBound        3   28[BANK1 ] unsigned char 
  7101 ;;  High2           3   24[BANK1 ] unsigned char 
  7102 ;;  Low2            3   21[BANK1 ] unsigned char 
  7103 ;;  High1           3   17[BANK1 ] unsigned char 
  7104 ;;  Low1            3   14[BANK1 ] unsigned char 
  7105 ;;  CodeSize2       1   27[BANK1 ] unsigned char 
  7106 ;;  CodeSize1       1   20[BANK1 ] unsigned char 
  7107 ;; Return value:  Size  Location     Type
  7108 ;;		None               void
  7109 ;; Registers used:
  7110 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7111 ;; Tracked objects:
  7112 ;;		On entry : F/0
  7113 ;;		On exit  : F/1
  7114 ;;		Unchanged: 0/0
  7115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7116 ;;      Params:         0       0       0       0       0
  7117 ;;      Locals:         0       0      20       0       0
  7118 ;;      Temps:          0       0       0       0       0
  7119 ;;      Totals:         0       0      20       0       0
  7120 ;;Total ram usage:       20 bytes
  7121 ;; Hardware stack levels used:    1
  7122 ;; Hardware stack levels required when called:   14
  7123 ;; This function calls:
  7124 ;;		_IR_CalculateCodesize
  7125 ;;		___ftge
  7126 ;;		___ftmul
  7127 ;;		___fttol
  7128 ;;		___lwtoft
  7129 ;; This function is called by:
  7130 ;;		_main
  7131 ;; This function uses a non-reentrant model
  7132 ;;
  7133                           
  7134                           	psect	text50
  7135  003782                     __ptext50:
  7136                           	opt stack 0
  7137  003782                     _IR_LoadCode:
  7138                           	opt stack 16
  7139                           
  7140                           ; BSR set to: 0
  7141                           ;IR.c: 134: double High1 = 0.0;
  7142                           
  7143                           ;incstack = 0
  7144  003782  0101               	movlb	1	; () banked
  7145  003784  6B98               	clrf	IR_LoadCode@High1& (0+255),b
  7146  003786  6B99               	clrf	(IR_LoadCode@High1+1)& (0+255),b
  7147  003788  6B9A               	clrf	(IR_LoadCode@High1+2)& (0+255),b
  7148                           
  7149                           ;IR.c: 135: double Low2 = 0.0;
  7150  00378A  6B9C               	clrf	IR_LoadCode@Low2& (0+255),b
  7151  00378C  6B9D               	clrf	(IR_LoadCode@Low2+1)& (0+255),b
  7152  00378E  6B9E               	clrf	(IR_LoadCode@Low2+2)& (0+255),b
  7153                           
  7154                           ;IR.c: 136: double High2 = 0.0;
  7155  003790  6B9F               	clrf	IR_LoadCode@High2& (0+255),b
  7156  003792  6BA0               	clrf	(IR_LoadCode@High2+1)& (0+255),b
  7157  003794  6BA1               	clrf	(IR_LoadCode@High2+2)& (0+255),b
  7158                           
  7159                           ;IR.c: 137: double LowBound = 0.0;
  7160  003796  6BA3               	clrf	IR_LoadCode@LowBound& (0+255),b
  7161  003798  6BA4               	clrf	(IR_LoadCode@LowBound+1)& (0+255),b
  7162  00379A  6BA5               	clrf	(IR_LoadCode@LowBound+2)& (0+255),b
  7163                           
  7164                           ;IR.c: 138: double HighBound = 0.0;
  7165  00379C  6BA6               	clrf	IR_LoadCode@HighBound& (0+255),b
  7166  00379E  6BA7               	clrf	(IR_LoadCode@HighBound+1)& (0+255),b
  7167  0037A0  6BA8               	clrf	(IR_LoadCode@HighBound+2)& (0+255),b
  7168                           
  7169                           ; BSR set to: 1
  7170                           ;IR.c: 139: unsigned char CodeSize1;
  7171                           ;IR.c: 140: unsigned char CodeSize2;
  7172                           ;IR.c: 142: Low1 = (double)IR_SavedTiming0[0] * (1.0 - 0.3);
  7173  0037A2  6AF6               	clrf	tblptrl,c
  7174  0037A4                     	if	1	;There is more than 1 active tblptr byte
  7175  0037A4  0E24               	movlw	36
  7176  0037A6  6EF7               	movwf	tblptrh,c
  7177  0037A8                     	endif
  7178  0037A8                     	if	0	;There are less than 3 active tblptr bytes
  7179  0037A8                     	endif
  7180  0037A8  0009               	tblrd		*+
  7181  0037AA  CFF5 F0BD          	movff	tablat,___lwtoft@c
  7182  0037AE  000A               	tblrd		*-
  7183  0037B0  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  7184  0037B4  EC7C  F00B         	call	___lwtoft	;wreg free
  7185  0037B8  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  7186  0037BC  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  7187  0037C0  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  7188  0037C4  0E33               	movlw	51
  7189  0037C6  0101               	movlb	1	; () banked
  7190  0037C8  6F8A               	movwf	___ftmul@f2& (0+255),b
  7191  0037CA  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  7192  0037CC  0E3F               	movlw	63
  7193  0037CE  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  7194  0037D0  ECB8  F002         	call	___ftmul	;wreg free
  7195  0037D4  C187  F195         	movff	?___ftmul,IR_LoadCode@Low1
  7196  0037D8  C188  F196         	movff	?___ftmul+1,IR_LoadCode@Low1+1
  7197  0037DC  C189  F197         	movff	?___ftmul+2,IR_LoadCode@Low1+2
  7198                           
  7199                           ;IR.c: 143: High1= (double)IR_SavedTiming0[0] * (1.0 + 0.3);
  7200  0037E0  6AF6               	clrf	tblptrl,c
  7201  0037E2                     	if	1	;There is more than 1 active tblptr byte
  7202  0037E2  0E24               	movlw	36
  7203  0037E4  6EF7               	movwf	tblptrh,c
  7204  0037E6                     	endif
  7205  0037E6                     	if	0	;There are less than 3 active tblptr bytes
  7206  0037E6                     	endif
  7207  0037E6  0009               	tblrd		*+
  7208  0037E8  CFF5 F0BD          	movff	tablat,___lwtoft@c
  7209  0037EC  000A               	tblrd		*-
  7210  0037EE  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  7211  0037F2  EC7C  F00B         	call	___lwtoft	;wreg free
  7212  0037F6  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  7213  0037FA  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  7214  0037FE  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  7215  003802  0E66               	movlw	102
  7216  003804  0101               	movlb	1	; () banked
  7217  003806  6F8A               	movwf	___ftmul@f2& (0+255),b
  7218  003808  0EA6               	movlw	166
  7219  00380A  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  7220  00380C  0E3F               	movlw	63
  7221  00380E  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  7222  003810  ECB8  F002         	call	___ftmul	;wreg free
  7223  003814  C187  F198         	movff	?___ftmul,IR_LoadCode@High1
  7224  003818  C188  F199         	movff	?___ftmul+1,IR_LoadCode@High1+1
  7225  00381C  C189  F19A         	movff	?___ftmul+2,IR_LoadCode@High1+2
  7226                           
  7227                           ;IR.c: 145: Low2 = (double)IR_SavedTiming1[0] * (1.0 - 0.3);
  7228  003820  0EC0               	movlw	192
  7229  003822  6EF6               	movwf	tblptrl,c
  7230  003824                     	if	1	;There is more than 1 active tblptr byte
  7231  003824  0E24               	movlw	36
  7232  003826  6EF7               	movwf	tblptrh,c
  7233  003828                     	endif
  7234  003828                     	if	0	;There are less than 3 active tblptr bytes
  7235  003828                     	endif
  7236  003828  0009               	tblrd		*+
  7237  00382A  CFF5 F0BD          	movff	tablat,___lwtoft@c
  7238  00382E  000A               	tblrd		*-
  7239  003830  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  7240  003834  EC7C  F00B         	call	___lwtoft	;wreg free
  7241  003838  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  7242  00383C  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  7243  003840  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  7244  003844  0E33               	movlw	51
  7245  003846  0101               	movlb	1	; () banked
  7246  003848  6F8A               	movwf	___ftmul@f2& (0+255),b
  7247  00384A  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  7248  00384C  0E3F               	movlw	63
  7249  00384E  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  7250  003850  ECB8  F002         	call	___ftmul	;wreg free
  7251  003854  C187  F19C         	movff	?___ftmul,IR_LoadCode@Low2
  7252  003858  C188  F19D         	movff	?___ftmul+1,IR_LoadCode@Low2+1
  7253  00385C  C189  F19E         	movff	?___ftmul+2,IR_LoadCode@Low2+2
  7254                           
  7255                           ;IR.c: 146: High2= (double)IR_SavedTiming1[0] * (1.0 + 0.3);
  7256  003860  0EC0               	movlw	192
  7257  003862  6EF6               	movwf	tblptrl,c
  7258  003864                     	if	1	;There is more than 1 active tblptr byte
  7259  003864  0E24               	movlw	36
  7260  003866  6EF7               	movwf	tblptrh,c
  7261  003868                     	endif
  7262  003868                     	if	0	;There are less than 3 active tblptr bytes
  7263  003868                     	endif
  7264  003868  0009               	tblrd		*+
  7265  00386A  CFF5 F0BD          	movff	tablat,___lwtoft@c
  7266  00386E  000A               	tblrd		*-
  7267  003870  CFF5 F0BE          	movff	tablat,___lwtoft@c+1
  7268  003874  EC7C  F00B         	call	___lwtoft	;wreg free
  7269  003878  C0BD  F187         	movff	?___lwtoft,___ftmul@f1
  7270  00387C  C0BE  F188         	movff	?___lwtoft+1,___ftmul@f1+1
  7271  003880  C0BF  F189         	movff	?___lwtoft+2,___ftmul@f1+2
  7272  003884  0E66               	movlw	102
  7273  003886  0101               	movlb	1	; () banked
  7274  003888  6F8A               	movwf	___ftmul@f2& (0+255),b
  7275  00388A  0EA6               	movlw	166
  7276  00388C  6F8B               	movwf	(___ftmul@f2+1)& (0+255),b
  7277  00388E  0E3F               	movlw	63
  7278  003890  6F8C               	movwf	(___ftmul@f2+2)& (0+255),b
  7279  003892  ECB8  F002         	call	___ftmul	;wreg free
  7280  003896  C187  F19F         	movff	?___ftmul,IR_LoadCode@High2
  7281  00389A  C188  F1A0         	movff	?___ftmul+1,IR_LoadCode@High2+1
  7282  00389E  C189  F1A1         	movff	?___ftmul+2,IR_LoadCode@High2+2
  7283                           
  7284                           ;IR.c: 148: LowBound = Low1;
  7285  0038A2  C195  F1A3         	movff	IR_LoadCode@Low1,IR_LoadCode@LowBound
  7286  0038A6  C196  F1A4         	movff	IR_LoadCode@Low1+1,IR_LoadCode@LowBound+1
  7287  0038AA  C197  F1A5         	movff	IR_LoadCode@Low1+2,IR_LoadCode@LowBound+2
  7288                           
  7289                           ;IR.c: 149: if(Low2 < LowBound)
  7290  0038AE  C19C  F0B5         	movff	IR_LoadCode@Low2,___ftge@ff1
  7291  0038B2  C19D  F0B6         	movff	IR_LoadCode@Low2+1,___ftge@ff1+1
  7292  0038B6  C19E  F0B7         	movff	IR_LoadCode@Low2+2,___ftge@ff1+2
  7293  0038BA  C1A3  F0B8         	movff	IR_LoadCode@LowBound,___ftge@ff2
  7294  0038BE  C1A4  F0B9         	movff	IR_LoadCode@LowBound+1,___ftge@ff2+1
  7295  0038C2  C1A5  F0BA         	movff	IR_LoadCode@LowBound+2,___ftge@ff2+2
  7296  0038C6  EC3C  F009         	call	___ftge	;wreg free
  7297  0038CA  E206               	bc	l6824
  7298                           
  7299                           ; BSR set to: 0
  7300                           ;IR.c: 150: {
  7301                           ;IR.c: 151: LowBound = Low2;
  7302  0038CC  C19C  F1A3         	movff	IR_LoadCode@Low2,IR_LoadCode@LowBound
  7303  0038D0  C19D  F1A4         	movff	IR_LoadCode@Low2+1,IR_LoadCode@LowBound+1
  7304  0038D4  C19E  F1A5         	movff	IR_LoadCode@Low2+2,IR_LoadCode@LowBound+2
  7305  0038D8                     l6824:
  7306                           
  7307                           ; BSR set to: 0
  7308                           ;IR.c: 152: }
  7309                           ;IR.c: 153: if(LowBound < 6000)
  7310  0038D8  C1A3  F0B5         	movff	IR_LoadCode@LowBound,___ftge@ff1
  7311  0038DC  C1A4  F0B6         	movff	IR_LoadCode@LowBound+1,___ftge@ff1+1
  7312  0038E0  C1A5  F0B7         	movff	IR_LoadCode@LowBound+2,___ftge@ff1+2
  7313  0038E4  0E80               	movlw	128
  7314  0038E6  6FB8               	movwf	___ftge@ff2& (0+255),b
  7315  0038E8  0EBB               	movlw	187
  7316  0038EA  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  7317  0038EC  0E45               	movlw	69
  7318  0038EE  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  7319  0038F0  EC3C  F009         	call	___ftge	;wreg free
  7320  0038F4  E207               	bc	l6828
  7321                           
  7322                           ; BSR set to: 0
  7323                           ;IR.c: 154: {
  7324                           ;IR.c: 155: LowBound = 6000;
  7325  0038F6  0E80               	movlw	128
  7326  0038F8  0101               	movlb	1	; () banked
  7327  0038FA  6FA3               	movwf	IR_LoadCode@LowBound& (0+255),b
  7328  0038FC  0EBB               	movlw	187
  7329  0038FE  6FA4               	movwf	(IR_LoadCode@LowBound+1)& (0+255),b
  7330  003900  0E45               	movlw	69
  7331  003902  6FA5               	movwf	(IR_LoadCode@LowBound+2)& (0+255),b
  7332  003904                     l6828:
  7333                           
  7334                           ;IR.c: 156: }
  7335                           ;IR.c: 158: HighBound = High1;
  7336  003904  C198  F1A6         	movff	IR_LoadCode@High1,IR_LoadCode@HighBound
  7337  003908  C199  F1A7         	movff	IR_LoadCode@High1+1,IR_LoadCode@HighBound+1
  7338  00390C  C19A  F1A8         	movff	IR_LoadCode@High1+2,IR_LoadCode@HighBound+2
  7339                           
  7340                           ;IR.c: 159: if(High2 < HighBound)
  7341  003910  C19F  F0B5         	movff	IR_LoadCode@High2,___ftge@ff1
  7342  003914  C1A0  F0B6         	movff	IR_LoadCode@High2+1,___ftge@ff1+1
  7343  003918  C1A1  F0B7         	movff	IR_LoadCode@High2+2,___ftge@ff1+2
  7344  00391C  C1A6  F0B8         	movff	IR_LoadCode@HighBound,___ftge@ff2
  7345  003920  C1A7  F0B9         	movff	IR_LoadCode@HighBound+1,___ftge@ff2+1
  7346  003924  C1A8  F0BA         	movff	IR_LoadCode@HighBound+2,___ftge@ff2+2
  7347  003928  EC3C  F009         	call	___ftge	;wreg free
  7348  00392C  E206               	bc	l6834
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;IR.c: 160: {
  7352                           ;IR.c: 161: HighBound = High2;
  7353  00392E  C19F  F1A6         	movff	IR_LoadCode@High2,IR_LoadCode@HighBound
  7354  003932  C1A0  F1A7         	movff	IR_LoadCode@High2+1,IR_LoadCode@HighBound+1
  7355  003936  C1A1  F1A8         	movff	IR_LoadCode@High2+2,IR_LoadCode@HighBound+2
  7356  00393A                     l6834:
  7357                           
  7358                           ; BSR set to: 0
  7359                           ;IR.c: 162: }
  7360                           ;IR.c: 163: if(HighBound < 10000)
  7361  00393A  C1A6  F0B5         	movff	IR_LoadCode@HighBound,___ftge@ff1
  7362  00393E  C1A7  F0B6         	movff	IR_LoadCode@HighBound+1,___ftge@ff1+1
  7363  003942  C1A8  F0B7         	movff	IR_LoadCode@HighBound+2,___ftge@ff1+2
  7364  003946  0E40               	movlw	64
  7365  003948  6FB8               	movwf	___ftge@ff2& (0+255),b
  7366  00394A  0E1C               	movlw	28
  7367  00394C  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  7368  00394E  0E46               	movlw	70
  7369  003950  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  7370  003952  EC3C  F009         	call	___ftge	;wreg free
  7371  003956  E207               	bc	l6838
  7372                           
  7373                           ; BSR set to: 0
  7374                           ;IR.c: 164: {
  7375                           ;IR.c: 165: HighBound = 10000;
  7376  003958  0E40               	movlw	64
  7377  00395A  0101               	movlb	1	; () banked
  7378  00395C  6FA6               	movwf	IR_LoadCode@HighBound& (0+255),b
  7379  00395E  0E1C               	movlw	28
  7380  003960  6FA7               	movwf	(IR_LoadCode@HighBound+1)& (0+255),b
  7381  003962  0E46               	movlw	70
  7382  003964  6FA8               	movwf	(IR_LoadCode@HighBound+2)& (0+255),b
  7383  003966                     l6838:
  7384                           
  7385                           ;IR.c: 166: }
  7386                           ;IR.c: 168: IR_SyncLow = (unsigned int) LowBound;
  7387  003966  C1A3  F0B5         	movff	IR_LoadCode@LowBound,___fttol@f1
  7388  00396A  C1A4  F0B6         	movff	IR_LoadCode@LowBound+1,___fttol@f1+1
  7389  00396E  C1A5  F0B7         	movff	IR_LoadCode@LowBound+2,___fttol@f1+2
  7390  003972  ECF9  F003         	call	___fttol	;wreg free
  7391  003976  C0B5  F060         	movff	?___fttol,_IR_SyncLow
  7392  00397A  C0B6  F061         	movff	?___fttol+1,_IR_SyncLow+1
  7393                           
  7394                           ;IR.c: 169: IR_SyncHigh = (unsigned int) HighBound;
  7395  00397E  C1A6  F0B5         	movff	IR_LoadCode@HighBound,___fttol@f1
  7396  003982  C1A7  F0B6         	movff	IR_LoadCode@HighBound+1,___fttol@f1+1
  7397  003986  C1A8  F0B7         	movff	IR_LoadCode@HighBound+2,___fttol@f1+2
  7398  00398A  ECF9  F003         	call	___fttol	;wreg free
  7399  00398E  C0B5  F05E         	movff	?___fttol,_IR_SyncHigh
  7400  003992  C0B6  F05F         	movff	?___fttol+1,_IR_SyncHigh+1
  7401                           
  7402                           ;IR.c: 171: CodeSize1 = IR_CalculateCodesize(&IR_SavedTiming0[0]);
  7403  003996  0100               	movlb	0	; () banked
  7404  003998  6BB5               	clrf	IR_CalculateCodesize@Code& (0+255),b
  7405  00399A  0E24               	movlw	36
  7406  00399C  6FB6               	movwf	(IR_CalculateCodesize@Code+1)& (0+255),b
  7407  00399E  6BB7               	clrf	(IR_CalculateCodesize@Code+2)& (0+255),b
  7408  0039A0  EC0A  F00A         	call	_IR_CalculateCodesize	;wreg free
  7409  0039A4  0101               	movlb	1	; () banked
  7410  0039A6  6F9B               	movwf	IR_LoadCode@CodeSize1& (0+255),b
  7411                           
  7412                           ; BSR set to: 1
  7413                           ;IR.c: 172: CodeSize2 = IR_CalculateCodesize(&IR_SavedTiming1[0]);
  7414  0039A8  0EC0               	movlw	192
  7415  0039AA  0100               	movlb	0	; () banked
  7416  0039AC  6FB5               	movwf	IR_CalculateCodesize@Code& (0+255),b
  7417  0039AE  0E24               	movlw	36
  7418  0039B0  6FB6               	movwf	(IR_CalculateCodesize@Code+1)& (0+255),b
  7419  0039B2  6BB7               	clrf	(IR_CalculateCodesize@Code+2)& (0+255),b
  7420  0039B4  EC0A  F00A         	call	_IR_CalculateCodesize	;wreg free
  7421  0039B8  0101               	movlb	1	; () banked
  7422  0039BA  6FA2               	movwf	IR_LoadCode@CodeSize2& (0+255),b
  7423                           
  7424                           ; BSR set to: 1
  7425                           ;IR.c: 174: IR_CodeSize = CodeSize1;
  7426  0039BC  C19B  F06A         	movff	IR_LoadCode@CodeSize1,_IR_CodeSize
  7427                           
  7428                           ; BSR set to: 1
  7429                           ;IR.c: 175: if(IR_CodeSize < CodeSize2)
  7430  0039C0  51A2               	movf	IR_LoadCode@CodeSize2& (0+255),w,b
  7431  0039C2  5C6A               	subwf	_IR_CodeSize,w,c
  7432  0039C4  E202               	bc	l6852
  7433                           
  7434                           ; BSR set to: 1
  7435                           ;IR.c: 176: {
  7436                           ;IR.c: 177: IR_CodeSize = CodeSize2;
  7437  0039C6  C1A2  F06A         	movff	IR_LoadCode@CodeSize2,_IR_CodeSize
  7438  0039CA                     l6852:
  7439                           
  7440                           ; BSR set to: 1
  7441                           ;IR.c: 178: }
  7442                           ;IR.c: 179: if(IR_CodeSize < 40)
  7443  0039CA  0E28               	movlw	40
  7444  0039CC  606A               	cpfslt	_IR_CodeSize,c
  7445  0039CE  0C28               	retlw	40
  7446                           
  7447                           ; BSR set to: 1
  7448                           ;IR.c: 180: {
  7449                           ;IR.c: 181: IR_CodeSize = 40;
  7450  0039D0  6E6A               	movwf	_IR_CodeSize,c
  7451                           
  7452                           ; BSR set to: 1
  7453  0039D2  0C28               	retlw	40	;funcret
  7454  0039D4                     __end_of_IR_LoadCode:
  7455                           	opt stack 0
  7456                           tblptru	equ	0xFF8
  7457                           tblptrh	equ	0xFF7
  7458                           tblptrl	equ	0xFF6
  7459                           tablat	equ	0xFF5
  7460                           prodh	equ	0xFF4
  7461                           prodl	equ	0xFF3
  7462                           intcon	equ	0xFF2
  7463                           intcon2	equ	0xFF1
  7464                           intcon3	equ	0xFF0
  7465                           postinc0	equ	0xFEE
  7466                           wreg	equ	0xFE8
  7467                           postdec1	equ	0xFE5
  7468                           fsr1l	equ	0xFE1
  7469                           postinc2	equ	0xFDE
  7470                           postdec2	equ	0xFDD
  7471                           fsr2h	equ	0xFDA
  7472                           fsr2l	equ	0xFD9
  7473                           status	equ	0xFD8
  7474                           
  7475 ;; *************** function ___lwtoft *****************
  7476 ;; Defined at:
  7477 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
  7478 ;; Parameters:    Size  Location     Type
  7479 ;;  c               2   61[BANK0 ] unsigned int 
  7480 ;; Auto vars:     Size  Location     Type
  7481 ;;		None
  7482 ;; Return value:  Size  Location     Type
  7483 ;;                  3   61[BANK0 ] float 
  7484 ;; Registers used:
  7485 ;;		wreg, status,2, status,0, cstack
  7486 ;; Tracked objects:
  7487 ;;		On entry : E/1
  7488 ;;		On exit  : F/0
  7489 ;;		Unchanged: 0/0
  7490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7491 ;;      Params:         0       3       0       0       0
  7492 ;;      Locals:         0       0       0       0       0
  7493 ;;      Temps:          0       0       0       0       0
  7494 ;;      Totals:         0       3       0       0       0
  7495 ;;Total ram usage:        3 bytes
  7496 ;; Hardware stack levels used:    1
  7497 ;; Hardware stack levels required when called:   13
  7498 ;; This function calls:
  7499 ;;		___ftpack
  7500 ;; This function is called by:
  7501 ;;		_RF_LoadCode
  7502 ;;		_IR_LoadCode
  7503 ;; This function uses a non-reentrant model
  7504 ;;
  7505                           
  7506                           	psect	text51
  7507  0016F8                     __ptext51:
  7508                           	opt stack 0
  7509  0016F8                     ___lwtoft:
  7510                           	opt stack 16
  7511                           
  7512                           ; BSR set to: 1
  7513                           ;incstack = 0
  7514  0016F8  C0BD  F0B5         	movff	___lwtoft@c,___ftpack@arg
  7515  0016FC  C0BE  F0B6         	movff	___lwtoft@c+1,___ftpack@arg+1
  7516  001700  0100               	movlb	0	; () banked
  7517  001702  6BB7               	clrf	(___ftpack@arg+2)& (0+255),b
  7518  001704  0E8E               	movlw	142
  7519  001706  6FB8               	movwf	___ftpack@exp& (0+255),b
  7520  001708  0E00               	movlw	0
  7521  00170A  6FB9               	movwf	___ftpack@sign& (0+255),b
  7522  00170C  EC5A  F007         	call	___ftpack	;wreg free
  7523  001710  C0B5  F0BD         	movff	?___ftpack,?___lwtoft
  7524  001714  C0B6  F0BE         	movff	?___ftpack+1,?___lwtoft+1
  7525  001718  C0B7  F0BF         	movff	?___ftpack+2,?___lwtoft+2
  7526                           
  7527                           ; BSR set to: 0
  7528  00171C  0012               	return		;funcret
  7529  00171E                     __end_of___lwtoft:
  7530                           	opt stack 0
  7531                           tblptru	equ	0xFF8
  7532                           tblptrh	equ	0xFF7
  7533                           tblptrl	equ	0xFF6
  7534                           tablat	equ	0xFF5
  7535                           prodh	equ	0xFF4
  7536                           prodl	equ	0xFF3
  7537                           intcon	equ	0xFF2
  7538                           intcon2	equ	0xFF1
  7539                           intcon3	equ	0xFF0
  7540                           postinc0	equ	0xFEE
  7541                           wreg	equ	0xFE8
  7542                           postdec1	equ	0xFE5
  7543                           fsr1l	equ	0xFE1
  7544                           postinc2	equ	0xFDE
  7545                           postdec2	equ	0xFDD
  7546                           fsr2h	equ	0xFDA
  7547                           fsr2l	equ	0xFD9
  7548                           status	equ	0xFD8
  7549                           
  7550 ;; *************** function ___fttol *****************
  7551 ;; Defined at:
  7552 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  7553 ;; Parameters:    Size  Location     Type
  7554 ;;  f1              3   53[BANK0 ] float 
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;  lval            4    1[BANK1 ] unsigned long 
  7557 ;;  exp1            1    5[BANK1 ] unsigned char 
  7558 ;;  sign1           1    0[BANK1 ] unsigned char 
  7559 ;; Return value:  Size  Location     Type
  7560 ;;                  4   53[BANK0 ] long 
  7561 ;; Registers used:
  7562 ;;		wreg, status,2, status,0
  7563 ;; Tracked objects:
  7564 ;;		On entry : E/0
  7565 ;;		On exit  : E/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7568 ;;      Params:         0       4       0       0       0
  7569 ;;      Locals:         0       0       6       0       0
  7570 ;;      Temps:          0       5       0       0       0
  7571 ;;      Totals:         0       9       6       0       0
  7572 ;;Total ram usage:       15 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:   12
  7575 ;; This function calls:
  7576 ;;		Nothing
  7577 ;; This function is called by:
  7578 ;;		_RF_LoadCode
  7579 ;;		_IR_LoadCode
  7580 ;; This function uses a non-reentrant model
  7581 ;;
  7582                           
  7583                           	psect	text52
  7584  0007F2                     __ptext52:
  7585                           	opt stack 0
  7586  0007F2                     ___fttol:
  7587                           	opt stack 17
  7588                           
  7589                           ; BSR set to: 0
  7590                           ;incstack = 0
  7591  0007F2  C0B7  F0B9         	movff	___fttol@f1+2,??___fttol
  7592  0007F6  0100               	movlb	0	; () banked
  7593  0007F8  6BBA               	clrf	(??___fttol+1)& (0+255),b
  7594  0007FA  6BBB               	clrf	(??___fttol+2)& (0+255),b
  7595  0007FC  35B6               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7596  0007FE  37B9               	rlcf	??___fttol& (0+255),f,b
  7597  000800  E301               	bnc	u7161
  7598  000802  81BA               	bsf	(??___fttol+1)& (0+255),0,b
  7599  000804                     u7161:
  7600  000804  51B9               	movf	??___fttol& (0+255),w,b
  7601  000806  0101               	movlb	1	; () banked
  7602  000808  6F8C               	movwf	___fttol@exp1& (0+255),b
  7603  00080A  518C               	movf	___fttol@exp1& (0+255),w,b
  7604  00080C  E106               	bnz	l6760
  7605  00080E                     l6758:
  7606                           
  7607                           ; BSR set to: 1
  7608  00080E  0100               	movlb	0	; () banked
  7609  000810  6BB5               	clrf	?___fttol& (0+255),b
  7610  000812  6BB6               	clrf	(?___fttol+1)& (0+255),b
  7611  000814  6BB7               	clrf	(?___fttol+2)& (0+255),b
  7612  000816  6BB8               	clrf	(?___fttol+3)& (0+255),b
  7613  000818  0012               	return	
  7614  00081A                     l6760:
  7615                           
  7616                           ; BSR set to: 1
  7617  00081A  0E17               	movlw	23
  7618  00081C  0100               	movlb	0	; () banked
  7619  00081E  6FB9               	movwf	??___fttol& (0+255),b
  7620  000820  C0B5  F0BA         	movff	___fttol@f1,??___fttol+1
  7621  000824  C0B6  F0BB         	movff	___fttol@f1+1,??___fttol+2
  7622  000828  C0B7  F0BC         	movff	___fttol@f1+2,??___fttol+3
  7623  00082C  29B9               	incf	??___fttol& (0+255),w,b
  7624  00082E  6FBD               	movwf	(??___fttol+4)& (0+255),b
  7625  000830  D004               	goto	u7180
  7626  000832                     u7185:
  7627  000832  90D8               	bcf	status,0,c
  7628  000834  33BC               	rrcf	(??___fttol+3)& (0+255),f,b
  7629  000836  33BB               	rrcf	(??___fttol+2)& (0+255),f,b
  7630  000838  33BA               	rrcf	(??___fttol+1)& (0+255),f,b
  7631  00083A                     u7180:
  7632  00083A  2FBD               	decfsz	(??___fttol+4)& (0+255),f,b
  7633  00083C  D7FA               	goto	u7185
  7634  00083E  0100               	movlb	0	; () banked
  7635  000840  51BA               	movf	(??___fttol+1)& (0+255),w,b
  7636  000842  0101               	movlb	1	; () banked
  7637  000844  6F87               	movwf	___fttol@sign1& (0+255),b
  7638                           
  7639                           ; BSR set to: 1
  7640  000846  0100               	movlb	0	; () banked
  7641  000848  8FB6               	bsf	(___fttol@f1+1)& (0+255),7,b
  7642                           
  7643                           ; BSR set to: 0
  7644  00084A  6BB7               	clrf	(___fttol@f1+2)& (0+255),b
  7645                           
  7646                           ; BSR set to: 0
  7647  00084C  51B5               	movf	___fttol@f1& (0+255),w,b
  7648  00084E  0101               	movlb	1	; () banked
  7649  000850  6F88               	movwf	___fttol@lval& (0+255),b
  7650  000852  0100               	movlb	0	; () banked
  7651  000854  51B6               	movf	(___fttol@f1+1)& (0+255),w,b
  7652  000856  0101               	movlb	1	; () banked
  7653  000858  6F89               	movwf	(___fttol@lval+1)& (0+255),b
  7654  00085A  0100               	movlb	0	; () banked
  7655  00085C  51B7               	movf	(___fttol@f1+2)& (0+255),w,b
  7656  00085E  0101               	movlb	1	; () banked
  7657  000860  6F8A               	movwf	(___fttol@lval+2)& (0+255),b
  7658  000862  6B8B               	clrf	(___fttol@lval+3)& (0+255),b
  7659                           
  7660                           ; BSR set to: 1
  7661  000864  0E8E               	movlw	142
  7662  000866  5F8C               	subwf	___fttol@exp1& (0+255),f,b
  7663                           
  7664                           ; BSR set to: 1
  7665  000868  AF8C               	btfss	___fttol@exp1& (0+255),7,b
  7666  00086A  D00C               	goto	l6780
  7667                           
  7668                           ; BSR set to: 1
  7669  00086C  518C               	movf	___fttol@exp1& (0+255),w,b
  7670  00086E  0A80               	xorlw	128
  7671  000870  0F8F               	addlw	143
  7672  000872  E3CD               	bnc	l6758
  7673  000874                     l6776:
  7674                           
  7675                           ; BSR set to: 1
  7676  000874  90D8               	bcf	status,0,c
  7677  000876  338B               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7678  000878  338A               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7679  00087A  3389               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7680  00087C  3388               	rrcf	___fttol@lval& (0+255),f,b
  7681                           
  7682                           ; BSR set to: 1
  7683  00087E  3F8C               	incfsz	___fttol@exp1& (0+255),f,b
  7684  000880  D7F9               	goto	l6776
  7685  000882  D00C               	goto	l6788
  7686  000884                     l6780:
  7687                           
  7688                           ; BSR set to: 1
  7689  000884  0E17               	movlw	23
  7690  000886  658C               	cpfsgt	___fttol@exp1& (0+255),b
  7691  000888  D007               	goto	l6786
  7692  00088A  D7C1               	goto	l6758
  7693  00088C                     l6784:
  7694                           
  7695                           ; BSR set to: 1
  7696  00088C  90D8               	bcf	status,0,c
  7697  00088E  3788               	rlcf	___fttol@lval& (0+255),f,b
  7698  000890  3789               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7699  000892  378A               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7700  000894  378B               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7701  000896  078C               	decf	___fttol@exp1& (0+255),f,b
  7702  000898                     l6786:
  7703                           
  7704                           ; BSR set to: 1
  7705  000898  518C               	movf	___fttol@exp1& (0+255),w,b
  7706  00089A  E1F8               	bnz	l6784
  7707  00089C                     l6788:
  7708                           
  7709                           ; BSR set to: 1
  7710  00089C  5187               	movf	___fttol@sign1& (0+255),w,b
  7711  00089E  E008               	bz	l6792
  7712                           
  7713                           ; BSR set to: 1
  7714  0008A0  1F8B               	comf	(___fttol@lval+3)& (0+255),f,b
  7715  0008A2  1F8A               	comf	(___fttol@lval+2)& (0+255),f,b
  7716  0008A4  1F89               	comf	(___fttol@lval+1)& (0+255),f,b
  7717  0008A6  6D88               	negf	___fttol@lval& (0+255),b
  7718  0008A8  0E00               	movlw	0
  7719  0008AA  2389               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7720  0008AC  238A               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7721  0008AE  238B               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7722  0008B0                     l6792:
  7723                           
  7724                           ; BSR set to: 1
  7725  0008B0  C188  F0B5         	movff	___fttol@lval,?___fttol
  7726  0008B4  C189  F0B6         	movff	___fttol@lval+1,?___fttol+1
  7727  0008B8  C18A  F0B7         	movff	___fttol@lval+2,?___fttol+2
  7728  0008BC  C18B  F0B8         	movff	___fttol@lval+3,?___fttol+3
  7729  0008C0  0012               	return		;funcret
  7730  0008C2                     __end_of___fttol:
  7731                           	opt stack 0
  7732                           tblptru	equ	0xFF8
  7733                           tblptrh	equ	0xFF7
  7734                           tblptrl	equ	0xFF6
  7735                           tablat	equ	0xFF5
  7736                           prodh	equ	0xFF4
  7737                           prodl	equ	0xFF3
  7738                           intcon	equ	0xFF2
  7739                           intcon2	equ	0xFF1
  7740                           intcon3	equ	0xFF0
  7741                           postinc0	equ	0xFEE
  7742                           wreg	equ	0xFE8
  7743                           postdec1	equ	0xFE5
  7744                           fsr1l	equ	0xFE1
  7745                           postinc2	equ	0xFDE
  7746                           postdec2	equ	0xFDD
  7747                           fsr2h	equ	0xFDA
  7748                           fsr2l	equ	0xFD9
  7749                           status	equ	0xFD8
  7750                           
  7751 ;; *************** function ___ftmul *****************
  7752 ;; Defined at:
  7753 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  7754 ;; Parameters:    Size  Location     Type
  7755 ;;  f1              3    0[BANK1 ] float 
  7756 ;;  f2              3    3[BANK1 ] float 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  f3_as_produc    3   11[BANK1 ] unsigned um
  7759 ;;  sign            1   10[BANK1 ] unsigned char 
  7760 ;;  exp             1    9[BANK1 ] unsigned char 
  7761 ;;  cntr            1    0        unsigned char 
  7762 ;; Return value:  Size  Location     Type
  7763 ;;                  3    0[BANK1 ] float 
  7764 ;; Registers used:
  7765 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  7766 ;; Tracked objects:
  7767 ;;		On entry : F/1
  7768 ;;		On exit  : E/0
  7769 ;;		Unchanged: 0/0
  7770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7771 ;;      Params:         0       0       6       0       0
  7772 ;;      Locals:         0       0       5       0       0
  7773 ;;      Temps:          0       0       3       0       0
  7774 ;;      Totals:         0       0      14       0       0
  7775 ;;Total ram usage:       14 bytes
  7776 ;; Hardware stack levels used:    1
  7777 ;; Hardware stack levels required when called:   13
  7778 ;; This function calls:
  7779 ;;		___ftpack
  7780 ;; This function is called by:
  7781 ;;		_RF_LoadCode
  7782 ;;		_IR_LoadCode
  7783 ;; This function uses a non-reentrant model
  7784 ;;
  7785                           
  7786                           	psect	text53
  7787  000570                     __ptext53:
  7788                           	opt stack 0
  7789  000570                     ___ftmul:
  7790                           	opt stack 16
  7791                           
  7792                           ; BSR set to: 1
  7793                           
  7794                           ;incstack = 0
  7795  000570  C189  F18D         	movff	___ftmul@f1+2,??___ftmul
  7796  000574  6B8E               	clrf	(??___ftmul+1)& (0+255),b
  7797  000576  6B8F               	clrf	(??___ftmul+2)& (0+255),b
  7798  000578  3588               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7799  00057A  378D               	rlcf	??___ftmul& (0+255),f,b
  7800  00057C  E301               	bnc	u7111
  7801  00057E  818E               	bsf	(??___ftmul+1)& (0+255),0,b
  7802  000580                     u7111:
  7803  000580  518D               	movf	??___ftmul& (0+255),w,b
  7804  000582  6F90               	movwf	___ftmul@exp& (0+255),b
  7805  000584  5190               	movf	___ftmul@exp& (0+255),w,b
  7806  000586  E104               	bnz	l6722
  7807                           
  7808                           ; BSR set to: 1
  7809  000588  6B87               	clrf	?___ftmul& (0+255),b
  7810  00058A  6B88               	clrf	(?___ftmul+1)& (0+255),b
  7811  00058C  6B89               	clrf	(?___ftmul+2)& (0+255),b
  7812  00058E  0012               	return	
  7813  000590                     l6722:
  7814                           
  7815                           ; BSR set to: 1
  7816  000590  C18C  F18D         	movff	___ftmul@f2+2,??___ftmul
  7817  000594  6B8E               	clrf	(??___ftmul+1)& (0+255),b
  7818  000596  6B8F               	clrf	(??___ftmul+2)& (0+255),b
  7819  000598  358B               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7820  00059A  378D               	rlcf	??___ftmul& (0+255),f,b
  7821  00059C  E301               	bnc	u7131
  7822  00059E  818E               	bsf	(??___ftmul+1)& (0+255),0,b
  7823  0005A0                     u7131:
  7824  0005A0  518D               	movf	??___ftmul& (0+255),w,b
  7825  0005A2  6F91               	movwf	___ftmul@sign& (0+255),b
  7826  0005A4  5191               	movf	___ftmul@sign& (0+255),w,b
  7827  0005A6  E104               	bnz	l6726
  7828                           
  7829                           ; BSR set to: 1
  7830  0005A8  6B87               	clrf	?___ftmul& (0+255),b
  7831  0005AA  6B88               	clrf	(?___ftmul+1)& (0+255),b
  7832  0005AC  6B89               	clrf	(?___ftmul+2)& (0+255),b
  7833  0005AE  0012               	return	
  7834  0005B0                     l6726:
  7835                           
  7836                           ; BSR set to: 1
  7837  0005B0  5191               	movf	___ftmul@sign& (0+255),w,b
  7838  0005B2  0F7B               	addlw	123
  7839  0005B4  2790               	addwf	___ftmul@exp& (0+255),f,b
  7840                           
  7841                           ; BSR set to: 1
  7842  0005B6  C189  F191         	movff	___ftmul@f1+2,___ftmul@sign
  7843  0005BA  518C               	movf	(___ftmul@f2+2)& (0+255),w,b
  7844  0005BC  1B91               	xorwf	___ftmul@sign& (0+255),f,b
  7845  0005BE  0E80               	movlw	128
  7846  0005C0  1791               	andwf	___ftmul@sign& (0+255),f,b
  7847                           
  7848                           ; BSR set to: 1
  7849  0005C2  8F88               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7850                           
  7851                           ; BSR set to: 1
  7852  0005C4  8F8B               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7853                           
  7854                           ; BSR set to: 1
  7855  0005C6  6B8C               	clrf	(___ftmul@f2+2)& (0+255),b
  7856                           
  7857                           ; BSR set to: 1
  7858                           
  7859                           ; BSR set to: 1
  7860  0005C8  6B89               	clrf	(___ftmul@f1+2)& (0+255),b
  7861                           
  7862                           ; BSR set to: 1
  7863  0005CA  5187               	movf	___ftmul@f1& (0+255),w,b
  7864  0005CC  038A               	mulwf	___ftmul@f2& (0+255),b
  7865  0005CE  CFF4 FFF3          	movff	prodh,prodl
  7866  0005D2  6AF4               	clrf	prodh,c
  7867  0005D4  CFF3 F192          	movff	prodl,___ftmul@f3_as_product
  7868  0005D8  CFF4 F193          	movff	prodh,___ftmul@f3_as_product+1
  7869  0005DC  6B94               	clrf	(___ftmul@f3_as_product+2)& (0+255),b
  7870                           
  7871                           ; BSR set to: 1
  7872  0005DE  5187               	movf	___ftmul@f1& (0+255),w,b
  7873  0005E0  038B               	mulwf	(___ftmul@f2+1)& (0+255),b
  7874  0005E2  50F3               	movf	prodl,w,c
  7875  0005E4  2792               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7876  0005E6  50F4               	movf	prodh,w,c
  7877  0005E8  2393               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7878  0005EA  0E00               	movlw	0
  7879  0005EC  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7880                           
  7881                           ; BSR set to: 1
  7882  0005EE  5188               	movf	(___ftmul@f1+1)& (0+255),w,b
  7883  0005F0  038A               	mulwf	___ftmul@f2& (0+255),b
  7884  0005F2  50F3               	movf	prodl,w,c
  7885  0005F4  2792               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7886  0005F6  50F4               	movf	prodh,w,c
  7887  0005F8  2393               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7888  0005FA  0E00               	movlw	0
  7889  0005FC  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7890                           
  7891                           ; BSR set to: 1
  7892  0005FE  5188               	movf	(___ftmul@f1+1)& (0+255),w,b
  7893  000600  038B               	mulwf	(___ftmul@f2+1)& (0+255),b
  7894  000602  50F3               	movf	prodl,w,c
  7895  000604  2793               	addwf	(___ftmul@f3_as_product+1)& (0+255),f,b
  7896  000606  50F4               	movf	prodh,w,c
  7897  000608  2394               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7898                           
  7899                           ; BSR set to: 1
  7900  00060A  AF94               	btfss	(___ftmul@f3_as_product+2)& (0+255),7,b
  7901  00060C  D005               	goto	l1392
  7902                           
  7903                           ; BSR set to: 1
  7904  00060E  90D8               	bcf	status,0,c
  7905  000610  3394               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  7906  000612  3393               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  7907  000614  3392               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  7908  000616  2B90               	incf	___ftmul@exp& (0+255),f,b
  7909  000618                     l1392:
  7910                           
  7911                           ; BSR set to: 1
  7912  000618  90D8               	bcf	status,0,c
  7913  00061A  3394               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  7914  00061C  3393               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  7915  00061E  3392               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  7916                           
  7917                           ; BSR set to: 1
  7918  000620  C192  F0B5         	movff	___ftmul@f3_as_product,___ftpack@arg
  7919  000624  C193  F0B6         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7920  000628  C194  F0B7         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7921  00062C  C190  F0B8         	movff	___ftmul@exp,___ftpack@exp
  7922  000630  C191  F0B9         	movff	___ftmul@sign,___ftpack@sign
  7923  000634  EC5A  F007         	call	___ftpack	;wreg free
  7924  000638  C0B5  F187         	movff	?___ftpack,?___ftmul
  7925  00063C  C0B6  F188         	movff	?___ftpack+1,?___ftmul+1
  7926  000640  C0B7  F189         	movff	?___ftpack+2,?___ftmul+2
  7927  000644  0012               	return		;funcret
  7928  000646                     __end_of___ftmul:
  7929                           	opt stack 0
  7930                           tblptru	equ	0xFF8
  7931                           tblptrh	equ	0xFF7
  7932                           tblptrl	equ	0xFF6
  7933                           tablat	equ	0xFF5
  7934                           prodh	equ	0xFF4
  7935                           prodl	equ	0xFF3
  7936                           intcon	equ	0xFF2
  7937                           intcon2	equ	0xFF1
  7938                           intcon3	equ	0xFF0
  7939                           postinc0	equ	0xFEE
  7940                           wreg	equ	0xFE8
  7941                           postdec1	equ	0xFE5
  7942                           fsr1l	equ	0xFE1
  7943                           postinc2	equ	0xFDE
  7944                           postdec2	equ	0xFDD
  7945                           fsr2h	equ	0xFDA
  7946                           fsr2l	equ	0xFD9
  7947                           status	equ	0xFD8
  7948                           
  7949 ;; *************** function ___ftpack *****************
  7950 ;; Defined at:
  7951 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;  arg             3   53[BANK0 ] unsigned um
  7954 ;;  exp             1   56[BANK0 ] unsigned char 
  7955 ;;  sign            1   57[BANK0 ] unsigned char 
  7956 ;; Auto vars:     Size  Location     Type
  7957 ;;		None
  7958 ;; Return value:  Size  Location     Type
  7959 ;;                  3   53[BANK0 ] float 
  7960 ;; Registers used:
  7961 ;;		wreg, status,2, status,0
  7962 ;; Tracked objects:
  7963 ;;		On entry : E/0
  7964 ;;		On exit  : F/0
  7965 ;;		Unchanged: 0/0
  7966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7967 ;;      Params:         0       5       0       0       0
  7968 ;;      Locals:         0       0       0       0       0
  7969 ;;      Temps:          0       3       0       0       0
  7970 ;;      Totals:         0       8       0       0       0
  7971 ;;Total ram usage:        8 bytes
  7972 ;; Hardware stack levels used:    1
  7973 ;; Hardware stack levels required when called:   12
  7974 ;; This function calls:
  7975 ;;		Nothing
  7976 ;; This function is called by:
  7977 ;;		___ftmul
  7978 ;;		___lwtoft
  7979 ;; This function uses a non-reentrant model
  7980 ;;
  7981                           
  7982                           	psect	text54
  7983  000EB4                     __ptext54:
  7984                           	opt stack 0
  7985  000EB4                     ___ftpack:
  7986                           	opt stack 16
  7987                           
  7988                           ;incstack = 0
  7989  000EB4  0100               	movlb	0	; () banked
  7990  000EB6  51B8               	movf	___ftpack@exp& (0+255),w,b
  7991  000EB8  E004               	bz	l1308
  7992                           
  7993                           ; BSR set to: 0
  7994  000EBA  51B5               	movf	___ftpack@arg& (0+255),w,b
  7995  000EBC  11B6               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  7996  000EBE  11B7               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  7997  000EC0  E109               	bnz	l4670
  7998  000EC2                     l1308:
  7999                           
  8000                           ; BSR set to: 0
  8001  000EC2  6BB5               	clrf	?___ftpack& (0+255),b
  8002  000EC4  6BB6               	clrf	(?___ftpack+1)& (0+255),b
  8003  000EC6  6BB7               	clrf	(?___ftpack+2)& (0+255),b
  8004  000EC8  0012               	return	
  8005  000ECA                     l4668:
  8006                           
  8007                           ; BSR set to: 0
  8008  000ECA  2BB8               	incf	___ftpack@exp& (0+255),f,b
  8009  000ECC  90D8               	bcf	status,0,c
  8010  000ECE  33B7               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8011  000ED0  33B6               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8012  000ED2  33B5               	rrcf	___ftpack@arg& (0+255),f,b
  8013  000ED4                     l4670:
  8014                           
  8015                           ; BSR set to: 0
  8016  000ED4  6BBA               	clrf	??___ftpack& (0+255),b
  8017  000ED6  6BBB               	clrf	(??___ftpack+1)& (0+255),b
  8018  000ED8  0EFE               	movlw	254
  8019  000EDA  15B7               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8020  000EDC  6FBC               	movwf	(??___ftpack+2)& (0+255),b
  8021  000EDE  51BA               	movf	??___ftpack& (0+255),w,b
  8022  000EE0  11BB               	iorwf	(??___ftpack+1)& (0+255),w,b
  8023  000EE2  11BC               	iorwf	(??___ftpack+2)& (0+255),w,b
  8024  000EE4  E00A               	bz	l4676
  8025  000EE6  D7F1               	goto	l4668
  8026  000EE8                     l4672:
  8027                           
  8028                           ; BSR set to: 0
  8029  000EE8  2BB8               	incf	___ftpack@exp& (0+255),f,b
  8030                           
  8031                           ; BSR set to: 0
  8032  000EEA  2BB5               	incf	___ftpack@arg& (0+255),f,b
  8033  000EEC  0E00               	movlw	0
  8034  000EEE  23B6               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  8035  000EF0  23B7               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  8036  000EF2  90D8               	bcf	status,0,c
  8037  000EF4  33B7               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8038  000EF6  33B6               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8039  000EF8  33B5               	rrcf	___ftpack@arg& (0+255),f,b
  8040  000EFA                     l4676:
  8041                           
  8042                           ; BSR set to: 0
  8043  000EFA  6BBA               	clrf	??___ftpack& (0+255),b
  8044  000EFC  6BBB               	clrf	(??___ftpack+1)& (0+255),b
  8045  000EFE  51B7               	movf	(___ftpack@arg+2)& (0+255),w,b
  8046  000F00  6FBC               	movwf	(??___ftpack+2)& (0+255),b
  8047  000F02  51BA               	movf	??___ftpack& (0+255),w,b
  8048  000F04  11BB               	iorwf	(??___ftpack+1)& (0+255),w,b
  8049  000F06  11BC               	iorwf	(??___ftpack+2)& (0+255),w,b
  8050  000F08  E006               	bz	l4680
  8051  000F0A  D7EE               	goto	l4672
  8052  000F0C                     l4678:
  8053                           
  8054                           ; BSR set to: 0
  8055  000F0C  07B8               	decf	___ftpack@exp& (0+255),f,b
  8056  000F0E  90D8               	bcf	status,0,c
  8057  000F10  37B5               	rlcf	___ftpack@arg& (0+255),f,b
  8058  000F12  37B6               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  8059  000F14  37B7               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  8060  000F16                     l4680:
  8061                           
  8062                           ; BSR set to: 0
  8063  000F16  BFB6               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  8064  000F18  D003               	goto	l1320
  8065                           
  8066                           ; BSR set to: 0
  8067  000F1A  0E02               	movlw	2
  8068  000F1C  61B8               	cpfslt	___ftpack@exp& (0+255),b
  8069  000F1E  D7F6               	goto	l4678
  8070  000F20                     l1320:
  8071                           
  8072                           ; BSR set to: 0
  8073  000F20  A1B8               	btfss	___ftpack@exp& (0+255),0,b
  8074                           
  8075                           ; BSR set to: 0
  8076  000F22  9FB6               	bcf	(___ftpack@arg+1)& (0+255),7,b
  8077                           
  8078                           ; BSR set to: 0
  8079  000F24  90D8               	bcf	status,0,c
  8080  000F26  33B8               	rrcf	___ftpack@exp& (0+255),f,b
  8081                           
  8082                           ; BSR set to: 0
  8083  000F28  51B8               	movf	___ftpack@exp& (0+255),w,b
  8084  000F2A  13B7               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  8085                           
  8086                           ; BSR set to: 0
  8087  000F2C  51B9               	movf	___ftpack@sign& (0+255),w,b
  8088  000F2E  E001               	bz	l4694
  8089                           
  8090                           ; BSR set to: 0
  8091  000F30  8FB7               	bsf	(___ftpack@arg+2)& (0+255),7,b
  8092  000F32                     l4694:
  8093                           
  8094                           ; BSR set to: 0
  8095  000F32  C0B5  F0B5         	movff	___ftpack@arg,?___ftpack
  8096  000F36  C0B6  F0B6         	movff	___ftpack@arg+1,?___ftpack+1
  8097  000F3A  C0B7  F0B7         	movff	___ftpack@arg+2,?___ftpack+2
  8098                           
  8099                           ; BSR set to: 0
  8100  000F3E  0012               	return		;funcret
  8101  000F40                     __end_of___ftpack:
  8102                           	opt stack 0
  8103                           tblptru	equ	0xFF8
  8104                           tblptrh	equ	0xFF7
  8105                           tblptrl	equ	0xFF6
  8106                           tablat	equ	0xFF5
  8107                           prodh	equ	0xFF4
  8108                           prodl	equ	0xFF3
  8109                           intcon	equ	0xFF2
  8110                           intcon2	equ	0xFF1
  8111                           intcon3	equ	0xFF0
  8112                           postinc0	equ	0xFEE
  8113                           wreg	equ	0xFE8
  8114                           postdec1	equ	0xFE5
  8115                           fsr1l	equ	0xFE1
  8116                           postinc2	equ	0xFDE
  8117                           postdec2	equ	0xFDD
  8118                           fsr2h	equ	0xFDA
  8119                           fsr2l	equ	0xFD9
  8120                           status	equ	0xFD8
  8121                           
  8122 ;; *************** function ___ftge *****************
  8123 ;; Defined at:
  8124 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
  8125 ;; Parameters:    Size  Location     Type
  8126 ;;  ff1             3   53[BANK0 ] float 
  8127 ;;  ff2             3   56[BANK0 ] float 
  8128 ;; Auto vars:     Size  Location     Type
  8129 ;;		None
  8130 ;; Return value:  Size  Location     Type
  8131 ;;		None               void
  8132 ;; Registers used:
  8133 ;;		wreg, status,2, status,0
  8134 ;; Tracked objects:
  8135 ;;		On entry : E/0
  8136 ;;		On exit  : F/0
  8137 ;;		Unchanged: 0/0
  8138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8139 ;;      Params:         0       6       0       0       0
  8140 ;;      Locals:         0       0       0       0       0
  8141 ;;      Temps:          0       3       0       0       0
  8142 ;;      Totals:         0       9       0       0       0
  8143 ;;Total ram usage:        9 bytes
  8144 ;; Hardware stack levels used:    1
  8145 ;; Hardware stack levels required when called:   12
  8146 ;; This function calls:
  8147 ;;		Nothing
  8148 ;; This function is called by:
  8149 ;;		_main
  8150 ;;		_RF_LoadCode
  8151 ;;		_IR_LoadCode
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           	psect	text55
  8156  001278                     __ptext55:
  8157                           	opt stack 0
  8158  001278                     ___ftge:
  8159                           	opt stack 18
  8160                           
  8161                           ; BSR set to: 0
  8162                           ;incstack = 0
  8163  001278  0100               	movlb	0	; () banked
  8164  00127A  AFB7               	btfss	(___ftge@ff1+2)& (0+255),7,b
  8165  00127C  D00D               	goto	l5538
  8166                           
  8167                           ; BSR set to: 0
  8168  00127E  6BBB               	clrf	??___ftge& (0+255),b
  8169  001280  6BBC               	clrf	(??___ftge+1)& (0+255),b
  8170  001282  0E80               	movlw	128
  8171  001284  6FBD               	movwf	(??___ftge+2)& (0+255),b
  8172  001286  51B5               	movf	___ftge@ff1& (0+255),w,b
  8173  001288  5DBB               	subwf	??___ftge& (0+255),w,b
  8174  00128A  6FB5               	movwf	___ftge@ff1& (0+255),b
  8175  00128C  51B6               	movf	(___ftge@ff1+1)& (0+255),w,b
  8176  00128E  59BC               	subwfb	(??___ftge+1)& (0+255),w,b
  8177  001290  6FB6               	movwf	(___ftge@ff1+1)& (0+255),b
  8178  001292  51B7               	movf	(___ftge@ff1+2)& (0+255),w,b
  8179  001294  59BD               	subwfb	(??___ftge+2)& (0+255),w,b
  8180  001296  6FB7               	movwf	(___ftge@ff1+2)& (0+255),b
  8181  001298                     l5538:
  8182                           
  8183                           ; BSR set to: 0
  8184  001298  AFBA               	btfss	(___ftge@ff2+2)& (0+255),7,b
  8185  00129A  D00D               	goto	l5542
  8186                           
  8187                           ; BSR set to: 0
  8188  00129C  6BBB               	clrf	??___ftge& (0+255),b
  8189  00129E  6BBC               	clrf	(??___ftge+1)& (0+255),b
  8190  0012A0  0E80               	movlw	128
  8191  0012A2  6FBD               	movwf	(??___ftge+2)& (0+255),b
  8192  0012A4  51B8               	movf	___ftge@ff2& (0+255),w,b
  8193  0012A6  5DBB               	subwf	??___ftge& (0+255),w,b
  8194  0012A8  6FB8               	movwf	___ftge@ff2& (0+255),b
  8195  0012AA  51B9               	movf	(___ftge@ff2+1)& (0+255),w,b
  8196  0012AC  59BC               	subwfb	(??___ftge+1)& (0+255),w,b
  8197  0012AE  6FB9               	movwf	(___ftge@ff2+1)& (0+255),b
  8198  0012B0  51BA               	movf	(___ftge@ff2+2)& (0+255),w,b
  8199  0012B2  59BD               	subwfb	(??___ftge+2)& (0+255),w,b
  8200  0012B4  6FBA               	movwf	(___ftge@ff2+2)& (0+255),b
  8201  0012B6                     l5542:
  8202                           
  8203                           ; BSR set to: 0
  8204  0012B6  0E80               	movlw	128
  8205  0012B8  1BB7               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  8206                           
  8207                           ; BSR set to: 0
  8208  0012BA  1BBA               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  8209  0012BC  51B8               	movf	___ftge@ff2& (0+255),w,b
  8210  0012BE  5DB5               	subwf	___ftge@ff1& (0+255),w,b
  8211  0012C0  51B9               	movf	(___ftge@ff2+1)& (0+255),w,b
  8212  0012C2  59B6               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  8213  0012C4  51BA               	movf	(___ftge@ff2+2)& (0+255),w,b
  8214  0012C6  59B7               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  8215  0012C8  E202               	bc	l5548
  8216                           
  8217                           ; BSR set to: 0
  8218  0012CA  90D8               	bcf	status,0,c
  8219  0012CC  0012               	return	
  8220  0012CE                     l5548:
  8221                           
  8222                           ; BSR set to: 0
  8223  0012CE  80D8               	bsf	status,0,c
  8224                           
  8225                           ; BSR set to: 0
  8226  0012D0  0012               	return		;funcret
  8227  0012D2                     __end_of___ftge:
  8228                           	opt stack 0
  8229                           tblptru	equ	0xFF8
  8230                           tblptrh	equ	0xFF7
  8231                           tblptrl	equ	0xFF6
  8232                           tablat	equ	0xFF5
  8233                           prodh	equ	0xFF4
  8234                           prodl	equ	0xFF3
  8235                           intcon	equ	0xFF2
  8236                           intcon2	equ	0xFF1
  8237                           intcon3	equ	0xFF0
  8238                           postinc0	equ	0xFEE
  8239                           wreg	equ	0xFE8
  8240                           postdec1	equ	0xFE5
  8241                           fsr1l	equ	0xFE1
  8242                           postinc2	equ	0xFDE
  8243                           postdec2	equ	0xFDD
  8244                           fsr2h	equ	0xFDA
  8245                           fsr2l	equ	0xFD9
  8246                           status	equ	0xFD8
  8247                           
  8248 ;; *************** function _IR_CalculateCodesize *****************
  8249 ;; Defined at:
  8250 ;;		line 190 in file "IR.c"
  8251 ;; Parameters:    Size  Location     Type
  8252 ;;  Code            3   53[BANK0 ] PTR const unsigned int 
  8253 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), 
  8254 ;; Auto vars:     Size  Location     Type
  8255 ;;  i               1   59[BANK0 ] unsigned char 
  8256 ;; Return value:  Size  Location     Type
  8257 ;;                  1    wreg      unsigned char 
  8258 ;; Registers used:
  8259 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8260 ;; Tracked objects:
  8261 ;;		On entry : F/0
  8262 ;;		On exit  : F/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8265 ;;      Params:         0       3       0       0       0
  8266 ;;      Locals:         0       1       0       0       0
  8267 ;;      Temps:          0       3       0       0       0
  8268 ;;      Totals:         0       7       0       0       0
  8269 ;;Total ram usage:        7 bytes
  8270 ;; Hardware stack levels used:    1
  8271 ;; Hardware stack levels required when called:   12
  8272 ;; This function calls:
  8273 ;;		Nothing
  8274 ;; This function is called by:
  8275 ;;		_IR_LoadCode
  8276 ;; This function uses a non-reentrant model
  8277 ;;
  8278                           
  8279                           	psect	text56
  8280  001414                     __ptext56:
  8281                           	opt stack 0
  8282  001414                     _IR_CalculateCodesize:
  8283                           	opt stack 17
  8284                           
  8285                           ; BSR set to: 0
  8286                           ;IR.c: 192: unsigned char i;
  8287                           ;IR.c: 194: for(i=0; i<96;i++)
  8288                           
  8289                           ; BSR set to: 0
  8290                           ;incstack = 0
  8291  001414  6BBB               	clrf	IR_CalculateCodesize@i& (0+255),b
  8292  001416                     l5434:
  8293                           
  8294                           ; BSR set to: 0
  8295                           ;IR.c: 195: {
  8296                           ;IR.c: 196: if(Code[i] == 0)
  8297  001416  51BB               	movf	IR_CalculateCodesize@i& (0+255),w,b
  8298  001418  0D02               	mullw	2
  8299  00141A  50F3               	movf	prodl,w,c
  8300  00141C  25B5               	addwf	IR_CalculateCodesize@Code& (0+255),w,b
  8301  00141E  6FB8               	movwf	??_IR_CalculateCodesize& (0+255),b
  8302  001420  50F4               	movf	prodh,w,c
  8303  001422  21B6               	addwfc	(IR_CalculateCodesize@Code+1)& (0+255),w,b
  8304  001424  6FB9               	movwf	(??_IR_CalculateCodesize+1)& (0+255),b
  8305  001426  0E00               	movlw	0
  8306  001428  21B7               	addwfc	(IR_CalculateCodesize@Code+2)& (0+255),w,b
  8307  00142A  6FBA               	movwf	(??_IR_CalculateCodesize+2)& (0+255),b
  8308  00142C  C0B8  FFF6         	movff	??_IR_CalculateCodesize,tblptrl
  8309  001430  C0B9  FFF7         	movff	??_IR_CalculateCodesize+1,tblptrh
  8310  001434  C0BA  FFF8         	movff	??_IR_CalculateCodesize+2,tblptru
  8311  001438  0009               	tblrd		*+
  8312  00143A  50F5               	movf	tablat,w,c
  8313  00143C  0009               	tblrd		*+
  8314  00143E  10F5               	iorwf	tablat,w,c
  8315  001440  E102               	bnz	l5440
  8316                           
  8317                           ; BSR set to: 0
  8318                           ;IR.c: 197: {
  8319                           ;IR.c: 198: return i;
  8320  001442  51BB               	movf	IR_CalculateCodesize@i& (0+255),w,b
  8321  001444  0012               	return	
  8322  001446                     l5440:
  8323                           
  8324                           ; BSR set to: 0
  8325  001446  2BBB               	incf	IR_CalculateCodesize@i& (0+255),f,b
  8326                           
  8327                           ; BSR set to: 0
  8328  001448  0E5F               	movlw	95
  8329  00144A  65BB               	cpfsgt	IR_CalculateCodesize@i& (0+255),b
  8330  00144C  D7E4               	goto	l5434
  8331  00144E  0C60               	retlw	96
  8332  001450                     __end_of_IR_CalculateCodesize:
  8333                           	opt stack 0
  8334                           tblptru	equ	0xFF8
  8335                           tblptrh	equ	0xFF7
  8336                           tblptrl	equ	0xFF6
  8337                           tablat	equ	0xFF5
  8338                           prodh	equ	0xFF4
  8339                           prodl	equ	0xFF3
  8340                           intcon	equ	0xFF2
  8341                           intcon2	equ	0xFF1
  8342                           intcon3	equ	0xFF0
  8343                           postinc0	equ	0xFEE
  8344                           wreg	equ	0xFE8
  8345                           postdec1	equ	0xFE5
  8346                           fsr1l	equ	0xFE1
  8347                           postinc2	equ	0xFDE
  8348                           postdec2	equ	0xFDD
  8349                           fsr2h	equ	0xFDA
  8350                           fsr2l	equ	0xFD9
  8351                           status	equ	0xFD8
  8352                           
  8353 ;; *************** function _ADC_Start *****************
  8354 ;; Defined at:
  8355 ;;		line 145 in file "ADC.c"
  8356 ;; Parameters:    Size  Location     Type
  8357 ;;		None
  8358 ;; Auto vars:     Size  Location     Type
  8359 ;;		None
  8360 ;; Return value:  Size  Location     Type
  8361 ;;		None               void
  8362 ;; Registers used:
  8363 ;;		None
  8364 ;; Tracked objects:
  8365 ;;		On entry : F/1
  8366 ;;		On exit  : F/1
  8367 ;;		Unchanged: F/0
  8368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8369 ;;      Params:         0       0       0       0       0
  8370 ;;      Locals:         0       0       0       0       0
  8371 ;;      Temps:          0       0       0       0       0
  8372 ;;      Totals:         0       0       0       0       0
  8373 ;;Total ram usage:        0 bytes
  8374 ;; Hardware stack levels used:    1
  8375 ;; Hardware stack levels required when called:   12
  8376 ;; This function calls:
  8377 ;;		Nothing
  8378 ;; This function is called by:
  8379 ;;		_main
  8380 ;; This function uses a non-reentrant model
  8381 ;;
  8382                           
  8383                           	psect	text57
  8384  001B9E                     __ptext57:
  8385                           	opt stack 0
  8386  001B9E                     _ADC_Start:
  8387                           	opt stack 18
  8388                           
  8389                           ; BSR set to: 1
  8390                           ;ADC.c: 147: ADCON0bits.GO = 1;
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;incstack = 0
  8394  001B9E  82C2               	bsf	4034,1,c	;volatile
  8395                           
  8396                           ; BSR set to: 1
  8397  001BA0  0012               	return		;funcret
  8398  001BA2                     __end_of_ADC_Start:
  8399                           	opt stack 0
  8400                           tblptru	equ	0xFF8
  8401                           tblptrh	equ	0xFF7
  8402                           tblptrl	equ	0xFF6
  8403                           tablat	equ	0xFF5
  8404                           prodh	equ	0xFF4
  8405                           prodl	equ	0xFF3
  8406                           intcon	equ	0xFF2
  8407                           intcon2	equ	0xFF1
  8408                           intcon3	equ	0xFF0
  8409                           postinc0	equ	0xFEE
  8410                           wreg	equ	0xFE8
  8411                           postdec1	equ	0xFE5
  8412                           fsr1l	equ	0xFE1
  8413                           postinc2	equ	0xFDE
  8414                           postdec2	equ	0xFDD
  8415                           fsr2h	equ	0xFDA
  8416                           fsr2l	equ	0xFD9
  8417                           status	equ	0xFD8
  8418                           
  8419 ;; *************** function _low_isr *****************
  8420 ;; Defined at:
  8421 ;;		line 122 in file "INTERRUPTS.c"
  8422 ;; Parameters:    Size  Location     Type
  8423 ;;		None
  8424 ;; Auto vars:     Size  Location     Type
  8425 ;;  IRtemp          2   87[COMRAM] unsigned int 
  8426 ;;  button_state    1   86[COMRAM] unsigned char 
  8427 ;;  IR_state        1    0        unsigned char 
  8428 ;; Return value:  Size  Location     Type
  8429 ;;		None               void
  8430 ;; Registers used:
  8431 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8432 ;; Tracked objects:
  8433 ;;		On entry : 0/0
  8434 ;;		On exit  : 0/0
  8435 ;;		Unchanged: 0/0
  8436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8437 ;;      Params:         0       0       0       0       0
  8438 ;;      Locals:         3       0       0       0       0
  8439 ;;      Temps:         11       0       0       0       0
  8440 ;;      Totals:        14       0       0       0       0
  8441 ;;Total ram usage:       14 bytes
  8442 ;; Hardware stack levels used:    1
  8443 ;; Hardware stack levels required when called:   11
  8444 ;; This function calls:
  8445 ;;		_ADC_CalculateVoltage
  8446 ;;		_IR_CheckCode
  8447 ;;		_IR_ResetData
  8448 ;;		_RF_Disable
  8449 ;;		_TMR_Timer1Start
  8450 ;;		_TMR_Timer1Status
  8451 ;;		_TMR_Timer2Start
  8452 ;;		i1_BUT_IR_PinChangeInt
  8453 ;;		i1_BUT_ReadButton
  8454 ;;		i1_IR_ReadReceiver
  8455 ;;		i1_RF_DataInt
  8456 ;;		i1_SYS_ActivityTimerReset
  8457 ;;		i1_TMR_ResetTimer1
  8458 ;;		i1_TMR_Timer1
  8459 ;;		i1_TMR_Timer2
  8460 ;; This function is called by:
  8461 ;;		Interrupt level 1
  8462 ;; This function uses a non-reentrant model
  8463 ;;
  8464                           
  8465                           	psect	intcodelo
  8466  000018                     __pintcodelo:
  8467                           	opt stack 0
  8468  000018                     _low_isr:
  8469                           	opt stack 13
  8470                           
  8471                           ; BSR set to: 1
  8472                           ;incstack = 0
  8473  000018  806E               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  8474  00001A  CFD8 F04C          	movff	status,??_low_isr
  8475  00001E  CFE8 F04D          	movff	wreg,??_low_isr+1
  8476  000022  CFE0 F04E          	movff	bsr,??_low_isr+2
  8477  000026  CFD9 F04F          	movff	fsr2l,??_low_isr+3
  8478  00002A  CFDA F050          	movff	fsr2h,??_low_isr+4
  8479  00002E  CFF3 F051          	movff	prodl,??_low_isr+5
  8480  000032  CFF4 F052          	movff	prodh,??_low_isr+6
  8481  000036  CFF6 F053          	movff	tblptrl,??_low_isr+7
  8482  00003A  CFF7 F054          	movff	tblptrh,??_low_isr+8
  8483  00003E  CFF8 F055          	movff	tblptru,??_low_isr+9
  8484  000042  CFF5 F056          	movff	tablat,??_low_isr+10
  8485                           
  8486                           ;INTERRUPTS.c: 128: if(INTCONbits.RBIF)
  8487  000046  A0F2               	btfss	intcon,0,c	;volatile
  8488  000048  D08C               	goto	i1l212
  8489                           
  8490                           ;INTERRUPTS.c: 129: {
  8491                           ;INTERRUPTS.c: 134: button_state = BUT_ReadButton();
  8492  00004A  EC8F  F00B         	call	i1_BUT_ReadButton	;wreg free
  8493  00004E  6E57               	movwf	low_isr@button_state,c
  8494                           
  8495                           ;INTERRUPTS.c: 135: IR_state = IR_ReadReceiver();
  8496  000050  ECFA  F00B         	call	i1_IR_ReadReceiver	;wreg free
  8497  000054                     i14L__ptext59:
  8498                           	opt stack 0
  8499  000054                     i14Li1_SYS_ActivityTimerReset:
  8500                           	opt stack 0
  8501  000054                     i14Li1l6352:
  8502                           	opt stack 17
  8503                           
  8504                           ;SYSTEM.c: 61: Activity_Timer = 0;
  8505  000054  6A5A               	clrf	_Activity_Timer,c
  8506  000056  6A5B               	clrf	_Activity_Timer+1,c
  8507  000058  6A5C               	clrf	_Activity_Timer+2,c
  8508  00005A  6A5D               	clrf	_Activity_Timer+3,c
  8509  00005C                     i14Li1l334:
  8510                           	opt stack 13
  8511                           
  8512                           ;INTERRUPTS.c: 137: if(ButtonChange)
  8513  00005C  5066               	movf	_ButtonChange,w,c
  8514  00005E  E02C               	bz	i1l6600
  8515                           
  8516                           ;INTERRUPTS.c: 138: {
  8517                           ;INTERRUPTS.c: 140: TMR_Timer2(0);
  8518  000060  0E00               	movlw	0
  8519  000062  EC86  F00D         	call	i1_TMR_Timer2
  8520                           
  8521                           ;INTERRUPTS.c: 141: if(button_state)
  8522  000066  5057               	movf	low_isr@button_state,w,c
  8523  000068  E016               	bz	i1l6588
  8524                           
  8525                           ;INTERRUPTS.c: 142: {
  8526                           ;INTERRUPTS.c: 144: if(System_State == 8)
  8527  00006A  0E08               	movlw	8
  8528  00006C  0101               	movlb	1	; () banked
  8529  00006E  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  8530  000070  E109               	bnz	i1l6584
  8531                           
  8532                           ; BSR set to: 1
  8533                           ;INTERRUPTS.c: 145: {
  8534                           ;INTERRUPTS.c: 146: Timer2Use = 17;
  8535  000072  0E11               	movlw	17
  8536  000074  6E6C               	movwf	_Timer2Use,c
  8537                           
  8538                           ; BSR set to: 1
  8539                           ;INTERRUPTS.c: 147: TMR_Timer2Start(400);
  8540  000076  0E01               	movlw	1
  8541  000078  6E04               	movwf	TMR_Timer2Start@time+1,c
  8542  00007A  0E90               	movlw	144
  8543  00007C  6E03               	movwf	TMR_Timer2Start@time,c
  8544  00007E  ECAF  F00C         	call	_TMR_Timer2Start	;wreg free
  8545                           
  8546                           ;INTERRUPTS.c: 148: }
  8547  000082  D018               	goto	i1l6598
  8548  000084                     i1l6584:
  8549                           
  8550                           ; BSR set to: 1
  8551                           ;INTERRUPTS.c: 149: else
  8552                           ;INTERRUPTS.c: 150: {
  8553                           ;INTERRUPTS.c: 151: Timer2Use = 19;
  8554  000084  0E13               	movlw	19
  8555  000086  6E6C               	movwf	_Timer2Use,c
  8556                           
  8557                           ; BSR set to: 1
  8558                           ;INTERRUPTS.c: 152: TMR_Timer2Start(8);
  8559  000088  0E00               	movlw	0
  8560  00008A  6E04               	movwf	TMR_Timer2Start@time+1,c
  8561  00008C  0E08               	movlw	8
  8562  00008E  6E03               	movwf	TMR_Timer2Start@time,c
  8563  000090  ECAF  F00C         	call	_TMR_Timer2Start	;wreg free
  8564  000094  D00F               	goto	i1l6598
  8565  000096                     i1l6588:
  8566                           
  8567                           ;INTERRUPTS.c: 155: else
  8568                           ;INTERRUPTS.c: 156: {
  8569                           ;INTERRUPTS.c: 157: if(System_State != 10)
  8570  000096  0E0A               	movlw	10
  8571  000098  0101               	movlb	1	; () banked
  8572  00009A  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  8573  00009C  E003               	bz	i1l6594
  8574                           
  8575                           ; BSR set to: 1
  8576                           ;INTERRUPTS.c: 158: {
  8577                           ;INTERRUPTS.c: 160: Button_Data = 1;
  8578  00009E  0E01               	movlw	1
  8579  0000A0  6F02               	movwf	_Button_Data& (0+255),b	;volatile
  8580  0000A2  D7F0               	goto	i1l6584
  8581  0000A4                     i1l6594:
  8582                           
  8583                           ; BSR set to: 1
  8584                           ;INTERRUPTS.c: 164: else
  8585                           ;INTERRUPTS.c: 165: {
  8586                           ;INTERRUPTS.c: 166: Timer2Use = 18;
  8587  0000A4  0E12               	movlw	18
  8588  0000A6  6E6C               	movwf	_Timer2Use,c
  8589                           
  8590                           ; BSR set to: 1
  8591                           ;INTERRUPTS.c: 167: TMR_Timer2Start(500);
  8592  0000A8  0E01               	movlw	1
  8593  0000AA  6E04               	movwf	TMR_Timer2Start@time+1,c
  8594  0000AC  0EF4               	movlw	244
  8595  0000AE  6E03               	movwf	TMR_Timer2Start@time,c
  8596  0000B0  ECAF  F00C         	call	_TMR_Timer2Start	;wreg free
  8597  0000B4                     i1l6598:
  8598                           
  8599                           ;INTERRUPTS.c: 168: }
  8600                           ;INTERRUPTS.c: 169: }
  8601                           ;INTERRUPTS.c: 170: ButtonChange = 0;
  8602  0000B4  6A66               	clrf	_ButtonChange,c
  8603                           
  8604                           ;INTERRUPTS.c: 171: }
  8605  0000B6  D053               	goto	i1l220
  8606  0000B8                     i1l6600:
  8607                           
  8608                           ;INTERRUPTS.c: 172: else if(IRChange)
  8609  0000B8  5067               	movf	_IRChange,w,c
  8610  0000BA  E050               	bz	i1l221
  8611                           
  8612                           ;INTERRUPTS.c: 173: {
  8613                           ;INTERRUPTS.c: 175: if(!TMR_Timer1Status())
  8614  0000BC  ECC5  F00D         	call	_TMR_Timer1Status	;wreg free
  8615  0000C0  0900               	iorlw	0
  8616  0000C2  E103               	bnz	i1l222
  8617                           
  8618                           ;INTERRUPTS.c: 176: {
  8619                           ;INTERRUPTS.c: 178: TMR_Timer1Start();
  8620  0000C4  EC5F  F00D         	call	_TMR_Timer1Start	;wreg free
  8621                           
  8622                           ;INTERRUPTS.c: 179: }
  8623  0000C8  D047               	goto	i1l223
  8624  0000CA                     i1l222:
  8625                           
  8626                           ;INTERRUPTS.c: 180: else
  8627                           ;INTERRUPTS.c: 181: {
  8628                           ;INTERRUPTS.c: 182: IRtemp = TMR1L;
  8629  0000CA  CFCE F058          	movff	4046,low_isr@IRtemp	;volatile
  8630  0000CE  6A59               	clrf	low_isr@IRtemp+1,c
  8631                           
  8632                           ;INTERRUPTS.c: 183: IRtemp += (unsigned int)TMR1H << 8;
  8633  0000D0  50CF               	movf	4047,w,c	;volatile
  8634  0000D2  2659               	addwf	low_isr@IRtemp+1,f,c
  8635                           
  8636                           ;INTERRUPTS.c: 184: TMR_ResetTimer1();
  8637  0000D4  EC4B  F00C         	call	i1_TMR_ResetTimer1	;wreg free
  8638                           
  8639                           ;INTERRUPTS.c: 185: if(!IRStarted)
  8640  0000D8  5069               	movf	_IRStarted,w,c
  8641  0000DA  E122               	bnz	i1l6630
  8642                           
  8643                           ;INTERRUPTS.c: 186: {
  8644                           ;INTERRUPTS.c: 187: if(System_State == 8)
  8645  0000DC  0E08               	movlw	8
  8646  0000DE  0101               	movlb	1	; () banked
  8647  0000E0  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  8648  0000E2  E110               	bnz	i1l6622
  8649                           
  8650                           ; BSR set to: 1
  8651                           ;INTERRUPTS.c: 188: {
  8652                           ;INTERRUPTS.c: 189: if(IRtemp >= IR_SyncLow && IRtemp <= IR_SyncHigh)
  8653  0000E4  5060               	movf	_IR_SyncLow,w,c
  8654  0000E6  5C58               	subwf	low_isr@IRtemp,w,c
  8655  0000E8  5061               	movf	_IR_SyncLow+1,w,c
  8656  0000EA  5859               	subwfb	low_isr@IRtemp+1,w,c
  8657  0000EC  E319               	bnc	i1l6630
  8658                           
  8659                           ; BSR set to: 1
  8660  0000EE  5058               	movf	low_isr@IRtemp,w,c
  8661  0000F0  5C5E               	subwf	_IR_SyncHigh,w,c
  8662  0000F2  5059               	movf	low_isr@IRtemp+1,w,c
  8663  0000F4  585F               	subwfb	_IR_SyncHigh+1,w,c
  8664  0000F6  E314               	bnc	i1l6630
  8665                           
  8666                           ; BSR set to: 1
  8667                           ;INTERRUPTS.c: 190: {
  8668                           ;INTERRUPTS.c: 191: RF_DataInt(0);
  8669  0000F8  0E00               	movlw	0
  8670  0000FA  ECF5  F00C         	call	i1_RF_DataInt
  8671  0000FE                     i1l6620:
  8672                           
  8673                           ;INTERRUPTS.c: 192: IRStarted = 1;
  8674  0000FE  0E01               	movlw	1
  8675  000100  6E69               	movwf	_IRStarted,c
  8676  000102  D00E               	goto	i1l6630
  8677  000104                     i1l6622:
  8678                           
  8679                           ; BSR set to: 1
  8680                           ;INTERRUPTS.c: 195: else
  8681                           ;INTERRUPTS.c: 196: {
  8682                           ;INTERRUPTS.c: 197: if(IRtemp >= 6000 && IRtemp <= 10000)
  8683  000104  0E70               	movlw	112
  8684  000106  5C58               	subwf	low_isr@IRtemp,w,c
  8685  000108  0E17               	movlw	23
  8686  00010A  5859               	subwfb	low_isr@IRtemp+1,w,c
  8687  00010C  E309               	bnc	i1l6630
  8688                           
  8689                           ; BSR set to: 1
  8690  00010E  0E11               	movlw	17
  8691  000110  5C58               	subwf	low_isr@IRtemp,w,c
  8692  000112  0E27               	movlw	39
  8693  000114  5859               	subwfb	low_isr@IRtemp+1,w,c
  8694  000116  E204               	bc	i1l6630
  8695                           
  8696                           ; BSR set to: 1
  8697                           ;INTERRUPTS.c: 198: {
  8698                           ;INTERRUPTS.c: 199: RF_DataInt(0);
  8699  000118  0E00               	movlw	0
  8700  00011A  ECF5  F00C         	call	i1_RF_DataInt
  8701  00011E  D7EF               	goto	i1l6620
  8702  000120                     i1l6630:
  8703                           
  8704                           ;INTERRUPTS.c: 201: }
  8705                           ;INTERRUPTS.c: 202: }
  8706                           ;INTERRUPTS.c: 203: }
  8707                           ;INTERRUPTS.c: 204: if(IRStarted)
  8708  000120  5069               	movf	_IRStarted,w,c
  8709  000122  E01A               	bz	i1l223
  8710                           
  8711                           ;INTERRUPTS.c: 205: {
  8712                           ;INTERRUPTS.c: 206: RF_Disable();
  8713  000124  ECE3  F00C         	call	_RF_Disable	;wreg free
  8714                           
  8715                           ;INTERRUPTS.c: 207: if(IR_DataPlace < 96)
  8716  000128  0E60               	movlw	96
  8717  00012A  606B               	cpfslt	_IR_DataPlace,c
  8718  00012C  D015               	goto	i1l223
  8719                           
  8720                           ;INTERRUPTS.c: 208: {
  8721                           ;INTERRUPTS.c: 209: IR_DataTiming[IR_DataPlace] = IRtemp;
  8722  00012E  506B               	movf	_IR_DataPlace,w,c
  8723  000130  0D02               	mullw	2
  8724  000132  0E00               	movlw	low _IR_DataTiming
  8725  000134  24F3               	addwf	prodl,w,c
  8726  000136  6ED9               	movwf	fsr2l,c
  8727  000138  0E02               	movlw	high _IR_DataTiming
  8728  00013A  20F4               	addwfc	prodh,w,c
  8729  00013C  6EDA               	movwf	fsr2h,c
  8730  00013E  C058  FFDE         	movff	low_isr@IRtemp,postinc2
  8731  000142  C059  FFDD         	movff	low_isr@IRtemp+1,postdec2
  8732                           
  8733                           ;INTERRUPTS.c: 210: IR_DataPlace++;
  8734  000146  2A6B               	incf	_IR_DataPlace,f,c
  8735                           
  8736                           ;INTERRUPTS.c: 211: if(System_State == 8)
  8737  000148  0E08               	movlw	8
  8738  00014A  0101               	movlb	1	; () banked
  8739  00014C  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  8740  00014E  E104               	bnz	i1l223
  8741                           
  8742                           ; BSR set to: 1
  8743                           ;INTERRUPTS.c: 212: {
  8744                           ;INTERRUPTS.c: 213: if(IR_DataPlace >= IR_CodeSize)
  8745  000150  506A               	movf	_IR_CodeSize,w,c
  8746  000152  5C6B               	subwf	_IR_DataPlace,w,c
  8747  000154  E301               	bnc	i1l223
  8748                           
  8749                           ; BSR set to: 1
  8750                           ;INTERRUPTS.c: 214: {
  8751                           ;INTERRUPTS.c: 215: PIR1bits.TMR1IF = 1;
  8752  000156  809E               	bsf	3998,0,c	;volatile
  8753  000158                     i1l223:
  8754                           
  8755                           ;INTERRUPTS.c: 216: }
  8756                           ;INTERRUPTS.c: 217: }
  8757                           ;INTERRUPTS.c: 218: }
  8758                           ;INTERRUPTS.c: 219: }
  8759                           ;INTERRUPTS.c: 220: }
  8760                           ;INTERRUPTS.c: 221: IRChange = 0;
  8761  000158  6A67               	clrf	_IRChange,c
  8762                           
  8763                           ;INTERRUPTS.c: 222: }
  8764  00015A  D001               	goto	i1l220
  8765  00015C                     i1l221:
  8766                           
  8767                           ;INTERRUPTS.c: 223: else
  8768                           ;INTERRUPTS.c: 224: {
  8769                           ;INTERRUPTS.c: 226: __nop();
  8770  00015C  F000               	nop	
  8771  00015E                     i1l220:
  8772                           
  8773                           ;INTERRUPTS.c: 227: }
  8774                           ;INTERRUPTS.c: 228: INTCONbits.RBIF = 0;
  8775  00015E  90F2               	bcf	intcon,0,c	;volatile
  8776                           
  8777                           ;INTERRUPTS.c: 229: }
  8778  000160  D057               	goto	i1l251
  8779  000162                     i1l212:
  8780                           
  8781                           ;INTERRUPTS.c: 230: else if(PIR1bits.TMR2IF)
  8782  000162  A29E               	btfss	3998,1,c	;volatile
  8783  000164  D01E               	goto	i1l235
  8784                           
  8785                           ;INTERRUPTS.c: 231: {
  8786                           ;INTERRUPTS.c: 233: if(Timer2PostCount >= Timer2Post)
  8787  000166  5062               	movf	_Timer2Post,w,c
  8788  000168  5C64               	subwf	_Timer2PostCount,w,c
  8789  00016A  5063               	movf	_Timer2Post+1,w,c
  8790  00016C  5865               	subwfb	_Timer2PostCount+1,w,c
  8791  00016E  E311               	bnc	i15L__ptext59
  8792                           
  8793                           ;INTERRUPTS.c: 234: {
  8794                           ;INTERRUPTS.c: 235: TMR_Timer2(0);
  8795  000170  0E00               	movlw	0
  8796  000172  EC86  F00D         	call	i1_TMR_Timer2
  8797                           
  8798                           ;INTERRUPTS.c: 236: if(Timer2Use == 17)
  8799  000176  0E11               	movlw	17
  8800  000178  186C               	xorwf	_Timer2Use,w,c
  8801  00017A  E102               	bnz	i1l6654
  8802                           
  8803                           ;INTERRUPTS.c: 237: {
  8804                           ;INTERRUPTS.c: 239: System_State = 10;
  8805  00017C  0E0A               	movlw	10
  8806  00017E  D004               	goto	L1
  8807  000180                     i1l6654:
  8808                           
  8809                           ;INTERRUPTS.c: 242: else if(Timer2Use == 18)
  8810  000180  0E12               	movlw	18
  8811  000182  186C               	xorwf	_Timer2Use,w,c
  8812  000184  E10C               	bnz	i1l6662
  8813                           
  8814                           ;INTERRUPTS.c: 243: {
  8815                           ;INTERRUPTS.c: 244: System_State = 8;
  8816  000186  0E08               	movlw	8
  8817  000188                     L1:
  8818  000188  0101               	movlb	1	; () banked
  8819  00018A  6FAE               	movwf	_System_State& (0+255),b	;volatile
  8820                           
  8821                           ;INTERRUPTS.c: 245: System_State_Change = 1;
  8822  00018C  0E01               	movlw	1
  8823  00018E  6F06               	movwf	_System_State_Change& (0+255),b	;volatile
  8824  000190  D006               	goto	i1l6662
  8825  000192                     i15L__ptext59:
  8826                           	opt stack 0
  8827  000192                     i15Li1_SYS_ActivityTimerReset:
  8828                           	opt stack 0
  8829  000192                     i15Li1l6352:
  8830                           	opt stack 17
  8831                           
  8832                           ;SYSTEM.c: 61: Activity_Timer = 0;
  8833  000192  6A5A               	clrf	_Activity_Timer,c
  8834  000194  6A5B               	clrf	_Activity_Timer+1,c
  8835  000196  6A5C               	clrf	_Activity_Timer+2,c
  8836  000198  6A5D               	clrf	_Activity_Timer+3,c
  8837  00019A                     i15Li1l334:
  8838                           	opt stack 13
  8839                           
  8840                           ;INTERRUPTS.c: 251: Timer2PostCount++;
  8841  00019A  4A64               	infsnz	_Timer2PostCount,f,c
  8842  00019C  2A65               	incf	_Timer2PostCount+1,f,c
  8843  00019E                     i1l6662:
  8844                           
  8845                           ;INTERRUPTS.c: 252: }
  8846                           ;INTERRUPTS.c: 253: PIR1bits.TMR2IF = 0;
  8847  00019E  929E               	bcf	3998,1,c	;volatile
  8848                           
  8849                           ;INTERRUPTS.c: 254: }
  8850  0001A0  D037               	goto	i1l251
  8851  0001A2                     i1l235:
  8852                           
  8853                           ;INTERRUPTS.c: 255: else if(PIR1bits.ADIF)
  8854  0001A2  AC9E               	btfss	3998,6,c	;volatile
  8855  0001A4  D004               	goto	i1l242
  8856                           
  8857                           ;INTERRUPTS.c: 256: {
  8858                           ;INTERRUPTS.c: 258: ADC_CalculateVoltage();
  8859  0001A6  EC77  F005         	call	_ADC_CalculateVoltage	;wreg free
  8860                           
  8861                           ;INTERRUPTS.c: 259: PIR1bits.ADIF = 0;
  8862  0001AA  9C9E               	bcf	3998,6,c	;volatile
  8863                           
  8864                           ;INTERRUPTS.c: 260: }
  8865  0001AC  D031               	goto	i1l251
  8866  0001AE                     i1l242:
  8867                           
  8868                           ;INTERRUPTS.c: 261: else if(PIR1bits.TMR1IF)
  8869  0001AE  A09E               	btfss	3998,0,c	;volatile
  8870  0001B0  D02E               	goto	i1l244
  8871                           
  8872                           ;INTERRUPTS.c: 262: {
  8873                           ;INTERRUPTS.c: 264: BUT_IR_PinChangeInt(0);
  8874  0001B2  0E00               	movlw	0
  8875  0001B4  EC7F  F00D         	call	i1_BUT_IR_PinChangeInt
  8876                           
  8877                           ;INTERRUPTS.c: 265: TMR_Timer1(0);
  8878  0001B8  0E00               	movlw	0
  8879  0001BA  EC8D  F00D         	call	i1_TMR_Timer1
  8880  0001BE                     i16L__ptext59:
  8881                           	opt stack 0
  8882  0001BE                     i16Li1_SYS_ActivityTimerReset:
  8883                           	opt stack 0
  8884  0001BE                     i16Li1l6352:
  8885                           	opt stack 17
  8886                           
  8887                           ;SYSTEM.c: 61: Activity_Timer = 0;
  8888  0001BE  6A5A               	clrf	_Activity_Timer,c
  8889  0001C0  6A5B               	clrf	_Activity_Timer+1,c
  8890  0001C2  6A5C               	clrf	_Activity_Timer+2,c
  8891  0001C4  6A5D               	clrf	_Activity_Timer+3,c
  8892  0001C6                     i16Li1l334:
  8893                           	opt stack 13
  8894                           
  8895                           ;INTERRUPTS.c: 267: BUT_ReadButton();
  8896  0001C6  EC8F  F00B         	call	i1_BUT_ReadButton	;wreg free
  8897                           
  8898                           ; BSR set to: 0
  8899                           ;INTERRUPTS.c: 268: IR_ReadReceiver();
  8900  0001CA  ECFA  F00B         	call	i1_IR_ReadReceiver	;wreg free
  8901                           
  8902                           ; BSR set to: 0
  8903                           ;INTERRUPTS.c: 269: INTCONbits.RBIF = 0;
  8904  0001CE  90F2               	bcf	intcon,0,c	;volatile
  8905                           
  8906                           ; BSR set to: 0
  8907                           ;INTERRUPTS.c: 270: if(System_State == 10)
  8908  0001D0  0E0A               	movlw	10
  8909  0001D2  0101               	movlb	1	; () banked
  8910  0001D4  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
  8911  0001D6  E108               	bnz	i1l6684
  8912                           
  8913                           ; BSR set to: 1
  8914                           ;INTERRUPTS.c: 271: {
  8915                           ;INTERRUPTS.c: 272: if(IR_DataPlace >= 40)
  8916  0001D8  0E27               	movlw	39
  8917  0001DA  646B               	cpfsgt	_IR_DataPlace,c
  8918  0001DC  D00A               	goto	i1l6690
  8919  0001DE                     i1l6682:
  8920                           
  8921                           ; BSR set to: 1
  8922                           ;INTERRUPTS.c: 273: {
  8923                           ;INTERRUPTS.c: 275: IR_Data = IR_CheckCode();
  8924  0001DE  EC01  F014         	call	_IR_CheckCode	;wreg free
  8925  0001E2  0101               	movlb	1	; () banked
  8926  0001E4  6F04               	movwf	_IR_Data& (0+255),b	;volatile
  8927  0001E6  D005               	goto	i1l6690
  8928  0001E8                     i1l6684:
  8929                           
  8930                           ; BSR set to: 1
  8931                           ;INTERRUPTS.c: 278: else
  8932                           ;INTERRUPTS.c: 279: {
  8933                           ;INTERRUPTS.c: 280: if(!IR_Data)
  8934  0001E8  5104               	movf	_IR_Data& (0+255),w,b	;volatile
  8935  0001EA  E103               	bnz	i1l6690
  8936                           
  8937                           ; BSR set to: 1
  8938                           ;INTERRUPTS.c: 281: {
  8939                           ;INTERRUPTS.c: 282: if(IR_DataPlace >= IR_CodeSize)
  8940  0001EC  506A               	movf	_IR_CodeSize,w,c
  8941  0001EE  5C6B               	subwf	_IR_DataPlace,w,c
  8942  0001F0  E2F6               	bc	i1l6682
  8943  0001F2                     i1l6690:
  8944                           
  8945                           ; BSR set to: 1
  8946                           ;INTERRUPTS.c: 285: }
  8947                           ;INTERRUPTS.c: 286: }
  8948                           ;INTERRUPTS.c: 287: }
  8949                           ;INTERRUPTS.c: 288: TMR_ResetTimer1();
  8950  0001F2  EC4B  F00C         	call	i1_TMR_ResetTimer1	;wreg free
  8951                           
  8952                           ;INTERRUPTS.c: 289: IR_ResetData();
  8953  0001F6  ECB6  F00D         	call	_IR_ResetData	;wreg free
  8954                           
  8955                           ;INTERRUPTS.c: 290: INTCON3bits.INT1IF = 0;
  8956  0001FA  90F0               	bcf	intcon3,0,c	;volatile
  8957                           
  8958                           ;INTERRUPTS.c: 291: INTCON3bits.INT2IF = 0;
  8959  0001FC  92F0               	bcf	intcon3,1,c	;volatile
  8960                           
  8961                           ;INTERRUPTS.c: 292: RF_DataInt(1);
  8962  0001FE  0E01               	movlw	1
  8963  000200  ECF5  F00C         	call	i1_RF_DataInt
  8964                           
  8965                           ;INTERRUPTS.c: 293: BUT_IR_PinChangeInt(1);
  8966  000204  0E01               	movlw	1
  8967  000206  EC7F  F00D         	call	i1_BUT_IR_PinChangeInt
  8968                           
  8969                           ;INTERRUPTS.c: 294: PIR1bits.TMR1IF = 0;
  8970  00020A  909E               	bcf	3998,0,c	;volatile
  8971                           
  8972                           ;INTERRUPTS.c: 295: }
  8973  00020C  D001               	goto	i1l251
  8974  00020E                     i1l244:
  8975                           
  8976                           ;INTERRUPTS.c: 296: else
  8977                           ;INTERRUPTS.c: 297: {
  8978                           ;INTERRUPTS.c: 299: __nop();
  8979  00020E  F000               	nop	
  8980  000210                     i1l251:
  8981  000210  C056  FFF5         	movff	??_low_isr+10,tablat
  8982  000214  C055  FFF8         	movff	??_low_isr+9,tblptru
  8983  000218  C054  FFF7         	movff	??_low_isr+8,tblptrh
  8984  00021C  C053  FFF6         	movff	??_low_isr+7,tblptrl
  8985  000220  C052  FFF4         	movff	??_low_isr+6,prodh
  8986  000224  C051  FFF3         	movff	??_low_isr+5,prodl
  8987  000228  C050  FFDA         	movff	??_low_isr+4,fsr2h
  8988  00022C  C04F  FFD9         	movff	??_low_isr+3,fsr2l
  8989  000230  C04E  FFE0         	movff	??_low_isr+2,bsr
  8990  000234  C04D  FFE8         	movff	??_low_isr+1,wreg
  8991  000238  C04C  FFD8         	movff	??_low_isr,status
  8992  00023C  906E               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  8993  00023E  0010               	retfie	
  8994  000240                     __end_of_low_isr:
  8995                           	opt stack 0
  8996                           tblptru	equ	0xFF8
  8997                           tblptrh	equ	0xFF7
  8998                           tblptrl	equ	0xFF6
  8999                           tablat	equ	0xFF5
  9000                           prodh	equ	0xFF4
  9001                           prodl	equ	0xFF3
  9002                           intcon	equ	0xFF2
  9003                           intcon2	equ	0xFF1
  9004                           intcon3	equ	0xFF0
  9005                           postinc0	equ	0xFEE
  9006                           wreg	equ	0xFE8
  9007                           postdec1	equ	0xFE5
  9008                           fsr1l	equ	0xFE1
  9009                           bsr	equ	0xFE0
  9010                           postinc2	equ	0xFDE
  9011                           postdec2	equ	0xFDD
  9012                           fsr2h	equ	0xFDA
  9013                           fsr2l	equ	0xFD9
  9014                           status	equ	0xFD8
  9015                           
  9016 ;; *************** function i1_SYS_ActivityTimerReset *****************
  9017 ;; Defined at:
  9018 ;;		line 59 in file "SYSTEM.c"
  9019 ;; Parameters:    Size  Location     Type
  9020 ;;		None
  9021 ;; Auto vars:     Size  Location     Type
  9022 ;;		None
  9023 ;; Return value:  Size  Location     Type
  9024 ;;		None               void
  9025 ;; Registers used:
  9026 ;;		None
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9032 ;;      Params:         0       0       0       0       0
  9033 ;;      Locals:         0       0       0       0       0
  9034 ;;      Temps:          0       0       0       0       0
  9035 ;;      Totals:         0       0       0       0       0
  9036 ;;Total ram usage:        0 bytes
  9037 ;; Hardware stack levels used:    1
  9038 ;; Hardware stack levels required when called:    6
  9039 ;; This function calls:
  9040 ;;		Nothing
  9041 ;; This function is called by:
  9042 ;;		_low_isr
  9043 ;; This function uses a non-reentrant model
  9044 ;;
  9045                           
  9046                           	psect	text59
  9047  000000                     __ptext59:
  9048                           	opt stack 0
  9049  000000                     __end_ofi1_SYS_ActivityTimerReset:
  9050                           	opt stack 0
  9051                           tblptru	equ	0xFF8
  9052                           tblptrh	equ	0xFF7
  9053                           tblptrl	equ	0xFF6
  9054                           tablat	equ	0xFF5
  9055                           prodh	equ	0xFF4
  9056                           prodl	equ	0xFF3
  9057                           intcon	equ	0xFF2
  9058                           intcon2	equ	0xFF1
  9059                           intcon3	equ	0xFF0
  9060                           postinc0	equ	0xFEE
  9061                           wreg	equ	0xFE8
  9062                           postdec1	equ	0xFE5
  9063                           fsr1l	equ	0xFE1
  9064                           bsr	equ	0xFE0
  9065                           postinc2	equ	0xFDE
  9066                           postdec2	equ	0xFDD
  9067                           fsr2h	equ	0xFDA
  9068                           fsr2l	equ	0xFD9
  9069                           status	equ	0xFD8
  9070                           
  9071 ;; *************** function i1_IR_ReadReceiver *****************
  9072 ;; Defined at:
  9073 ;;		line 82 in file "IR.c"
  9074 ;; Parameters:    Size  Location     Type
  9075 ;;		None
  9076 ;; Auto vars:     Size  Location     Type
  9077 ;;  IR_ReadRecei    1    0[COMRAM] unsigned char 
  9078 ;; Return value:  Size  Location     Type
  9079 ;;                  1    wreg      unsigned char 
  9080 ;; Registers used:
  9081 ;;		wreg, status,2, status,0
  9082 ;; Tracked objects:
  9083 ;;		On entry : F/0
  9084 ;;		On exit  : F/0
  9085 ;;		Unchanged: 0/0
  9086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9087 ;;      Params:         0       0       0       0       0
  9088 ;;      Locals:         1       0       0       0       0
  9089 ;;      Temps:          0       0       0       0       0
  9090 ;;      Totals:         1       0       0       0       0
  9091 ;;Total ram usage:        1 bytes
  9092 ;; Hardware stack levels used:    1
  9093 ;; Hardware stack levels required when called:    6
  9094 ;; This function calls:
  9095 ;;		Nothing
  9096 ;; This function is called by:
  9097 ;;		_low_isr
  9098 ;; This function uses a non-reentrant model
  9099 ;;
  9100                           
  9101                           	psect	text60
  9102  0017F4                     __ptext60:
  9103                           	opt stack 0
  9104  0017F4                     i1_IR_ReadReceiver:
  9105                           	opt stack 17
  9106                           
  9107                           ; BSR set to: 0
  9108                           ;IR.c: 84: unsigned char value = PORTB;
  9109                           
  9110                           ;incstack = 0
  9111  0017F4  CF81 F001          	movff	3969,i1IR_ReadReceiver@value	;volatile
  9112                           
  9113                           ;IR.c: 86: if(value & 0x10)
  9114  0017F8  A801               	btfss	i1IR_ReadReceiver@value,4,c
  9115  0017FA  D007               	goto	i1l6366
  9116                           
  9117                           ; BSR set to: 0
  9118                           ;IR.c: 87: {
  9119                           ;IR.c: 88: if(IRValue_prev == 0)
  9120  0017FC  51C6               	movf	_IRValue_prev& (0+255),w,b
  9121  0017FE  E102               	bnz	i1l566
  9122                           
  9123                           ; BSR set to: 0
  9124                           ;IR.c: 89: {
  9125                           ;IR.c: 90: IRChange = 1;
  9126  001800  0E01               	movlw	1
  9127  001802  6E67               	movwf	_IRChange,c
  9128  001804                     i1l566:
  9129                           
  9130                           ; BSR set to: 0
  9131                           ;IR.c: 91: }
  9132                           ;IR.c: 92: IRValue_prev = 1;
  9133  001804  0E01               	movlw	1
  9134  001806  6FC6               	movwf	_IRValue_prev& (0+255),b
  9135                           
  9136                           ; BSR set to: 0
  9137                           ;IR.c: 93: return 1;
  9138  001808  0C01               	retlw	1
  9139  00180A                     i1l6366:
  9140                           
  9141                           ; BSR set to: 0
  9142                           ;IR.c: 94: }
  9143                           ;IR.c: 96: if(IRValue_prev == 1)
  9144  00180A  05C6               	decf	_IRValue_prev& (0+255),w,b
  9145  00180C  E102               	bnz	i1l6370
  9146                           
  9147                           ; BSR set to: 0
  9148                           ;IR.c: 97: {
  9149                           ;IR.c: 98: IRChange = 1;
  9150  00180E  0E01               	movlw	1
  9151  001810  6E67               	movwf	_IRChange,c
  9152  001812                     i1l6370:
  9153                           
  9154                           ; BSR set to: 0
  9155                           ;IR.c: 99: }
  9156                           ;IR.c: 100: IRValue_prev = 0;
  9157  001812  6BC6               	clrf	_IRValue_prev& (0+255),b
  9158                           
  9159                           ; BSR set to: 0
  9160                           
  9161                           ; BSR set to: 0
  9162                           ;IR.c: 101: return 0;
  9163  001814  0C00               	retlw	0	;funcret
  9164  001816                     __end_ofi1_IR_ReadReceiver:
  9165                           	opt stack 0
  9166                           tblptru	equ	0xFF8
  9167                           tblptrh	equ	0xFF7
  9168                           tblptrl	equ	0xFF6
  9169                           tablat	equ	0xFF5
  9170                           prodh	equ	0xFF4
  9171                           prodl	equ	0xFF3
  9172                           intcon	equ	0xFF2
  9173                           intcon2	equ	0xFF1
  9174                           intcon3	equ	0xFF0
  9175                           postinc0	equ	0xFEE
  9176                           wreg	equ	0xFE8
  9177                           postdec1	equ	0xFE5
  9178                           fsr1l	equ	0xFE1
  9179                           bsr	equ	0xFE0
  9180                           postinc2	equ	0xFDE
  9181                           postdec2	equ	0xFDD
  9182                           fsr2h	equ	0xFDA
  9183                           fsr2l	equ	0xFD9
  9184                           status	equ	0xFD8
  9185                           
  9186 ;; *************** function i1_BUT_ReadButton *****************
  9187 ;; Defined at:
  9188 ;;		line 73 in file "BUTTON.c"
  9189 ;; Parameters:    Size  Location     Type
  9190 ;;		None
  9191 ;; Auto vars:     Size  Location     Type
  9192 ;;  BUT_ReadButt    1    0[COMRAM] unsigned char 
  9193 ;; Return value:  Size  Location     Type
  9194 ;;                  1    wreg      unsigned char 
  9195 ;; Registers used:
  9196 ;;		wreg, status,2, status,0
  9197 ;; Tracked objects:
  9198 ;;		On entry : 0/0
  9199 ;;		On exit  : F/0
  9200 ;;		Unchanged: 0/0
  9201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9202 ;;      Params:         0       0       0       0       0
  9203 ;;      Locals:         1       0       0       0       0
  9204 ;;      Temps:          0       0       0       0       0
  9205 ;;      Totals:         1       0       0       0       0
  9206 ;;Total ram usage:        1 bytes
  9207 ;; Hardware stack levels used:    1
  9208 ;; Hardware stack levels required when called:    6
  9209 ;; This function calls:
  9210 ;;		Nothing
  9211 ;; This function is called by:
  9212 ;;		_low_isr
  9213 ;; This function uses a non-reentrant model
  9214 ;;
  9215                           
  9216                           	psect	text61
  9217  00171E                     __ptext61:
  9218                           	opt stack 0
  9219  00171E                     i1_BUT_ReadButton:
  9220                           	opt stack 17
  9221                           
  9222                           ;BUTTON.c: 75: unsigned char value = PORTB;
  9223                           
  9224                           ; BSR set to: 0
  9225                           ;incstack = 0
  9226  00171E  CF81 F001          	movff	3969,i1BUT_ReadButton@value	;volatile
  9227                           
  9228                           ;BUTTON.c: 76: if((value & 0x20) == 0)
  9229  001722  BA01               	btfsc	i1BUT_ReadButton@value,5,c
  9230  001724  D008               	goto	i1l6386
  9231                           
  9232                           ;BUTTON.c: 77: {
  9233                           ;BUTTON.c: 79: if(ButtonValue_prev == 0)
  9234  001726  0100               	movlb	0	; () banked
  9235  001728  51C4               	movf	_ButtonValue_prev& (0+255),w,b
  9236  00172A  E102               	bnz	i1l734
  9237                           
  9238                           ; BSR set to: 0
  9239                           ;BUTTON.c: 80: {
  9240                           ;BUTTON.c: 81: ButtonChange = 1;
  9241  00172C  0E01               	movlw	1
  9242  00172E  6E66               	movwf	_ButtonChange,c
  9243  001730                     i1l734:
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;BUTTON.c: 82: }
  9247                           ;BUTTON.c: 83: ButtonValue_prev = 1;
  9248  001730  0E01               	movlw	1
  9249  001732  6FC4               	movwf	_ButtonValue_prev& (0+255),b
  9250                           
  9251                           ; BSR set to: 0
  9252                           ;BUTTON.c: 84: return 1;
  9253  001734  0C01               	retlw	1
  9254  001736                     i1l6386:
  9255                           
  9256                           ;BUTTON.c: 85: }
  9257                           ;BUTTON.c: 88: if(ButtonValue_prev == 1)
  9258  001736  0100               	movlb	0	; () banked
  9259  001738  05C4               	decf	_ButtonValue_prev& (0+255),w,b
  9260  00173A  E102               	bnz	i1l6390
  9261                           
  9262                           ; BSR set to: 0
  9263                           ;BUTTON.c: 89: {
  9264                           ;BUTTON.c: 90: ButtonChange = 1;
  9265  00173C  0E01               	movlw	1
  9266  00173E  6E66               	movwf	_ButtonChange,c
  9267  001740                     i1l6390:
  9268                           
  9269                           ; BSR set to: 0
  9270                           ;BUTTON.c: 91: }
  9271                           ;BUTTON.c: 92: ButtonValue_prev = 0;
  9272  001740  6BC4               	clrf	_ButtonValue_prev& (0+255),b
  9273                           
  9274                           ; BSR set to: 0
  9275                           
  9276                           ; BSR set to: 0
  9277                           ;BUTTON.c: 93: return 0;
  9278  001742  0C00               	retlw	0	;funcret
  9279  001744                     __end_ofi1_BUT_ReadButton:
  9280                           	opt stack 0
  9281                           tblptru	equ	0xFF8
  9282                           tblptrh	equ	0xFF7
  9283                           tblptrl	equ	0xFF6
  9284                           tablat	equ	0xFF5
  9285                           prodh	equ	0xFF4
  9286                           prodl	equ	0xFF3
  9287                           intcon	equ	0xFF2
  9288                           intcon2	equ	0xFF1
  9289                           intcon3	equ	0xFF0
  9290                           postinc0	equ	0xFEE
  9291                           wreg	equ	0xFE8
  9292                           postdec1	equ	0xFE5
  9293                           fsr1l	equ	0xFE1
  9294                           bsr	equ	0xFE0
  9295                           postinc2	equ	0xFDE
  9296                           postdec2	equ	0xFDD
  9297                           fsr2h	equ	0xFDA
  9298                           fsr2l	equ	0xFD9
  9299                           status	equ	0xFD8
  9300                           
  9301 ;; *************** function i1_BUT_IR_PinChangeInt *****************
  9302 ;; Defined at:
  9303 ;;		line 101 in file "BUTTON.c"
  9304 ;; Parameters:    Size  Location     Type
  9305 ;;  state           1    wreg     unsigned char 
  9306 ;; Auto vars:     Size  Location     Type
  9307 ;;  state           1    0[COMRAM] unsigned char 
  9308 ;; Return value:  Size  Location     Type
  9309 ;;		None               void
  9310 ;; Registers used:
  9311 ;;		wreg, status,2
  9312 ;; Tracked objects:
  9313 ;;		On entry : 0/0
  9314 ;;		On exit  : 0/0
  9315 ;;		Unchanged: 0/0
  9316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9317 ;;      Params:         0       0       0       0       0
  9318 ;;      Locals:         1       0       0       0       0
  9319 ;;      Temps:          0       0       0       0       0
  9320 ;;      Totals:         1       0       0       0       0
  9321 ;;Total ram usage:        1 bytes
  9322 ;; Hardware stack levels used:    1
  9323 ;; Hardware stack levels required when called:    6
  9324 ;; This function calls:
  9325 ;;		Nothing
  9326 ;; This function is called by:
  9327 ;;		_low_isr
  9328 ;; This function uses a non-reentrant model
  9329 ;;
  9330                           
  9331                           	psect	text62
  9332  001AFE                     __ptext62:
  9333                           	opt stack 0
  9334  001AFE                     i1_BUT_IR_PinChangeInt:
  9335                           	opt stack 17
  9336                           
  9337                           ; BSR set to: 0
  9338                           ;incstack = 0
  9339                           ;i1BUT_IR_PinChangeInt@state stored from wreg
  9340  001AFE  6E01               	movwf	i1BUT_IR_PinChangeInt@state,c
  9341                           
  9342                           ;BUTTON.c: 103: if(state)
  9343  001B00  5001               	movf	i1BUT_IR_PinChangeInt@state,w,c
  9344  001B02  E002               	bz	i1l739
  9345                           
  9346                           ;BUTTON.c: 104: {
  9347                           ;BUTTON.c: 106: INTCONbits.RBIE = 1;
  9348  001B04  86F2               	bsf	intcon,3,c	;volatile
  9349                           
  9350                           ;BUTTON.c: 107: }
  9351  001B06  0012               	return	
  9352  001B08                     i1l739:
  9353                           
  9354                           ;BUTTON.c: 108: else
  9355                           ;BUTTON.c: 109: {
  9356                           ;BUTTON.c: 111: INTCONbits.RBIE = 0;
  9357  001B08  96F2               	bcf	intcon,3,c	;volatile
  9358  001B0A  0012               	return		;funcret
  9359  001B0C                     __end_ofi1_BUT_IR_PinChangeInt:
  9360                           	opt stack 0
  9361                           tblptru	equ	0xFF8
  9362                           tblptrh	equ	0xFF7
  9363                           tblptrl	equ	0xFF6
  9364                           tablat	equ	0xFF5
  9365                           prodh	equ	0xFF4
  9366                           prodl	equ	0xFF3
  9367                           intcon	equ	0xFF2
  9368                           intcon2	equ	0xFF1
  9369                           intcon3	equ	0xFF0
  9370                           postinc0	equ	0xFEE
  9371                           wreg	equ	0xFE8
  9372                           postdec1	equ	0xFE5
  9373                           fsr1l	equ	0xFE1
  9374                           bsr	equ	0xFE0
  9375                           postinc2	equ	0xFDE
  9376                           postdec2	equ	0xFDD
  9377                           fsr2h	equ	0xFDA
  9378                           fsr2l	equ	0xFD9
  9379                           status	equ	0xFD8
  9380                           
  9381 ;; *************** function _TMR_Timer2Start *****************
  9382 ;; Defined at:
  9383 ;;		line 142 in file "TIMERS.c"
  9384 ;; Parameters:    Size  Location     Type
  9385 ;;  time            2    2[COMRAM] unsigned int 
  9386 ;; Auto vars:     Size  Location     Type
  9387 ;;		None
  9388 ;; Return value:  Size  Location     Type
  9389 ;;		None               void
  9390 ;; Registers used:
  9391 ;;		wreg, status,2, cstack
  9392 ;; Tracked objects:
  9393 ;;		On entry : 0/1
  9394 ;;		On exit  : 0/0
  9395 ;;		Unchanged: 0/0
  9396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9397 ;;      Params:         2       0       0       0       0
  9398 ;;      Locals:         0       0       0       0       0
  9399 ;;      Temps:          0       0       0       0       0
  9400 ;;      Totals:         2       0       0       0       0
  9401 ;;Total ram usage:        2 bytes
  9402 ;; Hardware stack levels used:    1
  9403 ;; Hardware stack levels required when called:    8
  9404 ;; This function calls:
  9405 ;;		_TMR_ResetTimer2
  9406 ;;		i1_TMR_Timer2
  9407 ;; This function is called by:
  9408 ;;		_low_isr
  9409 ;; This function uses a non-reentrant model
  9410 ;;
  9411                           
  9412                           	psect	text63
  9413  00195E                     __ptext63:
  9414                           	opt stack 0
  9415  00195E                     _TMR_Timer2Start:
  9416                           	opt stack 15
  9417                           
  9418                           ;TIMERS.c: 144: TMR_Timer2(0);
  9419                           
  9420                           ;incstack = 0
  9421  00195E  0E00               	movlw	0
  9422  001960  EC86  F00D         	call	i1_TMR_Timer2
  9423                           
  9424                           ;TIMERS.c: 145: Timer2Post = time;
  9425  001964  C003  F062         	movff	TMR_Timer2Start@time,_Timer2Post
  9426  001968  C004  F063         	movff	TMR_Timer2Start@time+1,_Timer2Post+1
  9427                           
  9428                           ;TIMERS.c: 146: TMR_ResetTimer2();
  9429  00196C  EC3B  F00C         	call	_TMR_ResetTimer2	;wreg free
  9430                           
  9431                           ;TIMERS.c: 147: TMR_Timer2(1);
  9432  001970  0E01               	movlw	1
  9433  001972  EF86  F00D         	goto	i1_TMR_Timer2
  9434  001976                     __end_of_TMR_Timer2Start:
  9435                           	opt stack 0
  9436                           tblptru	equ	0xFF8
  9437                           tblptrh	equ	0xFF7
  9438                           tblptrl	equ	0xFF6
  9439                           tablat	equ	0xFF5
  9440                           prodh	equ	0xFF4
  9441                           prodl	equ	0xFF3
  9442                           intcon	equ	0xFF2
  9443                           intcon2	equ	0xFF1
  9444                           intcon3	equ	0xFF0
  9445                           postinc0	equ	0xFEE
  9446                           wreg	equ	0xFE8
  9447                           postdec1	equ	0xFE5
  9448                           fsr1l	equ	0xFE1
  9449                           bsr	equ	0xFE0
  9450                           postinc2	equ	0xFDE
  9451                           postdec2	equ	0xFDD
  9452                           fsr2h	equ	0xFDA
  9453                           fsr2l	equ	0xFD9
  9454                           status	equ	0xFD8
  9455                           
  9456 ;; *************** function _TMR_ResetTimer2 *****************
  9457 ;; Defined at:
  9458 ;;		line 304 in file "TIMERS.c"
  9459 ;; Parameters:    Size  Location     Type
  9460 ;;		None
  9461 ;; Auto vars:     Size  Location     Type
  9462 ;;  TimerOn         1    1[COMRAM] unsigned char 
  9463 ;; Return value:  Size  Location     Type
  9464 ;;		None               void
  9465 ;; Registers used:
  9466 ;;		wreg, status,2, cstack
  9467 ;; Tracked objects:
  9468 ;;		On entry : 0/1
  9469 ;;		On exit  : 0/0
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9472 ;;      Params:         0       0       0       0       0
  9473 ;;      Locals:         1       0       0       0       0
  9474 ;;      Temps:          0       0       0       0       0
  9475 ;;      Totals:         1       0       0       0       0
  9476 ;;Total ram usage:        1 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; Hardware stack levels required when called:    7
  9479 ;; This function calls:
  9480 ;;		i1_TMR_Timer2
  9481 ;; This function is called by:
  9482 ;;		_TMR_Timer2Start
  9483 ;; This function uses a non-reentrant model
  9484 ;;
  9485                           
  9486                           	psect	text64
  9487  001876                     __ptext64:
  9488                           	opt stack 0
  9489  001876                     _TMR_ResetTimer2:
  9490                           	opt stack 15
  9491                           
  9492                           ;TIMERS.c: 306: unsigned char TimerOn = T2CONbits.TMR2ON;
  9493                           
  9494                           ;incstack = 0
  9495  001876  0E00               	movlw	0
  9496  001878  B4CA               	btfsc	4042,2,c	;volatile
  9497  00187A  0E01               	movlw	1
  9498  00187C  6E02               	movwf	TMR_ResetTimer2@TimerOn,c
  9499                           
  9500                           ;TIMERS.c: 308: TMR_Timer2(0);
  9501  00187E  0E00               	movlw	0
  9502  001880  EC86  F00D         	call	i1_TMR_Timer2
  9503                           
  9504                           ;TIMERS.c: 309: Timer2PostCount = 0;
  9505  001884  6A64               	clrf	_Timer2PostCount,c
  9506  001886  6A65               	clrf	_Timer2PostCount+1,c
  9507                           
  9508                           ;TIMERS.c: 310: TMR2 = 0;
  9509  001888  6ACC               	clrf	4044,c	;volatile
  9510                           
  9511                           ;TIMERS.c: 311: if(TimerOn)
  9512  00188A  5002               	movf	TMR_ResetTimer2@TimerOn,w,c
  9513  00188C  B4D8               	btfsc	status,2,c
  9514  00188E  0012               	return	
  9515                           
  9516                           ;TIMERS.c: 312: {
  9517                           ;TIMERS.c: 313: TMR_Timer2(1);
  9518  001890  0E01               	movlw	1
  9519  001892  EF86  F00D         	goto	i1_TMR_Timer2
  9520  001896                     __end_of_TMR_ResetTimer2:
  9521                           	opt stack 0
  9522                           tblptru	equ	0xFF8
  9523                           tblptrh	equ	0xFF7
  9524                           tblptrl	equ	0xFF6
  9525                           tablat	equ	0xFF5
  9526                           prodh	equ	0xFF4
  9527                           prodl	equ	0xFF3
  9528                           intcon	equ	0xFF2
  9529                           intcon2	equ	0xFF1
  9530                           intcon3	equ	0xFF0
  9531                           postinc0	equ	0xFEE
  9532                           wreg	equ	0xFE8
  9533                           postdec1	equ	0xFE5
  9534                           fsr1l	equ	0xFE1
  9535                           bsr	equ	0xFE0
  9536                           postinc2	equ	0xFDE
  9537                           postdec2	equ	0xFDD
  9538                           fsr2h	equ	0xFDA
  9539                           fsr2l	equ	0xFD9
  9540                           status	equ	0xFD8
  9541                           
  9542 ;; *************** function i1_TMR_Timer2 *****************
  9543 ;; Defined at:
  9544 ;;		line 249 in file "TIMERS.c"
  9545 ;; Parameters:    Size  Location     Type
  9546 ;;  state           1    wreg     unsigned char 
  9547 ;; Auto vars:     Size  Location     Type
  9548 ;;  state           1    0[COMRAM] unsigned char 
  9549 ;; Return value:  Size  Location     Type
  9550 ;;		None               void
  9551 ;; Registers used:
  9552 ;;		wreg, status,2
  9553 ;; Tracked objects:
  9554 ;;		On entry : 0/0
  9555 ;;		On exit  : 0/0
  9556 ;;		Unchanged: 0/0
  9557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9558 ;;      Params:         0       0       0       0       0
  9559 ;;      Locals:         1       0       0       0       0
  9560 ;;      Temps:          0       0       0       0       0
  9561 ;;      Totals:         1       0       0       0       0
  9562 ;;Total ram usage:        1 bytes
  9563 ;; Hardware stack levels used:    1
  9564 ;; Hardware stack levels required when called:    6
  9565 ;; This function calls:
  9566 ;;		Nothing
  9567 ;; This function is called by:
  9568 ;;		_low_isr
  9569 ;;		_TMR_Timer2Start
  9570 ;;		_TMR_ResetTimer2
  9571 ;; This function uses a non-reentrant model
  9572 ;;
  9573                           
  9574                           	psect	text65
  9575  001B0C                     __ptext65:
  9576                           	opt stack 0
  9577  001B0C                     i1_TMR_Timer2:
  9578                           	opt stack 17
  9579                           
  9580                           ;incstack = 0
  9581                           ;i1TMR_Timer2@state stored from wreg
  9582  001B0C  6E01               	movwf	i1TMR_Timer2@state,c
  9583                           
  9584                           ;TIMERS.c: 251: if(state)
  9585  001B0E  5001               	movf	i1TMR_Timer2@state,w,c
  9586  001B10  E002               	bz	i1l848
  9587                           
  9588                           ;TIMERS.c: 252: {
  9589                           ;TIMERS.c: 254: T2CONbits.TMR2ON = 1;
  9590  001B12  84CA               	bsf	4042,2,c	;volatile
  9591                           
  9592                           ;TIMERS.c: 255: }
  9593  001B14  0012               	return	
  9594  001B16                     i1l848:
  9595                           
  9596                           ;TIMERS.c: 256: else
  9597                           ;TIMERS.c: 257: {
  9598                           ;TIMERS.c: 259: T2CONbits.TMR2ON = 0;
  9599  001B16  94CA               	bcf	4042,2,c	;volatile
  9600  001B18  0012               	return		;funcret
  9601  001B1A                     __end_ofi1_TMR_Timer2:
  9602                           	opt stack 0
  9603                           tblptru	equ	0xFF8
  9604                           tblptrh	equ	0xFF7
  9605                           tblptrl	equ	0xFF6
  9606                           tablat	equ	0xFF5
  9607                           prodh	equ	0xFF4
  9608                           prodl	equ	0xFF3
  9609                           intcon	equ	0xFF2
  9610                           intcon2	equ	0xFF1
  9611                           intcon3	equ	0xFF0
  9612                           postinc0	equ	0xFEE
  9613                           wreg	equ	0xFE8
  9614                           postdec1	equ	0xFE5
  9615                           fsr1l	equ	0xFE1
  9616                           bsr	equ	0xFE0
  9617                           postinc2	equ	0xFDE
  9618                           postdec2	equ	0xFDD
  9619                           fsr2h	equ	0xFDA
  9620                           fsr2l	equ	0xFD9
  9621                           status	equ	0xFD8
  9622                           
  9623 ;; *************** function _TMR_Timer1Status *****************
  9624 ;; Defined at:
  9625 ;;		line 196 in file "TIMERS.c"
  9626 ;; Parameters:    Size  Location     Type
  9627 ;;		None
  9628 ;; Auto vars:     Size  Location     Type
  9629 ;;		None
  9630 ;; Return value:  Size  Location     Type
  9631 ;;                  1    wreg      unsigned char 
  9632 ;; Registers used:
  9633 ;;		wreg
  9634 ;; Tracked objects:
  9635 ;;		On entry : 0/0
  9636 ;;		On exit  : 0/0
  9637 ;;		Unchanged: 0/0
  9638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9639 ;;      Params:         0       0       0       0       0
  9640 ;;      Locals:         0       0       0       0       0
  9641 ;;      Temps:          0       0       0       0       0
  9642 ;;      Totals:         0       0       0       0       0
  9643 ;;Total ram usage:        0 bytes
  9644 ;; Hardware stack levels used:    1
  9645 ;; Hardware stack levels required when called:    6
  9646 ;; This function calls:
  9647 ;;		Nothing
  9648 ;; This function is called by:
  9649 ;;		_low_isr
  9650 ;; This function uses a non-reentrant model
  9651 ;;
  9652                           
  9653                           	psect	text66
  9654  001B8A                     __ptext66:
  9655                           	opt stack 0
  9656  001B8A                     _TMR_Timer1Status:
  9657                           	opt stack 17
  9658                           
  9659                           ;TIMERS.c: 198: if(T1CONbits.TMR1ON)
  9660                           
  9661                           ;incstack = 0
  9662  001B8A  B0CD               	btfsc	4045,0,c	;volatile
  9663                           
  9664                           ;TIMERS.c: 199: {
  9665                           ;TIMERS.c: 201: return 1;
  9666  001B8C  0C01               	retlw	1
  9667                           
  9668                           ;TIMERS.c: 202: }
  9669                           ;TIMERS.c: 203: return 0;
  9670  001B8E  0C00               	retlw	0	;funcret
  9671  001B90                     __end_of_TMR_Timer1Status:
  9672                           	opt stack 0
  9673                           tblptru	equ	0xFF8
  9674                           tblptrh	equ	0xFF7
  9675                           tblptrl	equ	0xFF6
  9676                           tablat	equ	0xFF5
  9677                           prodh	equ	0xFF4
  9678                           prodl	equ	0xFF3
  9679                           intcon	equ	0xFF2
  9680                           intcon2	equ	0xFF1
  9681                           intcon3	equ	0xFF0
  9682                           postinc0	equ	0xFEE
  9683                           wreg	equ	0xFE8
  9684                           postdec1	equ	0xFE5
  9685                           fsr1l	equ	0xFE1
  9686                           bsr	equ	0xFE0
  9687                           postinc2	equ	0xFDE
  9688                           postdec2	equ	0xFDD
  9689                           fsr2h	equ	0xFDA
  9690                           fsr2l	equ	0xFD9
  9691                           status	equ	0xFD8
  9692                           
  9693 ;; *************** function _TMR_Timer1Start *****************
  9694 ;; Defined at:
  9695 ;;		line 130 in file "TIMERS.c"
  9696 ;; Parameters:    Size  Location     Type
  9697 ;;		None
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;		None
  9700 ;; Return value:  Size  Location     Type
  9701 ;;		None               void
  9702 ;; Registers used:
  9703 ;;		wreg, status,2, cstack
  9704 ;; Tracked objects:
  9705 ;;		On entry : 0/0
  9706 ;;		On exit  : 0/0
  9707 ;;		Unchanged: 0/0
  9708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9709 ;;      Params:         0       0       0       0       0
  9710 ;;      Locals:         0       0       0       0       0
  9711 ;;      Temps:          0       0       0       0       0
  9712 ;;      Totals:         0       0       0       0       0
  9713 ;;Total ram usage:        0 bytes
  9714 ;; Hardware stack levels used:    1
  9715 ;; Hardware stack levels required when called:    8
  9716 ;; This function calls:
  9717 ;;		i1_TMR_ResetTimer1
  9718 ;;		i1_TMR_Timer1
  9719 ;; This function is called by:
  9720 ;;		_low_isr
  9721 ;; This function uses a non-reentrant model
  9722 ;;
  9723                           
  9724                           	psect	text67
  9725  001ABE                     __ptext67:
  9726                           	opt stack 0
  9727  001ABE                     _TMR_Timer1Start:
  9728                           	opt stack 15
  9729                           
  9730                           ;TIMERS.c: 132: TMR_Timer1(0);
  9731                           
  9732                           ;incstack = 0
  9733  001ABE  0E00               	movlw	0
  9734  001AC0  EC8D  F00D         	call	i1_TMR_Timer1
  9735                           
  9736                           ;TIMERS.c: 133: TMR_ResetTimer1();
  9737  001AC4  EC4B  F00C         	call	i1_TMR_ResetTimer1	;wreg free
  9738                           
  9739                           ;TIMERS.c: 134: TMR_Timer1(1);
  9740  001AC8  0E01               	movlw	1
  9741  001ACA  EF8D  F00D         	goto	i1_TMR_Timer1
  9742  001ACE                     __end_of_TMR_Timer1Start:
  9743                           	opt stack 0
  9744                           tblptru	equ	0xFF8
  9745                           tblptrh	equ	0xFF7
  9746                           tblptrl	equ	0xFF6
  9747                           tablat	equ	0xFF5
  9748                           prodh	equ	0xFF4
  9749                           prodl	equ	0xFF3
  9750                           intcon	equ	0xFF2
  9751                           intcon2	equ	0xFF1
  9752                           intcon3	equ	0xFF0
  9753                           postinc0	equ	0xFEE
  9754                           wreg	equ	0xFE8
  9755                           postdec1	equ	0xFE5
  9756                           fsr1l	equ	0xFE1
  9757                           bsr	equ	0xFE0
  9758                           postinc2	equ	0xFDE
  9759                           postdec2	equ	0xFDD
  9760                           fsr2h	equ	0xFDA
  9761                           fsr2l	equ	0xFD9
  9762                           status	equ	0xFD8
  9763                           
  9764 ;; *************** function i1_TMR_ResetTimer1 *****************
  9765 ;; Defined at:
  9766 ;;		line 286 in file "TIMERS.c"
  9767 ;; Parameters:    Size  Location     Type
  9768 ;;		None
  9769 ;; Auto vars:     Size  Location     Type
  9770 ;;  TMR_ResetTim    1    1[COMRAM] unsigned char 
  9771 ;; Return value:  Size  Location     Type
  9772 ;;		None               void
  9773 ;; Registers used:
  9774 ;;		wreg, status,2, cstack
  9775 ;; Tracked objects:
  9776 ;;		On entry : 0/0
  9777 ;;		On exit  : 0/0
  9778 ;;		Unchanged: 0/0
  9779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9780 ;;      Params:         0       0       0       0       0
  9781 ;;      Locals:         1       0       0       0       0
  9782 ;;      Temps:          0       0       0       0       0
  9783 ;;      Totals:         1       0       0       0       0
  9784 ;;Total ram usage:        1 bytes
  9785 ;; Hardware stack levels used:    1
  9786 ;; Hardware stack levels required when called:    7
  9787 ;; This function calls:
  9788 ;;		i1_TMR_Timer1
  9789 ;; This function is called by:
  9790 ;;		_low_isr
  9791 ;;		_TMR_Timer1Start
  9792 ;; This function uses a non-reentrant model
  9793 ;;
  9794                           
  9795                           	psect	text68
  9796  001896                     __ptext68:
  9797                           	opt stack 0
  9798  001896                     i1_TMR_ResetTimer1:
  9799                           	opt stack 16
  9800                           
  9801                           ;TIMERS.c: 288: unsigned char TimerOn = T1CONbits.TMR1ON;
  9802                           
  9803                           ;incstack = 0
  9804  001896  0E00               	movlw	0
  9805  001898  B0CD               	btfsc	4045,0,c	;volatile
  9806  00189A  0E01               	movlw	1
  9807  00189C  6E02               	movwf	i1TMR_ResetTimer1@TimerOn,c
  9808                           
  9809                           ;TIMERS.c: 290: TMR_Timer1(0);
  9810  00189E  0E00               	movlw	0
  9811  0018A0  EC8D  F00D         	call	i1_TMR_Timer1
  9812                           
  9813                           ;TIMERS.c: 291: TMR1H = 0;
  9814  0018A4  6ACF               	clrf	4047,c	;volatile
  9815                           
  9816                           ;TIMERS.c: 292: TMR1L = 2;
  9817  0018A6  0E02               	movlw	2
  9818  0018A8  6ECE               	movwf	4046,c	;volatile
  9819                           
  9820                           ;TIMERS.c: 293: if(TimerOn)
  9821  0018AA  5002               	movf	i1TMR_ResetTimer1@TimerOn,w,c
  9822  0018AC  B4D8               	btfsc	status,2,c
  9823  0018AE  0012               	return	
  9824                           
  9825                           ;TIMERS.c: 294: {
  9826                           ;TIMERS.c: 295: TMR_Timer1(1);
  9827  0018B0  0E01               	movlw	1
  9828  0018B2  EF8D  F00D         	goto	i1_TMR_Timer1
  9829  0018B6                     __end_ofi1_TMR_ResetTimer1:
  9830                           	opt stack 0
  9831                           tblptru	equ	0xFF8
  9832                           tblptrh	equ	0xFF7
  9833                           tblptrl	equ	0xFF6
  9834                           tablat	equ	0xFF5
  9835                           prodh	equ	0xFF4
  9836                           prodl	equ	0xFF3
  9837                           intcon	equ	0xFF2
  9838                           intcon2	equ	0xFF1
  9839                           intcon3	equ	0xFF0
  9840                           postinc0	equ	0xFEE
  9841                           wreg	equ	0xFE8
  9842                           postdec1	equ	0xFE5
  9843                           fsr1l	equ	0xFE1
  9844                           bsr	equ	0xFE0
  9845                           postinc2	equ	0xFDE
  9846                           postdec2	equ	0xFDD
  9847                           fsr2h	equ	0xFDA
  9848                           fsr2l	equ	0xFD9
  9849                           status	equ	0xFD8
  9850                           
  9851 ;; *************** function i1_TMR_Timer1 *****************
  9852 ;; Defined at:
  9853 ;;		line 230 in file "TIMERS.c"
  9854 ;; Parameters:    Size  Location     Type
  9855 ;;  state           1    wreg     unsigned char 
  9856 ;; Auto vars:     Size  Location     Type
  9857 ;;  state           1    0[COMRAM] unsigned char 
  9858 ;; Return value:  Size  Location     Type
  9859 ;;		None               void
  9860 ;; Registers used:
  9861 ;;		wreg, status,2
  9862 ;; Tracked objects:
  9863 ;;		On entry : 0/0
  9864 ;;		On exit  : 0/0
  9865 ;;		Unchanged: 0/0
  9866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9867 ;;      Params:         0       0       0       0       0
  9868 ;;      Locals:         1       0       0       0       0
  9869 ;;      Temps:          0       0       0       0       0
  9870 ;;      Totals:         1       0       0       0       0
  9871 ;;Total ram usage:        1 bytes
  9872 ;; Hardware stack levels used:    1
  9873 ;; Hardware stack levels required when called:    6
  9874 ;; This function calls:
  9875 ;;		Nothing
  9876 ;; This function is called by:
  9877 ;;		_low_isr
  9878 ;;		_TMR_Timer1Start
  9879 ;;		i1_TMR_ResetTimer1
  9880 ;; This function uses a non-reentrant model
  9881 ;;
  9882                           
  9883                           	psect	text69
  9884  001B1A                     __ptext69:
  9885                           	opt stack 0
  9886  001B1A                     i1_TMR_Timer1:
  9887                           	opt stack 17
  9888                           
  9889                           ;incstack = 0
  9890                           ;i1TMR_Timer1@state stored from wreg
  9891  001B1A  6E01               	movwf	i1TMR_Timer1@state,c
  9892                           
  9893                           ;TIMERS.c: 232: if(state)
  9894  001B1C  5001               	movf	i1TMR_Timer1@state,w,c
  9895  001B1E  E002               	bz	i1l843
  9896                           
  9897                           ;TIMERS.c: 233: {
  9898                           ;TIMERS.c: 235: T1CONbits.TMR1ON = 1;
  9899  001B20  80CD               	bsf	4045,0,c	;volatile
  9900                           
  9901                           ;TIMERS.c: 236: }
  9902  001B22  0012               	return	
  9903  001B24                     i1l843:
  9904                           
  9905                           ;TIMERS.c: 237: else
  9906                           ;TIMERS.c: 238: {
  9907                           ;TIMERS.c: 240: T1CONbits.TMR1ON = 0;
  9908  001B24  90CD               	bcf	4045,0,c	;volatile
  9909  001B26  0012               	return		;funcret
  9910  001B28                     __end_ofi1_TMR_Timer1:
  9911                           	opt stack 0
  9912                           tblptru	equ	0xFF8
  9913                           tblptrh	equ	0xFF7
  9914                           tblptrl	equ	0xFF6
  9915                           tablat	equ	0xFF5
  9916                           prodh	equ	0xFF4
  9917                           prodl	equ	0xFF3
  9918                           intcon	equ	0xFF2
  9919                           intcon2	equ	0xFF1
  9920                           intcon3	equ	0xFF0
  9921                           postinc0	equ	0xFEE
  9922                           wreg	equ	0xFE8
  9923                           postdec1	equ	0xFE5
  9924                           fsr1l	equ	0xFE1
  9925                           bsr	equ	0xFE0
  9926                           postinc2	equ	0xFDE
  9927                           postdec2	equ	0xFDD
  9928                           fsr2h	equ	0xFDA
  9929                           fsr2l	equ	0xFD9
  9930                           status	equ	0xFD8
  9931                           
  9932 ;; *************** function _RF_Disable *****************
  9933 ;; Defined at:
  9934 ;;		line 90 in file "RF.c"
  9935 ;; Parameters:    Size  Location     Type
  9936 ;;		None
  9937 ;; Auto vars:     Size  Location     Type
  9938 ;;		None
  9939 ;; Return value:  Size  Location     Type
  9940 ;;		None               void
  9941 ;; Registers used:
  9942 ;;		wreg, status,2, cstack
  9943 ;; Tracked objects:
  9944 ;;		On entry : 0/0
  9945 ;;		On exit  : 0/0
  9946 ;;		Unchanged: 0/0
  9947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9948 ;;      Params:         0       0       0       0       0
  9949 ;;      Locals:         0       0       0       0       0
  9950 ;;      Temps:          0       0       0       0       0
  9951 ;;      Totals:         0       0       0       0       0
  9952 ;;Total ram usage:        0 bytes
  9953 ;; Hardware stack levels used:    1
  9954 ;; Hardware stack levels required when called:    7
  9955 ;; This function calls:
  9956 ;;		i1_RF_DataInt
  9957 ;;		i1_TMR_Timer0
  9958 ;;		i1_TMR_Timer0Int
  9959 ;; This function is called by:
  9960 ;;		_low_isr
  9961 ;; This function uses a non-reentrant model
  9962 ;;
  9963                           
  9964                           	psect	text70
  9965  0019C6                     __ptext70:
  9966                           	opt stack 0
  9967  0019C6                     _RF_Disable:
  9968                           	opt stack 16
  9969                           
  9970                           ;RF.c: 92: RF_DataInt(0);
  9971                           
  9972                           ;incstack = 0
  9973  0019C6  0E00               	movlw	0
  9974  0019C8  ECF5  F00C         	call	i1_RF_DataInt
  9975                           
  9976                           ;RF.c: 93: TMR_Timer0Int(0);
  9977  0019CC  0E00               	movlw	0
  9978  0019CE  EC9B  F00D         	call	i1_TMR_Timer0Int
  9979                           
  9980                           ;RF.c: 94: TMR_Timer0(0);
  9981  0019D2  0E00               	movlw	0
  9982  0019D4  EF94  F00D         	goto	i1_TMR_Timer0
  9983  0019D8                     __end_of_RF_Disable:
  9984                           	opt stack 0
  9985                           tblptru	equ	0xFF8
  9986                           tblptrh	equ	0xFF7
  9987                           tblptrl	equ	0xFF6
  9988                           tablat	equ	0xFF5
  9989                           prodh	equ	0xFF4
  9990                           prodl	equ	0xFF3
  9991                           intcon	equ	0xFF2
  9992                           intcon2	equ	0xFF1
  9993                           intcon3	equ	0xFF0
  9994                           postinc0	equ	0xFEE
  9995                           wreg	equ	0xFE8
  9996                           postdec1	equ	0xFE5
  9997                           fsr1l	equ	0xFE1
  9998                           bsr	equ	0xFE0
  9999                           postinc2	equ	0xFDE
 10000                           postdec2	equ	0xFDD
 10001                           fsr2h	equ	0xFDA
 10002                           fsr2l	equ	0xFD9
 10003                           status	equ	0xFD8
 10004                           
 10005 ;; *************** function i1_TMR_Timer0 *****************
 10006 ;; Defined at:
 10007 ;;		line 211 in file "TIMERS.c"
 10008 ;; Parameters:    Size  Location     Type
 10009 ;;  state           1    wreg     unsigned char 
 10010 ;; Auto vars:     Size  Location     Type
 10011 ;;  state           1    0[COMRAM] unsigned char 
 10012 ;; Return value:  Size  Location     Type
 10013 ;;		None               void
 10014 ;; Registers used:
 10015 ;;		wreg, status,2
 10016 ;; Tracked objects:
 10017 ;;		On entry : 0/0
 10018 ;;		On exit  : 0/0
 10019 ;;		Unchanged: 0/0
 10020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10021 ;;      Params:         0       0       0       0       0
 10022 ;;      Locals:         1       0       0       0       0
 10023 ;;      Temps:          0       0       0       0       0
 10024 ;;      Totals:         1       0       0       0       0
 10025 ;;Total ram usage:        1 bytes
 10026 ;; Hardware stack levels used:    1
 10027 ;; Hardware stack levels required when called:    6
 10028 ;; This function calls:
 10029 ;;		Nothing
 10030 ;; This function is called by:
 10031 ;;		_RF_Disable
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035                           	psect	text71
 10036  001B28                     __ptext71:
 10037                           	opt stack 0
 10038  001B28                     i1_TMR_Timer0:
 10039                           	opt stack 16
 10040                           
 10041                           ;incstack = 0
 10042                           ;i1TMR_Timer0@state stored from wreg
 10043  001B28  6E01               	movwf	i1TMR_Timer0@state,c
 10044                           
 10045                           ;TIMERS.c: 213: if(state)
 10046  001B2A  5001               	movf	i1TMR_Timer0@state,w,c
 10047  001B2C  E002               	bz	i1l838
 10048                           
 10049                           ;TIMERS.c: 214: {
 10050                           ;TIMERS.c: 216: T0CONbits.TMR0ON = 1;
 10051  001B2E  8ED5               	bsf	4053,7,c	;volatile
 10052                           
 10053                           ;TIMERS.c: 217: }
 10054  001B30  0012               	return	
 10055  001B32                     i1l838:
 10056                           
 10057                           ;TIMERS.c: 218: else
 10058                           ;TIMERS.c: 219: {
 10059                           ;TIMERS.c: 221: T0CONbits.TMR0ON = 0;
 10060  001B32  9ED5               	bcf	4053,7,c	;volatile
 10061  001B34  0012               	return		;funcret
 10062  001B36                     __end_ofi1_TMR_Timer0:
 10063                           	opt stack 0
 10064                           tblptru	equ	0xFF8
 10065                           tblptrh	equ	0xFF7
 10066                           tblptrl	equ	0xFF6
 10067                           tablat	equ	0xFF5
 10068                           prodh	equ	0xFF4
 10069                           prodl	equ	0xFF3
 10070                           intcon	equ	0xFF2
 10071                           intcon2	equ	0xFF1
 10072                           intcon3	equ	0xFF0
 10073                           postinc0	equ	0xFEE
 10074                           wreg	equ	0xFE8
 10075                           postdec1	equ	0xFE5
 10076                           fsr1l	equ	0xFE1
 10077                           bsr	equ	0xFE0
 10078                           postinc2	equ	0xFDE
 10079                           postdec2	equ	0xFDD
 10080                           fsr2h	equ	0xFDA
 10081                           fsr2l	equ	0xFD9
 10082                           status	equ	0xFD8
 10083                           
 10084 ;; *************** function _IR_CheckCode *****************
 10085 ;; Defined at:
 10086 ;;		line 210 in file "IR.c"
 10087 ;; Parameters:    Size  Location     Type
 10088 ;;		None
 10089 ;; Auto vars:     Size  Location     Type
 10090 ;;  Low             3   71[COMRAM] unsigned char 
 10091 ;;  High            3   68[COMRAM] unsigned char 
 10092 ;;  data            2   66[COMRAM] unsigned int 
 10093 ;;  i               1   74[COMRAM] unsigned char 
 10094 ;; Return value:  Size  Location     Type
 10095 ;;                  1    wreg      unsigned char 
 10096 ;; Registers used:
 10097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10098 ;; Tracked objects:
 10099 ;;		On entry : 0/1
 10100 ;;		On exit  : 0/0
 10101 ;;		Unchanged: 0/0
 10102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10103 ;;      Params:         0       0       0       0       0
 10104 ;;      Locals:         9       0       0       0       0
 10105 ;;      Temps:          6       0       0       0       0
 10106 ;;      Totals:        15       0       0       0       0
 10107 ;;Total ram usage:       15 bytes
 10108 ;; Hardware stack levels used:    1
 10109 ;; Hardware stack levels required when called:   10
 10110 ;; This function calls:
 10111 ;;		_FSH_Write_IR_RF
 10112 ;;		i1_IR_LoadCode
 10113 ;;		i1___ftge
 10114 ;;		i1___ftmul
 10115 ;;		i1___lwtoft
 10116 ;; This function is called by:
 10117 ;;		_low_isr
 10118 ;; This function uses a non-reentrant model
 10119 ;;
 10120                           
 10121                           	psect	text72
 10122  002802                     __ptext72:
 10123                           	opt stack 0
 10124  002802                     _IR_CheckCode:
 10125                           	opt stack 13
 10126                           
 10127                           ;IR.c: 214: double High = 0.0;
 10128                           
 10129                           ;incstack = 0
 10130  002802  6A45               	clrf	IR_CheckCode@High,c
 10131  002804  6A46               	clrf	IR_CheckCode@High+1,c
 10132  002806  6A47               	clrf	IR_CheckCode@High+2,c
 10133                           
 10134                           ;IR.c: 215: unsigned int data;
 10135                           ;IR.c: 217: if(System_State == 8)
 10136  002808  0E08               	movlw	8
 10137  00280A  0101               	movlb	1	; () banked
 10138  00280C  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
 10139  00280E  E001 D309          	bnz	i1l6294
 10140                           
 10141                           ; BSR set to: 1
 10142                           ;IR.c: 218: {
 10143                           ;IR.c: 219: for(i=0; i<IR_CodeSize;i++)
 10144  002812  6A4B               	clrf	IR_CheckCode@i,c
 10145  002814  D189               	goto	i1l6256
 10146  002816                     i1l6222:
 10147                           
 10148                           ;IR.c: 220: {
 10149                           ;IR.c: 221: data = IR_SavedTiming0[i];
 10150  002816  504B               	movf	IR_CheckCode@i,w,c
 10151  002818  0D02               	mullw	2
 10152  00281A  0E00               	movlw	0
 10153  00281C  24F3               	addwf	prodl,w,c
 10154  00281E  6EF6               	movwf	tblptrl,c
 10155  002820  0E24               	movlw	36
 10156  002822  20F4               	addwfc	prodh,w,c
 10157  002824  6EF7               	movwf	tblptrh,c
 10158  002826  6AF8               	clrf	tblptru,c
 10159  002828  0E00               	movlw	0
 10160  00282A  22F8               	addwfc	tblptru,f,c
 10161  00282C  0009               	tblrd		*+
 10162  00282E  CFF5 F043          	movff	tablat,IR_CheckCode@data
 10163  002832  000A               	tblrd		*-
 10164  002834  CFF5 F044          	movff	tablat,IR_CheckCode@data+1
 10165  002838  C043  F009         	movff	IR_CheckCode@data,i1___lwtoft@c
 10166  00283C  C044  F00A         	movff	IR_CheckCode@data+1,i1___lwtoft@c+1
 10167  002840  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10168                           
 10169                           ;IR.c: 223: if(IR_SavedTiming0[i] > 4000)
 10170  002844  504B               	movf	IR_CheckCode@i,w,c
 10171  002846  0D02               	mullw	2
 10172  002848  0E00               	movlw	0
 10173  00284A  24F3               	addwf	prodl,w,c
 10174  00284C  6EF6               	movwf	tblptrl,c
 10175  00284E  0E24               	movlw	36
 10176  002850  20F4               	addwfc	prodh,w,c
 10177  002852  6EF7               	movwf	tblptrh,c
 10178  002854  6AF8               	clrf	tblptru,c
 10179  002856  0E00               	movlw	0
 10180  002858  22F8               	addwfc	tblptru,f,c
 10181  00285A  0009               	tblrd		*+
 10182  00285C  0EA1               	movlw	161
 10183  00285E  5EF5               	subwf	tablat,f,c
 10184  002860  0009               	tblrd		*+
 10185  002862  0E0F               	movlw	15
 10186  002864  5AF5               	subwfb	tablat,f,c
 10187  002866  E348               	bnc	i1l6230
 10188                           
 10189                           ;IR.c: 224: {
 10190                           ;IR.c: 225: Low = (double)IR_SavedTiming0[i] * (1.0 - 0.3);
 10191  002868  504B               	movf	IR_CheckCode@i,w,c
 10192  00286A  0D02               	mullw	2
 10193  00286C  0E00               	movlw	0
 10194  00286E  24F3               	addwf	prodl,w,c
 10195  002870  6EF6               	movwf	tblptrl,c
 10196  002872  0E24               	movlw	36
 10197  002874  20F4               	addwfc	prodh,w,c
 10198  002876  6EF7               	movwf	tblptrh,c
 10199  002878  6AF8               	clrf	tblptru,c
 10200  00287A  0E00               	movlw	0
 10201  00287C  22F8               	addwfc	tblptru,f,c
 10202  00287E  0009               	tblrd		*+
 10203  002880  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10204  002884  000A               	tblrd		*-
 10205  002886  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10206  00288A  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10207  00288E  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10208  002892  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10209  002896  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10210  00289A  0E33               	movlw	51
 10211  00289C  6E1E               	movwf	i1___ftmul@f2,c
 10212  00289E  6E1F               	movwf	i1___ftmul@f2+1,c
 10213  0028A0  0E3F               	movlw	63
 10214  0028A2  6E20               	movwf	i1___ftmul@f2+2,c
 10215  0028A4  EC23  F003         	call	i1___ftmul	;wreg free
 10216  0028A8  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10217  0028AC  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10218  0028B0  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10219                           
 10220                           ;IR.c: 226: High = (double)IR_SavedTiming0[i] * (1.0 + 0.3);
 10221  0028B4  504B               	movf	IR_CheckCode@i,w,c
 10222  0028B6  0D02               	mullw	2
 10223  0028B8  0E00               	movlw	0
 10224  0028BA  24F3               	addwf	prodl,w,c
 10225  0028BC  6EF6               	movwf	tblptrl,c
 10226  0028BE  0E24               	movlw	36
 10227  0028C0  20F4               	addwfc	prodh,w,c
 10228  0028C2  6EF7               	movwf	tblptrh,c
 10229  0028C4  6AF8               	clrf	tblptru,c
 10230  0028C6  0E00               	movlw	0
 10231  0028C8  22F8               	addwfc	tblptru,f,c
 10232  0028CA  0009               	tblrd		*+
 10233  0028CC  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10234  0028D0  000A               	tblrd		*-
 10235  0028D2  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10236  0028D6  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10237  0028DA  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10238  0028DE  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10239  0028E2  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10240  0028E6  0E66               	movlw	102
 10241  0028E8  6E1E               	movwf	i1___ftmul@f2,c
 10242  0028EA  0EA6               	movlw	166
 10243  0028EC  6E1F               	movwf	i1___ftmul@f2+1,c
 10244  0028EE  0E3F               	movlw	63
 10245  0028F0  6E20               	movwf	i1___ftmul@f2+2,c
 10246  0028F2  EC23  F003         	call	i1___ftmul	;wreg free
 10247  0028F6  D0B3               	goto	L2
 10248  0028F8                     i1l6230:
 10249                           
 10250                           ;IR.c: 228: else if(IR_SavedTiming0[i] <= 4000 && IR_SavedTiming0[i] > 1000)
 10251  0028F8  504B               	movf	IR_CheckCode@i,w,c
 10252  0028FA  0D02               	mullw	2
 10253  0028FC  0E00               	movlw	0
 10254  0028FE  24F3               	addwf	prodl,w,c
 10255  002900  6EF6               	movwf	tblptrl,c
 10256  002902  0E24               	movlw	36
 10257  002904  20F4               	addwfc	prodh,w,c
 10258  002906  6EF7               	movwf	tblptrh,c
 10259  002908  6AF8               	clrf	tblptru,c
 10260  00290A  0E00               	movlw	0
 10261  00290C  22F8               	addwfc	tblptru,f,c
 10262  00290E  0009               	tblrd		*+
 10263  002910  0EA1               	movlw	161
 10264  002912  5EF5               	subwf	tablat,f,c
 10265  002914  0009               	tblrd		*+
 10266  002916  0E0F               	movlw	15
 10267  002918  5AF5               	subwfb	tablat,f,c
 10268  00291A  E259               	bc	i1l6236
 10269  00291C  504B               	movf	IR_CheckCode@i,w,c
 10270  00291E  0D02               	mullw	2
 10271  002920  0E00               	movlw	0
 10272  002922  24F3               	addwf	prodl,w,c
 10273  002924  6EF6               	movwf	tblptrl,c
 10274  002926  0E24               	movlw	36
 10275  002928  20F4               	addwfc	prodh,w,c
 10276  00292A  6EF7               	movwf	tblptrh,c
 10277  00292C  6AF8               	clrf	tblptru,c
 10278  00292E  0E00               	movlw	0
 10279  002930  22F8               	addwfc	tblptru,f,c
 10280  002932  0009               	tblrd		*+
 10281  002934  0EE9               	movlw	233
 10282  002936  5EF5               	subwf	tablat,f,c
 10283  002938  0009               	tblrd		*+
 10284  00293A  0E03               	movlw	3
 10285  00293C  5AF5               	subwfb	tablat,f,c
 10286  00293E  E347               	bnc	i1l6236
 10287                           
 10288                           ;IR.c: 229: {
 10289                           ;IR.c: 230: Low = (double)IR_SavedTiming0[i] * (1.0 - 0.75);
 10290  002940  504B               	movf	IR_CheckCode@i,w,c
 10291  002942  0D02               	mullw	2
 10292  002944  0E00               	movlw	0
 10293  002946  24F3               	addwf	prodl,w,c
 10294  002948  6EF6               	movwf	tblptrl,c
 10295  00294A  0E24               	movlw	36
 10296  00294C  20F4               	addwfc	prodh,w,c
 10297  00294E  6EF7               	movwf	tblptrh,c
 10298  002950  6AF8               	clrf	tblptru,c
 10299  002952  0E00               	movlw	0
 10300  002954  22F8               	addwfc	tblptru,f,c
 10301  002956  0009               	tblrd		*+
 10302  002958  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10303  00295C  000A               	tblrd		*-
 10304  00295E  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10305  002962  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10306  002966  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10307  00296A  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10308  00296E  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10309  002972  6A1E               	clrf	i1___ftmul@f2,c
 10310  002974  0E80               	movlw	128
 10311  002976  6E1F               	movwf	i1___ftmul@f2+1,c
 10312  002978  0E3E               	movlw	62
 10313  00297A  6E20               	movwf	i1___ftmul@f2+2,c
 10314  00297C  EC23  F003         	call	i1___ftmul	;wreg free
 10315  002980  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10316  002984  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10317  002988  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10318                           
 10319                           ;IR.c: 231: High = (double)IR_SavedTiming0[i] * (1.0 + 0.75);
 10320  00298C  504B               	movf	IR_CheckCode@i,w,c
 10321  00298E  0D02               	mullw	2
 10322  002990  0E00               	movlw	0
 10323  002992  24F3               	addwf	prodl,w,c
 10324  002994  6EF6               	movwf	tblptrl,c
 10325  002996  0E24               	movlw	36
 10326  002998  20F4               	addwfc	prodh,w,c
 10327  00299A  6EF7               	movwf	tblptrh,c
 10328  00299C  6AF8               	clrf	tblptru,c
 10329  00299E  0E00               	movlw	0
 10330  0029A0  22F8               	addwfc	tblptru,f,c
 10331  0029A2  0009               	tblrd		*+
 10332  0029A4  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10333  0029A8  000A               	tblrd		*-
 10334  0029AA  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10335  0029AE  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10336  0029B2  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10337  0029B6  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10338  0029BA  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10339  0029BE  6A1E               	clrf	i1___ftmul@f2,c
 10340  0029C0  0EE0               	movlw	224
 10341  0029C2  6E1F               	movwf	i1___ftmul@f2+1,c
 10342  0029C4  0E3F               	movlw	63
 10343  0029C6  6E20               	movwf	i1___ftmul@f2+2,c
 10344  0029C8  EC23  F003         	call	i1___ftmul	;wreg free
 10345  0029CC  D048               	goto	L2
 10346  0029CE                     i1l6236:
 10347                           
 10348                           ;IR.c: 233: else
 10349                           ;IR.c: 234: {
 10350                           ;IR.c: 235: Low = (double)IR_SavedTiming0[i] * (1.0 - 1.1);
 10351  0029CE  504B               	movf	IR_CheckCode@i,w,c
 10352  0029D0  0D02               	mullw	2
 10353  0029D2  0E00               	movlw	0
 10354  0029D4  24F3               	addwf	prodl,w,c
 10355  0029D6  6EF6               	movwf	tblptrl,c
 10356  0029D8  0E24               	movlw	36
 10357  0029DA  20F4               	addwfc	prodh,w,c
 10358  0029DC  6EF7               	movwf	tblptrh,c
 10359  0029DE  6AF8               	clrf	tblptru,c
 10360  0029E0  0E00               	movlw	0
 10361  0029E2  22F8               	addwfc	tblptru,f,c
 10362  0029E4  0009               	tblrd		*+
 10363  0029E6  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10364  0029EA  000A               	tblrd		*-
 10365  0029EC  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10366  0029F0  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10367  0029F4  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10368  0029F8  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10369  0029FC  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10370  002A00  0ECD               	movlw	205
 10371  002A02  6E1E               	movwf	i1___ftmul@f2,c
 10372  002A04  0ECC               	movlw	204
 10373  002A06  6E1F               	movwf	i1___ftmul@f2+1,c
 10374  002A08  0EBD               	movlw	189
 10375  002A0A  6E20               	movwf	i1___ftmul@f2+2,c
 10376  002A0C  EC23  F003         	call	i1___ftmul	;wreg free
 10377  002A10  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10378  002A14  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10379  002A18  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10380                           
 10381                           ;IR.c: 236: High = (double)IR_SavedTiming0[i] * (1.0 + 1.1);
 10382  002A1C  504B               	movf	IR_CheckCode@i,w,c
 10383  002A1E  0D02               	mullw	2
 10384  002A20  0E00               	movlw	0
 10385  002A22  24F3               	addwf	prodl,w,c
 10386  002A24  6EF6               	movwf	tblptrl,c
 10387  002A26  0E24               	movlw	36
 10388  002A28  20F4               	addwfc	prodh,w,c
 10389  002A2A  6EF7               	movwf	tblptrh,c
 10390  002A2C  6AF8               	clrf	tblptru,c
 10391  002A2E  0E00               	movlw	0
 10392  002A30  22F8               	addwfc	tblptru,f,c
 10393  002A32  0009               	tblrd		*+
 10394  002A34  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10395  002A38  000A               	tblrd		*-
 10396  002A3A  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10397  002A3E  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10398  002A42  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10399  002A46  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10400  002A4A  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10401  002A4E  0E66               	movlw	102
 10402  002A50  6E1E               	movwf	i1___ftmul@f2,c
 10403  002A52  0E06               	movlw	6
 10404  002A54  6E1F               	movwf	i1___ftmul@f2+1,c
 10405  002A56  0E40               	movlw	64
 10406  002A58  6E20               	movwf	i1___ftmul@f2+2,c
 10407  002A5A  EC23  F003         	call	i1___ftmul	;wreg free
 10408  002A5E                     L2:
 10409  002A5E  C01B  F045         	movff	?i1___ftmul,IR_CheckCode@High
 10410  002A62  C01C  F046         	movff	?i1___ftmul+1,IR_CheckCode@High+1
 10411  002A66  C01D  F047         	movff	?i1___ftmul+2,IR_CheckCode@High+2
 10412                           
 10413                           ;IR.c: 237: }
 10414                           ;IR.c: 239: if((double)IR_DataTiming[i] < Low || (double)IR_DataTiming[i] > High )
 10415  002A6A  504B               	movf	IR_CheckCode@i,w,c
 10416  002A6C  0D02               	mullw	2
 10417  002A6E  0E00               	movlw	low _IR_DataTiming
 10418  002A70  24F3               	addwf	prodl,w,c
 10419  002A72  6ED9               	movwf	fsr2l,c
 10420  002A74  0E02               	movlw	high _IR_DataTiming
 10421  002A76  20F4               	addwfc	prodh,w,c
 10422  002A78  6EDA               	movwf	fsr2h,c
 10423  002A7A  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10424  002A7E  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10425  002A82  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10426  002A86  C009  F00C         	movff	?i1___lwtoft,i1___ftge@ff1
 10427  002A8A  C00A  F00D         	movff	?i1___lwtoft+1,i1___ftge@ff1+1
 10428  002A8E  C00B  F00E         	movff	?i1___lwtoft+2,i1___ftge@ff1+2
 10429  002A92  C048  F00F         	movff	IR_CheckCode@Low,i1___ftge@ff2
 10430  002A96  C049  F010         	movff	IR_CheckCode@Low+1,i1___ftge@ff2+1
 10431  002A9A  C04A  F011         	movff	IR_CheckCode@Low+2,i1___ftge@ff2+2
 10432  002A9E  EC69  F009         	call	i1___ftge	;wreg free
 10433  002AA2  E31D               	bnc	i1l6242
 10434  002AA4  C045  F00C         	movff	IR_CheckCode@High,i1___ftge@ff1
 10435  002AA8  C046  F00D         	movff	IR_CheckCode@High+1,i1___ftge@ff1+1
 10436  002AAC  C047  F00E         	movff	IR_CheckCode@High+2,i1___ftge@ff1+2
 10437  002AB0  504B               	movf	IR_CheckCode@i,w,c
 10438  002AB2  0D02               	mullw	2
 10439  002AB4  0E00               	movlw	low _IR_DataTiming
 10440  002AB6  24F3               	addwf	prodl,w,c
 10441  002AB8  6ED9               	movwf	fsr2l,c
 10442  002ABA  0E02               	movlw	high _IR_DataTiming
 10443  002ABC  20F4               	addwfc	prodh,w,c
 10444  002ABE  6EDA               	movwf	fsr2h,c
 10445  002AC0  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10446  002AC4  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10447  002AC8  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10448  002ACC  C009  F00F         	movff	?i1___lwtoft,i1___ftge@ff2
 10449  002AD0  C00A  F010         	movff	?i1___lwtoft+1,i1___ftge@ff2+1
 10450  002AD4  C00B  F011         	movff	?i1___lwtoft+2,i1___ftge@ff2+2
 10451  002AD8  EC69  F009         	call	i1___ftge	;wreg free
 10452  002ADC  E211               	bc	i1l6248
 10453  002ADE                     i1l6242:
 10454                           
 10455                           ;IR.c: 240: {
 10456                           ;IR.c: 241: if(IR_SavedTiming0[i] == 0)
 10457  002ADE  504B               	movf	IR_CheckCode@i,w,c
 10458  002AE0  0D02               	mullw	2
 10459  002AE2  0E00               	movlw	0
 10460  002AE4  24F3               	addwf	prodl,w,c
 10461  002AE6  6EF6               	movwf	tblptrl,c
 10462  002AE8  0E24               	movlw	36
 10463  002AEA  20F4               	addwfc	prodh,w,c
 10464  002AEC  6EF7               	movwf	tblptrh,c
 10465  002AEE  6AF8               	clrf	tblptru,c
 10466  002AF0  0E00               	movlw	0
 10467  002AF2  22F8               	addwfc	tblptru,f,c
 10468  002AF4  0009               	tblrd		*+
 10469  002AF6  50F5               	movf	tablat,w,c
 10470  002AF8  0009               	tblrd		*+
 10471  002AFA  10F5               	iorwf	tablat,w,c
 10472  002AFC  E119               	bnz	i1l604
 10473                           
 10474                           ;IR.c: 242: {
 10475                           ;IR.c: 243: return 1;
 10476  002AFE  0C01               	retlw	1
 10477  002B00                     i1l6248:
 10478                           
 10479                           ;IR.c: 246: }
 10480                           ;IR.c: 247: if(i == (IR_CodeSize -1))
 10481  002B00  504B               	movf	IR_CheckCode@i,w,c
 10482  002B02  6E3D               	movwf	??_IR_CheckCode& (0+255),c
 10483  002B04  6A3E               	clrf	(??_IR_CheckCode+1)& (0+255),c
 10484  002B06  683F               	setf	(??_IR_CheckCode+2)& (0+255),c
 10485  002B08  6840               	setf	(??_IR_CheckCode+3)& (0+255),c
 10486  002B0A  506A               	movf	_IR_CodeSize,w,c
 10487  002B0C  6E41               	movwf	(??_IR_CheckCode+4)& (0+255),c
 10488  002B0E  6A42               	clrf	(??_IR_CheckCode+5)& (0+255),c
 10489  002B10  503F               	movf	??_IR_CheckCode+2,w,c
 10490  002B12  2641               	addwf	??_IR_CheckCode+4,f,c
 10491  002B14  5040               	movf	??_IR_CheckCode+3,w,c
 10492  002B16  2242               	addwfc	??_IR_CheckCode+5,f,c
 10493  002B18  503D               	movf	??_IR_CheckCode,w,c
 10494  002B1A  1841               	xorwf	??_IR_CheckCode+4,w,c
 10495  002B1C  E104               	bnz	i1l6254
 10496  002B1E  503E               	movf	??_IR_CheckCode+1,w,c
 10497  002B20  1842               	xorwf	??_IR_CheckCode+5,w,c
 10498  002B22  E101               	bnz	i1l6254
 10499  002B24  0C01               	retlw	1
 10500  002B26                     i1l6254:
 10501  002B26  2A4B               	incf	IR_CheckCode@i,f,c
 10502  002B28                     i1l6256:
 10503  002B28  506A               	movf	_IR_CodeSize,w,c
 10504  002B2A  5C4B               	subwf	IR_CheckCode@i,w,c
 10505  002B2C  E201 D673          	bnc	i1l6222
 10506  002B30                     i1l604:
 10507                           
 10508                           ;IR.c: 250: }
 10509                           ;IR.c: 251: }
 10510                           ;IR.c: 252: for(i=0; i<IR_CodeSize;i++)
 10511  002B30  6A4B               	clrf	IR_CheckCode@i,c
 10512  002B32  D173               	goto	i1l6292
 10513  002B34                     i1l6258:
 10514                           
 10515                           ;IR.c: 253: {
 10516                           ;IR.c: 254: if(IR_SavedTiming1[i] > 4000)
 10517  002B34  504B               	movf	IR_CheckCode@i,w,c
 10518  002B36  0D02               	mullw	2
 10519  002B38  0EC0               	movlw	192
 10520  002B3A  24F3               	addwf	prodl,w,c
 10521  002B3C  6EF6               	movwf	tblptrl,c
 10522  002B3E  0E24               	movlw	36
 10523  002B40  20F4               	addwfc	prodh,w,c
 10524  002B42  6EF7               	movwf	tblptrh,c
 10525  002B44  6AF8               	clrf	tblptru,c
 10526  002B46  0E00               	movlw	0
 10527  002B48  22F8               	addwfc	tblptru,f,c
 10528  002B4A  0009               	tblrd		*+
 10529  002B4C  0EA1               	movlw	161
 10530  002B4E  5EF5               	subwf	tablat,f,c
 10531  002B50  0009               	tblrd		*+
 10532  002B52  0E0F               	movlw	15
 10533  002B54  5AF5               	subwfb	tablat,f,c
 10534  002B56  E348               	bnc	i1l6262
 10535                           
 10536                           ;IR.c: 255: {
 10537                           ;IR.c: 256: Low = (double)IR_SavedTiming1[i] * (1.0 - 0.3);
 10538  002B58  504B               	movf	IR_CheckCode@i,w,c
 10539  002B5A  0D02               	mullw	2
 10540  002B5C  0EC0               	movlw	192
 10541  002B5E  24F3               	addwf	prodl,w,c
 10542  002B60  6EF6               	movwf	tblptrl,c
 10543  002B62  0E24               	movlw	36
 10544  002B64  20F4               	addwfc	prodh,w,c
 10545  002B66  6EF7               	movwf	tblptrh,c
 10546  002B68  6AF8               	clrf	tblptru,c
 10547  002B6A  0E00               	movlw	0
 10548  002B6C  22F8               	addwfc	tblptru,f,c
 10549  002B6E  0009               	tblrd		*+
 10550  002B70  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10551  002B74  000A               	tblrd		*-
 10552  002B76  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10553  002B7A  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10554  002B7E  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10555  002B82  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10556  002B86  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10557  002B8A  0E33               	movlw	51
 10558  002B8C  6E1E               	movwf	i1___ftmul@f2,c
 10559  002B8E  6E1F               	movwf	i1___ftmul@f2+1,c
 10560  002B90  0E3F               	movlw	63
 10561  002B92  6E20               	movwf	i1___ftmul@f2+2,c
 10562  002B94  EC23  F003         	call	i1___ftmul	;wreg free
 10563  002B98  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10564  002B9C  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10565  002BA0  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10566                           
 10567                           ;IR.c: 257: High = (double)IR_SavedTiming1[i] * (1.0 + 0.3);
 10568  002BA4  504B               	movf	IR_CheckCode@i,w,c
 10569  002BA6  0D02               	mullw	2
 10570  002BA8  0EC0               	movlw	192
 10571  002BAA  24F3               	addwf	prodl,w,c
 10572  002BAC  6EF6               	movwf	tblptrl,c
 10573  002BAE  0E24               	movlw	36
 10574  002BB0  20F4               	addwfc	prodh,w,c
 10575  002BB2  6EF7               	movwf	tblptrh,c
 10576  002BB4  6AF8               	clrf	tblptru,c
 10577  002BB6  0E00               	movlw	0
 10578  002BB8  22F8               	addwfc	tblptru,f,c
 10579  002BBA  0009               	tblrd		*+
 10580  002BBC  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10581  002BC0  000A               	tblrd		*-
 10582  002BC2  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10583  002BC6  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10584  002BCA  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10585  002BCE  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10586  002BD2  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10587  002BD6  0E66               	movlw	102
 10588  002BD8  6E1E               	movwf	i1___ftmul@f2,c
 10589  002BDA  0EA6               	movlw	166
 10590  002BDC  6E1F               	movwf	i1___ftmul@f2+1,c
 10591  002BDE  0E3F               	movlw	63
 10592  002BE0  6E20               	movwf	i1___ftmul@f2+2,c
 10593  002BE2  EC23  F003         	call	i1___ftmul	;wreg free
 10594  002BE6  D0B3               	goto	L3
 10595  002BE8                     i1l6262:
 10596                           
 10597                           ;IR.c: 259: else if(IR_SavedTiming0[i] <= 4000 && IR_SavedTiming0[i] > 1000)
 10598  002BE8  504B               	movf	IR_CheckCode@i,w,c
 10599  002BEA  0D02               	mullw	2
 10600  002BEC  0E00               	movlw	0
 10601  002BEE  24F3               	addwf	prodl,w,c
 10602  002BF0  6EF6               	movwf	tblptrl,c
 10603  002BF2  0E24               	movlw	36
 10604  002BF4  20F4               	addwfc	prodh,w,c
 10605  002BF6  6EF7               	movwf	tblptrh,c
 10606  002BF8  6AF8               	clrf	tblptru,c
 10607  002BFA  0E00               	movlw	0
 10608  002BFC  22F8               	addwfc	tblptru,f,c
 10609  002BFE  0009               	tblrd		*+
 10610  002C00  0EA1               	movlw	161
 10611  002C02  5EF5               	subwf	tablat,f,c
 10612  002C04  0009               	tblrd		*+
 10613  002C06  0E0F               	movlw	15
 10614  002C08  5AF5               	subwfb	tablat,f,c
 10615  002C0A  E259               	bc	i1l6268
 10616  002C0C  504B               	movf	IR_CheckCode@i,w,c
 10617  002C0E  0D02               	mullw	2
 10618  002C10  0E00               	movlw	0
 10619  002C12  24F3               	addwf	prodl,w,c
 10620  002C14  6EF6               	movwf	tblptrl,c
 10621  002C16  0E24               	movlw	36
 10622  002C18  20F4               	addwfc	prodh,w,c
 10623  002C1A  6EF7               	movwf	tblptrh,c
 10624  002C1C  6AF8               	clrf	tblptru,c
 10625  002C1E  0E00               	movlw	0
 10626  002C20  22F8               	addwfc	tblptru,f,c
 10627  002C22  0009               	tblrd		*+
 10628  002C24  0EE9               	movlw	233
 10629  002C26  5EF5               	subwf	tablat,f,c
 10630  002C28  0009               	tblrd		*+
 10631  002C2A  0E03               	movlw	3
 10632  002C2C  5AF5               	subwfb	tablat,f,c
 10633  002C2E  E347               	bnc	i1l6268
 10634                           
 10635                           ;IR.c: 260: {
 10636                           ;IR.c: 261: Low = (double)IR_SavedTiming1[i] * (1.0 - 0.75);
 10637  002C30  504B               	movf	IR_CheckCode@i,w,c
 10638  002C32  0D02               	mullw	2
 10639  002C34  0EC0               	movlw	192
 10640  002C36  24F3               	addwf	prodl,w,c
 10641  002C38  6EF6               	movwf	tblptrl,c
 10642  002C3A  0E24               	movlw	36
 10643  002C3C  20F4               	addwfc	prodh,w,c
 10644  002C3E  6EF7               	movwf	tblptrh,c
 10645  002C40  6AF8               	clrf	tblptru,c
 10646  002C42  0E00               	movlw	0
 10647  002C44  22F8               	addwfc	tblptru,f,c
 10648  002C46  0009               	tblrd		*+
 10649  002C48  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10650  002C4C  000A               	tblrd		*-
 10651  002C4E  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10652  002C52  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10653  002C56  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10654  002C5A  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10655  002C5E  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10656  002C62  6A1E               	clrf	i1___ftmul@f2,c
 10657  002C64  0E80               	movlw	128
 10658  002C66  6E1F               	movwf	i1___ftmul@f2+1,c
 10659  002C68  0E3E               	movlw	62
 10660  002C6A  6E20               	movwf	i1___ftmul@f2+2,c
 10661  002C6C  EC23  F003         	call	i1___ftmul	;wreg free
 10662  002C70  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10663  002C74  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10664  002C78  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10665                           
 10666                           ;IR.c: 262: High = (double)IR_SavedTiming1[i] * (1.0 + 0.75);
 10667  002C7C  504B               	movf	IR_CheckCode@i,w,c
 10668  002C7E  0D02               	mullw	2
 10669  002C80  0EC0               	movlw	192
 10670  002C82  24F3               	addwf	prodl,w,c
 10671  002C84  6EF6               	movwf	tblptrl,c
 10672  002C86  0E24               	movlw	36
 10673  002C88  20F4               	addwfc	prodh,w,c
 10674  002C8A  6EF7               	movwf	tblptrh,c
 10675  002C8C  6AF8               	clrf	tblptru,c
 10676  002C8E  0E00               	movlw	0
 10677  002C90  22F8               	addwfc	tblptru,f,c
 10678  002C92  0009               	tblrd		*+
 10679  002C94  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10680  002C98  000A               	tblrd		*-
 10681  002C9A  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10682  002C9E  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10683  002CA2  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10684  002CA6  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10685  002CAA  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10686  002CAE  6A1E               	clrf	i1___ftmul@f2,c
 10687  002CB0  0EE0               	movlw	224
 10688  002CB2  6E1F               	movwf	i1___ftmul@f2+1,c
 10689  002CB4  0E3F               	movlw	63
 10690  002CB6  6E20               	movwf	i1___ftmul@f2+2,c
 10691  002CB8  EC23  F003         	call	i1___ftmul	;wreg free
 10692  002CBC  D048               	goto	L3
 10693  002CBE                     i1l6268:
 10694                           
 10695                           ;IR.c: 264: else
 10696                           ;IR.c: 265: {
 10697                           ;IR.c: 266: Low = (double)IR_SavedTiming1[i] * (1.0 - 1.1);
 10698  002CBE  504B               	movf	IR_CheckCode@i,w,c
 10699  002CC0  0D02               	mullw	2
 10700  002CC2  0EC0               	movlw	192
 10701  002CC4  24F3               	addwf	prodl,w,c
 10702  002CC6  6EF6               	movwf	tblptrl,c
 10703  002CC8  0E24               	movlw	36
 10704  002CCA  20F4               	addwfc	prodh,w,c
 10705  002CCC  6EF7               	movwf	tblptrh,c
 10706  002CCE  6AF8               	clrf	tblptru,c
 10707  002CD0  0E00               	movlw	0
 10708  002CD2  22F8               	addwfc	tblptru,f,c
 10709  002CD4  0009               	tblrd		*+
 10710  002CD6  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10711  002CDA  000A               	tblrd		*-
 10712  002CDC  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10713  002CE0  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10714  002CE4  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10715  002CE8  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10716  002CEC  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10717  002CF0  0ECD               	movlw	205
 10718  002CF2  6E1E               	movwf	i1___ftmul@f2,c
 10719  002CF4  0ECC               	movlw	204
 10720  002CF6  6E1F               	movwf	i1___ftmul@f2+1,c
 10721  002CF8  0EBD               	movlw	189
 10722  002CFA  6E20               	movwf	i1___ftmul@f2+2,c
 10723  002CFC  EC23  F003         	call	i1___ftmul	;wreg free
 10724  002D00  C01B  F048         	movff	?i1___ftmul,IR_CheckCode@Low
 10725  002D04  C01C  F049         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10726  002D08  C01D  F04A         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10727                           
 10728                           ;IR.c: 267: High = (double)IR_SavedTiming1[i] * (1.0 + 1.1);
 10729  002D0C  504B               	movf	IR_CheckCode@i,w,c
 10730  002D0E  0D02               	mullw	2
 10731  002D10  0EC0               	movlw	192
 10732  002D12  24F3               	addwf	prodl,w,c
 10733  002D14  6EF6               	movwf	tblptrl,c
 10734  002D16  0E24               	movlw	36
 10735  002D18  20F4               	addwfc	prodh,w,c
 10736  002D1A  6EF7               	movwf	tblptrh,c
 10737  002D1C  6AF8               	clrf	tblptru,c
 10738  002D1E  0E00               	movlw	0
 10739  002D20  22F8               	addwfc	tblptru,f,c
 10740  002D22  0009               	tblrd		*+
 10741  002D24  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10742  002D28  000A               	tblrd		*-
 10743  002D2A  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10744  002D2E  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10745  002D32  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10746  002D36  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10747  002D3A  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10748  002D3E  0E66               	movlw	102
 10749  002D40  6E1E               	movwf	i1___ftmul@f2,c
 10750  002D42  0E06               	movlw	6
 10751  002D44  6E1F               	movwf	i1___ftmul@f2+1,c
 10752  002D46  0E40               	movlw	64
 10753  002D48  6E20               	movwf	i1___ftmul@f2+2,c
 10754  002D4A  EC23  F003         	call	i1___ftmul	;wreg free
 10755  002D4E                     L3:
 10756  002D4E  C01B  F045         	movff	?i1___ftmul,IR_CheckCode@High
 10757  002D52  C01C  F046         	movff	?i1___ftmul+1,IR_CheckCode@High+1
 10758  002D56  C01D  F047         	movff	?i1___ftmul+2,IR_CheckCode@High+2
 10759                           
 10760                           ;IR.c: 268: }
 10761                           ;IR.c: 270: if((double)IR_DataTiming[i] < Low || (double)IR_DataTiming[i] > High )
 10762  002D5A  504B               	movf	IR_CheckCode@i,w,c
 10763  002D5C  0D02               	mullw	2
 10764  002D5E  0E00               	movlw	low _IR_DataTiming
 10765  002D60  24F3               	addwf	prodl,w,c
 10766  002D62  6ED9               	movwf	fsr2l,c
 10767  002D64  0E02               	movlw	high _IR_DataTiming
 10768  002D66  20F4               	addwfc	prodh,w,c
 10769  002D68  6EDA               	movwf	fsr2h,c
 10770  002D6A  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10771  002D6E  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10772  002D72  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10773  002D76  C009  F00C         	movff	?i1___lwtoft,i1___ftge@ff1
 10774  002D7A  C00A  F00D         	movff	?i1___lwtoft+1,i1___ftge@ff1+1
 10775  002D7E  C00B  F00E         	movff	?i1___lwtoft+2,i1___ftge@ff1+2
 10776  002D82  C048  F00F         	movff	IR_CheckCode@Low,i1___ftge@ff2
 10777  002D86  C049  F010         	movff	IR_CheckCode@Low+1,i1___ftge@ff2+1
 10778  002D8A  C04A  F011         	movff	IR_CheckCode@Low+2,i1___ftge@ff2+2
 10779  002D8E  EC69  F009         	call	i1___ftge	;wreg free
 10780  002D92  E31D               	bnc	i1l6274
 10781  002D94  C045  F00C         	movff	IR_CheckCode@High,i1___ftge@ff1
 10782  002D98  C046  F00D         	movff	IR_CheckCode@High+1,i1___ftge@ff1+1
 10783  002D9C  C047  F00E         	movff	IR_CheckCode@High+2,i1___ftge@ff1+2
 10784  002DA0  504B               	movf	IR_CheckCode@i,w,c
 10785  002DA2  0D02               	mullw	2
 10786  002DA4  0E00               	movlw	low _IR_DataTiming
 10787  002DA6  24F3               	addwf	prodl,w,c
 10788  002DA8  6ED9               	movwf	fsr2l,c
 10789  002DAA  0E02               	movlw	high _IR_DataTiming
 10790  002DAC  20F4               	addwfc	prodh,w,c
 10791  002DAE  6EDA               	movwf	fsr2h,c
 10792  002DB0  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10793  002DB4  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10794  002DB8  ECB4  F00B         	call	i1___lwtoft	;wreg free
 10795  002DBC  C009  F00F         	movff	?i1___lwtoft,i1___ftge@ff2
 10796  002DC0  C00A  F010         	movff	?i1___lwtoft+1,i1___ftge@ff2+1
 10797  002DC4  C00B  F011         	movff	?i1___lwtoft+2,i1___ftge@ff2+2
 10798  002DC8  EC69  F009         	call	i1___ftge	;wreg free
 10799  002DCC  E212               	bc	i1l6284
 10800  002DCE                     i1l6274:
 10801                           
 10802                           ;IR.c: 271: {
 10803                           ;IR.c: 272: if(IR_SavedTiming1[i] == 0)
 10804  002DCE  504B               	movf	IR_CheckCode@i,w,c
 10805  002DD0  0D02               	mullw	2
 10806  002DD2  0EC0               	movlw	192
 10807  002DD4  24F3               	addwf	prodl,w,c
 10808  002DD6  6EF6               	movwf	tblptrl,c
 10809  002DD8  0E24               	movlw	36
 10810  002DDA  20F4               	addwfc	prodh,w,c
 10811  002DDC  6EF7               	movwf	tblptrh,c
 10812  002DDE  6AF8               	clrf	tblptru,c
 10813  002DE0  0E00               	movlw	0
 10814  002DE2  22F8               	addwfc	tblptru,f,c
 10815  002DE4  0009               	tblrd		*+
 10816  002DE6  50F5               	movf	tablat,w,c
 10817  002DE8  0009               	tblrd		*+
 10818  002DEA  10F5               	iorwf	tablat,w,c
 10819  002DEC  B4D8               	btfsc	status,2,c
 10820  002DEE  0C01               	retlw	1
 10821                           
 10822                           ;IR.c: 275: }
 10823                           ;IR.c: 276: return 0;
 10824  002DF0  0C00               	retlw	0
 10825  002DF2                     i1l6284:
 10826                           
 10827                           ;IR.c: 277: }
 10828                           ;IR.c: 278: if(i == (IR_CodeSize -1))
 10829  002DF2  504B               	movf	IR_CheckCode@i,w,c
 10830  002DF4  6E3D               	movwf	??_IR_CheckCode& (0+255),c
 10831  002DF6  6A3E               	clrf	(??_IR_CheckCode+1)& (0+255),c
 10832  002DF8  683F               	setf	(??_IR_CheckCode+2)& (0+255),c
 10833  002DFA  6840               	setf	(??_IR_CheckCode+3)& (0+255),c
 10834  002DFC  506A               	movf	_IR_CodeSize,w,c
 10835  002DFE  6E41               	movwf	(??_IR_CheckCode+4)& (0+255),c
 10836  002E00  6A42               	clrf	(??_IR_CheckCode+5)& (0+255),c
 10837  002E02  503F               	movf	??_IR_CheckCode+2,w,c
 10838  002E04  2641               	addwf	??_IR_CheckCode+4,f,c
 10839  002E06  5040               	movf	??_IR_CheckCode+3,w,c
 10840  002E08  2242               	addwfc	??_IR_CheckCode+5,f,c
 10841  002E0A  503D               	movf	??_IR_CheckCode,w,c
 10842  002E0C  1841               	xorwf	??_IR_CheckCode+4,w,c
 10843  002E0E  E104               	bnz	i1l6290
 10844  002E10  503E               	movf	??_IR_CheckCode+1,w,c
 10845  002E12  1842               	xorwf	??_IR_CheckCode+5,w,c
 10846  002E14  E101               	bnz	i1l6290
 10847  002E16  0C01               	retlw	1
 10848  002E18                     i1l6290:
 10849  002E18  2A4B               	incf	IR_CheckCode@i,f,c
 10850  002E1A                     i1l6292:
 10851  002E1A  506A               	movf	_IR_CodeSize,w,c
 10852  002E1C  5C4B               	subwf	IR_CheckCode@i,w,c
 10853  002E1E  E201 D689          	bnc	i1l6258
 10854  002E22  0C00               	retlw	0
 10855  002E24                     i1l6294:
 10856                           
 10857                           ; BSR set to: 1
 10858                           ;IR.c: 284: else
 10859                           ;IR.c: 285: {
 10860                           ;IR.c: 286: if(IR_DataPlace >= 40)
 10861  002E24  0E27               	movlw	39
 10862  002E26  646B               	cpfsgt	_IR_DataPlace,c
 10863  002E28  0C00               	retlw	0
 10864                           
 10865                           ; BSR set to: 1
 10866                           ;IR.c: 287: {
 10867                           ;IR.c: 288: for(i=0;i<IR_DataPlace;i++)
 10868  002E2A  6A4B               	clrf	IR_CheckCode@i,c
 10869  002E2C  D043               	goto	i1l6316
 10870  002E2E                     i1l6298:
 10871                           
 10872                           ; BSR set to: 1
 10873                           ;IR.c: 289: {
 10874                           ;IR.c: 290: if(IR_DataTiming[i] < 40)
 10875  002E2E  504B               	movf	IR_CheckCode@i,w,c
 10876  002E30  0D02               	mullw	2
 10877  002E32  0E00               	movlw	low _IR_DataTiming
 10878  002E34  24F3               	addwf	prodl,w,c
 10879  002E36  6ED9               	movwf	fsr2l,c
 10880  002E38  0E02               	movlw	high _IR_DataTiming
 10881  002E3A  20F4               	addwfc	prodh,w,c
 10882  002E3C  6EDA               	movwf	fsr2h,c
 10883  002E3E  0E01               	movlw	1
 10884  002E40  50DB               	movf	plusw2,w,c
 10885  002E42  E104               	bnz	i1l6306
 10886  002E44  0E28               	movlw	40
 10887  002E46  5CDE               	subwf	postinc2,w,c
 10888  002E48  E201               	bc	i1l6306
 10889  002E4A  0C00               	retlw	0
 10890  002E4C                     i1l6306:
 10891                           
 10892                           ; BSR set to: 1
 10893                           ;IR.c: 295: else if(IR_DataTiming[i] < 200)
 10894  002E4C  504B               	movf	IR_CheckCode@i,w,c
 10895  002E4E  0D02               	mullw	2
 10896  002E50  0E00               	movlw	low _IR_DataTiming
 10897  002E52  24F3               	addwf	prodl,w,c
 10898  002E54  6ED9               	movwf	fsr2l,c
 10899  002E56  0E02               	movlw	high _IR_DataTiming
 10900  002E58  20F4               	addwfc	prodh,w,c
 10901  002E5A  6EDA               	movwf	fsr2h,c
 10902  002E5C  0E01               	movlw	1
 10903  002E5E  50DB               	movf	plusw2,w,c
 10904  002E60  E10F               	bnz	i1l6310
 10905  002E62  0EC8               	movlw	200
 10906  002E64  5CDE               	subwf	postinc2,w,c
 10907  002E66  E20C               	bc	i1l6310
 10908                           
 10909                           ; BSR set to: 1
 10910                           ;IR.c: 296: {
 10911                           ;IR.c: 297: IR_DataTiming[i] +=350;
 10912  002E68  504B               	movf	IR_CheckCode@i,w,c
 10913  002E6A  0D02               	mullw	2
 10914  002E6C  0E00               	movlw	low _IR_DataTiming
 10915  002E6E  24F3               	addwf	prodl,w,c
 10916  002E70  6ED9               	movwf	fsr2l,c
 10917  002E72  0E02               	movlw	high _IR_DataTiming
 10918  002E74  20F4               	addwfc	prodh,w,c
 10919  002E76  6EDA               	movwf	fsr2h,c
 10920  002E78  0E5E               	movlw	94
 10921  002E7A  26DE               	addwf	postinc2,f,c
 10922  002E7C  0E01               	movlw	1
 10923  002E7E  D018               	goto	L4
 10924  002E80                     i1l6310:
 10925                           
 10926                           ; BSR set to: 1
 10927                           ;IR.c: 299: else if(IR_DataTiming[i] < 320)
 10928  002E80  504B               	movf	IR_CheckCode@i,w,c
 10929  002E82  0D02               	mullw	2
 10930  002E84  0E00               	movlw	low _IR_DataTiming
 10931  002E86  24F3               	addwf	prodl,w,c
 10932  002E88  6ED9               	movwf	fsr2l,c
 10933  002E8A  0E02               	movlw	high _IR_DataTiming
 10934  002E8C  20F4               	addwfc	prodh,w,c
 10935  002E8E  6EDA               	movwf	fsr2h,c
 10936  002E90  0E40               	movlw	64
 10937  002E92  5CDE               	subwf	postinc2,w,c
 10938  002E94  0E01               	movlw	1
 10939  002E96  58DE               	subwfb	postinc2,w,c
 10940  002E98  E20C               	bc	i1l6314
 10941                           
 10942                           ; BSR set to: 1
 10943                           ;IR.c: 300: {
 10944                           ;IR.c: 301: IR_DataTiming[i] +=150;
 10945  002E9A  504B               	movf	IR_CheckCode@i,w,c
 10946  002E9C  0D02               	mullw	2
 10947  002E9E  0E00               	movlw	low _IR_DataTiming
 10948  002EA0  24F3               	addwf	prodl,w,c
 10949  002EA2  6ED9               	movwf	fsr2l,c
 10950  002EA4  0E02               	movlw	high _IR_DataTiming
 10951  002EA6  20F4               	addwfc	prodh,w,c
 10952  002EA8  6EDA               	movwf	fsr2h,c
 10953  002EAA  0E96               	movlw	150
 10954  002EAC  26DE               	addwf	postinc2,f,c
 10955  002EAE  0E00               	movlw	0
 10956  002EB0                     L4:
 10957  002EB0  22DD               	addwfc	postdec2,f,c
 10958  002EB2                     i1l6314:
 10959                           
 10960                           ; BSR set to: 1
 10961  002EB2  2A4B               	incf	IR_CheckCode@i,f,c
 10962  002EB4                     i1l6316:
 10963                           
 10964                           ; BSR set to: 1
 10965  002EB4  506B               	movf	_IR_DataPlace,w,c
 10966  002EB6  5C4B               	subwf	IR_CheckCode@i,w,c
 10967  002EB8  E3BA               	bnc	i1l6298
 10968                           
 10969                           ; BSR set to: 1
 10970                           ;IR.c: 302: }
 10971                           ;IR.c: 303: }
 10972                           ;IR.c: 304: for(i=IR_DataPlace;i<96;i++)
 10973  002EBA  C06B  F04B         	movff	_IR_DataPlace,IR_CheckCode@i
 10974  002EBE                     i1l6318:
 10975                           
 10976                           ; BSR set to: 1
 10977  002EBE  0E5F               	movlw	95
 10978  002EC0  644B               	cpfsgt	IR_CheckCode@i,c
 10979  002EC2  D001               	goto	i1l6322
 10980  002EC4  D00C               	goto	i1l6328
 10981  002EC6                     i1l6322:
 10982                           
 10983                           ; BSR set to: 1
 10984                           ;IR.c: 305: {
 10985                           ;IR.c: 307: IR_DataTiming[i] = 0;
 10986  002EC6  504B               	movf	IR_CheckCode@i,w,c
 10987  002EC8  0D02               	mullw	2
 10988  002ECA  0E00               	movlw	low _IR_DataTiming
 10989  002ECC  24F3               	addwf	prodl,w,c
 10990  002ECE  6ED9               	movwf	fsr2l,c
 10991  002ED0  0E02               	movlw	high _IR_DataTiming
 10992  002ED2  20F4               	addwfc	prodh,w,c
 10993  002ED4  6EDA               	movwf	fsr2h,c
 10994  002ED6  6ADE               	clrf	postinc2,c
 10995  002ED8  6ADD               	clrf	postdec2,c
 10996                           
 10997                           ; BSR set to: 1
 10998  002EDA  2A4B               	incf	IR_CheckCode@i,f,c
 10999  002EDC  D7F0               	goto	i1l6318
 11000  002EDE                     i1l6328:
 11001                           
 11002                           ; BSR set to: 1
 11003                           ;IR.c: 308: }
 11004                           ;IR.c: 311: IR_Saved = 90;
 11005  002EDE  0E5A               	movlw	90
 11006  002EE0  6FAC               	movwf	_IR_Saved& (0+255),b
 11007                           
 11008                           ; BSR set to: 1
 11009                           ;IR.c: 312: Flash_Status = FSH_Write_IR_RF();
 11010  002EE2  ECAA  F019         	call	_FSH_Write_IR_RF	;wreg free
 11011  002EE6  0101               	movlb	1	; () banked
 11012  002EE8  6F03               	movwf	_Flash_Status& (0+255),b
 11013                           
 11014                           ; BSR set to: 1
 11015                           ;IR.c: 313: if(Flash_Status)
 11016  002EEA  5103               	movf	_Flash_Status& (0+255),w,b
 11017  002EEC  E007               	bz	i1l6342
 11018                           
 11019                           ; BSR set to: 1
 11020                           ;IR.c: 314: {
 11021                           ;IR.c: 315: IRProgramCodeNumber++;
 11022  002EEE  2A68               	incf	_IRProgramCodeNumber,f,c
 11023                           
 11024                           ; BSR set to: 1
 11025                           ;IR.c: 316: if(IRProgramCodeNumber > 1)
 11026  002EF0  0E01               	movlw	1
 11027  002EF2  6468               	cpfsgt	_IRProgramCodeNumber,c
 11028  002EF4  D001               	goto	i1l6340
 11029                           
 11030                           ; BSR set to: 1
 11031                           ;IR.c: 317: {
 11032                           ;IR.c: 318: IRProgramCodeNumber = 0;
 11033  002EF6  6A68               	clrf	_IRProgramCodeNumber,c
 11034  002EF8                     i1l6340:
 11035                           
 11036                           ; BSR set to: 1
 11037                           ;IR.c: 319: }
 11038                           ;IR.c: 320: IR_LoadCode();
 11039  002EF8  ECEA  F01C         	call	i1_IR_LoadCode	;wreg free
 11040  002EFC                     i1l6342:
 11041                           
 11042                           ;IR.c: 321: }
 11043                           ;IR.c: 322: System_State = 8;
 11044  002EFC  0E08               	movlw	8
 11045  002EFE  0101               	movlb	1	; () banked
 11046  002F00  6FAE               	movwf	_System_State& (0+255),b	;volatile
 11047  002F02  0C00               	retlw	0
 11048  002F04                     __end_of_IR_CheckCode:
 11049                           	opt stack 0
 11050                           tblptru	equ	0xFF8
 11051                           tblptrh	equ	0xFF7
 11052                           tblptrl	equ	0xFF6
 11053                           tablat	equ	0xFF5
 11054                           prodh	equ	0xFF4
 11055                           prodl	equ	0xFF3
 11056                           intcon	equ	0xFF2
 11057                           intcon2	equ	0xFF1
 11058                           intcon3	equ	0xFF0
 11059                           postinc0	equ	0xFEE
 11060                           wreg	equ	0xFE8
 11061                           postdec1	equ	0xFE5
 11062                           fsr1l	equ	0xFE1
 11063                           bsr	equ	0xFE0
 11064                           postinc2	equ	0xFDE
 11065                           postdec2	equ	0xFDD
 11066                           plusw2	equ	0xFDB
 11067                           fsr2h	equ	0xFDA
 11068                           fsr2l	equ	0xFD9
 11069                           status	equ	0xFD8
 11070                           
 11071 ;; *************** function i1_IR_LoadCode *****************
 11072 ;; Defined at:
 11073 ;;		line 131 in file "IR.c"
 11074 ;; Parameters:    Size  Location     Type
 11075 ;;		None
 11076 ;; Auto vars:     Size  Location     Type
 11077 ;;  IR_LoadCode     3   57[COMRAM] unsigned char 
 11078 ;;  IR_LoadCode     3   54[COMRAM] unsigned char 
 11079 ;;  IR_LoadCode     3   50[COMRAM] unsigned char 
 11080 ;;  IR_LoadCode     3   47[COMRAM] unsigned char 
 11081 ;;  IR_LoadCode     3   43[COMRAM] unsigned char 
 11082 ;;  IR_LoadCode     3   40[COMRAM] unsigned char 
 11083 ;;  IR_LoadCode     1   53[COMRAM] unsigned char 
 11084 ;;  IR_LoadCode     1   46[COMRAM] unsigned char 
 11085 ;; Return value:  Size  Location     Type
 11086 ;;		None               void
 11087 ;; Registers used:
 11088 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11089 ;; Tracked objects:
 11090 ;;		On entry : F/1
 11091 ;;		On exit  : 0/0
 11092 ;;		Unchanged: 0/0
 11093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11094 ;;      Params:         0       0       0       0       0
 11095 ;;      Locals:        20       0       0       0       0
 11096 ;;      Temps:          0       0       0       0       0
 11097 ;;      Totals:        20       0       0       0       0
 11098 ;;Total ram usage:       20 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; Hardware stack levels required when called:    8
 11101 ;; This function calls:
 11102 ;;		i1_IR_CalculateCodesize
 11103 ;;		i1___ftge
 11104 ;;		i1___ftmul
 11105 ;;		i1___fttol
 11106 ;;		i1___lwtoft
 11107 ;; This function is called by:
 11108 ;;		_IR_CheckCode
 11109 ;; This function uses a non-reentrant model
 11110 ;;
 11111                           
 11112                           	psect	text73
 11113  0039D4                     __ptext73:
 11114                           	opt stack 0
 11115  0039D4                     i1_IR_LoadCode:
 11116                           	opt stack 14
 11117                           
 11118                           ; BSR set to: 1
 11119                           ;IR.c: 134: double High1 = 0.0;
 11120                           
 11121                           ;incstack = 0
 11122  0039D4  6A2C               	clrf	i1IR_LoadCode@High1,c
 11123  0039D6  6A2D               	clrf	i1IR_LoadCode@High1+1,c
 11124  0039D8  6A2E               	clrf	i1IR_LoadCode@High1+2,c
 11125                           
 11126                           ;IR.c: 135: double Low2 = 0.0;
 11127  0039DA  6A30               	clrf	i1IR_LoadCode@Low2,c
 11128  0039DC  6A31               	clrf	i1IR_LoadCode@Low2+1,c
 11129  0039DE  6A32               	clrf	i1IR_LoadCode@Low2+2,c
 11130                           
 11131                           ;IR.c: 136: double High2 = 0.0;
 11132  0039E0  6A33               	clrf	i1IR_LoadCode@High2,c
 11133  0039E2  6A34               	clrf	i1IR_LoadCode@High2+1,c
 11134  0039E4  6A35               	clrf	i1IR_LoadCode@High2+2,c
 11135                           
 11136                           ;IR.c: 137: double LowBound = 0.0;
 11137  0039E6  6A37               	clrf	i1IR_LoadCode@LowBound,c
 11138  0039E8  6A38               	clrf	i1IR_LoadCode@LowBound+1,c
 11139  0039EA  6A39               	clrf	i1IR_LoadCode@LowBound+2,c
 11140                           
 11141                           ;IR.c: 138: double HighBound = 0.0;
 11142  0039EC  6A3A               	clrf	i1IR_LoadCode@HighBound,c
 11143  0039EE  6A3B               	clrf	i1IR_LoadCode@HighBound+1,c
 11144  0039F0  6A3C               	clrf	i1IR_LoadCode@HighBound+2,c
 11145                           
 11146                           ; BSR set to: 1
 11147                           ;IR.c: 139: unsigned char CodeSize1;
 11148                           ;IR.c: 140: unsigned char CodeSize2;
 11149                           ;IR.c: 142: Low1 = (double)IR_SavedTiming0[0] * (1.0 - 0.3);
 11150  0039F2  6AF6               	clrf	tblptrl,c
 11151  0039F4                     	if	1	;There is more than 1 active tblptr byte
 11152  0039F4  0E24               	movlw	36
 11153  0039F6  6EF7               	movwf	tblptrh,c
 11154  0039F8                     	endif
 11155  0039F8                     	if	0	;There are less than 3 active tblptr bytes
 11156  0039F8                     	endif
 11157  0039F8  0009               	tblrd		*+
 11158  0039FA  CFF5 F009          	movff	tablat,i1___lwtoft@c
 11159  0039FE  000A               	tblrd		*-
 11160  003A00  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 11161  003A04  ECB4  F00B         	call	i1___lwtoft	;wreg free
 11162  003A08  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 11163  003A0C  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 11164  003A10  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 11165  003A14  0E33               	movlw	51
 11166  003A16  6E1E               	movwf	i1___ftmul@f2,c
 11167  003A18  6E1F               	movwf	i1___ftmul@f2+1,c
 11168  003A1A  0E3F               	movlw	63
 11169  003A1C  6E20               	movwf	i1___ftmul@f2+2,c
 11170  003A1E  EC23  F003         	call	i1___ftmul	;wreg free
 11171  003A22  C01B  F029         	movff	?i1___ftmul,i1IR_LoadCode@Low1
 11172  003A26  C01C  F02A         	movff	?i1___ftmul+1,i1IR_LoadCode@Low1+1
 11173  003A2A  C01D  F02B         	movff	?i1___ftmul+2,i1IR_LoadCode@Low1+2
 11174                           
 11175                           ;IR.c: 143: High1= (double)IR_SavedTiming0[0] * (1.0 + 0.3);
 11176  003A2E  6AF6               	clrf	tblptrl,c
 11177  003A30                     	if	1	;There is more than 1 active tblptr byte
 11178  003A30  0E24               	movlw	36
 11179  003A32  6EF7               	movwf	tblptrh,c
 11180  003A34                     	endif
 11181  003A34                     	if	0	;There are less than 3 active tblptr bytes
 11182  003A34                     	endif
 11183  003A34  0009               	tblrd		*+
 11184  003A36  CFF5 F009          	movff	tablat,i1___lwtoft@c
 11185  003A3A  000A               	tblrd		*-
 11186  003A3C  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 11187  003A40  ECB4  F00B         	call	i1___lwtoft	;wreg free
 11188  003A44  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 11189  003A48  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 11190  003A4C  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 11191  003A50  0E66               	movlw	102
 11192  003A52  6E1E               	movwf	i1___ftmul@f2,c
 11193  003A54  0EA6               	movlw	166
 11194  003A56  6E1F               	movwf	i1___ftmul@f2+1,c
 11195  003A58  0E3F               	movlw	63
 11196  003A5A  6E20               	movwf	i1___ftmul@f2+2,c
 11197  003A5C  EC23  F003         	call	i1___ftmul	;wreg free
 11198  003A60  C01B  F02C         	movff	?i1___ftmul,i1IR_LoadCode@High1
 11199  003A64  C01C  F02D         	movff	?i1___ftmul+1,i1IR_LoadCode@High1+1
 11200  003A68  C01D  F02E         	movff	?i1___ftmul+2,i1IR_LoadCode@High1+2
 11201                           
 11202                           ;IR.c: 145: Low2 = (double)IR_SavedTiming1[0] * (1.0 - 0.3);
 11203  003A6C  0EC0               	movlw	192
 11204  003A6E  6EF6               	movwf	tblptrl,c
 11205  003A70                     	if	1	;There is more than 1 active tblptr byte
 11206  003A70  0E24               	movlw	36
 11207  003A72  6EF7               	movwf	tblptrh,c
 11208  003A74                     	endif
 11209  003A74                     	if	0	;There are less than 3 active tblptr bytes
 11210  003A74                     	endif
 11211  003A74  0009               	tblrd		*+
 11212  003A76  CFF5 F009          	movff	tablat,i1___lwtoft@c
 11213  003A7A  000A               	tblrd		*-
 11214  003A7C  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 11215  003A80  ECB4  F00B         	call	i1___lwtoft	;wreg free
 11216  003A84  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 11217  003A88  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 11218  003A8C  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 11219  003A90  0E33               	movlw	51
 11220  003A92  6E1E               	movwf	i1___ftmul@f2,c
 11221  003A94  6E1F               	movwf	i1___ftmul@f2+1,c
 11222  003A96  0E3F               	movlw	63
 11223  003A98  6E20               	movwf	i1___ftmul@f2+2,c
 11224  003A9A  EC23  F003         	call	i1___ftmul	;wreg free
 11225  003A9E  C01B  F030         	movff	?i1___ftmul,i1IR_LoadCode@Low2
 11226  003AA2  C01C  F031         	movff	?i1___ftmul+1,i1IR_LoadCode@Low2+1
 11227  003AA6  C01D  F032         	movff	?i1___ftmul+2,i1IR_LoadCode@Low2+2
 11228                           
 11229                           ;IR.c: 146: High2= (double)IR_SavedTiming1[0] * (1.0 + 0.3);
 11230  003AAA  0EC0               	movlw	192
 11231  003AAC  6EF6               	movwf	tblptrl,c
 11232  003AAE                     	if	1	;There is more than 1 active tblptr byte
 11233  003AAE  0E24               	movlw	36
 11234  003AB0  6EF7               	movwf	tblptrh,c
 11235  003AB2                     	endif
 11236  003AB2                     	if	0	;There are less than 3 active tblptr bytes
 11237  003AB2                     	endif
 11238  003AB2  0009               	tblrd		*+
 11239  003AB4  CFF5 F009          	movff	tablat,i1___lwtoft@c
 11240  003AB8  000A               	tblrd		*-
 11241  003ABA  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 11242  003ABE  ECB4  F00B         	call	i1___lwtoft	;wreg free
 11243  003AC2  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 11244  003AC6  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 11245  003ACA  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 11246  003ACE  0E66               	movlw	102
 11247  003AD0  6E1E               	movwf	i1___ftmul@f2,c
 11248  003AD2  0EA6               	movlw	166
 11249  003AD4  6E1F               	movwf	i1___ftmul@f2+1,c
 11250  003AD6  0E3F               	movlw	63
 11251  003AD8  6E20               	movwf	i1___ftmul@f2+2,c
 11252  003ADA  EC23  F003         	call	i1___ftmul	;wreg free
 11253  003ADE  C01B  F033         	movff	?i1___ftmul,i1IR_LoadCode@High2
 11254  003AE2  C01C  F034         	movff	?i1___ftmul+1,i1IR_LoadCode@High2+1
 11255  003AE6  C01D  F035         	movff	?i1___ftmul+2,i1IR_LoadCode@High2+2
 11256                           
 11257                           ;IR.c: 148: LowBound = Low1;
 11258  003AEA  C029  F037         	movff	i1IR_LoadCode@Low1,i1IR_LoadCode@LowBound
 11259  003AEE  C02A  F038         	movff	i1IR_LoadCode@Low1+1,i1IR_LoadCode@LowBound+1
 11260  003AF2  C02B  F039         	movff	i1IR_LoadCode@Low1+2,i1IR_LoadCode@LowBound+2
 11261                           
 11262                           ;IR.c: 149: if(Low2 < LowBound)
 11263  003AF6  C030  F00C         	movff	i1IR_LoadCode@Low2,i1___ftge@ff1
 11264  003AFA  C031  F00D         	movff	i1IR_LoadCode@Low2+1,i1___ftge@ff1+1
 11265  003AFE  C032  F00E         	movff	i1IR_LoadCode@Low2+2,i1___ftge@ff1+2
 11266  003B02  C037  F00F         	movff	i1IR_LoadCode@LowBound,i1___ftge@ff2
 11267  003B06  C038  F010         	movff	i1IR_LoadCode@LowBound+1,i1___ftge@ff2+1
 11268  003B0A  C039  F011         	movff	i1IR_LoadCode@LowBound+2,i1___ftge@ff2+2
 11269  003B0E  EC69  F009         	call	i1___ftge	;wreg free
 11270  003B12  E206               	bc	i1l5624
 11271                           
 11272                           ;IR.c: 150: {
 11273                           ;IR.c: 151: LowBound = Low2;
 11274  003B14  C030  F037         	movff	i1IR_LoadCode@Low2,i1IR_LoadCode@LowBound
 11275  003B18  C031  F038         	movff	i1IR_LoadCode@Low2+1,i1IR_LoadCode@LowBound+1
 11276  003B1C  C032  F039         	movff	i1IR_LoadCode@Low2+2,i1IR_LoadCode@LowBound+2
 11277  003B20                     i1l5624:
 11278                           
 11279                           ;IR.c: 152: }
 11280                           ;IR.c: 153: if(LowBound < 6000)
 11281  003B20  C037  F00C         	movff	i1IR_LoadCode@LowBound,i1___ftge@ff1
 11282  003B24  C038  F00D         	movff	i1IR_LoadCode@LowBound+1,i1___ftge@ff1+1
 11283  003B28  C039  F00E         	movff	i1IR_LoadCode@LowBound+2,i1___ftge@ff1+2
 11284  003B2C  0E80               	movlw	128
 11285  003B2E  6E0F               	movwf	i1___ftge@ff2,c
 11286  003B30  0EBB               	movlw	187
 11287  003B32  6E10               	movwf	i1___ftge@ff2+1,c
 11288  003B34  0E45               	movlw	69
 11289  003B36  6E11               	movwf	i1___ftge@ff2+2,c
 11290  003B38  EC69  F009         	call	i1___ftge	;wreg free
 11291  003B3C  E206               	bc	i1l5628
 11292                           
 11293                           ;IR.c: 154: {
 11294                           ;IR.c: 155: LowBound = 6000;
 11295  003B3E  0E80               	movlw	128
 11296  003B40  6E37               	movwf	i1IR_LoadCode@LowBound,c
 11297  003B42  0EBB               	movlw	187
 11298  003B44  6E38               	movwf	i1IR_LoadCode@LowBound+1,c
 11299  003B46  0E45               	movlw	69
 11300  003B48  6E39               	movwf	i1IR_LoadCode@LowBound+2,c
 11301  003B4A                     i1l5628:
 11302                           
 11303                           ;IR.c: 156: }
 11304                           ;IR.c: 158: HighBound = High1;
 11305  003B4A  C02C  F03A         	movff	i1IR_LoadCode@High1,i1IR_LoadCode@HighBound
 11306  003B4E  C02D  F03B         	movff	i1IR_LoadCode@High1+1,i1IR_LoadCode@HighBound+1
 11307  003B52  C02E  F03C         	movff	i1IR_LoadCode@High1+2,i1IR_LoadCode@HighBound+2
 11308                           
 11309                           ;IR.c: 159: if(High2 < HighBound)
 11310  003B56  C033  F00C         	movff	i1IR_LoadCode@High2,i1___ftge@ff1
 11311  003B5A  C034  F00D         	movff	i1IR_LoadCode@High2+1,i1___ftge@ff1+1
 11312  003B5E  C035  F00E         	movff	i1IR_LoadCode@High2+2,i1___ftge@ff1+2
 11313  003B62  C03A  F00F         	movff	i1IR_LoadCode@HighBound,i1___ftge@ff2
 11314  003B66  C03B  F010         	movff	i1IR_LoadCode@HighBound+1,i1___ftge@ff2+1
 11315  003B6A  C03C  F011         	movff	i1IR_LoadCode@HighBound+2,i1___ftge@ff2+2
 11316  003B6E  EC69  F009         	call	i1___ftge	;wreg free
 11317  003B72  E206               	bc	i1l5634
 11318                           
 11319                           ;IR.c: 160: {
 11320                           ;IR.c: 161: HighBound = High2;
 11321  003B74  C033  F03A         	movff	i1IR_LoadCode@High2,i1IR_LoadCode@HighBound
 11322  003B78  C034  F03B         	movff	i1IR_LoadCode@High2+1,i1IR_LoadCode@HighBound+1
 11323  003B7C  C035  F03C         	movff	i1IR_LoadCode@High2+2,i1IR_LoadCode@HighBound+2
 11324  003B80                     i1l5634:
 11325                           
 11326                           ;IR.c: 162: }
 11327                           ;IR.c: 163: if(HighBound < 10000)
 11328  003B80  C03A  F00C         	movff	i1IR_LoadCode@HighBound,i1___ftge@ff1
 11329  003B84  C03B  F00D         	movff	i1IR_LoadCode@HighBound+1,i1___ftge@ff1+1
 11330  003B88  C03C  F00E         	movff	i1IR_LoadCode@HighBound+2,i1___ftge@ff1+2
 11331  003B8C  0E40               	movlw	64
 11332  003B8E  6E0F               	movwf	i1___ftge@ff2,c
 11333  003B90  0E1C               	movlw	28
 11334  003B92  6E10               	movwf	i1___ftge@ff2+1,c
 11335  003B94  0E46               	movlw	70
 11336  003B96  6E11               	movwf	i1___ftge@ff2+2,c
 11337  003B98  EC69  F009         	call	i1___ftge	;wreg free
 11338  003B9C  E206               	bc	i1l5638
 11339                           
 11340                           ;IR.c: 164: {
 11341                           ;IR.c: 165: HighBound = 10000;
 11342  003B9E  0E40               	movlw	64
 11343  003BA0  6E3A               	movwf	i1IR_LoadCode@HighBound,c
 11344  003BA2  0E1C               	movlw	28
 11345  003BA4  6E3B               	movwf	i1IR_LoadCode@HighBound+1,c
 11346  003BA6  0E46               	movlw	70
 11347  003BA8  6E3C               	movwf	i1IR_LoadCode@HighBound+2,c
 11348  003BAA                     i1l5638:
 11349                           
 11350                           ;IR.c: 166: }
 11351                           ;IR.c: 168: IR_SyncLow = (unsigned int) LowBound;
 11352  003BAA  C037  F001         	movff	i1IR_LoadCode@LowBound,i1___fttol@f1
 11353  003BAE  C038  F002         	movff	i1IR_LoadCode@LowBound+1,i1___fttol@f1+1
 11354  003BB2  C039  F003         	movff	i1IR_LoadCode@LowBound+2,i1___fttol@f1+2
 11355  003BB6  EC1B  F005         	call	i1___fttol	;wreg free
 11356  003BBA  C001  F060         	movff	?i1___fttol,_IR_SyncLow
 11357  003BBE  C002  F061         	movff	?i1___fttol+1,_IR_SyncLow+1
 11358                           
 11359                           ;IR.c: 169: IR_SyncHigh = (unsigned int) HighBound;
 11360  003BC2  C03A  F001         	movff	i1IR_LoadCode@HighBound,i1___fttol@f1
 11361  003BC6  C03B  F002         	movff	i1IR_LoadCode@HighBound+1,i1___fttol@f1+1
 11362  003BCA  C03C  F003         	movff	i1IR_LoadCode@HighBound+2,i1___fttol@f1+2
 11363  003BCE  EC1B  F005         	call	i1___fttol	;wreg free
 11364  003BD2  C001  F05E         	movff	?i1___fttol,_IR_SyncHigh
 11365  003BD6  C002  F05F         	movff	?i1___fttol+1,_IR_SyncHigh+1
 11366                           
 11367                           ;IR.c: 171: CodeSize1 = IR_CalculateCodesize(&IR_SavedTiming0[0]);
 11368  003BDA  6A01               	clrf	i1IR_CalculateCodesize@Code,c
 11369  003BDC  0E24               	movlw	36
 11370  003BDE  6E02               	movwf	i1IR_CalculateCodesize@Code+1,c
 11371  003BE0  6A03               	clrf	i1IR_CalculateCodesize@Code+2,c
 11372  003BE2  EC28  F00A         	call	i1_IR_CalculateCodesize	;wreg free
 11373  003BE6  6E2F               	movwf	i1IR_LoadCode@CodeSize1,c
 11374                           
 11375                           ;IR.c: 172: CodeSize2 = IR_CalculateCodesize(&IR_SavedTiming1[0]);
 11376  003BE8  0EC0               	movlw	192
 11377  003BEA  6E01               	movwf	i1IR_CalculateCodesize@Code,c
 11378  003BEC  0E24               	movlw	36
 11379  003BEE  6E02               	movwf	i1IR_CalculateCodesize@Code+1,c
 11380  003BF0  6A03               	clrf	i1IR_CalculateCodesize@Code+2,c
 11381  003BF2  EC28  F00A         	call	i1_IR_CalculateCodesize	;wreg free
 11382  003BF6  6E36               	movwf	i1IR_LoadCode@CodeSize2,c
 11383                           
 11384                           ;IR.c: 174: IR_CodeSize = CodeSize1;
 11385  003BF8  C02F  F06A         	movff	i1IR_LoadCode@CodeSize1,_IR_CodeSize
 11386                           
 11387                           ;IR.c: 175: if(IR_CodeSize < CodeSize2)
 11388  003BFC  5036               	movf	i1IR_LoadCode@CodeSize2,w,c
 11389  003BFE  5C6A               	subwf	_IR_CodeSize,w,c
 11390  003C00  E202               	bc	i1l5652
 11391                           
 11392                           ;IR.c: 176: {
 11393                           ;IR.c: 177: IR_CodeSize = CodeSize2;
 11394  003C02  C036  F06A         	movff	i1IR_LoadCode@CodeSize2,_IR_CodeSize
 11395  003C06                     i1l5652:
 11396                           
 11397                           ;IR.c: 178: }
 11398                           ;IR.c: 179: if(IR_CodeSize < 40)
 11399  003C06  0E28               	movlw	40
 11400  003C08  606A               	cpfslt	_IR_CodeSize,c
 11401  003C0A  0C28               	retlw	40
 11402                           
 11403                           ;IR.c: 180: {
 11404                           ;IR.c: 181: IR_CodeSize = 40;
 11405  003C0C  6E6A               	movwf	_IR_CodeSize,c
 11406  003C0E  0C28               	retlw	40	;funcret
 11407  003C10                     __end_ofi1_IR_LoadCode:
 11408                           	opt stack 0
 11409                           tblptru	equ	0xFF8
 11410                           tblptrh	equ	0xFF7
 11411                           tblptrl	equ	0xFF6
 11412                           tablat	equ	0xFF5
 11413                           prodh	equ	0xFF4
 11414                           prodl	equ	0xFF3
 11415                           intcon	equ	0xFF2
 11416                           intcon2	equ	0xFF1
 11417                           intcon3	equ	0xFF0
 11418                           postinc0	equ	0xFEE
 11419                           wreg	equ	0xFE8
 11420                           postdec1	equ	0xFE5
 11421                           fsr1l	equ	0xFE1
 11422                           bsr	equ	0xFE0
 11423                           postinc2	equ	0xFDE
 11424                           postdec2	equ	0xFDD
 11425                           plusw2	equ	0xFDB
 11426                           fsr2h	equ	0xFDA
 11427                           fsr2l	equ	0xFD9
 11428                           status	equ	0xFD8
 11429                           
 11430 ;; *************** function i1___fttol *****************
 11431 ;; Defined at:
 11432 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
 11433 ;; Parameters:    Size  Location     Type
 11434 ;;  f1              3    0[COMRAM] float 
 11435 ;; Auto vars:     Size  Location     Type
 11436 ;;  __fttol         4   10[COMRAM] unsigned long 
 11437 ;;  __fttol         1   14[COMRAM] unsigned char 
 11438 ;;  __fttol         1    9[COMRAM] unsigned char 
 11439 ;; Return value:  Size  Location     Type
 11440 ;;                  4    0[COMRAM] long 
 11441 ;; Registers used:
 11442 ;;		wreg, status,2, status,0
 11443 ;; Tracked objects:
 11444 ;;		On entry : 0/1
 11445 ;;		On exit  : 0/0
 11446 ;;		Unchanged: 0/0
 11447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11448 ;;      Params:         4       0       0       0       0
 11449 ;;      Locals:         6       0       0       0       0
 11450 ;;      Temps:          5       0       0       0       0
 11451 ;;      Totals:        15       0       0       0       0
 11452 ;;Total ram usage:       15 bytes
 11453 ;; Hardware stack levels used:    1
 11454 ;; Hardware stack levels required when called:    6
 11455 ;; This function calls:
 11456 ;;		Nothing
 11457 ;; This function is called by:
 11458 ;;		i1_IR_LoadCode
 11459 ;; This function uses a non-reentrant model
 11460 ;;
 11461                           
 11462                           	psect	text74
 11463  000A36                     __ptext74:
 11464                           	opt stack 0
 11465  000A36                     i1___fttol:
 11466                           	opt stack 15
 11467                           
 11468                           ;incstack = 0
 11469  000A36  C003  F005         	movff	i1___fttol@f1+2,??i1___fttol
 11470  000A3A  6A06               	clrf	(??i1___fttol+1)& (0+255),c
 11471  000A3C  6A07               	clrf	(??i1___fttol+2)& (0+255),c
 11472  000A3E  3402               	rlcf	i1___fttol@f1+1,w,c
 11473  000A40  3605               	rlcf	??i1___fttol& (0+255),f,c
 11474  000A42  E301               	bnc	u466_21
 11475  000A44  8006               	bsf	(??i1___fttol+1)& (0+255),0,c
 11476  000A46                     u466_21:
 11477  000A46  5005               	movf	??i1___fttol,w,c
 11478  000A48  6E0F               	movwf	i1___fttol@exp1,c
 11479  000A4A  500F               	movf	i1___fttol@exp1,w,c
 11480  000A4C  E105               	bnz	i1l4978
 11481  000A4E                     i1l4976:
 11482  000A4E  6A01               	clrf	?i1___fttol,c
 11483  000A50  6A02               	clrf	?i1___fttol+1,c
 11484  000A52  6A03               	clrf	?i1___fttol+2,c
 11485  000A54  6A04               	clrf	?i1___fttol+3,c
 11486  000A56  0012               	return	
 11487  000A58                     i1l4978:
 11488  000A58  0E17               	movlw	23
 11489  000A5A  6E05               	movwf	??i1___fttol& (0+255),c
 11490  000A5C  C001  F006         	movff	i1___fttol@f1,??i1___fttol+1
 11491  000A60  C002  F007         	movff	i1___fttol@f1+1,??i1___fttol+2
 11492  000A64  C003  F008         	movff	i1___fttol@f1+2,??i1___fttol+3
 11493  000A68  2805               	incf	??i1___fttol,w,c
 11494  000A6A  6E09               	movwf	(??i1___fttol+4)& (0+255),c
 11495  000A6C  D004               	goto	i1u468_20
 11496  000A6E                     i1u468_25:
 11497  000A6E  90D8               	bcf	status,0,c
 11498  000A70  3208               	rrcf	??i1___fttol+3,f,c
 11499  000A72  3207               	rrcf	??i1___fttol+2,f,c
 11500  000A74  3206               	rrcf	??i1___fttol+1,f,c
 11501  000A76                     i1u468_20:
 11502  000A76  2E09               	decfsz	(??i1___fttol+4)& (0+255),f,c
 11503  000A78  D7FA               	goto	i1u468_25
 11504  000A7A  5006               	movf	??i1___fttol+1,w,c
 11505  000A7C  6E0A               	movwf	i1___fttol@sign1,c
 11506  000A7E  8E02               	bsf	i1___fttol@f1+1,7,c
 11507  000A80  6A03               	clrf	i1___fttol@f1+2,c
 11508  000A82  5001               	movf	i1___fttol@f1,w,c
 11509  000A84  6E0B               	movwf	i1___fttol@lval,c
 11510  000A86  5002               	movf	i1___fttol@f1+1,w,c
 11511  000A88  6E0C               	movwf	i1___fttol@lval+1,c
 11512  000A8A  5003               	movf	i1___fttol@f1+2,w,c
 11513  000A8C  6E0D               	movwf	i1___fttol@lval+2,c
 11514  000A8E  6A0E               	clrf	i1___fttol@lval+3,c
 11515  000A90  0E8E               	movlw	142
 11516  000A92  5E0F               	subwf	i1___fttol@exp1,f,c
 11517  000A94  AE0F               	btfss	i1___fttol@exp1,7,c
 11518  000A96  D00C               	goto	i1l4998
 11519  000A98  500F               	movf	i1___fttol@exp1,w,c
 11520  000A9A  0A80               	xorlw	128
 11521  000A9C  0F8F               	addlw	143
 11522  000A9E  E3D7               	bnc	i1l4976
 11523  000AA0                     i1l4994:
 11524  000AA0  90D8               	bcf	status,0,c
 11525  000AA2  320E               	rrcf	i1___fttol@lval+3,f,c
 11526  000AA4  320D               	rrcf	i1___fttol@lval+2,f,c
 11527  000AA6  320C               	rrcf	i1___fttol@lval+1,f,c
 11528  000AA8  320B               	rrcf	i1___fttol@lval,f,c
 11529  000AAA  3E0F               	incfsz	i1___fttol@exp1,f,c
 11530  000AAC  D7F9               	goto	i1l4994
 11531  000AAE  D00C               	goto	i1l5006
 11532  000AB0                     i1l4998:
 11533  000AB0  0E17               	movlw	23
 11534  000AB2  640F               	cpfsgt	i1___fttol@exp1,c
 11535  000AB4  D007               	goto	i1l5004
 11536  000AB6  D7CB               	goto	i1l4976
 11537  000AB8                     i1l5002:
 11538  000AB8  90D8               	bcf	status,0,c
 11539  000ABA  360B               	rlcf	i1___fttol@lval,f,c
 11540  000ABC  360C               	rlcf	i1___fttol@lval+1,f,c
 11541  000ABE  360D               	rlcf	i1___fttol@lval+2,f,c
 11542  000AC0  360E               	rlcf	i1___fttol@lval+3,f,c
 11543  000AC2  060F               	decf	i1___fttol@exp1,f,c
 11544  000AC4                     i1l5004:
 11545  000AC4  500F               	movf	i1___fttol@exp1,w,c
 11546  000AC6  E1F8               	bnz	i1l5002
 11547  000AC8                     i1l5006:
 11548  000AC8  500A               	movf	i1___fttol@sign1,w,c
 11549  000ACA  E008               	bz	i1l5010
 11550  000ACC  1E0E               	comf	i1___fttol@lval+3,f,c
 11551  000ACE  1E0D               	comf	i1___fttol@lval+2,f,c
 11552  000AD0  1E0C               	comf	i1___fttol@lval+1,f,c
 11553  000AD2  6C0B               	negf	i1___fttol@lval,c
 11554  000AD4  0E00               	movlw	0
 11555  000AD6  220C               	addwfc	i1___fttol@lval+1,f,c
 11556  000AD8  220D               	addwfc	i1___fttol@lval+2,f,c
 11557  000ADA  220E               	addwfc	i1___fttol@lval+3,f,c
 11558  000ADC                     i1l5010:
 11559  000ADC  C00B  F001         	movff	i1___fttol@lval,?i1___fttol
 11560  000AE0  C00C  F002         	movff	i1___fttol@lval+1,?i1___fttol+1
 11561  000AE4  C00D  F003         	movff	i1___fttol@lval+2,?i1___fttol+2
 11562  000AE8  C00E  F004         	movff	i1___fttol@lval+3,?i1___fttol+3
 11563  000AEC  0012               	return		;funcret
 11564  000AEE                     __end_ofi1___fttol:
 11565                           	opt stack 0
 11566                           tblptru	equ	0xFF8
 11567                           tblptrh	equ	0xFF7
 11568                           tblptrl	equ	0xFF6
 11569                           tablat	equ	0xFF5
 11570                           prodh	equ	0xFF4
 11571                           prodl	equ	0xFF3
 11572                           intcon	equ	0xFF2
 11573                           intcon2	equ	0xFF1
 11574                           intcon3	equ	0xFF0
 11575                           postinc0	equ	0xFEE
 11576                           wreg	equ	0xFE8
 11577                           postdec1	equ	0xFE5
 11578                           fsr1l	equ	0xFE1
 11579                           bsr	equ	0xFE0
 11580                           postinc2	equ	0xFDE
 11581                           postdec2	equ	0xFDD
 11582                           plusw2	equ	0xFDB
 11583                           fsr2h	equ	0xFDA
 11584                           fsr2l	equ	0xFD9
 11585                           status	equ	0xFD8
 11586                           
 11587 ;; *************** function i1___ftge *****************
 11588 ;; Defined at:
 11589 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
 11590 ;; Parameters:    Size  Location     Type
 11591 ;;  ff1             3   11[COMRAM] float 
 11592 ;;  ff2             3   14[COMRAM] float 
 11593 ;; Auto vars:     Size  Location     Type
 11594 ;;		None
 11595 ;; Return value:  Size  Location     Type
 11596 ;;		None               void
 11597 ;; Registers used:
 11598 ;;		wreg, status,2, status,0
 11599 ;; Tracked objects:
 11600 ;;		On entry : 0/1
 11601 ;;		On exit  : 0/0
 11602 ;;		Unchanged: 0/0
 11603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11604 ;;      Params:         6       0       0       0       0
 11605 ;;      Locals:         0       0       0       0       0
 11606 ;;      Temps:          3       0       0       0       0
 11607 ;;      Totals:         9       0       0       0       0
 11608 ;;Total ram usage:        9 bytes
 11609 ;; Hardware stack levels used:    1
 11610 ;; Hardware stack levels required when called:    6
 11611 ;; This function calls:
 11612 ;;		Nothing
 11613 ;; This function is called by:
 11614 ;;		_IR_CheckCode
 11615 ;;		i1_IR_LoadCode
 11616 ;; This function uses a non-reentrant model
 11617 ;;
 11618                           
 11619                           	psect	text75
 11620  0012D2                     __ptext75:
 11621                           	opt stack 0
 11622  0012D2                     i1___ftge:
 11623                           	opt stack 16
 11624                           
 11625                           ;incstack = 0
 11626  0012D2  AE0E               	btfss	i1___ftge@ff1+2,7,c
 11627  0012D4  D00D               	goto	i1l4866
 11628  0012D6  6A12               	clrf	??i1___ftge& (0+255),c
 11629  0012D8  6A13               	clrf	(??i1___ftge+1)& (0+255),c
 11630  0012DA  0E80               	movlw	128
 11631  0012DC  6E14               	movwf	(??i1___ftge+2)& (0+255),c
 11632  0012DE  500C               	movf	i1___ftge@ff1,w,c
 11633  0012E0  5C12               	subwf	??i1___ftge,w,c
 11634  0012E2  6E0C               	movwf	i1___ftge@ff1,c
 11635  0012E4  500D               	movf	i1___ftge@ff1+1,w,c
 11636  0012E6  5813               	subwfb	??i1___ftge+1,w,c
 11637  0012E8  6E0D               	movwf	i1___ftge@ff1+1,c
 11638  0012EA  500E               	movf	i1___ftge@ff1+2,w,c
 11639  0012EC  5814               	subwfb	??i1___ftge+2,w,c
 11640  0012EE  6E0E               	movwf	i1___ftge@ff1+2,c
 11641  0012F0                     i1l4866:
 11642  0012F0  AE11               	btfss	i1___ftge@ff2+2,7,c
 11643  0012F2  D00D               	goto	i1l4870
 11644  0012F4  6A12               	clrf	??i1___ftge& (0+255),c
 11645  0012F6  6A13               	clrf	(??i1___ftge+1)& (0+255),c
 11646  0012F8  0E80               	movlw	128
 11647  0012FA  6E14               	movwf	(??i1___ftge+2)& (0+255),c
 11648  0012FC  500F               	movf	i1___ftge@ff2,w,c
 11649  0012FE  5C12               	subwf	??i1___ftge,w,c
 11650  001300  6E0F               	movwf	i1___ftge@ff2,c
 11651  001302  5010               	movf	i1___ftge@ff2+1,w,c
 11652  001304  5813               	subwfb	??i1___ftge+1,w,c
 11653  001306  6E10               	movwf	i1___ftge@ff2+1,c
 11654  001308  5011               	movf	i1___ftge@ff2+2,w,c
 11655  00130A  5814               	subwfb	??i1___ftge+2,w,c
 11656  00130C  6E11               	movwf	i1___ftge@ff2+2,c
 11657  00130E                     i1l4870:
 11658  00130E  0E80               	movlw	128
 11659  001310  1A0E               	xorwf	i1___ftge@ff1+2,f,c
 11660  001312  1A11               	xorwf	i1___ftge@ff2+2,f,c
 11661  001314  500F               	movf	i1___ftge@ff2,w,c
 11662  001316  5C0C               	subwf	i1___ftge@ff1,w,c
 11663  001318  5010               	movf	i1___ftge@ff2+1,w,c
 11664  00131A  580D               	subwfb	i1___ftge@ff1+1,w,c
 11665  00131C  5011               	movf	i1___ftge@ff2+2,w,c
 11666  00131E  580E               	subwfb	i1___ftge@ff1+2,w,c
 11667  001320  E202               	bc	i1l4876
 11668  001322  90D8               	bcf	status,0,c
 11669  001324  0012               	return	
 11670  001326                     i1l4876:
 11671  001326  80D8               	bsf	status,0,c
 11672  001328  0012               	return		;funcret
 11673  00132A                     __end_ofi1___ftge:
 11674                           	opt stack 0
 11675                           tblptru	equ	0xFF8
 11676                           tblptrh	equ	0xFF7
 11677                           tblptrl	equ	0xFF6
 11678                           tablat	equ	0xFF5
 11679                           prodh	equ	0xFF4
 11680                           prodl	equ	0xFF3
 11681                           intcon	equ	0xFF2
 11682                           intcon2	equ	0xFF1
 11683                           intcon3	equ	0xFF0
 11684                           postinc0	equ	0xFEE
 11685                           wreg	equ	0xFE8
 11686                           postdec1	equ	0xFE5
 11687                           fsr1l	equ	0xFE1
 11688                           bsr	equ	0xFE0
 11689                           postinc2	equ	0xFDE
 11690                           postdec2	equ	0xFDD
 11691                           plusw2	equ	0xFDB
 11692                           fsr2h	equ	0xFDA
 11693                           fsr2l	equ	0xFD9
 11694                           status	equ	0xFD8
 11695                           
 11696 ;; *************** function i1_IR_CalculateCodesize *****************
 11697 ;; Defined at:
 11698 ;;		line 190 in file "IR.c"
 11699 ;; Parameters:    Size  Location     Type
 11700 ;;  Code            3    0[COMRAM] PTR const unsigned int 
 11701 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), 
 11702 ;; Auto vars:     Size  Location     Type
 11703 ;;  IR_Calculate    1    6[COMRAM] unsigned char 
 11704 ;; Return value:  Size  Location     Type
 11705 ;;                  1    wreg      unsigned char 
 11706 ;; Registers used:
 11707 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11708 ;; Tracked objects:
 11709 ;;		On entry : 0/1
 11710 ;;		On exit  : 0/0
 11711 ;;		Unchanged: 0/0
 11712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11713 ;;      Params:         3       0       0       0       0
 11714 ;;      Locals:         1       0       0       0       0
 11715 ;;      Temps:          3       0       0       0       0
 11716 ;;      Totals:         7       0       0       0       0
 11717 ;;Total ram usage:        7 bytes
 11718 ;; Hardware stack levels used:    1
 11719 ;; Hardware stack levels required when called:    6
 11720 ;; This function calls:
 11721 ;;		Nothing
 11722 ;; This function is called by:
 11723 ;;		i1_IR_LoadCode
 11724 ;; This function uses a non-reentrant model
 11725 ;;
 11726                           
 11727                           	psect	text76
 11728  001450                     __ptext76:
 11729                           	opt stack 0
 11730  001450                     i1_IR_CalculateCodesize:
 11731                           	opt stack 15
 11732                           
 11733                           ;IR.c: 192: unsigned char i;
 11734                           ;IR.c: 194: for(i=0; i<96;i++)
 11735                           
 11736                           ;incstack = 0
 11737  001450  6A07               	clrf	i1IR_CalculateCodesize@i,c
 11738  001452                     i1l4730:
 11739                           
 11740                           ;IR.c: 195: {
 11741                           ;IR.c: 196: if(Code[i] == 0)
 11742  001452  5007               	movf	i1IR_CalculateCodesize@i,w,c
 11743  001454  0D02               	mullw	2
 11744  001456  50F3               	movf	prodl,w,c
 11745  001458  2401               	addwf	i1IR_CalculateCodesize@Code,w,c
 11746  00145A  6E04               	movwf	??i1_IR_CalculateCodesize& (0+255),c
 11747  00145C  50F4               	movf	prodh,w,c
 11748  00145E  2002               	addwfc	i1IR_CalculateCodesize@Code+1,w,c
 11749  001460  6E05               	movwf	(??i1_IR_CalculateCodesize+1)& (0+255),c
 11750  001462  0E00               	movlw	0
 11751  001464  2003               	addwfc	i1IR_CalculateCodesize@Code+2,w,c
 11752  001466  6E06               	movwf	(??i1_IR_CalculateCodesize+2)& (0+255),c
 11753  001468  C004  FFF6         	movff	??i1_IR_CalculateCodesize,tblptrl
 11754  00146C  C005  FFF7         	movff	??i1_IR_CalculateCodesize+1,tblptrh
 11755  001470  C006  FFF8         	movff	??i1_IR_CalculateCodesize+2,tblptru
 11756  001474  0009               	tblrd		*+
 11757  001476  50F5               	movf	tablat,w,c
 11758  001478  0009               	tblrd		*+
 11759  00147A  10F5               	iorwf	tablat,w,c
 11760  00147C  E102               	bnz	i1l4736
 11761                           
 11762                           ;IR.c: 197: {
 11763                           ;IR.c: 198: return i;
 11764  00147E  5007               	movf	i1IR_CalculateCodesize@i,w,c
 11765  001480  0012               	return	
 11766  001482                     i1l4736:
 11767  001482  2A07               	incf	i1IR_CalculateCodesize@i,f,c
 11768  001484  0E5F               	movlw	95
 11769  001486  6407               	cpfsgt	i1IR_CalculateCodesize@i,c
 11770  001488  D7E4               	goto	i1l4730
 11771  00148A  0C60               	retlw	96
 11772  00148C                     __end_ofi1_IR_CalculateCodesize:
 11773                           	opt stack 0
 11774                           tblptru	equ	0xFF8
 11775                           tblptrh	equ	0xFF7
 11776                           tblptrl	equ	0xFF6
 11777                           tablat	equ	0xFF5
 11778                           prodh	equ	0xFF4
 11779                           prodl	equ	0xFF3
 11780                           intcon	equ	0xFF2
 11781                           intcon2	equ	0xFF1
 11782                           intcon3	equ	0xFF0
 11783                           postinc0	equ	0xFEE
 11784                           wreg	equ	0xFE8
 11785                           postdec1	equ	0xFE5
 11786                           fsr1l	equ	0xFE1
 11787                           bsr	equ	0xFE0
 11788                           postinc2	equ	0xFDE
 11789                           postdec2	equ	0xFDD
 11790                           plusw2	equ	0xFDB
 11791                           fsr2h	equ	0xFDA
 11792                           fsr2l	equ	0xFD9
 11793                           status	equ	0xFD8
 11794                           
 11795 ;; *************** function _FSH_Write_IR_RF *****************
 11796 ;; Defined at:
 11797 ;;		line 196 in file "FLASH.c"
 11798 ;; Parameters:    Size  Location     Type
 11799 ;;		None
 11800 ;; Auto vars:     Size  Location     Type
 11801 ;;  RAMaddress      2   32[COMRAM] PTR unsigned int 
 11802 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), 
 11803 ;;  i               2   29[COMRAM] unsigned int 
 11804 ;;  FlashWastein    2   25[COMRAM] unsigned int 
 11805 ;;  WriteTries      1   31[COMRAM] unsigned char 
 11806 ;;  status          1   28[COMRAM] unsigned char 
 11807 ;;  j               1   27[COMRAM] unsigned char 
 11808 ;;  lowint          1   24[COMRAM] unsigned char 
 11809 ;;  highint         1   23[COMRAM] unsigned char 
 11810 ;; Return value:  Size  Location     Type
 11811 ;;                  1    wreg      unsigned char 
 11812 ;; Registers used:
 11813 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11814 ;; Tracked objects:
 11815 ;;		On entry : F/1
 11816 ;;		On exit  : 0/0
 11817 ;;		Unchanged: 0/0
 11818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11819 ;;      Params:         0       0       0       0       0
 11820 ;;      Locals:        11       0       0       0       0
 11821 ;;      Temps:          6       0       0       0       0
 11822 ;;      Totals:        17       0       0       0       0
 11823 ;;Total ram usage:       17 bytes
 11824 ;; Hardware stack levels used:    1
 11825 ;; Hardware stack levels required when called:    9
 11826 ;; This function calls:
 11827 ;;		_FSH_AddressToBlock
 11828 ;;		_FSH_EraseBlock
 11829 ;;		_FSH_VerifyWriteIntArray
 11830 ;;		_FSH_WriteIntArray
 11831 ;;		_IR_ResetData
 11832 ;;		_MSC_BufferCopyIntConst
 11833 ;;		_RF_ResetData
 11834 ;; This function is called by:
 11835 ;;		_IR_CheckCode
 11836 ;; This function uses a non-reentrant model
 11837 ;;
 11838                           
 11839                           	psect	text77
 11840  003354                     __ptext77:
 11841                           	opt stack 0
 11842  003354                     _FSH_Write_IR_RF:
 11843                           	opt stack 13
 11844                           
 11845                           ; BSR set to: 1
 11846                           ;FLASH.c: 198: unsigned int i;
 11847                           ;FLASH.c: 199: unsigned char j;
 11848                           ;FLASH.c: 200: unsigned char WriteTries;
 11849                           ;FLASH.c: 201: unsigned int *RAMaddress;
 11850                           ;FLASH.c: 202: unsigned char status = 0;
 11851                           
 11852                           ;incstack = 0
 11853  003354  6A1D               	clrf	FSH_Write_IR_RF@status,c
 11854                           
 11855                           ; BSR set to: 1
 11856                           ;FLASH.c: 204: unsigned char highint = INTCONbits.GIE;
 11857  003356  0E00               	movlw	0
 11858  003358  BEF2               	btfsc	intcon,7,c	;volatile
 11859  00335A  0E01               	movlw	1
 11860  00335C  6E18               	movwf	FSH_Write_IR_RF@highint,c
 11861                           
 11862                           ;FLASH.c: 205: unsigned char lowint = INTCONbits.PEIE;
 11863  00335E  0E00               	movlw	0
 11864  003360  BCF2               	btfsc	intcon,6,c	;volatile
 11865  003362  0E01               	movlw	1
 11866  003364  6E19               	movwf	FSH_Write_IR_RF@lowint,c
 11867                           
 11868                           ; BSR set to: 1
 11869                           ;FLASH.c: 207: INTCONbits.GIE = 0;
 11870  003366  9EF2               	bcf	intcon,7,c	;volatile
 11871                           
 11872                           ; BSR set to: 1
 11873                           ;FLASH.c: 208: INTCONbits.PEIE = 0;
 11874  003368  9CF2               	bcf	intcon,6,c	;volatile
 11875                           
 11876                           ; BSR set to: 1
 11877                           ;FLASH.c: 210: if(IR_Saved == 90 && RF_Saved == 90)
 11878  00336A  0E5A               	movlw	90
 11879  00336C  19AC               	xorwf	_IR_Saved& (0+255),w,b
 11880  00336E  E107               	bnz	i1l5184
 11881                           
 11882                           ; BSR set to: 1
 11883  003370  0E5A               	movlw	90
 11884  003372  19AD               	xorwf	_RF_Saved& (0+255),w,b
 11885  003374  E104               	bnz	i1l5184
 11886  003376                     i1l5180:
 11887                           
 11888                           ; BSR set to: 1
 11889                           ;FLASH.c: 211: {
 11890                           ;FLASH.c: 213: IR_Saved = 91;
 11891  003376  0E5B               	movlw	91
 11892  003378  6FAC               	movwf	_IR_Saved& (0+255),b
 11893                           
 11894                           ;FLASH.c: 214: RF_Saved = 91;
 11895  00337A  6FAD               	movwf	_RF_Saved& (0+255),b
 11896                           
 11897                           ;FLASH.c: 215: goto END;
 11898  00337C  D1FA               	goto	i1l966
 11899  00337E                     i1l5184:
 11900                           
 11901                           ; BSR set to: 1
 11902                           ;FLASH.c: 217: else if(IR_Saved != 90 && RF_Saved != 90)
 11903  00337E  0E5A               	movlw	90
 11904  003380  19AC               	xorwf	_IR_Saved& (0+255),w,b
 11905  003382  E003               	bz	i1l5190
 11906                           
 11907                           ; BSR set to: 1
 11908  003384  0E5A               	movlw	90
 11909  003386  19AD               	xorwf	_RF_Saved& (0+255),w,b
 11910  003388  E1F6               	bnz	i1l5180
 11911  00338A                     i1l5190:
 11912                           
 11913                           ; BSR set to: 1
 11914                           ;FLASH.c: 223: }
 11915                           ;FLASH.c: 225: if(IR_Saved == 90)
 11916  00338A  0E5A               	movlw	90
 11917  00338C  19AC               	xorwf	_IR_Saved& (0+255),w,b
 11918  00338E  E137               	bnz	i1l5204
 11919                           
 11920                           ; BSR set to: 1
 11921                           ;FLASH.c: 226: {
 11922                           ;FLASH.c: 228: RF_ResetData();
 11923  003390  ECB2  F00D         	call	_RF_ResetData	;wreg free
 11924                           
 11925                           ; BSR set to: 0
 11926                           ;FLASH.c: 229: MSC_BufferCopyIntConst(&RF_SavedTiming,&RF_DataTiming, 64, 0);
 11927  003394  0E80               	movlw	128
 11928  003396  6E07               	movwf	MSC_BufferCopyIntConst@from,c
 11929  003398  0E25               	movlw	37
 11930  00339A  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 11931  00339C  6A09               	clrf	MSC_BufferCopyIntConst@from+2,c
 11932  00339E  0E07               	movlw	low _RF_DataTiming
 11933  0033A0  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 11934  0033A2  0E01               	movlw	high _RF_DataTiming
 11935  0033A4  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 11936  0033A6  6A0D               	clrf	MSC_BufferCopyIntConst@count+1,c
 11937  0033A8  0E40               	movlw	64
 11938  0033AA  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 11939  0033AC  6A0F               	clrf	MSC_BufferCopyIntConst@shift+1,c
 11940  0033AE  6A0E               	clrf	MSC_BufferCopyIntConst@shift,c
 11941  0033B0  ECC2  F006         	call	_MSC_BufferCopyIntConst	;wreg free
 11942                           
 11943                           ;FLASH.c: 230: if(IRProgramCodeNumber == 0)
 11944  0033B4  5068               	movf	_IRProgramCodeNumber,w,c
 11945  0033B6  E111               	bnz	i1l5200
 11946  0033B8                     i1l5198:
 11947                           
 11948                           ;FLASH.c: 231: {
 11949                           ;FLASH.c: 232: MSC_BufferCopyIntConst(&IR_SavedTiming1,&IR_DataHolder1, 96, 0);
 11950  0033B8  0EC0               	movlw	192
 11951  0033BA  6E07               	movwf	MSC_BufferCopyIntConst@from,c
 11952  0033BC  0E24               	movlw	36
 11953  0033BE  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 11954  0033C0  6A09               	clrf	MSC_BufferCopyIntConst@from+2,c
 11955  0033C2  0E00               	movlw	low _IR_DataHolder1
 11956  0033C4  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 11957  0033C6  0E03               	movlw	high _IR_DataHolder1
 11958  0033C8  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 11959  0033CA  6A0D               	clrf	MSC_BufferCopyIntConst@count+1,c
 11960  0033CC  0E60               	movlw	96
 11961  0033CE  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 11962  0033D0  6A0F               	clrf	MSC_BufferCopyIntConst@shift+1,c
 11963  0033D2  6A0E               	clrf	MSC_BufferCopyIntConst@shift,c
 11964  0033D4  ECC2  F006         	call	_MSC_BufferCopyIntConst	;wreg free
 11965                           
 11966                           ;FLASH.c: 233: }
 11967  0033D8  D024               	goto	i1l5210
 11968  0033DA                     i1l5200:
 11969                           
 11970                           ;FLASH.c: 234: else if(IRProgramCodeNumber == 1)
 11971  0033DA  0468               	decf	_IRProgramCodeNumber,w,c
 11972  0033DC  E122               	bnz	i1l5210
 11973                           
 11974                           ;FLASH.c: 235: {
 11975                           ;FLASH.c: 236: MSC_BufferCopyIntConst(&IR_SavedTiming0,&IR_DataHolder1, 96, 0);
 11976  0033DE  6A07               	clrf	MSC_BufferCopyIntConst@from,c
 11977  0033E0  0E24               	movlw	36
 11978  0033E2  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 11979  0033E4  6A09               	clrf	MSC_BufferCopyIntConst@from+2,c
 11980  0033E6  0E00               	movlw	low _IR_DataHolder1
 11981  0033E8  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 11982  0033EA  0E03               	movlw	high _IR_DataHolder1
 11983  0033EC  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 11984  0033EE  6A0D               	clrf	MSC_BufferCopyIntConst@count+1,c
 11985  0033F0  0E60               	movlw	96
 11986  0033F2  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 11987  0033F4  6A0F               	clrf	MSC_BufferCopyIntConst@shift+1,c
 11988  0033F6  6A0E               	clrf	MSC_BufferCopyIntConst@shift,c
 11989  0033F8  ECC2  F006         	call	_MSC_BufferCopyIntConst	;wreg free
 11990  0033FC  D012               	goto	i1l5210
 11991  0033FE                     i1l5204:
 11992                           
 11993                           ; BSR set to: 1
 11994                           ;FLASH.c: 239: else
 11995                           ;FLASH.c: 240: {
 11996                           ;FLASH.c: 242: IR_ResetData();
 11997  0033FE  ECB6  F00D         	call	_IR_ResetData	;wreg free
 11998                           
 11999                           ;FLASH.c: 243: MSC_BufferCopyIntConst(&IR_SavedTiming0,&IR_DataTiming, 96, 0);
 12000  003402  6A07               	clrf	MSC_BufferCopyIntConst@from,c
 12001  003404  0E24               	movlw	36
 12002  003406  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 12003  003408  6A09               	clrf	MSC_BufferCopyIntConst@from+2,c
 12004  00340A  0E00               	movlw	low _IR_DataTiming
 12005  00340C  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 12006  00340E  0E02               	movlw	high _IR_DataTiming
 12007  003410  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 12008  003412  6A0D               	clrf	MSC_BufferCopyIntConst@count+1,c
 12009  003414  0E60               	movlw	96
 12010  003416  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 12011  003418  6A0F               	clrf	MSC_BufferCopyIntConst@shift+1,c
 12012  00341A  6A0E               	clrf	MSC_BufferCopyIntConst@shift,c
 12013  00341C  ECC2  F006         	call	_MSC_BufferCopyIntConst	;wreg free
 12014  003420  D7CB               	goto	i1l5198
 12015  003422                     i1l5210:
 12016                           
 12017                           ;FLASH.c: 245: }
 12018                           ;FLASH.c: 247: FSH_EraseBlock(&IR_SavedTiming0[0]);
 12019  003422  6A05               	clrf	FSH_EraseBlock@Address,c
 12020  003424  0E24               	movlw	36
 12021  003426  6E06               	movwf	FSH_EraseBlock@Address+1,c
 12022  003428  6A07               	clrf	FSH_EraseBlock@Address+2,c
 12023  00342A  6A08               	clrf	FSH_EraseBlock@Address+3,c
 12024  00342C  ECA3  F008         	call	_FSH_EraseBlock	;wreg free
 12025                           
 12026                           ;FLASH.c: 252: WriteTries = 1;
 12027  003430  0E01               	movlw	1
 12028  003432  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12029  003434                     i1l974:
 12030                           
 12031                           ;FLASH.c: 256: if(IR_Saved == 90)
 12032  003434  0E5A               	movlw	90
 12033  003436  0101               	movlb	1	; () banked
 12034  003438  19AC               	xorwf	_IR_Saved& (0+255),w,b
 12035  00343A  E102               	bnz	i1l5216
 12036                           
 12037                           ; BSR set to: 1
 12038                           ;FLASH.c: 257: {
 12039                           ;FLASH.c: 258: if(IRProgramCodeNumber == 0)
 12040  00343C  5068               	movf	_IRProgramCodeNumber,w,c
 12041  00343E  E104               	bnz	i1l5218
 12042  003440                     i1l5216:
 12043                           
 12044                           ; BSR set to: 1
 12045                           ;FLASH.c: 259: {
 12046                           ;FLASH.c: 260: RAMaddress = &IR_DataTiming[0];
 12047  003440  0E00               	movlw	low _IR_DataTiming
 12048  003442  6E21               	movwf	FSH_Write_IR_RF@RAMaddress,c
 12049  003444  0E02               	movlw	high _IR_DataTiming
 12050  003446  D003               	goto	L5
 12051  003448                     i1l5218:
 12052                           
 12053                           ; BSR set to: 1
 12054                           ;FLASH.c: 262: else
 12055                           ;FLASH.c: 263: {
 12056                           ;FLASH.c: 264: RAMaddress = &IR_DataHolder1[0];
 12057  003448  0E00               	movlw	low _IR_DataHolder1
 12058  00344A  6E21               	movwf	FSH_Write_IR_RF@RAMaddress,c
 12059  00344C  0E03               	movlw	high _IR_DataHolder1
 12060  00344E                     L5:
 12061  00344E  6E22               	movwf	FSH_Write_IR_RF@RAMaddress+1,c
 12062                           
 12063                           ; BSR set to: 1
 12064                           ;FLASH.c: 270: }
 12065                           ;FLASH.c: 273: FSH_WriteIntArray(&IR_SavedTiming0[0], RAMaddress);
 12066  003450  6A05               	clrf	FSH_WriteIntArray@ConstArray,c
 12067  003452  0E24               	movlw	36
 12068  003454  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12069  003456  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12070  003458  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12071  00345C  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12072  003460  EC24  F006         	call	_FSH_WriteIntArray	;wreg free
 12073                           
 12074                           ;FLASH.c: 276: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[0],RAMaddress))
 12075  003464  6A01               	clrf	FSH_VerifyWriteIntArray@ConstArray,c
 12076  003466  0E24               	movlw	36
 12077  003468  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12078  00346A  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12079  00346C  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12080  003470  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12081  003474  ECDC  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12082  003478  0900               	iorlw	0
 12083  00347A  E106               	bnz	i1l5234
 12084                           
 12085                           ;FLASH.c: 277: {
 12086                           ;FLASH.c: 278: WriteTries++;
 12087  00347C  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12088                           
 12089                           ;FLASH.c: 279: if(WriteTries > 10)
 12090  00347E  0E0A               	movlw	10
 12091  003480  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12092  003482  D7D8               	goto	i1l974
 12093  003484                     i1l5230:
 12094                           
 12095                           ;FLASH.c: 280: {
 12096                           ;FLASH.c: 281: status = 0;
 12097  003484  6A1D               	clrf	FSH_Write_IR_RF@status,c
 12098                           
 12099                           ;FLASH.c: 282: goto END;
 12100  003486  D175               	goto	i1l966
 12101  003488                     i1l5234:
 12102                           
 12103                           ;FLASH.c: 287: }
 12104                           ;FLASH.c: 288: }
 12105                           ;FLASH.c: 291: WriteTries = 1;
 12106  003488  0E01               	movlw	1
 12107  00348A  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12108                           
 12109                           ;FLASH.c: 292: RAMaddress+=32;
 12110  00348C  0E40               	movlw	64
 12111  00348E  2621               	addwf	FSH_Write_IR_RF@RAMaddress,f,c
 12112  003490  0E00               	movlw	0
 12113  003492  2222               	addwfc	FSH_Write_IR_RF@RAMaddress+1,f,c
 12114  003494                     i1l5238:
 12115                           
 12116                           ;FLASH.c: 296: FSH_WriteIntArray(&IR_SavedTiming0[32], RAMaddress);
 12117  003494  0E40               	movlw	64
 12118  003496  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12119  003498  0E24               	movlw	36
 12120  00349A  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12121  00349C  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12122  00349E  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12123  0034A2  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12124  0034A6  EC24  F006         	call	_FSH_WriteIntArray	;wreg free
 12125                           
 12126                           ;FLASH.c: 299: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[32], RAMaddress))
 12127  0034AA  0E40               	movlw	64
 12128  0034AC  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12129  0034AE  0E24               	movlw	36
 12130  0034B0  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12131  0034B2  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12132  0034B4  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12133  0034B8  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12134  0034BC  ECDC  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12135  0034C0  0900               	iorlw	0
 12136  0034C2  E105               	bnz	i1l5250
 12137                           
 12138                           ;FLASH.c: 300: {
 12139                           ;FLASH.c: 301: WriteTries++;
 12140  0034C4  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12141                           
 12142                           ;FLASH.c: 302: if(WriteTries > 10)
 12143  0034C6  0E0A               	movlw	10
 12144  0034C8  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12145  0034CA  D7E4               	goto	i1l5238
 12146  0034CC  D7DB               	goto	i1l5230
 12147  0034CE                     i1l5250:
 12148                           
 12149                           ;FLASH.c: 310: }
 12150                           ;FLASH.c: 311: }
 12151                           ;FLASH.c: 314: WriteTries = 1;
 12152  0034CE  0E01               	movlw	1
 12153  0034D0  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12154                           
 12155                           ;FLASH.c: 315: RAMaddress+=32;
 12156  0034D2  0E40               	movlw	64
 12157  0034D4  2621               	addwf	FSH_Write_IR_RF@RAMaddress,f,c
 12158  0034D6  0E00               	movlw	0
 12159  0034D8  2222               	addwfc	FSH_Write_IR_RF@RAMaddress+1,f,c
 12160  0034DA                     i1l5254:
 12161                           
 12162                           ;FLASH.c: 320: FSH_WriteIntArray(&IR_SavedTiming0[64], RAMaddress);
 12163  0034DA  0E80               	movlw	128
 12164  0034DC  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12165  0034DE  0E24               	movlw	36
 12166  0034E0  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12167  0034E2  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12168  0034E4  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12169  0034E8  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12170  0034EC  EC24  F006         	call	_FSH_WriteIntArray	;wreg free
 12171                           
 12172                           ;FLASH.c: 323: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[64],RAMaddress))
 12173  0034F0  0E80               	movlw	128
 12174  0034F2  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12175  0034F4  0E24               	movlw	36
 12176  0034F6  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12177  0034F8  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12178  0034FA  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12179  0034FE  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12180  003502  ECDC  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12181  003506  0900               	iorlw	0
 12182  003508  E105               	bnz	i1l5266
 12183                           
 12184                           ;FLASH.c: 324: {
 12185                           ;FLASH.c: 325: WriteTries++;
 12186  00350A  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12187                           
 12188                           ;FLASH.c: 326: if(WriteTries > 10)
 12189  00350C  0E0A               	movlw	10
 12190  00350E  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12191  003510  D7E4               	goto	i1l5254
 12192  003512  D7B8               	goto	i1l5230
 12193  003514                     i1l5266:
 12194                           
 12195                           ;FLASH.c: 334: }
 12196                           ;FLASH.c: 335: }
 12197                           ;FLASH.c: 338: WriteTries = 1;
 12198  003514  0E01               	movlw	1
 12199  003516  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12200  003518                     i1l5268:
 12201                           
 12202                           ;FLASH.c: 342: if(IR_Saved == 90)
 12203  003518  0E5A               	movlw	90
 12204  00351A  0101               	movlb	1	; () banked
 12205  00351C  19AC               	xorwf	_IR_Saved& (0+255),w,b
 12206  00351E  E106               	bnz	i1l5274
 12207                           
 12208                           ; BSR set to: 1
 12209                           ;FLASH.c: 343: {
 12210                           ;FLASH.c: 344: if(IRProgramCodeNumber == 1)
 12211  003520  0468               	decf	_IRProgramCodeNumber,w,c
 12212  003522  E104               	bnz	i1l5274
 12213                           
 12214                           ; BSR set to: 1
 12215                           ;FLASH.c: 345: {
 12216                           ;FLASH.c: 346: RAMaddress = &IR_DataTiming[0];
 12217  003524  0E00               	movlw	low _IR_DataTiming
 12218  003526  6E21               	movwf	FSH_Write_IR_RF@RAMaddress,c
 12219  003528  0E02               	movlw	high _IR_DataTiming
 12220  00352A  D003               	goto	L6
 12221  00352C                     i1l5274:
 12222                           
 12223                           ; BSR set to: 1
 12224                           ;FLASH.c: 348: else
 12225                           ;FLASH.c: 349: {
 12226                           ;FLASH.c: 350: RAMaddress = &IR_DataHolder1[0];
 12227  00352C  0E00               	movlw	low _IR_DataHolder1
 12228  00352E  6E21               	movwf	FSH_Write_IR_RF@RAMaddress,c
 12229  003530  0E03               	movlw	high _IR_DataHolder1
 12230  003532                     L6:
 12231  003532  6E22               	movwf	FSH_Write_IR_RF@RAMaddress+1,c
 12232                           
 12233                           ; BSR set to: 1
 12234                           ;FLASH.c: 356: }
 12235                           ;FLASH.c: 359: FSH_WriteIntArray(&IR_SavedTiming1[0], RAMaddress);
 12236  003534  0EC0               	movlw	192
 12237  003536  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12238  003538  0E24               	movlw	36
 12239  00353A  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12240  00353C  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12241  00353E  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12242  003542  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12243  003546  EC24  F006         	call	_FSH_WriteIntArray	;wreg free
 12244                           
 12245                           ;FLASH.c: 362: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[0], RAMaddress))
 12246  00354A  0EC0               	movlw	192
 12247  00354C  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12248  00354E  0E24               	movlw	36
 12249  003550  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12250  003552  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12251  003554  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12252  003558  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12253  00355C  ECDC  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12254  003560  0900               	iorlw	0
 12255  003562  E105               	bnz	i1l5290
 12256                           
 12257                           ;FLASH.c: 363: {
 12258                           ;FLASH.c: 364: WriteTries++;
 12259  003564  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12260                           
 12261                           ;FLASH.c: 365: if(WriteTries > 10)
 12262  003566  0E0A               	movlw	10
 12263  003568  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12264  00356A  D7D6               	goto	i1l5268
 12265  00356C  D78B               	goto	i1l5230
 12266  00356E                     i1l5290:
 12267                           
 12268                           ;FLASH.c: 373: }
 12269                           ;FLASH.c: 374: }
 12270                           ;FLASH.c: 377: WriteTries = 1;
 12271  00356E  0E01               	movlw	1
 12272  003570  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12273                           
 12274                           ;FLASH.c: 378: RAMaddress+=32;
 12275  003572  0E40               	movlw	64
 12276  003574  2621               	addwf	FSH_Write_IR_RF@RAMaddress,f,c
 12277  003576  0E00               	movlw	0
 12278  003578  2222               	addwfc	FSH_Write_IR_RF@RAMaddress+1,f,c
 12279  00357A                     i1l5294:
 12280                           
 12281                           ;FLASH.c: 383: FSH_WriteIntArray(&IR_SavedTiming1[32], RAMaddress);
 12282  00357A  6A05               	clrf	FSH_WriteIntArray@ConstArray,c
 12283  00357C  0E25               	movlw	37
 12284  00357E  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12285  003580  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12286  003582  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12287  003586  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12288  00358A  EC24  F006         	call	_FSH_WriteIntArray	;wreg free
 12289                           
 12290                           ;FLASH.c: 386: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[32], RAMaddress))
 12291  00358E  6A01               	clrf	FSH_VerifyWriteIntArray@ConstArray,c
 12292  003590  0E25               	movlw	37
 12293  003592  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12294  003594  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12295  003596  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12296  00359A  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12297  00359E  ECDC  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12298  0035A2  0900               	iorlw	0
 12299  0035A4  E105               	bnz	i1l5306
 12300                           
 12301                           ;FLASH.c: 387: {
 12302                           ;FLASH.c: 388: WriteTries++;
 12303  0035A6  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12304                           
 12305                           ;FLASH.c: 389: if(WriteTries > 10)
 12306  0035A8  0E0A               	movlw	10
 12307  0035AA  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12308  0035AC  D7E6               	goto	i1l5294
 12309  0035AE  D76A               	goto	i1l5230
 12310  0035B0                     i1l5306:
 12311                           
 12312                           ;FLASH.c: 397: }
 12313                           ;FLASH.c: 398: }
 12314                           ;FLASH.c: 401: WriteTries = 1;
 12315  0035B0  0E01               	movlw	1
 12316  0035B2  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12317                           
 12318                           ;FLASH.c: 402: RAMaddress+=32;
 12319  0035B4  0E40               	movlw	64
 12320  0035B6  2621               	addwf	FSH_Write_IR_RF@RAMaddress,f,c
 12321  0035B8  0E00               	movlw	0
 12322  0035BA  2222               	addwfc	FSH_Write_IR_RF@RAMaddress+1,f,c
 12323  0035BC                     i1l5310:
 12324                           
 12325                           ;FLASH.c: 407: FSH_WriteIntArray(&IR_SavedTiming1[64], RAMaddress);
 12326  0035BC  0E40               	movlw	64
 12327  0035BE  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12328  0035C0  0E25               	movlw	37
 12329  0035C2  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12330  0035C4  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12331  0035C6  C021  F008         	movff	FSH_Write_IR_RF@RAMaddress,FSH_WriteIntArray@Array
 12332  0035CA  C022  F009         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_WriteIntArray@Array+1
 12333  0035CE  EC24  F006         	call	_FSH_WriteIntArray	;wreg free
 12334                           
 12335                           ;FLASH.c: 410: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[64], RAMaddress))
 12336  0035D2  0E40               	movlw	64
 12337  0035D4  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12338  0035D6  0E25               	movlw	37
 12339  0035D8  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12340  0035DA  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12341  0035DC  C021  F004         	movff	FSH_Write_IR_RF@RAMaddress,FSH_VerifyWriteIntArray@Array
 12342  0035E0  C022  F005         	movff	FSH_Write_IR_RF@RAMaddress+1,FSH_VerifyWriteIntArray@Array+1
 12343  0035E4  ECDC  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12344  0035E8  0900               	iorlw	0
 12345  0035EA  E105               	bnz	i1l5322
 12346                           
 12347                           ;FLASH.c: 411: {
 12348                           ;FLASH.c: 412: WriteTries++;
 12349  0035EC  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12350                           
 12351                           ;FLASH.c: 413: if(WriteTries > 10)
 12352  0035EE  0E0A               	movlw	10
 12353  0035F0  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12354  0035F2  D7E4               	goto	i1l5310
 12355  0035F4  D747               	goto	i1l5230
 12356  0035F6                     i1l5322:
 12357                           
 12358                           ;FLASH.c: 421: }
 12359                           ;FLASH.c: 422: }
 12360                           ;FLASH.c: 425: WriteTries = 1;
 12361  0035F6  0E01               	movlw	1
 12362  0035F8  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12363  0035FA                     i1l5324:
 12364                           
 12365                           ;FLASH.c: 430: FSH_WriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]);
 12366  0035FA  0E80               	movlw	128
 12367  0035FC  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12368  0035FE  0E25               	movlw	37
 12369  003600  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12370  003602  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12371  003604  0E07               	movlw	low _RF_DataTiming
 12372  003606  6E08               	movwf	FSH_WriteIntArray@Array,c
 12373  003608  0E01               	movlw	high _RF_DataTiming
 12374  00360A  6E09               	movwf	FSH_WriteIntArray@Array+1,c
 12375  00360C  EC24  F006         	call	_FSH_WriteIntArray	;wreg free
 12376                           
 12377                           ;FLASH.c: 433: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]))
 12378  003610  0E80               	movlw	128
 12379  003612  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12380  003614  0E25               	movlw	37
 12381  003616  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12382  003618  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12383  00361A  0E07               	movlw	low _RF_DataTiming
 12384  00361C  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 12385  00361E  0E01               	movlw	high _RF_DataTiming
 12386  003620  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 12387  003622  ECDC  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12388  003626  0900               	iorlw	0
 12389  003628  E105               	bnz	i1l5336
 12390                           
 12391                           ;FLASH.c: 434: {
 12392                           ;FLASH.c: 435: WriteTries++;
 12393  00362A  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12394                           
 12395                           ;FLASH.c: 436: if(WriteTries > 10)
 12396  00362C  0E0A               	movlw	10
 12397  00362E  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12398  003630  D7E4               	goto	i1l5324
 12399  003632  D728               	goto	i1l5230
 12400  003634                     i1l5336:
 12401                           
 12402                           ;FLASH.c: 444: }
 12403                           ;FLASH.c: 445: }
 12404                           ;FLASH.c: 448: WriteTries = 1;
 12405  003634  0E01               	movlw	1
 12406  003636  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12407  003638                     i1l5338:
 12408                           
 12409                           ;FLASH.c: 453: FSH_WriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]);
 12410  003638  0EC0               	movlw	192
 12411  00363A  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12412  00363C  0E25               	movlw	37
 12413  00363E  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12414  003640  6A07               	clrf	FSH_WriteIntArray@ConstArray+2,c
 12415  003642  0E47               	movlw	low (_RF_DataTiming+64)
 12416  003644  6E08               	movwf	FSH_WriteIntArray@Array,c
 12417  003646  0E01               	movlw	high (_RF_DataTiming+64)
 12418  003648  6E09               	movwf	FSH_WriteIntArray@Array+1,c
 12419  00364A  EC24  F006         	call	_FSH_WriteIntArray	;wreg free
 12420                           
 12421                           ;FLASH.c: 456: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]))
 12422  00364E  0EC0               	movlw	192
 12423  003650  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12424  003652  0E25               	movlw	37
 12425  003654  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12426  003656  6A03               	clrf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12427  003658  0E47               	movlw	low (_RF_DataTiming+64)
 12428  00365A  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 12429  00365C  0E01               	movlw	high (_RF_DataTiming+64)
 12430  00365E  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 12431  003660  ECDC  F008         	call	_FSH_VerifyWriteIntArray	;wreg free
 12432  003664  0900               	iorlw	0
 12433  003666  E105               	bnz	i1l5350
 12434                           
 12435                           ;FLASH.c: 457: {
 12436                           ;FLASH.c: 458: WriteTries++;
 12437  003668  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12438                           
 12439                           ;FLASH.c: 459: if(WriteTries > 10)
 12440  00366A  0E0A               	movlw	10
 12441  00366C  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12442  00366E  D7E4               	goto	i1l5338
 12443  003670  D709               	goto	i1l5230
 12444  003672                     i1l5350:
 12445                           
 12446                           ;FLASH.c: 467: }
 12447                           ;FLASH.c: 468: }
 12448                           ;FLASH.c: 471: for(j=8;j<16;j++)
 12449  003672  0E08               	movlw	8
 12450  003674  6E1C               	movwf	FSH_Write_IR_RF@j,c
 12451  003676                     i1l5352:
 12452  003676  0E0F               	movlw	15
 12453  003678  641C               	cpfsgt	FSH_Write_IR_RF@j,c
 12454  00367A  D001               	goto	i1l5356
 12455  00367C  D078               	goto	i1l5404
 12456  00367E                     i1l5356:
 12457                           
 12458                           ;FLASH.c: 472: {
 12459                           ;FLASH.c: 473: WriteTries = 1;
 12460  00367E  0E01               	movlw	1
 12461  003680  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12462  003682                     i1l5358:
 12463                           
 12464                           ;FLASH.c: 476: i=0;
 12465  003682  6A1E               	clrf	FSH_Write_IR_RF@i,c
 12466  003684  6A1F               	clrf	FSH_Write_IR_RF@i+1,c
 12467                           
 12468                           ;FLASH.c: 477: FlashWasteindex = i + 64*(j-8);
 12469  003686  501C               	movf	FSH_Write_IR_RF@j,w,c
 12470  003688  6E12               	movwf	??_FSH_Write_IR_RF& (0+255),c
 12471  00368A  6A13               	clrf	(??_FSH_Write_IR_RF+1)& (0+255),c
 12472  00368C  0E06               	movlw	6
 12473  00368E                     i1u516_25:
 12474  00368E  90D8               	bcf	status,0,c
 12475  003690  3612               	rlcf	??_FSH_Write_IR_RF,f,c
 12476  003692  3613               	rlcf	??_FSH_Write_IR_RF+1,f,c
 12477  003694  2EE8               	decfsz	wreg,f,c
 12478  003696  D7FB               	goto	i1u516_25
 12479  003698  501E               	movf	FSH_Write_IR_RF@i,w,c
 12480  00369A  2612               	addwf	??_FSH_Write_IR_RF,f,c
 12481  00369C  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 12482  00369E  2213               	addwfc	??_FSH_Write_IR_RF+1,f,c
 12483  0036A0  0E00               	movlw	0
 12484  0036A2  2412               	addwf	??_FSH_Write_IR_RF,w,c
 12485  0036A4  6E1A               	movwf	FSH_Write_IR_RF@FlashWasteindex,c
 12486  0036A6  0EFE               	movlw	254
 12487  0036A8  2013               	addwfc	??_FSH_Write_IR_RF+1,w,c
 12488  0036AA  6E1B               	movwf	FSH_Write_IR_RF@FlashWasteindex+1,c
 12489                           
 12490                           ;FLASH.c: 478: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 12491  0036AC  6A12               	clrf	??_FSH_Write_IR_RF& (0+255),c
 12492  0036AE  0E26               	movlw	38
 12493  0036B0  6E13               	movwf	(??_FSH_Write_IR_RF+1)& (0+255),c
 12494  0036B2  6A14               	clrf	(??_FSH_Write_IR_RF+2)& (0+255),c
 12495  0036B4  501A               	movf	FSH_Write_IR_RF@FlashWasteindex,w,c
 12496  0036B6  2412               	addwf	??_FSH_Write_IR_RF,w,c
 12497  0036B8  6E15               	movwf	(??_FSH_Write_IR_RF+3)& (0+255),c
 12498  0036BA  501B               	movf	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 12499  0036BC  2013               	addwfc	??_FSH_Write_IR_RF+1,w,c
 12500  0036BE  6E16               	movwf	(??_FSH_Write_IR_RF+4)& (0+255),c
 12501  0036C0  0E00               	movlw	0
 12502  0036C2  2014               	addwfc	??_FSH_Write_IR_RF+2,w,c
 12503  0036C4  6E17               	movwf	(??_FSH_Write_IR_RF+5)& (0+255),c
 12504  0036C6  5015               	movf	??_FSH_Write_IR_RF+3,w,c
 12505  0036C8  6E01               	movwf	FSH_AddressToBlock@Address,c
 12506  0036CA  5016               	movf	??_FSH_Write_IR_RF+4,w,c
 12507  0036CC  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 12508  0036CE  5017               	movf	??_FSH_Write_IR_RF+5,w,c
 12509  0036D0  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 12510  0036D2  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 12511  0036D4  EC68  F00B         	call	_FSH_AddressToBlock	;wreg free
 12512                           
 12513                           ;FLASH.c: 479: for(i = 0; i<64; i++)
 12514  0036D8  6A1E               	clrf	FSH_Write_IR_RF@i,c
 12515  0036DA  6A1F               	clrf	FSH_Write_IR_RF@i+1,c
 12516  0036DC                     i1l5366:
 12517  0036DC  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 12518  0036DE  E109               	bnz	i1l5376
 12519  0036E0  0E40               	movlw	64
 12520  0036E2  5C1E               	subwf	FSH_Write_IR_RF@i,w,c
 12521  0036E4  E206               	bc	i1l5376
 12522                           
 12523                           ;FLASH.c: 480: {
 12524                           ;FLASH.c: 482: TABLAT = 0xDA;
 12525  0036E6  0EDA               	movlw	218
 12526  0036E8  6EF5               	movwf	tablat,c	;volatile
 12527  0036EA  000D               	tblwt		*+	;# 
 12528  0036EC  4A1E               	infsnz	FSH_Write_IR_RF@i,f,c
 12529  0036EE  2A1F               	incf	FSH_Write_IR_RF@i+1,f,c
 12530  0036F0  D7F5               	goto	i1l5366
 12531  0036F2                     i1l5376:
 12532                           
 12533                           ;FLASH.c: 484: }
 12534                           ;FLASH.c: 485: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 12535  0036F2  6A12               	clrf	??_FSH_Write_IR_RF& (0+255),c
 12536  0036F4  0E26               	movlw	38
 12537  0036F6  6E13               	movwf	(??_FSH_Write_IR_RF+1)& (0+255),c
 12538  0036F8  6A14               	clrf	(??_FSH_Write_IR_RF+2)& (0+255),c
 12539  0036FA  501A               	movf	FSH_Write_IR_RF@FlashWasteindex,w,c
 12540  0036FC  2412               	addwf	??_FSH_Write_IR_RF,w,c
 12541  0036FE  6E15               	movwf	(??_FSH_Write_IR_RF+3)& (0+255),c
 12542  003700  501B               	movf	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 12543  003702  2013               	addwfc	??_FSH_Write_IR_RF+1,w,c
 12544  003704  6E16               	movwf	(??_FSH_Write_IR_RF+4)& (0+255),c
 12545  003706  0E00               	movlw	0
 12546  003708  2014               	addwfc	??_FSH_Write_IR_RF+2,w,c
 12547  00370A  6E17               	movwf	(??_FSH_Write_IR_RF+5)& (0+255),c
 12548  00370C  5015               	movf	??_FSH_Write_IR_RF+3,w,c
 12549  00370E  6E01               	movwf	FSH_AddressToBlock@Address,c
 12550  003710  5016               	movf	??_FSH_Write_IR_RF+4,w,c
 12551  003712  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 12552  003714  5017               	movf	??_FSH_Write_IR_RF+5,w,c
 12553  003716  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 12554  003718  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 12555  00371A  EC68  F00B         	call	_FSH_AddressToBlock	;wreg free
 12556                           
 12557                           ;FLASH.c: 487: EECON1bits.FREE = 0;
 12558  00371E  98A6               	bcf	4006,4,c	;volatile
 12559  003720  84A6               	bsf	4006,2,c	;# 
 12560  003722  9EF2               	bcf	intcon,7,c	;# 
 12561  003724  0E55               	movlw	85	;# 
 12562  003726  6EA7               	movwf	4007,c	;# 
 12563  003728  0EAA               	movlw	170	;# 
 12564  00372A  6EA7               	movwf	4007,c	;# 
 12565  00372C  82A6               	bsf	4006,1,c	;# 
 12566                           
 12567                           ;FLASH.c: 498: for(i=0; i<64;i++)
 12568  00372E  6A1E               	clrf	FSH_Write_IR_RF@i,c
 12569  003730  6A1F               	clrf	FSH_Write_IR_RF@i+1,c
 12570  003732                     i1l5382:
 12571  003732  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 12572  003734  E11A               	bnz	i1l5400
 12573  003736  0E40               	movlw	64
 12574  003738  5C1E               	subwf	FSH_Write_IR_RF@i,w,c
 12575  00373A  E217               	bc	i1l5400
 12576                           
 12577                           ;FLASH.c: 499: {
 12578                           ;FLASH.c: 500: if(FlashWaste[FlashWasteindex] != 0xDA)
 12579  00373C  0E00               	movlw	0
 12580  00373E  241A               	addwf	FSH_Write_IR_RF@FlashWasteindex,w,c
 12581  003740  6EF6               	movwf	tblptrl,c
 12582  003742  0E26               	movlw	38
 12583  003744  201B               	addwfc	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 12584  003746  6EF7               	movwf	tblptrh,c
 12585  003748  6AF8               	clrf	tblptru,c
 12586  00374A  0E00               	movlw	0
 12587  00374C  22F8               	addwfc	tblptru,f,c
 12588  00374E  0008               	tblrd		*
 12589  003750  50F5               	movf	tablat,w,c
 12590  003752  0ADA               	xorlw	218
 12591  003754  E005               	bz	i1l5396
 12592                           
 12593                           ;FLASH.c: 501: {
 12594                           ;FLASH.c: 502: WriteTries++;
 12595  003756  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12596                           
 12597                           ;FLASH.c: 503: if(WriteTries > 10)
 12598  003758  0E0A               	movlw	10
 12599  00375A  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12600  00375C  D792               	goto	i1l5358
 12601  00375E  D692               	goto	i1l5230
 12602  003760                     i1l5396:
 12603                           
 12604                           ;FLASH.c: 511: }
 12605                           ;FLASH.c: 512: }
 12606                           ;FLASH.c: 513: FlashWasteindex++;
 12607  003760  4A1A               	infsnz	FSH_Write_IR_RF@FlashWasteindex,f,c
 12608  003762  2A1B               	incf	FSH_Write_IR_RF@FlashWasteindex+1,f,c
 12609  003764  4A1E               	infsnz	FSH_Write_IR_RF@i,f,c
 12610  003766  2A1F               	incf	FSH_Write_IR_RF@i+1,f,c
 12611  003768  D7E4               	goto	i1l5382
 12612  00376A                     i1l5400:
 12613  00376A  2A1C               	incf	FSH_Write_IR_RF@j,f,c
 12614  00376C  D784               	goto	i1l5352
 12615  00376E                     i1l5404:
 12616                           
 12617                           ;FLASH.c: 514: }
 12618                           ;FLASH.c: 515: }
 12619                           ;FLASH.c: 516: status = 1;
 12620  00376E  0E01               	movlw	1
 12621  003770  6E1D               	movwf	FSH_Write_IR_RF@status,c
 12622  003772                     i1l966:
 12623                           
 12624                           ;FLASH.c: 519: if(highint)
 12625  003772  5018               	movf	FSH_Write_IR_RF@highint,w,c
 12626  003774  E001               	bz	i1l5408
 12627                           
 12628                           ;FLASH.c: 520: {
 12629                           ;FLASH.c: 521: INTCONbits.GIE = 1;
 12630  003776  8EF2               	bsf	intcon,7,c	;volatile
 12631  003778                     i1l5408:
 12632                           
 12633                           ;FLASH.c: 522: }
 12634                           ;FLASH.c: 523: if(lowint)
 12635  003778  5019               	movf	FSH_Write_IR_RF@lowint,w,c
 12636  00377A  E001               	bz	i1l5412
 12637                           
 12638                           ;FLASH.c: 524: {
 12639                           ;FLASH.c: 525: INTCONbits.PEIE = 1;
 12640  00377C  8CF2               	bsf	intcon,6,c	;volatile
 12641  00377E                     i1l5412:
 12642                           
 12643                           ;FLASH.c: 526: }
 12644                           ;FLASH.c: 527: return status;
 12645  00377E  501D               	movf	FSH_Write_IR_RF@status,w,c
 12646  003780  0012               	return		;funcret
 12647  003782                     __end_of_FSH_Write_IR_RF:
 12648                           	opt stack 0
 12649                           tblptru	equ	0xFF8
 12650                           tblptrh	equ	0xFF7
 12651                           tblptrl	equ	0xFF6
 12652                           tablat	equ	0xFF5
 12653                           prodh	equ	0xFF4
 12654                           prodl	equ	0xFF3
 12655                           intcon	equ	0xFF2
 12656                           intcon2	equ	0xFF1
 12657                           intcon3	equ	0xFF0
 12658                           postinc0	equ	0xFEE
 12659                           wreg	equ	0xFE8
 12660                           postdec1	equ	0xFE5
 12661                           fsr1l	equ	0xFE1
 12662                           bsr	equ	0xFE0
 12663                           postinc2	equ	0xFDE
 12664                           postdec2	equ	0xFDD
 12665                           plusw2	equ	0xFDB
 12666                           fsr2h	equ	0xFDA
 12667                           fsr2l	equ	0xFD9
 12668                           status	equ	0xFD8
 12669                           
 12670 ;; *************** function _RF_ResetData *****************
 12671 ;; Defined at:
 12672 ;;		line 116 in file "RF.c"
 12673 ;; Parameters:    Size  Location     Type
 12674 ;;		None
 12675 ;; Auto vars:     Size  Location     Type
 12676 ;;		None
 12677 ;; Return value:  Size  Location     Type
 12678 ;;		None               void
 12679 ;; Registers used:
 12680 ;;		None
 12681 ;; Tracked objects:
 12682 ;;		On entry : F/1
 12683 ;;		On exit  : F/0
 12684 ;;		Unchanged: 0/0
 12685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12686 ;;      Params:         0       0       0       0       0
 12687 ;;      Locals:         0       0       0       0       0
 12688 ;;      Temps:          0       0       0       0       0
 12689 ;;      Totals:         0       0       0       0       0
 12690 ;;Total ram usage:        0 bytes
 12691 ;; Hardware stack levels used:    1
 12692 ;; Hardware stack levels required when called:    6
 12693 ;; This function calls:
 12694 ;;		Nothing
 12695 ;; This function is called by:
 12696 ;;		_FSH_Write_IR_RF
 12697 ;; This function uses a non-reentrant model
 12698 ;;
 12699                           
 12700                           	psect	text78
 12701  001B64                     __ptext78:
 12702                           	opt stack 0
 12703  001B64                     _RF_ResetData:
 12704                           	opt stack 15
 12705                           
 12706                           ; BSR set to: 1
 12707                           ;RF.c: 118: RF_DataPlace = 0;
 12708                           
 12709                           ;incstack = 0
 12710  001B64  0100               	movlb	0	; () banked
 12711  001B66  6BC9               	clrf	_RF_DataPlace& (0+255),b
 12712                           
 12713                           ;RF.c: 119: RFStarted = 0;
 12714  001B68  6BC7               	clrf	_RFStarted& (0+255),b
 12715                           
 12716                           ; BSR set to: 0
 12717  001B6A  0012               	return		;funcret
 12718  001B6C                     __end_of_RF_ResetData:
 12719                           	opt stack 0
 12720                           tblptru	equ	0xFF8
 12721                           tblptrh	equ	0xFF7
 12722                           tblptrl	equ	0xFF6
 12723                           tablat	equ	0xFF5
 12724                           prodh	equ	0xFF4
 12725                           prodl	equ	0xFF3
 12726                           intcon	equ	0xFF2
 12727                           intcon2	equ	0xFF1
 12728                           intcon3	equ	0xFF0
 12729                           postinc0	equ	0xFEE
 12730                           wreg	equ	0xFE8
 12731                           postdec1	equ	0xFE5
 12732                           fsr1l	equ	0xFE1
 12733                           bsr	equ	0xFE0
 12734                           postinc2	equ	0xFDE
 12735                           postdec2	equ	0xFDD
 12736                           plusw2	equ	0xFDB
 12737                           fsr2h	equ	0xFDA
 12738                           fsr2l	equ	0xFD9
 12739                           status	equ	0xFD8
 12740                           
 12741 ;; *************** function _MSC_BufferCopyIntConst *****************
 12742 ;; Defined at:
 12743 ;;		line 150 in file "MISC.c"
 12744 ;; Parameters:    Size  Location     Type
 12745 ;;  from            3    6[COMRAM] PTR const unsigned int 
 12746 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 12747 ;;  to              2    9[COMRAM] PTR unsigned int 
 12748 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 12749 ;;  count           2   11[COMRAM] unsigned int 
 12750 ;;  shift           2   13[COMRAM] unsigned int 
 12751 ;; Auto vars:     Size  Location     Type
 12752 ;;  i               2   15[COMRAM] unsigned int 
 12753 ;; Return value:  Size  Location     Type
 12754 ;;		None               void
 12755 ;; Registers used:
 12756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12757 ;; Tracked objects:
 12758 ;;		On entry : 0/0
 12759 ;;		On exit  : 0/0
 12760 ;;		Unchanged: 0/0
 12761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12762 ;;      Params:         9       0       0       0       0
 12763 ;;      Locals:         2       0       0       0       0
 12764 ;;      Temps:          0       0       0       0       0
 12765 ;;      Totals:        11       0       0       0       0
 12766 ;;Total ram usage:       11 bytes
 12767 ;; Hardware stack levels used:    1
 12768 ;; Hardware stack levels required when called:    7
 12769 ;; This function calls:
 12770 ;;		i1_MSC_CleanBufferInt
 12771 ;; This function is called by:
 12772 ;;		_FSH_Write_IR_RF
 12773 ;; This function uses a non-reentrant model
 12774 ;;
 12775                           
 12776                           	psect	text79
 12777  000D84                     __ptext79:
 12778                           	opt stack 0
 12779  000D84                     _MSC_BufferCopyIntConst:
 12780                           	opt stack 14
 12781                           
 12782                           ;MISC.c: 153: MSC_CleanBufferInt(to,count);
 12783                           
 12784                           ; BSR set to: 0
 12785                           ;incstack = 0
 12786  000D84  C00A  F001         	movff	MSC_BufferCopyIntConst@to,i1MSC_CleanBufferInt@data
 12787  000D88  C00B  F002         	movff	MSC_BufferCopyIntConst@to+1,i1MSC_CleanBufferInt@data+1
 12788  000D8C  C00C  F003         	movff	MSC_BufferCopyIntConst@count,i1MSC_CleanBufferInt@count
 12789  000D90  C00D  F004         	movff	MSC_BufferCopyIntConst@count+1,i1MSC_CleanBufferInt@count+1
 12790  000D94  ECE1  F00A         	call	i1_MSC_CleanBufferInt	;wreg free
 12791                           
 12792                           ;MISC.c: 154: for(i = shift; i>0; i--)
 12793  000D98  C00E  F010         	movff	MSC_BufferCopyIntConst@shift,MSC_BufferCopyIntConst@i
 12794  000D9C  C00F  F011         	movff	MSC_BufferCopyIntConst@shift+1,MSC_BufferCopyIntConst@i+1
 12795  000DA0                     i1l4516:
 12796  000DA0  5010               	movf	MSC_BufferCopyIntConst@i,w,c
 12797  000DA2  1011               	iorwf	MSC_BufferCopyIntConst@i+1,w,c
 12798  000DA4  E02B               	bz	i1l4536
 12799                           
 12800                           ;MISC.c: 155: {
 12801                           ;MISC.c: 156: *to = ' ';
 12802  000DA6  C00A  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
 12803  000DAA  C00B  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
 12804  000DAE  0E20               	movlw	32
 12805  000DB0  6EDE               	movwf	postinc2,c
 12806  000DB2  6ADD               	clrf	postdec2,c
 12807                           
 12808                           ;MISC.c: 157: to++;
 12809  000DB4  0E02               	movlw	2
 12810  000DB6  260A               	addwf	MSC_BufferCopyIntConst@to,f,c
 12811  000DB8  0E00               	movlw	0
 12812  000DBA  220B               	addwfc	MSC_BufferCopyIntConst@to+1,f,c
 12813  000DBC  0610               	decf	MSC_BufferCopyIntConst@i,f,c
 12814  000DBE  A0D8               	btfss	status,0,c
 12815  000DC0  0611               	decf	MSC_BufferCopyIntConst@i+1,f,c
 12816  000DC2  D7EE               	goto	i1l4516
 12817  000DC4                     i1l4528:
 12818                           
 12819                           ;MISC.c: 160: {
 12820                           ;MISC.c: 161: *to = *from;
 12821  000DC4  C007  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
 12822  000DC8  C008  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
 12823  000DCC  C009  FFF8         	movff	MSC_BufferCopyIntConst@from+2,tblptru
 12824  000DD0  C00A  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
 12825  000DD4  C00B  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
 12826  000DD8  0009               	tblrd		*+
 12827  000DDA  CFF5 FFDE          	movff	tablat,postinc2
 12828  000DDE  0008               	tblrd		*
 12829  000DE0  CFF5 FFDD          	movff	tablat,postdec2
 12830                           
 12831                           ;MISC.c: 162: from++;
 12832  000DE4  0E02               	movlw	2
 12833  000DE6  2607               	addwf	MSC_BufferCopyIntConst@from,f,c
 12834  000DE8  0E00               	movlw	0
 12835  000DEA  2208               	addwfc	MSC_BufferCopyIntConst@from+1,f,c
 12836  000DEC  2209               	addwfc	MSC_BufferCopyIntConst@from+2,f,c
 12837                           
 12838                           ;MISC.c: 163: to++;
 12839  000DEE  0E02               	movlw	2
 12840  000DF0  260A               	addwf	MSC_BufferCopyIntConst@to,f,c
 12841  000DF2  0E00               	movlw	0
 12842  000DF4  220B               	addwfc	MSC_BufferCopyIntConst@to+1,f,c
 12843                           
 12844                           ;MISC.c: 164: count--;
 12845  000DF6  060C               	decf	MSC_BufferCopyIntConst@count,f,c
 12846  000DF8  A0D8               	btfss	status,0,c
 12847  000DFA  060D               	decf	MSC_BufferCopyIntConst@count+1,f,c
 12848  000DFC                     i1l4536:
 12849  000DFC  C007  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
 12850  000E00  C008  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
 12851  000E04  C009  FFF8         	movff	MSC_BufferCopyIntConst@from+2,tblptru
 12852  000E08  0009               	tblrd		*+
 12853  000E0A  50F5               	movf	tablat,w,c
 12854  000E0C  0009               	tblrd		*+
 12855  000E0E  10F5               	iorwf	tablat,w,c
 12856  000E10  B4D8               	btfsc	status,2,c
 12857  000E12  0012               	return	
 12858  000E14  500C               	movf	MSC_BufferCopyIntConst@count,w,c
 12859  000E16  100D               	iorwf	MSC_BufferCopyIntConst@count+1,w,c
 12860  000E18  E1D5               	bnz	i1l4528
 12861  000E1A  0012               	return		;funcret
 12862  000E1C                     __end_of_MSC_BufferCopyIntConst:
 12863                           	opt stack 0
 12864                           tblptru	equ	0xFF8
 12865                           tblptrh	equ	0xFF7
 12866                           tblptrl	equ	0xFF6
 12867                           tablat	equ	0xFF5
 12868                           prodh	equ	0xFF4
 12869                           prodl	equ	0xFF3
 12870                           intcon	equ	0xFF2
 12871                           intcon2	equ	0xFF1
 12872                           intcon3	equ	0xFF0
 12873                           postinc0	equ	0xFEE
 12874                           wreg	equ	0xFE8
 12875                           postdec1	equ	0xFE5
 12876                           fsr1l	equ	0xFE1
 12877                           bsr	equ	0xFE0
 12878                           postinc2	equ	0xFDE
 12879                           postdec2	equ	0xFDD
 12880                           plusw2	equ	0xFDB
 12881                           fsr2h	equ	0xFDA
 12882                           fsr2l	equ	0xFD9
 12883                           status	equ	0xFD8
 12884                           
 12885 ;; *************** function i1_MSC_CleanBufferInt *****************
 12886 ;; Defined at:
 12887 ;;		line 90 in file "MISC.c"
 12888 ;; Parameters:    Size  Location     Type
 12889 ;;  data            2    0[COMRAM] PTR unsigned int 
 12890 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 12891 ;;  count           2    2[COMRAM] unsigned int 
 12892 ;; Auto vars:     Size  Location     Type
 12893 ;;  MSC_CleanBuf    2    4[COMRAM] unsigned int 
 12894 ;; Return value:  Size  Location     Type
 12895 ;;		None               void
 12896 ;; Registers used:
 12897 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12898 ;; Tracked objects:
 12899 ;;		On entry : 0/0
 12900 ;;		On exit  : 0/0
 12901 ;;		Unchanged: 0/0
 12902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12903 ;;      Params:         4       0       0       0       0
 12904 ;;      Locals:         2       0       0       0       0
 12905 ;;      Temps:          0       0       0       0       0
 12906 ;;      Totals:         6       0       0       0       0
 12907 ;;Total ram usage:        6 bytes
 12908 ;; Hardware stack levels used:    1
 12909 ;; Hardware stack levels required when called:    6
 12910 ;; This function calls:
 12911 ;;		Nothing
 12912 ;; This function is called by:
 12913 ;;		_MSC_BufferCopyIntConst
 12914 ;; This function uses a non-reentrant model
 12915 ;;
 12916                           
 12917                           	psect	text80
 12918  0015C2                     __ptext80:
 12919                           	opt stack 0
 12920  0015C2                     i1_MSC_CleanBufferInt:
 12921                           	opt stack 14
 12922                           
 12923                           ;MISC.c: 92: unsigned int i=0;
 12924                           
 12925                           ;incstack = 0
 12926  0015C2  6A05               	clrf	i1MSC_CleanBufferInt@i,c
 12927  0015C4  6A06               	clrf	i1MSC_CleanBufferInt@i+1,c
 12928                           
 12929                           ;MISC.c: 93: for(i=0; i<count;i++)
 12930  0015C6  6A05               	clrf	i1MSC_CleanBufferInt@i,c
 12931  0015C8  6A06               	clrf	i1MSC_CleanBufferInt@i+1,c
 12932  0015CA  D00D               	goto	i1l4342
 12933  0015CC                     i1l4338:
 12934                           
 12935                           ;MISC.c: 94: {
 12936                           ;MISC.c: 95: data[i]= 0;
 12937  0015CC  90D8               	bcf	status,0,c
 12938  0015CE  3405               	rlcf	i1MSC_CleanBufferInt@i,w,c
 12939  0015D0  6ED9               	movwf	fsr2l,c
 12940  0015D2  3406               	rlcf	i1MSC_CleanBufferInt@i+1,w,c
 12941  0015D4  6EDA               	movwf	fsr2h,c
 12942  0015D6  5001               	movf	i1MSC_CleanBufferInt@data,w,c
 12943  0015D8  26D9               	addwf	fsr2l,f,c
 12944  0015DA  5002               	movf	i1MSC_CleanBufferInt@data+1,w,c
 12945  0015DC  22DA               	addwfc	fsr2h,f,c
 12946  0015DE  6ADE               	clrf	postinc2,c
 12947  0015E0  6ADD               	clrf	postdec2,c
 12948  0015E2  4A05               	infsnz	i1MSC_CleanBufferInt@i,f,c
 12949  0015E4  2A06               	incf	i1MSC_CleanBufferInt@i+1,f,c
 12950  0015E6                     i1l4342:
 12951  0015E6  5003               	movf	i1MSC_CleanBufferInt@count,w,c
 12952  0015E8  5C05               	subwf	i1MSC_CleanBufferInt@i,w,c
 12953  0015EA  5004               	movf	i1MSC_CleanBufferInt@count+1,w,c
 12954  0015EC  5806               	subwfb	i1MSC_CleanBufferInt@i+1,w,c
 12955  0015EE  E3EE               	bnc	i1l4338
 12956  0015F0  0012               	return		;funcret
 12957  0015F2                     __end_ofi1_MSC_CleanBufferInt:
 12958                           	opt stack 0
 12959                           tblptru	equ	0xFF8
 12960                           tblptrh	equ	0xFF7
 12961                           tblptrl	equ	0xFF6
 12962                           tablat	equ	0xFF5
 12963                           prodh	equ	0xFF4
 12964                           prodl	equ	0xFF3
 12965                           intcon	equ	0xFF2
 12966                           intcon2	equ	0xFF1
 12967                           intcon3	equ	0xFF0
 12968                           postinc0	equ	0xFEE
 12969                           wreg	equ	0xFE8
 12970                           postdec1	equ	0xFE5
 12971                           fsr1l	equ	0xFE1
 12972                           bsr	equ	0xFE0
 12973                           postinc2	equ	0xFDE
 12974                           postdec2	equ	0xFDD
 12975                           plusw2	equ	0xFDB
 12976                           fsr2h	equ	0xFDA
 12977                           fsr2l	equ	0xFD9
 12978                           status	equ	0xFD8
 12979                           
 12980 ;; *************** function _IR_ResetData *****************
 12981 ;; Defined at:
 12982 ;;		line 109 in file "IR.c"
 12983 ;; Parameters:    Size  Location     Type
 12984 ;;		None
 12985 ;; Auto vars:     Size  Location     Type
 12986 ;;		None
 12987 ;; Return value:  Size  Location     Type
 12988 ;;		None               void
 12989 ;; Registers used:
 12990 ;;		wreg, status,2, cstack
 12991 ;; Tracked objects:
 12992 ;;		On entry : 0/1
 12993 ;;		On exit  : 0/0
 12994 ;;		Unchanged: 0/0
 12995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12996 ;;      Params:         0       0       0       0       0
 12997 ;;      Locals:         0       0       0       0       0
 12998 ;;      Temps:          0       0       0       0       0
 12999 ;;      Totals:         0       0       0       0       0
 13000 ;;Total ram usage:        0 bytes
 13001 ;; Hardware stack levels used:    1
 13002 ;; Hardware stack levels required when called:    8
 13003 ;; This function calls:
 13004 ;;		_RF_Enable
 13005 ;; This function is called by:
 13006 ;;		_low_isr
 13007 ;;		_FSH_Write_IR_RF
 13008 ;; This function uses a non-reentrant model
 13009 ;;
 13010                           
 13011                           	psect	text81
 13012  001B6C                     __ptext81:
 13013                           	opt stack 0
 13014  001B6C                     _IR_ResetData:
 13015                           	opt stack 15
 13016                           
 13017                           ;IR.c: 111: IR_DataPlace = 0;
 13018                           
 13019                           ;incstack = 0
 13020  001B6C  6A6B               	clrf	_IR_DataPlace,c
 13021                           
 13022                           ;IR.c: 112: IRStarted = 0;
 13023  001B6E  6A69               	clrf	_IRStarted,c
 13024                           
 13025                           ;IR.c: 113: RF_Enable();
 13026  001B70  EFEC  F00C         	goto	_RF_Enable	;wreg free
 13027  001B74                     __end_of_IR_ResetData:
 13028                           	opt stack 0
 13029                           tblptru	equ	0xFF8
 13030                           tblptrh	equ	0xFF7
 13031                           tblptrl	equ	0xFF6
 13032                           tablat	equ	0xFF5
 13033                           prodh	equ	0xFF4
 13034                           prodl	equ	0xFF3
 13035                           intcon	equ	0xFF2
 13036                           intcon2	equ	0xFF1
 13037                           intcon3	equ	0xFF0
 13038                           postinc0	equ	0xFEE
 13039                           wreg	equ	0xFE8
 13040                           postdec1	equ	0xFE5
 13041                           fsr1l	equ	0xFE1
 13042                           bsr	equ	0xFE0
 13043                           postinc2	equ	0xFDE
 13044                           postdec2	equ	0xFDD
 13045                           plusw2	equ	0xFDB
 13046                           fsr2h	equ	0xFDA
 13047                           fsr2l	equ	0xFD9
 13048                           status	equ	0xFD8
 13049                           
 13050 ;; *************** function _RF_Enable *****************
 13051 ;; Defined at:
 13052 ;;		line 101 in file "RF.c"
 13053 ;; Parameters:    Size  Location     Type
 13054 ;;		None
 13055 ;; Auto vars:     Size  Location     Type
 13056 ;;		None
 13057 ;; Return value:  Size  Location     Type
 13058 ;;		None               void
 13059 ;; Registers used:
 13060 ;;		wreg, status,2, cstack
 13061 ;; Tracked objects:
 13062 ;;		On entry : 0/1
 13063 ;;		On exit  : 0/0
 13064 ;;		Unchanged: 0/0
 13065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13066 ;;      Params:         0       0       0       0       0
 13067 ;;      Locals:         0       0       0       0       0
 13068 ;;      Temps:          0       0       0       0       0
 13069 ;;      Totals:         0       0       0       0       0
 13070 ;;Total ram usage:        0 bytes
 13071 ;; Hardware stack levels used:    1
 13072 ;; Hardware stack levels required when called:    7
 13073 ;; This function calls:
 13074 ;;		i1_RF_DataInt
 13075 ;;		i1_TMR_Timer0Int
 13076 ;; This function is called by:
 13077 ;;		_IR_ResetData
 13078 ;; This function uses a non-reentrant model
 13079 ;;
 13080                           
 13081                           	psect	text82
 13082  0019D8                     __ptext82:
 13083                           	opt stack 0
 13084  0019D8                     _RF_Enable:
 13085                           	opt stack 15
 13086                           
 13087                           ;RF.c: 103: INTCON3bits.INT1IF = 0;
 13088                           
 13089                           ;incstack = 0
 13090  0019D8  90F0               	bcf	intcon3,0,c	;volatile
 13091                           
 13092                           ;RF.c: 104: INTCON3bits.INT2IF = 0;
 13093  0019DA  92F0               	bcf	intcon3,1,c	;volatile
 13094                           
 13095                           ;RF.c: 105: INTCONbits.TMR0IF = 0;
 13096  0019DC  94F2               	bcf	intcon,2,c	;volatile
 13097                           
 13098                           ;RF.c: 106: RF_DataInt(1);
 13099  0019DE  0E01               	movlw	1
 13100  0019E0  ECF5  F00C         	call	i1_RF_DataInt
 13101                           
 13102                           ;RF.c: 107: TMR_Timer0Int(1);
 13103  0019E4  0E01               	movlw	1
 13104  0019E6  EF9B  F00D         	goto	i1_TMR_Timer0Int
 13105  0019EA                     __end_of_RF_Enable:
 13106                           	opt stack 0
 13107                           tblptru	equ	0xFF8
 13108                           tblptrh	equ	0xFF7
 13109                           tblptrl	equ	0xFF6
 13110                           tablat	equ	0xFF5
 13111                           prodh	equ	0xFF4
 13112                           prodl	equ	0xFF3
 13113                           intcon	equ	0xFF2
 13114                           intcon2	equ	0xFF1
 13115                           intcon3	equ	0xFF0
 13116                           postinc0	equ	0xFEE
 13117                           wreg	equ	0xFE8
 13118                           postdec1	equ	0xFE5
 13119                           fsr1l	equ	0xFE1
 13120                           bsr	equ	0xFE0
 13121                           postinc2	equ	0xFDE
 13122                           postdec2	equ	0xFDD
 13123                           plusw2	equ	0xFDB
 13124                           fsr2h	equ	0xFDA
 13125                           fsr2l	equ	0xFD9
 13126                           status	equ	0xFD8
 13127                           
 13128 ;; *************** function i1_TMR_Timer0Int *****************
 13129 ;; Defined at:
 13130 ;;		line 332 in file "TIMERS.c"
 13131 ;; Parameters:    Size  Location     Type
 13132 ;;  state           1    wreg     unsigned char 
 13133 ;; Auto vars:     Size  Location     Type
 13134 ;;  state           1    0[COMRAM] unsigned char 
 13135 ;; Return value:  Size  Location     Type
 13136 ;;		None               void
 13137 ;; Registers used:
 13138 ;;		wreg, status,2
 13139 ;; Tracked objects:
 13140 ;;		On entry : 0/0
 13141 ;;		On exit  : 0/0
 13142 ;;		Unchanged: 0/0
 13143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13144 ;;      Params:         0       0       0       0       0
 13145 ;;      Locals:         1       0       0       0       0
 13146 ;;      Temps:          0       0       0       0       0
 13147 ;;      Totals:         1       0       0       0       0
 13148 ;;Total ram usage:        1 bytes
 13149 ;; Hardware stack levels used:    1
 13150 ;; Hardware stack levels required when called:    6
 13151 ;; This function calls:
 13152 ;;		Nothing
 13153 ;; This function is called by:
 13154 ;;		_RF_Disable
 13155 ;;		_RF_Enable
 13156 ;; This function uses a non-reentrant model
 13157 ;;
 13158                           
 13159                           	psect	text83
 13160  001B36                     __ptext83:
 13161                           	opt stack 0
 13162  001B36                     i1_TMR_Timer0Int:
 13163                           	opt stack 16
 13164                           
 13165                           ;incstack = 0
 13166                           ;i1TMR_Timer0Int@state stored from wreg
 13167  001B36  6E01               	movwf	i1TMR_Timer0Int@state,c
 13168                           
 13169                           ;TIMERS.c: 334: if(state)
 13170  001B38  5001               	movf	i1TMR_Timer0Int@state,w,c
 13171  001B3A  E002               	bz	i1l868
 13172                           
 13173                           ;TIMERS.c: 335: {
 13174                           ;TIMERS.c: 337: INTCONbits.TMR0IE = 1;
 13175  001B3C  8AF2               	bsf	intcon,5,c	;volatile
 13176                           
 13177                           ;TIMERS.c: 338: }
 13178  001B3E  0012               	return	
 13179  001B40                     i1l868:
 13180                           
 13181                           ;TIMERS.c: 339: else
 13182                           ;TIMERS.c: 340: {
 13183                           ;TIMERS.c: 342: INTCONbits.TMR0IE = 0;
 13184  001B40  9AF2               	bcf	intcon,5,c	;volatile
 13185  001B42  0012               	return		;funcret
 13186  001B44                     __end_ofi1_TMR_Timer0Int:
 13187                           	opt stack 0
 13188                           tblptru	equ	0xFF8
 13189                           tblptrh	equ	0xFF7
 13190                           tblptrl	equ	0xFF6
 13191                           tablat	equ	0xFF5
 13192                           prodh	equ	0xFF4
 13193                           prodl	equ	0xFF3
 13194                           intcon	equ	0xFF2
 13195                           intcon2	equ	0xFF1
 13196                           intcon3	equ	0xFF0
 13197                           postinc0	equ	0xFEE
 13198                           wreg	equ	0xFE8
 13199                           postdec1	equ	0xFE5
 13200                           fsr1l	equ	0xFE1
 13201                           bsr	equ	0xFE0
 13202                           postinc2	equ	0xFDE
 13203                           postdec2	equ	0xFDD
 13204                           plusw2	equ	0xFDB
 13205                           fsr2h	equ	0xFDA
 13206                           fsr2l	equ	0xFD9
 13207                           status	equ	0xFD8
 13208                           
 13209 ;; *************** function i1_RF_DataInt *****************
 13210 ;; Defined at:
 13211 ;;		line 254 in file "RF.c"
 13212 ;; Parameters:    Size  Location     Type
 13213 ;;  state           1    wreg     unsigned char 
 13214 ;; Auto vars:     Size  Location     Type
 13215 ;;  state           1    0[COMRAM] unsigned char 
 13216 ;; Return value:  Size  Location     Type
 13217 ;;		None               void
 13218 ;; Registers used:
 13219 ;;		wreg, status,2
 13220 ;; Tracked objects:
 13221 ;;		On entry : 0/1
 13222 ;;		On exit  : 0/0
 13223 ;;		Unchanged: 0/0
 13224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13225 ;;      Params:         0       0       0       0       0
 13226 ;;      Locals:         1       0       0       0       0
 13227 ;;      Temps:          0       0       0       0       0
 13228 ;;      Totals:         1       0       0       0       0
 13229 ;;Total ram usage:        1 bytes
 13230 ;; Hardware stack levels used:    1
 13231 ;; Hardware stack levels required when called:    6
 13232 ;; This function calls:
 13233 ;;		Nothing
 13234 ;; This function is called by:
 13235 ;;		_low_isr
 13236 ;;		_RF_Disable
 13237 ;;		_RF_Enable
 13238 ;; This function uses a non-reentrant model
 13239 ;;
 13240                           
 13241                           	psect	text84
 13242  0019EA                     __ptext84:
 13243                           	opt stack 0
 13244  0019EA                     i1_RF_DataInt:
 13245                           	opt stack 17
 13246                           
 13247                           ;incstack = 0
 13248                           ;i1RF_DataInt@state stored from wreg
 13249  0019EA  6E01               	movwf	i1RF_DataInt@state,c
 13250                           
 13251                           ;RF.c: 257: if(state)
 13252  0019EC  5001               	movf	i1RF_DataInt@state,w,c
 13253  0019EE  E003               	bz	i1l464
 13254                           
 13255                           ;RF.c: 258: {
 13256                           ;RF.c: 260: INTCON3bits.INT1E = 1;
 13257  0019F0  86F0               	bsf	intcon3,3,c	;volatile
 13258                           
 13259                           ;RF.c: 261: INTCON3bits.INT2E = 1;
 13260  0019F2  88F0               	bsf	intcon3,4,c	;volatile
 13261                           
 13262                           ;RF.c: 262: }
 13263  0019F4  0012               	return	
 13264  0019F6                     i1l464:
 13265                           
 13266                           ;RF.c: 263: else
 13267                           ;RF.c: 264: {
 13268                           ;RF.c: 266: INTCON3bits.INT1E = 0;
 13269  0019F6  96F0               	bcf	intcon3,3,c	;volatile
 13270                           
 13271                           ;RF.c: 267: INTCON3bits.INT2E = 0;
 13272  0019F8  98F0               	bcf	intcon3,4,c	;volatile
 13273  0019FA  0012               	return		;funcret
 13274  0019FC                     __end_ofi1_RF_DataInt:
 13275                           	opt stack 0
 13276                           tblptru	equ	0xFF8
 13277                           tblptrh	equ	0xFF7
 13278                           tblptrl	equ	0xFF6
 13279                           tablat	equ	0xFF5
 13280                           prodh	equ	0xFF4
 13281                           prodl	equ	0xFF3
 13282                           intcon	equ	0xFF2
 13283                           intcon2	equ	0xFF1
 13284                           intcon3	equ	0xFF0
 13285                           postinc0	equ	0xFEE
 13286                           wreg	equ	0xFE8
 13287                           postdec1	equ	0xFE5
 13288                           fsr1l	equ	0xFE1
 13289                           bsr	equ	0xFE0
 13290                           postinc2	equ	0xFDE
 13291                           postdec2	equ	0xFDD
 13292                           plusw2	equ	0xFDB
 13293                           fsr2h	equ	0xFDA
 13294                           fsr2l	equ	0xFD9
 13295                           status	equ	0xFD8
 13296                           
 13297 ;; *************** function _FSH_WriteIntArray *****************
 13298 ;; Defined at:
 13299 ;;		line 125 in file "FLASH.c"
 13300 ;; Parameters:    Size  Location     Type
 13301 ;;  ConstArray      3    4[COMRAM] PTR const unsigned int 
 13302 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 13303 ;;  Array           2    7[COMRAM] PTR unsigned int 
 13304 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 13305 ;; Auto vars:     Size  Location     Type
 13306 ;;  address         4   12[COMRAM] unsigned long 
 13307 ;;  i               1   11[COMRAM] unsigned char 
 13308 ;; Return value:  Size  Location     Type
 13309 ;;		None               void
 13310 ;; Registers used:
 13311 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13312 ;; Tracked objects:
 13313 ;;		On entry : 0/1
 13314 ;;		On exit  : 0/0
 13315 ;;		Unchanged: 0/0
 13316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13317 ;;      Params:         5       0       0       0       0
 13318 ;;      Locals:         5       0       0       0       0
 13319 ;;      Temps:          2       0       0       0       0
 13320 ;;      Totals:        12       0       0       0       0
 13321 ;;Total ram usage:       12 bytes
 13322 ;; Hardware stack levels used:    1
 13323 ;; Hardware stack levels required when called:    7
 13324 ;; This function calls:
 13325 ;;		_FSH_AddressToBlock
 13326 ;; This function is called by:
 13327 ;;		_FSH_Write_IR_RF
 13328 ;; This function uses a non-reentrant model
 13329 ;;
 13330                           
 13331                           	psect	text85
 13332  000C48                     __ptext85:
 13333                           	opt stack 0
 13334  000C48                     _FSH_WriteIntArray:
 13335                           	opt stack 14
 13336                           
 13337                           ;FLASH.c: 127: unsigned char i;
 13338                           ;FLASH.c: 128: unsigned long address = ConstArray;
 13339                           
 13340                           ;incstack = 0
 13341  000C48  5005               	movf	FSH_WriteIntArray@ConstArray,w,c
 13342  000C4A  6E0D               	movwf	FSH_WriteIntArray@address,c
 13343  000C4C  5006               	movf	FSH_WriteIntArray@ConstArray+1,w,c
 13344  000C4E  6E0E               	movwf	FSH_WriteIntArray@address+1,c
 13345  000C50  5007               	movf	FSH_WriteIntArray@ConstArray+2,w,c
 13346  000C52  6E0F               	movwf	FSH_WriteIntArray@address+2,c
 13347  000C54  6A10               	clrf	FSH_WriteIntArray@address+3,c
 13348                           
 13349                           ;FLASH.c: 131: FSH_AddressToBlock(address);
 13350  000C56  C00D  F001         	movff	FSH_WriteIntArray@address,FSH_AddressToBlock@Address
 13351  000C5A  C00E  F002         	movff	FSH_WriteIntArray@address+1,FSH_AddressToBlock@Address+1
 13352  000C5E  C00F  F003         	movff	FSH_WriteIntArray@address+2,FSH_AddressToBlock@Address+2
 13353  000C62  C010  F004         	movff	FSH_WriteIntArray@address+3,FSH_AddressToBlock@Address+3
 13354  000C66  EC68  F00B         	call	_FSH_AddressToBlock	;wreg free
 13355                           
 13356                           ;FLASH.c: 133: if(address < 0x2400 || address >= 0x2800)
 13357  000C6A  5010               	movf	FSH_WriteIntArray@address+3,w,c
 13358  000C6C  100F               	iorwf	FSH_WriteIntArray@address+2,w,c
 13359  000C6E  E103               	bnz	i1u411_20
 13360  000C70  0E24               	movlw	36
 13361  000C72  5C0E               	subwf	FSH_WriteIntArray@address+1,w,c
 13362  000C74  E306               	bnc	i1l952
 13363  000C76                     i1u411_20:
 13364  000C76  5010               	movf	FSH_WriteIntArray@address+3,w,c
 13365  000C78  100F               	iorwf	FSH_WriteIntArray@address+2,w,c
 13366  000C7A  E103               	bnz	i1u412_20
 13367  000C7C  0E28               	movlw	40
 13368  000C7E  5C0E               	subwf	FSH_WriteIntArray@address+1,w,c
 13369  000C80  E301               	bnc	i1l950
 13370  000C82                     i1u412_20:
 13371  000C82                     i1l952:
 13372  000C82  00FF               	reset		;# 
 13373  000C84                     i1l950:
 13374                           
 13375                           ;FLASH.c: 137: }
 13376                           ;FLASH.c: 139: for(i = 0; i<32; i++)
 13377  000C84  6A0C               	clrf	FSH_WriteIntArray@i,c
 13378  000C86                     i1l4612:
 13379                           
 13380                           ;FLASH.c: 140: {
 13381                           ;FLASH.c: 142: TABLAT = *Array;
 13382  000C86  C008  FFD9         	movff	FSH_WriteIntArray@Array,fsr2l
 13383  000C8A  C009  FFDA         	movff	FSH_WriteIntArray@Array+1,fsr2h
 13384  000C8E  50DF               	movf	indf2,w,c
 13385  000C90  6EF5               	movwf	tablat,c	;volatile
 13386  000C92  000D               	tblwt		*+	;# 
 13387                           
 13388                           ;FLASH.c: 144: TABLAT = *Array >> 8;
 13389  000C94  C008  FFD9         	movff	FSH_WriteIntArray@Array,fsr2l
 13390  000C98  C009  FFDA         	movff	FSH_WriteIntArray@Array+1,fsr2h
 13391  000C9C  CFDE F00A          	movff	postinc2,??_FSH_WriteIntArray
 13392  000CA0  CFDD F00B          	movff	postdec2,??_FSH_WriteIntArray+1
 13393  000CA4  C00B  F00A         	movff	??_FSH_WriteIntArray+1,??_FSH_WriteIntArray
 13394  000CA8  6A0B               	clrf	??_FSH_WriteIntArray+1,c
 13395  000CAA  500A               	movf	??_FSH_WriteIntArray,w,c
 13396  000CAC  6EF5               	movwf	tablat,c	;volatile
 13397  000CAE  000D               	tblwt		*+	;# 
 13398                           
 13399                           ;FLASH.c: 146: Array++;
 13400  000CB0  0E02               	movlw	2
 13401  000CB2  2608               	addwf	FSH_WriteIntArray@Array,f,c
 13402  000CB4  0E00               	movlw	0
 13403  000CB6  2209               	addwfc	FSH_WriteIntArray@Array+1,f,c
 13404  000CB8  2A0C               	incf	FSH_WriteIntArray@i,f,c
 13405  000CBA  0E1F               	movlw	31
 13406  000CBC  640C               	cpfsgt	FSH_WriteIntArray@i,c
 13407  000CBE  D7E3               	goto	i1l4612
 13408                           
 13409                           ;FLASH.c: 147: }
 13410                           ;FLASH.c: 150: FSH_AddressToBlock(address);
 13411  000CC0  C00D  F001         	movff	FSH_WriteIntArray@address,FSH_AddressToBlock@Address
 13412  000CC4  C00E  F002         	movff	FSH_WriteIntArray@address+1,FSH_AddressToBlock@Address+1
 13413  000CC8  C00F  F003         	movff	FSH_WriteIntArray@address+2,FSH_AddressToBlock@Address+2
 13414  000CCC  C010  F004         	movff	FSH_WriteIntArray@address+3,FSH_AddressToBlock@Address+3
 13415  000CD0  EC68  F00B         	call	_FSH_AddressToBlock	;wreg free
 13416                           
 13417                           ;FLASH.c: 152: EECON1bits.WRERR = 0;
 13418  000CD4  96A6               	bcf	4006,3,c	;volatile
 13419                           
 13420                           ;FLASH.c: 153: EECON1bits.FREE = 0;
 13421  000CD6  98A6               	bcf	4006,4,c	;volatile
 13422  000CD8  84A6               	bsf	4006,2,c	;# 
 13423  000CDA  9EF2               	bcf	intcon,7,c	;# 
 13424  000CDC  0E55               	movlw	85	;# 
 13425  000CDE  6EA7               	movwf	4007,c	;# 
 13426  000CE0  0EAA               	movlw	170	;# 
 13427  000CE2  6EA7               	movwf	4007,c	;# 
 13428  000CE4  82A6               	bsf	4006,1,c	;# 
 13429  000CE6  0CAA               	retlw	170	;funcret
 13430  000CE8                     __end_of_FSH_WriteIntArray:
 13431                           	opt stack 0
 13432                           tblptru	equ	0xFF8
 13433                           tblptrh	equ	0xFF7
 13434                           tblptrl	equ	0xFF6
 13435                           tablat	equ	0xFF5
 13436                           prodh	equ	0xFF4
 13437                           prodl	equ	0xFF3
 13438                           intcon	equ	0xFF2
 13439                           intcon2	equ	0xFF1
 13440                           intcon3	equ	0xFF0
 13441                           postinc0	equ	0xFEE
 13442                           wreg	equ	0xFE8
 13443                           postdec1	equ	0xFE5
 13444                           fsr1l	equ	0xFE1
 13445                           bsr	equ	0xFE0
 13446                           indf2	equ	0xFDF
 13447                           postinc2	equ	0xFDE
 13448                           postdec2	equ	0xFDD
 13449                           plusw2	equ	0xFDB
 13450                           fsr2h	equ	0xFDA
 13451                           fsr2l	equ	0xFD9
 13452                           status	equ	0xFD8
 13453                           
 13454 ;; *************** function _FSH_VerifyWriteIntArray *****************
 13455 ;; Defined at:
 13456 ;;		line 169 in file "FLASH.c"
 13457 ;; Parameters:    Size  Location     Type
 13458 ;;  ConstArray      3    0[COMRAM] PTR const unsigned int 
 13459 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 13460 ;;  Array           2    3[COMRAM] PTR unsigned int 
 13461 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 13462 ;; Auto vars:     Size  Location     Type
 13463 ;;  data            2    8[COMRAM] unsigned int 
 13464 ;;  i               1   11[COMRAM] unsigned char 
 13465 ;;  failcount       1   10[COMRAM] unsigned char 
 13466 ;; Return value:  Size  Location     Type
 13467 ;;                  1    wreg      unsigned char 
 13468 ;; Registers used:
 13469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 13470 ;; Tracked objects:
 13471 ;;		On entry : 0/1
 13472 ;;		On exit  : 0/0
 13473 ;;		Unchanged: 0/0
 13474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13475 ;;      Params:         5       0       0       0       0
 13476 ;;      Locals:         4       0       0       0       0
 13477 ;;      Temps:          3       0       0       0       0
 13478 ;;      Totals:        12       0       0       0       0
 13479 ;;Total ram usage:       12 bytes
 13480 ;; Hardware stack levels used:    1
 13481 ;; Hardware stack levels required when called:    6
 13482 ;; This function calls:
 13483 ;;		Nothing
 13484 ;; This function is called by:
 13485 ;;		_FSH_Write_IR_RF
 13486 ;; This function uses a non-reentrant model
 13487 ;;
 13488                           
 13489                           	psect	text86
 13490  0011B8                     __ptext86:
 13491                           	opt stack 0
 13492  0011B8                     _FSH_VerifyWriteIntArray:
 13493                           	opt stack 15
 13494                           
 13495                           ;FLASH.c: 171: unsigned char i;
 13496                           ;FLASH.c: 172: unsigned int data;
 13497                           ;FLASH.c: 173: unsigned char failcount = 0;
 13498                           
 13499                           ;incstack = 0
 13500  0011B8  6A0B               	clrf	FSH_VerifyWriteIntArray@failcount,c
 13501                           
 13502                           ;FLASH.c: 175: for(i = 0; i<32; i++)
 13503  0011BA  6A0C               	clrf	FSH_VerifyWriteIntArray@i,c
 13504  0011BC                     i1l4632:
 13505                           
 13506                           ;FLASH.c: 176: {
 13507                           ;FLASH.c: 177: data = ConstArray[i];
 13508  0011BC  500C               	movf	FSH_VerifyWriteIntArray@i,w,c
 13509  0011BE  0D02               	mullw	2
 13510  0011C0  50F3               	movf	prodl,w,c
 13511  0011C2  2401               	addwf	FSH_VerifyWriteIntArray@ConstArray,w,c
 13512  0011C4  6E06               	movwf	??_FSH_VerifyWriteIntArray& (0+255),c
 13513  0011C6  50F4               	movf	prodh,w,c
 13514  0011C8  2002               	addwfc	FSH_VerifyWriteIntArray@ConstArray+1,w,c
 13515  0011CA  6E07               	movwf	(??_FSH_VerifyWriteIntArray+1)& (0+255),c
 13516  0011CC  0E00               	movlw	0
 13517  0011CE  2003               	addwfc	FSH_VerifyWriteIntArray@ConstArray+2,w,c
 13518  0011D0  6E08               	movwf	(??_FSH_VerifyWriteIntArray+2)& (0+255),c
 13519  0011D2  C006  FFF6         	movff	??_FSH_VerifyWriteIntArray,tblptrl
 13520  0011D6  C007  FFF7         	movff	??_FSH_VerifyWriteIntArray+1,tblptrh
 13521  0011DA  C008  FFF8         	movff	??_FSH_VerifyWriteIntArray+2,tblptru
 13522  0011DE  0009               	tblrd		*+
 13523  0011E0  CFF5 F009          	movff	tablat,FSH_VerifyWriteIntArray@data
 13524  0011E4  000A               	tblrd		*-
 13525  0011E6  CFF5 F00A          	movff	tablat,FSH_VerifyWriteIntArray@data+1
 13526                           
 13527                           ;FLASH.c: 178: if(data != Array[i])
 13528  0011EA  500C               	movf	FSH_VerifyWriteIntArray@i,w,c
 13529  0011EC  0D02               	mullw	2
 13530  0011EE  50F3               	movf	prodl,w,c
 13531  0011F0  2404               	addwf	FSH_VerifyWriteIntArray@Array,w,c
 13532  0011F2  6ED9               	movwf	fsr2l,c
 13533  0011F4  50F4               	movf	prodh,w,c
 13534  0011F6  2005               	addwfc	FSH_VerifyWriteIntArray@Array+1,w,c
 13535  0011F8  6EDA               	movwf	fsr2h,c
 13536  0011FA  5009               	movf	FSH_VerifyWriteIntArray@data,w,c
 13537  0011FC  18DE               	xorwf	postinc2,w,c
 13538  0011FE  E103               	bnz	i1u414_20
 13539  001200  500A               	movf	FSH_VerifyWriteIntArray@data+1,w,c
 13540  001202  18DE               	xorwf	postinc2,w,c
 13541  001204  E001               	bz	i1l960
 13542  001206                     i1u414_20:
 13543                           
 13544                           ;FLASH.c: 179: {
 13545                           ;FLASH.c: 180: failcount++;
 13546  001206  2A0B               	incf	FSH_VerifyWriteIntArray@failcount,f,c
 13547  001208                     i1l960:
 13548  001208  2A0C               	incf	FSH_VerifyWriteIntArray@i,f,c
 13549  00120A  0E1F               	movlw	31
 13550  00120C  640C               	cpfsgt	FSH_VerifyWriteIntArray@i,c
 13551  00120E  D7D6               	goto	i1l4632
 13552                           
 13553                           ;FLASH.c: 181: }
 13554                           ;FLASH.c: 182: }
 13555                           ;FLASH.c: 183: if(failcount)
 13556  001210  500B               	movf	FSH_VerifyWriteIntArray@failcount,w,c
 13557  001212  E001               	bz	i1l4646
 13558                           
 13559                           ;FLASH.c: 184: {
 13560                           ;FLASH.c: 185: return 0;
 13561  001214  0C00               	retlw	0
 13562  001216                     i1l4646:
 13563                           
 13564                           ;FLASH.c: 186: }
 13565                           ;FLASH.c: 187: return 1;
 13566  001216  0C01               	retlw	1	;funcret
 13567  001218                     __end_of_FSH_VerifyWriteIntArray:
 13568                           	opt stack 0
 13569                           tblptru	equ	0xFF8
 13570                           tblptrh	equ	0xFF7
 13571                           tblptrl	equ	0xFF6
 13572                           tablat	equ	0xFF5
 13573                           prodh	equ	0xFF4
 13574                           prodl	equ	0xFF3
 13575                           intcon	equ	0xFF2
 13576                           intcon2	equ	0xFF1
 13577                           intcon3	equ	0xFF0
 13578                           postinc0	equ	0xFEE
 13579                           wreg	equ	0xFE8
 13580                           postdec1	equ	0xFE5
 13581                           fsr1l	equ	0xFE1
 13582                           bsr	equ	0xFE0
 13583                           indf2	equ	0xFDF
 13584                           postinc2	equ	0xFDE
 13585                           postdec2	equ	0xFDD
 13586                           plusw2	equ	0xFDB
 13587                           fsr2h	equ	0xFDA
 13588                           fsr2l	equ	0xFD9
 13589                           status	equ	0xFD8
 13590                           
 13591 ;; *************** function _FSH_EraseBlock *****************
 13592 ;; Defined at:
 13593 ;;		line 72 in file "FLASH.c"
 13594 ;; Parameters:    Size  Location     Type
 13595 ;;  Address         4    4[COMRAM] unsigned long 
 13596 ;; Auto vars:     Size  Location     Type
 13597 ;;  WriteTries      1   10[COMRAM] unsigned char 
 13598 ;;  lowint          1    9[COMRAM] unsigned char 
 13599 ;;  highint         1    8[COMRAM] unsigned char 
 13600 ;; Return value:  Size  Location     Type
 13601 ;;		None               void
 13602 ;; Registers used:
 13603 ;;		wreg, status,2, status,0, cstack
 13604 ;; Tracked objects:
 13605 ;;		On entry : 0/0
 13606 ;;		On exit  : 0/0
 13607 ;;		Unchanged: 0/0
 13608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13609 ;;      Params:         4       0       0       0       0
 13610 ;;      Locals:         3       0       0       0       0
 13611 ;;      Temps:          0       0       0       0       0
 13612 ;;      Totals:         7       0       0       0       0
 13613 ;;Total ram usage:        7 bytes
 13614 ;; Hardware stack levels used:    1
 13615 ;; Hardware stack levels required when called:    7
 13616 ;; This function calls:
 13617 ;;		_FSH_AddressToBlock
 13618 ;; This function is called by:
 13619 ;;		_FSH_Write_IR_RF
 13620 ;; This function uses a non-reentrant model
 13621 ;;
 13622                           
 13623                           	psect	text87
 13624  001146                     __ptext87:
 13625                           	opt stack 0
 13626  001146                     _FSH_EraseBlock:
 13627                           	opt stack 14
 13628                           
 13629                           ;FLASH.c: 74: unsigned char highint = INTCONbits.GIE;
 13630                           
 13631                           ;incstack = 0
 13632  001146  0E00               	movlw	0
 13633  001148  BEF2               	btfsc	intcon,7,c	;volatile
 13634  00114A  0E01               	movlw	1
 13635  00114C  6E09               	movwf	FSH_EraseBlock@highint,c
 13636                           
 13637                           ;FLASH.c: 75: unsigned char lowint = INTCONbits.PEIE;
 13638  00114E  0E00               	movlw	0
 13639  001150  BCF2               	btfsc	intcon,6,c	;volatile
 13640  001152  0E01               	movlw	1
 13641  001154  6E0A               	movwf	FSH_EraseBlock@lowint,c
 13642                           
 13643                           ;FLASH.c: 76: unsigned char WriteTries;
 13644                           ;FLASH.c: 78: if(Address < 0x2400 || Address >= 0x2800)
 13645  001156  5008               	movf	FSH_EraseBlock@Address+3,w,c
 13646  001158  1007               	iorwf	FSH_EraseBlock@Address+2,w,c
 13647  00115A  E103               	bnz	i1u405_20
 13648  00115C  0E24               	movlw	36
 13649  00115E  5C06               	subwf	FSH_EraseBlock@Address+1,w,c
 13650  001160  E306               	bnc	i1l941
 13651  001162                     i1u405_20:
 13652  001162  5008               	movf	FSH_EraseBlock@Address+3,w,c
 13653  001164  1007               	iorwf	FSH_EraseBlock@Address+2,w,c
 13654  001166  E103               	bnz	i1u406_20
 13655  001168  0E28               	movlw	40
 13656  00116A  5C06               	subwf	FSH_EraseBlock@Address+1,w,c
 13657  00116C  E301               	bnc	i1l939
 13658  00116E                     i1u406_20:
 13659  00116E                     i1l941:
 13660  00116E  00FF               	reset		;# 
 13661  001170                     i1l939:
 13662                           
 13663                           ;FLASH.c: 82: }
 13664                           ;FLASH.c: 84: INTCONbits.GIE = 0;
 13665  001170  9EF2               	bcf	intcon,7,c	;volatile
 13666                           
 13667                           ;FLASH.c: 85: INTCONbits.PEIE = 0;
 13668  001172  9CF2               	bcf	intcon,6,c	;volatile
 13669  001174                     i1l4580:
 13670                           
 13671                           ;FLASH.c: 88: FSH_AddressToBlock(Address);
 13672  001174  C005  F001         	movff	FSH_EraseBlock@Address,FSH_AddressToBlock@Address
 13673  001178  C006  F002         	movff	FSH_EraseBlock@Address+1,FSH_AddressToBlock@Address+1
 13674  00117C  C007  F003         	movff	FSH_EraseBlock@Address+2,FSH_AddressToBlock@Address+2
 13675  001180  C008  F004         	movff	FSH_EraseBlock@Address+3,FSH_AddressToBlock@Address+3
 13676  001184  EC68  F00B         	call	_FSH_AddressToBlock	;wreg free
 13677                           
 13678                           ;FLASH.c: 90: WriteTries = 1;
 13679  001188  0E01               	movlw	1
 13680  00118A  6E0B               	movwf	FSH_EraseBlock@WriteTries,c
 13681  00118C  84A6               	bsf	4006,2,c	;# 
 13682  00118E  88A6               	bsf	4006,4,c	;# 
 13683  001190  9EF2               	bcf	intcon,7,c	;# 
 13684  001192  0E55               	movlw	85	;# 
 13685  001194  6EA7               	movwf	4007,c	;# 
 13686  001196  0EAA               	movlw	170	;# 
 13687  001198  6EA7               	movwf	4007,c	;# 
 13688  00119A  82A6               	bsf	4006,1,c	;# 
 13689                           
 13690                           ;FLASH.c: 101: if(EECON1bits.WRERR)
 13691  00119C  A6A6               	btfss	4006,3,c	;volatile
 13692  00119E  D005               	goto	i1l4592
 13693                           
 13694                           ;FLASH.c: 102: {
 13695                           ;FLASH.c: 103: WriteTries++;
 13696  0011A0  2A0B               	incf	FSH_EraseBlock@WriteTries,f,c
 13697                           
 13698                           ;FLASH.c: 104: if(WriteTries < 10)
 13699  0011A2  0E0A               	movlw	10
 13700  0011A4  600B               	cpfslt	FSH_EraseBlock@WriteTries,c
 13701  0011A6  D001               	goto	i1l4592
 13702  0011A8  D7E5               	goto	i1l4580
 13703  0011AA                     i1l4592:
 13704                           
 13705                           ;FLASH.c: 107: }
 13706                           ;FLASH.c: 108: }
 13707                           ;FLASH.c: 110: if(highint)
 13708  0011AA  5009               	movf	FSH_EraseBlock@highint,w,c
 13709  0011AC  E001               	bz	i1l4596
 13710                           
 13711                           ;FLASH.c: 111: {
 13712                           ;FLASH.c: 112: INTCONbits.GIE = 1;
 13713  0011AE  8EF2               	bsf	intcon,7,c	;volatile
 13714  0011B0                     i1l4596:
 13715                           
 13716                           ;FLASH.c: 113: }
 13717                           ;FLASH.c: 114: if(lowint)
 13718  0011B0  500A               	movf	FSH_EraseBlock@lowint,w,c
 13719  0011B2  A4D8               	btfss	status,2,c
 13720                           
 13721                           ;FLASH.c: 115: {
 13722                           ;FLASH.c: 116: INTCONbits.PEIE = 1;
 13723  0011B4  8CF2               	bsf	intcon,6,c	;volatile
 13724  0011B6  0012               	return		;funcret
 13725  0011B8                     __end_of_FSH_EraseBlock:
 13726                           	opt stack 0
 13727                           tblptru	equ	0xFF8
 13728                           tblptrh	equ	0xFF7
 13729                           tblptrl	equ	0xFF6
 13730                           tablat	equ	0xFF5
 13731                           prodh	equ	0xFF4
 13732                           prodl	equ	0xFF3
 13733                           intcon	equ	0xFF2
 13734                           intcon2	equ	0xFF1
 13735                           intcon3	equ	0xFF0
 13736                           postinc0	equ	0xFEE
 13737                           wreg	equ	0xFE8
 13738                           postdec1	equ	0xFE5
 13739                           fsr1l	equ	0xFE1
 13740                           bsr	equ	0xFE0
 13741                           indf2	equ	0xFDF
 13742                           postinc2	equ	0xFDE
 13743                           postdec2	equ	0xFDD
 13744                           plusw2	equ	0xFDB
 13745                           fsr2h	equ	0xFDA
 13746                           fsr2l	equ	0xFD9
 13747                           status	equ	0xFD8
 13748                           
 13749 ;; *************** function _FSH_AddressToBlock *****************
 13750 ;; Defined at:
 13751 ;;		line 536 in file "FLASH.c"
 13752 ;; Parameters:    Size  Location     Type
 13753 ;;  Address         4    0[COMRAM] unsigned long 
 13754 ;; Auto vars:     Size  Location     Type
 13755 ;;		None
 13756 ;; Return value:  Size  Location     Type
 13757 ;;		None               void
 13758 ;; Registers used:
 13759 ;;		wreg, status,2, status,0
 13760 ;; Tracked objects:
 13761 ;;		On entry : 0/1
 13762 ;;		On exit  : 0/0
 13763 ;;		Unchanged: 0/0
 13764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13765 ;;      Params:         4       0       0       0       0
 13766 ;;      Locals:         0       0       0       0       0
 13767 ;;      Temps:          0       0       0       0       0
 13768 ;;      Totals:         4       0       0       0       0
 13769 ;;Total ram usage:        4 bytes
 13770 ;; Hardware stack levels used:    1
 13771 ;; Hardware stack levels required when called:    6
 13772 ;; This function calls:
 13773 ;;		Nothing
 13774 ;; This function is called by:
 13775 ;;		_FSH_EraseBlock
 13776 ;;		_FSH_WriteIntArray
 13777 ;;		_FSH_Write_IR_RF
 13778 ;; This function uses a non-reentrant model
 13779 ;;
 13780                           
 13781                           	psect	text88
 13782  0016D0                     __ptext88:
 13783                           	opt stack 0
 13784  0016D0                     _FSH_AddressToBlock:
 13785                           	opt stack 14
 13786                           
 13787                           ;FLASH.c: 538: if(Address > 0x3600)
 13788                           
 13789                           ;incstack = 0
 13790  0016D0  5004               	movf	FSH_AddressToBlock@Address+3,w,c
 13791  0016D2  1003               	iorwf	FSH_AddressToBlock@Address+2,w,c
 13792  0016D4  E104               	bnz	i1u369_20
 13793  0016D6  0401               	decf	FSH_AddressToBlock@Address,w,c
 13794  0016D8  0E36               	movlw	54
 13795  0016DA  5802               	subwfb	FSH_AddressToBlock@Address+1,w,c
 13796  0016DC  E305               	bnc	i1l4326
 13797  0016DE                     i1u369_20:
 13798                           
 13799                           ;FLASH.c: 539: {
 13800                           ;FLASH.c: 540: Address = 0x3600;
 13801  0016DE  6A01               	clrf	FSH_AddressToBlock@Address,c
 13802  0016E0  0E36               	movlw	54
 13803  0016E2  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 13804  0016E4  6A03               	clrf	FSH_AddressToBlock@Address+2,c
 13805  0016E6  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 13806  0016E8                     i1l4326:
 13807                           
 13808                           ;FLASH.c: 541: }
 13809                           ;FLASH.c: 542: TBLPTRU = (Address & 0x002F0000) >> 16;
 13810  0016E8  5003               	movf	FSH_AddressToBlock@Address+2,w,c
 13811  0016EA  0B2F               	andlw	47
 13812  0016EC  6EF8               	movwf	tblptru,c	;volatile
 13813                           
 13814                           ;FLASH.c: 543: TBLPTRH = (Address & 0x0000FF00) >> 8;
 13815  0016EE  C002  FFF7         	movff	FSH_AddressToBlock@Address+1,tblptrh	;volatile
 13816                           
 13817                           ;FLASH.c: 544: TBLPTRL = (Address & 0x000000FF);
 13818  0016F2  C001  FFF6         	movff	FSH_AddressToBlock@Address,tblptrl	;volatile
 13819  0016F6  0012               	return		;funcret
 13820  0016F8                     __end_of_FSH_AddressToBlock:
 13821                           	opt stack 0
 13822                           tblptru	equ	0xFF8
 13823                           tblptrh	equ	0xFF7
 13824                           tblptrl	equ	0xFF6
 13825                           tablat	equ	0xFF5
 13826                           prodh	equ	0xFF4
 13827                           prodl	equ	0xFF3
 13828                           intcon	equ	0xFF2
 13829                           intcon2	equ	0xFF1
 13830                           intcon3	equ	0xFF0
 13831                           postinc0	equ	0xFEE
 13832                           wreg	equ	0xFE8
 13833                           postdec1	equ	0xFE5
 13834                           fsr1l	equ	0xFE1
 13835                           bsr	equ	0xFE0
 13836                           indf2	equ	0xFDF
 13837                           postinc2	equ	0xFDE
 13838                           postdec2	equ	0xFDD
 13839                           plusw2	equ	0xFDB
 13840                           fsr2h	equ	0xFDA
 13841                           fsr2l	equ	0xFD9
 13842                           status	equ	0xFD8
 13843                           
 13844 ;; *************** function _ADC_CalculateVoltage *****************
 13845 ;; Defined at:
 13846 ;;		line 79 in file "ADC.c"
 13847 ;; Parameters:    Size  Location     Type
 13848 ;;		None
 13849 ;; Auto vars:     Size  Location     Type
 13850 ;;  Voltage         3   40[COMRAM] unsigned long 
 13851 ;;  ADCcounts       2   43[COMRAM] unsigned int 
 13852 ;; Return value:  Size  Location     Type
 13853 ;;		None               void
 13854 ;; Registers used:
 13855 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 13856 ;; Tracked objects:
 13857 ;;		On entry : 0/0
 13858 ;;		On exit  : 0/0
 13859 ;;		Unchanged: 0/0
 13860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13861 ;;      Params:         0       0       0       0       0
 13862 ;;      Locals:         5       0       0       0       0
 13863 ;;      Temps:          0       0       0       0       0
 13864 ;;      Totals:         5       0       0       0       0
 13865 ;;Total ram usage:        5 bytes
 13866 ;; Hardware stack levels used:    1
 13867 ;; Hardware stack levels required when called:    8
 13868 ;; This function calls:
 13869 ;;		___ftdiv
 13870 ;;		i1_ADC_ChangeChannel
 13871 ;;		i1___ftmul
 13872 ;;		i1___lwtoft
 13873 ;; This function is called by:
 13874 ;;		_low_isr
 13875 ;; This function uses a non-reentrant model
 13876 ;;
 13877                           
 13878                           	psect	text89
 13879  000AEE                     __ptext89:
 13880                           	opt stack 0
 13881  000AEE                     _ADC_CalculateVoltage:
 13882                           	opt stack 15
 13883                           
 13884                           ;ADC.c: 81: unsigned int ADCcounts = 0;
 13885                           
 13886                           ;incstack = 0
 13887  000AEE  6A2C               	clrf	ADC_CalculateVoltage@ADCcounts,c
 13888  000AF0  6A2D               	clrf	ADC_CalculateVoltage@ADCcounts+1,c
 13889                           
 13890                           ;ADC.c: 82: double Voltage;
 13891                           ;ADC.c: 84: ADCcounts = ADRESH;
 13892  000AF2  CFC4 F02C          	movff	4036,ADC_CalculateVoltage@ADCcounts	;volatile
 13893  000AF6  6A2D               	clrf	ADC_CalculateVoltage@ADCcounts+1,c
 13894                           
 13895                           ;ADC.c: 85: ADCcounts <<= 8;
 13896  000AF8  502C               	movf	ADC_CalculateVoltage@ADCcounts,w,c
 13897  000AFA  6E2D               	movwf	ADC_CalculateVoltage@ADCcounts+1,c
 13898  000AFC  6A2C               	clrf	ADC_CalculateVoltage@ADCcounts,c
 13899                           
 13900                           ;ADC.c: 86: ADCcounts += ADRESL;
 13901  000AFE  50C3               	movf	4035,w,c	;volatile
 13902  000B00  262C               	addwf	ADC_CalculateVoltage@ADCcounts,f,c
 13903  000B02  0E00               	movlw	0
 13904  000B04  222D               	addwfc	ADC_CalculateVoltage@ADCcounts+1,f,c
 13905                           
 13906                           ;ADC.c: 88: Voltage = ((double)ADCcounts / (1 << 10)) * 3.3;
 13907  000B06  6A0F               	clrf	___ftdiv@f2,c
 13908  000B08  0E80               	movlw	128
 13909  000B0A  6E10               	movwf	___ftdiv@f2+1,c
 13910  000B0C  0E44               	movlw	68
 13911  000B0E  6E11               	movwf	___ftdiv@f2+2,c
 13912  000B10  C02C  F009         	movff	ADC_CalculateVoltage@ADCcounts,i1___lwtoft@c
 13913  000B14  C02D  F00A         	movff	ADC_CalculateVoltage@ADCcounts+1,i1___lwtoft@c+1
 13914  000B18  ECB4  F00B         	call	i1___lwtoft	;wreg free
 13915  000B1C  C009  F00C         	movff	?i1___lwtoft,___ftdiv@f1
 13916  000B20  C00A  F00D         	movff	?i1___lwtoft+1,___ftdiv@f1+1
 13917  000B24  C00B  F00E         	movff	?i1___lwtoft+2,___ftdiv@f1+2
 13918  000B28  EC61  F004         	call	___ftdiv	;wreg free
 13919  000B2C  C00C  F01B         	movff	?___ftdiv,i1___ftmul@f1
 13920  000B30  C00D  F01C         	movff	?___ftdiv+1,i1___ftmul@f1+1
 13921  000B34  C00E  F01D         	movff	?___ftdiv+2,i1___ftmul@f1+2
 13922  000B38  0E33               	movlw	51
 13923  000B3A  6E1E               	movwf	i1___ftmul@f2,c
 13924  000B3C  0E53               	movlw	83
 13925  000B3E  6E1F               	movwf	i1___ftmul@f2+1,c
 13926  000B40  0E40               	movlw	64
 13927  000B42  6E20               	movwf	i1___ftmul@f2+2,c
 13928  000B44  EC23  F003         	call	i1___ftmul	;wreg free
 13929  000B48  C01B  F029         	movff	?i1___ftmul,ADC_CalculateVoltage@Voltage
 13930  000B4C  C01C  F02A         	movff	?i1___ftmul+1,ADC_CalculateVoltage@Voltage+1
 13931  000B50  C01D  F02B         	movff	?i1___ftmul+2,ADC_CalculateVoltage@Voltage+2
 13932                           
 13933                           ;ADC.c: 89: if(ADC_CurrentSource == 10)
 13934  000B54  0E0A               	movlw	10
 13935  000B56  186D               	xorwf	_ADC_CurrentSource,w,c
 13936  000B58  E122               	bnz	i1l6212
 13937                           
 13938                           ;ADC.c: 90: {
 13939                           ;ADC.c: 91: Rail_VIN = Voltage * (200000.0 + 500000.0) / 200000.0;
 13940  000B5A  0EE6               	movlw	230
 13941  000B5C  6E1E               	movwf	i1___ftmul@f2,c
 13942  000B5E  0E2A               	movlw	42
 13943  000B60  6E1F               	movwf	i1___ftmul@f2+1,c
 13944  000B62  0E49               	movlw	73
 13945  000B64  6E20               	movwf	i1___ftmul@f2+2,c
 13946  000B66  C029  F01B         	movff	ADC_CalculateVoltage@Voltage,i1___ftmul@f1
 13947  000B6A  C02A  F01C         	movff	ADC_CalculateVoltage@Voltage+1,i1___ftmul@f1+1
 13948  000B6E  C02B  F01D         	movff	ADC_CalculateVoltage@Voltage+2,i1___ftmul@f1+2
 13949  000B72  EC23  F003         	call	i1___ftmul	;wreg free
 13950  000B76  C01B  F00C         	movff	?i1___ftmul,___ftdiv@f1
 13951  000B7A  C01C  F00D         	movff	?i1___ftmul+1,___ftdiv@f1+1
 13952  000B7E  C01D  F00E         	movff	?i1___ftmul+2,___ftdiv@f1+2
 13953  000B82  0E50               	movlw	80
 13954  000B84  6E0F               	movwf	___ftdiv@f2,c
 13955  000B86  0E43               	movlw	67
 13956  000B88  6E10               	movwf	___ftdiv@f2+1,c
 13957  000B8A  0E48               	movlw	72
 13958  000B8C  6E11               	movwf	___ftdiv@f2+2,c
 13959  000B8E  EC61  F004         	call	___ftdiv	;wreg free
 13960  000B92  C00C  F1A9         	movff	?___ftdiv,_Rail_VIN
 13961  000B96  C00D  F1AA         	movff	?___ftdiv+1,_Rail_VIN+1
 13962  000B9A  C00E  F1AB         	movff	?___ftdiv+2,_Rail_VIN+2
 13963  000B9E                     i1l6212:
 13964                           
 13965                           ;ADC.c: 92: __nop();
 13966  000B9E  F000               	nop	
 13967                           
 13968                           ;ADC.c: 98: }
 13969                           ;ADC.c: 99: ADC_ChangeChannel();
 13970                           
 13971                           ;ADC.c: 93: }
 13972  000BA0  EF7A  F00C         	goto	i1_ADC_ChangeChannel	;wreg free
 13973  000BA4                     __end_of_ADC_CalculateVoltage:
 13974                           	opt stack 0
 13975                           tblptru	equ	0xFF8
 13976                           tblptrh	equ	0xFF7
 13977                           tblptrl	equ	0xFF6
 13978                           tablat	equ	0xFF5
 13979                           prodh	equ	0xFF4
 13980                           prodl	equ	0xFF3
 13981                           intcon	equ	0xFF2
 13982                           intcon2	equ	0xFF1
 13983                           intcon3	equ	0xFF0
 13984                           postinc0	equ	0xFEE
 13985                           wreg	equ	0xFE8
 13986                           postdec1	equ	0xFE5
 13987                           fsr1l	equ	0xFE1
 13988                           bsr	equ	0xFE0
 13989                           indf2	equ	0xFDF
 13990                           postinc2	equ	0xFDE
 13991                           postdec2	equ	0xFDD
 13992                           plusw2	equ	0xFDB
 13993                           fsr2h	equ	0xFDA
 13994                           fsr2l	equ	0xFD9
 13995                           status	equ	0xFD8
 13996                           
 13997 ;; *************** function i1___lwtoft *****************
 13998 ;; Defined at:
 13999 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
 14000 ;; Parameters:    Size  Location     Type
 14001 ;;  c               2    8[COMRAM] unsigned int 
 14002 ;; Auto vars:     Size  Location     Type
 14003 ;;		None
 14004 ;; Return value:  Size  Location     Type
 14005 ;;                  3    8[COMRAM] float 
 14006 ;; Registers used:
 14007 ;;		wreg, status,2, status,0, cstack
 14008 ;; Tracked objects:
 14009 ;;		On entry : 0/1
 14010 ;;		On exit  : 0/0
 14011 ;;		Unchanged: 0/0
 14012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14013 ;;      Params:         3       0       0       0       0
 14014 ;;      Locals:         0       0       0       0       0
 14015 ;;      Temps:          0       0       0       0       0
 14016 ;;      Totals:         3       0       0       0       0
 14017 ;;Total ram usage:        3 bytes
 14018 ;; Hardware stack levels used:    1
 14019 ;; Hardware stack levels required when called:    7
 14020 ;; This function calls:
 14021 ;;		i1___ftpack
 14022 ;; This function is called by:
 14023 ;;		_IR_CheckCode
 14024 ;;		_ADC_CalculateVoltage
 14025 ;;		i1_IR_LoadCode
 14026 ;; This function uses a non-reentrant model
 14027 ;;
 14028                           
 14029                           	psect	text90
 14030  001768                     __ptext90:
 14031                           	opt stack 0
 14032  001768                     i1___lwtoft:
 14033                           	opt stack 15
 14034                           
 14035                           ;incstack = 0
 14036  001768  C009  F001         	movff	i1___lwtoft@c,i1___ftpack@arg
 14037  00176C  C00A  F002         	movff	i1___lwtoft@c+1,i1___ftpack@arg+1
 14038  001770  6A03               	clrf	i1___ftpack@arg+2,c
 14039  001772  0E8E               	movlw	142
 14040  001774  6E04               	movwf	i1___ftpack@exp,c
 14041  001776  0E00               	movlw	0
 14042  001778  6E05               	movwf	i1___ftpack@sign,c
 14043  00177A  ECA0  F007         	call	i1___ftpack	;wreg free
 14044  00177E  C001  F009         	movff	?i1___ftpack,?i1___lwtoft
 14045  001782  C002  F00A         	movff	?i1___ftpack+1,?i1___lwtoft+1
 14046  001786  C003  F00B         	movff	?i1___ftpack+2,?i1___lwtoft+2
 14047  00178A  0012               	return		;funcret
 14048  00178C                     __end_ofi1___lwtoft:
 14049                           	opt stack 0
 14050                           tblptru	equ	0xFF8
 14051                           tblptrh	equ	0xFF7
 14052                           tblptrl	equ	0xFF6
 14053                           tablat	equ	0xFF5
 14054                           prodh	equ	0xFF4
 14055                           prodl	equ	0xFF3
 14056                           intcon	equ	0xFF2
 14057                           intcon2	equ	0xFF1
 14058                           intcon3	equ	0xFF0
 14059                           postinc0	equ	0xFEE
 14060                           wreg	equ	0xFE8
 14061                           postdec1	equ	0xFE5
 14062                           fsr1l	equ	0xFE1
 14063                           bsr	equ	0xFE0
 14064                           indf2	equ	0xFDF
 14065                           postinc2	equ	0xFDE
 14066                           postdec2	equ	0xFDD
 14067                           plusw2	equ	0xFDB
 14068                           fsr2h	equ	0xFDA
 14069                           fsr2l	equ	0xFD9
 14070                           status	equ	0xFD8
 14071                           
 14072 ;; *************** function i1___ftmul *****************
 14073 ;; Defined at:
 14074 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
 14075 ;; Parameters:    Size  Location     Type
 14076 ;;  f1              3   26[COMRAM] float 
 14077 ;;  f2              3   29[COMRAM] float 
 14078 ;; Auto vars:     Size  Location     Type
 14079 ;;  __ftmul         3   37[COMRAM] unsigned um
 14080 ;;  __ftmul         1   36[COMRAM] unsigned char 
 14081 ;;  __ftmul         1   35[COMRAM] unsigned char 
 14082 ;;  __ftmul         1    0        unsigned char 
 14083 ;; Return value:  Size  Location     Type
 14084 ;;                  3   26[COMRAM] float 
 14085 ;; Registers used:
 14086 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 14087 ;; Tracked objects:
 14088 ;;		On entry : 0/1
 14089 ;;		On exit  : 0/0
 14090 ;;		Unchanged: 0/0
 14091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14092 ;;      Params:         6       0       0       0       0
 14093 ;;      Locals:         5       0       0       0       0
 14094 ;;      Temps:          3       0       0       0       0
 14095 ;;      Totals:        14       0       0       0       0
 14096 ;;Total ram usage:       14 bytes
 14097 ;; Hardware stack levels used:    1
 14098 ;; Hardware stack levels required when called:    7
 14099 ;; This function calls:
 14100 ;;		i1___ftpack
 14101 ;; This function is called by:
 14102 ;;		_IR_CheckCode
 14103 ;;		_ADC_CalculateVoltage
 14104 ;;		i1_IR_LoadCode
 14105 ;; This function uses a non-reentrant model
 14106 ;;
 14107                           
 14108                           	psect	text91
 14109  000646                     __ptext91:
 14110                           	opt stack 0
 14111  000646                     i1___ftmul:
 14112                           	opt stack 15
 14113                           
 14114                           ;incstack = 0
 14115  000646  C01D  F021         	movff	i1___ftmul@f1+2,??i1___ftmul
 14116  00064A  6A22               	clrf	(??i1___ftmul+1)& (0+255),c
 14117  00064C  6A23               	clrf	(??i1___ftmul+2)& (0+255),c
 14118  00064E  341C               	rlcf	i1___ftmul@f1+1,w,c
 14119  000650  3621               	rlcf	??i1___ftmul& (0+255),f,c
 14120  000652  E301               	bnc	u456_21
 14121  000654  8022               	bsf	(??i1___ftmul+1)& (0+255),0,c
 14122  000656                     u456_21:
 14123  000656  5021               	movf	??i1___ftmul,w,c
 14124  000658  6E24               	movwf	i1___ftmul@exp,c
 14125  00065A  5024               	movf	i1___ftmul@exp,w,c
 14126  00065C  E104               	bnz	i1l4902
 14127  00065E  6A1B               	clrf	?i1___ftmul,c
 14128  000660  6A1C               	clrf	?i1___ftmul+1,c
 14129  000662  6A1D               	clrf	?i1___ftmul+2,c
 14130  000664  0012               	return	
 14131  000666                     i1l4902:
 14132  000666  C020  F021         	movff	i1___ftmul@f2+2,??i1___ftmul
 14133  00066A  6A22               	clrf	(??i1___ftmul+1)& (0+255),c
 14134  00066C  6A23               	clrf	(??i1___ftmul+2)& (0+255),c
 14135  00066E  341F               	rlcf	i1___ftmul@f2+1,w,c
 14136  000670  3621               	rlcf	??i1___ftmul& (0+255),f,c
 14137  000672  E301               	bnc	u458_21
 14138  000674  8022               	bsf	(??i1___ftmul+1)& (0+255),0,c
 14139  000676                     u458_21:
 14140  000676  5021               	movf	??i1___ftmul,w,c
 14141  000678  6E25               	movwf	i1___ftmul@sign,c
 14142  00067A  5025               	movf	i1___ftmul@sign,w,c
 14143  00067C  E104               	bnz	i1l4906
 14144  00067E  6A1B               	clrf	?i1___ftmul,c
 14145  000680  6A1C               	clrf	?i1___ftmul+1,c
 14146  000682  6A1D               	clrf	?i1___ftmul+2,c
 14147  000684  0012               	return	
 14148  000686                     i1l4906:
 14149  000686  5025               	movf	i1___ftmul@sign,w,c
 14150  000688  0F7B               	addlw	123
 14151  00068A  2624               	addwf	i1___ftmul@exp,f,c
 14152  00068C  C01D  F025         	movff	i1___ftmul@f1+2,i1___ftmul@sign
 14153  000690  5020               	movf	i1___ftmul@f2+2,w,c
 14154  000692  1A25               	xorwf	i1___ftmul@sign,f,c
 14155  000694  0E80               	movlw	128
 14156  000696  1625               	andwf	i1___ftmul@sign,f,c
 14157  000698  8E1C               	bsf	i1___ftmul@f1+1,7,c
 14158  00069A  8E1F               	bsf	i1___ftmul@f2+1,7,c
 14159  00069C  6A20               	clrf	i1___ftmul@f2+2,c
 14160  00069E  6A1D               	clrf	i1___ftmul@f1+2,c
 14161  0006A0  501B               	movf	i1___ftmul@f1,w,c
 14162  0006A2  021E               	mulwf	i1___ftmul@f2,c
 14163  0006A4  CFF4 FFF3          	movff	prodh,prodl
 14164  0006A8  6AF4               	clrf	prodh,c
 14165  0006AA  CFF3 F026          	movff	prodl,i1___ftmul@f3_as_product
 14166  0006AE  CFF4 F027          	movff	prodh,i1___ftmul@f3_as_product+1
 14167  0006B2  6A28               	clrf	i1___ftmul@f3_as_product+2,c
 14168  0006B4  501B               	movf	i1___ftmul@f1,w,c
 14169  0006B6  021F               	mulwf	i1___ftmul@f2+1,c
 14170  0006B8  50F3               	movf	prodl,w,c
 14171  0006BA  2626               	addwf	i1___ftmul@f3_as_product,f,c
 14172  0006BC  50F4               	movf	prodh,w,c
 14173  0006BE  2227               	addwfc	i1___ftmul@f3_as_product+1,f,c
 14174  0006C0  0E00               	movlw	0
 14175  0006C2  2228               	addwfc	i1___ftmul@f3_as_product+2,f,c
 14176  0006C4  501C               	movf	i1___ftmul@f1+1,w,c
 14177  0006C6  021E               	mulwf	i1___ftmul@f2,c
 14178  0006C8  50F3               	movf	prodl,w,c
 14179  0006CA  2626               	addwf	i1___ftmul@f3_as_product,f,c
 14180  0006CC  50F4               	movf	prodh,w,c
 14181  0006CE  2227               	addwfc	i1___ftmul@f3_as_product+1,f,c
 14182  0006D0  0E00               	movlw	0
 14183  0006D2  2228               	addwfc	i1___ftmul@f3_as_product+2,f,c
 14184  0006D4  501C               	movf	i1___ftmul@f1+1,w,c
 14185  0006D6  021F               	mulwf	i1___ftmul@f2+1,c
 14186  0006D8  50F3               	movf	prodl,w,c
 14187  0006DA  2627               	addwf	i1___ftmul@f3_as_product+1,f,c
 14188  0006DC  50F4               	movf	prodh,w,c
 14189  0006DE  2228               	addwfc	i1___ftmul@f3_as_product+2,f,c
 14190  0006E0  AE28               	btfss	i1___ftmul@f3_as_product+2,7,c
 14191  0006E2  D005               	goto	i1l1392
 14192  0006E4  90D8               	bcf	status,0,c
 14193  0006E6  3228               	rrcf	i1___ftmul@f3_as_product+2,f,c
 14194  0006E8  3227               	rrcf	i1___ftmul@f3_as_product+1,f,c
 14195  0006EA  3226               	rrcf	i1___ftmul@f3_as_product,f,c
 14196  0006EC  2A24               	incf	i1___ftmul@exp,f,c
 14197  0006EE                     i1l1392:
 14198  0006EE  90D8               	bcf	status,0,c
 14199  0006F0  3228               	rrcf	i1___ftmul@f3_as_product+2,f,c
 14200  0006F2  3227               	rrcf	i1___ftmul@f3_as_product+1,f,c
 14201  0006F4  3226               	rrcf	i1___ftmul@f3_as_product,f,c
 14202  0006F6  C026  F001         	movff	i1___ftmul@f3_as_product,i1___ftpack@arg
 14203  0006FA  C027  F002         	movff	i1___ftmul@f3_as_product+1,i1___ftpack@arg+1
 14204  0006FE  C028  F003         	movff	i1___ftmul@f3_as_product+2,i1___ftpack@arg+2
 14205  000702  C024  F004         	movff	i1___ftmul@exp,i1___ftpack@exp
 14206  000706  C025  F005         	movff	i1___ftmul@sign,i1___ftpack@sign
 14207  00070A  ECA0  F007         	call	i1___ftpack	;wreg free
 14208  00070E  C001  F01B         	movff	?i1___ftpack,?i1___ftmul
 14209  000712  C002  F01C         	movff	?i1___ftpack+1,?i1___ftmul+1
 14210  000716  C003  F01D         	movff	?i1___ftpack+2,?i1___ftmul+2
 14211  00071A  0012               	return		;funcret
 14212  00071C                     __end_ofi1___ftmul:
 14213                           	opt stack 0
 14214                           tblptru	equ	0xFF8
 14215                           tblptrh	equ	0xFF7
 14216                           tblptrl	equ	0xFF6
 14217                           tablat	equ	0xFF5
 14218                           prodh	equ	0xFF4
 14219                           prodl	equ	0xFF3
 14220                           intcon	equ	0xFF2
 14221                           intcon2	equ	0xFF1
 14222                           intcon3	equ	0xFF0
 14223                           postinc0	equ	0xFEE
 14224                           wreg	equ	0xFE8
 14225                           postdec1	equ	0xFE5
 14226                           fsr1l	equ	0xFE1
 14227                           bsr	equ	0xFE0
 14228                           indf2	equ	0xFDF
 14229                           postinc2	equ	0xFDE
 14230                           postdec2	equ	0xFDD
 14231                           plusw2	equ	0xFDB
 14232                           fsr2h	equ	0xFDA
 14233                           fsr2l	equ	0xFD9
 14234                           status	equ	0xFD8
 14235                           
 14236 ;; *************** function i1_ADC_ChangeChannel *****************
 14237 ;; Defined at:
 14238 ;;		line 107 in file "ADC.c"
 14239 ;; Parameters:    Size  Location     Type
 14240 ;;		None
 14241 ;; Auto vars:     Size  Location     Type
 14242 ;;		None
 14243 ;; Return value:  Size  Location     Type
 14244 ;;		None               void
 14245 ;; Registers used:
 14246 ;;		wreg, status,2, status,0
 14247 ;; Tracked objects:
 14248 ;;		On entry : 0/0
 14249 ;;		On exit  : 0/0
 14250 ;;		Unchanged: 0/0
 14251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14252 ;;      Params:         0       0       0       0       0
 14253 ;;      Locals:         0       0       0       0       0
 14254 ;;      Temps:          0       0       0       0       0
 14255 ;;      Totals:         0       0       0       0       0
 14256 ;;Total ram usage:        0 bytes
 14257 ;; Hardware stack levels used:    1
 14258 ;; Hardware stack levels required when called:    6
 14259 ;; This function calls:
 14260 ;;		Nothing
 14261 ;; This function is called by:
 14262 ;;		_ADC_CalculateVoltage
 14263 ;; This function uses a non-reentrant model
 14264 ;;
 14265                           
 14266                           	psect	text92
 14267  0018F4                     __ptext92:
 14268                           	opt stack 0
 14269  0018F4                     i1_ADC_ChangeChannel:
 14270                           	opt stack 16
 14271                           
 14272                           ;ADC.c: 109: if(ADC_CurrentSource == 10)
 14273                           
 14274                           ;incstack = 0
 14275  0018F4  0E0A               	movlw	10
 14276  0018F6  186D               	xorwf	_ADC_CurrentSource,w,c
 14277  0018F8  E107               	bnz	i1l5936
 14278                           
 14279                           ;ADC.c: 110: {
 14280                           ;ADC.c: 111: ADC_CurrentSource = 11;
 14281  0018FA  0E0B               	movlw	11
 14282  0018FC  6E6D               	movwf	_ADC_CurrentSource,c
 14283                           
 14284                           ;ADC.c: 112: ADCON0bits.CHS = 1;
 14285  0018FE  50C2               	movf	4034,w,c	;volatile
 14286  001900  0BC3               	andlw	-61
 14287  001902  0904               	iorlw	4
 14288  001904  6EC2               	movwf	4034,c	;volatile
 14289                           
 14290                           ;ADC.c: 113: }
 14291  001906  0012               	return	
 14292  001908                     i1l5936:
 14293                           
 14294                           ;ADC.c: 114: else
 14295                           ;ADC.c: 115: {
 14296                           ;ADC.c: 116: ADC_CurrentSource = 10;
 14297  001908  0E0A               	movlw	10
 14298  00190A  6E6D               	movwf	_ADC_CurrentSource,c
 14299                           
 14300                           ;ADC.c: 117: ADCON0bits.CHS = 0;
 14301  00190C  0EC3               	movlw	-61
 14302  00190E  16C2               	andwf	4034,f,c	;volatile
 14303  001910  0CC3               	retlw	195	;funcret
 14304  001912                     __end_ofi1_ADC_ChangeChannel:
 14305                           	opt stack 0
 14306                           tblptru	equ	0xFF8
 14307                           tblptrh	equ	0xFF7
 14308                           tblptrl	equ	0xFF6
 14309                           tablat	equ	0xFF5
 14310                           prodh	equ	0xFF4
 14311                           prodl	equ	0xFF3
 14312                           intcon	equ	0xFF2
 14313                           intcon2	equ	0xFF1
 14314                           intcon3	equ	0xFF0
 14315                           postinc0	equ	0xFEE
 14316                           wreg	equ	0xFE8
 14317                           postdec1	equ	0xFE5
 14318                           fsr1l	equ	0xFE1
 14319                           bsr	equ	0xFE0
 14320                           indf2	equ	0xFDF
 14321                           postinc2	equ	0xFDE
 14322                           postdec2	equ	0xFDD
 14323                           plusw2	equ	0xFDB
 14324                           fsr2h	equ	0xFDA
 14325                           fsr2l	equ	0xFD9
 14326                           status	equ	0xFD8
 14327                           
 14328 ;; *************** function ___ftdiv *****************
 14329 ;; Defined at:
 14330 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
 14331 ;; Parameters:    Size  Location     Type
 14332 ;;  f1              3   11[COMRAM] float 
 14333 ;;  f2              3   14[COMRAM] float 
 14334 ;; Auto vars:     Size  Location     Type
 14335 ;;  f3              3   21[COMRAM] float 
 14336 ;;  sign            1   25[COMRAM] unsigned char 
 14337 ;;  exp             1   24[COMRAM] unsigned char 
 14338 ;;  cntr            1   20[COMRAM] unsigned char 
 14339 ;; Return value:  Size  Location     Type
 14340 ;;                  3   11[COMRAM] float 
 14341 ;; Registers used:
 14342 ;;		wreg, status,2, status,0, cstack
 14343 ;; Tracked objects:
 14344 ;;		On entry : 0/0
 14345 ;;		On exit  : 0/0
 14346 ;;		Unchanged: 0/0
 14347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14348 ;;      Params:         6       0       0       0       0
 14349 ;;      Locals:         6       0       0       0       0
 14350 ;;      Temps:          3       0       0       0       0
 14351 ;;      Totals:        15       0       0       0       0
 14352 ;;Total ram usage:       15 bytes
 14353 ;; Hardware stack levels used:    1
 14354 ;; Hardware stack levels required when called:    7
 14355 ;; This function calls:
 14356 ;;		i1___ftpack
 14357 ;; This function is called by:
 14358 ;;		_ADC_CalculateVoltage
 14359 ;; This function uses a non-reentrant model
 14360 ;;
 14361                           
 14362                           	psect	text93
 14363  0008C2                     __ptext93:
 14364                           	opt stack 0
 14365  0008C2                     ___ftdiv:
 14366                           	opt stack 15
 14367                           
 14368                           ;incstack = 0
 14369  0008C2  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
 14370  0008C6  6A13               	clrf	(??___ftdiv+1)& (0+255),c
 14371  0008C8  6A14               	clrf	(??___ftdiv+2)& (0+255),c
 14372  0008CA  340D               	rlcf	___ftdiv@f1+1,w,c
 14373  0008CC  3612               	rlcf	??___ftdiv& (0+255),f,c
 14374  0008CE  E301               	bnc	u528_21
 14375  0008D0  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
 14376  0008D2                     u528_21:
 14377  0008D2  5012               	movf	??___ftdiv,w,c
 14378  0008D4  6E19               	movwf	___ftdiv@exp,c
 14379  0008D6  5019               	movf	___ftdiv@exp,w,c
 14380  0008D8  E104               	bnz	i1l5464
 14381  0008DA  6A0C               	clrf	?___ftdiv,c
 14382  0008DC  6A0D               	clrf	?___ftdiv+1,c
 14383  0008DE  6A0E               	clrf	?___ftdiv+2,c
 14384  0008E0  0012               	return	
 14385  0008E2                     i1l5464:
 14386  0008E2  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
 14387  0008E6  6A13               	clrf	(??___ftdiv+1)& (0+255),c
 14388  0008E8  6A14               	clrf	(??___ftdiv+2)& (0+255),c
 14389  0008EA  3410               	rlcf	___ftdiv@f2+1,w,c
 14390  0008EC  3612               	rlcf	??___ftdiv& (0+255),f,c
 14391  0008EE  E301               	bnc	u530_21
 14392  0008F0  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
 14393  0008F2                     u530_21:
 14394  0008F2  5012               	movf	??___ftdiv,w,c
 14395  0008F4  6E1A               	movwf	___ftdiv@sign,c
 14396  0008F6  501A               	movf	___ftdiv@sign,w,c
 14397  0008F8  E104               	bnz	i1l1376
 14398  0008FA  6A0C               	clrf	?___ftdiv,c
 14399  0008FC  6A0D               	clrf	?___ftdiv+1,c
 14400  0008FE  6A0E               	clrf	?___ftdiv+2,c
 14401  000900  0012               	return	
 14402  000902                     i1l1376:
 14403  000902  6A16               	clrf	___ftdiv@f3,c
 14404  000904  6A17               	clrf	___ftdiv@f3+1,c
 14405  000906  6A18               	clrf	___ftdiv@f3+2,c
 14406  000908  501A               	movf	___ftdiv@sign,w,c
 14407  00090A  0F89               	addlw	137
 14408  00090C  5E19               	subwf	___ftdiv@exp,f,c
 14409  00090E  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
 14410  000912  5011               	movf	___ftdiv@f2+2,w,c
 14411  000914  1A1A               	xorwf	___ftdiv@sign,f,c
 14412  000916  0E80               	movlw	128
 14413  000918  161A               	andwf	___ftdiv@sign,f,c
 14414  00091A  8E0D               	bsf	___ftdiv@f1+1,7,c
 14415  00091C  6A0E               	clrf	___ftdiv@f1+2,c
 14416  00091E  8E10               	bsf	___ftdiv@f2+1,7,c
 14417  000920  6A11               	clrf	___ftdiv@f2+2,c
 14418  000922  0E18               	movlw	24
 14419  000924  6E15               	movwf	___ftdiv@cntr,c
 14420  000926                     i1l5482:
 14421  000926  90D8               	bcf	status,0,c
 14422  000928  3616               	rlcf	___ftdiv@f3,f,c
 14423  00092A  3617               	rlcf	___ftdiv@f3+1,f,c
 14424  00092C  3618               	rlcf	___ftdiv@f3+2,f,c
 14425  00092E  500F               	movf	___ftdiv@f2,w,c
 14426  000930  5C0C               	subwf	___ftdiv@f1,w,c
 14427  000932  5010               	movf	___ftdiv@f2+1,w,c
 14428  000934  580D               	subwfb	___ftdiv@f1+1,w,c
 14429  000936  5011               	movf	___ftdiv@f2+2,w,c
 14430  000938  580E               	subwfb	___ftdiv@f1+2,w,c
 14431  00093A  E307               	bnc	i1l1378
 14432  00093C  500F               	movf	___ftdiv@f2,w,c
 14433  00093E  5E0C               	subwf	___ftdiv@f1,f,c
 14434  000940  5010               	movf	___ftdiv@f2+1,w,c
 14435  000942  5A0D               	subwfb	___ftdiv@f1+1,f,c
 14436  000944  5011               	movf	___ftdiv@f2+2,w,c
 14437  000946  5A0E               	subwfb	___ftdiv@f1+2,f,c
 14438  000948  8016               	bsf	___ftdiv@f3,0,c
 14439  00094A                     i1l1378:
 14440  00094A  90D8               	bcf	status,0,c
 14441  00094C  360C               	rlcf	___ftdiv@f1,f,c
 14442  00094E  360D               	rlcf	___ftdiv@f1+1,f,c
 14443  000950  360E               	rlcf	___ftdiv@f1+2,f,c
 14444  000952  2E15               	decfsz	___ftdiv@cntr,f,c
 14445  000954  D7E8               	goto	i1l5482
 14446  000956  C016  F001         	movff	___ftdiv@f3,i1___ftpack@arg
 14447  00095A  C017  F002         	movff	___ftdiv@f3+1,i1___ftpack@arg+1
 14448  00095E  C018  F003         	movff	___ftdiv@f3+2,i1___ftpack@arg+2
 14449  000962  C019  F004         	movff	___ftdiv@exp,i1___ftpack@exp
 14450  000966  C01A  F005         	movff	___ftdiv@sign,i1___ftpack@sign
 14451  00096A  ECA0  F007         	call	i1___ftpack	;wreg free
 14452  00096E  C001  F00C         	movff	?i1___ftpack,?___ftdiv
 14453  000972  C002  F00D         	movff	?i1___ftpack+1,?___ftdiv+1
 14454  000976  C003  F00E         	movff	?i1___ftpack+2,?___ftdiv+2
 14455  00097A  0012               	return		;funcret
 14456  00097C                     __end_of___ftdiv:
 14457                           	opt stack 0
 14458                           tblptru	equ	0xFF8
 14459                           tblptrh	equ	0xFF7
 14460                           tblptrl	equ	0xFF6
 14461                           tablat	equ	0xFF5
 14462                           prodh	equ	0xFF4
 14463                           prodl	equ	0xFF3
 14464                           intcon	equ	0xFF2
 14465                           intcon2	equ	0xFF1
 14466                           intcon3	equ	0xFF0
 14467                           postinc0	equ	0xFEE
 14468                           wreg	equ	0xFE8
 14469                           postdec1	equ	0xFE5
 14470                           fsr1l	equ	0xFE1
 14471                           bsr	equ	0xFE0
 14472                           indf2	equ	0xFDF
 14473                           postinc2	equ	0xFDE
 14474                           postdec2	equ	0xFDD
 14475                           plusw2	equ	0xFDB
 14476                           fsr2h	equ	0xFDA
 14477                           fsr2l	equ	0xFD9
 14478                           status	equ	0xFD8
 14479                           
 14480 ;; *************** function i1___ftpack *****************
 14481 ;; Defined at:
 14482 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 14483 ;; Parameters:    Size  Location     Type
 14484 ;;  arg             3    0[COMRAM] unsigned um
 14485 ;;  exp             1    3[COMRAM] unsigned char 
 14486 ;;  sign            1    4[COMRAM] unsigned char 
 14487 ;; Auto vars:     Size  Location     Type
 14488 ;;		None
 14489 ;; Return value:  Size  Location     Type
 14490 ;;                  3    0[COMRAM] float 
 14491 ;; Registers used:
 14492 ;;		wreg, status,2, status,0
 14493 ;; Tracked objects:
 14494 ;;		On entry : 0/1
 14495 ;;		On exit  : 0/0
 14496 ;;		Unchanged: 0/0
 14497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14498 ;;      Params:         5       0       0       0       0
 14499 ;;      Locals:         0       0       0       0       0
 14500 ;;      Temps:          3       0       0       0       0
 14501 ;;      Totals:         8       0       0       0       0
 14502 ;;Total ram usage:        8 bytes
 14503 ;; Hardware stack levels used:    1
 14504 ;; Hardware stack levels required when called:    6
 14505 ;; This function calls:
 14506 ;;		Nothing
 14507 ;; This function is called by:
 14508 ;;		___ftdiv
 14509 ;;		i1___ftmul
 14510 ;;		i1___lwtoft
 14511 ;; This function uses a non-reentrant model
 14512 ;;
 14513                           
 14514                           	psect	text94
 14515  000F40                     __ptext94:
 14516                           	opt stack 0
 14517  000F40                     i1___ftpack:
 14518                           	opt stack 15
 14519                           
 14520                           ;incstack = 0
 14521  000F40  5004               	movf	i1___ftpack@exp,w,c
 14522  000F42  E004               	bz	i1l1308
 14523  000F44  5001               	movf	i1___ftpack@arg,w,c
 14524  000F46  1002               	iorwf	i1___ftpack@arg+1,w,c
 14525  000F48  1003               	iorwf	i1___ftpack@arg+2,w,c
 14526  000F4A  E109               	bnz	i1l4368
 14527  000F4C                     i1l1308:
 14528  000F4C  6A01               	clrf	?i1___ftpack,c
 14529  000F4E  6A02               	clrf	?i1___ftpack+1,c
 14530  000F50  6A03               	clrf	?i1___ftpack+2,c
 14531  000F52  0012               	return	
 14532  000F54                     i1l4366:
 14533  000F54  2A04               	incf	i1___ftpack@exp,f,c
 14534  000F56  90D8               	bcf	status,0,c
 14535  000F58  3203               	rrcf	i1___ftpack@arg+2,f,c
 14536  000F5A  3202               	rrcf	i1___ftpack@arg+1,f,c
 14537  000F5C  3201               	rrcf	i1___ftpack@arg,f,c
 14538  000F5E                     i1l4368:
 14539  000F5E  6A06               	clrf	??i1___ftpack& (0+255),c
 14540  000F60  6A07               	clrf	(??i1___ftpack+1)& (0+255),c
 14541  000F62  0EFE               	movlw	254
 14542  000F64  1403               	andwf	i1___ftpack@arg+2,w,c
 14543  000F66  6E08               	movwf	(??i1___ftpack+2)& (0+255),c
 14544  000F68  5006               	movf	??i1___ftpack,w,c
 14545  000F6A  1007               	iorwf	??i1___ftpack+1,w,c
 14546  000F6C  1008               	iorwf	??i1___ftpack+2,w,c
 14547  000F6E  E00A               	bz	i1l4374
 14548  000F70  D7F1               	goto	i1l4366
 14549  000F72                     i1l4370:
 14550  000F72  2A04               	incf	i1___ftpack@exp,f,c
 14551  000F74  2A01               	incf	i1___ftpack@arg,f,c
 14552  000F76  0E00               	movlw	0
 14553  000F78  2202               	addwfc	i1___ftpack@arg+1,f,c
 14554  000F7A  2203               	addwfc	i1___ftpack@arg+2,f,c
 14555  000F7C  90D8               	bcf	status,0,c
 14556  000F7E  3203               	rrcf	i1___ftpack@arg+2,f,c
 14557  000F80  3202               	rrcf	i1___ftpack@arg+1,f,c
 14558  000F82  3201               	rrcf	i1___ftpack@arg,f,c
 14559  000F84                     i1l4374:
 14560  000F84  6A06               	clrf	??i1___ftpack& (0+255),c
 14561  000F86  6A07               	clrf	(??i1___ftpack+1)& (0+255),c
 14562  000F88  5003               	movf	i1___ftpack@arg+2,w,c
 14563  000F8A  6E08               	movwf	(??i1___ftpack+2)& (0+255),c
 14564  000F8C  5006               	movf	??i1___ftpack,w,c
 14565  000F8E  1007               	iorwf	??i1___ftpack+1,w,c
 14566  000F90  1008               	iorwf	??i1___ftpack+2,w,c
 14567  000F92  E006               	bz	i1l4378
 14568  000F94  D7EE               	goto	i1l4370
 14569  000F96                     i1l4376:
 14570  000F96  0604               	decf	i1___ftpack@exp,f,c
 14571  000F98  90D8               	bcf	status,0,c
 14572  000F9A  3601               	rlcf	i1___ftpack@arg,f,c
 14573  000F9C  3602               	rlcf	i1___ftpack@arg+1,f,c
 14574  000F9E  3603               	rlcf	i1___ftpack@arg+2,f,c
 14575  000FA0                     i1l4378:
 14576  000FA0  BE02               	btfsc	i1___ftpack@arg+1,7,c
 14577  000FA2  D003               	goto	i1l1320
 14578  000FA4  0E02               	movlw	2
 14579  000FA6  6004               	cpfslt	i1___ftpack@exp,c
 14580  000FA8  D7F6               	goto	i1l4376
 14581  000FAA                     i1l1320:
 14582  000FAA  A004               	btfss	i1___ftpack@exp,0,c
 14583  000FAC  9E02               	bcf	i1___ftpack@arg+1,7,c
 14584  000FAE  90D8               	bcf	status,0,c
 14585  000FB0  3204               	rrcf	i1___ftpack@exp,f,c
 14586  000FB2  5004               	movf	i1___ftpack@exp,w,c
 14587  000FB4  1203               	iorwf	i1___ftpack@arg+2,f,c
 14588  000FB6  5005               	movf	i1___ftpack@sign,w,c
 14589  000FB8  E001               	bz	i1l4392
 14590  000FBA  8E03               	bsf	i1___ftpack@arg+2,7,c
 14591  000FBC                     i1l4392:
 14592  000FBC  C001  F001         	movff	i1___ftpack@arg,?i1___ftpack
 14593  000FC0  C002  F002         	movff	i1___ftpack@arg+1,?i1___ftpack+1
 14594  000FC4  C003  F003         	movff	i1___ftpack@arg+2,?i1___ftpack+2
 14595  000FC8  0012               	return		;funcret
 14596  000FCA                     __end_ofi1___ftpack:
 14597                           	opt stack 0
 14598                           tblptru	equ	0xFF8
 14599                           tblptrh	equ	0xFF7
 14600                           tblptrl	equ	0xFF6
 14601                           tablat	equ	0xFF5
 14602                           prodh	equ	0xFF4
 14603                           prodl	equ	0xFF3
 14604                           intcon	equ	0xFF2
 14605                           intcon2	equ	0xFF1
 14606                           intcon3	equ	0xFF0
 14607                           postinc0	equ	0xFEE
 14608                           wreg	equ	0xFE8
 14609                           postdec1	equ	0xFE5
 14610                           fsr1l	equ	0xFE1
 14611                           bsr	equ	0xFE0
 14612                           indf2	equ	0xFDF
 14613                           postinc2	equ	0xFDE
 14614                           postdec2	equ	0xFDD
 14615                           plusw2	equ	0xFDB
 14616                           fsr2h	equ	0xFDA
 14617                           fsr2l	equ	0xFD9
 14618                           status	equ	0xFD8
 14619                           
 14620 ;; *************** function _high_isr *****************
 14621 ;; Defined at:
 14622 ;;		line 48 in file "INTERRUPTS.c"
 14623 ;; Parameters:    Size  Location     Type
 14624 ;;		None
 14625 ;; Auto vars:     Size  Location     Type
 14626 ;;  RFtemp          2   51[BANK0 ] unsigned int 
 14627 ;; Return value:  Size  Location     Type
 14628 ;;		None               void
 14629 ;; Registers used:
 14630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14631 ;; Tracked objects:
 14632 ;;		On entry : 0/0
 14633 ;;		On exit  : 0/0
 14634 ;;		Unchanged: 0/0
 14635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14636 ;;      Params:         0       0       0       0       0
 14637 ;;      Locals:         0       2       0       0       0
 14638 ;;      Temps:          0       8       0       0       0
 14639 ;;      Totals:         0      10       0       0       0
 14640 ;;Total ram usage:       10 bytes
 14641 ;; Hardware stack levels used:    1
 14642 ;; Hardware stack levels required when called:    5
 14643 ;; This function calls:
 14644 ;;		_RF_CheckCode
 14645 ;;		_TMR_Timer0Start
 14646 ;;		_TMR_Timer0Status
 14647 ;;		i2_RF_ResetData
 14648 ;;		i2_SYS_ActivityTimerReset
 14649 ;;		i2_TMR_ResetTimer0
 14650 ;;		i2_TMR_Timer0
 14651 ;; This function is called by:
 14652 ;;		Interrupt level 2
 14653 ;; This function uses a non-reentrant model
 14654 ;;
 14655                           
 14656                           	psect	intcode
 14657  000008                     __pintcode:
 14658                           	opt stack 0
 14659  000008                     _high_isr:
 14660                           	opt stack 13
 14661                           
 14662                           ;incstack = 0
 14663  000008  826E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14664  00000A  CFD9 F0AB          	movff	fsr2l,??_high_isr
 14665  00000E  CFDA F0AC          	movff	fsr2h,??_high_isr+1
 14666  000012  EF34  F002         	goto	int_func
 14667                           tblptru	equ	0xFF8
 14668                           tblptrh	equ	0xFF7
 14669                           tblptrl	equ	0xFF6
 14670                           tablat	equ	0xFF5
 14671                           prodh	equ	0xFF4
 14672                           prodl	equ	0xFF3
 14673                           intcon	equ	0xFF2
 14674                           intcon2	equ	0xFF1
 14675                           intcon3	equ	0xFF0
 14676                           postinc0	equ	0xFEE
 14677                           wreg	equ	0xFE8
 14678                           postdec1	equ	0xFE5
 14679                           fsr1l	equ	0xFE1
 14680                           bsr	equ	0xFE0
 14681                           indf2	equ	0xFDF
 14682                           postinc2	equ	0xFDE
 14683                           postdec2	equ	0xFDD
 14684                           plusw2	equ	0xFDB
 14685                           fsr2h	equ	0xFDA
 14686                           fsr2l	equ	0xFD9
 14687                           status	equ	0xFD8
 14688                           
 14689                           	psect	intcode_body
 14690  000468                     __pintcode_body:
 14691                           	opt stack 13
 14692  000468                     int_func:
 14693                           	opt stack 13
 14694  000468  CFF3 F0AD          	movff	prodl,??_high_isr+2
 14695  00046C  CFF4 F0AE          	movff	prodh,??_high_isr+3
 14696  000470  CFF6 F0AF          	movff	tblptrl,??_high_isr+4
 14697  000474  CFF7 F0B0          	movff	tblptrh,??_high_isr+5
 14698  000478  CFF8 F0B1          	movff	tblptru,??_high_isr+6
 14699  00047C  CFF5 F0B2          	movff	tablat,??_high_isr+7
 14700                           
 14701                           ;INTERRUPTS.c: 52: if(INTCON3bits.INT1IF || INTCON3bits.INT2IF)
 14702  000480  B0F0               	btfsc	intcon3,0,c	;volatile
 14703  000482  D002               	goto	i2l6514
 14704  000484  A2F0               	btfss	intcon3,1,c	;volatile
 14705  000486  D056               	goto	i2l192
 14706  000488                     i2l6514:
 14707                           
 14708                           ;INTERRUPTS.c: 53: {
 14709                           ;INTERRUPTS.c: 55: if(!TMR_Timer0Status())
 14710  000488  ECC8  F00D         	call	_TMR_Timer0Status	;wreg free
 14711  00048C  0900               	iorlw	0
 14712  00048E  E103               	bnz	i2l195
 14713                           
 14714                           ;INTERRUPTS.c: 56: {
 14715                           ;INTERRUPTS.c: 58: TMR_Timer0Start();
 14716  000490  EC67  F00D         	call	_TMR_Timer0Start	;wreg free
 14717                           
 14718                           ;INTERRUPTS.c: 59: }
 14719  000494  D04C               	goto	i2l6556
 14720  000496                     i2l195:
 14721                           
 14722                           ;INTERRUPTS.c: 60: else
 14723                           ;INTERRUPTS.c: 61: {
 14724                           ;INTERRUPTS.c: 62: RFtemp = TMR0L;
 14725  000496  CFD6 F0B3          	movff	4054,high_isr@RFtemp	;volatile
 14726  00049A  0100               	movlb	0	; () banked
 14727  00049C  6BB4               	clrf	(high_isr@RFtemp+1)& (0+255),b
 14728                           
 14729                           ; BSR set to: 0
 14730                           ;INTERRUPTS.c: 63: RFtemp += (unsigned int)TMR0H << 8;
 14731  00049E  50D7               	movf	4055,w,c	;volatile
 14732  0004A0  27B4               	addwf	(high_isr@RFtemp+1)& (0+255),f,b
 14733                           
 14734                           ; BSR set to: 0
 14735                           ;INTERRUPTS.c: 64: TMR_ResetTimer0();
 14736  0004A2  EC5B  F00C         	call	i2_TMR_ResetTimer0	;wreg free
 14737                           
 14738                           ; BSR set to: 0
 14739                           ;INTERRUPTS.c: 65: if(!RFStarted)
 14740  0004A6  51C7               	movf	_RFStarted& (0+255),w,b
 14741  0004A8  E11D               	bnz	i2l197
 14742                           
 14743                           ; BSR set to: 0
 14744                           ;INTERRUPTS.c: 66: {
 14745                           ;INTERRUPTS.c: 67: if(System_State == 8)
 14746  0004AA  0E08               	movlw	8
 14747  0004AC  0101               	movlb	1	; () banked
 14748  0004AE  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
 14749  0004B0  E10E               	bnz	i2l6532
 14750                           
 14751                           ; BSR set to: 1
 14752                           ;INTERRUPTS.c: 68: {
 14753                           ;INTERRUPTS.c: 69: if(RFtemp >= RF_SyncLow && RFtemp <= RF_SyncHigh)
 14754  0004B2  0100               	movlb	0	; () banked
 14755  0004B4  51C2               	movf	_RF_SyncLow& (0+255),w,b
 14756  0004B6  5DB3               	subwf	high_isr@RFtemp& (0+255),w,b
 14757  0004B8  51C3               	movf	(_RF_SyncLow+1)& (0+255),w,b
 14758  0004BA  59B4               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14759  0004BC  E313               	bnc	i2l197
 14760                           
 14761                           ; BSR set to: 0
 14762  0004BE  51B3               	movf	high_isr@RFtemp& (0+255),w,b
 14763  0004C0  5DC0               	subwf	_RF_SyncHigh& (0+255),w,b
 14764  0004C2  51B4               	movf	(high_isr@RFtemp+1)& (0+255),w,b
 14765  0004C4  59C1               	subwfb	(_RF_SyncHigh+1)& (0+255),w,b
 14766  0004C6  E30E               	bnc	i2l197
 14767  0004C8                     i2l6530:
 14768                           
 14769                           ; BSR set to: 0
 14770                           ;INTERRUPTS.c: 70: {
 14771                           ;INTERRUPTS.c: 71: RFStarted = 1;
 14772  0004C8  0E01               	movlw	1
 14773  0004CA  6FC7               	movwf	_RFStarted& (0+255),b
 14774  0004CC  D00B               	goto	i2l197
 14775  0004CE                     i2l6532:
 14776                           
 14777                           ; BSR set to: 1
 14778                           ;INTERRUPTS.c: 74: else
 14779                           ;INTERRUPTS.c: 75: {
 14780                           ;INTERRUPTS.c: 76: if(RFtemp >= 300 && RFtemp <= 1400)
 14781  0004CE  0E2C               	movlw	44
 14782  0004D0  0100               	movlb	0	; () banked
 14783  0004D2  5DB3               	subwf	high_isr@RFtemp& (0+255),w,b
 14784  0004D4  0E01               	movlw	1
 14785  0004D6  59B4               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14786  0004D8  E305               	bnc	i2l197
 14787                           
 14788                           ; BSR set to: 0
 14789  0004DA  0E79               	movlw	121
 14790  0004DC  5DB3               	subwf	high_isr@RFtemp& (0+255),w,b
 14791  0004DE  0E05               	movlw	5
 14792  0004E0  59B4               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14793  0004E2  E3F2               	bnc	i2l6530
 14794  0004E4                     i2l197:
 14795                           
 14796                           ; BSR set to: 0
 14797                           ;INTERRUPTS.c: 79: }
 14798                           ;INTERRUPTS.c: 80: }
 14799                           ;INTERRUPTS.c: 81: }
 14800                           ;INTERRUPTS.c: 82: if(RFStarted)
 14801  0004E4  51C7               	movf	_RFStarted& (0+255),w,b
 14802  0004E6  E023               	bz	i2l6556
 14803  0004E8                     i17L__ptext96:
 14804                           	opt stack 0
 14805  0004E8                     i17Li2_SYS_ActivityTimerReset:
 14806                           	opt stack 0
 14807  0004E8                     i17Li2l6354:
 14808                           	opt stack 17
 14809                           
 14810                           ; BSR set to: 0
 14811                           ;SYSTEM.c: 61: Activity_Timer = 0;
 14812  0004E8  6A5A               	clrf	_Activity_Timer,c
 14813  0004EA  6A5B               	clrf	_Activity_Timer+1,c
 14814  0004EC  6A5C               	clrf	_Activity_Timer+2,c
 14815  0004EE  6A5D               	clrf	_Activity_Timer+3,c
 14816  0004F0                     i17Li2l334:
 14817                           	opt stack 13
 14818                           
 14819                           ; BSR set to: 0
 14820                           ;INTERRUPTS.c: 85: if(RF_DataPlace < 64)
 14821  0004F0  0E40               	movlw	64
 14822  0004F2  61C9               	cpfslt	_RF_DataPlace& (0+255),b
 14823  0004F4  D01C               	goto	i2l6556
 14824                           
 14825                           ; BSR set to: 0
 14826                           ;INTERRUPTS.c: 86: {
 14827                           ;INTERRUPTS.c: 87: RF_DataTiming[RF_DataPlace] = RFtemp;
 14828  0004F6  51C9               	movf	_RF_DataPlace& (0+255),w,b
 14829  0004F8  0D02               	mullw	2
 14830  0004FA  0E07               	movlw	low _RF_DataTiming
 14831  0004FC  24F3               	addwf	prodl,w,c
 14832  0004FE  6ED9               	movwf	fsr2l,c
 14833  000500  0E01               	movlw	high _RF_DataTiming
 14834  000502  20F4               	addwfc	prodh,w,c
 14835  000504  6EDA               	movwf	fsr2h,c
 14836  000506  C0B3  FFDE         	movff	high_isr@RFtemp,postinc2
 14837  00050A  C0B4  FFDD         	movff	high_isr@RFtemp+1,postdec2
 14838                           
 14839                           ; BSR set to: 0
 14840                           ;INTERRUPTS.c: 88: RF_DataPlace++;
 14841  00050E  2BC9               	incf	_RF_DataPlace& (0+255),f,b
 14842                           
 14843                           ; BSR set to: 0
 14844                           ;INTERRUPTS.c: 89: if(RF_DataPlace >= RF_CodeSize)
 14845  000510  51C8               	movf	_RF_CodeSize& (0+255),w,b
 14846  000512  5DC9               	subwf	_RF_DataPlace& (0+255),w,b
 14847  000514  E30C               	bnc	i2l6556
 14848                           
 14849                           ; BSR set to: 0
 14850                           ;INTERRUPTS.c: 90: {
 14851                           ;INTERRUPTS.c: 91: if(!RF_Data)
 14852  000516  0101               	movlb	1	; () banked
 14853  000518  5105               	movf	_RF_Data& (0+255),w,b	;volatile
 14854  00051A  E104               	bnz	i2l6552
 14855                           
 14856                           ; BSR set to: 1
 14857                           ;INTERRUPTS.c: 92: {
 14858                           ;INTERRUPTS.c: 93: RF_Data = RF_CheckCode();
 14859  00051C  EC08  F01E         	call	_RF_CheckCode	;wreg free
 14860  000520  0101               	movlb	1	; () banked
 14861  000522  6F05               	movwf	_RF_Data& (0+255),b	;volatile
 14862  000524                     i2l6552:
 14863                           
 14864                           ; BSR set to: 1
 14865                           ;INTERRUPTS.c: 94: }
 14866                           ;INTERRUPTS.c: 95: TMR_Timer0(0);
 14867  000524  0E00               	movlw	0
 14868  000526  EC6F  F00D         	call	i2_TMR_Timer0
 14869                           
 14870                           ; BSR set to: 0
 14871                           ;INTERRUPTS.c: 96: RF_ResetData();
 14872  00052A  ECBA  F00D         	call	i2_RF_ResetData	;wreg free
 14873  00052E                     i2l6556:
 14874                           
 14875                           ; BSR set to: 0
 14876                           ;INTERRUPTS.c: 97: }
 14877                           ;INTERRUPTS.c: 98: }
 14878                           ;INTERRUPTS.c: 99: }
 14879                           ;INTERRUPTS.c: 100: }
 14880                           ;INTERRUPTS.c: 101: INTCON3bits.INT1IF = 0;
 14881  00052E  90F0               	bcf	intcon3,0,c	;volatile
 14882                           
 14883                           ; BSR set to: 0
 14884                           ;INTERRUPTS.c: 102: INTCON3bits.INT2IF = 0;
 14885  000530  92F0               	bcf	intcon3,1,c	;volatile
 14886                           
 14887                           ;INTERRUPTS.c: 103: }
 14888  000532  D00C               	goto	i2l209
 14889  000534                     i2l192:
 14890                           
 14891                           ;INTERRUPTS.c: 104: else if(INTCONbits.TMR0IF)
 14892  000534  A4F2               	btfss	intcon,2,c	;volatile
 14893  000536  D009               	goto	i2l207
 14894                           
 14895                           ;INTERRUPTS.c: 105: {
 14896                           ;INTERRUPTS.c: 107: TMR_Timer0(0);
 14897  000538  0E00               	movlw	0
 14898  00053A  EC6F  F00D         	call	i2_TMR_Timer0
 14899                           
 14900                           ;INTERRUPTS.c: 108: TMR_ResetTimer0();
 14901  00053E  EC5B  F00C         	call	i2_TMR_ResetTimer0	;wreg free
 14902                           
 14903                           ; BSR set to: 0
 14904                           ;INTERRUPTS.c: 109: RF_ResetData();
 14905  000542  ECBA  F00D         	call	i2_RF_ResetData	;wreg free
 14906                           
 14907                           ; BSR set to: 0
 14908                           ;INTERRUPTS.c: 110: INTCONbits.TMR0IF = 0;
 14909  000546  94F2               	bcf	intcon,2,c	;volatile
 14910                           
 14911                           ;INTERRUPTS.c: 111: }
 14912  000548  D001               	goto	i2l209
 14913  00054A                     i2l207:
 14914                           
 14915                           ;INTERRUPTS.c: 112: else
 14916                           ;INTERRUPTS.c: 113: {
 14917                           ;INTERRUPTS.c: 115: __nop();
 14918  00054A  F000               	nop	
 14919  00054C                     i2l209:
 14920  00054C  C0B2  FFF5         	movff	??_high_isr+7,tablat
 14921  000550  C0B1  FFF8         	movff	??_high_isr+6,tblptru
 14922  000554  C0B0  FFF7         	movff	??_high_isr+5,tblptrh
 14923  000558  C0AF  FFF6         	movff	??_high_isr+4,tblptrl
 14924  00055C  C0AE  FFF4         	movff	??_high_isr+3,prodh
 14925  000560  C0AD  FFF3         	movff	??_high_isr+2,prodl
 14926  000564  C0AC  FFDA         	movff	??_high_isr+1,fsr2h
 14927  000568  C0AB  FFD9         	movff	??_high_isr,fsr2l
 14928  00056C  926E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14929  00056E  0011               	retfie		f
 14930  000570                     __end_of_high_isr:
 14931                           	opt stack 0
 14932                           tblptru	equ	0xFF8
 14933                           tblptrh	equ	0xFF7
 14934                           tblptrl	equ	0xFF6
 14935                           tablat	equ	0xFF5
 14936                           prodh	equ	0xFF4
 14937                           prodl	equ	0xFF3
 14938                           intcon	equ	0xFF2
 14939                           intcon2	equ	0xFF1
 14940                           intcon3	equ	0xFF0
 14941                           postinc0	equ	0xFEE
 14942                           wreg	equ	0xFE8
 14943                           postdec1	equ	0xFE5
 14944                           fsr1l	equ	0xFE1
 14945                           bsr	equ	0xFE0
 14946                           indf2	equ	0xFDF
 14947                           postinc2	equ	0xFDE
 14948                           postdec2	equ	0xFDD
 14949                           plusw2	equ	0xFDB
 14950                           fsr2h	equ	0xFDA
 14951                           fsr2l	equ	0xFD9
 14952                           status	equ	0xFD8
 14953                           
 14954 ;; *************** function i2_SYS_ActivityTimerReset *****************
 14955 ;; Defined at:
 14956 ;;		line 59 in file "SYSTEM.c"
 14957 ;; Parameters:    Size  Location     Type
 14958 ;;		None
 14959 ;; Auto vars:     Size  Location     Type
 14960 ;;		None
 14961 ;; Return value:  Size  Location     Type
 14962 ;;		None               void
 14963 ;; Registers used:
 14964 ;;		None
 14965 ;; Tracked objects:
 14966 ;;		On entry : F/0
 14967 ;;		On exit  : F/0
 14968 ;;		Unchanged: F/0
 14969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14970 ;;      Params:         0       0       0       0       0
 14971 ;;      Locals:         0       0       0       0       0
 14972 ;;      Temps:          0       0       0       0       0
 14973 ;;      Totals:         0       0       0       0       0
 14974 ;;Total ram usage:        0 bytes
 14975 ;; Hardware stack levels used:    1
 14976 ;; This function calls:
 14977 ;;		Nothing
 14978 ;; This function is called by:
 14979 ;;		_high_isr
 14980 ;; This function uses a non-reentrant model
 14981 ;;
 14982                           
 14983                           	psect	text96
 14984  000000                     __ptext96:
 14985                           	opt stack 0
 14986  000000                     __end_ofi2_SYS_ActivityTimerReset:
 14987                           	opt stack 0
 14988                           tblptru	equ	0xFF8
 14989                           tblptrh	equ	0xFF7
 14990                           tblptrl	equ	0xFF6
 14991                           tablat	equ	0xFF5
 14992                           prodh	equ	0xFF4
 14993                           prodl	equ	0xFF3
 14994                           intcon	equ	0xFF2
 14995                           intcon2	equ	0xFF1
 14996                           intcon3	equ	0xFF0
 14997                           postinc0	equ	0xFEE
 14998                           wreg	equ	0xFE8
 14999                           postdec1	equ	0xFE5
 15000                           fsr1l	equ	0xFE1
 15001                           bsr	equ	0xFE0
 15002                           indf2	equ	0xFDF
 15003                           postinc2	equ	0xFDE
 15004                           postdec2	equ	0xFDD
 15005                           plusw2	equ	0xFDB
 15006                           fsr2h	equ	0xFDA
 15007                           fsr2l	equ	0xFD9
 15008                           status	equ	0xFD8
 15009                           
 15010 ;; *************** function _TMR_Timer0Status *****************
 15011 ;; Defined at:
 15012 ;;		line 180 in file "TIMERS.c"
 15013 ;; Parameters:    Size  Location     Type
 15014 ;;		None
 15015 ;; Auto vars:     Size  Location     Type
 15016 ;;		None
 15017 ;; Return value:  Size  Location     Type
 15018 ;;                  1    wreg      unsigned char 
 15019 ;; Registers used:
 15020 ;;		wreg
 15021 ;; Tracked objects:
 15022 ;;		On entry : 0/0
 15023 ;;		On exit  : 0/0
 15024 ;;		Unchanged: 0/0
 15025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15026 ;;      Params:         0       0       0       0       0
 15027 ;;      Locals:         0       0       0       0       0
 15028 ;;      Temps:          0       0       0       0       0
 15029 ;;      Totals:         0       0       0       0       0
 15030 ;;Total ram usage:        0 bytes
 15031 ;; Hardware stack levels used:    1
 15032 ;; This function calls:
 15033 ;;		Nothing
 15034 ;; This function is called by:
 15035 ;;		_high_isr
 15036 ;; This function uses a non-reentrant model
 15037 ;;
 15038                           
 15039                           	psect	text97
 15040  001B90                     __ptext97:
 15041                           	opt stack 0
 15042  001B90                     _TMR_Timer0Status:
 15043                           	opt stack 17
 15044                           
 15045                           ;TIMERS.c: 182: if(T0CONbits.TMR0ON)
 15046                           
 15047                           ; BSR set to: 0
 15048                           ;incstack = 0
 15049  001B90  BED5               	btfsc	4053,7,c	;volatile
 15050                           
 15051                           ;TIMERS.c: 183: {
 15052                           ;TIMERS.c: 185: return 1;
 15053  001B92  0C01               	retlw	1
 15054                           
 15055                           ;TIMERS.c: 186: }
 15056                           ;TIMERS.c: 187: return 0;
 15057  001B94  0C00               	retlw	0	;funcret
 15058  001B96                     __end_of_TMR_Timer0Status:
 15059                           	opt stack 0
 15060                           tblptru	equ	0xFF8
 15061                           tblptrh	equ	0xFF7
 15062                           tblptrl	equ	0xFF6
 15063                           tablat	equ	0xFF5
 15064                           prodh	equ	0xFF4
 15065                           prodl	equ	0xFF3
 15066                           intcon	equ	0xFF2
 15067                           intcon2	equ	0xFF1
 15068                           intcon3	equ	0xFF0
 15069                           postinc0	equ	0xFEE
 15070                           wreg	equ	0xFE8
 15071                           postdec1	equ	0xFE5
 15072                           fsr1l	equ	0xFE1
 15073                           bsr	equ	0xFE0
 15074                           indf2	equ	0xFDF
 15075                           postinc2	equ	0xFDE
 15076                           postdec2	equ	0xFDD
 15077                           plusw2	equ	0xFDB
 15078                           fsr2h	equ	0xFDA
 15079                           fsr2l	equ	0xFD9
 15080                           status	equ	0xFD8
 15081                           
 15082 ;; *************** function _TMR_Timer0Start *****************
 15083 ;; Defined at:
 15084 ;;		line 118 in file "TIMERS.c"
 15085 ;; Parameters:    Size  Location     Type
 15086 ;;		None
 15087 ;; Auto vars:     Size  Location     Type
 15088 ;;		None
 15089 ;; Return value:  Size  Location     Type
 15090 ;;		None               void
 15091 ;; Registers used:
 15092 ;;		wreg, status,2, cstack
 15093 ;; Tracked objects:
 15094 ;;		On entry : 0/0
 15095 ;;		On exit  : F/0
 15096 ;;		Unchanged: 0/0
 15097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15098 ;;      Params:         0       0       0       0       0
 15099 ;;      Locals:         0       0       0       0       0
 15100 ;;      Temps:          0       0       0       0       0
 15101 ;;      Totals:         0       0       0       0       0
 15102 ;;Total ram usage:        0 bytes
 15103 ;; Hardware stack levels used:    1
 15104 ;; Hardware stack levels required when called:    2
 15105 ;; This function calls:
 15106 ;;		i2_TMR_ResetTimer0
 15107 ;;		i2_TMR_Timer0
 15108 ;; This function is called by:
 15109 ;;		_high_isr
 15110 ;; This function uses a non-reentrant model
 15111 ;;
 15112                           
 15113                           	psect	text98
 15114  001ACE                     __ptext98:
 15115                           	opt stack 0
 15116  001ACE                     _TMR_Timer0Start:
 15117                           	opt stack 15
 15118                           
 15119                           ;TIMERS.c: 120: TMR_Timer0(0);
 15120                           
 15121                           ;incstack = 0
 15122  001ACE  0E00               	movlw	0
 15123  001AD0  EC6F  F00D         	call	i2_TMR_Timer0
 15124                           
 15125                           ;TIMERS.c: 121: TMR_ResetTimer0();
 15126  001AD4  EC5B  F00C         	call	i2_TMR_ResetTimer0	;wreg free
 15127                           
 15128                           ;TIMERS.c: 122: TMR_Timer0(1);
 15129  001AD8  0E01               	movlw	1
 15130  001ADA  EF6F  F00D         	goto	i2_TMR_Timer0
 15131  001ADE                     __end_of_TMR_Timer0Start:
 15132                           	opt stack 0
 15133                           tblptru	equ	0xFF8
 15134                           tblptrh	equ	0xFF7
 15135                           tblptrl	equ	0xFF6
 15136                           tablat	equ	0xFF5
 15137                           prodh	equ	0xFF4
 15138                           prodl	equ	0xFF3
 15139                           intcon	equ	0xFF2
 15140                           intcon2	equ	0xFF1
 15141                           intcon3	equ	0xFF0
 15142                           postinc0	equ	0xFEE
 15143                           wreg	equ	0xFE8
 15144                           postdec1	equ	0xFE5
 15145                           fsr1l	equ	0xFE1
 15146                           bsr	equ	0xFE0
 15147                           indf2	equ	0xFDF
 15148                           postinc2	equ	0xFDE
 15149                           postdec2	equ	0xFDD
 15150                           plusw2	equ	0xFDB
 15151                           fsr2h	equ	0xFDA
 15152                           fsr2l	equ	0xFD9
 15153                           status	equ	0xFD8
 15154                           
 15155 ;; *************** function i2_TMR_ResetTimer0 *****************
 15156 ;; Defined at:
 15157 ;;		line 268 in file "TIMERS.c"
 15158 ;; Parameters:    Size  Location     Type
 15159 ;;		None
 15160 ;; Auto vars:     Size  Location     Type
 15161 ;;  TMR_ResetTim    1    1[BANK0 ] unsigned char 
 15162 ;; Return value:  Size  Location     Type
 15163 ;;		None               void
 15164 ;; Registers used:
 15165 ;;		wreg, status,2, cstack
 15166 ;; Tracked objects:
 15167 ;;		On entry : F/0
 15168 ;;		On exit  : F/0
 15169 ;;		Unchanged: 0/0
 15170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15171 ;;      Params:         0       0       0       0       0
 15172 ;;      Locals:         0       1       0       0       0
 15173 ;;      Temps:          0       0       0       0       0
 15174 ;;      Totals:         0       1       0       0       0
 15175 ;;Total ram usage:        1 bytes
 15176 ;; Hardware stack levels used:    1
 15177 ;; Hardware stack levels required when called:    1
 15178 ;; This function calls:
 15179 ;;		i2_TMR_Timer0
 15180 ;; This function is called by:
 15181 ;;		_high_isr
 15182 ;;		_TMR_Timer0Start
 15183 ;; This function uses a non-reentrant model
 15184 ;;
 15185                           
 15186                           	psect	text99
 15187  0018B6                     __ptext99:
 15188                           	opt stack 0
 15189  0018B6                     i2_TMR_ResetTimer0:
 15190                           	opt stack 16
 15191                           
 15192                           ; BSR set to: 0
 15193                           ;TIMERS.c: 270: unsigned char TimerOn = T0CONbits.TMR0ON;
 15194                           
 15195                           ; BSR set to: 0
 15196                           ;incstack = 0
 15197  0018B6  0E00               	movlw	0
 15198  0018B8  BED5               	btfsc	4053,7,c	;volatile
 15199  0018BA  0E01               	movlw	1
 15200  0018BC  6F81               	movwf	i2TMR_ResetTimer0@TimerOn& (0+255),b
 15201                           
 15202                           ; BSR set to: 0
 15203                           ;TIMERS.c: 272: TMR_Timer0(0);
 15204  0018BE  0E00               	movlw	0
 15205  0018C0  EC6F  F00D         	call	i2_TMR_Timer0
 15206                           
 15207                           ; BSR set to: 0
 15208                           ;TIMERS.c: 273: TMR0H = 0;
 15209  0018C4  6AD7               	clrf	4055,c	;volatile
 15210                           
 15211                           ; BSR set to: 0
 15212                           ;TIMERS.c: 274: TMR0L = 2;
 15213  0018C6  0E02               	movlw	2
 15214  0018C8  6ED6               	movwf	4054,c	;volatile
 15215                           
 15216                           ; BSR set to: 0
 15217                           ;TIMERS.c: 275: if(TimerOn)
 15218  0018CA  5181               	movf	i2TMR_ResetTimer0@TimerOn& (0+255),w,b
 15219  0018CC  B4D8               	btfsc	status,2,c
 15220  0018CE  0012               	return	
 15221                           
 15222                           ; BSR set to: 0
 15223                           ;TIMERS.c: 276: {
 15224                           ;TIMERS.c: 277: TMR_Timer0(1);
 15225  0018D0  0E01               	movlw	1
 15226  0018D2  EF6F  F00D         	goto	i2_TMR_Timer0
 15227  0018D6                     __end_ofi2_TMR_ResetTimer0:
 15228                           	opt stack 0
 15229                           tblptru	equ	0xFF8
 15230                           tblptrh	equ	0xFF7
 15231                           tblptrl	equ	0xFF6
 15232                           tablat	equ	0xFF5
 15233                           prodh	equ	0xFF4
 15234                           prodl	equ	0xFF3
 15235                           intcon	equ	0xFF2
 15236                           intcon2	equ	0xFF1
 15237                           intcon3	equ	0xFF0
 15238                           postinc0	equ	0xFEE
 15239                           wreg	equ	0xFE8
 15240                           postdec1	equ	0xFE5
 15241                           fsr1l	equ	0xFE1
 15242                           bsr	equ	0xFE0
 15243                           indf2	equ	0xFDF
 15244                           postinc2	equ	0xFDE
 15245                           postdec2	equ	0xFDD
 15246                           plusw2	equ	0xFDB
 15247                           fsr2h	equ	0xFDA
 15248                           fsr2l	equ	0xFD9
 15249                           status	equ	0xFD8
 15250                           
 15251 ;; *************** function i2_TMR_Timer0 *****************
 15252 ;; Defined at:
 15253 ;;		line 211 in file "TIMERS.c"
 15254 ;; Parameters:    Size  Location     Type
 15255 ;;  state           1    wreg     unsigned char 
 15256 ;; Auto vars:     Size  Location     Type
 15257 ;;  state           1    0[BANK0 ] unsigned char 
 15258 ;; Return value:  Size  Location     Type
 15259 ;;		None               void
 15260 ;; Registers used:
 15261 ;;		wreg, status,2
 15262 ;; Tracked objects:
 15263 ;;		On entry : 0/1
 15264 ;;		On exit  : F/0
 15265 ;;		Unchanged: 0/0
 15266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15267 ;;      Params:         0       0       0       0       0
 15268 ;;      Locals:         0       1       0       0       0
 15269 ;;      Temps:          0       0       0       0       0
 15270 ;;      Totals:         0       1       0       0       0
 15271 ;;Total ram usage:        1 bytes
 15272 ;; Hardware stack levels used:    1
 15273 ;; This function calls:
 15274 ;;		Nothing
 15275 ;; This function is called by:
 15276 ;;		_high_isr
 15277 ;;		_TMR_Timer0Start
 15278 ;;		i2_TMR_ResetTimer0
 15279 ;; This function uses a non-reentrant model
 15280 ;;
 15281                           
 15282                           	psect	text100
 15283  001ADE                     __ptext100:
 15284                           	opt stack 0
 15285  001ADE                     i2_TMR_Timer0:
 15286                           	opt stack 17
 15287                           
 15288                           ; BSR set to: 0
 15289                           ;incstack = 0
 15290                           ;i2TMR_Timer0@state stored from wreg
 15291  001ADE  0100               	movlb	0	; () banked
 15292  001AE0  6F80               	movwf	i2TMR_Timer0@state& (0+255),b
 15293                           
 15294                           ;TIMERS.c: 213: if(state)
 15295  001AE2  5180               	movf	i2TMR_Timer0@state& (0+255),w,b
 15296  001AE4  E002               	bz	i2l838
 15297                           
 15298                           ; BSR set to: 0
 15299                           ;TIMERS.c: 214: {
 15300                           ;TIMERS.c: 216: T0CONbits.TMR0ON = 1;
 15301  001AE6  8ED5               	bsf	4053,7,c	;volatile
 15302                           
 15303                           ;TIMERS.c: 217: }
 15304  001AE8  0012               	return	
 15305  001AEA                     i2l838:
 15306                           
 15307                           ; BSR set to: 0
 15308                           ;TIMERS.c: 218: else
 15309                           ;TIMERS.c: 219: {
 15310                           ;TIMERS.c: 221: T0CONbits.TMR0ON = 0;
 15311  001AEA  9ED5               	bcf	4053,7,c	;volatile
 15312                           
 15313                           ; BSR set to: 0
 15314  001AEC  0012               	return		;funcret
 15315  001AEE                     __end_ofi2_TMR_Timer0:
 15316                           	opt stack 0
 15317                           tblptru	equ	0xFF8
 15318                           tblptrh	equ	0xFF7
 15319                           tblptrl	equ	0xFF6
 15320                           tablat	equ	0xFF5
 15321                           prodh	equ	0xFF4
 15322                           prodl	equ	0xFF3
 15323                           intcon	equ	0xFF2
 15324                           intcon2	equ	0xFF1
 15325                           intcon3	equ	0xFF0
 15326                           postinc0	equ	0xFEE
 15327                           wreg	equ	0xFE8
 15328                           postdec1	equ	0xFE5
 15329                           fsr1l	equ	0xFE1
 15330                           bsr	equ	0xFE0
 15331                           indf2	equ	0xFDF
 15332                           postinc2	equ	0xFDE
 15333                           postdec2	equ	0xFDD
 15334                           plusw2	equ	0xFDB
 15335                           fsr2h	equ	0xFDA
 15336                           fsr2l	equ	0xFD9
 15337                           status	equ	0xFD8
 15338                           
 15339 ;; *************** function _RF_CheckCode *****************
 15340 ;; Defined at:
 15341 ;;		line 175 in file "RF.c"
 15342 ;; Parameters:    Size  Location     Type
 15343 ;;		None
 15344 ;; Auto vars:     Size  Location     Type
 15345 ;;  High            3   39[BANK0 ] unsigned char 
 15346 ;;  Low             3   36[BANK0 ] unsigned char 
 15347 ;;  i               1   42[BANK0 ] unsigned char 
 15348 ;; Return value:  Size  Location     Type
 15349 ;;                  1    wreg      unsigned char 
 15350 ;; Registers used:
 15351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15352 ;; Tracked objects:
 15353 ;;		On entry : F/1
 15354 ;;		On exit  : E/0
 15355 ;;		Unchanged: 0/0
 15356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15357 ;;      Params:         0       0       0       0       0
 15358 ;;      Locals:         0       7       0       0       0
 15359 ;;      Temps:          0       2       0       0       0
 15360 ;;      Totals:         0       9       0       0       0
 15361 ;;Total ram usage:        9 bytes
 15362 ;; Hardware stack levels used:    1
 15363 ;; Hardware stack levels required when called:    4
 15364 ;; This function calls:
 15365 ;;		i2_FSH_Write_IR_RF
 15366 ;;		i2_RF_LoadCode
 15367 ;;		i2___ftge
 15368 ;;		i2___ftmul
 15369 ;;		i2___lwtoft
 15370 ;; This function is called by:
 15371 ;;		_high_isr
 15372 ;; This function uses a non-reentrant model
 15373 ;;
 15374                           
 15375                           	psect	text101
 15376  003C10                     __ptext101:
 15377                           	opt stack 0
 15378  003C10                     _RF_CheckCode:
 15379                           	opt stack 13
 15380                           
 15381                           ; BSR set to: 1
 15382                           ;RF.c: 179: double High = 0.0;
 15383                           
 15384                           ; BSR set to: 0
 15385                           ;incstack = 0
 15386  003C10  0100               	movlb	0	; () banked
 15387  003C12  6BA7               	clrf	RF_CheckCode@High& (0+255),b
 15388  003C14  6BA8               	clrf	(RF_CheckCode@High+1)& (0+255),b
 15389  003C16  6BA9               	clrf	(RF_CheckCode@High+2)& (0+255),b
 15390                           
 15391                           ; BSR set to: 0
 15392                           ;RF.c: 181: if(System_State == 8)
 15393  003C18  0E08               	movlw	8
 15394  003C1A  0101               	movlb	1	; () banked
 15395  003C1C  19AE               	xorwf	_System_State& (0+255),w,b	;volatile
 15396  003C1E  E001 D0DB          	bnz	i2l6144
 15397                           
 15398                           ; BSR set to: 1
 15399                           ;RF.c: 182: {
 15400                           ;RF.c: 183: for(i=0; i<RF_CodeSize;i++)
 15401  003C22  0100               	movlb	0	; () banked
 15402  003C24  6BAA               	clrf	RF_CheckCode@i& (0+255),b
 15403  003C26  D0D3               	goto	i2l6136
 15404  003C28                     i2l6120:
 15405                           
 15406                           ; BSR set to: 0
 15407                           ;RF.c: 184: {
 15408                           ;RF.c: 185: if(i == 0)
 15409  003C28  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15410  003C2A  E149               	bnz	i2l6124
 15411                           
 15412                           ; BSR set to: 0
 15413                           ;RF.c: 186: {
 15414                           ;RF.c: 187: Low = (double)RF_SavedTiming[i] * (1.0 - 0.02);
 15415  003C2C  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15416  003C2E  0D02               	mullw	2
 15417  003C30  0E80               	movlw	128
 15418  003C32  24F3               	addwf	prodl,w,c
 15419  003C34  6EF6               	movwf	tblptrl,c
 15420  003C36  0E25               	movlw	37
 15421  003C38  20F4               	addwfc	prodh,w,c
 15422  003C3A  6EF7               	movwf	tblptrh,c
 15423  003C3C  6AF8               	clrf	tblptru,c
 15424  003C3E  0E00               	movlw	0
 15425  003C40  22F8               	addwfc	tblptru,f,c
 15426  003C42  0009               	tblrd		*+
 15427  003C44  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15428  003C48  000A               	tblrd		*-
 15429  003C4A  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15430  003C4E  ECC6  F00B         	call	i2___lwtoft	;wreg free
 15431  003C52  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15432  003C56  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15433  003C5A  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15434  003C5E  0EE1               	movlw	225
 15435  003C60  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15436  003C62  0E7A               	movlw	122
 15437  003C64  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15438  003C66  0E3F               	movlw	63
 15439  003C68  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15440  003C6A  EC8E  F003         	call	i2___ftmul	;wreg free
 15441  003C6E  C08B  F0A4         	movff	?i2___ftmul,RF_CheckCode@Low
 15442  003C72  C08C  F0A5         	movff	?i2___ftmul+1,RF_CheckCode@Low+1
 15443  003C76  C08D  F0A6         	movff	?i2___ftmul+2,RF_CheckCode@Low+2
 15444                           
 15445                           ;RF.c: 188: High = (double)RF_SavedTiming[i] * (1.0 + 0.02);
 15446  003C7A  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15447  003C7C  0D02               	mullw	2
 15448  003C7E  0E80               	movlw	128
 15449  003C80  24F3               	addwf	prodl,w,c
 15450  003C82  6EF6               	movwf	tblptrl,c
 15451  003C84  0E25               	movlw	37
 15452  003C86  20F4               	addwfc	prodh,w,c
 15453  003C88  6EF7               	movwf	tblptrh,c
 15454  003C8A  6AF8               	clrf	tblptru,c
 15455  003C8C  0E00               	movlw	0
 15456  003C8E  22F8               	addwfc	tblptru,f,c
 15457  003C90  0009               	tblrd		*+
 15458  003C92  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15459  003C96  000A               	tblrd		*-
 15460  003C98  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15461  003C9C  ECC6  F00B         	call	i2___lwtoft	;wreg free
 15462  003CA0  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15463  003CA4  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15464  003CA8  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15465  003CAC  0E8F               	movlw	143
 15466  003CAE  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15467  003CB0  0E82               	movlw	130
 15468  003CB2  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15469  003CB4  0E3F               	movlw	63
 15470  003CB6  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15471  003CB8  EC8E  F003         	call	i2___ftmul	;wreg free
 15472  003CBC  D045               	goto	L7
 15473  003CBE                     i2l6124:
 15474                           
 15475                           ; BSR set to: 0
 15476                           ;RF.c: 190: else
 15477                           ;RF.c: 191: {
 15478                           ;RF.c: 192: Low = (double)RF_SavedTiming[i] * (1.0 - 0.5);
 15479  003CBE  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15480  003CC0  0D02               	mullw	2
 15481  003CC2  0E80               	movlw	128
 15482  003CC4  24F3               	addwf	prodl,w,c
 15483  003CC6  6EF6               	movwf	tblptrl,c
 15484  003CC8  0E25               	movlw	37
 15485  003CCA  20F4               	addwfc	prodh,w,c
 15486  003CCC  6EF7               	movwf	tblptrh,c
 15487  003CCE  6AF8               	clrf	tblptru,c
 15488  003CD0  0E00               	movlw	0
 15489  003CD2  22F8               	addwfc	tblptru,f,c
 15490  003CD4  0009               	tblrd		*+
 15491  003CD6  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15492  003CDA  000A               	tblrd		*-
 15493  003CDC  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15494  003CE0  ECC6  F00B         	call	i2___lwtoft	;wreg free
 15495  003CE4  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15496  003CE8  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15497  003CEC  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15498  003CF0  6B8E               	clrf	i2___ftmul@f2& (0+255),b
 15499  003CF2  6B8F               	clrf	(i2___ftmul@f2+1)& (0+255),b
 15500  003CF4  0E3F               	movlw	63
 15501  003CF6  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15502  003CF8  EC8E  F003         	call	i2___ftmul	;wreg free
 15503  003CFC  C08B  F0A4         	movff	?i2___ftmul,RF_CheckCode@Low
 15504  003D00  C08C  F0A5         	movff	?i2___ftmul+1,RF_CheckCode@Low+1
 15505  003D04  C08D  F0A6         	movff	?i2___ftmul+2,RF_CheckCode@Low+2
 15506                           
 15507                           ;RF.c: 193: High = (double)RF_SavedTiming[i] * (1.0 + 0.5);
 15508  003D08  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15509  003D0A  0D02               	mullw	2
 15510  003D0C  0E80               	movlw	128
 15511  003D0E  24F3               	addwf	prodl,w,c
 15512  003D10  6EF6               	movwf	tblptrl,c
 15513  003D12  0E25               	movlw	37
 15514  003D14  20F4               	addwfc	prodh,w,c
 15515  003D16  6EF7               	movwf	tblptrh,c
 15516  003D18  6AF8               	clrf	tblptru,c
 15517  003D1A  0E00               	movlw	0
 15518  003D1C  22F8               	addwfc	tblptru,f,c
 15519  003D1E  0009               	tblrd		*+
 15520  003D20  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15521  003D24  000A               	tblrd		*-
 15522  003D26  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15523  003D2A  ECC6  F00B         	call	i2___lwtoft	;wreg free
 15524  003D2E  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15525  003D32  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15526  003D36  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15527  003D3A  6B8E               	clrf	i2___ftmul@f2& (0+255),b
 15528  003D3C  0EC0               	movlw	192
 15529  003D3E  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15530  003D40  0E3F               	movlw	63
 15531  003D42  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15532  003D44  EC8E  F003         	call	i2___ftmul	;wreg free
 15533  003D48                     L7:
 15534  003D48  C08B  F0A7         	movff	?i2___ftmul,RF_CheckCode@High
 15535  003D4C  C08C  F0A8         	movff	?i2___ftmul+1,RF_CheckCode@High+1
 15536  003D50  C08D  F0A9         	movff	?i2___ftmul+2,RF_CheckCode@High+2
 15537                           
 15538                           ; BSR set to: 0
 15539                           ;RF.c: 194: }
 15540                           ;RF.c: 196: if((double)RF_DataTiming[i] < Low || (double)RF_DataTiming[i] > High )
 15541  003D54  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15542  003D56  0D02               	mullw	2
 15543  003D58  0E07               	movlw	low _RF_DataTiming
 15544  003D5A  24F3               	addwf	prodl,w,c
 15545  003D5C  6ED9               	movwf	fsr2l,c
 15546  003D5E  0E01               	movlw	high _RF_DataTiming
 15547  003D60  20F4               	addwfc	prodh,w,c
 15548  003D62  6EDA               	movwf	fsr2h,c
 15549  003D64  CFDE F088          	movff	postinc2,i2___lwtoft@c
 15550  003D68  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 15551  003D6C  ECC6  F00B         	call	i2___lwtoft	;wreg free
 15552  003D70  C088  F08B         	movff	?i2___lwtoft,i2___ftge@ff1
 15553  003D74  C089  F08C         	movff	?i2___lwtoft+1,i2___ftge@ff1+1
 15554  003D78  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftge@ff1+2
 15555  003D7C  C0A4  F08E         	movff	RF_CheckCode@Low,i2___ftge@ff2
 15556  003D80  C0A5  F08F         	movff	RF_CheckCode@Low+1,i2___ftge@ff2+1
 15557  003D84  C0A6  F090         	movff	RF_CheckCode@Low+2,i2___ftge@ff2+2
 15558  003D88  EC95  F009         	call	i2___ftge	;wreg free
 15559  003D8C  A0D8               	btfss	status,0,c
 15560  003D8E  0C00               	retlw	0
 15561                           
 15562                           ; BSR set to: 0
 15563  003D90  C0A7  F08B         	movff	RF_CheckCode@High,i2___ftge@ff1
 15564  003D94  C0A8  F08C         	movff	RF_CheckCode@High+1,i2___ftge@ff1+1
 15565  003D98  C0A9  F08D         	movff	RF_CheckCode@High+2,i2___ftge@ff1+2
 15566  003D9C  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15567  003D9E  0D02               	mullw	2
 15568  003DA0  0E07               	movlw	low _RF_DataTiming
 15569  003DA2  24F3               	addwf	prodl,w,c
 15570  003DA4  6ED9               	movwf	fsr2l,c
 15571  003DA6  0E01               	movlw	high _RF_DataTiming
 15572  003DA8  20F4               	addwfc	prodh,w,c
 15573  003DAA  6EDA               	movwf	fsr2h,c
 15574  003DAC  CFDE F088          	movff	postinc2,i2___lwtoft@c
 15575  003DB0  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 15576  003DB4  ECC6  F00B         	call	i2___lwtoft	;wreg free
 15577  003DB8  C088  F08E         	movff	?i2___lwtoft,i2___ftge@ff2
 15578  003DBC  C089  F08F         	movff	?i2___lwtoft+1,i2___ftge@ff2+1
 15579  003DC0  C08A  F090         	movff	?i2___lwtoft+2,i2___ftge@ff2+2
 15580  003DC4  EC95  F009         	call	i2___ftge	;wreg free
 15581  003DC8  E201               	bc	i2l6134
 15582                           
 15583                           ;RF.c: 197: {
 15584                           ;RF.c: 198: return 0;
 15585  003DCA  0C00               	retlw	0
 15586  003DCC                     i2l6134:
 15587                           
 15588                           ; BSR set to: 0
 15589  003DCC  2BAA               	incf	RF_CheckCode@i& (0+255),f,b
 15590  003DCE                     i2l6136:
 15591                           
 15592                           ; BSR set to: 0
 15593  003DCE  51C8               	movf	_RF_CodeSize& (0+255),w,b
 15594  003DD0  5DAA               	subwf	RF_CheckCode@i& (0+255),w,b
 15595  003DD2  E201 D729          	bnc	i2l6120
 15596                           
 15597                           ; BSR set to: 0
 15598                           ;RF.c: 199: }
 15599                           ;RF.c: 200: }
 15600                           ;RF.c: 201: return 1;
 15601  003DD6  0C01               	retlw	1
 15602  003DD8                     i2l6144:
 15603                           
 15604                           ; BSR set to: 1
 15605                           ;RF.c: 203: else
 15606                           ;RF.c: 204: {
 15607                           ;RF.c: 205: if(RF_DataPlace >= 20)
 15608  003DD8  0E13               	movlw	19
 15609  003DDA  0100               	movlb	0	; () banked
 15610  003DDC  65C9               	cpfsgt	_RF_DataPlace& (0+255),b
 15611  003DDE  0C00               	retlw	0
 15612                           
 15613                           ; BSR set to: 0
 15614                           ;RF.c: 206: {
 15615                           ;RF.c: 207: for(i=0;i<RF_DataPlace;i++)
 15616  003DE0  6BAA               	clrf	RF_CheckCode@i& (0+255),b
 15617  003DE2  D010               	goto	i2l6156
 15618  003DE4                     i2l6148:
 15619                           
 15620                           ; BSR set to: 0
 15621                           ;RF.c: 208: {
 15622                           ;RF.c: 209: if(RF_DataTiming[i] < 5)
 15623  003DE4  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15624  003DE6  0D02               	mullw	2
 15625  003DE8  0E07               	movlw	low _RF_DataTiming
 15626  003DEA  24F3               	addwf	prodl,w,c
 15627  003DEC  6ED9               	movwf	fsr2l,c
 15628  003DEE  0E01               	movlw	high _RF_DataTiming
 15629  003DF0  20F4               	addwfc	prodh,w,c
 15630  003DF2  6EDA               	movwf	fsr2h,c
 15631  003DF4  0E01               	movlw	1
 15632  003DF6  50DB               	movf	plusw2,w,c
 15633  003DF8  E104               	bnz	i2l6154
 15634  003DFA  0E05               	movlw	5
 15635  003DFC  5CDE               	subwf	postinc2,w,c
 15636  003DFE  E201               	bc	i2l6154
 15637  003E00  0C00               	retlw	0
 15638  003E02                     i2l6154:
 15639                           
 15640                           ; BSR set to: 0
 15641  003E02  2BAA               	incf	RF_CheckCode@i& (0+255),f,b
 15642  003E04                     i2l6156:
 15643                           
 15644                           ; BSR set to: 0
 15645  003E04  51C9               	movf	_RF_DataPlace& (0+255),w,b
 15646  003E06  5DAA               	subwf	RF_CheckCode@i& (0+255),w,b
 15647  003E08  E3ED               	bnc	i2l6148
 15648                           
 15649                           ; BSR set to: 0
 15650                           ;RF.c: 213: }
 15651                           ;RF.c: 214: }
 15652                           ;RF.c: 216: for(i=RF_DataPlace;i<64;i++)
 15653  003E0A  C0C9  F0AA         	movff	_RF_DataPlace,RF_CheckCode@i
 15654  003E0E                     i2l6158:
 15655                           
 15656                           ; BSR set to: 0
 15657  003E0E  0E3F               	movlw	63
 15658  003E10  65AA               	cpfsgt	RF_CheckCode@i& (0+255),b
 15659  003E12  D001               	goto	i2l6162
 15660  003E14  D00C               	goto	i2l6168
 15661  003E16                     i2l6162:
 15662                           
 15663                           ; BSR set to: 0
 15664                           ;RF.c: 217: {
 15665                           ;RF.c: 219: RF_DataTiming[i] = 0;
 15666  003E16  51AA               	movf	RF_CheckCode@i& (0+255),w,b
 15667  003E18  0D02               	mullw	2
 15668  003E1A  0E07               	movlw	low _RF_DataTiming
 15669  003E1C  24F3               	addwf	prodl,w,c
 15670  003E1E  6ED9               	movwf	fsr2l,c
 15671  003E20  0E01               	movlw	high _RF_DataTiming
 15672  003E22  20F4               	addwfc	prodh,w,c
 15673  003E24  6EDA               	movwf	fsr2h,c
 15674  003E26  6ADE               	clrf	postinc2,c
 15675  003E28  6ADD               	clrf	postdec2,c
 15676                           
 15677                           ; BSR set to: 0
 15678  003E2A  2BAA               	incf	RF_CheckCode@i& (0+255),f,b
 15679  003E2C  D7F0               	goto	i2l6158
 15680  003E2E                     i2l6168:
 15681                           
 15682                           ; BSR set to: 0
 15683                           ;RF.c: 220: }
 15684                           ;RF.c: 223: RF_Saved = 90;
 15685  003E2E  0E5A               	movlw	90
 15686  003E30  0101               	movlb	1	; () banked
 15687  003E32  6FAD               	movwf	_RF_Saved& (0+255),b
 15688                           
 15689                           ; BSR set to: 1
 15690                           ;RF.c: 224: Flash_Status = FSH_Write_IR_RF();
 15691  003E34  EC82  F017         	call	i2_FSH_Write_IR_RF	;wreg free
 15692  003E38  0101               	movlb	1	; () banked
 15693  003E3A  6F03               	movwf	_Flash_Status& (0+255),b
 15694                           
 15695                           ; BSR set to: 1
 15696                           ;RF.c: 225: if(Flash_Status)
 15697  003E3C  5103               	movf	_Flash_Status& (0+255),w,b
 15698  003E3E  E002               	bz	i2l6176
 15699                           
 15700                           ; BSR set to: 1
 15701                           ;RF.c: 226: {
 15702                           ;RF.c: 227: RF_LoadCode();
 15703  003E40  ECAE  F001         	call	i2_RF_LoadCode	;wreg free
 15704  003E44                     i2l6176:
 15705                           
 15706                           ;RF.c: 228: }
 15707                           ;RF.c: 229: System_State = 8;
 15708  003E44  0E08               	movlw	8
 15709  003E46  0101               	movlb	1	; () banked
 15710  003E48  6FAE               	movwf	_System_State& (0+255),b	;volatile
 15711  003E4A  0C00               	retlw	0
 15712  003E4C                     __end_of_RF_CheckCode:
 15713                           	opt stack 0
 15714                           tblptru	equ	0xFF8
 15715                           tblptrh	equ	0xFF7
 15716                           tblptrl	equ	0xFF6
 15717                           tablat	equ	0xFF5
 15718                           prodh	equ	0xFF4
 15719                           prodl	equ	0xFF3
 15720                           intcon	equ	0xFF2
 15721                           intcon2	equ	0xFF1
 15722                           intcon3	equ	0xFF0
 15723                           postinc0	equ	0xFEE
 15724                           wreg	equ	0xFE8
 15725                           postdec1	equ	0xFE5
 15726                           fsr1l	equ	0xFE1
 15727                           bsr	equ	0xFE0
 15728                           indf2	equ	0xFDF
 15729                           postinc2	equ	0xFDE
 15730                           postdec2	equ	0xFDD
 15731                           plusw2	equ	0xFDB
 15732                           fsr2h	equ	0xFDA
 15733                           fsr2l	equ	0xFD9
 15734                           status	equ	0xFD8
 15735                           
 15736 ;; *************** function i2_RF_LoadCode *****************
 15737 ;; Defined at:
 15738 ;;		line 127 in file "RF.c"
 15739 ;; Parameters:    Size  Location     Type
 15740 ;;		None
 15741 ;; Auto vars:     Size  Location     Type
 15742 ;;  RF_LoadCode     3   28[BANK0 ] unsigned char 
 15743 ;;  RF_LoadCode     3   25[BANK0 ] unsigned char 
 15744 ;; Return value:  Size  Location     Type
 15745 ;;		None               void
 15746 ;; Registers used:
 15747 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15748 ;; Tracked objects:
 15749 ;;		On entry : F/1
 15750 ;;		On exit  : F/0
 15751 ;;		Unchanged: 0/0
 15752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15753 ;;      Params:         0       0       0       0       0
 15754 ;;      Locals:         0       6       0       0       0
 15755 ;;      Temps:          0       0       0       0       0
 15756 ;;      Totals:         0       6       0       0       0
 15757 ;;Total ram usage:        6 bytes
 15758 ;; Hardware stack levels used:    1
 15759 ;; Hardware stack levels required when called:    2
 15760 ;; This function calls:
 15761 ;;		i2_RF_CalculateCodesize
 15762 ;;		i2___ftge
 15763 ;;		i2___ftmul
 15764 ;;		i2___fttol
 15765 ;;		i2___lwtoft
 15766 ;; This function is called by:
 15767 ;;		_RF_CheckCode
 15768 ;; This function uses a non-reentrant model
 15769 ;;
 15770                           
 15771                           	psect	text102
 15772  00035C                     __ptext102:
 15773                           	opt stack 0
 15774  00035C                     i2_RF_LoadCode:
 15775                           	opt stack 14
 15776                           
 15777                           ; BSR set to: 1
 15778                           ;RF.c: 130: double High = 0.0;
 15779                           
 15780                           ;incstack = 0
 15781  00035C  0100               	movlb	0	; () banked
 15782  00035E  6B9C               	clrf	i2RF_LoadCode@High& (0+255),b
 15783  000360  6B9D               	clrf	(i2RF_LoadCode@High+1)& (0+255),b
 15784  000362  6B9E               	clrf	(i2RF_LoadCode@High+2)& (0+255),b
 15785                           
 15786                           ; BSR set to: 0
 15787                           ;RF.c: 132: Low = (double)RF_SavedTiming[0] * (1.0 - 0.02);
 15788  000364  0E80               	movlw	128
 15789  000366  6EF6               	movwf	tblptrl,c
 15790  000368                     	if	1	;There is more than 1 active tblptr byte
 15791  000368  0E25               	movlw	37
 15792  00036A  6EF7               	movwf	tblptrh,c
 15793  00036C                     	endif
 15794  00036C                     	if	0	;There are less than 3 active tblptr bytes
 15795  00036C                     	endif
 15796  00036C  0009               	tblrd		*+
 15797  00036E  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15798  000372  000A               	tblrd		*-
 15799  000374  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15800  000378  ECC6  F00B         	call	i2___lwtoft	;wreg free
 15801  00037C  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15802  000380  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15803  000384  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15804  000388  0EE1               	movlw	225
 15805  00038A  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15806  00038C  0E7A               	movlw	122
 15807  00038E  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15808  000390  0E3F               	movlw	63
 15809  000392  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15810  000394  EC8E  F003         	call	i2___ftmul	;wreg free
 15811  000398  C08B  F099         	movff	?i2___ftmul,i2RF_LoadCode@Low
 15812  00039C  C08C  F09A         	movff	?i2___ftmul+1,i2RF_LoadCode@Low+1
 15813  0003A0  C08D  F09B         	movff	?i2___ftmul+2,i2RF_LoadCode@Low+2
 15814                           
 15815                           ;RF.c: 133: High = (double)RF_SavedTiming[0] * (1.0 + 0.02);
 15816  0003A4  0E80               	movlw	128
 15817  0003A6  6EF6               	movwf	tblptrl,c
 15818  0003A8                     	if	1	;There is more than 1 active tblptr byte
 15819  0003A8  0E25               	movlw	37
 15820  0003AA  6EF7               	movwf	tblptrh,c
 15821  0003AC                     	endif
 15822  0003AC                     	if	0	;There are less than 3 active tblptr bytes
 15823  0003AC                     	endif
 15824  0003AC  0009               	tblrd		*+
 15825  0003AE  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15826  0003B2  000A               	tblrd		*-
 15827  0003B4  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15828  0003B8  ECC6  F00B         	call	i2___lwtoft	;wreg free
 15829  0003BC  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15830  0003C0  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15831  0003C4  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15832  0003C8  0E8F               	movlw	143
 15833  0003CA  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15834  0003CC  0E82               	movlw	130
 15835  0003CE  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15836  0003D0  0E3F               	movlw	63
 15837  0003D2  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15838  0003D4  EC8E  F003         	call	i2___ftmul	;wreg free
 15839  0003D8  C08B  F09C         	movff	?i2___ftmul,i2RF_LoadCode@High
 15840  0003DC  C08C  F09D         	movff	?i2___ftmul+1,i2RF_LoadCode@High+1
 15841  0003E0  C08D  F09E         	movff	?i2___ftmul+2,i2RF_LoadCode@High+2
 15842                           
 15843                           ; BSR set to: 0
 15844                           ;RF.c: 135: if(Low < 300)
 15845  0003E4  C099  F08B         	movff	i2RF_LoadCode@Low,i2___ftge@ff1
 15846  0003E8  C09A  F08C         	movff	i2RF_LoadCode@Low+1,i2___ftge@ff1+1
 15847  0003EC  C09B  F08D         	movff	i2RF_LoadCode@Low+2,i2___ftge@ff1+2
 15848  0003F0  6B8E               	clrf	i2___ftge@ff2& (0+255),b
 15849  0003F2  0E96               	movlw	150
 15850  0003F4  6F8F               	movwf	(i2___ftge@ff2+1)& (0+255),b
 15851  0003F6  0E43               	movlw	67
 15852  0003F8  6F90               	movwf	(i2___ftge@ff2+2)& (0+255),b
 15853  0003FA  EC95  F009         	call	i2___ftge	;wreg free
 15854  0003FE  E205               	bc	i2l5604
 15855                           
 15856                           ; BSR set to: 0
 15857                           ;RF.c: 136: {
 15858                           ;RF.c: 137: Low = 300;
 15859  000400  6B99               	clrf	i2RF_LoadCode@Low& (0+255),b
 15860  000402  0E96               	movlw	150
 15861  000404  6F9A               	movwf	(i2RF_LoadCode@Low+1)& (0+255),b
 15862  000406  0E43               	movlw	67
 15863  000408  6F9B               	movwf	(i2RF_LoadCode@Low+2)& (0+255),b
 15864  00040A                     i2l5604:
 15865                           
 15866                           ; BSR set to: 0
 15867                           ;RF.c: 138: }
 15868                           ;RF.c: 139: if(High > 1400)
 15869  00040A  6B8B               	clrf	i2___ftge@ff1& (0+255),b
 15870  00040C  0EAF               	movlw	175
 15871  00040E  6F8C               	movwf	(i2___ftge@ff1+1)& (0+255),b
 15872  000410  0E44               	movlw	68
 15873  000412  6F8D               	movwf	(i2___ftge@ff1+2)& (0+255),b
 15874  000414  C09C  F08E         	movff	i2RF_LoadCode@High,i2___ftge@ff2
 15875  000418  C09D  F08F         	movff	i2RF_LoadCode@High+1,i2___ftge@ff2+1
 15876  00041C  C09E  F090         	movff	i2RF_LoadCode@High+2,i2___ftge@ff2+2
 15877  000420  EC95  F009         	call	i2___ftge	;wreg free
 15878  000424  E205               	bc	i2l5608
 15879                           
 15880                           ; BSR set to: 0
 15881                           ;RF.c: 140: {
 15882                           ;RF.c: 141: High = 1400;
 15883  000426  6B9C               	clrf	i2RF_LoadCode@High& (0+255),b
 15884  000428  0EAF               	movlw	175
 15885  00042A  6F9D               	movwf	(i2RF_LoadCode@High+1)& (0+255),b
 15886  00042C  0E44               	movlw	68
 15887  00042E  6F9E               	movwf	(i2RF_LoadCode@High+2)& (0+255),b
 15888  000430                     i2l5608:
 15889                           
 15890                           ; BSR set to: 0
 15891                           ;RF.c: 142: }
 15892                           ;RF.c: 144: RF_SyncLow = (unsigned int) Low;
 15893  000430  C099  F080         	movff	i2RF_LoadCode@Low,i2___fttol@f1
 15894  000434  C09A  F081         	movff	i2RF_LoadCode@Low+1,i2___fttol@f1+1
 15895  000438  C09B  F082         	movff	i2RF_LoadCode@Low+2,i2___fttol@f1+2
 15896  00043C  ECBE  F004         	call	i2___fttol	;wreg free
 15897  000440  C080  F0C2         	movff	?i2___fttol,_RF_SyncLow
 15898  000444  C081  F0C3         	movff	?i2___fttol+1,_RF_SyncLow+1
 15899                           
 15900                           ; BSR set to: 0
 15901                           ;RF.c: 145: RF_SyncHigh = (unsigned int) High;
 15902  000448  C09C  F080         	movff	i2RF_LoadCode@High,i2___fttol@f1
 15903  00044C  C09D  F081         	movff	i2RF_LoadCode@High+1,i2___fttol@f1+1
 15904  000450  C09E  F082         	movff	i2RF_LoadCode@High+2,i2___fttol@f1+2
 15905  000454  ECBE  F004         	call	i2___fttol	;wreg free
 15906  000458  C080  F0C0         	movff	?i2___fttol,_RF_SyncHigh
 15907  00045C  C081  F0C1         	movff	?i2___fttol+1,_RF_SyncHigh+1
 15908                           
 15909                           ; BSR set to: 0
 15910                           ;RF.c: 147: RF_CodeSize = RF_CalculateCodesize();
 15911  000460  ECF9  F00A         	call	i2_RF_CalculateCodesize	;wreg free
 15912  000464  6FC8               	movwf	_RF_CodeSize& (0+255),b
 15913                           
 15914                           ; BSR set to: 0
 15915  000466  0012               	return		;funcret
 15916  000468                     __end_ofi2_RF_LoadCode:
 15917                           	opt stack 0
 15918                           tblptru	equ	0xFF8
 15919                           tblptrh	equ	0xFF7
 15920                           tblptrl	equ	0xFF6
 15921                           tablat	equ	0xFF5
 15922                           prodh	equ	0xFF4
 15923                           prodl	equ	0xFF3
 15924                           intcon	equ	0xFF2
 15925                           intcon2	equ	0xFF1
 15926                           intcon3	equ	0xFF0
 15927                           postinc0	equ	0xFEE
 15928                           wreg	equ	0xFE8
 15929                           postdec1	equ	0xFE5
 15930                           fsr1l	equ	0xFE1
 15931                           bsr	equ	0xFE0
 15932                           indf2	equ	0xFDF
 15933                           postinc2	equ	0xFDE
 15934                           postdec2	equ	0xFDD
 15935                           plusw2	equ	0xFDB
 15936                           fsr2h	equ	0xFDA
 15937                           fsr2l	equ	0xFD9
 15938                           status	equ	0xFD8
 15939                           
 15940 ;; *************** function i2___lwtoft *****************
 15941 ;; Defined at:
 15942 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
 15943 ;; Parameters:    Size  Location     Type
 15944 ;;  c               2    8[BANK0 ] unsigned int 
 15945 ;; Auto vars:     Size  Location     Type
 15946 ;;		None
 15947 ;; Return value:  Size  Location     Type
 15948 ;;                  3    8[BANK0 ] float 
 15949 ;; Registers used:
 15950 ;;		wreg, status,2, status,0, cstack
 15951 ;; Tracked objects:
 15952 ;;		On entry : F/0
 15953 ;;		On exit  : F/0
 15954 ;;		Unchanged: 0/0
 15955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15956 ;;      Params:         0       3       0       0       0
 15957 ;;      Locals:         0       0       0       0       0
 15958 ;;      Temps:          0       0       0       0       0
 15959 ;;      Totals:         0       3       0       0       0
 15960 ;;Total ram usage:        3 bytes
 15961 ;; Hardware stack levels used:    1
 15962 ;; Hardware stack levels required when called:    1
 15963 ;; This function calls:
 15964 ;;		i2___ftpack
 15965 ;; This function is called by:
 15966 ;;		_RF_CheckCode
 15967 ;;		i2_RF_LoadCode
 15968 ;; This function uses a non-reentrant model
 15969 ;;
 15970                           
 15971                           	psect	text103
 15972  00178C                     __ptext103:
 15973                           	opt stack 0
 15974  00178C                     i2___lwtoft:
 15975                           	opt stack 15
 15976                           
 15977                           ; BSR set to: 0
 15978                           
 15979                           ; BSR set to: 0
 15980                           ;incstack = 0
 15981  00178C  C088  F080         	movff	i2___lwtoft@c,i2___ftpack@arg
 15982  001790  C089  F081         	movff	i2___lwtoft@c+1,i2___ftpack@arg+1
 15983  001794  6B82               	clrf	(i2___ftpack@arg+2)& (0+255),b
 15984  001796  0E8E               	movlw	142
 15985  001798  6F83               	movwf	i2___ftpack@exp& (0+255),b
 15986  00179A  0E00               	movlw	0
 15987  00179C  6F84               	movwf	i2___ftpack@sign& (0+255),b
 15988  00179E  ECE5  F007         	call	i2___ftpack	;wreg free
 15989  0017A2  C080  F088         	movff	?i2___ftpack,?i2___lwtoft
 15990  0017A6  C081  F089         	movff	?i2___ftpack+1,?i2___lwtoft+1
 15991  0017AA  C082  F08A         	movff	?i2___ftpack+2,?i2___lwtoft+2
 15992                           
 15993                           ; BSR set to: 0
 15994  0017AE  0012               	return		;funcret
 15995  0017B0                     __end_ofi2___lwtoft:
 15996                           	opt stack 0
 15997                           tblptru	equ	0xFF8
 15998                           tblptrh	equ	0xFF7
 15999                           tblptrl	equ	0xFF6
 16000                           tablat	equ	0xFF5
 16001                           prodh	equ	0xFF4
 16002                           prodl	equ	0xFF3
 16003                           intcon	equ	0xFF2
 16004                           intcon2	equ	0xFF1
 16005                           intcon3	equ	0xFF0
 16006                           postinc0	equ	0xFEE
 16007                           wreg	equ	0xFE8
 16008                           postdec1	equ	0xFE5
 16009                           fsr1l	equ	0xFE1
 16010                           bsr	equ	0xFE0
 16011                           indf2	equ	0xFDF
 16012                           postinc2	equ	0xFDE
 16013                           postdec2	equ	0xFDD
 16014                           plusw2	equ	0xFDB
 16015                           fsr2h	equ	0xFDA
 16016                           fsr2l	equ	0xFD9
 16017                           status	equ	0xFD8
 16018                           
 16019 ;; *************** function i2___fttol *****************
 16020 ;; Defined at:
 16021 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
 16022 ;; Parameters:    Size  Location     Type
 16023 ;;  f1              3    0[BANK0 ] float 
 16024 ;; Auto vars:     Size  Location     Type
 16025 ;;  __fttol         4   10[BANK0 ] unsigned long 
 16026 ;;  __fttol         1   14[BANK0 ] unsigned char 
 16027 ;;  __fttol         1    9[BANK0 ] unsigned char 
 16028 ;; Return value:  Size  Location     Type
 16029 ;;                  4    0[BANK0 ] long 
 16030 ;; Registers used:
 16031 ;;		wreg, status,2, status,0
 16032 ;; Tracked objects:
 16033 ;;		On entry : F/0
 16034 ;;		On exit  : F/0
 16035 ;;		Unchanged: 0/0
 16036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16037 ;;      Params:         0       4       0       0       0
 16038 ;;      Locals:         0       6       0       0       0
 16039 ;;      Temps:          0       5       0       0       0
 16040 ;;      Totals:         0      15       0       0       0
 16041 ;;Total ram usage:       15 bytes
 16042 ;; Hardware stack levels used:    1
 16043 ;; This function calls:
 16044 ;;		Nothing
 16045 ;; This function is called by:
 16046 ;;		i2_RF_LoadCode
 16047 ;; This function uses a non-reentrant model
 16048 ;;
 16049                           
 16050                           	psect	text104
 16051  00097C                     __ptext104:
 16052                           	opt stack 0
 16053  00097C                     i2___fttol:
 16054                           	opt stack 15
 16055                           
 16056                           ; BSR set to: 0
 16057                           
 16058                           ; BSR set to: 0
 16059                           ;incstack = 0
 16060  00097C  C082  F084         	movff	i2___fttol@f1+2,??i2___fttol
 16061  000980  6B85               	clrf	(??i2___fttol+1)& (0+255),b
 16062  000982  6B86               	clrf	(??i2___fttol+2)& (0+255),b
 16063  000984  3581               	rlcf	(i2___fttol@f1+1)& (0+255),w,b
 16064  000986  3784               	rlcf	??i2___fttol& (0+255),f,b
 16065  000988  E301               	bnc	u474_41
 16066  00098A  8185               	bsf	(??i2___fttol+1)& (0+255),0,b
 16067  00098C                     u474_41:
 16068  00098C  5184               	movf	??i2___fttol& (0+255),w,b
 16069  00098E  6F8E               	movwf	i2___fttol@exp1& (0+255),b
 16070  000990  518E               	movf	i2___fttol@exp1& (0+255),w,b
 16071  000992  E105               	bnz	i2l5018
 16072  000994                     i2l5016:
 16073                           
 16074                           ; BSR set to: 0
 16075  000994  6B80               	clrf	?i2___fttol& (0+255),b
 16076  000996  6B81               	clrf	(?i2___fttol+1)& (0+255),b
 16077  000998  6B82               	clrf	(?i2___fttol+2)& (0+255),b
 16078  00099A  6B83               	clrf	(?i2___fttol+3)& (0+255),b
 16079  00099C  0012               	return	
 16080  00099E                     i2l5018:
 16081                           
 16082                           ; BSR set to: 0
 16083  00099E  0E17               	movlw	23
 16084  0009A0  6F84               	movwf	??i2___fttol& (0+255),b
 16085  0009A2  C080  F085         	movff	i2___fttol@f1,??i2___fttol+1
 16086  0009A6  C081  F086         	movff	i2___fttol@f1+1,??i2___fttol+2
 16087  0009AA  C082  F087         	movff	i2___fttol@f1+2,??i2___fttol+3
 16088  0009AE  2984               	incf	??i2___fttol& (0+255),w,b
 16089  0009B0  6F88               	movwf	(??i2___fttol+4)& (0+255),b
 16090  0009B2  D004               	goto	i2u476_40
 16091  0009B4                     i2u476_45:
 16092  0009B4  90D8               	bcf	status,0,c
 16093  0009B6  3387               	rrcf	(??i2___fttol+3)& (0+255),f,b
 16094  0009B8  3386               	rrcf	(??i2___fttol+2)& (0+255),f,b
 16095  0009BA  3385               	rrcf	(??i2___fttol+1)& (0+255),f,b
 16096  0009BC                     i2u476_40:
 16097  0009BC  2F88               	decfsz	(??i2___fttol+4)& (0+255),f,b
 16098  0009BE  D7FA               	goto	i2u476_45
 16099  0009C0  0100               	movlb	0	; () banked
 16100  0009C2  5185               	movf	(??i2___fttol+1)& (0+255),w,b
 16101  0009C4  6F89               	movwf	i2___fttol@sign1& (0+255),b
 16102                           
 16103                           ; BSR set to: 0
 16104  0009C6  8F81               	bsf	(i2___fttol@f1+1)& (0+255),7,b
 16105                           
 16106                           ; BSR set to: 0
 16107  0009C8  6B82               	clrf	(i2___fttol@f1+2)& (0+255),b
 16108                           
 16109                           ; BSR set to: 0
 16110  0009CA  5180               	movf	i2___fttol@f1& (0+255),w,b
 16111  0009CC  6F8A               	movwf	i2___fttol@lval& (0+255),b
 16112  0009CE  5181               	movf	(i2___fttol@f1+1)& (0+255),w,b
 16113  0009D0  6F8B               	movwf	(i2___fttol@lval+1)& (0+255),b
 16114  0009D2  5182               	movf	(i2___fttol@f1+2)& (0+255),w,b
 16115  0009D4  6F8C               	movwf	(i2___fttol@lval+2)& (0+255),b
 16116  0009D6  6B8D               	clrf	(i2___fttol@lval+3)& (0+255),b
 16117                           
 16118                           ; BSR set to: 0
 16119  0009D8  0E8E               	movlw	142
 16120  0009DA  5F8E               	subwf	i2___fttol@exp1& (0+255),f,b
 16121                           
 16122                           ; BSR set to: 0
 16123  0009DC  AF8E               	btfss	i2___fttol@exp1& (0+255),7,b
 16124  0009DE  D00C               	goto	i2l5038
 16125                           
 16126                           ; BSR set to: 0
 16127  0009E0  518E               	movf	i2___fttol@exp1& (0+255),w,b
 16128  0009E2  0A80               	xorlw	128
 16129  0009E4  0F8F               	addlw	143
 16130  0009E6  E3D6               	bnc	i2l5016
 16131  0009E8                     i2l5034:
 16132                           
 16133                           ; BSR set to: 0
 16134  0009E8  90D8               	bcf	status,0,c
 16135  0009EA  338D               	rrcf	(i2___fttol@lval+3)& (0+255),f,b
 16136  0009EC  338C               	rrcf	(i2___fttol@lval+2)& (0+255),f,b
 16137  0009EE  338B               	rrcf	(i2___fttol@lval+1)& (0+255),f,b
 16138  0009F0  338A               	rrcf	i2___fttol@lval& (0+255),f,b
 16139                           
 16140                           ; BSR set to: 0
 16141  0009F2  3F8E               	incfsz	i2___fttol@exp1& (0+255),f,b
 16142  0009F4  D7F9               	goto	i2l5034
 16143  0009F6  D00C               	goto	i2l5046
 16144  0009F8                     i2l5038:
 16145                           
 16146                           ; BSR set to: 0
 16147  0009F8  0E17               	movlw	23
 16148  0009FA  658E               	cpfsgt	i2___fttol@exp1& (0+255),b
 16149  0009FC  D007               	goto	i2l5044
 16150  0009FE  D7CA               	goto	i2l5016
 16151  000A00                     i2l5042:
 16152                           
 16153                           ; BSR set to: 0
 16154  000A00  90D8               	bcf	status,0,c
 16155  000A02  378A               	rlcf	i2___fttol@lval& (0+255),f,b
 16156  000A04  378B               	rlcf	(i2___fttol@lval+1)& (0+255),f,b
 16157  000A06  378C               	rlcf	(i2___fttol@lval+2)& (0+255),f,b
 16158  000A08  378D               	rlcf	(i2___fttol@lval+3)& (0+255),f,b
 16159  000A0A  078E               	decf	i2___fttol@exp1& (0+255),f,b
 16160  000A0C                     i2l5044:
 16161                           
 16162                           ; BSR set to: 0
 16163  000A0C  518E               	movf	i2___fttol@exp1& (0+255),w,b
 16164  000A0E  E1F8               	bnz	i2l5042
 16165  000A10                     i2l5046:
 16166                           
 16167                           ; BSR set to: 0
 16168  000A10  5189               	movf	i2___fttol@sign1& (0+255),w,b
 16169  000A12  E008               	bz	i2l5050
 16170                           
 16171                           ; BSR set to: 0
 16172  000A14  1F8D               	comf	(i2___fttol@lval+3)& (0+255),f,b
 16173  000A16  1F8C               	comf	(i2___fttol@lval+2)& (0+255),f,b
 16174  000A18  1F8B               	comf	(i2___fttol@lval+1)& (0+255),f,b
 16175  000A1A  6D8A               	negf	i2___fttol@lval& (0+255),b
 16176  000A1C  0E00               	movlw	0
 16177  000A1E  238B               	addwfc	(i2___fttol@lval+1)& (0+255),f,b
 16178  000A20  238C               	addwfc	(i2___fttol@lval+2)& (0+255),f,b
 16179  000A22  238D               	addwfc	(i2___fttol@lval+3)& (0+255),f,b
 16180  000A24                     i2l5050:
 16181                           
 16182                           ; BSR set to: 0
 16183  000A24  C08A  F080         	movff	i2___fttol@lval,?i2___fttol
 16184  000A28  C08B  F081         	movff	i2___fttol@lval+1,?i2___fttol+1
 16185  000A2C  C08C  F082         	movff	i2___fttol@lval+2,?i2___fttol+2
 16186  000A30  C08D  F083         	movff	i2___fttol@lval+3,?i2___fttol+3
 16187                           
 16188                           ; BSR set to: 0
 16189  000A34  0012               	return		;funcret
 16190  000A36                     __end_ofi2___fttol:
 16191                           	opt stack 0
 16192                           tblptru	equ	0xFF8
 16193                           tblptrh	equ	0xFF7
 16194                           tblptrl	equ	0xFF6
 16195                           tablat	equ	0xFF5
 16196                           prodh	equ	0xFF4
 16197                           prodl	equ	0xFF3
 16198                           intcon	equ	0xFF2
 16199                           intcon2	equ	0xFF1
 16200                           intcon3	equ	0xFF0
 16201                           postinc0	equ	0xFEE
 16202                           wreg	equ	0xFE8
 16203                           postdec1	equ	0xFE5
 16204                           fsr1l	equ	0xFE1
 16205                           bsr	equ	0xFE0
 16206                           indf2	equ	0xFDF
 16207                           postinc2	equ	0xFDE
 16208                           postdec2	equ	0xFDD
 16209                           plusw2	equ	0xFDB
 16210                           fsr2h	equ	0xFDA
 16211                           fsr2l	equ	0xFD9
 16212                           status	equ	0xFD8
 16213                           
 16214 ;; *************** function i2___ftmul *****************
 16215 ;; Defined at:
 16216 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
 16217 ;; Parameters:    Size  Location     Type
 16218 ;;  f1              3   11[BANK0 ] float 
 16219 ;;  f2              3   14[BANK0 ] float 
 16220 ;; Auto vars:     Size  Location     Type
 16221 ;;  __ftmul         3   22[BANK0 ] unsigned um
 16222 ;;  __ftmul         1   21[BANK0 ] unsigned char 
 16223 ;;  __ftmul         1   20[BANK0 ] unsigned char 
 16224 ;;  __ftmul         1    0        unsigned char 
 16225 ;; Return value:  Size  Location     Type
 16226 ;;                  3   11[BANK0 ] float 
 16227 ;; Registers used:
 16228 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 16229 ;; Tracked objects:
 16230 ;;		On entry : F/0
 16231 ;;		On exit  : F/0
 16232 ;;		Unchanged: 0/0
 16233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16234 ;;      Params:         0       6       0       0       0
 16235 ;;      Locals:         0       5       0       0       0
 16236 ;;      Temps:          0       3       0       0       0
 16237 ;;      Totals:         0      14       0       0       0
 16238 ;;Total ram usage:       14 bytes
 16239 ;; Hardware stack levels used:    1
 16240 ;; Hardware stack levels required when called:    1
 16241 ;; This function calls:
 16242 ;;		i2___ftpack
 16243 ;; This function is called by:
 16244 ;;		_RF_CheckCode
 16245 ;;		i2_RF_LoadCode
 16246 ;; This function uses a non-reentrant model
 16247 ;;
 16248                           
 16249                           	psect	text105
 16250  00071C                     __ptext105:
 16251                           	opt stack 0
 16252  00071C                     i2___ftmul:
 16253                           	opt stack 15
 16254                           
 16255                           ; BSR set to: 0
 16256                           
 16257                           ; BSR set to: 0
 16258                           ;incstack = 0
 16259  00071C  C08D  F091         	movff	i2___ftmul@f1+2,??i2___ftmul
 16260  000720  6B92               	clrf	(??i2___ftmul+1)& (0+255),b
 16261  000722  6B93               	clrf	(??i2___ftmul+2)& (0+255),b
 16262  000724  358C               	rlcf	(i2___ftmul@f1+1)& (0+255),w,b
 16263  000726  3791               	rlcf	??i2___ftmul& (0+255),f,b
 16264  000728  E301               	bnc	u461_41
 16265  00072A  8192               	bsf	(??i2___ftmul+1)& (0+255),0,b
 16266  00072C                     u461_41:
 16267  00072C  5191               	movf	??i2___ftmul& (0+255),w,b
 16268  00072E  6F94               	movwf	i2___ftmul@exp& (0+255),b
 16269  000730  5194               	movf	i2___ftmul@exp& (0+255),w,b
 16270  000732  E104               	bnz	i2l4940
 16271                           
 16272                           ; BSR set to: 0
 16273  000734  6B8B               	clrf	?i2___ftmul& (0+255),b
 16274  000736  6B8C               	clrf	(?i2___ftmul+1)& (0+255),b
 16275  000738  6B8D               	clrf	(?i2___ftmul+2)& (0+255),b
 16276  00073A  0012               	return	
 16277  00073C                     i2l4940:
 16278                           
 16279                           ; BSR set to: 0
 16280  00073C  C090  F091         	movff	i2___ftmul@f2+2,??i2___ftmul
 16281  000740  6B92               	clrf	(??i2___ftmul+1)& (0+255),b
 16282  000742  6B93               	clrf	(??i2___ftmul+2)& (0+255),b
 16283  000744  358F               	rlcf	(i2___ftmul@f2+1)& (0+255),w,b
 16284  000746  3791               	rlcf	??i2___ftmul& (0+255),f,b
 16285  000748  E301               	bnc	u463_41
 16286  00074A  8192               	bsf	(??i2___ftmul+1)& (0+255),0,b
 16287  00074C                     u463_41:
 16288  00074C  5191               	movf	??i2___ftmul& (0+255),w,b
 16289  00074E  6F95               	movwf	i2___ftmul@sign& (0+255),b
 16290  000750  5195               	movf	i2___ftmul@sign& (0+255),w,b
 16291  000752  E104               	bnz	i2l4944
 16292                           
 16293                           ; BSR set to: 0
 16294  000754  6B8B               	clrf	?i2___ftmul& (0+255),b
 16295  000756  6B8C               	clrf	(?i2___ftmul+1)& (0+255),b
 16296  000758  6B8D               	clrf	(?i2___ftmul+2)& (0+255),b
 16297  00075A  0012               	return	
 16298  00075C                     i2l4944:
 16299                           
 16300                           ; BSR set to: 0
 16301  00075C  5195               	movf	i2___ftmul@sign& (0+255),w,b
 16302  00075E  0F7B               	addlw	123
 16303  000760  2794               	addwf	i2___ftmul@exp& (0+255),f,b
 16304                           
 16305                           ; BSR set to: 0
 16306  000762  C08D  F095         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 16307  000766  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 16308  000768  1B95               	xorwf	i2___ftmul@sign& (0+255),f,b
 16309  00076A  0E80               	movlw	128
 16310  00076C  1795               	andwf	i2___ftmul@sign& (0+255),f,b
 16311                           
 16312                           ; BSR set to: 0
 16313  00076E  8F8C               	bsf	(i2___ftmul@f1+1)& (0+255),7,b
 16314                           
 16315                           ; BSR set to: 0
 16316  000770  8F8F               	bsf	(i2___ftmul@f2+1)& (0+255),7,b
 16317                           
 16318                           ; BSR set to: 0
 16319  000772  6B90               	clrf	(i2___ftmul@f2+2)& (0+255),b
 16320                           
 16321                           ; BSR set to: 0
 16322                           
 16323                           ; BSR set to: 0
 16324  000774  6B8D               	clrf	(i2___ftmul@f1+2)& (0+255),b
 16325                           
 16326                           ; BSR set to: 0
 16327  000776  518B               	movf	i2___ftmul@f1& (0+255),w,b
 16328  000778  038E               	mulwf	i2___ftmul@f2& (0+255),b
 16329  00077A  CFF4 FFF3          	movff	prodh,prodl
 16330  00077E  6AF4               	clrf	prodh,c
 16331  000780  CFF3 F096          	movff	prodl,i2___ftmul@f3_as_product
 16332  000784  CFF4 F097          	movff	prodh,i2___ftmul@f3_as_product+1
 16333  000788  6B98               	clrf	(i2___ftmul@f3_as_product+2)& (0+255),b
 16334                           
 16335                           ; BSR set to: 0
 16336  00078A  518B               	movf	i2___ftmul@f1& (0+255),w,b
 16337  00078C  038F               	mulwf	(i2___ftmul@f2+1)& (0+255),b
 16338  00078E  50F3               	movf	prodl,w,c
 16339  000790  2796               	addwf	i2___ftmul@f3_as_product& (0+255),f,b
 16340  000792  50F4               	movf	prodh,w,c
 16341  000794  2397               	addwfc	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16342  000796  0E00               	movlw	0
 16343  000798  2398               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16344                           
 16345                           ; BSR set to: 0
 16346  00079A  518C               	movf	(i2___ftmul@f1+1)& (0+255),w,b
 16347  00079C  038E               	mulwf	i2___ftmul@f2& (0+255),b
 16348  00079E  50F3               	movf	prodl,w,c
 16349  0007A0  2796               	addwf	i2___ftmul@f3_as_product& (0+255),f,b
 16350  0007A2  50F4               	movf	prodh,w,c
 16351  0007A4  2397               	addwfc	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16352  0007A6  0E00               	movlw	0
 16353  0007A8  2398               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16354                           
 16355                           ; BSR set to: 0
 16356  0007AA  518C               	movf	(i2___ftmul@f1+1)& (0+255),w,b
 16357  0007AC  038F               	mulwf	(i2___ftmul@f2+1)& (0+255),b
 16358  0007AE  50F3               	movf	prodl,w,c
 16359  0007B0  2797               	addwf	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16360  0007B2  50F4               	movf	prodh,w,c
 16361  0007B4  2398               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16362                           
 16363                           ; BSR set to: 0
 16364  0007B6  AF98               	btfss	(i2___ftmul@f3_as_product+2)& (0+255),7,b
 16365  0007B8  D005               	goto	i2l1392
 16366                           
 16367                           ; BSR set to: 0
 16368  0007BA  90D8               	bcf	status,0,c
 16369  0007BC  3398               	rrcf	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16370  0007BE  3397               	rrcf	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16371  0007C0  3396               	rrcf	i2___ftmul@f3_as_product& (0+255),f,b
 16372  0007C2  2B94               	incf	i2___ftmul@exp& (0+255),f,b
 16373  0007C4                     i2l1392:
 16374                           
 16375                           ; BSR set to: 0
 16376  0007C4  90D8               	bcf	status,0,c
 16377  0007C6  3398               	rrcf	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16378  0007C8  3397               	rrcf	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16379  0007CA  3396               	rrcf	i2___ftmul@f3_as_product& (0+255),f,b
 16380                           
 16381                           ; BSR set to: 0
 16382  0007CC  C096  F080         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 16383  0007D0  C097  F081         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 16384  0007D4  C098  F082         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 16385  0007D8  C094  F083         	movff	i2___ftmul@exp,i2___ftpack@exp
 16386  0007DC  C095  F084         	movff	i2___ftmul@sign,i2___ftpack@sign
 16387  0007E0  ECE5  F007         	call	i2___ftpack	;wreg free
 16388  0007E4  C080  F08B         	movff	?i2___ftpack,?i2___ftmul
 16389  0007E8  C081  F08C         	movff	?i2___ftpack+1,?i2___ftmul+1
 16390  0007EC  C082  F08D         	movff	?i2___ftpack+2,?i2___ftmul+2
 16391                           
 16392                           ; BSR set to: 0
 16393  0007F0  0012               	return		;funcret
 16394  0007F2                     __end_ofi2___ftmul:
 16395                           	opt stack 0
 16396                           tblptru	equ	0xFF8
 16397                           tblptrh	equ	0xFF7
 16398                           tblptrl	equ	0xFF6
 16399                           tablat	equ	0xFF5
 16400                           prodh	equ	0xFF4
 16401                           prodl	equ	0xFF3
 16402                           intcon	equ	0xFF2
 16403                           intcon2	equ	0xFF1
 16404                           intcon3	equ	0xFF0
 16405                           postinc0	equ	0xFEE
 16406                           wreg	equ	0xFE8
 16407                           postdec1	equ	0xFE5
 16408                           fsr1l	equ	0xFE1
 16409                           bsr	equ	0xFE0
 16410                           indf2	equ	0xFDF
 16411                           postinc2	equ	0xFDE
 16412                           postdec2	equ	0xFDD
 16413                           plusw2	equ	0xFDB
 16414                           fsr2h	equ	0xFDA
 16415                           fsr2l	equ	0xFD9
 16416                           status	equ	0xFD8
 16417                           
 16418 ;; *************** function i2___ftpack *****************
 16419 ;; Defined at:
 16420 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 16421 ;; Parameters:    Size  Location     Type
 16422 ;;  arg             3    0[BANK0 ] unsigned um
 16423 ;;  exp             1    3[BANK0 ] unsigned char 
 16424 ;;  sign            1    4[BANK0 ] unsigned char 
 16425 ;; Auto vars:     Size  Location     Type
 16426 ;;		None
 16427 ;; Return value:  Size  Location     Type
 16428 ;;                  3    0[BANK0 ] float 
 16429 ;; Registers used:
 16430 ;;		wreg, status,2, status,0
 16431 ;; Tracked objects:
 16432 ;;		On entry : F/0
 16433 ;;		On exit  : F/0
 16434 ;;		Unchanged: 0/0
 16435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16436 ;;      Params:         0       5       0       0       0
 16437 ;;      Locals:         0       0       0       0       0
 16438 ;;      Temps:          0       3       0       0       0
 16439 ;;      Totals:         0       8       0       0       0
 16440 ;;Total ram usage:        8 bytes
 16441 ;; Hardware stack levels used:    1
 16442 ;; This function calls:
 16443 ;;		Nothing
 16444 ;; This function is called by:
 16445 ;;		i2___ftmul
 16446 ;;		i2___lwtoft
 16447 ;; This function uses a non-reentrant model
 16448 ;;
 16449                           
 16450                           	psect	text106
 16451  000FCA                     __ptext106:
 16452                           	opt stack 0
 16453  000FCA                     i2___ftpack:
 16454                           	opt stack 15
 16455                           
 16456                           ; BSR set to: 0
 16457                           
 16458                           ; BSR set to: 0
 16459                           ;incstack = 0
 16460  000FCA  5183               	movf	i2___ftpack@exp& (0+255),w,b
 16461  000FCC  E004               	bz	i2l1308
 16462                           
 16463                           ; BSR set to: 0
 16464  000FCE  5180               	movf	i2___ftpack@arg& (0+255),w,b
 16465  000FD0  1181               	iorwf	(i2___ftpack@arg+1)& (0+255),w,b
 16466  000FD2  1182               	iorwf	(i2___ftpack@arg+2)& (0+255),w,b
 16467  000FD4  E109               	bnz	i2l4402
 16468  000FD6                     i2l1308:
 16469                           
 16470                           ; BSR set to: 0
 16471  000FD6  6B80               	clrf	?i2___ftpack& (0+255),b
 16472  000FD8  6B81               	clrf	(?i2___ftpack+1)& (0+255),b
 16473  000FDA  6B82               	clrf	(?i2___ftpack+2)& (0+255),b
 16474  000FDC  0012               	return	
 16475  000FDE                     i2l4400:
 16476                           
 16477                           ; BSR set to: 0
 16478  000FDE  2B83               	incf	i2___ftpack@exp& (0+255),f,b
 16479  000FE0  90D8               	bcf	status,0,c
 16480  000FE2  3382               	rrcf	(i2___ftpack@arg+2)& (0+255),f,b
 16481  000FE4  3381               	rrcf	(i2___ftpack@arg+1)& (0+255),f,b
 16482  000FE6  3380               	rrcf	i2___ftpack@arg& (0+255),f,b
 16483  000FE8                     i2l4402:
 16484                           
 16485                           ; BSR set to: 0
 16486  000FE8  6B85               	clrf	??i2___ftpack& (0+255),b
 16487  000FEA  6B86               	clrf	(??i2___ftpack+1)& (0+255),b
 16488  000FEC  0EFE               	movlw	254
 16489  000FEE  1582               	andwf	(i2___ftpack@arg+2)& (0+255),w,b
 16490  000FF0  6F87               	movwf	(??i2___ftpack+2)& (0+255),b
 16491  000FF2  5185               	movf	??i2___ftpack& (0+255),w,b
 16492  000FF4  1186               	iorwf	(??i2___ftpack+1)& (0+255),w,b
 16493  000FF6  1187               	iorwf	(??i2___ftpack+2)& (0+255),w,b
 16494  000FF8  E00A               	bz	i2l4408
 16495  000FFA  D7F1               	goto	i2l4400
 16496  000FFC                     i2l4404:
 16497                           
 16498                           ; BSR set to: 0
 16499  000FFC  2B83               	incf	i2___ftpack@exp& (0+255),f,b
 16500                           
 16501                           ; BSR set to: 0
 16502  000FFE  2B80               	incf	i2___ftpack@arg& (0+255),f,b
 16503  001000  0E00               	movlw	0
 16504  001002  2381               	addwfc	(i2___ftpack@arg+1)& (0+255),f,b
 16505  001004  2382               	addwfc	(i2___ftpack@arg+2)& (0+255),f,b
 16506  001006  90D8               	bcf	status,0,c
 16507  001008  3382               	rrcf	(i2___ftpack@arg+2)& (0+255),f,b
 16508  00100A  3381               	rrcf	(i2___ftpack@arg+1)& (0+255),f,b
 16509  00100C  3380               	rrcf	i2___ftpack@arg& (0+255),f,b
 16510  00100E                     i2l4408:
 16511                           
 16512                           ; BSR set to: 0
 16513  00100E  6B85               	clrf	??i2___ftpack& (0+255),b
 16514  001010  6B86               	clrf	(??i2___ftpack+1)& (0+255),b
 16515  001012  5182               	movf	(i2___ftpack@arg+2)& (0+255),w,b
 16516  001014  6F87               	movwf	(??i2___ftpack+2)& (0+255),b
 16517  001016  5185               	movf	??i2___ftpack& (0+255),w,b
 16518  001018  1186               	iorwf	(??i2___ftpack+1)& (0+255),w,b
 16519  00101A  1187               	iorwf	(??i2___ftpack+2)& (0+255),w,b
 16520  00101C  E006               	bz	i2l4412
 16521  00101E  D7EE               	goto	i2l4404
 16522  001020                     i2l4410:
 16523                           
 16524                           ; BSR set to: 0
 16525  001020  0783               	decf	i2___ftpack@exp& (0+255),f,b
 16526  001022  90D8               	bcf	status,0,c
 16527  001024  3780               	rlcf	i2___ftpack@arg& (0+255),f,b
 16528  001026  3781               	rlcf	(i2___ftpack@arg+1)& (0+255),f,b
 16529  001028  3782               	rlcf	(i2___ftpack@arg+2)& (0+255),f,b
 16530  00102A                     i2l4412:
 16531                           
 16532                           ; BSR set to: 0
 16533  00102A  BF81               	btfsc	(i2___ftpack@arg+1)& (0+255),7,b
 16534  00102C  D003               	goto	i2l1320
 16535                           
 16536                           ; BSR set to: 0
 16537  00102E  0E02               	movlw	2
 16538  001030  6183               	cpfslt	i2___ftpack@exp& (0+255),b
 16539  001032  D7F6               	goto	i2l4410
 16540  001034                     i2l1320:
 16541                           
 16542                           ; BSR set to: 0
 16543  001034  A183               	btfss	i2___ftpack@exp& (0+255),0,b
 16544                           
 16545                           ; BSR set to: 0
 16546  001036  9F81               	bcf	(i2___ftpack@arg+1)& (0+255),7,b
 16547                           
 16548                           ; BSR set to: 0
 16549  001038  90D8               	bcf	status,0,c
 16550  00103A  3383               	rrcf	i2___ftpack@exp& (0+255),f,b
 16551                           
 16552                           ; BSR set to: 0
 16553  00103C  5183               	movf	i2___ftpack@exp& (0+255),w,b
 16554  00103E  1382               	iorwf	(i2___ftpack@arg+2)& (0+255),f,b
 16555                           
 16556                           ; BSR set to: 0
 16557  001040  5184               	movf	i2___ftpack@sign& (0+255),w,b
 16558  001042  E001               	bz	i2l4426
 16559                           
 16560                           ; BSR set to: 0
 16561  001044  8F82               	bsf	(i2___ftpack@arg+2)& (0+255),7,b
 16562  001046                     i2l4426:
 16563                           
 16564                           ; BSR set to: 0
 16565  001046  C080  F080         	movff	i2___ftpack@arg,?i2___ftpack
 16566  00104A  C081  F081         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 16567  00104E  C082  F082         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 16568                           
 16569                           ; BSR set to: 0
 16570  001052  0012               	return		;funcret
 16571  001054                     __end_ofi2___ftpack:
 16572                           	opt stack 0
 16573                           tblptru	equ	0xFF8
 16574                           tblptrh	equ	0xFF7
 16575                           tblptrl	equ	0xFF6
 16576                           tablat	equ	0xFF5
 16577                           prodh	equ	0xFF4
 16578                           prodl	equ	0xFF3
 16579                           intcon	equ	0xFF2
 16580                           intcon2	equ	0xFF1
 16581                           intcon3	equ	0xFF0
 16582                           postinc0	equ	0xFEE
 16583                           wreg	equ	0xFE8
 16584                           postdec1	equ	0xFE5
 16585                           fsr1l	equ	0xFE1
 16586                           bsr	equ	0xFE0
 16587                           indf2	equ	0xFDF
 16588                           postinc2	equ	0xFDE
 16589                           postdec2	equ	0xFDD
 16590                           plusw2	equ	0xFDB
 16591                           fsr2h	equ	0xFDA
 16592                           fsr2l	equ	0xFD9
 16593                           status	equ	0xFD8
 16594                           
 16595 ;; *************** function i2___ftge *****************
 16596 ;; Defined at:
 16597 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
 16598 ;; Parameters:    Size  Location     Type
 16599 ;;  ff1             3   11[BANK0 ] float 
 16600 ;;  ff2             3   14[BANK0 ] float 
 16601 ;; Auto vars:     Size  Location     Type
 16602 ;;		None
 16603 ;; Return value:  Size  Location     Type
 16604 ;;		None               void
 16605 ;; Registers used:
 16606 ;;		wreg, status,2, status,0
 16607 ;; Tracked objects:
 16608 ;;		On entry : F/0
 16609 ;;		On exit  : F/0
 16610 ;;		Unchanged: 0/0
 16611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16612 ;;      Params:         0       6       0       0       0
 16613 ;;      Locals:         0       0       0       0       0
 16614 ;;      Temps:          0       3       0       0       0
 16615 ;;      Totals:         0       9       0       0       0
 16616 ;;Total ram usage:        9 bytes
 16617 ;; Hardware stack levels used:    1
 16618 ;; This function calls:
 16619 ;;		Nothing
 16620 ;; This function is called by:
 16621 ;;		_RF_CheckCode
 16622 ;;		i2_RF_LoadCode
 16623 ;; This function uses a non-reentrant model
 16624 ;;
 16625                           
 16626                           	psect	text107
 16627  00132A                     __ptext107:
 16628                           	opt stack 0
 16629  00132A                     i2___ftge:
 16630                           	opt stack 16
 16631                           
 16632                           ; BSR set to: 0
 16633                           
 16634                           ; BSR set to: 0
 16635                           ;incstack = 0
 16636  00132A  AF8D               	btfss	(i2___ftge@ff1+2)& (0+255),7,b
 16637  00132C  D00D               	goto	i2l4884
 16638                           
 16639                           ; BSR set to: 0
 16640  00132E  6B91               	clrf	??i2___ftge& (0+255),b
 16641  001330  6B92               	clrf	(??i2___ftge+1)& (0+255),b
 16642  001332  0E80               	movlw	128
 16643  001334  6F93               	movwf	(??i2___ftge+2)& (0+255),b
 16644  001336  518B               	movf	i2___ftge@ff1& (0+255),w,b
 16645  001338  5D91               	subwf	??i2___ftge& (0+255),w,b
 16646  00133A  6F8B               	movwf	i2___ftge@ff1& (0+255),b
 16647  00133C  518C               	movf	(i2___ftge@ff1+1)& (0+255),w,b
 16648  00133E  5992               	subwfb	(??i2___ftge+1)& (0+255),w,b
 16649  001340  6F8C               	movwf	(i2___ftge@ff1+1)& (0+255),b
 16650  001342  518D               	movf	(i2___ftge@ff1+2)& (0+255),w,b
 16651  001344  5993               	subwfb	(??i2___ftge+2)& (0+255),w,b
 16652  001346  6F8D               	movwf	(i2___ftge@ff1+2)& (0+255),b
 16653  001348                     i2l4884:
 16654                           
 16655                           ; BSR set to: 0
 16656  001348  AF90               	btfss	(i2___ftge@ff2+2)& (0+255),7,b
 16657  00134A  D00D               	goto	i2l4888
 16658                           
 16659                           ; BSR set to: 0
 16660  00134C  6B91               	clrf	??i2___ftge& (0+255),b
 16661  00134E  6B92               	clrf	(??i2___ftge+1)& (0+255),b
 16662  001350  0E80               	movlw	128
 16663  001352  6F93               	movwf	(??i2___ftge+2)& (0+255),b
 16664  001354  518E               	movf	i2___ftge@ff2& (0+255),w,b
 16665  001356  5D91               	subwf	??i2___ftge& (0+255),w,b
 16666  001358  6F8E               	movwf	i2___ftge@ff2& (0+255),b
 16667  00135A  518F               	movf	(i2___ftge@ff2+1)& (0+255),w,b
 16668  00135C  5992               	subwfb	(??i2___ftge+1)& (0+255),w,b
 16669  00135E  6F8F               	movwf	(i2___ftge@ff2+1)& (0+255),b
 16670  001360  5190               	movf	(i2___ftge@ff2+2)& (0+255),w,b
 16671  001362  5993               	subwfb	(??i2___ftge+2)& (0+255),w,b
 16672  001364  6F90               	movwf	(i2___ftge@ff2+2)& (0+255),b
 16673  001366                     i2l4888:
 16674                           
 16675                           ; BSR set to: 0
 16676  001366  0E80               	movlw	128
 16677  001368  1B8D               	xorwf	(i2___ftge@ff1+2)& (0+255),f,b
 16678                           
 16679                           ; BSR set to: 0
 16680  00136A  1B90               	xorwf	(i2___ftge@ff2+2)& (0+255),f,b
 16681  00136C  518E               	movf	i2___ftge@ff2& (0+255),w,b
 16682  00136E  5D8B               	subwf	i2___ftge@ff1& (0+255),w,b
 16683  001370  518F               	movf	(i2___ftge@ff2+1)& (0+255),w,b
 16684  001372  598C               	subwfb	(i2___ftge@ff1+1)& (0+255),w,b
 16685  001374  5190               	movf	(i2___ftge@ff2+2)& (0+255),w,b
 16686  001376  598D               	subwfb	(i2___ftge@ff1+2)& (0+255),w,b
 16687  001378  E202               	bc	i2l4894
 16688                           
 16689                           ; BSR set to: 0
 16690  00137A  90D8               	bcf	status,0,c
 16691  00137C  0012               	return	
 16692  00137E                     i2l4894:
 16693                           
 16694                           ; BSR set to: 0
 16695  00137E  80D8               	bsf	status,0,c
 16696                           
 16697                           ; BSR set to: 0
 16698  001380  0012               	return		;funcret
 16699  001382                     __end_ofi2___ftge:
 16700                           	opt stack 0
 16701                           tblptru	equ	0xFF8
 16702                           tblptrh	equ	0xFF7
 16703                           tblptrl	equ	0xFF6
 16704                           tablat	equ	0xFF5
 16705                           prodh	equ	0xFF4
 16706                           prodl	equ	0xFF3
 16707                           intcon	equ	0xFF2
 16708                           intcon2	equ	0xFF1
 16709                           intcon3	equ	0xFF0
 16710                           postinc0	equ	0xFEE
 16711                           wreg	equ	0xFE8
 16712                           postdec1	equ	0xFE5
 16713                           fsr1l	equ	0xFE1
 16714                           bsr	equ	0xFE0
 16715                           indf2	equ	0xFDF
 16716                           postinc2	equ	0xFDE
 16717                           postdec2	equ	0xFDD
 16718                           plusw2	equ	0xFDB
 16719                           fsr2h	equ	0xFDA
 16720                           fsr2l	equ	0xFD9
 16721                           status	equ	0xFD8
 16722                           
 16723 ;; *************** function i2_RF_CalculateCodesize *****************
 16724 ;; Defined at:
 16725 ;;		line 155 in file "RF.c"
 16726 ;; Parameters:    Size  Location     Type
 16727 ;;		None
 16728 ;; Auto vars:     Size  Location     Type
 16729 ;;  RF_Calculate    1    0[BANK0 ] unsigned char 
 16730 ;; Return value:  Size  Location     Type
 16731 ;;                  1    wreg      unsigned char 
 16732 ;; Registers used:
 16733 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16734 ;; Tracked objects:
 16735 ;;		On entry : F/0
 16736 ;;		On exit  : F/0
 16737 ;;		Unchanged: 0/0
 16738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16739 ;;      Params:         0       0       0       0       0
 16740 ;;      Locals:         0       1       0       0       0
 16741 ;;      Temps:          0       0       0       0       0
 16742 ;;      Totals:         0       1       0       0       0
 16743 ;;Total ram usage:        1 bytes
 16744 ;; Hardware stack levels used:    1
 16745 ;; This function calls:
 16746 ;;		Nothing
 16747 ;; This function is called by:
 16748 ;;		i2_RF_LoadCode
 16749 ;; This function uses a non-reentrant model
 16750 ;;
 16751                           
 16752                           	psect	text108
 16753  0015F2                     __ptext108:
 16754                           	opt stack 0
 16755  0015F2                     i2_RF_CalculateCodesize:
 16756                           	opt stack 15
 16757                           
 16758                           ; BSR set to: 0
 16759                           ;RF.c: 157: unsigned char i;
 16760                           ;RF.c: 159: for(i=0; i<64;i++)
 16761                           
 16762                           ; BSR set to: 0
 16763                           ;incstack = 0
 16764  0015F2  6B80               	clrf	i2RF_CalculateCodesize@i& (0+255),b
 16765  0015F4                     i2l4706:
 16766                           
 16767                           ; BSR set to: 0
 16768                           ;RF.c: 160: {
 16769                           ;RF.c: 161: if(RF_SavedTiming[i] == 0)
 16770  0015F4  5180               	movf	i2RF_CalculateCodesize@i& (0+255),w,b
 16771  0015F6  0D02               	mullw	2
 16772  0015F8  0E80               	movlw	128
 16773  0015FA  24F3               	addwf	prodl,w,c
 16774  0015FC  6EF6               	movwf	tblptrl,c
 16775  0015FE  0E25               	movlw	37
 16776  001600  20F4               	addwfc	prodh,w,c
 16777  001602  6EF7               	movwf	tblptrh,c
 16778  001604  6AF8               	clrf	tblptru,c
 16779  001606  0E00               	movlw	0
 16780  001608  22F8               	addwfc	tblptru,f,c
 16781  00160A  0009               	tblrd		*+
 16782  00160C  50F5               	movf	tablat,w,c
 16783  00160E  0009               	tblrd		*+
 16784  001610  10F5               	iorwf	tablat,w,c
 16785  001612  E102               	bnz	i2l4712
 16786                           
 16787                           ; BSR set to: 0
 16788                           ;RF.c: 162: {
 16789                           ;RF.c: 163: return i;
 16790  001614  5180               	movf	i2RF_CalculateCodesize@i& (0+255),w,b
 16791  001616  0012               	return	
 16792  001618                     i2l4712:
 16793                           
 16794                           ; BSR set to: 0
 16795  001618  2B80               	incf	i2RF_CalculateCodesize@i& (0+255),f,b
 16796                           
 16797                           ; BSR set to: 0
 16798  00161A  0E3F               	movlw	63
 16799  00161C  6580               	cpfsgt	i2RF_CalculateCodesize@i& (0+255),b
 16800  00161E  D7EA               	goto	i2l4706
 16801  001620  0C40               	retlw	64
 16802  001622                     __end_ofi2_RF_CalculateCodesize:
 16803                           	opt stack 0
 16804                           tblptru	equ	0xFF8
 16805                           tblptrh	equ	0xFF7
 16806                           tblptrl	equ	0xFF6
 16807                           tablat	equ	0xFF5
 16808                           prodh	equ	0xFF4
 16809                           prodl	equ	0xFF3
 16810                           intcon	equ	0xFF2
 16811                           intcon2	equ	0xFF1
 16812                           intcon3	equ	0xFF0
 16813                           postinc0	equ	0xFEE
 16814                           wreg	equ	0xFE8
 16815                           postdec1	equ	0xFE5
 16816                           fsr1l	equ	0xFE1
 16817                           bsr	equ	0xFE0
 16818                           indf2	equ	0xFDF
 16819                           postinc2	equ	0xFDE
 16820                           postdec2	equ	0xFDD
 16821                           plusw2	equ	0xFDB
 16822                           fsr2h	equ	0xFDA
 16823                           fsr2l	equ	0xFD9
 16824                           status	equ	0xFD8
 16825                           
 16826 ;; *************** function i2_FSH_Write_IR_RF *****************
 16827 ;; Defined at:
 16828 ;;		line 196 in file "FLASH.c"
 16829 ;; Parameters:    Size  Location     Type
 16830 ;;		None
 16831 ;; Auto vars:     Size  Location     Type
 16832 ;;  FSH_Write_IR    2   32[BANK0 ] PTR unsigned int 
 16833 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), 
 16834 ;;  FSH_Write_IR    2   29[BANK0 ] unsigned int 
 16835 ;;  FSH_Write_IR    2   25[BANK0 ] unsigned int 
 16836 ;;  FSH_Write_IR    1   31[BANK0 ] unsigned char 
 16837 ;;  FSH_Write_IR    1   28[BANK0 ] unsigned char 
 16838 ;;  FSH_Write_IR    1   27[BANK0 ] unsigned char 
 16839 ;;  FSH_Write_IR    1   24[BANK0 ] unsigned char 
 16840 ;;  FSH_Write_IR    1   23[BANK0 ] unsigned char 
 16841 ;; Return value:  Size  Location     Type
 16842 ;;                  1    wreg      unsigned char 
 16843 ;; Registers used:
 16844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16845 ;; Tracked objects:
 16846 ;;		On entry : F/1
 16847 ;;		On exit  : F/0
 16848 ;;		Unchanged: 0/0
 16849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16850 ;;      Params:         0       0       0       0       0
 16851 ;;      Locals:         0      11       0       0       0
 16852 ;;      Temps:          0       6       0       0       0
 16853 ;;      Totals:         0      17       0       0       0
 16854 ;;Total ram usage:       17 bytes
 16855 ;; Hardware stack levels used:    1
 16856 ;; Hardware stack levels required when called:    3
 16857 ;; This function calls:
 16858 ;;		i2_FSH_AddressToBlock
 16859 ;;		i2_FSH_EraseBlock
 16860 ;;		i2_FSH_VerifyWriteIntArray
 16861 ;;		i2_FSH_WriteIntArray
 16862 ;;		i2_IR_ResetData
 16863 ;;		i2_MSC_BufferCopyIntConst
 16864 ;;		i2_RF_ResetData
 16865 ;; This function is called by:
 16866 ;;		_RF_CheckCode
 16867 ;; This function uses a non-reentrant model
 16868 ;;
 16869                           
 16870                           	psect	text109
 16871  002F04                     __ptext109:
 16872                           	opt stack 0
 16873  002F04                     i2_FSH_Write_IR_RF:
 16874                           	opt stack 13
 16875                           
 16876                           ; BSR set to: 1
 16877                           ;FLASH.c: 198: unsigned int i;
 16878                           ;FLASH.c: 199: unsigned char j;
 16879                           ;FLASH.c: 200: unsigned char WriteTries;
 16880                           ;FLASH.c: 201: unsigned int *RAMaddress;
 16881                           ;FLASH.c: 202: unsigned char status = 0;
 16882                           
 16883                           ; BSR set to: 0
 16884                           ;incstack = 0
 16885  002F04  0100               	movlb	0	; () banked
 16886  002F06  6B9C               	clrf	i2FSH_Write_IR_RF@status& (0+255),b
 16887                           
 16888                           ; BSR set to: 0
 16889                           ;FLASH.c: 204: unsigned char highint = INTCONbits.GIE;
 16890  002F08  0E00               	movlw	0
 16891  002F0A  BEF2               	btfsc	intcon,7,c	;volatile
 16892  002F0C  0E01               	movlw	1
 16893  002F0E  6F97               	movwf	i2FSH_Write_IR_RF@highint& (0+255),b
 16894                           
 16895                           ;FLASH.c: 205: unsigned char lowint = INTCONbits.PEIE;
 16896  002F10  0E00               	movlw	0
 16897  002F12  BCF2               	btfsc	intcon,6,c	;volatile
 16898  002F14  0E01               	movlw	1
 16899  002F16  6F98               	movwf	i2FSH_Write_IR_RF@lowint& (0+255),b
 16900                           
 16901                           ; BSR set to: 0
 16902                           ;FLASH.c: 207: INTCONbits.GIE = 0;
 16903  002F18  9EF2               	bcf	intcon,7,c	;volatile
 16904                           
 16905                           ; BSR set to: 0
 16906                           ;FLASH.c: 208: INTCONbits.PEIE = 0;
 16907  002F1A  9CF2               	bcf	intcon,6,c	;volatile
 16908                           
 16909                           ; BSR set to: 0
 16910                           ;FLASH.c: 210: if(IR_Saved == 90 && RF_Saved == 90)
 16911  002F1C  0E5A               	movlw	90
 16912  002F1E  0101               	movlb	1	; () banked
 16913  002F20  19AC               	xorwf	_IR_Saved& (0+255),w,b
 16914  002F22  E107               	bnz	i2l5700
 16915                           
 16916                           ; BSR set to: 1
 16917  002F24  0E5A               	movlw	90
 16918  002F26  19AD               	xorwf	_RF_Saved& (0+255),w,b
 16919  002F28  E104               	bnz	i2l5700
 16920  002F2A                     i2l5696:
 16921                           
 16922                           ; BSR set to: 1
 16923                           ;FLASH.c: 211: {
 16924                           ;FLASH.c: 213: IR_Saved = 91;
 16925  002F2A  0E5B               	movlw	91
 16926  002F2C  6FAC               	movwf	_IR_Saved& (0+255),b
 16927                           
 16928                           ;FLASH.c: 214: RF_Saved = 91;
 16929  002F2E  6FAD               	movwf	_RF_Saved& (0+255),b
 16930                           
 16931                           ;FLASH.c: 215: goto END;
 16932  002F30  D208               	goto	i2l966
 16933  002F32                     i2l5700:
 16934                           
 16935                           ; BSR set to: 1
 16936                           ;FLASH.c: 217: else if(IR_Saved != 90 && RF_Saved != 90)
 16937  002F32  0E5A               	movlw	90
 16938  002F34  19AC               	xorwf	_IR_Saved& (0+255),w,b
 16939  002F36  E003               	bz	i2l5706
 16940                           
 16941                           ; BSR set to: 1
 16942  002F38  0E5A               	movlw	90
 16943  002F3A  19AD               	xorwf	_RF_Saved& (0+255),w,b
 16944  002F3C  E1F6               	bnz	i2l5696
 16945  002F3E                     i2l5706:
 16946                           
 16947                           ; BSR set to: 1
 16948                           ;FLASH.c: 223: }
 16949                           ;FLASH.c: 225: if(IR_Saved == 90)
 16950  002F3E  0E5A               	movlw	90
 16951  002F40  19AC               	xorwf	_IR_Saved& (0+255),w,b
 16952  002F42  E137               	bnz	i2l5720
 16953                           
 16954                           ; BSR set to: 1
 16955                           ;FLASH.c: 226: {
 16956                           ;FLASH.c: 228: RF_ResetData();
 16957  002F44  ECBA  F00D         	call	i2_RF_ResetData	;wreg free
 16958                           
 16959                           ; BSR set to: 0
 16960                           ;FLASH.c: 229: MSC_BufferCopyIntConst(&RF_SavedTiming,&RF_DataTiming, 64, 0);
 16961  002F48  0E80               	movlw	128
 16962  002F4A  6F86               	movwf	i2MSC_BufferCopyIntConst@from& (0+255),b
 16963  002F4C  0E25               	movlw	37
 16964  002F4E  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 16965  002F50  6B88               	clrf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 16966  002F52  0E07               	movlw	low _RF_DataTiming
 16967  002F54  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 16968  002F56  0E01               	movlw	high _RF_DataTiming
 16969  002F58  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 16970  002F5A  6B8C               	clrf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 16971  002F5C  0E40               	movlw	64
 16972  002F5E  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 16973  002F60  6B8E               	clrf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 16974  002F62  6B8D               	clrf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 16975  002F64  EC0E  F007         	call	i2_MSC_BufferCopyIntConst	;wreg free
 16976                           
 16977                           ; BSR set to: 0
 16978                           ;FLASH.c: 230: if(IRProgramCodeNumber == 0)
 16979  002F68  5068               	movf	_IRProgramCodeNumber,w,c
 16980  002F6A  E111               	bnz	i2l5716
 16981  002F6C                     i2l5714:
 16982                           
 16983                           ; BSR set to: 0
 16984                           ;FLASH.c: 231: {
 16985                           ;FLASH.c: 232: MSC_BufferCopyIntConst(&IR_SavedTiming1,&IR_DataHolder1, 96, 0);
 16986  002F6C  0EC0               	movlw	192
 16987  002F6E  6F86               	movwf	i2MSC_BufferCopyIntConst@from& (0+255),b
 16988  002F70  0E24               	movlw	36
 16989  002F72  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 16990  002F74  6B88               	clrf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 16991  002F76  0E00               	movlw	low _IR_DataHolder1
 16992  002F78  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 16993  002F7A  0E03               	movlw	high _IR_DataHolder1
 16994  002F7C  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 16995  002F7E  6B8C               	clrf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 16996  002F80  0E60               	movlw	96
 16997  002F82  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 16998  002F84  6B8E               	clrf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 16999  002F86  6B8D               	clrf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 17000  002F88  EC0E  F007         	call	i2_MSC_BufferCopyIntConst	;wreg free
 17001                           
 17002                           ;FLASH.c: 233: }
 17003  002F8C  D024               	goto	i2l5726
 17004  002F8E                     i2l5716:
 17005                           
 17006                           ; BSR set to: 0
 17007                           ;FLASH.c: 234: else if(IRProgramCodeNumber == 1)
 17008  002F8E  0468               	decf	_IRProgramCodeNumber,w,c
 17009  002F90  E122               	bnz	i2l5726
 17010                           
 17011                           ; BSR set to: 0
 17012                           ;FLASH.c: 235: {
 17013                           ;FLASH.c: 236: MSC_BufferCopyIntConst(&IR_SavedTiming0,&IR_DataHolder1, 96, 0);
 17014  002F92  6B86               	clrf	i2MSC_BufferCopyIntConst@from& (0+255),b
 17015  002F94  0E24               	movlw	36
 17016  002F96  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 17017  002F98  6B88               	clrf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 17018  002F9A  0E00               	movlw	low _IR_DataHolder1
 17019  002F9C  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 17020  002F9E  0E03               	movlw	high _IR_DataHolder1
 17021  002FA0  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 17022  002FA2  6B8C               	clrf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 17023  002FA4  0E60               	movlw	96
 17024  002FA6  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 17025  002FA8  6B8E               	clrf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 17026  002FAA  6B8D               	clrf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 17027  002FAC  EC0E  F007         	call	i2_MSC_BufferCopyIntConst	;wreg free
 17028  002FB0  D012               	goto	i2l5726
 17029  002FB2                     i2l5720:
 17030                           
 17031                           ; BSR set to: 1
 17032                           ;FLASH.c: 239: else
 17033                           ;FLASH.c: 240: {
 17034                           ;FLASH.c: 242: IR_ResetData();
 17035  002FB2  ECBE  F00D         	call	i2_IR_ResetData	;wreg free
 17036                           
 17037                           ; BSR set to: 0
 17038                           ;FLASH.c: 243: MSC_BufferCopyIntConst(&IR_SavedTiming0,&IR_DataTiming, 96, 0);
 17039  002FB6  6B86               	clrf	i2MSC_BufferCopyIntConst@from& (0+255),b
 17040  002FB8  0E24               	movlw	36
 17041  002FBA  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 17042  002FBC  6B88               	clrf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 17043  002FBE  0E00               	movlw	low _IR_DataTiming
 17044  002FC0  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 17045  002FC2  0E02               	movlw	high _IR_DataTiming
 17046  002FC4  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 17047  002FC6  6B8C               	clrf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 17048  002FC8  0E60               	movlw	96
 17049  002FCA  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 17050  002FCC  6B8E               	clrf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 17051  002FCE  6B8D               	clrf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 17052  002FD0  EC0E  F007         	call	i2_MSC_BufferCopyIntConst	;wreg free
 17053  002FD4  D7CB               	goto	i2l5714
 17054  002FD6                     i2l5726:
 17055                           
 17056                           ; BSR set to: 0
 17057                           ;FLASH.c: 245: }
 17058                           ;FLASH.c: 247: FSH_EraseBlock(&IR_SavedTiming0[0]);
 17059  002FD6  6B84               	clrf	i2FSH_EraseBlock@Address& (0+255),b
 17060  002FD8  0E24               	movlw	36
 17061  002FDA  6F85               	movwf	(i2FSH_EraseBlock@Address+1)& (0+255),b
 17062  002FDC  6B86               	clrf	(i2FSH_EraseBlock@Address+2)& (0+255),b
 17063  002FDE  6B87               	clrf	(i2FSH_EraseBlock@Address+3)& (0+255),b
 17064  002FE0  EC68  F008         	call	i2_FSH_EraseBlock	;wreg free
 17065                           
 17066                           ; BSR set to: 0
 17067                           ;FLASH.c: 252: WriteTries = 1;
 17068  002FE4  0E01               	movlw	1
 17069  002FE6  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17070  002FE8                     i2l974:
 17071                           
 17072                           ; BSR set to: 0
 17073                           ;FLASH.c: 256: if(IR_Saved == 90)
 17074  002FE8  0E5A               	movlw	90
 17075  002FEA  0101               	movlb	1	; () banked
 17076  002FEC  19AC               	xorwf	_IR_Saved& (0+255),w,b
 17077  002FEE  E102               	bnz	i2l5732
 17078                           
 17079                           ; BSR set to: 1
 17080                           ;FLASH.c: 257: {
 17081                           ;FLASH.c: 258: if(IRProgramCodeNumber == 0)
 17082  002FF0  5068               	movf	_IRProgramCodeNumber,w,c
 17083  002FF2  E105               	bnz	i2l5734
 17084  002FF4                     i2l5732:
 17085                           
 17086                           ; BSR set to: 1
 17087                           ;FLASH.c: 259: {
 17088                           ;FLASH.c: 260: RAMaddress = &IR_DataTiming[0];
 17089  002FF4  0E00               	movlw	low _IR_DataTiming
 17090  002FF6  0100               	movlb	0	; () banked
 17091  002FF8  6FA0               	movwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),b
 17092  002FFA  0E02               	movlw	high _IR_DataTiming
 17093  002FFC  D004               	goto	L8
 17094  002FFE                     i2l5734:
 17095                           
 17096                           ; BSR set to: 1
 17097                           ;FLASH.c: 262: else
 17098                           ;FLASH.c: 263: {
 17099                           ;FLASH.c: 264: RAMaddress = &IR_DataHolder1[0];
 17100  002FFE  0E00               	movlw	low _IR_DataHolder1
 17101  003000  0100               	movlb	0	; () banked
 17102  003002  6FA0               	movwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),b
 17103  003004  0E03               	movlw	high _IR_DataHolder1
 17104  003006                     L8:
 17105  003006  6FA1               	movwf	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),b
 17106                           
 17107                           ; BSR set to: 0
 17108                           ;FLASH.c: 270: }
 17109                           ;FLASH.c: 273: FSH_WriteIntArray(&IR_SavedTiming0[0], RAMaddress);
 17110  003008  6B84               	clrf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17111  00300A  0E24               	movlw	36
 17112  00300C  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17113  00300E  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17114  003010  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17115  003014  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17116  003018  ECD2  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17117                           
 17118                           ;FLASH.c: 276: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[0],RAMaddress))
 17119  00301C  0100               	movlb	0	; () banked
 17120  00301E  6B80               	clrf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17121  003020  0E24               	movlw	36
 17122  003022  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17123  003024  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17124  003026  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17125  00302A  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17126  00302E  EC0C  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17127  003032  0900               	iorlw	0
 17128  003034  E106               	bnz	i2l5750
 17129                           
 17130                           ; BSR set to: 0
 17131                           ;FLASH.c: 277: {
 17132                           ;FLASH.c: 278: WriteTries++;
 17133  003036  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17134                           
 17135                           ; BSR set to: 0
 17136                           ;FLASH.c: 279: if(WriteTries > 10)
 17137  003038  0E0A               	movlw	10
 17138  00303A  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17139  00303C  D7D5               	goto	i2l974
 17140  00303E                     i2l5746:
 17141                           
 17142                           ; BSR set to: 0
 17143                           ;FLASH.c: 280: {
 17144                           ;FLASH.c: 281: status = 0;
 17145  00303E  6B9C               	clrf	i2FSH_Write_IR_RF@status& (0+255),b
 17146                           
 17147                           ;FLASH.c: 282: goto END;
 17148  003040  D180               	goto	i2l966
 17149  003042                     i2l5750:
 17150                           
 17151                           ; BSR set to: 0
 17152                           ;FLASH.c: 287: }
 17153                           ;FLASH.c: 288: }
 17154                           ;FLASH.c: 291: WriteTries = 1;
 17155  003042  0E01               	movlw	1
 17156  003044  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17157                           
 17158                           ; BSR set to: 0
 17159                           ;FLASH.c: 292: RAMaddress+=32;
 17160  003046  0E40               	movlw	64
 17161  003048  27A0               	addwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),f,b
 17162  00304A  0E00               	movlw	0
 17163  00304C  23A1               	addwfc	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),f,b
 17164  00304E                     i2l5754:
 17165                           
 17166                           ; BSR set to: 0
 17167                           ;FLASH.c: 296: FSH_WriteIntArray(&IR_SavedTiming0[32], RAMaddress);
 17168  00304E  0E40               	movlw	64
 17169  003050  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17170  003052  0E24               	movlw	36
 17171  003054  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17172  003056  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17173  003058  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17174  00305C  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17175  003060  ECD2  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17176                           
 17177                           ;FLASH.c: 299: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[32], RAMaddress))
 17178  003064  0E40               	movlw	64
 17179  003066  0100               	movlb	0	; () banked
 17180  003068  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17181  00306A  0E24               	movlw	36
 17182  00306C  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17183  00306E  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17184  003070  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17185  003074  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17186  003078  EC0C  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17187  00307C  0900               	iorlw	0
 17188  00307E  E105               	bnz	i2l5766
 17189                           
 17190                           ; BSR set to: 0
 17191                           ;FLASH.c: 300: {
 17192                           ;FLASH.c: 301: WriteTries++;
 17193  003080  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17194                           
 17195                           ; BSR set to: 0
 17196                           ;FLASH.c: 302: if(WriteTries > 10)
 17197  003082  0E0A               	movlw	10
 17198  003084  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17199  003086  D7E3               	goto	i2l5754
 17200  003088  D7DA               	goto	i2l5746
 17201  00308A                     i2l5766:
 17202                           
 17203                           ; BSR set to: 0
 17204                           ;FLASH.c: 310: }
 17205                           ;FLASH.c: 311: }
 17206                           ;FLASH.c: 314: WriteTries = 1;
 17207  00308A  0E01               	movlw	1
 17208  00308C  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17209                           
 17210                           ; BSR set to: 0
 17211                           ;FLASH.c: 315: RAMaddress+=32;
 17212  00308E  0E40               	movlw	64
 17213  003090  27A0               	addwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),f,b
 17214  003092  0E00               	movlw	0
 17215  003094  23A1               	addwfc	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),f,b
 17216  003096                     i2l5770:
 17217                           
 17218                           ; BSR set to: 0
 17219                           ;FLASH.c: 320: FSH_WriteIntArray(&IR_SavedTiming0[64], RAMaddress);
 17220  003096  0E80               	movlw	128
 17221  003098  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17222  00309A  0E24               	movlw	36
 17223  00309C  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17224  00309E  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17225  0030A0  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17226  0030A4  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17227  0030A8  ECD2  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17228                           
 17229                           ;FLASH.c: 323: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming0[64],RAMaddress))
 17230  0030AC  0E80               	movlw	128
 17231  0030AE  0100               	movlb	0	; () banked
 17232  0030B0  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17233  0030B2  0E24               	movlw	36
 17234  0030B4  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17235  0030B6  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17236  0030B8  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17237  0030BC  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17238  0030C0  EC0C  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17239  0030C4  0900               	iorlw	0
 17240  0030C6  E105               	bnz	i2l5782
 17241                           
 17242                           ; BSR set to: 0
 17243                           ;FLASH.c: 324: {
 17244                           ;FLASH.c: 325: WriteTries++;
 17245  0030C8  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17246                           
 17247                           ; BSR set to: 0
 17248                           ;FLASH.c: 326: if(WriteTries > 10)
 17249  0030CA  0E0A               	movlw	10
 17250  0030CC  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17251  0030CE  D7E3               	goto	i2l5770
 17252  0030D0  D7B6               	goto	i2l5746
 17253  0030D2                     i2l5782:
 17254                           
 17255                           ; BSR set to: 0
 17256                           ;FLASH.c: 334: }
 17257                           ;FLASH.c: 335: }
 17258                           ;FLASH.c: 338: WriteTries = 1;
 17259  0030D2  0E01               	movlw	1
 17260  0030D4  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17261  0030D6                     i2l5784:
 17262                           
 17263                           ; BSR set to: 0
 17264                           ;FLASH.c: 342: if(IR_Saved == 90)
 17265  0030D6  0E5A               	movlw	90
 17266  0030D8  0101               	movlb	1	; () banked
 17267  0030DA  19AC               	xorwf	_IR_Saved& (0+255),w,b
 17268  0030DC  E107               	bnz	i2l5790
 17269                           
 17270                           ; BSR set to: 1
 17271                           ;FLASH.c: 343: {
 17272                           ;FLASH.c: 344: if(IRProgramCodeNumber == 1)
 17273  0030DE  0468               	decf	_IRProgramCodeNumber,w,c
 17274  0030E0  E105               	bnz	i2l5790
 17275                           
 17276                           ; BSR set to: 1
 17277                           ;FLASH.c: 345: {
 17278                           ;FLASH.c: 346: RAMaddress = &IR_DataTiming[0];
 17279  0030E2  0E00               	movlw	low _IR_DataTiming
 17280  0030E4  0100               	movlb	0	; () banked
 17281  0030E6  6FA0               	movwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),b
 17282  0030E8  0E02               	movlw	high _IR_DataTiming
 17283  0030EA  D004               	goto	L9
 17284  0030EC                     i2l5790:
 17285                           
 17286                           ; BSR set to: 1
 17287                           ;FLASH.c: 348: else
 17288                           ;FLASH.c: 349: {
 17289                           ;FLASH.c: 350: RAMaddress = &IR_DataHolder1[0];
 17290  0030EC  0E00               	movlw	low _IR_DataHolder1
 17291  0030EE  0100               	movlb	0	; () banked
 17292  0030F0  6FA0               	movwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),b
 17293  0030F2  0E03               	movlw	high _IR_DataHolder1
 17294  0030F4                     L9:
 17295  0030F4  6FA1               	movwf	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),b
 17296                           
 17297                           ; BSR set to: 0
 17298                           ;FLASH.c: 356: }
 17299                           ;FLASH.c: 359: FSH_WriteIntArray(&IR_SavedTiming1[0], RAMaddress);
 17300  0030F6  0EC0               	movlw	192
 17301  0030F8  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17302  0030FA  0E24               	movlw	36
 17303  0030FC  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17304  0030FE  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17305  003100  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17306  003104  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17307  003108  ECD2  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17308                           
 17309                           ;FLASH.c: 362: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[0], RAMaddress))
 17310  00310C  0EC0               	movlw	192
 17311  00310E  0100               	movlb	0	; () banked
 17312  003110  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17313  003112  0E24               	movlw	36
 17314  003114  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17315  003116  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17316  003118  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17317  00311C  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17318  003120  EC0C  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17319  003124  0900               	iorlw	0
 17320  003126  E105               	bnz	i2l5806
 17321                           
 17322                           ; BSR set to: 0
 17323                           ;FLASH.c: 363: {
 17324                           ;FLASH.c: 364: WriteTries++;
 17325  003128  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17326                           
 17327                           ; BSR set to: 0
 17328                           ;FLASH.c: 365: if(WriteTries > 10)
 17329  00312A  0E0A               	movlw	10
 17330  00312C  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17331  00312E  D7D3               	goto	i2l5784
 17332  003130  D786               	goto	i2l5746
 17333  003132                     i2l5806:
 17334                           
 17335                           ; BSR set to: 0
 17336                           ;FLASH.c: 373: }
 17337                           ;FLASH.c: 374: }
 17338                           ;FLASH.c: 377: WriteTries = 1;
 17339  003132  0E01               	movlw	1
 17340  003134  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17341                           
 17342                           ; BSR set to: 0
 17343                           ;FLASH.c: 378: RAMaddress+=32;
 17344  003136  0E40               	movlw	64
 17345  003138  27A0               	addwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),f,b
 17346  00313A  0E00               	movlw	0
 17347  00313C  23A1               	addwfc	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),f,b
 17348  00313E                     i2l5810:
 17349                           
 17350                           ; BSR set to: 0
 17351                           ;FLASH.c: 383: FSH_WriteIntArray(&IR_SavedTiming1[32], RAMaddress);
 17352  00313E  6B84               	clrf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17353  003140  0E25               	movlw	37
 17354  003142  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17355  003144  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17356  003146  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17357  00314A  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17358  00314E  ECD2  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17359                           
 17360                           ;FLASH.c: 386: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[32], RAMaddress))
 17361  003152  0100               	movlb	0	; () banked
 17362  003154  6B80               	clrf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17363  003156  0E25               	movlw	37
 17364  003158  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17365  00315A  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17366  00315C  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17367  003160  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17368  003164  EC0C  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17369  003168  0900               	iorlw	0
 17370  00316A  E105               	bnz	i2l5822
 17371                           
 17372                           ; BSR set to: 0
 17373                           ;FLASH.c: 387: {
 17374                           ;FLASH.c: 388: WriteTries++;
 17375  00316C  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17376                           
 17377                           ; BSR set to: 0
 17378                           ;FLASH.c: 389: if(WriteTries > 10)
 17379  00316E  0E0A               	movlw	10
 17380  003170  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17381  003172  D7E5               	goto	i2l5810
 17382  003174  D764               	goto	i2l5746
 17383  003176                     i2l5822:
 17384                           
 17385                           ; BSR set to: 0
 17386                           ;FLASH.c: 397: }
 17387                           ;FLASH.c: 398: }
 17388                           ;FLASH.c: 401: WriteTries = 1;
 17389  003176  0E01               	movlw	1
 17390  003178  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17391                           
 17392                           ; BSR set to: 0
 17393                           ;FLASH.c: 402: RAMaddress+=32;
 17394  00317A  0E40               	movlw	64
 17395  00317C  27A0               	addwf	i2FSH_Write_IR_RF@RAMaddress& (0+255),f,b
 17396  00317E  0E00               	movlw	0
 17397  003180  23A1               	addwfc	(i2FSH_Write_IR_RF@RAMaddress+1)& (0+255),f,b
 17398  003182                     i2l5826:
 17399                           
 17400                           ; BSR set to: 0
 17401                           ;FLASH.c: 407: FSH_WriteIntArray(&IR_SavedTiming1[64], RAMaddress);
 17402  003182  0E40               	movlw	64
 17403  003184  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17404  003186  0E25               	movlw	37
 17405  003188  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17406  00318A  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17407  00318C  C0A0  F087         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_WriteIntArray@Array
 17408  003190  C0A1  F088         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_WriteIntArray@Array+1
 17409  003194  ECD2  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17410                           
 17411                           ;FLASH.c: 410: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming1[64], RAMaddress))
 17412  003198  0E40               	movlw	64
 17413  00319A  0100               	movlb	0	; () banked
 17414  00319C  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17415  00319E  0E25               	movlw	37
 17416  0031A0  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17417  0031A2  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17418  0031A4  C0A0  F083         	movff	i2FSH_Write_IR_RF@RAMaddress,i2FSH_VerifyWriteIntArray@Array
 17419  0031A8  C0A1  F084         	movff	i2FSH_Write_IR_RF@RAMaddress+1,i2FSH_VerifyWriteIntArray@Array+1
 17420  0031AC  EC0C  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17421  0031B0  0900               	iorlw	0
 17422  0031B2  E105               	bnz	i2l5838
 17423                           
 17424                           ; BSR set to: 0
 17425                           ;FLASH.c: 411: {
 17426                           ;FLASH.c: 412: WriteTries++;
 17427  0031B4  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17428                           
 17429                           ; BSR set to: 0
 17430                           ;FLASH.c: 413: if(WriteTries > 10)
 17431  0031B6  0E0A               	movlw	10
 17432  0031B8  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17433  0031BA  D7E3               	goto	i2l5826
 17434  0031BC  D740               	goto	i2l5746
 17435  0031BE                     i2l5838:
 17436                           
 17437                           ; BSR set to: 0
 17438                           ;FLASH.c: 421: }
 17439                           ;FLASH.c: 422: }
 17440                           ;FLASH.c: 425: WriteTries = 1;
 17441  0031BE  0E01               	movlw	1
 17442  0031C0  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17443  0031C2                     i2l5840:
 17444                           
 17445                           ; BSR set to: 0
 17446                           ;FLASH.c: 430: FSH_WriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]);
 17447  0031C2  0E80               	movlw	128
 17448  0031C4  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17449  0031C6  0E25               	movlw	37
 17450  0031C8  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17451  0031CA  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17452  0031CC  0E07               	movlw	low _RF_DataTiming
 17453  0031CE  6F87               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17454  0031D0  0E01               	movlw	high _RF_DataTiming
 17455  0031D2  6F88               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17456  0031D4  ECD2  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17457                           
 17458                           ;FLASH.c: 433: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]))
 17459  0031D8  0E80               	movlw	128
 17460  0031DA  0100               	movlb	0	; () banked
 17461  0031DC  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17462  0031DE  0E25               	movlw	37
 17463  0031E0  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17464  0031E2  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17465  0031E4  0E07               	movlw	low _RF_DataTiming
 17466  0031E6  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17467  0031E8  0E01               	movlw	high _RF_DataTiming
 17468  0031EA  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17469  0031EC  EC0C  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17470  0031F0  0900               	iorlw	0
 17471  0031F2  E105               	bnz	i2l5852
 17472                           
 17473                           ; BSR set to: 0
 17474                           ;FLASH.c: 434: {
 17475                           ;FLASH.c: 435: WriteTries++;
 17476  0031F4  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17477                           
 17478                           ; BSR set to: 0
 17479                           ;FLASH.c: 436: if(WriteTries > 10)
 17480  0031F6  0E0A               	movlw	10
 17481  0031F8  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17482  0031FA  D7E3               	goto	i2l5840
 17483  0031FC  D720               	goto	i2l5746
 17484  0031FE                     i2l5852:
 17485                           
 17486                           ; BSR set to: 0
 17487                           ;FLASH.c: 444: }
 17488                           ;FLASH.c: 445: }
 17489                           ;FLASH.c: 448: WriteTries = 1;
 17490  0031FE  0E01               	movlw	1
 17491  003200  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17492  003202                     i2l5854:
 17493                           
 17494                           ; BSR set to: 0
 17495                           ;FLASH.c: 453: FSH_WriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]);
 17496  003202  0EC0               	movlw	192
 17497  003204  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17498  003206  0E25               	movlw	37
 17499  003208  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17500  00320A  6B86               	clrf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17501  00320C  0E47               	movlw	low (_RF_DataTiming+64)
 17502  00320E  6F87               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17503  003210  0E01               	movlw	high (_RF_DataTiming+64)
 17504  003212  6F88               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17505  003214  ECD2  F005         	call	i2_FSH_WriteIntArray	;wreg free
 17506                           
 17507                           ;FLASH.c: 456: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]))
 17508  003218  0EC0               	movlw	192
 17509  00321A  0100               	movlb	0	; () banked
 17510  00321C  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17511  00321E  0E25               	movlw	37
 17512  003220  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17513  003222  6B82               	clrf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17514  003224  0E47               	movlw	low (_RF_DataTiming+64)
 17515  003226  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17516  003228  0E01               	movlw	high (_RF_DataTiming+64)
 17517  00322A  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17518  00322C  EC0C  F009         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17519  003230  0900               	iorlw	0
 17520  003232  E105               	bnz	i2l5866
 17521                           
 17522                           ; BSR set to: 0
 17523                           ;FLASH.c: 457: {
 17524                           ;FLASH.c: 458: WriteTries++;
 17525  003234  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17526                           
 17527                           ; BSR set to: 0
 17528                           ;FLASH.c: 459: if(WriteTries > 10)
 17529  003236  0E0A               	movlw	10
 17530  003238  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17531  00323A  D7E3               	goto	i2l5854
 17532  00323C  D700               	goto	i2l5746
 17533  00323E                     i2l5866:
 17534                           
 17535                           ; BSR set to: 0
 17536                           ;FLASH.c: 467: }
 17537                           ;FLASH.c: 468: }
 17538                           ;FLASH.c: 471: for(j=8;j<16;j++)
 17539  00323E  0E08               	movlw	8
 17540  003240  6F9B               	movwf	i2FSH_Write_IR_RF@j& (0+255),b
 17541  003242                     i2l5868:
 17542                           
 17543                           ; BSR set to: 0
 17544  003242  0E0F               	movlw	15
 17545  003244  659B               	cpfsgt	i2FSH_Write_IR_RF@j& (0+255),b
 17546  003246  D001               	goto	i2l5872
 17547  003248  D07A               	goto	i2l5920
 17548  00324A                     i2l5872:
 17549                           
 17550                           ; BSR set to: 0
 17551                           ;FLASH.c: 472: {
 17552                           ;FLASH.c: 473: WriteTries = 1;
 17553  00324A  0E01               	movlw	1
 17554  00324C  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17555  00324E                     i2l5874:
 17556                           
 17557                           ; BSR set to: 0
 17558                           ;FLASH.c: 476: i=0;
 17559  00324E  6B9D               	clrf	i2FSH_Write_IR_RF@i& (0+255),b
 17560  003250  6B9E               	clrf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 17561                           
 17562                           ; BSR set to: 0
 17563                           ;FLASH.c: 477: FlashWasteindex = i + 64*(j-8);
 17564  003252  519B               	movf	i2FSH_Write_IR_RF@j& (0+255),w,b
 17565  003254  6F91               	movwf	??i2_FSH_Write_IR_RF& (0+255),b
 17566  003256  6B92               	clrf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 17567  003258  0E06               	movlw	6
 17568  00325A                     i2u588_45:
 17569  00325A  90D8               	bcf	status,0,c
 17570  00325C  3791               	rlcf	??i2_FSH_Write_IR_RF& (0+255),f,b
 17571  00325E  3792               	rlcf	(??i2_FSH_Write_IR_RF+1)& (0+255),f,b
 17572  003260  2EE8               	decfsz	wreg,f,c
 17573  003262  D7FB               	goto	i2u588_45
 17574  003264  519D               	movf	i2FSH_Write_IR_RF@i& (0+255),w,b
 17575  003266  2791               	addwf	??i2_FSH_Write_IR_RF& (0+255),f,b
 17576  003268  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17577  00326A  2392               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),f,b
 17578  00326C  0E00               	movlw	0
 17579  00326E  2591               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 17580  003270  6F99               	movwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),b
 17581  003272  0EFE               	movlw	254
 17582  003274  2192               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 17583  003276  6F9A               	movwf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),b
 17584                           
 17585                           ; BSR set to: 0
 17586                           ;FLASH.c: 478: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 17587  003278  6B91               	clrf	??i2_FSH_Write_IR_RF& (0+255),b
 17588  00327A  0E26               	movlw	38
 17589  00327C  6F92               	movwf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 17590  00327E  6B93               	clrf	(??i2_FSH_Write_IR_RF+2)& (0+255),b
 17591  003280  5199               	movf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 17592  003282  2591               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 17593  003284  6F94               	movwf	(??i2_FSH_Write_IR_RF+3)& (0+255),b
 17594  003286  519A               	movf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 17595  003288  2192               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 17596  00328A  6F95               	movwf	(??i2_FSH_Write_IR_RF+4)& (0+255),b
 17597  00328C  0E00               	movlw	0
 17598  00328E  2193               	addwfc	(??i2_FSH_Write_IR_RF+2)& (0+255),w,b
 17599  003290  6F96               	movwf	(??i2_FSH_Write_IR_RF+5)& (0+255),b
 17600  003292  5194               	movf	(??i2_FSH_Write_IR_RF+3)& (0+255),w,b
 17601  003294  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 17602  003296  5195               	movf	(??i2_FSH_Write_IR_RF+4)& (0+255),w,b
 17603  003298  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 17604  00329A  5196               	movf	(??i2_FSH_Write_IR_RF+5)& (0+255),w,b
 17605  00329C  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 17606  00329E  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 17607  0032A0  EC53  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 17608                           
 17609                           ; BSR set to: 0
 17610                           ;FLASH.c: 479: for(i = 0; i<64; i++)
 17611  0032A4  6B9D               	clrf	i2FSH_Write_IR_RF@i& (0+255),b
 17612  0032A6  6B9E               	clrf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 17613  0032A8                     i2l5882:
 17614                           
 17615                           ; BSR set to: 0
 17616  0032A8  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17617  0032AA  E10A               	bnz	i2l5892
 17618  0032AC  0E40               	movlw	64
 17619  0032AE  5D9D               	subwf	i2FSH_Write_IR_RF@i& (0+255),w,b
 17620  0032B0  E207               	bc	i2l5892
 17621                           
 17622                           ; BSR set to: 0
 17623                           ;FLASH.c: 480: {
 17624                           ;FLASH.c: 482: TABLAT = 0xDA;
 17625  0032B2  0EDA               	movlw	218
 17626  0032B4  6EF5               	movwf	tablat,c	;volatile
 17627  0032B6  000D               	tblwt		*+	;# 
 17628  0032B8  0100               	movlb	0	; () banked
 17629  0032BA  4B9D               	infsnz	i2FSH_Write_IR_RF@i& (0+255),f,b
 17630  0032BC  2B9E               	incf	(i2FSH_Write_IR_RF@i+1)& (0+255),f,b
 17631  0032BE  D7F4               	goto	i2l5882
 17632  0032C0                     i2l5892:
 17633                           
 17634                           ; BSR set to: 0
 17635                           ;FLASH.c: 484: }
 17636                           ;FLASH.c: 485: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 17637  0032C0  6B91               	clrf	??i2_FSH_Write_IR_RF& (0+255),b
 17638  0032C2  0E26               	movlw	38
 17639  0032C4  6F92               	movwf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 17640  0032C6  6B93               	clrf	(??i2_FSH_Write_IR_RF+2)& (0+255),b
 17641  0032C8  5199               	movf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 17642  0032CA  2591               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 17643  0032CC  6F94               	movwf	(??i2_FSH_Write_IR_RF+3)& (0+255),b
 17644  0032CE  519A               	movf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 17645  0032D0  2192               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 17646  0032D2  6F95               	movwf	(??i2_FSH_Write_IR_RF+4)& (0+255),b
 17647  0032D4  0E00               	movlw	0
 17648  0032D6  2193               	addwfc	(??i2_FSH_Write_IR_RF+2)& (0+255),w,b
 17649  0032D8  6F96               	movwf	(??i2_FSH_Write_IR_RF+5)& (0+255),b
 17650  0032DA  5194               	movf	(??i2_FSH_Write_IR_RF+3)& (0+255),w,b
 17651  0032DC  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 17652  0032DE  5195               	movf	(??i2_FSH_Write_IR_RF+4)& (0+255),w,b
 17653  0032E0  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 17654  0032E2  5196               	movf	(??i2_FSH_Write_IR_RF+5)& (0+255),w,b
 17655  0032E4  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 17656  0032E6  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 17657  0032E8  EC53  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 17658                           
 17659                           ; BSR set to: 0
 17660                           ;FLASH.c: 487: EECON1bits.FREE = 0;
 17661  0032EC  98A6               	bcf	4006,4,c	;volatile
 17662  0032EE  84A6               	bsf	4006,2,c	;# 
 17663  0032F0  9EF2               	bcf	intcon,7,c	;# 
 17664  0032F2  0E55               	movlw	85	;# 
 17665  0032F4  6EA7               	movwf	4007,c	;# 
 17666  0032F6  0EAA               	movlw	170	;# 
 17667  0032F8  6EA7               	movwf	4007,c	;# 
 17668  0032FA  82A6               	bsf	4006,1,c	;# 
 17669                           
 17670                           ;FLASH.c: 498: for(i=0; i<64;i++)
 17671  0032FC  0100               	movlb	0	; () banked
 17672  0032FE  6B9D               	clrf	i2FSH_Write_IR_RF@i& (0+255),b
 17673  003300  6B9E               	clrf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 17674  003302                     i2l5898:
 17675                           
 17676                           ; BSR set to: 0
 17677  003302  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17678  003304  E11A               	bnz	i2l5916
 17679  003306  0E40               	movlw	64
 17680  003308  5D9D               	subwf	i2FSH_Write_IR_RF@i& (0+255),w,b
 17681  00330A  E217               	bc	i2l5916
 17682                           
 17683                           ; BSR set to: 0
 17684                           ;FLASH.c: 499: {
 17685                           ;FLASH.c: 500: if(FlashWaste[FlashWasteindex] != 0xDA)
 17686  00330C  0E00               	movlw	0
 17687  00330E  2599               	addwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 17688  003310  6EF6               	movwf	tblptrl,c
 17689  003312  0E26               	movlw	38
 17690  003314  219A               	addwfc	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 17691  003316  6EF7               	movwf	tblptrh,c
 17692  003318  6AF8               	clrf	tblptru,c
 17693  00331A  0E00               	movlw	0
 17694  00331C  22F8               	addwfc	tblptru,f,c
 17695  00331E  0008               	tblrd		*
 17696  003320  50F5               	movf	tablat,w,c
 17697  003322  0ADA               	xorlw	218
 17698  003324  E005               	bz	i2l5912
 17699                           
 17700                           ; BSR set to: 0
 17701                           ;FLASH.c: 501: {
 17702                           ;FLASH.c: 502: WriteTries++;
 17703  003326  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17704                           
 17705                           ; BSR set to: 0
 17706                           ;FLASH.c: 503: if(WriteTries > 10)
 17707  003328  0E0A               	movlw	10
 17708  00332A  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17709  00332C  D790               	goto	i2l5874
 17710  00332E  D687               	goto	i2l5746
 17711  003330                     i2l5912:
 17712                           
 17713                           ; BSR set to: 0
 17714                           ;FLASH.c: 511: }
 17715                           ;FLASH.c: 512: }
 17716                           ;FLASH.c: 513: FlashWasteindex++;
 17717  003330  4B99               	infsnz	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),f,b
 17718  003332  2B9A               	incf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),f,b
 17719  003334  4B9D               	infsnz	i2FSH_Write_IR_RF@i& (0+255),f,b
 17720  003336  2B9E               	incf	(i2FSH_Write_IR_RF@i+1)& (0+255),f,b
 17721  003338  D7E4               	goto	i2l5898
 17722  00333A                     i2l5916:
 17723                           
 17724                           ; BSR set to: 0
 17725  00333A  2B9B               	incf	i2FSH_Write_IR_RF@j& (0+255),f,b
 17726  00333C  D782               	goto	i2l5868
 17727  00333E                     i2l5920:
 17728                           
 17729                           ; BSR set to: 0
 17730                           ;FLASH.c: 514: }
 17731                           ;FLASH.c: 515: }
 17732                           ;FLASH.c: 516: status = 1;
 17733  00333E  0E01               	movlw	1
 17734  003340  6F9C               	movwf	i2FSH_Write_IR_RF@status& (0+255),b
 17735  003342                     i2l966:
 17736                           
 17737                           ;FLASH.c: 519: if(highint)
 17738  003342  0100               	movlb	0	; () banked
 17739  003344  5197               	movf	i2FSH_Write_IR_RF@highint& (0+255),w,b
 17740  003346  E001               	bz	i2l5924
 17741                           
 17742                           ; BSR set to: 0
 17743                           ;FLASH.c: 520: {
 17744                           ;FLASH.c: 521: INTCONbits.GIE = 1;
 17745  003348  8EF2               	bsf	intcon,7,c	;volatile
 17746  00334A                     i2l5924:
 17747                           
 17748                           ; BSR set to: 0
 17749                           ;FLASH.c: 522: }
 17750                           ;FLASH.c: 523: if(lowint)
 17751  00334A  5198               	movf	i2FSH_Write_IR_RF@lowint& (0+255),w,b
 17752  00334C  E001               	bz	i2l5928
 17753                           
 17754                           ; BSR set to: 0
 17755                           ;FLASH.c: 524: {
 17756                           ;FLASH.c: 525: INTCONbits.PEIE = 1;
 17757  00334E  8CF2               	bsf	intcon,6,c	;volatile
 17758  003350                     i2l5928:
 17759                           
 17760                           ; BSR set to: 0
 17761                           ;FLASH.c: 526: }
 17762                           ;FLASH.c: 527: return status;
 17763  003350  519C               	movf	i2FSH_Write_IR_RF@status& (0+255),w,b
 17764                           
 17765                           ; BSR set to: 0
 17766  003352  0012               	return		;funcret
 17767  003354                     __end_ofi2_FSH_Write_IR_RF:
 17768                           	opt stack 0
 17769                           tblptru	equ	0xFF8
 17770                           tblptrh	equ	0xFF7
 17771                           tblptrl	equ	0xFF6
 17772                           tablat	equ	0xFF5
 17773                           prodh	equ	0xFF4
 17774                           prodl	equ	0xFF3
 17775                           intcon	equ	0xFF2
 17776                           intcon2	equ	0xFF1
 17777                           intcon3	equ	0xFF0
 17778                           postinc0	equ	0xFEE
 17779                           wreg	equ	0xFE8
 17780                           postdec1	equ	0xFE5
 17781                           fsr1l	equ	0xFE1
 17782                           bsr	equ	0xFE0
 17783                           indf2	equ	0xFDF
 17784                           postinc2	equ	0xFDE
 17785                           postdec2	equ	0xFDD
 17786                           plusw2	equ	0xFDB
 17787                           fsr2h	equ	0xFDA
 17788                           fsr2l	equ	0xFD9
 17789                           status	equ	0xFD8
 17790                           
 17791 ;; *************** function i2_RF_ResetData *****************
 17792 ;; Defined at:
 17793 ;;		line 116 in file "RF.c"
 17794 ;; Parameters:    Size  Location     Type
 17795 ;;		None
 17796 ;; Auto vars:     Size  Location     Type
 17797 ;;		None
 17798 ;; Return value:  Size  Location     Type
 17799 ;;		None               void
 17800 ;; Registers used:
 17801 ;;		None
 17802 ;; Tracked objects:
 17803 ;;		On entry : E/0
 17804 ;;		On exit  : F/0
 17805 ;;		Unchanged: 0/0
 17806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17807 ;;      Params:         0       0       0       0       0
 17808 ;;      Locals:         0       0       0       0       0
 17809 ;;      Temps:          0       0       0       0       0
 17810 ;;      Totals:         0       0       0       0       0
 17811 ;;Total ram usage:        0 bytes
 17812 ;; Hardware stack levels used:    1
 17813 ;; This function calls:
 17814 ;;		Nothing
 17815 ;; This function is called by:
 17816 ;;		_high_isr
 17817 ;;		i2_FSH_Write_IR_RF
 17818 ;; This function uses a non-reentrant model
 17819 ;;
 17820                           
 17821                           	psect	text110
 17822  001B74                     __ptext110:
 17823                           	opt stack 0
 17824  001B74                     i2_RF_ResetData:
 17825                           	opt stack 17
 17826                           
 17827                           ;RF.c: 118: RF_DataPlace = 0;
 17828                           
 17829                           ; BSR set to: 0
 17830                           ;incstack = 0
 17831  001B74  0100               	movlb	0	; () banked
 17832  001B76  6BC9               	clrf	_RF_DataPlace& (0+255),b
 17833                           
 17834                           ;RF.c: 119: RFStarted = 0;
 17835  001B78  6BC7               	clrf	_RFStarted& (0+255),b
 17836                           
 17837                           ; BSR set to: 0
 17838  001B7A  0012               	return		;funcret
 17839  001B7C                     __end_ofi2_RF_ResetData:
 17840                           	opt stack 0
 17841                           tblptru	equ	0xFF8
 17842                           tblptrh	equ	0xFF7
 17843                           tblptrl	equ	0xFF6
 17844                           tablat	equ	0xFF5
 17845                           prodh	equ	0xFF4
 17846                           prodl	equ	0xFF3
 17847                           intcon	equ	0xFF2
 17848                           intcon2	equ	0xFF1
 17849                           intcon3	equ	0xFF0
 17850                           postinc0	equ	0xFEE
 17851                           wreg	equ	0xFE8
 17852                           postdec1	equ	0xFE5
 17853                           fsr1l	equ	0xFE1
 17854                           bsr	equ	0xFE0
 17855                           indf2	equ	0xFDF
 17856                           postinc2	equ	0xFDE
 17857                           postdec2	equ	0xFDD
 17858                           plusw2	equ	0xFDB
 17859                           fsr2h	equ	0xFDA
 17860                           fsr2l	equ	0xFD9
 17861                           status	equ	0xFD8
 17862                           
 17863 ;; *************** function i2_MSC_BufferCopyIntConst *****************
 17864 ;; Defined at:
 17865 ;;		line 150 in file "MISC.c"
 17866 ;; Parameters:    Size  Location     Type
 17867 ;;  from            3    6[BANK0 ] PTR const unsigned int 
 17868 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 17869 ;;  to              2    9[BANK0 ] PTR unsigned int 
 17870 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 17871 ;;  count           2   11[BANK0 ] unsigned int 
 17872 ;;  shift           2   13[BANK0 ] unsigned int 
 17873 ;; Auto vars:     Size  Location     Type
 17874 ;;  MSC_BufferCo    2   15[BANK0 ] unsigned int 
 17875 ;; Return value:  Size  Location     Type
 17876 ;;		None               void
 17877 ;; Registers used:
 17878 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17879 ;; Tracked objects:
 17880 ;;		On entry : F/0
 17881 ;;		On exit  : F/0
 17882 ;;		Unchanged: 0/0
 17883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17884 ;;      Params:         0       9       0       0       0
 17885 ;;      Locals:         0       2       0       0       0
 17886 ;;      Temps:          0       0       0       0       0
 17887 ;;      Totals:         0      11       0       0       0
 17888 ;;Total ram usage:       11 bytes
 17889 ;; Hardware stack levels used:    1
 17890 ;; Hardware stack levels required when called:    1
 17891 ;; This function calls:
 17892 ;;		i2_MSC_CleanBufferInt
 17893 ;; This function is called by:
 17894 ;;		i2_FSH_Write_IR_RF
 17895 ;; This function uses a non-reentrant model
 17896 ;;
 17897                           
 17898                           	psect	text111
 17899  000E1C                     __ptext111:
 17900                           	opt stack 0
 17901  000E1C                     i2_MSC_BufferCopyIntConst:
 17902                           	opt stack 14
 17903                           
 17904                           ; BSR set to: 0
 17905                           ;MISC.c: 153: MSC_CleanBufferInt(to,count);
 17906                           
 17907                           ; BSR set to: 0
 17908                           
 17909                           ; BSR set to: 0
 17910                           ;incstack = 0
 17911  000E1C  C089  F080         	movff	i2MSC_BufferCopyIntConst@to,i2MSC_CleanBufferInt@data
 17912  000E20  C08A  F081         	movff	i2MSC_BufferCopyIntConst@to+1,i2MSC_CleanBufferInt@data+1
 17913  000E24  C08B  F082         	movff	i2MSC_BufferCopyIntConst@count,i2MSC_CleanBufferInt@count
 17914  000E28  C08C  F083         	movff	i2MSC_BufferCopyIntConst@count+1,i2MSC_CleanBufferInt@count+1
 17915  000E2C  EC11  F00B         	call	i2_MSC_CleanBufferInt	;wreg free
 17916                           
 17917                           ; BSR set to: 0
 17918                           ;MISC.c: 154: for(i = shift; i>0; i--)
 17919  000E30  C08D  F08F         	movff	i2MSC_BufferCopyIntConst@shift,i2MSC_BufferCopyIntConst@i
 17920  000E34  C08E  F090         	movff	i2MSC_BufferCopyIntConst@shift+1,i2MSC_BufferCopyIntConst@i+1
 17921  000E38                     i2l4750:
 17922                           
 17923                           ; BSR set to: 0
 17924  000E38  518F               	movf	i2MSC_BufferCopyIntConst@i& (0+255),w,b
 17925  000E3A  1190               	iorwf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),w,b
 17926  000E3C  E02B               	bz	i2l4770
 17927                           
 17928                           ; BSR set to: 0
 17929                           ;MISC.c: 155: {
 17930                           ;MISC.c: 156: *to = ' ';
 17931  000E3E  C089  FFD9         	movff	i2MSC_BufferCopyIntConst@to,fsr2l
 17932  000E42  C08A  FFDA         	movff	i2MSC_BufferCopyIntConst@to+1,fsr2h
 17933  000E46  0E20               	movlw	32
 17934  000E48  6EDE               	movwf	postinc2,c
 17935  000E4A  6ADD               	clrf	postdec2,c
 17936                           
 17937                           ; BSR set to: 0
 17938                           ;MISC.c: 157: to++;
 17939  000E4C  0E02               	movlw	2
 17940  000E4E  2789               	addwf	i2MSC_BufferCopyIntConst@to& (0+255),f,b
 17941  000E50  0E00               	movlw	0
 17942  000E52  238A               	addwfc	(i2MSC_BufferCopyIntConst@to+1)& (0+255),f,b
 17943                           
 17944                           ; BSR set to: 0
 17945  000E54  078F               	decf	i2MSC_BufferCopyIntConst@i& (0+255),f,b
 17946  000E56  A0D8               	btfss	status,0,c
 17947  000E58  0790               	decf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),f,b
 17948  000E5A  D7EE               	goto	i2l4750
 17949  000E5C                     i2l4762:
 17950                           
 17951                           ; BSR set to: 0
 17952                           ;MISC.c: 160: {
 17953                           ;MISC.c: 161: *to = *from;
 17954  000E5C  C086  FFF6         	movff	i2MSC_BufferCopyIntConst@from,tblptrl
 17955  000E60  C087  FFF7         	movff	i2MSC_BufferCopyIntConst@from+1,tblptrh
 17956  000E64  C088  FFF8         	movff	i2MSC_BufferCopyIntConst@from+2,tblptru
 17957  000E68  C089  FFD9         	movff	i2MSC_BufferCopyIntConst@to,fsr2l
 17958  000E6C  C08A  FFDA         	movff	i2MSC_BufferCopyIntConst@to+1,fsr2h
 17959  000E70  0009               	tblrd		*+
 17960  000E72  CFF5 FFDE          	movff	tablat,postinc2
 17961  000E76  0008               	tblrd		*
 17962  000E78  CFF5 FFDD          	movff	tablat,postdec2
 17963                           
 17964                           ; BSR set to: 0
 17965                           ;MISC.c: 162: from++;
 17966  000E7C  0E02               	movlw	2
 17967  000E7E  2786               	addwf	i2MSC_BufferCopyIntConst@from& (0+255),f,b
 17968  000E80  0E00               	movlw	0
 17969  000E82  2387               	addwfc	(i2MSC_BufferCopyIntConst@from+1)& (0+255),f,b
 17970  000E84  2388               	addwfc	(i2MSC_BufferCopyIntConst@from+2)& (0+255),f,b
 17971                           
 17972                           ; BSR set to: 0
 17973                           ;MISC.c: 163: to++;
 17974  000E86  0E02               	movlw	2
 17975  000E88  2789               	addwf	i2MSC_BufferCopyIntConst@to& (0+255),f,b
 17976  000E8A  0E00               	movlw	0
 17977  000E8C  238A               	addwfc	(i2MSC_BufferCopyIntConst@to+1)& (0+255),f,b
 17978                           
 17979                           ; BSR set to: 0
 17980                           ;MISC.c: 164: count--;
 17981  000E8E  078B               	decf	i2MSC_BufferCopyIntConst@count& (0+255),f,b
 17982  000E90  A0D8               	btfss	status,0,c
 17983  000E92  078C               	decf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),f,b
 17984  000E94                     i2l4770:
 17985                           
 17986                           ; BSR set to: 0
 17987  000E94  C086  FFF6         	movff	i2MSC_BufferCopyIntConst@from,tblptrl
 17988  000E98  C087  FFF7         	movff	i2MSC_BufferCopyIntConst@from+1,tblptrh
 17989  000E9C  C088  FFF8         	movff	i2MSC_BufferCopyIntConst@from+2,tblptru
 17990  000EA0  0009               	tblrd		*+
 17991  000EA2  50F5               	movf	tablat,w,c
 17992  000EA4  0009               	tblrd		*+
 17993  000EA6  10F5               	iorwf	tablat,w,c
 17994  000EA8  B4D8               	btfsc	status,2,c
 17995  000EAA  0012               	return	
 17996                           
 17997                           ; BSR set to: 0
 17998  000EAC  518B               	movf	i2MSC_BufferCopyIntConst@count& (0+255),w,b
 17999  000EAE  118C               	iorwf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),w,b
 18000  000EB0  E1D5               	bnz	i2l4762
 18001                           
 18002                           ; BSR set to: 0
 18003  000EB2  0012               	return		;funcret
 18004  000EB4                     __end_ofi2_MSC_BufferCopyIntConst:
 18005                           	opt stack 0
 18006                           tblptru	equ	0xFF8
 18007                           tblptrh	equ	0xFF7
 18008                           tblptrl	equ	0xFF6
 18009                           tablat	equ	0xFF5
 18010                           prodh	equ	0xFF4
 18011                           prodl	equ	0xFF3
 18012                           intcon	equ	0xFF2
 18013                           intcon2	equ	0xFF1
 18014                           intcon3	equ	0xFF0
 18015                           postinc0	equ	0xFEE
 18016                           wreg	equ	0xFE8
 18017                           postdec1	equ	0xFE5
 18018                           fsr1l	equ	0xFE1
 18019                           bsr	equ	0xFE0
 18020                           indf2	equ	0xFDF
 18021                           postinc2	equ	0xFDE
 18022                           postdec2	equ	0xFDD
 18023                           plusw2	equ	0xFDB
 18024                           fsr2h	equ	0xFDA
 18025                           fsr2l	equ	0xFD9
 18026                           status	equ	0xFD8
 18027                           
 18028 ;; *************** function i2_MSC_CleanBufferInt *****************
 18029 ;; Defined at:
 18030 ;;		line 90 in file "MISC.c"
 18031 ;; Parameters:    Size  Location     Type
 18032 ;;  data            2    0[BANK0 ] PTR unsigned int 
 18033 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 18034 ;;  count           2    2[BANK0 ] unsigned int 
 18035 ;; Auto vars:     Size  Location     Type
 18036 ;;  MSC_CleanBuf    2    4[BANK0 ] unsigned int 
 18037 ;; Return value:  Size  Location     Type
 18038 ;;		None               void
 18039 ;; Registers used:
 18040 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18041 ;; Tracked objects:
 18042 ;;		On entry : F/0
 18043 ;;		On exit  : F/0
 18044 ;;		Unchanged: 0/0
 18045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18046 ;;      Params:         0       4       0       0       0
 18047 ;;      Locals:         0       2       0       0       0
 18048 ;;      Temps:          0       0       0       0       0
 18049 ;;      Totals:         0       6       0       0       0
 18050 ;;Total ram usage:        6 bytes
 18051 ;; Hardware stack levels used:    1
 18052 ;; This function calls:
 18053 ;;		Nothing
 18054 ;; This function is called by:
 18055 ;;		i2_MSC_BufferCopyIntConst
 18056 ;; This function uses a non-reentrant model
 18057 ;;
 18058                           
 18059                           	psect	text112
 18060  001622                     __ptext112:
 18061                           	opt stack 0
 18062  001622                     i2_MSC_CleanBufferInt:
 18063                           	opt stack 14
 18064                           
 18065                           ; BSR set to: 0
 18066                           ;MISC.c: 92: unsigned int i=0;
 18067                           
 18068                           ; BSR set to: 0
 18069                           ;incstack = 0
 18070  001622  6B84               	clrf	i2MSC_CleanBufferInt@i& (0+255),b
 18071  001624  6B85               	clrf	(i2MSC_CleanBufferInt@i+1)& (0+255),b
 18072                           
 18073                           ;MISC.c: 93: for(i=0; i<count;i++)
 18074  001626  6B84               	clrf	i2MSC_CleanBufferInt@i& (0+255),b
 18075  001628  6B85               	clrf	(i2MSC_CleanBufferInt@i+1)& (0+255),b
 18076  00162A  D00D               	goto	i2l4350
 18077  00162C                     i2l4346:
 18078                           
 18079                           ; BSR set to: 0
 18080                           ;MISC.c: 94: {
 18081                           ;MISC.c: 95: data[i]= 0;
 18082  00162C  90D8               	bcf	status,0,c
 18083  00162E  3584               	rlcf	i2MSC_CleanBufferInt@i& (0+255),w,b
 18084  001630  6ED9               	movwf	fsr2l,c
 18085  001632  3585               	rlcf	(i2MSC_CleanBufferInt@i+1)& (0+255),w,b
 18086  001634  6EDA               	movwf	fsr2h,c
 18087  001636  5180               	movf	i2MSC_CleanBufferInt@data& (0+255),w,b
 18088  001638  26D9               	addwf	fsr2l,f,c
 18089  00163A  5181               	movf	(i2MSC_CleanBufferInt@data+1)& (0+255),w,b
 18090  00163C  22DA               	addwfc	fsr2h,f,c
 18091  00163E  6ADE               	clrf	postinc2,c
 18092  001640  6ADD               	clrf	postdec2,c
 18093                           
 18094                           ; BSR set to: 0
 18095  001642  4B84               	infsnz	i2MSC_CleanBufferInt@i& (0+255),f,b
 18096  001644  2B85               	incf	(i2MSC_CleanBufferInt@i+1)& (0+255),f,b
 18097  001646                     i2l4350:
 18098                           
 18099                           ; BSR set to: 0
 18100  001646  5182               	movf	i2MSC_CleanBufferInt@count& (0+255),w,b
 18101  001648  5D84               	subwf	i2MSC_CleanBufferInt@i& (0+255),w,b
 18102  00164A  5183               	movf	(i2MSC_CleanBufferInt@count+1)& (0+255),w,b
 18103  00164C  5985               	subwfb	(i2MSC_CleanBufferInt@i+1)& (0+255),w,b
 18104  00164E  E3EE               	bnc	i2l4346
 18105                           
 18106                           ; BSR set to: 0
 18107  001650  0012               	return		;funcret
 18108  001652                     __end_ofi2_MSC_CleanBufferInt:
 18109                           	opt stack 0
 18110                           tblptru	equ	0xFF8
 18111                           tblptrh	equ	0xFF7
 18112                           tblptrl	equ	0xFF6
 18113                           tablat	equ	0xFF5
 18114                           prodh	equ	0xFF4
 18115                           prodl	equ	0xFF3
 18116                           intcon	equ	0xFF2
 18117                           intcon2	equ	0xFF1
 18118                           intcon3	equ	0xFF0
 18119                           postinc0	equ	0xFEE
 18120                           wreg	equ	0xFE8
 18121                           postdec1	equ	0xFE5
 18122                           fsr1l	equ	0xFE1
 18123                           bsr	equ	0xFE0
 18124                           indf2	equ	0xFDF
 18125                           postinc2	equ	0xFDE
 18126                           postdec2	equ	0xFDD
 18127                           plusw2	equ	0xFDB
 18128                           fsr2h	equ	0xFDA
 18129                           fsr2l	equ	0xFD9
 18130                           status	equ	0xFD8
 18131                           
 18132 ;; *************** function i2_IR_ResetData *****************
 18133 ;; Defined at:
 18134 ;;		line 109 in file "IR.c"
 18135 ;; Parameters:    Size  Location     Type
 18136 ;;		None
 18137 ;; Auto vars:     Size  Location     Type
 18138 ;;		None
 18139 ;; Return value:  Size  Location     Type
 18140 ;;		None               void
 18141 ;; Registers used:
 18142 ;;		wreg, status,2, cstack
 18143 ;; Tracked objects:
 18144 ;;		On entry : F/1
 18145 ;;		On exit  : F/0
 18146 ;;		Unchanged: 0/0
 18147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18148 ;;      Params:         0       0       0       0       0
 18149 ;;      Locals:         0       0       0       0       0
 18150 ;;      Temps:          0       0       0       0       0
 18151 ;;      Totals:         0       0       0       0       0
 18152 ;;Total ram usage:        0 bytes
 18153 ;; Hardware stack levels used:    1
 18154 ;; Hardware stack levels required when called:    2
 18155 ;; This function calls:
 18156 ;;		i2_RF_Enable
 18157 ;; This function is called by:
 18158 ;;		i2_FSH_Write_IR_RF
 18159 ;; This function uses a non-reentrant model
 18160 ;;
 18161                           
 18162                           	psect	text113
 18163  001B7C                     __ptext113:
 18164                           	opt stack 0
 18165  001B7C                     i2_IR_ResetData:
 18166                           	opt stack 13
 18167                           
 18168                           ; BSR set to: 1
 18169                           ;IR.c: 111: IR_DataPlace = 0;
 18170                           
 18171                           ; BSR set to: 0
 18172                           ;incstack = 0
 18173  001B7C  6A6B               	clrf	_IR_DataPlace,c
 18174                           
 18175                           ;IR.c: 112: IRStarted = 0;
 18176  001B7E  6A69               	clrf	_IRStarted,c
 18177                           
 18178                           ; BSR set to: 1
 18179                           ;IR.c: 113: RF_Enable();
 18180  001B80  EFFE  F00C         	goto	i2_RF_Enable	;wreg free
 18181  001B84                     __end_ofi2_IR_ResetData:
 18182                           	opt stack 0
 18183                           tblptru	equ	0xFF8
 18184                           tblptrh	equ	0xFF7
 18185                           tblptrl	equ	0xFF6
 18186                           tablat	equ	0xFF5
 18187                           prodh	equ	0xFF4
 18188                           prodl	equ	0xFF3
 18189                           intcon	equ	0xFF2
 18190                           intcon2	equ	0xFF1
 18191                           intcon3	equ	0xFF0
 18192                           postinc0	equ	0xFEE
 18193                           wreg	equ	0xFE8
 18194                           postdec1	equ	0xFE5
 18195                           fsr1l	equ	0xFE1
 18196                           bsr	equ	0xFE0
 18197                           indf2	equ	0xFDF
 18198                           postinc2	equ	0xFDE
 18199                           postdec2	equ	0xFDD
 18200                           plusw2	equ	0xFDB
 18201                           fsr2h	equ	0xFDA
 18202                           fsr2l	equ	0xFD9
 18203                           status	equ	0xFD8
 18204                           
 18205 ;; *************** function i2_RF_Enable *****************
 18206 ;; Defined at:
 18207 ;;		line 101 in file "RF.c"
 18208 ;; Parameters:    Size  Location     Type
 18209 ;;		None
 18210 ;; Auto vars:     Size  Location     Type
 18211 ;;		None
 18212 ;; Return value:  Size  Location     Type
 18213 ;;		None               void
 18214 ;; Registers used:
 18215 ;;		wreg, status,2, cstack
 18216 ;; Tracked objects:
 18217 ;;		On entry : F/1
 18218 ;;		On exit  : F/0
 18219 ;;		Unchanged: 0/0
 18220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18221 ;;      Params:         0       0       0       0       0
 18222 ;;      Locals:         0       0       0       0       0
 18223 ;;      Temps:          0       0       0       0       0
 18224 ;;      Totals:         0       0       0       0       0
 18225 ;;Total ram usage:        0 bytes
 18226 ;; Hardware stack levels used:    1
 18227 ;; Hardware stack levels required when called:    1
 18228 ;; This function calls:
 18229 ;;		i2_RF_DataInt
 18230 ;;		i2_TMR_Timer0Int
 18231 ;; This function is called by:
 18232 ;;		i2_IR_ResetData
 18233 ;; This function uses a non-reentrant model
 18234 ;;
 18235                           
 18236                           	psect	text114
 18237  0019FC                     __ptext114:
 18238                           	opt stack 0
 18239  0019FC                     i2_RF_Enable:
 18240                           	opt stack 13
 18241                           
 18242                           ; BSR set to: 1
 18243                           ;RF.c: 103: INTCON3bits.INT1IF = 0;
 18244                           
 18245                           ; BSR set to: 0
 18246                           ;incstack = 0
 18247  0019FC  90F0               	bcf	intcon3,0,c	;volatile
 18248                           
 18249                           ;RF.c: 104: INTCON3bits.INT2IF = 0;
 18250  0019FE  92F0               	bcf	intcon3,1,c	;volatile
 18251                           
 18252                           ;RF.c: 105: INTCONbits.TMR0IF = 0;
 18253  001A00  94F2               	bcf	intcon,2,c	;volatile
 18254                           
 18255                           ; BSR set to: 1
 18256                           ;RF.c: 106: RF_DataInt(1);
 18257  001A02  0E01               	movlw	1
 18258  001A04  ECD0  F00C         	call	i2_RF_DataInt
 18259                           
 18260                           ;RF.c: 107: TMR_Timer0Int(1);
 18261  001A08  0E01               	movlw	1
 18262  001A0A  EF77  F00D         	goto	i2_TMR_Timer0Int
 18263  001A0E                     __end_ofi2_RF_Enable:
 18264                           	opt stack 0
 18265                           tblptru	equ	0xFF8
 18266                           tblptrh	equ	0xFF7
 18267                           tblptrl	equ	0xFF6
 18268                           tablat	equ	0xFF5
 18269                           prodh	equ	0xFF4
 18270                           prodl	equ	0xFF3
 18271                           intcon	equ	0xFF2
 18272                           intcon2	equ	0xFF1
 18273                           intcon3	equ	0xFF0
 18274                           postinc0	equ	0xFEE
 18275                           wreg	equ	0xFE8
 18276                           postdec1	equ	0xFE5
 18277                           fsr1l	equ	0xFE1
 18278                           bsr	equ	0xFE0
 18279                           indf2	equ	0xFDF
 18280                           postinc2	equ	0xFDE
 18281                           postdec2	equ	0xFDD
 18282                           plusw2	equ	0xFDB
 18283                           fsr2h	equ	0xFDA
 18284                           fsr2l	equ	0xFD9
 18285                           status	equ	0xFD8
 18286                           
 18287 ;; *************** function i2_TMR_Timer0Int *****************
 18288 ;; Defined at:
 18289 ;;		line 332 in file "TIMERS.c"
 18290 ;; Parameters:    Size  Location     Type
 18291 ;;  state           1    wreg     unsigned char 
 18292 ;; Auto vars:     Size  Location     Type
 18293 ;;  state           1    0[BANK0 ] unsigned char 
 18294 ;; Return value:  Size  Location     Type
 18295 ;;		None               void
 18296 ;; Registers used:
 18297 ;;		wreg, status,2
 18298 ;; Tracked objects:
 18299 ;;		On entry : F/0
 18300 ;;		On exit  : F/0
 18301 ;;		Unchanged: 0/0
 18302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18303 ;;      Params:         0       0       0       0       0
 18304 ;;      Locals:         0       1       0       0       0
 18305 ;;      Temps:          0       0       0       0       0
 18306 ;;      Totals:         0       1       0       0       0
 18307 ;;Total ram usage:        1 bytes
 18308 ;; Hardware stack levels used:    1
 18309 ;; This function calls:
 18310 ;;		Nothing
 18311 ;; This function is called by:
 18312 ;;		i2_RF_Enable
 18313 ;; This function uses a non-reentrant model
 18314 ;;
 18315                           
 18316                           	psect	text115
 18317  001AEE                     __ptext115:
 18318                           	opt stack 0
 18319  001AEE                     i2_TMR_Timer0Int:
 18320                           	opt stack 13
 18321                           
 18322                           ; BSR set to: 0
 18323                           ;incstack = 0
 18324                           ;i2TMR_Timer0Int@state stored from wreg
 18325  001AEE  6F80               	movwf	i2TMR_Timer0Int@state& (0+255),b
 18326                           
 18327                           ;TIMERS.c: 334: if(state)
 18328  001AF0  0100               	movlb	0	; () banked
 18329  001AF2  5180               	movf	i2TMR_Timer0Int@state& (0+255),w,b
 18330  001AF4  E002               	bz	i2l868
 18331                           
 18332                           ; BSR set to: 0
 18333                           ;TIMERS.c: 335: {
 18334                           ;TIMERS.c: 337: INTCONbits.TMR0IE = 1;
 18335  001AF6  8AF2               	bsf	intcon,5,c	;volatile
 18336                           
 18337                           ;TIMERS.c: 338: }
 18338  001AF8  0012               	return	
 18339  001AFA                     i2l868:
 18340                           
 18341                           ; BSR set to: 0
 18342                           ;TIMERS.c: 339: else
 18343                           ;TIMERS.c: 340: {
 18344                           ;TIMERS.c: 342: INTCONbits.TMR0IE = 0;
 18345  001AFA  9AF2               	bcf	intcon,5,c	;volatile
 18346                           
 18347                           ; BSR set to: 0
 18348  001AFC  0012               	return		;funcret
 18349  001AFE                     __end_ofi2_TMR_Timer0Int:
 18350                           	opt stack 0
 18351                           tblptru	equ	0xFF8
 18352                           tblptrh	equ	0xFF7
 18353                           tblptrl	equ	0xFF6
 18354                           tablat	equ	0xFF5
 18355                           prodh	equ	0xFF4
 18356                           prodl	equ	0xFF3
 18357                           intcon	equ	0xFF2
 18358                           intcon2	equ	0xFF1
 18359                           intcon3	equ	0xFF0
 18360                           postinc0	equ	0xFEE
 18361                           wreg	equ	0xFE8
 18362                           postdec1	equ	0xFE5
 18363                           fsr1l	equ	0xFE1
 18364                           bsr	equ	0xFE0
 18365                           indf2	equ	0xFDF
 18366                           postinc2	equ	0xFDE
 18367                           postdec2	equ	0xFDD
 18368                           plusw2	equ	0xFDB
 18369                           fsr2h	equ	0xFDA
 18370                           fsr2l	equ	0xFD9
 18371                           status	equ	0xFD8
 18372                           
 18373 ;; *************** function i2_RF_DataInt *****************
 18374 ;; Defined at:
 18375 ;;		line 254 in file "RF.c"
 18376 ;; Parameters:    Size  Location     Type
 18377 ;;  state           1    wreg     unsigned char 
 18378 ;; Auto vars:     Size  Location     Type
 18379 ;;  state           1    0[BANK0 ] unsigned char 
 18380 ;; Return value:  Size  Location     Type
 18381 ;;		None               void
 18382 ;; Registers used:
 18383 ;;		wreg, status,2
 18384 ;; Tracked objects:
 18385 ;;		On entry : F/1
 18386 ;;		On exit  : F/0
 18387 ;;		Unchanged: 0/0
 18388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18389 ;;      Params:         0       0       0       0       0
 18390 ;;      Locals:         0       1       0       0       0
 18391 ;;      Temps:          0       0       0       0       0
 18392 ;;      Totals:         0       1       0       0       0
 18393 ;;Total ram usage:        1 bytes
 18394 ;; Hardware stack levels used:    1
 18395 ;; This function calls:
 18396 ;;		Nothing
 18397 ;; This function is called by:
 18398 ;;		i2_RF_Enable
 18399 ;; This function uses a non-reentrant model
 18400 ;;
 18401                           
 18402                           	psect	text116
 18403  0019A0                     __ptext116:
 18404                           	opt stack 0
 18405  0019A0                     i2_RF_DataInt:
 18406                           	opt stack 13
 18407                           
 18408                           ; BSR set to: 0
 18409                           ;incstack = 0
 18410                           ;i2RF_DataInt@state stored from wreg
 18411  0019A0  0100               	movlb	0	; () banked
 18412  0019A2  6F80               	movwf	i2RF_DataInt@state& (0+255),b
 18413                           
 18414                           ;RF.c: 257: if(state)
 18415  0019A4  5180               	movf	i2RF_DataInt@state& (0+255),w,b
 18416  0019A6  E003               	bz	i2l464
 18417                           
 18418                           ; BSR set to: 0
 18419                           ;RF.c: 258: {
 18420                           ;RF.c: 260: INTCON3bits.INT1E = 1;
 18421  0019A8  86F0               	bsf	intcon3,3,c	;volatile
 18422                           
 18423                           ;RF.c: 261: INTCON3bits.INT2E = 1;
 18424  0019AA  88F0               	bsf	intcon3,4,c	;volatile
 18425                           
 18426                           ;RF.c: 262: }
 18427  0019AC  0012               	return	
 18428  0019AE                     i2l464:
 18429                           
 18430                           ; BSR set to: 0
 18431                           ;RF.c: 263: else
 18432                           ;RF.c: 264: {
 18433                           ;RF.c: 266: INTCON3bits.INT1E = 0;
 18434  0019AE  96F0               	bcf	intcon3,3,c	;volatile
 18435                           
 18436                           ;RF.c: 267: INTCON3bits.INT2E = 0;
 18437  0019B0  98F0               	bcf	intcon3,4,c	;volatile
 18438                           
 18439                           ; BSR set to: 0
 18440  0019B2  0012               	return		;funcret
 18441  0019B4                     __end_ofi2_RF_DataInt:
 18442                           	opt stack 0
 18443                           tblptru	equ	0xFF8
 18444                           tblptrh	equ	0xFF7
 18445                           tblptrl	equ	0xFF6
 18446                           tablat	equ	0xFF5
 18447                           prodh	equ	0xFF4
 18448                           prodl	equ	0xFF3
 18449                           intcon	equ	0xFF2
 18450                           intcon2	equ	0xFF1
 18451                           intcon3	equ	0xFF0
 18452                           postinc0	equ	0xFEE
 18453                           wreg	equ	0xFE8
 18454                           postdec1	equ	0xFE5
 18455                           fsr1l	equ	0xFE1
 18456                           bsr	equ	0xFE0
 18457                           indf2	equ	0xFDF
 18458                           postinc2	equ	0xFDE
 18459                           postdec2	equ	0xFDD
 18460                           plusw2	equ	0xFDB
 18461                           fsr2h	equ	0xFDA
 18462                           fsr2l	equ	0xFD9
 18463                           status	equ	0xFD8
 18464                           
 18465 ;; *************** function i2_FSH_WriteIntArray *****************
 18466 ;; Defined at:
 18467 ;;		line 125 in file "FLASH.c"
 18468 ;; Parameters:    Size  Location     Type
 18469 ;;  ConstArray      3    4[BANK0 ] PTR const unsigned int 
 18470 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 18471 ;;  Array           2    7[BANK0 ] PTR unsigned int 
 18472 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 18473 ;; Auto vars:     Size  Location     Type
 18474 ;;  FSH_WriteInt    4   12[BANK0 ] unsigned long 
 18475 ;;  FSH_WriteInt    1   11[BANK0 ] unsigned char 
 18476 ;; Return value:  Size  Location     Type
 18477 ;;		None               void
 18478 ;; Registers used:
 18479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18480 ;; Tracked objects:
 18481 ;;		On entry : F/0
 18482 ;;		On exit  : 0/0
 18483 ;;		Unchanged: 0/0
 18484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18485 ;;      Params:         0       5       0       0       0
 18486 ;;      Locals:         0       5       0       0       0
 18487 ;;      Temps:          0       2       0       0       0
 18488 ;;      Totals:         0      12       0       0       0
 18489 ;;Total ram usage:       12 bytes
 18490 ;; Hardware stack levels used:    1
 18491 ;; Hardware stack levels required when called:    1
 18492 ;; This function calls:
 18493 ;;		i2_FSH_AddressToBlock
 18494 ;; This function is called by:
 18495 ;;		i2_FSH_Write_IR_RF
 18496 ;; This function uses a non-reentrant model
 18497 ;;
 18498                           
 18499                           	psect	text117
 18500  000BA4                     __ptext117:
 18501                           	opt stack 0
 18502  000BA4                     i2_FSH_WriteIntArray:
 18503                           	opt stack 14
 18504                           
 18505                           ; BSR set to: 0
 18506                           ;FLASH.c: 127: unsigned char i;
 18507                           ;FLASH.c: 128: unsigned long address = ConstArray;
 18508                           
 18509                           ; BSR set to: 0
 18510                           ;incstack = 0
 18511  000BA4  5184               	movf	i2FSH_WriteIntArray@ConstArray& (0+255),w,b
 18512  000BA6  6F8C               	movwf	i2FSH_WriteIntArray@address& (0+255),b
 18513  000BA8  5185               	movf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),w,b
 18514  000BAA  6F8D               	movwf	(i2FSH_WriteIntArray@address+1)& (0+255),b
 18515  000BAC  5186               	movf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),w,b
 18516  000BAE  6F8E               	movwf	(i2FSH_WriteIntArray@address+2)& (0+255),b
 18517  000BB0  6B8F               	clrf	(i2FSH_WriteIntArray@address+3)& (0+255),b
 18518                           
 18519                           ; BSR set to: 0
 18520                           ;FLASH.c: 131: FSH_AddressToBlock(address);
 18521  000BB2  C08C  F080         	movff	i2FSH_WriteIntArray@address,i2FSH_AddressToBlock@Address
 18522  000BB6  C08D  F081         	movff	i2FSH_WriteIntArray@address+1,i2FSH_AddressToBlock@Address+1
 18523  000BBA  C08E  F082         	movff	i2FSH_WriteIntArray@address+2,i2FSH_AddressToBlock@Address+2
 18524  000BBE  C08F  F083         	movff	i2FSH_WriteIntArray@address+3,i2FSH_AddressToBlock@Address+3
 18525  000BC2  EC53  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 18526                           
 18527                           ; BSR set to: 0
 18528                           ;FLASH.c: 133: if(address < 0x2400 || address >= 0x2800)
 18529  000BC6  518F               	movf	(i2FSH_WriteIntArray@address+3)& (0+255),w,b
 18530  000BC8  118E               	iorwf	(i2FSH_WriteIntArray@address+2)& (0+255),w,b
 18531  000BCA  E103               	bnz	i2u444_40
 18532  000BCC  0E24               	movlw	36
 18533  000BCE  5D8D               	subwf	(i2FSH_WriteIntArray@address+1)& (0+255),w,b
 18534  000BD0  E306               	bnc	i2l952
 18535  000BD2                     i2u444_40:
 18536                           
 18537                           ; BSR set to: 0
 18538  000BD2  518F               	movf	(i2FSH_WriteIntArray@address+3)& (0+255),w,b
 18539  000BD4  118E               	iorwf	(i2FSH_WriteIntArray@address+2)& (0+255),w,b
 18540  000BD6  E103               	bnz	i2u445_40
 18541  000BD8  0E28               	movlw	40
 18542  000BDA  5D8D               	subwf	(i2FSH_WriteIntArray@address+1)& (0+255),w,b
 18543  000BDC  E301               	bnc	i2l950
 18544  000BDE                     i2u445_40:
 18545  000BDE                     i2l952:
 18546                           
 18547                           ; BSR set to: 0
 18548  000BDE  00FF               	reset		;# 
 18549  000BE0                     i2l950:
 18550                           
 18551                           ;FLASH.c: 137: }
 18552                           ;FLASH.c: 139: for(i = 0; i<32; i++)
 18553  000BE0  0100               	movlb	0	; () banked
 18554  000BE2  6B8B               	clrf	i2FSH_WriteIntArray@i& (0+255),b
 18555  000BE4                     i2l4824:
 18556                           
 18557                           ; BSR set to: 0
 18558                           ;FLASH.c: 140: {
 18559                           ;FLASH.c: 142: TABLAT = *Array;
 18560  000BE4  C087  FFD9         	movff	i2FSH_WriteIntArray@Array,fsr2l
 18561  000BE8  C088  FFDA         	movff	i2FSH_WriteIntArray@Array+1,fsr2h
 18562  000BEC  50DF               	movf	indf2,w,c
 18563  000BEE  6EF5               	movwf	tablat,c	;volatile
 18564  000BF0  000D               	tblwt		*+	;# 
 18565                           
 18566                           ;FLASH.c: 144: TABLAT = *Array >> 8;
 18567  000BF2  C087  FFD9         	movff	i2FSH_WriteIntArray@Array,fsr2l
 18568  000BF6  C088  FFDA         	movff	i2FSH_WriteIntArray@Array+1,fsr2h
 18569  000BFA  CFDE F089          	movff	postinc2,??i2_FSH_WriteIntArray
 18570  000BFE  CFDD F08A          	movff	postdec2,??i2_FSH_WriteIntArray+1
 18571  000C02  C08A  F089         	movff	??i2_FSH_WriteIntArray+1,??i2_FSH_WriteIntArray
 18572  000C06  0100               	movlb	0	; () banked
 18573  000C08  6B8A               	clrf	(??i2_FSH_WriteIntArray+1)& (0+255),b
 18574  000C0A  5189               	movf	??i2_FSH_WriteIntArray& (0+255),w,b
 18575  000C0C  6EF5               	movwf	tablat,c	;volatile
 18576  000C0E  000D               	tblwt		*+	;# 
 18577                           
 18578                           ;FLASH.c: 146: Array++;
 18579  000C10  0E02               	movlw	2
 18580  000C12  2787               	addwf	i2FSH_WriteIntArray@Array& (0+255),f,b
 18581  000C14  0E00               	movlw	0
 18582  000C16  2388               	addwfc	(i2FSH_WriteIntArray@Array+1)& (0+255),f,b
 18583                           
 18584                           ; BSR set to: 0
 18585  000C18  2B8B               	incf	i2FSH_WriteIntArray@i& (0+255),f,b
 18586                           
 18587                           ; BSR set to: 0
 18588  000C1A  0E1F               	movlw	31
 18589  000C1C  658B               	cpfsgt	i2FSH_WriteIntArray@i& (0+255),b
 18590  000C1E  D7E2               	goto	i2l4824
 18591                           
 18592                           ; BSR set to: 0
 18593                           ;FLASH.c: 147: }
 18594                           ;FLASH.c: 150: FSH_AddressToBlock(address);
 18595  000C20  C08C  F080         	movff	i2FSH_WriteIntArray@address,i2FSH_AddressToBlock@Address
 18596  000C24  C08D  F081         	movff	i2FSH_WriteIntArray@address+1,i2FSH_AddressToBlock@Address+1
 18597  000C28  C08E  F082         	movff	i2FSH_WriteIntArray@address+2,i2FSH_AddressToBlock@Address+2
 18598  000C2C  C08F  F083         	movff	i2FSH_WriteIntArray@address+3,i2FSH_AddressToBlock@Address+3
 18599  000C30  EC53  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 18600                           
 18601                           ; BSR set to: 0
 18602                           ;FLASH.c: 152: EECON1bits.WRERR = 0;
 18603  000C34  96A6               	bcf	4006,3,c	;volatile
 18604                           
 18605                           ; BSR set to: 0
 18606                           ;FLASH.c: 153: EECON1bits.FREE = 0;
 18607  000C36  98A6               	bcf	4006,4,c	;volatile
 18608  000C38  84A6               	bsf	4006,2,c	;# 
 18609  000C3A  9EF2               	bcf	intcon,7,c	;# 
 18610  000C3C  0E55               	movlw	85	;# 
 18611  000C3E  6EA7               	movwf	4007,c	;# 
 18612  000C40  0EAA               	movlw	170	;# 
 18613  000C42  6EA7               	movwf	4007,c	;# 
 18614  000C44  82A6               	bsf	4006,1,c	;# 
 18615  000C46  0CAA               	retlw	170	;funcret
 18616  000C48                     __end_ofi2_FSH_WriteIntArray:
 18617                           	opt stack 0
 18618                           tblptru	equ	0xFF8
 18619                           tblptrh	equ	0xFF7
 18620                           tblptrl	equ	0xFF6
 18621                           tablat	equ	0xFF5
 18622                           prodh	equ	0xFF4
 18623                           prodl	equ	0xFF3
 18624                           intcon	equ	0xFF2
 18625                           intcon2	equ	0xFF1
 18626                           intcon3	equ	0xFF0
 18627                           postinc0	equ	0xFEE
 18628                           wreg	equ	0xFE8
 18629                           postdec1	equ	0xFE5
 18630                           fsr1l	equ	0xFE1
 18631                           bsr	equ	0xFE0
 18632                           indf2	equ	0xFDF
 18633                           postinc2	equ	0xFDE
 18634                           postdec2	equ	0xFDD
 18635                           plusw2	equ	0xFDB
 18636                           fsr2h	equ	0xFDA
 18637                           fsr2l	equ	0xFD9
 18638                           status	equ	0xFD8
 18639                           
 18640 ;; *************** function i2_FSH_VerifyWriteIntArray *****************
 18641 ;; Defined at:
 18642 ;;		line 169 in file "FLASH.c"
 18643 ;; Parameters:    Size  Location     Type
 18644 ;;  ConstArray      3    0[BANK0 ] PTR const unsigned int 
 18645 ;;		 -> IR_SavedTiming1(192), IR_SavedTiming0(192), RF_SavedTiming(128), 
 18646 ;;  Array           2    3[BANK0 ] PTR unsigned int 
 18647 ;;		 -> IR_DataHolder1(192), IR_DataTiming(192), RF_DataTiming(128), 
 18648 ;; Auto vars:     Size  Location     Type
 18649 ;;  FSH_VerifyWr    2    8[BANK0 ] unsigned int 
 18650 ;;  FSH_VerifyWr    1   11[BANK0 ] unsigned char 
 18651 ;;  FSH_VerifyWr    1   10[BANK0 ] unsigned char 
 18652 ;; Return value:  Size  Location     Type
 18653 ;;                  1    wreg      unsigned char 
 18654 ;; Registers used:
 18655 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 18656 ;; Tracked objects:
 18657 ;;		On entry : F/0
 18658 ;;		On exit  : F/0
 18659 ;;		Unchanged: 0/0
 18660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18661 ;;      Params:         0       5       0       0       0
 18662 ;;      Locals:         0       4       0       0       0
 18663 ;;      Temps:          0       3       0       0       0
 18664 ;;      Totals:         0      12       0       0       0
 18665 ;;Total ram usage:       12 bytes
 18666 ;; Hardware stack levels used:    1
 18667 ;; This function calls:
 18668 ;;		Nothing
 18669 ;; This function is called by:
 18670 ;;		i2_FSH_Write_IR_RF
 18671 ;; This function uses a non-reentrant model
 18672 ;;
 18673                           
 18674                           	psect	text118
 18675  001218                     __ptext118:
 18676                           	opt stack 0
 18677  001218                     i2_FSH_VerifyWriteIntArray:
 18678                           	opt stack 15
 18679                           
 18680                           ; BSR set to: 0
 18681                           ;FLASH.c: 171: unsigned char i;
 18682                           ;FLASH.c: 172: unsigned int data;
 18683                           ;FLASH.c: 173: unsigned char failcount = 0;
 18684                           
 18685                           ;incstack = 0
 18686  001218  6B8A               	clrf	i2FSH_VerifyWriteIntArray@failcount& (0+255),b
 18687                           
 18688                           ;FLASH.c: 175: for(i = 0; i<32; i++)
 18689  00121A  6B8B               	clrf	i2FSH_VerifyWriteIntArray@i& (0+255),b
 18690  00121C                     i2l4844:
 18691                           
 18692                           ; BSR set to: 0
 18693                           ;FLASH.c: 176: {
 18694                           ;FLASH.c: 177: data = ConstArray[i];
 18695  00121C  518B               	movf	i2FSH_VerifyWriteIntArray@i& (0+255),w,b
 18696  00121E  0D02               	mullw	2
 18697  001220  50F3               	movf	prodl,w,c
 18698  001222  2580               	addwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),w,b
 18699  001224  6F85               	movwf	??i2_FSH_VerifyWriteIntArray& (0+255),b
 18700  001226  50F4               	movf	prodh,w,c
 18701  001228  2181               	addwfc	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),w,b
 18702  00122A  6F86               	movwf	(??i2_FSH_VerifyWriteIntArray+1)& (0+255),b
 18703  00122C  0E00               	movlw	0
 18704  00122E  2182               	addwfc	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),w,b
 18705  001230  6F87               	movwf	(??i2_FSH_VerifyWriteIntArray+2)& (0+255),b
 18706  001232  C085  FFF6         	movff	??i2_FSH_VerifyWriteIntArray,tblptrl
 18707  001236  C086  FFF7         	movff	??i2_FSH_VerifyWriteIntArray+1,tblptrh
 18708  00123A  C087  FFF8         	movff	??i2_FSH_VerifyWriteIntArray+2,tblptru
 18709  00123E  0009               	tblrd		*+
 18710  001240  CFF5 F088          	movff	tablat,i2FSH_VerifyWriteIntArray@data
 18711  001244  000A               	tblrd		*-
 18712  001246  CFF5 F089          	movff	tablat,i2FSH_VerifyWriteIntArray@data+1
 18713                           
 18714                           ; BSR set to: 0
 18715                           ;FLASH.c: 178: if(data != Array[i])
 18716  00124A  518B               	movf	i2FSH_VerifyWriteIntArray@i& (0+255),w,b
 18717  00124C  0D02               	mullw	2
 18718  00124E  50F3               	movf	prodl,w,c
 18719  001250  2583               	addwf	i2FSH_VerifyWriteIntArray@Array& (0+255),w,b
 18720  001252  6ED9               	movwf	fsr2l,c
 18721  001254  50F4               	movf	prodh,w,c
 18722  001256  2184               	addwfc	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),w,b
 18723  001258  6EDA               	movwf	fsr2h,c
 18724  00125A  5188               	movf	i2FSH_VerifyWriteIntArray@data& (0+255),w,b
 18725  00125C  18DE               	xorwf	postinc2,w,c
 18726  00125E  E103               	bnz	i2u447_40
 18727  001260  5189               	movf	(i2FSH_VerifyWriteIntArray@data+1)& (0+255),w,b
 18728  001262  18DE               	xorwf	postinc2,w,c
 18729  001264  E001               	bz	i2l960
 18730  001266                     i2u447_40:
 18731                           
 18732                           ; BSR set to: 0
 18733                           ;FLASH.c: 179: {
 18734                           ;FLASH.c: 180: failcount++;
 18735  001266  2B8A               	incf	i2FSH_VerifyWriteIntArray@failcount& (0+255),f,b
 18736  001268                     i2l960:
 18737                           
 18738                           ; BSR set to: 0
 18739  001268  2B8B               	incf	i2FSH_VerifyWriteIntArray@i& (0+255),f,b
 18740                           
 18741                           ; BSR set to: 0
 18742  00126A  0E1F               	movlw	31
 18743  00126C  658B               	cpfsgt	i2FSH_VerifyWriteIntArray@i& (0+255),b
 18744  00126E  D7D6               	goto	i2l4844
 18745                           
 18746                           ; BSR set to: 0
 18747                           ;FLASH.c: 181: }
 18748                           ;FLASH.c: 182: }
 18749                           ;FLASH.c: 183: if(failcount)
 18750  001270  518A               	movf	i2FSH_VerifyWriteIntArray@failcount& (0+255),w,b
 18751  001272  E001               	bz	i2l4858
 18752                           
 18753                           ; BSR set to: 0
 18754                           ;FLASH.c: 184: {
 18755                           ;FLASH.c: 185: return 0;
 18756  001274  0C00               	retlw	0
 18757  001276                     i2l4858:
 18758                           
 18759                           ; BSR set to: 0
 18760                           
 18761                           ; BSR set to: 0
 18762                           ;FLASH.c: 186: }
 18763                           ;FLASH.c: 187: return 1;
 18764  001276  0C01               	retlw	1	;funcret
 18765  001278                     __end_ofi2_FSH_VerifyWriteIntArray:
 18766                           	opt stack 0
 18767                           tblptru	equ	0xFF8
 18768                           tblptrh	equ	0xFF7
 18769                           tblptrl	equ	0xFF6
 18770                           tablat	equ	0xFF5
 18771                           prodh	equ	0xFF4
 18772                           prodl	equ	0xFF3
 18773                           intcon	equ	0xFF2
 18774                           intcon2	equ	0xFF1
 18775                           intcon3	equ	0xFF0
 18776                           postinc0	equ	0xFEE
 18777                           wreg	equ	0xFE8
 18778                           postdec1	equ	0xFE5
 18779                           fsr1l	equ	0xFE1
 18780                           bsr	equ	0xFE0
 18781                           indf2	equ	0xFDF
 18782                           postinc2	equ	0xFDE
 18783                           postdec2	equ	0xFDD
 18784                           plusw2	equ	0xFDB
 18785                           fsr2h	equ	0xFDA
 18786                           fsr2l	equ	0xFD9
 18787                           status	equ	0xFD8
 18788                           
 18789 ;; *************** function i2_FSH_EraseBlock *****************
 18790 ;; Defined at:
 18791 ;;		line 72 in file "FLASH.c"
 18792 ;; Parameters:    Size  Location     Type
 18793 ;;  Address         4    4[BANK0 ] unsigned long 
 18794 ;; Auto vars:     Size  Location     Type
 18795 ;;  FSH_EraseBlo    1   10[BANK0 ] unsigned char 
 18796 ;;  FSH_EraseBlo    1    9[BANK0 ] unsigned char 
 18797 ;;  FSH_EraseBlo    1    8[BANK0 ] unsigned char 
 18798 ;; Return value:  Size  Location     Type
 18799 ;;		None               void
 18800 ;; Registers used:
 18801 ;;		wreg, status,2, status,0, cstack
 18802 ;; Tracked objects:
 18803 ;;		On entry : F/0
 18804 ;;		On exit  : F/0
 18805 ;;		Unchanged: 0/0
 18806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18807 ;;      Params:         0       4       0       0       0
 18808 ;;      Locals:         0       3       0       0       0
 18809 ;;      Temps:          0       0       0       0       0
 18810 ;;      Totals:         0       7       0       0       0
 18811 ;;Total ram usage:        7 bytes
 18812 ;; Hardware stack levels used:    1
 18813 ;; Hardware stack levels required when called:    1
 18814 ;; This function calls:
 18815 ;;		i2_FSH_AddressToBlock
 18816 ;; This function is called by:
 18817 ;;		i2_FSH_Write_IR_RF
 18818 ;; This function uses a non-reentrant model
 18819 ;;
 18820                           
 18821                           	psect	text119
 18822  0010D0                     __ptext119:
 18823                           	opt stack 0
 18824  0010D0                     i2_FSH_EraseBlock:
 18825                           	opt stack 14
 18826                           
 18827                           ; BSR set to: 0
 18828                           ;FLASH.c: 74: unsigned char highint = INTCONbits.GIE;
 18829                           
 18830                           ; BSR set to: 0
 18831                           ;incstack = 0
 18832  0010D0  0E00               	movlw	0
 18833  0010D2  BEF2               	btfsc	intcon,7,c	;volatile
 18834  0010D4  0E01               	movlw	1
 18835  0010D6  6F88               	movwf	i2FSH_EraseBlock@highint& (0+255),b
 18836                           
 18837                           ;FLASH.c: 75: unsigned char lowint = INTCONbits.PEIE;
 18838  0010D8  0E00               	movlw	0
 18839  0010DA  BCF2               	btfsc	intcon,6,c	;volatile
 18840  0010DC  0E01               	movlw	1
 18841  0010DE  6F89               	movwf	i2FSH_EraseBlock@lowint& (0+255),b
 18842                           
 18843                           ; BSR set to: 0
 18844                           ;FLASH.c: 76: unsigned char WriteTries;
 18845                           ;FLASH.c: 78: if(Address < 0x2400 || Address >= 0x2800)
 18846  0010E0  5187               	movf	(i2FSH_EraseBlock@Address+3)& (0+255),w,b
 18847  0010E2  1186               	iorwf	(i2FSH_EraseBlock@Address+2)& (0+255),w,b
 18848  0010E4  E103               	bnz	i2u438_40
 18849  0010E6  0E24               	movlw	36
 18850  0010E8  5D85               	subwf	(i2FSH_EraseBlock@Address+1)& (0+255),w,b
 18851  0010EA  E306               	bnc	i2l941
 18852  0010EC                     i2u438_40:
 18853                           
 18854                           ; BSR set to: 0
 18855  0010EC  5187               	movf	(i2FSH_EraseBlock@Address+3)& (0+255),w,b
 18856  0010EE  1186               	iorwf	(i2FSH_EraseBlock@Address+2)& (0+255),w,b
 18857  0010F0  E103               	bnz	i2u439_40
 18858  0010F2  0E28               	movlw	40
 18859  0010F4  5D85               	subwf	(i2FSH_EraseBlock@Address+1)& (0+255),w,b
 18860  0010F6  E301               	bnc	i2l939
 18861  0010F8                     i2u439_40:
 18862  0010F8                     i2l941:
 18863                           
 18864                           ; BSR set to: 0
 18865  0010F8  00FF               	reset		;# 
 18866  0010FA                     i2l939:
 18867                           
 18868                           ;FLASH.c: 82: }
 18869                           ;FLASH.c: 84: INTCONbits.GIE = 0;
 18870  0010FA  9EF2               	bcf	intcon,7,c	;volatile
 18871                           
 18872                           ;FLASH.c: 85: INTCONbits.PEIE = 0;
 18873  0010FC  9CF2               	bcf	intcon,6,c	;volatile
 18874  0010FE                     i2l4792:
 18875                           
 18876                           ;FLASH.c: 88: FSH_AddressToBlock(Address);
 18877  0010FE  C084  F080         	movff	i2FSH_EraseBlock@Address,i2FSH_AddressToBlock@Address
 18878  001102  C085  F081         	movff	i2FSH_EraseBlock@Address+1,i2FSH_AddressToBlock@Address+1
 18879  001106  C086  F082         	movff	i2FSH_EraseBlock@Address+2,i2FSH_AddressToBlock@Address+2
 18880  00110A  C087  F083         	movff	i2FSH_EraseBlock@Address+3,i2FSH_AddressToBlock@Address+3
 18881  00110E  EC53  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 18882                           
 18883                           ; BSR set to: 0
 18884                           ;FLASH.c: 90: WriteTries = 1;
 18885  001112  0E01               	movlw	1
 18886  001114  6F8A               	movwf	i2FSH_EraseBlock@WriteTries& (0+255),b
 18887  001116  84A6               	bsf	4006,2,c	;# 
 18888  001118  88A6               	bsf	4006,4,c	;# 
 18889  00111A  9EF2               	bcf	intcon,7,c	;# 
 18890  00111C  0E55               	movlw	85	;# 
 18891  00111E  6EA7               	movwf	4007,c	;# 
 18892  001120  0EAA               	movlw	170	;# 
 18893  001122  6EA7               	movwf	4007,c	;# 
 18894  001124  82A6               	bsf	4006,1,c	;# 
 18895                           
 18896                           ;FLASH.c: 101: if(EECON1bits.WRERR)
 18897  001126  A6A6               	btfss	4006,3,c	;volatile
 18898  001128  D006               	goto	i2l4804
 18899                           
 18900                           ;FLASH.c: 102: {
 18901                           ;FLASH.c: 103: WriteTries++;
 18902  00112A  0100               	movlb	0	; () banked
 18903  00112C  2B8A               	incf	i2FSH_EraseBlock@WriteTries& (0+255),f,b
 18904                           
 18905                           ; BSR set to: 0
 18906                           ;FLASH.c: 104: if(WriteTries < 10)
 18907  00112E  0E0A               	movlw	10
 18908  001130  618A               	cpfslt	i2FSH_EraseBlock@WriteTries& (0+255),b
 18909  001132  D001               	goto	i2l4804
 18910  001134  D7E4               	goto	i2l4792
 18911  001136                     i2l4804:
 18912                           
 18913                           ;FLASH.c: 107: }
 18914                           ;FLASH.c: 108: }
 18915                           ;FLASH.c: 110: if(highint)
 18916  001136  0100               	movlb	0	; () banked
 18917  001138  5188               	movf	i2FSH_EraseBlock@highint& (0+255),w,b
 18918  00113A  E001               	bz	i2l4808
 18919                           
 18920                           ; BSR set to: 0
 18921                           ;FLASH.c: 111: {
 18922                           ;FLASH.c: 112: INTCONbits.GIE = 1;
 18923  00113C  8EF2               	bsf	intcon,7,c	;volatile
 18924  00113E                     i2l4808:
 18925                           
 18926                           ; BSR set to: 0
 18927                           ;FLASH.c: 113: }
 18928                           ;FLASH.c: 114: if(lowint)
 18929  00113E  5189               	movf	i2FSH_EraseBlock@lowint& (0+255),w,b
 18930  001140  A4D8               	btfss	status,2,c
 18931                           
 18932                           ; BSR set to: 0
 18933                           ;FLASH.c: 115: {
 18934                           ;FLASH.c: 116: INTCONbits.PEIE = 1;
 18935  001142  8CF2               	bsf	intcon,6,c	;volatile
 18936                           
 18937                           ; BSR set to: 0
 18938  001144  0012               	return		;funcret
 18939  001146                     __end_ofi2_FSH_EraseBlock:
 18940                           	opt stack 0
 18941                           tblptru	equ	0xFF8
 18942                           tblptrh	equ	0xFF7
 18943                           tblptrl	equ	0xFF6
 18944                           tablat	equ	0xFF5
 18945                           prodh	equ	0xFF4
 18946                           prodl	equ	0xFF3
 18947                           intcon	equ	0xFF2
 18948                           intcon2	equ	0xFF1
 18949                           intcon3	equ	0xFF0
 18950                           postinc0	equ	0xFEE
 18951                           wreg	equ	0xFE8
 18952                           postdec1	equ	0xFE5
 18953                           fsr1l	equ	0xFE1
 18954                           bsr	equ	0xFE0
 18955                           indf2	equ	0xFDF
 18956                           postinc2	equ	0xFDE
 18957                           postdec2	equ	0xFDD
 18958                           plusw2	equ	0xFDB
 18959                           fsr2h	equ	0xFDA
 18960                           fsr2l	equ	0xFD9
 18961                           status	equ	0xFD8
 18962                           
 18963 ;; *************** function i2_FSH_AddressToBlock *****************
 18964 ;; Defined at:
 18965 ;;		line 536 in file "FLASH.c"
 18966 ;; Parameters:    Size  Location     Type
 18967 ;;  Address         4    0[BANK0 ] unsigned long 
 18968 ;; Auto vars:     Size  Location     Type
 18969 ;;		None
 18970 ;; Return value:  Size  Location     Type
 18971 ;;		None               void
 18972 ;; Registers used:
 18973 ;;		wreg, status,2, status,0
 18974 ;; Tracked objects:
 18975 ;;		On entry : 0/0
 18976 ;;		On exit  : F/0
 18977 ;;		Unchanged: 0/0
 18978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18979 ;;      Params:         0       4       0       0       0
 18980 ;;      Locals:         0       0       0       0       0
 18981 ;;      Temps:          0       0       0       0       0
 18982 ;;      Totals:         0       4       0       0       0
 18983 ;;Total ram usage:        4 bytes
 18984 ;; Hardware stack levels used:    1
 18985 ;; This function calls:
 18986 ;;		Nothing
 18987 ;; This function is called by:
 18988 ;;		i2_FSH_EraseBlock
 18989 ;;		i2_FSH_WriteIntArray
 18990 ;;		i2_FSH_Write_IR_RF
 18991 ;; This function uses a non-reentrant model
 18992 ;;
 18993                           
 18994                           	psect	text120
 18995  0016A6                     __ptext120:
 18996                           	opt stack 0
 18997  0016A6                     i2_FSH_AddressToBlock:
 18998                           	opt stack 14
 18999                           
 19000                           ;FLASH.c: 538: if(Address > 0x3600)
 19001                           
 19002                           ; BSR set to: 0
 19003                           ;incstack = 0
 19004  0016A6  0100               	movlb	0	; () banked
 19005  0016A8  5183               	movf	(i2FSH_AddressToBlock@Address+3)& (0+255),w,b
 19006  0016AA  1182               	iorwf	(i2FSH_AddressToBlock@Address+2)& (0+255),w,b
 19007  0016AC  E104               	bnz	i2u372_40
 19008  0016AE  0580               	decf	i2FSH_AddressToBlock@Address& (0+255),w,b
 19009  0016B0  0E36               	movlw	54
 19010  0016B2  5981               	subwfb	(i2FSH_AddressToBlock@Address+1)& (0+255),w,b
 19011  0016B4  E305               	bnc	i2l4356
 19012  0016B6                     i2u372_40:
 19013                           
 19014                           ; BSR set to: 0
 19015                           ;FLASH.c: 539: {
 19016                           ;FLASH.c: 540: Address = 0x3600;
 19017  0016B6  6B80               	clrf	i2FSH_AddressToBlock@Address& (0+255),b
 19018  0016B8  0E36               	movlw	54
 19019  0016BA  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 19020  0016BC  6B82               	clrf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 19021  0016BE  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 19022  0016C0                     i2l4356:
 19023                           
 19024                           ; BSR set to: 0
 19025                           ;FLASH.c: 541: }
 19026                           ;FLASH.c: 542: TBLPTRU = (Address & 0x002F0000) >> 16;
 19027  0016C0  5182               	movf	(i2FSH_AddressToBlock@Address+2)& (0+255),w,b
 19028  0016C2  0B2F               	andlw	47
 19029  0016C4  6EF8               	movwf	tblptru,c	;volatile
 19030                           
 19031                           ; BSR set to: 0
 19032                           ;FLASH.c: 543: TBLPTRH = (Address & 0x0000FF00) >> 8;
 19033  0016C6  C081  FFF7         	movff	i2FSH_AddressToBlock@Address+1,tblptrh	;volatile
 19034                           
 19035                           ; BSR set to: 0
 19036                           ;FLASH.c: 544: TBLPTRL = (Address & 0x000000FF);
 19037  0016CA  C080  FFF6         	movff	i2FSH_AddressToBlock@Address,tblptrl	;volatile
 19038                           
 19039                           ; BSR set to: 0
 19040  0016CE  0012               	return		;funcret
 19041  0016D0                     __end_ofi2_FSH_AddressToBlock:
 19042                           	opt stack 0
 19043                           tblptru	equ	0xFF8
 19044                           tblptrh	equ	0xFF7
 19045                           tblptrl	equ	0xFF6
 19046                           tablat	equ	0xFF5
 19047                           prodh	equ	0xFF4
 19048                           prodl	equ	0xFF3
 19049                           intcon	equ	0xFF2
 19050                           intcon2	equ	0xFF1
 19051                           intcon3	equ	0xFF0
 19052                           postinc0	equ	0xFEE
 19053                           wreg	equ	0xFE8
 19054                           postdec1	equ	0xFE5
 19055                           fsr1l	equ	0xFE1
 19056                           bsr	equ	0xFE0
 19057                           indf2	equ	0xFDF
 19058                           postinc2	equ	0xFDE
 19059                           postdec2	equ	0xFDD
 19060                           plusw2	equ	0xFDB
 19061                           fsr2h	equ	0xFDA
 19062                           fsr2l	equ	0xFD9
 19063                           status	equ	0xFD8
 19064                           
 19065                           	psect	mediumconst
 19066  002800                     __pmediumconst:
 19067                           	opt stack 0
 19068  002800  00                 	db	0
 19069  002801  00                 	db	0	; dummy byte at the end
 19070  0000                     tblptru	equ	0xFF8
 19071                           tblptrh	equ	0xFF7
 19072                           tblptrl	equ	0xFF6
 19073                           tablat	equ	0xFF5
 19074                           prodh	equ	0xFF4
 19075                           prodl	equ	0xFF3
 19076                           intcon	equ	0xFF2
 19077                           intcon2	equ	0xFF1
 19078                           intcon3	equ	0xFF0
 19079                           postinc0	equ	0xFEE
 19080                           wreg	equ	0xFE8
 19081                           postdec1	equ	0xFE5
 19082                           fsr1l	equ	0xFE1
 19083                           bsr	equ	0xFE0
 19084                           indf2	equ	0xFDF
 19085                           postinc2	equ	0xFDE
 19086                           postdec2	equ	0xFDD
 19087                           plusw2	equ	0xFDB
 19088                           fsr2h	equ	0xFDA
 19089                           fsr2l	equ	0xFD9
 19090                           status	equ	0xFD8
 19091                           tblptru	equ	0xFF8
 19092                           tblptrh	equ	0xFF7
 19093                           tblptrl	equ	0xFF6
 19094                           tablat	equ	0xFF5
 19095                           prodh	equ	0xFF4
 19096                           prodl	equ	0xFF3
 19097                           intcon	equ	0xFF2
 19098                           intcon2	equ	0xFF1
 19099                           intcon3	equ	0xFF0
 19100                           postinc0	equ	0xFEE
 19101                           wreg	equ	0xFE8
 19102                           postdec1	equ	0xFE5
 19103                           fsr1l	equ	0xFE1
 19104                           bsr	equ	0xFE0
 19105                           indf2	equ	0xFDF
 19106                           postinc2	equ	0xFDE
 19107                           postdec2	equ	0xFDD
 19108                           plusw2	equ	0xFDB
 19109                           fsr2h	equ	0xFDA
 19110                           fsr2l	equ	0xFD9
 19111                           status	equ	0xFD8
 19112                           
 19113                           	psect	param0
 19114  0000                     tblptru	equ	0xFF8
 19115                           tblptrh	equ	0xFF7
 19116                           tblptrl	equ	0xFF6
 19117                           tablat	equ	0xFF5
 19118                           prodh	equ	0xFF4
 19119                           prodl	equ	0xFF3
 19120                           intcon	equ	0xFF2
 19121                           intcon2	equ	0xFF1
 19122                           intcon3	equ	0xFF0
 19123                           postinc0	equ	0xFEE
 19124                           wreg	equ	0xFE8
 19125                           postdec1	equ	0xFE5
 19126                           fsr1l	equ	0xFE1
 19127                           bsr	equ	0xFE0
 19128                           indf2	equ	0xFDF
 19129                           postinc2	equ	0xFDE
 19130                           postdec2	equ	0xFDD
 19131                           plusw2	equ	0xFDB
 19132                           fsr2h	equ	0xFDA
 19133                           fsr2l	equ	0xFD9
 19134                           status	equ	0xFD8
 19135                           
 19136                           	psect	temp
 19137  00006E                     btemp:
 19138                           	opt stack 0
 19139  00006E                     	ds	1
 19140  0000                     int$flags	set	btemp
 19141                           tblptru	equ	0xFF8
 19142                           tblptrh	equ	0xFF7
 19143                           tblptrl	equ	0xFF6
 19144                           tablat	equ	0xFF5
 19145                           prodh	equ	0xFF4
 19146                           prodl	equ	0xFF3
 19147                           intcon	equ	0xFF2
 19148                           intcon2	equ	0xFF1
 19149                           intcon3	equ	0xFF0
 19150                           postinc0	equ	0xFEE
 19151                           wreg	equ	0xFE8
 19152                           postdec1	equ	0xFE5
 19153                           fsr1l	equ	0xFE1
 19154                           bsr	equ	0xFE0
 19155                           indf2	equ	0xFDF
 19156                           postinc2	equ	0xFDE
 19157                           postdec2	equ	0xFDD
 19158                           plusw2	equ	0xFDB
 19159                           fsr2h	equ	0xFDA
 19160                           fsr2l	equ	0xFD9
 19161                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         548
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     89     109
    BANK0           128     64      74
    BANK1           256     34     175
    BANK2           256      0     192
    BANK3           256      0     192

Pointer List with Targets:

    FSH_Write_IR_RF@RAMaddress	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), 

    FSH_VerifyWriteIntArray@Array	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), RF_DataTiming(BANK1[128]), 

    FSH_VerifyWriteIntArray@ConstArray	PTR const unsigned int  size(3) Largest target is 192
		 -> IR_SavedTiming1(CODE[192]), IR_SavedTiming0(CODE[192]), RF_SavedTiming(CODE[128]), 

    FSH_WriteIntArray@Array	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), RF_DataTiming(BANK1[128]), 

    FSH_WriteIntArray@ConstArray	PTR const unsigned int  size(3) Largest target is 192
		 -> IR_SavedTiming1(CODE[192]), IR_SavedTiming0(CODE[192]), RF_SavedTiming(CODE[128]), 

    MSC_BufferCopyIntConst@from	PTR const unsigned int  size(3) Largest target is 192
		 -> IR_SavedTiming1(CODE[192]), IR_SavedTiming0(CODE[192]), RF_SavedTiming(CODE[128]), 

    MSC_BufferCopyIntConst@to	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), RF_DataTiming(BANK1[128]), 

    MSC_CleanBufferInt@data	PTR unsigned int  size(2) Largest target is 192
		 -> IR_DataHolder1(BANK3[192]), IR_DataTiming(BANK2[192]), RF_DataTiming(BANK1[128]), 

    IR_CalculateCodesize@Code	PTR const unsigned int  size(3) Largest target is 192
		 -> IR_SavedTiming1(CODE[192]), IR_SavedTiming0(CODE[192]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    _low_isr->_IR_CheckCode
    _TMR_Timer2Start->_TMR_ResetTimer2
    _TMR_ResetTimer2->i1_TMR_Timer2
    _TMR_Timer1Start->i1_TMR_ResetTimer1
    i1_TMR_ResetTimer1->i1_TMR_Timer1
    _RF_Disable->i1_RF_DataInt
    _RF_Disable->i1_TMR_Timer0
    _RF_Disable->i1_TMR_Timer0Int
    _IR_CheckCode->i1_IR_LoadCode
    i1_IR_LoadCode->i1___ftmul
    i1___ftge->i1___lwtoft
    _FSH_Write_IR_RF->_MSC_BufferCopyIntConst
    _MSC_BufferCopyIntConst->i1_MSC_CleanBufferInt
    _RF_Enable->i1_RF_DataInt
    _RF_Enable->i1_TMR_Timer0Int
    _FSH_WriteIntArray->_FSH_AddressToBlock
    _FSH_EraseBlock->_FSH_AddressToBlock
    _ADC_CalculateVoltage->i1___ftmul
    i1___lwtoft->i1___ftpack
    i1___ftmul->___ftdiv
    ___ftdiv->i1___lwtoft

Critical Paths under _main in BANK0

    _main->_MSC_BlinkLED
    _SYS_EnableInt->_BUT_IR_PinChangeInt
    _SYS_EnableInt->_RF_DataInt
    _RF_LoadCode->___lwtoft
    _MTR_Rotate->_MSC_DelayMS
    _MSC_BlinkLED->_MSC_DelayMS
    _MSC_DelayMS->_MSC_DelayNOP
    _InitTimer2->_TMR_Timer2
    _InitTimer2->_TMR_Timer2Int
    _InitTimer1->_TMR_Timer1Function
    _TMR_Timer1Function->_TMR_ResetTimer1
    _TMR_ResetTimer1->_TMR_Timer1
    _InitTimer0->_TMR_ResetTimer0
    _TMR_ResetTimer0->_TMR_Timer0
    _InitRF->_MSC_CleanBufferInt
    _InitLDO->_LDO_Pass
    _InitIR->_MSC_CleanBufferInt
    _InitButton->_BUT_IR_PinChangeInt
    _InitButton->_BUT_ReadButton
    _InitADC->_ADC_ConversionInt
    _InitADC->_ADC_Module
    _IR_LoadCode->___lwtoft
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft

Critical Paths under _high_isr in BANK0

    _high_isr->_RF_CheckCode
    _TMR_Timer0Start->i2_TMR_ResetTimer0
    i2_TMR_ResetTimer0->i2_TMR_Timer0
    _RF_CheckCode->i2_FSH_Write_IR_RF
    i2_RF_LoadCode->i2___ftmul
    i2___lwtoft->i2___ftpack
    i2___ftmul->i2___lwtoft
    i2___ftge->i2___lwtoft
    i2_FSH_Write_IR_RF->i2_MSC_BufferCopyIntConst
    i2_MSC_BufferCopyIntConst->i2_MSC_CleanBufferInt
    i2_RF_Enable->i2_RF_DataInt
    i2_RF_Enable->i2_TMR_Timer0Int
    i2_FSH_WriteIntArray->i2_FSH_AddressToBlock
    i2_FSH_EraseBlock->i2_FSH_AddressToBlock

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_IR_LoadCode
    _RF_LoadCode->___ftmul
    _MTR_Rotate->_MSC_DelayMS
    _MSC_BlinkLED->_MSC_DelayMS
    _IR_LoadCode->___ftmul

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   29009
                          _ADC_Start
                        _IR_LoadCode
                           _Init_App
                        _Init_System
                       _MSC_BlinkLED
                        _MSC_DelayMS
                         _MTR_Rotate
                        _RF_LoadCode
                  _SYS_ActivityTimer
            _SYS_ConfigureOscillator
                     _SYS_DisableInt
                      _SYS_EnableInt
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _SYS_DisableInt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYS_ConfigureOscillator                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYS_ActivityTimer                                    0     0      0      44
             _SYS_ActivityTimerReset
                      _SYS_EnableInt
                          _SYS_Sleep
 ---------------------------------------------------------------------------------
 (2) _SYS_Sleep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYS_EnableInt                                        0     0      0      44
                _BUT_IR_PinChangeInt
                         _RF_DataInt
 ---------------------------------------------------------------------------------
 (2) _SYS_ActivityTimerReset                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_LoadCode                                          6     6      0   10982
                                             14 BANK1      6     6      0
               _RF_CalculateCodesize
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _RF_CalculateCodesize                                 1     1      0      90
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MTR_Rotate                                           0     0      0     719
                        _MSC_DelayMS
                            _MTR_IN1
                            _MTR_IN2
 ---------------------------------------------------------------------------------
 (2) _MTR_IN2                                              1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTR_IN1                                              1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MSC_BlinkLED                                         8     4      4    1544
                                             62 BANK0      2     2      0
                                              4 BANK1      6     2      4
                        _MSC_DelayMS
 ---------------------------------------------------------------------------------
 (2) _MSC_DelayMS                                          9     5      4     675
                                             57 BANK0      5     1      4
                                              0 BANK1      4     4      0
                       _MSC_DelayNOP
 ---------------------------------------------------------------------------------
 (3) _MSC_DelayNOP                                         4     2      2     145
                                             53 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0    1876
                     _BUT_ReadButton
                    _IR_ReadReceiver
                            _InitADC
                         _InitButton
                          _InitFlash
                             _InitIR
                            _InitLDO
                          _InitMOTOR
                             _InitRF
                         _InitTimers
 ---------------------------------------------------------------------------------
 (2) _InitTimers                                           0     0      0     333
                         _InitTimer0
                         _InitTimer1
                         _InitTimer2
 ---------------------------------------------------------------------------------
 (3) _InitTimer2                                           0     0      0      44
                         _TMR_Timer2
                      _TMR_Timer2Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2Int                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer1                                           0     0      0     200
                    _TMR_ResetTimer1
                         _TMR_Timer1
                 _TMR_Timer1Function
                      _TMR_Timer1Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer1Int                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer1Function                                   1     1      0     111
                                             55 BANK0      1     1      0
                    _TMR_ResetTimer1
                         _TMR_Timer1
                      _TMR_Timer1Osc
 ---------------------------------------------------------------------------------
 (5) _TMR_Timer1Osc                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _TMR_ResetTimer1                                      1     1      0      45
                                             54 BANK0      1     1      0
                         _TMR_Timer1
 ---------------------------------------------------------------------------------
 (5) _TMR_Timer1                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer0                                           0     0      0      89
                    _TMR_ResetTimer0
                         _TMR_Timer0
                      _TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer0Int                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_ResetTimer0                                      1     1      0      45
                                             54 BANK0      1     1      0
                         _TMR_Timer0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer0                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitRF                                               0     0      0     759
                 _MSC_CleanBufferInt
                         _RF_DataInt
                        _RF_Receiver
                    _RF_SetBandwidth
                      _RF_SetSquelch
 ---------------------------------------------------------------------------------
 (3) _RF_SetSquelch                                        1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_SetBandwidth                                      1     1      0      66
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_Receiver                                          1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _RF_DataInt                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitMOTOR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitLDO                                              0     0      0      22
                           _LDO_Pass
 ---------------------------------------------------------------------------------
 (3) _LDO_Pass                                             1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitIR                                               0     0      0     627
                 _MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (3) _MSC_CleanBufferInt                                   6     2      4     627
                                             53 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _InitFlash                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitButton                                           0     0      0      45
                _BUT_IR_PinChangeInt
                     _BUT_ReadButton
 ---------------------------------------------------------------------------------
 (3) _BUT_ReadButton                                       1     1      0      23
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _BUT_IR_PinChangeInt                                  1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitADC                                              0     0      0      44
                  _ADC_ChangeChannel
                  _ADC_ConversionInt
                         _ADC_Module
 ---------------------------------------------------------------------------------
 (3) _ADC_Module                                           1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionInt                                    1     1      0      22
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ChangeChannel                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IR_ReadReceiver                                      1     1      0      23
                                             53 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_App                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_LoadCode                                         20    20      0   11509
                                             14 BANK1     20    20      0
               _IR_CalculateCodesize
                             ___ftge
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3271
                                             61 BANK0      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     679
                                             53 BANK0      9     5      4
                                              0 BANK1      6     6      0
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5184
                                              0 BANK1     14     8      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    1953
                                             53 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6    1616
                                             53 BANK0      9     3      6
 ---------------------------------------------------------------------------------
 (2) _IR_CalculateCodesize                                 7     4      3     240
                                             53 BANK0      7     4      3
 ---------------------------------------------------------------------------------
 (1) _ADC_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                             15    15      0   19896
                                             75 COMRAM    14    14      0
               _ADC_CalculateVoltage
                       _IR_CheckCode
                       _IR_ResetData
                         _RF_Disable
                    _TMR_Timer1Start
                   _TMR_Timer1Status
                    _TMR_Timer2Start
              i1_BUT_IR_PinChangeInt
                   i1_BUT_ReadButton
                  i1_IR_ReadReceiver
                       i1_RF_DataInt
           i1_SYS_ActivityTimerReset
                  i1_TMR_ResetTimer1
                       i1_TMR_Timer1
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) i1_SYS_ActivityTimerReset                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_IR_ReadReceiver                                    1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_BUT_ReadButton                                     1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_BUT_IR_PinChangeInt                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer2Start                                      2     0      2     345
                                              2 COMRAM     2     0      2
                    _TMR_ResetTimer2
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (9) _TMR_ResetTimer2                                      1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) i1_TMR_Timer2                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer1Status                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer1Start                                      0     0      0      67
                  i1_TMR_ResetTimer1
                       i1_TMR_Timer1
 ---------------------------------------------------------------------------------
 (8) i1_TMR_ResetTimer1                                    1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer1
 ---------------------------------------------------------------------------------
 (8) i1_TMR_Timer1                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _RF_Disable                                           0     0      0      66
                       i1_RF_DataInt
                       i1_TMR_Timer0
                    i1_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (9) i1_TMR_Timer0                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _IR_CheckCode                                        15    15      0   15021
                                             60 COMRAM    15    15      0
                    _FSH_Write_IR_RF
                      i1_IR_LoadCode
                           i1___ftge
                          i1___ftmul
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (9) i1_IR_LoadCode                                       20    20      0    4241
                                             40 COMRAM    20    20      0
             i1_IR_CalculateCodesize
                           i1___ftge
                          i1___ftmul
                          i1___fttol
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (10) i1___fttol                                          15    11      4     304
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (9) i1___ftge                                             9     3      6     552
                                             11 COMRAM     9     3      6
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i1_IR_CalculateCodesize                              7     4      3     164
                                              0 COMRAM     7     4      3
 ---------------------------------------------------------------------------------
 (9) _FSH_Write_IR_RF                                     17    17      0    6385
                                             17 COMRAM    17    17      0
                 _FSH_AddressToBlock
                     _FSH_EraseBlock
            _FSH_VerifyWriteIntArray
                  _FSH_WriteIntArray
                       _IR_ResetData
             _MSC_BufferCopyIntConst
                       _RF_ResetData
 ---------------------------------------------------------------------------------
 (10) _RF_ResetData                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _MSC_BufferCopyIntConst                             11     2      9    1650
                                              6 COMRAM    11     2      9
               i1_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (11) i1_MSC_CleanBufferInt                                6     2      4     143
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _IR_ResetData                                         0     0      0      44
                          _RF_Enable
 ---------------------------------------------------------------------------------
 (9) _RF_Enable                                            0     0      0      44
                       i1_RF_DataInt
                    i1_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (9) i1_TMR_Timer0Int                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_RF_DataInt                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _FSH_WriteIntArray                                  12     7      5    1639
                                              4 COMRAM    12     7      5
                 _FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (10) _FSH_VerifyWriteIntArray                            12     7      5    1205
                                              0 COMRAM    12     7      5
 ---------------------------------------------------------------------------------
 (10) _FSH_EraseBlock                                      7     3      4     613
                                              4 COMRAM     7     3      4
                 _FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (11) _FSH_AddressToBlock                                  4     0      4     413
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (8) _ADC_CalculateVoltage                                 5     5      0    4038
                                             40 COMRAM     5     5      0
                            ___ftdiv
                i1_ADC_ChangeChannel
                          i1___ftmul
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (9) i1___lwtoft                                           3     0      3    1059
                                              8 COMRAM     3     0      3
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (9) i1___ftmul                                           15     9      6    1814
                                             26 COMRAM    14     8      6
                            ___ftdiv (ARG)
                         i1___ftpack
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) i1_ADC_ChangeChannel                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    1105
                                             11 COMRAM    15     9      6
                         i1___ftpack
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _high_isr                                           10    10      0    9012
                                             43 BANK0     10    10      0
                       _RF_CheckCode
                    _TMR_Timer0Start
                   _TMR_Timer0Status
                     i2_RF_ResetData
           i2_SYS_ActivityTimerReset
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_SYS_ActivityTimerReset                            0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR_Timer0Status                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR_Timer0Start                                     0     0      0      67
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_TMR_ResetTimer0                                   1     1      0      45
                                              1 BANK0      1     1      0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_TMR_Timer0                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (14) _RF_CheckCode                                        9     9      0    8765
                                             34 BANK0      9     9      0
                  i2_FSH_Write_IR_RF
                      i2_RF_LoadCode
                           i2___ftge
                          i2___ftmul
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (15) i2_RF_LoadCode                                       6     6      0    2561
                                             25 BANK0      6     6      0
             i2_RF_CalculateCodesize
                           i2___ftge
                          i2___ftmul
                          i2___fttol
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (15) i2___lwtoft                                          3     0      3     617
                                              8 BANK0      3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (16) i2___fttol                                          15    11      4     304
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (15) i2___ftmul                                          15     9      6    1112
                                             11 BANK0     14     8      6
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (16) i2___ftpack                                          8     3      5     387
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (15) i2___ftge                                            9     3      6     344
                                             11 BANK0      9     3      6
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (16) i2_RF_CalculateCodesize                              1     1      0      90
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (15) i2_FSH_Write_IR_RF                                  17    17      0    3789
                                             17 BANK0     17    17      0
               i2_FSH_AddressToBlock
                   i2_FSH_EraseBlock
          i2_FSH_VerifyWriteIntArray
                i2_FSH_WriteIntArray
                     i2_IR_ResetData
           i2_MSC_BufferCopyIntConst
                     i2_RF_ResetData
 ---------------------------------------------------------------------------------
 (14) i2_RF_ResetData                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i2_MSC_BufferCopyIntConst                           11     2      9     890
                                              6 BANK0     11     2      9
               i2_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (17) i2_MSC_CleanBufferInt                                6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (16) i2_IR_ResetData                                      0     0      0      44
                        i2_RF_Enable
 ---------------------------------------------------------------------------------
 (17) i2_RF_Enable                                         0     0      0      44
                       i2_RF_DataInt
                    i2_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (18) i2_TMR_Timer0Int                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (18) i2_RF_DataInt                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (16) i2_FSH_WriteIntArray                                12     7      5     837
                                              4 BANK0     12     7      5
               i2_FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (16) i2_FSH_VerifyWriteIntArray                          12     7      5     597
                                              0 BANK0     12     7      5
 ---------------------------------------------------------------------------------
 (16) i2_FSH_EraseBlock                                    7     3      4     381
                                              4 BANK0      7     3      4
               i2_FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (17) i2_FSH_AddressToBlock                                4     0      4     219
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Start
   _IR_LoadCode
     _IR_CalculateCodesize
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lwtoft
       ___ftpack
   _Init_App
   _Init_System
     _BUT_ReadButton
     _IR_ReadReceiver
     _InitADC
       _ADC_ChangeChannel
       _ADC_ConversionInt
       _ADC_Module
     _InitButton
       _BUT_IR_PinChangeInt
       _BUT_ReadButton
     _InitFlash
     _InitIR
       _MSC_CleanBufferInt
     _InitLDO
       _LDO_Pass
     _InitMOTOR
     _InitRF
       _MSC_CleanBufferInt
       _RF_DataInt
       _RF_Receiver
       _RF_SetBandwidth
       _RF_SetSquelch
     _InitTimers
       _InitTimer0
         _TMR_ResetTimer0
           _TMR_Timer0
         _TMR_Timer0
         _TMR_Timer0Int
       _InitTimer1
         _TMR_ResetTimer1
           _TMR_Timer1
         _TMR_Timer1
         _TMR_Timer1Function
           _TMR_ResetTimer1
             _TMR_Timer1
           _TMR_Timer1
           _TMR_Timer1Osc
         _TMR_Timer1Int
       _InitTimer2
         _TMR_Timer2
         _TMR_Timer2Int
   _MSC_BlinkLED
     _MSC_DelayMS
       _MSC_DelayNOP
   _MSC_DelayMS
     _MSC_DelayNOP
   _MTR_Rotate
     _MSC_DelayMS
       _MSC_DelayNOP
     _MTR_IN1
     _MTR_IN2
   _RF_LoadCode
     _RF_CalculateCodesize
     ___ftge
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lwtoft
       ___ftpack
   _SYS_ActivityTimer
     _SYS_ActivityTimerReset
     _SYS_EnableInt
       _BUT_IR_PinChangeInt
       _RF_DataInt
     _SYS_Sleep
   _SYS_ConfigureOscillator
   _SYS_DisableInt
   _SYS_EnableInt
     _BUT_IR_PinChangeInt
     _RF_DataInt
   ___ftge

 _low_isr (ROOT)
   _ADC_CalculateVoltage
     ___ftdiv
       i1___ftpack
       i1___lwtoft (ARG)
         i1___ftpack
     i1_ADC_ChangeChannel
     i1___ftmul
       ___ftdiv (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftpack (ARG)
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack
   _IR_CheckCode
     _FSH_Write_IR_RF
       _FSH_AddressToBlock
       _FSH_EraseBlock
         _FSH_AddressToBlock
       _FSH_VerifyWriteIntArray
       _FSH_WriteIntArray
         _FSH_AddressToBlock
       _IR_ResetData
         _RF_Enable
           i1_RF_DataInt
           i1_TMR_Timer0Int
       _MSC_BufferCopyIntConst
         i1_MSC_CleanBufferInt
       _RF_ResetData
     i1_IR_LoadCode
       i1_IR_CalculateCodesize
       i1___ftge
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftmul
         ___ftdiv (ARG)
           i1___ftpack
           i1___lwtoft (ARG)
             i1___ftpack
         i1___ftpack (ARG)
         i1___lwtoft (ARG)
           i1___ftpack
       i1___fttol
       i1___lwtoft
         i1___ftpack
     i1___ftge
       i1___lwtoft (ARG)
         i1___ftpack
     i1___ftmul
       ___ftdiv (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftpack (ARG)
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack
   _IR_ResetData
     _RF_Enable
       i1_RF_DataInt
       i1_TMR_Timer0Int
   _RF_Disable
     i1_RF_DataInt
     i1_TMR_Timer0
     i1_TMR_Timer0Int
   _TMR_Timer1Start
     i1_TMR_ResetTimer1
       i1_TMR_Timer1
     i1_TMR_Timer1
   _TMR_Timer1Status
   _TMR_Timer2Start
     _TMR_ResetTimer2
       i1_TMR_Timer2
     i1_TMR_Timer2
   i1_BUT_IR_PinChangeInt
   i1_BUT_ReadButton
   i1_IR_ReadReceiver
   i1_RF_DataInt
   i1_SYS_ActivityTimerReset
   i1_TMR_ResetTimer1
     i1_TMR_Timer1
   i1_TMR_Timer1
   i1_TMR_Timer2

 _high_isr (ROOT)
   _RF_CheckCode
     i2_FSH_Write_IR_RF
       i2_FSH_AddressToBlock
       i2_FSH_EraseBlock
         i2_FSH_AddressToBlock
       i2_FSH_VerifyWriteIntArray
       i2_FSH_WriteIntArray
         i2_FSH_AddressToBlock
       i2_IR_ResetData
         i2_RF_Enable
           i2_RF_DataInt
           i2_TMR_Timer0Int
       i2_MSC_BufferCopyIntConst
         i2_MSC_CleanBufferInt
       i2_RF_ResetData
     i2_RF_LoadCode
       i2_RF_CalculateCodesize
       i2___ftge
         i2___lwtoft (ARG)
           i2___ftpack
       i2___ftmul
         i2___ftpack
         i2___lwtoft (ARG)
           i2___ftpack
       i2___fttol
       i2___lwtoft
         i2___ftpack
     i2___ftge
       i2___lwtoft (ARG)
         i2___ftpack
     i2___ftmul
       i2___ftpack
       i2___lwtoft (ARG)
         i2___ftpack
     i2___lwtoft
       i2___ftpack
   _TMR_Timer0Start
     i2_TMR_ResetTimer0
       i2_TMR_Timer0
     i2_TMR_Timer0
   _TMR_Timer0Status
   i2_RF_ResetData
   i2_SYS_ActivityTimerReset
   i2_TMR_ResetTimer0
     i2_TMR_Timer0
   i2_TMR_Timer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3FF      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0      C0      10       75.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0      C0       8       75.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     22      AF       6       68.4%
BITBANK0            80      0       0       3        0.0%
BANK0               80     40      4A       4       57.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     59      6D       1       86.5%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     2E6      11        0.0%
DATA                 0      0     2E6      13        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Tue Sep 01 13:53:55 2015

            MSC_BufferCopyIntConst@i 0010              __end_of_IR_ReadReceiver 17F4  
           MSC_BufferCopyIntConst@to 000A            __size_ofi2_FSH_EraseBlock 0076  
                         _RF_SyncLow 00C2                   TMR_Timer0Int@state 00B5  
                         i1___ftpack 0F40                          _RF_SyncHigh 00C0  
                                 l76 3FB6                      ?_SYS_DisableInt 0001  
          i2MSC_CleanBufferInt@count 0082                                   bsr 000FE0  
                         i1___lwtoft 1768                   __size_of_ADC_Start 0004  
                   i2RF_LoadCode@Low 0099                  i2_FSH_WriteIntArray 0BA4  
                 TMR_Timer1Int@state 00B5           ??i1_SYS_ActivityTimerReset 0001  
                         i2___ftpack 0FCA                         __CFG_CP0$OFF 000000  
                         _TMR_Timer0 1A5E                           _TMR_Timer1 1A3E  
                         _TMR_Timer2 1A1E                                  l500 0014  
                                l340 0010                                  l334 0008  
                                l343 0004                                  l512 0D5E  
                                l505 0014                                  l337 0004  
                                l349 1B5E                                  l640 0014  
                                l464 199A                                  l642 0016  
                                l661 1918                                  l566 17E2  
                                l734 17C0                                  l739 1A9A  
                                l843 1A4A                                  l838 1A6A  
                                l848 1A2A                                  l873 1A3A  
                                l883 1956                                  l868 1A5A  
                         i2___lwtoft 178C                                  l878 1A1A  
                                _PR2 000FCB     FSH_VerifyWriteIntArray@failcount 000B  
 i2FSH_VerifyWriteIntArray@failcount 008A                         i1___ftge@ff1 000C  
                       i1___ftge@ff2 000F                  __size_of_ADC_Module 0010  
                 TMR_Timer2Int@state 00B5                ??i1_ADC_ChangeChannel 0001  
                  i2RF_LoadCode@High 009C                                  prod 000FF3  
                                wreg 000FE8                         i1___ftmul@f1 001B  
                       i1___ftmul@f2 001E                      IR_CheckCode@Low 0048  
                 TMR_Timer1Osc@state 00B5               ?i1_BUT_IR_PinChangeInt 0001  
   __size_of_FSH_VerifyWriteIntArray 0060                         i1___fttol@f1 0001  
       FSH_VerifyWriteIntArray@Array 0004                       ?_RF_SetSquelch 0001  
                       ___ftdiv@cntr 0015                         ___ftdiv@sign 001A  
                               l1320 0F20                                 l1082 1AAA  
                               l1308 0EC2                                 l1094 1ABA  
                               l1392 0618                ?i2_MSC_CleanBufferInt 0080  
                               l4500 000E                                 l4308 166E  
                               l4502 0010                                 l5062 0000  
                               l5160 1524                                 l5064 000C  
                               l4442 17C6                                 l5154 1500  
                               l5066 000E                                 l5146 0000  
                               l5092 17F0                                 l5420 0012  
                               l5076 0000                                 l4446 17CE  
                               l5422 0002                                 l5440 1446  
                               l5088 17E8                                 l5416 0002  
                               l5424 000E                                 l5434 1416  
                               l4490 15B6                                 l4482 16A0  
                               l4474 168A                                 l5418 000E  
                               l5426 0012                                 l4468 1A8A  
                               l5542 12B6                                 l4670 0ED4  
                               l4654 18EA                                 l4486 159C  
                               l4478 1694                                 l6078 0000  
                               l4680 0F16                                 l4672 0EE8  
                               l4496 1A7A                                 l5538 1298  
                               l4498 0002                                 l6098 14BA  
                               l5548 12CE                                 l4676 0EFA  
                               l4668 0ECA                                 l4694 0F32  
                               l4678 0F0C                                 l6712 138E  
                               l6722 0590                                 l6708 1920  
                               l6716 13A6                                 l6804 02FA  
                               l6726 05B0                                 l6902 3E9A  
                               l6910 3EB4                                 l6760 081A  
                               l6824 38D8                                 l6808 0324  
                               l6904 3E9E                                 l6834 393A  
                               l6922 3EE4                                 l6780 0884  
                               l6852 39CA                                 l6828 3904  
                               l6916 3ECE                                 l6908 3EB0  
                               l6758 080E                                 l6838 3966  
                               l6934 3F08                                 l6918 3ED2  
                               l6792 08B0                                 l6784 088C  
                               l6776 0874                                 l6864 13F2  
                               l6872 0D28                                 l6960 3F86  
                               l6952 3F3A                                 l6928 3EFC  
                               l6786 0898                                 l6858 13D6  
                               l6962 3F8C                                 l6890 3E72  
                               l6788 089C                                 l6956 3F74  
                               l6978 3FC4                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
                               u4000 000E                                 u4001 000C  
                               u5230 000E                                 u5231 000C  
                               u5240 000E                                 u5241 000C  
                               u6070 149C                                 u7111 0580  
                               u7131 05A0                                 u7161 0804  
                               u7180 083A             FSH_VerifyWriteIntArray@i 000C  
                               u7185 0832                                 u7480 3FD6  
                               _TMR2 000FCC                     ?_RF_SetBandwidth 0001  
               ?i2_FSH_WriteIntArray 0084          ADC_CalculateVoltage@Voltage 0029  
             __size_of_TMR_Timer0Int 0010               __size_of_TMR_Timer1Int 0010  
             __size_of_TMR_Timer2Int 0010               __size_of_TMR_Timer1Osc 0018  
        __size_of_FSH_AddressToBlock 0028                    ??i1_TMR_Timer0Int 0001  
                    __end_of_MTR_IN1 0000                      __end_of_MTR_IN2 0000  
  __size_ofi2_SYS_ActivityTimerReset 0000                                 _main 3E4C  
          ?i2_SYS_ActivityTimerReset 0001               _SYS_ActivityTimerReset 0000  
                       ___ftpack@arg 00B5                         ___ftpack@exp 00B8  
                       i1___lwtoft@c 0009                                 fsr2h 000FDA  
                               fsr1l 000FE1                                 indf2 000FDF  
                               fsr2l 000FD9                                 btemp 006E  
                       i2___ftge@ff1 008B                         i2___ftge@ff2 008E  
                    _IR_SavedTiming0 2400                      _IR_SavedTiming1 24C0  
                               prodh 000FF4                                 prodl 000FF3  
                               start 0240                        __CFG_IESO$OFF 000000  
                      __CFG_FOSC2$ON 000000             ??i1_IR_CalculateCodesize 0004  
               i2_FSH_AddressToBlock 16A6                     IR_CheckCode@High 0045  
              i1MSC_CleanBufferInt@i 0005                         i2___ftmul@f1 008B  
                       i2___ftmul@f2 008E                         ___param_bank 000000  
         __size_of_SYS_ActivityTimer 003A                         ___ftmul@sign 0191  
                    __end_of_InitADC 1768                      __end_of_InitLDO 198C  
                       i2___fttol@f1 0080                     IR_CheckCode@data 0043  
                      i1___ftmul@exp 0024                                EECON1 000FA6  
                              EECON2 000FA7         __end_of_ADC_CalculateVoltage 0BA4  
                       ___fttol@exp1 018C                        ??_Init_System 00BB  
                    _FSH_Write_IR_RF 3354                         ___fttol@lval 0188  
        __size_of_TMR_Timer1Function 002A                                INTCON 000FF2  
            i1___ftmul@f3_as_product 0026                                ?_main 0001  
                   __end_of_LDO_Pass 0000                      __end_of___ftdiv 097C  
                       i2___lwtoft@c 0088                      __end_of___ftmul 0646  
                    __end_of___fttol 08C2                           _FlashWaste 2600  
                              i1l220 015E                                i1l212 0162  
                              i1l221 015C                                i1l222 00CA  
                              i1l223 0158                                i1l242 01AE  
                              i1l235 01A2                                i1l251 0210  
                              i1l244 020E                                i1l334 0008  
                              i1l604 2B30                                i2l207 054A  
                              i1l464 19F6                                i2l209 054C  
                              i2l334 0008                                i1l734 1730  
                              i1l566 1804                                i2l192 0534  
                              i2l195 0496                                i1l843 1B24  
                              i1l739 1B08                                i2l197 04E4  
                              i1l941 116E                                i1l950 0C84  
                              i1l838 1B32                                i2l464 19AE  
                              i1l960 1208                                i1l952 0C82  
                              i1l848 1B16                                i1l939 1170  
                              i1l868 1B40                                i1l974 3434  
                              i1l966 3772                                i2l941 10F8  
                              i2l950 0BE0                                i2l838 1AEA  
                              i2l960 1268                                i2l952 0BDE  
                              i2l939 10FA                                i2l868 1AFA  
                              i2l974 2FE8                                i2l966 3342  
                              _TMR0H 000FD7                                _TMR1H 000FCF  
                              _TMR0L 000FD6                                _TMR1L 000FCE  
                              _PORTB 000F81              i2FSH_Write_IR_RF@lowint 0098  
                     i2_IR_ResetData 1B7C              i2FSH_Write_IR_RF@status 009C  
                BUT_ReadButton@value 00B5                       __CFG_FCMEN$OFF 000000  
                _IRProgramCodeNumber 0068                        ___ftpack@sign 00B9  
                 RF_SetSquelch@state 00B5                i1IR_LoadCode@LowBound 0037  
                 __size_of_RF_Enable 0012                          ?_RF_DataInt 0001  
              ??i2_FSH_WriteIntArray 0089                __end_ofi2_RF_LoadCode 0468  
                   __end_ofi1___ftge 132A                      __end_of_low_isr 0240  
                              tablat 000FF5                     __end_ofi2___ftge 1382  
                  __end_of_ADC_Start 1BA2                          ?_RF_Disable 0001  
                              plusw2 000FDB                                status 000FD8  
                 __size_ofi1___ftmul 00D6                   __size_ofi1___fttol 00B8  
                        ?_MTR_Rotate 0001         i2MSC_BufferCopyIntConst@from 0086  
              FSH_EraseBlock@Address 0005             ??_MSC_BufferCopyIntConst 0010  
                     i1___ftpack@arg 0001                   __size_ofi2___ftmul 00D6  
                     i1___ftpack@exp 0004                   __size_ofi2___fttol 00BA  
              ?i2_FSH_AddressToBlock 0080                           _InitButton 1B50  
                    __initialization 1054                           _InitTimer0 1836  
                         _InitTimer1 192C                           _InitTimer2 3FE0  
                         _InitTimers 1B44                         __end_of_main 3FE0  
                   ?_IR_ReadReceiver 0001                        i2___ftmul@exp 0094  
                   _ButtonValue_prev 00C4         __end_ofi1_MSC_CleanBufferInt 15F2  
                        ?i1___ftpack 0001         _IR_SavedTiming0_absconstaddr 002400  
                     i1___ftmul@sign 0025                     __end_of_Init_App 14FC  
                      _TMR_Timer0Int 1A4E                        _TMR_Timer1Int 1A2E  
                        ?i1___lwtoft 0009                        _TMR_Timer2Int 1A0E  
                      _TMR_Timer1Osc 1946                       i1___fttol@exp1 000F  
                        ?i2___ftpack 0080                   __size_of_SYS_Sleep 0000  
                     i1___fttol@lval 000B                          ?_TMR_Timer0 0001  
                        ?_TMR_Timer1 0001                          ?_TMR_Timer2 0001  
                       ?_MSC_DelayMS 00B9                               ??_main 00C0  
             __end_ofi2_IR_ResetData 1B84                        ___fttol@sign1 0187  
                        ?i2___lwtoft 0088                        __activetblptr 000002  
                       ?i2_RF_Enable 0001                    _ADC_ConversionInt 1AAE  
                TMR_Timer2Start@time 0003                  __end_of_Init_System 1560  
                  i1_TMR_ResetTimer1 1896                      ??_RF_SetSquelch 00B5  
                    _ADC_SampleCount 0100                   ?_ADC_ConversionInt 0001  
      i2FSH_VerifyWriteIntArray@data 0088                FSH_EraseBlock@highint 0009  
            __size_of_FSH_EraseBlock 0072             __size_ofi2_TMR_Timer0Int 0010  
             ??i2_MSC_CleanBufferInt 0084                            ??_MTR_IN1 00B5  
                          ??_MTR_IN2 00B5               i1IR_LoadCode@CodeSize1 002F  
             i1IR_LoadCode@CodeSize2 0036                   ?i1_TMR_ResetTimer1 0001  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
           i2FSH_Write_IR_RF@highint 0097              __end_of_IR_SavedTiming0 24C0  
            __end_of_IR_SavedTiming1 2580                     __end_of___ftpack 0F40  
                     RF_LoadCode@Low 0195             __size_of_TMR_ResetTimer0 0020  
           __size_of_TMR_ResetTimer1 0020             __size_of_TMR_ResetTimer2 0020  
                   _TMR_Timer0Status 1B90                   __size_of_InitMOTOR 0004  
                             i1l1320 0FAA                     _TMR_Timer1Status 1B8A  
                             i1l1308 0F4C                               i1l1376 0902  
                             i1l1392 06EE                               i1l1378 094A  
                             i1l5010 0ADC                               i1l5002 0AB8  
                             i1l5004 0AC4                               i1l5006 0AC8  
                             i1l5200 33DA                               i1l5210 3422  
                             i1l5204 33FE                               i1l4326 16E8  
                             i1l4342 15E6                               i1l5310 35BC  
                             i1l5230 3484                               i2l1320 1034  
                             i1l5400 376A                               i1l5216 3440  
                             i1l4370 0F72                               i1l4338 15CC  
                             i1l5322 35F6                               i1l5306 35B0  
                             i1l5250 34CE                               i1l5234 3488  
                             i1l5218 3448                               i2l1308 0FD6  
                             i1l6212 0B9E                               i1l4612 0C86  
                             i1l4516 0DA0                               i1l5412 377E  
                             i1l5404 376E                               i1l5324 35FA  
                             i1l5180 3376                               i1l4374 0F84  
                             i1l4366 0F54                               i1l5350 3672  
                             i1l5254 34DA                               i1l5238 3494  
                             i1l5190 338A                               i1l6310 2E80  
                             i1l6230 28F8                               i1l6222 2816  
                             i1l4392 0FBC                               i1l4376 0F96  
                             i1l4368 0F5E                               i1l4632 11BC  
                             i1l4528 0DC4                               i1l4536 0DFC  
                             i1l5408 3778                               i1l5352 3676  
                             i1l5336 3634                               i1l5184 337E  
                             i1l4378 0FA0                               i1l5338 3638  
                             i1l5290 356E                               i1l5274 352C  
                             i1l5266 3514                               i1l4730 1452  
                             i1l6322 2EC6                               i1l6314 2EB2  
                             i1l6306 2E4C                               i1l6242 2ADE  
                             i1l4580 1174                               i1l5356 367E  
                             i1l5268 3518                               i1l6340 2EF8  
                             i1l6316 2EB4                               i1l6236 29CE  
                             i1l4902 0666                               i1l4646 1216  
                             i1l5382 3732                               i1l5366 36DC  
                             i1l5358 3682                               i1l5294 357A  
                             i1l5198 33B8                               i1l6342 2EFC  
                             i1l6318 2EBE                               i1l6262 2BE8  
                             i1l6254 2B26                               i2l1392 07C4  
                             i1l5464 08E2                               i1l4592 11AA  
                             i1l5376 36F2                               i1l4736 1482  
                             i1l5624 3B20                               i1l6328 2EDE  
                             i1l6248 2B00                               i1l6256 2B28  
                             i1l6352 0000                               i1l6600 00B8  
                             i1l5482 0926                               i1l4906 0686  
                             i1l5634 3B80                               i1l6290 2E18  
                             i1l6274 2DCE                               i1l6258 2B34  
                             i1l6370 1812                               i1l4596 11B0  
                             i1l5396 3760                               i1l5652 3C06  
                             i1l5628 3B4A                               i1l6284 2DF2  
                             i1l6268 2CBE                               i1l6292 2E1A  
                             i1l6620 00FE                               i1l4870 130E  
                             i1l5638 3BAA                               i1l6294 2E24  
                             i1l6390 1740                               i1l6366 180A  
                             i1l6622 0104                               i1l6630 0120  
                     __CFG_WDTEN$OFF 000000                               i2l4400 0FDE  
                             i2l5016 0994                               i2l4410 1020  
                             i2l4402 0FE8                               i2l5050 0A24  
                             i2l5042 0A00                               i2l5034 09E8  
                             i2l5018 099E                               i1l4866 12F0  
                             i1l6298 2E2E                               i1l6386 1736  
                             i2l4412 102A                               i2l4404 0FFC  
                             i2l5044 0A0C                               i1l4876 1326  
                             i2l4350 1646                               i2l5046 0A10  
                             i2l5038 09F8                               i1l6662 019E  
                             i1l6654 0180                               i2l4408 100E  
                             i2l6120 3C28                               i1l5936 1908  
                             i1l4976 0A4E                               i1l6584 0084  
                             i2l4346 162C                               i2l4426 1046  
                             i1l4994 0AA0                               i1l4978 0A58  
                             i1l6682 01DE                               i1l6690 01F2  
                             i1l6594 00A4                               i2l4356 16C0  
                             i2l6124 3CBE                               i1l6684 01E8  
                             i1l6588 0096                               i2l6134 3DCC  
                             i1l4998 0AB0                               i1l6598 00B4  
                             i2l4712 1618                               i2l6136 3DCE  
                             i2l6144 3DD8                               i2l4706 15F4  
                             i2l6162 3E16                               i2l6154 3E02  
                             i2l4804 1136                               i2l5700 2F32  
                             i2l5604 040A                               i2l6148 3DE4  
                             i2l6156 3E04                               i2l4750 0E38  
                             i2l6158 3E0E                               i2l4808 113E  
                             i2l4824 0BE4                               i2l5720 2FB2  
                             i2l5608 0430                               i2l6176 3E44  
                             i2l6168 3E2E                               i2l4762 0E5C  
                             i2l4770 0E94                               i2l5810 313E  
                             i2l5714 2F6C                               i2l5706 2F3E  
                             i2l6354 0000                               i2l6530 04C8  
                             i2l6514 0488                               i2l4844 121C  
                             i2l5732 2FF4                               i2l5716 2F8E  
                             i2l4940 073C                               i2l6532 04CE  
                             i2l5822 3176                               i2l5806 3132  
                             i2l5750 3042                               i2l5734 2FFE  
                             i2l5726 2FD6                               i2l4792 10FE  
                             i2l5912 3330                               i2l5920 333E  
                             i2l5840 31C2                               i2l4944 075C  
                             i2l6552 0524                               i2l4858 1276  
                             i2l5826 3182                               i2l5770 3096  
                             i2l5754 304E                               i2l5746 303E  
                             i2l5924 334A                               i2l5916 333A  
                             i2l5852 31FE                               i2l4884 1348  
                             i2l6556 052E                               i2l5854 3202  
                             i2l5838 31BE                               i2l5790 30EC  
                             i2l5782 30D2                               i2l5766 308A  
                             i2l4894 137E                               _TABLAT 000FF5  
                             i2l5928 3350                               i2l5872 324A  
                             i2l5784 30D6                               i2l5696 2F2A  
                             i2l4888 1366                               i2l5882 32A8  
                             i2l5874 324E                               i2l5866 323E  
                             i2l5892 32C0                               i2l5868 3242  
                             i2l5898 3302               i1IR_LoadCode@HighBound 003A  
                             u530_21 08F2                     __end_of___lwtoft 171E  
                             u461_41 072C                               u463_41 074C  
                             u528_21 08D2                               u456_21 0656  
                             _OSCCON 000FD3                               u458_21 0676  
                             u466_21 0A46                               u474_41 098C  
                 __size_of_InitFlash 0004                  ??_ADC_ConversionInt 00B5  
                       ??_ADC_Module 00B5                         _System_State 01AE  
                ??i1_TMR_ResetTimer1 0002               i2FSH_EraseBlock@lowint 0089  
                          ??_InitADC 00B6                            ??_InitLDO 00B6  
                       ?_IR_LoadCode 0001              __end_of_FSH_Write_IR_RF 3782  
           __size_of_TMR_Timer0Start 0010             __size_of_TMR_Timer1Start 0010  
                             _InitIR 19B4                               _InitRF 1560  
           __size_of_TMR_Timer2Start 0018                       i2_RF_ResetData 1B74  
       __end_of_IR_CalculateCodesize 1450         __end_of_RF_CalculateCodesize 152E  
         MSC_BufferCopyIntConst@from 0007                       __CFG_XINST$OFF 000000  
    __size_ofi1_IR_CalculateCodesize 003C                           _Timer2Post 0062  
                   __end_of_high_isr 0570                    ?i1_BUT_ReadButton 0001  
                             ___ftge 1278               i1IR_ReadReceiver@value 0001  
                   i2_FSH_EraseBlock 10D0              __size_of_BUT_ReadButton 0022  
                     __CFG_STVREN$ON 000000                            ??___ftdiv 0012  
                          ??___ftmul 018D                            ??___fttol 00B9  
       __size_of_BUT_IR_PinChangeInt 0010                       ?_TMR_Timer0Int 0001  
                     ?_TMR_Timer1Int 0001                       ?_TMR_Timer2Int 0001  
           i2MSC_CleanBufferInt@data 0080                       ?_TMR_Timer1Osc 0001  
                 ??i1_BUT_ReadButton 0001                    __end_of_RF_Enable 19EA  
                             clear_0 105A                               clear_1 1066  
                             clear_2 1072                               clear_3 107E  
                             clear_4 108A                  __size_of_RF_DataInt 0014  
          __end_of_ADC_ConversionInt 1ABE                      ?i2_IR_ResetData 0001  
            ?i2_RF_CalculateCodesize 0001                  __size_of_RF_Disable 0012  
          __end_ofi1_TMR_ResetTimer1 18B6                ___ftmul@f3_as_product 0192  
                  __end_ofi1___ftmul 071C                    __end_ofi1___fttol 0AEE  
                       __pdataCOMRAM 006D   __size_ofi2_FSH_VerifyWriteIntArray 0060  
                 __end_of_ADC_Module 1AAE                  __size_of_MTR_Rotate 009C  
                  __end_ofi2___ftmul 07F2                    __end_ofi2___fttol 0A36  
         ?i2_FSH_VerifyWriteIntArray 0080              _FSH_VerifyWriteIntArray 11B8  
                       __mediumconst 2800                            ??_low_isr 004C  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                       _IR_DataHolder1 0300  
               IR_LoadCode@CodeSize1 019B                 IR_LoadCode@CodeSize2 01A2  
                       ?_RF_LoadCode 0001                 _ADC_CalculateVoltage 0AEE  
                __size_ofi1___ftpack 008A                    i2_TMR_ResetTimer0 18B6  
                    __CFG_FOSC$HSPLL 000000              __p_RF_SavedTiming_const 2580  
                    TMR_Timer0@state 00B5                      TMR_Timer1@state 00B5  
        i2FSH_Write_IR_RF@WriteTries 009F                           __accesstop 0080  
            __end_of__initialization 10C2                  __size_ofi1___lwtoft 0024  
                    TMR_Timer2@state 00B5                    __end_of_SYS_Sleep 0000  
               IR_LoadCode@HighBound 01A6                         ?_RF_Receiver 0001  
                __size_ofi2___ftpack 008A               __end_ofi2_RF_ResetData 1B7C  
                 ?i2_TMR_ResetTimer0 0001                           ___ftge@ff1 00B5  
                         ___ftge@ff2 00B8                  __size_of_TMR_Timer0 0010  
                __size_of_TMR_Timer1 0010                  __size_of_TMR_Timer2 0010  
                    i1___ftpack@sign 0005               ??i2_FSH_AddressToBlock 0084  
                      ___rparam_used 000000                           ___ftdiv@f1 000C  
                         ___ftdiv@f2 000F                           ___ftdiv@f3 0016  
                          ?_LDO_Pass 0001                  __size_ofi2___lwtoft 0024  
           FSH_EraseBlock@WriteTries 000B                       i2___ftpack@arg 0080  
    __size_of_MSC_BufferCopyIntConst 0098                       i2___ftpack@exp 0083  
                  i1RF_DataInt@state 0001                     ??_SYS_DisableInt 00B5  
                     high_isr@RFtemp 00B3                          ?_InitButton 0001  
                         ___ftmul@f1 0187                           ___ftmul@f2 018A  
                         ___fttol@f1 00B5                       __pcstackCOMRAM 0001  
                        ?_InitTimer0 0001                          ?_InitTimer1 0001  
                        ?_InitTimer2 0001                          ?_InitTimers 0001  
                ??i2_TMR_ResetTimer0 0081                         __pidataBANK1 1B84  
               IR_ReadReceiver@value 00B5         _IR_SavedTiming1_absconstaddr 0024C0  
                     i2___ftmul@sign 0095                        ?i1_RF_DataInt 0001  
            _FlashWaste_absconstaddr 002600                          _Init_System 152E  
     __end_ofi2_RF_CalculateCodesize 1622                    __end_of_InitMOTOR 1B9A  
                        _Button_Data 0102                       i2___fttol@exp1 008E  
                          ?i1___ftge 000C                    __end_of_InitFlash 1B9E  
                         ___lwtoft@c 00BD                       i2___fttol@lval 008A  
         __end_of_MSC_CleanBufferInt 15C2                            ?i2___ftge 008B  
            ??i1_BUT_IR_PinChangeInt 0001             ?_SYS_ConfigureOscillator 0001  
   __end_ofi2_SYS_ActivityTimerReset 0000                      i1_TMR_Timer0Int 1B36  
             i1_IR_CalculateCodesize 1450    __end_ofi2_FSH_VerifyWriteIntArray 1278  
                    i1___fttol@sign1 000A                     RF_Receiver@state 00B5  
               i2FSH_WriteIntArray@i 008B                        ?_MSC_DelayNOP 00B5  
          __end_ofi2_TMR_ResetTimer0 18D6                        ?_MSC_BlinkLED 018B  
            ?_SYS_ActivityTimerReset 0001                ?_ADC_CalculateVoltage 0001  
               i1_MSC_CleanBufferInt 15C2                        ?i2_RF_DataInt 0001  
                         __pbssBANK0 00C0                           __pbssBANK1 0100  
                         __pbssBANK2 0200                           __pbssBANK3 0300  
                  _FSH_WriteIntArray 0C48                            ?_Init_App 0001  
                   RF_CheckCode@High 00A7                        ?i1_TMR_Timer0 0001  
                      ?i1_TMR_Timer1 0001                        ?i1_TMR_Timer2 0001  
                  i1IR_LoadCode@Low1 0029                    i1IR_LoadCode@Low2 0030  
            i2FSH_EraseBlock@Address 0084                    ??i2_TMR_Timer0Int 0080  
           i1TMR_ResetTimer1@TimerOn 0002                      ?i2_RF_ResetData 0001  
                 ?_FSH_WriteIntArray 0005                           ??_LDO_Pass 00B5  
                  ??_TMR_ResetTimer0 00B6                    ??_TMR_ResetTimer1 00B6  
                  ??_TMR_ResetTimer2 0002                     ?_FSH_Write_IR_RF 0001  
                            ?_InitIR 0001                              ?_InitRF 0001  
     i2FSH_VerifyWriteIntArray@Array 0083                      ??_TMR_Timer0Int 00B5  
                    ??_TMR_Timer1Int 00B5                      ??_TMR_Timer2Int 00B5  
                    ??_TMR_Timer1Osc 00B5                              ?___ftge 00B5  
                ??_FSH_WriteIntArray 000A                       ??i1_RF_DataInt 0001  
                      ?_IR_CheckCode 0001               __size_of_SYS_EnableInt 0000  
        __end_ofi1_ADC_ChangeChannel 1912                    ??_TMR_Timer0Start 0082  
                  ??_TMR_Timer1Start 0003                    ??_TMR_Timer2Start 0005  
                  i2RF_DataInt@state 0080                            ?___ftpack 00B5  
                         ??i1___ftge 0012                      RF_LoadCode@High 0198  
                      ?i2_TMR_Timer0 0001           __size_of_ADC_ConversionInt 0010  
          ??_FSH_VerifyWriteIntArray 0006                           ??i2___ftge 0091  
                          ?___lwtoft 00BD           __size_ofi1_TMR_ResetTimer1 0020  
  __size_ofi2_MSC_BufferCopyIntConst 0098            ?i2_MSC_BufferCopyIntConst 0086  
             _MSC_BufferCopyIntConst 0D84                         _Flash_Status 0103  
               __size_of_MSC_DelayMS 004E                        MSC_DelayMS@US 00B9  
            i2FSH_EraseBlock@highint 0088                        MSC_DelayNOP@i 00B7  
             __size_ofi1_IR_LoadCode 023C                              _TBLPTRH 000FF7  
                            _TBLPTRL 000FF6                              _TBLPTRU 000FF8  
               _IR_CalculateCodesize 1414                       _FSH_EraseBlock 1146  
          i2MSC_BufferCopyIntConst@i 008F                 _RF_CalculateCodesize 14FC  
               __size_ofi2_RF_Enable 0012                       ??_MSC_DelayNOP 00B7  
     __end_of_SYS_ActivityTimerReset 0000                              _IR_Data 0104  
                __size_of_InitButton 000C                       ??_MSC_BlinkLED 00BE  
                            _MTR_IN1 0000                              _MTR_IN2 0000  
                            _RF_Data 0105                  __size_of_InitTimer0 0020  
                __size_of_InitTimer1 001A                  __size_of_InitTimer2 0018  
                      MSC_BlinkLED@i 018F           __end_of_FSH_AddressToBlock 16F8  
          __end_of_FSH_WriteIntArray 0CE8                  __size_of_InitTimers 000C  
                     ??i2_RF_DataInt 0080                            ?_high_isr 0001  
              ?i1_MSC_CleanBufferInt 0001                         ??_RF_DataInt 00B5  
  __size_ofi1_SYS_ActivityTimerReset 0000                       ??i1_TMR_Timer0 0001  
                     ??i1_TMR_Timer1 0001                       ??i1_TMR_Timer2 0001  
                  _ADC_CurrentSource 006D                         ??_RF_Disable 0002  
          ?i1_SYS_ActivityTimerReset 0001                           ??_Init_App 00B5  
                    _Timer2PostCount 0064                      ADC_Module@state 00B5  
                            _InitADC 1744                         ??_MTR_Rotate 00BE  
                            _InitLDO 1976          MSC_BufferCopyIntConst@count 000C  
                          _ADC_Start 1B9E                              __Hparam 0000  
        MSC_BufferCopyIntConst@shift 000E                      __size_of_InitIR 0012  
                    __size_of_InitRF 0032                              __Lparam 0000  
           __size_of_RF_SetBandwidth 002A           __end_of_TMR_Timer1Function 167C  
              i2MSC_CleanBufferInt@i 0084                 __size_of_IR_LoadCode 0252  
                     _BUT_ReadButton 17B0                       ??_IR_CheckCode 003D  
                    __size_of___ftge 005A                         ??i1___ftpack 0006  
               i2TMR_Timer0Int@state 0080                              ___ftdiv 08C2  
                            ___ftmul 0570                              ___fttol 07F2  
            __end_ofi1_TMR_Timer0Int 1B44      __end_of_SYS_ConfigureOscillator 1B64  
                       ??i1___lwtoft 000C             __end_of_TMR_Timer0Status 1B96  
           __end_of_TMR_Timer1Status 1B90                              __pcinit 1054  
                     ??i2_TMR_Timer0 0080                         ??i2___ftpack 0085  
                         ??___ftpack 00BA                        ?_IR_ResetData 0001  
            i2___ftmul@f3_as_product 0096                              __ramtop 0400  
                       ??_TMR_Timer0 00B5                         ??_TMR_Timer1 00B5  
                       ??_TMR_Timer2 00B5                              __ptext0 3E4C  
                            __ptext1 0000                              __ptext2 1B5C  
                            __ptext3 148C                              __ptext4 0000  
                            __ptext5 0000                              __ptext6 0000  
                            __ptext7 0244                              __ptext8 14FC  
                            __ptext9 0CE8                   __end_of_RF_DataInt 19A0  
                       ??i2___lwtoft 008B                           ??___lwtoft 00C0  
                          _T0CONbits 000FD5                            _T1CONbits 000FCD  
                 __end_of_RF_Disable 19D8                            _T2CONbits 000FCA  
             __end_of_FSH_EraseBlock 11B8          __end_ofi2_FSH_WriteIntArray 0C48  
              ?_IR_CalculateCodesize 00B5                ?_RF_CalculateCodesize 0001  
                 __end_of_MTR_Rotate 0D84                              _low_isr 0018  
        FSH_WriteIntArray@ConstArray 0005               ??_ADC_CalculateVoltage 0029  
           BUT_IR_PinChangeInt@state 00B5           __size_ofi2_TMR_ResetTimer0 0020  
           __end_ofi2_FSH_EraseBlock 1146             __p_IR_SavedTiming0_const 2400  
                      _SYS_EnableInt 0000             __p_IR_SavedTiming1_const 24C0  
           i2_SYS_ActivityTimerReset 0000                           ??_high_isr 00AB  
                     __pintcode_body 0468                  _BUT_IR_PinChangeInt 1A8E  
                      ?_RF_CheckCode 0001                 end_of_initialization 10C2  
                 __end_ofi1___ftpack 0FCA                        __Lmediumconst 2800  
                   IR_LoadCode@High1 0198                     IR_LoadCode@High2 019F  
               __size_of_RF_LoadCode 0118                              int_func 0468  
                 __end_ofi1___lwtoft 178C                   __end_ofi2___ftpack 1054  
                 __end_of_TMR_Timer0 1A6E                   __end_of_TMR_Timer1 1A4E  
                 __end_of_TMR_Timer2 1A2E                           ?_ADC_Start 0001  
             __end_of_BUT_ReadButton 17D2                 __size_of_RF_Receiver 0010  
          FSH_Write_IR_RF@RAMaddress 0021                   __end_ofi2___lwtoft 17B0  
                      i1_IR_LoadCode 39D4                     FSH_Write_IR_RF@i 001E  
                   FSH_Write_IR_RF@j 001C              i1IR_CalculateCodesize@i 0007  
             FSH_WriteIntArray@Array 0008                              postdec1 000FE5  
                            postdec2 000FDD                     ??i2_IR_ResetData 0081  
                            postinc0 000FEE                              postinc2 000FDE  
             TMR_Timer1Function@mode 00B7                 ?_BUT_IR_PinChangeInt 0001  
                  i1_IR_ReadReceiver 17F4                       ??_IR_ResetData 0002  
                __p_FlashWaste_const 2600            FSH_AddressToBlock@Address 0001  
             __size_ofi2_RF_LoadCode 010C                   ?i1_IR_ReadReceiver 0001  
         i1BUT_IR_PinChangeInt@state 0001                            _IRStarted 0069  
           __size_of_IR_ReadReceiver 0022                            _RF_Enable 19D8  
                    ?_FSH_EraseBlock 0005                            _TRISAbits 000F92  
        ??i2_FSH_VerifyWriteIntArray 0085                            _TRISBbits 000F93  
                          _TRISCbits 000F94            __size_ofi1_BUT_ReadButton 0026  
                ??i1_IR_ReadReceiver 0001                       ?_SYS_EnableInt 0001  
                          _RFStarted 00C7               ??i1_MSC_CleanBufferInt 0005  
                          i1___ftmul 0646                            i1___fttol 0A36  
              __end_of_RF_SetSquelch 1A7E                       ??_RF_CheckCode 00A2  
         __size_of_FSH_WriteIntArray 00A0                        IR_CheckCode@i 004B  
                          i2___ftmul 071C                            i2___fttol 097C  
               __end_ofi1_RF_DataInt 19FC        __size_ofi2_MSC_CleanBufferInt 0030  
                      ?_RF_ResetData 0001                          ___ftdiv@exp 0019  
                     ?i1_IR_LoadCode 0001                      i2___ftpack@sign 0084  
                    ?_BUT_ReadButton 0001                         ??_InitButton 00B6  
                 __end_of_FlashWaste 2800                            _SYS_Sleep 0000  
                        ___ftmul@exp 0190                         ??_InitTimer0 00B7  
                       ??_InitTimer1 00B8                         ??_InitTimer2 00B6  
                     __end_of_InitIR 19C6                       __end_of_InitRF 1592  
                  __size_of_LDO_Pass 0000                         ??_InitTimers 00B8  
          __end_ofi1_IR_ReadReceiver 1816          _RF_SavedTiming_absconstaddr 002580  
               __end_of_MSC_DelayNOP 192C                ??_BUT_IR_PinChangeInt 00B5  
           i1MSC_CleanBufferInt@data 0001                 __end_of_MSC_BlinkLED 1414  
                     __end_of___ftge 12D2                         ?_Init_System 0001  
               __end_ofi2_RF_DataInt 19B4                     ?i1_TMR_Timer0Int 0001  
                      __pidataCOMRAM 1BA2                    ??_RF_SetBandwidth 00B5  
               __end_ofi1_TMR_Timer0 1B36                 __end_ofi1_TMR_Timer1 1B28  
               __end_ofi1_TMR_Timer2 1B1A                        low_isr@IRtemp 0058  
            ?i1_IR_CalculateCodesize 0001        ADC_CalculateVoltage@ADCcounts 002C  
                         ?_RF_Enable 0001               ??_IR_CalculateCodesize 00B8  
             ??_RF_CalculateCodesize 00B5                            _InitMOTOR 1B96  
                       _ButtonChange 0066                    __size_ofi1___ftge 0058  
              i1BUT_ReadButton@value 0001                  start_initialization 1054  
                  __size_ofi2___ftge 0058       __size_ofi1_BUT_IR_PinChangeInt 000E  
                  _ADC_ChangeChannel 18D6                            _InitFlash 1B9A  
             ADC_ConversionInt@state 00B5        __end_ofi1_BUT_IR_PinChangeInt 1B0C  
                    i2_TMR_Timer0Int 1AEE                           ?i1___ftmul 001B  
                         ?i1___fttol 0001                      _TMR_ResetTimer0 1856  
                    i2___fttol@sign1 0089                      _TMR_ResetTimer1 1816  
                    _TMR_ResetTimer2 1876                   ?_ADC_ChangeChannel 0001  
                 __end_of_InitButton 1B5C                     ??i2_RF_ResetData 0080  
               __end_of_IR_CheckCode 2F04                           ?i2___ftmul 008B  
                         ?i2___fttol 0080                   __end_of_InitTimer0 1856  
                 __end_of_InitTimer1 1946                   __end_of_InitTimer2 3FF8  
                 __end_of_InitTimers 1B50                   _MSC_CleanBufferInt 1592  
                     ??_RF_ResetData 0001                        i2_RF_LoadCode 035C  
               __end_ofi2_TMR_Timer0 1AEE     __size_of_SYS_ConfigureOscillator 0008  
                ??_ADC_ChangeChannel 00B5                      _TMR_Timer0Start 1ACE  
                    _TMR_Timer1Start 1ABE                      _TMR_Timer2Start 195E  
               FSH_EraseBlock@lowint 000A                    __size_of_Init_App 0036  
                        ??_ADC_Start 00B5                             ??_InitIR 00BB  
                           ??_InitRF 00BB                  ?_MSC_CleanBufferInt 00B5  
          i2_FSH_VerifyWriteIntArray 1218                           ?_SYS_Sleep 0001  
      __size_ofi2_FSH_AddressToBlock 002A                            _Timer2Use 006C  
   __end_ofi2_MSC_BufferCopyIntConst 0EB4               TMR_ResetTimer0@TimerOn 00B6  
                MSC_CleanBufferInt@i 00B9                             ??___ftge 00BB  
             TMR_ResetTimer1@TimerOn 00B6                IR_CalculateCodesize@i 00BB  
             TMR_ResetTimer2@TimerOn 0002                          __pdataBANK1 01A9  
              RF_CalculateCodesize@i 00B5       __end_ofi1_IR_CalculateCodesize 148C  
            ?_MSC_BufferCopyIntConst 0007     __end_ofi1_SYS_ActivityTimerReset 0000  
          __end_of_ADC_ChangeChannel 18F4                    __size_of___ftpack 008C  
                         ?_InitMOTOR 0001                        _IR_DataTiming 0200  
               ??_MSC_CleanBufferInt 00B9                          __pbssCOMRAM 005A  
                    ??_SYS_EnableInt 00B6                           ?_InitFlash 0001  
                  __size_of___lwtoft 0026                        __pcstackBANK0 0080  
                      __pcstackBANK1 0187                   i1IR_LoadCode@High1 002C  
                 i1IR_LoadCode@High2 0033                             ?_MTR_IN1 0001  
                           ?_MTR_IN2 0001           i2FSH_WriteIntArray@address 008C  
                  ??_IR_ReadReceiver 00B5                  __CFG_CCP2MX$DEFAULT 000000  
                     ?i2_RF_LoadCode 0001                  IR_LoadCode@LowBound 01A3  
            MSC_CleanBufferInt@count 00B7                 __end_of_IR_ResetData 1B74  
                  __size_of_high_isr 0568                      ??i1_IR_LoadCode 0029  
                           ?_InitADC 0001                             ?_InitLDO 0001  
                    RF_CheckCode@Low 00A4                   _FSH_AddressToBlock 16D0  
                _System_State_Change 0106           __size_ofi1_IR_ReadReceiver 0022  
                          __pintcode 0008            i1MSC_CleanBufferInt@count 0003  
                      __pmediumconst 2800                      RF_DataInt@state 00B5  
                          __ptext100 1ADE                            __ptext101 3C10  
                          __ptext110 1B74                            __ptext102 035C  
                          __ptext111 0E1C                            __ptext103 178C  
                          __ptext120 16A6                            __ptext112 1622  
                          __ptext104 097C                            __ptext113 1B7C  
                          __ptext105 071C                            __ptext114 19FC  
                          __ptext106 0FCA                            __ptext115 1AEE  
                          __ptext107 132A                            __ptext116 19A0  
                          __ptext108 15F2                            __ptext117 0BA4  
                          __ptext109 2F04                            __ptext118 1218  
                          __ptext119 10D0                             ?___ftdiv 000C  
                           ?___ftmul 0187                             ?___fttol 00B5  
     __end_of_MSC_BufferCopyIntConst 0E1C                __end_of_TMR_Timer0Int 1A5E  
              __end_of_TMR_Timer1Int 1A3E                __end_of_TMR_Timer2Int 1A1E  
               __end_of_RF_CheckCode 3E4C                __end_of_TMR_Timer1Osc 195E  
                        __pintcodelo 0018             __size_of_FSH_Write_IR_RF 042E  
                       MSC_DelayMS@i 0187              __end_ofi2_TMR_Timer0Int 1AFE  
                  ?_TMR_Timer0Status 0001                  ?_FSH_AddressToBlock 0001  
                  ?_TMR_Timer1Status 0001                        ??_MSC_DelayMS 00BD  
         ??i2_SYS_ActivityTimerReset 0080              __size_of_SYS_DisableInt 0000  
            __end_of_TMR_ResetTimer0 1876              __end_of_TMR_ResetTimer1 1836  
            __end_of_TMR_ResetTimer2 1896                        ??i2_RF_Enable 0081  
                 ??_TMR_Timer0Status 0080                          ??_RF_Enable 0002  
                 ??_TMR_Timer1Status 0001                   _TMR_Timer1Function 1652  
       __size_ofi1_ADC_ChangeChannel 001E                __size_ofi1_RF_DataInt 0012  
                           ?_low_isr 0001                     i1_BUT_ReadButton 171E  
                        ??i1___ftmul 0021                          ??i1___fttol 0005  
            __end_of_TMR_Timer0Start 1ADE              __end_of_TMR_Timer1Start 1ACE  
            __end_of_TMR_Timer2Start 1976                          ??i2___ftmul 0091  
                        ??i2___fttol 0084                    ?i2_FSH_EraseBlock 0084  
                ?_TMR_Timer1Function 0001                 ??_FSH_AddressToBlock 0005  
                           _DC_Motor 00C5                   ??i2_FSH_EraseBlock 0088  
                RF_SetBandwidth@band 00B5                        ??_IR_LoadCode 00C0  
              __size_of_MSC_DelayNOP 001A                        LDO_Pass@state 00B5  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
                           _LDO_Pass 0000                __size_of_MSC_BlinkLED 0044  
        FSH_VerifyWriteIntArray@data 0009                      IR_LoadCode@Low1 0195  
                    IR_LoadCode@Low2 019C                             i1u411_20 0C76  
                           i1u412_20 0C82                             i1u405_20 1162  
                           i1u406_20 116E                             i1u414_20 1206  
                           i1u516_25 368E                          ??_SYS_Sleep 00B5  
                           i1u369_20 16DE                __size_ofi2_RF_DataInt 0014  
                           i1u468_20 0A76             ??i2_RF_CalculateCodesize 0080  
                           i1u468_25 0A6E                             _PIR1bits 000F9E  
                           i2u372_40 16B6                             i2u444_40 0BD2  
                           i2u445_40 0BDE                             i2u438_40 10EC  
                           i2u439_40 10F8                             i2u447_40 1266  
                           _IRChange 0067                             i2u476_40 09BC  
                           i2u476_45 09B4                             i2u588_45 325A  
                           _RCONbits 000FD0           i2MSC_BufferCopyIntConst@to 0089  
                   __CFG_WDTPS$32768 000000                __size_ofi1_TMR_Timer0 000E  
              __size_ofi1_TMR_Timer1 000E                __size_ofi1_TMR_Timer2 000E  
               i1TMR_Timer0Int@state 0001             ?_FSH_VerifyWriteIntArray 0001  
               ??_TMR_Timer1Function 00B7                             _IR_Saved 01AC  
                   ??_FSH_EraseBlock 0009                         i1_RF_DataInt 19EA  
           i2_MSC_BufferCopyIntConst 0E1C                             _RF_Saved 01AD  
               __end_of_RF_ResetData 1B6C                    i2_FSH_Write_IR_RF 2F04  
                           i1___ftge 12D2                           _ADCON0bits 000FC2  
                         _ADCON1bits 000FC1                           _ADCON2bits 000FC0  
                           i2___ftge 132A                 __size_of_Init_System 0032  
         __size_of_ADC_ChangeChannel 001E                   ?i2_FSH_Write_IR_RF 0001  
                        ??_InitMOTOR 00B5                __size_of_IR_CheckCode 0702  
                        ??_InitFlash 00B5                  __end_of_MSC_DelayMS 13D0  
           i1_SYS_ActivityTimerReset 0000                      ??i2_RF_LoadCode 0099  
              __size_ofi2_TMR_Timer0 0010                         _MSC_DelayNOP 1912  
                        _INTCON2bits 000FF1                        ??_RF_LoadCode 00C0  
                __end_ofi2_RF_Enable 1A0E                          _INTCON3bits 000FF0  
                ??i2_FSH_Write_IR_RF 0091                            copy_data0 10A4  
                   __size_of_MTR_IN1 0000                     __size_of_MTR_IN2 0000  
                       _MSC_BlinkLED 13D0           i2FSH_VerifyWriteIntArray@i 008B  
      __size_of_ADC_CalculateVoltage 00B6                         i2_RF_DataInt 19A0  
            _SYS_ConfigureOscillator 1B5C                     ??_BUT_ReadButton 00B5  
       __size_ofi2_FSH_WriteIntArray 00A4                             _Init_App 14C6  
                      ??_RF_Receiver 00B5                             _Rail_VIN 01A9  
     FSH_Write_IR_RF@FlashWasteindex 001A     i2FSH_Write_IR_RF@FlashWasteindex 0099  
                         _ADC_Module 1A9E               FSH_Write_IR_RF@highint 0018  
                       i1_TMR_Timer0 1B28                         i1_TMR_Timer1 1B1A  
                       i1_TMR_Timer2 1B0C            FSH_Write_IR_RF@WriteTries 0020  
                         _EECON1bits 000FA6                             __Hparam0 0000  
                   __size_of_InitADC 0024                     __size_of_InitLDO 0016  
                    _RF_SetBandwidth 167C                             __Lparam0 0000  
            i2RF_CalculateCodesize@i 0080         __end_ofi2_MSC_CleanBufferInt 1652  
                __end_of_IR_LoadCode 39D4            __end_ofi2_FSH_Write_IR_RF 3354  
                       _IR_CheckCode 2802                         _IR_DataPlace 006B  
                   __size_of___ftdiv 00BA                     __size_of___ftmul 00D6  
                   __size_of___fttol 00D0                   i2FSH_Write_IR_RF@i 009D  
                 i2FSH_Write_IR_RF@j 009B                             ___ftpack 0EB4  
                   ?i2_TMR_Timer0Int 0001             ??_SYS_ActivityTimerReset 00B5  
                       i2_TMR_Timer0 1ADE                             ___lwtoft 16F8  
             MSC_CleanBufferInt@data 00B5    FSH_VerifyWriteIntArray@ConstArray 0001  
i2FSH_VerifyWriteIntArray@ConstArray 0080                     ?_TMR_ResetTimer0 0001  
                   ?_TMR_ResetTimer1 0001                     ?_TMR_ResetTimer2 0001  
                low_isr@button_state 0057                        _RF_DataTiming 0107  
                  ??_FSH_Write_IR_RF 0012                __size_of_IR_ResetData 0008  
                   __size_of_low_isr 0228                             __ptext10 0000  
                           __ptext11 0000                             __ptext20 192C  
                           __ptext12 13D0                             __ptext21 1A2E  
                           __ptext13 1382                             __ptext30 1560  
                           __ptext22 1652                             __ptext14 1912  
                           __ptext31 1A6E                             __ptext23 1946  
                           __ptext15 152E                             __ptext40 1B9A  
                           __ptext32 167C                             __ptext24 1816  
                           __ptext16 1B44                             __ptext41 1B50  
                           __ptext33 1A7E                             __ptext25 1A3E  
                           __ptext17 3FE0                             __ptext50 3782  
                           __ptext42 17B0                             __ptext34 198C  
                           __ptext26 1836                             __ptext18 1A0E  
                           __ptext51 16F8                             __ptext43 1A8E  
                           __ptext35 1B96                             __ptext27 1A4E  
                           __ptext19 1A1E                             __ptext60 17F4  
                           __ptext52 07F2                             __ptext44 1744  
                           __ptext36 1976                             __ptext28 1856  
                           __ptext61 171E                             __ptext53 0570  
                           __ptext45 1A9E                             __ptext37 0000  
                           __ptext29 1A5E                             __ptext70 19C6  
                           __ptext62 1AFE                             __ptext54 0EB4  
                           __ptext46 1AAE                             __ptext38 19B4  
                           __ptext71 1B28                             __ptext63 195E  
                           __ptext55 1278                             __ptext47 18D6  
                           __ptext39 1592                             __ptext80 15C2  
                           __ptext72 2802                             __ptext64 1876  
                           __ptext56 1414                             __ptext48 17D2  
                           __ptext81 1B6C                             __ptext73 39D4  
                           __ptext65 1B0C                             __ptext57 1B9E  
                           __ptext49 14C6                             __ptext90 1768  
                           __ptext82 19D8                             __ptext74 0A36  
                           __ptext66 1B8A                             __ptext91 0646  
                           __ptext83 1B36                             __ptext75 12D2  
                           __ptext67 1ABE                             __ptext59 0000  
                           __ptext92 18F4                             __ptext84 19EA  
                           __ptext76 1450                             __ptext68 1896  
                           __ptext93 08C2                             __ptext85 0C48  
                           __ptext77 3354                             __ptext69 1B1A  
                           __ptext94 0F40                             __ptext86 11B8  
                           __ptext78 1B64                             __ptext87 1146  
                           __ptext79 0D84                             __ptext96 0000  
                           __ptext88 16D0                             __ptext97 1B90  
                           __ptext89 0AEE                             __ptext98 1ACE  
                           __ptext99 18B6        i2MSC_BufferCopyIntConst@count 008B  
      i2MSC_BufferCopyIntConst@shift 008D                    i1TMR_Timer0@state 0001  
                   ?_TMR_Timer0Start 0001                     ?_TMR_Timer1Start 0001  
                           _high_isr 0008                    i1TMR_Timer1@state 0001  
                   ?_TMR_Timer2Start 0003                    i1TMR_Timer2@state 0001  
      __size_ofi1_MSC_CleanBufferInt 0030                        __size_of_main 0194  
        __end_of_BUT_IR_PinChangeInt 1A9E                       _Activity_Timer 005A  
           i2FSH_WriteIntArray@Array 0087                  __end_of_RF_LoadCode 035C  
    __end_of_FSH_VerifyWriteIntArray 1218                __size_of_RF_CheckCode 023C  
           IR_CalculateCodesize@Code 00B5      __size_ofi2_RF_CalculateCodesize 0030  
                       MTR_IN1@state 00B5                  __end_of_RF_Receiver 1A8E  
                       MTR_IN2@state 00B5                             int$flags 006E  
      i2FSH_WriteIntArray@ConstArray 0084                    _SYS_ActivityTimer 148C  
             __size_of_RF_SetSquelch 0010                   ?_SYS_ActivityTimer 0001  
                       _IR_ResetData 1B6C                       _SYS_DisableInt 0000  
                    _IR_ReadReceiver 17D2                          _MSC_DelayMS 1382  
                       _IRValue_prev 00C6                          i2_RF_Enable 19FC  
                        _OSCTUNEbits 000F9B                           _INTCONbits 000FF2  
       __end_ofi2_FSH_AddressToBlock 16D0              __size_ofi2_IR_ResetData 0008  
              FSH_Write_IR_RF@lowint 0019             __size_ofi1_TMR_Timer0Int 000E  
      __size_of_IR_CalculateCodesize 003C                  ??_SYS_ActivityTimer 00B6  
      __size_of_RF_CalculateCodesize 0032                FSH_Write_IR_RF@status 001D  
          ??_SYS_ConfigureOscillator 00B5                     MSC_DelayNOP@NOPs 00B5  
                 FSH_WriteIntArray@i 000C                i1_BUT_IR_PinChangeInt 1AFE  
           FSH_WriteIntArray@address 000D                         _RF_CheckCode 3C10  
         i1IR_CalculateCodesize@Code 0001                             intlevel1 0000  
                           intlevel2 0000                          _IR_CodeSize 006A  
            __end_of_RF_SetBandwidth 16A6                         _RF_DataPlace 00C9  
                      RF_CheckCode@i 00AA                          ?_ADC_Module 0001  
                  i2TMR_Timer0@state 0080          i2FSH_Write_IR_RF@RAMaddress 00A0  
                        _IR_LoadCode 3782                  i1_ADC_ChangeChannel 18F4  
                         _OSCCONbits 000FD3             __end_ofi1_BUT_ReadButton 1744  
          __end_of_SYS_ActivityTimer 14C6                       _RF_SavedTiming 2580  
              __size_of_RF_ResetData 0008           __size_ofi2_FSH_Write_IR_RF 0450  
             __end_of_SYS_DisableInt 0000          i2FSH_AddressToBlock@Address 0080  
    __size_of_SYS_ActivityTimerReset 0000                          _IR_SyncHigh 005E  
               ?i1_ADC_ChangeChannel 0001                          _RF_CodeSize 00C8  
        __size_of_MSC_CleanBufferInt 0030               i2_RF_CalculateCodesize 15F2  
              __end_of_SYS_EnableInt 0000                        _RF_SetSquelch 1A6E  
                        _RF_LoadCode 0244                           _RF_DataInt 198C  
               i2_MSC_CleanBufferInt 1622            __size_of_TMR_Timer0Status 0006  
          __size_of_TMR_Timer1Status 0006                           _IR_SyncLow 0060  
                  MSC_BlinkLED@blink 018B                           _RF_Disable 19C6  
                  MSC_BlinkLED@speed 018D                         _RF_ResetData 1B64  
                        _RF_Receiver 1A7E             i2TMR_ResetTimer0@TimerOn 0081  
                         _MTR_Rotate 0CE8           i2FSH_EraseBlock@WriteTries 008A  
              __end_ofi1_IR_LoadCode 3C10           ??i2_MSC_BufferCopyIntConst 008F  
             __end_of_RF_SavedTiming 2600              __size_ofi2_RF_ResetData 0008  
