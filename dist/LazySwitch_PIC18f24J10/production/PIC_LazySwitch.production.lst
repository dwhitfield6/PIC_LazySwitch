

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sat Aug 29 09:16:50 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F24J10
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	_FlashWaste_const,global,ovrld,reloc=2,class=CODE,delta=1
     9                           	psect	_IR_SavedTiming_const,global,ovrld,reloc=2,class=CODE,delta=1
    10                           	psect	_RF_SavedTiming_const,global,ovrld,reloc=2,class=CODE,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	text58,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   113                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   137                           	psect	param0,global,class=BANK0,space=1,delta=1
   138                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   139  0000                     
   140                           	psect	idataCOMRAM
   141  001A76                     __pidataCOMRAM:
   142                           	opt stack 0
   143                           
   144                           ;initializer for _ADC_CurrentSource
   145  001A76  0A                 	db	10
   146                           
   147                           	psect	idataBANK0
   148  001A5E                     __pidataBANK0:
   149                           	opt stack 0
   150                           
   151                           ;initializer for _Rail_VIN
   152  001A5E  00                 	db	0
   153  001A5F  90                 	db	144
   154  001A60  40                 	db	64
   155                           
   156                           ;initializer for _IR_Saved
   157  001A61  5B                 	db	91
   158                           
   159                           ;initializer for _RF_Saved
   160  001A62  5B                 	db	91
   161                           
   162                           ;initializer for _System_State
   163  001A63  08                 	db	8
   164                           
   165                           	psect	mediumconst
   166  002800                     __pmediumconst:
   167                           	opt stack 0
   168  002800  00                 	db	0
   169  002801                     _PCB_Version:
   170                           	opt stack 0
   171  002801  50                 	db	80
   172  002802  43                 	db	67
   173  002803  42                 	db	66
   174  002804  20                 	db	32
   175  002805  72                 	db	114
   176  002806  65                 	db	101
   177  002807  76                 	db	118
   178  002808  42                 	db	66
   179  002809  00                 	db	0
   180  00280A                     __end_of_PCB_Version:
   181                           	opt stack 0
   182  0000                     _FlashWaste_absconstaddr	set	9728
   183  0000                     _IR_SavedTiming_absconstaddr	set	9216
   184  0000                     _RF_SavedTiming_absconstaddr	set	9472
   185  00280A  00                 	db	0
   186  00280B  80                 	db	128
   187  00280C  3F                 	db	63
   188  00280D  72                 	db	114
   189  00280E  31                 	db	49
   190  00280F  3F                 	db	63
   191  002810  FE                 	db	254
   192  002811  75                 	db	117
   193  002812  3E                 	db	62
   194  002813  58                 	db	88
   195  002814  63                 	db	99
   196  002815  3D                 	db	61
   197  002816  95                 	db	149
   198  002817  1D                 	db	29
   199  002818  3C                 	db	60
   200  002819  C5                 	db	197
   201  00281A  AE                 	db	174
   202  00281B  3A                 	db	58
   203  00281C  79                 	db	121
   204  00281D  21                 	db	33
   205  00281E  39                 	db	57
   206  00281F  94                 	db	148
   207  002820  80                 	db	128
   208  002821  37                 	db	55
   209  002822  93                 	db	147
   210  002823  A7                 	db	167
   211  002824  35                 	db	53
   212  002825  56                 	db	86
   213  002826  15                 	db	21
   214  002827  34                 	db	52
   215  002828                     __end_ofexp@coeff:
   216                           	opt stack 0
   217  002828  00                 	db	0
   218  002829  00                 	db	0
   219  00282A  00                 	db	0
   220  00282B  00                 	db	0
   221  00282C  80                 	db	128
   222  00282D  3F                 	db	63
   223  00282E  F0                 	db	240
   224  00282F  FF                 	db	255
   225  002830  BE                 	db	190
   226  002831  E2                 	db	226
   227  002832  A9                 	db	169
   228  002833  3E                 	db	62
   229  002834  83                 	db	131
   230  002835  76                 	db	118
   231  002836  BE                 	db	190
   232  002837  AE                 	db	174
   233  002838  2B                 	db	43
   234  002839  3E                 	db	62
   235  00283A  3C                 	db	60
   236  00283B  C3                 	db	195
   237  00283C  BD                 	db	189
   238  00283D  D2                 	db	210
   239  00283E  13                 	db	19
   240  00283F  3D                 	db	61
   241  002840  78                 	db	120
   242  002841  D3                 	db	211
   243  002842  BB                 	db	187
   244  002843                     __end_oflog@coeff:
   245                           	opt stack 0
   246  0000                     _FlashWaste_absconstaddr	set	9728
   247  002843  00                 	db	0	; dummy byte at the end
   248  0000                     
   249                           	psect	_FlashWaste_const
   250  002600                     __p_FlashWaste_const:
   251                           	opt stack 0
   252  002600                     _FlashWaste:
   253                           	opt stack 0
   254  002600  DA                 	db	218
   255  002601  DA                 	db	218
   256  002602  DA                 	db	218
   257  002603  DA                 	db	218
   258  002604  DA                 	db	218
   259  002605  DA                 	db	218
   260  002606  DA                 	db	218
   261  002607  DA                 	db	218
   262  002608  DA                 	db	218
   263  002609  DA                 	db	218
   264  00260A  DA                 	db	218
   265  00260B  DA                 	db	218
   266  00260C  DA                 	db	218
   267  00260D  DA                 	db	218
   268  00260E  DA                 	db	218
   269  00260F  DA                 	db	218
   270  002610  DA                 	db	218
   271  002611  DA                 	db	218
   272  002612  DA                 	db	218
   273  002613  DA                 	db	218
   274  002614  DA                 	db	218
   275  002615  DA                 	db	218
   276  002616  DA                 	db	218
   277  002617  DA                 	db	218
   278  002618  DA                 	db	218
   279  002619  DA                 	db	218
   280  00261A  DA                 	db	218
   281  00261B  DA                 	db	218
   282  00261C  DA                 	db	218
   283  00261D  DA                 	db	218
   284  00261E  DA                 	db	218
   285  00261F  DA                 	db	218
   286  002620  DA                 	db	218
   287  002621  DA                 	db	218
   288  002622  DA                 	db	218
   289  002623  DA                 	db	218
   290  002624  DA                 	db	218
   291  002625  DA                 	db	218
   292  002626  DA                 	db	218
   293  002627  DA                 	db	218
   294  002628  DA                 	db	218
   295  002629  DA                 	db	218
   296  00262A  DA                 	db	218
   297  00262B  DA                 	db	218
   298  00262C  DA                 	db	218
   299  00262D  DA                 	db	218
   300  00262E  DA                 	db	218
   301  00262F  DA                 	db	218
   302  002630  DA                 	db	218
   303  002631  DA                 	db	218
   304  002632  DA                 	db	218
   305  002633  DA                 	db	218
   306  002634  DA                 	db	218
   307  002635  DA                 	db	218
   308  002636  DA                 	db	218
   309  002637  DA                 	db	218
   310  002638  DA                 	db	218
   311  002639  DA                 	db	218
   312  00263A  DA                 	db	218
   313  00263B  DA                 	db	218
   314  00263C  DA                 	db	218
   315  00263D  DA                 	db	218
   316  00263E  DA                 	db	218
   317  00263F  DA                 	db	218
   318  002640  DA                 	db	218
   319  002641  DA                 	db	218
   320  002642  DA                 	db	218
   321  002643  DA                 	db	218
   322  002644  DA                 	db	218
   323  002645  DA                 	db	218
   324  002646  DA                 	db	218
   325  002647  DA                 	db	218
   326  002648  DA                 	db	218
   327  002649  DA                 	db	218
   328  00264A  DA                 	db	218
   329  00264B  DA                 	db	218
   330  00264C  DA                 	db	218
   331  00264D  DA                 	db	218
   332  00264E  DA                 	db	218
   333  00264F  DA                 	db	218
   334  002650  DA                 	db	218
   335  002651  DA                 	db	218
   336  002652  DA                 	db	218
   337  002653  DA                 	db	218
   338  002654  DA                 	db	218
   339  002655  DA                 	db	218
   340  002656  DA                 	db	218
   341  002657  DA                 	db	218
   342  002658  DA                 	db	218
   343  002659  DA                 	db	218
   344  00265A  DA                 	db	218
   345  00265B  DA                 	db	218
   346  00265C  DA                 	db	218
   347  00265D  DA                 	db	218
   348  00265E  DA                 	db	218
   349  00265F  DA                 	db	218
   350  002660  DA                 	db	218
   351  002661  DA                 	db	218
   352  002662  DA                 	db	218
   353  002663  DA                 	db	218
   354  002664  DA                 	db	218
   355  002665  DA                 	db	218
   356  002666  DA                 	db	218
   357  002667  DA                 	db	218
   358  002668  DA                 	db	218
   359  002669  DA                 	db	218
   360  00266A  DA                 	db	218
   361  00266B  DA                 	db	218
   362  00266C  DA                 	db	218
   363  00266D  DA                 	db	218
   364  00266E  DA                 	db	218
   365  00266F  DA                 	db	218
   366  002670  DA                 	db	218
   367  002671  DA                 	db	218
   368  002672  DA                 	db	218
   369  002673  DA                 	db	218
   370  002674  DA                 	db	218
   371  002675  DA                 	db	218
   372  002676  DA                 	db	218
   373  002677  DA                 	db	218
   374  002678  DA                 	db	218
   375  002679  DA                 	db	218
   376  00267A  DA                 	db	218
   377  00267B  DA                 	db	218
   378  00267C  DA                 	db	218
   379  00267D  DA                 	db	218
   380  00267E  DA                 	db	218
   381  00267F  DA                 	db	218
   382  002680  DA                 	db	218
   383  002681  DA                 	db	218
   384  002682  DA                 	db	218
   385  002683  DA                 	db	218
   386  002684  DA                 	db	218
   387  002685  DA                 	db	218
   388  002686  DA                 	db	218
   389  002687  DA                 	db	218
   390  002688  DA                 	db	218
   391  002689  DA                 	db	218
   392  00268A  DA                 	db	218
   393  00268B  DA                 	db	218
   394  00268C  DA                 	db	218
   395  00268D  DA                 	db	218
   396  00268E  DA                 	db	218
   397  00268F  DA                 	db	218
   398  002690  DA                 	db	218
   399  002691  DA                 	db	218
   400  002692  DA                 	db	218
   401  002693  DA                 	db	218
   402  002694  DA                 	db	218
   403  002695  DA                 	db	218
   404  002696  DA                 	db	218
   405  002697  DA                 	db	218
   406  002698  DA                 	db	218
   407  002699  DA                 	db	218
   408  00269A  DA                 	db	218
   409  00269B  DA                 	db	218
   410  00269C  DA                 	db	218
   411  00269D  DA                 	db	218
   412  00269E  DA                 	db	218
   413  00269F  DA                 	db	218
   414  0026A0  DA                 	db	218
   415  0026A1  DA                 	db	218
   416  0026A2  DA                 	db	218
   417  0026A3  DA                 	db	218
   418  0026A4  DA                 	db	218
   419  0026A5  DA                 	db	218
   420  0026A6  DA                 	db	218
   421  0026A7  DA                 	db	218
   422  0026A8  DA                 	db	218
   423  0026A9  DA                 	db	218
   424  0026AA  DA                 	db	218
   425  0026AB  DA                 	db	218
   426  0026AC  DA                 	db	218
   427  0026AD  DA                 	db	218
   428  0026AE  DA                 	db	218
   429  0026AF  DA                 	db	218
   430  0026B0  DA                 	db	218
   431  0026B1  DA                 	db	218
   432  0026B2  DA                 	db	218
   433  0026B3  DA                 	db	218
   434  0026B4  DA                 	db	218
   435  0026B5  DA                 	db	218
   436  0026B6  DA                 	db	218
   437  0026B7  DA                 	db	218
   438  0026B8  DA                 	db	218
   439  0026B9  DA                 	db	218
   440  0026BA  DA                 	db	218
   441  0026BB  DA                 	db	218
   442  0026BC  DA                 	db	218
   443  0026BD  DA                 	db	218
   444  0026BE  DA                 	db	218
   445  0026BF  DA                 	db	218
   446  0026C0  DA                 	db	218
   447  0026C1  DA                 	db	218
   448  0026C2  DA                 	db	218
   449  0026C3  DA                 	db	218
   450  0026C4  DA                 	db	218
   451  0026C5  DA                 	db	218
   452  0026C6  DA                 	db	218
   453  0026C7  DA                 	db	218
   454  0026C8  DA                 	db	218
   455  0026C9  DA                 	db	218
   456  0026CA  DA                 	db	218
   457  0026CB  DA                 	db	218
   458  0026CC  DA                 	db	218
   459  0026CD  DA                 	db	218
   460  0026CE  DA                 	db	218
   461  0026CF  DA                 	db	218
   462  0026D0  DA                 	db	218
   463  0026D1  DA                 	db	218
   464  0026D2  DA                 	db	218
   465  0026D3  DA                 	db	218
   466  0026D4  DA                 	db	218
   467  0026D5  DA                 	db	218
   468  0026D6  DA                 	db	218
   469  0026D7  DA                 	db	218
   470  0026D8  DA                 	db	218
   471  0026D9  DA                 	db	218
   472  0026DA  DA                 	db	218
   473  0026DB  DA                 	db	218
   474  0026DC  DA                 	db	218
   475  0026DD  DA                 	db	218
   476  0026DE  DA                 	db	218
   477  0026DF  DA                 	db	218
   478  0026E0  DA                 	db	218
   479  0026E1  DA                 	db	218
   480  0026E2  DA                 	db	218
   481  0026E3  DA                 	db	218
   482  0026E4  DA                 	db	218
   483  0026E5  DA                 	db	218
   484  0026E6  DA                 	db	218
   485  0026E7  DA                 	db	218
   486  0026E8  DA                 	db	218
   487  0026E9  DA                 	db	218
   488  0026EA  DA                 	db	218
   489  0026EB  DA                 	db	218
   490  0026EC  DA                 	db	218
   491  0026ED  DA                 	db	218
   492  0026EE  DA                 	db	218
   493  0026EF  DA                 	db	218
   494  0026F0  DA                 	db	218
   495  0026F1  DA                 	db	218
   496  0026F2  DA                 	db	218
   497  0026F3  DA                 	db	218
   498  0026F4  DA                 	db	218
   499  0026F5  DA                 	db	218
   500  0026F6  DA                 	db	218
   501  0026F7  DA                 	db	218
   502  0026F8  DA                 	db	218
   503  0026F9  DA                 	db	218
   504  0026FA  DA                 	db	218
   505  0026FB  DA                 	db	218
   506  0026FC  DA                 	db	218
   507  0026FD  DA                 	db	218
   508  0026FE  DA                 	db	218
   509  0026FF  DA                 	db	218
   510  002700  DA                 	db	218
   511  002701  DA                 	db	218
   512  002702  DA                 	db	218
   513  002703  DA                 	db	218
   514  002704  DA                 	db	218
   515  002705  DA                 	db	218
   516  002706  DA                 	db	218
   517  002707  DA                 	db	218
   518  002708  DA                 	db	218
   519  002709  DA                 	db	218
   520  00270A  DA                 	db	218
   521  00270B  DA                 	db	218
   522  00270C  DA                 	db	218
   523  00270D  DA                 	db	218
   524  00270E  DA                 	db	218
   525  00270F  DA                 	db	218
   526  002710  DA                 	db	218
   527  002711  DA                 	db	218
   528  002712  DA                 	db	218
   529  002713  DA                 	db	218
   530  002714  DA                 	db	218
   531  002715  DA                 	db	218
   532  002716  DA                 	db	218
   533  002717  DA                 	db	218
   534  002718  DA                 	db	218
   535  002719  DA                 	db	218
   536  00271A  DA                 	db	218
   537  00271B  DA                 	db	218
   538  00271C  DA                 	db	218
   539  00271D  DA                 	db	218
   540  00271E  DA                 	db	218
   541  00271F  DA                 	db	218
   542  002720  DA                 	db	218
   543  002721  DA                 	db	218
   544  002722  DA                 	db	218
   545  002723  DA                 	db	218
   546  002724  DA                 	db	218
   547  002725  DA                 	db	218
   548  002726  DA                 	db	218
   549  002727  DA                 	db	218
   550  002728  DA                 	db	218
   551  002729  DA                 	db	218
   552  00272A  DA                 	db	218
   553  00272B  DA                 	db	218
   554  00272C  DA                 	db	218
   555  00272D  DA                 	db	218
   556  00272E  DA                 	db	218
   557  00272F  DA                 	db	218
   558  002730  DA                 	db	218
   559  002731  DA                 	db	218
   560  002732  DA                 	db	218
   561  002733  DA                 	db	218
   562  002734  DA                 	db	218
   563  002735  DA                 	db	218
   564  002736  DA                 	db	218
   565  002737  DA                 	db	218
   566  002738  DA                 	db	218
   567  002739  DA                 	db	218
   568  00273A  DA                 	db	218
   569  00273B  DA                 	db	218
   570  00273C  DA                 	db	218
   571  00273D  DA                 	db	218
   572  00273E  DA                 	db	218
   573  00273F  DA                 	db	218
   574  002740  DA                 	db	218
   575  002741  DA                 	db	218
   576  002742  DA                 	db	218
   577  002743  DA                 	db	218
   578  002744  DA                 	db	218
   579  002745  DA                 	db	218
   580  002746  DA                 	db	218
   581  002747  DA                 	db	218
   582  002748  DA                 	db	218
   583  002749  DA                 	db	218
   584  00274A  DA                 	db	218
   585  00274B  DA                 	db	218
   586  00274C  DA                 	db	218
   587  00274D  DA                 	db	218
   588  00274E  DA                 	db	218
   589  00274F  DA                 	db	218
   590  002750  DA                 	db	218
   591  002751  DA                 	db	218
   592  002752  DA                 	db	218
   593  002753  DA                 	db	218
   594  002754  DA                 	db	218
   595  002755  DA                 	db	218
   596  002756  DA                 	db	218
   597  002757  DA                 	db	218
   598  002758  DA                 	db	218
   599  002759  DA                 	db	218
   600  00275A  DA                 	db	218
   601  00275B  DA                 	db	218
   602  00275C  DA                 	db	218
   603  00275D  DA                 	db	218
   604  00275E  DA                 	db	218
   605  00275F  DA                 	db	218
   606  002760  DA                 	db	218
   607  002761  DA                 	db	218
   608  002762  DA                 	db	218
   609  002763  DA                 	db	218
   610  002764  DA                 	db	218
   611  002765  DA                 	db	218
   612  002766  DA                 	db	218
   613  002767  DA                 	db	218
   614  002768  DA                 	db	218
   615  002769  DA                 	db	218
   616  00276A  DA                 	db	218
   617  00276B  DA                 	db	218
   618  00276C  DA                 	db	218
   619  00276D  DA                 	db	218
   620  00276E  DA                 	db	218
   621  00276F  DA                 	db	218
   622  002770  DA                 	db	218
   623  002771  DA                 	db	218
   624  002772  DA                 	db	218
   625  002773  DA                 	db	218
   626  002774  DA                 	db	218
   627  002775  DA                 	db	218
   628  002776  DA                 	db	218
   629  002777  DA                 	db	218
   630  002778  DA                 	db	218
   631  002779  DA                 	db	218
   632  00277A  DA                 	db	218
   633  00277B  DA                 	db	218
   634  00277C  DA                 	db	218
   635  00277D  DA                 	db	218
   636  00277E  DA                 	db	218
   637  00277F  DA                 	db	218
   638  002780  DA                 	db	218
   639  002781  DA                 	db	218
   640  002782  DA                 	db	218
   641  002783  DA                 	db	218
   642  002784  DA                 	db	218
   643  002785  DA                 	db	218
   644  002786  DA                 	db	218
   645  002787  DA                 	db	218
   646  002788  DA                 	db	218
   647  002789  DA                 	db	218
   648  00278A  DA                 	db	218
   649  00278B  DA                 	db	218
   650  00278C  DA                 	db	218
   651  00278D  DA                 	db	218
   652  00278E  DA                 	db	218
   653  00278F  DA                 	db	218
   654  002790  DA                 	db	218
   655  002791  DA                 	db	218
   656  002792  DA                 	db	218
   657  002793  DA                 	db	218
   658  002794  DA                 	db	218
   659  002795  DA                 	db	218
   660  002796  DA                 	db	218
   661  002797  DA                 	db	218
   662  002798  DA                 	db	218
   663  002799  DA                 	db	218
   664  00279A  DA                 	db	218
   665  00279B  DA                 	db	218
   666  00279C  DA                 	db	218
   667  00279D  DA                 	db	218
   668  00279E  DA                 	db	218
   669  00279F  DA                 	db	218
   670  0027A0  DA                 	db	218
   671  0027A1  DA                 	db	218
   672  0027A2  DA                 	db	218
   673  0027A3  DA                 	db	218
   674  0027A4  DA                 	db	218
   675  0027A5  DA                 	db	218
   676  0027A6  DA                 	db	218
   677  0027A7  DA                 	db	218
   678  0027A8  DA                 	db	218
   679  0027A9  DA                 	db	218
   680  0027AA  DA                 	db	218
   681  0027AB  DA                 	db	218
   682  0027AC  DA                 	db	218
   683  0027AD  DA                 	db	218
   684  0027AE  DA                 	db	218
   685  0027AF  DA                 	db	218
   686  0027B0  DA                 	db	218
   687  0027B1  DA                 	db	218
   688  0027B2  DA                 	db	218
   689  0027B3  DA                 	db	218
   690  0027B4  DA                 	db	218
   691  0027B5  DA                 	db	218
   692  0027B6  DA                 	db	218
   693  0027B7  DA                 	db	218
   694  0027B8  DA                 	db	218
   695  0027B9  DA                 	db	218
   696  0027BA  DA                 	db	218
   697  0027BB  DA                 	db	218
   698  0027BC  DA                 	db	218
   699  0027BD  DA                 	db	218
   700  0027BE  DA                 	db	218
   701  0027BF  DA                 	db	218
   702  0027C0  DA                 	db	218
   703  0027C1  DA                 	db	218
   704  0027C2  DA                 	db	218
   705  0027C3  DA                 	db	218
   706  0027C4  DA                 	db	218
   707  0027C5  DA                 	db	218
   708  0027C6  DA                 	db	218
   709  0027C7  DA                 	db	218
   710  0027C8  DA                 	db	218
   711  0027C9  DA                 	db	218
   712  0027CA  DA                 	db	218
   713  0027CB  DA                 	db	218
   714  0027CC  DA                 	db	218
   715  0027CD  DA                 	db	218
   716  0027CE  DA                 	db	218
   717  0027CF  DA                 	db	218
   718  0027D0  DA                 	db	218
   719  0027D1  DA                 	db	218
   720  0027D2  DA                 	db	218
   721  0027D3  DA                 	db	218
   722  0027D4  DA                 	db	218
   723  0027D5  DA                 	db	218
   724  0027D6  DA                 	db	218
   725  0027D7  DA                 	db	218
   726  0027D8  DA                 	db	218
   727  0027D9  DA                 	db	218
   728  0027DA  DA                 	db	218
   729  0027DB  DA                 	db	218
   730  0027DC  DA                 	db	218
   731  0027DD  DA                 	db	218
   732  0027DE  DA                 	db	218
   733  0027DF  DA                 	db	218
   734  0027E0  DA                 	db	218
   735  0027E1  DA                 	db	218
   736  0027E2  DA                 	db	218
   737  0027E3  DA                 	db	218
   738  0027E4  DA                 	db	218
   739  0027E5  DA                 	db	218
   740  0027E6  DA                 	db	218
   741  0027E7  DA                 	db	218
   742  0027E8  DA                 	db	218
   743  0027E9  DA                 	db	218
   744  0027EA  DA                 	db	218
   745  0027EB  DA                 	db	218
   746  0027EC  DA                 	db	218
   747  0027ED  DA                 	db	218
   748  0027EE  DA                 	db	218
   749  0027EF  DA                 	db	218
   750  0027F0  DA                 	db	218
   751  0027F1  DA                 	db	218
   752  0027F2  DA                 	db	218
   753  0027F3  DA                 	db	218
   754  0027F4  DA                 	db	218
   755  0027F5  DA                 	db	218
   756  0027F6  DA                 	db	218
   757  0027F7  DA                 	db	218
   758  0027F8  DA                 	db	218
   759  0027F9  DA                 	db	218
   760  0027FA  DA                 	db	218
   761  0027FB  DA                 	db	218
   762  0027FC  DA                 	db	218
   763  0027FD  DA                 	db	218
   764  0027FE  DA                 	db	218
   765  0027FF  DA                 	db	218
   766  002800                     __end_of_FlashWaste:
   767                           	opt stack 0
   768  0000                     _IR_SavedTiming_absconstaddr	set	9216
   769                           
   770                           	psect	_IR_SavedTiming_const
   771  002400                     __p_IR_SavedTiming_const:
   772                           	opt stack 0
   773  002400                     _IR_SavedTiming:
   774                           	opt stack 0
   775  002400  2198               	dw	8600
   776  002402  1068               	dw	4200
   777  002404  01C2               	dw	450
   778  002406  04B0               	dw	1200
   779  002408  01C2               	dw	450
   780  00240A  01C2               	dw	450
   781  00240C  01C2               	dw	450
   782  00240E  04B0               	dw	1200
   783  002410  01C2               	dw	450
   784  002412  04B0               	dw	1200
   785  002414  01C2               	dw	450
   786  002416  01C2               	dw	450
   787  002418  01C2               	dw	450
   788  00241A  04B0               	dw	1200
   789  00241C  01C2               	dw	450
   790  00241E  01C2               	dw	450
   791  002420  01C2               	dw	450
   792  002422  04B0               	dw	1200
   793  002424  01C2               	dw	450
   794  002426  01C2               	dw	450
   795  002428  01C2               	dw	450
   796  00242A  04B0               	dw	1200
   797  00242C  01C2               	dw	450
   798  00242E  01C2               	dw	450
   799  002430  01C2               	dw	450
   800  002432  01C2               	dw	450
   801  002434  01C2               	dw	450
   802  002436  04B0               	dw	1200
   803  002438  01C2               	dw	450
   804  00243A  01C2               	dw	450
   805  00243C  01C2               	dw	450
   806  00243E  04B0               	dw	1200
   807  002440  01C2               	dw	450
   808  002442  01C2               	dw	450
   809  002444  01C2               	dw	450
   810  002446  01C2               	dw	450
   811  002448  01C2               	dw	450
   812  00244A  04B0               	dw	1200
   813  00244C  01C2               	dw	450
   814  00244E  01C2               	dw	450
   815  002450  01C2               	dw	450
   816  002452  04B0               	dw	1200
   817  002454  01C2               	dw	450
   818  002456  01C2               	dw	450
   819  002458  01C2               	dw	450
   820  00245A  01C2               	dw	450
   821  00245C  01C2               	dw	450
   822  00245E  01C2               	dw	450
   823  002460  01C2               	dw	450
   824  002462  01C2               	dw	450
   825  002464  01C2               	dw	450
   826  002466  04B0               	dw	1200
   827  002468  01C2               	dw	450
   828  00246A  01C2               	dw	450
   829  00246C  01C2               	dw	450
   830  00246E  04B0               	dw	1200
   831  002470  01C2               	dw	450
   832  002472  01C2               	dw	450
   833  002474  01C2               	dw	450
   834  002476  04B0               	dw	1200
   835  002478  01C2               	dw	450
   836  00247A  04B0               	dw	1200
   837  00247C  01C2               	dw	450
   838  00247E  04B0               	dw	1200
   839  002480  01C2               	dw	450
   840  002482  04B0               	dw	1200
   841  002484  01C2               	dw	450
   842  002486  00                 	db	0
   843  002487  00                 	db	0
   844  002488  00                 	db	0
   845  002489  00                 	db	0
   846  00248A  00                 	db	0
   847  00248B  00                 	db	0
   848  00248C  00                 	db	0
   849  00248D  00                 	db	0
   850  00248E  00                 	db	0
   851  00248F  00                 	db	0
   852  002490  00                 	db	0
   853  002491  00                 	db	0
   854  002492  00                 	db	0
   855  002493  00                 	db	0
   856  002494  00                 	db	0
   857  002495  00                 	db	0
   858  002496  00                 	db	0
   859  002497  00                 	db	0
   860  002498  00                 	db	0
   861  002499  00                 	db	0
   862  00249A  00                 	db	0
   863  00249B  00                 	db	0
   864  00249C  00                 	db	0
   865  00249D  00                 	db	0
   866  00249E  00                 	db	0
   867  00249F  00                 	db	0
   868  0024A0  00                 	db	0
   869  0024A1  00                 	db	0
   870  0024A2  00                 	db	0
   871  0024A3  00                 	db	0
   872  0024A4  00                 	db	0
   873  0024A5  00                 	db	0
   874  0024A6  00                 	db	0
   875  0024A7  00                 	db	0
   876  0024A8  00                 	db	0
   877  0024A9  00                 	db	0
   878  0024AA  00                 	db	0
   879  0024AB  00                 	db	0
   880  0024AC  00                 	db	0
   881  0024AD  00                 	db	0
   882  0024AE  00                 	db	0
   883  0024AF  00                 	db	0
   884  0024B0  00                 	db	0
   885  0024B1  00                 	db	0
   886  0024B2  00                 	db	0
   887  0024B3  00                 	db	0
   888  0024B4  00                 	db	0
   889  0024B5  00                 	db	0
   890  0024B6  00                 	db	0
   891  0024B7  00                 	db	0
   892  0024B8  00                 	db	0
   893  0024B9  00                 	db	0
   894  0024BA  00                 	db	0
   895  0024BB  00                 	db	0
   896  0024BC  00                 	db	0
   897  0024BD  00                 	db	0
   898  0024BE  00                 	db	0
   899  0024BF  00                 	db	0
   900  0024C0  00                 	db	0
   901  0024C1  00                 	db	0
   902  0024C2  00                 	db	0
   903  0024C3  00                 	db	0
   904  0024C4  00                 	db	0
   905  0024C5  00                 	db	0
   906  0024C6  00                 	db	0
   907  0024C7  00                 	db	0
   908  0024C8  00                 	db	0
   909  0024C9  00                 	db	0
   910  0024CA  00                 	db	0
   911  0024CB  00                 	db	0
   912  0024CC  00                 	db	0
   913  0024CD  00                 	db	0
   914  0024CE  00                 	db	0
   915  0024CF  00                 	db	0
   916  0024D0  00                 	db	0
   917  0024D1  00                 	db	0
   918  0024D2  00                 	db	0
   919  0024D3  00                 	db	0
   920  0024D4  00                 	db	0
   921  0024D5  00                 	db	0
   922  0024D6  00                 	db	0
   923  0024D7  00                 	db	0
   924  0024D8  00                 	db	0
   925  0024D9  00                 	db	0
   926  0024DA  00                 	db	0
   927  0024DB  00                 	db	0
   928  0024DC  00                 	db	0
   929  0024DD  00                 	db	0
   930  0024DE  00                 	db	0
   931  0024DF  00                 	db	0
   932  0024E0  00                 	db	0
   933  0024E1  00                 	db	0
   934  0024E2  00                 	db	0
   935  0024E3  00                 	db	0
   936  0024E4  00                 	db	0
   937  0024E5  00                 	db	0
   938  0024E6  00                 	db	0
   939  0024E7  00                 	db	0
   940  0024E8  00                 	db	0
   941  0024E9  00                 	db	0
   942  0024EA  00                 	db	0
   943  0024EB  00                 	db	0
   944  0024EC  00                 	db	0
   945  0024ED  00                 	db	0
   946  0024EE  00                 	db	0
   947  0024EF  00                 	db	0
   948  0024F0  00                 	db	0
   949  0024F1  00                 	db	0
   950  0024F2  00                 	db	0
   951  0024F3  00                 	db	0
   952  0024F4  00                 	db	0
   953  0024F5  00                 	db	0
   954  0024F6  00                 	db	0
   955  0024F7  00                 	db	0
   956  0024F8  00                 	db	0
   957  0024F9  00                 	db	0
   958  0024FA  00                 	db	0
   959  0024FB  00                 	db	0
   960  0024FC  00                 	db	0
   961  0024FD  00                 	db	0
   962  0024FE  00                 	db	0
   963  0024FF  00                 	db	0
   964  002500                     __end_of_IR_SavedTiming:
   965                           	opt stack 0
   966  0000                     _RF_SavedTiming_absconstaddr	set	9472
   967                           
   968                           	psect	_RF_SavedTiming_const
   969  002500                     __p_RF_SavedTiming_const:
   970                           	opt stack 0
   971  002500                     _RF_SavedTiming:
   972                           	opt stack 0
   973  002500  0342               	dw	834
   974  002502  0015               	dw	21
   975  002504  0050               	dw	80
   976  002506  0016               	dw	22
   977  002508  0050               	dw	80
   978  00250A  0015               	dw	21
   979  00250C  004E               	dw	78
   980  00250E  004F               	dw	79
   981  002510  001A               	dw	26
   982  002512  0016               	dw	22
   983  002514  004E               	dw	78
   984  002516  004E               	dw	78
   985  002518  001B               	dw	27
   986  00251A  0015               	dw	21
   987  00251C  004F               	dw	79
   988  00251E  004C               	dw	76
   989  002520  0019               	dw	25
   990  002522  0017               	dw	23
   991  002524  004F               	dw	79
   992  002526  004B               	dw	75
   993  002528  001B               	dw	27
   994  00252A  0015               	dw	21
   995  00252C  0051               	dw	81
   996  00252E  004B               	dw	75
   997  002530  0019               	dw	25
   998  002532  0016               	dw	22
   999  002534  0051               	dw	81
  1000  002536  0016               	dw	22
  1001  002538  004F               	dw	79
  1002  00253A  0016               	dw	22
  1003  00253C  0050               	dw	80
  1004  00253E  0018               	dw	24
  1005  002540  004F               	dw	79
  1006  002542  004D               	dw	77
  1007  002544  0019               	dw	25
  1008  002546  004C               	dw	76
  1009  002548  001B               	dw	27
  1010  00254A  0015               	dw	21
  1011  00254C  0050               	dw	80
  1012  00254E  0015               	dw	21
  1013  002550  0051               	dw	81
  1014  002552  0015               	dw	21
  1015  002554  0050               	dw	80
  1016  002556  0016               	dw	22
  1017  002558  0050               	dw	80
  1018  00255A  0016               	dw	22
  1019  00255C  0051               	dw	81
  1020  00255E  0016               	dw	22
  1021  002560  004F               	dw	79
  1022  002562  0016               	dw	22
  1023  002564  00                 	db	0
  1024  002565  00                 	db	0
  1025  002566  00                 	db	0
  1026  002567  00                 	db	0
  1027  002568  00                 	db	0
  1028  002569  00                 	db	0
  1029  00256A  00                 	db	0
  1030  00256B  00                 	db	0
  1031  00256C  00                 	db	0
  1032  00256D  00                 	db	0
  1033  00256E  00                 	db	0
  1034  00256F  00                 	db	0
  1035  002570  00                 	db	0
  1036  002571  00                 	db	0
  1037  002572  00                 	db	0
  1038  002573  00                 	db	0
  1039  002574  00                 	db	0
  1040  002575  00                 	db	0
  1041  002576  00                 	db	0
  1042  002577  00                 	db	0
  1043  002578  00                 	db	0
  1044  002579  00                 	db	0
  1045  00257A  00                 	db	0
  1046  00257B  00                 	db	0
  1047  00257C  00                 	db	0
  1048  00257D  00                 	db	0
  1049  00257E  00                 	db	0
  1050  00257F  00                 	db	0
  1051  002580  00                 	db	0
  1052  002581  00                 	db	0
  1053  002582  00                 	db	0
  1054  002583  00                 	db	0
  1055  002584  00                 	db	0
  1056  002585  00                 	db	0
  1057  002586  00                 	db	0
  1058  002587  00                 	db	0
  1059  002588  00                 	db	0
  1060  002589  00                 	db	0
  1061  00258A  00                 	db	0
  1062  00258B  00                 	db	0
  1063  00258C  00                 	db	0
  1064  00258D  00                 	db	0
  1065  00258E  00                 	db	0
  1066  00258F  00                 	db	0
  1067  002590  00                 	db	0
  1068  002591  00                 	db	0
  1069  002592  00                 	db	0
  1070  002593  00                 	db	0
  1071  002594  00                 	db	0
  1072  002595  00                 	db	0
  1073  002596  00                 	db	0
  1074  002597  00                 	db	0
  1075  002598  00                 	db	0
  1076  002599  00                 	db	0
  1077  00259A  00                 	db	0
  1078  00259B  00                 	db	0
  1079  00259C  00                 	db	0
  1080  00259D  00                 	db	0
  1081  00259E  00                 	db	0
  1082  00259F  00                 	db	0
  1083  0025A0  00                 	db	0
  1084  0025A1  00                 	db	0
  1085  0025A2  00                 	db	0
  1086  0025A3  00                 	db	0
  1087  0025A4  00                 	db	0
  1088  0025A5  00                 	db	0
  1089  0025A6  00                 	db	0
  1090  0025A7  00                 	db	0
  1091  0025A8  00                 	db	0
  1092  0025A9  00                 	db	0
  1093  0025AA  00                 	db	0
  1094  0025AB  00                 	db	0
  1095  0025AC  00                 	db	0
  1096  0025AD  00                 	db	0
  1097  0025AE  00                 	db	0
  1098  0025AF  00                 	db	0
  1099  0025B0  00                 	db	0
  1100  0025B1  00                 	db	0
  1101  0025B2  00                 	db	0
  1102  0025B3  00                 	db	0
  1103  0025B4  00                 	db	0
  1104  0025B5  00                 	db	0
  1105  0025B6  00                 	db	0
  1106  0025B7  00                 	db	0
  1107  0025B8  00                 	db	0
  1108  0025B9  00                 	db	0
  1109  0025BA  00                 	db	0
  1110  0025BB  00                 	db	0
  1111  0025BC  00                 	db	0
  1112  0025BD  00                 	db	0
  1113  0025BE  00                 	db	0
  1114  0025BF  00                 	db	0
  1115  0025C0  00                 	db	0
  1116  0025C1  00                 	db	0
  1117  0025C2  00                 	db	0
  1118  0025C3  00                 	db	0
  1119  0025C4  00                 	db	0
  1120  0025C5  00                 	db	0
  1121  0025C6  00                 	db	0
  1122  0025C7  00                 	db	0
  1123  0025C8  00                 	db	0
  1124  0025C9  00                 	db	0
  1125  0025CA  00                 	db	0
  1126  0025CB  00                 	db	0
  1127  0025CC  00                 	db	0
  1128  0025CD  00                 	db	0
  1129  0025CE  00                 	db	0
  1130  0025CF  00                 	db	0
  1131  0025D0  00                 	db	0
  1132  0025D1  00                 	db	0
  1133  0025D2  00                 	db	0
  1134  0025D3  00                 	db	0
  1135  0025D4  00                 	db	0
  1136  0025D5  00                 	db	0
  1137  0025D6  00                 	db	0
  1138  0025D7  00                 	db	0
  1139  0025D8  00                 	db	0
  1140  0025D9  00                 	db	0
  1141  0025DA  00                 	db	0
  1142  0025DB  00                 	db	0
  1143  0025DC  00                 	db	0
  1144  0025DD  00                 	db	0
  1145  0025DE  00                 	db	0
  1146  0025DF  00                 	db	0
  1147  0025E0  00                 	db	0
  1148  0025E1  00                 	db	0
  1149  0025E2  00                 	db	0
  1150  0025E3  00                 	db	0
  1151  0025E4  00                 	db	0
  1152  0025E5  00                 	db	0
  1153  0025E6  00                 	db	0
  1154  0025E7  00                 	db	0
  1155  0025E8  00                 	db	0
  1156  0025E9  00                 	db	0
  1157  0025EA  00                 	db	0
  1158  0025EB  00                 	db	0
  1159  0025EC  00                 	db	0
  1160  0025ED  00                 	db	0
  1161  0025EE  00                 	db	0
  1162  0025EF  00                 	db	0
  1163  0025F0  00                 	db	0
  1164  0025F1  00                 	db	0
  1165  0025F2  00                 	db	0
  1166  0025F3  00                 	db	0
  1167  0025F4  00                 	db	0
  1168  0025F5  00                 	db	0
  1169  0025F6  00                 	db	0
  1170  0025F7  00                 	db	0
  1171  0025F8  00                 	db	0
  1172  0025F9  00                 	db	0
  1173  0025FA  00                 	db	0
  1174  0025FB  00                 	db	0
  1175  0025FC  00                 	db	0
  1176  0025FD  00                 	db	0
  1177  0025FE  00                 	db	0
  1178  0025FF  00                 	db	0
  1179  002600                     __end_of_RF_SavedTiming:
  1180                           	opt stack 0
  1181  0000                     _ADCON0bits	set	4034
  1182  0000                     _ADCON1bits	set	4033
  1183  0000                     _ADCON2bits	set	4032
  1184  0000                     _ADRESH	set	4036
  1185  0000                     _ADRESL	set	4035
  1186  0000                     _EECON1bits	set	4006
  1187  0000                     _INTCON2bits	set	4081
  1188  0000                     _INTCON3bits	set	4080
  1189  0000                     _INTCONbits	set	4082
  1190  0000                     _IPR1bits	set	3999
  1191  0000                     _LATA	set	3977
  1192  0000                     _LATB	set	3978
  1193  0000                     _LATC	set	3979
  1194  0000                     _OSCCON	set	4051
  1195  0000                     _OSCCONbits	set	4051
  1196  0000                     _OSCTUNEbits	set	3995
  1197  0000                     _PIE1bits	set	3997
  1198  0000                     _PIR1bits	set	3998
  1199  0000                     _PORTB	set	3969
  1200  0000                     _PR2	set	4043
  1201  0000                     _RCONbits	set	4048
  1202  0000                     _T0CONbits	set	4053
  1203  0000                     _T1CONbits	set	4045
  1204  0000                     _T2CONbits	set	4042
  1205  0000                     _TABLAT	set	4085
  1206  0000                     _TBLPTRH	set	4087
  1207  0000                     _TBLPTRL	set	4086
  1208  0000                     _TBLPTRU	set	4088
  1209  0000                     _TMR0H	set	4055
  1210  0000                     _TMR0L	set	4054
  1211  0000                     _TMR1H	set	4047
  1212  0000                     _TMR1L	set	4046
  1213  0000                     _TMR2	set	4044
  1214  0000                     _TRISAbits	set	3986
  1215  0000                     _TRISBbits	set	3987
  1216  0000                     _TRISCbits	set	3988
  1217                           
  1218                           ; #config settings
  1219  0000                     
  1220                           	psect	cinit
  1221  000DA4                     __pcinit:
  1222                           	opt stack 0
  1223  000DA4                     start_initialization:
  1224                           	opt stack 0
  1225  000DA4                     __initialization:
  1226                           	opt stack 0
  1227                           
  1228                           ; Clear objects allocated to BANK3 (256 bytes)
  1229  000DA4  EE03  F000         	lfsr	0,__pbssBANK3
  1230  000DA8  EE11 F000          	lfsr	1,256
  1231  000DAC                     clear_0:
  1232  000DAC  6AEE               	clrf	postinc0,c
  1233  000DAE  50E5               	movf	postdec1,w,c
  1234  000DB0  50E1               	movf	fsr1l,w,c
  1235  000DB2  E1FC               	bnz	clear_0
  1236  000DB4  50E2               	movf	fsr1h,w,c
  1237  000DB6  E1FA               	bnz	clear_0
  1238                           
  1239                           ; Clear objects allocated to BANK2 (256 bytes)
  1240  000DB8  EE02  F000         	lfsr	0,__pbssBANK2
  1241  000DBC  EE11 F000          	lfsr	1,256
  1242  000DC0                     clear_1:
  1243  000DC0  6AEE               	clrf	postinc0,c
  1244  000DC2  50E5               	movf	postdec1,w,c
  1245  000DC4  50E1               	movf	fsr1l,w,c
  1246  000DC6  E1FC               	bnz	clear_1
  1247  000DC8  50E2               	movf	fsr1h,w,c
  1248  000DCA  E1FA               	bnz	clear_1
  1249                           
  1250                           ; Clear objects allocated to BANK1 (128 bytes)
  1251  000DCC  EE01  F000         	lfsr	0,__pbssBANK1
  1252  000DD0  0E80               	movlw	128
  1253  000DD2                     clear_2:
  1254  000DD2  6AEE               	clrf	postinc0,c
  1255  000DD4  06E8               	decf	wreg,f,c
  1256  000DD6  E1FD               	bnz	clear_2
  1257                           
  1258                           ; Clear objects allocated to BANK0 (17 bytes)
  1259  000DD8  EE00  F0B9         	lfsr	0,__pbssBANK0
  1260  000DDC  0E11               	movlw	17
  1261  000DDE                     clear_3:
  1262  000DDE  6AEE               	clrf	postinc0,c
  1263  000DE0  06E8               	decf	wreg,f,c
  1264  000DE2  E1FD               	bnz	clear_3
  1265                           
  1266                           ; Clear objects allocated to COMRAM (23 bytes)
  1267  000DE4  EE00  F048         	lfsr	0,__pbssCOMRAM
  1268  000DE8  0E17               	movlw	23
  1269  000DEA                     clear_4:
  1270  000DEA  6AEE               	clrf	postinc0,c
  1271  000DEC  06E8               	decf	wreg,f,c
  1272  000DEE  E1FD               	bnz	clear_4
  1273                           
  1274                           ; Initialize objects allocated to BANK0 (6 bytes)
  1275                           ; load TBLPTR registers with __pidataBANK0
  1276  000DF0  0E5E               	movlw	low __pidataBANK0
  1277  000DF2  6EF6               	movwf	tblptrl,c
  1278  000DF4  0E1A               	movlw	high __pidataBANK0
  1279  000DF6  6EF7               	movwf	tblptrh,c
  1280  000DF8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1281  000DFA  6EF8               	movwf	tblptru,c
  1282  000DFC  EE00  F0CA         	lfsr	0,__pdataBANK0
  1283  000E00  EE10 F006          	lfsr	1,6
  1284  000E04                     copy_data0:
  1285  000E04  0009               	tblrd		*+
  1286  000E06  CFF5 FFEE          	movff	tablat,postinc0
  1287  000E0A  50E5               	movf	postdec1,w,c
  1288  000E0C  50E1               	movf	fsr1l,w,c
  1289  000E0E  E1FA               	bnz	copy_data0
  1290                           
  1291                           ; Initialize objects allocated to COMRAM (1 bytes)
  1292                           ; load TBLPTR registers with __pidataCOMRAM
  1293  000E10  0E76               	movlw	low __pidataCOMRAM
  1294  000E12  6EF6               	movwf	tblptrl,c
  1295  000E14  0E1A               	movlw	high __pidataCOMRAM
  1296  000E16  6EF7               	movwf	tblptrh,c
  1297  000E18  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1298  000E1A  6EF8               	movwf	tblptru,c
  1299  000E1C  0009               	tblrd		*+	;fetch initializer
  1300  000E1E  CFF5 F05F          	movff	tablat,__pdataCOMRAM
  1301  000E22                     end_of_initialization:
  1302                           	opt stack 0
  1303  000E22                     __end_of__initialization:
  1304                           	opt stack 0
  1305  000E22  9060               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1306  000E24  9260               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1307  000E26  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1308  000E28  6EF8               	movwf	tblptru,c
  1309  000E2A  0100               	movlb	0
  1310  000E2C  EFB5  F01B         	goto	_main	;jump to C main() function
  1311                           tblptru	equ	0xFF8
  1312                           tblptrh	equ	0xFF7
  1313                           tblptrl	equ	0xFF6
  1314                           tablat	equ	0xFF5
  1315                           postinc0	equ	0xFEE
  1316                           wreg	equ	0xFE8
  1317                           postdec1	equ	0xFE5
  1318                           fsr1h	equ	0xFE2
  1319                           fsr1l	equ	0xFE1
  1320                           
  1321                           	psect	bssCOMRAM
  1322  000048                     __pbssCOMRAM:
  1323                           	opt stack 0
  1324  000048                     _Activity_Timer:
  1325                           	opt stack 0
  1326  000048                     	ds	4
  1327  00004C                     _Rail_RSSI:
  1328                           	opt stack 0
  1329  00004C                     	ds	3
  1330  00004F                     _IR_SyncHigh:
  1331                           	opt stack 0
  1332  00004F                     	ds	2
  1333  000051                     _IR_SyncLow:
  1334                           	opt stack 0
  1335  000051                     	ds	2
  1336  000053                     _Timer2Post:
  1337                           	opt stack 0
  1338  000053                     	ds	2
  1339  000055                     _Timer2PostCount:
  1340                           	opt stack 0
  1341  000055                     	ds	2
  1342  000057                     _errno:
  1343                           	opt stack 0
  1344  000057                     	ds	2
  1345  000059                     _ButtonChange:
  1346                           	opt stack 0
  1347  000059                     	ds	1
  1348  00005A                     _IRChange:
  1349                           	opt stack 0
  1350  00005A                     	ds	1
  1351  00005B                     _IRStarted:
  1352                           	opt stack 0
  1353  00005B                     	ds	1
  1354  00005C                     _IR_CodeSize:
  1355                           	opt stack 0
  1356  00005C                     	ds	1
  1357  00005D                     _IR_DataPlace:
  1358                           	opt stack 0
  1359  00005D                     	ds	1
  1360  00005E                     _Timer2Use:
  1361                           	opt stack 0
  1362  00005E                     	ds	1
  1363                           tblptru	equ	0xFF8
  1364                           tblptrh	equ	0xFF7
  1365                           tblptrl	equ	0xFF6
  1366                           tablat	equ	0xFF5
  1367                           postinc0	equ	0xFEE
  1368                           wreg	equ	0xFE8
  1369                           postdec1	equ	0xFE5
  1370                           fsr1h	equ	0xFE2
  1371                           fsr1l	equ	0xFE1
  1372                           
  1373                           	psect	dataCOMRAM
  1374  00005F                     __pdataCOMRAM:
  1375                           	opt stack 0
  1376  00005F                     _ADC_CurrentSource:
  1377                           	opt stack 0
  1378  00005F                     	ds	1
  1379                           tblptru	equ	0xFF8
  1380                           tblptrh	equ	0xFF7
  1381                           tblptrl	equ	0xFF6
  1382                           tablat	equ	0xFF5
  1383                           postinc0	equ	0xFEE
  1384                           wreg	equ	0xFE8
  1385                           postdec1	equ	0xFE5
  1386                           fsr1h	equ	0xFE2
  1387                           fsr1l	equ	0xFE1
  1388                           
  1389                           	psect	bssBANK0
  1390  0000B9                     __pbssBANK0:
  1391                           	opt stack 0
  1392  0000B9                     _ADC_SampleCount:
  1393                           	opt stack 0
  1394  0000B9                     	ds	2
  1395  0000BB                     _RF_SyncHigh:
  1396                           	opt stack 0
  1397  0000BB                     	ds	2
  1398  0000BD                     _RF_SyncLow:
  1399                           	opt stack 0
  1400  0000BD                     	ds	2
  1401  0000BF                     _ButtonValue_prev:
  1402                           	opt stack 0
  1403  0000BF                     	ds	1
  1404  0000C0                     _Button_Data:
  1405                           	opt stack 0
  1406  0000C0                     	ds	1
  1407  0000C1                     _DC_Motor:
  1408                           	opt stack 0
  1409  0000C1                     	ds	1
  1410  0000C2                     _Flash_Status:
  1411                           	opt stack 0
  1412  0000C2                     	ds	1
  1413  0000C3                     _IRValue_prev:
  1414                           	opt stack 0
  1415  0000C3                     	ds	1
  1416  0000C4                     _IR_Data:
  1417                           	opt stack 0
  1418  0000C4                     	ds	1
  1419  0000C5                     _RFStarted:
  1420                           	opt stack 0
  1421  0000C5                     	ds	1
  1422  0000C6                     _RF_CodeSize:
  1423                           	opt stack 0
  1424  0000C6                     	ds	1
  1425  0000C7                     _RF_Data:
  1426                           	opt stack 0
  1427  0000C7                     	ds	1
  1428  0000C8                     _RF_DataPlace:
  1429                           	opt stack 0
  1430  0000C8                     	ds	1
  1431  0000C9                     _System_State_Change:
  1432                           	opt stack 0
  1433  0000C9                     	ds	1
  1434                           tblptru	equ	0xFF8
  1435                           tblptrh	equ	0xFF7
  1436                           tblptrl	equ	0xFF6
  1437                           tablat	equ	0xFF5
  1438                           postinc0	equ	0xFEE
  1439                           wreg	equ	0xFE8
  1440                           postdec1	equ	0xFE5
  1441                           fsr1h	equ	0xFE2
  1442                           fsr1l	equ	0xFE1
  1443                           
  1444                           	psect	dataBANK0
  1445  0000CA                     __pdataBANK0:
  1446                           	opt stack 0
  1447  0000CA                     _Rail_VIN:
  1448                           	opt stack 0
  1449  0000CA                     	ds	3
  1450  0000CD                     _IR_Saved:
  1451                           	opt stack 0
  1452  0000CD                     	ds	1
  1453  0000CE                     _RF_Saved:
  1454                           	opt stack 0
  1455  0000CE                     	ds	1
  1456  0000CF                     _System_State:
  1457                           	opt stack 0
  1458  0000CF                     	ds	1
  1459                           tblptru	equ	0xFF8
  1460                           tblptrh	equ	0xFF7
  1461                           tblptrl	equ	0xFF6
  1462                           tablat	equ	0xFF5
  1463                           postinc0	equ	0xFEE
  1464                           wreg	equ	0xFE8
  1465                           postdec1	equ	0xFE5
  1466                           fsr1h	equ	0xFE2
  1467                           fsr1l	equ	0xFE1
  1468                           
  1469                           	psect	bssBANK1
  1470  000100                     __pbssBANK1:
  1471                           	opt stack 0
  1472  000100                     _FlashBuffer:
  1473                           	opt stack 0
  1474  000100                     	ds	128
  1475                           tblptru	equ	0xFF8
  1476                           tblptrh	equ	0xFF7
  1477                           tblptrl	equ	0xFF6
  1478                           tablat	equ	0xFF5
  1479                           postinc0	equ	0xFEE
  1480                           wreg	equ	0xFE8
  1481                           postdec1	equ	0xFE5
  1482                           fsr1h	equ	0xFE2
  1483                           fsr1l	equ	0xFE1
  1484                           
  1485                           	psect	bssBANK2
  1486  000200                     __pbssBANK2:
  1487                           	opt stack 0
  1488  000200                     _IR_DataTiming:
  1489                           	opt stack 0
  1490  000200                     	ds	256
  1491                           tblptru	equ	0xFF8
  1492                           tblptrh	equ	0xFF7
  1493                           tblptrl	equ	0xFF6
  1494                           tablat	equ	0xFF5
  1495                           postinc0	equ	0xFEE
  1496                           wreg	equ	0xFE8
  1497                           postdec1	equ	0xFE5
  1498                           fsr1h	equ	0xFE2
  1499                           fsr1l	equ	0xFE1
  1500                           
  1501                           	psect	bssBANK3
  1502  000300                     __pbssBANK3:
  1503                           	opt stack 0
  1504  000300                     _RF_DataTiming:
  1505                           	opt stack 0
  1506  000300                     	ds	256
  1507                           tblptru	equ	0xFF8
  1508                           tblptrh	equ	0xFF7
  1509                           tblptrl	equ	0xFF6
  1510                           tablat	equ	0xFF5
  1511                           postinc0	equ	0xFEE
  1512                           wreg	equ	0xFE8
  1513                           postdec1	equ	0xFE5
  1514                           fsr1h	equ	0xFE2
  1515                           fsr1l	equ	0xFE1
  1516                           
  1517                           	psect	cstackBANK1
  1518  000180                     __pcstackBANK1:
  1519                           	opt stack 0
  1520  000180                     ?___ftpack:
  1521                           	opt stack 0
  1522  000180                     ?___fttol:
  1523                           	opt stack 0
  1524  000180                     RF_DataInt@state:
  1525                           	opt stack 0
  1526  000180                     RF_Receiver@state:
  1527                           	opt stack 0
  1528  000180                     RF_SetBandwidth@band:
  1529                           	opt stack 0
  1530  000180                     RF_SetSquelch@state:
  1531                           	opt stack 0
  1532  000180                     RF_CalculateCodesize@i:
  1533                           	opt stack 0
  1534  000180                     MTR_IN1@state:
  1535                           	opt stack 0
  1536  000180                     MTR_IN2@state:
  1537                           	opt stack 0
  1538  000180                     IR_ReadReceiver@value:
  1539                           	opt stack 0
  1540  000180                     IR_CalculateCodesize@i:
  1541                           	opt stack 0
  1542  000180                     LDO_Pass@state:
  1543                           	opt stack 0
  1544  000180                     BUT_IR_PinChangeInt@state:
  1545                           	opt stack 0
  1546  000180                     BUT_ReadButton@value:
  1547                           	opt stack 0
  1548  000180                     TMR_Timer0@state:
  1549                           	opt stack 0
  1550  000180                     TMR_Timer1@state:
  1551                           	opt stack 0
  1552  000180                     TMR_Timer2@state:
  1553                           	opt stack 0
  1554  000180                     TMR_Timer0Int@state:
  1555                           	opt stack 0
  1556  000180                     TMR_Timer1Int@state:
  1557                           	opt stack 0
  1558  000180                     TMR_Timer2Int@state:
  1559                           	opt stack 0
  1560  000180                     TMR_Timer1Osc@state:
  1561                           	opt stack 0
  1562  000180                     ADC_Module@state:
  1563                           	opt stack 0
  1564  000180                     ADC_ConversionInt@state:
  1565                           	opt stack 0
  1566  000180                     MSC_DelayNOP@NOPs:
  1567                           	opt stack 0
  1568  000180                     MSC_CleanBufferInt@data:
  1569                           	opt stack 0
  1570  000180                     ___ftpack@arg:
  1571                           	opt stack 0
  1572  000180                     ___ftge@ff1:
  1573                           	opt stack 0
  1574  000180                     ___fttol@f1:
  1575                           	opt stack 0
  1576                           
  1577                           ; 3 bytes @ 0x0
  1578  000180                     	ds	1
  1579  000181                     TMR_ResetTimer0@TimerOn:
  1580                           	opt stack 0
  1581  000181                     TMR_ResetTimer1@TimerOn:
  1582                           	opt stack 0
  1583                           
  1584                           ; 1 bytes @ 0x1
  1585  000181                     	ds	1
  1586  000182                     TMR_Timer1Function@mode:
  1587                           	opt stack 0
  1588  000182                     MSC_DelayNOP@i:
  1589                           	opt stack 0
  1590  000182                     MSC_CleanBufferInt@count:
  1591                           	opt stack 0
  1592                           
  1593                           ; 2 bytes @ 0x2
  1594  000182                     	ds	1
  1595  000183                     ___ftpack@exp:
  1596                           	opt stack 0
  1597  000183                     ___ftge@ff2:
  1598                           	opt stack 0
  1599                           
  1600                           ; 3 bytes @ 0x3
  1601  000183                     	ds	1
  1602  000184                     ??___fttol:
  1603  000184                     ___ftpack@sign:
  1604                           	opt stack 0
  1605  000184                     MSC_CleanBufferInt@i:
  1606                           	opt stack 0
  1607  000184                     MSC_DelayMS@US:
  1608                           	opt stack 0
  1609                           
  1610                           ; 4 bytes @ 0x4
  1611  000184                     	ds	1
  1612  000185                     ??___ftpack:
  1613                           
  1614                           ; 0 bytes @ 0x5
  1615  000185                     	ds	1
  1616  000186                     ??___ftge:
  1617                           
  1618                           ; 0 bytes @ 0x6
  1619  000186                     	ds	2
  1620  000188                     ??_MSC_DelayMS:
  1621  000188                     ?___lwtoft:
  1622                           	opt stack 0
  1623  000188                     ___lwtoft@c:
  1624                           	opt stack 0
  1625                           
  1626                           ; 2 bytes @ 0x8
  1627  000188                     	ds	1
  1628  000189                     ___fttol@sign1:
  1629                           	opt stack 0
  1630  000189                     MSC_DelayMS@i:
  1631                           	opt stack 0
  1632                           
  1633                           ; 4 bytes @ 0x9
  1634  000189                     	ds	1
  1635  00018A                     ___fttol@lval:
  1636                           	opt stack 0
  1637                           
  1638                           ; 4 bytes @ 0xA
  1639  00018A                     	ds	1
  1640  00018B                     ?___ftmul:
  1641                           	opt stack 0
  1642  00018B                     ___ftmul@f1:
  1643                           	opt stack 0
  1644                           
  1645                           ; 3 bytes @ 0xB
  1646  00018B                     	ds	2
  1647  00018D                     MSC_BlinkLED@blink:
  1648                           	opt stack 0
  1649                           
  1650                           ; 2 bytes @ 0xD
  1651  00018D                     	ds	1
  1652  00018E                     ___fttol@exp1:
  1653                           	opt stack 0
  1654  00018E                     ___ftmul@f2:
  1655                           	opt stack 0
  1656                           
  1657                           ; 3 bytes @ 0xE
  1658  00018E                     	ds	1
  1659  00018F                     MSC_BlinkLED@speed:
  1660                           	opt stack 0
  1661                           
  1662                           ; 2 bytes @ 0xF
  1663  00018F                     	ds	2
  1664  000191                     ??_MSC_BlinkLED:
  1665  000191                     ??___ftmul:
  1666                           
  1667                           ; 0 bytes @ 0x11
  1668  000191                     	ds	2
  1669  000193                     MSC_BlinkLED@i:
  1670                           	opt stack 0
  1671                           
  1672                           ; 2 bytes @ 0x13
  1673  000193                     	ds	1
  1674  000194                     ___ftmul@exp:
  1675                           	opt stack 0
  1676                           
  1677                           ; 1 bytes @ 0x14
  1678  000194                     	ds	1
  1679  000195                     ___ftmul@f3_as_product:
  1680                           	opt stack 0
  1681                           
  1682                           ; 3 bytes @ 0x15
  1683  000195                     	ds	3
  1684  000198                     ___ftmul@cntr:
  1685                           	opt stack 0
  1686                           
  1687                           ; 1 bytes @ 0x18
  1688  000198                     	ds	1
  1689  000199                     ___ftmul@sign:
  1690                           	opt stack 0
  1691                           
  1692                           ; 1 bytes @ 0x19
  1693  000199                     	ds	1
  1694  00019A                     RF_LoadCode@Low:
  1695                           	opt stack 0
  1696  00019A                     IR_LoadCode@Low:
  1697                           	opt stack 0
  1698                           
  1699                           ; 3 bytes @ 0x1A
  1700  00019A                     	ds	3
  1701  00019D                     RF_LoadCode@High:
  1702                           	opt stack 0
  1703  00019D                     IR_LoadCode@High:
  1704                           	opt stack 0
  1705                           
  1706                           ; 3 bytes @ 0x1D
  1707  00019D                     	ds	3
  1708  0001A0                     tblptru	equ	0xFF8
  1709                           tblptrh	equ	0xFF7
  1710                           tblptrl	equ	0xFF6
  1711                           tablat	equ	0xFF5
  1712                           postinc0	equ	0xFEE
  1713                           wreg	equ	0xFE8
  1714                           postdec1	equ	0xFE5
  1715                           fsr1h	equ	0xFE2
  1716                           fsr1l	equ	0xFE1
  1717                           
  1718                           ; 0 bytes @ 0x20
  1719                           
  1720                           	psect	cstackBANK0
  1721  000080                     __pcstackBANK0:
  1722                           	opt stack 0
  1723  000080                     ?i2___ftpack:
  1724                           	opt stack 0
  1725  000080                     i2RF_DataInt@state:
  1726                           	opt stack 0
  1727  000080                     i2TMR_Timer0@state:
  1728                           	opt stack 0
  1729  000080                     i2TMR_Timer0Int@state:
  1730                           	opt stack 0
  1731  000080                     i2MSC_CleanBufferInt@data:
  1732                           	opt stack 0
  1733  000080                     i2FSH_VerifyWriteIntArray@ConstArray:
  1734                           	opt stack 0
  1735  000080                     i2___ftpack@arg:
  1736                           	opt stack 0
  1737  000080                     i2FSH_AddressToBlock@Address:
  1738                           	opt stack 0
  1739                           
  1740                           ; 4 bytes @ 0x0
  1741  000080                     	ds	1
  1742  000081                     i2TMR_ResetTimer0@TimerOn:
  1743                           	opt stack 0
  1744                           
  1745                           ; 1 bytes @ 0x1
  1746  000081                     	ds	1
  1747  000082                     i2MSC_CleanBufferInt@count:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0x2
  1751  000082                     	ds	1
  1752  000083                     i2___ftpack@exp:
  1753                           	opt stack 0
  1754  000083                     i2FSH_VerifyWriteIntArray@Array:
  1755                           	opt stack 0
  1756                           
  1757                           ; 2 bytes @ 0x3
  1758  000083                     	ds	1
  1759  000084                     i2___ftpack@sign:
  1760                           	opt stack 0
  1761  000084                     i2MSC_CleanBufferInt@i:
  1762                           	opt stack 0
  1763  000084                     i2FSH_WriteIntArray@Array:
  1764                           	opt stack 0
  1765  000084                     i2FSH_EraseBlock@Address:
  1766                           	opt stack 0
  1767                           
  1768                           ; 4 bytes @ 0x4
  1769  000084                     	ds	1
  1770  000085                     ??i2_FSH_VerifyWriteIntArray:
  1771  000085                     ??i2___ftpack:
  1772                           
  1773                           ; 0 bytes @ 0x5
  1774  000085                     	ds	1
  1775  000086                     i2MSC_BufferCopyIntConst@from:
  1776                           	opt stack 0
  1777                           
  1778                           ; 3 bytes @ 0x6
  1779  000086                     	ds	1
  1780  000087                     ??i2_FSH_WriteIntArray:
  1781                           
  1782                           ; 0 bytes @ 0x7
  1783  000087                     	ds	1
  1784  000088                     ?i2___lwtoft:
  1785                           	opt stack 0
  1786  000088                     i2FSH_EraseBlock@highint:
  1787                           	opt stack 0
  1788  000088                     i2___lwtoft@c:
  1789                           	opt stack 0
  1790                           
  1791                           ; 2 bytes @ 0x8
  1792  000088                     	ds	1
  1793  000089                     i2FSH_EraseBlock@lowint:
  1794                           	opt stack 0
  1795  000089                     i2MSC_BufferCopyIntConst@to:
  1796                           	opt stack 0
  1797                           
  1798                           ; 2 bytes @ 0x9
  1799  000089                     	ds	1
  1800  00008A                     i2FSH_EraseBlock@WriteTries:
  1801                           	opt stack 0
  1802  00008A                     i2FSH_VerifyWriteIntArray@i:
  1803                           	opt stack 0
  1804                           
  1805                           ; 1 bytes @ 0xA
  1806  00008A                     	ds	1
  1807  00008B                     ?i2___ftmul:
  1808                           	opt stack 0
  1809  00008B                     i2MSC_BufferCopyIntConst@count:
  1810                           	opt stack 0
  1811  00008B                     i2___ftge@ff1:
  1812                           	opt stack 0
  1813  00008B                     i2___ftmul@f1:
  1814                           	opt stack 0
  1815                           
  1816                           ; 3 bytes @ 0xB
  1817  00008B                     	ds	1
  1818  00008C                     i2FSH_WriteIntArray@i:
  1819                           	opt stack 0
  1820                           
  1821                           ; 1 bytes @ 0xC
  1822  00008C                     	ds	1
  1823  00008D                     i2MSC_BufferCopyIntConst@shift:
  1824                           	opt stack 0
  1825                           
  1826                           ; 2 bytes @ 0xD
  1827  00008D                     	ds	1
  1828  00008E                     i2___ftge@ff2:
  1829                           	opt stack 0
  1830  00008E                     i2___ftmul@f2:
  1831                           	opt stack 0
  1832                           
  1833                           ; 3 bytes @ 0xE
  1834  00008E                     	ds	1
  1835  00008F                     i2MSC_BufferCopyIntConst@i:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0xF
  1839  00008F                     	ds	2
  1840  000091                     ??i2_FSH_Write_IR_RF:
  1841  000091                     ??i2___ftge:
  1842  000091                     ??i2___ftmul:
  1843                           
  1844                           ; 0 bytes @ 0x11
  1845  000091                     	ds	3
  1846  000094                     i2___ftmul@exp:
  1847                           	opt stack 0
  1848                           
  1849                           ; 1 bytes @ 0x14
  1850  000094                     	ds	1
  1851  000095                     i2___ftmul@f3_as_product:
  1852                           	opt stack 0
  1853                           
  1854                           ; 3 bytes @ 0x15
  1855  000095                     	ds	2
  1856  000097                     i2FSH_Write_IR_RF@highint:
  1857                           	opt stack 0
  1858                           
  1859                           ; 1 bytes @ 0x17
  1860  000097                     	ds	1
  1861  000098                     i2FSH_Write_IR_RF@lowint:
  1862                           	opt stack 0
  1863  000098                     i2___ftmul@cntr:
  1864                           	opt stack 0
  1865                           
  1866                           ; 1 bytes @ 0x18
  1867  000098                     	ds	1
  1868  000099                     i2___ftmul@sign:
  1869                           	opt stack 0
  1870  000099                     i2FSH_Write_IR_RF@FlashWasteindex:
  1871                           	opt stack 0
  1872                           
  1873                           ; 2 bytes @ 0x19
  1874  000099                     	ds	2
  1875  00009B                     i2FSH_Write_IR_RF@j:
  1876                           	opt stack 0
  1877                           
  1878                           ; 1 bytes @ 0x1B
  1879  00009B                     	ds	1
  1880  00009C                     i2FSH_Write_IR_RF@status:
  1881                           	opt stack 0
  1882                           
  1883                           ; 1 bytes @ 0x1C
  1884  00009C                     	ds	1
  1885  00009D                     i2FSH_Write_IR_RF@i:
  1886                           	opt stack 0
  1887                           
  1888                           ; 2 bytes @ 0x1D
  1889  00009D                     	ds	2
  1890  00009F                     i2FSH_Write_IR_RF@WriteTries:
  1891                           	opt stack 0
  1892                           
  1893                           ; 1 bytes @ 0x1F
  1894  00009F                     	ds	1
  1895  0000A0                     
  1896                           ; 0 bytes @ 0x20
  1897  0000A0                     	ds	2
  1898  0000A2                     RF_CheckCode@Low:
  1899                           	opt stack 0
  1900                           
  1901                           ; 3 bytes @ 0x22
  1902  0000A2                     	ds	3
  1903  0000A5                     RF_CheckCode@High:
  1904                           	opt stack 0
  1905                           
  1906                           ; 3 bytes @ 0x25
  1907  0000A5                     	ds	3
  1908  0000A8                     RF_CheckCode@i:
  1909                           	opt stack 0
  1910                           
  1911                           ; 1 bytes @ 0x28
  1912  0000A8                     	ds	1
  1913  0000A9                     ??_high_isr:
  1914                           
  1915                           ; 0 bytes @ 0x29
  1916  0000A9                     	ds	14
  1917  0000B7                     high_isr@RFtemp:
  1918                           	opt stack 0
  1919                           
  1920                           ; 2 bytes @ 0x37
  1921  0000B7                     	ds	2
  1922                           tblptru	equ	0xFF8
  1923                           tblptrh	equ	0xFF7
  1924                           tblptrl	equ	0xFF6
  1925                           tablat	equ	0xFF5
  1926                           postinc0	equ	0xFEE
  1927                           wreg	equ	0xFE8
  1928                           postdec1	equ	0xFE5
  1929                           fsr1h	equ	0xFE2
  1930                           fsr1l	equ	0xFE1
  1931                           
  1932                           	psect	cstackCOMRAM
  1933  000001                     __pcstackCOMRAM:
  1934                           	opt stack 0
  1935  000001                     ?i1___ftpack:
  1936                           	opt stack 0
  1937  000001                     i1RF_DataInt@state:
  1938                           	opt stack 0
  1939  000001                     i1IR_ReadReceiver@value:
  1940                           	opt stack 0
  1941  000001                     i1BUT_ReadButton@value:
  1942                           	opt stack 0
  1943  000001                     i1TMR_Timer0@state:
  1944                           	opt stack 0
  1945  000001                     i1TMR_Timer1@state:
  1946                           	opt stack 0
  1947  000001                     i1TMR_Timer2@state:
  1948                           	opt stack 0
  1949  000001                     i1TMR_Timer0Int@state:
  1950                           	opt stack 0
  1951  000001                     i1MSC_CleanBufferInt@data:
  1952                           	opt stack 0
  1953  000001                     FSH_VerifyWriteIntArray@ConstArray:
  1954                           	opt stack 0
  1955  000001                     i1___ftpack@arg:
  1956                           	opt stack 0
  1957  000001                     FSH_AddressToBlock@Address:
  1958                           	opt stack 0
  1959                           
  1960                           ; 4 bytes @ 0x0
  1961  000001                     	ds	1
  1962  000002                     TMR_ResetTimer2@TimerOn:
  1963                           	opt stack 0
  1964  000002                     i1TMR_ResetTimer1@TimerOn:
  1965                           	opt stack 0
  1966                           
  1967                           ; 1 bytes @ 0x1
  1968  000002                     	ds	1
  1969  000003                     TMR_Timer2Start@time:
  1970                           	opt stack 0
  1971  000003                     i1MSC_CleanBufferInt@count:
  1972                           	opt stack 0
  1973                           
  1974                           ; 2 bytes @ 0x2
  1975  000003                     	ds	1
  1976  000004                     i1___ftpack@exp:
  1977                           	opt stack 0
  1978  000004                     FSH_VerifyWriteIntArray@Array:
  1979                           	opt stack 0
  1980                           
  1981                           ; 2 bytes @ 0x3
  1982  000004                     	ds	1
  1983  000005                     i1___ftpack@sign:
  1984                           	opt stack 0
  1985  000005                     i1MSC_CleanBufferInt@i:
  1986                           	opt stack 0
  1987  000005                     FSH_WriteIntArray@Array:
  1988                           	opt stack 0
  1989  000005                     FSH_EraseBlock@Address:
  1990                           	opt stack 0
  1991                           
  1992                           ; 4 bytes @ 0x4
  1993  000005                     	ds	1
  1994  000006                     ??_FSH_VerifyWriteIntArray:
  1995  000006                     ??i1___ftpack:
  1996                           
  1997                           ; 0 bytes @ 0x5
  1998  000006                     	ds	1
  1999  000007                     MSC_BufferCopyIntConst@from:
  2000                           	opt stack 0
  2001                           
  2002                           ; 3 bytes @ 0x6
  2003  000007                     	ds	1
  2004  000008                     ??_FSH_WriteIntArray:
  2005                           
  2006                           ; 0 bytes @ 0x7
  2007  000008                     	ds	1
  2008  000009                     ?i1___lwtoft:
  2009                           	opt stack 0
  2010  000009                     FSH_EraseBlock@highint:
  2011                           	opt stack 0
  2012  000009                     i1___lwtoft@c:
  2013                           	opt stack 0
  2014                           
  2015                           ; 2 bytes @ 0x8
  2016  000009                     	ds	1
  2017  00000A                     FSH_EraseBlock@lowint:
  2018                           	opt stack 0
  2019  00000A                     MSC_BufferCopyIntConst@to:
  2020                           	opt stack 0
  2021                           
  2022                           ; 2 bytes @ 0x9
  2023  00000A                     	ds	1
  2024  00000B                     FSH_EraseBlock@WriteTries:
  2025                           	opt stack 0
  2026  00000B                     FSH_VerifyWriteIntArray@i:
  2027                           	opt stack 0
  2028                           
  2029                           ; 1 bytes @ 0xA
  2030  00000B                     	ds	1
  2031  00000C                     ?___ftdiv:
  2032                           	opt stack 0
  2033  00000C                     MSC_BufferCopyIntConst@count:
  2034                           	opt stack 0
  2035  00000C                     ___ftdiv@f1:
  2036                           	opt stack 0
  2037  00000C                     i1___ftge@ff1:
  2038                           	opt stack 0
  2039                           
  2040                           ; 3 bytes @ 0xB
  2041  00000C                     	ds	1
  2042  00000D                     FSH_WriteIntArray@i:
  2043                           	opt stack 0
  2044                           
  2045                           ; 1 bytes @ 0xC
  2046  00000D                     	ds	1
  2047  00000E                     MSC_BufferCopyIntConst@shift:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0xD
  2051  00000E                     	ds	1
  2052  00000F                     ___ftdiv@f2:
  2053                           	opt stack 0
  2054  00000F                     i1___ftge@ff2:
  2055                           	opt stack 0
  2056                           
  2057                           ; 3 bytes @ 0xE
  2058  00000F                     	ds	1
  2059  000010                     MSC_BufferCopyIntConst@i:
  2060                           	opt stack 0
  2061                           
  2062                           ; 2 bytes @ 0xF
  2063  000010                     	ds	2
  2064  000012                     ??_FSH_Write_IR_RF:
  2065  000012                     ??___ftdiv:
  2066  000012                     ??i1___ftge:
  2067                           
  2068                           ; 0 bytes @ 0x11
  2069  000012                     	ds	3
  2070  000015                     ___ftdiv@cntr:
  2071                           	opt stack 0
  2072                           
  2073                           ; 1 bytes @ 0x14
  2074  000015                     	ds	1
  2075  000016                     ___ftdiv@f3:
  2076                           	opt stack 0
  2077                           
  2078                           ; 3 bytes @ 0x15
  2079  000016                     	ds	2
  2080  000018                     FSH_Write_IR_RF@highint:
  2081                           	opt stack 0
  2082                           
  2083                           ; 1 bytes @ 0x17
  2084  000018                     	ds	1
  2085  000019                     FSH_Write_IR_RF@lowint:
  2086                           	opt stack 0
  2087  000019                     ___ftdiv@exp:
  2088                           	opt stack 0
  2089                           
  2090                           ; 1 bytes @ 0x18
  2091  000019                     	ds	1
  2092  00001A                     ___ftdiv@sign:
  2093                           	opt stack 0
  2094  00001A                     FSH_Write_IR_RF@FlashWasteindex:
  2095                           	opt stack 0
  2096                           
  2097                           ; 2 bytes @ 0x19
  2098  00001A                     	ds	1
  2099  00001B                     ?i1___ftmul:
  2100                           	opt stack 0
  2101  00001B                     i1___ftmul@f1:
  2102                           	opt stack 0
  2103                           
  2104                           ; 3 bytes @ 0x1A
  2105  00001B                     	ds	1
  2106  00001C                     FSH_Write_IR_RF@j:
  2107                           	opt stack 0
  2108                           
  2109                           ; 1 bytes @ 0x1B
  2110  00001C                     	ds	1
  2111  00001D                     FSH_Write_IR_RF@status:
  2112                           	opt stack 0
  2113                           
  2114                           ; 1 bytes @ 0x1C
  2115  00001D                     	ds	1
  2116  00001E                     FSH_Write_IR_RF@i:
  2117                           	opt stack 0
  2118  00001E                     i1___ftmul@f2:
  2119                           	opt stack 0
  2120                           
  2121                           ; 3 bytes @ 0x1D
  2122  00001E                     	ds	2
  2123  000020                     FSH_Write_IR_RF@WriteTries:
  2124                           	opt stack 0
  2125                           
  2126                           ; 1 bytes @ 0x1F
  2127  000020                     	ds	1
  2128  000021                     ??i1___ftmul:
  2129                           
  2130                           ; 0 bytes @ 0x20
  2131  000021                     	ds	3
  2132  000024                     i1___ftmul@exp:
  2133                           	opt stack 0
  2134                           
  2135                           ; 1 bytes @ 0x23
  2136  000024                     	ds	1
  2137  000025                     i1___ftmul@f3_as_product:
  2138                           	opt stack 0
  2139                           
  2140                           ; 3 bytes @ 0x24
  2141  000025                     	ds	3
  2142  000028                     i1___ftmul@cntr:
  2143                           	opt stack 0
  2144                           
  2145                           ; 1 bytes @ 0x27
  2146  000028                     	ds	1
  2147  000029                     i1___ftmul@sign:
  2148                           	opt stack 0
  2149                           
  2150                           ; 1 bytes @ 0x28
  2151  000029                     	ds	1
  2152  00002A                     ADC_CalculateVoltage@ADCcounts:
  2153                           	opt stack 0
  2154                           
  2155                           ; 2 bytes @ 0x29
  2156  00002A                     	ds	2
  2157  00002C                     IR_CheckCode@Low:
  2158                           	opt stack 0
  2159  00002C                     ADC_CalculateVoltage@Voltage:
  2160                           	opt stack 0
  2161                           
  2162                           ; 3 bytes @ 0x2B
  2163  00002C                     	ds	3
  2164  00002F                     IR_CheckCode@High:
  2165                           	opt stack 0
  2166                           
  2167                           ; 3 bytes @ 0x2E
  2168  00002F                     	ds	3
  2169  000032                     IR_CheckCode@i:
  2170                           	opt stack 0
  2171                           
  2172                           ; 1 bytes @ 0x31
  2173  000032                     	ds	1
  2174  000033                     ??_low_isr:
  2175                           
  2176                           ; 0 bytes @ 0x32
  2177  000033                     	ds	17
  2178  000044                     low_isr@IR_state:
  2179                           	opt stack 0
  2180                           
  2181                           ; 1 bytes @ 0x43
  2182  000044                     	ds	1
  2183  000045                     low_isr@button_state:
  2184                           	opt stack 0
  2185                           
  2186                           ; 1 bytes @ 0x44
  2187  000045                     	ds	1
  2188  000046                     low_isr@IRtemp:
  2189                           	opt stack 0
  2190                           
  2191                           ; 2 bytes @ 0x45
  2192  000046                     	ds	2
  2193                           tblptru	equ	0xFF8
  2194                           tblptrh	equ	0xFF7
  2195                           tblptrl	equ	0xFF6
  2196                           tablat	equ	0xFF5
  2197                           postinc0	equ	0xFEE
  2198                           wreg	equ	0xFE8
  2199                           postdec1	equ	0xFE5
  2200                           fsr1h	equ	0xFE2
  2201                           fsr1l	equ	0xFE1
  2202                           
  2203 ;;
  2204 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2205 ;;
  2206 ;; *************** function _main *****************
  2207 ;; Defined at:
  2208 ;;		line 77 in file "main.c"
  2209 ;; Parameters:    Size  Location     Type
  2210 ;;		None
  2211 ;; Auto vars:     Size  Location     Type
  2212 ;;		None
  2213 ;; Return value:  Size  Location     Type
  2214 ;;                  2   52[None  ] int 
  2215 ;; Registers used:
  2216 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2217 ;; Tracked objects:
  2218 ;;		On entry : 0/0
  2219 ;;		On exit  : 0/0
  2220 ;;		Unchanged: 0/0
  2221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2222 ;;      Params:         0       0       0       0       0
  2223 ;;      Locals:         0       0       0       0       0
  2224 ;;      Temps:          0       0       0       0       0
  2225 ;;      Totals:         0       0       0       0       0
  2226 ;;Total ram usage:        0 bytes
  2227 ;; Hardware stack levels required when called:   18
  2228 ;; This function calls:
  2229 ;;		_ADC_Start
  2230 ;;		_IR_LoadCode
  2231 ;;		_Init_App
  2232 ;;		_Init_System
  2233 ;;		_MSC_BlinkLED
  2234 ;;		_MSC_DelayMS
  2235 ;;		_MTR_Rotate
  2236 ;;		_RF_LoadCode
  2237 ;;		_SYS_ActivityTimer
  2238 ;;		_SYS_ConfigureOscillator
  2239 ;;		___ftge
  2240 ;; This function is called by:
  2241 ;;		Startup code after reset
  2242 ;; This function uses a non-reentrant model
  2243 ;;
  2244                           
  2245                           	psect	text0
  2246  00376A                     __ptext0:
  2247                           	opt stack 0
  2248  00376A                     _main:
  2249                           	opt stack 13
  2250                           
  2251                           ;main.c: 80: SYS_ConfigureOscillator();
  2252                           
  2253                           ;incstack = 0
  2254  00376A  ECF8  F01F         	call	_SYS_ConfigureOscillator	;wreg free
  2255                           
  2256                           ;main.c: 81: Init_App();
  2257  00376E  EC44  F009         	call	_Init_App	;wreg free
  2258                           
  2259                           ;main.c: 82: Init_System();
  2260  003772  EC06  F00A         	call	_Init_System	;wreg free
  2261                           
  2262                           ;main.c: 85: RF_LoadCode();
  2263  003776  EC49  F002         	call	_RF_LoadCode	;wreg free
  2264                           
  2265                           ;main.c: 86: IR_LoadCode();
  2266  00377A  ECBE  F002         	call	_IR_LoadCode	;wreg free
  2267                           
  2268                           ;main.c: 87: MSC_BlinkLED(4,50);
  2269  00377E  0E00               	movlw	0
  2270  003780  0101               	movlb	1	; () banked
  2271  003782  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2272  003784  0E04               	movlw	4
  2273  003786  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2274  003788  0E00               	movlw	0
  2275  00378A  0101               	movlb	1	; () banked
  2276  00378C  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2277  00378E  0E32               	movlw	50
  2278  003790  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2279  003792  EC9C  F008         	call	_MSC_BlinkLED	;wreg free
  2280                           
  2281                           ;main.c: 88: (LATC &= ~0x10);
  2282  003796  988B               	bcf	3979,4,c	;volatile
  2283  003798                     l7862:
  2284                           
  2285                           ;main.c: 91: {
  2286                           ;main.c: 92: if(System_State == 8)
  2287  003798  0E08               	movlw	8
  2288  00379A  0100               	movlb	0	; () banked
  2289  00379C  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
  2290  00379E  A4D8               	btfss	status,2,c
  2291  0037A0  D0A3               	goto	l7918
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;main.c: 93: {
  2295                           ;main.c: 95: if(System_State_Change)
  2296  0037A2  0100               	movlb	0	; () banked
  2297  0037A4  51C9               	movf	_System_State_Change& (0+255),w,b	;volatile
  2298  0037A6  B4D8               	btfsc	status,2,c
  2299  0037A8  D04E               	goto	l7890
  2300                           
  2301                           ; BSR set to: 0
  2302                           ;main.c: 96: {
  2303                           ;main.c: 98: (LATC &= ~0x10);
  2304  0037AA  988B               	bcf	3979,4,c	;volatile
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;main.c: 99: if(RF_Saved == 90)
  2308  0037AC  0E5A               	movlw	90
  2309  0037AE  0100               	movlb	0	; () banked
  2310  0037B0  19CE               	xorwf	_RF_Saved& (0+255),w,b
  2311  0037B2  A4D8               	btfss	status,2,c
  2312  0037B4  D020               	goto	l7878
  2313                           
  2314                           ; BSR set to: 0
  2315                           ;main.c: 100: {
  2316                           ;main.c: 101: if(Flash_Status == 1)
  2317  0037B6  0100               	movlb	0	; () banked
  2318  0037B8  05C2               	decf	_Flash_Status& (0+255),w,b
  2319  0037BA  A4D8               	btfss	status,2,c
  2320  0037BC  D00D               	goto	l7874
  2321                           
  2322                           ; BSR set to: 0
  2323                           ;main.c: 102: {
  2324                           ;main.c: 103: MSC_BlinkLED(4,50);
  2325  0037BE  0E00               	movlw	0
  2326  0037C0  0101               	movlb	1	; () banked
  2327  0037C2  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2328  0037C4  0E04               	movlw	4
  2329  0037C6  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2330  0037C8  0E00               	movlw	0
  2331  0037CA  0101               	movlb	1	; () banked
  2332  0037CC  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2333  0037CE  0E32               	movlw	50
  2334  0037D0  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2335  0037D2  EC9C  F008         	call	_MSC_BlinkLED	;wreg free
  2336                           
  2337                           ;main.c: 104: }
  2338  0037D6  D00C               	goto	l7876
  2339  0037D8                     l7874:
  2340                           
  2341                           ;main.c: 105: else
  2342                           ;main.c: 106: {
  2343                           ;main.c: 107: MSC_BlinkLED(6,75);
  2344  0037D8  0E00               	movlw	0
  2345  0037DA  0101               	movlb	1	; () banked
  2346  0037DC  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2347  0037DE  0E06               	movlw	6
  2348  0037E0  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2349  0037E2  0E00               	movlw	0
  2350  0037E4  0101               	movlb	1	; () banked
  2351  0037E6  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2352  0037E8  0E4B               	movlw	75
  2353  0037EA  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2354  0037EC  EC9C  F008         	call	_MSC_BlinkLED	;wreg free
  2355  0037F0                     l7876:
  2356                           
  2357                           ;main.c: 108: }
  2358                           ;main.c: 109: RF_Saved = 91;
  2359  0037F0  0E5B               	movlw	91
  2360  0037F2  0100               	movlb	0	; () banked
  2361  0037F4  6FCE               	movwf	_RF_Saved& (0+255),b
  2362  0037F6                     l7878:
  2363                           
  2364                           ; BSR set to: 0
  2365                           ;main.c: 110: }
  2366                           ;main.c: 111: if(IR_Saved == 90)
  2367  0037F6  0E5A               	movlw	90
  2368  0037F8  0100               	movlb	0	; () banked
  2369  0037FA  19CD               	xorwf	_IR_Saved& (0+255),w,b
  2370  0037FC  A4D8               	btfss	status,2,c
  2371  0037FE  D020               	goto	l7888
  2372                           
  2373                           ; BSR set to: 0
  2374                           ;main.c: 112: {
  2375                           ;main.c: 113: if(Flash_Status == 1)
  2376  003800  0100               	movlb	0	; () banked
  2377  003802  05C2               	decf	_Flash_Status& (0+255),w,b
  2378  003804  A4D8               	btfss	status,2,c
  2379  003806  D00D               	goto	l7884
  2380                           
  2381                           ; BSR set to: 0
  2382                           ;main.c: 114: {
  2383                           ;main.c: 115: MSC_BlinkLED(4,50);
  2384  003808  0E00               	movlw	0
  2385  00380A  0101               	movlb	1	; () banked
  2386  00380C  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2387  00380E  0E04               	movlw	4
  2388  003810  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2389  003812  0E00               	movlw	0
  2390  003814  0101               	movlb	1	; () banked
  2391  003816  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2392  003818  0E32               	movlw	50
  2393  00381A  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2394  00381C  EC9C  F008         	call	_MSC_BlinkLED	;wreg free
  2395                           
  2396                           ;main.c: 116: }
  2397  003820  D00C               	goto	l7886
  2398  003822                     l7884:
  2399                           
  2400                           ;main.c: 117: else
  2401                           ;main.c: 118: {
  2402                           ;main.c: 119: MSC_BlinkLED(6,75);
  2403  003822  0E00               	movlw	0
  2404  003824  0101               	movlb	1	; () banked
  2405  003826  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2406  003828  0E06               	movlw	6
  2407  00382A  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2408  00382C  0E00               	movlw	0
  2409  00382E  0101               	movlb	1	; () banked
  2410  003830  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2411  003832  0E4B               	movlw	75
  2412  003834  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2413  003836  EC9C  F008         	call	_MSC_BlinkLED	;wreg free
  2414  00383A                     l7886:
  2415                           
  2416                           ;main.c: 120: }
  2417                           ;main.c: 121: IR_Saved = 91;
  2418  00383A  0E5B               	movlw	91
  2419  00383C  0100               	movlb	0	; () banked
  2420  00383E  6FCD               	movwf	_IR_Saved& (0+255),b
  2421  003840                     l7888:
  2422                           
  2423                           ; BSR set to: 0
  2424                           ;main.c: 122: }
  2425                           ;main.c: 123: System_State_Change = 0;
  2426  003840  0E00               	movlw	0
  2427  003842  0100               	movlb	0	; () banked
  2428  003844  6FC9               	movwf	_System_State_Change& (0+255),b	;volatile
  2429  003846                     l7890:
  2430                           
  2431                           ; BSR set to: 0
  2432                           ;main.c: 124: }
  2433                           ;main.c: 125: if(RF_Data || IR_Data || Button_Data)
  2434  003846  0100               	movlb	0	; () banked
  2435  003848  51C7               	movf	_RF_Data& (0+255),w,b	;volatile
  2436  00384A  A4D8               	btfss	status,2,c
  2437  00384C  D008               	goto	l7896
  2438                           
  2439                           ; BSR set to: 0
  2440  00384E  0100               	movlb	0	; () banked
  2441  003850  51C4               	movf	_IR_Data& (0+255),w,b	;volatile
  2442  003852  A4D8               	btfss	status,2,c
  2443  003854  D004               	goto	l7896
  2444                           
  2445                           ; BSR set to: 0
  2446  003856  0100               	movlb	0	; () banked
  2447  003858  51C0               	movf	_Button_Data& (0+255),w,b	;volatile
  2448  00385A  B4D8               	btfsc	status,2,c
  2449  00385C  D00D               	goto	l7908
  2450  00385E                     l7896:
  2451                           
  2452                           ; BSR set to: 0
  2453                           ;main.c: 126: {
  2454                           ;main.c: 127: (LATC |= 0x10);
  2455  00385E  888B               	bsf	3979,4,c	;volatile
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;main.c: 128: MTR_Rotate();
  2459  003860  EC89  F007         	call	_MTR_Rotate	;wreg free
  2460                           
  2461                           ;main.c: 129: RF_Data = 0;
  2462  003864  0E00               	movlw	0
  2463  003866  0100               	movlb	0	; () banked
  2464  003868  6FC7               	movwf	_RF_Data& (0+255),b	;volatile
  2465                           
  2466                           ; BSR set to: 0
  2467                           ;main.c: 130: IR_Data = 0;
  2468  00386A  0E00               	movlw	0
  2469  00386C  0100               	movlb	0	; () banked
  2470  00386E  6FC4               	movwf	_IR_Data& (0+255),b	;volatile
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;main.c: 131: Button_Data = 0;
  2474  003870  0E00               	movlw	0
  2475  003872  0100               	movlb	0	; () banked
  2476  003874  6FC0               	movwf	_Button_Data& (0+255),b	;volatile
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;main.c: 132: (LATC &= ~0x10);
  2480  003876  988B               	bcf	3979,4,c	;volatile
  2481  003878                     l7908:
  2482                           
  2483                           ; BSR set to: 0
  2484                           ;main.c: 133: }
  2485                           ;main.c: 134: if(Rail_VIN < 3.5 || Rail_VIN > 5.5 )
  2486  003878  C0CA  F180         	movff	_Rail_VIN,___ftge@ff1
  2487  00387C  C0CB  F181         	movff	_Rail_VIN+1,___ftge@ff1+1
  2488  003880  C0CC  F182         	movff	_Rail_VIN+2,___ftge@ff1+2
  2489  003884  0E00               	movlw	0
  2490  003886  0101               	movlb	1	; () banked
  2491  003888  6F83               	movwf	___ftge@ff2& (0+255),b
  2492  00388A  0E60               	movlw	96
  2493  00388C  0101               	movlb	1	; () banked
  2494  00388E  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2495  003890  0E40               	movlw	64
  2496  003892  0101               	movlb	1	; () banked
  2497  003894  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2498  003896  EC0B  F004         	call	___ftge	;wreg free
  2499  00389A  0101               	movlb	1	; () banked
  2500  00389C  A0D8               	btfss	status,0,c
  2501  00389E  D014               	goto	l7912
  2502                           
  2503                           ; BSR set to: 1
  2504  0038A0  0E00               	movlw	0
  2505  0038A2  0101               	movlb	1	; () banked
  2506  0038A4  6F80               	movwf	___ftge@ff1& (0+255),b
  2507  0038A6  0EB0               	movlw	176
  2508  0038A8  0101               	movlb	1	; () banked
  2509  0038AA  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  2510  0038AC  0E40               	movlw	64
  2511  0038AE  0101               	movlb	1	; () banked
  2512  0038B0  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  2513  0038B2  C0CA  F183         	movff	_Rail_VIN,___ftge@ff2
  2514  0038B6  C0CB  F184         	movff	_Rail_VIN+1,___ftge@ff2+1
  2515  0038BA  C0CC  F185         	movff	_Rail_VIN+2,___ftge@ff2+2
  2516  0038BE  EC0B  F004         	call	___ftge	;wreg free
  2517  0038C2  0101               	movlb	1	; () banked
  2518  0038C4  B0D8               	btfsc	status,0,c
  2519  0038C6  D00D               	goto	l7916
  2520  0038C8                     l7912:
  2521                           
  2522                           ; BSR set to: 1
  2523                           ;main.c: 135: {
  2524                           ;main.c: 136: MSC_DelayMS(100);
  2525  0038C8  0E64               	movlw	100
  2526  0038CA  0101               	movlb	1	; () banked
  2527  0038CC  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  2528  0038CE  0E00               	movlw	0
  2529  0038D0  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  2530  0038D2  0E00               	movlw	0
  2531  0038D4  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  2532  0038D6  0E00               	movlw	0
  2533  0038D8  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  2534  0038DA  ECBC  F007         	call	_MSC_DelayMS	;wreg free
  2535                           
  2536                           ;main.c: 137: (LATC ^= 0x10);
  2537  0038DE  0E10               	movlw	16
  2538  0038E0  1A8B               	xorwf	3979,f,c	;volatile
  2539  0038E2                     l7916:
  2540                           
  2541                           ;main.c: 138: }
  2542                           ;main.c: 139: SYS_ActivityTimer();
  2543  0038E2  EC4F  F00A         	call	_SYS_ActivityTimer	;wreg free
  2544                           
  2545                           ;main.c: 140: }
  2546  0038E6  D02C               	goto	l7930
  2547  0038E8                     l7918:
  2548                           
  2549                           ;main.c: 141: else if(System_State == 10)
  2550  0038E8  0E0A               	movlw	10
  2551  0038EA  0100               	movlb	0	; () banked
  2552  0038EC  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
  2553  0038EE  A4D8               	btfss	status,2,c
  2554  0038F0  D027               	goto	l7930
  2555                           
  2556                           ; BSR set to: 0
  2557                           ;main.c: 142: {
  2558                           ;main.c: 144: MSC_DelayMS(25);
  2559  0038F2  0E19               	movlw	25
  2560  0038F4  0101               	movlb	1	; () banked
  2561  0038F6  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  2562  0038F8  0E00               	movlw	0
  2563  0038FA  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  2564  0038FC  0E00               	movlw	0
  2565  0038FE  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  2566  003900  0E00               	movlw	0
  2567  003902  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  2568  003904  ECBC  F007         	call	_MSC_DelayMS	;wreg free
  2569                           
  2570                           ;main.c: 145: (LATC ^= 0x10);
  2571  003908  0E10               	movlw	16
  2572  00390A  1A8B               	xorwf	3979,f,c	;volatile
  2573                           
  2574                           ;main.c: 146: if(RF_Data)
  2575  00390C  0100               	movlb	0	; () banked
  2576  00390E  51C7               	movf	_RF_Data& (0+255),w,b	;volatile
  2577  003910  B4D8               	btfsc	status,2,c
  2578  003912  D009               	goto	l70
  2579                           
  2580                           ; BSR set to: 0
  2581                           ;main.c: 147: {
  2582                           ;main.c: 149: RF_Data = 0;
  2583  003914  0E00               	movlw	0
  2584  003916  0100               	movlb	0	; () banked
  2585  003918  6FC7               	movwf	_RF_Data& (0+255),b	;volatile
  2586                           
  2587                           ;main.c: 150: System_State = 8;
  2588  00391A  0E08               	movlw	8
  2589  00391C  0100               	movlb	0	; () banked
  2590  00391E  6FCF               	movwf	_System_State& (0+255),b	;volatile
  2591                           
  2592                           ;main.c: 151: System_State_Change = 1;
  2593  003920  0E01               	movlw	1
  2594  003922  0100               	movlb	0	; () banked
  2595  003924  6FC9               	movwf	_System_State_Change& (0+255),b	;volatile
  2596  003926                     l70:
  2597                           
  2598                           ; BSR set to: 0
  2599                           ;main.c: 152: }
  2600                           ;main.c: 153: if(IR_Data)
  2601  003926  0100               	movlb	0	; () banked
  2602  003928  51C4               	movf	_IR_Data& (0+255),w,b	;volatile
  2603  00392A  B4D8               	btfsc	status,2,c
  2604  00392C  D009               	goto	l7930
  2605                           
  2606                           ; BSR set to: 0
  2607                           ;main.c: 154: {
  2608                           ;main.c: 156: IR_Data = 0;
  2609  00392E  0E00               	movlw	0
  2610  003930  0100               	movlb	0	; () banked
  2611  003932  6FC4               	movwf	_IR_Data& (0+255),b	;volatile
  2612                           
  2613                           ;main.c: 157: System_State = 8;
  2614  003934  0E08               	movlw	8
  2615  003936  0100               	movlb	0	; () banked
  2616  003938  6FCF               	movwf	_System_State& (0+255),b	;volatile
  2617                           
  2618                           ;main.c: 158: System_State_Change = 1;
  2619  00393A  0E01               	movlw	1
  2620  00393C  0100               	movlb	0	; () banked
  2621  00393E  6FC9               	movwf	_System_State_Change& (0+255),b	;volatile
  2622  003940                     l7930:
  2623                           
  2624                           ;main.c: 159: }
  2625                           ;main.c: 160: }
  2626                           ;main.c: 162: ADC_SampleCount++;
  2627  003940  0100               	movlb	0	; () banked
  2628  003942  4BB9               	infsnz	_ADC_SampleCount& (0+255),f,b
  2629  003944  2BBA               	incf	(_ADC_SampleCount+1)& (0+255),f,b
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;main.c: 163: if(ADC_SampleCount > 10)
  2633  003946  0100               	movlb	0	; () banked
  2634  003948  51BA               	movf	(_ADC_SampleCount+1)& (0+255),w,b
  2635  00394A  E105               	bnz	u8990
  2636  00394C  0E0B               	movlw	11
  2637  00394E  0100               	movlb	0	; () banked
  2638  003950  5DB9               	subwf	_ADC_SampleCount& (0+255),w,b
  2639  003952  A0D8               	btfss	status,0,c
  2640  003954  D721               	goto	l7862
  2641  003956                     u8990:
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;main.c: 164: {
  2645                           ;main.c: 165: ADC_Start();
  2646  003956  EC39  F00D         	call	_ADC_Start	;wreg free
  2647                           
  2648                           ;main.c: 166: ADC_SampleCount = 0;
  2649  00395A  0E00               	movlw	0
  2650  00395C  0100               	movlb	0	; () banked
  2651  00395E  6FBA               	movwf	(_ADC_SampleCount+1)& (0+255),b
  2652  003960  0E00               	movlw	0
  2653  003962  6FB9               	movwf	_ADC_SampleCount& (0+255),b
  2654                           
  2655                           ; BSR set to: 0
  2656                           
  2657                           ; BSR set to: 0
  2658  003964  D719               	goto	l7862
  2659  003966                     __end_of_main:
  2660                           	opt stack 0
  2661                           tblptru	equ	0xFF8
  2662                           tblptrh	equ	0xFF7
  2663                           tblptrl	equ	0xFF6
  2664                           tablat	equ	0xFF5
  2665                           postinc0	equ	0xFEE
  2666                           wreg	equ	0xFE8
  2667                           postdec1	equ	0xFE5
  2668                           fsr1h	equ	0xFE2
  2669                           fsr1l	equ	0xFE1
  2670                           status	equ	0xFD8
  2671                           
  2672 ;; *************** function ___ftge *****************
  2673 ;; Defined at:
  2674 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
  2675 ;; Parameters:    Size  Location     Type
  2676 ;;  ff1             3    0[BANK1 ] float 
  2677 ;;  ff2             3    3[BANK1 ] float 
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;		None
  2680 ;; Return value:  Size  Location     Type
  2681 ;;		None               void
  2682 ;; Registers used:
  2683 ;;		wreg, status,2, status,0
  2684 ;; Tracked objects:
  2685 ;;		On entry : 0/0
  2686 ;;		On exit  : 0/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2689 ;;      Params:         0       0       6       0       0
  2690 ;;      Locals:         0       0       0       0       0
  2691 ;;      Temps:          0       0       3       0       0
  2692 ;;      Totals:         0       0       9       0       0
  2693 ;;Total ram usage:        9 bytes
  2694 ;; Hardware stack levels used:    1
  2695 ;; Hardware stack levels required when called:   12
  2696 ;; This function calls:
  2697 ;;		Nothing
  2698 ;; This function is called by:
  2699 ;;		_main
  2700 ;; This function uses a non-reentrant model
  2701 ;;
  2702                           
  2703                           	psect	text1
  2704  000816                     __ptext1:
  2705                           	opt stack 0
  2706  000816                     ___ftge:
  2707                           	opt stack 18
  2708                           
  2709                           ; BSR set to: 0
  2710                           ;incstack = 0
  2711  000816  0101               	movlb	1	; () banked
  2712  000818  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  2713  00081A  D01D               	goto	l7834
  2714                           
  2715                           ; BSR set to: 1
  2716  00081C  C180  F186         	movff	___ftge@ff1,??___ftge
  2717  000820  C181  F187         	movff	___ftge@ff1+1,??___ftge+1
  2718  000824  C182  F188         	movff	___ftge@ff1+2,??___ftge+2
  2719  000828  0101               	movlb	1	; () banked
  2720  00082A  1F86               	comf	??___ftge& (0+255),f,b
  2721  00082C  1F87               	comf	(??___ftge+1)& (0+255),f,b
  2722  00082E  1F88               	comf	(??___ftge+2)& (0+255),f,b
  2723  000830  2B86               	incf	??___ftge& (0+255),f,b
  2724  000832  0E00               	movlw	0
  2725  000834  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  2726  000836  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  2727  000838  0E00               	movlw	0
  2728  00083A  0101               	movlb	1	; () banked
  2729  00083C  2586               	addwf	??___ftge& (0+255),w,b
  2730  00083E  0101               	movlb	1	; () banked
  2731  000840  6F80               	movwf	___ftge@ff1& (0+255),b
  2732  000842  0E00               	movlw	0
  2733  000844  0101               	movlb	1	; () banked
  2734  000846  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  2735  000848  0101               	movlb	1	; () banked
  2736  00084A  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  2737  00084C  0E80               	movlw	128
  2738  00084E  0101               	movlb	1	; () banked
  2739  000850  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  2740  000852  0101               	movlb	1	; () banked
  2741  000854  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  2742  000856                     l7834:
  2743                           
  2744                           ; BSR set to: 1
  2745  000856  0101               	movlb	1	; () banked
  2746  000858  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  2747  00085A  D01D               	goto	l7838
  2748                           
  2749                           ; BSR set to: 1
  2750  00085C  C183  F186         	movff	___ftge@ff2,??___ftge
  2751  000860  C184  F187         	movff	___ftge@ff2+1,??___ftge+1
  2752  000864  C185  F188         	movff	___ftge@ff2+2,??___ftge+2
  2753  000868  0101               	movlb	1	; () banked
  2754  00086A  1F86               	comf	??___ftge& (0+255),f,b
  2755  00086C  1F87               	comf	(??___ftge+1)& (0+255),f,b
  2756  00086E  1F88               	comf	(??___ftge+2)& (0+255),f,b
  2757  000870  2B86               	incf	??___ftge& (0+255),f,b
  2758  000872  0E00               	movlw	0
  2759  000874  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  2760  000876  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  2761  000878  0E00               	movlw	0
  2762  00087A  0101               	movlb	1	; () banked
  2763  00087C  2586               	addwf	??___ftge& (0+255),w,b
  2764  00087E  0101               	movlb	1	; () banked
  2765  000880  6F83               	movwf	___ftge@ff2& (0+255),b
  2766  000882  0E00               	movlw	0
  2767  000884  0101               	movlb	1	; () banked
  2768  000886  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  2769  000888  0101               	movlb	1	; () banked
  2770  00088A  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2771  00088C  0E80               	movlw	128
  2772  00088E  0101               	movlb	1	; () banked
  2773  000890  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  2774  000892  0101               	movlb	1	; () banked
  2775  000894  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2776  000896                     l7838:
  2777                           
  2778                           ; BSR set to: 1
  2779  000896  0E00               	movlw	0
  2780  000898  0101               	movlb	1	; () banked
  2781  00089A  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  2782  00089C  0E00               	movlw	0
  2783  00089E  0101               	movlb	1	; () banked
  2784  0008A0  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  2785  0008A2  0E80               	movlw	128
  2786  0008A4  0101               	movlb	1	; () banked
  2787  0008A6  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  2788                           
  2789                           ; BSR set to: 1
  2790  0008A8  0E00               	movlw	0
  2791  0008AA  0101               	movlb	1	; () banked
  2792  0008AC  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  2793  0008AE  0E00               	movlw	0
  2794  0008B0  0101               	movlb	1	; () banked
  2795  0008B2  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  2796  0008B4  0E80               	movlw	128
  2797  0008B6  0101               	movlb	1	; () banked
  2798  0008B8  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  2799  0008BA  0101               	movlb	1	; () banked
  2800  0008BC  5183               	movf	___ftge@ff2& (0+255),w,b
  2801  0008BE  0101               	movlb	1	; () banked
  2802  0008C0  5D80               	subwf	___ftge@ff1& (0+255),w,b
  2803  0008C2  0101               	movlb	1	; () banked
  2804  0008C4  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  2805  0008C6  0101               	movlb	1	; () banked
  2806  0008C8  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  2807  0008CA  0101               	movlb	1	; () banked
  2808  0008CC  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  2809  0008CE  0101               	movlb	1	; () banked
  2810  0008D0  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  2811  0008D2  B0D8               	btfsc	status,0,c
  2812  0008D4  D002               	goto	l7844
  2813                           
  2814                           ; BSR set to: 1
  2815  0008D6  90D8               	bcf	status,0,c
  2816  0008D8  0012               	return	
  2817  0008DA                     l7844:
  2818                           
  2819                           ; BSR set to: 1
  2820  0008DA  80D8               	bsf	status,0,c
  2821                           
  2822                           ; BSR set to: 1
  2823  0008DC  0012               	return	
  2824  0008DE                     __end_of___ftge:
  2825                           	opt stack 0
  2826                           tblptru	equ	0xFF8
  2827                           tblptrh	equ	0xFF7
  2828                           tblptrl	equ	0xFF6
  2829                           tablat	equ	0xFF5
  2830                           postinc0	equ	0xFEE
  2831                           wreg	equ	0xFE8
  2832                           postdec1	equ	0xFE5
  2833                           fsr1h	equ	0xFE2
  2834                           fsr1l	equ	0xFE1
  2835                           status	equ	0xFD8
  2836                           
  2837 ;; *************** function _SYS_ConfigureOscillator *****************
  2838 ;; Defined at:
  2839 ;;		line 88 in file "SYSTEM.c"
  2840 ;; Parameters:    Size  Location     Type
  2841 ;;		None
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;		None
  2844 ;; Return value:  Size  Location     Type
  2845 ;;		None               void
  2846 ;; Registers used:
  2847 ;;		None
  2848 ;; Tracked objects:
  2849 ;;		On entry : 0/0
  2850 ;;		On exit  : 0/0
  2851 ;;		Unchanged: 0/0
  2852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2853 ;;      Params:         0       0       0       0       0
  2854 ;;      Locals:         0       0       0       0       0
  2855 ;;      Temps:          0       0       0       0       0
  2856 ;;      Totals:         0       0       0       0       0
  2857 ;;Total ram usage:        0 bytes
  2858 ;; Hardware stack levels used:    1
  2859 ;; Hardware stack levels required when called:   12
  2860 ;; This function calls:
  2861 ;;		Nothing
  2862 ;; This function is called by:
  2863 ;;		_main
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           	psect	text2
  2868  003FF0                     __ptext2:
  2869                           	opt stack 0
  2870  003FF0                     _SYS_ConfigureOscillator:
  2871                           	opt stack 18
  2872                           
  2873                           ;SYSTEM.c: 91: OSCTUNEbits.PLLEN = 1;
  2874                           
  2875                           ; BSR set to: 1
  2876                           ;incstack = 0
  2877  003FF0  8C9B               	bsf	3995,6,c	;volatile
  2878  003FF2                     l317:
  2879  003FF2  B6D3               	btfsc	4051,3,c	;volatile
  2880  003FF4  0012               	return	
  2881  003FF6  D7FD               	goto	l317
  2882  003FF8                     __end_of_SYS_ConfigureOscillator:
  2883                           	opt stack 0
  2884                           tblptru	equ	0xFF8
  2885                           tblptrh	equ	0xFF7
  2886                           tblptrl	equ	0xFF6
  2887                           tablat	equ	0xFF5
  2888                           postinc0	equ	0xFEE
  2889                           wreg	equ	0xFE8
  2890                           postdec1	equ	0xFE5
  2891                           fsr1h	equ	0xFE2
  2892                           fsr1l	equ	0xFE1
  2893                           status	equ	0xFD8
  2894                           
  2895 ;; *************** function _SYS_ActivityTimer *****************
  2896 ;; Defined at:
  2897 ;;		line 101 in file "SYSTEM.c"
  2898 ;; Parameters:    Size  Location     Type
  2899 ;;		None
  2900 ;; Auto vars:     Size  Location     Type
  2901 ;;		None
  2902 ;; Return value:  Size  Location     Type
  2903 ;;		None               void
  2904 ;; Registers used:
  2905 ;;		wreg, status,2, status,0, cstack
  2906 ;; Tracked objects:
  2907 ;;		On entry : 0/0
  2908 ;;		On exit  : 0/0
  2909 ;;		Unchanged: 0/0
  2910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2911 ;;      Params:         0       0       0       0       0
  2912 ;;      Locals:         0       0       0       0       0
  2913 ;;      Temps:          0       0       0       0       0
  2914 ;;      Totals:         0       0       0       0       0
  2915 ;;Total ram usage:        0 bytes
  2916 ;; Hardware stack levels used:    1
  2917 ;; Hardware stack levels required when called:   13
  2918 ;; This function calls:
  2919 ;;		_SYS_ActivityTimerReset
  2920 ;;		_SYS_Sleep
  2921 ;; This function is called by:
  2922 ;;		_main
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           	psect	text3
  2927  00149E                     __ptext3:
  2928                           	opt stack 0
  2929  00149E                     _SYS_ActivityTimer:
  2930                           	opt stack 17
  2931                           
  2932                           ;SYSTEM.c: 103: if(Activity_Timer > 1000)
  2933                           
  2934                           ;incstack = 0
  2935  00149E  504B               	movf	_Activity_Timer+3,w,c
  2936  0014A0  104A               	iorwf	_Activity_Timer+2,w,c
  2937  0014A2  E106               	bnz	u8810
  2938  0014A4  0EE9               	movlw	233
  2939  0014A6  5C48               	subwf	_Activity_Timer,w,c
  2940  0014A8  0E03               	movlw	3
  2941  0014AA  5849               	subwfb	_Activity_Timer+1,w,c
  2942  0014AC  A0D8               	btfss	status,0,c
  2943  0014AE  D005               	goto	l7826
  2944  0014B0                     u8810:
  2945                           
  2946                           ;SYSTEM.c: 104: {
  2947                           ;SYSTEM.c: 105: SYS_ActivityTimerReset();
  2948  0014B0  ECA8  F00C         	call	_SYS_ActivityTimerReset	;wreg free
  2949                           
  2950                           ;SYSTEM.c: 106: SYS_Sleep();
  2951  0014B4  EC32  F00D         	call	_SYS_Sleep	;wreg free
  2952                           
  2953                           ;SYSTEM.c: 107: }
  2954  0014B8  0012               	return	
  2955  0014BA                     l7826:
  2956                           
  2957                           ;SYSTEM.c: 108: else
  2958                           ;SYSTEM.c: 109: {
  2959                           ;SYSTEM.c: 110: Activity_Timer++;
  2960  0014BA  0E01               	movlw	1
  2961  0014BC  2648               	addwf	_Activity_Timer,f,c
  2962  0014BE  0E00               	movlw	0
  2963  0014C0  2249               	addwfc	_Activity_Timer+1,f,c
  2964  0014C2  224A               	addwfc	_Activity_Timer+2,f,c
  2965  0014C4  224B               	addwfc	_Activity_Timer+3,f,c
  2966  0014C6  0012               	return	
  2967  0014C8                     __end_of_SYS_ActivityTimer:
  2968                           	opt stack 0
  2969                           tblptru	equ	0xFF8
  2970                           tblptrh	equ	0xFF7
  2971                           tblptrl	equ	0xFF6
  2972                           tablat	equ	0xFF5
  2973                           postinc0	equ	0xFEE
  2974                           wreg	equ	0xFE8
  2975                           postdec1	equ	0xFE5
  2976                           fsr1h	equ	0xFE2
  2977                           fsr1l	equ	0xFE1
  2978                           status	equ	0xFD8
  2979                           
  2980 ;; *************** function _SYS_Sleep *****************
  2981 ;; Defined at:
  2982 ;;		line 77 in file "SYSTEM.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;		None
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;		None
  2987 ;; Return value:  Size  Location     Type
  2988 ;;		None               void
  2989 ;; Registers used:
  2990 ;;		status,2, status,0
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2996 ;;      Params:         0       0       0       0       0
  2997 ;;      Locals:         0       0       0       0       0
  2998 ;;      Temps:          0       0       0       0       0
  2999 ;;      Totals:         0       0       0       0       0
  3000 ;;Total ram usage:        0 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:   12
  3003 ;; This function calls:
  3004 ;;		Nothing
  3005 ;; This function is called by:
  3006 ;;		_SYS_ActivityTimer
  3007 ;; This function uses a non-reentrant model
  3008 ;;
  3009                           
  3010                           	psect	text4
  3011  001A64                     __ptext4:
  3012                           	opt stack 0
  3013  001A64                     _SYS_Sleep:
  3014                           	opt stack 17
  3015                           
  3016                           ;SYSTEM.c: 79: OSCCON &= ~0b10000000;
  3017                           
  3018                           ;incstack = 0
  3019  001A64  9ED3               	bcf	4051,7,c	;volatile
  3020  001A66  0003               	sleep		;# 
  3021  001A68  0012               	return		;funcret
  3022  001A6A                     __end_of_SYS_Sleep:
  3023                           	opt stack 0
  3024                           tblptru	equ	0xFF8
  3025                           tblptrh	equ	0xFF7
  3026                           tblptrl	equ	0xFF6
  3027                           tablat	equ	0xFF5
  3028                           postinc0	equ	0xFEE
  3029                           wreg	equ	0xFE8
  3030                           postdec1	equ	0xFE5
  3031                           fsr1h	equ	0xFE2
  3032                           fsr1l	equ	0xFE1
  3033                           status	equ	0xFD8
  3034                           
  3035 ;; *************** function _SYS_ActivityTimerReset *****************
  3036 ;; Defined at:
  3037 ;;		line 67 in file "SYSTEM.c"
  3038 ;; Parameters:    Size  Location     Type
  3039 ;;		None
  3040 ;; Auto vars:     Size  Location     Type
  3041 ;;		None
  3042 ;; Return value:  Size  Location     Type
  3043 ;;		None               void
  3044 ;; Registers used:
  3045 ;;		wreg, status,2
  3046 ;; Tracked objects:
  3047 ;;		On entry : 0/0
  3048 ;;		On exit  : 0/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3051 ;;      Params:         0       0       0       0       0
  3052 ;;      Locals:         0       0       0       0       0
  3053 ;;      Temps:          0       0       0       0       0
  3054 ;;      Totals:         0       0       0       0       0
  3055 ;;Total ram usage:        0 bytes
  3056 ;; Hardware stack levels used:    1
  3057 ;; Hardware stack levels required when called:   12
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_SYS_ActivityTimer
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text5
  3066  001950                     __ptext5:
  3067                           	opt stack 0
  3068  001950                     _SYS_ActivityTimerReset:
  3069                           	opt stack 17
  3070                           
  3071                           ;SYSTEM.c: 69: Activity_Timer = 0;
  3072                           
  3073                           ;incstack = 0
  3074  001950  0E00               	movlw	0
  3075  001952  6E48               	movwf	_Activity_Timer,c
  3076  001954  0E00               	movlw	0
  3077  001956  6E49               	movwf	_Activity_Timer+1,c
  3078  001958  0E00               	movlw	0
  3079  00195A  6E4A               	movwf	_Activity_Timer+2,c
  3080  00195C  0E00               	movlw	0
  3081  00195E  6E4B               	movwf	_Activity_Timer+3,c
  3082  001960  0012               	return		;funcret
  3083  001962                     __end_of_SYS_ActivityTimerReset:
  3084                           	opt stack 0
  3085                           tblptru	equ	0xFF8
  3086                           tblptrh	equ	0xFF7
  3087                           tblptrl	equ	0xFF6
  3088                           tablat	equ	0xFF5
  3089                           postinc0	equ	0xFEE
  3090                           wreg	equ	0xFE8
  3091                           postdec1	equ	0xFE5
  3092                           fsr1h	equ	0xFE2
  3093                           fsr1l	equ	0xFE1
  3094                           status	equ	0xFD8
  3095                           
  3096 ;; *************** function _RF_LoadCode *****************
  3097 ;; Defined at:
  3098 ;;		line 232 in file "RF.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;		None
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;  High            3   29[BANK1 ] float 
  3103 ;;  Low             3   26[BANK1 ] float 
  3104 ;; Return value:  Size  Location     Type
  3105 ;;		None               void
  3106 ;; Registers used:
  3107 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3108 ;; Tracked objects:
  3109 ;;		On entry : 0/0
  3110 ;;		On exit  : 0/0
  3111 ;;		Unchanged: 0/0
  3112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3113 ;;      Params:         0       0       0       0       0
  3114 ;;      Locals:         0       0       6       0       0
  3115 ;;      Temps:          0       0       0       0       0
  3116 ;;      Totals:         0       0       6       0       0
  3117 ;;Total ram usage:        6 bytes
  3118 ;; Hardware stack levels used:    1
  3119 ;; Hardware stack levels required when called:   14
  3120 ;; This function calls:
  3121 ;;		_RF_CalculateCodesize
  3122 ;;		___ftmul
  3123 ;;		___fttol
  3124 ;;		___lwtoft
  3125 ;; This function is called by:
  3126 ;;		_main
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129                           
  3130                           	psect	text6
  3131  000492                     __ptext6:
  3132                           	opt stack 0
  3133  000492                     _RF_LoadCode:
  3134                           	opt stack 16
  3135                           
  3136                           ;RF.c: 234: double Low = 0.0;
  3137                           
  3138                           ;incstack = 0
  3139  000492  0E00               	movlw	0
  3140  000494  0101               	movlb	1	; () banked
  3141  000496  6F9A               	movwf	RF_LoadCode@Low& (0+255),b
  3142  000498  0E00               	movlw	0
  3143  00049A  0101               	movlb	1	; () banked
  3144  00049C  6F9B               	movwf	(RF_LoadCode@Low+1)& (0+255),b
  3145  00049E  0E00               	movlw	0
  3146  0004A0  0101               	movlb	1	; () banked
  3147  0004A2  6F9C               	movwf	(RF_LoadCode@Low+2)& (0+255),b
  3148                           
  3149                           ;RF.c: 235: double High = 0.0;
  3150  0004A4  0E00               	movlw	0
  3151  0004A6  0101               	movlb	1	; () banked
  3152  0004A8  6F9D               	movwf	RF_LoadCode@High& (0+255),b
  3153  0004AA  0E00               	movlw	0
  3154  0004AC  0101               	movlb	1	; () banked
  3155  0004AE  6F9E               	movwf	(RF_LoadCode@High+1)& (0+255),b
  3156  0004B0  0E00               	movlw	0
  3157  0004B2  0101               	movlb	1	; () banked
  3158  0004B4  6F9F               	movwf	(RF_LoadCode@High+2)& (0+255),b
  3159                           
  3160                           ; BSR set to: 1
  3161                           ;RF.c: 237: Low = (double)RF_SavedTiming[0] * (1.0 - 0.02);
  3162  0004B6  0E00               	movlw	0
  3163  0004B8  6EF6               	movwf	tblptrl,c
  3164  0004BA                     	if	1	;There is more than 1 active tblptr byte
  3165  0004BA  0E25               	movlw	37
  3166  0004BC  6EF7               	movwf	tblptrh,c
  3167  0004BE                     	endif
  3168  0004BE                     	if	0	;There are less than 3 active tblptr bytes
  3169  0004BE                     	endif
  3170  0004BE  0009               	tblrd		*+
  3171  0004C0  CFF5 F188          	movff	tablat,___lwtoft@c
  3172  0004C4  000A               	tblrd		*-
  3173  0004C6  CFF5 F189          	movff	tablat,___lwtoft@c+1
  3174  0004CA  ECA3  F00A         	call	___lwtoft	;wreg free
  3175  0004CE  C188  F18B         	movff	?___lwtoft,___ftmul@f1
  3176  0004D2  C189  F18C         	movff	?___lwtoft+1,___ftmul@f1+1
  3177  0004D6  C18A  F18D         	movff	?___lwtoft+2,___ftmul@f1+2
  3178  0004DA  0EE1               	movlw	225
  3179  0004DC  0101               	movlb	1	; () banked
  3180  0004DE  6F8E               	movwf	___ftmul@f2& (0+255),b
  3181  0004E0  0E7A               	movlw	122
  3182  0004E2  0101               	movlb	1	; () banked
  3183  0004E4  6F8F               	movwf	(___ftmul@f2+1)& (0+255),b
  3184  0004E6  0E3F               	movlw	63
  3185  0004E8  0101               	movlb	1	; () banked
  3186  0004EA  6F90               	movwf	(___ftmul@f2+2)& (0+255),b
  3187  0004EC  EC72  F01D         	call	___ftmul	;wreg free
  3188  0004F0  C18B  F19A         	movff	?___ftmul,RF_LoadCode@Low
  3189  0004F4  C18C  F19B         	movff	?___ftmul+1,RF_LoadCode@Low+1
  3190  0004F8  C18D  F19C         	movff	?___ftmul+2,RF_LoadCode@Low+2
  3191                           
  3192                           ;RF.c: 238: High = (double)RF_SavedTiming[0] * (1.0 + 0.02);
  3193  0004FC  0E00               	movlw	0
  3194  0004FE  6EF6               	movwf	tblptrl,c
  3195  000500                     	if	1	;There is more than 1 active tblptr byte
  3196  000500  0E25               	movlw	37
  3197  000502  6EF7               	movwf	tblptrh,c
  3198  000504                     	endif
  3199  000504                     	if	0	;There are less than 3 active tblptr bytes
  3200  000504                     	endif
  3201  000504  0009               	tblrd		*+
  3202  000506  CFF5 F188          	movff	tablat,___lwtoft@c
  3203  00050A  000A               	tblrd		*-
  3204  00050C  CFF5 F189          	movff	tablat,___lwtoft@c+1
  3205  000510  ECA3  F00A         	call	___lwtoft	;wreg free
  3206  000514  C188  F18B         	movff	?___lwtoft,___ftmul@f1
  3207  000518  C189  F18C         	movff	?___lwtoft+1,___ftmul@f1+1
  3208  00051C  C18A  F18D         	movff	?___lwtoft+2,___ftmul@f1+2
  3209  000520  0E8F               	movlw	143
  3210  000522  0101               	movlb	1	; () banked
  3211  000524  6F8E               	movwf	___ftmul@f2& (0+255),b
  3212  000526  0E82               	movlw	130
  3213  000528  0101               	movlb	1	; () banked
  3214  00052A  6F8F               	movwf	(___ftmul@f2+1)& (0+255),b
  3215  00052C  0E3F               	movlw	63
  3216  00052E  0101               	movlb	1	; () banked
  3217  000530  6F90               	movwf	(___ftmul@f2+2)& (0+255),b
  3218  000532  EC72  F01D         	call	___ftmul	;wreg free
  3219  000536  C18B  F19D         	movff	?___ftmul,RF_LoadCode@High
  3220  00053A  C18C  F19E         	movff	?___ftmul+1,RF_LoadCode@High+1
  3221  00053E  C18D  F19F         	movff	?___ftmul+2,RF_LoadCode@High+2
  3222                           
  3223                           ;RF.c: 240: RF_SyncLow = (unsigned int) Low;
  3224  000542  C19A  F180         	movff	RF_LoadCode@Low,___fttol@f1
  3225  000546  C19B  F181         	movff	RF_LoadCode@Low+1,___fttol@f1+1
  3226  00054A  C19C  F182         	movff	RF_LoadCode@Low+2,___fttol@f1+2
  3227  00054E  ECD0  F01E         	call	___fttol	;wreg free
  3228  000552  C180  F0BD         	movff	?___fttol,_RF_SyncLow
  3229  000556  C181  F0BE         	movff	?___fttol+1,_RF_SyncLow+1
  3230                           
  3231                           ;RF.c: 241: RF_SyncHigh = (unsigned int) High;
  3232  00055A  C19D  F180         	movff	RF_LoadCode@High,___fttol@f1
  3233  00055E  C19E  F181         	movff	RF_LoadCode@High+1,___fttol@f1+1
  3234  000562  C19F  F182         	movff	RF_LoadCode@High+2,___fttol@f1+2
  3235  000566  ECD0  F01E         	call	___fttol	;wreg free
  3236  00056A  C180  F0BB         	movff	?___fttol,_RF_SyncHigh
  3237  00056E  C181  F0BC         	movff	?___fttol+1,_RF_SyncHigh+1
  3238                           
  3239                           ;RF.c: 243: RF_CodeSize = RF_CalculateCodesize();
  3240  000572  ECC3  F008         	call	_RF_CalculateCodesize	;wreg free
  3241  000576  0100               	movlb	0	; () banked
  3242  000578  6FC6               	movwf	_RF_CodeSize& (0+255),b
  3243                           
  3244                           ; BSR set to: 0
  3245  00057A  0012               	return		;funcret
  3246  00057C                     __end_of_RF_LoadCode:
  3247                           	opt stack 0
  3248                           tblptru	equ	0xFF8
  3249                           tblptrh	equ	0xFF7
  3250                           tblptrl	equ	0xFF6
  3251                           tablat	equ	0xFF5
  3252                           postinc0	equ	0xFEE
  3253                           wreg	equ	0xFE8
  3254                           postdec1	equ	0xFE5
  3255                           fsr1h	equ	0xFE2
  3256                           fsr1l	equ	0xFE1
  3257                           status	equ	0xFD8
  3258                           
  3259 ;; *************** function _RF_CalculateCodesize *****************
  3260 ;; Defined at:
  3261 ;;		line 251 in file "RF.c"
  3262 ;; Parameters:    Size  Location     Type
  3263 ;;		None
  3264 ;; Auto vars:     Size  Location     Type
  3265 ;;  i               1    0[BANK1 ] unsigned char 
  3266 ;; Return value:  Size  Location     Type
  3267 ;;                  1    wreg      unsigned char 
  3268 ;; Registers used:
  3269 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3270 ;; Tracked objects:
  3271 ;;		On entry : 0/0
  3272 ;;		On exit  : 0/0
  3273 ;;		Unchanged: 0/0
  3274 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3275 ;;      Params:         0       0       0       0       0
  3276 ;;      Locals:         0       0       1       0       0
  3277 ;;      Temps:          0       0       0       0       0
  3278 ;;      Totals:         0       0       1       0       0
  3279 ;;Total ram usage:        1 bytes
  3280 ;; Hardware stack levels used:    1
  3281 ;; Hardware stack levels required when called:   12
  3282 ;; This function calls:
  3283 ;;		Nothing
  3284 ;; This function is called by:
  3285 ;;		_RF_LoadCode
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text7
  3290  001186                     __ptext7:
  3291                           	opt stack 0
  3292  001186                     _RF_CalculateCodesize:
  3293                           	opt stack 17
  3294                           
  3295                           ;RF.c: 253: unsigned char i;
  3296                           ;RF.c: 255: for(i=0; i<128;i++)
  3297                           
  3298                           ; BSR set to: 0
  3299                           ;incstack = 0
  3300  001186  0E00               	movlw	0
  3301  001188  0101               	movlb	1	; () banked
  3302  00118A  6F80               	movwf	RF_CalculateCodesize@i& (0+255),b
  3303  00118C                     l7556:
  3304                           
  3305                           ; BSR set to: 1
  3306  00118C  0E7F               	movlw	127
  3307  00118E  0101               	movlb	1	; () banked
  3308  001190  6580               	cpfsgt	RF_CalculateCodesize@i& (0+255),b
  3309  001192  D001               	goto	l7560
  3310  001194  D018               	goto	l7570
  3311  001196                     l7560:
  3312                           
  3313                           ; BSR set to: 1
  3314                           ;RF.c: 256: {
  3315                           ;RF.c: 257: if(RF_SavedTiming[i] == 0)
  3316  001196  0101               	movlb	1	; () banked
  3317  001198  5180               	movf	RF_CalculateCodesize@i& (0+255),w,b
  3318  00119A  0D02               	mullw	2
  3319  00119C  0E00               	movlw	0
  3320  00119E  24F3               	addwf	prodl,w,c
  3321  0011A0  6EF6               	movwf	tblptrl,c
  3322  0011A2  0E25               	movlw	37
  3323  0011A4  20F4               	addwfc	prodh,w,c
  3324  0011A6  6EF7               	movwf	tblptrh,c
  3325  0011A8  6AF8               	clrf	tblptru,c
  3326  0011AA  0E00               	movlw	0
  3327  0011AC  22F8               	addwfc	tblptru,f,c
  3328  0011AE  0009               	tblrd		*+
  3329  0011B0  50F5               	movf	tablat,w,c
  3330  0011B2  0009               	tblrd		*+
  3331  0011B4  10F5               	iorwf	tablat,w,c
  3332  0011B6  A4D8               	btfss	status,2,c
  3333  0011B8  D003               	goto	l7566
  3334                           
  3335                           ; BSR set to: 1
  3336                           ;RF.c: 258: {
  3337                           ;RF.c: 259: return i;
  3338  0011BA  0101               	movlb	1	; () banked
  3339  0011BC  5180               	movf	RF_CalculateCodesize@i& (0+255),w,b
  3340                           
  3341                           ; BSR set to: 1
  3342  0011BE  0012               	return	
  3343  0011C0                     l7566:
  3344                           
  3345                           ; BSR set to: 1
  3346  0011C0  0101               	movlb	1	; () banked
  3347  0011C2  2B80               	incf	RF_CalculateCodesize@i& (0+255),f,b
  3348  0011C4  D7E3               	goto	l7556
  3349  0011C6                     l7570:
  3350                           
  3351                           ; BSR set to: 1
  3352                           ;RF.c: 260: }
  3353                           ;RF.c: 261: }
  3354                           ;RF.c: 262: return 128;
  3355  0011C6  0E80               	movlw	128
  3356  0011C8  0012               	return	
  3357  0011CA                     __end_of_RF_CalculateCodesize:
  3358                           	opt stack 0
  3359                           tblptru	equ	0xFF8
  3360                           tblptrh	equ	0xFF7
  3361                           tblptrl	equ	0xFF6
  3362                           tablat	equ	0xFF5
  3363                           prodh	equ	0xFF4
  3364                           prodl	equ	0xFF3
  3365                           postinc0	equ	0xFEE
  3366                           wreg	equ	0xFE8
  3367                           postdec1	equ	0xFE5
  3368                           fsr1h	equ	0xFE2
  3369                           fsr1l	equ	0xFE1
  3370                           status	equ	0xFD8
  3371                           
  3372 ;; *************** function _MTR_Rotate *****************
  3373 ;; Defined at:
  3374 ;;		line 104 in file "MOTOR.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;		None
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;		None
  3379 ;; Return value:  Size  Location     Type
  3380 ;;		None               void
  3381 ;; Registers used:
  3382 ;;		wreg, status,2, status,0, cstack
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3388 ;;      Params:         0       0       0       0       0
  3389 ;;      Locals:         0       0       0       0       0
  3390 ;;      Temps:          0       0       0       0       0
  3391 ;;      Totals:         0       0       0       0       0
  3392 ;;Total ram usage:        0 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:   14
  3395 ;; This function calls:
  3396 ;;		_MSC_DelayMS
  3397 ;;		_MTR_IN1
  3398 ;;		_MTR_IN2
  3399 ;; This function is called by:
  3400 ;;		_main
  3401 ;; This function uses a non-reentrant model
  3402 ;;
  3403                           
  3404                           	psect	text8
  3405  000F12                     __ptext8:
  3406                           	opt stack 0
  3407  000F12                     _MTR_Rotate:
  3408                           	opt stack 16
  3409                           
  3410                           ;MOTOR.c: 106: if(DC_Motor == 0)
  3411                           
  3412                           ; BSR set to: 1
  3413                           ;incstack = 0
  3414  000F12  0100               	movlb	0	; () banked
  3415  000F14  51C1               	movf	_DC_Motor& (0+255),w,b
  3416  000F16  0100               	movlb	0	; () banked
  3417  000F18  A4D8               	btfss	status,2,c
  3418  000F1A  D013               	goto	l7812
  3419                           
  3420                           ; BSR set to: 0
  3421                           ;MOTOR.c: 107: {
  3422                           ;MOTOR.c: 108: MTR_IN1(0);
  3423  000F1C  0E00               	movlw	0
  3424  000F1E  ECDB  F00B         	call	_MTR_IN1
  3425                           
  3426                           ;MOTOR.c: 109: MTR_IN2(1);
  3427  000F22  0E01               	movlw	1
  3428  000F24  ECD0  F00B         	call	_MTR_IN2
  3429                           
  3430                           ;MOTOR.c: 110: MSC_DelayMS(100);
  3431  000F28  0E64               	movlw	100
  3432  000F2A  0101               	movlb	1	; () banked
  3433  000F2C  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  3434  000F2E  0E00               	movlw	0
  3435  000F30  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  3436  000F32  0E00               	movlw	0
  3437  000F34  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  3438  000F36  0E00               	movlw	0
  3439  000F38  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  3440  000F3A  ECBC  F007         	call	_MSC_DelayMS	;wreg free
  3441                           
  3442                           ;MOTOR.c: 111: DC_Motor = 1;
  3443  000F3E  0E01               	movlw	1
  3444  000F40  D012               	goto	L1
  3445  000F42                     l7812:
  3446                           
  3447                           ; BSR set to: 0
  3448                           ;MOTOR.c: 113: else
  3449                           ;MOTOR.c: 114: {
  3450                           ;MOTOR.c: 115: MTR_IN1(1);
  3451  000F42  0E01               	movlw	1
  3452  000F44  ECDB  F00B         	call	_MTR_IN1
  3453                           
  3454                           ;MOTOR.c: 116: MTR_IN2(0);
  3455  000F48  0E00               	movlw	0
  3456  000F4A  ECD0  F00B         	call	_MTR_IN2
  3457                           
  3458                           ;MOTOR.c: 117: MSC_DelayMS(100);
  3459  000F4E  0E64               	movlw	100
  3460  000F50  0101               	movlb	1	; () banked
  3461  000F52  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  3462  000F54  0E00               	movlw	0
  3463  000F56  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  3464  000F58  0E00               	movlw	0
  3465  000F5A  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  3466  000F5C  0E00               	movlw	0
  3467  000F5E  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  3468  000F60  ECBC  F007         	call	_MSC_DelayMS	;wreg free
  3469                           
  3470                           ;MOTOR.c: 118: DC_Motor = 0;
  3471  000F64  0E00               	movlw	0
  3472  000F66                     L1:
  3473  000F66  0100               	movlb	0	; () banked
  3474  000F68  6FC1               	movwf	_DC_Motor& (0+255),b
  3475                           
  3476                           ; BSR set to: 0
  3477                           ;MOTOR.c: 119: }
  3478                           ;MOTOR.c: 120: MTR_IN1(0);
  3479                           
  3480                           ; BSR set to: 0
  3481  000F6A  0E00               	movlw	0
  3482  000F6C  ECDB  F00B         	call	_MTR_IN1
  3483                           
  3484                           ;MOTOR.c: 121: MTR_IN2(0);
  3485  000F70  0E00               	movlw	0
  3486  000F72  ECD0  F00B         	call	_MTR_IN2
  3487  000F76  0012               	return		;funcret
  3488  000F78                     __end_of_MTR_Rotate:
  3489                           	opt stack 0
  3490                           tblptru	equ	0xFF8
  3491                           tblptrh	equ	0xFF7
  3492                           tblptrl	equ	0xFF6
  3493                           tablat	equ	0xFF5
  3494                           prodh	equ	0xFF4
  3495                           prodl	equ	0xFF3
  3496                           postinc0	equ	0xFEE
  3497                           wreg	equ	0xFE8
  3498                           postdec1	equ	0xFE5
  3499                           fsr1h	equ	0xFE2
  3500                           fsr1l	equ	0xFE1
  3501                           status	equ	0xFD8
  3502                           
  3503 ;; *************** function _MTR_IN2 *****************
  3504 ;; Defined at:
  3505 ;;		line 71 in file "MOTOR.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;  state           1    wreg     unsigned char 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  state           1    0[BANK1 ] unsigned char 
  3510 ;; Return value:  Size  Location     Type
  3511 ;;		None               void
  3512 ;; Registers used:
  3513 ;;		wreg, status,2, status,0
  3514 ;; Tracked objects:
  3515 ;;		On entry : 0/0
  3516 ;;		On exit  : 0/0
  3517 ;;		Unchanged: 0/0
  3518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3519 ;;      Params:         0       0       0       0       0
  3520 ;;      Locals:         0       0       1       0       0
  3521 ;;      Temps:          0       0       0       0       0
  3522 ;;      Totals:         0       0       1       0       0
  3523 ;;Total ram usage:        1 bytes
  3524 ;; Hardware stack levels used:    1
  3525 ;; Hardware stack levels required when called:   12
  3526 ;; This function calls:
  3527 ;;		Nothing
  3528 ;; This function is called by:
  3529 ;;		_MTR_Rotate
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text9
  3534  0017A0                     __ptext9:
  3535                           	opt stack 0
  3536  0017A0                     _MTR_IN2:
  3537                           	opt stack 17
  3538                           
  3539                           ;incstack = 0
  3540                           ;MTR_IN2@state stored from wreg
  3541  0017A0  0101               	movlb	1	; () banked
  3542  0017A2  6F80               	movwf	MTR_IN2@state& (0+255),b
  3543                           
  3544                           ;MOTOR.c: 73: if(state)
  3545  0017A4  0101               	movlb	1	; () banked
  3546  0017A6  5180               	movf	MTR_IN2@state& (0+255),w,b
  3547  0017A8  0101               	movlb	1	; () banked
  3548  0017AA  B4D8               	btfsc	status,2,c
  3549  0017AC  D002               	goto	l7584
  3550                           
  3551                           ; BSR set to: 1
  3552                           ;MOTOR.c: 74: {
  3553                           ;MOTOR.c: 75: LATC |= 0x04;
  3554  0017AE  848B               	bsf	3979,2,c	;volatile
  3555                           
  3556                           ;MOTOR.c: 76: }
  3557  0017B0  0012               	return	
  3558  0017B2                     l7584:
  3559                           
  3560                           ; BSR set to: 1
  3561                           ;MOTOR.c: 77: else
  3562                           ;MOTOR.c: 78: {
  3563                           ;MOTOR.c: 79: LATC &= ~0x04;
  3564  0017B2  948B               	bcf	3979,2,c	;volatile
  3565  0017B4  0012               	return	
  3566  0017B6                     __end_of_MTR_IN2:
  3567                           	opt stack 0
  3568                           tblptru	equ	0xFF8
  3569                           tblptrh	equ	0xFF7
  3570                           tblptrl	equ	0xFF6
  3571                           tablat	equ	0xFF5
  3572                           prodh	equ	0xFF4
  3573                           prodl	equ	0xFF3
  3574                           postinc0	equ	0xFEE
  3575                           wreg	equ	0xFE8
  3576                           postdec1	equ	0xFE5
  3577                           fsr1h	equ	0xFE2
  3578                           fsr1l	equ	0xFE1
  3579                           status	equ	0xFD8
  3580                           
  3581 ;; *************** function _MTR_IN1 *****************
  3582 ;; Defined at:
  3583 ;;		line 54 in file "MOTOR.c"
  3584 ;; Parameters:    Size  Location     Type
  3585 ;;  state           1    wreg     unsigned char 
  3586 ;; Auto vars:     Size  Location     Type
  3587 ;;  state           1    0[BANK1 ] unsigned char 
  3588 ;; Return value:  Size  Location     Type
  3589 ;;		None               void
  3590 ;; Registers used:
  3591 ;;		wreg, status,2, status,0
  3592 ;; Tracked objects:
  3593 ;;		On entry : 0/0
  3594 ;;		On exit  : 0/0
  3595 ;;		Unchanged: 0/0
  3596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3597 ;;      Params:         0       0       0       0       0
  3598 ;;      Locals:         0       0       1       0       0
  3599 ;;      Temps:          0       0       0       0       0
  3600 ;;      Totals:         0       0       1       0       0
  3601 ;;Total ram usage:        1 bytes
  3602 ;; Hardware stack levels used:    1
  3603 ;; Hardware stack levels required when called:   12
  3604 ;; This function calls:
  3605 ;;		Nothing
  3606 ;; This function is called by:
  3607 ;;		_MTR_Rotate
  3608 ;; This function uses a non-reentrant model
  3609 ;;
  3610                           
  3611                           	psect	text10
  3612  0017B6                     __ptext10:
  3613                           	opt stack 0
  3614  0017B6                     _MTR_IN1:
  3615                           	opt stack 17
  3616                           
  3617                           ; BSR set to: 1
  3618                           ;incstack = 0
  3619                           ;MTR_IN1@state stored from wreg
  3620  0017B6  0101               	movlb	1	; () banked
  3621  0017B8  6F80               	movwf	MTR_IN1@state& (0+255),b
  3622                           
  3623                           ;MOTOR.c: 56: if(state)
  3624  0017BA  0101               	movlb	1	; () banked
  3625  0017BC  5180               	movf	MTR_IN1@state& (0+255),w,b
  3626  0017BE  0101               	movlb	1	; () banked
  3627  0017C0  B4D8               	btfsc	status,2,c
  3628  0017C2  D002               	goto	l7578
  3629                           
  3630                           ; BSR set to: 1
  3631                           ;MOTOR.c: 57: {
  3632                           ;MOTOR.c: 58: LATB |= 0x08;
  3633  0017C4  868A               	bsf	3978,3,c	;volatile
  3634                           
  3635                           ;MOTOR.c: 59: }
  3636  0017C6  0012               	return	
  3637  0017C8                     l7578:
  3638                           
  3639                           ; BSR set to: 1
  3640                           ;MOTOR.c: 60: else
  3641                           ;MOTOR.c: 61: {
  3642                           ;MOTOR.c: 62: LATB &= ~0x08;
  3643  0017C8  968A               	bcf	3978,3,c	;volatile
  3644  0017CA  0012               	return	
  3645  0017CC                     __end_of_MTR_IN1:
  3646                           	opt stack 0
  3647                           tblptru	equ	0xFF8
  3648                           tblptrh	equ	0xFF7
  3649                           tblptrl	equ	0xFF6
  3650                           tablat	equ	0xFF5
  3651                           prodh	equ	0xFF4
  3652                           prodl	equ	0xFF3
  3653                           postinc0	equ	0xFEE
  3654                           wreg	equ	0xFE8
  3655                           postdec1	equ	0xFE5
  3656                           fsr1h	equ	0xFE2
  3657                           fsr1l	equ	0xFE1
  3658                           status	equ	0xFD8
  3659                           
  3660 ;; *************** function _MSC_BlinkLED *****************
  3661 ;; Defined at:
  3662 ;;		line 1158 in file "MISC.c"
  3663 ;; Parameters:    Size  Location     Type
  3664 ;;  blink           2   13[BANK1 ] unsigned int 
  3665 ;;  speed           2   15[BANK1 ] unsigned int 
  3666 ;; Auto vars:     Size  Location     Type
  3667 ;;  i               2   19[BANK1 ] unsigned int 
  3668 ;; Return value:  Size  Location     Type
  3669 ;;		None               void
  3670 ;; Registers used:
  3671 ;;		wreg, status,2, status,0, cstack
  3672 ;; Tracked objects:
  3673 ;;		On entry : 0/0
  3674 ;;		On exit  : 0/0
  3675 ;;		Unchanged: 0/0
  3676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3677 ;;      Params:         0       0       4       0       0
  3678 ;;      Locals:         0       0       2       0       0
  3679 ;;      Temps:          0       0       2       0       0
  3680 ;;      Totals:         0       0       8       0       0
  3681 ;;Total ram usage:        8 bytes
  3682 ;; Hardware stack levels used:    1
  3683 ;; Hardware stack levels required when called:   14
  3684 ;; This function calls:
  3685 ;;		_MSC_DelayMS
  3686 ;; This function is called by:
  3687 ;;		_main
  3688 ;; This function uses a non-reentrant model
  3689 ;;
  3690                           
  3691                           	psect	text11
  3692  001138                     __ptext11:
  3693                           	opt stack 0
  3694  001138                     _MSC_BlinkLED:
  3695                           	opt stack 16
  3696                           
  3697                           ;MISC.c: 1160: unsigned int i;
  3698                           ;MISC.c: 1162: for(i=0;i<(blink<<1);i++)
  3699                           
  3700                           ; BSR set to: 1
  3701                           ;incstack = 0
  3702  001138  0E00               	movlw	0
  3703  00113A  0101               	movlb	1	; () banked
  3704  00113C  6F94               	movwf	(MSC_BlinkLED@i+1)& (0+255),b
  3705  00113E  0E00               	movlw	0
  3706  001140  6F93               	movwf	MSC_BlinkLED@i& (0+255),b
  3707  001142  D00E               	goto	l7804
  3708  001144                     l7798:
  3709                           
  3710                           ; BSR set to: 1
  3711                           ;MISC.c: 1163: {
  3712                           ;MISC.c: 1164: MSC_DelayMS(speed);
  3713  001144  C18F  F184         	movff	MSC_BlinkLED@speed,MSC_DelayMS@US
  3714  001148  C190  F185         	movff	MSC_BlinkLED@speed+1,MSC_DelayMS@US+1
  3715  00114C  0101               	movlb	1	; () banked
  3716  00114E  6B86               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  3717  001150  6B87               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  3718  001152  ECBC  F007         	call	_MSC_DelayMS	;wreg free
  3719                           
  3720                           ;MISC.c: 1165: (LATC ^= 0x10);
  3721  001156  0E10               	movlw	16
  3722  001158  1A8B               	xorwf	3979,f,c	;volatile
  3723  00115A  0101               	movlb	1	; () banked
  3724  00115C  4B93               	infsnz	MSC_BlinkLED@i& (0+255),f,b
  3725  00115E  2B94               	incf	(MSC_BlinkLED@i+1)& (0+255),f,b
  3726  001160                     l7804:
  3727                           
  3728                           ; BSR set to: 1
  3729  001160  C18D  F191         	movff	MSC_BlinkLED@blink,??_MSC_BlinkLED
  3730  001164  C18E  F192         	movff	MSC_BlinkLED@blink+1,??_MSC_BlinkLED+1
  3731  001168  90D8               	bcf	status,0,c
  3732  00116A  0101               	movlb	1	; () banked
  3733  00116C  3791               	rlcf	??_MSC_BlinkLED& (0+255),f,b
  3734  00116E  3792               	rlcf	(??_MSC_BlinkLED+1)& (0+255),f,b
  3735  001170  0101               	movlb	1	; () banked
  3736  001172  5191               	movf	??_MSC_BlinkLED& (0+255),w,b
  3737  001174  0101               	movlb	1	; () banked
  3738  001176  5D93               	subwf	MSC_BlinkLED@i& (0+255),w,b
  3739  001178  0101               	movlb	1	; () banked
  3740  00117A  5192               	movf	(??_MSC_BlinkLED+1)& (0+255),w,b
  3741  00117C  0101               	movlb	1	; () banked
  3742  00117E  5994               	subwfb	(MSC_BlinkLED@i+1)& (0+255),w,b
  3743  001180  B0D8               	btfsc	status,0,c
  3744  001182  0012               	return	
  3745  001184  D7DF               	goto	l7798
  3746  001186                     __end_of_MSC_BlinkLED:
  3747                           	opt stack 0
  3748                           tblptru	equ	0xFF8
  3749                           tblptrh	equ	0xFF7
  3750                           tblptrl	equ	0xFF6
  3751                           tablat	equ	0xFF5
  3752                           prodh	equ	0xFF4
  3753                           prodl	equ	0xFF3
  3754                           postinc0	equ	0xFEE
  3755                           wreg	equ	0xFE8
  3756                           postdec1	equ	0xFE5
  3757                           fsr1h	equ	0xFE2
  3758                           fsr1l	equ	0xFE1
  3759                           status	equ	0xFD8
  3760                           
  3761 ;; *************** function _MSC_DelayMS *****************
  3762 ;; Defined at:
  3763 ;;		line 47 in file "MISC.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;  US              4    4[BANK1 ] long 
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;  i               4    9[BANK1 ] long 
  3768 ;; Return value:  Size  Location     Type
  3769 ;;		None               void
  3770 ;; Registers used:
  3771 ;;		wreg, status,2, status,0, cstack
  3772 ;; Tracked objects:
  3773 ;;		On entry : 0/0
  3774 ;;		On exit  : 0/0
  3775 ;;		Unchanged: 0/0
  3776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3777 ;;      Params:         0       0       4       0       0
  3778 ;;      Locals:         0       0       4       0       0
  3779 ;;      Temps:          0       0       1       0       0
  3780 ;;      Totals:         0       0       9       0       0
  3781 ;;Total ram usage:        9 bytes
  3782 ;; Hardware stack levels used:    1
  3783 ;; Hardware stack levels required when called:   13
  3784 ;; This function calls:
  3785 ;;		_MSC_DelayNOP
  3786 ;; This function is called by:
  3787 ;;		_main
  3788 ;;		_MTR_Rotate
  3789 ;;		_MSC_BlinkLED
  3790 ;; This function uses a non-reentrant model
  3791 ;;
  3792                           
  3793                           	psect	text12
  3794  000F78                     __ptext12:
  3795                           	opt stack 0
  3796  000F78                     _MSC_DelayMS:
  3797                           	opt stack 16
  3798                           
  3799                           ;MISC.c: 49: long i;
  3800                           ;MISC.c: 51: for(i=0; i<US; i++)
  3801                           
  3802                           ; BSR set to: 1
  3803                           ;incstack = 0
  3804  000F78  0E00               	movlw	0
  3805  000F7A  0101               	movlb	1	; () banked
  3806  000F7C  6F89               	movwf	MSC_DelayMS@i& (0+255),b
  3807  000F7E  0E00               	movlw	0
  3808  000F80  6F8A               	movwf	(MSC_DelayMS@i+1)& (0+255),b
  3809  000F82  0E00               	movlw	0
  3810  000F84  6F8B               	movwf	(MSC_DelayMS@i+2)& (0+255),b
  3811  000F86  0E00               	movlw	0
  3812  000F88  6F8C               	movwf	(MSC_DelayMS@i+3)& (0+255),b
  3813  000F8A  D00E               	goto	l7482
  3814  000F8C                     l7478:
  3815                           
  3816                           ; BSR set to: 1
  3817                           ;MISC.c: 52: {
  3818                           ;MISC.c: 53: MSC_DelayNOP(466);
  3819  000F8C  0E01               	movlw	1
  3820  000F8E  0101               	movlb	1	; () banked
  3821  000F90  6F81               	movwf	(MSC_DelayNOP@NOPs+1)& (0+255),b
  3822  000F92  0ED2               	movlw	210
  3823  000F94  6F80               	movwf	MSC_DelayNOP@NOPs& (0+255),b
  3824  000F96  EC64  F00A         	call	_MSC_DelayNOP	;wreg free
  3825  000F9A  0E01               	movlw	1
  3826  000F9C  0101               	movlb	1	; () banked
  3827  000F9E  2789               	addwf	MSC_DelayMS@i& (0+255),f,b
  3828  000FA0  0E00               	movlw	0
  3829  000FA2  238A               	addwfc	(MSC_DelayMS@i+1)& (0+255),f,b
  3830  000FA4  238B               	addwfc	(MSC_DelayMS@i+2)& (0+255),f,b
  3831  000FA6  238C               	addwfc	(MSC_DelayMS@i+3)& (0+255),f,b
  3832  000FA8                     l7482:
  3833                           
  3834                           ; BSR set to: 1
  3835  000FA8  0101               	movlb	1	; () banked
  3836  000FAA  5184               	movf	MSC_DelayMS@US& (0+255),w,b
  3837  000FAC  0101               	movlb	1	; () banked
  3838  000FAE  5D89               	subwf	MSC_DelayMS@i& (0+255),w,b
  3839  000FB0  0101               	movlb	1	; () banked
  3840  000FB2  5185               	movf	(MSC_DelayMS@US+1)& (0+255),w,b
  3841  000FB4  0101               	movlb	1	; () banked
  3842  000FB6  598A               	subwfb	(MSC_DelayMS@i+1)& (0+255),w,b
  3843  000FB8  0101               	movlb	1	; () banked
  3844  000FBA  5186               	movf	(MSC_DelayMS@US+2)& (0+255),w,b
  3845  000FBC  0101               	movlb	1	; () banked
  3846  000FBE  598B               	subwfb	(MSC_DelayMS@i+2)& (0+255),w,b
  3847  000FC0  0101               	movlb	1	; () banked
  3848  000FC2  518C               	movf	(MSC_DelayMS@i+3)& (0+255),w,b
  3849  000FC4  0A80               	xorlw	128
  3850  000FC6  0101               	movlb	1	; () banked
  3851  000FC8  6F88               	movwf	??_MSC_DelayMS& (0+255),b
  3852  000FCA  0101               	movlb	1	; () banked
  3853  000FCC  5187               	movf	(MSC_DelayMS@US+3)& (0+255),w,b
  3854  000FCE  0A80               	xorlw	128
  3855  000FD0  0101               	movlb	1	; () banked
  3856  000FD2  5988               	subwfb	??_MSC_DelayMS& (0+255),w,b
  3857  000FD4  B0D8               	btfsc	status,0,c
  3858  000FD6  0012               	return	
  3859  000FD8  D7D9               	goto	l7478
  3860  000FDA                     __end_of_MSC_DelayMS:
  3861                           	opt stack 0
  3862                           tblptru	equ	0xFF8
  3863                           tblptrh	equ	0xFF7
  3864                           tblptrl	equ	0xFF6
  3865                           tablat	equ	0xFF5
  3866                           prodh	equ	0xFF4
  3867                           prodl	equ	0xFF3
  3868                           postinc0	equ	0xFEE
  3869                           wreg	equ	0xFE8
  3870                           postdec1	equ	0xFE5
  3871                           fsr1h	equ	0xFE2
  3872                           fsr1l	equ	0xFE1
  3873                           status	equ	0xFD8
  3874                           
  3875 ;; *************** function _MSC_DelayNOP *****************
  3876 ;; Defined at:
  3877 ;;		line 62 in file "MISC.c"
  3878 ;; Parameters:    Size  Location     Type
  3879 ;;  NOPs            2    0[BANK1 ] unsigned int 
  3880 ;; Auto vars:     Size  Location     Type
  3881 ;;  i               2    2[BANK1 ] unsigned int 
  3882 ;; Return value:  Size  Location     Type
  3883 ;;		None               void
  3884 ;; Registers used:
  3885 ;;		wreg, status,2, status,0
  3886 ;; Tracked objects:
  3887 ;;		On entry : 0/0
  3888 ;;		On exit  : 0/0
  3889 ;;		Unchanged: 0/0
  3890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3891 ;;      Params:         0       0       2       0       0
  3892 ;;      Locals:         0       0       2       0       0
  3893 ;;      Temps:          0       0       0       0       0
  3894 ;;      Totals:         0       0       4       0       0
  3895 ;;Total ram usage:        4 bytes
  3896 ;; Hardware stack levels used:    1
  3897 ;; Hardware stack levels required when called:   12
  3898 ;; This function calls:
  3899 ;;		Nothing
  3900 ;; This function is called by:
  3901 ;;		_MSC_DelayMS
  3902 ;; This function uses a non-reentrant model
  3903 ;;
  3904                           
  3905                           	psect	text13
  3906  0014C8                     __ptext13:
  3907                           	opt stack 0
  3908  0014C8                     _MSC_DelayNOP:
  3909                           	opt stack 16
  3910                           
  3911                           ;MISC.c: 64: unsigned int i;
  3912                           ;MISC.c: 65: for(i=0; i<NOPs; i++)
  3913                           
  3914                           ; BSR set to: 1
  3915                           ;incstack = 0
  3916  0014C8  0E00               	movlw	0
  3917  0014CA  0101               	movlb	1	; () banked
  3918  0014CC  6F83               	movwf	(MSC_DelayNOP@i+1)& (0+255),b
  3919  0014CE  0E00               	movlw	0
  3920  0014D0  6F82               	movwf	MSC_DelayNOP@i& (0+255),b
  3921  0014D2  D004               	goto	l7382
  3922  0014D4                     l596:
  3923                           
  3924                           ; BSR set to: 1
  3925                           ;MISC.c: 66: {
  3926                           ;MISC.c: 67: __nop();
  3927  0014D4  F000               	nop	
  3928  0014D6  0101               	movlb	1	; () banked
  3929  0014D8  4B82               	infsnz	MSC_DelayNOP@i& (0+255),f,b
  3930  0014DA  2B83               	incf	(MSC_DelayNOP@i+1)& (0+255),f,b
  3931  0014DC                     l7382:
  3932                           
  3933                           ; BSR set to: 1
  3934  0014DC  0101               	movlb	1	; () banked
  3935  0014DE  5180               	movf	MSC_DelayNOP@NOPs& (0+255),w,b
  3936  0014E0  0101               	movlb	1	; () banked
  3937  0014E2  5D82               	subwf	MSC_DelayNOP@i& (0+255),w,b
  3938  0014E4  0101               	movlb	1	; () banked
  3939  0014E6  5181               	movf	(MSC_DelayNOP@NOPs+1)& (0+255),w,b
  3940  0014E8  0101               	movlb	1	; () banked
  3941  0014EA  5983               	subwfb	(MSC_DelayNOP@i+1)& (0+255),w,b
  3942  0014EC  B0D8               	btfsc	status,0,c
  3943  0014EE  0012               	return	
  3944  0014F0  D7F1               	goto	l596
  3945  0014F2                     __end_of_MSC_DelayNOP:
  3946                           	opt stack 0
  3947                           tblptru	equ	0xFF8
  3948                           tblptrh	equ	0xFF7
  3949                           tblptrl	equ	0xFF6
  3950                           tablat	equ	0xFF5
  3951                           prodh	equ	0xFF4
  3952                           prodl	equ	0xFF3
  3953                           postinc0	equ	0xFEE
  3954                           wreg	equ	0xFE8
  3955                           postdec1	equ	0xFE5
  3956                           fsr1h	equ	0xFE2
  3957                           fsr1l	equ	0xFE1
  3958                           status	equ	0xFD8
  3959                           
  3960 ;; *************** function _Init_System *****************
  3961 ;; Defined at:
  3962 ;;		line 153 in file "USER.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;		None
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;		None
  3967 ;; Return value:  Size  Location     Type
  3968 ;;		None               void
  3969 ;; Registers used:
  3970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3976 ;;      Params:         0       0       0       0       0
  3977 ;;      Locals:         0       0       0       0       0
  3978 ;;      Temps:          0       0       0       0       0
  3979 ;;      Totals:         0       0       0       0       0
  3980 ;;Total ram usage:        0 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:   17
  3983 ;; This function calls:
  3984 ;;		_BUT_ReadButton
  3985 ;;		_IR_ReadReceiver
  3986 ;;		_InitADC
  3987 ;;		_InitButton
  3988 ;;		_InitFlash
  3989 ;;		_InitIR
  3990 ;;		_InitLDO
  3991 ;;		_InitMOTOR
  3992 ;;		_InitRF
  3993 ;;		_InitTimers
  3994 ;; This function is called by:
  3995 ;;		_main
  3996 ;; This function uses a non-reentrant model
  3997 ;;
  3998                           
  3999                           	psect	text14
  4000  00140C                     __ptext14:
  4001                           	opt stack 0
  4002  00140C                     _Init_System:
  4003                           	opt stack 13
  4004                           
  4005                           ;USER.c: 155: InitTimers();
  4006                           
  4007                           ; BSR set to: 1
  4008                           ;incstack = 0
  4009  00140C  ECF5  F00C         	call	_InitTimers	;wreg free
  4010                           
  4011                           ;USER.c: 156: InitRF();
  4012  001410  EC26  F009         	call	_InitRF	;wreg free
  4013                           
  4014                           ;USER.c: 157: InitButton();
  4015  001414  ECFC  F00C         	call	_InitButton	;wreg free
  4016                           
  4017                           ;USER.c: 158: InitIR();
  4018  001418  EC8F  F00B         	call	_InitIR	;wreg free
  4019                           
  4020                           ;USER.c: 159: InitLDO();
  4021  00141C  EC2B  F00D         	call	_InitLDO	;wreg free
  4022                           
  4023                           ;USER.c: 160: InitMOTOR();
  4024  001420  EC35  F00D         	call	_InitMOTOR	;wreg free
  4025                           
  4026                           ;USER.c: 161: InitFlash();
  4027  001424  EC37  F00D         	call	_InitFlash	;wreg free
  4028                           
  4029                           ;USER.c: 162: InitADC();
  4030  001428  ECE2  F00A         	call	_InitADC	;wreg free
  4031                           
  4032                           ;USER.c: 164: BUT_ReadButton();
  4033  00142C  EC9C  F009         	call	_BUT_ReadButton	;wreg free
  4034                           
  4035                           ;USER.c: 165: IR_ReadReceiver();
  4036  001430  ECB7  F009         	call	_IR_ReadReceiver	;wreg free
  4037                           
  4038                           ;USER.c: 166: INTCONbits.RBIF = 0;
  4039  001434  90F2               	bcf	intcon,0,c	;volatile
  4040                           
  4041                           ;USER.c: 169: RCONbits.IPEN = 1;
  4042  001436  8ED0               	bsf	4048,7,c	;volatile
  4043                           
  4044                           ;USER.c: 170: INTCONbits.GIE = 1;
  4045  001438  8EF2               	bsf	intcon,7,c	;volatile
  4046                           
  4047                           ;USER.c: 171: INTCONbits.PEIE = 1;
  4048  00143A  8CF2               	bsf	intcon,6,c	;volatile
  4049  00143C  0012               	return		;funcret
  4050  00143E                     __end_of_Init_System:
  4051                           	opt stack 0
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           prodh	equ	0xFF4
  4057                           prodl	equ	0xFF3
  4058                           intcon	equ	0xFF2
  4059                           postinc0	equ	0xFEE
  4060                           wreg	equ	0xFE8
  4061                           postdec1	equ	0xFE5
  4062                           fsr1h	equ	0xFE2
  4063                           fsr1l	equ	0xFE1
  4064                           status	equ	0xFD8
  4065                           
  4066 ;; *************** function _InitTimers *****************
  4067 ;; Defined at:
  4068 ;;		line 304 in file "TIMERS.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;		None
  4071 ;; Auto vars:     Size  Location     Type
  4072 ;;		None
  4073 ;; Return value:  Size  Location     Type
  4074 ;;		None               void
  4075 ;; Registers used:
  4076 ;;		wreg, status,2, status,0, cstack
  4077 ;; Tracked objects:
  4078 ;;		On entry : 0/0
  4079 ;;		On exit  : 0/0
  4080 ;;		Unchanged: 0/0
  4081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4082 ;;      Params:         0       0       0       0       0
  4083 ;;      Locals:         0       0       0       0       0
  4084 ;;      Temps:          0       0       0       0       0
  4085 ;;      Totals:         0       0       0       0       0
  4086 ;;Total ram usage:        0 bytes
  4087 ;; Hardware stack levels used:    1
  4088 ;; Hardware stack levels required when called:   16
  4089 ;; This function calls:
  4090 ;;		_InitTimer0
  4091 ;;		_InitTimer1
  4092 ;;		_InitTimer2
  4093 ;; This function is called by:
  4094 ;;		_Init_System
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           	psect	text15
  4099  0019EA                     __ptext15:
  4100                           	opt stack 0
  4101  0019EA                     _InitTimers:
  4102                           	opt stack 13
  4103                           
  4104                           ;TIMERS.c: 306: InitTimer0();
  4105                           
  4106                           ;incstack = 0
  4107  0019EA  EC52  F00B         	call	_InitTimer0	;wreg free
  4108                           
  4109                           ;TIMERS.c: 307: InitTimer1();
  4110  0019EE  EC81  F00B         	call	_InitTimer1	;wreg free
  4111                           
  4112                           ;TIMERS.c: 308: InitTimer2();
  4113  0019F2  EC63  F00B         	call	_InitTimer2	;wreg free
  4114  0019F6  0012               	return		;funcret
  4115  0019F8                     __end_of_InitTimers:
  4116                           	opt stack 0
  4117                           tblptru	equ	0xFF8
  4118                           tblptrh	equ	0xFF7
  4119                           tblptrl	equ	0xFF6
  4120                           tablat	equ	0xFF5
  4121                           prodh	equ	0xFF4
  4122                           prodl	equ	0xFF3
  4123                           intcon	equ	0xFF2
  4124                           postinc0	equ	0xFEE
  4125                           wreg	equ	0xFE8
  4126                           postdec1	equ	0xFE5
  4127                           fsr1h	equ	0xFE2
  4128                           fsr1l	equ	0xFE1
  4129                           status	equ	0xFD8
  4130                           
  4131 ;; *************** function _InitTimer2 *****************
  4132 ;; Defined at:
  4133 ;;		line 348 in file "TIMERS.c"
  4134 ;; Parameters:    Size  Location     Type
  4135 ;;		None
  4136 ;; Auto vars:     Size  Location     Type
  4137 ;;		None
  4138 ;; Return value:  Size  Location     Type
  4139 ;;		None               void
  4140 ;; Registers used:
  4141 ;;		wreg, status,2, cstack
  4142 ;; Tracked objects:
  4143 ;;		On entry : 0/0
  4144 ;;		On exit  : 0/0
  4145 ;;		Unchanged: 0/0
  4146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4147 ;;      Params:         0       0       0       0       0
  4148 ;;      Locals:         0       0       0       0       0
  4149 ;;      Temps:          0       0       0       0       0
  4150 ;;      Totals:         0       0       0       0       0
  4151 ;;Total ram usage:        0 bytes
  4152 ;; Hardware stack levels used:    1
  4153 ;; Hardware stack levels required when called:   13
  4154 ;; This function calls:
  4155 ;;		_TMR_Timer2
  4156 ;;		_TMR_Timer2Int
  4157 ;; This function is called by:
  4158 ;;		_InitTimers
  4159 ;; This function uses a non-reentrant model
  4160 ;;
  4161                           
  4162                           	psect	text16
  4163  0016C6                     __ptext16:
  4164                           	opt stack 0
  4165  0016C6                     _InitTimer2:
  4166                           	opt stack 15
  4167                           
  4168                           ;TIMERS.c: 350: TMR_Timer2(0);
  4169                           
  4170                           ;incstack = 0
  4171  0016C6  0E00               	movlw	0
  4172  0016C8  ECF1  F00B         	call	_TMR_Timer2
  4173                           
  4174                           ;TIMERS.c: 351: T2CONbits.TOUTPS = 0b1111;
  4175  0016CC  86CA               	bsf	4042,3,c	;volatile
  4176  0016CE  88CA               	bsf	4042,4,c	;volatile
  4177  0016D0  8ACA               	bsf	4042,5,c	;volatile
  4178  0016D2  8CCA               	bsf	4042,6,c	;volatile
  4179                           
  4180                           ;TIMERS.c: 352: T2CONbits.T2CKPS = 0b11;
  4181  0016D4  0E03               	movlw	3
  4182  0016D6  12CA               	iorwf	4042,f,c	;volatile
  4183                           
  4184                           ;TIMERS.c: 353: IPR1bits.TMR2IP = 0;
  4185  0016D8  929F               	bcf	3999,1,c	;volatile
  4186                           
  4187                           ;TIMERS.c: 354: PR2 = 0xFF;
  4188  0016DA  68CB               	setf	4043,c	;volatile
  4189                           
  4190                           ;TIMERS.c: 355: TMR_Timer2Int(1);
  4191  0016DC  0E01               	movlw	1
  4192  0016DE  ECE6  F00B         	call	_TMR_Timer2Int
  4193  0016E2  0012               	return		;funcret
  4194  0016E4                     __end_of_InitTimer2:
  4195                           	opt stack 0
  4196                           tblptru	equ	0xFF8
  4197                           tblptrh	equ	0xFF7
  4198                           tblptrl	equ	0xFF6
  4199                           tablat	equ	0xFF5
  4200                           prodh	equ	0xFF4
  4201                           prodl	equ	0xFF3
  4202                           intcon	equ	0xFF2
  4203                           postinc0	equ	0xFEE
  4204                           wreg	equ	0xFE8
  4205                           postdec1	equ	0xFE5
  4206                           fsr1h	equ	0xFE2
  4207                           fsr1l	equ	0xFE1
  4208                           status	equ	0xFD8
  4209                           
  4210 ;; *************** function _TMR_Timer2Int *****************
  4211 ;; Defined at:
  4212 ;;		line 246 in file "TIMERS.c"
  4213 ;; Parameters:    Size  Location     Type
  4214 ;;  state           1    wreg     unsigned char 
  4215 ;; Auto vars:     Size  Location     Type
  4216 ;;  state           1    0[BANK1 ] unsigned char 
  4217 ;; Return value:  Size  Location     Type
  4218 ;;		None               void
  4219 ;; Registers used:
  4220 ;;		wreg, status,2
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4226 ;;      Params:         0       0       0       0       0
  4227 ;;      Locals:         0       0       1       0       0
  4228 ;;      Temps:          0       0       0       0       0
  4229 ;;      Totals:         0       0       1       0       0
  4230 ;;Total ram usage:        1 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; Hardware stack levels required when called:   12
  4233 ;; This function calls:
  4234 ;;		Nothing
  4235 ;; This function is called by:
  4236 ;;		_InitTimer2
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           	psect	text17
  4241  0017CC                     __ptext17:
  4242                           	opt stack 0
  4243  0017CC                     _TMR_Timer2Int:
  4244                           	opt stack 15
  4245                           
  4246                           ;incstack = 0
  4247                           ;TMR_Timer2Int@state stored from wreg
  4248  0017CC  0101               	movlb	1	; () banked
  4249  0017CE  6F80               	movwf	TMR_Timer2Int@state& (0+255),b
  4250                           
  4251                           ;TIMERS.c: 248: if(state)
  4252  0017D0  0101               	movlb	1	; () banked
  4253  0017D2  5180               	movf	TMR_Timer2Int@state& (0+255),w,b
  4254  0017D4  0101               	movlb	1	; () banked
  4255  0017D6  B4D8               	btfsc	status,2,c
  4256  0017D8  D002               	goto	l1074
  4257                           
  4258                           ; BSR set to: 1
  4259                           ;TIMERS.c: 249: {
  4260                           ;TIMERS.c: 251: PIE1bits.TMR2IE = 1;
  4261  0017DA  829D               	bsf	3997,1,c	;volatile
  4262                           
  4263                           ;TIMERS.c: 252: }
  4264  0017DC  0012               	return	
  4265  0017DE                     l1074:
  4266                           
  4267                           ; BSR set to: 1
  4268                           ;TIMERS.c: 253: else
  4269                           ;TIMERS.c: 254: {
  4270                           ;TIMERS.c: 256: PIE1bits.TMR2IE = 0;
  4271  0017DE  929D               	bcf	3997,1,c	;volatile
  4272  0017E0  0012               	return	
  4273  0017E2                     __end_of_TMR_Timer2Int:
  4274                           	opt stack 0
  4275                           tblptru	equ	0xFF8
  4276                           tblptrh	equ	0xFF7
  4277                           tblptrl	equ	0xFF6
  4278                           tablat	equ	0xFF5
  4279                           prodh	equ	0xFF4
  4280                           prodl	equ	0xFF3
  4281                           intcon	equ	0xFF2
  4282                           postinc0	equ	0xFEE
  4283                           wreg	equ	0xFE8
  4284                           postdec1	equ	0xFE5
  4285                           fsr1h	equ	0xFE2
  4286                           fsr1l	equ	0xFE1
  4287                           status	equ	0xFD8
  4288                           
  4289 ;; *************** function _TMR_Timer2 *****************
  4290 ;; Defined at:
  4291 ;;		line 125 in file "TIMERS.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;  state           1    wreg     unsigned char 
  4294 ;; Auto vars:     Size  Location     Type
  4295 ;;  state           1    0[BANK1 ] unsigned char 
  4296 ;; Return value:  Size  Location     Type
  4297 ;;		None               void
  4298 ;; Registers used:
  4299 ;;		wreg, status,2
  4300 ;; Tracked objects:
  4301 ;;		On entry : 0/0
  4302 ;;		On exit  : 0/0
  4303 ;;		Unchanged: 0/0
  4304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4305 ;;      Params:         0       0       0       0       0
  4306 ;;      Locals:         0       0       1       0       0
  4307 ;;      Temps:          0       0       0       0       0
  4308 ;;      Totals:         0       0       1       0       0
  4309 ;;Total ram usage:        1 bytes
  4310 ;; Hardware stack levels used:    1
  4311 ;; Hardware stack levels required when called:   12
  4312 ;; This function calls:
  4313 ;;		Nothing
  4314 ;; This function is called by:
  4315 ;;		_InitTimer2
  4316 ;; This function uses a non-reentrant model
  4317 ;;
  4318                           
  4319                           	psect	text18
  4320  0017E2                     __ptext18:
  4321                           	opt stack 0
  4322  0017E2                     _TMR_Timer2:
  4323                           	opt stack 15
  4324                           
  4325                           ; BSR set to: 1
  4326                           ;incstack = 0
  4327                           ;TMR_Timer2@state stored from wreg
  4328  0017E2  0101               	movlb	1	; () banked
  4329  0017E4  6F80               	movwf	TMR_Timer2@state& (0+255),b
  4330                           
  4331                           ;TIMERS.c: 127: if(state)
  4332  0017E6  0101               	movlb	1	; () banked
  4333  0017E8  5180               	movf	TMR_Timer2@state& (0+255),w,b
  4334  0017EA  0101               	movlb	1	; () banked
  4335  0017EC  B4D8               	btfsc	status,2,c
  4336  0017EE  D002               	goto	l1044
  4337                           
  4338                           ; BSR set to: 1
  4339                           ;TIMERS.c: 128: {
  4340                           ;TIMERS.c: 130: T2CONbits.TMR2ON = 1;
  4341  0017F0  84CA               	bsf	4042,2,c	;volatile
  4342                           
  4343                           ;TIMERS.c: 131: }
  4344  0017F2  0012               	return	
  4345  0017F4                     l1044:
  4346                           
  4347                           ; BSR set to: 1
  4348                           ;TIMERS.c: 132: else
  4349                           ;TIMERS.c: 133: {
  4350                           ;TIMERS.c: 135: T2CONbits.TMR2ON = 0;
  4351  0017F4  94CA               	bcf	4042,2,c	;volatile
  4352  0017F6  0012               	return	
  4353  0017F8                     __end_of_TMR_Timer2:
  4354                           	opt stack 0
  4355                           tblptru	equ	0xFF8
  4356                           tblptrh	equ	0xFF7
  4357                           tblptrl	equ	0xFF6
  4358                           tablat	equ	0xFF5
  4359                           prodh	equ	0xFF4
  4360                           prodl	equ	0xFF3
  4361                           intcon	equ	0xFF2
  4362                           postinc0	equ	0xFEE
  4363                           wreg	equ	0xFE8
  4364                           postdec1	equ	0xFE5
  4365                           fsr1h	equ	0xFE2
  4366                           fsr1l	equ	0xFE1
  4367                           status	equ	0xFD8
  4368                           
  4369 ;; *************** function _InitTimer1 *****************
  4370 ;; Defined at:
  4371 ;;		line 333 in file "TIMERS.c"
  4372 ;; Parameters:    Size  Location     Type
  4373 ;;		None
  4374 ;; Auto vars:     Size  Location     Type
  4375 ;;		None
  4376 ;; Return value:  Size  Location     Type
  4377 ;;		None               void
  4378 ;; Registers used:
  4379 ;;		wreg, status,2, status,0, cstack
  4380 ;; Tracked objects:
  4381 ;;		On entry : 0/0
  4382 ;;		On exit  : 0/0
  4383 ;;		Unchanged: 0/0
  4384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4385 ;;      Params:         0       0       0       0       0
  4386 ;;      Locals:         0       0       0       0       0
  4387 ;;      Temps:          0       0       0       0       0
  4388 ;;      Totals:         0       0       0       0       0
  4389 ;;Total ram usage:        0 bytes
  4390 ;; Hardware stack levels used:    1
  4391 ;; Hardware stack levels required when called:   15
  4392 ;; This function calls:
  4393 ;;		_TMR_ResetTimer1
  4394 ;;		_TMR_Timer1
  4395 ;;		_TMR_Timer1Function
  4396 ;;		_TMR_Timer1Int
  4397 ;; This function is called by:
  4398 ;;		_InitTimers
  4399 ;; This function uses a non-reentrant model
  4400 ;;
  4401                           
  4402                           	psect	text19
  4403  001702                     __ptext19:
  4404                           	opt stack 0
  4405  001702                     _InitTimer1:
  4406                           	opt stack 13
  4407                           
  4408                           ;TIMERS.c: 335: TMR_Timer1(0);
  4409                           
  4410                           ; BSR set to: 1
  4411                           ;incstack = 0
  4412  001702  0E00               	movlw	0
  4413  001704  EC07  F00C         	call	_TMR_Timer1
  4414                           
  4415                           ;TIMERS.c: 336: TMR_ResetTimer1();
  4416  001708  EC79  F00A         	call	_TMR_ResetTimer1	;wreg free
  4417                           
  4418                           ;TIMERS.c: 337: T1CONbits.RD16 = 1;
  4419  00170C  8ECD               	bsf	4045,7,c	;volatile
  4420                           
  4421                           ;TIMERS.c: 338: TMR_Timer1Function(16);
  4422  00170E  0E10               	movlw	16
  4423  001710  EC1F  F00A         	call	_TMR_Timer1Function
  4424                           
  4425                           ;TIMERS.c: 339: IPR1bits.TMR1IP = 0;
  4426  001714  909F               	bcf	3999,0,c	;volatile
  4427                           
  4428                           ;TIMERS.c: 340: TMR_Timer1Int(1);
  4429  001716  0E01               	movlw	1
  4430  001718  ECFC  F00B         	call	_TMR_Timer1Int
  4431  00171C  0012               	return		;funcret
  4432  00171E                     __end_of_InitTimer1:
  4433                           	opt stack 0
  4434                           tblptru	equ	0xFF8
  4435                           tblptrh	equ	0xFF7
  4436                           tblptrl	equ	0xFF6
  4437                           tablat	equ	0xFF5
  4438                           prodh	equ	0xFF4
  4439                           prodl	equ	0xFF3
  4440                           intcon	equ	0xFF2
  4441                           postinc0	equ	0xFEE
  4442                           wreg	equ	0xFE8
  4443                           postdec1	equ	0xFE5
  4444                           fsr1h	equ	0xFE2
  4445                           fsr1l	equ	0xFE1
  4446                           status	equ	0xFD8
  4447                           
  4448 ;; *************** function _TMR_Timer1Int *****************
  4449 ;; Defined at:
  4450 ;;		line 227 in file "TIMERS.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;  state           1    wreg     unsigned char 
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;  state           1    0[BANK1 ] unsigned char 
  4455 ;; Return value:  Size  Location     Type
  4456 ;;		None               void
  4457 ;; Registers used:
  4458 ;;		wreg, status,2
  4459 ;; Tracked objects:
  4460 ;;		On entry : 0/0
  4461 ;;		On exit  : 0/0
  4462 ;;		Unchanged: 0/0
  4463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4464 ;;      Params:         0       0       0       0       0
  4465 ;;      Locals:         0       0       1       0       0
  4466 ;;      Temps:          0       0       0       0       0
  4467 ;;      Totals:         0       0       1       0       0
  4468 ;;Total ram usage:        1 bytes
  4469 ;; Hardware stack levels used:    1
  4470 ;; Hardware stack levels required when called:   12
  4471 ;; This function calls:
  4472 ;;		Nothing
  4473 ;; This function is called by:
  4474 ;;		_InitTimer1
  4475 ;; This function uses a non-reentrant model
  4476 ;;
  4477                           
  4478                           	psect	text20
  4479  0017F8                     __ptext20:
  4480                           	opt stack 0
  4481  0017F8                     _TMR_Timer1Int:
  4482                           	opt stack 15
  4483                           
  4484                           ;incstack = 0
  4485                           ;TMR_Timer1Int@state stored from wreg
  4486  0017F8  0101               	movlb	1	; () banked
  4487  0017FA  6F80               	movwf	TMR_Timer1Int@state& (0+255),b
  4488                           
  4489                           ;TIMERS.c: 229: if(state)
  4490  0017FC  0101               	movlb	1	; () banked
  4491  0017FE  5180               	movf	TMR_Timer1Int@state& (0+255),w,b
  4492  001800  0101               	movlb	1	; () banked
  4493  001802  B4D8               	btfsc	status,2,c
  4494  001804  D002               	goto	l1069
  4495                           
  4496                           ; BSR set to: 1
  4497                           ;TIMERS.c: 230: {
  4498                           ;TIMERS.c: 232: PIE1bits.TMR1IE = 1;
  4499  001806  809D               	bsf	3997,0,c	;volatile
  4500                           
  4501                           ;TIMERS.c: 233: }
  4502  001808  0012               	return	
  4503  00180A                     l1069:
  4504                           
  4505                           ; BSR set to: 1
  4506                           ;TIMERS.c: 234: else
  4507                           ;TIMERS.c: 235: {
  4508                           ;TIMERS.c: 237: PIE1bits.TMR1IE = 0;
  4509  00180A  909D               	bcf	3997,0,c	;volatile
  4510  00180C  0012               	return	
  4511  00180E                     __end_of_TMR_Timer1Int:
  4512                           	opt stack 0
  4513                           tblptru	equ	0xFF8
  4514                           tblptrh	equ	0xFF7
  4515                           tblptrl	equ	0xFF6
  4516                           tablat	equ	0xFF5
  4517                           prodh	equ	0xFF4
  4518                           prodl	equ	0xFF3
  4519                           intcon	equ	0xFF2
  4520                           postinc0	equ	0xFEE
  4521                           wreg	equ	0xFE8
  4522                           postdec1	equ	0xFE5
  4523                           fsr1h	equ	0xFE2
  4524                           fsr1l	equ	0xFE1
  4525                           status	equ	0xFD8
  4526                           
  4527 ;; *************** function _TMR_Timer1Function *****************
  4528 ;; Defined at:
  4529 ;;		line 402 in file "TIMERS.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;  mode            1    wreg     unsigned char 
  4532 ;; Auto vars:     Size  Location     Type
  4533 ;;  mode            1    2[BANK1 ] unsigned char 
  4534 ;; Return value:  Size  Location     Type
  4535 ;;		None               void
  4536 ;; Registers used:
  4537 ;;		wreg, status,2, status,0, cstack
  4538 ;; Tracked objects:
  4539 ;;		On entry : 0/0
  4540 ;;		On exit  : 0/0
  4541 ;;		Unchanged: 0/0
  4542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4543 ;;      Params:         0       0       0       0       0
  4544 ;;      Locals:         0       0       1       0       0
  4545 ;;      Temps:          0       0       0       0       0
  4546 ;;      Totals:         0       0       1       0       0
  4547 ;;Total ram usage:        1 bytes
  4548 ;; Hardware stack levels used:    1
  4549 ;; Hardware stack levels required when called:   14
  4550 ;; This function calls:
  4551 ;;		_TMR_ResetTimer1
  4552 ;;		_TMR_Timer1
  4553 ;;		_TMR_Timer1Osc
  4554 ;; This function is called by:
  4555 ;;		_InitTimer1
  4556 ;; This function uses a non-reentrant model
  4557 ;;
  4558                           
  4559                           	psect	text21
  4560  00143E                     __ptext21:
  4561                           	opt stack 0
  4562  00143E                     _TMR_Timer1Function:
  4563                           	opt stack 13
  4564                           
  4565                           ; BSR set to: 1
  4566                           ;incstack = 0
  4567                           ;TMR_Timer1Function@mode stored from wreg
  4568  00143E  0101               	movlb	1	; () banked
  4569  001440  6F82               	movwf	TMR_Timer1Function@mode& (0+255),b
  4570                           
  4571                           ;TIMERS.c: 404: TMR_Timer1(0);
  4572  001442  0E00               	movlw	0
  4573  001444  EC07  F00C         	call	_TMR_Timer1
  4574                           
  4575                           ;TIMERS.c: 405: if(mode == 15)
  4576  001448  0E0F               	movlw	15
  4577  00144A  0101               	movlb	1	; () banked
  4578  00144C  1982               	xorwf	TMR_Timer1Function@mode& (0+255),w,b
  4579  00144E  A4D8               	btfss	status,2,c
  4580  001450  D006               	goto	l7310
  4581                           
  4582                           ; BSR set to: 1
  4583                           ;TIMERS.c: 406: {
  4584                           ;TIMERS.c: 407: T1CONbits.T1CKPS = 0b00;
  4585  001452  0ECF               	movlw	-49
  4586  001454  16CD               	andwf	4045,f,c	;volatile
  4587                           
  4588                           ; BSR set to: 1
  4589                           ;TIMERS.c: 408: TMR_Timer1Osc(1);
  4590  001456  0E01               	movlw	1
  4591  001458  EC72  F00B         	call	_TMR_Timer1Osc
  4592                           
  4593                           ;TIMERS.c: 409: }
  4594  00145C  D005               	goto	l7314
  4595  00145E                     l7310:
  4596                           
  4597                           ;TIMERS.c: 410: else
  4598                           ;TIMERS.c: 411: {
  4599                           ;TIMERS.c: 412: T1CONbits.T1CKPS = 0b11;
  4600  00145E  0E30               	movlw	48
  4601  001460  12CD               	iorwf	4045,f,c	;volatile
  4602                           
  4603                           ;TIMERS.c: 413: TMR_Timer1Osc(0);
  4604  001462  0E00               	movlw	0
  4605  001464  EC72  F00B         	call	_TMR_Timer1Osc
  4606  001468                     l7314:
  4607                           
  4608                           ;TIMERS.c: 414: }
  4609                           ;TIMERS.c: 415: TMR_ResetTimer1();
  4610  001468  EC79  F00A         	call	_TMR_ResetTimer1	;wreg free
  4611  00146C  0012               	return		;funcret
  4612  00146E                     __end_of_TMR_Timer1Function:
  4613                           	opt stack 0
  4614                           tblptru	equ	0xFF8
  4615                           tblptrh	equ	0xFF7
  4616                           tblptrl	equ	0xFF6
  4617                           tablat	equ	0xFF5
  4618                           prodh	equ	0xFF4
  4619                           prodl	equ	0xFF3
  4620                           intcon	equ	0xFF2
  4621                           postinc0	equ	0xFEE
  4622                           wreg	equ	0xFE8
  4623                           postdec1	equ	0xFE5
  4624                           fsr1h	equ	0xFE2
  4625                           fsr1l	equ	0xFE1
  4626                           status	equ	0xFD8
  4627                           
  4628 ;; *************** function _TMR_Timer1Osc *****************
  4629 ;; Defined at:
  4630 ;;		line 265 in file "TIMERS.c"
  4631 ;; Parameters:    Size  Location     Type
  4632 ;;  state           1    wreg     unsigned char 
  4633 ;; Auto vars:     Size  Location     Type
  4634 ;;  state           1    0[BANK1 ] unsigned char 
  4635 ;; Return value:  Size  Location     Type
  4636 ;;		None               void
  4637 ;; Registers used:
  4638 ;;		wreg, status,2
  4639 ;; Tracked objects:
  4640 ;;		On entry : 0/0
  4641 ;;		On exit  : 0/0
  4642 ;;		Unchanged: 0/0
  4643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4644 ;;      Params:         0       0       0       0       0
  4645 ;;      Locals:         0       0       1       0       0
  4646 ;;      Temps:          0       0       0       0       0
  4647 ;;      Totals:         0       0       1       0       0
  4648 ;;Total ram usage:        1 bytes
  4649 ;; Hardware stack levels used:    1
  4650 ;; Hardware stack levels required when called:   12
  4651 ;; This function calls:
  4652 ;;		Nothing
  4653 ;; This function is called by:
  4654 ;;		_TMR_Timer1Function
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           	psect	text22
  4659  0016E4                     __ptext22:
  4660                           	opt stack 0
  4661  0016E4                     _TMR_Timer1Osc:
  4662                           	opt stack 14
  4663                           
  4664                           ;incstack = 0
  4665                           ;TMR_Timer1Osc@state stored from wreg
  4666  0016E4  0101               	movlb	1	; () banked
  4667  0016E6  6F80               	movwf	TMR_Timer1Osc@state& (0+255),b
  4668                           
  4669                           ;TIMERS.c: 267: if(state)
  4670  0016E8  0101               	movlb	1	; () banked
  4671  0016EA  5180               	movf	TMR_Timer1Osc@state& (0+255),w,b
  4672  0016EC  0101               	movlb	1	; () banked
  4673  0016EE  B4D8               	btfsc	status,2,c
  4674  0016F0  D004               	goto	l1079
  4675                           
  4676                           ; BSR set to: 1
  4677                           ;TIMERS.c: 268: {
  4678                           ;TIMERS.c: 269: T1CONbits.T1RUN = 1;
  4679  0016F2  8CCD               	bsf	4045,6,c	;volatile
  4680                           
  4681                           ;TIMERS.c: 270: T1CONbits.T1OSCEN = 1;
  4682  0016F4  86CD               	bsf	4045,3,c	;volatile
  4683                           
  4684                           ;TIMERS.c: 271: T1CONbits.TMR1CS = 1;
  4685  0016F6  82CD               	bsf	4045,1,c	;volatile
  4686                           
  4687                           ;TIMERS.c: 272: }
  4688  0016F8  0012               	return	
  4689  0016FA                     l1079:
  4690                           
  4691                           ; BSR set to: 1
  4692                           ;TIMERS.c: 273: else
  4693                           ;TIMERS.c: 274: {
  4694                           ;TIMERS.c: 275: T1CONbits.T1RUN = 0;
  4695  0016FA  9CCD               	bcf	4045,6,c	;volatile
  4696                           
  4697                           ;TIMERS.c: 276: T1CONbits.T1OSCEN = 0;
  4698  0016FC  96CD               	bcf	4045,3,c	;volatile
  4699                           
  4700                           ;TIMERS.c: 277: T1CONbits.TMR1CS = 0;
  4701  0016FE  92CD               	bcf	4045,1,c	;volatile
  4702  001700  0012               	return	
  4703  001702                     __end_of_TMR_Timer1Osc:
  4704                           	opt stack 0
  4705                           tblptru	equ	0xFF8
  4706                           tblptrh	equ	0xFF7
  4707                           tblptrl	equ	0xFF6
  4708                           tablat	equ	0xFF5
  4709                           prodh	equ	0xFF4
  4710                           prodl	equ	0xFF3
  4711                           intcon	equ	0xFF2
  4712                           postinc0	equ	0xFEE
  4713                           wreg	equ	0xFE8
  4714                           postdec1	equ	0xFE5
  4715                           fsr1h	equ	0xFE2
  4716                           fsr1l	equ	0xFE1
  4717                           status	equ	0xFD8
  4718                           
  4719 ;; *************** function _TMR_ResetTimer1 *****************
  4720 ;; Defined at:
  4721 ;;		line 162 in file "TIMERS.c"
  4722 ;; Parameters:    Size  Location     Type
  4723 ;;		None
  4724 ;; Auto vars:     Size  Location     Type
  4725 ;;  TimerOn         1    1[BANK1 ] unsigned char 
  4726 ;; Return value:  Size  Location     Type
  4727 ;;		None               void
  4728 ;; Registers used:
  4729 ;;		wreg, status,2, cstack
  4730 ;; Tracked objects:
  4731 ;;		On entry : 0/0
  4732 ;;		On exit  : 0/0
  4733 ;;		Unchanged: 0/0
  4734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4735 ;;      Params:         0       0       0       0       0
  4736 ;;      Locals:         0       0       1       0       0
  4737 ;;      Temps:          0       0       0       0       0
  4738 ;;      Totals:         0       0       1       0       0
  4739 ;;Total ram usage:        1 bytes
  4740 ;; Hardware stack levels used:    1
  4741 ;; Hardware stack levels required when called:   13
  4742 ;; This function calls:
  4743 ;;		_TMR_Timer1
  4744 ;; This function is called by:
  4745 ;;		_InitTimer1
  4746 ;;		_TMR_Timer1Function
  4747 ;; This function uses a non-reentrant model
  4748 ;;
  4749                           
  4750                           	psect	text23
  4751  0014F2                     __ptext23:
  4752                           	opt stack 0
  4753  0014F2                     _TMR_ResetTimer1:
  4754                           	opt stack 13
  4755                           
  4756                           ;TIMERS.c: 164: unsigned char TimerOn = T1CONbits.TMR1ON;
  4757                           
  4758                           ; BSR set to: 1
  4759                           ;incstack = 0
  4760  0014F2  0E00               	movlw	0
  4761  0014F4  B0CD               	btfsc	4045,0,c	;volatile
  4762  0014F6  0E01               	movlw	1
  4763  0014F8  0101               	movlb	1	; () banked
  4764  0014FA  6F81               	movwf	TMR_ResetTimer1@TimerOn& (0+255),b
  4765                           
  4766                           ; BSR set to: 1
  4767                           ;TIMERS.c: 166: TMR_Timer1(0);
  4768  0014FC  0E00               	movlw	0
  4769  0014FE  EC07  F00C         	call	_TMR_Timer1
  4770                           
  4771                           ;TIMERS.c: 167: TMR1H = 0;
  4772  001502  0E00               	movlw	0
  4773  001504  6ECF               	movwf	4047,c	;volatile
  4774                           
  4775                           ;TIMERS.c: 168: TMR1L = 2;
  4776  001506  0E02               	movlw	2
  4777  001508  6ECE               	movwf	4046,c	;volatile
  4778                           
  4779                           ;TIMERS.c: 169: if(TimerOn)
  4780  00150A  0101               	movlb	1	; () banked
  4781  00150C  5181               	movf	TMR_ResetTimer1@TimerOn& (0+255),w,b
  4782  00150E  0101               	movlb	1	; () banked
  4783  001510  B4D8               	btfsc	status,2,c
  4784  001512  0012               	return	
  4785                           
  4786                           ; BSR set to: 1
  4787                           ;TIMERS.c: 170: {
  4788                           ;TIMERS.c: 171: TMR_Timer1(1);
  4789  001514  0E01               	movlw	1
  4790  001516  EC07  F00C         	call	_TMR_Timer1
  4791  00151A  0012               	return	
  4792  00151C                     __end_of_TMR_ResetTimer1:
  4793                           	opt stack 0
  4794                           tblptru	equ	0xFF8
  4795                           tblptrh	equ	0xFF7
  4796                           tblptrl	equ	0xFF6
  4797                           tablat	equ	0xFF5
  4798                           prodh	equ	0xFF4
  4799                           prodl	equ	0xFF3
  4800                           intcon	equ	0xFF2
  4801                           postinc0	equ	0xFEE
  4802                           wreg	equ	0xFE8
  4803                           postdec1	equ	0xFE5
  4804                           fsr1h	equ	0xFE2
  4805                           fsr1l	equ	0xFE1
  4806                           status	equ	0xFD8
  4807                           
  4808 ;; *************** function _TMR_Timer1 *****************
  4809 ;; Defined at:
  4810 ;;		line 106 in file "TIMERS.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;  state           1    wreg     unsigned char 
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;  state           1    0[BANK1 ] unsigned char 
  4815 ;; Return value:  Size  Location     Type
  4816 ;;		None               void
  4817 ;; Registers used:
  4818 ;;		wreg, status,2
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4824 ;;      Params:         0       0       0       0       0
  4825 ;;      Locals:         0       0       1       0       0
  4826 ;;      Temps:          0       0       0       0       0
  4827 ;;      Totals:         0       0       1       0       0
  4828 ;;Total ram usage:        1 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:   12
  4831 ;; This function calls:
  4832 ;;		Nothing
  4833 ;; This function is called by:
  4834 ;;		_TMR_ResetTimer1
  4835 ;;		_InitTimer1
  4836 ;;		_TMR_Timer1Function
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           	psect	text24
  4841  00180E                     __ptext24:
  4842                           	opt stack 0
  4843  00180E                     _TMR_Timer1:
  4844                           	opt stack 14
  4845                           
  4846                           ;incstack = 0
  4847                           ;TMR_Timer1@state stored from wreg
  4848  00180E  0101               	movlb	1	; () banked
  4849  001810  6F80               	movwf	TMR_Timer1@state& (0+255),b
  4850                           
  4851                           ;TIMERS.c: 108: if(state)
  4852  001812  0101               	movlb	1	; () banked
  4853  001814  5180               	movf	TMR_Timer1@state& (0+255),w,b
  4854  001816  0101               	movlb	1	; () banked
  4855  001818  B4D8               	btfsc	status,2,c
  4856  00181A  D002               	goto	l1039
  4857                           
  4858                           ; BSR set to: 1
  4859                           ;TIMERS.c: 109: {
  4860                           ;TIMERS.c: 111: T1CONbits.TMR1ON = 1;
  4861  00181C  80CD               	bsf	4045,0,c	;volatile
  4862                           
  4863                           ;TIMERS.c: 112: }
  4864  00181E  0012               	return	
  4865  001820                     l1039:
  4866                           
  4867                           ; BSR set to: 1
  4868                           ;TIMERS.c: 113: else
  4869                           ;TIMERS.c: 114: {
  4870                           ;TIMERS.c: 116: T1CONbits.TMR1ON = 0;
  4871  001820  90CD               	bcf	4045,0,c	;volatile
  4872  001822  0012               	return	
  4873  001824                     __end_of_TMR_Timer1:
  4874                           	opt stack 0
  4875                           tblptru	equ	0xFF8
  4876                           tblptrh	equ	0xFF7
  4877                           tblptrl	equ	0xFF6
  4878                           tablat	equ	0xFF5
  4879                           prodh	equ	0xFF4
  4880                           prodl	equ	0xFF3
  4881                           intcon	equ	0xFF2
  4882                           postinc0	equ	0xFEE
  4883                           wreg	equ	0xFE8
  4884                           postdec1	equ	0xFE5
  4885                           fsr1h	equ	0xFE2
  4886                           fsr1l	equ	0xFE1
  4887                           status	equ	0xFD8
  4888                           
  4889 ;; *************** function _InitTimer0 *****************
  4890 ;; Defined at:
  4891 ;;		line 316 in file "TIMERS.c"
  4892 ;; Parameters:    Size  Location     Type
  4893 ;;		None
  4894 ;; Auto vars:     Size  Location     Type
  4895 ;;		None
  4896 ;; Return value:  Size  Location     Type
  4897 ;;		None               void
  4898 ;; Registers used:
  4899 ;;		wreg, status,2, cstack
  4900 ;; Tracked objects:
  4901 ;;		On entry : 0/0
  4902 ;;		On exit  : 0/0
  4903 ;;		Unchanged: 0/0
  4904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4905 ;;      Params:         0       0       0       0       0
  4906 ;;      Locals:         0       0       0       0       0
  4907 ;;      Temps:          0       0       0       0       0
  4908 ;;      Totals:         0       0       0       0       0
  4909 ;;Total ram usage:        0 bytes
  4910 ;; Hardware stack levels used:    1
  4911 ;; Hardware stack levels required when called:   14
  4912 ;; This function calls:
  4913 ;;		_TMR_ResetTimer0
  4914 ;;		_TMR_Timer0
  4915 ;;		_TMR_Timer0Int
  4916 ;; This function is called by:
  4917 ;;		_InitTimers
  4918 ;; This function uses a non-reentrant model
  4919 ;;
  4920                           
  4921                           	psect	text25
  4922  0016A4                     __ptext25:
  4923                           	opt stack 0
  4924  0016A4                     _InitTimer0:
  4925                           	opt stack 14
  4926                           
  4927                           ;TIMERS.c: 318: TMR_Timer0(0);
  4928                           
  4929                           ; BSR set to: 1
  4930                           ;incstack = 0
  4931  0016A4  0E00               	movlw	0
  4932  0016A6  EC1D  F00C         	call	_TMR_Timer0
  4933                           
  4934                           ;TIMERS.c: 319: TMR_ResetTimer0();
  4935  0016AA  EC8E  F00A         	call	_TMR_ResetTimer0	;wreg free
  4936                           
  4937                           ;TIMERS.c: 320: T0CONbits.T08BIT = 0;
  4938  0016AE  9CD5               	bcf	4053,6,c	;volatile
  4939                           
  4940                           ;TIMERS.c: 321: T0CONbits.T0CS = 0;
  4941  0016B0  9AD5               	bcf	4053,5,c	;volatile
  4942                           
  4943                           ;TIMERS.c: 322: T0CONbits.PSA = 0;
  4944  0016B2  96D5               	bcf	4053,3,c	;volatile
  4945                           
  4946                           ;TIMERS.c: 323: T0CONbits.T0PS = 0b101;
  4947  0016B4  50D5               	movf	4053,w,c	;volatile
  4948  0016B6  0BF8               	andlw	-8
  4949  0016B8  0905               	iorlw	5
  4950  0016BA  6ED5               	movwf	4053,c	;volatile
  4951                           
  4952                           ;TIMERS.c: 324: INTCON2bits.TMR0IP = 1;
  4953  0016BC  84F1               	bsf	intcon2,2,c	;volatile
  4954                           
  4955                           ;TIMERS.c: 325: TMR_Timer0Int(1);
  4956  0016BE  0E01               	movlw	1
  4957  0016C0  EC12  F00C         	call	_TMR_Timer0Int
  4958  0016C4  0012               	return		;funcret
  4959  0016C6                     __end_of_InitTimer0:
  4960                           	opt stack 0
  4961                           tblptru	equ	0xFF8
  4962                           tblptrh	equ	0xFF7
  4963                           tblptrl	equ	0xFF6
  4964                           tablat	equ	0xFF5
  4965                           prodh	equ	0xFF4
  4966                           prodl	equ	0xFF3
  4967                           intcon	equ	0xFF2
  4968                           intcon2	equ	0xFF1
  4969                           postinc0	equ	0xFEE
  4970                           wreg	equ	0xFE8
  4971                           postdec1	equ	0xFE5
  4972                           fsr1h	equ	0xFE2
  4973                           fsr1l	equ	0xFE1
  4974                           status	equ	0xFD8
  4975                           
  4976 ;; *************** function _TMR_Timer0Int *****************
  4977 ;; Defined at:
  4978 ;;		line 208 in file "TIMERS.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;  state           1    wreg     unsigned char 
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;  state           1    0[BANK1 ] unsigned char 
  4983 ;; Return value:  Size  Location     Type
  4984 ;;		None               void
  4985 ;; Registers used:
  4986 ;;		wreg, status,2
  4987 ;; Tracked objects:
  4988 ;;		On entry : 0/0
  4989 ;;		On exit  : 0/0
  4990 ;;		Unchanged: 0/0
  4991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4992 ;;      Params:         0       0       0       0       0
  4993 ;;      Locals:         0       0       1       0       0
  4994 ;;      Temps:          0       0       0       0       0
  4995 ;;      Totals:         0       0       1       0       0
  4996 ;;Total ram usage:        1 bytes
  4997 ;; Hardware stack levels used:    1
  4998 ;; Hardware stack levels required when called:   12
  4999 ;; This function calls:
  5000 ;;		Nothing
  5001 ;; This function is called by:
  5002 ;;		_InitTimer0
  5003 ;; This function uses a non-reentrant model
  5004 ;;
  5005                           
  5006                           	psect	text26
  5007  001824                     __ptext26:
  5008                           	opt stack 0
  5009  001824                     _TMR_Timer0Int:
  5010                           	opt stack 15
  5011                           
  5012                           ;incstack = 0
  5013                           ;TMR_Timer0Int@state stored from wreg
  5014  001824  0101               	movlb	1	; () banked
  5015  001826  6F80               	movwf	TMR_Timer0Int@state& (0+255),b
  5016                           
  5017                           ;TIMERS.c: 210: if(state)
  5018  001828  0101               	movlb	1	; () banked
  5019  00182A  5180               	movf	TMR_Timer0Int@state& (0+255),w,b
  5020  00182C  0101               	movlb	1	; () banked
  5021  00182E  B4D8               	btfsc	status,2,c
  5022  001830  D002               	goto	l1064
  5023                           
  5024                           ; BSR set to: 1
  5025                           ;TIMERS.c: 211: {
  5026                           ;TIMERS.c: 213: INTCONbits.TMR0IE = 1;
  5027  001832  8AF2               	bsf	intcon,5,c	;volatile
  5028                           
  5029                           ;TIMERS.c: 214: }
  5030  001834  0012               	return	
  5031  001836                     l1064:
  5032                           
  5033                           ; BSR set to: 1
  5034                           ;TIMERS.c: 215: else
  5035                           ;TIMERS.c: 216: {
  5036                           ;TIMERS.c: 218: INTCONbits.TMR0IE = 0;
  5037  001836  9AF2               	bcf	intcon,5,c	;volatile
  5038  001838  0012               	return	
  5039  00183A                     __end_of_TMR_Timer0Int:
  5040                           	opt stack 0
  5041                           tblptru	equ	0xFF8
  5042                           tblptrh	equ	0xFF7
  5043                           tblptrl	equ	0xFF6
  5044                           tablat	equ	0xFF5
  5045                           prodh	equ	0xFF4
  5046                           prodl	equ	0xFF3
  5047                           intcon	equ	0xFF2
  5048                           intcon2	equ	0xFF1
  5049                           postinc0	equ	0xFEE
  5050                           wreg	equ	0xFE8
  5051                           postdec1	equ	0xFE5
  5052                           fsr1h	equ	0xFE2
  5053                           fsr1l	equ	0xFE1
  5054                           status	equ	0xFD8
  5055                           
  5056 ;; *************** function _TMR_ResetTimer0 *****************
  5057 ;; Defined at:
  5058 ;;		line 144 in file "TIMERS.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;		None
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  TimerOn         1    1[BANK1 ] unsigned char 
  5063 ;; Return value:  Size  Location     Type
  5064 ;;		None               void
  5065 ;; Registers used:
  5066 ;;		wreg, status,2, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : 0/0
  5069 ;;		On exit  : 0/0
  5070 ;;		Unchanged: 0/0
  5071 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5072 ;;      Params:         0       0       0       0       0
  5073 ;;      Locals:         0       0       1       0       0
  5074 ;;      Temps:          0       0       0       0       0
  5075 ;;      Totals:         0       0       1       0       0
  5076 ;;Total ram usage:        1 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:   13
  5079 ;; This function calls:
  5080 ;;		_TMR_Timer0
  5081 ;; This function is called by:
  5082 ;;		_InitTimer0
  5083 ;; This function uses a non-reentrant model
  5084 ;;
  5085                           
  5086                           	psect	text27
  5087  00151C                     __ptext27:
  5088                           	opt stack 0
  5089  00151C                     _TMR_ResetTimer0:
  5090                           	opt stack 14
  5091                           
  5092                           ;TIMERS.c: 146: unsigned char TimerOn = T0CONbits.TMR0ON;
  5093                           
  5094                           ; BSR set to: 1
  5095                           ;incstack = 0
  5096  00151C  0E00               	movlw	0
  5097  00151E  BED5               	btfsc	4053,7,c	;volatile
  5098  001520  0E01               	movlw	1
  5099  001522  0101               	movlb	1	; () banked
  5100  001524  6F81               	movwf	TMR_ResetTimer0@TimerOn& (0+255),b
  5101                           
  5102                           ; BSR set to: 1
  5103                           ;TIMERS.c: 148: TMR_Timer0(0);
  5104  001526  0E00               	movlw	0
  5105  001528  EC1D  F00C         	call	_TMR_Timer0
  5106                           
  5107                           ;TIMERS.c: 149: TMR0H = 0;
  5108  00152C  0E00               	movlw	0
  5109  00152E  6ED7               	movwf	4055,c	;volatile
  5110                           
  5111                           ;TIMERS.c: 150: TMR0L = 2;
  5112  001530  0E02               	movlw	2
  5113  001532  6ED6               	movwf	4054,c	;volatile
  5114                           
  5115                           ;TIMERS.c: 151: if(TimerOn)
  5116  001534  0101               	movlb	1	; () banked
  5117  001536  5181               	movf	TMR_ResetTimer0@TimerOn& (0+255),w,b
  5118  001538  0101               	movlb	1	; () banked
  5119  00153A  B4D8               	btfsc	status,2,c
  5120  00153C  0012               	return	
  5121                           
  5122                           ; BSR set to: 1
  5123                           ;TIMERS.c: 152: {
  5124                           ;TIMERS.c: 153: TMR_Timer0(1);
  5125  00153E  0E01               	movlw	1
  5126  001540  EC1D  F00C         	call	_TMR_Timer0
  5127  001544  0012               	return	
  5128  001546                     __end_of_TMR_ResetTimer0:
  5129                           	opt stack 0
  5130                           tblptru	equ	0xFF8
  5131                           tblptrh	equ	0xFF7
  5132                           tblptrl	equ	0xFF6
  5133                           tablat	equ	0xFF5
  5134                           prodh	equ	0xFF4
  5135                           prodl	equ	0xFF3
  5136                           intcon	equ	0xFF2
  5137                           intcon2	equ	0xFF1
  5138                           postinc0	equ	0xFEE
  5139                           wreg	equ	0xFE8
  5140                           postdec1	equ	0xFE5
  5141                           fsr1h	equ	0xFE2
  5142                           fsr1l	equ	0xFE1
  5143                           status	equ	0xFD8
  5144                           
  5145 ;; *************** function _TMR_Timer0 *****************
  5146 ;; Defined at:
  5147 ;;		line 87 in file "TIMERS.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;  state           1    wreg     unsigned char 
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;  state           1    0[BANK1 ] unsigned char 
  5152 ;; Return value:  Size  Location     Type
  5153 ;;		None               void
  5154 ;; Registers used:
  5155 ;;		wreg, status,2
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5161 ;;      Params:         0       0       0       0       0
  5162 ;;      Locals:         0       0       1       0       0
  5163 ;;      Temps:          0       0       0       0       0
  5164 ;;      Totals:         0       0       1       0       0
  5165 ;;Total ram usage:        1 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; Hardware stack levels required when called:   12
  5168 ;; This function calls:
  5169 ;;		Nothing
  5170 ;; This function is called by:
  5171 ;;		_TMR_ResetTimer0
  5172 ;;		_InitTimer0
  5173 ;; This function uses a non-reentrant model
  5174 ;;
  5175                           
  5176                           	psect	text28
  5177  00183A                     __ptext28:
  5178                           	opt stack 0
  5179  00183A                     _TMR_Timer0:
  5180                           	opt stack 15
  5181                           
  5182                           ;incstack = 0
  5183                           ;TMR_Timer0@state stored from wreg
  5184  00183A  0101               	movlb	1	; () banked
  5185  00183C  6F80               	movwf	TMR_Timer0@state& (0+255),b
  5186                           
  5187                           ;TIMERS.c: 89: if(state)
  5188  00183E  0101               	movlb	1	; () banked
  5189  001840  5180               	movf	TMR_Timer0@state& (0+255),w,b
  5190  001842  0101               	movlb	1	; () banked
  5191  001844  B4D8               	btfsc	status,2,c
  5192  001846  D002               	goto	l1034
  5193                           
  5194                           ; BSR set to: 1
  5195                           ;TIMERS.c: 90: {
  5196                           ;TIMERS.c: 92: T0CONbits.TMR0ON = 1;
  5197  001848  8ED5               	bsf	4053,7,c	;volatile
  5198                           
  5199                           ;TIMERS.c: 93: }
  5200  00184A  0012               	return	
  5201  00184C                     l1034:
  5202                           
  5203                           ; BSR set to: 1
  5204                           ;TIMERS.c: 94: else
  5205                           ;TIMERS.c: 95: {
  5206                           ;TIMERS.c: 97: T0CONbits.TMR0ON = 0;
  5207  00184C  9ED5               	bcf	4053,7,c	;volatile
  5208  00184E  0012               	return	
  5209  001850                     __end_of_TMR_Timer0:
  5210                           	opt stack 0
  5211                           tblptru	equ	0xFF8
  5212                           tblptrh	equ	0xFF7
  5213                           tblptrl	equ	0xFF6
  5214                           tablat	equ	0xFF5
  5215                           prodh	equ	0xFF4
  5216                           prodl	equ	0xFF3
  5217                           intcon	equ	0xFF2
  5218                           intcon2	equ	0xFF1
  5219                           postinc0	equ	0xFEE
  5220                           wreg	equ	0xFE8
  5221                           postdec1	equ	0xFE5
  5222                           fsr1h	equ	0xFE2
  5223                           fsr1l	equ	0xFE1
  5224                           status	equ	0xFD8
  5225                           
  5226 ;; *************** function _InitRF *****************
  5227 ;; Defined at:
  5228 ;;		line 177 in file "RF.c"
  5229 ;; Parameters:    Size  Location     Type
  5230 ;;		None
  5231 ;; Auto vars:     Size  Location     Type
  5232 ;;		None
  5233 ;; Return value:  Size  Location     Type
  5234 ;;		None               void
  5235 ;; Registers used:
  5236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5237 ;; Tracked objects:
  5238 ;;		On entry : 0/0
  5239 ;;		On exit  : 0/0
  5240 ;;		Unchanged: 0/0
  5241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5242 ;;      Params:         0       0       0       0       0
  5243 ;;      Locals:         0       0       0       0       0
  5244 ;;      Temps:          0       0       0       0       0
  5245 ;;      Totals:         0       0       0       0       0
  5246 ;;Total ram usage:        0 bytes
  5247 ;; Hardware stack levels used:    1
  5248 ;; Hardware stack levels required when called:   13
  5249 ;; This function calls:
  5250 ;;		_MSC_CleanBufferInt
  5251 ;;		_RF_DataInt
  5252 ;;		_RF_Receiver
  5253 ;;		_RF_SetBandwidth
  5254 ;;		_RF_SetSquelch
  5255 ;; This function is called by:
  5256 ;;		_Init_System
  5257 ;; This function uses a non-reentrant model
  5258 ;;
  5259                           
  5260                           	psect	text29
  5261  00124C                     __ptext29:
  5262                           	opt stack 0
  5263  00124C                     _InitRF:
  5264                           	opt stack 16
  5265                           
  5266                           ;RF.c: 179: RF_Receiver(1);
  5267                           
  5268                           ; BSR set to: 1
  5269                           ;incstack = 0
  5270  00124C  0E01               	movlw	1
  5271  00124E  EC33  F00C         	call	_RF_Receiver
  5272                           
  5273                           ;RF.c: 180: RF_SetBandwidth(2);
  5274  001252  0E02               	movlw	2
  5275  001254  EC80  F009         	call	_RF_SetBandwidth
  5276                           
  5277                           ;RF.c: 181: MSC_CleanBufferInt(&RF_DataTiming,128);
  5278  001258  0E00               	movlw	low _RF_DataTiming
  5279  00125A  0101               	movlb	1	; () banked
  5280  00125C  6F80               	movwf	MSC_CleanBufferInt@data& (0+255),b
  5281  00125E  0E03               	movlw	high _RF_DataTiming
  5282  001260  0101               	movlb	1	; () banked
  5283  001262  6F81               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  5284  001264  0E00               	movlw	0
  5285  001266  0101               	movlb	1	; () banked
  5286  001268  6F83               	movwf	(MSC_CleanBufferInt@count+1)& (0+255),b
  5287  00126A  0E80               	movlw	128
  5288  00126C  6F82               	movwf	MSC_CleanBufferInt@count& (0+255),b
  5289  00126E  EC48  F008         	call	_MSC_CleanBufferInt	;wreg free
  5290                           
  5291                           ;RF.c: 182: RF_SetSquelch(1);
  5292  001272  0E01               	movlw	1
  5293  001274  EC28  F00C         	call	_RF_SetSquelch
  5294                           
  5295                           ;RF.c: 183: INTCON3bits.INT1P = 1;
  5296  001278  8CF0               	bsf	intcon3,6,c	;volatile
  5297                           
  5298                           ;RF.c: 184: INTCON3bits.INT2P = 1;
  5299  00127A  8EF0               	bsf	intcon3,7,c	;volatile
  5300                           
  5301                           ;RF.c: 185: INTCON2bits.INTEDG1 = 1;
  5302  00127C  8AF1               	bsf	intcon2,5,c	;volatile
  5303                           
  5304                           ;RF.c: 186: INTCON2bits.INTEDG2 = 0;
  5305  00127E  98F1               	bcf	intcon2,4,c	;volatile
  5306                           
  5307                           ;RF.c: 187: RF_DataInt(1);
  5308  001280  0E01               	movlw	1
  5309  001282  EC9D  F00B         	call	_RF_DataInt
  5310  001286  0012               	return		;funcret
  5311  001288                     __end_of_InitRF:
  5312                           	opt stack 0
  5313                           tblptru	equ	0xFF8
  5314                           tblptrh	equ	0xFF7
  5315                           tblptrl	equ	0xFF6
  5316                           tablat	equ	0xFF5
  5317                           prodh	equ	0xFF4
  5318                           prodl	equ	0xFF3
  5319                           intcon	equ	0xFF2
  5320                           intcon2	equ	0xFF1
  5321                           intcon3	equ	0xFF0
  5322                           postinc0	equ	0xFEE
  5323                           wreg	equ	0xFE8
  5324                           postdec1	equ	0xFE5
  5325                           fsr1h	equ	0xFE2
  5326                           fsr1l	equ	0xFE1
  5327                           status	equ	0xFD8
  5328                           
  5329 ;; *************** function _RF_SetSquelch *****************
  5330 ;; Defined at:
  5331 ;;		line 153 in file "RF.c"
  5332 ;; Parameters:    Size  Location     Type
  5333 ;;  state           1    wreg     unsigned char 
  5334 ;; Auto vars:     Size  Location     Type
  5335 ;;  state           1    0[BANK1 ] unsigned char 
  5336 ;; Return value:  Size  Location     Type
  5337 ;;		None               void
  5338 ;; Registers used:
  5339 ;;		wreg, status,2, status,0
  5340 ;; Tracked objects:
  5341 ;;		On entry : 0/0
  5342 ;;		On exit  : 0/0
  5343 ;;		Unchanged: 0/0
  5344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5345 ;;      Params:         0       0       0       0       0
  5346 ;;      Locals:         0       0       1       0       0
  5347 ;;      Temps:          0       0       0       0       0
  5348 ;;      Totals:         0       0       1       0       0
  5349 ;;Total ram usage:        1 bytes
  5350 ;; Hardware stack levels used:    1
  5351 ;; Hardware stack levels required when called:   12
  5352 ;; This function calls:
  5353 ;;		Nothing
  5354 ;; This function is called by:
  5355 ;;		_InitRF
  5356 ;; This function uses a non-reentrant model
  5357 ;;
  5358                           
  5359                           	psect	text30
  5360  001850                     __ptext30:
  5361                           	opt stack 0
  5362  001850                     _RF_SetSquelch:
  5363                           	opt stack 16
  5364                           
  5365                           ;incstack = 0
  5366                           ;RF_SetSquelch@state stored from wreg
  5367  001850  0101               	movlb	1	; () banked
  5368  001852  6F80               	movwf	RF_SetSquelch@state& (0+255),b
  5369                           
  5370                           ;RF.c: 155: if(!state)
  5371  001854  0101               	movlb	1	; () banked
  5372  001856  5180               	movf	RF_SetSquelch@state& (0+255),w,b
  5373  001858  0101               	movlb	1	; () banked
  5374  00185A  A4D8               	btfss	status,2,c
  5375  00185C  D002               	goto	l7362
  5376                           
  5377                           ; BSR set to: 1
  5378                           ;RF.c: 156: {
  5379                           ;RF.c: 158: LATA |= 0x20;
  5380  00185E  8A89               	bsf	3977,5,c	;volatile
  5381                           
  5382                           ;RF.c: 159: }
  5383  001860  0012               	return	
  5384  001862                     l7362:
  5385                           
  5386                           ; BSR set to: 1
  5387                           ;RF.c: 160: else
  5388                           ;RF.c: 161: {
  5389                           ;RF.c: 163: LATA &= ~0x20;
  5390  001862  9A89               	bcf	3977,5,c	;volatile
  5391  001864  0012               	return	
  5392  001866                     __end_of_RF_SetSquelch:
  5393                           	opt stack 0
  5394                           tblptru	equ	0xFF8
  5395                           tblptrh	equ	0xFF7
  5396                           tblptrl	equ	0xFF6
  5397                           tablat	equ	0xFF5
  5398                           prodh	equ	0xFF4
  5399                           prodl	equ	0xFF3
  5400                           intcon	equ	0xFF2
  5401                           intcon2	equ	0xFF1
  5402                           intcon3	equ	0xFF0
  5403                           postinc0	equ	0xFEE
  5404                           wreg	equ	0xFE8
  5405                           postdec1	equ	0xFE5
  5406                           fsr1h	equ	0xFE2
  5407                           fsr1l	equ	0xFE1
  5408                           status	equ	0xFD8
  5409                           
  5410 ;; *************** function _RF_SetBandwidth *****************
  5411 ;; Defined at:
  5412 ;;		line 119 in file "RF.c"
  5413 ;; Parameters:    Size  Location     Type
  5414 ;;  band            1    wreg     unsigned char 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  band            1    0[BANK1 ] unsigned char 
  5417 ;; Return value:  Size  Location     Type
  5418 ;;		None               void
  5419 ;; Registers used:
  5420 ;;		wreg, status,2, status,0
  5421 ;; Tracked objects:
  5422 ;;		On entry : 0/0
  5423 ;;		On exit  : 0/0
  5424 ;;		Unchanged: 0/0
  5425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5426 ;;      Params:         0       0       0       0       0
  5427 ;;      Locals:         0       0       1       0       0
  5428 ;;      Temps:          0       0       0       0       0
  5429 ;;      Totals:         0       0       1       0       0
  5430 ;;Total ram usage:        1 bytes
  5431 ;; Hardware stack levels used:    1
  5432 ;; Hardware stack levels required when called:   12
  5433 ;; This function calls:
  5434 ;;		Nothing
  5435 ;; This function is called by:
  5436 ;;		_InitRF
  5437 ;; This function uses a non-reentrant model
  5438 ;;
  5439                           
  5440                           	psect	text31
  5441  001300                     __ptext31:
  5442                           	opt stack 0
  5443  001300                     _RF_SetBandwidth:
  5444                           	opt stack 16
  5445                           
  5446                           ; BSR set to: 1
  5447                           ;incstack = 0
  5448                           ;RF_SetBandwidth@band stored from wreg
  5449  001300  0101               	movlb	1	; () banked
  5450  001302  6F80               	movwf	RF_SetBandwidth@band& (0+255),b
  5451                           
  5452                           ;RF.c: 121: if(band == 0)
  5453  001304  0101               	movlb	1	; () banked
  5454  001306  5180               	movf	RF_SetBandwidth@band& (0+255),w,b
  5455  001308  0101               	movlb	1	; () banked
  5456  00130A  A4D8               	btfss	status,2,c
  5457  00130C  D003               	goto	l7348
  5458                           
  5459                           ; BSR set to: 1
  5460                           ;RF.c: 122: {
  5461                           ;RF.c: 124: LATC &= ~0x40;
  5462  00130E  9C8B               	bcf	3979,6,c	;volatile
  5463                           
  5464                           ;RF.c: 125: LATC &= ~0x80;
  5465  001310  9E8B               	bcf	3979,7,c	;volatile
  5466                           
  5467                           ;RF.c: 126: }
  5468  001312  0012               	return	
  5469  001314                     l7348:
  5470                           
  5471                           ; BSR set to: 1
  5472                           ;RF.c: 127: else if(band == 1)
  5473  001314  0101               	movlb	1	; () banked
  5474  001316  0580               	decf	RF_SetBandwidth@band& (0+255),w,b
  5475  001318  A4D8               	btfss	status,2,c
  5476  00131A  D003               	goto	l7352
  5477                           
  5478                           ; BSR set to: 1
  5479                           ;RF.c: 128: {
  5480                           ;RF.c: 130: LATC |= 0x40;
  5481  00131C  8C8B               	bsf	3979,6,c	;volatile
  5482                           
  5483                           ;RF.c: 131: LATC &= ~0x80;
  5484  00131E  9E8B               	bcf	3979,7,c	;volatile
  5485                           
  5486                           ;RF.c: 132: }
  5487  001320  0012               	return	
  5488  001322                     l7352:
  5489                           
  5490                           ; BSR set to: 1
  5491                           ;RF.c: 133: else if(band == 2)
  5492  001322  0E02               	movlw	2
  5493  001324  0101               	movlb	1	; () banked
  5494  001326  1980               	xorwf	RF_SetBandwidth@band& (0+255),w,b
  5495  001328  A4D8               	btfss	status,2,c
  5496  00132A  D003               	goto	l7356
  5497                           
  5498                           ; BSR set to: 1
  5499                           ;RF.c: 134: {
  5500                           ;RF.c: 136: LATC &= ~0x40;
  5501  00132C  9C8B               	bcf	3979,6,c	;volatile
  5502                           
  5503                           ;RF.c: 137: LATC |= 0x80;
  5504  00132E  8E8B               	bsf	3979,7,c	;volatile
  5505                           
  5506                           ;RF.c: 138: }
  5507  001330  0012               	return	
  5508  001332                     l7356:
  5509                           
  5510                           ; BSR set to: 1
  5511                           ;RF.c: 139: else
  5512                           ;RF.c: 140: {
  5513                           ;RF.c: 142: LATC |= 0x40;
  5514  001332  8C8B               	bsf	3979,6,c	;volatile
  5515                           
  5516                           ;RF.c: 143: LATC |= 0x80;
  5517  001334  8E8B               	bsf	3979,7,c	;volatile
  5518                           
  5519                           ; BSR set to: 1
  5520                           
  5521                           ; BSR set to: 1
  5522  001336  0012               	return	
  5523  001338                     __end_of_RF_SetBandwidth:
  5524                           	opt stack 0
  5525                           tblptru	equ	0xFF8
  5526                           tblptrh	equ	0xFF7
  5527                           tblptrl	equ	0xFF6
  5528                           tablat	equ	0xFF5
  5529                           prodh	equ	0xFF4
  5530                           prodl	equ	0xFF3
  5531                           intcon	equ	0xFF2
  5532                           intcon2	equ	0xFF1
  5533                           intcon3	equ	0xFF0
  5534                           postinc0	equ	0xFEE
  5535                           wreg	equ	0xFE8
  5536                           postdec1	equ	0xFE5
  5537                           fsr1h	equ	0xFE2
  5538                           fsr1l	equ	0xFE1
  5539                           status	equ	0xFD8
  5540                           
  5541 ;; *************** function _RF_Receiver *****************
  5542 ;; Defined at:
  5543 ;;		line 100 in file "RF.c"
  5544 ;; Parameters:    Size  Location     Type
  5545 ;;  state           1    wreg     unsigned char 
  5546 ;; Auto vars:     Size  Location     Type
  5547 ;;  state           1    0[BANK1 ] unsigned char 
  5548 ;; Return value:  Size  Location     Type
  5549 ;;		None               void
  5550 ;; Registers used:
  5551 ;;		wreg, status,2, status,0
  5552 ;; Tracked objects:
  5553 ;;		On entry : 0/0
  5554 ;;		On exit  : 0/0
  5555 ;;		Unchanged: 0/0
  5556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5557 ;;      Params:         0       0       0       0       0
  5558 ;;      Locals:         0       0       1       0       0
  5559 ;;      Temps:          0       0       0       0       0
  5560 ;;      Totals:         0       0       1       0       0
  5561 ;;Total ram usage:        1 bytes
  5562 ;; Hardware stack levels used:    1
  5563 ;; Hardware stack levels required when called:   12
  5564 ;; This function calls:
  5565 ;;		Nothing
  5566 ;; This function is called by:
  5567 ;;		_InitRF
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           	psect	text32
  5572  001866                     __ptext32:
  5573                           	opt stack 0
  5574  001866                     _RF_Receiver:
  5575                           	opt stack 16
  5576                           
  5577                           ; BSR set to: 1
  5578                           ;incstack = 0
  5579                           ;RF_Receiver@state stored from wreg
  5580  001866  0101               	movlb	1	; () banked
  5581  001868  6F80               	movwf	RF_Receiver@state& (0+255),b
  5582                           
  5583                           ;RF.c: 102: if(!state)
  5584  00186A  0101               	movlb	1	; () banked
  5585  00186C  5180               	movf	RF_Receiver@state& (0+255),w,b
  5586  00186E  0101               	movlb	1	; () banked
  5587  001870  A4D8               	btfss	status,2,c
  5588  001872  D002               	goto	l7342
  5589                           
  5590                           ; BSR set to: 1
  5591                           ;RF.c: 103: {
  5592                           ;RF.c: 105: LATA |= 0x04;
  5593  001874  8489               	bsf	3977,2,c	;volatile
  5594                           
  5595                           ;RF.c: 106: }
  5596  001876  0012               	return	
  5597  001878                     l7342:
  5598                           
  5599                           ; BSR set to: 1
  5600                           ;RF.c: 107: else
  5601                           ;RF.c: 108: {
  5602                           ;RF.c: 110: LATA &= ~0x04;
  5603  001878  9489               	bcf	3977,2,c	;volatile
  5604  00187A  0012               	return	
  5605  00187C                     __end_of_RF_Receiver:
  5606                           	opt stack 0
  5607                           tblptru	equ	0xFF8
  5608                           tblptrh	equ	0xFF7
  5609                           tblptrl	equ	0xFF6
  5610                           tablat	equ	0xFF5
  5611                           prodh	equ	0xFF4
  5612                           prodl	equ	0xFF3
  5613                           intcon	equ	0xFF2
  5614                           intcon2	equ	0xFF1
  5615                           intcon3	equ	0xFF0
  5616                           postinc0	equ	0xFEE
  5617                           wreg	equ	0xFE8
  5618                           postdec1	equ	0xFE5
  5619                           fsr1h	equ	0xFE2
  5620                           fsr1l	equ	0xFE1
  5621                           status	equ	0xFD8
  5622                           
  5623 ;; *************** function _RF_DataInt *****************
  5624 ;; Defined at:
  5625 ;;		line 78 in file "RF.c"
  5626 ;; Parameters:    Size  Location     Type
  5627 ;;  state           1    wreg     unsigned char 
  5628 ;; Auto vars:     Size  Location     Type
  5629 ;;  state           1    0[BANK1 ] unsigned char 
  5630 ;; Return value:  Size  Location     Type
  5631 ;;		None               void
  5632 ;; Registers used:
  5633 ;;		wreg, status,2
  5634 ;; Tracked objects:
  5635 ;;		On entry : 0/0
  5636 ;;		On exit  : 0/0
  5637 ;;		Unchanged: 0/0
  5638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5639 ;;      Params:         0       0       0       0       0
  5640 ;;      Locals:         0       0       1       0       0
  5641 ;;      Temps:          0       0       0       0       0
  5642 ;;      Totals:         0       0       1       0       0
  5643 ;;Total ram usage:        1 bytes
  5644 ;; Hardware stack levels used:    1
  5645 ;; Hardware stack levels required when called:   12
  5646 ;; This function calls:
  5647 ;;		Nothing
  5648 ;; This function is called by:
  5649 ;;		_InitRF
  5650 ;; This function uses a non-reentrant model
  5651 ;;
  5652                           
  5653                           	psect	text33
  5654  00173A                     __ptext33:
  5655                           	opt stack 0
  5656  00173A                     _RF_DataInt:
  5657                           	opt stack 16
  5658                           
  5659                           ; BSR set to: 1
  5660                           ;incstack = 0
  5661                           ;RF_DataInt@state stored from wreg
  5662  00173A  0101               	movlb	1	; () banked
  5663  00173C  6F80               	movwf	RF_DataInt@state& (0+255),b
  5664                           
  5665                           ;RF.c: 80: if(state)
  5666  00173E  0101               	movlb	1	; () banked
  5667  001740  5180               	movf	RF_DataInt@state& (0+255),w,b
  5668  001742  0101               	movlb	1	; () banked
  5669  001744  B4D8               	btfsc	status,2,c
  5670  001746  D003               	goto	l380
  5671                           
  5672                           ; BSR set to: 1
  5673                           ;RF.c: 81: {
  5674                           ;RF.c: 83: INTCON3bits.INT1E = 1;
  5675  001748  86F0               	bsf	intcon3,3,c	;volatile
  5676                           
  5677                           ;RF.c: 84: INTCON3bits.INT2E = 1;
  5678  00174A  88F0               	bsf	intcon3,4,c	;volatile
  5679                           
  5680                           ;RF.c: 85: }
  5681  00174C  0012               	return	
  5682  00174E                     l380:
  5683                           
  5684                           ; BSR set to: 1
  5685                           ;RF.c: 86: else
  5686                           ;RF.c: 87: {
  5687                           ;RF.c: 89: INTCON3bits.INT1E = 0;
  5688  00174E  96F0               	bcf	intcon3,3,c	;volatile
  5689                           
  5690                           ;RF.c: 90: INTCON3bits.INT2E = 0;
  5691  001750  98F0               	bcf	intcon3,4,c	;volatile
  5692  001752  0012               	return	
  5693  001754                     __end_of_RF_DataInt:
  5694                           	opt stack 0
  5695                           tblptru	equ	0xFF8
  5696                           tblptrh	equ	0xFF7
  5697                           tblptrl	equ	0xFF6
  5698                           tablat	equ	0xFF5
  5699                           prodh	equ	0xFF4
  5700                           prodl	equ	0xFF3
  5701                           intcon	equ	0xFF2
  5702                           intcon2	equ	0xFF1
  5703                           intcon3	equ	0xFF0
  5704                           postinc0	equ	0xFEE
  5705                           wreg	equ	0xFE8
  5706                           postdec1	equ	0xFE5
  5707                           fsr1h	equ	0xFE2
  5708                           fsr1l	equ	0xFE1
  5709                           status	equ	0xFD8
  5710                           
  5711 ;; *************** function _InitMOTOR *****************
  5712 ;; Defined at:
  5713 ;;		line 92 in file "MOTOR.c"
  5714 ;; Parameters:    Size  Location     Type
  5715 ;;		None
  5716 ;; Auto vars:     Size  Location     Type
  5717 ;;		None
  5718 ;; Return value:  Size  Location     Type
  5719 ;;		None               void
  5720 ;; Registers used:
  5721 ;;		None
  5722 ;; Tracked objects:
  5723 ;;		On entry : 0/0
  5724 ;;		On exit  : 0/0
  5725 ;;		Unchanged: 0/0
  5726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5727 ;;      Params:         0       0       0       0       0
  5728 ;;      Locals:         0       0       0       0       0
  5729 ;;      Temps:          0       0       0       0       0
  5730 ;;      Totals:         0       0       0       0       0
  5731 ;;Total ram usage:        0 bytes
  5732 ;; Hardware stack levels used:    1
  5733 ;; Hardware stack levels required when called:   12
  5734 ;; This function calls:
  5735 ;;		Nothing
  5736 ;; This function is called by:
  5737 ;;		_Init_System
  5738 ;; This function uses a non-reentrant model
  5739 ;;
  5740                           
  5741                           	psect	text34
  5742  001A6A                     __ptext34:
  5743                           	opt stack 0
  5744  001A6A                     _InitMOTOR:
  5745                           	opt stack 17
  5746                           
  5747                           ;MOTOR.c: 95: __nop();
  5748                           
  5749                           ; BSR set to: 1
  5750                           ;incstack = 0
  5751  001A6A  F000               	nop	
  5752  001A6C  0012               	return		;funcret
  5753  001A6E                     __end_of_InitMOTOR:
  5754                           	opt stack 0
  5755                           tblptru	equ	0xFF8
  5756                           tblptrh	equ	0xFF7
  5757                           tblptrl	equ	0xFF6
  5758                           tablat	equ	0xFF5
  5759                           prodh	equ	0xFF4
  5760                           prodl	equ	0xFF3
  5761                           intcon	equ	0xFF2
  5762                           intcon2	equ	0xFF1
  5763                           intcon3	equ	0xFF0
  5764                           postinc0	equ	0xFEE
  5765                           wreg	equ	0xFE8
  5766                           postdec1	equ	0xFE5
  5767                           fsr1h	equ	0xFE2
  5768                           fsr1l	equ	0xFE1
  5769                           status	equ	0xFD8
  5770                           
  5771 ;; *************** function _InitLDO *****************
  5772 ;; Defined at:
  5773 ;;		line 75 in file "LDO.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;		None
  5776 ;; Auto vars:     Size  Location     Type
  5777 ;;		None
  5778 ;; Return value:  Size  Location     Type
  5779 ;;		None               void
  5780 ;; Registers used:
  5781 ;;		wreg, status,2, status,0, cstack
  5782 ;; Tracked objects:
  5783 ;;		On entry : 0/0
  5784 ;;		On exit  : 0/0
  5785 ;;		Unchanged: 0/0
  5786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5787 ;;      Params:         0       0       0       0       0
  5788 ;;      Locals:         0       0       0       0       0
  5789 ;;      Temps:          0       0       0       0       0
  5790 ;;      Totals:         0       0       0       0       0
  5791 ;;Total ram usage:        0 bytes
  5792 ;; Hardware stack levels used:    1
  5793 ;; Hardware stack levels required when called:   13
  5794 ;; This function calls:
  5795 ;;		_LDO_Pass
  5796 ;; This function is called by:
  5797 ;;		_Init_System
  5798 ;; This function uses a non-reentrant model
  5799 ;;
  5800                           
  5801                           	psect	text35
  5802  001A56                     __ptext35:
  5803                           	opt stack 0
  5804  001A56                     _InitLDO:
  5805                           	opt stack 16
  5806                           
  5807                           ;LDO.c: 77: LDO_Pass(0);
  5808                           
  5809                           ;incstack = 0
  5810  001A56  0E00               	movlw	0
  5811  001A58  ECC4  F00B         	call	_LDO_Pass
  5812  001A5C  0012               	return		;funcret
  5813  001A5E                     __end_of_InitLDO:
  5814                           	opt stack 0
  5815                           tblptru	equ	0xFF8
  5816                           tblptrh	equ	0xFF7
  5817                           tblptrl	equ	0xFF6
  5818                           tablat	equ	0xFF5
  5819                           prodh	equ	0xFF4
  5820                           prodl	equ	0xFF3
  5821                           intcon	equ	0xFF2
  5822                           intcon2	equ	0xFF1
  5823                           intcon3	equ	0xFF0
  5824                           postinc0	equ	0xFEE
  5825                           wreg	equ	0xFE8
  5826                           postdec1	equ	0xFE5
  5827                           fsr1h	equ	0xFE2
  5828                           fsr1l	equ	0xFE1
  5829                           status	equ	0xFD8
  5830                           
  5831 ;; *************** function _LDO_Pass *****************
  5832 ;; Defined at:
  5833 ;;		line 52 in file "LDO.c"
  5834 ;; Parameters:    Size  Location     Type
  5835 ;;  state           1    wreg     unsigned char 
  5836 ;; Auto vars:     Size  Location     Type
  5837 ;;  state           1    0[BANK1 ] unsigned char 
  5838 ;; Return value:  Size  Location     Type
  5839 ;;		None               void
  5840 ;; Registers used:
  5841 ;;		wreg, status,2, status,0
  5842 ;; Tracked objects:
  5843 ;;		On entry : 0/0
  5844 ;;		On exit  : 0/0
  5845 ;;		Unchanged: 0/0
  5846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5847 ;;      Params:         0       0       0       0       0
  5848 ;;      Locals:         0       0       1       0       0
  5849 ;;      Temps:          0       0       0       0       0
  5850 ;;      Totals:         0       0       1       0       0
  5851 ;;Total ram usage:        1 bytes
  5852 ;; Hardware stack levels used:    1
  5853 ;; Hardware stack levels required when called:   12
  5854 ;; This function calls:
  5855 ;;		Nothing
  5856 ;; This function is called by:
  5857 ;;		_InitLDO
  5858 ;; This function uses a non-reentrant model
  5859 ;;
  5860                           
  5861                           	psect	text36
  5862  001788                     __ptext36:
  5863                           	opt stack 0
  5864  001788                     _LDO_Pass:
  5865                           	opt stack 16
  5866                           
  5867                           ;incstack = 0
  5868                           ;LDO_Pass@state stored from wreg
  5869  001788  0101               	movlb	1	; () banked
  5870  00178A  6F80               	movwf	LDO_Pass@state& (0+255),b
  5871                           
  5872                           ;LDO.c: 54: if(state)
  5873  00178C  0101               	movlb	1	; () banked
  5874  00178E  5180               	movf	LDO_Pass@state& (0+255),w,b
  5875  001790  0101               	movlb	1	; () banked
  5876  001792  B4D8               	btfsc	status,2,c
  5877  001794  D003               	goto	l571
  5878                           
  5879                           ; BSR set to: 1
  5880                           ;LDO.c: 55: {
  5881                           ;LDO.c: 57: TRISCbits.TRISC5 = 0;
  5882  001796  9A94               	bcf	3988,5,c	;volatile
  5883                           
  5884                           ; BSR set to: 1
  5885                           ;LDO.c: 58: LATC &= ~0x20;
  5886  001798  9A8B               	bcf	3979,5,c	;volatile
  5887                           
  5888                           ;LDO.c: 59: }
  5889  00179A  0012               	return	
  5890  00179C                     l571:
  5891                           
  5892                           ; BSR set to: 1
  5893                           ;LDO.c: 60: else
  5894                           ;LDO.c: 61: {
  5895                           ;LDO.c: 63: TRISCbits.TRISC5 = 1;
  5896  00179C  8A94               	bsf	3988,5,c	;volatile
  5897  00179E  0012               	return	
  5898  0017A0                     __end_of_LDO_Pass:
  5899                           	opt stack 0
  5900                           tblptru	equ	0xFF8
  5901                           tblptrh	equ	0xFF7
  5902                           tblptrl	equ	0xFF6
  5903                           tablat	equ	0xFF5
  5904                           prodh	equ	0xFF4
  5905                           prodl	equ	0xFF3
  5906                           intcon	equ	0xFF2
  5907                           intcon2	equ	0xFF1
  5908                           intcon3	equ	0xFF0
  5909                           postinc0	equ	0xFEE
  5910                           wreg	equ	0xFE8
  5911                           postdec1	equ	0xFE5
  5912                           fsr1h	equ	0xFE2
  5913                           fsr1l	equ	0xFE1
  5914                           status	equ	0xFD8
  5915                           
  5916 ;; *************** function _InitIR *****************
  5917 ;; Defined at:
  5918 ;;		line 70 in file "IR.c"
  5919 ;; Parameters:    Size  Location     Type
  5920 ;;		None
  5921 ;; Auto vars:     Size  Location     Type
  5922 ;;		None
  5923 ;; Return value:  Size  Location     Type
  5924 ;;		None               void
  5925 ;; Registers used:
  5926 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5927 ;; Tracked objects:
  5928 ;;		On entry : 0/0
  5929 ;;		On exit  : 0/0
  5930 ;;		Unchanged: 0/0
  5931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5932 ;;      Params:         0       0       0       0       0
  5933 ;;      Locals:         0       0       0       0       0
  5934 ;;      Temps:          0       0       0       0       0
  5935 ;;      Totals:         0       0       0       0       0
  5936 ;;Total ram usage:        0 bytes
  5937 ;; Hardware stack levels used:    1
  5938 ;; Hardware stack levels required when called:   13
  5939 ;; This function calls:
  5940 ;;		_MSC_CleanBufferInt
  5941 ;; This function is called by:
  5942 ;;		_Init_System
  5943 ;; This function uses a non-reentrant model
  5944 ;;
  5945                           
  5946                           	psect	text37
  5947  00171E                     __ptext37:
  5948                           	opt stack 0
  5949  00171E                     _InitIR:
  5950                           	opt stack 16
  5951                           
  5952                           ;IR.c: 72: MSC_CleanBufferInt(&IR_DataTiming,128);
  5953                           
  5954                           ; BSR set to: 1
  5955                           ;incstack = 0
  5956  00171E  0E00               	movlw	low _IR_DataTiming
  5957  001720  0101               	movlb	1	; () banked
  5958  001722  6F80               	movwf	MSC_CleanBufferInt@data& (0+255),b
  5959  001724  0E02               	movlw	high _IR_DataTiming
  5960  001726  0101               	movlb	1	; () banked
  5961  001728  6F81               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  5962  00172A  0E00               	movlw	0
  5963  00172C  0101               	movlb	1	; () banked
  5964  00172E  6F83               	movwf	(MSC_CleanBufferInt@count+1)& (0+255),b
  5965  001730  0E80               	movlw	128
  5966  001732  6F82               	movwf	MSC_CleanBufferInt@count& (0+255),b
  5967  001734  EC48  F008         	call	_MSC_CleanBufferInt	;wreg free
  5968  001738  0012               	return		;funcret
  5969  00173A                     __end_of_InitIR:
  5970                           	opt stack 0
  5971                           tblptru	equ	0xFF8
  5972                           tblptrh	equ	0xFF7
  5973                           tblptrl	equ	0xFF6
  5974                           tablat	equ	0xFF5
  5975                           prodh	equ	0xFF4
  5976                           prodl	equ	0xFF3
  5977                           intcon	equ	0xFF2
  5978                           intcon2	equ	0xFF1
  5979                           intcon3	equ	0xFF0
  5980                           postinc0	equ	0xFEE
  5981                           wreg	equ	0xFE8
  5982                           postdec1	equ	0xFE5
  5983                           fsr1h	equ	0xFE2
  5984                           fsr1l	equ	0xFE1
  5985                           status	equ	0xFD8
  5986                           
  5987 ;; *************** function _MSC_CleanBufferInt *****************
  5988 ;; Defined at:
  5989 ;;		line 166 in file "MISC.c"
  5990 ;; Parameters:    Size  Location     Type
  5991 ;;  data            2    0[BANK1 ] PTR unsigned int 
  5992 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
  5993 ;;  count           2    2[BANK1 ] unsigned int 
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;  i               2    4[BANK1 ] unsigned int 
  5996 ;; Return value:  Size  Location     Type
  5997 ;;		None               void
  5998 ;; Registers used:
  5999 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6000 ;; Tracked objects:
  6001 ;;		On entry : 0/0
  6002 ;;		On exit  : 0/0
  6003 ;;		Unchanged: 0/0
  6004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6005 ;;      Params:         0       0       4       0       0
  6006 ;;      Locals:         0       0       2       0       0
  6007 ;;      Temps:          0       0       0       0       0
  6008 ;;      Totals:         0       0       6       0       0
  6009 ;;Total ram usage:        6 bytes
  6010 ;; Hardware stack levels used:    1
  6011 ;; Hardware stack levels required when called:   12
  6012 ;; This function calls:
  6013 ;;		Nothing
  6014 ;; This function is called by:
  6015 ;;		_InitRF
  6016 ;;		_InitIR
  6017 ;;		_MSC_BufferCopyInt
  6018 ;; This function uses a non-reentrant model
  6019 ;;
  6020                           
  6021                           	psect	text38
  6022  001090                     __ptext38:
  6023                           	opt stack 0
  6024  001090                     _MSC_CleanBufferInt:
  6025                           	opt stack 16
  6026                           
  6027                           ;MISC.c: 168: unsigned int i=0;
  6028                           
  6029                           ;incstack = 0
  6030  001090  0E00               	movlw	0
  6031  001092  0101               	movlb	1	; () banked
  6032  001094  6F85               	movwf	(MSC_CleanBufferInt@i+1)& (0+255),b
  6033  001096  0E00               	movlw	0
  6034  001098  6F84               	movwf	MSC_CleanBufferInt@i& (0+255),b
  6035                           
  6036                           ;MISC.c: 169: for(i=0; i<count;i++)
  6037  00109A  0E00               	movlw	0
  6038  00109C  0101               	movlb	1	; () banked
  6039  00109E  6F85               	movwf	(MSC_CleanBufferInt@i+1)& (0+255),b
  6040  0010A0  0E00               	movlw	0
  6041  0010A2  6F84               	movwf	MSC_CleanBufferInt@i& (0+255),b
  6042  0010A4  D014               	goto	l7370
  6043  0010A6                     l7366:
  6044                           
  6045                           ; BSR set to: 1
  6046                           ;MISC.c: 170: {
  6047                           ;MISC.c: 171: data[i]= 0;
  6048  0010A6  90D8               	bcf	status,0,c
  6049  0010A8  0101               	movlb	1	; () banked
  6050  0010AA  3584               	rlcf	MSC_CleanBufferInt@i& (0+255),w,b
  6051  0010AC  6ED9               	movwf	fsr2l,c
  6052  0010AE  0101               	movlb	1	; () banked
  6053  0010B0  3585               	rlcf	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  6054  0010B2  6EDA               	movwf	fsr2h,c
  6055  0010B4  0101               	movlb	1	; () banked
  6056  0010B6  5180               	movf	MSC_CleanBufferInt@data& (0+255),w,b
  6057  0010B8  26D9               	addwf	fsr2l,f,c
  6058  0010BA  0101               	movlb	1	; () banked
  6059  0010BC  5181               	movf	(MSC_CleanBufferInt@data+1)& (0+255),w,b
  6060  0010BE  22DA               	addwfc	fsr2h,f,c
  6061  0010C0  0E00               	movlw	0
  6062  0010C2  6EDE               	movwf	postinc2,c
  6063  0010C4  0E00               	movlw	0
  6064  0010C6  6EDD               	movwf	postdec2,c
  6065                           
  6066                           ; BSR set to: 1
  6067  0010C8  0101               	movlb	1	; () banked
  6068  0010CA  4B84               	infsnz	MSC_CleanBufferInt@i& (0+255),f,b
  6069  0010CC  2B85               	incf	(MSC_CleanBufferInt@i+1)& (0+255),f,b
  6070  0010CE                     l7370:
  6071                           
  6072                           ; BSR set to: 1
  6073  0010CE  0101               	movlb	1	; () banked
  6074  0010D0  5182               	movf	MSC_CleanBufferInt@count& (0+255),w,b
  6075  0010D2  0101               	movlb	1	; () banked
  6076  0010D4  5D84               	subwf	MSC_CleanBufferInt@i& (0+255),w,b
  6077  0010D6  0101               	movlb	1	; () banked
  6078  0010D8  5183               	movf	(MSC_CleanBufferInt@count+1)& (0+255),w,b
  6079  0010DA  0101               	movlb	1	; () banked
  6080  0010DC  5985               	subwfb	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  6081  0010DE  B0D8               	btfsc	status,0,c
  6082  0010E0  0012               	return	
  6083  0010E2  D7E1               	goto	l7366
  6084  0010E4                     __end_of_MSC_CleanBufferInt:
  6085                           	opt stack 0
  6086                           tblptru	equ	0xFF8
  6087                           tblptrh	equ	0xFF7
  6088                           tblptrl	equ	0xFF6
  6089                           tablat	equ	0xFF5
  6090                           prodh	equ	0xFF4
  6091                           prodl	equ	0xFF3
  6092                           intcon	equ	0xFF2
  6093                           intcon2	equ	0xFF1
  6094                           intcon3	equ	0xFF0
  6095                           postinc0	equ	0xFEE
  6096                           wreg	equ	0xFE8
  6097                           postdec1	equ	0xFE5
  6098                           fsr1h	equ	0xFE2
  6099                           fsr1l	equ	0xFE1
  6100                           postinc2	equ	0xFDE
  6101                           postdec2	equ	0xFDD
  6102                           fsr2h	equ	0xFDA
  6103                           fsr2l	equ	0xFD9
  6104                           status	equ	0xFD8
  6105                           
  6106 ;; *************** function _InitFlash *****************
  6107 ;; Defined at:
  6108 ;;		line 61 in file "FLASH.c"
  6109 ;; Parameters:    Size  Location     Type
  6110 ;;		None
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;		None
  6113 ;; Return value:  Size  Location     Type
  6114 ;;		None               void
  6115 ;; Registers used:
  6116 ;;		None
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6122 ;;      Params:         0       0       0       0       0
  6123 ;;      Locals:         0       0       0       0       0
  6124 ;;      Temps:          0       0       0       0       0
  6125 ;;      Totals:         0       0       0       0       0
  6126 ;;Total ram usage:        0 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:   12
  6129 ;; This function calls:
  6130 ;;		Nothing
  6131 ;; This function is called by:
  6132 ;;		_Init_System
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           	psect	text39
  6137  001A6E                     __ptext39:
  6138                           	opt stack 0
  6139  001A6E                     _InitFlash:
  6140                           	opt stack 17
  6141                           
  6142                           ;FLASH.c: 64: __nop();
  6143                           
  6144                           ; BSR set to: 1
  6145                           ;incstack = 0
  6146  001A6E  F000               	nop	
  6147  001A70  0012               	return		;funcret
  6148  001A72                     __end_of_InitFlash:
  6149                           	opt stack 0
  6150                           tblptru	equ	0xFF8
  6151                           tblptrh	equ	0xFF7
  6152                           tblptrl	equ	0xFF6
  6153                           tablat	equ	0xFF5
  6154                           prodh	equ	0xFF4
  6155                           prodl	equ	0xFF3
  6156                           intcon	equ	0xFF2
  6157                           intcon2	equ	0xFF1
  6158                           intcon3	equ	0xFF0
  6159                           postinc0	equ	0xFEE
  6160                           wreg	equ	0xFE8
  6161                           postdec1	equ	0xFE5
  6162                           fsr1h	equ	0xFE2
  6163                           fsr1l	equ	0xFE1
  6164                           postinc2	equ	0xFDE
  6165                           postdec2	equ	0xFDD
  6166                           fsr2h	equ	0xFDA
  6167                           fsr2l	equ	0xFD9
  6168                           status	equ	0xFD8
  6169                           
  6170 ;; *************** function _InitButton *****************
  6171 ;; Defined at:
  6172 ;;		line 78 in file "BUTTON.c"
  6173 ;; Parameters:    Size  Location     Type
  6174 ;;		None
  6175 ;; Auto vars:     Size  Location     Type
  6176 ;;		None
  6177 ;; Return value:  Size  Location     Type
  6178 ;;		None               void
  6179 ;; Registers used:
  6180 ;;		wreg, status,2, status,0, cstack
  6181 ;; Tracked objects:
  6182 ;;		On entry : 0/0
  6183 ;;		On exit  : 0/0
  6184 ;;		Unchanged: 0/0
  6185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6186 ;;      Params:         0       0       0       0       0
  6187 ;;      Locals:         0       0       0       0       0
  6188 ;;      Temps:          0       0       0       0       0
  6189 ;;      Totals:         0       0       0       0       0
  6190 ;;Total ram usage:        0 bytes
  6191 ;; Hardware stack levels used:    1
  6192 ;; Hardware stack levels required when called:   13
  6193 ;; This function calls:
  6194 ;;		_BUT_IR_PinChangeInt
  6195 ;;		_BUT_ReadButton
  6196 ;; This function is called by:
  6197 ;;		_Init_System
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           	psect	text40
  6202  0019F8                     __ptext40:
  6203                           	opt stack 0
  6204  0019F8                     _InitButton:
  6205                           	opt stack 16
  6206                           
  6207                           ;BUTTON.c: 81: INTCON2bits.RBIP = 0;
  6208                           
  6209                           ;incstack = 0
  6210  0019F8  90F1               	bcf	intcon2,0,c	;volatile
  6211                           
  6212                           ;BUTTON.c: 82: BUT_ReadButton();
  6213  0019FA  EC9C  F009         	call	_BUT_ReadButton	;wreg free
  6214                           
  6215                           ;BUTTON.c: 83: BUT_IR_PinChangeInt(1);
  6216  0019FE  0E01               	movlw	1
  6217  001A00  EC3E  F00C         	call	_BUT_IR_PinChangeInt
  6218  001A04  0012               	return		;funcret
  6219  001A06                     __end_of_InitButton:
  6220                           	opt stack 0
  6221                           tblptru	equ	0xFF8
  6222                           tblptrh	equ	0xFF7
  6223                           tblptrl	equ	0xFF6
  6224                           tablat	equ	0xFF5
  6225                           prodh	equ	0xFF4
  6226                           prodl	equ	0xFF3
  6227                           intcon	equ	0xFF2
  6228                           intcon2	equ	0xFF1
  6229                           intcon3	equ	0xFF0
  6230                           postinc0	equ	0xFEE
  6231                           wreg	equ	0xFE8
  6232                           postdec1	equ	0xFE5
  6233                           fsr1h	equ	0xFE2
  6234                           fsr1l	equ	0xFE1
  6235                           postinc2	equ	0xFDE
  6236                           postdec2	equ	0xFDD
  6237                           fsr2h	equ	0xFDA
  6238                           fsr2l	equ	0xFD9
  6239                           status	equ	0xFD8
  6240                           
  6241 ;; *************** function _BUT_ReadButton *****************
  6242 ;; Defined at:
  6243 ;;		line 92 in file "BUTTON.c"
  6244 ;; Parameters:    Size  Location     Type
  6245 ;;		None
  6246 ;; Auto vars:     Size  Location     Type
  6247 ;;  value           1    0[BANK1 ] unsigned char 
  6248 ;; Return value:  Size  Location     Type
  6249 ;;                  1    wreg      unsigned char 
  6250 ;; Registers used:
  6251 ;;		wreg, status,2, status,0
  6252 ;; Tracked objects:
  6253 ;;		On entry : 0/0
  6254 ;;		On exit  : 0/0
  6255 ;;		Unchanged: 0/0
  6256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6257 ;;      Params:         0       0       0       0       0
  6258 ;;      Locals:         0       0       1       0       0
  6259 ;;      Temps:          0       0       0       0       0
  6260 ;;      Totals:         0       0       1       0       0
  6261 ;;Total ram usage:        1 bytes
  6262 ;; Hardware stack levels used:    1
  6263 ;; Hardware stack levels required when called:   12
  6264 ;; This function calls:
  6265 ;;		Nothing
  6266 ;; This function is called by:
  6267 ;;		_Init_System
  6268 ;;		_InitButton
  6269 ;; This function uses a non-reentrant model
  6270 ;;
  6271                           
  6272                           	psect	text41
  6273  001338                     __ptext41:
  6274                           	opt stack 0
  6275  001338                     _BUT_ReadButton:
  6276                           	opt stack 16
  6277                           
  6278                           ;BUTTON.c: 94: unsigned char value = PORTB;
  6279                           
  6280                           ;incstack = 0
  6281  001338  CF81 F180          	movff	3969,BUT_ReadButton@value	;volatile
  6282                           
  6283                           ;BUTTON.c: 95: if((value & 0x20) == 0)
  6284  00133C  0101               	movlb	1	; () banked
  6285  00133E  BB80               	btfsc	BUT_ReadButton@value& (0+255),5,b
  6286  001340  D00B               	goto	l7326
  6287                           
  6288                           ; BSR set to: 1
  6289                           ;BUTTON.c: 96: {
  6290                           ;BUTTON.c: 98: if(ButtonValue_prev == 0)
  6291  001342  0100               	movlb	0	; () banked
  6292  001344  51BF               	movf	_ButtonValue_prev& (0+255),w,b
  6293  001346  A4D8               	btfss	status,2,c
  6294  001348  D002               	goto	l981
  6295                           
  6296                           ; BSR set to: 0
  6297                           ;BUTTON.c: 99: {
  6298                           ;BUTTON.c: 100: ButtonChange = 1;
  6299  00134A  0E01               	movlw	1
  6300  00134C  6E59               	movwf	_ButtonChange,c
  6301  00134E                     l981:
  6302                           
  6303                           ; BSR set to: 0
  6304                           ;BUTTON.c: 101: }
  6305                           ;BUTTON.c: 102: ButtonValue_prev = 1;
  6306  00134E  0E01               	movlw	1
  6307  001350  0100               	movlb	0	; () banked
  6308  001352  6FBF               	movwf	_ButtonValue_prev& (0+255),b
  6309                           
  6310                           ; BSR set to: 0
  6311                           ;BUTTON.c: 103: return 1;
  6312  001354  0E01               	movlw	1
  6313                           
  6314                           ; BSR set to: 0
  6315  001356  0012               	return	
  6316  001358                     l7326:
  6317                           
  6318                           ;BUTTON.c: 104: }
  6319                           ;BUTTON.c: 107: if(ButtonValue_prev == 1)
  6320  001358  0100               	movlb	0	; () banked
  6321  00135A  05BF               	decf	_ButtonValue_prev& (0+255),w,b
  6322  00135C  A4D8               	btfss	status,2,c
  6323  00135E  D002               	goto	l983
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;BUTTON.c: 108: {
  6327                           ;BUTTON.c: 109: ButtonChange = 1;
  6328  001360  0E01               	movlw	1
  6329  001362  6E59               	movwf	_ButtonChange,c
  6330  001364                     l983:
  6331                           
  6332                           ; BSR set to: 0
  6333                           ;BUTTON.c: 110: }
  6334                           ;BUTTON.c: 111: ButtonValue_prev = 0;
  6335  001364  0E00               	movlw	0
  6336  001366  0100               	movlb	0	; () banked
  6337  001368  6FBF               	movwf	_ButtonValue_prev& (0+255),b
  6338                           
  6339                           ; BSR set to: 0
  6340                           ;BUTTON.c: 112: return 0;
  6341  00136A  0E00               	movlw	0
  6342  00136C  0012               	return	
  6343  00136E                     __end_of_BUT_ReadButton:
  6344                           	opt stack 0
  6345                           tblptru	equ	0xFF8
  6346                           tblptrh	equ	0xFF7
  6347                           tblptrl	equ	0xFF6
  6348                           tablat	equ	0xFF5
  6349                           prodh	equ	0xFF4
  6350                           prodl	equ	0xFF3
  6351                           intcon	equ	0xFF2
  6352                           intcon2	equ	0xFF1
  6353                           intcon3	equ	0xFF0
  6354                           postinc0	equ	0xFEE
  6355                           wreg	equ	0xFE8
  6356                           postdec1	equ	0xFE5
  6357                           fsr1h	equ	0xFE2
  6358                           fsr1l	equ	0xFE1
  6359                           postinc2	equ	0xFDE
  6360                           postdec2	equ	0xFDD
  6361                           fsr2h	equ	0xFDA
  6362                           fsr2l	equ	0xFD9
  6363                           status	equ	0xFD8
  6364                           
  6365 ;; *************** function _BUT_IR_PinChangeInt *****************
  6366 ;; Defined at:
  6367 ;;		line 55 in file "BUTTON.c"
  6368 ;; Parameters:    Size  Location     Type
  6369 ;;  state           1    wreg     unsigned char 
  6370 ;; Auto vars:     Size  Location     Type
  6371 ;;  state           1    0[BANK1 ] unsigned char 
  6372 ;; Return value:  Size  Location     Type
  6373 ;;		None               void
  6374 ;; Registers used:
  6375 ;;		wreg, status,2
  6376 ;; Tracked objects:
  6377 ;;		On entry : 0/0
  6378 ;;		On exit  : 0/0
  6379 ;;		Unchanged: 0/0
  6380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6381 ;;      Params:         0       0       0       0       0
  6382 ;;      Locals:         0       0       1       0       0
  6383 ;;      Temps:          0       0       0       0       0
  6384 ;;      Totals:         0       0       1       0       0
  6385 ;;Total ram usage:        1 bytes
  6386 ;; Hardware stack levels used:    1
  6387 ;; Hardware stack levels required when called:   12
  6388 ;; This function calls:
  6389 ;;		Nothing
  6390 ;; This function is called by:
  6391 ;;		_InitButton
  6392 ;; This function uses a non-reentrant model
  6393 ;;
  6394                           
  6395                           	psect	text42
  6396  00187C                     __ptext42:
  6397                           	opt stack 0
  6398  00187C                     _BUT_IR_PinChangeInt:
  6399                           	opt stack 16
  6400                           
  6401                           ; BSR set to: 0
  6402                           ;incstack = 0
  6403                           ;BUT_IR_PinChangeInt@state stored from wreg
  6404  00187C  0101               	movlb	1	; () banked
  6405  00187E  6F80               	movwf	BUT_IR_PinChangeInt@state& (0+255),b
  6406                           
  6407                           ;BUTTON.c: 57: if(state)
  6408  001880  0101               	movlb	1	; () banked
  6409  001882  5180               	movf	BUT_IR_PinChangeInt@state& (0+255),w,b
  6410  001884  0101               	movlb	1	; () banked
  6411  001886  B4D8               	btfsc	status,2,c
  6412  001888  D002               	goto	l972
  6413                           
  6414                           ; BSR set to: 1
  6415                           ;BUTTON.c: 58: {
  6416                           ;BUTTON.c: 60: INTCONbits.RBIE = 1;
  6417  00188A  86F2               	bsf	intcon,3,c	;volatile
  6418                           
  6419                           ;BUTTON.c: 61: }
  6420  00188C  0012               	return	
  6421  00188E                     l972:
  6422                           
  6423                           ; BSR set to: 1
  6424                           ;BUTTON.c: 62: else
  6425                           ;BUTTON.c: 63: {
  6426                           ;BUTTON.c: 65: INTCONbits.RBIE = 0;
  6427  00188E  96F2               	bcf	intcon,3,c	;volatile
  6428  001890  0012               	return	
  6429  001892                     __end_of_BUT_IR_PinChangeInt:
  6430                           	opt stack 0
  6431                           tblptru	equ	0xFF8
  6432                           tblptrh	equ	0xFF7
  6433                           tblptrl	equ	0xFF6
  6434                           tablat	equ	0xFF5
  6435                           prodh	equ	0xFF4
  6436                           prodl	equ	0xFF3
  6437                           intcon	equ	0xFF2
  6438                           intcon2	equ	0xFF1
  6439                           intcon3	equ	0xFF0
  6440                           postinc0	equ	0xFEE
  6441                           wreg	equ	0xFE8
  6442                           postdec1	equ	0xFE5
  6443                           fsr1h	equ	0xFE2
  6444                           fsr1l	equ	0xFE1
  6445                           postinc2	equ	0xFDE
  6446                           postdec2	equ	0xFDD
  6447                           fsr2h	equ	0xFDA
  6448                           fsr2l	equ	0xFD9
  6449                           status	equ	0xFD8
  6450                           
  6451 ;; *************** function _InitADC *****************
  6452 ;; Defined at:
  6453 ;;		line 122 in file "ADC.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;		None
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;		None
  6458 ;; Return value:  Size  Location     Type
  6459 ;;		None               void
  6460 ;; Registers used:
  6461 ;;		wreg, status,2, status,0, cstack
  6462 ;; Tracked objects:
  6463 ;;		On entry : 0/0
  6464 ;;		On exit  : 0/0
  6465 ;;		Unchanged: 0/0
  6466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6467 ;;      Params:         0       0       0       0       0
  6468 ;;      Locals:         0       0       0       0       0
  6469 ;;      Temps:          0       0       0       0       0
  6470 ;;      Totals:         0       0       0       0       0
  6471 ;;Total ram usage:        0 bytes
  6472 ;; Hardware stack levels used:    1
  6473 ;; Hardware stack levels required when called:   13
  6474 ;; This function calls:
  6475 ;;		_ADC_ChangeChannel
  6476 ;;		_ADC_ConversionInt
  6477 ;;		_ADC_Module
  6478 ;; This function is called by:
  6479 ;;		_Init_System
  6480 ;; This function uses a non-reentrant model
  6481 ;;
  6482                           
  6483                           	psect	text43
  6484  0015C4                     __ptext43:
  6485                           	opt stack 0
  6486  0015C4                     _InitADC:
  6487                           	opt stack 16
  6488                           
  6489                           ;ADC.c: 124: ADCON1bits.VCFG1 = 0;
  6490                           
  6491                           ; BSR set to: 1
  6492                           ;incstack = 0
  6493  0015C4  9AC1               	bcf	4033,5,c	;volatile
  6494                           
  6495                           ;ADC.c: 125: ADCON1bits.VCFG0 = 0;
  6496  0015C6  98C1               	bcf	4033,4,c	;volatile
  6497                           
  6498                           ;ADC.c: 126: ADCON2bits.ADFM = 1;
  6499  0015C8  8EC0               	bsf	4032,7,c	;volatile
  6500                           
  6501                           ;ADC.c: 127: ADCON2bits.ACQT = 0b111;
  6502  0015CA  86C0               	bsf	4032,3,c	;volatile
  6503  0015CC  88C0               	bsf	4032,4,c	;volatile
  6504  0015CE  8AC0               	bsf	4032,5,c	;volatile
  6505                           
  6506                           ;ADC.c: 128: ADCON2bits.ADCS = 0b110;
  6507  0015D0  50C0               	movf	4032,w,c	;volatile
  6508  0015D2  0BF8               	andlw	-8
  6509  0015D4  0906               	iorlw	6
  6510  0015D6  6EC0               	movwf	4032,c	;volatile
  6511                           
  6512                           ;ADC.c: 129: IPR1bits.ADIP = 0;
  6513  0015D8  9C9F               	bcf	3999,6,c	;volatile
  6514                           
  6515                           ;ADC.c: 130: ADC_ChangeChannel();
  6516  0015DA  EC0A  F00B         	call	_ADC_ChangeChannel	;wreg free
  6517                           
  6518                           ;ADC.c: 131: ADC_ConversionInt(1);
  6519  0015DE  0E01               	movlw	1
  6520  0015E0  EC54  F00C         	call	_ADC_ConversionInt
  6521                           
  6522                           ;ADC.c: 132: ADC_Module(1);
  6523  0015E4  0E01               	movlw	1
  6524  0015E6  EC49  F00C         	call	_ADC_Module
  6525  0015EA  0012               	return		;funcret
  6526  0015EC                     __end_of_InitADC:
  6527                           	opt stack 0
  6528                           tblptru	equ	0xFF8
  6529                           tblptrh	equ	0xFF7
  6530                           tblptrl	equ	0xFF6
  6531                           tablat	equ	0xFF5
  6532                           prodh	equ	0xFF4
  6533                           prodl	equ	0xFF3
  6534                           intcon	equ	0xFF2
  6535                           intcon2	equ	0xFF1
  6536                           intcon3	equ	0xFF0
  6537                           postinc0	equ	0xFEE
  6538                           wreg	equ	0xFE8
  6539                           postdec1	equ	0xFE5
  6540                           fsr1h	equ	0xFE2
  6541                           fsr1l	equ	0xFE1
  6542                           postinc2	equ	0xFDE
  6543                           postdec2	equ	0xFDD
  6544                           fsr2h	equ	0xFDA
  6545                           fsr2l	equ	0xFD9
  6546                           status	equ	0xFD8
  6547                           
  6548 ;; *************** function _ADC_Module *****************
  6549 ;; Defined at:
  6550 ;;		line 56 in file "ADC.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;  state           1    wreg     unsigned char 
  6553 ;; Auto vars:     Size  Location     Type
  6554 ;;  state           1    0[BANK1 ] unsigned char 
  6555 ;; Return value:  Size  Location     Type
  6556 ;;		None               void
  6557 ;; Registers used:
  6558 ;;		wreg, status,2
  6559 ;; Tracked objects:
  6560 ;;		On entry : 0/0
  6561 ;;		On exit  : 0/0
  6562 ;;		Unchanged: 0/0
  6563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6564 ;;      Params:         0       0       0       0       0
  6565 ;;      Locals:         0       0       1       0       0
  6566 ;;      Temps:          0       0       0       0       0
  6567 ;;      Totals:         0       0       1       0       0
  6568 ;;Total ram usage:        1 bytes
  6569 ;; Hardware stack levels used:    1
  6570 ;; Hardware stack levels required when called:   12
  6571 ;; This function calls:
  6572 ;;		Nothing
  6573 ;; This function is called by:
  6574 ;;		_InitADC
  6575 ;; This function uses a non-reentrant model
  6576 ;;
  6577                           
  6578                           	psect	text44
  6579  001892                     __ptext44:
  6580                           	opt stack 0
  6581  001892                     _ADC_Module:
  6582                           	opt stack 16
  6583                           
  6584                           ;incstack = 0
  6585                           ;ADC_Module@state stored from wreg
  6586  001892  0101               	movlb	1	; () banked
  6587  001894  6F80               	movwf	ADC_Module@state& (0+255),b
  6588                           
  6589                           ;ADC.c: 58: if(state)
  6590  001896  0101               	movlb	1	; () banked
  6591  001898  5180               	movf	ADC_Module@state& (0+255),w,b
  6592  00189A  0101               	movlb	1	; () banked
  6593  00189C  B4D8               	btfsc	status,2,c
  6594  00189E  D002               	goto	l1264
  6595                           
  6596                           ; BSR set to: 1
  6597                           ;ADC.c: 59: {
  6598                           ;ADC.c: 61: ADCON0bits.ADON = 1;
  6599  0018A0  80C2               	bsf	4034,0,c	;volatile
  6600                           
  6601                           ;ADC.c: 62: }
  6602  0018A2  0012               	return	
  6603  0018A4                     l1264:
  6604                           
  6605                           ; BSR set to: 1
  6606                           ;ADC.c: 63: else
  6607                           ;ADC.c: 64: {
  6608                           ;ADC.c: 66: ADCON0bits.ADON = 0;
  6609  0018A4  90C2               	bcf	4034,0,c	;volatile
  6610  0018A6  0012               	return	
  6611  0018A8                     __end_of_ADC_Module:
  6612                           	opt stack 0
  6613                           tblptru	equ	0xFF8
  6614                           tblptrh	equ	0xFF7
  6615                           tblptrl	equ	0xFF6
  6616                           tablat	equ	0xFF5
  6617                           prodh	equ	0xFF4
  6618                           prodl	equ	0xFF3
  6619                           intcon	equ	0xFF2
  6620                           intcon2	equ	0xFF1
  6621                           intcon3	equ	0xFF0
  6622                           postinc0	equ	0xFEE
  6623                           wreg	equ	0xFE8
  6624                           postdec1	equ	0xFE5
  6625                           fsr1h	equ	0xFE2
  6626                           fsr1l	equ	0xFE1
  6627                           postinc2	equ	0xFDE
  6628                           postdec2	equ	0xFDD
  6629                           fsr2h	equ	0xFDA
  6630                           fsr2l	equ	0xFD9
  6631                           status	equ	0xFD8
  6632                           
  6633 ;; *************** function _ADC_ConversionInt *****************
  6634 ;; Defined at:
  6635 ;;		line 99 in file "ADC.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;  state           1    wreg     unsigned char 
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;  state           1    0[BANK1 ] unsigned char 
  6640 ;; Return value:  Size  Location     Type
  6641 ;;		None               void
  6642 ;; Registers used:
  6643 ;;		wreg, status,2
  6644 ;; Tracked objects:
  6645 ;;		On entry : 0/0
  6646 ;;		On exit  : 0/0
  6647 ;;		Unchanged: 0/0
  6648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6649 ;;      Params:         0       0       0       0       0
  6650 ;;      Locals:         0       0       1       0       0
  6651 ;;      Temps:          0       0       0       0       0
  6652 ;;      Totals:         0       0       1       0       0
  6653 ;;Total ram usage:        1 bytes
  6654 ;; Hardware stack levels used:    1
  6655 ;; Hardware stack levels required when called:   12
  6656 ;; This function calls:
  6657 ;;		Nothing
  6658 ;; This function is called by:
  6659 ;;		_InitADC
  6660 ;; This function uses a non-reentrant model
  6661 ;;
  6662                           
  6663                           	psect	text45
  6664  0018A8                     __ptext45:
  6665                           	opt stack 0
  6666  0018A8                     _ADC_ConversionInt:
  6667                           	opt stack 16
  6668                           
  6669                           ; BSR set to: 1
  6670                           ;incstack = 0
  6671                           ;ADC_ConversionInt@state stored from wreg
  6672  0018A8  0101               	movlb	1	; () banked
  6673  0018AA  6F80               	movwf	ADC_ConversionInt@state& (0+255),b
  6674                           
  6675                           ;ADC.c: 101: if(state)
  6676  0018AC  0101               	movlb	1	; () banked
  6677  0018AE  5180               	movf	ADC_ConversionInt@state& (0+255),w,b
  6678  0018B0  0101               	movlb	1	; () banked
  6679  0018B2  B4D8               	btfsc	status,2,c
  6680  0018B4  D002               	goto	l1276
  6681                           
  6682                           ; BSR set to: 1
  6683                           ;ADC.c: 102: {
  6684                           ;ADC.c: 104: PIE1bits.ADIE = 1;
  6685  0018B6  8C9D               	bsf	3997,6,c	;volatile
  6686                           
  6687                           ;ADC.c: 105: }
  6688  0018B8  0012               	return	
  6689  0018BA                     l1276:
  6690                           
  6691                           ; BSR set to: 1
  6692                           ;ADC.c: 106: else
  6693                           ;ADC.c: 107: {
  6694                           ;ADC.c: 109: PIE1bits.ADIE = 0;
  6695  0018BA  9C9D               	bcf	3997,6,c	;volatile
  6696  0018BC  0012               	return	
  6697  0018BE                     __end_of_ADC_ConversionInt:
  6698                           	opt stack 0
  6699                           tblptru	equ	0xFF8
  6700                           tblptrh	equ	0xFF7
  6701                           tblptrl	equ	0xFF6
  6702                           tablat	equ	0xFF5
  6703                           prodh	equ	0xFF4
  6704                           prodl	equ	0xFF3
  6705                           intcon	equ	0xFF2
  6706                           intcon2	equ	0xFF1
  6707                           intcon3	equ	0xFF0
  6708                           postinc0	equ	0xFEE
  6709                           wreg	equ	0xFE8
  6710                           postdec1	equ	0xFE5
  6711                           fsr1h	equ	0xFE2
  6712                           fsr1l	equ	0xFE1
  6713                           postinc2	equ	0xFDE
  6714                           postdec2	equ	0xFDD
  6715                           fsr2h	equ	0xFDA
  6716                           fsr2l	equ	0xFD9
  6717                           status	equ	0xFD8
  6718                           
  6719 ;; *************** function _ADC_ChangeChannel *****************
  6720 ;; Defined at:
  6721 ;;		line 166 in file "ADC.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;		None
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;		None
  6726 ;; Return value:  Size  Location     Type
  6727 ;;		None               void
  6728 ;; Registers used:
  6729 ;;		wreg, status,2, status,0
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6735 ;;      Params:         0       0       0       0       0
  6736 ;;      Locals:         0       0       0       0       0
  6737 ;;      Temps:          0       0       0       0       0
  6738 ;;      Totals:         0       0       0       0       0
  6739 ;;Total ram usage:        0 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:   12
  6742 ;; This function calls:
  6743 ;;		Nothing
  6744 ;; This function is called by:
  6745 ;;		_InitADC
  6746 ;; This function uses a non-reentrant model
  6747 ;;
  6748                           
  6749                           	psect	text46
  6750  001614                     __ptext46:
  6751                           	opt stack 0
  6752  001614                     _ADC_ChangeChannel:
  6753                           	opt stack 16
  6754                           
  6755                           ;ADC.c: 168: if(ADC_CurrentSource == 10)
  6756                           
  6757                           ; BSR set to: 1
  6758                           ;incstack = 0
  6759  001614  0E0A               	movlw	10
  6760  001616  185F               	xorwf	_ADC_CurrentSource,w,c
  6761  001618  A4D8               	btfss	status,2,c
  6762  00161A  D007               	goto	l7436
  6763                           
  6764                           ;ADC.c: 169: {
  6765                           ;ADC.c: 170: ADC_CurrentSource = 11;
  6766  00161C  0E0B               	movlw	11
  6767  00161E  6E5F               	movwf	_ADC_CurrentSource,c
  6768                           
  6769                           ;ADC.c: 171: ADCON0bits.CHS = 1;
  6770  001620  50C2               	movf	4034,w,c	;volatile
  6771  001622  0BC3               	andlw	-61
  6772  001624  0904               	iorlw	4
  6773  001626  6EC2               	movwf	4034,c	;volatile
  6774                           
  6775                           ;ADC.c: 172: }
  6776  001628  0012               	return	
  6777  00162A                     l7436:
  6778                           
  6779                           ;ADC.c: 173: else
  6780                           ;ADC.c: 174: {
  6781                           ;ADC.c: 175: ADC_CurrentSource = 10;
  6782  00162A  0E0A               	movlw	10
  6783  00162C  6E5F               	movwf	_ADC_CurrentSource,c
  6784                           
  6785                           ;ADC.c: 176: ADCON0bits.CHS = 0;
  6786  00162E  94C2               	bcf	4034,2,c	;volatile
  6787  001630  96C2               	bcf	4034,3,c	;volatile
  6788  001632  98C2               	bcf	4034,4,c	;volatile
  6789  001634  9AC2               	bcf	4034,5,c	;volatile
  6790  001636  0012               	return	
  6791  001638                     __end_of_ADC_ChangeChannel:
  6792                           	opt stack 0
  6793                           tblptru	equ	0xFF8
  6794                           tblptrh	equ	0xFF7
  6795                           tblptrl	equ	0xFF6
  6796                           tablat	equ	0xFF5
  6797                           prodh	equ	0xFF4
  6798                           prodl	equ	0xFF3
  6799                           intcon	equ	0xFF2
  6800                           intcon2	equ	0xFF1
  6801                           intcon3	equ	0xFF0
  6802                           postinc0	equ	0xFEE
  6803                           wreg	equ	0xFE8
  6804                           postdec1	equ	0xFE5
  6805                           fsr1h	equ	0xFE2
  6806                           fsr1l	equ	0xFE1
  6807                           postinc2	equ	0xFDE
  6808                           postdec2	equ	0xFDD
  6809                           fsr2h	equ	0xFDA
  6810                           fsr2l	equ	0xFD9
  6811                           status	equ	0xFD8
  6812                           
  6813 ;; *************** function _IR_ReadReceiver *****************
  6814 ;; Defined at:
  6815 ;;		line 80 in file "IR.c"
  6816 ;; Parameters:    Size  Location     Type
  6817 ;;		None
  6818 ;; Auto vars:     Size  Location     Type
  6819 ;;  value           1    0[BANK1 ] unsigned char 
  6820 ;; Return value:  Size  Location     Type
  6821 ;;                  1    wreg      unsigned char 
  6822 ;; Registers used:
  6823 ;;		wreg, status,2, status,0
  6824 ;; Tracked objects:
  6825 ;;		On entry : 0/0
  6826 ;;		On exit  : 0/0
  6827 ;;		Unchanged: 0/0
  6828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6829 ;;      Params:         0       0       0       0       0
  6830 ;;      Locals:         0       0       1       0       0
  6831 ;;      Temps:          0       0       0       0       0
  6832 ;;      Totals:         0       0       1       0       0
  6833 ;;Total ram usage:        1 bytes
  6834 ;; Hardware stack levels used:    1
  6835 ;; Hardware stack levels required when called:   12
  6836 ;; This function calls:
  6837 ;;		Nothing
  6838 ;; This function is called by:
  6839 ;;		_Init_System
  6840 ;; This function uses a non-reentrant model
  6841 ;;
  6842                           
  6843                           	psect	text47
  6844  00136E                     __ptext47:
  6845                           	opt stack 0
  6846  00136E                     _IR_ReadReceiver:
  6847                           	opt stack 17
  6848                           
  6849                           ;IR.c: 82: unsigned char value = PORTB;
  6850                           
  6851                           ;incstack = 0
  6852  00136E  CF81 F180          	movff	3969,IR_ReadReceiver@value	;volatile
  6853                           
  6854                           ;IR.c: 84: if(value & 0x10)
  6855  001372  0101               	movlb	1	; () banked
  6856  001374  A980               	btfss	IR_ReadReceiver@value& (0+255),4,b
  6857  001376  D00B               	goto	l7496
  6858                           
  6859                           ; BSR set to: 1
  6860                           ;IR.c: 85: {
  6861                           ;IR.c: 86: if(IRValue_prev == 0)
  6862  001378  0100               	movlb	0	; () banked
  6863  00137A  51C3               	movf	_IRValue_prev& (0+255),w,b
  6864  00137C  A4D8               	btfss	status,2,c
  6865  00137E  D002               	goto	l518
  6866                           
  6867                           ; BSR set to: 0
  6868                           ;IR.c: 87: {
  6869                           ;IR.c: 88: IRChange = 1;
  6870  001380  0E01               	movlw	1
  6871  001382  6E5A               	movwf	_IRChange,c
  6872  001384                     l518:
  6873                           
  6874                           ; BSR set to: 0
  6875                           ;IR.c: 89: }
  6876                           ;IR.c: 90: IRValue_prev = 1;
  6877  001384  0E01               	movlw	1
  6878  001386  0100               	movlb	0	; () banked
  6879  001388  6FC3               	movwf	_IRValue_prev& (0+255),b
  6880                           
  6881                           ; BSR set to: 0
  6882                           ;IR.c: 91: return 1;
  6883  00138A  0E01               	movlw	1
  6884                           
  6885                           ; BSR set to: 0
  6886  00138C  0012               	return	
  6887  00138E                     l7496:
  6888                           
  6889                           ;IR.c: 92: }
  6890                           ;IR.c: 94: if(IRValue_prev == 1)
  6891  00138E  0100               	movlb	0	; () banked
  6892  001390  05C3               	decf	_IRValue_prev& (0+255),w,b
  6893  001392  A4D8               	btfss	status,2,c
  6894  001394  D002               	goto	l520
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;IR.c: 95: {
  6898                           ;IR.c: 96: IRChange = 1;
  6899  001396  0E01               	movlw	1
  6900  001398  6E5A               	movwf	_IRChange,c
  6901  00139A                     l520:
  6902                           
  6903                           ; BSR set to: 0
  6904                           ;IR.c: 97: }
  6905                           ;IR.c: 98: IRValue_prev = 0;
  6906  00139A  0E00               	movlw	0
  6907  00139C  0100               	movlb	0	; () banked
  6908  00139E  6FC3               	movwf	_IRValue_prev& (0+255),b
  6909                           
  6910                           ; BSR set to: 0
  6911                           ;IR.c: 99: return 0;
  6912  0013A0  0E00               	movlw	0
  6913  0013A2  0012               	return	
  6914  0013A4                     __end_of_IR_ReadReceiver:
  6915                           	opt stack 0
  6916                           tblptru	equ	0xFF8
  6917                           tblptrh	equ	0xFF7
  6918                           tblptrl	equ	0xFF6
  6919                           tablat	equ	0xFF5
  6920                           prodh	equ	0xFF4
  6921                           prodl	equ	0xFF3
  6922                           intcon	equ	0xFF2
  6923                           intcon2	equ	0xFF1
  6924                           intcon3	equ	0xFF0
  6925                           postinc0	equ	0xFEE
  6926                           wreg	equ	0xFE8
  6927                           postdec1	equ	0xFE5
  6928                           fsr1h	equ	0xFE2
  6929                           fsr1l	equ	0xFE1
  6930                           postinc2	equ	0xFDE
  6931                           postdec2	equ	0xFDD
  6932                           fsr2h	equ	0xFDA
  6933                           fsr2l	equ	0xFD9
  6934                           status	equ	0xFD8
  6935                           
  6936 ;; *************** function _Init_App *****************
  6937 ;; Defined at:
  6938 ;;		line 72 in file "USER.c"
  6939 ;; Parameters:    Size  Location     Type
  6940 ;;		None
  6941 ;; Auto vars:     Size  Location     Type
  6942 ;;		None
  6943 ;; Return value:  Size  Location     Type
  6944 ;;		None               void
  6945 ;; Registers used:
  6946 ;;		wreg, status,2
  6947 ;; Tracked objects:
  6948 ;;		On entry : 0/0
  6949 ;;		On exit  : 0/0
  6950 ;;		Unchanged: 0/0
  6951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6952 ;;      Params:         0       0       0       0       0
  6953 ;;      Locals:         0       0       0       0       0
  6954 ;;      Temps:          0       0       0       0       0
  6955 ;;      Totals:         0       0       0       0       0
  6956 ;;Total ram usage:        0 bytes
  6957 ;; Hardware stack levels used:    1
  6958 ;; Hardware stack levels required when called:   12
  6959 ;; This function calls:
  6960 ;;		Nothing
  6961 ;; This function is called by:
  6962 ;;		_main
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           	psect	text48
  6967  001288                     __ptext48:
  6968                           	opt stack 0
  6969  001288                     _Init_App:
  6970                           	opt stack 18
  6971                           
  6972                           ;USER.c: 74: LATA = 0;
  6973                           
  6974                           ; BSR set to: 0
  6975                           ;incstack = 0
  6976  001288  0E00               	movlw	0
  6977  00128A  6E89               	movwf	3977,c	;volatile
  6978                           
  6979                           ;USER.c: 75: LATB = 0;
  6980  00128C  0E00               	movlw	0
  6981  00128E  6E8A               	movwf	3978,c	;volatile
  6982                           
  6983                           ;USER.c: 76: LATC = 0;
  6984  001290  0E00               	movlw	0
  6985  001292  6E8B               	movwf	3979,c	;volatile
  6986                           
  6987                           ;USER.c: 78: ADCON1bits.PCFG = 0b1101;
  6988  001294  50C1               	movf	4033,w,c	;volatile
  6989  001296  0BF0               	andlw	-16
  6990  001298  090D               	iorlw	13
  6991  00129A  6EC1               	movwf	4033,c	;volatile
  6992                           
  6993                           ;USER.c: 81: TRISCbits.TRISC0 = 1;
  6994  00129C  8094               	bsf	3988,0,c	;volatile
  6995                           
  6996                           ;USER.c: 82: TRISCbits.TRISC1 = 1;
  6997  00129E  8294               	bsf	3988,1,c	;volatile
  6998                           
  6999                           ;USER.c: 85: TRISAbits.TRISA0 = 1;
  7000  0012A0  8092               	bsf	3986,0,c	;volatile
  7001                           
  7002                           ;USER.c: 89: TRISAbits.TRISA1 = 1;
  7003  0012A2  8292               	bsf	3986,1,c	;volatile
  7004                           
  7005                           ;USER.c: 92: TRISAbits.TRISA2 = 0;
  7006  0012A4  9492               	bcf	3986,2,c	;volatile
  7007                           
  7008                           ;USER.c: 95: TRISAbits.TRISA5 = 0;
  7009  0012A6  9A92               	bcf	3986,5,c	;volatile
  7010                           
  7011                           ;USER.c: 98: TRISBbits.TRISB1 = 1;
  7012  0012A8  8293               	bsf	3987,1,c	;volatile
  7013                           
  7014                           ;USER.c: 99: TRISBbits.TRISB2 = 1;
  7015  0012AA  8493               	bsf	3987,2,c	;volatile
  7016                           
  7017                           ;USER.c: 103: TRISBbits.TRISB3 = 0;
  7018  0012AC  9693               	bcf	3987,3,c	;volatile
  7019                           
  7020                           ;USER.c: 106: TRISCbits.TRISC2 = 0;
  7021  0012AE  9494               	bcf	3988,2,c	;volatile
  7022                           
  7023                           ;USER.c: 110: TRISCbits.TRISC3 = 1;
  7024  0012B0  8694               	bsf	3988,3,c	;volatile
  7025                           
  7026                           ;USER.c: 113: TRISCbits.TRISC5 = 1;
  7027  0012B2  8A94               	bsf	3988,5,c	;volatile
  7028                           
  7029                           ;USER.c: 117: TRISCbits.TRISC4 = 0;
  7030  0012B4  9894               	bcf	3988,4,c	;volatile
  7031                           
  7032                           ;USER.c: 121: TRISBbits.TRISB0 = 1;
  7033  0012B6  8093               	bsf	3987,0,c	;volatile
  7034                           
  7035                           ;USER.c: 122: TRISBbits.TRISB4 = 1;
  7036  0012B8  8893               	bsf	3987,4,c	;volatile
  7037                           
  7038                           ;USER.c: 126: TRISBbits.TRISB5 = 1;
  7039  0012BA  8A93               	bsf	3987,5,c	;volatile
  7040                           
  7041                           ;USER.c: 130: TRISAbits.TRISA3 = 1;
  7042  0012BC  8692               	bsf	3986,3,c	;volatile
  7043                           
  7044                           ;USER.c: 142: TRISCbits.TRISC6 = 0;
  7045  0012BE  9C94               	bcf	3988,6,c	;volatile
  7046                           
  7047                           ;USER.c: 143: TRISCbits.TRISC7 = 0;
  7048  0012C0  9E94               	bcf	3988,7,c	;volatile
  7049  0012C2  0012               	return		;funcret
  7050  0012C4                     __end_of_Init_App:
  7051                           	opt stack 0
  7052                           tblptru	equ	0xFF8
  7053                           tblptrh	equ	0xFF7
  7054                           tblptrl	equ	0xFF6
  7055                           tablat	equ	0xFF5
  7056                           prodh	equ	0xFF4
  7057                           prodl	equ	0xFF3
  7058                           intcon	equ	0xFF2
  7059                           intcon2	equ	0xFF1
  7060                           intcon3	equ	0xFF0
  7061                           postinc0	equ	0xFEE
  7062                           wreg	equ	0xFE8
  7063                           postdec1	equ	0xFE5
  7064                           fsr1h	equ	0xFE2
  7065                           fsr1l	equ	0xFE1
  7066                           postinc2	equ	0xFDE
  7067                           postdec2	equ	0xFDD
  7068                           fsr2h	equ	0xFDA
  7069                           fsr2l	equ	0xFD9
  7070                           status	equ	0xFD8
  7071                           
  7072 ;; *************** function _IR_LoadCode *****************
  7073 ;; Defined at:
  7074 ;;		line 129 in file "IR.c"
  7075 ;; Parameters:    Size  Location     Type
  7076 ;;		None
  7077 ;; Auto vars:     Size  Location     Type
  7078 ;;  High            3   29[BANK1 ] unsigned char 
  7079 ;;  Low             3   26[BANK1 ] unsigned char 
  7080 ;; Return value:  Size  Location     Type
  7081 ;;		None               void
  7082 ;; Registers used:
  7083 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7084 ;; Tracked objects:
  7085 ;;		On entry : 0/0
  7086 ;;		On exit  : 0/0
  7087 ;;		Unchanged: 0/0
  7088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7089 ;;      Params:         0       0       0       0       0
  7090 ;;      Locals:         0       0       6       0       0
  7091 ;;      Temps:          0       0       0       0       0
  7092 ;;      Totals:         0       0       6       0       0
  7093 ;;Total ram usage:        6 bytes
  7094 ;; Hardware stack levels used:    1
  7095 ;; Hardware stack levels required when called:   14
  7096 ;; This function calls:
  7097 ;;		_IR_CalculateCodesize
  7098 ;;		___ftmul
  7099 ;;		___fttol
  7100 ;;		___lwtoft
  7101 ;; This function is called by:
  7102 ;;		_main
  7103 ;; This function uses a non-reentrant model
  7104 ;;
  7105                           
  7106                           	psect	text49
  7107  00057C                     __ptext49:
  7108                           	opt stack 0
  7109  00057C                     _IR_LoadCode:
  7110                           	opt stack 16
  7111                           
  7112                           ;IR.c: 131: double Low = 0.0;
  7113                           
  7114                           ;incstack = 0
  7115  00057C  0E00               	movlw	0
  7116  00057E  0101               	movlb	1	; () banked
  7117  000580  6F9A               	movwf	IR_LoadCode@Low& (0+255),b
  7118  000582  0E00               	movlw	0
  7119  000584  0101               	movlb	1	; () banked
  7120  000586  6F9B               	movwf	(IR_LoadCode@Low+1)& (0+255),b
  7121  000588  0E00               	movlw	0
  7122  00058A  0101               	movlb	1	; () banked
  7123  00058C  6F9C               	movwf	(IR_LoadCode@Low+2)& (0+255),b
  7124                           
  7125                           ;IR.c: 132: double High = 0.0;
  7126  00058E  0E00               	movlw	0
  7127  000590  0101               	movlb	1	; () banked
  7128  000592  6F9D               	movwf	IR_LoadCode@High& (0+255),b
  7129  000594  0E00               	movlw	0
  7130  000596  0101               	movlb	1	; () banked
  7131  000598  6F9E               	movwf	(IR_LoadCode@High+1)& (0+255),b
  7132  00059A  0E00               	movlw	0
  7133  00059C  0101               	movlb	1	; () banked
  7134  00059E  6F9F               	movwf	(IR_LoadCode@High+2)& (0+255),b
  7135                           
  7136                           ; BSR set to: 1
  7137                           ;IR.c: 134: Low = (double)IR_SavedTiming[0] * (1.0 - 0.3);
  7138  0005A0  0E00               	movlw	0
  7139  0005A2  6EF6               	movwf	tblptrl,c
  7140  0005A4                     	if	1	;There is more than 1 active tblptr byte
  7141  0005A4  0E24               	movlw	36
  7142  0005A6  6EF7               	movwf	tblptrh,c
  7143  0005A8                     	endif
  7144  0005A8                     	if	0	;There are less than 3 active tblptr bytes
  7145  0005A8                     	endif
  7146  0005A8  0009               	tblrd		*+
  7147  0005AA  CFF5 F188          	movff	tablat,___lwtoft@c
  7148  0005AE  000A               	tblrd		*-
  7149  0005B0  CFF5 F189          	movff	tablat,___lwtoft@c+1
  7150  0005B4  ECA3  F00A         	call	___lwtoft	;wreg free
  7151  0005B8  C188  F18B         	movff	?___lwtoft,___ftmul@f1
  7152  0005BC  C189  F18C         	movff	?___lwtoft+1,___ftmul@f1+1
  7153  0005C0  C18A  F18D         	movff	?___lwtoft+2,___ftmul@f1+2
  7154  0005C4  0E33               	movlw	51
  7155  0005C6  0101               	movlb	1	; () banked
  7156  0005C8  6F8E               	movwf	___ftmul@f2& (0+255),b
  7157  0005CA  0E33               	movlw	51
  7158  0005CC  0101               	movlb	1	; () banked
  7159  0005CE  6F8F               	movwf	(___ftmul@f2+1)& (0+255),b
  7160  0005D0  0E3F               	movlw	63
  7161  0005D2  0101               	movlb	1	; () banked
  7162  0005D4  6F90               	movwf	(___ftmul@f2+2)& (0+255),b
  7163  0005D6  EC72  F01D         	call	___ftmul	;wreg free
  7164  0005DA  C18B  F19A         	movff	?___ftmul,IR_LoadCode@Low
  7165  0005DE  C18C  F19B         	movff	?___ftmul+1,IR_LoadCode@Low+1
  7166  0005E2  C18D  F19C         	movff	?___ftmul+2,IR_LoadCode@Low+2
  7167                           
  7168                           ;IR.c: 135: High = (double)IR_SavedTiming[0] * (1.0 + 0.3);
  7169  0005E6  0E00               	movlw	0
  7170  0005E8  6EF6               	movwf	tblptrl,c
  7171  0005EA                     	if	1	;There is more than 1 active tblptr byte
  7172  0005EA  0E24               	movlw	36
  7173  0005EC  6EF7               	movwf	tblptrh,c
  7174  0005EE                     	endif
  7175  0005EE                     	if	0	;There are less than 3 active tblptr bytes
  7176  0005EE                     	endif
  7177  0005EE  0009               	tblrd		*+
  7178  0005F0  CFF5 F188          	movff	tablat,___lwtoft@c
  7179  0005F4  000A               	tblrd		*-
  7180  0005F6  CFF5 F189          	movff	tablat,___lwtoft@c+1
  7181  0005FA  ECA3  F00A         	call	___lwtoft	;wreg free
  7182  0005FE  C188  F18B         	movff	?___lwtoft,___ftmul@f1
  7183  000602  C189  F18C         	movff	?___lwtoft+1,___ftmul@f1+1
  7184  000606  C18A  F18D         	movff	?___lwtoft+2,___ftmul@f1+2
  7185  00060A  0E66               	movlw	102
  7186  00060C  0101               	movlb	1	; () banked
  7187  00060E  6F8E               	movwf	___ftmul@f2& (0+255),b
  7188  000610  0EA6               	movlw	166
  7189  000612  0101               	movlb	1	; () banked
  7190  000614  6F8F               	movwf	(___ftmul@f2+1)& (0+255),b
  7191  000616  0E3F               	movlw	63
  7192  000618  0101               	movlb	1	; () banked
  7193  00061A  6F90               	movwf	(___ftmul@f2+2)& (0+255),b
  7194  00061C  EC72  F01D         	call	___ftmul	;wreg free
  7195  000620  C18B  F19D         	movff	?___ftmul,IR_LoadCode@High
  7196  000624  C18C  F19E         	movff	?___ftmul+1,IR_LoadCode@High+1
  7197  000628  C18D  F19F         	movff	?___ftmul+2,IR_LoadCode@High+2
  7198                           
  7199                           ;IR.c: 137: IR_SyncLow = (unsigned int) Low;
  7200  00062C  C19A  F180         	movff	IR_LoadCode@Low,___fttol@f1
  7201  000630  C19B  F181         	movff	IR_LoadCode@Low+1,___fttol@f1+1
  7202  000634  C19C  F182         	movff	IR_LoadCode@Low+2,___fttol@f1+2
  7203  000638  ECD0  F01E         	call	___fttol	;wreg free
  7204  00063C  C180  F051         	movff	?___fttol,_IR_SyncLow
  7205  000640  C181  F052         	movff	?___fttol+1,_IR_SyncLow+1
  7206                           
  7207                           ;IR.c: 138: IR_SyncHigh = (unsigned int) High;
  7208  000644  C19D  F180         	movff	IR_LoadCode@High,___fttol@f1
  7209  000648  C19E  F181         	movff	IR_LoadCode@High+1,___fttol@f1+1
  7210  00064C  C19F  F182         	movff	IR_LoadCode@High+2,___fttol@f1+2
  7211  000650  ECD0  F01E         	call	___fttol	;wreg free
  7212  000654  C180  F04F         	movff	?___fttol,_IR_SyncHigh
  7213  000658  C181  F050         	movff	?___fttol+1,_IR_SyncHigh+1
  7214                           
  7215                           ;IR.c: 140: IR_CodeSize = IR_CalculateCodesize();
  7216  00065C  ECE5  F008         	call	_IR_CalculateCodesize	;wreg free
  7217  000660  6E5C               	movwf	_IR_CodeSize,c
  7218  000662  0012               	return		;funcret
  7219  000664                     __end_of_IR_LoadCode:
  7220                           	opt stack 0
  7221                           tblptru	equ	0xFF8
  7222                           tblptrh	equ	0xFF7
  7223                           tblptrl	equ	0xFF6
  7224                           tablat	equ	0xFF5
  7225                           prodh	equ	0xFF4
  7226                           prodl	equ	0xFF3
  7227                           intcon	equ	0xFF2
  7228                           intcon2	equ	0xFF1
  7229                           intcon3	equ	0xFF0
  7230                           postinc0	equ	0xFEE
  7231                           wreg	equ	0xFE8
  7232                           postdec1	equ	0xFE5
  7233                           fsr1h	equ	0xFE2
  7234                           fsr1l	equ	0xFE1
  7235                           postinc2	equ	0xFDE
  7236                           postdec2	equ	0xFDD
  7237                           fsr2h	equ	0xFDA
  7238                           fsr2l	equ	0xFD9
  7239                           status	equ	0xFD8
  7240                           
  7241 ;; *************** function ___lwtoft *****************
  7242 ;; Defined at:
  7243 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
  7244 ;; Parameters:    Size  Location     Type
  7245 ;;  c               2    8[BANK1 ] unsigned int 
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;		None
  7248 ;; Return value:  Size  Location     Type
  7249 ;;                  3    8[BANK1 ] float 
  7250 ;; Registers used:
  7251 ;;		wreg, status,2, status,0, cstack
  7252 ;; Tracked objects:
  7253 ;;		On entry : 0/0
  7254 ;;		On exit  : 0/0
  7255 ;;		Unchanged: 0/0
  7256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7257 ;;      Params:         0       0       3       0       0
  7258 ;;      Locals:         0       0       0       0       0
  7259 ;;      Temps:          0       0       0       0       0
  7260 ;;      Totals:         0       0       3       0       0
  7261 ;;Total ram usage:        3 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; Hardware stack levels required when called:   13
  7264 ;; This function calls:
  7265 ;;		___ftpack
  7266 ;; This function is called by:
  7267 ;;		_RF_LoadCode
  7268 ;;		_IR_LoadCode
  7269 ;; This function uses a non-reentrant model
  7270 ;;
  7271                           
  7272                           	psect	text50
  7273  001546                     __ptext50:
  7274                           	opt stack 0
  7275  001546                     ___lwtoft:
  7276                           	opt stack 16
  7277                           
  7278                           ;incstack = 0
  7279  001546  C188  F180         	movff	___lwtoft@c,___ftpack@arg
  7280  00154A  C189  F181         	movff	___lwtoft@c+1,___ftpack@arg+1
  7281  00154E  0101               	movlb	1	; () banked
  7282  001550  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  7283  001552  0E8E               	movlw	142
  7284  001554  0101               	movlb	1	; () banked
  7285  001556  6F83               	movwf	___ftpack@exp& (0+255),b
  7286  001558  0E00               	movlw	0
  7287  00155A  0101               	movlb	1	; () banked
  7288  00155C  6F84               	movwf	___ftpack@sign& (0+255),b
  7289  00155E  EC72  F01F         	call	___ftpack	;wreg free
  7290  001562  C180  F188         	movff	?___ftpack,?___lwtoft
  7291  001566  C181  F189         	movff	?___ftpack+1,?___lwtoft+1
  7292  00156A  C182  F18A         	movff	?___ftpack+2,?___lwtoft+2
  7293  00156E  0012               	return	
  7294  001570                     __end_of___lwtoft:
  7295                           	opt stack 0
  7296                           tblptru	equ	0xFF8
  7297                           tblptrh	equ	0xFF7
  7298                           tblptrl	equ	0xFF6
  7299                           tablat	equ	0xFF5
  7300                           prodh	equ	0xFF4
  7301                           prodl	equ	0xFF3
  7302                           intcon	equ	0xFF2
  7303                           intcon2	equ	0xFF1
  7304                           intcon3	equ	0xFF0
  7305                           postinc0	equ	0xFEE
  7306                           wreg	equ	0xFE8
  7307                           postdec1	equ	0xFE5
  7308                           fsr1h	equ	0xFE2
  7309                           fsr1l	equ	0xFE1
  7310                           postinc2	equ	0xFDE
  7311                           postdec2	equ	0xFDD
  7312                           fsr2h	equ	0xFDA
  7313                           fsr2l	equ	0xFD9
  7314                           status	equ	0xFD8
  7315                           
  7316 ;; *************** function ___fttol *****************
  7317 ;; Defined at:
  7318 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  7319 ;; Parameters:    Size  Location     Type
  7320 ;;  f1              3    0[BANK1 ] float 
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;  lval            4   10[BANK1 ] unsigned long 
  7323 ;;  exp1            1   14[BANK1 ] unsigned char 
  7324 ;;  sign1           1    9[BANK1 ] unsigned char 
  7325 ;; Return value:  Size  Location     Type
  7326 ;;                  4    0[BANK1 ] long 
  7327 ;; Registers used:
  7328 ;;		wreg, status,2, status,0
  7329 ;; Tracked objects:
  7330 ;;		On entry : 0/0
  7331 ;;		On exit  : 0/0
  7332 ;;		Unchanged: 0/0
  7333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7334 ;;      Params:         0       0       4       0       0
  7335 ;;      Locals:         0       0       6       0       0
  7336 ;;      Temps:          0       0       5       0       0
  7337 ;;      Totals:         0       0      15       0       0
  7338 ;;Total ram usage:       15 bytes
  7339 ;; Hardware stack levels used:    1
  7340 ;; Hardware stack levels required when called:   12
  7341 ;; This function calls:
  7342 ;;		Nothing
  7343 ;; This function is called by:
  7344 ;;		_RF_LoadCode
  7345 ;;		_IR_LoadCode
  7346 ;;		_MSC_Round
  7347 ;;		_MSC_DB_Round
  7348 ;;		_MSC_LG_Round
  7349 ;;		_MSC_Scale
  7350 ;; This function uses a non-reentrant model
  7351 ;;
  7352                           
  7353                           	psect	text51
  7354  003DA0                     __ptext51:
  7355                           	opt stack 0
  7356  003DA0                     ___fttol:
  7357                           	opt stack 17
  7358                           
  7359                           ;incstack = 0
  7360  003DA0  C182  F184         	movff	___fttol@f1+2,??___fttol
  7361  003DA4  0101               	movlb	1	; () banked
  7362  003DA6  6B85               	clrf	(??___fttol+1)& (0+255),b
  7363  003DA8  6B86               	clrf	(??___fttol+2)& (0+255),b
  7364  003DAA  0101               	movlb	1	; () banked
  7365  003DAC  3581               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7366  003DAE  0101               	movlb	1	; () banked
  7367  003DB0  3784               	rlcf	??___fttol& (0+255),f,b
  7368  003DB2  E301               	bnc	u8701
  7369  003DB4  8185               	bsf	(??___fttol+1)& (0+255),0,b
  7370  003DB6                     u8701:
  7371  003DB6  0101               	movlb	1	; () banked
  7372  003DB8  5184               	movf	??___fttol& (0+255),w,b
  7373  003DBA  0101               	movlb	1	; () banked
  7374  003DBC  6F8E               	movwf	___fttol@exp1& (0+255),b
  7375  003DBE  0101               	movlb	1	; () banked
  7376  003DC0  518E               	movf	___fttol@exp1& (0+255),w,b
  7377  003DC2  A4D8               	btfss	status,2,c
  7378  003DC4  D00A               	goto	l7660
  7379                           
  7380                           ; BSR set to: 1
  7381  003DC6  0E00               	movlw	0
  7382  003DC8  0101               	movlb	1	; () banked
  7383  003DCA  6F80               	movwf	?___fttol& (0+255),b
  7384  003DCC  0E00               	movlw	0
  7385  003DCE  6F81               	movwf	(?___fttol+1)& (0+255),b
  7386  003DD0  0E00               	movlw	0
  7387  003DD2  6F82               	movwf	(?___fttol+2)& (0+255),b
  7388  003DD4  0E00               	movlw	0
  7389  003DD6  6F83               	movwf	(?___fttol+3)& (0+255),b
  7390                           
  7391                           ; BSR set to: 1
  7392  003DD8  0012               	return	
  7393  003DDA                     l7660:
  7394                           
  7395                           ; BSR set to: 1
  7396  003DDA  0E17               	movlw	23
  7397  003DDC  0101               	movlb	1	; () banked
  7398  003DDE  6F84               	movwf	??___fttol& (0+255),b
  7399  003DE0  C180  F185         	movff	___fttol@f1,??___fttol+1
  7400  003DE4  C181  F186         	movff	___fttol@f1+1,??___fttol+2
  7401  003DE8  C182  F187         	movff	___fttol@f1+2,??___fttol+3
  7402  003DEC  0101               	movlb	1	; () banked
  7403  003DEE  2984               	incf	??___fttol& (0+255),w,b
  7404  003DF0  0101               	movlb	1	; () banked
  7405  003DF2  6F88               	movwf	(??___fttol+4)& (0+255),b
  7406  003DF4  D005               	goto	u8720
  7407  003DF6                     u8725:
  7408  003DF6  0101               	movlb	1	; () banked
  7409  003DF8  90D8               	bcf	status,0,c
  7410  003DFA  3387               	rrcf	(??___fttol+3)& (0+255),f,b
  7411  003DFC  3386               	rrcf	(??___fttol+2)& (0+255),f,b
  7412  003DFE  3385               	rrcf	(??___fttol+1)& (0+255),f,b
  7413  003E00                     u8720:
  7414  003E00  0101               	movlb	1	; () banked
  7415  003E02  2F88               	decfsz	(??___fttol+4)& (0+255),f,b
  7416  003E04  D7F8               	goto	u8725
  7417  003E06  0101               	movlb	1	; () banked
  7418  003E08  5185               	movf	(??___fttol+1)& (0+255),w,b
  7419  003E0A  0101               	movlb	1	; () banked
  7420  003E0C  6F89               	movwf	___fttol@sign1& (0+255),b
  7421                           
  7422                           ; BSR set to: 1
  7423  003E0E  0101               	movlb	1	; () banked
  7424  003E10  8F81               	bsf	(___fttol@f1+1)& (0+255),7,b
  7425                           
  7426                           ; BSR set to: 1
  7427  003E12  0EFF               	movlw	255
  7428  003E14  0101               	movlb	1	; () banked
  7429  003E16  1780               	andwf	___fttol@f1& (0+255),f,b
  7430  003E18  0EFF               	movlw	255
  7431  003E1A  0101               	movlb	1	; () banked
  7432  003E1C  1781               	andwf	(___fttol@f1+1)& (0+255),f,b
  7433  003E1E  0E00               	movlw	0
  7434  003E20  0101               	movlb	1	; () banked
  7435  003E22  1782               	andwf	(___fttol@f1+2)& (0+255),f,b
  7436                           
  7437                           ; BSR set to: 1
  7438  003E24  0101               	movlb	1	; () banked
  7439  003E26  5180               	movf	___fttol@f1& (0+255),w,b
  7440  003E28  0101               	movlb	1	; () banked
  7441  003E2A  6F8A               	movwf	___fttol@lval& (0+255),b
  7442  003E2C  0101               	movlb	1	; () banked
  7443  003E2E  5181               	movf	(___fttol@f1+1)& (0+255),w,b
  7444  003E30  0101               	movlb	1	; () banked
  7445  003E32  6F8B               	movwf	(___fttol@lval+1)& (0+255),b
  7446  003E34  0101               	movlb	1	; () banked
  7447  003E36  5182               	movf	(___fttol@f1+2)& (0+255),w,b
  7448  003E38  0101               	movlb	1	; () banked
  7449  003E3A  6F8C               	movwf	(___fttol@lval+2)& (0+255),b
  7450  003E3C  0101               	movlb	1	; () banked
  7451  003E3E  6B8D               	clrf	(___fttol@lval+3)& (0+255),b
  7452                           
  7453                           ; BSR set to: 1
  7454  003E40  0E8E               	movlw	142
  7455  003E42  0101               	movlb	1	; () banked
  7456  003E44  5F8E               	subwf	___fttol@exp1& (0+255),f,b
  7457                           
  7458                           ; BSR set to: 1
  7459  003E46  0101               	movlb	1	; () banked
  7460  003E48  AF8E               	btfss	___fttol@exp1& (0+255),7,b
  7461  003E4A  D01A               	goto	l7682
  7462                           
  7463                           ; BSR set to: 1
  7464  003E4C  0101               	movlb	1	; () banked
  7465  003E4E  518E               	movf	___fttol@exp1& (0+255),w,b
  7466  003E50  0A80               	xorlw	128
  7467  003E52  0F8F               	addlw	143
  7468  003E54  B0D8               	btfsc	status,0,c
  7469  003E56  D00A               	goto	l7678
  7470                           
  7471                           ; BSR set to: 1
  7472  003E58  0E00               	movlw	0
  7473  003E5A  0101               	movlb	1	; () banked
  7474  003E5C  6F80               	movwf	?___fttol& (0+255),b
  7475  003E5E  0E00               	movlw	0
  7476  003E60  6F81               	movwf	(?___fttol+1)& (0+255),b
  7477  003E62  0E00               	movlw	0
  7478  003E64  6F82               	movwf	(?___fttol+2)& (0+255),b
  7479  003E66  0E00               	movlw	0
  7480  003E68  6F83               	movwf	(?___fttol+3)& (0+255),b
  7481                           
  7482                           ; BSR set to: 1
  7483  003E6A  0012               	return	
  7484  003E6C                     l7678:
  7485                           
  7486                           ; BSR set to: 1
  7487  003E6C  0101               	movlb	1	; () banked
  7488  003E6E  90D8               	bcf	status,0,c
  7489  003E70  338D               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7490  003E72  338C               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7491  003E74  338B               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7492  003E76  338A               	rrcf	___fttol@lval& (0+255),f,b
  7493                           
  7494                           ; BSR set to: 1
  7495  003E78  0101               	movlb	1	; () banked
  7496  003E7A  3F8E               	incfsz	___fttol@exp1& (0+255),f,b
  7497  003E7C  D7F7               	goto	l7678
  7498                           
  7499                           ; BSR set to: 1
  7500  003E7E  D01B               	goto	l7692
  7501  003E80                     l7682:
  7502                           
  7503                           ; BSR set to: 1
  7504  003E80  0E17               	movlw	23
  7505  003E82  0101               	movlb	1	; () banked
  7506  003E84  658E               	cpfsgt	___fttol@exp1& (0+255),b
  7507  003E86  D012               	goto	l7690
  7508                           
  7509                           ; BSR set to: 1
  7510  003E88  0E00               	movlw	0
  7511  003E8A  0101               	movlb	1	; () banked
  7512  003E8C  6F80               	movwf	?___fttol& (0+255),b
  7513  003E8E  0E00               	movlw	0
  7514  003E90  6F81               	movwf	(?___fttol+1)& (0+255),b
  7515  003E92  0E00               	movlw	0
  7516  003E94  6F82               	movwf	(?___fttol+2)& (0+255),b
  7517  003E96  0E00               	movlw	0
  7518  003E98  6F83               	movwf	(?___fttol+3)& (0+255),b
  7519                           
  7520                           ; BSR set to: 1
  7521  003E9A  0012               	return	
  7522  003E9C                     l7688:
  7523                           
  7524                           ; BSR set to: 1
  7525  003E9C  0101               	movlb	1	; () banked
  7526  003E9E  90D8               	bcf	status,0,c
  7527  003EA0  378A               	rlcf	___fttol@lval& (0+255),f,b
  7528  003EA2  378B               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7529  003EA4  378C               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7530  003EA6  378D               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7531  003EA8  0101               	movlb	1	; () banked
  7532  003EAA  078E               	decf	___fttol@exp1& (0+255),f,b
  7533  003EAC                     l7690:
  7534                           
  7535                           ; BSR set to: 1
  7536  003EAC  0101               	movlb	1	; () banked
  7537  003EAE  518E               	movf	___fttol@exp1& (0+255),w,b
  7538  003EB0  0101               	movlb	1	; () banked
  7539  003EB2  A4D8               	btfss	status,2,c
  7540  003EB4  D7F3               	goto	l7688
  7541  003EB6                     l7692:
  7542                           
  7543                           ; BSR set to: 1
  7544  003EB6  0101               	movlb	1	; () banked
  7545  003EB8  5189               	movf	___fttol@sign1& (0+255),w,b
  7546  003EBA  0101               	movlb	1	; () banked
  7547  003EBC  B4D8               	btfsc	status,2,c
  7548  003EBE  D009               	goto	l7696
  7549                           
  7550                           ; BSR set to: 1
  7551  003EC0  0101               	movlb	1	; () banked
  7552  003EC2  1F8D               	comf	(___fttol@lval+3)& (0+255),f,b
  7553  003EC4  1F8C               	comf	(___fttol@lval+2)& (0+255),f,b
  7554  003EC6  1F8B               	comf	(___fttol@lval+1)& (0+255),f,b
  7555  003EC8  6D8A               	negf	___fttol@lval& (0+255),b
  7556  003ECA  0E00               	movlw	0
  7557  003ECC  238B               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7558  003ECE  238C               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7559  003ED0  238D               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7560  003ED2                     l7696:
  7561                           
  7562                           ; BSR set to: 1
  7563  003ED2  C18A  F180         	movff	___fttol@lval,?___fttol
  7564  003ED6  C18B  F181         	movff	___fttol@lval+1,?___fttol+1
  7565  003EDA  C18C  F182         	movff	___fttol@lval+2,?___fttol+2
  7566  003EDE  C18D  F183         	movff	___fttol@lval+3,?___fttol+3
  7567  003EE2  0012               	return	
  7568  003EE4                     __end_of___fttol:
  7569                           	opt stack 0
  7570                           tblptru	equ	0xFF8
  7571                           tblptrh	equ	0xFF7
  7572                           tblptrl	equ	0xFF6
  7573                           tablat	equ	0xFF5
  7574                           prodh	equ	0xFF4
  7575                           prodl	equ	0xFF3
  7576                           intcon	equ	0xFF2
  7577                           intcon2	equ	0xFF1
  7578                           intcon3	equ	0xFF0
  7579                           postinc0	equ	0xFEE
  7580                           wreg	equ	0xFE8
  7581                           postdec1	equ	0xFE5
  7582                           fsr1h	equ	0xFE2
  7583                           fsr1l	equ	0xFE1
  7584                           postinc2	equ	0xFDE
  7585                           postdec2	equ	0xFDD
  7586                           fsr2h	equ	0xFDA
  7587                           fsr2l	equ	0xFD9
  7588                           status	equ	0xFD8
  7589                           
  7590 ;; *************** function ___ftmul *****************
  7591 ;; Defined at:
  7592 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;  f1              3   11[BANK1 ] float 
  7595 ;;  f2              3   14[BANK1 ] float 
  7596 ;; Auto vars:     Size  Location     Type
  7597 ;;  f3_as_produc    3   21[BANK1 ] unsigned um
  7598 ;;  sign            1   25[BANK1 ] unsigned char 
  7599 ;;  cntr            1   24[BANK1 ] unsigned char 
  7600 ;;  exp             1   20[BANK1 ] unsigned char 
  7601 ;; Return value:  Size  Location     Type
  7602 ;;                  3   11[BANK1 ] float 
  7603 ;; Registers used:
  7604 ;;		wreg, status,2, status,0, cstack
  7605 ;; Tracked objects:
  7606 ;;		On entry : 0/0
  7607 ;;		On exit  : 0/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7610 ;;      Params:         0       0       6       0       0
  7611 ;;      Locals:         0       0       6       0       0
  7612 ;;      Temps:          0       0       3       0       0
  7613 ;;      Totals:         0       0      15       0       0
  7614 ;;Total ram usage:       15 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:   13
  7617 ;; This function calls:
  7618 ;;		___ftpack
  7619 ;; This function is called by:
  7620 ;;		_RF_LoadCode
  7621 ;;		_IR_LoadCode
  7622 ;;		_MSC_Scale
  7623 ;; This function uses a non-reentrant model
  7624 ;;
  7625                           
  7626                           	psect	text52
  7627  003AE4                     __ptext52:
  7628                           	opt stack 0
  7629  003AE4                     ___ftmul:
  7630                           	opt stack 16
  7631                           
  7632                           ; BSR set to: 1
  7633                           ;incstack = 0
  7634  003AE4  C18D  F191         	movff	___ftmul@f1+2,??___ftmul
  7635  003AE8  0101               	movlb	1	; () banked
  7636  003AEA  6B92               	clrf	(??___ftmul+1)& (0+255),b
  7637  003AEC  6B93               	clrf	(??___ftmul+2)& (0+255),b
  7638  003AEE  0101               	movlb	1	; () banked
  7639  003AF0  358C               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7640  003AF2  0101               	movlb	1	; () banked
  7641  003AF4  3791               	rlcf	??___ftmul& (0+255),f,b
  7642  003AF6  E301               	bnc	u8641
  7643  003AF8  8192               	bsf	(??___ftmul+1)& (0+255),0,b
  7644  003AFA                     u8641:
  7645  003AFA  0101               	movlb	1	; () banked
  7646  003AFC  5191               	movf	??___ftmul& (0+255),w,b
  7647  003AFE  0101               	movlb	1	; () banked
  7648  003B00  6F94               	movwf	___ftmul@exp& (0+255),b
  7649  003B02  0101               	movlb	1	; () banked
  7650  003B04  5194               	movf	___ftmul@exp& (0+255),w,b
  7651  003B06  A4D8               	btfss	status,2,c
  7652  003B08  D00A               	goto	l7612
  7653                           
  7654                           ; BSR set to: 1
  7655  003B0A  0E00               	movlw	0
  7656  003B0C  0101               	movlb	1	; () banked
  7657  003B0E  6F8B               	movwf	?___ftmul& (0+255),b
  7658  003B10  0E00               	movlw	0
  7659  003B12  0101               	movlb	1	; () banked
  7660  003B14  6F8C               	movwf	(?___ftmul+1)& (0+255),b
  7661  003B16  0E00               	movlw	0
  7662  003B18  0101               	movlb	1	; () banked
  7663  003B1A  6F8D               	movwf	(?___ftmul+2)& (0+255),b
  7664                           
  7665                           ; BSR set to: 1
  7666  003B1C  0012               	return	
  7667  003B1E                     l7612:
  7668                           
  7669                           ; BSR set to: 1
  7670  003B1E  C190  F191         	movff	___ftmul@f2+2,??___ftmul
  7671  003B22  0101               	movlb	1	; () banked
  7672  003B24  6B92               	clrf	(??___ftmul+1)& (0+255),b
  7673  003B26  6B93               	clrf	(??___ftmul+2)& (0+255),b
  7674  003B28  0101               	movlb	1	; () banked
  7675  003B2A  358F               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7676  003B2C  0101               	movlb	1	; () banked
  7677  003B2E  3791               	rlcf	??___ftmul& (0+255),f,b
  7678  003B30  E301               	bnc	u8661
  7679  003B32  8192               	bsf	(??___ftmul+1)& (0+255),0,b
  7680  003B34                     u8661:
  7681  003B34  0101               	movlb	1	; () banked
  7682  003B36  5191               	movf	??___ftmul& (0+255),w,b
  7683  003B38  0101               	movlb	1	; () banked
  7684  003B3A  6F99               	movwf	___ftmul@sign& (0+255),b
  7685  003B3C  0101               	movlb	1	; () banked
  7686  003B3E  5199               	movf	___ftmul@sign& (0+255),w,b
  7687  003B40  A4D8               	btfss	status,2,c
  7688  003B42  D00A               	goto	l7618
  7689                           
  7690                           ; BSR set to: 1
  7691  003B44  0E00               	movlw	0
  7692  003B46  0101               	movlb	1	; () banked
  7693  003B48  6F8B               	movwf	?___ftmul& (0+255),b
  7694  003B4A  0E00               	movlw	0
  7695  003B4C  0101               	movlb	1	; () banked
  7696  003B4E  6F8C               	movwf	(?___ftmul+1)& (0+255),b
  7697  003B50  0E00               	movlw	0
  7698  003B52  0101               	movlb	1	; () banked
  7699  003B54  6F8D               	movwf	(?___ftmul+2)& (0+255),b
  7700                           
  7701                           ; BSR set to: 1
  7702  003B56  0012               	return	
  7703  003B58                     l7618:
  7704                           
  7705                           ; BSR set to: 1
  7706  003B58  0101               	movlb	1	; () banked
  7707  003B5A  5199               	movf	___ftmul@sign& (0+255),w,b
  7708  003B5C  0F7B               	addlw	123
  7709  003B5E  0101               	movlb	1	; () banked
  7710  003B60  2794               	addwf	___ftmul@exp& (0+255),f,b
  7711                           
  7712                           ; BSR set to: 1
  7713  003B62  C18D  F199         	movff	___ftmul@f1+2,___ftmul@sign
  7714  003B66  0101               	movlb	1	; () banked
  7715  003B68  5190               	movf	(___ftmul@f2+2)& (0+255),w,b
  7716  003B6A  0101               	movlb	1	; () banked
  7717  003B6C  1B99               	xorwf	___ftmul@sign& (0+255),f,b
  7718  003B6E  0E80               	movlw	128
  7719  003B70  0101               	movlb	1	; () banked
  7720  003B72  1799               	andwf	___ftmul@sign& (0+255),f,b
  7721                           
  7722                           ; BSR set to: 1
  7723  003B74  0101               	movlb	1	; () banked
  7724  003B76  8F8C               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7725                           
  7726                           ; BSR set to: 1
  7727  003B78  0101               	movlb	1	; () banked
  7728  003B7A  8F8F               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7729                           
  7730                           ; BSR set to: 1
  7731  003B7C  0EFF               	movlw	255
  7732  003B7E  0101               	movlb	1	; () banked
  7733  003B80  178E               	andwf	___ftmul@f2& (0+255),f,b
  7734  003B82  0EFF               	movlw	255
  7735  003B84  0101               	movlb	1	; () banked
  7736  003B86  178F               	andwf	(___ftmul@f2+1)& (0+255),f,b
  7737  003B88  0E00               	movlw	0
  7738  003B8A  0101               	movlb	1	; () banked
  7739  003B8C  1790               	andwf	(___ftmul@f2+2)& (0+255),f,b
  7740                           
  7741                           ; BSR set to: 1
  7742  003B8E  0E00               	movlw	0
  7743  003B90  0101               	movlb	1	; () banked
  7744  003B92  6F95               	movwf	___ftmul@f3_as_product& (0+255),b
  7745  003B94  0E00               	movlw	0
  7746  003B96  0101               	movlb	1	; () banked
  7747  003B98  6F96               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  7748  003B9A  0E00               	movlw	0
  7749  003B9C  0101               	movlb	1	; () banked
  7750  003B9E  6F97               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  7751                           
  7752                           ; BSR set to: 1
  7753  003BA0  0E07               	movlw	7
  7754  003BA2  0101               	movlb	1	; () banked
  7755  003BA4  6F98               	movwf	___ftmul@cntr& (0+255),b
  7756  003BA6                     l7632:
  7757                           
  7758                           ; BSR set to: 1
  7759  003BA6  0101               	movlb	1	; () banked
  7760  003BA8  A18B               	btfss	___ftmul@f1& (0+255),0,b
  7761  003BAA  D00C               	goto	l7636
  7762                           
  7763                           ; BSR set to: 1
  7764  003BAC  0101               	movlb	1	; () banked
  7765  003BAE  518E               	movf	___ftmul@f2& (0+255),w,b
  7766  003BB0  0101               	movlb	1	; () banked
  7767  003BB2  2795               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7768  003BB4  0101               	movlb	1	; () banked
  7769  003BB6  518F               	movf	(___ftmul@f2+1)& (0+255),w,b
  7770  003BB8  0101               	movlb	1	; () banked
  7771  003BBA  2396               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7772  003BBC  0101               	movlb	1	; () banked
  7773  003BBE  5190               	movf	(___ftmul@f2+2)& (0+255),w,b
  7774  003BC0  0101               	movlb	1	; () banked
  7775  003BC2  2397               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7776  003BC4                     l7636:
  7777                           
  7778                           ; BSR set to: 1
  7779  003BC4  0101               	movlb	1	; () banked
  7780  003BC6  90D8               	bcf	status,0,c
  7781  003BC8  338D               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7782  003BCA  338C               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7783  003BCC  338B               	rrcf	___ftmul@f1& (0+255),f,b
  7784  003BCE  0101               	movlb	1	; () banked
  7785  003BD0  90D8               	bcf	status,0,c
  7786  003BD2  378E               	rlcf	___ftmul@f2& (0+255),f,b
  7787  003BD4  378F               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  7788  003BD6  3790               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  7789                           
  7790                           ; BSR set to: 1
  7791  003BD8  0101               	movlb	1	; () banked
  7792  003BDA  2F98               	decfsz	___ftmul@cntr& (0+255),f,b
  7793  003BDC  D7E4               	goto	l7632
  7794                           
  7795                           ; BSR set to: 1
  7796                           
  7797                           ; BSR set to: 1
  7798  003BDE  0E09               	movlw	9
  7799  003BE0  0101               	movlb	1	; () banked
  7800  003BE2  6F98               	movwf	___ftmul@cntr& (0+255),b
  7801  003BE4                     l7642:
  7802                           
  7803                           ; BSR set to: 1
  7804  003BE4  0101               	movlb	1	; () banked
  7805  003BE6  A18B               	btfss	___ftmul@f1& (0+255),0,b
  7806  003BE8  D00C               	goto	l7646
  7807                           
  7808                           ; BSR set to: 1
  7809  003BEA  0101               	movlb	1	; () banked
  7810  003BEC  518E               	movf	___ftmul@f2& (0+255),w,b
  7811  003BEE  0101               	movlb	1	; () banked
  7812  003BF0  2795               	addwf	___ftmul@f3_as_product& (0+255),f,b
  7813  003BF2  0101               	movlb	1	; () banked
  7814  003BF4  518F               	movf	(___ftmul@f2+1)& (0+255),w,b
  7815  003BF6  0101               	movlb	1	; () banked
  7816  003BF8  2396               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  7817  003BFA  0101               	movlb	1	; () banked
  7818  003BFC  5190               	movf	(___ftmul@f2+2)& (0+255),w,b
  7819  003BFE  0101               	movlb	1	; () banked
  7820  003C00  2397               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  7821  003C02                     l7646:
  7822                           
  7823                           ; BSR set to: 1
  7824  003C02  0101               	movlb	1	; () banked
  7825  003C04  90D8               	bcf	status,0,c
  7826  003C06  338D               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  7827  003C08  338C               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  7828  003C0A  338B               	rrcf	___ftmul@f1& (0+255),f,b
  7829  003C0C  0101               	movlb	1	; () banked
  7830  003C0E  90D8               	bcf	status,0,c
  7831  003C10  3397               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  7832  003C12  3396               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  7833  003C14  3395               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  7834                           
  7835                           ; BSR set to: 1
  7836  003C16  0101               	movlb	1	; () banked
  7837  003C18  2F98               	decfsz	___ftmul@cntr& (0+255),f,b
  7838  003C1A  D7E4               	goto	l7642
  7839                           
  7840                           ; BSR set to: 1
  7841                           
  7842                           ; BSR set to: 1
  7843  003C1C  C195  F180         	movff	___ftmul@f3_as_product,___ftpack@arg
  7844  003C20  C196  F181         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  7845  003C24  C197  F182         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  7846  003C28  C194  F183         	movff	___ftmul@exp,___ftpack@exp
  7847  003C2C  C199  F184         	movff	___ftmul@sign,___ftpack@sign
  7848  003C30  EC72  F01F         	call	___ftpack	;wreg free
  7849  003C34  C180  F18B         	movff	?___ftpack,?___ftmul
  7850  003C38  C181  F18C         	movff	?___ftpack+1,?___ftmul+1
  7851  003C3C  C182  F18D         	movff	?___ftpack+2,?___ftmul+2
  7852  003C40  0012               	return	
  7853  003C42                     __end_of___ftmul:
  7854                           	opt stack 0
  7855                           tblptru	equ	0xFF8
  7856                           tblptrh	equ	0xFF7
  7857                           tblptrl	equ	0xFF6
  7858                           tablat	equ	0xFF5
  7859                           prodh	equ	0xFF4
  7860                           prodl	equ	0xFF3
  7861                           intcon	equ	0xFF2
  7862                           intcon2	equ	0xFF1
  7863                           intcon3	equ	0xFF0
  7864                           postinc0	equ	0xFEE
  7865                           wreg	equ	0xFE8
  7866                           postdec1	equ	0xFE5
  7867                           fsr1h	equ	0xFE2
  7868                           fsr1l	equ	0xFE1
  7869                           postinc2	equ	0xFDE
  7870                           postdec2	equ	0xFDD
  7871                           fsr2h	equ	0xFDA
  7872                           fsr2l	equ	0xFD9
  7873                           status	equ	0xFD8
  7874                           
  7875 ;; *************** function ___ftpack *****************
  7876 ;; Defined at:
  7877 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  7878 ;; Parameters:    Size  Location     Type
  7879 ;;  arg             3    0[BANK1 ] unsigned um
  7880 ;;  exp             1    3[BANK1 ] unsigned char 
  7881 ;;  sign            1    4[BANK1 ] unsigned char 
  7882 ;; Auto vars:     Size  Location     Type
  7883 ;;		None
  7884 ;; Return value:  Size  Location     Type
  7885 ;;                  3    0[BANK1 ] float 
  7886 ;; Registers used:
  7887 ;;		wreg, status,2, status,0
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7893 ;;      Params:         0       0       5       0       0
  7894 ;;      Locals:         0       0       0       0       0
  7895 ;;      Temps:          0       0       3       0       0
  7896 ;;      Totals:         0       0       8       0       0
  7897 ;;Total ram usage:        8 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:   12
  7900 ;; This function calls:
  7901 ;;		Nothing
  7902 ;; This function is called by:
  7903 ;;		___ftmul
  7904 ;;		___lwtoft
  7905 ;; This function uses a non-reentrant model
  7906 ;;
  7907                           
  7908                           	psect	text53
  7909  003EE4                     __ptext53:
  7910                           	opt stack 0
  7911  003EE4                     ___ftpack:
  7912                           	opt stack 16
  7913                           
  7914                           ;incstack = 0
  7915  003EE4  0101               	movlb	1	; () banked
  7916  003EE6  5183               	movf	___ftpack@exp& (0+255),w,b
  7917  003EE8  0101               	movlb	1	; () banked
  7918  003EEA  B4D8               	btfsc	status,2,c
  7919  003EEC  D008               	goto	l7444
  7920                           
  7921                           ; BSR set to: 1
  7922  003EEE  0101               	movlb	1	; () banked
  7923  003EF0  5180               	movf	___ftpack@arg& (0+255),w,b
  7924  003EF2  0101               	movlb	1	; () banked
  7925  003EF4  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  7926  003EF6  0101               	movlb	1	; () banked
  7927  003EF8  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  7928  003EFA  A4D8               	btfss	status,2,c
  7929  003EFC  D011               	goto	l7450
  7930  003EFE                     l7444:
  7931                           
  7932                           ; BSR set to: 1
  7933  003EFE  0E00               	movlw	0
  7934  003F00  0101               	movlb	1	; () banked
  7935  003F02  6F80               	movwf	?___ftpack& (0+255),b
  7936  003F04  0E00               	movlw	0
  7937  003F06  0101               	movlb	1	; () banked
  7938  003F08  6F81               	movwf	(?___ftpack+1)& (0+255),b
  7939  003F0A  0E00               	movlw	0
  7940  003F0C  0101               	movlb	1	; () banked
  7941  003F0E  6F82               	movwf	(?___ftpack+2)& (0+255),b
  7942                           
  7943                           ; BSR set to: 1
  7944  003F10  0012               	return	
  7945  003F12                     l7448:
  7946                           
  7947                           ; BSR set to: 1
  7948  003F12  0101               	movlb	1	; () banked
  7949  003F14  2B83               	incf	___ftpack@exp& (0+255),f,b
  7950  003F16  0101               	movlb	1	; () banked
  7951  003F18  90D8               	bcf	status,0,c
  7952  003F1A  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  7953  003F1C  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  7954  003F1E  3380               	rrcf	___ftpack@arg& (0+255),f,b
  7955  003F20                     l7450:
  7956                           
  7957                           ; BSR set to: 1
  7958  003F20  0E00               	movlw	0
  7959  003F22  0101               	movlb	1	; () banked
  7960  003F24  1580               	andwf	___ftpack@arg& (0+255),w,b
  7961  003F26  0101               	movlb	1	; () banked
  7962  003F28  6F85               	movwf	??___ftpack& (0+255),b
  7963  003F2A  0E00               	movlw	0
  7964  003F2C  0101               	movlb	1	; () banked
  7965  003F2E  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  7966  003F30  0101               	movlb	1	; () banked
  7967  003F32  6F86               	movwf	(??___ftpack+1)& (0+255),b
  7968  003F34  0EFE               	movlw	254
  7969  003F36  0101               	movlb	1	; () banked
  7970  003F38  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  7971  003F3A  0101               	movlb	1	; () banked
  7972  003F3C  6F87               	movwf	(??___ftpack+2)& (0+255),b
  7973  003F3E  0101               	movlb	1	; () banked
  7974  003F40  5185               	movf	??___ftpack& (0+255),w,b
  7975  003F42  0101               	movlb	1	; () banked
  7976  003F44  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  7977  003F46  0101               	movlb	1	; () banked
  7978  003F48  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  7979  003F4A  B4D8               	btfsc	status,2,c
  7980  003F4C  D011               	goto	l7456
  7981  003F4E  D7E1               	goto	l7448
  7982  003F50                     l7452:
  7983                           
  7984                           ; BSR set to: 1
  7985  003F50  0101               	movlb	1	; () banked
  7986  003F52  2B83               	incf	___ftpack@exp& (0+255),f,b
  7987                           
  7988                           ; BSR set to: 1
  7989  003F54  0E01               	movlw	1
  7990  003F56  0101               	movlb	1	; () banked
  7991  003F58  2780               	addwf	___ftpack@arg& (0+255),f,b
  7992  003F5A  0E00               	movlw	0
  7993  003F5C  0101               	movlb	1	; () banked
  7994  003F5E  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  7995  003F60  0E00               	movlw	0
  7996  003F62  0101               	movlb	1	; () banked
  7997  003F64  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  7998  003F66  0101               	movlb	1	; () banked
  7999  003F68  90D8               	bcf	status,0,c
  8000  003F6A  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8001  003F6C  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8002  003F6E  3380               	rrcf	___ftpack@arg& (0+255),f,b
  8003  003F70                     l7456:
  8004                           
  8005                           ; BSR set to: 1
  8006  003F70  0E00               	movlw	0
  8007  003F72  0101               	movlb	1	; () banked
  8008  003F74  1580               	andwf	___ftpack@arg& (0+255),w,b
  8009  003F76  0101               	movlb	1	; () banked
  8010  003F78  6F85               	movwf	??___ftpack& (0+255),b
  8011  003F7A  0E00               	movlw	0
  8012  003F7C  0101               	movlb	1	; () banked
  8013  003F7E  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  8014  003F80  0101               	movlb	1	; () banked
  8015  003F82  6F86               	movwf	(??___ftpack+1)& (0+255),b
  8016  003F84  0EFF               	movlw	255
  8017  003F86  0101               	movlb	1	; () banked
  8018  003F88  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8019  003F8A  0101               	movlb	1	; () banked
  8020  003F8C  6F87               	movwf	(??___ftpack+2)& (0+255),b
  8021  003F8E  0101               	movlb	1	; () banked
  8022  003F90  5185               	movf	??___ftpack& (0+255),w,b
  8023  003F92  0101               	movlb	1	; () banked
  8024  003F94  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  8025  003F96  0101               	movlb	1	; () banked
  8026  003F98  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  8027  003F9A  B4D8               	btfsc	status,2,c
  8028  003F9C  D008               	goto	l7460
  8029  003F9E  D7D8               	goto	l7452
  8030  003FA0                     l7458:
  8031                           
  8032                           ; BSR set to: 1
  8033  003FA0  0101               	movlb	1	; () banked
  8034  003FA2  0783               	decf	___ftpack@exp& (0+255),f,b
  8035  003FA4  0101               	movlb	1	; () banked
  8036  003FA6  90D8               	bcf	status,0,c
  8037  003FA8  3780               	rlcf	___ftpack@arg& (0+255),f,b
  8038  003FAA  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  8039  003FAC  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  8040  003FAE                     l7460:
  8041                           
  8042                           ; BSR set to: 1
  8043  003FAE  0101               	movlb	1	; () banked
  8044  003FB0  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  8045  003FB2  D004               	goto	l1516
  8046                           
  8047                           ; BSR set to: 1
  8048  003FB4  0E02               	movlw	2
  8049  003FB6  0101               	movlb	1	; () banked
  8050  003FB8  6183               	cpfslt	___ftpack@exp& (0+255),b
  8051  003FBA  D7F2               	goto	l7458
  8052  003FBC                     l1516:
  8053                           
  8054                           ; BSR set to: 1
  8055  003FBC  0101               	movlb	1	; () banked
  8056  003FBE  B183               	btfsc	___ftpack@exp& (0+255),0,b
  8057  003FC0  D002               	goto	l7466
  8058                           
  8059                           ; BSR set to: 1
  8060  003FC2  0101               	movlb	1	; () banked
  8061  003FC4  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  8062  003FC6                     l7466:
  8063                           
  8064                           ; BSR set to: 1
  8065  003FC6  0101               	movlb	1	; () banked
  8066  003FC8  90D8               	bcf	status,0,c
  8067  003FCA  3383               	rrcf	___ftpack@exp& (0+255),f,b
  8068  003FCC  0101               	movlb	1	; () banked
  8069  003FCE  5183               	movf	___ftpack@exp& (0+255),w,b
  8070  003FD0  0101               	movlb	1	; () banked
  8071  003FD2  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  8072                           
  8073                           ; BSR set to: 1
  8074  003FD4  0101               	movlb	1	; () banked
  8075  003FD6  5184               	movf	___ftpack@sign& (0+255),w,b
  8076  003FD8  0101               	movlb	1	; () banked
  8077  003FDA  B4D8               	btfsc	status,2,c
  8078  003FDC  D002               	goto	l7472
  8079                           
  8080                           ; BSR set to: 1
  8081  003FDE  0101               	movlb	1	; () banked
  8082  003FE0  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  8083  003FE2                     l7472:
  8084                           
  8085                           ; BSR set to: 1
  8086  003FE2  C180  F180         	movff	___ftpack@arg,?___ftpack
  8087  003FE6  C181  F181         	movff	___ftpack@arg+1,?___ftpack+1
  8088  003FEA  C182  F182         	movff	___ftpack@arg+2,?___ftpack+2
  8089  003FEE  0012               	return	
  8090  003FF0                     __end_of___ftpack:
  8091                           	opt stack 0
  8092                           tblptru	equ	0xFF8
  8093                           tblptrh	equ	0xFF7
  8094                           tblptrl	equ	0xFF6
  8095                           tablat	equ	0xFF5
  8096                           prodh	equ	0xFF4
  8097                           prodl	equ	0xFF3
  8098                           intcon	equ	0xFF2
  8099                           intcon2	equ	0xFF1
  8100                           intcon3	equ	0xFF0
  8101                           postinc0	equ	0xFEE
  8102                           wreg	equ	0xFE8
  8103                           postdec1	equ	0xFE5
  8104                           fsr1h	equ	0xFE2
  8105                           fsr1l	equ	0xFE1
  8106                           postinc2	equ	0xFDE
  8107                           postdec2	equ	0xFDD
  8108                           fsr2h	equ	0xFDA
  8109                           fsr2l	equ	0xFD9
  8110                           status	equ	0xFD8
  8111                           
  8112 ;; *************** function _IR_CalculateCodesize *****************
  8113 ;; Defined at:
  8114 ;;		line 148 in file "IR.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;		None
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;  i               1    0[BANK1 ] unsigned char 
  8119 ;; Return value:  Size  Location     Type
  8120 ;;                  1    wreg      unsigned char 
  8121 ;; Registers used:
  8122 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8128 ;;      Params:         0       0       0       0       0
  8129 ;;      Locals:         0       0       1       0       0
  8130 ;;      Temps:          0       0       0       0       0
  8131 ;;      Totals:         0       0       1       0       0
  8132 ;;Total ram usage:        1 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:   12
  8135 ;; This function calls:
  8136 ;;		Nothing
  8137 ;; This function is called by:
  8138 ;;		_IR_LoadCode
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           	psect	text54
  8143  0011CA                     __ptext54:
  8144                           	opt stack 0
  8145  0011CA                     _IR_CalculateCodesize:
  8146                           	opt stack 17
  8147                           
  8148                           ;IR.c: 150: unsigned char i;
  8149                           ;IR.c: 152: for(i=0; i<128;i++)
  8150                           
  8151                           ; BSR set to: 1
  8152                           ;incstack = 0
  8153  0011CA  0E00               	movlw	0
  8154  0011CC  0101               	movlb	1	; () banked
  8155  0011CE  6F80               	movwf	IR_CalculateCodesize@i& (0+255),b
  8156  0011D0                     l7588:
  8157                           
  8158                           ; BSR set to: 1
  8159  0011D0  0E7F               	movlw	127
  8160  0011D2  0101               	movlb	1	; () banked
  8161  0011D4  6580               	cpfsgt	IR_CalculateCodesize@i& (0+255),b
  8162  0011D6  D001               	goto	l7592
  8163  0011D8  D018               	goto	l7602
  8164  0011DA                     l7592:
  8165                           
  8166                           ; BSR set to: 1
  8167                           ;IR.c: 153: {
  8168                           ;IR.c: 154: if(IR_SavedTiming[i] == 0)
  8169  0011DA  0101               	movlb	1	; () banked
  8170  0011DC  5180               	movf	IR_CalculateCodesize@i& (0+255),w,b
  8171  0011DE  0D02               	mullw	2
  8172  0011E0  0E00               	movlw	0
  8173  0011E2  24F3               	addwf	prodl,w,c
  8174  0011E4  6EF6               	movwf	tblptrl,c
  8175  0011E6  0E24               	movlw	36
  8176  0011E8  20F4               	addwfc	prodh,w,c
  8177  0011EA  6EF7               	movwf	tblptrh,c
  8178  0011EC  6AF8               	clrf	tblptru,c
  8179  0011EE  0E00               	movlw	0
  8180  0011F0  22F8               	addwfc	tblptru,f,c
  8181  0011F2  0009               	tblrd		*+
  8182  0011F4  50F5               	movf	tablat,w,c
  8183  0011F6  0009               	tblrd		*+
  8184  0011F8  10F5               	iorwf	tablat,w,c
  8185  0011FA  A4D8               	btfss	status,2,c
  8186  0011FC  D003               	goto	l7598
  8187                           
  8188                           ; BSR set to: 1
  8189                           ;IR.c: 155: {
  8190                           ;IR.c: 156: return i;
  8191  0011FE  0101               	movlb	1	; () banked
  8192  001200  5180               	movf	IR_CalculateCodesize@i& (0+255),w,b
  8193                           
  8194                           ; BSR set to: 1
  8195  001202  0012               	return	
  8196  001204                     l7598:
  8197                           
  8198                           ; BSR set to: 1
  8199  001204  0101               	movlb	1	; () banked
  8200  001206  2B80               	incf	IR_CalculateCodesize@i& (0+255),f,b
  8201  001208  D7E3               	goto	l7588
  8202  00120A                     l7602:
  8203                           
  8204                           ; BSR set to: 1
  8205                           ;IR.c: 157: }
  8206                           ;IR.c: 158: }
  8207                           ;IR.c: 159: return 128;
  8208  00120A  0E80               	movlw	128
  8209  00120C  0012               	return	
  8210  00120E                     __end_of_IR_CalculateCodesize:
  8211                           	opt stack 0
  8212                           tblptru	equ	0xFF8
  8213                           tblptrh	equ	0xFF7
  8214                           tblptrl	equ	0xFF6
  8215                           tablat	equ	0xFF5
  8216                           prodh	equ	0xFF4
  8217                           prodl	equ	0xFF3
  8218                           intcon	equ	0xFF2
  8219                           intcon2	equ	0xFF1
  8220                           intcon3	equ	0xFF0
  8221                           postinc0	equ	0xFEE
  8222                           wreg	equ	0xFE8
  8223                           postdec1	equ	0xFE5
  8224                           fsr1h	equ	0xFE2
  8225                           fsr1l	equ	0xFE1
  8226                           postinc2	equ	0xFDE
  8227                           postdec2	equ	0xFDD
  8228                           fsr2h	equ	0xFDA
  8229                           fsr2l	equ	0xFD9
  8230                           status	equ	0xFD8
  8231                           
  8232 ;; *************** function _ADC_Start *****************
  8233 ;; Defined at:
  8234 ;;		line 75 in file "ADC.c"
  8235 ;; Parameters:    Size  Location     Type
  8236 ;;		None
  8237 ;; Auto vars:     Size  Location     Type
  8238 ;;		None
  8239 ;; Return value:  Size  Location     Type
  8240 ;;		None               void
  8241 ;; Registers used:
  8242 ;;		None
  8243 ;; Tracked objects:
  8244 ;;		On entry : 0/0
  8245 ;;		On exit  : 0/0
  8246 ;;		Unchanged: 0/0
  8247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8248 ;;      Params:         0       0       0       0       0
  8249 ;;      Locals:         0       0       0       0       0
  8250 ;;      Temps:          0       0       0       0       0
  8251 ;;      Totals:         0       0       0       0       0
  8252 ;;Total ram usage:        0 bytes
  8253 ;; Hardware stack levels used:    1
  8254 ;; Hardware stack levels required when called:   12
  8255 ;; This function calls:
  8256 ;;		Nothing
  8257 ;; This function is called by:
  8258 ;;		_main
  8259 ;; This function uses a non-reentrant model
  8260 ;;
  8261                           
  8262                           	psect	text55
  8263  001A72                     __ptext55:
  8264                           	opt stack 0
  8265  001A72                     _ADC_Start:
  8266                           	opt stack 18
  8267                           
  8268                           ;ADC.c: 77: ADCON0bits.GO = 1;
  8269                           
  8270                           ; BSR set to: 1
  8271                           ;incstack = 0
  8272  001A72  82C2               	bsf	4034,1,c	;volatile
  8273  001A74  0012               	return		;funcret
  8274  001A76                     __end_of_ADC_Start:
  8275                           	opt stack 0
  8276                           tblptru	equ	0xFF8
  8277                           tblptrh	equ	0xFF7
  8278                           tblptrl	equ	0xFF6
  8279                           tablat	equ	0xFF5
  8280                           prodh	equ	0xFF4
  8281                           prodl	equ	0xFF3
  8282                           intcon	equ	0xFF2
  8283                           intcon2	equ	0xFF1
  8284                           intcon3	equ	0xFF0
  8285                           postinc0	equ	0xFEE
  8286                           wreg	equ	0xFE8
  8287                           postdec1	equ	0xFE5
  8288                           fsr1h	equ	0xFE2
  8289                           fsr1l	equ	0xFE1
  8290                           postinc2	equ	0xFDE
  8291                           postdec2	equ	0xFDD
  8292                           fsr2h	equ	0xFDA
  8293                           fsr2l	equ	0xFD9
  8294                           status	equ	0xFD8
  8295                           
  8296 ;; *************** function _low_isr *****************
  8297 ;; Defined at:
  8298 ;;		line 122 in file "INTERRUPTS.c"
  8299 ;; Parameters:    Size  Location     Type
  8300 ;;		None
  8301 ;; Auto vars:     Size  Location     Type
  8302 ;;  IRtemp          2   69[COMRAM] unsigned int 
  8303 ;;  button_state    1   68[COMRAM] unsigned char 
  8304 ;;  IR_state        1   67[COMRAM] unsigned char 
  8305 ;; Return value:  Size  Location     Type
  8306 ;;		None               void
  8307 ;; Registers used:
  8308 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8309 ;; Tracked objects:
  8310 ;;		On entry : 0/0
  8311 ;;		On exit  : 0/0
  8312 ;;		Unchanged: 0/0
  8313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8314 ;;      Params:         0       0       0       0       0
  8315 ;;      Locals:         4       0       0       0       0
  8316 ;;      Temps:         17       0       0       0       0
  8317 ;;      Totals:        21       0       0       0       0
  8318 ;;Total ram usage:       21 bytes
  8319 ;; Hardware stack levels used:    1
  8320 ;; Hardware stack levels required when called:   11
  8321 ;; This function calls:
  8322 ;;		_ADC_CalculateVoltage
  8323 ;;		_IR_CheckCode
  8324 ;;		_IR_CleanBuffer
  8325 ;;		_IR_ResetData
  8326 ;;		_RF_Disable
  8327 ;;		_TMR_Timer1Start
  8328 ;;		_TMR_Timer1Status
  8329 ;;		_TMR_Timer2Start
  8330 ;;		i1_BUT_ReadButton
  8331 ;;		i1_IR_ReadReceiver
  8332 ;;		i1_SYS_ActivityTimerReset
  8333 ;;		i1_TMR_ResetTimer1
  8334 ;;		i1_TMR_Timer1
  8335 ;;		i1_TMR_Timer2
  8336 ;; This function is called by:
  8337 ;;		Interrupt level 1
  8338 ;; This function uses a non-reentrant model
  8339 ;;
  8340                           
  8341                           	psect	intcodelo
  8342  000018                     __pintcodelo:
  8343                           	opt stack 0
  8344  000018                     _low_isr:
  8345                           	opt stack 13
  8346                           
  8347                           ;incstack = 0
  8348  000018  8060               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  8349  00001A  CFD8 F033          	movff	status,??_low_isr
  8350  00001E  CFE8 F034          	movff	wreg,??_low_isr+1
  8351  000022  CFE0 F035          	movff	bsr,??_low_isr+2
  8352  000026  CFFA F036          	movff	pclath,??_low_isr+3
  8353  00002A  CFFB F037          	movff	pclatu,??_low_isr+4
  8354  00002E  CFE9 F038          	movff	fsr0l,??_low_isr+5
  8355  000032  CFEA F039          	movff	fsr0h,??_low_isr+6
  8356  000036  CFE1 F03A          	movff	fsr1l,??_low_isr+7
  8357  00003A  CFE2 F03B          	movff	fsr1h,??_low_isr+8
  8358  00003E  CFD9 F03C          	movff	fsr2l,??_low_isr+9
  8359  000042  CFDA F03D          	movff	fsr2h,??_low_isr+10
  8360  000046  CFF3 F03E          	movff	prodl,??_low_isr+11
  8361  00004A  CFF4 F03F          	movff	prodh,??_low_isr+12
  8362  00004E  CFF6 F040          	movff	tblptrl,??_low_isr+13
  8363  000052  CFF7 F041          	movff	tblptrh,??_low_isr+14
  8364  000056  CFF8 F042          	movff	tblptru,??_low_isr+15
  8365  00005A  CFF5 F043          	movff	tablat,??_low_isr+16
  8366                           
  8367                           ;INTERRUPTS.c: 124: unsigned char button_state;
  8368                           ;INTERRUPTS.c: 125: unsigned char IR_state;
  8369                           ;INTERRUPTS.c: 126: unsigned int IRtemp = 0;
  8370  00005E  0E00               	movlw	0
  8371  000060  6E47               	movwf	low_isr@IRtemp+1,c
  8372  000062  0E00               	movlw	0
  8373  000064  6E46               	movwf	low_isr@IRtemp,c
  8374                           
  8375                           ;INTERRUPTS.c: 128: if(INTCONbits.RBIF)
  8376  000066  A0F2               	btfss	intcon,0,c	;volatile
  8377  000068  D0AC               	goto	i1l202
  8378                           
  8379                           ;INTERRUPTS.c: 129: {
  8380                           ;INTERRUPTS.c: 134: button_state = BUT_ReadButton();
  8381  00006A  ECEC  F009         	call	i1_BUT_ReadButton	;wreg free
  8382  00006E  6E45               	movwf	low_isr@button_state,c
  8383                           
  8384                           ;INTERRUPTS.c: 135: IR_state = IR_ReadReceiver();
  8385  000070  ECD2  F009         	call	i1_IR_ReadReceiver	;wreg free
  8386  000074  6E44               	movwf	low_isr@IR_state,c
  8387                           
  8388                           ;INTERRUPTS.c: 136: SYS_ActivityTimerReset();
  8389  000076  ECB1  F00C         	call	i1_SYS_ActivityTimerReset	;wreg free
  8390                           
  8391                           ;INTERRUPTS.c: 137: if(ButtonChange)
  8392  00007A  5059               	movf	_ButtonChange,w,c
  8393  00007C  B4D8               	btfsc	status,2,c
  8394  00007E  D039               	goto	i1l7066
  8395                           
  8396                           ;INTERRUPTS.c: 138: {
  8397                           ;INTERRUPTS.c: 140: TMR_Timer2(0);
  8398  000080  0E00               	movlw	0
  8399  000082  ECD5  F00C         	call	i1_TMR_Timer2
  8400                           
  8401                           ;INTERRUPTS.c: 141: if(button_state)
  8402  000086  5045               	movf	low_isr@button_state,w,c
  8403  000088  B4D8               	btfsc	status,2,c
  8404  00008A  D017               	goto	i1l7054
  8405                           
  8406                           ;INTERRUPTS.c: 142: {
  8407                           ;INTERRUPTS.c: 144: if(System_State == 8)
  8408  00008C  0E08               	movlw	8
  8409  00008E  0100               	movlb	0	; () banked
  8410  000090  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
  8411  000092  A4D8               	btfss	status,2,c
  8412  000094  D009               	goto	i1l7050
  8413                           
  8414                           ; BSR set to: 0
  8415                           ;INTERRUPTS.c: 145: {
  8416                           ;INTERRUPTS.c: 146: Timer2Use = 17;
  8417  000096  0E11               	movlw	17
  8418  000098  6E5E               	movwf	_Timer2Use,c
  8419                           
  8420                           ; BSR set to: 0
  8421                           ;INTERRUPTS.c: 147: TMR_Timer2Start(400);
  8422  00009A  0E01               	movlw	1
  8423  00009C  6E04               	movwf	TMR_Timer2Start@time+1,c
  8424  00009E  0E90               	movlw	144
  8425  0000A0  6E03               	movwf	TMR_Timer2Start@time,c
  8426  0000A2  ECAA  F00B         	call	_TMR_Timer2Start	;wreg free
  8427                           
  8428                           ;INTERRUPTS.c: 148: }
  8429  0000A6  D022               	goto	i1l7064
  8430  0000A8                     i1l7050:
  8431                           
  8432                           ;INTERRUPTS.c: 149: else
  8433                           ;INTERRUPTS.c: 150: {
  8434                           ;INTERRUPTS.c: 151: Timer2Use = 19;
  8435  0000A8  0E13               	movlw	19
  8436  0000AA  6E5E               	movwf	_Timer2Use,c
  8437                           
  8438                           ;INTERRUPTS.c: 152: TMR_Timer2Start(8);
  8439  0000AC  0E00               	movlw	0
  8440  0000AE  6E04               	movwf	TMR_Timer2Start@time+1,c
  8441  0000B0  0E08               	movlw	8
  8442  0000B2  6E03               	movwf	TMR_Timer2Start@time,c
  8443  0000B4  ECAA  F00B         	call	_TMR_Timer2Start	;wreg free
  8444                           
  8445                           ;INTERRUPTS.c: 153: }
  8446                           ;INTERRUPTS.c: 154: }
  8447  0000B8  D019               	goto	i1l7064
  8448  0000BA                     i1l7054:
  8449                           
  8450                           ;INTERRUPTS.c: 155: else
  8451                           ;INTERRUPTS.c: 156: {
  8452                           ;INTERRUPTS.c: 157: if(System_State != 10)
  8453  0000BA  0E0A               	movlw	10
  8454  0000BC  0100               	movlb	0	; () banked
  8455  0000BE  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
  8456  0000C0  B4D8               	btfsc	status,2,c
  8457  0000C2  D00C               	goto	i1l7060
  8458                           
  8459                           ; BSR set to: 0
  8460                           ;INTERRUPTS.c: 158: {
  8461                           ;INTERRUPTS.c: 160: Button_Data = 1;
  8462  0000C4  0E01               	movlw	1
  8463  0000C6  0100               	movlb	0	; () banked
  8464  0000C8  6FC0               	movwf	_Button_Data& (0+255),b	;volatile
  8465                           
  8466                           ;INTERRUPTS.c: 161: Timer2Use = 19;
  8467  0000CA  0E13               	movlw	19
  8468  0000CC  6E5E               	movwf	_Timer2Use,c
  8469                           
  8470                           ; BSR set to: 0
  8471                           ;INTERRUPTS.c: 162: TMR_Timer2Start(8);
  8472  0000CE  0E00               	movlw	0
  8473  0000D0  6E04               	movwf	TMR_Timer2Start@time+1,c
  8474  0000D2  0E08               	movlw	8
  8475  0000D4  6E03               	movwf	TMR_Timer2Start@time,c
  8476  0000D6  ECAA  F00B         	call	_TMR_Timer2Start	;wreg free
  8477                           
  8478                           ;INTERRUPTS.c: 163: }
  8479  0000DA  D008               	goto	i1l7064
  8480  0000DC                     i1l7060:
  8481                           
  8482                           ;INTERRUPTS.c: 164: else
  8483                           ;INTERRUPTS.c: 165: {
  8484                           ;INTERRUPTS.c: 166: Timer2Use = 18;
  8485  0000DC  0E12               	movlw	18
  8486  0000DE  6E5E               	movwf	_Timer2Use,c
  8487                           
  8488                           ;INTERRUPTS.c: 167: TMR_Timer2Start(500);
  8489  0000E0  0E01               	movlw	1
  8490  0000E2  6E04               	movwf	TMR_Timer2Start@time+1,c
  8491  0000E4  0EF4               	movlw	244
  8492  0000E6  6E03               	movwf	TMR_Timer2Start@time,c
  8493  0000E8  ECAA  F00B         	call	_TMR_Timer2Start	;wreg free
  8494  0000EC                     i1l7064:
  8495                           
  8496                           ;INTERRUPTS.c: 168: }
  8497                           ;INTERRUPTS.c: 169: }
  8498                           ;INTERRUPTS.c: 170: ButtonChange = 0;
  8499  0000EC  0E00               	movlw	0
  8500  0000EE  6E59               	movwf	_ButtonChange,c
  8501                           
  8502                           ;INTERRUPTS.c: 171: }
  8503  0000F0  D066               	goto	i1l210
  8504  0000F2                     i1l7066:
  8505                           
  8506                           ;INTERRUPTS.c: 172: else if(IRChange)
  8507  0000F2  505A               	movf	_IRChange,w,c
  8508  0000F4  B4D8               	btfsc	status,2,c
  8509  0000F6  D062               	goto	i1l211
  8510                           
  8511                           ;INTERRUPTS.c: 173: {
  8512                           ;INTERRUPTS.c: 175: if(!TMR_Timer1Status())
  8513  0000F8  EC1F  F00D         	call	_TMR_Timer1Status	;wreg free
  8514  0000FC  0900               	iorlw	0
  8515  0000FE  A4D8               	btfss	status,2,c
  8516  000100  D003               	goto	i1l212
  8517                           
  8518                           ;INTERRUPTS.c: 176: {
  8519                           ;INTERRUPTS.c: 178: TMR_Timer1Start();
  8520  000102  ECBA  F00C         	call	_TMR_Timer1Start	;wreg free
  8521                           
  8522                           ;INTERRUPTS.c: 179: }
  8523  000106  D057               	goto	i1l7112
  8524  000108                     i1l212:
  8525                           
  8526                           ;INTERRUPTS.c: 180: else
  8527                           ;INTERRUPTS.c: 181: {
  8528                           ;INTERRUPTS.c: 182: IRtemp = TMR1L;
  8529  000108  CFCE F046          	movff	4046,low_isr@IRtemp	;volatile
  8530  00010C  6A47               	clrf	low_isr@IRtemp+1,c
  8531                           
  8532                           ;INTERRUPTS.c: 183: IRtemp += (unsigned int)TMR1H << 8;
  8533  00010E  50CF               	movf	4047,w,c	;volatile
  8534  000110  2647               	addwf	low_isr@IRtemp+1,f,c
  8535                           
  8536                           ;INTERRUPTS.c: 184: TMR_ResetTimer1();
  8537  000112  EC1C  F00B         	call	i1_TMR_ResetTimer1	;wreg free
  8538                           
  8539                           ;INTERRUPTS.c: 185: if(!IRStarted)
  8540  000116  505B               	movf	_IRStarted,w,c
  8541  000118  A4D8               	btfss	status,2,c
  8542  00011A  D022               	goto	i1l214
  8543                           
  8544                           ;INTERRUPTS.c: 186: {
  8545                           ;INTERRUPTS.c: 187: if(System_State == 8)
  8546  00011C  0E08               	movlw	8
  8547  00011E  0100               	movlb	0	; () banked
  8548  000120  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
  8549  000122  A4D8               	btfss	status,2,c
  8550  000124  D00F               	goto	i1l7086
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;INTERRUPTS.c: 188: {
  8554                           ;INTERRUPTS.c: 189: if(IRtemp >= IR_SyncLow && IRtemp <= IR_SyncHigh)
  8555  000126  5051               	movf	_IR_SyncLow,w,c
  8556  000128  5C46               	subwf	low_isr@IRtemp,w,c
  8557  00012A  5052               	movf	_IR_SyncLow+1,w,c
  8558  00012C  5847               	subwfb	low_isr@IRtemp+1,w,c
  8559  00012E  A0D8               	btfss	status,0,c
  8560  000130  D017               	goto	i1l214
  8561                           
  8562                           ; BSR set to: 0
  8563  000132  5046               	movf	low_isr@IRtemp,w,c
  8564  000134  5C4F               	subwf	_IR_SyncHigh,w,c
  8565  000136  5047               	movf	low_isr@IRtemp+1,w,c
  8566  000138  5850               	subwfb	_IR_SyncHigh+1,w,c
  8567  00013A  A0D8               	btfss	status,0,c
  8568  00013C  D011               	goto	i1l214
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;INTERRUPTS.c: 190: {
  8572                           ;INTERRUPTS.c: 191: IRStarted = 1;
  8573  00013E  0E01               	movlw	1
  8574  000140  6E5B               	movwf	_IRStarted,c
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;INTERRUPTS.c: 192: }
  8578                           ;INTERRUPTS.c: 193: }
  8579  000142  D00E               	goto	i1l214
  8580  000144                     i1l7086:
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;INTERRUPTS.c: 194: else
  8584                           ;INTERRUPTS.c: 195: {
  8585                           ;INTERRUPTS.c: 196: if(IRtemp >= 6000 && IRtemp <= 10000)
  8586  000144  0E70               	movlw	112
  8587  000146  5C46               	subwf	low_isr@IRtemp,w,c
  8588  000148  0E17               	movlw	23
  8589  00014A  5847               	subwfb	low_isr@IRtemp+1,w,c
  8590  00014C  A0D8               	btfss	status,0,c
  8591  00014E  D008               	goto	i1l214
  8592                           
  8593                           ; BSR set to: 0
  8594  000150  0E11               	movlw	17
  8595  000152  5C46               	subwf	low_isr@IRtemp,w,c
  8596  000154  0E27               	movlw	39
  8597  000156  5847               	subwfb	low_isr@IRtemp+1,w,c
  8598  000158  B0D8               	btfsc	status,0,c
  8599  00015A  D002               	goto	i1l214
  8600                           
  8601                           ; BSR set to: 0
  8602                           ;INTERRUPTS.c: 197: {
  8603                           ;INTERRUPTS.c: 198: IRStarted = 1;
  8604  00015C  0E01               	movlw	1
  8605  00015E  6E5B               	movwf	_IRStarted,c
  8606  000160                     i1l214:
  8607                           
  8608                           ;INTERRUPTS.c: 199: }
  8609                           ;INTERRUPTS.c: 200: }
  8610                           ;INTERRUPTS.c: 201: }
  8611                           ;INTERRUPTS.c: 202: if(IRStarted)
  8612  000160  505B               	movf	_IRStarted,w,c
  8613  000162  B4D8               	btfsc	status,2,c
  8614  000164  D028               	goto	i1l7112
  8615                           
  8616                           ;INTERRUPTS.c: 203: {
  8617                           ;INTERRUPTS.c: 204: RF_Disable();
  8618  000166  EC80  F00C         	call	_RF_Disable	;wreg free
  8619                           
  8620                           ;INTERRUPTS.c: 205: if(IR_DataPlace < 128)
  8621  00016A  0E80               	movlw	128
  8622  00016C  605D               	cpfslt	_IR_DataPlace,c
  8623  00016E  D023               	goto	i1l7112
  8624                           
  8625                           ;INTERRUPTS.c: 206: {
  8626                           ;INTERRUPTS.c: 207: IR_DataTiming[IR_DataPlace] = IRtemp;
  8627  000170  505D               	movf	_IR_DataPlace,w,c
  8628  000172  0D02               	mullw	2
  8629  000174  0E00               	movlw	low _IR_DataTiming
  8630  000176  24F3               	addwf	prodl,w,c
  8631  000178  6ED9               	movwf	fsr2l,c
  8632  00017A  0E02               	movlw	high _IR_DataTiming
  8633  00017C  20F4               	addwfc	prodh,w,c
  8634  00017E  6EDA               	movwf	fsr2h,c
  8635  000180  C046  FFDE         	movff	low_isr@IRtemp,postinc2
  8636  000184  C047  FFDD         	movff	low_isr@IRtemp+1,postdec2
  8637                           
  8638                           ;INTERRUPTS.c: 208: IR_DataPlace++;
  8639  000188  2A5D               	incf	_IR_DataPlace,f,c
  8640                           
  8641                           ;INTERRUPTS.c: 209: if(System_State == 8)
  8642  00018A  0E08               	movlw	8
  8643  00018C  0100               	movlb	0	; () banked
  8644  00018E  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
  8645  000190  A4D8               	btfss	status,2,c
  8646  000192  D011               	goto	i1l7112
  8647                           
  8648                           ; BSR set to: 0
  8649                           ;INTERRUPTS.c: 210: {
  8650                           ;INTERRUPTS.c: 211: if(IR_DataPlace >= IR_CodeSize)
  8651  000194  505C               	movf	_IR_CodeSize,w,c
  8652  000196  5C5D               	subwf	_IR_DataPlace,w,c
  8653  000198  A0D8               	btfss	status,0,c
  8654  00019A  D00D               	goto	i1l7112
  8655                           
  8656                           ; BSR set to: 0
  8657                           ;INTERRUPTS.c: 212: {
  8658                           ;INTERRUPTS.c: 213: if(!IR_Data)
  8659  00019C  0100               	movlb	0	; () banked
  8660  00019E  51C4               	movf	_IR_Data& (0+255),w,b	;volatile
  8661  0001A0  A4D8               	btfss	status,2,c
  8662  0001A2  D004               	goto	i1l7108
  8663                           
  8664                           ; BSR set to: 0
  8665                           ;INTERRUPTS.c: 214: {
  8666                           ;INTERRUPTS.c: 215: IR_Data = IR_CheckCode();
  8667  0001A4  EC97  F016         	call	_IR_CheckCode	;wreg free
  8668  0001A8  0100               	movlb	0	; () banked
  8669  0001AA  6FC4               	movwf	_IR_Data& (0+255),b	;volatile
  8670  0001AC                     i1l7108:
  8671                           
  8672                           ; BSR set to: 0
  8673                           ;INTERRUPTS.c: 216: }
  8674                           ;INTERRUPTS.c: 217: TMR_Timer1(0);
  8675  0001AC  0E00               	movlw	0
  8676  0001AE  ECDD  F00C         	call	i1_TMR_Timer1
  8677                           
  8678                           ;INTERRUPTS.c: 218: IR_ResetData();
  8679  0001B2  EC0A  F00D         	call	_IR_ResetData	;wreg free
  8680  0001B6                     i1l7112:
  8681                           
  8682                           ;INTERRUPTS.c: 219: }
  8683                           ;INTERRUPTS.c: 220: }
  8684                           ;INTERRUPTS.c: 221: }
  8685                           ;INTERRUPTS.c: 222: }
  8686                           ;INTERRUPTS.c: 223: }
  8687                           ;INTERRUPTS.c: 224: IRChange = 0;
  8688  0001B6  0E00               	movlw	0
  8689  0001B8  6E5A               	movwf	_IRChange,c
  8690                           
  8691                           ;INTERRUPTS.c: 225: }
  8692  0001BA  D001               	goto	i1l210
  8693  0001BC                     i1l211:
  8694                           
  8695                           ;INTERRUPTS.c: 226: else
  8696                           ;INTERRUPTS.c: 227: {
  8697                           ;INTERRUPTS.c: 229: __nop();
  8698  0001BC  F000               	nop	
  8699  0001BE                     i1l210:
  8700                           
  8701                           ;INTERRUPTS.c: 230: }
  8702                           ;INTERRUPTS.c: 231: INTCONbits.RBIF = 0;
  8703  0001BE  90F2               	bcf	intcon,0,c	;volatile
  8704                           
  8705                           ;INTERRUPTS.c: 232: }
  8706  0001C0  D042               	goto	i1l239
  8707  0001C2                     i1l202:
  8708                           
  8709                           ;INTERRUPTS.c: 233: else if(PIR1bits.TMR2IF)
  8710  0001C2  A29E               	btfss	3998,1,c	;volatile
  8711  0001C4  D020               	goto	i1l226
  8712                           
  8713                           ;INTERRUPTS.c: 234: {
  8714                           ;INTERRUPTS.c: 236: if(Timer2PostCount >= Timer2Post)
  8715  0001C6  5053               	movf	_Timer2Post,w,c
  8716  0001C8  5C55               	subwf	_Timer2PostCount,w,c
  8717  0001CA  5054               	movf	_Timer2Post+1,w,c
  8718  0001CC  5856               	subwfb	_Timer2PostCount+1,w,c
  8719  0001CE  A0D8               	btfss	status,0,c
  8720  0001D0  D014               	goto	i1l7126
  8721                           
  8722                           ;INTERRUPTS.c: 237: {
  8723                           ;INTERRUPTS.c: 238: TMR_Timer2(0);
  8724  0001D2  0E00               	movlw	0
  8725  0001D4  ECD5  F00C         	call	i1_TMR_Timer2
  8726                           
  8727                           ;INTERRUPTS.c: 239: if(Timer2Use == 17)
  8728  0001D8  0E11               	movlw	17
  8729  0001DA  185E               	xorwf	_Timer2Use,w,c
  8730  0001DC  A4D8               	btfss	status,2,c
  8731  0001DE  D002               	goto	i1l7122
  8732                           
  8733                           ;INTERRUPTS.c: 240: {
  8734                           ;INTERRUPTS.c: 242: System_State = 10;
  8735  0001E0  0E0A               	movlw	10
  8736  0001E2  D005               	goto	L2
  8737  0001E4                     i1l7122:
  8738                           
  8739                           ;INTERRUPTS.c: 245: else if(Timer2Use == 18)
  8740  0001E4  0E12               	movlw	18
  8741  0001E6  185E               	xorwf	_Timer2Use,w,c
  8742  0001E8  A4D8               	btfss	status,2,c
  8743  0001EA  D00B               	goto	i1l7130
  8744                           
  8745                           ;INTERRUPTS.c: 246: {
  8746                           ;INTERRUPTS.c: 247: System_State = 8;
  8747  0001EC  0E08               	movlw	8
  8748  0001EE                     L2:
  8749  0001EE  0100               	movlb	0	; () banked
  8750  0001F0  6FCF               	movwf	_System_State& (0+255),b	;volatile
  8751                           
  8752                           ;INTERRUPTS.c: 248: System_State_Change = 1;
  8753  0001F2  0E01               	movlw	1
  8754  0001F4  0100               	movlb	0	; () banked
  8755  0001F6  6FC9               	movwf	_System_State_Change& (0+255),b	;volatile
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;INTERRUPTS.c: 249: }
  8759                           ;INTERRUPTS.c: 250: }
  8760                           
  8761                           ; BSR set to: 0
  8762  0001F8  D004               	goto	i1l7130
  8763  0001FA                     i1l7126:
  8764                           
  8765                           ;INTERRUPTS.c: 251: else
  8766                           ;INTERRUPTS.c: 252: {
  8767                           ;INTERRUPTS.c: 253: SYS_ActivityTimerReset();
  8768  0001FA  ECB1  F00C         	call	i1_SYS_ActivityTimerReset	;wreg free
  8769                           
  8770                           ;INTERRUPTS.c: 254: Timer2PostCount++;
  8771  0001FE  4A55               	infsnz	_Timer2PostCount,f,c
  8772  000200  2A56               	incf	_Timer2PostCount+1,f,c
  8773  000202                     i1l7130:
  8774                           
  8775                           ;INTERRUPTS.c: 255: }
  8776                           ;INTERRUPTS.c: 256: PIR1bits.TMR2IF = 0;
  8777  000202  929E               	bcf	3998,1,c	;volatile
  8778                           
  8779                           ;INTERRUPTS.c: 257: }
  8780  000204  D020               	goto	i1l239
  8781  000206                     i1l226:
  8782                           
  8783                           ;INTERRUPTS.c: 258: else if(PIR1bits.ADIF)
  8784  000206  AC9E               	btfss	3998,6,c	;volatile
  8785  000208  D004               	goto	i1l233
  8786                           
  8787                           ;INTERRUPTS.c: 259: {
  8788                           ;INTERRUPTS.c: 261: ADC_CalculateVoltage();
  8789  00020A  ECD3  F004         	call	_ADC_CalculateVoltage	;wreg free
  8790                           
  8791                           ;INTERRUPTS.c: 262: PIR1bits.ADIF = 0;
  8792  00020E  9C9E               	bcf	3998,6,c	;volatile
  8793                           
  8794                           ;INTERRUPTS.c: 263: }
  8795  000210  D01A               	goto	i1l239
  8796  000212                     i1l233:
  8797                           
  8798                           ;INTERRUPTS.c: 264: else if(PIR1bits.TMR1IF)
  8799  000212  A09E               	btfss	3998,0,c	;volatile
  8800  000214  D017               	goto	i1l235
  8801                           
  8802                           ;INTERRUPTS.c: 265: {
  8803                           ;INTERRUPTS.c: 267: TMR_Timer1(0);
  8804  000216  0E00               	movlw	0
  8805  000218  ECDD  F00C         	call	i1_TMR_Timer1
  8806                           
  8807                           ;INTERRUPTS.c: 268: if(System_State == 10)
  8808  00021C  0E0A               	movlw	10
  8809  00021E  0100               	movlb	0	; () banked
  8810  000220  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
  8811  000222  A4D8               	btfss	status,2,c
  8812  000224  D007               	goto	i1l7144
  8813                           
  8814                           ; BSR set to: 0
  8815                           ;INTERRUPTS.c: 269: {
  8816                           ;INTERRUPTS.c: 270: if(IR_DataPlace >= 40)
  8817  000226  0E27               	movlw	39
  8818  000228  645D               	cpfsgt	_IR_DataPlace,c
  8819  00022A  D004               	goto	i1l7144
  8820                           
  8821                           ; BSR set to: 0
  8822                           ;INTERRUPTS.c: 271: {
  8823                           ;INTERRUPTS.c: 273: IR_Data = IR_CheckCode();
  8824  00022C  EC97  F016         	call	_IR_CheckCode	;wreg free
  8825  000230  0100               	movlb	0	; () banked
  8826  000232  6FC4               	movwf	_IR_Data& (0+255),b	;volatile
  8827  000234                     i1l7144:
  8828                           
  8829                           ; BSR set to: 0
  8830                           ;INTERRUPTS.c: 274: }
  8831                           ;INTERRUPTS.c: 275: }
  8832                           ;INTERRUPTS.c: 276: TMR_ResetTimer1();
  8833  000234  EC1C  F00B         	call	i1_TMR_ResetTimer1	;wreg free
  8834                           
  8835                           ;INTERRUPTS.c: 277: IR_ResetData();
  8836  000238  EC0A  F00D         	call	_IR_ResetData	;wreg free
  8837                           
  8838                           ;INTERRUPTS.c: 278: IR_CleanBuffer();
  8839  00023C  EC5F  F00C         	call	_IR_CleanBuffer	;wreg free
  8840                           
  8841                           ;INTERRUPTS.c: 279: PIR1bits.TMR1IF = 0;
  8842  000240  909E               	bcf	3998,0,c	;volatile
  8843                           
  8844                           ;INTERRUPTS.c: 280: }
  8845  000242  D001               	goto	i1l239
  8846  000244                     i1l235:
  8847                           
  8848                           ;INTERRUPTS.c: 281: else
  8849                           ;INTERRUPTS.c: 282: {
  8850                           ;INTERRUPTS.c: 284: __nop();
  8851  000244  F000               	nop	
  8852  000246                     i1l239:
  8853  000246  C043  FFF5         	movff	??_low_isr+16,tablat
  8854  00024A  C042  FFF8         	movff	??_low_isr+15,tblptru
  8855  00024E  C041  FFF7         	movff	??_low_isr+14,tblptrh
  8856  000252  C040  FFF6         	movff	??_low_isr+13,tblptrl
  8857  000256  C03F  FFF4         	movff	??_low_isr+12,prodh
  8858  00025A  C03E  FFF3         	movff	??_low_isr+11,prodl
  8859  00025E  C03D  FFDA         	movff	??_low_isr+10,fsr2h
  8860  000262  C03C  FFD9         	movff	??_low_isr+9,fsr2l
  8861  000266  C03B  FFE2         	movff	??_low_isr+8,fsr1h
  8862  00026A  C03A  FFE1         	movff	??_low_isr+7,fsr1l
  8863  00026E  C039  FFEA         	movff	??_low_isr+6,fsr0h
  8864  000272  C038  FFE9         	movff	??_low_isr+5,fsr0l
  8865  000276  C037  FFFB         	movff	??_low_isr+4,pclatu
  8866  00027A  C036  FFFA         	movff	??_low_isr+3,pclath
  8867  00027E  C035  FFE0         	movff	??_low_isr+2,bsr
  8868  000282  C034  FFE8         	movff	??_low_isr+1,wreg
  8869  000286  C033  FFD8         	movff	??_low_isr,status
  8870  00028A  9060               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  8871  00028C  0010               	retfie	
  8872  00028E                     __end_of_low_isr:
  8873                           	opt stack 0
  8874                           pclatu	equ	0xFFB
  8875                           pclath	equ	0xFFA
  8876                           tblptru	equ	0xFF8
  8877                           tblptrh	equ	0xFF7
  8878                           tblptrl	equ	0xFF6
  8879                           tablat	equ	0xFF5
  8880                           prodh	equ	0xFF4
  8881                           prodl	equ	0xFF3
  8882                           intcon	equ	0xFF2
  8883                           intcon2	equ	0xFF1
  8884                           intcon3	equ	0xFF0
  8885                           postinc0	equ	0xFEE
  8886                           fsr0h	equ	0xFEA
  8887                           fsr0l	equ	0xFE9
  8888                           wreg	equ	0xFE8
  8889                           postdec1	equ	0xFE5
  8890                           fsr1h	equ	0xFE2
  8891                           fsr1l	equ	0xFE1
  8892                           bsr	equ	0xFE0
  8893                           postinc2	equ	0xFDE
  8894                           postdec2	equ	0xFDD
  8895                           fsr2h	equ	0xFDA
  8896                           fsr2l	equ	0xFD9
  8897                           status	equ	0xFD8
  8898                           
  8899 ;; *************** function i1_SYS_ActivityTimerReset *****************
  8900 ;; Defined at:
  8901 ;;		line 67 in file "SYSTEM.c"
  8902 ;; Parameters:    Size  Location     Type
  8903 ;;		None
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;		None
  8906 ;; Return value:  Size  Location     Type
  8907 ;;		None               void
  8908 ;; Registers used:
  8909 ;;		wreg, status,2
  8910 ;; Tracked objects:
  8911 ;;		On entry : 0/0
  8912 ;;		On exit  : 0/0
  8913 ;;		Unchanged: 0/0
  8914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8915 ;;      Params:         0       0       0       0       0
  8916 ;;      Locals:         0       0       0       0       0
  8917 ;;      Temps:          0       0       0       0       0
  8918 ;;      Totals:         0       0       0       0       0
  8919 ;;Total ram usage:        0 bytes
  8920 ;; Hardware stack levels used:    1
  8921 ;; Hardware stack levels required when called:    6
  8922 ;; This function calls:
  8923 ;;		Nothing
  8924 ;; This function is called by:
  8925 ;;		_low_isr
  8926 ;; This function uses a non-reentrant model
  8927 ;;
  8928                           
  8929                           	psect	text57
  8930  001962                     __ptext57:
  8931                           	opt stack 0
  8932  001962                     i1_SYS_ActivityTimerReset:
  8933                           	opt stack 17
  8934                           
  8935                           ;SYSTEM.c: 69: Activity_Timer = 0;
  8936                           
  8937                           ;incstack = 0
  8938  001962  0E00               	movlw	0
  8939  001964  6E48               	movwf	_Activity_Timer,c
  8940  001966  0E00               	movlw	0
  8941  001968  6E49               	movwf	_Activity_Timer+1,c
  8942  00196A  0E00               	movlw	0
  8943  00196C  6E4A               	movwf	_Activity_Timer+2,c
  8944  00196E  0E00               	movlw	0
  8945  001970  6E4B               	movwf	_Activity_Timer+3,c
  8946  001972  0012               	return		;funcret
  8947  001974                     __end_ofi1_SYS_ActivityTimerReset:
  8948                           	opt stack 0
  8949                           pclatu	equ	0xFFB
  8950                           pclath	equ	0xFFA
  8951                           tblptru	equ	0xFF8
  8952                           tblptrh	equ	0xFF7
  8953                           tblptrl	equ	0xFF6
  8954                           tablat	equ	0xFF5
  8955                           prodh	equ	0xFF4
  8956                           prodl	equ	0xFF3
  8957                           intcon	equ	0xFF2
  8958                           intcon2	equ	0xFF1
  8959                           intcon3	equ	0xFF0
  8960                           postinc0	equ	0xFEE
  8961                           fsr0h	equ	0xFEA
  8962                           fsr0l	equ	0xFE9
  8963                           wreg	equ	0xFE8
  8964                           postdec1	equ	0xFE5
  8965                           fsr1h	equ	0xFE2
  8966                           fsr1l	equ	0xFE1
  8967                           bsr	equ	0xFE0
  8968                           postinc2	equ	0xFDE
  8969                           postdec2	equ	0xFDD
  8970                           fsr2h	equ	0xFDA
  8971                           fsr2l	equ	0xFD9
  8972                           status	equ	0xFD8
  8973                           
  8974 ;; *************** function i1_IR_ReadReceiver *****************
  8975 ;; Defined at:
  8976 ;;		line 80 in file "IR.c"
  8977 ;; Parameters:    Size  Location     Type
  8978 ;;		None
  8979 ;; Auto vars:     Size  Location     Type
  8980 ;;  IR_ReadRecei    1    0[COMRAM] unsigned char 
  8981 ;; Return value:  Size  Location     Type
  8982 ;;                  1    wreg      unsigned char 
  8983 ;; Registers used:
  8984 ;;		wreg, status,2, status,0
  8985 ;; Tracked objects:
  8986 ;;		On entry : 0/0
  8987 ;;		On exit  : 0/0
  8988 ;;		Unchanged: 0/0
  8989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8990 ;;      Params:         0       0       0       0       0
  8991 ;;      Locals:         1       0       0       0       0
  8992 ;;      Temps:          0       0       0       0       0
  8993 ;;      Totals:         1       0       0       0       0
  8994 ;;Total ram usage:        1 bytes
  8995 ;; Hardware stack levels used:    1
  8996 ;; Hardware stack levels required when called:    6
  8997 ;; This function calls:
  8998 ;;		Nothing
  8999 ;; This function is called by:
  9000 ;;		_low_isr
  9001 ;; This function uses a non-reentrant model
  9002 ;;
  9003                           
  9004                           	psect	text58
  9005  0013A4                     __ptext58:
  9006                           	opt stack 0
  9007  0013A4                     i1_IR_ReadReceiver:
  9008                           	opt stack 17
  9009                           
  9010                           ;IR.c: 82: unsigned char value = PORTB;
  9011                           
  9012                           ;incstack = 0
  9013  0013A4  CF81 F001          	movff	3969,i1IR_ReadReceiver@value	;volatile
  9014                           
  9015                           ;IR.c: 84: if(value & 0x10)
  9016  0013A8  A801               	btfss	i1IR_ReadReceiver@value,4,c
  9017  0013AA  D00B               	goto	i1l6858
  9018                           
  9019                           ;IR.c: 85: {
  9020                           ;IR.c: 86: if(IRValue_prev == 0)
  9021  0013AC  0100               	movlb	0	; () banked
  9022  0013AE  51C3               	movf	_IRValue_prev& (0+255),w,b
  9023  0013B0  A4D8               	btfss	status,2,c
  9024  0013B2  D002               	goto	i1l518
  9025                           
  9026                           ; BSR set to: 0
  9027                           ;IR.c: 87: {
  9028                           ;IR.c: 88: IRChange = 1;
  9029  0013B4  0E01               	movlw	1
  9030  0013B6  6E5A               	movwf	_IRChange,c
  9031  0013B8                     i1l518:
  9032                           
  9033                           ; BSR set to: 0
  9034                           ;IR.c: 89: }
  9035                           ;IR.c: 90: IRValue_prev = 1;
  9036  0013B8  0E01               	movlw	1
  9037  0013BA  0100               	movlb	0	; () banked
  9038  0013BC  6FC3               	movwf	_IRValue_prev& (0+255),b
  9039                           
  9040                           ; BSR set to: 0
  9041                           ;IR.c: 91: return 1;
  9042  0013BE  0E01               	movlw	1
  9043                           
  9044                           ; BSR set to: 0
  9045  0013C0  0012               	return	
  9046  0013C2                     i1l6858:
  9047                           
  9048                           ;IR.c: 92: }
  9049                           ;IR.c: 94: if(IRValue_prev == 1)
  9050  0013C2  0100               	movlb	0	; () banked
  9051  0013C4  05C3               	decf	_IRValue_prev& (0+255),w,b
  9052  0013C6  A4D8               	btfss	status,2,c
  9053  0013C8  D002               	goto	i1l520
  9054                           
  9055                           ; BSR set to: 0
  9056                           ;IR.c: 95: {
  9057                           ;IR.c: 96: IRChange = 1;
  9058  0013CA  0E01               	movlw	1
  9059  0013CC  6E5A               	movwf	_IRChange,c
  9060  0013CE                     i1l520:
  9061                           
  9062                           ; BSR set to: 0
  9063                           ;IR.c: 97: }
  9064                           ;IR.c: 98: IRValue_prev = 0;
  9065  0013CE  0E00               	movlw	0
  9066  0013D0  0100               	movlb	0	; () banked
  9067  0013D2  6FC3               	movwf	_IRValue_prev& (0+255),b
  9068                           
  9069                           ; BSR set to: 0
  9070                           ;IR.c: 99: return 0;
  9071  0013D4  0E00               	movlw	0
  9072  0013D6  0012               	return	
  9073  0013D8                     __end_ofi1_IR_ReadReceiver:
  9074                           	opt stack 0
  9075                           pclatu	equ	0xFFB
  9076                           pclath	equ	0xFFA
  9077                           tblptru	equ	0xFF8
  9078                           tblptrh	equ	0xFF7
  9079                           tblptrl	equ	0xFF6
  9080                           tablat	equ	0xFF5
  9081                           prodh	equ	0xFF4
  9082                           prodl	equ	0xFF3
  9083                           intcon	equ	0xFF2
  9084                           intcon2	equ	0xFF1
  9085                           intcon3	equ	0xFF0
  9086                           postinc0	equ	0xFEE
  9087                           fsr0h	equ	0xFEA
  9088                           fsr0l	equ	0xFE9
  9089                           wreg	equ	0xFE8
  9090                           postdec1	equ	0xFE5
  9091                           fsr1h	equ	0xFE2
  9092                           fsr1l	equ	0xFE1
  9093                           bsr	equ	0xFE0
  9094                           postinc2	equ	0xFDE
  9095                           postdec2	equ	0xFDD
  9096                           fsr2h	equ	0xFDA
  9097                           fsr2l	equ	0xFD9
  9098                           status	equ	0xFD8
  9099                           
  9100 ;; *************** function i1_BUT_ReadButton *****************
  9101 ;; Defined at:
  9102 ;;		line 92 in file "BUTTON.c"
  9103 ;; Parameters:    Size  Location     Type
  9104 ;;		None
  9105 ;; Auto vars:     Size  Location     Type
  9106 ;;  BUT_ReadButt    1    0[COMRAM] unsigned char 
  9107 ;; Return value:  Size  Location     Type
  9108 ;;                  1    wreg      unsigned char 
  9109 ;; Registers used:
  9110 ;;		wreg, status,2, status,0
  9111 ;; Tracked objects:
  9112 ;;		On entry : 0/0
  9113 ;;		On exit  : 0/0
  9114 ;;		Unchanged: 0/0
  9115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9116 ;;      Params:         0       0       0       0       0
  9117 ;;      Locals:         1       0       0       0       0
  9118 ;;      Temps:          0       0       0       0       0
  9119 ;;      Totals:         1       0       0       0       0
  9120 ;;Total ram usage:        1 bytes
  9121 ;; Hardware stack levels used:    1
  9122 ;; Hardware stack levels required when called:    6
  9123 ;; This function calls:
  9124 ;;		Nothing
  9125 ;; This function is called by:
  9126 ;;		_low_isr
  9127 ;; This function uses a non-reentrant model
  9128 ;;
  9129                           
  9130                           	psect	text59
  9131  0013D8                     __ptext59:
  9132                           	opt stack 0
  9133  0013D8                     i1_BUT_ReadButton:
  9134                           	opt stack 17
  9135                           
  9136                           ;BUTTON.c: 94: unsigned char value = PORTB;
  9137                           
  9138                           ; BSR set to: 0
  9139                           ;incstack = 0
  9140  0013D8  CF81 F001          	movff	3969,i1BUT_ReadButton@value	;volatile
  9141                           
  9142                           ;BUTTON.c: 95: if((value & 0x20) == 0)
  9143  0013DC  BA01               	btfsc	i1BUT_ReadButton@value,5,c
  9144  0013DE  D00B               	goto	i1l6876
  9145                           
  9146                           ;BUTTON.c: 96: {
  9147                           ;BUTTON.c: 98: if(ButtonValue_prev == 0)
  9148  0013E0  0100               	movlb	0	; () banked
  9149  0013E2  51BF               	movf	_ButtonValue_prev& (0+255),w,b
  9150  0013E4  A4D8               	btfss	status,2,c
  9151  0013E6  D002               	goto	i1l981
  9152                           
  9153                           ; BSR set to: 0
  9154                           ;BUTTON.c: 99: {
  9155                           ;BUTTON.c: 100: ButtonChange = 1;
  9156  0013E8  0E01               	movlw	1
  9157  0013EA  6E59               	movwf	_ButtonChange,c
  9158  0013EC                     i1l981:
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;BUTTON.c: 101: }
  9162                           ;BUTTON.c: 102: ButtonValue_prev = 1;
  9163  0013EC  0E01               	movlw	1
  9164  0013EE  0100               	movlb	0	; () banked
  9165  0013F0  6FBF               	movwf	_ButtonValue_prev& (0+255),b
  9166                           
  9167                           ; BSR set to: 0
  9168                           ;BUTTON.c: 103: return 1;
  9169  0013F2  0E01               	movlw	1
  9170                           
  9171                           ; BSR set to: 0
  9172  0013F4  0012               	return	
  9173  0013F6                     i1l6876:
  9174                           
  9175                           ;BUTTON.c: 104: }
  9176                           ;BUTTON.c: 107: if(ButtonValue_prev == 1)
  9177  0013F6  0100               	movlb	0	; () banked
  9178  0013F8  05BF               	decf	_ButtonValue_prev& (0+255),w,b
  9179  0013FA  A4D8               	btfss	status,2,c
  9180  0013FC  D002               	goto	i1l983
  9181                           
  9182                           ; BSR set to: 0
  9183                           ;BUTTON.c: 108: {
  9184                           ;BUTTON.c: 109: ButtonChange = 1;
  9185  0013FE  0E01               	movlw	1
  9186  001400  6E59               	movwf	_ButtonChange,c
  9187  001402                     i1l983:
  9188                           
  9189                           ; BSR set to: 0
  9190                           ;BUTTON.c: 110: }
  9191                           ;BUTTON.c: 111: ButtonValue_prev = 0;
  9192  001402  0E00               	movlw	0
  9193  001404  0100               	movlb	0	; () banked
  9194  001406  6FBF               	movwf	_ButtonValue_prev& (0+255),b
  9195                           
  9196                           ; BSR set to: 0
  9197                           ;BUTTON.c: 112: return 0;
  9198  001408  0E00               	movlw	0
  9199  00140A  0012               	return	
  9200  00140C                     __end_ofi1_BUT_ReadButton:
  9201                           	opt stack 0
  9202                           pclatu	equ	0xFFB
  9203                           pclath	equ	0xFFA
  9204                           tblptru	equ	0xFF8
  9205                           tblptrh	equ	0xFF7
  9206                           tblptrl	equ	0xFF6
  9207                           tablat	equ	0xFF5
  9208                           prodh	equ	0xFF4
  9209                           prodl	equ	0xFF3
  9210                           intcon	equ	0xFF2
  9211                           intcon2	equ	0xFF1
  9212                           intcon3	equ	0xFF0
  9213                           postinc0	equ	0xFEE
  9214                           fsr0h	equ	0xFEA
  9215                           fsr0l	equ	0xFE9
  9216                           wreg	equ	0xFE8
  9217                           postdec1	equ	0xFE5
  9218                           fsr1h	equ	0xFE2
  9219                           fsr1l	equ	0xFE1
  9220                           bsr	equ	0xFE0
  9221                           postinc2	equ	0xFDE
  9222                           postdec2	equ	0xFDD
  9223                           fsr2h	equ	0xFDA
  9224                           fsr2l	equ	0xFD9
  9225                           status	equ	0xFD8
  9226                           
  9227 ;; *************** function _TMR_Timer2Start *****************
  9228 ;; Defined at:
  9229 ;;		line 387 in file "TIMERS.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;  time            2    2[COMRAM] unsigned int 
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;		None
  9234 ;; Return value:  Size  Location     Type
  9235 ;;		None               void
  9236 ;; Registers used:
  9237 ;;		wreg, status,2, cstack
  9238 ;; Tracked objects:
  9239 ;;		On entry : 0/0
  9240 ;;		On exit  : 0/0
  9241 ;;		Unchanged: 0/0
  9242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9243 ;;      Params:         2       0       0       0       0
  9244 ;;      Locals:         0       0       0       0       0
  9245 ;;      Temps:          0       0       0       0       0
  9246 ;;      Totals:         2       0       0       0       0
  9247 ;;Total ram usage:        2 bytes
  9248 ;; Hardware stack levels used:    1
  9249 ;; Hardware stack levels required when called:    8
  9250 ;; This function calls:
  9251 ;;		_TMR_ResetTimer2
  9252 ;;		i1_TMR_Timer2
  9253 ;; This function is called by:
  9254 ;;		_low_isr
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           	psect	text60
  9259  001754                     __ptext60:
  9260                           	opt stack 0
  9261  001754                     _TMR_Timer2Start:
  9262                           	opt stack 15
  9263                           
  9264                           ;TIMERS.c: 389: TMR_Timer2(0);
  9265                           
  9266                           ; BSR set to: 0
  9267                           ;incstack = 0
  9268  001754  0E00               	movlw	0
  9269  001756  ECD5  F00C         	call	i1_TMR_Timer2
  9270                           
  9271                           ;TIMERS.c: 390: Timer2Post = time;
  9272  00175A  C003  F053         	movff	TMR_Timer2Start@time,_Timer2Post
  9273  00175E  C004  F054         	movff	TMR_Timer2Start@time+1,_Timer2Post+1
  9274                           
  9275                           ;TIMERS.c: 391: TMR_ResetTimer2();
  9276  001762  ECF6  F00A         	call	_TMR_ResetTimer2	;wreg free
  9277                           
  9278                           ;TIMERS.c: 392: TMR_Timer2(1);
  9279  001766  0E01               	movlw	1
  9280  001768  ECD5  F00C         	call	i1_TMR_Timer2
  9281  00176C  0012               	return		;funcret
  9282  00176E                     __end_of_TMR_Timer2Start:
  9283                           	opt stack 0
  9284                           pclatu	equ	0xFFB
  9285                           pclath	equ	0xFFA
  9286                           tblptru	equ	0xFF8
  9287                           tblptrh	equ	0xFF7
  9288                           tblptrl	equ	0xFF6
  9289                           tablat	equ	0xFF5
  9290                           prodh	equ	0xFF4
  9291                           prodl	equ	0xFF3
  9292                           intcon	equ	0xFF2
  9293                           intcon2	equ	0xFF1
  9294                           intcon3	equ	0xFF0
  9295                           postinc0	equ	0xFEE
  9296                           fsr0h	equ	0xFEA
  9297                           fsr0l	equ	0xFE9
  9298                           wreg	equ	0xFE8
  9299                           postdec1	equ	0xFE5
  9300                           fsr1h	equ	0xFE2
  9301                           fsr1l	equ	0xFE1
  9302                           bsr	equ	0xFE0
  9303                           postinc2	equ	0xFDE
  9304                           postdec2	equ	0xFDD
  9305                           fsr2h	equ	0xFDA
  9306                           fsr2l	equ	0xFD9
  9307                           status	equ	0xFD8
  9308                           
  9309 ;; *************** function _TMR_ResetTimer2 *****************
  9310 ;; Defined at:
  9311 ;;		line 180 in file "TIMERS.c"
  9312 ;; Parameters:    Size  Location     Type
  9313 ;;		None
  9314 ;; Auto vars:     Size  Location     Type
  9315 ;;  TimerOn         1    1[COMRAM] unsigned char 
  9316 ;; Return value:  Size  Location     Type
  9317 ;;		None               void
  9318 ;; Registers used:
  9319 ;;		wreg, status,2, cstack
  9320 ;; Tracked objects:
  9321 ;;		On entry : 0/0
  9322 ;;		On exit  : 0/0
  9323 ;;		Unchanged: 0/0
  9324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9325 ;;      Params:         0       0       0       0       0
  9326 ;;      Locals:         1       0       0       0       0
  9327 ;;      Temps:          0       0       0       0       0
  9328 ;;      Totals:         1       0       0       0       0
  9329 ;;Total ram usage:        1 bytes
  9330 ;; Hardware stack levels used:    1
  9331 ;; Hardware stack levels required when called:    7
  9332 ;; This function calls:
  9333 ;;		i1_TMR_Timer2
  9334 ;; This function is called by:
  9335 ;;		_TMR_Timer2Start
  9336 ;; This function uses a non-reentrant model
  9337 ;;
  9338                           
  9339                           	psect	text61
  9340  0015EC                     __ptext61:
  9341                           	opt stack 0
  9342  0015EC                     _TMR_ResetTimer2:
  9343                           	opt stack 15
  9344                           
  9345                           ;TIMERS.c: 182: unsigned char TimerOn = T2CONbits.TMR2ON;
  9346                           
  9347                           ;incstack = 0
  9348  0015EC  0E00               	movlw	0
  9349  0015EE  B4CA               	btfsc	4042,2,c	;volatile
  9350  0015F0  0E01               	movlw	1
  9351  0015F2  6E02               	movwf	TMR_ResetTimer2@TimerOn,c
  9352                           
  9353                           ;TIMERS.c: 184: TMR_Timer2(0);
  9354  0015F4  0E00               	movlw	0
  9355  0015F6  ECD5  F00C         	call	i1_TMR_Timer2
  9356                           
  9357                           ;TIMERS.c: 185: Timer2PostCount = 0;
  9358  0015FA  0E00               	movlw	0
  9359  0015FC  6E56               	movwf	_Timer2PostCount+1,c
  9360  0015FE  0E00               	movlw	0
  9361  001600  6E55               	movwf	_Timer2PostCount,c
  9362                           
  9363                           ;TIMERS.c: 186: TMR2 = 0;
  9364  001602  0E00               	movlw	0
  9365  001604  6ECC               	movwf	4044,c	;volatile
  9366                           
  9367                           ;TIMERS.c: 187: if(TimerOn)
  9368  001606  5002               	movf	TMR_ResetTimer2@TimerOn,w,c
  9369  001608  B4D8               	btfsc	status,2,c
  9370  00160A  0012               	return	
  9371                           
  9372                           ;TIMERS.c: 188: {
  9373                           ;TIMERS.c: 189: TMR_Timer2(1);
  9374  00160C  0E01               	movlw	1
  9375  00160E  ECD5  F00C         	call	i1_TMR_Timer2
  9376  001612  0012               	return	
  9377  001614                     __end_of_TMR_ResetTimer2:
  9378                           	opt stack 0
  9379                           pclatu	equ	0xFFB
  9380                           pclath	equ	0xFFA
  9381                           tblptru	equ	0xFF8
  9382                           tblptrh	equ	0xFF7
  9383                           tblptrl	equ	0xFF6
  9384                           tablat	equ	0xFF5
  9385                           prodh	equ	0xFF4
  9386                           prodl	equ	0xFF3
  9387                           intcon	equ	0xFF2
  9388                           intcon2	equ	0xFF1
  9389                           intcon3	equ	0xFF0
  9390                           postinc0	equ	0xFEE
  9391                           fsr0h	equ	0xFEA
  9392                           fsr0l	equ	0xFE9
  9393                           wreg	equ	0xFE8
  9394                           postdec1	equ	0xFE5
  9395                           fsr1h	equ	0xFE2
  9396                           fsr1l	equ	0xFE1
  9397                           bsr	equ	0xFE0
  9398                           postinc2	equ	0xFDE
  9399                           postdec2	equ	0xFDD
  9400                           fsr2h	equ	0xFDA
  9401                           fsr2l	equ	0xFD9
  9402                           status	equ	0xFD8
  9403                           
  9404 ;; *************** function i1_TMR_Timer2 *****************
  9405 ;; Defined at:
  9406 ;;		line 125 in file "TIMERS.c"
  9407 ;; Parameters:    Size  Location     Type
  9408 ;;  state           1    wreg     unsigned char 
  9409 ;; Auto vars:     Size  Location     Type
  9410 ;;  state           1    0[COMRAM] unsigned char 
  9411 ;; Return value:  Size  Location     Type
  9412 ;;		None               void
  9413 ;; Registers used:
  9414 ;;		wreg, status,2
  9415 ;; Tracked objects:
  9416 ;;		On entry : 0/0
  9417 ;;		On exit  : 0/0
  9418 ;;		Unchanged: 0/0
  9419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9420 ;;      Params:         0       0       0       0       0
  9421 ;;      Locals:         1       0       0       0       0
  9422 ;;      Temps:          0       0       0       0       0
  9423 ;;      Totals:         1       0       0       0       0
  9424 ;;Total ram usage:        1 bytes
  9425 ;; Hardware stack levels used:    1
  9426 ;; Hardware stack levels required when called:    6
  9427 ;; This function calls:
  9428 ;;		Nothing
  9429 ;; This function is called by:
  9430 ;;		_low_isr
  9431 ;;		_TMR_ResetTimer2
  9432 ;;		_TMR_Timer2Start
  9433 ;; This function uses a non-reentrant model
  9434 ;;
  9435                           
  9436                           	psect	text62
  9437  0019AA                     __ptext62:
  9438                           	opt stack 0
  9439  0019AA                     i1_TMR_Timer2:
  9440                           	opt stack 17
  9441                           
  9442                           ;incstack = 0
  9443                           ;i1TMR_Timer2@state stored from wreg
  9444  0019AA  6E01               	movwf	i1TMR_Timer2@state,c
  9445                           
  9446                           ;TIMERS.c: 127: if(state)
  9447  0019AC  5001               	movf	i1TMR_Timer2@state,w,c
  9448  0019AE  B4D8               	btfsc	status,2,c
  9449  0019B0  D002               	goto	i1l1044
  9450                           
  9451                           ;TIMERS.c: 128: {
  9452                           ;TIMERS.c: 130: T2CONbits.TMR2ON = 1;
  9453  0019B2  84CA               	bsf	4042,2,c	;volatile
  9454                           
  9455                           ;TIMERS.c: 131: }
  9456  0019B4  0012               	return	
  9457  0019B6                     i1l1044:
  9458                           
  9459                           ;TIMERS.c: 132: else
  9460                           ;TIMERS.c: 133: {
  9461                           ;TIMERS.c: 135: T2CONbits.TMR2ON = 0;
  9462  0019B6  94CA               	bcf	4042,2,c	;volatile
  9463  0019B8  0012               	return	
  9464  0019BA                     __end_ofi1_TMR_Timer2:
  9465                           	opt stack 0
  9466                           pclatu	equ	0xFFB
  9467                           pclath	equ	0xFFA
  9468                           tblptru	equ	0xFF8
  9469                           tblptrh	equ	0xFF7
  9470                           tblptrl	equ	0xFF6
  9471                           tablat	equ	0xFF5
  9472                           prodh	equ	0xFF4
  9473                           prodl	equ	0xFF3
  9474                           intcon	equ	0xFF2
  9475                           intcon2	equ	0xFF1
  9476                           intcon3	equ	0xFF0
  9477                           postinc0	equ	0xFEE
  9478                           fsr0h	equ	0xFEA
  9479                           fsr0l	equ	0xFE9
  9480                           wreg	equ	0xFE8
  9481                           postdec1	equ	0xFE5
  9482                           fsr1h	equ	0xFE2
  9483                           fsr1l	equ	0xFE1
  9484                           bsr	equ	0xFE0
  9485                           postinc2	equ	0xFDE
  9486                           postdec2	equ	0xFDD
  9487                           fsr2h	equ	0xFDA
  9488                           fsr2l	equ	0xFD9
  9489                           status	equ	0xFD8
  9490                           
  9491 ;; *************** function _TMR_Timer1Status *****************
  9492 ;; Defined at:
  9493 ;;		line 72 in file "TIMERS.c"
  9494 ;; Parameters:    Size  Location     Type
  9495 ;;		None
  9496 ;; Auto vars:     Size  Location     Type
  9497 ;;		None
  9498 ;; Return value:  Size  Location     Type
  9499 ;;                  1    wreg      unsigned char 
  9500 ;; Registers used:
  9501 ;;		wreg
  9502 ;; Tracked objects:
  9503 ;;		On entry : 0/0
  9504 ;;		On exit  : 0/0
  9505 ;;		Unchanged: 0/0
  9506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9507 ;;      Params:         0       0       0       0       0
  9508 ;;      Locals:         0       0       0       0       0
  9509 ;;      Temps:          0       0       0       0       0
  9510 ;;      Totals:         0       0       0       0       0
  9511 ;;Total ram usage:        0 bytes
  9512 ;; Hardware stack levels used:    1
  9513 ;; Hardware stack levels required when called:    6
  9514 ;; This function calls:
  9515 ;;		Nothing
  9516 ;; This function is called by:
  9517 ;;		_low_isr
  9518 ;; This function uses a non-reentrant model
  9519 ;;
  9520                           
  9521                           	psect	text63
  9522  001A3E                     __ptext63:
  9523                           	opt stack 0
  9524  001A3E                     _TMR_Timer1Status:
  9525                           	opt stack 17
  9526                           
  9527                           ;TIMERS.c: 74: if(T1CONbits.TMR1ON)
  9528                           
  9529                           ;incstack = 0
  9530  001A3E  A0CD               	btfss	4045,0,c	;volatile
  9531  001A40  D002               	goto	i1l6720
  9532                           
  9533                           ;TIMERS.c: 75: {
  9534                           ;TIMERS.c: 77: return 1;
  9535  001A42  0E01               	movlw	1
  9536  001A44  0012               	return	
  9537  001A46                     i1l6720:
  9538                           
  9539                           ;TIMERS.c: 78: }
  9540                           ;TIMERS.c: 79: return 0;
  9541  001A46  0E00               	movlw	0
  9542  001A48  0012               	return	
  9543  001A4A                     __end_of_TMR_Timer1Status:
  9544                           	opt stack 0
  9545                           pclatu	equ	0xFFB
  9546                           pclath	equ	0xFFA
  9547                           tblptru	equ	0xFF8
  9548                           tblptrh	equ	0xFF7
  9549                           tblptrl	equ	0xFF6
  9550                           tablat	equ	0xFF5
  9551                           prodh	equ	0xFF4
  9552                           prodl	equ	0xFF3
  9553                           intcon	equ	0xFF2
  9554                           intcon2	equ	0xFF1
  9555                           intcon3	equ	0xFF0
  9556                           postinc0	equ	0xFEE
  9557                           fsr0h	equ	0xFEA
  9558                           fsr0l	equ	0xFE9
  9559                           wreg	equ	0xFE8
  9560                           postdec1	equ	0xFE5
  9561                           fsr1h	equ	0xFE2
  9562                           fsr1l	equ	0xFE1
  9563                           bsr	equ	0xFE0
  9564                           postinc2	equ	0xFDE
  9565                           postdec2	equ	0xFDD
  9566                           fsr2h	equ	0xFDA
  9567                           fsr2l	equ	0xFD9
  9568                           status	equ	0xFD8
  9569                           
  9570 ;; *************** function _TMR_Timer1Start *****************
  9571 ;; Defined at:
  9572 ;;		line 375 in file "TIMERS.c"
  9573 ;; Parameters:    Size  Location     Type
  9574 ;;		None
  9575 ;; Auto vars:     Size  Location     Type
  9576 ;;		None
  9577 ;; Return value:  Size  Location     Type
  9578 ;;		None               void
  9579 ;; Registers used:
  9580 ;;		wreg, status,2, cstack
  9581 ;; Tracked objects:
  9582 ;;		On entry : 0/0
  9583 ;;		On exit  : 0/0
  9584 ;;		Unchanged: 0/0
  9585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9586 ;;      Params:         0       0       0       0       0
  9587 ;;      Locals:         0       0       0       0       0
  9588 ;;      Temps:          0       0       0       0       0
  9589 ;;      Totals:         0       0       0       0       0
  9590 ;;Total ram usage:        0 bytes
  9591 ;; Hardware stack levels used:    1
  9592 ;; Hardware stack levels required when called:    8
  9593 ;; This function calls:
  9594 ;;		i1_TMR_ResetTimer1
  9595 ;;		i1_TMR_Timer1
  9596 ;; This function is called by:
  9597 ;;		_low_isr
  9598 ;; This function uses a non-reentrant model
  9599 ;;
  9600                           
  9601                           	psect	text64
  9602  001974                     __ptext64:
  9603                           	opt stack 0
  9604  001974                     _TMR_Timer1Start:
  9605                           	opt stack 15
  9606                           
  9607                           ;TIMERS.c: 377: TMR_Timer1(0);
  9608                           
  9609                           ;incstack = 0
  9610  001974  0E00               	movlw	0
  9611  001976  ECDD  F00C         	call	i1_TMR_Timer1
  9612                           
  9613                           ;TIMERS.c: 378: TMR_ResetTimer1();
  9614  00197A  EC1C  F00B         	call	i1_TMR_ResetTimer1	;wreg free
  9615                           
  9616                           ;TIMERS.c: 379: TMR_Timer1(1);
  9617  00197E  0E01               	movlw	1
  9618  001980  ECDD  F00C         	call	i1_TMR_Timer1
  9619  001984  0012               	return		;funcret
  9620  001986                     __end_of_TMR_Timer1Start:
  9621                           	opt stack 0
  9622                           pclatu	equ	0xFFB
  9623                           pclath	equ	0xFFA
  9624                           tblptru	equ	0xFF8
  9625                           tblptrh	equ	0xFF7
  9626                           tblptrl	equ	0xFF6
  9627                           tablat	equ	0xFF5
  9628                           prodh	equ	0xFF4
  9629                           prodl	equ	0xFF3
  9630                           intcon	equ	0xFF2
  9631                           intcon2	equ	0xFF1
  9632                           intcon3	equ	0xFF0
  9633                           postinc0	equ	0xFEE
  9634                           fsr0h	equ	0xFEA
  9635                           fsr0l	equ	0xFE9
  9636                           wreg	equ	0xFE8
  9637                           postdec1	equ	0xFE5
  9638                           fsr1h	equ	0xFE2
  9639                           fsr1l	equ	0xFE1
  9640                           bsr	equ	0xFE0
  9641                           postinc2	equ	0xFDE
  9642                           postdec2	equ	0xFDD
  9643                           fsr2h	equ	0xFDA
  9644                           fsr2l	equ	0xFD9
  9645                           status	equ	0xFD8
  9646                           
  9647 ;; *************** function i1_TMR_ResetTimer1 *****************
  9648 ;; Defined at:
  9649 ;;		line 162 in file "TIMERS.c"
  9650 ;; Parameters:    Size  Location     Type
  9651 ;;		None
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;  TMR_ResetTim    1    1[COMRAM] unsigned char 
  9654 ;; Return value:  Size  Location     Type
  9655 ;;		None               void
  9656 ;; Registers used:
  9657 ;;		wreg, status,2, cstack
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9663 ;;      Params:         0       0       0       0       0
  9664 ;;      Locals:         1       0       0       0       0
  9665 ;;      Temps:          0       0       0       0       0
  9666 ;;      Totals:         1       0       0       0       0
  9667 ;;Total ram usage:        1 bytes
  9668 ;; Hardware stack levels used:    1
  9669 ;; Hardware stack levels required when called:    7
  9670 ;; This function calls:
  9671 ;;		i1_TMR_Timer1
  9672 ;; This function is called by:
  9673 ;;		_low_isr
  9674 ;;		_TMR_Timer1Start
  9675 ;; This function uses a non-reentrant model
  9676 ;;
  9677                           
  9678                           	psect	text65
  9679  001638                     __ptext65:
  9680                           	opt stack 0
  9681  001638                     i1_TMR_ResetTimer1:
  9682                           	opt stack 16
  9683                           
  9684                           ;TIMERS.c: 164: unsigned char TimerOn = T1CONbits.TMR1ON;
  9685                           
  9686                           ;incstack = 0
  9687  001638  0E00               	movlw	0
  9688  00163A  B0CD               	btfsc	4045,0,c	;volatile
  9689  00163C  0E01               	movlw	1
  9690  00163E  6E02               	movwf	i1TMR_ResetTimer1@TimerOn,c
  9691                           
  9692                           ;TIMERS.c: 166: TMR_Timer1(0);
  9693  001640  0E00               	movlw	0
  9694  001642  ECDD  F00C         	call	i1_TMR_Timer1
  9695                           
  9696                           ;TIMERS.c: 167: TMR1H = 0;
  9697  001646  0E00               	movlw	0
  9698  001648  6ECF               	movwf	4047,c	;volatile
  9699                           
  9700                           ;TIMERS.c: 168: TMR1L = 2;
  9701  00164A  0E02               	movlw	2
  9702  00164C  6ECE               	movwf	4046,c	;volatile
  9703                           
  9704                           ;TIMERS.c: 169: if(TimerOn)
  9705  00164E  5002               	movf	i1TMR_ResetTimer1@TimerOn,w,c
  9706  001650  B4D8               	btfsc	status,2,c
  9707  001652  0012               	return	
  9708                           
  9709                           ;TIMERS.c: 170: {
  9710                           ;TIMERS.c: 171: TMR_Timer1(1);
  9711  001654  0E01               	movlw	1
  9712  001656  ECDD  F00C         	call	i1_TMR_Timer1
  9713  00165A  0012               	return	
  9714  00165C                     __end_ofi1_TMR_ResetTimer1:
  9715                           	opt stack 0
  9716                           pclatu	equ	0xFFB
  9717                           pclath	equ	0xFFA
  9718                           tblptru	equ	0xFF8
  9719                           tblptrh	equ	0xFF7
  9720                           tblptrl	equ	0xFF6
  9721                           tablat	equ	0xFF5
  9722                           prodh	equ	0xFF4
  9723                           prodl	equ	0xFF3
  9724                           intcon	equ	0xFF2
  9725                           intcon2	equ	0xFF1
  9726                           intcon3	equ	0xFF0
  9727                           postinc0	equ	0xFEE
  9728                           fsr0h	equ	0xFEA
  9729                           fsr0l	equ	0xFE9
  9730                           wreg	equ	0xFE8
  9731                           postdec1	equ	0xFE5
  9732                           fsr1h	equ	0xFE2
  9733                           fsr1l	equ	0xFE1
  9734                           bsr	equ	0xFE0
  9735                           postinc2	equ	0xFDE
  9736                           postdec2	equ	0xFDD
  9737                           fsr2h	equ	0xFDA
  9738                           fsr2l	equ	0xFD9
  9739                           status	equ	0xFD8
  9740                           
  9741 ;; *************** function i1_TMR_Timer1 *****************
  9742 ;; Defined at:
  9743 ;;		line 106 in file "TIMERS.c"
  9744 ;; Parameters:    Size  Location     Type
  9745 ;;  state           1    wreg     unsigned char 
  9746 ;; Auto vars:     Size  Location     Type
  9747 ;;  state           1    0[COMRAM] unsigned char 
  9748 ;; Return value:  Size  Location     Type
  9749 ;;		None               void
  9750 ;; Registers used:
  9751 ;;		wreg, status,2
  9752 ;; Tracked objects:
  9753 ;;		On entry : 0/0
  9754 ;;		On exit  : 0/0
  9755 ;;		Unchanged: 0/0
  9756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9757 ;;      Params:         0       0       0       0       0
  9758 ;;      Locals:         1       0       0       0       0
  9759 ;;      Temps:          0       0       0       0       0
  9760 ;;      Totals:         1       0       0       0       0
  9761 ;;Total ram usage:        1 bytes
  9762 ;; Hardware stack levels used:    1
  9763 ;; Hardware stack levels required when called:    6
  9764 ;; This function calls:
  9765 ;;		Nothing
  9766 ;; This function is called by:
  9767 ;;		_low_isr
  9768 ;;		_TMR_Timer1Start
  9769 ;;		i1_TMR_ResetTimer1
  9770 ;; This function uses a non-reentrant model
  9771 ;;
  9772                           
  9773                           	psect	text66
  9774  0019BA                     __ptext66:
  9775                           	opt stack 0
  9776  0019BA                     i1_TMR_Timer1:
  9777                           	opt stack 17
  9778                           
  9779                           ;incstack = 0
  9780                           ;i1TMR_Timer1@state stored from wreg
  9781  0019BA  6E01               	movwf	i1TMR_Timer1@state,c
  9782                           
  9783                           ;TIMERS.c: 108: if(state)
  9784  0019BC  5001               	movf	i1TMR_Timer1@state,w,c
  9785  0019BE  B4D8               	btfsc	status,2,c
  9786  0019C0  D002               	goto	i1l1039
  9787                           
  9788                           ;TIMERS.c: 109: {
  9789                           ;TIMERS.c: 111: T1CONbits.TMR1ON = 1;
  9790  0019C2  80CD               	bsf	4045,0,c	;volatile
  9791                           
  9792                           ;TIMERS.c: 112: }
  9793  0019C4  0012               	return	
  9794  0019C6                     i1l1039:
  9795                           
  9796                           ;TIMERS.c: 113: else
  9797                           ;TIMERS.c: 114: {
  9798                           ;TIMERS.c: 116: T1CONbits.TMR1ON = 0;
  9799  0019C6  90CD               	bcf	4045,0,c	;volatile
  9800  0019C8  0012               	return	
  9801  0019CA                     __end_ofi1_TMR_Timer1:
  9802                           	opt stack 0
  9803                           pclatu	equ	0xFFB
  9804                           pclath	equ	0xFFA
  9805                           tblptru	equ	0xFF8
  9806                           tblptrh	equ	0xFF7
  9807                           tblptrl	equ	0xFF6
  9808                           tablat	equ	0xFF5
  9809                           prodh	equ	0xFF4
  9810                           prodl	equ	0xFF3
  9811                           intcon	equ	0xFF2
  9812                           intcon2	equ	0xFF1
  9813                           intcon3	equ	0xFF0
  9814                           postinc0	equ	0xFEE
  9815                           fsr0h	equ	0xFEA
  9816                           fsr0l	equ	0xFE9
  9817                           wreg	equ	0xFE8
  9818                           postdec1	equ	0xFE5
  9819                           fsr1h	equ	0xFE2
  9820                           fsr1l	equ	0xFE1
  9821                           bsr	equ	0xFE0
  9822                           postinc2	equ	0xFDE
  9823                           postdec2	equ	0xFDD
  9824                           fsr2h	equ	0xFDA
  9825                           fsr2l	equ	0xFD9
  9826                           status	equ	0xFD8
  9827                           
  9828 ;; *************** function _RF_Disable *****************
  9829 ;; Defined at:
  9830 ;;		line 195 in file "RF.c"
  9831 ;; Parameters:    Size  Location     Type
  9832 ;;		None
  9833 ;; Auto vars:     Size  Location     Type
  9834 ;;		None
  9835 ;; Return value:  Size  Location     Type
  9836 ;;		None               void
  9837 ;; Registers used:
  9838 ;;		wreg, status,2, cstack
  9839 ;; Tracked objects:
  9840 ;;		On entry : 0/0
  9841 ;;		On exit  : 0/0
  9842 ;;		Unchanged: 0/0
  9843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9844 ;;      Params:         0       0       0       0       0
  9845 ;;      Locals:         0       0       0       0       0
  9846 ;;      Temps:          0       0       0       0       0
  9847 ;;      Totals:         0       0       0       0       0
  9848 ;;Total ram usage:        0 bytes
  9849 ;; Hardware stack levels used:    1
  9850 ;; Hardware stack levels required when called:    7
  9851 ;; This function calls:
  9852 ;;		i1_RF_DataInt
  9853 ;;		i1_TMR_Timer0
  9854 ;;		i1_TMR_Timer0Int
  9855 ;; This function is called by:
  9856 ;;		_low_isr
  9857 ;; This function uses a non-reentrant model
  9858 ;;
  9859                           
  9860                           	psect	text67
  9861  001900                     __ptext67:
  9862                           	opt stack 0
  9863  001900                     _RF_Disable:
  9864                           	opt stack 16
  9865                           
  9866                           ;RF.c: 197: RF_DataInt(0);
  9867                           
  9868                           ;incstack = 0
  9869  001900  0E00               	movlw	0
  9870  001902  EC94  F00C         	call	i1_RF_DataInt
  9871                           
  9872                           ;RF.c: 198: TMR_Timer0Int(0);
  9873  001906  0E00               	movlw	0
  9874  001908  ECED  F00C         	call	i1_TMR_Timer0Int
  9875                           
  9876                           ;RF.c: 199: TMR_Timer0(0);
  9877  00190C  0E00               	movlw	0
  9878  00190E  ECE5  F00C         	call	i1_TMR_Timer0
  9879  001912  0012               	return		;funcret
  9880  001914                     __end_of_RF_Disable:
  9881                           	opt stack 0
  9882                           pclatu	equ	0xFFB
  9883                           pclath	equ	0xFFA
  9884                           tblptru	equ	0xFF8
  9885                           tblptrh	equ	0xFF7
  9886                           tblptrl	equ	0xFF6
  9887                           tablat	equ	0xFF5
  9888                           prodh	equ	0xFF4
  9889                           prodl	equ	0xFF3
  9890                           intcon	equ	0xFF2
  9891                           intcon2	equ	0xFF1
  9892                           intcon3	equ	0xFF0
  9893                           postinc0	equ	0xFEE
  9894                           fsr0h	equ	0xFEA
  9895                           fsr0l	equ	0xFE9
  9896                           wreg	equ	0xFE8
  9897                           postdec1	equ	0xFE5
  9898                           fsr1h	equ	0xFE2
  9899                           fsr1l	equ	0xFE1
  9900                           bsr	equ	0xFE0
  9901                           postinc2	equ	0xFDE
  9902                           postdec2	equ	0xFDD
  9903                           fsr2h	equ	0xFDA
  9904                           fsr2l	equ	0xFD9
  9905                           status	equ	0xFD8
  9906                           
  9907 ;; *************** function i1_TMR_Timer0 *****************
  9908 ;; Defined at:
  9909 ;;		line 87 in file "TIMERS.c"
  9910 ;; Parameters:    Size  Location     Type
  9911 ;;  state           1    wreg     unsigned char 
  9912 ;; Auto vars:     Size  Location     Type
  9913 ;;  state           1    0[COMRAM] unsigned char 
  9914 ;; Return value:  Size  Location     Type
  9915 ;;		None               void
  9916 ;; Registers used:
  9917 ;;		wreg, status,2
  9918 ;; Tracked objects:
  9919 ;;		On entry : 0/0
  9920 ;;		On exit  : 0/0
  9921 ;;		Unchanged: 0/0
  9922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9923 ;;      Params:         0       0       0       0       0
  9924 ;;      Locals:         1       0       0       0       0
  9925 ;;      Temps:          0       0       0       0       0
  9926 ;;      Totals:         1       0       0       0       0
  9927 ;;Total ram usage:        1 bytes
  9928 ;; Hardware stack levels used:    1
  9929 ;; Hardware stack levels required when called:    6
  9930 ;; This function calls:
  9931 ;;		Nothing
  9932 ;; This function is called by:
  9933 ;;		_RF_Disable
  9934 ;; This function uses a non-reentrant model
  9935 ;;
  9936                           
  9937                           	psect	text68
  9938  0019CA                     __ptext68:
  9939                           	opt stack 0
  9940  0019CA                     i1_TMR_Timer0:
  9941                           	opt stack 16
  9942                           
  9943                           ;incstack = 0
  9944                           ;i1TMR_Timer0@state stored from wreg
  9945  0019CA  6E01               	movwf	i1TMR_Timer0@state,c
  9946                           
  9947                           ;TIMERS.c: 89: if(state)
  9948  0019CC  5001               	movf	i1TMR_Timer0@state,w,c
  9949  0019CE  B4D8               	btfsc	status,2,c
  9950  0019D0  D002               	goto	i1l1034
  9951                           
  9952                           ;TIMERS.c: 90: {
  9953                           ;TIMERS.c: 92: T0CONbits.TMR0ON = 1;
  9954  0019D2  8ED5               	bsf	4053,7,c	;volatile
  9955                           
  9956                           ;TIMERS.c: 93: }
  9957  0019D4  0012               	return	
  9958  0019D6                     i1l1034:
  9959                           
  9960                           ;TIMERS.c: 94: else
  9961                           ;TIMERS.c: 95: {
  9962                           ;TIMERS.c: 97: T0CONbits.TMR0ON = 0;
  9963  0019D6  9ED5               	bcf	4053,7,c	;volatile
  9964  0019D8  0012               	return	
  9965  0019DA                     __end_ofi1_TMR_Timer0:
  9966                           	opt stack 0
  9967                           pclatu	equ	0xFFB
  9968                           pclath	equ	0xFFA
  9969                           tblptru	equ	0xFF8
  9970                           tblptrh	equ	0xFF7
  9971                           tblptrl	equ	0xFF6
  9972                           tablat	equ	0xFF5
  9973                           prodh	equ	0xFF4
  9974                           prodl	equ	0xFF3
  9975                           intcon	equ	0xFF2
  9976                           intcon2	equ	0xFF1
  9977                           intcon3	equ	0xFF0
  9978                           postinc0	equ	0xFEE
  9979                           fsr0h	equ	0xFEA
  9980                           fsr0l	equ	0xFE9
  9981                           wreg	equ	0xFE8
  9982                           postdec1	equ	0xFE5
  9983                           fsr1h	equ	0xFE2
  9984                           fsr1l	equ	0xFE1
  9985                           bsr	equ	0xFE0
  9986                           postinc2	equ	0xFDE
  9987                           postdec2	equ	0xFDD
  9988                           fsr2h	equ	0xFDA
  9989                           fsr2l	equ	0xFD9
  9990                           status	equ	0xFD8
  9991                           
  9992 ;; *************** function _IR_CleanBuffer *****************
  9993 ;; Defined at:
  9994 ;;		line 119 in file "IR.c"
  9995 ;; Parameters:    Size  Location     Type
  9996 ;;		None
  9997 ;; Auto vars:     Size  Location     Type
  9998 ;;		None
  9999 ;; Return value:  Size  Location     Type
 10000 ;;		None               void
 10001 ;; Registers used:
 10002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10003 ;; Tracked objects:
 10004 ;;		On entry : 0/0
 10005 ;;		On exit  : 0/0
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10008 ;;      Params:         0       0       0       0       0
 10009 ;;      Locals:         0       0       0       0       0
 10010 ;;      Temps:          0       0       0       0       0
 10011 ;;      Totals:         0       0       0       0       0
 10012 ;;Total ram usage:        0 bytes
 10013 ;; Hardware stack levels used:    1
 10014 ;; Hardware stack levels required when called:    7
 10015 ;; This function calls:
 10016 ;;		i1_MSC_CleanBufferInt
 10017 ;; This function is called by:
 10018 ;;		_low_isr
 10019 ;; This function uses a non-reentrant model
 10020 ;;
 10021                           
 10022                           	psect	text69
 10023  0018BE                     __ptext69:
 10024                           	opt stack 0
 10025  0018BE                     _IR_CleanBuffer:
 10026                           	opt stack 16
 10027                           
 10028                           ;IR.c: 121: MSC_CleanBufferInt(&IR_DataTiming,128);
 10029                           
 10030                           ;incstack = 0
 10031  0018BE  0E00               	movlw	low _IR_DataTiming
 10032  0018C0  6E01               	movwf	i1MSC_CleanBufferInt@data,c
 10033  0018C2  0E02               	movlw	high _IR_DataTiming
 10034  0018C4  6E02               	movwf	i1MSC_CleanBufferInt@data+1,c
 10035  0018C6  0E00               	movlw	0
 10036  0018C8  6E04               	movwf	i1MSC_CleanBufferInt@count+1,c
 10037  0018CA  0E80               	movlw	128
 10038  0018CC  6E03               	movwf	i1MSC_CleanBufferInt@count,c
 10039  0018CE  EC07  F009         	call	i1_MSC_CleanBufferInt	;wreg free
 10040  0018D2  0012               	return		;funcret
 10041  0018D4                     __end_of_IR_CleanBuffer:
 10042                           	opt stack 0
 10043                           pclatu	equ	0xFFB
 10044                           pclath	equ	0xFFA
 10045                           tblptru	equ	0xFF8
 10046                           tblptrh	equ	0xFF7
 10047                           tblptrl	equ	0xFF6
 10048                           tablat	equ	0xFF5
 10049                           prodh	equ	0xFF4
 10050                           prodl	equ	0xFF3
 10051                           intcon	equ	0xFF2
 10052                           intcon2	equ	0xFF1
 10053                           intcon3	equ	0xFF0
 10054                           postinc0	equ	0xFEE
 10055                           fsr0h	equ	0xFEA
 10056                           fsr0l	equ	0xFE9
 10057                           wreg	equ	0xFE8
 10058                           postdec1	equ	0xFE5
 10059                           fsr1h	equ	0xFE2
 10060                           fsr1l	equ	0xFE1
 10061                           bsr	equ	0xFE0
 10062                           postinc2	equ	0xFDE
 10063                           postdec2	equ	0xFDD
 10064                           fsr2h	equ	0xFDA
 10065                           fsr2l	equ	0xFD9
 10066                           status	equ	0xFD8
 10067                           
 10068 ;; *************** function _IR_CheckCode *****************
 10069 ;; Defined at:
 10070 ;;		line 168 in file "IR.c"
 10071 ;; Parameters:    Size  Location     Type
 10072 ;;		None
 10073 ;; Auto vars:     Size  Location     Type
 10074 ;;  High            3   46[COMRAM] unsigned char 
 10075 ;;  Low             3   43[COMRAM] unsigned char 
 10076 ;;  i               1   49[COMRAM] unsigned char 
 10077 ;; Return value:  Size  Location     Type
 10078 ;;                  1    wreg      unsigned char 
 10079 ;; Registers used:
 10080 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10081 ;; Tracked objects:
 10082 ;;		On entry : 0/0
 10083 ;;		On exit  : 0/0
 10084 ;;		Unchanged: 0/0
 10085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10086 ;;      Params:         0       0       0       0       0
 10087 ;;      Locals:         7       0       0       0       0
 10088 ;;      Temps:          2       0       0       0       0
 10089 ;;      Totals:         9       0       0       0       0
 10090 ;;Total ram usage:        9 bytes
 10091 ;; Hardware stack levels used:    1
 10092 ;; Hardware stack levels required when called:   10
 10093 ;; This function calls:
 10094 ;;		_FSH_Write_IR_RF
 10095 ;;		i1___ftge
 10096 ;;		i1___ftmul
 10097 ;;		i1___lwtoft
 10098 ;; This function is called by:
 10099 ;;		_low_isr
 10100 ;; This function uses a non-reentrant model
 10101 ;;
 10102                           
 10103                           	psect	text70
 10104  002D2E                     __ptext70:
 10105                           	opt stack 0
 10106  002D2E                     _IR_CheckCode:
 10107                           	opt stack 13
 10108                           
 10109                           ;IR.c: 170: unsigned char i;
 10110                           ;IR.c: 171: double Low = 0.0;
 10111                           
 10112                           ;incstack = 0
 10113  002D2E  0E00               	movlw	0
 10114  002D30  6E2C               	movwf	IR_CheckCode@Low,c
 10115  002D32  0E00               	movlw	0
 10116  002D34  6E2D               	movwf	IR_CheckCode@Low+1,c
 10117  002D36  0E00               	movlw	0
 10118  002D38  6E2E               	movwf	IR_CheckCode@Low+2,c
 10119                           
 10120                           ;IR.c: 172: double High = 0.0;
 10121  002D3A  0E00               	movlw	0
 10122  002D3C  6E2F               	movwf	IR_CheckCode@High,c
 10123  002D3E  0E00               	movlw	0
 10124  002D40  6E30               	movwf	IR_CheckCode@High+1,c
 10125  002D42  0E00               	movlw	0
 10126  002D44  6E31               	movwf	IR_CheckCode@High+2,c
 10127                           
 10128                           ;IR.c: 174: if(System_State == 8)
 10129  002D46  0E08               	movlw	8
 10130  002D48  0100               	movlb	0	; () banked
 10131  002D4A  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
 10132  002D4C  A4D8               	btfss	status,2,c
 10133  002D4E  D161               	goto	i1l6764
 10134                           
 10135                           ; BSR set to: 0
 10136                           ;IR.c: 175: {
 10137                           ;IR.c: 176: for(i=0; i<IR_CodeSize;i++)
 10138  002D50  0E00               	movlw	0
 10139  002D52  6E32               	movwf	IR_CheckCode@i,c
 10140  002D54  D158               	goto	i1l6756
 10141  002D56                     i1l6734:
 10142                           
 10143                           ;IR.c: 177: {
 10144                           ;IR.c: 178: if(IR_SavedTiming[i] > 4000)
 10145  002D56  5032               	movf	IR_CheckCode@i,w,c
 10146  002D58  0D02               	mullw	2
 10147  002D5A  0E00               	movlw	0
 10148  002D5C  24F3               	addwf	prodl,w,c
 10149  002D5E  6EF6               	movwf	tblptrl,c
 10150  002D60  0E24               	movlw	36
 10151  002D62  20F4               	addwfc	prodh,w,c
 10152  002D64  6EF7               	movwf	tblptrh,c
 10153  002D66  6AF8               	clrf	tblptru,c
 10154  002D68  0E00               	movlw	0
 10155  002D6A  22F8               	addwfc	tblptru,f,c
 10156  002D6C  0009               	tblrd		*+
 10157  002D6E  0EA1               	movlw	161
 10158  002D70  5EF5               	subwf	tablat,f,c
 10159  002D72  0009               	tblrd		*+
 10160  002D74  0E0F               	movlw	15
 10161  002D76  5AF5               	subwfb	tablat,f,c
 10162  002D78  A0D8               	btfss	status,0,c
 10163  002D7A  D049               	goto	i1l6738
 10164                           
 10165                           ;IR.c: 179: {
 10166                           ;IR.c: 180: Low = (double)IR_SavedTiming[i] * (1.0 - 0.3);
 10167  002D7C  5032               	movf	IR_CheckCode@i,w,c
 10168  002D7E  0D02               	mullw	2
 10169  002D80  0E00               	movlw	0
 10170  002D82  24F3               	addwf	prodl,w,c
 10171  002D84  6EF6               	movwf	tblptrl,c
 10172  002D86  0E24               	movlw	36
 10173  002D88  20F4               	addwfc	prodh,w,c
 10174  002D8A  6EF7               	movwf	tblptrh,c
 10175  002D8C  6AF8               	clrf	tblptru,c
 10176  002D8E  0E00               	movlw	0
 10177  002D90  22F8               	addwfc	tblptru,f,c
 10178  002D92  0009               	tblrd		*+
 10179  002D94  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10180  002D98  000A               	tblrd		*-
 10181  002D9A  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10182  002D9E  EC2E  F00B         	call	i1___lwtoft	;wreg free
 10183  002DA2  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10184  002DA6  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10185  002DAA  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10186  002DAE  0E33               	movlw	51
 10187  002DB0  6E1E               	movwf	i1___ftmul@f2,c
 10188  002DB2  0E33               	movlw	51
 10189  002DB4  6E1F               	movwf	i1___ftmul@f2+1,c
 10190  002DB6  0E3F               	movlw	63
 10191  002DB8  6E20               	movwf	i1___ftmul@f2+2,c
 10192  002DBA  ECCF  F001         	call	i1___ftmul	;wreg free
 10193  002DBE  C01B  F02C         	movff	?i1___ftmul,IR_CheckCode@Low
 10194  002DC2  C01C  F02D         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10195  002DC6  C01D  F02E         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10196                           
 10197                           ;IR.c: 181: High = (double)IR_SavedTiming[i] * (1.0 + 0.3);
 10198  002DCA  5032               	movf	IR_CheckCode@i,w,c
 10199  002DCC  0D02               	mullw	2
 10200  002DCE  0E00               	movlw	0
 10201  002DD0  24F3               	addwf	prodl,w,c
 10202  002DD2  6EF6               	movwf	tblptrl,c
 10203  002DD4  0E24               	movlw	36
 10204  002DD6  20F4               	addwfc	prodh,w,c
 10205  002DD8  6EF7               	movwf	tblptrh,c
 10206  002DDA  6AF8               	clrf	tblptru,c
 10207  002DDC  0E00               	movlw	0
 10208  002DDE  22F8               	addwfc	tblptru,f,c
 10209  002DE0  0009               	tblrd		*+
 10210  002DE2  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10211  002DE6  000A               	tblrd		*-
 10212  002DE8  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10213  002DEC  EC2E  F00B         	call	i1___lwtoft	;wreg free
 10214  002DF0  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10215  002DF4  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10216  002DF8  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10217  002DFC  0E66               	movlw	102
 10218  002DFE  6E1E               	movwf	i1___ftmul@f2,c
 10219  002E00  0EA6               	movlw	166
 10220  002E02  6E1F               	movwf	i1___ftmul@f2+1,c
 10221  002E04  0E3F               	movlw	63
 10222  002E06  6E20               	movwf	i1___ftmul@f2+2,c
 10223  002E08  ECCF  F001         	call	i1___ftmul	;wreg free
 10224  002E0C  D0B7               	goto	L4
 10225  002E0E                     i1l6738:
 10226                           
 10227                           ;IR.c: 183: else if(IR_SavedTiming[i] <= 4000 && IR_SavedTiming[i] > 1000)
 10228  002E0E  5032               	movf	IR_CheckCode@i,w,c
 10229  002E10  0D02               	mullw	2
 10230  002E12  0E00               	movlw	0
 10231  002E14  24F3               	addwf	prodl,w,c
 10232  002E16  6EF6               	movwf	tblptrl,c
 10233  002E18  0E24               	movlw	36
 10234  002E1A  20F4               	addwfc	prodh,w,c
 10235  002E1C  6EF7               	movwf	tblptrh,c
 10236  002E1E  6AF8               	clrf	tblptru,c
 10237  002E20  0E00               	movlw	0
 10238  002E22  22F8               	addwfc	tblptru,f,c
 10239  002E24  0009               	tblrd		*+
 10240  002E26  0EA1               	movlw	161
 10241  002E28  5EF5               	subwf	tablat,f,c
 10242  002E2A  0009               	tblrd		*+
 10243  002E2C  0E0F               	movlw	15
 10244  002E2E  5AF5               	subwfb	tablat,f,c
 10245  002E30  B0D8               	btfsc	status,0,c
 10246  002E32  D05C               	goto	i1l6744
 10247  002E34  5032               	movf	IR_CheckCode@i,w,c
 10248  002E36  0D02               	mullw	2
 10249  002E38  0E00               	movlw	0
 10250  002E3A  24F3               	addwf	prodl,w,c
 10251  002E3C  6EF6               	movwf	tblptrl,c
 10252  002E3E  0E24               	movlw	36
 10253  002E40  20F4               	addwfc	prodh,w,c
 10254  002E42  6EF7               	movwf	tblptrh,c
 10255  002E44  6AF8               	clrf	tblptru,c
 10256  002E46  0E00               	movlw	0
 10257  002E48  22F8               	addwfc	tblptru,f,c
 10258  002E4A  0009               	tblrd		*+
 10259  002E4C  0EE9               	movlw	233
 10260  002E4E  5EF5               	subwf	tablat,f,c
 10261  002E50  0009               	tblrd		*+
 10262  002E52  0E03               	movlw	3
 10263  002E54  5AF5               	subwfb	tablat,f,c
 10264  002E56  A0D8               	btfss	status,0,c
 10265  002E58  D049               	goto	i1l6744
 10266                           
 10267                           ;IR.c: 184: {
 10268                           ;IR.c: 185: Low = (double)IR_SavedTiming[i] * (1.0 - 0.75);
 10269  002E5A  5032               	movf	IR_CheckCode@i,w,c
 10270  002E5C  0D02               	mullw	2
 10271  002E5E  0E00               	movlw	0
 10272  002E60  24F3               	addwf	prodl,w,c
 10273  002E62  6EF6               	movwf	tblptrl,c
 10274  002E64  0E24               	movlw	36
 10275  002E66  20F4               	addwfc	prodh,w,c
 10276  002E68  6EF7               	movwf	tblptrh,c
 10277  002E6A  6AF8               	clrf	tblptru,c
 10278  002E6C  0E00               	movlw	0
 10279  002E6E  22F8               	addwfc	tblptru,f,c
 10280  002E70  0009               	tblrd		*+
 10281  002E72  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10282  002E76  000A               	tblrd		*-
 10283  002E78  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10284  002E7C  EC2E  F00B         	call	i1___lwtoft	;wreg free
 10285  002E80  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10286  002E84  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10287  002E88  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10288  002E8C  0E00               	movlw	0
 10289  002E8E  6E1E               	movwf	i1___ftmul@f2,c
 10290  002E90  0E80               	movlw	128
 10291  002E92  6E1F               	movwf	i1___ftmul@f2+1,c
 10292  002E94  0E3E               	movlw	62
 10293  002E96  6E20               	movwf	i1___ftmul@f2+2,c
 10294  002E98  ECCF  F001         	call	i1___ftmul	;wreg free
 10295  002E9C  C01B  F02C         	movff	?i1___ftmul,IR_CheckCode@Low
 10296  002EA0  C01C  F02D         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10297  002EA4  C01D  F02E         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10298                           
 10299                           ;IR.c: 186: High = (double)IR_SavedTiming[i] * (1.0 + 0.75);
 10300  002EA8  5032               	movf	IR_CheckCode@i,w,c
 10301  002EAA  0D02               	mullw	2
 10302  002EAC  0E00               	movlw	0
 10303  002EAE  24F3               	addwf	prodl,w,c
 10304  002EB0  6EF6               	movwf	tblptrl,c
 10305  002EB2  0E24               	movlw	36
 10306  002EB4  20F4               	addwfc	prodh,w,c
 10307  002EB6  6EF7               	movwf	tblptrh,c
 10308  002EB8  6AF8               	clrf	tblptru,c
 10309  002EBA  0E00               	movlw	0
 10310  002EBC  22F8               	addwfc	tblptru,f,c
 10311  002EBE  0009               	tblrd		*+
 10312  002EC0  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10313  002EC4  000A               	tblrd		*-
 10314  002EC6  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10315  002ECA  EC2E  F00B         	call	i1___lwtoft	;wreg free
 10316  002ECE  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10317  002ED2  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10318  002ED6  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10319  002EDA  0E00               	movlw	0
 10320  002EDC  6E1E               	movwf	i1___ftmul@f2,c
 10321  002EDE  0EE0               	movlw	224
 10322  002EE0  6E1F               	movwf	i1___ftmul@f2+1,c
 10323  002EE2  0E3F               	movlw	63
 10324  002EE4  6E20               	movwf	i1___ftmul@f2+2,c
 10325  002EE6  ECCF  F001         	call	i1___ftmul	;wreg free
 10326  002EEA  D048               	goto	L4
 10327  002EEC                     i1l6744:
 10328                           
 10329                           ;IR.c: 188: else
 10330                           ;IR.c: 189: {
 10331                           ;IR.c: 190: Low = (double)IR_SavedTiming[i] * (1.0 - 1.1);
 10332  002EEC  5032               	movf	IR_CheckCode@i,w,c
 10333  002EEE  0D02               	mullw	2
 10334  002EF0  0E00               	movlw	0
 10335  002EF2  24F3               	addwf	prodl,w,c
 10336  002EF4  6EF6               	movwf	tblptrl,c
 10337  002EF6  0E24               	movlw	36
 10338  002EF8  20F4               	addwfc	prodh,w,c
 10339  002EFA  6EF7               	movwf	tblptrh,c
 10340  002EFC  6AF8               	clrf	tblptru,c
 10341  002EFE  0E00               	movlw	0
 10342  002F00  22F8               	addwfc	tblptru,f,c
 10343  002F02  0009               	tblrd		*+
 10344  002F04  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10345  002F08  000A               	tblrd		*-
 10346  002F0A  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10347  002F0E  EC2E  F00B         	call	i1___lwtoft	;wreg free
 10348  002F12  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10349  002F16  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10350  002F1A  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10351  002F1E  0ECD               	movlw	205
 10352  002F20  6E1E               	movwf	i1___ftmul@f2,c
 10353  002F22  0ECC               	movlw	204
 10354  002F24  6E1F               	movwf	i1___ftmul@f2+1,c
 10355  002F26  0EBD               	movlw	189
 10356  002F28  6E20               	movwf	i1___ftmul@f2+2,c
 10357  002F2A  ECCF  F001         	call	i1___ftmul	;wreg free
 10358  002F2E  C01B  F02C         	movff	?i1___ftmul,IR_CheckCode@Low
 10359  002F32  C01C  F02D         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10360  002F36  C01D  F02E         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10361                           
 10362                           ;IR.c: 191: High = (double)IR_SavedTiming[i] * (1.0 + 1.1);
 10363  002F3A  5032               	movf	IR_CheckCode@i,w,c
 10364  002F3C  0D02               	mullw	2
 10365  002F3E  0E00               	movlw	0
 10366  002F40  24F3               	addwf	prodl,w,c
 10367  002F42  6EF6               	movwf	tblptrl,c
 10368  002F44  0E24               	movlw	36
 10369  002F46  20F4               	addwfc	prodh,w,c
 10370  002F48  6EF7               	movwf	tblptrh,c
 10371  002F4A  6AF8               	clrf	tblptru,c
 10372  002F4C  0E00               	movlw	0
 10373  002F4E  22F8               	addwfc	tblptru,f,c
 10374  002F50  0009               	tblrd		*+
 10375  002F52  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10376  002F56  000A               	tblrd		*-
 10377  002F58  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10378  002F5C  EC2E  F00B         	call	i1___lwtoft	;wreg free
 10379  002F60  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10380  002F64  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10381  002F68  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10382  002F6C  0E66               	movlw	102
 10383  002F6E  6E1E               	movwf	i1___ftmul@f2,c
 10384  002F70  0E06               	movlw	6
 10385  002F72  6E1F               	movwf	i1___ftmul@f2+1,c
 10386  002F74  0E40               	movlw	64
 10387  002F76  6E20               	movwf	i1___ftmul@f2+2,c
 10388  002F78  ECCF  F001         	call	i1___ftmul	;wreg free
 10389  002F7C                     L4:
 10390  002F7C  C01B  F02F         	movff	?i1___ftmul,IR_CheckCode@High
 10391  002F80  C01C  F030         	movff	?i1___ftmul+1,IR_CheckCode@High+1
 10392  002F84  C01D  F031         	movff	?i1___ftmul+2,IR_CheckCode@High+2
 10393                           
 10394                           ;IR.c: 192: }
 10395                           ;IR.c: 194: if((double)IR_DataTiming[i] < Low || (double)IR_DataTiming[i] > High )
 10396  002F88  5032               	movf	IR_CheckCode@i,w,c
 10397  002F8A  0D02               	mullw	2
 10398  002F8C  0E00               	movlw	low _IR_DataTiming
 10399  002F8E  24F3               	addwf	prodl,w,c
 10400  002F90  6ED9               	movwf	fsr2l,c
 10401  002F92  0E02               	movlw	high _IR_DataTiming
 10402  002F94  20F4               	addwfc	prodh,w,c
 10403  002F96  6EDA               	movwf	fsr2h,c
 10404  002F98  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10405  002F9C  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10406  002FA0  EC2E  F00B         	call	i1___lwtoft	;wreg free
 10407  002FA4  C009  F00C         	movff	?i1___lwtoft,i1___ftge@ff1
 10408  002FA8  C00A  F00D         	movff	?i1___lwtoft+1,i1___ftge@ff1+1
 10409  002FAC  C00B  F00E         	movff	?i1___lwtoft+2,i1___ftge@ff1+2
 10410  002FB0  C02C  F00F         	movff	IR_CheckCode@Low,i1___ftge@ff2
 10411  002FB4  C02D  F010         	movff	IR_CheckCode@Low+1,i1___ftge@ff2+1
 10412  002FB8  C02E  F011         	movff	IR_CheckCode@Low+2,i1___ftge@ff2+2
 10413  002FBC  EC8A  F006         	call	i1___ftge	;wreg free
 10414  002FC0  A0D8               	btfss	status,0,c
 10415  002FC2  D01E               	goto	i1l6750
 10416  002FC4  C02F  F00C         	movff	IR_CheckCode@High,i1___ftge@ff1
 10417  002FC8  C030  F00D         	movff	IR_CheckCode@High+1,i1___ftge@ff1+1
 10418  002FCC  C031  F00E         	movff	IR_CheckCode@High+2,i1___ftge@ff1+2
 10419  002FD0  5032               	movf	IR_CheckCode@i,w,c
 10420  002FD2  0D02               	mullw	2
 10421  002FD4  0E00               	movlw	low _IR_DataTiming
 10422  002FD6  24F3               	addwf	prodl,w,c
 10423  002FD8  6ED9               	movwf	fsr2l,c
 10424  002FDA  0E02               	movlw	high _IR_DataTiming
 10425  002FDC  20F4               	addwfc	prodh,w,c
 10426  002FDE  6EDA               	movwf	fsr2h,c
 10427  002FE0  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10428  002FE4  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10429  002FE8  EC2E  F00B         	call	i1___lwtoft	;wreg free
 10430  002FEC  C009  F00F         	movff	?i1___lwtoft,i1___ftge@ff2
 10431  002FF0  C00A  F010         	movff	?i1___lwtoft+1,i1___ftge@ff2+1
 10432  002FF4  C00B  F011         	movff	?i1___lwtoft+2,i1___ftge@ff2+2
 10433  002FF8  EC8A  F006         	call	i1___ftge	;wreg free
 10434  002FFC  B0D8               	btfsc	status,0,c
 10435  002FFE  D002               	goto	i1l6754
 10436  003000                     i1l6750:
 10437                           
 10438                           ;IR.c: 195: {
 10439                           ;IR.c: 196: return 0;
 10440  003000  0E00               	movlw	0
 10441  003002  0012               	return	
 10442  003004                     i1l6754:
 10443  003004  2A32               	incf	IR_CheckCode@i,f,c
 10444  003006                     i1l6756:
 10445  003006  505C               	movf	_IR_CodeSize,w,c
 10446  003008  5C32               	subwf	IR_CheckCode@i,w,c
 10447  00300A  A0D8               	btfss	status,0,c
 10448  00300C  D6A4               	goto	i1l6734
 10449                           
 10450                           ;IR.c: 197: }
 10451                           ;IR.c: 198: }
 10452                           ;IR.c: 199: return 1;
 10453  00300E  0E01               	movlw	1
 10454                           
 10455                           ;IR.c: 200: }
 10456  003010  0012               	return	
 10457  003012                     i1l6764:
 10458                           
 10459                           ;IR.c: 201: else
 10460                           ;IR.c: 202: {
 10461                           ;IR.c: 203: if(IR_DataPlace >= 40)
 10462  003012  0E27               	movlw	39
 10463  003014  645D               	cpfsgt	_IR_DataPlace,c
 10464  003016  D072               	goto	i1l6806
 10465                           
 10466                           ;IR.c: 204: {
 10467                           ;IR.c: 205: for(i=0;i<IR_DataPlace;i++)
 10468  003018  0E00               	movlw	0
 10469  00301A  6E32               	movwf	IR_CheckCode@i,c
 10470  00301C  D047               	goto	i1l6786
 10471  00301E                     i1l6768:
 10472                           
 10473                           ;IR.c: 206: {
 10474                           ;IR.c: 207: if(IR_DataTiming[i] < 40)
 10475  00301E  5032               	movf	IR_CheckCode@i,w,c
 10476  003020  0D02               	mullw	2
 10477  003022  0E00               	movlw	low _IR_DataTiming
 10478  003024  24F3               	addwf	prodl,w,c
 10479  003026  6ED9               	movwf	fsr2l,c
 10480  003028  0E02               	movlw	high _IR_DataTiming
 10481  00302A  20F4               	addwfc	prodh,w,c
 10482  00302C  6EDA               	movwf	fsr2h,c
 10483  00302E  0E01               	movlw	1
 10484  003030  50DB               	movf	plusw2,w,c
 10485  003032  E106               	bnz	i1l6776
 10486  003034  0E28               	movlw	40
 10487  003036  5CDE               	subwf	postinc2,w,c
 10488  003038  B0D8               	btfsc	status,0,c
 10489  00303A  D002               	goto	i1l6776
 10490                           
 10491                           ;IR.c: 208: {
 10492                           ;IR.c: 210: return 0;
 10493  00303C  0E00               	movlw	0
 10494  00303E  0012               	return	
 10495  003040                     i1l6776:
 10496                           
 10497                           ;IR.c: 212: else if(IR_DataTiming[i] < 200)
 10498  003040  5032               	movf	IR_CheckCode@i,w,c
 10499  003042  0D02               	mullw	2
 10500  003044  0E00               	movlw	low _IR_DataTiming
 10501  003046  24F3               	addwf	prodl,w,c
 10502  003048  6ED9               	movwf	fsr2l,c
 10503  00304A  0E02               	movlw	high _IR_DataTiming
 10504  00304C  20F4               	addwfc	prodh,w,c
 10505  00304E  6EDA               	movwf	fsr2h,c
 10506  003050  0E01               	movlw	1
 10507  003052  50DB               	movf	plusw2,w,c
 10508  003054  E110               	bnz	i1l6780
 10509  003056  0EC8               	movlw	200
 10510  003058  5CDE               	subwf	postinc2,w,c
 10511  00305A  B0D8               	btfsc	status,0,c
 10512  00305C  D00C               	goto	i1l6780
 10513                           
 10514                           ;IR.c: 213: {
 10515                           ;IR.c: 214: IR_DataTiming[i] +=350;
 10516  00305E  5032               	movf	IR_CheckCode@i,w,c
 10517  003060  0D02               	mullw	2
 10518  003062  0E00               	movlw	low _IR_DataTiming
 10519  003064  24F3               	addwf	prodl,w,c
 10520  003066  6ED9               	movwf	fsr2l,c
 10521  003068  0E02               	movlw	high _IR_DataTiming
 10522  00306A  20F4               	addwfc	prodh,w,c
 10523  00306C  6EDA               	movwf	fsr2h,c
 10524  00306E  0E5E               	movlw	94
 10525  003070  26DE               	addwf	postinc2,f,c
 10526  003072  0E01               	movlw	1
 10527  003074  D019               	goto	L5
 10528  003076                     i1l6780:
 10529                           
 10530                           ;IR.c: 216: else if(IR_DataTiming[i] < 320)
 10531  003076  5032               	movf	IR_CheckCode@i,w,c
 10532  003078  0D02               	mullw	2
 10533  00307A  0E00               	movlw	low _IR_DataTiming
 10534  00307C  24F3               	addwf	prodl,w,c
 10535  00307E  6ED9               	movwf	fsr2l,c
 10536  003080  0E02               	movlw	high _IR_DataTiming
 10537  003082  20F4               	addwfc	prodh,w,c
 10538  003084  6EDA               	movwf	fsr2h,c
 10539  003086  0E40               	movlw	64
 10540  003088  5CDE               	subwf	postinc2,w,c
 10541  00308A  0E01               	movlw	1
 10542  00308C  58DE               	subwfb	postinc2,w,c
 10543  00308E  B0D8               	btfsc	status,0,c
 10544  003090  D00C               	goto	i1l6784
 10545                           
 10546                           ;IR.c: 217: {
 10547                           ;IR.c: 218: IR_DataTiming[i] +=150;
 10548  003092  5032               	movf	IR_CheckCode@i,w,c
 10549  003094  0D02               	mullw	2
 10550  003096  0E00               	movlw	low _IR_DataTiming
 10551  003098  24F3               	addwf	prodl,w,c
 10552  00309A  6ED9               	movwf	fsr2l,c
 10553  00309C  0E02               	movlw	high _IR_DataTiming
 10554  00309E  20F4               	addwfc	prodh,w,c
 10555  0030A0  6EDA               	movwf	fsr2h,c
 10556  0030A2  0E96               	movlw	150
 10557  0030A4  26DE               	addwf	postinc2,f,c
 10558  0030A6  0E00               	movlw	0
 10559  0030A8                     L5:
 10560  0030A8  22DD               	addwfc	postdec2,f,c
 10561  0030AA                     i1l6784:
 10562  0030AA  2A32               	incf	IR_CheckCode@i,f,c
 10563  0030AC                     i1l6786:
 10564  0030AC  505D               	movf	_IR_DataPlace,w,c
 10565  0030AE  5C32               	subwf	IR_CheckCode@i,w,c
 10566  0030B0  A0D8               	btfss	status,0,c
 10567  0030B2  D7B5               	goto	i1l6768
 10568                           
 10569                           ;IR.c: 219: }
 10570                           ;IR.c: 220: }
 10571                           ;IR.c: 221: for(i=IR_DataPlace;i<128;i++)
 10572  0030B4  C05D  F032         	movff	_IR_DataPlace,IR_CheckCode@i
 10573  0030B8                     i1l6788:
 10574  0030B8  0E7F               	movlw	127
 10575  0030BA  6432               	cpfsgt	IR_CheckCode@i,c
 10576  0030BC  D001               	goto	i1l6792
 10577  0030BE  D00E               	goto	i1l6798
 10578  0030C0                     i1l6792:
 10579                           
 10580                           ;IR.c: 222: {
 10581                           ;IR.c: 224: IR_DataTiming[i] = 0;
 10582  0030C0  5032               	movf	IR_CheckCode@i,w,c
 10583  0030C2  0D02               	mullw	2
 10584  0030C4  0E00               	movlw	low _IR_DataTiming
 10585  0030C6  24F3               	addwf	prodl,w,c
 10586  0030C8  6ED9               	movwf	fsr2l,c
 10587  0030CA  0E02               	movlw	high _IR_DataTiming
 10588  0030CC  20F4               	addwfc	prodh,w,c
 10589  0030CE  6EDA               	movwf	fsr2h,c
 10590  0030D0  0E00               	movlw	0
 10591  0030D2  6EDE               	movwf	postinc2,c
 10592  0030D4  0E00               	movlw	0
 10593  0030D6  6EDD               	movwf	postdec2,c
 10594  0030D8  2A32               	incf	IR_CheckCode@i,f,c
 10595  0030DA  D7EE               	goto	i1l6788
 10596  0030DC                     i1l6798:
 10597                           
 10598                           ;IR.c: 225: }
 10599                           ;IR.c: 228: Flash_Status = FSH_Write_IR_RF();
 10600  0030DC  EC80  F018         	call	_FSH_Write_IR_RF	;wreg free
 10601  0030E0  0100               	movlb	0	; () banked
 10602  0030E2  6FC2               	movwf	_Flash_Status& (0+255),b
 10603                           
 10604                           ; BSR set to: 0
 10605                           ;IR.c: 229: if(Flash_Status)
 10606  0030E4  0100               	movlb	0	; () banked
 10607  0030E6  51C2               	movf	_Flash_Status& (0+255),w,b
 10608  0030E8  B4D8               	btfsc	status,2,c
 10609  0030EA  D005               	goto	i1l562
 10610                           
 10611                           ; BSR set to: 0
 10612                           ;IR.c: 230: {
 10613                           ;IR.c: 231: IR_CodeSize = IR_DataPlace;
 10614  0030EC  C05D  F05C         	movff	_IR_DataPlace,_IR_CodeSize
 10615                           
 10616                           ; BSR set to: 0
 10617                           ;IR.c: 232: IR_Saved = 90;
 10618  0030F0  0E5A               	movlw	90
 10619  0030F2  0100               	movlb	0	; () banked
 10620  0030F4  6FCD               	movwf	_IR_Saved& (0+255),b
 10621  0030F6                     i1l562:
 10622                           
 10623                           ; BSR set to: 0
 10624                           ;IR.c: 233: }
 10625                           ;IR.c: 234: System_State = 8;
 10626  0030F6  0E08               	movlw	8
 10627  0030F8  0100               	movlb	0	; () banked
 10628  0030FA  6FCF               	movwf	_System_State& (0+255),b	;volatile
 10629  0030FC                     i1l6806:
 10630                           
 10631                           ;IR.c: 235: }
 10632                           ;IR.c: 236: return 0;
 10633  0030FC  0E00               	movlw	0
 10634  0030FE  0012               	return	
 10635  003100                     __end_of_IR_CheckCode:
 10636                           	opt stack 0
 10637                           pclatu	equ	0xFFB
 10638                           pclath	equ	0xFFA
 10639                           tblptru	equ	0xFF8
 10640                           tblptrh	equ	0xFF7
 10641                           tblptrl	equ	0xFF6
 10642                           tablat	equ	0xFF5
 10643                           prodh	equ	0xFF4
 10644                           prodl	equ	0xFF3
 10645                           intcon	equ	0xFF2
 10646                           intcon2	equ	0xFF1
 10647                           intcon3	equ	0xFF0
 10648                           postinc0	equ	0xFEE
 10649                           fsr0h	equ	0xFEA
 10650                           fsr0l	equ	0xFE9
 10651                           wreg	equ	0xFE8
 10652                           postdec1	equ	0xFE5
 10653                           fsr1h	equ	0xFE2
 10654                           fsr1l	equ	0xFE1
 10655                           bsr	equ	0xFE0
 10656                           postinc2	equ	0xFDE
 10657                           postdec2	equ	0xFDD
 10658                           plusw2	equ	0xFDB
 10659                           fsr2h	equ	0xFDA
 10660                           fsr2l	equ	0xFD9
 10661                           status	equ	0xFD8
 10662                           
 10663 ;; *************** function i1___ftge *****************
 10664 ;; Defined at:
 10665 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
 10666 ;; Parameters:    Size  Location     Type
 10667 ;;  ff1             3   11[COMRAM] float 
 10668 ;;  ff2             3   14[COMRAM] float 
 10669 ;; Auto vars:     Size  Location     Type
 10670 ;;		None
 10671 ;; Return value:  Size  Location     Type
 10672 ;;		None               void
 10673 ;; Registers used:
 10674 ;;		wreg, status,2, status,0
 10675 ;; Tracked objects:
 10676 ;;		On entry : 0/0
 10677 ;;		On exit  : 0/0
 10678 ;;		Unchanged: 0/0
 10679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10680 ;;      Params:         6       0       0       0       0
 10681 ;;      Locals:         0       0       0       0       0
 10682 ;;      Temps:          3       0       0       0       0
 10683 ;;      Totals:         9       0       0       0       0
 10684 ;;Total ram usage:        9 bytes
 10685 ;; Hardware stack levels used:    1
 10686 ;; Hardware stack levels required when called:    6
 10687 ;; This function calls:
 10688 ;;		Nothing
 10689 ;; This function is called by:
 10690 ;;		_IR_CheckCode
 10691 ;; This function uses a non-reentrant model
 10692 ;;
 10693                           
 10694                           	psect	text71
 10695  000D14                     __ptext71:
 10696                           	opt stack 0
 10697  000D14                     i1___ftge:
 10698                           	opt stack 16
 10699                           
 10700                           ;incstack = 0
 10701  000D14  AE0E               	btfss	i1___ftge@ff1+2,7,c
 10702  000D16  D016               	goto	i1l6370
 10703  000D18  C00C  F012         	movff	i1___ftge@ff1,??i1___ftge
 10704  000D1C  C00D  F013         	movff	i1___ftge@ff1+1,??i1___ftge+1
 10705  000D20  C00E  F014         	movff	i1___ftge@ff1+2,??i1___ftge+2
 10706  000D24  1E12               	comf	??i1___ftge,f,c
 10707  000D26  1E13               	comf	??i1___ftge+1,f,c
 10708  000D28  1E14               	comf	??i1___ftge+2,f,c
 10709  000D2A  2A12               	incf	??i1___ftge,f,c
 10710  000D2C  0E00               	movlw	0
 10711  000D2E  2213               	addwfc	??i1___ftge+1,f,c
 10712  000D30  2214               	addwfc	??i1___ftge+2,f,c
 10713  000D32  0E00               	movlw	0
 10714  000D34  2412               	addwf	??i1___ftge,w,c
 10715  000D36  6E0C               	movwf	i1___ftge@ff1,c
 10716  000D38  0E00               	movlw	0
 10717  000D3A  2013               	addwfc	??i1___ftge+1,w,c
 10718  000D3C  6E0D               	movwf	i1___ftge@ff1+1,c
 10719  000D3E  0E80               	movlw	128
 10720  000D40  2014               	addwfc	??i1___ftge+2,w,c
 10721  000D42  6E0E               	movwf	i1___ftge@ff1+2,c
 10722  000D44                     i1l6370:
 10723  000D44  AE11               	btfss	i1___ftge@ff2+2,7,c
 10724  000D46  D016               	goto	i1l6374
 10725  000D48  C00F  F012         	movff	i1___ftge@ff2,??i1___ftge
 10726  000D4C  C010  F013         	movff	i1___ftge@ff2+1,??i1___ftge+1
 10727  000D50  C011  F014         	movff	i1___ftge@ff2+2,??i1___ftge+2
 10728  000D54  1E12               	comf	??i1___ftge,f,c
 10729  000D56  1E13               	comf	??i1___ftge+1,f,c
 10730  000D58  1E14               	comf	??i1___ftge+2,f,c
 10731  000D5A  2A12               	incf	??i1___ftge,f,c
 10732  000D5C  0E00               	movlw	0
 10733  000D5E  2213               	addwfc	??i1___ftge+1,f,c
 10734  000D60  2214               	addwfc	??i1___ftge+2,f,c
 10735  000D62  0E00               	movlw	0
 10736  000D64  2412               	addwf	??i1___ftge,w,c
 10737  000D66  6E0F               	movwf	i1___ftge@ff2,c
 10738  000D68  0E00               	movlw	0
 10739  000D6A  2013               	addwfc	??i1___ftge+1,w,c
 10740  000D6C  6E10               	movwf	i1___ftge@ff2+1,c
 10741  000D6E  0E80               	movlw	128
 10742  000D70  2014               	addwfc	??i1___ftge+2,w,c
 10743  000D72  6E11               	movwf	i1___ftge@ff2+2,c
 10744  000D74                     i1l6374:
 10745  000D74  0E00               	movlw	0
 10746  000D76  1A0C               	xorwf	i1___ftge@ff1,f,c
 10747  000D78  0E00               	movlw	0
 10748  000D7A  1A0D               	xorwf	i1___ftge@ff1+1,f,c
 10749  000D7C  0E80               	movlw	128
 10750  000D7E  1A0E               	xorwf	i1___ftge@ff1+2,f,c
 10751  000D80  0E00               	movlw	0
 10752  000D82  1A0F               	xorwf	i1___ftge@ff2,f,c
 10753  000D84  0E00               	movlw	0
 10754  000D86  1A10               	xorwf	i1___ftge@ff2+1,f,c
 10755  000D88  0E80               	movlw	128
 10756  000D8A  1A11               	xorwf	i1___ftge@ff2+2,f,c
 10757  000D8C  500F               	movf	i1___ftge@ff2,w,c
 10758  000D8E  5C0C               	subwf	i1___ftge@ff1,w,c
 10759  000D90  5010               	movf	i1___ftge@ff2+1,w,c
 10760  000D92  580D               	subwfb	i1___ftge@ff1+1,w,c
 10761  000D94  5011               	movf	i1___ftge@ff2+2,w,c
 10762  000D96  580E               	subwfb	i1___ftge@ff1+2,w,c
 10763  000D98  B0D8               	btfsc	status,0,c
 10764  000D9A  D002               	goto	i1l6380
 10765  000D9C  90D8               	bcf	status,0,c
 10766  000D9E  0012               	return	
 10767  000DA0                     i1l6380:
 10768  000DA0  80D8               	bsf	status,0,c
 10769  000DA2  0012               	return	
 10770  000DA4                     __end_ofi1___ftge:
 10771                           	opt stack 0
 10772                           pclatu	equ	0xFFB
 10773                           pclath	equ	0xFFA
 10774                           tblptru	equ	0xFF8
 10775                           tblptrh	equ	0xFF7
 10776                           tblptrl	equ	0xFF6
 10777                           tablat	equ	0xFF5
 10778                           prodh	equ	0xFF4
 10779                           prodl	equ	0xFF3
 10780                           intcon	equ	0xFF2
 10781                           intcon2	equ	0xFF1
 10782                           intcon3	equ	0xFF0
 10783                           postinc0	equ	0xFEE
 10784                           fsr0h	equ	0xFEA
 10785                           fsr0l	equ	0xFE9
 10786                           wreg	equ	0xFE8
 10787                           postdec1	equ	0xFE5
 10788                           fsr1h	equ	0xFE2
 10789                           fsr1l	equ	0xFE1
 10790                           bsr	equ	0xFE0
 10791                           postinc2	equ	0xFDE
 10792                           postdec2	equ	0xFDD
 10793                           plusw2	equ	0xFDB
 10794                           fsr2h	equ	0xFDA
 10795                           fsr2l	equ	0xFD9
 10796                           status	equ	0xFD8
 10797                           
 10798 ;; *************** function _FSH_Write_IR_RF *****************
 10799 ;; Defined at:
 10800 ;;		line 196 in file "FLASH.c"
 10801 ;; Parameters:    Size  Location     Type
 10802 ;;		None
 10803 ;; Auto vars:     Size  Location     Type
 10804 ;;  i               2   29[COMRAM] unsigned int 
 10805 ;;  FlashWastein    2   25[COMRAM] unsigned int 
 10806 ;;  WriteTries      1   31[COMRAM] unsigned char 
 10807 ;;  status          1   28[COMRAM] unsigned char 
 10808 ;;  j               1   27[COMRAM] unsigned char 
 10809 ;;  lowint          1   24[COMRAM] unsigned char 
 10810 ;;  highint         1   23[COMRAM] unsigned char 
 10811 ;; Return value:  Size  Location     Type
 10812 ;;                  1    wreg      unsigned char 
 10813 ;; Registers used:
 10814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10815 ;; Tracked objects:
 10816 ;;		On entry : 0/0
 10817 ;;		On exit  : 0/0
 10818 ;;		Unchanged: 0/0
 10819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10820 ;;      Params:         0       0       0       0       0
 10821 ;;      Locals:         9       0       0       0       0
 10822 ;;      Temps:          6       0       0       0       0
 10823 ;;      Totals:        15       0       0       0       0
 10824 ;;Total ram usage:       15 bytes
 10825 ;; Hardware stack levels used:    1
 10826 ;; Hardware stack levels required when called:    9
 10827 ;; This function calls:
 10828 ;;		_FSH_AddressToBlock
 10829 ;;		_FSH_EraseBlock
 10830 ;;		_FSH_VerifyWriteIntArray
 10831 ;;		_FSH_WriteIntArray
 10832 ;;		_IR_ResetData
 10833 ;;		_MSC_BufferCopyIntConst
 10834 ;;		_RF_ResetData
 10835 ;; This function is called by:
 10836 ;;		_IR_CheckCode
 10837 ;; This function uses a non-reentrant model
 10838 ;;
 10839                           
 10840                           	psect	text72
 10841  003100                     __ptext72:
 10842                           	opt stack 0
 10843  003100                     _FSH_Write_IR_RF:
 10844                           	opt stack 13
 10845                           
 10846                           ;FLASH.c: 198: unsigned int i;
 10847                           ;FLASH.c: 199: unsigned char j;
 10848                           ;FLASH.c: 200: unsigned char highint = INTCONbits.GIE;
 10849                           
 10850                           ;incstack = 0
 10851  003100  0E00               	movlw	0
 10852  003102  BEF2               	btfsc	intcon,7,c	;volatile
 10853  003104  0E01               	movlw	1
 10854  003106  6E18               	movwf	FSH_Write_IR_RF@highint,c
 10855                           
 10856                           ;FLASH.c: 201: unsigned char lowint = INTCONbits.PEIE;
 10857  003108  0E00               	movlw	0
 10858  00310A  BCF2               	btfsc	intcon,6,c	;volatile
 10859  00310C  0E01               	movlw	1
 10860  00310E  6E19               	movwf	FSH_Write_IR_RF@lowint,c
 10861                           
 10862                           ;FLASH.c: 202: unsigned char WriteTries;
 10863                           ;FLASH.c: 203: unsigned char status = 0;
 10864  003110  0E00               	movlw	0
 10865  003112  6E1D               	movwf	FSH_Write_IR_RF@status,c
 10866                           
 10867                           ;FLASH.c: 204: unsigned int FlashWasteindex = 0;
 10868  003114  0E00               	movlw	0
 10869  003116  6E1B               	movwf	FSH_Write_IR_RF@FlashWasteindex+1,c
 10870  003118  0E00               	movlw	0
 10871  00311A  6E1A               	movwf	FSH_Write_IR_RF@FlashWasteindex,c
 10872                           
 10873                           ;FLASH.c: 206: INTCONbits.GIE = 0;
 10874  00311C  9EF2               	bcf	intcon,7,c	;volatile
 10875                           
 10876                           ;FLASH.c: 207: INTCONbits.PEIE = 0;
 10877  00311E  9CF2               	bcf	intcon,6,c	;volatile
 10878                           
 10879                           ;FLASH.c: 209: if(IR_Saved == 90 && RF_Saved == 90)
 10880  003120  0E5A               	movlw	90
 10881  003122  0100               	movlb	0	; () banked
 10882  003124  19CD               	xorwf	_IR_Saved& (0+255),w,b
 10883  003126  A4D8               	btfss	status,2,c
 10884  003128  D005               	goto	i1l5744
 10885                           
 10886                           ; BSR set to: 0
 10887  00312A  0E5A               	movlw	90
 10888  00312C  0100               	movlb	0	; () banked
 10889  00312E  19CE               	xorwf	_RF_Saved& (0+255),w,b
 10890  003130  B4D8               	btfsc	status,2,c
 10891  003132  D00A               	goto	i1l5748
 10892  003134                     i1l5744:
 10893                           
 10894                           ; BSR set to: 0
 10895                           ;FLASH.c: 216: else if(IR_Saved != 90 && RF_Saved != 90)
 10896  003134  0E5A               	movlw	90
 10897  003136  0100               	movlb	0	; () banked
 10898  003138  19CD               	xorwf	_IR_Saved& (0+255),w,b
 10899  00313A  B4D8               	btfsc	status,2,c
 10900  00313C  D00C               	goto	i1l5750
 10901                           
 10902                           ; BSR set to: 0
 10903  00313E  0E5A               	movlw	90
 10904  003140  0100               	movlb	0	; () banked
 10905  003142  19CE               	xorwf	_RF_Saved& (0+255),w,b
 10906  003144  B4D8               	btfsc	status,2,c
 10907  003146  D007               	goto	i1l5750
 10908  003148                     i1l5748:
 10909                           
 10910                           ; BSR set to: 0
 10911                           ;FLASH.c: 217: {
 10912                           ;FLASH.c: 219: IR_Saved = 91;
 10913  003148  0E5B               	movlw	91
 10914  00314A  0100               	movlb	0	; () banked
 10915  00314C  6FCD               	movwf	_IR_Saved& (0+255),b
 10916                           
 10917                           ;FLASH.c: 220: RF_Saved = 91;
 10918  00314E  0E5B               	movlw	91
 10919  003150  0100               	movlb	0	; () banked
 10920  003152  6FCE               	movwf	_RF_Saved& (0+255),b
 10921                           
 10922                           ;FLASH.c: 221: goto END;
 10923  003154  D1A4               	goto	i1l1182
 10924  003156                     i1l5750:
 10925                           
 10926                           ; BSR set to: 0
 10927                           ;FLASH.c: 222: }
 10928                           ;FLASH.c: 224: if(IR_Saved == 90)
 10929  003156  0E5A               	movlw	90
 10930  003158  0100               	movlb	0	; () banked
 10931  00315A  19CD               	xorwf	_IR_Saved& (0+255),w,b
 10932  00315C  A4D8               	btfss	status,2,c
 10933  00315E  D017               	goto	i1l5756
 10934                           
 10935                           ; BSR set to: 0
 10936                           ;FLASH.c: 225: {
 10937                           ;FLASH.c: 227: RF_ResetData();
 10938  003160  EC03  F00D         	call	_RF_ResetData	;wreg free
 10939                           
 10940                           ;FLASH.c: 228: MSC_BufferCopyIntConst(&RF_SavedTiming,&RF_DataTiming, 128, 0);
 10941  003164  0E00               	movlw	0
 10942  003166  6E07               	movwf	MSC_BufferCopyIntConst@from,c
 10943  003168  0E25               	movlw	37
 10944  00316A  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 10945  00316C  0E00               	movlw	0
 10946  00316E  6E09               	movwf	MSC_BufferCopyIntConst@from+2,c
 10947  003170  0E00               	movlw	low _RF_DataTiming
 10948  003172  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 10949  003174  0E03               	movlw	high _RF_DataTiming
 10950  003176  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 10951  003178  0E00               	movlw	0
 10952  00317A  6E0D               	movwf	MSC_BufferCopyIntConst@count+1,c
 10953  00317C  0E80               	movlw	128
 10954  00317E  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 10955  003180  0E00               	movlw	0
 10956  003182  6E0F               	movwf	MSC_BufferCopyIntConst@shift+1,c
 10957  003184  0E00               	movlw	0
 10958  003186  6E0E               	movwf	MSC_BufferCopyIntConst@shift,c
 10959  003188  ECEA  F005         	call	_MSC_BufferCopyIntConst	;wreg free
 10960                           
 10961                           ;FLASH.c: 229: }
 10962  00318C  D016               	goto	i1l5760
 10963  00318E                     i1l5756:
 10964                           
 10965                           ;FLASH.c: 230: else
 10966                           ;FLASH.c: 231: {
 10967                           ;FLASH.c: 233: IR_ResetData();
 10968  00318E  EC0A  F00D         	call	_IR_ResetData	;wreg free
 10969                           
 10970                           ;FLASH.c: 234: MSC_BufferCopyIntConst(&IR_SavedTiming,&IR_DataTiming, 128, 0);
 10971  003192  0E00               	movlw	0
 10972  003194  6E07               	movwf	MSC_BufferCopyIntConst@from,c
 10973  003196  0E24               	movlw	36
 10974  003198  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 10975  00319A  0E00               	movlw	0
 10976  00319C  6E09               	movwf	MSC_BufferCopyIntConst@from+2,c
 10977  00319E  0E00               	movlw	low _IR_DataTiming
 10978  0031A0  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 10979  0031A2  0E02               	movlw	high _IR_DataTiming
 10980  0031A4  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 10981  0031A6  0E00               	movlw	0
 10982  0031A8  6E0D               	movwf	MSC_BufferCopyIntConst@count+1,c
 10983  0031AA  0E80               	movlw	128
 10984  0031AC  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 10985  0031AE  0E00               	movlw	0
 10986  0031B0  6E0F               	movwf	MSC_BufferCopyIntConst@shift+1,c
 10987  0031B2  0E00               	movlw	0
 10988  0031B4  6E0E               	movwf	MSC_BufferCopyIntConst@shift,c
 10989  0031B6  ECEA  F005         	call	_MSC_BufferCopyIntConst	;wreg free
 10990  0031BA                     i1l5760:
 10991                           
 10992                           ;FLASH.c: 235: }
 10993                           ;FLASH.c: 237: FSH_EraseBlock(&IR_SavedTiming);
 10994  0031BA  0E00               	movlw	0
 10995  0031BC  6E05               	movwf	FSH_EraseBlock@Address,c
 10996  0031BE  0E24               	movlw	36
 10997  0031C0  6E06               	movwf	FSH_EraseBlock@Address+1,c
 10998  0031C2  0E00               	movlw	0
 10999  0031C4  6E07               	movwf	FSH_EraseBlock@Address+2,c
 11000  0031C6  0E00               	movlw	0
 11001  0031C8  6E08               	movwf	FSH_EraseBlock@Address+3,c
 11002  0031CA  EC1B  F008         	call	_FSH_EraseBlock	;wreg free
 11003                           
 11004                           ;FLASH.c: 242: WriteTries = 1;
 11005  0031CE  0E01               	movlw	1
 11006  0031D0  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11007  0031D2                     i1l5764:
 11008                           
 11009                           ;FLASH.c: 246: FSH_WriteIntArray(&IR_SavedTiming[0]);
 11010  0031D2  0E00               	movlw	0
 11011  0031D4  6E05               	movwf	FSH_WriteIntArray@Array,c
 11012  0031D6  0E24               	movlw	36
 11013  0031D8  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11014  0031DA  0E00               	movlw	0
 11015  0031DC  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11016  0031DE  EC3E  F006         	call	_FSH_WriteIntArray	;wreg free
 11017                           
 11018                           ;FLASH.c: 249: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[0],&IR_DataTiming[0]))
 11019  0031E2  0E00               	movlw	0
 11020  0031E4  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11021  0031E6  0E24               	movlw	36
 11022  0031E8  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11023  0031EA  0E00               	movlw	0
 11024  0031EC  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11025  0031EE  0E00               	movlw	low _IR_DataTiming
 11026  0031F0  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11027  0031F2  0E02               	movlw	high _IR_DataTiming
 11028  0031F4  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11029  0031F6  ECED  F007         	call	_FSH_VerifyWriteIntArray	;wreg free
 11030  0031FA  0900               	iorlw	0
 11031  0031FC  A4D8               	btfss	status,2,c
 11032  0031FE  D005               	goto	i1l5776
 11033                           
 11034                           ;FLASH.c: 250: {
 11035                           ;FLASH.c: 251: WriteTries++;
 11036  003200  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11037                           
 11038                           ;FLASH.c: 252: if(WriteTries > 10)
 11039  003202  0E0A               	movlw	10
 11040  003204  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11041  003206  D7E5               	goto	i1l5764
 11042  003208  D13F               	goto	i1l5910
 11043  00320A                     i1l5776:
 11044                           
 11045                           ;FLASH.c: 260: }
 11046                           ;FLASH.c: 261: }
 11047                           ;FLASH.c: 264: WriteTries = 1;
 11048  00320A  0E01               	movlw	1
 11049  00320C  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11050  00320E                     i1l5778:
 11051                           
 11052                           ;FLASH.c: 268: FSH_WriteIntArray(&IR_SavedTiming[32]);
 11053  00320E  0E40               	movlw	64
 11054  003210  6E05               	movwf	FSH_WriteIntArray@Array,c
 11055  003212  0E24               	movlw	36
 11056  003214  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11057  003216  0E00               	movlw	0
 11058  003218  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11059  00321A  EC3E  F006         	call	_FSH_WriteIntArray	;wreg free
 11060                           
 11061                           ;FLASH.c: 271: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[32],&IR_DataTiming[32]))
 11062  00321E  0E40               	movlw	64
 11063  003220  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11064  003222  0E24               	movlw	36
 11065  003224  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11066  003226  0E00               	movlw	0
 11067  003228  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11068  00322A  0E40               	movlw	low (_IR_DataTiming+64)
 11069  00322C  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11070  00322E  0E02               	movlw	high (_IR_DataTiming+64)
 11071  003230  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11072  003232  ECED  F007         	call	_FSH_VerifyWriteIntArray	;wreg free
 11073  003236  0900               	iorlw	0
 11074  003238  A4D8               	btfss	status,2,c
 11075  00323A  D005               	goto	i1l5790
 11076                           
 11077                           ;FLASH.c: 272: {
 11078                           ;FLASH.c: 273: WriteTries++;
 11079  00323C  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11080                           
 11081                           ;FLASH.c: 274: if(WriteTries > 10)
 11082  00323E  0E0A               	movlw	10
 11083  003240  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11084  003242  D7E5               	goto	i1l5778
 11085  003244  D121               	goto	i1l5910
 11086  003246                     i1l5790:
 11087                           
 11088                           ;FLASH.c: 282: }
 11089                           ;FLASH.c: 283: }
 11090                           ;FLASH.c: 286: WriteTries = 1;
 11091  003246  0E01               	movlw	1
 11092  003248  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11093  00324A                     i1l5792:
 11094                           
 11095                           ;FLASH.c: 290: FSH_WriteIntArray(&IR_SavedTiming[64]);
 11096  00324A  0E80               	movlw	128
 11097  00324C  6E05               	movwf	FSH_WriteIntArray@Array,c
 11098  00324E  0E24               	movlw	36
 11099  003250  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11100  003252  0E00               	movlw	0
 11101  003254  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11102  003256  EC3E  F006         	call	_FSH_WriteIntArray	;wreg free
 11103                           
 11104                           ;FLASH.c: 293: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[64],&IR_DataTiming[64]))
 11105  00325A  0E80               	movlw	128
 11106  00325C  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11107  00325E  0E24               	movlw	36
 11108  003260  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11109  003262  0E00               	movlw	0
 11110  003264  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11111  003266  0E80               	movlw	low (_IR_DataTiming+128)
 11112  003268  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11113  00326A  0E02               	movlw	high (_IR_DataTiming+128)
 11114  00326C  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11115  00326E  ECED  F007         	call	_FSH_VerifyWriteIntArray	;wreg free
 11116  003272  0900               	iorlw	0
 11117  003274  A4D8               	btfss	status,2,c
 11118  003276  D005               	goto	i1l5804
 11119                           
 11120                           ;FLASH.c: 294: {
 11121                           ;FLASH.c: 295: WriteTries++;
 11122  003278  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11123                           
 11124                           ;FLASH.c: 296: if(WriteTries > 10)
 11125  00327A  0E0A               	movlw	10
 11126  00327C  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11127  00327E  D7E5               	goto	i1l5792
 11128  003280  D103               	goto	i1l5910
 11129  003282                     i1l5804:
 11130                           
 11131                           ;FLASH.c: 304: }
 11132                           ;FLASH.c: 305: }
 11133                           ;FLASH.c: 308: WriteTries = 1;
 11134  003282  0E01               	movlw	1
 11135  003284  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11136  003286                     i1l5806:
 11137                           
 11138                           ;FLASH.c: 312: FSH_WriteIntArray(&IR_SavedTiming[96]);
 11139  003286  0EC0               	movlw	192
 11140  003288  6E05               	movwf	FSH_WriteIntArray@Array,c
 11141  00328A  0E24               	movlw	36
 11142  00328C  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11143  00328E  0E00               	movlw	0
 11144  003290  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11145  003292  EC3E  F006         	call	_FSH_WriteIntArray	;wreg free
 11146                           
 11147                           ;FLASH.c: 315: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[96],&IR_DataTiming[96]))
 11148  003296  0EC0               	movlw	192
 11149  003298  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11150  00329A  0E24               	movlw	36
 11151  00329C  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11152  00329E  0E00               	movlw	0
 11153  0032A0  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11154  0032A2  0EC0               	movlw	low (_IR_DataTiming+192)
 11155  0032A4  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11156  0032A6  0E02               	movlw	high (_IR_DataTiming+192)
 11157  0032A8  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11158  0032AA  ECED  F007         	call	_FSH_VerifyWriteIntArray	;wreg free
 11159  0032AE  0900               	iorlw	0
 11160  0032B0  A4D8               	btfss	status,2,c
 11161  0032B2  D005               	goto	i1l5818
 11162                           
 11163                           ;FLASH.c: 316: {
 11164                           ;FLASH.c: 317: WriteTries++;
 11165  0032B4  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11166                           
 11167                           ;FLASH.c: 318: if(WriteTries > 10)
 11168  0032B6  0E0A               	movlw	10
 11169  0032B8  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11170  0032BA  D7E5               	goto	i1l5806
 11171  0032BC  D0E5               	goto	i1l5910
 11172  0032BE                     i1l5818:
 11173                           
 11174                           ;FLASH.c: 326: }
 11175                           ;FLASH.c: 327: }
 11176                           ;FLASH.c: 330: WriteTries = 1;
 11177  0032BE  0E01               	movlw	1
 11178  0032C0  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11179  0032C2                     i1l5820:
 11180                           
 11181                           ;FLASH.c: 334: FSH_WriteIntArray(&RF_SavedTiming[0]);
 11182  0032C2  0E00               	movlw	0
 11183  0032C4  6E05               	movwf	FSH_WriteIntArray@Array,c
 11184  0032C6  0E25               	movlw	37
 11185  0032C8  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11186  0032CA  0E00               	movlw	0
 11187  0032CC  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11188  0032CE  EC3E  F006         	call	_FSH_WriteIntArray	;wreg free
 11189                           
 11190                           ;FLASH.c: 337: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]))
 11191  0032D2  0E00               	movlw	0
 11192  0032D4  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11193  0032D6  0E25               	movlw	37
 11194  0032D8  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11195  0032DA  0E00               	movlw	0
 11196  0032DC  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11197  0032DE  0E00               	movlw	low _RF_DataTiming
 11198  0032E0  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11199  0032E2  0E03               	movlw	high _RF_DataTiming
 11200  0032E4  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11201  0032E6  ECED  F007         	call	_FSH_VerifyWriteIntArray	;wreg free
 11202  0032EA  0900               	iorlw	0
 11203  0032EC  A4D8               	btfss	status,2,c
 11204  0032EE  D005               	goto	i1l5832
 11205                           
 11206                           ;FLASH.c: 338: {
 11207                           ;FLASH.c: 339: WriteTries++;
 11208  0032F0  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11209                           
 11210                           ;FLASH.c: 340: if(WriteTries > 10)
 11211  0032F2  0E0A               	movlw	10
 11212  0032F4  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11213  0032F6  D7E5               	goto	i1l5820
 11214  0032F8  D0C7               	goto	i1l5910
 11215  0032FA                     i1l5832:
 11216                           
 11217                           ;FLASH.c: 348: }
 11218                           ;FLASH.c: 349: }
 11219                           ;FLASH.c: 352: WriteTries = 1;
 11220  0032FA  0E01               	movlw	1
 11221  0032FC  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11222  0032FE                     i1l5834:
 11223                           
 11224                           ;FLASH.c: 356: FSH_WriteIntArray(&RF_SavedTiming[32]);
 11225  0032FE  0E40               	movlw	64
 11226  003300  6E05               	movwf	FSH_WriteIntArray@Array,c
 11227  003302  0E25               	movlw	37
 11228  003304  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11229  003306  0E00               	movlw	0
 11230  003308  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11231  00330A  EC3E  F006         	call	_FSH_WriteIntArray	;wreg free
 11232                           
 11233                           ;FLASH.c: 359: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]))
 11234  00330E  0E40               	movlw	64
 11235  003310  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11236  003312  0E25               	movlw	37
 11237  003314  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11238  003316  0E00               	movlw	0
 11239  003318  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11240  00331A  0E40               	movlw	low (_RF_DataTiming+64)
 11241  00331C  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11242  00331E  0E03               	movlw	high (_RF_DataTiming+64)
 11243  003320  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11244  003322  ECED  F007         	call	_FSH_VerifyWriteIntArray	;wreg free
 11245  003326  0900               	iorlw	0
 11246  003328  A4D8               	btfss	status,2,c
 11247  00332A  D005               	goto	i1l5846
 11248                           
 11249                           ;FLASH.c: 360: {
 11250                           ;FLASH.c: 361: WriteTries++;
 11251  00332C  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11252                           
 11253                           ;FLASH.c: 362: if(WriteTries > 10)
 11254  00332E  0E0A               	movlw	10
 11255  003330  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11256  003332  D7E5               	goto	i1l5834
 11257  003334  D0A9               	goto	i1l5910
 11258  003336                     i1l5846:
 11259                           
 11260                           ;FLASH.c: 370: }
 11261                           ;FLASH.c: 371: }
 11262                           ;FLASH.c: 374: WriteTries = 1;
 11263  003336  0E01               	movlw	1
 11264  003338  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11265  00333A                     i1l5848:
 11266                           
 11267                           ;FLASH.c: 378: FSH_WriteIntArray(&RF_SavedTiming[64]);
 11268  00333A  0E80               	movlw	128
 11269  00333C  6E05               	movwf	FSH_WriteIntArray@Array,c
 11270  00333E  0E25               	movlw	37
 11271  003340  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11272  003342  0E00               	movlw	0
 11273  003344  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11274  003346  EC3E  F006         	call	_FSH_WriteIntArray	;wreg free
 11275                           
 11276                           ;FLASH.c: 381: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[64],&RF_DataTiming[64]))
 11277  00334A  0E80               	movlw	128
 11278  00334C  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11279  00334E  0E25               	movlw	37
 11280  003350  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11281  003352  0E00               	movlw	0
 11282  003354  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11283  003356  0E80               	movlw	low (_RF_DataTiming+128)
 11284  003358  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11285  00335A  0E03               	movlw	high (_RF_DataTiming+128)
 11286  00335C  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11287  00335E  ECED  F007         	call	_FSH_VerifyWriteIntArray	;wreg free
 11288  003362  0900               	iorlw	0
 11289  003364  A4D8               	btfss	status,2,c
 11290  003366  D005               	goto	i1l5860
 11291                           
 11292                           ;FLASH.c: 382: {
 11293                           ;FLASH.c: 383: WriteTries++;
 11294  003368  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11295                           
 11296                           ;FLASH.c: 384: if(WriteTries > 10)
 11297  00336A  0E0A               	movlw	10
 11298  00336C  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11299  00336E  D7E5               	goto	i1l5848
 11300  003370  D08B               	goto	i1l5910
 11301  003372                     i1l5860:
 11302                           
 11303                           ;FLASH.c: 392: }
 11304                           ;FLASH.c: 393: }
 11305                           ;FLASH.c: 396: WriteTries = 1;
 11306  003372  0E01               	movlw	1
 11307  003374  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11308  003376                     i1l5862:
 11309                           
 11310                           ;FLASH.c: 400: FSH_WriteIntArray(&RF_SavedTiming[96]);
 11311  003376  0EC0               	movlw	192
 11312  003378  6E05               	movwf	FSH_WriteIntArray@Array,c
 11313  00337A  0E25               	movlw	37
 11314  00337C  6E06               	movwf	FSH_WriteIntArray@Array+1,c
 11315  00337E  0E00               	movlw	0
 11316  003380  6E07               	movwf	FSH_WriteIntArray@Array+2,c
 11317  003382  EC3E  F006         	call	_FSH_WriteIntArray	;wreg free
 11318                           
 11319                           ;FLASH.c: 403: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[96],&RF_DataTiming[96]))
 11320  003386  0EC0               	movlw	192
 11321  003388  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11322  00338A  0E25               	movlw	37
 11323  00338C  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11324  00338E  0E00               	movlw	0
 11325  003390  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11326  003392  0EC0               	movlw	low (_RF_DataTiming+192)
 11327  003394  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11328  003396  0E03               	movlw	high (_RF_DataTiming+192)
 11329  003398  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11330  00339A  ECED  F007         	call	_FSH_VerifyWriteIntArray	;wreg free
 11331  00339E  0900               	iorlw	0
 11332  0033A0  A4D8               	btfss	status,2,c
 11333  0033A2  D005               	goto	i1l5874
 11334                           
 11335                           ;FLASH.c: 404: {
 11336                           ;FLASH.c: 405: WriteTries++;
 11337  0033A4  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11338                           
 11339                           ;FLASH.c: 406: if(WriteTries > 10)
 11340  0033A6  0E0A               	movlw	10
 11341  0033A8  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11342  0033AA  D7E5               	goto	i1l5862
 11343  0033AC  D06D               	goto	i1l5910
 11344  0033AE                     i1l5874:
 11345                           
 11346                           ;FLASH.c: 414: }
 11347                           ;FLASH.c: 415: }
 11348                           ;FLASH.c: 418: for(j=8;j<16;j++)
 11349  0033AE  0E08               	movlw	8
 11350  0033B0  6E1C               	movwf	FSH_Write_IR_RF@j,c
 11351  0033B2                     i1l5876:
 11352  0033B2  0E0F               	movlw	15
 11353  0033B4  641C               	cpfsgt	FSH_Write_IR_RF@j,c
 11354  0033B6  D001               	goto	i1l5880
 11355  0033B8  D070               	goto	i1l5922
 11356  0033BA                     i1l5880:
 11357                           
 11358                           ;FLASH.c: 419: {
 11359                           ;FLASH.c: 420: WriteTries = 1;
 11360  0033BA  0E01               	movlw	1
 11361  0033BC  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11362  0033BE                     i1l1221:
 11363                           
 11364                           ;FLASH.c: 423: i=0;
 11365  0033BE  0E00               	movlw	0
 11366  0033C0  6E1F               	movwf	FSH_Write_IR_RF@i+1,c
 11367  0033C2  0E00               	movlw	0
 11368  0033C4  6E1E               	movwf	FSH_Write_IR_RF@i,c
 11369                           
 11370                           ;FLASH.c: 424: FlashWasteindex = i + 64*(j-8);
 11371  0033C6  501C               	movf	FSH_Write_IR_RF@j,w,c
 11372  0033C8  6E12               	movwf	??_FSH_Write_IR_RF& (0+255),c
 11373  0033CA  6A13               	clrf	(??_FSH_Write_IR_RF+1)& (0+255),c
 11374  0033CC  0E06               	movlw	6
 11375  0033CE                     i1u621_25:
 11376  0033CE  90D8               	bcf	status,0,c
 11377  0033D0  3612               	rlcf	??_FSH_Write_IR_RF,f,c
 11378  0033D2  3613               	rlcf	??_FSH_Write_IR_RF+1,f,c
 11379  0033D4  2EE8               	decfsz	wreg,f,c
 11380  0033D6  D7FB               	goto	i1u621_25
 11381  0033D8  501E               	movf	FSH_Write_IR_RF@i,w,c
 11382  0033DA  2612               	addwf	??_FSH_Write_IR_RF,f,c
 11383  0033DC  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 11384  0033DE  2213               	addwfc	??_FSH_Write_IR_RF+1,f,c
 11385  0033E0  0E00               	movlw	0
 11386  0033E2  2412               	addwf	??_FSH_Write_IR_RF,w,c
 11387  0033E4  6E1A               	movwf	FSH_Write_IR_RF@FlashWasteindex,c
 11388  0033E6  0EFE               	movlw	254
 11389  0033E8  2013               	addwfc	??_FSH_Write_IR_RF+1,w,c
 11390  0033EA  6E1B               	movwf	FSH_Write_IR_RF@FlashWasteindex+1,c
 11391                           
 11392                           ;FLASH.c: 425: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 11393  0033EC  0E00               	movlw	0
 11394  0033EE  6E12               	movwf	??_FSH_Write_IR_RF& (0+255),c
 11395  0033F0  0E26               	movlw	38
 11396  0033F2  6E13               	movwf	(??_FSH_Write_IR_RF+1)& (0+255),c
 11397  0033F4  0E00               	movlw	0
 11398  0033F6  6E14               	movwf	(??_FSH_Write_IR_RF+2)& (0+255),c
 11399  0033F8  501A               	movf	FSH_Write_IR_RF@FlashWasteindex,w,c
 11400  0033FA  2412               	addwf	??_FSH_Write_IR_RF,w,c
 11401  0033FC  6E15               	movwf	(??_FSH_Write_IR_RF+3)& (0+255),c
 11402  0033FE  501B               	movf	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 11403  003400  2013               	addwfc	??_FSH_Write_IR_RF+1,w,c
 11404  003402  6E16               	movwf	(??_FSH_Write_IR_RF+4)& (0+255),c
 11405  003404  0E00               	movlw	0
 11406  003406  2014               	addwfc	??_FSH_Write_IR_RF+2,w,c
 11407  003408  6E17               	movwf	(??_FSH_Write_IR_RF+5)& (0+255),c
 11408  00340A  5015               	movf	??_FSH_Write_IR_RF+3,w,c
 11409  00340C  6E01               	movwf	FSH_AddressToBlock@Address,c
 11410  00340E  5016               	movf	??_FSH_Write_IR_RF+4,w,c
 11411  003410  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 11412  003412  5017               	movf	??_FSH_Write_IR_RF+5,w,c
 11413  003414  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 11414  003416  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 11415  003418  EC37  F00A         	call	_FSH_AddressToBlock	;wreg free
 11416                           
 11417                           ;FLASH.c: 426: for(i = 0; i<64; i++)
 11418  00341C  0E00               	movlw	0
 11419  00341E  6E1F               	movwf	FSH_Write_IR_RF@i+1,c
 11420  003420  0E00               	movlw	0
 11421  003422  6E1E               	movwf	FSH_Write_IR_RF@i,c
 11422  003424  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 11423  003426  E10C               	bnz	i1l1223
 11424  003428  0E40               	movlw	64
 11425  00342A  5C1E               	subwf	FSH_Write_IR_RF@i,w,c
 11426  00342C  B0D8               	btfsc	status,0,c
 11427  00342E  D008               	goto	i1l1223
 11428                           
 11429                           ;FLASH.c: 427: {
 11430                           ;FLASH.c: 429: TABLAT = 0xDA;
 11431  003430  0EDA               	movlw	218
 11432  003432  6EF5               	movwf	tablat,c	;volatile
 11433  003434  000D               	tblwt		*+	;# 
 11434  003436  4A1E               	infsnz	FSH_Write_IR_RF@i,f,c
 11435  003438  2A1F               	incf	FSH_Write_IR_RF@i+1,f,c
 11436  00343A  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 11437  00343C  E101               	bnz	i1u623_20
 11438  00343E  D7F4               	goto	L7
 11439  003440                     i1u623_20:
 11440  003440                     i1l1223:
 11441                           
 11442                           ;FLASH.c: 431: }
 11443                           ;FLASH.c: 432: EECON1bits.FREE = 0;
 11444  003440  98A6               	bcf	4006,4,c	;volatile
 11445  003442  84A6               	bsf	4006,2,c	;# 
 11446  003444  9EF2               	bcf	intcon,7,c	;# 
 11447  003446  0E55               	movlw	85	;# 
 11448  003448  6EA7               	movwf	4007,c	;# 
 11449  00344A  0EAA               	movlw	170	;# 
 11450  00344C  6EA7               	movwf	4007,c	;# 
 11451  00344E  82A6               	bsf	4006,1,c	;# 
 11452                           
 11453                           ;FLASH.c: 443: for(i=0; i<64;i++)
 11454  003450  0E00               	movlw	0
 11455  003452  6E1F               	movwf	FSH_Write_IR_RF@i+1,c
 11456  003454  0E00               	movlw	0
 11457  003456  6E1E               	movwf	FSH_Write_IR_RF@i,c
 11458  003458                     i1l5900:
 11459  003458  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 11460  00345A  E11D               	bnz	i1l5918
 11461  00345C  0E40               	movlw	64
 11462  00345E  5C1E               	subwf	FSH_Write_IR_RF@i,w,c
 11463  003460  B0D8               	btfsc	status,0,c
 11464  003462  D019               	goto	i1l5918
 11465                           
 11466                           ;FLASH.c: 444: {
 11467                           ;FLASH.c: 445: if(FlashWaste[FlashWasteindex] != 0xDA)
 11468  003464  0E00               	movlw	0
 11469  003466  241A               	addwf	FSH_Write_IR_RF@FlashWasteindex,w,c
 11470  003468  6EF6               	movwf	tblptrl,c
 11471  00346A  0E26               	movlw	38
 11472  00346C  201B               	addwfc	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 11473  00346E  6EF7               	movwf	tblptrh,c
 11474  003470  6AF8               	clrf	tblptru,c
 11475  003472  0E00               	movlw	0
 11476  003474  22F8               	addwfc	tblptru,f,c
 11477  003476  0008               	tblrd		*
 11478  003478  50F5               	movf	tablat,w,c
 11479  00347A  0ADA               	xorlw	218
 11480  00347C  B4D8               	btfsc	status,2,c
 11481  00347E  D006               	goto	i1l5914
 11482                           
 11483                           ;FLASH.c: 446: {
 11484                           ;FLASH.c: 447: WriteTries++;
 11485  003480  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11486                           
 11487                           ;FLASH.c: 448: if(WriteTries > 10)
 11488  003482  0E0A               	movlw	10
 11489  003484  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11490  003486  D79B               	goto	i1l1221
 11491  003488                     i1l5910:
 11492                           
 11493                           ;FLASH.c: 449: {
 11494                           ;FLASH.c: 450: status = 0;
 11495  003488  0E00               	movlw	0
 11496  00348A  D008               	goto	L6
 11497  00348C                     i1l5914:
 11498                           
 11499                           ;FLASH.c: 456: }
 11500                           ;FLASH.c: 457: }
 11501                           ;FLASH.c: 458: FlashWasteindex++;
 11502  00348C  4A1A               	infsnz	FSH_Write_IR_RF@FlashWasteindex,f,c
 11503  00348E  2A1B               	incf	FSH_Write_IR_RF@FlashWasteindex+1,f,c
 11504  003490  4A1E               	infsnz	FSH_Write_IR_RF@i,f,c
 11505  003492  2A1F               	incf	FSH_Write_IR_RF@i+1,f,c
 11506  003494  D7E1               	goto	i1l5900
 11507  003496                     i1l5918:
 11508  003496  2A1C               	incf	FSH_Write_IR_RF@j,f,c
 11509  003498  D78C               	goto	i1l5876
 11510  00349A                     i1l5922:
 11511                           
 11512                           ;FLASH.c: 459: }
 11513                           ;FLASH.c: 460: }
 11514                           ;FLASH.c: 461: status = 1;
 11515  00349A  0E01               	movlw	1
 11516  00349C                     L6:
 11517  00349C  6E1D               	movwf	FSH_Write_IR_RF@status,c
 11518  00349E                     i1l1182:
 11519                           
 11520                           ;FLASH.c: 464: if(highint)
 11521  00349E  5018               	movf	FSH_Write_IR_RF@highint,w,c
 11522  0034A0  A4D8               	btfss	status,2,c
 11523                           
 11524                           ;FLASH.c: 465: {
 11525                           ;FLASH.c: 466: INTCONbits.GIE = 1;
 11526  0034A2  8EF2               	bsf	intcon,7,c	;volatile
 11527                           
 11528                           ;FLASH.c: 467: }
 11529                           ;FLASH.c: 468: if(lowint)
 11530  0034A4  5019               	movf	FSH_Write_IR_RF@lowint,w,c
 11531  0034A6  A4D8               	btfss	status,2,c
 11532                           
 11533                           ;FLASH.c: 469: {
 11534                           ;FLASH.c: 470: INTCONbits.PEIE = 1;
 11535  0034A8  8CF2               	bsf	intcon,6,c	;volatile
 11536                           
 11537                           ;FLASH.c: 471: }
 11538                           ;FLASH.c: 472: return status;
 11539  0034AA  501D               	movf	FSH_Write_IR_RF@status,w,c
 11540  0034AC  0012               	return	
 11541  0034AE                     __end_of_FSH_Write_IR_RF:
 11542                           	opt stack 0
 11543                           pclatu	equ	0xFFB
 11544                           pclath	equ	0xFFA
 11545                           tblptru	equ	0xFF8
 11546                           tblptrh	equ	0xFF7
 11547                           tblptrl	equ	0xFF6
 11548                           tablat	equ	0xFF5
 11549                           prodh	equ	0xFF4
 11550                           prodl	equ	0xFF3
 11551                           intcon	equ	0xFF2
 11552                           intcon2	equ	0xFF1
 11553                           intcon3	equ	0xFF0
 11554                           postinc0	equ	0xFEE
 11555                           fsr0h	equ	0xFEA
 11556                           fsr0l	equ	0xFE9
 11557                           wreg	equ	0xFE8
 11558                           postdec1	equ	0xFE5
 11559                           fsr1h	equ	0xFE2
 11560                           fsr1l	equ	0xFE1
 11561                           bsr	equ	0xFE0
 11562                           postinc2	equ	0xFDE
 11563                           postdec2	equ	0xFDD
 11564                           plusw2	equ	0xFDB
 11565                           fsr2h	equ	0xFDA
 11566                           fsr2l	equ	0xFD9
 11567                           status	equ	0xFD8
 11568                           
 11569 ;; *************** function _RF_ResetData *****************
 11570 ;; Defined at:
 11571 ;;		line 221 in file "RF.c"
 11572 ;; Parameters:    Size  Location     Type
 11573 ;;		None
 11574 ;; Auto vars:     Size  Location     Type
 11575 ;;		None
 11576 ;; Return value:  Size  Location     Type
 11577 ;;		None               void
 11578 ;; Registers used:
 11579 ;;		wreg, status,2
 11580 ;; Tracked objects:
 11581 ;;		On entry : 0/0
 11582 ;;		On exit  : 0/0
 11583 ;;		Unchanged: 0/0
 11584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11585 ;;      Params:         0       0       0       0       0
 11586 ;;      Locals:         0       0       0       0       0
 11587 ;;      Temps:          0       0       0       0       0
 11588 ;;      Totals:         0       0       0       0       0
 11589 ;;Total ram usage:        0 bytes
 11590 ;; Hardware stack levels used:    1
 11591 ;; Hardware stack levels required when called:    6
 11592 ;; This function calls:
 11593 ;;		Nothing
 11594 ;; This function is called by:
 11595 ;;		_FSH_Write_IR_RF
 11596 ;; This function uses a non-reentrant model
 11597 ;;
 11598                           
 11599                           	psect	text73
 11600  001A06                     __ptext73:
 11601                           	opt stack 0
 11602  001A06                     _RF_ResetData:
 11603                           	opt stack 15
 11604                           
 11605                           ;RF.c: 223: RF_DataPlace = 0;
 11606                           
 11607                           ;incstack = 0
 11608  001A06  0E00               	movlw	0
 11609  001A08  0100               	movlb	0	; () banked
 11610  001A0A  6FC8               	movwf	_RF_DataPlace& (0+255),b
 11611                           
 11612                           ;RF.c: 224: RFStarted = 0;
 11613  001A0C  0E00               	movlw	0
 11614  001A0E  0100               	movlb	0	; () banked
 11615  001A10  6FC5               	movwf	_RFStarted& (0+255),b
 11616                           
 11617                           ; BSR set to: 0
 11618  001A12  0012               	return		;funcret
 11619  001A14                     __end_of_RF_ResetData:
 11620                           	opt stack 0
 11621                           pclatu	equ	0xFFB
 11622                           pclath	equ	0xFFA
 11623                           tblptru	equ	0xFF8
 11624                           tblptrh	equ	0xFF7
 11625                           tblptrl	equ	0xFF6
 11626                           tablat	equ	0xFF5
 11627                           prodh	equ	0xFF4
 11628                           prodl	equ	0xFF3
 11629                           intcon	equ	0xFF2
 11630                           intcon2	equ	0xFF1
 11631                           intcon3	equ	0xFF0
 11632                           postinc0	equ	0xFEE
 11633                           fsr0h	equ	0xFEA
 11634                           fsr0l	equ	0xFE9
 11635                           wreg	equ	0xFE8
 11636                           postdec1	equ	0xFE5
 11637                           fsr1h	equ	0xFE2
 11638                           fsr1l	equ	0xFE1
 11639                           bsr	equ	0xFE0
 11640                           postinc2	equ	0xFDE
 11641                           postdec2	equ	0xFDD
 11642                           plusw2	equ	0xFDB
 11643                           fsr2h	equ	0xFDA
 11644                           fsr2l	equ	0xFD9
 11645                           status	equ	0xFD8
 11646                           
 11647 ;; *************** function _MSC_BufferCopyIntConst *****************
 11648 ;; Defined at:
 11649 ;;		line 238 in file "MISC.c"
 11650 ;; Parameters:    Size  Location     Type
 11651 ;;  from            3    6[COMRAM] PTR const unsigned int 
 11652 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 11653 ;;  to              2    9[COMRAM] PTR unsigned int 
 11654 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 11655 ;;  count           2   11[COMRAM] unsigned int 
 11656 ;;  shift           2   13[COMRAM] unsigned int 
 11657 ;; Auto vars:     Size  Location     Type
 11658 ;;  i               2   15[COMRAM] unsigned int 
 11659 ;; Return value:  Size  Location     Type
 11660 ;;		None               void
 11661 ;; Registers used:
 11662 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 11663 ;; Tracked objects:
 11664 ;;		On entry : 0/0
 11665 ;;		On exit  : 0/0
 11666 ;;		Unchanged: 0/0
 11667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11668 ;;      Params:         9       0       0       0       0
 11669 ;;      Locals:         2       0       0       0       0
 11670 ;;      Temps:          0       0       0       0       0
 11671 ;;      Totals:        11       0       0       0       0
 11672 ;;Total ram usage:       11 bytes
 11673 ;; Hardware stack levels used:    1
 11674 ;; Hardware stack levels required when called:    7
 11675 ;; This function calls:
 11676 ;;		i1_MSC_CleanBufferInt
 11677 ;; This function is called by:
 11678 ;;		_FSH_Write_IR_RF
 11679 ;; This function uses a non-reentrant model
 11680 ;;
 11681                           
 11682                           	psect	text74
 11683  000BD4                     __ptext74:
 11684                           	opt stack 0
 11685  000BD4                     _MSC_BufferCopyIntConst:
 11686                           	opt stack 14
 11687                           
 11688                           ;MISC.c: 240: unsigned int i=0;
 11689                           
 11690                           ; BSR set to: 0
 11691                           ;incstack = 0
 11692  000BD4  0E00               	movlw	0
 11693  000BD6  6E11               	movwf	MSC_BufferCopyIntConst@i+1,c
 11694  000BD8  0E00               	movlw	0
 11695  000BDA  6E10               	movwf	MSC_BufferCopyIntConst@i,c
 11696                           
 11697                           ;MISC.c: 241: MSC_CleanBufferInt(to,count);
 11698  000BDC  C00A  F001         	movff	MSC_BufferCopyIntConst@to,i1MSC_CleanBufferInt@data
 11699  000BE0  C00B  F002         	movff	MSC_BufferCopyIntConst@to+1,i1MSC_CleanBufferInt@data+1
 11700  000BE4  C00C  F003         	movff	MSC_BufferCopyIntConst@count,i1MSC_CleanBufferInt@count
 11701  000BE8  C00D  F004         	movff	MSC_BufferCopyIntConst@count+1,i1MSC_CleanBufferInt@count+1
 11702  000BEC  EC07  F009         	call	i1_MSC_CleanBufferInt	;wreg free
 11703                           
 11704                           ;MISC.c: 242: for(i = shift; i>0; i--)
 11705  000BF0  C00E  F010         	movff	MSC_BufferCopyIntConst@shift,MSC_BufferCopyIntConst@i
 11706  000BF4  C00F  F011         	movff	MSC_BufferCopyIntConst@shift+1,MSC_BufferCopyIntConst@i+1
 11707  000BF8                     i1l5272:
 11708  000BF8  5010               	movf	MSC_BufferCopyIntConst@i,w,c
 11709  000BFA  1011               	iorwf	MSC_BufferCopyIntConst@i+1,w,c
 11710  000BFC  B4D8               	btfsc	status,2,c
 11711  000BFE  D02D               	goto	i1l5292
 11712                           
 11713                           ;MISC.c: 243: {
 11714                           ;MISC.c: 244: *to = ' ';
 11715  000C00  C00A  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
 11716  000C04  C00B  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
 11717  000C08  0E20               	movlw	32
 11718  000C0A  6EDE               	movwf	postinc2,c
 11719  000C0C  0E00               	movlw	0
 11720  000C0E  6EDD               	movwf	postdec2,c
 11721                           
 11722                           ;MISC.c: 245: to++;
 11723  000C10  0E02               	movlw	2
 11724  000C12  260A               	addwf	MSC_BufferCopyIntConst@to,f,c
 11725  000C14  0E00               	movlw	0
 11726  000C16  220B               	addwfc	MSC_BufferCopyIntConst@to+1,f,c
 11727  000C18  0610               	decf	MSC_BufferCopyIntConst@i,f,c
 11728  000C1A  A0D8               	btfss	status,0,c
 11729  000C1C  0611               	decf	MSC_BufferCopyIntConst@i+1,f,c
 11730  000C1E  D7EC               	goto	i1l5272
 11731  000C20                     i1l5284:
 11732                           
 11733                           ;MISC.c: 248: {
 11734                           ;MISC.c: 249: *to = *from;
 11735  000C20  C007  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
 11736  000C24  C008  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
 11737  000C28  C009  FFF8         	movff	MSC_BufferCopyIntConst@from+2,tblptru
 11738  000C2C  C00A  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
 11739  000C30  C00B  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
 11740  000C34  0009               	tblrd		*+
 11741  000C36  CFF5 FFDE          	movff	tablat,postinc2
 11742  000C3A  0008               	tblrd		*
 11743  000C3C  CFF5 FFDD          	movff	tablat,postdec2
 11744                           
 11745                           ;MISC.c: 250: from++;
 11746  000C40  0E02               	movlw	2
 11747  000C42  2607               	addwf	MSC_BufferCopyIntConst@from,f,c
 11748  000C44  0E00               	movlw	0
 11749  000C46  2208               	addwfc	MSC_BufferCopyIntConst@from+1,f,c
 11750  000C48  0E00               	movlw	0
 11751  000C4A  2209               	addwfc	MSC_BufferCopyIntConst@from+2,f,c
 11752                           
 11753                           ;MISC.c: 251: to++;
 11754  000C4C  0E02               	movlw	2
 11755  000C4E  260A               	addwf	MSC_BufferCopyIntConst@to,f,c
 11756  000C50  0E00               	movlw	0
 11757  000C52  220B               	addwfc	MSC_BufferCopyIntConst@to+1,f,c
 11758                           
 11759                           ;MISC.c: 252: count--;
 11760  000C54  060C               	decf	MSC_BufferCopyIntConst@count,f,c
 11761  000C56  A0D8               	btfss	status,0,c
 11762  000C58  060D               	decf	MSC_BufferCopyIntConst@count+1,f,c
 11763  000C5A                     i1l5292:
 11764  000C5A  C007  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
 11765  000C5E  C008  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
 11766  000C62  C009  FFF8         	movff	MSC_BufferCopyIntConst@from+2,tblptru
 11767  000C66  0009               	tblrd		*+
 11768  000C68  50F5               	movf	tablat,w,c
 11769  000C6A  0009               	tblrd		*+
 11770  000C6C  10F5               	iorwf	tablat,w,c
 11771  000C6E  B4D8               	btfsc	status,2,c
 11772  000C70  0012               	return	
 11773  000C72  500C               	movf	MSC_BufferCopyIntConst@count,w,c
 11774  000C74  100D               	iorwf	MSC_BufferCopyIntConst@count+1,w,c
 11775  000C76  B4D8               	btfsc	status,2,c
 11776  000C78  0012               	return	
 11777  000C7A  D7D2               	goto	i1l5284
 11778  000C7C                     __end_of_MSC_BufferCopyIntConst:
 11779                           	opt stack 0
 11780                           pclatu	equ	0xFFB
 11781                           pclath	equ	0xFFA
 11782                           tblptru	equ	0xFF8
 11783                           tblptrh	equ	0xFF7
 11784                           tblptrl	equ	0xFF6
 11785                           tablat	equ	0xFF5
 11786                           prodh	equ	0xFF4
 11787                           prodl	equ	0xFF3
 11788                           intcon	equ	0xFF2
 11789                           intcon2	equ	0xFF1
 11790                           intcon3	equ	0xFF0
 11791                           postinc0	equ	0xFEE
 11792                           fsr0h	equ	0xFEA
 11793                           fsr0l	equ	0xFE9
 11794                           wreg	equ	0xFE8
 11795                           postdec1	equ	0xFE5
 11796                           fsr1h	equ	0xFE2
 11797                           fsr1l	equ	0xFE1
 11798                           bsr	equ	0xFE0
 11799                           postinc2	equ	0xFDE
 11800                           postdec2	equ	0xFDD
 11801                           plusw2	equ	0xFDB
 11802                           fsr2h	equ	0xFDA
 11803                           fsr2l	equ	0xFD9
 11804                           status	equ	0xFD8
 11805                           
 11806 ;; *************** function i1_MSC_CleanBufferInt *****************
 11807 ;; Defined at:
 11808 ;;		line 166 in file "MISC.c"
 11809 ;; Parameters:    Size  Location     Type
 11810 ;;  data            2    0[COMRAM] PTR unsigned int 
 11811 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 11812 ;;  count           2    2[COMRAM] unsigned int 
 11813 ;; Auto vars:     Size  Location     Type
 11814 ;;  MSC_CleanBuf    2    4[COMRAM] unsigned int 
 11815 ;; Return value:  Size  Location     Type
 11816 ;;		None               void
 11817 ;; Registers used:
 11818 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11819 ;; Tracked objects:
 11820 ;;		On entry : 0/0
 11821 ;;		On exit  : 0/0
 11822 ;;		Unchanged: 0/0
 11823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11824 ;;      Params:         4       0       0       0       0
 11825 ;;      Locals:         2       0       0       0       0
 11826 ;;      Temps:          0       0       0       0       0
 11827 ;;      Totals:         6       0       0       0       0
 11828 ;;Total ram usage:        6 bytes
 11829 ;; Hardware stack levels used:    1
 11830 ;; Hardware stack levels required when called:    6
 11831 ;; This function calls:
 11832 ;;		Nothing
 11833 ;; This function is called by:
 11834 ;;		_IR_CleanBuffer
 11835 ;;		_MSC_BufferCopyIntConst
 11836 ;; This function uses a non-reentrant model
 11837 ;;
 11838                           
 11839                           	psect	text75
 11840  00120E                     __ptext75:
 11841                           	opt stack 0
 11842  00120E                     i1_MSC_CleanBufferInt:
 11843                           	opt stack 16
 11844                           
 11845                           ;MISC.c: 168: unsigned int i=0;
 11846                           
 11847                           ;incstack = 0
 11848  00120E  0E00               	movlw	0
 11849  001210  6E06               	movwf	i1MSC_CleanBufferInt@i+1,c
 11850  001212  0E00               	movlw	0
 11851  001214  6E05               	movwf	i1MSC_CleanBufferInt@i,c
 11852                           
 11853                           ;MISC.c: 169: for(i=0; i<count;i++)
 11854  001216  0E00               	movlw	0
 11855  001218  6E06               	movwf	i1MSC_CleanBufferInt@i+1,c
 11856  00121A  0E00               	movlw	0
 11857  00121C  6E05               	movwf	i1MSC_CleanBufferInt@i,c
 11858  00121E  D00F               	goto	i1l5172
 11859  001220                     i1l5168:
 11860                           
 11861                           ;MISC.c: 170: {
 11862                           ;MISC.c: 171: data[i]= 0;
 11863  001220  90D8               	bcf	status,0,c
 11864  001222  3405               	rlcf	i1MSC_CleanBufferInt@i,w,c
 11865  001224  6ED9               	movwf	fsr2l,c
 11866  001226  3406               	rlcf	i1MSC_CleanBufferInt@i+1,w,c
 11867  001228  6EDA               	movwf	fsr2h,c
 11868  00122A  5001               	movf	i1MSC_CleanBufferInt@data,w,c
 11869  00122C  26D9               	addwf	fsr2l,f,c
 11870  00122E  5002               	movf	i1MSC_CleanBufferInt@data+1,w,c
 11871  001230  22DA               	addwfc	fsr2h,f,c
 11872  001232  0E00               	movlw	0
 11873  001234  6EDE               	movwf	postinc2,c
 11874  001236  0E00               	movlw	0
 11875  001238  6EDD               	movwf	postdec2,c
 11876  00123A  4A05               	infsnz	i1MSC_CleanBufferInt@i,f,c
 11877  00123C  2A06               	incf	i1MSC_CleanBufferInt@i+1,f,c
 11878  00123E                     i1l5172:
 11879  00123E  5003               	movf	i1MSC_CleanBufferInt@count,w,c
 11880  001240  5C05               	subwf	i1MSC_CleanBufferInt@i,w,c
 11881  001242  5004               	movf	i1MSC_CleanBufferInt@count+1,w,c
 11882  001244  5806               	subwfb	i1MSC_CleanBufferInt@i+1,w,c
 11883  001246  B0D8               	btfsc	status,0,c
 11884  001248  0012               	return	
 11885  00124A  D7EA               	goto	i1l5168
 11886  00124C                     __end_ofi1_MSC_CleanBufferInt:
 11887                           	opt stack 0
 11888                           pclatu	equ	0xFFB
 11889                           pclath	equ	0xFFA
 11890                           tblptru	equ	0xFF8
 11891                           tblptrh	equ	0xFF7
 11892                           tblptrl	equ	0xFF6
 11893                           tablat	equ	0xFF5
 11894                           prodh	equ	0xFF4
 11895                           prodl	equ	0xFF3
 11896                           intcon	equ	0xFF2
 11897                           intcon2	equ	0xFF1
 11898                           intcon3	equ	0xFF0
 11899                           postinc0	equ	0xFEE
 11900                           fsr0h	equ	0xFEA
 11901                           fsr0l	equ	0xFE9
 11902                           wreg	equ	0xFE8
 11903                           postdec1	equ	0xFE5
 11904                           fsr1h	equ	0xFE2
 11905                           fsr1l	equ	0xFE1
 11906                           bsr	equ	0xFE0
 11907                           postinc2	equ	0xFDE
 11908                           postdec2	equ	0xFDD
 11909                           plusw2	equ	0xFDB
 11910                           fsr2h	equ	0xFDA
 11911                           fsr2l	equ	0xFD9
 11912                           status	equ	0xFD8
 11913                           
 11914 ;; *************** function _IR_ResetData *****************
 11915 ;; Defined at:
 11916 ;;		line 107 in file "IR.c"
 11917 ;; Parameters:    Size  Location     Type
 11918 ;;		None
 11919 ;; Auto vars:     Size  Location     Type
 11920 ;;		None
 11921 ;; Return value:  Size  Location     Type
 11922 ;;		None               void
 11923 ;; Registers used:
 11924 ;;		wreg, status,2, cstack
 11925 ;; Tracked objects:
 11926 ;;		On entry : 0/0
 11927 ;;		On exit  : 0/0
 11928 ;;		Unchanged: 0/0
 11929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11930 ;;      Params:         0       0       0       0       0
 11931 ;;      Locals:         0       0       0       0       0
 11932 ;;      Temps:          0       0       0       0       0
 11933 ;;      Totals:         0       0       0       0       0
 11934 ;;Total ram usage:        0 bytes
 11935 ;; Hardware stack levels used:    1
 11936 ;; Hardware stack levels required when called:    8
 11937 ;; This function calls:
 11938 ;;		_RF_Enable
 11939 ;; This function is called by:
 11940 ;;		_low_isr
 11941 ;;		_FSH_Write_IR_RF
 11942 ;; This function uses a non-reentrant model
 11943 ;;
 11944                           
 11945                           	psect	text76
 11946  001A14                     __ptext76:
 11947                           	opt stack 0
 11948  001A14                     _IR_ResetData:
 11949                           	opt stack 15
 11950                           
 11951                           ;IR.c: 109: IR_DataPlace = 0;
 11952                           
 11953                           ;incstack = 0
 11954  001A14  0E00               	movlw	0
 11955  001A16  6E5D               	movwf	_IR_DataPlace,c
 11956                           
 11957                           ;IR.c: 110: IRStarted = 0;
 11958  001A18  0E00               	movlw	0
 11959  001A1A  6E5B               	movwf	_IRStarted,c
 11960                           
 11961                           ;IR.c: 111: RF_Enable();
 11962  001A1C  EC8A  F00C         	call	_RF_Enable	;wreg free
 11963  001A20  0012               	return		;funcret
 11964  001A22                     __end_of_IR_ResetData:
 11965                           	opt stack 0
 11966                           pclatu	equ	0xFFB
 11967                           pclath	equ	0xFFA
 11968                           tblptru	equ	0xFF8
 11969                           tblptrh	equ	0xFF7
 11970                           tblptrl	equ	0xFF6
 11971                           tablat	equ	0xFF5
 11972                           prodh	equ	0xFF4
 11973                           prodl	equ	0xFF3
 11974                           intcon	equ	0xFF2
 11975                           intcon2	equ	0xFF1
 11976                           intcon3	equ	0xFF0
 11977                           postinc0	equ	0xFEE
 11978                           fsr0h	equ	0xFEA
 11979                           fsr0l	equ	0xFE9
 11980                           wreg	equ	0xFE8
 11981                           postdec1	equ	0xFE5
 11982                           fsr1h	equ	0xFE2
 11983                           fsr1l	equ	0xFE1
 11984                           bsr	equ	0xFE0
 11985                           postinc2	equ	0xFDE
 11986                           postdec2	equ	0xFDD
 11987                           plusw2	equ	0xFDB
 11988                           fsr2h	equ	0xFDA
 11989                           fsr2l	equ	0xFD9
 11990                           status	equ	0xFD8
 11991                           
 11992 ;; *************** function _RF_Enable *****************
 11993 ;; Defined at:
 11994 ;;		line 206 in file "RF.c"
 11995 ;; Parameters:    Size  Location     Type
 11996 ;;		None
 11997 ;; Auto vars:     Size  Location     Type
 11998 ;;		None
 11999 ;; Return value:  Size  Location     Type
 12000 ;;		None               void
 12001 ;; Registers used:
 12002 ;;		wreg, status,2, cstack
 12003 ;; Tracked objects:
 12004 ;;		On entry : 0/0
 12005 ;;		On exit  : 0/0
 12006 ;;		Unchanged: 0/0
 12007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12008 ;;      Params:         0       0       0       0       0
 12009 ;;      Locals:         0       0       0       0       0
 12010 ;;      Temps:          0       0       0       0       0
 12011 ;;      Totals:         0       0       0       0       0
 12012 ;;Total ram usage:        0 bytes
 12013 ;; Hardware stack levels used:    1
 12014 ;; Hardware stack levels required when called:    7
 12015 ;; This function calls:
 12016 ;;		i1_RF_DataInt
 12017 ;;		i1_TMR_Timer0Int
 12018 ;; This function is called by:
 12019 ;;		_IR_ResetData
 12020 ;; This function uses a non-reentrant model
 12021 ;;
 12022                           
 12023                           	psect	text77
 12024  001914                     __ptext77:
 12025                           	opt stack 0
 12026  001914                     _RF_Enable:
 12027                           	opt stack 15
 12028                           
 12029                           ;RF.c: 208: INTCON3bits.INT1IF = 0;
 12030                           
 12031                           ;incstack = 0
 12032  001914  90F0               	bcf	intcon3,0,c	;volatile
 12033                           
 12034                           ;RF.c: 209: INTCON3bits.INT2IF = 0;
 12035  001916  92F0               	bcf	intcon3,1,c	;volatile
 12036                           
 12037                           ;RF.c: 210: INTCONbits.TMR0IF = 0;
 12038  001918  94F2               	bcf	intcon,2,c	;volatile
 12039                           
 12040                           ;RF.c: 211: RF_DataInt(1);
 12041  00191A  0E01               	movlw	1
 12042  00191C  EC94  F00C         	call	i1_RF_DataInt
 12043                           
 12044                           ;RF.c: 212: TMR_Timer0Int(1);
 12045  001920  0E01               	movlw	1
 12046  001922  ECED  F00C         	call	i1_TMR_Timer0Int
 12047  001926  0012               	return		;funcret
 12048  001928                     __end_of_RF_Enable:
 12049                           	opt stack 0
 12050                           pclatu	equ	0xFFB
 12051                           pclath	equ	0xFFA
 12052                           tblptru	equ	0xFF8
 12053                           tblptrh	equ	0xFF7
 12054                           tblptrl	equ	0xFF6
 12055                           tablat	equ	0xFF5
 12056                           prodh	equ	0xFF4
 12057                           prodl	equ	0xFF3
 12058                           intcon	equ	0xFF2
 12059                           intcon2	equ	0xFF1
 12060                           intcon3	equ	0xFF0
 12061                           postinc0	equ	0xFEE
 12062                           fsr0h	equ	0xFEA
 12063                           fsr0l	equ	0xFE9
 12064                           wreg	equ	0xFE8
 12065                           postdec1	equ	0xFE5
 12066                           fsr1h	equ	0xFE2
 12067                           fsr1l	equ	0xFE1
 12068                           bsr	equ	0xFE0
 12069                           postinc2	equ	0xFDE
 12070                           postdec2	equ	0xFDD
 12071                           plusw2	equ	0xFDB
 12072                           fsr2h	equ	0xFDA
 12073                           fsr2l	equ	0xFD9
 12074                           status	equ	0xFD8
 12075                           
 12076 ;; *************** function i1_TMR_Timer0Int *****************
 12077 ;; Defined at:
 12078 ;;		line 208 in file "TIMERS.c"
 12079 ;; Parameters:    Size  Location     Type
 12080 ;;  state           1    wreg     unsigned char 
 12081 ;; Auto vars:     Size  Location     Type
 12082 ;;  state           1    0[COMRAM] unsigned char 
 12083 ;; Return value:  Size  Location     Type
 12084 ;;		None               void
 12085 ;; Registers used:
 12086 ;;		wreg, status,2
 12087 ;; Tracked objects:
 12088 ;;		On entry : 0/0
 12089 ;;		On exit  : 0/0
 12090 ;;		Unchanged: 0/0
 12091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12092 ;;      Params:         0       0       0       0       0
 12093 ;;      Locals:         1       0       0       0       0
 12094 ;;      Temps:          0       0       0       0       0
 12095 ;;      Totals:         1       0       0       0       0
 12096 ;;Total ram usage:        1 bytes
 12097 ;; Hardware stack levels used:    1
 12098 ;; Hardware stack levels required when called:    6
 12099 ;; This function calls:
 12100 ;;		Nothing
 12101 ;; This function is called by:
 12102 ;;		_RF_Disable
 12103 ;;		_RF_Enable
 12104 ;; This function uses a non-reentrant model
 12105 ;;
 12106                           
 12107                           	psect	text78
 12108  0019DA                     __ptext78:
 12109                           	opt stack 0
 12110  0019DA                     i1_TMR_Timer0Int:
 12111                           	opt stack 16
 12112                           
 12113                           ;incstack = 0
 12114                           ;i1TMR_Timer0Int@state stored from wreg
 12115  0019DA  6E01               	movwf	i1TMR_Timer0Int@state,c
 12116                           
 12117                           ;TIMERS.c: 210: if(state)
 12118  0019DC  5001               	movf	i1TMR_Timer0Int@state,w,c
 12119  0019DE  B4D8               	btfsc	status,2,c
 12120  0019E0  D002               	goto	i1l1064
 12121                           
 12122                           ;TIMERS.c: 211: {
 12123                           ;TIMERS.c: 213: INTCONbits.TMR0IE = 1;
 12124  0019E2  8AF2               	bsf	intcon,5,c	;volatile
 12125                           
 12126                           ;TIMERS.c: 214: }
 12127  0019E4  0012               	return	
 12128  0019E6                     i1l1064:
 12129                           
 12130                           ;TIMERS.c: 215: else
 12131                           ;TIMERS.c: 216: {
 12132                           ;TIMERS.c: 218: INTCONbits.TMR0IE = 0;
 12133  0019E6  9AF2               	bcf	intcon,5,c	;volatile
 12134  0019E8  0012               	return	
 12135  0019EA                     __end_ofi1_TMR_Timer0Int:
 12136                           	opt stack 0
 12137                           pclatu	equ	0xFFB
 12138                           pclath	equ	0xFFA
 12139                           tblptru	equ	0xFF8
 12140                           tblptrh	equ	0xFF7
 12141                           tblptrl	equ	0xFF6
 12142                           tablat	equ	0xFF5
 12143                           prodh	equ	0xFF4
 12144                           prodl	equ	0xFF3
 12145                           intcon	equ	0xFF2
 12146                           intcon2	equ	0xFF1
 12147                           intcon3	equ	0xFF0
 12148                           postinc0	equ	0xFEE
 12149                           fsr0h	equ	0xFEA
 12150                           fsr0l	equ	0xFE9
 12151                           wreg	equ	0xFE8
 12152                           postdec1	equ	0xFE5
 12153                           fsr1h	equ	0xFE2
 12154                           fsr1l	equ	0xFE1
 12155                           bsr	equ	0xFE0
 12156                           postinc2	equ	0xFDE
 12157                           postdec2	equ	0xFDD
 12158                           plusw2	equ	0xFDB
 12159                           fsr2h	equ	0xFDA
 12160                           fsr2l	equ	0xFD9
 12161                           status	equ	0xFD8
 12162                           
 12163 ;; *************** function i1_RF_DataInt *****************
 12164 ;; Defined at:
 12165 ;;		line 78 in file "RF.c"
 12166 ;; Parameters:    Size  Location     Type
 12167 ;;  state           1    wreg     unsigned char 
 12168 ;; Auto vars:     Size  Location     Type
 12169 ;;  state           1    0[COMRAM] unsigned char 
 12170 ;; Return value:  Size  Location     Type
 12171 ;;		None               void
 12172 ;; Registers used:
 12173 ;;		wreg, status,2
 12174 ;; Tracked objects:
 12175 ;;		On entry : 0/0
 12176 ;;		On exit  : 0/0
 12177 ;;		Unchanged: 0/0
 12178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12179 ;;      Params:         0       0       0       0       0
 12180 ;;      Locals:         1       0       0       0       0
 12181 ;;      Temps:          0       0       0       0       0
 12182 ;;      Totals:         1       0       0       0       0
 12183 ;;Total ram usage:        1 bytes
 12184 ;; Hardware stack levels used:    1
 12185 ;; Hardware stack levels required when called:    6
 12186 ;; This function calls:
 12187 ;;		Nothing
 12188 ;; This function is called by:
 12189 ;;		_RF_Disable
 12190 ;;		_RF_Enable
 12191 ;; This function uses a non-reentrant model
 12192 ;;
 12193                           
 12194                           	psect	text79
 12195  001928                     __ptext79:
 12196                           	opt stack 0
 12197  001928                     i1_RF_DataInt:
 12198                           	opt stack 16
 12199                           
 12200                           ;incstack = 0
 12201                           ;i1RF_DataInt@state stored from wreg
 12202  001928  6E01               	movwf	i1RF_DataInt@state,c
 12203                           
 12204                           ;RF.c: 80: if(state)
 12205  00192A  5001               	movf	i1RF_DataInt@state,w,c
 12206  00192C  B4D8               	btfsc	status,2,c
 12207  00192E  D003               	goto	i1l380
 12208                           
 12209                           ;RF.c: 81: {
 12210                           ;RF.c: 83: INTCON3bits.INT1E = 1;
 12211  001930  86F0               	bsf	intcon3,3,c	;volatile
 12212                           
 12213                           ;RF.c: 84: INTCON3bits.INT2E = 1;
 12214  001932  88F0               	bsf	intcon3,4,c	;volatile
 12215                           
 12216                           ;RF.c: 85: }
 12217  001934  0012               	return	
 12218  001936                     i1l380:
 12219                           
 12220                           ;RF.c: 86: else
 12221                           ;RF.c: 87: {
 12222                           ;RF.c: 89: INTCON3bits.INT1E = 0;
 12223  001936  96F0               	bcf	intcon3,3,c	;volatile
 12224                           
 12225                           ;RF.c: 90: INTCON3bits.INT2E = 0;
 12226  001938  98F0               	bcf	intcon3,4,c	;volatile
 12227  00193A  0012               	return	
 12228  00193C                     __end_ofi1_RF_DataInt:
 12229                           	opt stack 0
 12230                           pclatu	equ	0xFFB
 12231                           pclath	equ	0xFFA
 12232                           tblptru	equ	0xFF8
 12233                           tblptrh	equ	0xFF7
 12234                           tblptrl	equ	0xFF6
 12235                           tablat	equ	0xFF5
 12236                           prodh	equ	0xFF4
 12237                           prodl	equ	0xFF3
 12238                           intcon	equ	0xFF2
 12239                           intcon2	equ	0xFF1
 12240                           intcon3	equ	0xFF0
 12241                           postinc0	equ	0xFEE
 12242                           fsr0h	equ	0xFEA
 12243                           fsr0l	equ	0xFE9
 12244                           wreg	equ	0xFE8
 12245                           postdec1	equ	0xFE5
 12246                           fsr1h	equ	0xFE2
 12247                           fsr1l	equ	0xFE1
 12248                           bsr	equ	0xFE0
 12249                           postinc2	equ	0xFDE
 12250                           postdec2	equ	0xFDD
 12251                           plusw2	equ	0xFDB
 12252                           fsr2h	equ	0xFDA
 12253                           fsr2l	equ	0xFD9
 12254                           status	equ	0xFD8
 12255                           
 12256 ;; *************** function _FSH_WriteIntArray *****************
 12257 ;; Defined at:
 12258 ;;		line 146 in file "FLASH.c"
 12259 ;; Parameters:    Size  Location     Type
 12260 ;;  Array           3    4[COMRAM] PTR unsigned int 
 12261 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 12262 ;; Auto vars:     Size  Location     Type
 12263 ;;  i               1   12[COMRAM] unsigned char 
 12264 ;; Return value:  Size  Location     Type
 12265 ;;		None               void
 12266 ;; Registers used:
 12267 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12268 ;; Tracked objects:
 12269 ;;		On entry : 0/0
 12270 ;;		On exit  : 0/0
 12271 ;;		Unchanged: 0/0
 12272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12273 ;;      Params:         3       0       0       0       0
 12274 ;;      Locals:         1       0       0       0       0
 12275 ;;      Temps:          5       0       0       0       0
 12276 ;;      Totals:         9       0       0       0       0
 12277 ;;Total ram usage:        9 bytes
 12278 ;; Hardware stack levels used:    1
 12279 ;; Hardware stack levels required when called:    7
 12280 ;; This function calls:
 12281 ;;		_FSH_AddressToBlock
 12282 ;; This function is called by:
 12283 ;;		_FSH_Write_IR_RF
 12284 ;; This function uses a non-reentrant model
 12285 ;;
 12286                           
 12287                           	psect	text80
 12288  000C7C                     __ptext80:
 12289                           	opt stack 0
 12290  000C7C                     _FSH_WriteIntArray:
 12291                           	opt stack 14
 12292                           
 12293                           ;FLASH.c: 148: unsigned char i;
 12294                           ;FLASH.c: 150: FSH_AddressToBlock(Array);
 12295                           
 12296                           ;incstack = 0
 12297  000C7C  5005               	movf	FSH_WriteIntArray@Array,w,c
 12298  000C7E  6E01               	movwf	FSH_AddressToBlock@Address,c
 12299  000C80  5006               	movf	FSH_WriteIntArray@Array+1,w,c
 12300  000C82  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 12301  000C84  5007               	movf	FSH_WriteIntArray@Array+2,w,c
 12302  000C86  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 12303  000C88  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 12304  000C8A  EC37  F00A         	call	_FSH_AddressToBlock	;wreg free
 12305                           
 12306                           ;FLASH.c: 152: for(i = 0; i<32; i++)
 12307  000C8E  0E00               	movlw	0
 12308  000C90  6E0D               	movwf	FSH_WriteIntArray@i,c
 12309  000C92                     i1l5366:
 12310  000C92  0E1F               	movlw	31
 12311  000C94  640D               	cpfsgt	FSH_WriteIntArray@i,c
 12312  000C96  D001               	goto	i1l5370
 12313  000C98  D034               	goto	i1l1171
 12314  000C9A                     i1l5370:
 12315                           
 12316                           ;FLASH.c: 153: {
 12317                           ;FLASH.c: 155: TABLAT =(Array[i] & 0xFF00) >> 8;
 12318  000C9A  500D               	movf	FSH_WriteIntArray@i,w,c
 12319  000C9C  0D02               	mullw	2
 12320  000C9E  50F3               	movf	prodl,w,c
 12321  000CA0  2405               	addwf	FSH_WriteIntArray@Array,w,c
 12322  000CA2  6E08               	movwf	??_FSH_WriteIntArray& (0+255),c
 12323  000CA4  50F4               	movf	prodh,w,c
 12324  000CA6  2006               	addwfc	FSH_WriteIntArray@Array+1,w,c
 12325  000CA8  6E09               	movwf	(??_FSH_WriteIntArray+1)& (0+255),c
 12326  000CAA  0E00               	movlw	0
 12327  000CAC  2007               	addwfc	FSH_WriteIntArray@Array+2,w,c
 12328  000CAE  6E0A               	movwf	(??_FSH_WriteIntArray+2)& (0+255),c
 12329  000CB0  C008  FFF6         	movff	??_FSH_WriteIntArray,tblptrl
 12330  000CB4  C009  FFF7         	movff	??_FSH_WriteIntArray+1,tblptrh
 12331  000CB8  C00A  FFF8         	movff	??_FSH_WriteIntArray+2,tblptru
 12332  000CBC  0009               	tblrd		*+
 12333  000CBE  CFF5 F00B          	movff	tablat,??_FSH_WriteIntArray+3
 12334  000CC2  0009               	tblrd		*+
 12335  000CC4  CFF5 F00C          	movff	tablat,??_FSH_WriteIntArray+4
 12336  000CC8  C00C  F00B         	movff	??_FSH_WriteIntArray+4,??_FSH_WriteIntArray+3
 12337  000CCC  6A0C               	clrf	??_FSH_WriteIntArray+4,c
 12338  000CCE  500B               	movf	??_FSH_WriteIntArray+3,w,c
 12339  000CD0  6EF5               	movwf	tablat,c	;volatile
 12340  000CD2  000D               	tblwt		*+	;# 
 12341                           
 12342                           ;FLASH.c: 157: TABLAT = (Array[i] & 0x00FF);
 12343  000CD4  500D               	movf	FSH_WriteIntArray@i,w,c
 12344  000CD6  0D02               	mullw	2
 12345  000CD8  50F3               	movf	prodl,w,c
 12346  000CDA  2405               	addwf	FSH_WriteIntArray@Array,w,c
 12347  000CDC  6E08               	movwf	??_FSH_WriteIntArray& (0+255),c
 12348  000CDE  50F4               	movf	prodh,w,c
 12349  000CE0  2006               	addwfc	FSH_WriteIntArray@Array+1,w,c
 12350  000CE2  6E09               	movwf	(??_FSH_WriteIntArray+1)& (0+255),c
 12351  000CE4  0E00               	movlw	0
 12352  000CE6  2007               	addwfc	FSH_WriteIntArray@Array+2,w,c
 12353  000CE8  6E0A               	movwf	(??_FSH_WriteIntArray+2)& (0+255),c
 12354  000CEA  C008  FFF6         	movff	??_FSH_WriteIntArray,tblptrl
 12355  000CEE  C009  FFF7         	movff	??_FSH_WriteIntArray+1,tblptrh
 12356  000CF2  C00A  FFF8         	movff	??_FSH_WriteIntArray+2,tblptru
 12357  000CF6  0008               	tblrd		*
 12358  000CF8  CFF5 FFF5          	movff	tablat,tablat	;volatile
 12359  000CFC  000D               	tblwt		*+	;# 
 12360  000CFE  2A0D               	incf	FSH_WriteIntArray@i,f,c
 12361  000D00  D7C8               	goto	i1l5366
 12362  000D02                     i1l1171:
 12363                           
 12364                           ;FLASH.c: 159: }
 12365                           ;FLASH.c: 160: EECON1bits.FREE = 0;
 12366  000D02  98A6               	bcf	4006,4,c	;volatile
 12367  000D04  84A6               	bsf	4006,2,c	;# 
 12368  000D06  9EF2               	bcf	intcon,7,c	;# 
 12369  000D08  0E55               	movlw	85	;# 
 12370  000D0A  6EA7               	movwf	4007,c	;# 
 12371  000D0C  0EAA               	movlw	170	;# 
 12372  000D0E  6EA7               	movwf	4007,c	;# 
 12373  000D10  82A6               	bsf	4006,1,c	;# 
 12374  000D12  0012               	return		;funcret
 12375  000D14                     __end_of_FSH_WriteIntArray:
 12376                           	opt stack 0
 12377                           pclatu	equ	0xFFB
 12378                           pclath	equ	0xFFA
 12379                           tblptru	equ	0xFF8
 12380                           tblptrh	equ	0xFF7
 12381                           tblptrl	equ	0xFF6
 12382                           tablat	equ	0xFF5
 12383                           prodh	equ	0xFF4
 12384                           prodl	equ	0xFF3
 12385                           intcon	equ	0xFF2
 12386                           intcon2	equ	0xFF1
 12387                           intcon3	equ	0xFF0
 12388                           postinc0	equ	0xFEE
 12389                           fsr0h	equ	0xFEA
 12390                           fsr0l	equ	0xFE9
 12391                           wreg	equ	0xFE8
 12392                           postdec1	equ	0xFE5
 12393                           fsr1h	equ	0xFE2
 12394                           fsr1l	equ	0xFE1
 12395                           bsr	equ	0xFE0
 12396                           postinc2	equ	0xFDE
 12397                           postdec2	equ	0xFDD
 12398                           plusw2	equ	0xFDB
 12399                           fsr2h	equ	0xFDA
 12400                           fsr2l	equ	0xFD9
 12401                           status	equ	0xFD8
 12402                           
 12403 ;; *************** function _FSH_VerifyWriteIntArray *****************
 12404 ;; Defined at:
 12405 ;;		line 176 in file "FLASH.c"
 12406 ;; Parameters:    Size  Location     Type
 12407 ;;  ConstArray      3    0[COMRAM] PTR const unsigned int 
 12408 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 12409 ;;  Array           2    3[COMRAM] PTR unsigned int 
 12410 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 12411 ;; Auto vars:     Size  Location     Type
 12412 ;;  i               1   10[COMRAM] unsigned char 
 12413 ;; Return value:  Size  Location     Type
 12414 ;;                  1    wreg      unsigned char 
 12415 ;; Registers used:
 12416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 12417 ;; Tracked objects:
 12418 ;;		On entry : 0/0
 12419 ;;		On exit  : 0/0
 12420 ;;		Unchanged: 0/0
 12421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12422 ;;      Params:         5       0       0       0       0
 12423 ;;      Locals:         1       0       0       0       0
 12424 ;;      Temps:          5       0       0       0       0
 12425 ;;      Totals:        11       0       0       0       0
 12426 ;;Total ram usage:       11 bytes
 12427 ;; Hardware stack levels used:    1
 12428 ;; Hardware stack levels required when called:    6
 12429 ;; This function calls:
 12430 ;;		Nothing
 12431 ;; This function is called by:
 12432 ;;		_FSH_Write_IR_RF
 12433 ;; This function uses a non-reentrant model
 12434 ;;
 12435                           
 12436                           	psect	text81
 12437  000FDA                     __ptext81:
 12438                           	opt stack 0
 12439  000FDA                     _FSH_VerifyWriteIntArray:
 12440                           	opt stack 15
 12441                           
 12442                           ;FLASH.c: 178: unsigned char i;
 12443                           ;FLASH.c: 180: for(i = 0; i<32; i++)
 12444                           
 12445                           ;incstack = 0
 12446  000FDA  0E00               	movlw	0
 12447  000FDC  6E0B               	movwf	FSH_VerifyWriteIntArray@i,c
 12448  000FDE                     i1l5378:
 12449  000FDE  0E1F               	movlw	31
 12450  000FE0  640B               	cpfsgt	FSH_VerifyWriteIntArray@i,c
 12451  000FE2  D001               	goto	i1l5382
 12452  000FE4  D026               	goto	i1l5392
 12453  000FE6                     i1l5382:
 12454                           
 12455                           ;FLASH.c: 181: {
 12456                           ;FLASH.c: 182: if(ConstArray[i] != Array[i])
 12457  000FE6  500B               	movf	FSH_VerifyWriteIntArray@i,w,c
 12458  000FE8  0D02               	mullw	2
 12459  000FEA  50F3               	movf	prodl,w,c
 12460  000FEC  2404               	addwf	FSH_VerifyWriteIntArray@Array,w,c
 12461  000FEE  6ED9               	movwf	fsr2l,c
 12462  000FF0  50F4               	movf	prodh,w,c
 12463  000FF2  2005               	addwfc	FSH_VerifyWriteIntArray@Array+1,w,c
 12464  000FF4  6EDA               	movwf	fsr2h,c
 12465  000FF6  500B               	movf	FSH_VerifyWriteIntArray@i,w,c
 12466  000FF8  0D02               	mullw	2
 12467  000FFA  50F3               	movf	prodl,w,c
 12468  000FFC  2401               	addwf	FSH_VerifyWriteIntArray@ConstArray,w,c
 12469  000FFE  6E08               	movwf	(??_FSH_VerifyWriteIntArray+2)& (0+255),c
 12470  001000  50F4               	movf	prodh,w,c
 12471  001002  2002               	addwfc	FSH_VerifyWriteIntArray@ConstArray+1,w,c
 12472  001004  6E09               	movwf	(??_FSH_VerifyWriteIntArray+3)& (0+255),c
 12473  001006  0E00               	movlw	0
 12474  001008  2003               	addwfc	FSH_VerifyWriteIntArray@ConstArray+2,w,c
 12475  00100A  6E0A               	movwf	(??_FSH_VerifyWriteIntArray+4)& (0+255),c
 12476  00100C  C008  FFF6         	movff	??_FSH_VerifyWriteIntArray+2,tblptrl
 12477  001010  C009  FFF7         	movff	??_FSH_VerifyWriteIntArray+3,tblptrh
 12478  001014  C00A  FFF8         	movff	??_FSH_VerifyWriteIntArray+4,tblptru
 12479  001018  50DE               	movf	postinc2,w,c
 12480  00101A  0009               	tblrd		*+
 12481  00101C  18F5               	xorwf	tablat,w,c
 12482  00101E  E105               	bnz	i1u547_20
 12483  001020  50DE               	movf	postinc2,w,c
 12484  001022  0009               	tblrd		*+
 12485  001024  18F5               	xorwf	tablat,w,c
 12486  001026  B4D8               	btfsc	status,2,c
 12487  001028  D002               	goto	i1l5388
 12488  00102A                     i1u547_20:
 12489                           
 12490                           ;FLASH.c: 183: {
 12491                           ;FLASH.c: 184: return 0;
 12492  00102A  0E00               	movlw	0
 12493  00102C  0012               	return	
 12494  00102E                     i1l5388:
 12495  00102E  2A0B               	incf	FSH_VerifyWriteIntArray@i,f,c
 12496  001030  D7D6               	goto	i1l5378
 12497  001032                     i1l5392:
 12498                           
 12499                           ;FLASH.c: 185: }
 12500                           ;FLASH.c: 186: }
 12501                           ;FLASH.c: 187: return 1;
 12502  001032  0E01               	movlw	1
 12503  001034  0012               	return	
 12504  001036                     __end_of_FSH_VerifyWriteIntArray:
 12505                           	opt stack 0
 12506                           pclatu	equ	0xFFB
 12507                           pclath	equ	0xFFA
 12508                           tblptru	equ	0xFF8
 12509                           tblptrh	equ	0xFF7
 12510                           tblptrl	equ	0xFF6
 12511                           tablat	equ	0xFF5
 12512                           prodh	equ	0xFF4
 12513                           prodl	equ	0xFF3
 12514                           intcon	equ	0xFF2
 12515                           intcon2	equ	0xFF1
 12516                           intcon3	equ	0xFF0
 12517                           postinc0	equ	0xFEE
 12518                           fsr0h	equ	0xFEA
 12519                           fsr0l	equ	0xFE9
 12520                           wreg	equ	0xFE8
 12521                           postdec1	equ	0xFE5
 12522                           fsr1h	equ	0xFE2
 12523                           fsr1l	equ	0xFE1
 12524                           bsr	equ	0xFE0
 12525                           postinc2	equ	0xFDE
 12526                           postdec2	equ	0xFDD
 12527                           plusw2	equ	0xFDB
 12528                           fsr2h	equ	0xFDA
 12529                           fsr2l	equ	0xFD9
 12530                           status	equ	0xFD8
 12531                           
 12532 ;; *************** function _FSH_EraseBlock *****************
 12533 ;; Defined at:
 12534 ;;		line 98 in file "FLASH.c"
 12535 ;; Parameters:    Size  Location     Type
 12536 ;;  Address         4    4[COMRAM] unsigned long 
 12537 ;; Auto vars:     Size  Location     Type
 12538 ;;  i               4    0        unsigned long 
 12539 ;;  WriteTries      1   10[COMRAM] unsigned char 
 12540 ;;  lowint          1    9[COMRAM] unsigned char 
 12541 ;;  highint         1    8[COMRAM] unsigned char 
 12542 ;; Return value:  Size  Location     Type
 12543 ;;		None               void
 12544 ;; Registers used:
 12545 ;;		wreg, status,2, status,0, cstack
 12546 ;; Tracked objects:
 12547 ;;		On entry : 0/0
 12548 ;;		On exit  : 0/0
 12549 ;;		Unchanged: 0/0
 12550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12551 ;;      Params:         4       0       0       0       0
 12552 ;;      Locals:         3       0       0       0       0
 12553 ;;      Temps:          0       0       0       0       0
 12554 ;;      Totals:         7       0       0       0       0
 12555 ;;Total ram usage:        7 bytes
 12556 ;; Hardware stack levels used:    1
 12557 ;; Hardware stack levels required when called:    7
 12558 ;; This function calls:
 12559 ;;		_FSH_AddressToBlock
 12560 ;; This function is called by:
 12561 ;;		_FSH_Write_IR_RF
 12562 ;; This function uses a non-reentrant model
 12563 ;;
 12564                           
 12565                           	psect	text82
 12566  001036                     __ptext82:
 12567                           	opt stack 0
 12568  001036                     _FSH_EraseBlock:
 12569                           	opt stack 14
 12570                           
 12571                           ;FLASH.c: 100: unsigned char highint = INTCONbits.GIE;
 12572                           
 12573                           ;incstack = 0
 12574  001036  0E00               	movlw	0
 12575  001038  BEF2               	btfsc	intcon,7,c	;volatile
 12576  00103A  0E01               	movlw	1
 12577  00103C  6E09               	movwf	FSH_EraseBlock@highint,c
 12578                           
 12579                           ;FLASH.c: 101: unsigned char lowint = INTCONbits.PEIE;
 12580  00103E  0E00               	movlw	0
 12581  001040  BCF2               	btfsc	intcon,6,c	;volatile
 12582  001042  0E01               	movlw	1
 12583  001044  6E0A               	movwf	FSH_EraseBlock@lowint,c
 12584                           
 12585                           ;FLASH.c: 102: unsigned char WriteTries;
 12586                           ;FLASH.c: 103: unsigned long i;
 12587                           ;FLASH.c: 105: INTCONbits.GIE = 0;
 12588  001046  9EF2               	bcf	intcon,7,c	;volatile
 12589                           
 12590                           ;FLASH.c: 106: INTCONbits.PEIE = 0;
 12591  001048  9CF2               	bcf	intcon,6,c	;volatile
 12592  00104A                     i1l5342:
 12593                           
 12594                           ;FLASH.c: 109: FSH_AddressToBlock(Address);
 12595  00104A  C005  F001         	movff	FSH_EraseBlock@Address,FSH_AddressToBlock@Address
 12596  00104E  C006  F002         	movff	FSH_EraseBlock@Address+1,FSH_AddressToBlock@Address+1
 12597  001052  C007  F003         	movff	FSH_EraseBlock@Address+2,FSH_AddressToBlock@Address+2
 12598  001056  C008  F004         	movff	FSH_EraseBlock@Address+3,FSH_AddressToBlock@Address+3
 12599  00105A  EC37  F00A         	call	_FSH_AddressToBlock	;wreg free
 12600                           
 12601                           ;FLASH.c: 111: WriteTries = 1;
 12602  00105E  0E01               	movlw	1
 12603  001060  6E0B               	movwf	FSH_EraseBlock@WriteTries,c
 12604  001062  84A6               	bsf	4006,2,c	;# 
 12605  001064  88A6               	bsf	4006,4,c	;# 
 12606  001066  9EF2               	bcf	intcon,7,c	;# 
 12607  001068  0E55               	movlw	85	;# 
 12608  00106A  6EA7               	movwf	4007,c	;# 
 12609  00106C  0EAA               	movlw	170	;# 
 12610  00106E  6EA7               	movwf	4007,c	;# 
 12611  001070  82A6               	bsf	4006,1,c	;# 
 12612                           
 12613                           ;FLASH.c: 122: if(EECON1bits.WRERR)
 12614  001072  A6A6               	btfss	4006,3,c	;volatile
 12615  001074  D005               	goto	i1l5354
 12616                           
 12617                           ;FLASH.c: 123: {
 12618                           ;FLASH.c: 124: WriteTries++;
 12619  001076  2A0B               	incf	FSH_EraseBlock@WriteTries,f,c
 12620                           
 12621                           ;FLASH.c: 125: if(WriteTries < 10)
 12622  001078  0E0A               	movlw	10
 12623  00107A  600B               	cpfslt	FSH_EraseBlock@WriteTries,c
 12624  00107C  D001               	goto	i1l5354
 12625  00107E  D7E5               	goto	i1l5342
 12626  001080                     i1l5354:
 12627                           
 12628                           ;FLASH.c: 128: }
 12629                           ;FLASH.c: 129: }
 12630                           ;FLASH.c: 131: if(highint)
 12631  001080  5009               	movf	FSH_EraseBlock@highint,w,c
 12632  001082  A4D8               	btfss	status,2,c
 12633                           
 12634                           ;FLASH.c: 132: {
 12635                           ;FLASH.c: 133: INTCONbits.GIE = 1;
 12636  001084  8EF2               	bsf	intcon,7,c	;volatile
 12637                           
 12638                           ;FLASH.c: 134: }
 12639                           ;FLASH.c: 135: if(lowint)
 12640  001086  500A               	movf	FSH_EraseBlock@lowint,w,c
 12641  001088  B4D8               	btfsc	status,2,c
 12642  00108A  0012               	return	
 12643                           
 12644                           ;FLASH.c: 136: {
 12645                           ;FLASH.c: 137: INTCONbits.PEIE = 1;
 12646  00108C  8CF2               	bsf	intcon,6,c	;volatile
 12647  00108E  0012               	return	
 12648  001090                     __end_of_FSH_EraseBlock:
 12649                           	opt stack 0
 12650                           pclatu	equ	0xFFB
 12651                           pclath	equ	0xFFA
 12652                           tblptru	equ	0xFF8
 12653                           tblptrh	equ	0xFF7
 12654                           tblptrl	equ	0xFF6
 12655                           tablat	equ	0xFF5
 12656                           prodh	equ	0xFF4
 12657                           prodl	equ	0xFF3
 12658                           intcon	equ	0xFF2
 12659                           intcon2	equ	0xFF1
 12660                           intcon3	equ	0xFF0
 12661                           postinc0	equ	0xFEE
 12662                           fsr0h	equ	0xFEA
 12663                           fsr0l	equ	0xFE9
 12664                           wreg	equ	0xFE8
 12665                           postdec1	equ	0xFE5
 12666                           fsr1h	equ	0xFE2
 12667                           fsr1l	equ	0xFE1
 12668                           bsr	equ	0xFE0
 12669                           postinc2	equ	0xFDE
 12670                           postdec2	equ	0xFDD
 12671                           plusw2	equ	0xFDB
 12672                           fsr2h	equ	0xFDA
 12673                           fsr2l	equ	0xFD9
 12674                           status	equ	0xFD8
 12675                           
 12676 ;; *************** function _FSH_AddressToBlock *****************
 12677 ;; Defined at:
 12678 ;;		line 481 in file "FLASH.c"
 12679 ;; Parameters:    Size  Location     Type
 12680 ;;  Address         4    0[COMRAM] unsigned long 
 12681 ;; Auto vars:     Size  Location     Type
 12682 ;;		None
 12683 ;; Return value:  Size  Location     Type
 12684 ;;		None               void
 12685 ;; Registers used:
 12686 ;;		wreg, status,2, status,0
 12687 ;; Tracked objects:
 12688 ;;		On entry : 0/0
 12689 ;;		On exit  : 0/0
 12690 ;;		Unchanged: 0/0
 12691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12692 ;;      Params:         4       0       0       0       0
 12693 ;;      Locals:         0       0       0       0       0
 12694 ;;      Temps:          0       0       0       0       0
 12695 ;;      Totals:         4       0       0       0       0
 12696 ;;Total ram usage:        4 bytes
 12697 ;; Hardware stack levels used:    1
 12698 ;; Hardware stack levels required when called:    6
 12699 ;; This function calls:
 12700 ;;		Nothing
 12701 ;; This function is called by:
 12702 ;;		_FSH_EraseBlock
 12703 ;;		_FSH_WriteIntArray
 12704 ;;		_FSH_Write_IR_RF
 12705 ;;		_FSH_EraseALL
 12706 ;; This function uses a non-reentrant model
 12707 ;;
 12708                           
 12709                           	psect	text83
 12710  00146E                     __ptext83:
 12711                           	opt stack 0
 12712  00146E                     _FSH_AddressToBlock:
 12713                           	opt stack 14
 12714                           
 12715                           ;FLASH.c: 483: if(Address > 0x3600)
 12716                           
 12717                           ;incstack = 0
 12718  00146E  5004               	movf	FSH_AddressToBlock@Address+3,w,c
 12719  001470  1003               	iorwf	FSH_AddressToBlock@Address+2,w,c
 12720  001472  E105               	bnz	i1u519_20
 12721  001474  0401               	decf	FSH_AddressToBlock@Address,w,c
 12722  001476  0E36               	movlw	54
 12723  001478  5802               	subwfb	FSH_AddressToBlock@Address+1,w,c
 12724  00147A  A0D8               	btfss	status,0,c
 12725  00147C  D008               	goto	i1l5156
 12726  00147E                     i1u519_20:
 12727                           
 12728                           ;FLASH.c: 484: {
 12729                           ;FLASH.c: 485: Address = 0x3600;
 12730  00147E  0E00               	movlw	0
 12731  001480  6E01               	movwf	FSH_AddressToBlock@Address,c
 12732  001482  0E36               	movlw	54
 12733  001484  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 12734  001486  0E00               	movlw	0
 12735  001488  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 12736  00148A  0E00               	movlw	0
 12737  00148C  6E04               	movwf	FSH_AddressToBlock@Address+3,c
 12738  00148E                     i1l5156:
 12739                           
 12740                           ;FLASH.c: 486: }
 12741                           ;FLASH.c: 487: TBLPTRU = (Address & 0x002F0000) >> 16;
 12742  00148E  5003               	movf	FSH_AddressToBlock@Address+2,w,c
 12743  001490  0B2F               	andlw	47
 12744  001492  6EF8               	movwf	tblptru,c	;volatile
 12745                           
 12746                           ;FLASH.c: 488: TBLPTRH = (Address & 0x0000FF00) >> 8;
 12747  001494  C002  FFF7         	movff	FSH_AddressToBlock@Address+1,tblptrh	;volatile
 12748                           
 12749                           ;FLASH.c: 489: TBLPTRL = (Address & 0x000000FF);
 12750  001498  C001  FFF6         	movff	FSH_AddressToBlock@Address,tblptrl	;volatile
 12751  00149C  0012               	return		;funcret
 12752  00149E                     __end_of_FSH_AddressToBlock:
 12753                           	opt stack 0
 12754                           pclatu	equ	0xFFB
 12755                           pclath	equ	0xFFA
 12756                           tblptru	equ	0xFF8
 12757                           tblptrh	equ	0xFF7
 12758                           tblptrl	equ	0xFF6
 12759                           tablat	equ	0xFF5
 12760                           prodh	equ	0xFF4
 12761                           prodl	equ	0xFF3
 12762                           intcon	equ	0xFF2
 12763                           intcon2	equ	0xFF1
 12764                           intcon3	equ	0xFF0
 12765                           postinc0	equ	0xFEE
 12766                           fsr0h	equ	0xFEA
 12767                           fsr0l	equ	0xFE9
 12768                           wreg	equ	0xFE8
 12769                           postdec1	equ	0xFE5
 12770                           fsr1h	equ	0xFE2
 12771                           fsr1l	equ	0xFE1
 12772                           bsr	equ	0xFE0
 12773                           postinc2	equ	0xFDE
 12774                           postdec2	equ	0xFDD
 12775                           plusw2	equ	0xFDB
 12776                           fsr2h	equ	0xFDA
 12777                           fsr2l	equ	0xFD9
 12778                           status	equ	0xFD8
 12779                           
 12780 ;; *************** function _ADC_CalculateVoltage *****************
 12781 ;; Defined at:
 12782 ;;		line 140 in file "ADC.c"
 12783 ;; Parameters:    Size  Location     Type
 12784 ;;		None
 12785 ;; Auto vars:     Size  Location     Type
 12786 ;;  Voltage         3   43[COMRAM] unsigned long 
 12787 ;;  ADCcounts       2   41[COMRAM] unsigned int 
 12788 ;; Return value:  Size  Location     Type
 12789 ;;		None               void
 12790 ;; Registers used:
 12791 ;;		wreg, status,2, status,0, cstack
 12792 ;; Tracked objects:
 12793 ;;		On entry : 0/0
 12794 ;;		On exit  : 0/0
 12795 ;;		Unchanged: 0/0
 12796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12797 ;;      Params:         0       0       0       0       0
 12798 ;;      Locals:         5       0       0       0       0
 12799 ;;      Temps:          0       0       0       0       0
 12800 ;;      Totals:         5       0       0       0       0
 12801 ;;Total ram usage:        5 bytes
 12802 ;; Hardware stack levels used:    1
 12803 ;; Hardware stack levels required when called:    8
 12804 ;; This function calls:
 12805 ;;		___ftdiv
 12806 ;;		i1_ADC_ChangeChannel
 12807 ;;		i1___ftmul
 12808 ;;		i1___lwtoft
 12809 ;; This function is called by:
 12810 ;;		_low_isr
 12811 ;; This function uses a non-reentrant model
 12812 ;;
 12813                           
 12814                           	psect	text84
 12815  0009A6                     __ptext84:
 12816                           	opt stack 0
 12817  0009A6                     _ADC_CalculateVoltage:
 12818                           	opt stack 15
 12819                           
 12820                           ;ADC.c: 142: unsigned int ADCcounts;
 12821                           ;ADC.c: 143: double Voltage;
 12822                           ;ADC.c: 145: ADCcounts = ADRESH;
 12823                           
 12824                           ;incstack = 0
 12825  0009A6  CFC4 F02A          	movff	4036,ADC_CalculateVoltage@ADCcounts	;volatile
 12826  0009AA  6A2B               	clrf	ADC_CalculateVoltage@ADCcounts+1,c
 12827                           
 12828                           ;ADC.c: 146: ADCcounts <<= 8;
 12829  0009AC  502A               	movf	ADC_CalculateVoltage@ADCcounts,w,c
 12830  0009AE  6E2B               	movwf	ADC_CalculateVoltage@ADCcounts+1,c
 12831  0009B0  6A2A               	clrf	ADC_CalculateVoltage@ADCcounts,c
 12832                           
 12833                           ;ADC.c: 147: ADCcounts += ADRESL;
 12834  0009B2  50C3               	movf	4035,w,c	;volatile
 12835  0009B4  262A               	addwf	ADC_CalculateVoltage@ADCcounts,f,c
 12836  0009B6  0E00               	movlw	0
 12837  0009B8  222B               	addwfc	ADC_CalculateVoltage@ADCcounts+1,f,c
 12838                           
 12839                           ;ADC.c: 149: Voltage = ((double)ADCcounts / (1 << 10)) * 3.3;
 12840  0009BA  0E00               	movlw	0
 12841  0009BC  6E0F               	movwf	___ftdiv@f2,c
 12842  0009BE  0E80               	movlw	128
 12843  0009C0  6E10               	movwf	___ftdiv@f2+1,c
 12844  0009C2  0E44               	movlw	68
 12845  0009C4  6E11               	movwf	___ftdiv@f2+2,c
 12846  0009C6  C02A  F009         	movff	ADC_CalculateVoltage@ADCcounts,i1___lwtoft@c
 12847  0009CA  C02B  F00A         	movff	ADC_CalculateVoltage@ADCcounts+1,i1___lwtoft@c+1
 12848  0009CE  EC2E  F00B         	call	i1___lwtoft	;wreg free
 12849  0009D2  C009  F00C         	movff	?i1___lwtoft,___ftdiv@f1
 12850  0009D6  C00A  F00D         	movff	?i1___lwtoft+1,___ftdiv@f1+1
 12851  0009DA  C00B  F00E         	movff	?i1___lwtoft+2,___ftdiv@f1+2
 12852  0009DE  EC32  F003         	call	___ftdiv	;wreg free
 12853  0009E2  C00C  F01B         	movff	?___ftdiv,i1___ftmul@f1
 12854  0009E6  C00D  F01C         	movff	?___ftdiv+1,i1___ftmul@f1+1
 12855  0009EA  C00E  F01D         	movff	?___ftdiv+2,i1___ftmul@f1+2
 12856  0009EE  0E33               	movlw	51
 12857  0009F0  6E1E               	movwf	i1___ftmul@f2,c
 12858  0009F2  0E53               	movlw	83
 12859  0009F4  6E1F               	movwf	i1___ftmul@f2+1,c
 12860  0009F6  0E40               	movlw	64
 12861  0009F8  6E20               	movwf	i1___ftmul@f2+2,c
 12862  0009FA  ECCF  F001         	call	i1___ftmul	;wreg free
 12863  0009FE  C01B  F02C         	movff	?i1___ftmul,ADC_CalculateVoltage@Voltage
 12864  000A02  C01C  F02D         	movff	?i1___ftmul+1,ADC_CalculateVoltage@Voltage+1
 12865  000A06  C01D  F02E         	movff	?i1___ftmul+2,ADC_CalculateVoltage@Voltage+2
 12866                           
 12867                           ;ADC.c: 150: if(ADC_CurrentSource == 10)
 12868  000A0A  0E0A               	movlw	10
 12869  000A0C  185F               	xorwf	_ADC_CurrentSource,w,c
 12870  000A0E  A4D8               	btfss	status,2,c
 12871  000A10  D023               	goto	i1l1284
 12872                           
 12873                           ;ADC.c: 151: {
 12874                           ;ADC.c: 152: Rail_VIN = Voltage * (200000.0 + 500000.0) / 200000.0;
 12875  000A12  0EE6               	movlw	230
 12876  000A14  6E1E               	movwf	i1___ftmul@f2,c
 12877  000A16  0E2A               	movlw	42
 12878  000A18  6E1F               	movwf	i1___ftmul@f2+1,c
 12879  000A1A  0E49               	movlw	73
 12880  000A1C  6E20               	movwf	i1___ftmul@f2+2,c
 12881  000A1E  C02C  F01B         	movff	ADC_CalculateVoltage@Voltage,i1___ftmul@f1
 12882  000A22  C02D  F01C         	movff	ADC_CalculateVoltage@Voltage+1,i1___ftmul@f1+1
 12883  000A26  C02E  F01D         	movff	ADC_CalculateVoltage@Voltage+2,i1___ftmul@f1+2
 12884  000A2A  ECCF  F001         	call	i1___ftmul	;wreg free
 12885  000A2E  C01B  F00C         	movff	?i1___ftmul,___ftdiv@f1
 12886  000A32  C01C  F00D         	movff	?i1___ftmul+1,___ftdiv@f1+1
 12887  000A36  C01D  F00E         	movff	?i1___ftmul+2,___ftdiv@f1+2
 12888  000A3A  0E50               	movlw	80
 12889  000A3C  6E0F               	movwf	___ftdiv@f2,c
 12890  000A3E  0E43               	movlw	67
 12891  000A40  6E10               	movwf	___ftdiv@f2+1,c
 12892  000A42  0E48               	movlw	72
 12893  000A44  6E11               	movwf	___ftdiv@f2+2,c
 12894  000A46  EC32  F003         	call	___ftdiv	;wreg free
 12895  000A4A  C00C  F0CA         	movff	?___ftdiv,_Rail_VIN
 12896  000A4E  C00D  F0CB         	movff	?___ftdiv+1,_Rail_VIN+1
 12897  000A52  C00E  F0CC         	movff	?___ftdiv+2,_Rail_VIN+2
 12898                           
 12899                           ;ADC.c: 153: }
 12900  000A56  D006               	goto	i1l6822
 12901  000A58                     i1l1284:
 12902                           
 12903                           ;ADC.c: 154: else
 12904                           ;ADC.c: 155: {
 12905                           ;ADC.c: 156: Rail_RSSI = Voltage;
 12906  000A58  C02C  F04C         	movff	ADC_CalculateVoltage@Voltage,_Rail_RSSI
 12907  000A5C  C02D  F04D         	movff	ADC_CalculateVoltage@Voltage+1,_Rail_RSSI+1
 12908  000A60  C02E  F04E         	movff	ADC_CalculateVoltage@Voltage+2,_Rail_RSSI+2
 12909  000A64                     i1l6822:
 12910                           
 12911                           ;ADC.c: 157: }
 12912                           ;ADC.c: 158: ADC_ChangeChannel();
 12913  000A64  EC40  F00B         	call	i1_ADC_ChangeChannel	;wreg free
 12914  000A68  0012               	return		;funcret
 12915  000A6A                     __end_of_ADC_CalculateVoltage:
 12916                           	opt stack 0
 12917                           pclatu	equ	0xFFB
 12918                           pclath	equ	0xFFA
 12919                           tblptru	equ	0xFF8
 12920                           tblptrh	equ	0xFF7
 12921                           tblptrl	equ	0xFF6
 12922                           tablat	equ	0xFF5
 12923                           prodh	equ	0xFF4
 12924                           prodl	equ	0xFF3
 12925                           intcon	equ	0xFF2
 12926                           intcon2	equ	0xFF1
 12927                           intcon3	equ	0xFF0
 12928                           postinc0	equ	0xFEE
 12929                           fsr0h	equ	0xFEA
 12930                           fsr0l	equ	0xFE9
 12931                           wreg	equ	0xFE8
 12932                           postdec1	equ	0xFE5
 12933                           fsr1h	equ	0xFE2
 12934                           fsr1l	equ	0xFE1
 12935                           bsr	equ	0xFE0
 12936                           postinc2	equ	0xFDE
 12937                           postdec2	equ	0xFDD
 12938                           plusw2	equ	0xFDB
 12939                           fsr2h	equ	0xFDA
 12940                           fsr2l	equ	0xFD9
 12941                           status	equ	0xFD8
 12942                           
 12943 ;; *************** function i1___lwtoft *****************
 12944 ;; Defined at:
 12945 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
 12946 ;; Parameters:    Size  Location     Type
 12947 ;;  c               2    8[COMRAM] unsigned int 
 12948 ;; Auto vars:     Size  Location     Type
 12949 ;;		None
 12950 ;; Return value:  Size  Location     Type
 12951 ;;                  3    8[COMRAM] float 
 12952 ;; Registers used:
 12953 ;;		wreg, status,2, status,0, cstack
 12954 ;; Tracked objects:
 12955 ;;		On entry : 0/0
 12956 ;;		On exit  : 0/0
 12957 ;;		Unchanged: 0/0
 12958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12959 ;;      Params:         3       0       0       0       0
 12960 ;;      Locals:         0       0       0       0       0
 12961 ;;      Temps:          0       0       0       0       0
 12962 ;;      Totals:         3       0       0       0       0
 12963 ;;Total ram usage:        3 bytes
 12964 ;; Hardware stack levels used:    1
 12965 ;; Hardware stack levels required when called:    7
 12966 ;; This function calls:
 12967 ;;		i1___ftpack
 12968 ;; This function is called by:
 12969 ;;		_IR_CheckCode
 12970 ;;		_ADC_CalculateVoltage
 12971 ;; This function uses a non-reentrant model
 12972 ;;
 12973                           
 12974                           	psect	text85
 12975  00165C                     __ptext85:
 12976                           	opt stack 0
 12977  00165C                     i1___lwtoft:
 12978                           	opt stack 15
 12979                           
 12980                           ;incstack = 0
 12981  00165C  C009  F001         	movff	i1___lwtoft@c,i1___ftpack@arg
 12982  001660  C00A  F002         	movff	i1___lwtoft@c+1,i1___ftpack@arg+1
 12983  001664  6A03               	clrf	i1___ftpack@arg+2,c
 12984  001666  0E8E               	movlw	142
 12985  001668  6E04               	movwf	i1___ftpack@exp,c
 12986  00166A  0E00               	movlw	0
 12987  00166C  6E05               	movwf	i1___ftpack@sign,c
 12988  00166E  EC93  F005         	call	i1___ftpack	;wreg free
 12989  001672  C001  F009         	movff	?i1___ftpack,?i1___lwtoft
 12990  001676  C002  F00A         	movff	?i1___ftpack+1,?i1___lwtoft+1
 12991  00167A  C003  F00B         	movff	?i1___ftpack+2,?i1___lwtoft+2
 12992  00167E  0012               	return	
 12993  001680                     __end_ofi1___lwtoft:
 12994                           	opt stack 0
 12995                           pclatu	equ	0xFFB
 12996                           pclath	equ	0xFFA
 12997                           tblptru	equ	0xFF8
 12998                           tblptrh	equ	0xFF7
 12999                           tblptrl	equ	0xFF6
 13000                           tablat	equ	0xFF5
 13001                           prodh	equ	0xFF4
 13002                           prodl	equ	0xFF3
 13003                           intcon	equ	0xFF2
 13004                           intcon2	equ	0xFF1
 13005                           intcon3	equ	0xFF0
 13006                           postinc0	equ	0xFEE
 13007                           fsr0h	equ	0xFEA
 13008                           fsr0l	equ	0xFE9
 13009                           wreg	equ	0xFE8
 13010                           postdec1	equ	0xFE5
 13011                           fsr1h	equ	0xFE2
 13012                           fsr1l	equ	0xFE1
 13013                           bsr	equ	0xFE0
 13014                           postinc2	equ	0xFDE
 13015                           postdec2	equ	0xFDD
 13016                           plusw2	equ	0xFDB
 13017                           fsr2h	equ	0xFDA
 13018                           fsr2l	equ	0xFD9
 13019                           status	equ	0xFD8
 13020                           
 13021 ;; *************** function i1___ftmul *****************
 13022 ;; Defined at:
 13023 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
 13024 ;; Parameters:    Size  Location     Type
 13025 ;;  f1              3   26[COMRAM] float 
 13026 ;;  f2              3   29[COMRAM] float 
 13027 ;; Auto vars:     Size  Location     Type
 13028 ;;  __ftmul         3   36[COMRAM] unsigned um
 13029 ;;  __ftmul         1   40[COMRAM] unsigned char 
 13030 ;;  __ftmul         1   39[COMRAM] unsigned char 
 13031 ;;  __ftmul         1   35[COMRAM] unsigned char 
 13032 ;; Return value:  Size  Location     Type
 13033 ;;                  3   26[COMRAM] float 
 13034 ;; Registers used:
 13035 ;;		wreg, status,2, status,0, cstack
 13036 ;; Tracked objects:
 13037 ;;		On entry : 0/0
 13038 ;;		On exit  : 0/0
 13039 ;;		Unchanged: 0/0
 13040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13041 ;;      Params:         6       0       0       0       0
 13042 ;;      Locals:         6       0       0       0       0
 13043 ;;      Temps:          3       0       0       0       0
 13044 ;;      Totals:        15       0       0       0       0
 13045 ;;Total ram usage:       15 bytes
 13046 ;; Hardware stack levels used:    1
 13047 ;; Hardware stack levels required when called:    7
 13048 ;; This function calls:
 13049 ;;		i1___ftpack
 13050 ;; This function is called by:
 13051 ;;		_IR_CheckCode
 13052 ;;		_ADC_CalculateVoltage
 13053 ;; This function uses a non-reentrant model
 13054 ;;
 13055                           
 13056                           	psect	text86
 13057  00039E                     __ptext86:
 13058                           	opt stack 0
 13059  00039E                     i1___ftmul:
 13060                           	opt stack 15
 13061                           
 13062                           ;incstack = 0
 13063  00039E  C01D  F021         	movff	i1___ftmul@f1+2,??i1___ftmul
 13064  0003A2  6A22               	clrf	(??i1___ftmul+1)& (0+255),c
 13065  0003A4  6A23               	clrf	(??i1___ftmul+2)& (0+255),c
 13066  0003A6  341C               	rlcf	i1___ftmul@f1+1,w,c
 13067  0003A8  3621               	rlcf	??i1___ftmul& (0+255),f,c
 13068  0003AA  E301               	bnc	u698_21
 13069  0003AC  8022               	bsf	(??i1___ftmul+1)& (0+255),0,c
 13070  0003AE                     u698_21:
 13071  0003AE  5021               	movf	??i1___ftmul,w,c
 13072  0003B0  6E24               	movwf	i1___ftmul@exp,c
 13073  0003B2  5024               	movf	i1___ftmul@exp,w,c
 13074  0003B4  A4D8               	btfss	status,2,c
 13075  0003B6  D007               	goto	i1l6408
 13076  0003B8  0E00               	movlw	0
 13077  0003BA  6E1B               	movwf	?i1___ftmul,c
 13078  0003BC  0E00               	movlw	0
 13079  0003BE  6E1C               	movwf	?i1___ftmul+1,c
 13080  0003C0  0E00               	movlw	0
 13081  0003C2  6E1D               	movwf	?i1___ftmul+2,c
 13082  0003C4  0012               	return	
 13083  0003C6                     i1l6408:
 13084  0003C6  C020  F021         	movff	i1___ftmul@f2+2,??i1___ftmul
 13085  0003CA  6A22               	clrf	(??i1___ftmul+1)& (0+255),c
 13086  0003CC  6A23               	clrf	(??i1___ftmul+2)& (0+255),c
 13087  0003CE  341F               	rlcf	i1___ftmul@f2+1,w,c
 13088  0003D0  3621               	rlcf	??i1___ftmul& (0+255),f,c
 13089  0003D2  E301               	bnc	u700_21
 13090  0003D4  8022               	bsf	(??i1___ftmul+1)& (0+255),0,c
 13091  0003D6                     u700_21:
 13092  0003D6  5021               	movf	??i1___ftmul,w,c
 13093  0003D8  6E29               	movwf	i1___ftmul@sign,c
 13094  0003DA  5029               	movf	i1___ftmul@sign,w,c
 13095  0003DC  A4D8               	btfss	status,2,c
 13096  0003DE  D007               	goto	i1l6414
 13097  0003E0  0E00               	movlw	0
 13098  0003E2  6E1B               	movwf	?i1___ftmul,c
 13099  0003E4  0E00               	movlw	0
 13100  0003E6  6E1C               	movwf	?i1___ftmul+1,c
 13101  0003E8  0E00               	movlw	0
 13102  0003EA  6E1D               	movwf	?i1___ftmul+2,c
 13103  0003EC  0012               	return	
 13104  0003EE                     i1l6414:
 13105  0003EE  5029               	movf	i1___ftmul@sign,w,c
 13106  0003F0  0F7B               	addlw	123
 13107  0003F2  2624               	addwf	i1___ftmul@exp,f,c
 13108  0003F4  C01D  F029         	movff	i1___ftmul@f1+2,i1___ftmul@sign
 13109  0003F8  5020               	movf	i1___ftmul@f2+2,w,c
 13110  0003FA  1A29               	xorwf	i1___ftmul@sign,f,c
 13111  0003FC  0E80               	movlw	128
 13112  0003FE  1629               	andwf	i1___ftmul@sign,f,c
 13113  000400  8E1C               	bsf	i1___ftmul@f1+1,7,c
 13114  000402  8E1F               	bsf	i1___ftmul@f2+1,7,c
 13115  000404  0EFF               	movlw	255
 13116  000406  161E               	andwf	i1___ftmul@f2,f,c
 13117  000408  0EFF               	movlw	255
 13118  00040A  161F               	andwf	i1___ftmul@f2+1,f,c
 13119  00040C  0E00               	movlw	0
 13120  00040E  1620               	andwf	i1___ftmul@f2+2,f,c
 13121  000410  0E00               	movlw	0
 13122  000412  6E25               	movwf	i1___ftmul@f3_as_product,c
 13123  000414  0E00               	movlw	0
 13124  000416  6E26               	movwf	i1___ftmul@f3_as_product+1,c
 13125  000418  0E00               	movlw	0
 13126  00041A  6E27               	movwf	i1___ftmul@f3_as_product+2,c
 13127  00041C  0E07               	movlw	7
 13128  00041E  6E28               	movwf	i1___ftmul@cntr,c
 13129  000420                     i1l6428:
 13130  000420  A01B               	btfss	i1___ftmul@f1,0,c
 13131  000422  D006               	goto	i1l6432
 13132  000424  501E               	movf	i1___ftmul@f2,w,c
 13133  000426  2625               	addwf	i1___ftmul@f3_as_product,f,c
 13134  000428  501F               	movf	i1___ftmul@f2+1,w,c
 13135  00042A  2226               	addwfc	i1___ftmul@f3_as_product+1,f,c
 13136  00042C  5020               	movf	i1___ftmul@f2+2,w,c
 13137  00042E  2227               	addwfc	i1___ftmul@f3_as_product+2,f,c
 13138  000430                     i1l6432:
 13139  000430  90D8               	bcf	status,0,c
 13140  000432  321D               	rrcf	i1___ftmul@f1+2,f,c
 13141  000434  321C               	rrcf	i1___ftmul@f1+1,f,c
 13142  000436  321B               	rrcf	i1___ftmul@f1,f,c
 13143  000438  90D8               	bcf	status,0,c
 13144  00043A  361E               	rlcf	i1___ftmul@f2,f,c
 13145  00043C  361F               	rlcf	i1___ftmul@f2+1,f,c
 13146  00043E  3620               	rlcf	i1___ftmul@f2+2,f,c
 13147  000440  2E28               	decfsz	i1___ftmul@cntr,f,c
 13148  000442  D7EE               	goto	i1l6428
 13149  000444  0E09               	movlw	9
 13150  000446  6E28               	movwf	i1___ftmul@cntr,c
 13151  000448                     i1l6438:
 13152  000448  A01B               	btfss	i1___ftmul@f1,0,c
 13153  00044A  D006               	goto	i1l6442
 13154  00044C  501E               	movf	i1___ftmul@f2,w,c
 13155  00044E  2625               	addwf	i1___ftmul@f3_as_product,f,c
 13156  000450  501F               	movf	i1___ftmul@f2+1,w,c
 13157  000452  2226               	addwfc	i1___ftmul@f3_as_product+1,f,c
 13158  000454  5020               	movf	i1___ftmul@f2+2,w,c
 13159  000456  2227               	addwfc	i1___ftmul@f3_as_product+2,f,c
 13160  000458                     i1l6442:
 13161  000458  90D8               	bcf	status,0,c
 13162  00045A  321D               	rrcf	i1___ftmul@f1+2,f,c
 13163  00045C  321C               	rrcf	i1___ftmul@f1+1,f,c
 13164  00045E  321B               	rrcf	i1___ftmul@f1,f,c
 13165  000460  90D8               	bcf	status,0,c
 13166  000462  3227               	rrcf	i1___ftmul@f3_as_product+2,f,c
 13167  000464  3226               	rrcf	i1___ftmul@f3_as_product+1,f,c
 13168  000466  3225               	rrcf	i1___ftmul@f3_as_product,f,c
 13169  000468  2E28               	decfsz	i1___ftmul@cntr,f,c
 13170  00046A  D7EE               	goto	i1l6438
 13171  00046C  C025  F001         	movff	i1___ftmul@f3_as_product,i1___ftpack@arg
 13172  000470  C026  F002         	movff	i1___ftmul@f3_as_product+1,i1___ftpack@arg+1
 13173  000474  C027  F003         	movff	i1___ftmul@f3_as_product+2,i1___ftpack@arg+2
 13174  000478  C024  F004         	movff	i1___ftmul@exp,i1___ftpack@exp
 13175  00047C  C029  F005         	movff	i1___ftmul@sign,i1___ftpack@sign
 13176  000480  EC93  F005         	call	i1___ftpack	;wreg free
 13177  000484  C001  F01B         	movff	?i1___ftpack,?i1___ftmul
 13178  000488  C002  F01C         	movff	?i1___ftpack+1,?i1___ftmul+1
 13179  00048C  C003  F01D         	movff	?i1___ftpack+2,?i1___ftmul+2
 13180  000490  0012               	return	
 13181  000492                     __end_ofi1___ftmul:
 13182                           	opt stack 0
 13183                           pclatu	equ	0xFFB
 13184                           pclath	equ	0xFFA
 13185                           tblptru	equ	0xFF8
 13186                           tblptrh	equ	0xFF7
 13187                           tblptrl	equ	0xFF6
 13188                           tablat	equ	0xFF5
 13189                           prodh	equ	0xFF4
 13190                           prodl	equ	0xFF3
 13191                           intcon	equ	0xFF2
 13192                           intcon2	equ	0xFF1
 13193                           intcon3	equ	0xFF0
 13194                           postinc0	equ	0xFEE
 13195                           fsr0h	equ	0xFEA
 13196                           fsr0l	equ	0xFE9
 13197                           wreg	equ	0xFE8
 13198                           postdec1	equ	0xFE5
 13199                           fsr1h	equ	0xFE2
 13200                           fsr1l	equ	0xFE1
 13201                           bsr	equ	0xFE0
 13202                           postinc2	equ	0xFDE
 13203                           postdec2	equ	0xFDD
 13204                           plusw2	equ	0xFDB
 13205                           fsr2h	equ	0xFDA
 13206                           fsr2l	equ	0xFD9
 13207                           status	equ	0xFD8
 13208                           
 13209 ;; *************** function i1_ADC_ChangeChannel *****************
 13210 ;; Defined at:
 13211 ;;		line 166 in file "ADC.c"
 13212 ;; Parameters:    Size  Location     Type
 13213 ;;		None
 13214 ;; Auto vars:     Size  Location     Type
 13215 ;;		None
 13216 ;; Return value:  Size  Location     Type
 13217 ;;		None               void
 13218 ;; Registers used:
 13219 ;;		wreg, status,2, status,0
 13220 ;; Tracked objects:
 13221 ;;		On entry : 0/0
 13222 ;;		On exit  : 0/0
 13223 ;;		Unchanged: 0/0
 13224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13225 ;;      Params:         0       0       0       0       0
 13226 ;;      Locals:         0       0       0       0       0
 13227 ;;      Temps:          0       0       0       0       0
 13228 ;;      Totals:         0       0       0       0       0
 13229 ;;Total ram usage:        0 bytes
 13230 ;; Hardware stack levels used:    1
 13231 ;; Hardware stack levels required when called:    6
 13232 ;; This function calls:
 13233 ;;		Nothing
 13234 ;; This function is called by:
 13235 ;;		_ADC_CalculateVoltage
 13236 ;; This function uses a non-reentrant model
 13237 ;;
 13238                           
 13239                           	psect	text87
 13240  001680                     __ptext87:
 13241                           	opt stack 0
 13242  001680                     i1_ADC_ChangeChannel:
 13243                           	opt stack 16
 13244                           
 13245                           ;ADC.c: 168: if(ADC_CurrentSource == 10)
 13246                           
 13247                           ;incstack = 0
 13248  001680  0E0A               	movlw	10
 13249  001682  185F               	xorwf	_ADC_CurrentSource,w,c
 13250  001684  A4D8               	btfss	status,2,c
 13251  001686  D007               	goto	i1l6362
 13252                           
 13253                           ;ADC.c: 169: {
 13254                           ;ADC.c: 170: ADC_CurrentSource = 11;
 13255  001688  0E0B               	movlw	11
 13256  00168A  6E5F               	movwf	_ADC_CurrentSource,c
 13257                           
 13258                           ;ADC.c: 171: ADCON0bits.CHS = 1;
 13259  00168C  50C2               	movf	4034,w,c	;volatile
 13260  00168E  0BC3               	andlw	-61
 13261  001690  0904               	iorlw	4
 13262  001692  6EC2               	movwf	4034,c	;volatile
 13263                           
 13264                           ;ADC.c: 172: }
 13265  001694  0012               	return	
 13266  001696                     i1l6362:
 13267                           
 13268                           ;ADC.c: 173: else
 13269                           ;ADC.c: 174: {
 13270                           ;ADC.c: 175: ADC_CurrentSource = 10;
 13271  001696  0E0A               	movlw	10
 13272  001698  6E5F               	movwf	_ADC_CurrentSource,c
 13273                           
 13274                           ;ADC.c: 176: ADCON0bits.CHS = 0;
 13275  00169A  94C2               	bcf	4034,2,c	;volatile
 13276  00169C  96C2               	bcf	4034,3,c	;volatile
 13277  00169E  98C2               	bcf	4034,4,c	;volatile
 13278  0016A0  9AC2               	bcf	4034,5,c	;volatile
 13279  0016A2  0012               	return	
 13280  0016A4                     __end_ofi1_ADC_ChangeChannel:
 13281                           	opt stack 0
 13282                           pclatu	equ	0xFFB
 13283                           pclath	equ	0xFFA
 13284                           tblptru	equ	0xFF8
 13285                           tblptrh	equ	0xFF7
 13286                           tblptrl	equ	0xFF6
 13287                           tablat	equ	0xFF5
 13288                           prodh	equ	0xFF4
 13289                           prodl	equ	0xFF3
 13290                           intcon	equ	0xFF2
 13291                           intcon2	equ	0xFF1
 13292                           intcon3	equ	0xFF0
 13293                           postinc0	equ	0xFEE
 13294                           fsr0h	equ	0xFEA
 13295                           fsr0l	equ	0xFE9
 13296                           wreg	equ	0xFE8
 13297                           postdec1	equ	0xFE5
 13298                           fsr1h	equ	0xFE2
 13299                           fsr1l	equ	0xFE1
 13300                           bsr	equ	0xFE0
 13301                           postinc2	equ	0xFDE
 13302                           postdec2	equ	0xFDD
 13303                           plusw2	equ	0xFDB
 13304                           fsr2h	equ	0xFDA
 13305                           fsr2l	equ	0xFD9
 13306                           status	equ	0xFD8
 13307                           
 13308 ;; *************** function ___ftdiv *****************
 13309 ;; Defined at:
 13310 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
 13311 ;; Parameters:    Size  Location     Type
 13312 ;;  f1              3   11[COMRAM] float 
 13313 ;;  f2              3   14[COMRAM] float 
 13314 ;; Auto vars:     Size  Location     Type
 13315 ;;  f3              3   21[COMRAM] float 
 13316 ;;  sign            1   25[COMRAM] unsigned char 
 13317 ;;  exp             1   24[COMRAM] unsigned char 
 13318 ;;  cntr            1   20[COMRAM] unsigned char 
 13319 ;; Return value:  Size  Location     Type
 13320 ;;                  3   11[COMRAM] float 
 13321 ;; Registers used:
 13322 ;;		wreg, status,2, status,0, cstack
 13323 ;; Tracked objects:
 13324 ;;		On entry : 0/0
 13325 ;;		On exit  : 0/0
 13326 ;;		Unchanged: 0/0
 13327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13328 ;;      Params:         6       0       0       0       0
 13329 ;;      Locals:         6       0       0       0       0
 13330 ;;      Temps:          3       0       0       0       0
 13331 ;;      Totals:        15       0       0       0       0
 13332 ;;Total ram usage:       15 bytes
 13333 ;; Hardware stack levels used:    1
 13334 ;; Hardware stack levels required when called:    7
 13335 ;; This function calls:
 13336 ;;		i1___ftpack
 13337 ;; This function is called by:
 13338 ;;		_ADC_CalculateVoltage
 13339 ;;		_MSC_Scale
 13340 ;; This function uses a non-reentrant model
 13341 ;;
 13342                           
 13343                           	psect	text88
 13344  000664                     __ptext88:
 13345                           	opt stack 0
 13346  000664                     ___ftdiv:
 13347                           	opt stack 15
 13348                           
 13349                           ;incstack = 0
 13350  000664  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
 13351  000668  6A13               	clrf	(??___ftdiv+1)& (0+255),c
 13352  00066A  6A14               	clrf	(??___ftdiv+2)& (0+255),c
 13353  00066C  340D               	rlcf	___ftdiv@f1+1,w,c
 13354  00066E  3612               	rlcf	??___ftdiv& (0+255),f,c
 13355  000670  E301               	bnc	u637_21
 13356  000672  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
 13357  000674                     u637_21:
 13358  000674  5012               	movf	??___ftdiv,w,c
 13359  000676  6E19               	movwf	___ftdiv@exp,c
 13360  000678  5019               	movf	___ftdiv@exp,w,c
 13361  00067A  A4D8               	btfss	status,2,c
 13362  00067C  D007               	goto	i1l5984
 13363  00067E  0E00               	movlw	0
 13364  000680  6E0C               	movwf	?___ftdiv,c
 13365  000682  0E00               	movlw	0
 13366  000684  6E0D               	movwf	?___ftdiv+1,c
 13367  000686  0E00               	movlw	0
 13368  000688  6E0E               	movwf	?___ftdiv+2,c
 13369  00068A  0012               	return	
 13370  00068C                     i1l5984:
 13371  00068C  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
 13372  000690  6A13               	clrf	(??___ftdiv+1)& (0+255),c
 13373  000692  6A14               	clrf	(??___ftdiv+2)& (0+255),c
 13374  000694  3410               	rlcf	___ftdiv@f2+1,w,c
 13375  000696  3612               	rlcf	??___ftdiv& (0+255),f,c
 13376  000698  E301               	bnc	u639_21
 13377  00069A  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
 13378  00069C                     u639_21:
 13379  00069C  5012               	movf	??___ftdiv,w,c
 13380  00069E  6E1A               	movwf	___ftdiv@sign,c
 13381  0006A0  501A               	movf	___ftdiv@sign,w,c
 13382  0006A2  A4D8               	btfss	status,2,c
 13383  0006A4  D007               	goto	i1l5990
 13384  0006A6  0E00               	movlw	0
 13385  0006A8  6E0C               	movwf	?___ftdiv,c
 13386  0006AA  0E00               	movlw	0
 13387  0006AC  6E0D               	movwf	?___ftdiv+1,c
 13388  0006AE  0E00               	movlw	0
 13389  0006B0  6E0E               	movwf	?___ftdiv+2,c
 13390  0006B2  0012               	return	
 13391  0006B4                     i1l5990:
 13392  0006B4  0E00               	movlw	0
 13393  0006B6  6E16               	movwf	___ftdiv@f3,c
 13394  0006B8  0E00               	movlw	0
 13395  0006BA  6E17               	movwf	___ftdiv@f3+1,c
 13396  0006BC  0E00               	movlw	0
 13397  0006BE  6E18               	movwf	___ftdiv@f3+2,c
 13398  0006C0  501A               	movf	___ftdiv@sign,w,c
 13399  0006C2  0F89               	addlw	137
 13400  0006C4  5E19               	subwf	___ftdiv@exp,f,c
 13401  0006C6  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
 13402  0006CA  5011               	movf	___ftdiv@f2+2,w,c
 13403  0006CC  1A1A               	xorwf	___ftdiv@sign,f,c
 13404  0006CE  0E80               	movlw	128
 13405  0006D0  161A               	andwf	___ftdiv@sign,f,c
 13406  0006D2  8E0D               	bsf	___ftdiv@f1+1,7,c
 13407  0006D4  0EFF               	movlw	255
 13408  0006D6  160C               	andwf	___ftdiv@f1,f,c
 13409  0006D8  0EFF               	movlw	255
 13410  0006DA  160D               	andwf	___ftdiv@f1+1,f,c
 13411  0006DC  0E00               	movlw	0
 13412  0006DE  160E               	andwf	___ftdiv@f1+2,f,c
 13413  0006E0  8E10               	bsf	___ftdiv@f2+1,7,c
 13414  0006E2  0EFF               	movlw	255
 13415  0006E4  160F               	andwf	___ftdiv@f2,f,c
 13416  0006E6  0EFF               	movlw	255
 13417  0006E8  1610               	andwf	___ftdiv@f2+1,f,c
 13418  0006EA  0E00               	movlw	0
 13419  0006EC  1611               	andwf	___ftdiv@f2+2,f,c
 13420  0006EE  0E18               	movlw	24
 13421  0006F0  6E15               	movwf	___ftdiv@cntr,c
 13422  0006F2                     i1l6010:
 13423  0006F2  90D8               	bcf	status,0,c
 13424  0006F4  3616               	rlcf	___ftdiv@f3,f,c
 13425  0006F6  3617               	rlcf	___ftdiv@f3+1,f,c
 13426  0006F8  3618               	rlcf	___ftdiv@f3+2,f,c
 13427  0006FA  500F               	movf	___ftdiv@f2,w,c
 13428  0006FC  5C0C               	subwf	___ftdiv@f1,w,c
 13429  0006FE  5010               	movf	___ftdiv@f2+1,w,c
 13430  000700  580D               	subwfb	___ftdiv@f1+1,w,c
 13431  000702  5011               	movf	___ftdiv@f2+2,w,c
 13432  000704  580E               	subwfb	___ftdiv@f1+2,w,c
 13433  000706  A0D8               	btfss	status,0,c
 13434  000708  D007               	goto	i1l1574
 13435  00070A  500F               	movf	___ftdiv@f2,w,c
 13436  00070C  5E0C               	subwf	___ftdiv@f1,f,c
 13437  00070E  5010               	movf	___ftdiv@f2+1,w,c
 13438  000710  5A0D               	subwfb	___ftdiv@f1+1,f,c
 13439  000712  5011               	movf	___ftdiv@f2+2,w,c
 13440  000714  5A0E               	subwfb	___ftdiv@f1+2,f,c
 13441  000716  8016               	bsf	___ftdiv@f3,0,c
 13442  000718                     i1l1574:
 13443  000718  90D8               	bcf	status,0,c
 13444  00071A  360C               	rlcf	___ftdiv@f1,f,c
 13445  00071C  360D               	rlcf	___ftdiv@f1+1,f,c
 13446  00071E  360E               	rlcf	___ftdiv@f1+2,f,c
 13447  000720  2E15               	decfsz	___ftdiv@cntr,f,c
 13448  000722  D7E7               	goto	i1l6010
 13449  000724  C016  F001         	movff	___ftdiv@f3,i1___ftpack@arg
 13450  000728  C017  F002         	movff	___ftdiv@f3+1,i1___ftpack@arg+1
 13451  00072C  C018  F003         	movff	___ftdiv@f3+2,i1___ftpack@arg+2
 13452  000730  C019  F004         	movff	___ftdiv@exp,i1___ftpack@exp
 13453  000734  C01A  F005         	movff	___ftdiv@sign,i1___ftpack@sign
 13454  000738  EC93  F005         	call	i1___ftpack	;wreg free
 13455  00073C  C001  F00C         	movff	?i1___ftpack,?___ftdiv
 13456  000740  C002  F00D         	movff	?i1___ftpack+1,?___ftdiv+1
 13457  000744  C003  F00E         	movff	?i1___ftpack+2,?___ftdiv+2
 13458  000748  0012               	return	
 13459  00074A                     __end_of___ftdiv:
 13460                           	opt stack 0
 13461                           pclatu	equ	0xFFB
 13462                           pclath	equ	0xFFA
 13463                           tblptru	equ	0xFF8
 13464                           tblptrh	equ	0xFF7
 13465                           tblptrl	equ	0xFF6
 13466                           tablat	equ	0xFF5
 13467                           prodh	equ	0xFF4
 13468                           prodl	equ	0xFF3
 13469                           intcon	equ	0xFF2
 13470                           intcon2	equ	0xFF1
 13471                           intcon3	equ	0xFF0
 13472                           postinc0	equ	0xFEE
 13473                           fsr0h	equ	0xFEA
 13474                           fsr0l	equ	0xFE9
 13475                           wreg	equ	0xFE8
 13476                           postdec1	equ	0xFE5
 13477                           fsr1h	equ	0xFE2
 13478                           fsr1l	equ	0xFE1
 13479                           bsr	equ	0xFE0
 13480                           postinc2	equ	0xFDE
 13481                           postdec2	equ	0xFDD
 13482                           plusw2	equ	0xFDB
 13483                           fsr2h	equ	0xFDA
 13484                           fsr2l	equ	0xFD9
 13485                           status	equ	0xFD8
 13486                           
 13487 ;; *************** function i1___ftpack *****************
 13488 ;; Defined at:
 13489 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 13490 ;; Parameters:    Size  Location     Type
 13491 ;;  arg             3    0[COMRAM] unsigned um
 13492 ;;  exp             1    3[COMRAM] unsigned char 
 13493 ;;  sign            1    4[COMRAM] unsigned char 
 13494 ;; Auto vars:     Size  Location     Type
 13495 ;;		None
 13496 ;; Return value:  Size  Location     Type
 13497 ;;                  3    0[COMRAM] float 
 13498 ;; Registers used:
 13499 ;;		wreg, status,2, status,0
 13500 ;; Tracked objects:
 13501 ;;		On entry : 0/0
 13502 ;;		On exit  : 0/0
 13503 ;;		Unchanged: 0/0
 13504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13505 ;;      Params:         5       0       0       0       0
 13506 ;;      Locals:         0       0       0       0       0
 13507 ;;      Temps:          3       0       0       0       0
 13508 ;;      Totals:         8       0       0       0       0
 13509 ;;Total ram usage:        8 bytes
 13510 ;; Hardware stack levels used:    1
 13511 ;; Hardware stack levels required when called:    6
 13512 ;; This function calls:
 13513 ;;		Nothing
 13514 ;; This function is called by:
 13515 ;;		___ftdiv
 13516 ;;		i1___ftmul
 13517 ;;		i1___lwtoft
 13518 ;; This function uses a non-reentrant model
 13519 ;;
 13520                           
 13521                           	psect	text89
 13522  000B26                     __ptext89:
 13523                           	opt stack 0
 13524  000B26                     i1___ftpack:
 13525                           	opt stack 15
 13526                           
 13527                           ;incstack = 0
 13528  000B26  5004               	movf	i1___ftpack@exp,w,c
 13529  000B28  B4D8               	btfsc	status,2,c
 13530  000B2A  D005               	goto	i1l5560
 13531  000B2C  5001               	movf	i1___ftpack@arg,w,c
 13532  000B2E  1002               	iorwf	i1___ftpack@arg+1,w,c
 13533  000B30  1003               	iorwf	i1___ftpack@arg+2,w,c
 13534  000B32  A4D8               	btfss	status,2,c
 13535  000B34  D00C               	goto	i1l5566
 13536  000B36                     i1l5560:
 13537  000B36  0E00               	movlw	0
 13538  000B38  6E01               	movwf	?i1___ftpack,c
 13539  000B3A  0E00               	movlw	0
 13540  000B3C  6E02               	movwf	?i1___ftpack+1,c
 13541  000B3E  0E00               	movlw	0
 13542  000B40  6E03               	movwf	?i1___ftpack+2,c
 13543  000B42  0012               	return	
 13544  000B44                     i1l5564:
 13545  000B44  2A04               	incf	i1___ftpack@exp,f,c
 13546  000B46  90D8               	bcf	status,0,c
 13547  000B48  3203               	rrcf	i1___ftpack@arg+2,f,c
 13548  000B4A  3202               	rrcf	i1___ftpack@arg+1,f,c
 13549  000B4C  3201               	rrcf	i1___ftpack@arg,f,c
 13550  000B4E                     i1l5566:
 13551  000B4E  0E00               	movlw	0
 13552  000B50  1401               	andwf	i1___ftpack@arg,w,c
 13553  000B52  6E06               	movwf	??i1___ftpack& (0+255),c
 13554  000B54  0E00               	movlw	0
 13555  000B56  1402               	andwf	i1___ftpack@arg+1,w,c
 13556  000B58  6E07               	movwf	(??i1___ftpack+1)& (0+255),c
 13557  000B5A  0EFE               	movlw	254
 13558  000B5C  1403               	andwf	i1___ftpack@arg+2,w,c
 13559  000B5E  6E08               	movwf	(??i1___ftpack+2)& (0+255),c
 13560  000B60  5006               	movf	??i1___ftpack,w,c
 13561  000B62  1007               	iorwf	??i1___ftpack+1,w,c
 13562  000B64  1008               	iorwf	??i1___ftpack+2,w,c
 13563  000B66  B4D8               	btfsc	status,2,c
 13564  000B68  D00C               	goto	i1l5572
 13565  000B6A  D7EC               	goto	i1l5564
 13566  000B6C                     i1l5568:
 13567  000B6C  2A04               	incf	i1___ftpack@exp,f,c
 13568  000B6E  0E01               	movlw	1
 13569  000B70  2601               	addwf	i1___ftpack@arg,f,c
 13570  000B72  0E00               	movlw	0
 13571  000B74  2202               	addwfc	i1___ftpack@arg+1,f,c
 13572  000B76  0E00               	movlw	0
 13573  000B78  2203               	addwfc	i1___ftpack@arg+2,f,c
 13574  000B7A  90D8               	bcf	status,0,c
 13575  000B7C  3203               	rrcf	i1___ftpack@arg+2,f,c
 13576  000B7E  3202               	rrcf	i1___ftpack@arg+1,f,c
 13577  000B80  3201               	rrcf	i1___ftpack@arg,f,c
 13578  000B82                     i1l5572:
 13579  000B82  0E00               	movlw	0
 13580  000B84  1401               	andwf	i1___ftpack@arg,w,c
 13581  000B86  6E06               	movwf	??i1___ftpack& (0+255),c
 13582  000B88  0E00               	movlw	0
 13583  000B8A  1402               	andwf	i1___ftpack@arg+1,w,c
 13584  000B8C  6E07               	movwf	(??i1___ftpack+1)& (0+255),c
 13585  000B8E  0EFF               	movlw	255
 13586  000B90  1403               	andwf	i1___ftpack@arg+2,w,c
 13587  000B92  6E08               	movwf	(??i1___ftpack+2)& (0+255),c
 13588  000B94  5006               	movf	??i1___ftpack,w,c
 13589  000B96  1007               	iorwf	??i1___ftpack+1,w,c
 13590  000B98  1008               	iorwf	??i1___ftpack+2,w,c
 13591  000B9A  B4D8               	btfsc	status,2,c
 13592  000B9C  D006               	goto	i1l5576
 13593  000B9E  D7E6               	goto	i1l5568
 13594  000BA0                     i1l5574:
 13595  000BA0  0604               	decf	i1___ftpack@exp,f,c
 13596  000BA2  90D8               	bcf	status,0,c
 13597  000BA4  3601               	rlcf	i1___ftpack@arg,f,c
 13598  000BA6  3602               	rlcf	i1___ftpack@arg+1,f,c
 13599  000BA8  3603               	rlcf	i1___ftpack@arg+2,f,c
 13600  000BAA                     i1l5576:
 13601  000BAA  BE02               	btfsc	i1___ftpack@arg+1,7,c
 13602  000BAC  D003               	goto	i1l1516
 13603  000BAE  0E02               	movlw	2
 13604  000BB0  6004               	cpfslt	i1___ftpack@exp,c
 13605  000BB2  D7F6               	goto	i1l5574
 13606  000BB4                     i1l1516:
 13607  000BB4  A004               	btfss	i1___ftpack@exp,0,c
 13608  000BB6  9E02               	bcf	i1___ftpack@arg+1,7,c
 13609  000BB8  90D8               	bcf	status,0,c
 13610  000BBA  3204               	rrcf	i1___ftpack@exp,f,c
 13611  000BBC  5004               	movf	i1___ftpack@exp,w,c
 13612  000BBE  1203               	iorwf	i1___ftpack@arg+2,f,c
 13613  000BC0  5005               	movf	i1___ftpack@sign,w,c
 13614  000BC2  A4D8               	btfss	status,2,c
 13615  000BC4  8E03               	bsf	i1___ftpack@arg+2,7,c
 13616  000BC6  C001  F001         	movff	i1___ftpack@arg,?i1___ftpack
 13617  000BCA  C002  F002         	movff	i1___ftpack@arg+1,?i1___ftpack+1
 13618  000BCE  C003  F003         	movff	i1___ftpack@arg+2,?i1___ftpack+2
 13619  000BD2  0012               	return	
 13620  000BD4                     __end_ofi1___ftpack:
 13621                           	opt stack 0
 13622                           pclatu	equ	0xFFB
 13623                           pclath	equ	0xFFA
 13624                           tblptru	equ	0xFF8
 13625                           tblptrh	equ	0xFF7
 13626                           tblptrl	equ	0xFF6
 13627                           tablat	equ	0xFF5
 13628                           prodh	equ	0xFF4
 13629                           prodl	equ	0xFF3
 13630                           intcon	equ	0xFF2
 13631                           intcon2	equ	0xFF1
 13632                           intcon3	equ	0xFF0
 13633                           postinc0	equ	0xFEE
 13634                           fsr0h	equ	0xFEA
 13635                           fsr0l	equ	0xFE9
 13636                           wreg	equ	0xFE8
 13637                           postdec1	equ	0xFE5
 13638                           fsr1h	equ	0xFE2
 13639                           fsr1l	equ	0xFE1
 13640                           bsr	equ	0xFE0
 13641                           postinc2	equ	0xFDE
 13642                           postdec2	equ	0xFDD
 13643                           plusw2	equ	0xFDB
 13644                           fsr2h	equ	0xFDA
 13645                           fsr2l	equ	0xFD9
 13646                           status	equ	0xFD8
 13647                           
 13648 ;; *************** function _high_isr *****************
 13649 ;; Defined at:
 13650 ;;		line 48 in file "INTERRUPTS.c"
 13651 ;; Parameters:    Size  Location     Type
 13652 ;;		None
 13653 ;; Auto vars:     Size  Location     Type
 13654 ;;  RFtemp          2   55[BANK0 ] unsigned int 
 13655 ;; Return value:  Size  Location     Type
 13656 ;;		None               void
 13657 ;; Registers used:
 13658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13659 ;; Tracked objects:
 13660 ;;		On entry : 0/0
 13661 ;;		On exit  : 0/0
 13662 ;;		Unchanged: 0/0
 13663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13664 ;;      Params:         0       0       0       0       0
 13665 ;;      Locals:         0       2       0       0       0
 13666 ;;      Temps:          0      14       0       0       0
 13667 ;;      Totals:         0      16       0       0       0
 13668 ;;Total ram usage:       16 bytes
 13669 ;; Hardware stack levels used:    1
 13670 ;; Hardware stack levels required when called:    5
 13671 ;; This function calls:
 13672 ;;		_RF_CheckCode
 13673 ;;		_TMR_Timer0Start
 13674 ;;		_TMR_Timer0Status
 13675 ;;		i2_RF_ResetData
 13676 ;;		i2_SYS_ActivityTimerReset
 13677 ;;		i2_TMR_ResetTimer0
 13678 ;;		i2_TMR_Timer0
 13679 ;; This function is called by:
 13680 ;;		Interrupt level 2
 13681 ;; This function uses a non-reentrant model
 13682 ;;
 13683                           
 13684                           	psect	intcode
 13685  000008                     __pintcode:
 13686                           	opt stack 0
 13687  000008                     _high_isr:
 13688                           	opt stack 13
 13689                           
 13690                           ;incstack = 0
 13691  000008  8260               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 13692  00000A  CFFA F0A9          	movff	pclath,??_high_isr
 13693  00000E  CFFB F0AA          	movff	pclatu,??_high_isr+1
 13694  000012  EFB3  F01C         	goto	int_func
 13695                           pclatu	equ	0xFFB
 13696                           pclath	equ	0xFFA
 13697                           tblptru	equ	0xFF8
 13698                           tblptrh	equ	0xFF7
 13699                           tblptrl	equ	0xFF6
 13700                           tablat	equ	0xFF5
 13701                           prodh	equ	0xFF4
 13702                           prodl	equ	0xFF3
 13703                           intcon	equ	0xFF2
 13704                           intcon2	equ	0xFF1
 13705                           intcon3	equ	0xFF0
 13706                           postinc0	equ	0xFEE
 13707                           fsr0h	equ	0xFEA
 13708                           fsr0l	equ	0xFE9
 13709                           wreg	equ	0xFE8
 13710                           postdec1	equ	0xFE5
 13711                           fsr1h	equ	0xFE2
 13712                           fsr1l	equ	0xFE1
 13713                           bsr	equ	0xFE0
 13714                           postinc2	equ	0xFDE
 13715                           postdec2	equ	0xFDD
 13716                           plusw2	equ	0xFDB
 13717                           fsr2h	equ	0xFDA
 13718                           fsr2l	equ	0xFD9
 13719                           status	equ	0xFD8
 13720                           
 13721                           	psect	intcode_body
 13722  003966                     __pintcode_body:
 13723                           	opt stack 13
 13724  003966                     int_func:
 13725                           	opt stack 13
 13726  003966  CFE9 F0AB          	movff	fsr0l,??_high_isr+2
 13727  00396A  CFEA F0AC          	movff	fsr0h,??_high_isr+3
 13728  00396E  CFE1 F0AD          	movff	fsr1l,??_high_isr+4
 13729  003972  CFE2 F0AE          	movff	fsr1h,??_high_isr+5
 13730  003976  CFD9 F0AF          	movff	fsr2l,??_high_isr+6
 13731  00397A  CFDA F0B0          	movff	fsr2h,??_high_isr+7
 13732  00397E  CFF3 F0B1          	movff	prodl,??_high_isr+8
 13733  003982  CFF4 F0B2          	movff	prodh,??_high_isr+9
 13734  003986  CFF6 F0B3          	movff	tblptrl,??_high_isr+10
 13735  00398A  CFF7 F0B4          	movff	tblptrh,??_high_isr+11
 13736  00398E  CFF8 F0B5          	movff	tblptru,??_high_isr+12
 13737  003992  CFF5 F0B6          	movff	tablat,??_high_isr+13
 13738                           
 13739                           ;INTERRUPTS.c: 50: unsigned int RFtemp = 0;
 13740  003996  0E00               	movlw	0
 13741  003998  0100               	movlb	0	; () banked
 13742  00399A  6FB8               	movwf	(high_isr@RFtemp+1)& (0+255),b
 13743  00399C  0E00               	movlw	0
 13744  00399E  6FB7               	movwf	high_isr@RFtemp& (0+255),b
 13745                           
 13746                           ; BSR set to: 0
 13747                           ;INTERRUPTS.c: 52: if(INTCON3bits.INT1IF || INTCON3bits.INT2IF)
 13748  0039A0  A0F0               	btfss	intcon3,0,c	;volatile
 13749                           
 13750                           ; BSR set to: 0
 13751  0039A2  B2F0               	btfsc	intcon3,1,c	;volatile
 13752  0039A4  D001               	goto	i2l6980
 13753  0039A6  D074               	goto	i2l182
 13754  0039A8                     i2l6980:
 13755                           
 13756                           ; BSR set to: 0
 13757                           ;INTERRUPTS.c: 53: {
 13758                           ;INTERRUPTS.c: 55: if(!TMR_Timer0Status())
 13759  0039A8  EC25  F00D         	call	_TMR_Timer0Status	;wreg free
 13760  0039AC  0900               	iorlw	0
 13761  0039AE  A4D8               	btfss	status,2,c
 13762  0039B0  D003               	goto	i2l185
 13763                           
 13764                           ;INTERRUPTS.c: 56: {
 13765                           ;INTERRUPTS.c: 58: TMR_Timer0Start();
 13766  0039B2  ECCC  F00C         	call	_TMR_Timer0Start	;wreg free
 13767                           
 13768                           ;INTERRUPTS.c: 59: }
 13769  0039B6  D069               	goto	i2l7022
 13770  0039B8                     i2l185:
 13771                           
 13772                           ;INTERRUPTS.c: 60: else
 13773                           ;INTERRUPTS.c: 61: {
 13774                           ;INTERRUPTS.c: 62: RFtemp = TMR0L;
 13775  0039B8  CFD6 F0B7          	movff	4054,high_isr@RFtemp	;volatile
 13776  0039BC  0100               	movlb	0	; () banked
 13777  0039BE  6BB8               	clrf	(high_isr@RFtemp+1)& (0+255),b
 13778                           
 13779                           ; BSR set to: 0
 13780                           ;INTERRUPTS.c: 63: RFtemp += (unsigned int)TMR0H << 8;
 13781  0039C0  50D7               	movf	4055,w,c	;volatile
 13782  0039C2  0100               	movlb	0	; () banked
 13783  0039C4  27B8               	addwf	(high_isr@RFtemp+1)& (0+255),f,b
 13784                           
 13785                           ; BSR set to: 0
 13786                           ;INTERRUPTS.c: 64: TMR_ResetTimer0();
 13787  0039C6  ECB8  F00A         	call	i2_TMR_ResetTimer0	;wreg free
 13788                           
 13789                           ;INTERRUPTS.c: 65: if(!RFStarted)
 13790  0039CA  0100               	movlb	0	; () banked
 13791  0039CC  51C5               	movf	_RFStarted& (0+255),w,b
 13792  0039CE  A4D8               	btfss	status,2,c
 13793  0039D0  D030               	goto	i2l187
 13794                           
 13795                           ; BSR set to: 0
 13796                           ;INTERRUPTS.c: 66: {
 13797                           ;INTERRUPTS.c: 67: if(System_State == 8)
 13798  0039D2  0E08               	movlw	8
 13799  0039D4  0100               	movlb	0	; () banked
 13800  0039D6  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
 13801  0039D8  A4D8               	btfss	status,2,c
 13802  0039DA  D018               	goto	i2l6998
 13803                           
 13804                           ; BSR set to: 0
 13805                           ;INTERRUPTS.c: 68: {
 13806                           ;INTERRUPTS.c: 69: if(RFtemp >= RF_SyncLow && RFtemp <= RF_SyncHigh)
 13807  0039DC  0100               	movlb	0	; () banked
 13808  0039DE  51BD               	movf	_RF_SyncLow& (0+255),w,b
 13809  0039E0  0100               	movlb	0	; () banked
 13810  0039E2  5DB7               	subwf	high_isr@RFtemp& (0+255),w,b
 13811  0039E4  0100               	movlb	0	; () banked
 13812  0039E6  51BE               	movf	(_RF_SyncLow+1)& (0+255),w,b
 13813  0039E8  0100               	movlb	0	; () banked
 13814  0039EA  59B8               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 13815  0039EC  A0D8               	btfss	status,0,c
 13816  0039EE  D021               	goto	i2l187
 13817                           
 13818                           ; BSR set to: 0
 13819  0039F0  0100               	movlb	0	; () banked
 13820  0039F2  51B7               	movf	high_isr@RFtemp& (0+255),w,b
 13821  0039F4  0100               	movlb	0	; () banked
 13822  0039F6  5DBB               	subwf	_RF_SyncHigh& (0+255),w,b
 13823  0039F8  0100               	movlb	0	; () banked
 13824  0039FA  51B8               	movf	(high_isr@RFtemp+1)& (0+255),w,b
 13825  0039FC  0100               	movlb	0	; () banked
 13826  0039FE  59BC               	subwfb	(_RF_SyncHigh+1)& (0+255),w,b
 13827  003A00  A0D8               	btfss	status,0,c
 13828  003A02  D017               	goto	i2l187
 13829                           
 13830                           ; BSR set to: 0
 13831                           ;INTERRUPTS.c: 70: {
 13832                           ;INTERRUPTS.c: 71: RFStarted = 1;
 13833  003A04  0E01               	movlw	1
 13834  003A06  0100               	movlb	0	; () banked
 13835  003A08  6FC5               	movwf	_RFStarted& (0+255),b
 13836                           
 13837                           ; BSR set to: 0
 13838                           ;INTERRUPTS.c: 72: }
 13839                           ;INTERRUPTS.c: 73: }
 13840  003A0A  D013               	goto	i2l187
 13841  003A0C                     i2l6998:
 13842                           
 13843                           ; BSR set to: 0
 13844                           ;INTERRUPTS.c: 74: else
 13845                           ;INTERRUPTS.c: 75: {
 13846                           ;INTERRUPTS.c: 76: if(RFtemp >= 400 && RFtemp <= 1000)
 13847  003A0C  0E90               	movlw	144
 13848  003A0E  0100               	movlb	0	; () banked
 13849  003A10  5DB7               	subwf	high_isr@RFtemp& (0+255),w,b
 13850  003A12  0E01               	movlw	1
 13851  003A14  0100               	movlb	0	; () banked
 13852  003A16  59B8               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 13853  003A18  A0D8               	btfss	status,0,c
 13854  003A1A  D00B               	goto	i2l187
 13855                           
 13856                           ; BSR set to: 0
 13857  003A1C  0EE9               	movlw	233
 13858  003A1E  0100               	movlb	0	; () banked
 13859  003A20  5DB7               	subwf	high_isr@RFtemp& (0+255),w,b
 13860  003A22  0E03               	movlw	3
 13861  003A24  0100               	movlb	0	; () banked
 13862  003A26  59B8               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 13863  003A28  B0D8               	btfsc	status,0,c
 13864  003A2A  D003               	goto	i2l187
 13865                           
 13866                           ; BSR set to: 0
 13867                           ;INTERRUPTS.c: 77: {
 13868                           ;INTERRUPTS.c: 78: RFStarted = 1;
 13869  003A2C  0E01               	movlw	1
 13870  003A2E  0100               	movlb	0	; () banked
 13871  003A30  6FC5               	movwf	_RFStarted& (0+255),b
 13872  003A32                     i2l187:
 13873                           
 13874                           ; BSR set to: 0
 13875                           ;INTERRUPTS.c: 79: }
 13876                           ;INTERRUPTS.c: 80: }
 13877                           ;INTERRUPTS.c: 81: }
 13878                           ;INTERRUPTS.c: 82: if(RFStarted)
 13879  003A32  0100               	movlb	0	; () banked
 13880  003A34  51C5               	movf	_RFStarted& (0+255),w,b
 13881  003A36  B4D8               	btfsc	status,2,c
 13882  003A38  D028               	goto	i2l7022
 13883                           
 13884                           ; BSR set to: 0
 13885                           ;INTERRUPTS.c: 83: {
 13886                           ;INTERRUPTS.c: 84: SYS_ActivityTimerReset();
 13887  003A3A  ECC3  F00C         	call	i2_SYS_ActivityTimerReset	;wreg free
 13888                           
 13889                           ;INTERRUPTS.c: 85: if(RF_DataPlace < 128)
 13890  003A3E  0E80               	movlw	128
 13891  003A40  0100               	movlb	0	; () banked
 13892  003A42  61C8               	cpfslt	_RF_DataPlace& (0+255),b
 13893  003A44  D022               	goto	i2l7022
 13894                           
 13895                           ; BSR set to: 0
 13896                           ;INTERRUPTS.c: 86: {
 13897                           ;INTERRUPTS.c: 87: RF_DataTiming[RF_DataPlace] = RFtemp;
 13898  003A46  0100               	movlb	0	; () banked
 13899  003A48  51C8               	movf	_RF_DataPlace& (0+255),w,b
 13900  003A4A  0D02               	mullw	2
 13901  003A4C  0E00               	movlw	low _RF_DataTiming
 13902  003A4E  24F3               	addwf	prodl,w,c
 13903  003A50  6ED9               	movwf	fsr2l,c
 13904  003A52  0E03               	movlw	high _RF_DataTiming
 13905  003A54  20F4               	addwfc	prodh,w,c
 13906  003A56  6EDA               	movwf	fsr2h,c
 13907  003A58  C0B7  FFDE         	movff	high_isr@RFtemp,postinc2
 13908  003A5C  C0B8  FFDD         	movff	high_isr@RFtemp+1,postdec2
 13909                           
 13910                           ; BSR set to: 0
 13911                           ;INTERRUPTS.c: 88: RF_DataPlace++;
 13912  003A60  0100               	movlb	0	; () banked
 13913  003A62  2BC8               	incf	_RF_DataPlace& (0+255),f,b
 13914                           
 13915                           ; BSR set to: 0
 13916                           ;INTERRUPTS.c: 89: if(RF_DataPlace >= RF_CodeSize)
 13917  003A64  0100               	movlb	0	; () banked
 13918  003A66  51C6               	movf	_RF_CodeSize& (0+255),w,b
 13919  003A68  0100               	movlb	0	; () banked
 13920  003A6A  5DC8               	subwf	_RF_DataPlace& (0+255),w,b
 13921  003A6C  A0D8               	btfss	status,0,c
 13922  003A6E  D00D               	goto	i2l7022
 13923                           
 13924                           ; BSR set to: 0
 13925                           ;INTERRUPTS.c: 90: {
 13926                           ;INTERRUPTS.c: 91: if(!RF_Data)
 13927  003A70  0100               	movlb	0	; () banked
 13928  003A72  51C7               	movf	_RF_Data& (0+255),w,b	;volatile
 13929  003A74  A4D8               	btfss	status,2,c
 13930  003A76  D004               	goto	i2l7018
 13931                           
 13932                           ; BSR set to: 0
 13933                           ;INTERRUPTS.c: 92: {
 13934                           ;INTERRUPTS.c: 93: RF_Data = RF_CheckCode();
 13935  003A78  EC57  F01A         	call	_RF_CheckCode	;wreg free
 13936  003A7C  0100               	movlb	0	; () banked
 13937  003A7E  6FC7               	movwf	_RF_Data& (0+255),b	;volatile
 13938  003A80                     i2l7018:
 13939                           
 13940                           ; BSR set to: 0
 13941                           ;INTERRUPTS.c: 94: }
 13942                           ;INTERRUPTS.c: 95: TMR_Timer0(0);
 13943  003A80  0E00               	movlw	0
 13944  003A82  EC6A  F00C         	call	i2_TMR_Timer0
 13945                           
 13946                           ;INTERRUPTS.c: 96: RF_ResetData();
 13947  003A86  EC11  F00D         	call	i2_RF_ResetData	;wreg free
 13948  003A8A                     i2l7022:
 13949                           
 13950                           ;INTERRUPTS.c: 97: }
 13951                           ;INTERRUPTS.c: 98: }
 13952                           ;INTERRUPTS.c: 99: }
 13953                           ;INTERRUPTS.c: 100: }
 13954                           ;INTERRUPTS.c: 101: INTCON3bits.INT1IF = 0;
 13955  003A8A  90F0               	bcf	intcon3,0,c	;volatile
 13956                           
 13957                           ;INTERRUPTS.c: 102: INTCON3bits.INT2IF = 0;
 13958  003A8C  92F0               	bcf	intcon3,1,c	;volatile
 13959                           
 13960                           ;INTERRUPTS.c: 103: }
 13961  003A8E  D00C               	goto	i2l199
 13962  003A90                     i2l182:
 13963                           
 13964                           ; BSR set to: 0
 13965                           ;INTERRUPTS.c: 104: else if(INTCONbits.TMR0IF)
 13966  003A90  A4F2               	btfss	intcon,2,c	;volatile
 13967  003A92  D009               	goto	i2l197
 13968                           
 13969                           ; BSR set to: 0
 13970                           ;INTERRUPTS.c: 105: {
 13971                           ;INTERRUPTS.c: 107: TMR_Timer0(0);
 13972  003A94  0E00               	movlw	0
 13973  003A96  EC6A  F00C         	call	i2_TMR_Timer0
 13974                           
 13975                           ;INTERRUPTS.c: 108: TMR_ResetTimer0();
 13976  003A9A  ECB8  F00A         	call	i2_TMR_ResetTimer0	;wreg free
 13977                           
 13978                           ;INTERRUPTS.c: 109: RF_ResetData();
 13979  003A9E  EC11  F00D         	call	i2_RF_ResetData	;wreg free
 13980                           
 13981                           ;INTERRUPTS.c: 110: INTCONbits.TMR0IF = 0;
 13982  003AA2  94F2               	bcf	intcon,2,c	;volatile
 13983                           
 13984                           ;INTERRUPTS.c: 111: }
 13985  003AA4  D001               	goto	i2l199
 13986  003AA6                     i2l197:
 13987                           
 13988                           ; BSR set to: 0
 13989                           ;INTERRUPTS.c: 112: else
 13990                           ;INTERRUPTS.c: 113: {
 13991                           ;INTERRUPTS.c: 115: __nop();
 13992  003AA6  F000               	nop	
 13993  003AA8                     i2l199:
 13994  003AA8  C0B6  FFF5         	movff	??_high_isr+13,tablat
 13995  003AAC  C0B5  FFF8         	movff	??_high_isr+12,tblptru
 13996  003AB0  C0B4  FFF7         	movff	??_high_isr+11,tblptrh
 13997  003AB4  C0B3  FFF6         	movff	??_high_isr+10,tblptrl
 13998  003AB8  C0B2  FFF4         	movff	??_high_isr+9,prodh
 13999  003ABC  C0B1  FFF3         	movff	??_high_isr+8,prodl
 14000  003AC0  C0B0  FFDA         	movff	??_high_isr+7,fsr2h
 14001  003AC4  C0AF  FFD9         	movff	??_high_isr+6,fsr2l
 14002  003AC8  C0AE  FFE2         	movff	??_high_isr+5,fsr1h
 14003  003ACC  C0AD  FFE1         	movff	??_high_isr+4,fsr1l
 14004  003AD0  C0AC  FFEA         	movff	??_high_isr+3,fsr0h
 14005  003AD4  C0AB  FFE9         	movff	??_high_isr+2,fsr0l
 14006  003AD8  C0AA  FFFB         	movff	??_high_isr+1,pclatu
 14007  003ADC  C0A9  FFFA         	movff	??_high_isr,pclath
 14008  003AE0  9260               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14009  003AE2  0011               	retfie		f
 14010  003AE4                     __end_of_high_isr:
 14011                           	opt stack 0
 14012                           pclatu	equ	0xFFB
 14013                           pclath	equ	0xFFA
 14014                           tblptru	equ	0xFF8
 14015                           tblptrh	equ	0xFF7
 14016                           tblptrl	equ	0xFF6
 14017                           tablat	equ	0xFF5
 14018                           prodh	equ	0xFF4
 14019                           prodl	equ	0xFF3
 14020                           intcon	equ	0xFF2
 14021                           intcon2	equ	0xFF1
 14022                           intcon3	equ	0xFF0
 14023                           postinc0	equ	0xFEE
 14024                           fsr0h	equ	0xFEA
 14025                           fsr0l	equ	0xFE9
 14026                           wreg	equ	0xFE8
 14027                           postdec1	equ	0xFE5
 14028                           fsr1h	equ	0xFE2
 14029                           fsr1l	equ	0xFE1
 14030                           bsr	equ	0xFE0
 14031                           postinc2	equ	0xFDE
 14032                           postdec2	equ	0xFDD
 14033                           plusw2	equ	0xFDB
 14034                           fsr2h	equ	0xFDA
 14035                           fsr2l	equ	0xFD9
 14036                           status	equ	0xFD8
 14037                           
 14038 ;; *************** function i2_SYS_ActivityTimerReset *****************
 14039 ;; Defined at:
 14040 ;;		line 67 in file "SYSTEM.c"
 14041 ;; Parameters:    Size  Location     Type
 14042 ;;		None
 14043 ;; Auto vars:     Size  Location     Type
 14044 ;;		None
 14045 ;; Return value:  Size  Location     Type
 14046 ;;		None               void
 14047 ;; Registers used:
 14048 ;;		wreg, status,2
 14049 ;; Tracked objects:
 14050 ;;		On entry : 0/0
 14051 ;;		On exit  : 0/0
 14052 ;;		Unchanged: 0/0
 14053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14054 ;;      Params:         0       0       0       0       0
 14055 ;;      Locals:         0       0       0       0       0
 14056 ;;      Temps:          0       0       0       0       0
 14057 ;;      Totals:         0       0       0       0       0
 14058 ;;Total ram usage:        0 bytes
 14059 ;; Hardware stack levels used:    1
 14060 ;; This function calls:
 14061 ;;		Nothing
 14062 ;; This function is called by:
 14063 ;;		_high_isr
 14064 ;; This function uses a non-reentrant model
 14065 ;;
 14066                           
 14067                           	psect	text91
 14068  001986                     __ptext91:
 14069                           	opt stack 0
 14070  001986                     i2_SYS_ActivityTimerReset:
 14071                           	opt stack 17
 14072                           
 14073                           ;SYSTEM.c: 69: Activity_Timer = 0;
 14074                           
 14075                           ;incstack = 0
 14076  001986  0E00               	movlw	0
 14077  001988  6E48               	movwf	_Activity_Timer,c
 14078  00198A  0E00               	movlw	0
 14079  00198C  6E49               	movwf	_Activity_Timer+1,c
 14080  00198E  0E00               	movlw	0
 14081  001990  6E4A               	movwf	_Activity_Timer+2,c
 14082  001992  0E00               	movlw	0
 14083  001994  6E4B               	movwf	_Activity_Timer+3,c
 14084  001996  0012               	return		;funcret
 14085  001998                     __end_ofi2_SYS_ActivityTimerReset:
 14086                           	opt stack 0
 14087                           pclatu	equ	0xFFB
 14088                           pclath	equ	0xFFA
 14089                           tblptru	equ	0xFF8
 14090                           tblptrh	equ	0xFF7
 14091                           tblptrl	equ	0xFF6
 14092                           tablat	equ	0xFF5
 14093                           prodh	equ	0xFF4
 14094                           prodl	equ	0xFF3
 14095                           intcon	equ	0xFF2
 14096                           intcon2	equ	0xFF1
 14097                           intcon3	equ	0xFF0
 14098                           postinc0	equ	0xFEE
 14099                           fsr0h	equ	0xFEA
 14100                           fsr0l	equ	0xFE9
 14101                           wreg	equ	0xFE8
 14102                           postdec1	equ	0xFE5
 14103                           fsr1h	equ	0xFE2
 14104                           fsr1l	equ	0xFE1
 14105                           bsr	equ	0xFE0
 14106                           postinc2	equ	0xFDE
 14107                           postdec2	equ	0xFDD
 14108                           plusw2	equ	0xFDB
 14109                           fsr2h	equ	0xFDA
 14110                           fsr2l	equ	0xFD9
 14111                           status	equ	0xFD8
 14112                           
 14113 ;; *************** function _TMR_Timer0Status *****************
 14114 ;; Defined at:
 14115 ;;		line 56 in file "TIMERS.c"
 14116 ;; Parameters:    Size  Location     Type
 14117 ;;		None
 14118 ;; Auto vars:     Size  Location     Type
 14119 ;;		None
 14120 ;; Return value:  Size  Location     Type
 14121 ;;                  1    wreg      unsigned char 
 14122 ;; Registers used:
 14123 ;;		wreg
 14124 ;; Tracked objects:
 14125 ;;		On entry : 0/0
 14126 ;;		On exit  : 0/0
 14127 ;;		Unchanged: 0/0
 14128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14129 ;;      Params:         0       0       0       0       0
 14130 ;;      Locals:         0       0       0       0       0
 14131 ;;      Temps:          0       0       0       0       0
 14132 ;;      Totals:         0       0       0       0       0
 14133 ;;Total ram usage:        0 bytes
 14134 ;; Hardware stack levels used:    1
 14135 ;; This function calls:
 14136 ;;		Nothing
 14137 ;; This function is called by:
 14138 ;;		_high_isr
 14139 ;; This function uses a non-reentrant model
 14140 ;;
 14141                           
 14142                           	psect	text92
 14143  001A4A                     __ptext92:
 14144                           	opt stack 0
 14145  001A4A                     _TMR_Timer0Status:
 14146                           	opt stack 17
 14147                           
 14148                           ;TIMERS.c: 58: if(T0CONbits.TMR0ON)
 14149                           
 14150                           ;incstack = 0
 14151  001A4A  AED5               	btfss	4053,7,c	;volatile
 14152  001A4C  D002               	goto	i2l6638
 14153                           
 14154                           ;TIMERS.c: 59: {
 14155                           ;TIMERS.c: 61: return 1;
 14156  001A4E  0E01               	movlw	1
 14157  001A50  0012               	return	
 14158  001A52                     i2l6638:
 14159                           
 14160                           ;TIMERS.c: 62: }
 14161                           ;TIMERS.c: 63: return 0;
 14162  001A52  0E00               	movlw	0
 14163  001A54  0012               	return	
 14164  001A56                     __end_of_TMR_Timer0Status:
 14165                           	opt stack 0
 14166                           pclatu	equ	0xFFB
 14167                           pclath	equ	0xFFA
 14168                           tblptru	equ	0xFF8
 14169                           tblptrh	equ	0xFF7
 14170                           tblptrl	equ	0xFF6
 14171                           tablat	equ	0xFF5
 14172                           prodh	equ	0xFF4
 14173                           prodl	equ	0xFF3
 14174                           intcon	equ	0xFF2
 14175                           intcon2	equ	0xFF1
 14176                           intcon3	equ	0xFF0
 14177                           postinc0	equ	0xFEE
 14178                           fsr0h	equ	0xFEA
 14179                           fsr0l	equ	0xFE9
 14180                           wreg	equ	0xFE8
 14181                           postdec1	equ	0xFE5
 14182                           fsr1h	equ	0xFE2
 14183                           fsr1l	equ	0xFE1
 14184                           bsr	equ	0xFE0
 14185                           postinc2	equ	0xFDE
 14186                           postdec2	equ	0xFDD
 14187                           plusw2	equ	0xFDB
 14188                           fsr2h	equ	0xFDA
 14189                           fsr2l	equ	0xFD9
 14190                           status	equ	0xFD8
 14191                           
 14192 ;; *************** function _TMR_Timer0Start *****************
 14193 ;; Defined at:
 14194 ;;		line 363 in file "TIMERS.c"
 14195 ;; Parameters:    Size  Location     Type
 14196 ;;		None
 14197 ;; Auto vars:     Size  Location     Type
 14198 ;;		None
 14199 ;; Return value:  Size  Location     Type
 14200 ;;		None               void
 14201 ;; Registers used:
 14202 ;;		wreg, status,2, cstack
 14203 ;; Tracked objects:
 14204 ;;		On entry : 0/0
 14205 ;;		On exit  : 0/0
 14206 ;;		Unchanged: 0/0
 14207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14208 ;;      Params:         0       0       0       0       0
 14209 ;;      Locals:         0       0       0       0       0
 14210 ;;      Temps:          0       0       0       0       0
 14211 ;;      Totals:         0       0       0       0       0
 14212 ;;Total ram usage:        0 bytes
 14213 ;; Hardware stack levels used:    1
 14214 ;; Hardware stack levels required when called:    2
 14215 ;; This function calls:
 14216 ;;		i2_TMR_ResetTimer0
 14217 ;;		i2_TMR_Timer0
 14218 ;; This function is called by:
 14219 ;;		_high_isr
 14220 ;; This function uses a non-reentrant model
 14221 ;;
 14222                           
 14223                           	psect	text93
 14224  001998                     __ptext93:
 14225                           	opt stack 0
 14226  001998                     _TMR_Timer0Start:
 14227                           	opt stack 15
 14228                           
 14229                           ;TIMERS.c: 365: TMR_Timer0(0);
 14230                           
 14231                           ;incstack = 0
 14232  001998  0E00               	movlw	0
 14233  00199A  EC6A  F00C         	call	i2_TMR_Timer0
 14234                           
 14235                           ;TIMERS.c: 366: TMR_ResetTimer0();
 14236  00199E  ECB8  F00A         	call	i2_TMR_ResetTimer0	;wreg free
 14237                           
 14238                           ;TIMERS.c: 367: TMR_Timer0(1);
 14239  0019A2  0E01               	movlw	1
 14240  0019A4  EC6A  F00C         	call	i2_TMR_Timer0
 14241  0019A8  0012               	return		;funcret
 14242  0019AA                     __end_of_TMR_Timer0Start:
 14243                           	opt stack 0
 14244                           pclatu	equ	0xFFB
 14245                           pclath	equ	0xFFA
 14246                           tblptru	equ	0xFF8
 14247                           tblptrh	equ	0xFF7
 14248                           tblptrl	equ	0xFF6
 14249                           tablat	equ	0xFF5
 14250                           prodh	equ	0xFF4
 14251                           prodl	equ	0xFF3
 14252                           intcon	equ	0xFF2
 14253                           intcon2	equ	0xFF1
 14254                           intcon3	equ	0xFF0
 14255                           postinc0	equ	0xFEE
 14256                           fsr0h	equ	0xFEA
 14257                           fsr0l	equ	0xFE9
 14258                           wreg	equ	0xFE8
 14259                           postdec1	equ	0xFE5
 14260                           fsr1h	equ	0xFE2
 14261                           fsr1l	equ	0xFE1
 14262                           bsr	equ	0xFE0
 14263                           postinc2	equ	0xFDE
 14264                           postdec2	equ	0xFDD
 14265                           plusw2	equ	0xFDB
 14266                           fsr2h	equ	0xFDA
 14267                           fsr2l	equ	0xFD9
 14268                           status	equ	0xFD8
 14269                           
 14270 ;; *************** function i2_TMR_ResetTimer0 *****************
 14271 ;; Defined at:
 14272 ;;		line 144 in file "TIMERS.c"
 14273 ;; Parameters:    Size  Location     Type
 14274 ;;		None
 14275 ;; Auto vars:     Size  Location     Type
 14276 ;;  TMR_ResetTim    1    1[BANK0 ] unsigned char 
 14277 ;; Return value:  Size  Location     Type
 14278 ;;		None               void
 14279 ;; Registers used:
 14280 ;;		wreg, status,2, cstack
 14281 ;; Tracked objects:
 14282 ;;		On entry : 0/0
 14283 ;;		On exit  : 0/0
 14284 ;;		Unchanged: 0/0
 14285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14286 ;;      Params:         0       0       0       0       0
 14287 ;;      Locals:         0       1       0       0       0
 14288 ;;      Temps:          0       0       0       0       0
 14289 ;;      Totals:         0       1       0       0       0
 14290 ;;Total ram usage:        1 bytes
 14291 ;; Hardware stack levels used:    1
 14292 ;; Hardware stack levels required when called:    1
 14293 ;; This function calls:
 14294 ;;		i2_TMR_Timer0
 14295 ;; This function is called by:
 14296 ;;		_high_isr
 14297 ;;		_TMR_Timer0Start
 14298 ;; This function uses a non-reentrant model
 14299 ;;
 14300                           
 14301                           	psect	text94
 14302  001570                     __ptext94:
 14303                           	opt stack 0
 14304  001570                     i2_TMR_ResetTimer0:
 14305                           	opt stack 16
 14306                           
 14307                           ;TIMERS.c: 146: unsigned char TimerOn = T0CONbits.TMR0ON;
 14308                           
 14309                           ;incstack = 0
 14310  001570  0E00               	movlw	0
 14311  001572  BED5               	btfsc	4053,7,c	;volatile
 14312  001574  0E01               	movlw	1
 14313  001576  0100               	movlb	0	; () banked
 14314  001578  6F81               	movwf	i2TMR_ResetTimer0@TimerOn& (0+255),b
 14315                           
 14316                           ; BSR set to: 0
 14317                           ;TIMERS.c: 148: TMR_Timer0(0);
 14318  00157A  0E00               	movlw	0
 14319  00157C  EC6A  F00C         	call	i2_TMR_Timer0
 14320                           
 14321                           ;TIMERS.c: 149: TMR0H = 0;
 14322  001580  0E00               	movlw	0
 14323  001582  6ED7               	movwf	4055,c	;volatile
 14324                           
 14325                           ;TIMERS.c: 150: TMR0L = 2;
 14326  001584  0E02               	movlw	2
 14327  001586  6ED6               	movwf	4054,c	;volatile
 14328                           
 14329                           ;TIMERS.c: 151: if(TimerOn)
 14330  001588  0100               	movlb	0	; () banked
 14331  00158A  5181               	movf	i2TMR_ResetTimer0@TimerOn& (0+255),w,b
 14332  00158C  0100               	movlb	0	; () banked
 14333  00158E  B4D8               	btfsc	status,2,c
 14334  001590  0012               	return	
 14335                           
 14336                           ; BSR set to: 0
 14337                           ;TIMERS.c: 152: {
 14338                           ;TIMERS.c: 153: TMR_Timer0(1);
 14339  001592  0E01               	movlw	1
 14340  001594  EC6A  F00C         	call	i2_TMR_Timer0
 14341  001598  0012               	return	
 14342  00159A                     __end_ofi2_TMR_ResetTimer0:
 14343                           	opt stack 0
 14344                           pclatu	equ	0xFFB
 14345                           pclath	equ	0xFFA
 14346                           tblptru	equ	0xFF8
 14347                           tblptrh	equ	0xFF7
 14348                           tblptrl	equ	0xFF6
 14349                           tablat	equ	0xFF5
 14350                           prodh	equ	0xFF4
 14351                           prodl	equ	0xFF3
 14352                           intcon	equ	0xFF2
 14353                           intcon2	equ	0xFF1
 14354                           intcon3	equ	0xFF0
 14355                           postinc0	equ	0xFEE
 14356                           fsr0h	equ	0xFEA
 14357                           fsr0l	equ	0xFE9
 14358                           wreg	equ	0xFE8
 14359                           postdec1	equ	0xFE5
 14360                           fsr1h	equ	0xFE2
 14361                           fsr1l	equ	0xFE1
 14362                           bsr	equ	0xFE0
 14363                           postinc2	equ	0xFDE
 14364                           postdec2	equ	0xFDD
 14365                           plusw2	equ	0xFDB
 14366                           fsr2h	equ	0xFDA
 14367                           fsr2l	equ	0xFD9
 14368                           status	equ	0xFD8
 14369                           
 14370 ;; *************** function i2_TMR_Timer0 *****************
 14371 ;; Defined at:
 14372 ;;		line 87 in file "TIMERS.c"
 14373 ;; Parameters:    Size  Location     Type
 14374 ;;  state           1    wreg     unsigned char 
 14375 ;; Auto vars:     Size  Location     Type
 14376 ;;  state           1    0[BANK0 ] unsigned char 
 14377 ;; Return value:  Size  Location     Type
 14378 ;;		None               void
 14379 ;; Registers used:
 14380 ;;		wreg, status,2
 14381 ;; Tracked objects:
 14382 ;;		On entry : 0/0
 14383 ;;		On exit  : 0/0
 14384 ;;		Unchanged: 0/0
 14385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14386 ;;      Params:         0       0       0       0       0
 14387 ;;      Locals:         0       1       0       0       0
 14388 ;;      Temps:          0       0       0       0       0
 14389 ;;      Totals:         0       1       0       0       0
 14390 ;;Total ram usage:        1 bytes
 14391 ;; Hardware stack levels used:    1
 14392 ;; This function calls:
 14393 ;;		Nothing
 14394 ;; This function is called by:
 14395 ;;		_high_isr
 14396 ;;		_TMR_Timer0Start
 14397 ;;		i2_TMR_ResetTimer0
 14398 ;; This function uses a non-reentrant model
 14399 ;;
 14400                           
 14401                           	psect	text95
 14402  0018D4                     __ptext95:
 14403                           	opt stack 0
 14404  0018D4                     i2_TMR_Timer0:
 14405                           	opt stack 17
 14406                           
 14407                           ;incstack = 0
 14408                           ;i2TMR_Timer0@state stored from wreg
 14409  0018D4  0100               	movlb	0	; () banked
 14410  0018D6  6F80               	movwf	i2TMR_Timer0@state& (0+255),b
 14411                           
 14412                           ;TIMERS.c: 89: if(state)
 14413  0018D8  0100               	movlb	0	; () banked
 14414  0018DA  5180               	movf	i2TMR_Timer0@state& (0+255),w,b
 14415  0018DC  0100               	movlb	0	; () banked
 14416  0018DE  B4D8               	btfsc	status,2,c
 14417  0018E0  D002               	goto	i2l1034
 14418                           
 14419                           ; BSR set to: 0
 14420                           ;TIMERS.c: 90: {
 14421                           ;TIMERS.c: 92: T0CONbits.TMR0ON = 1;
 14422  0018E2  8ED5               	bsf	4053,7,c	;volatile
 14423                           
 14424                           ;TIMERS.c: 93: }
 14425  0018E4  0012               	return	
 14426  0018E6                     i2l1034:
 14427                           
 14428                           ; BSR set to: 0
 14429                           ;TIMERS.c: 94: else
 14430                           ;TIMERS.c: 95: {
 14431                           ;TIMERS.c: 97: T0CONbits.TMR0ON = 0;
 14432  0018E6  9ED5               	bcf	4053,7,c	;volatile
 14433  0018E8  0012               	return	
 14434  0018EA                     __end_ofi2_TMR_Timer0:
 14435                           	opt stack 0
 14436                           pclatu	equ	0xFFB
 14437                           pclath	equ	0xFFA
 14438                           tblptru	equ	0xFF8
 14439                           tblptrh	equ	0xFF7
 14440                           tblptrl	equ	0xFF6
 14441                           tablat	equ	0xFF5
 14442                           prodh	equ	0xFF4
 14443                           prodl	equ	0xFF3
 14444                           intcon	equ	0xFF2
 14445                           intcon2	equ	0xFF1
 14446                           intcon3	equ	0xFF0
 14447                           postinc0	equ	0xFEE
 14448                           fsr0h	equ	0xFEA
 14449                           fsr0l	equ	0xFE9
 14450                           wreg	equ	0xFE8
 14451                           postdec1	equ	0xFE5
 14452                           fsr1h	equ	0xFE2
 14453                           fsr1l	equ	0xFE1
 14454                           bsr	equ	0xFE0
 14455                           postinc2	equ	0xFDE
 14456                           postdec2	equ	0xFDD
 14457                           plusw2	equ	0xFDB
 14458                           fsr2h	equ	0xFDA
 14459                           fsr2l	equ	0xFD9
 14460                           status	equ	0xFD8
 14461                           
 14462 ;; *************** function _RF_CheckCode *****************
 14463 ;; Defined at:
 14464 ;;		line 271 in file "RF.c"
 14465 ;; Parameters:    Size  Location     Type
 14466 ;;		None
 14467 ;; Auto vars:     Size  Location     Type
 14468 ;;  High            3   37[BANK0 ] unsigned char 
 14469 ;;  Low             3   34[BANK0 ] unsigned char 
 14470 ;;  i               1   40[BANK0 ] unsigned char 
 14471 ;; Return value:  Size  Location     Type
 14472 ;;                  1    wreg      unsigned char 
 14473 ;; Registers used:
 14474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14475 ;; Tracked objects:
 14476 ;;		On entry : 0/0
 14477 ;;		On exit  : 0/0
 14478 ;;		Unchanged: 0/0
 14479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14480 ;;      Params:         0       0       0       0       0
 14481 ;;      Locals:         0       7       0       0       0
 14482 ;;      Temps:          0       2       0       0       0
 14483 ;;      Totals:         0       9       0       0       0
 14484 ;;Total ram usage:        9 bytes
 14485 ;; Hardware stack levels used:    1
 14486 ;; Hardware stack levels required when called:    4
 14487 ;; This function calls:
 14488 ;;		i2_FSH_Write_IR_RF
 14489 ;;		i2___ftge
 14490 ;;		i2___ftmul
 14491 ;;		i2___lwtoft
 14492 ;; This function is called by:
 14493 ;;		_high_isr
 14494 ;; This function uses a non-reentrant model
 14495 ;;
 14496                           
 14497                           	psect	text96
 14498  0034AE                     __ptext96:
 14499                           	opt stack 0
 14500  0034AE                     _RF_CheckCode:
 14501                           	opt stack 13
 14502                           
 14503                           ;RF.c: 273: unsigned char i;
 14504                           ;RF.c: 274: double Low = 0.0;
 14505                           
 14506                           ; BSR set to: 0
 14507                           ;incstack = 0
 14508  0034AE  0E00               	movlw	0
 14509  0034B0  0100               	movlb	0	; () banked
 14510  0034B2  6FA2               	movwf	RF_CheckCode@Low& (0+255),b
 14511  0034B4  0E00               	movlw	0
 14512  0034B6  0100               	movlb	0	; () banked
 14513  0034B8  6FA3               	movwf	(RF_CheckCode@Low+1)& (0+255),b
 14514  0034BA  0E00               	movlw	0
 14515  0034BC  0100               	movlb	0	; () banked
 14516  0034BE  6FA4               	movwf	(RF_CheckCode@Low+2)& (0+255),b
 14517                           
 14518                           ;RF.c: 275: double High = 0.0;
 14519  0034C0  0E00               	movlw	0
 14520  0034C2  0100               	movlb	0	; () banked
 14521  0034C4  6FA5               	movwf	RF_CheckCode@High& (0+255),b
 14522  0034C6  0E00               	movlw	0
 14523  0034C8  0100               	movlb	0	; () banked
 14524  0034CA  6FA6               	movwf	(RF_CheckCode@High+1)& (0+255),b
 14525  0034CC  0E00               	movlw	0
 14526  0034CE  0100               	movlb	0	; () banked
 14527  0034D0  6FA7               	movwf	(RF_CheckCode@High+2)& (0+255),b
 14528                           
 14529                           ; BSR set to: 0
 14530                           ;RF.c: 277: if(System_State == 8)
 14531  0034D2  0E08               	movlw	8
 14532  0034D4  0100               	movlb	0	; () banked
 14533  0034D6  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
 14534  0034D8  A4D8               	btfss	status,2,c
 14535  0034DA  D0FC               	goto	i2l6674
 14536                           
 14537                           ; BSR set to: 0
 14538                           ;RF.c: 278: {
 14539                           ;RF.c: 279: for(i=0; i<RF_CodeSize;i++)
 14540  0034DC  0E00               	movlw	0
 14541  0034DE  0100               	movlb	0	; () banked
 14542  0034E0  6FA8               	movwf	RF_CheckCode@i& (0+255),b
 14543  0034E2  D0F0               	goto	i2l6666
 14544  0034E4                     i2l6650:
 14545                           
 14546                           ; BSR set to: 0
 14547                           ;RF.c: 280: {
 14548                           ;RF.c: 281: if(i == 0)
 14549  0034E4  0100               	movlb	0	; () banked
 14550  0034E6  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 14551  0034E8  0100               	movlb	0	; () banked
 14552  0034EA  A4D8               	btfss	status,2,c
 14553  0034EC  D051               	goto	i2l6654
 14554                           
 14555                           ; BSR set to: 0
 14556                           ;RF.c: 282: {
 14557                           ;RF.c: 283: Low = (double)RF_SavedTiming[i] * (1.0 - 0.02);
 14558  0034EE  0100               	movlb	0	; () banked
 14559  0034F0  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 14560  0034F2  0D02               	mullw	2
 14561  0034F4  0E00               	movlw	0
 14562  0034F6  24F3               	addwf	prodl,w,c
 14563  0034F8  6EF6               	movwf	tblptrl,c
 14564  0034FA  0E25               	movlw	37
 14565  0034FC  20F4               	addwfc	prodh,w,c
 14566  0034FE  6EF7               	movwf	tblptrh,c
 14567  003500  6AF8               	clrf	tblptru,c
 14568  003502  0E00               	movlw	0
 14569  003504  22F8               	addwfc	tblptru,f,c
 14570  003506  0009               	tblrd		*+
 14571  003508  CFF5 F088          	movff	tablat,i2___lwtoft@c
 14572  00350C  000A               	tblrd		*-
 14573  00350E  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 14574  003512  ECCD  F00A         	call	i2___lwtoft	;wreg free
 14575  003516  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 14576  00351A  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 14577  00351E  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 14578  003522  0EE1               	movlw	225
 14579  003524  0100               	movlb	0	; () banked
 14580  003526  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 14581  003528  0E7A               	movlw	122
 14582  00352A  0100               	movlb	0	; () banked
 14583  00352C  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 14584  00352E  0E3F               	movlw	63
 14585  003530  0100               	movlb	0	; () banked
 14586  003532  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 14587  003534  EC21  F01E         	call	i2___ftmul	;wreg free
 14588  003538  C08B  F0A2         	movff	?i2___ftmul,RF_CheckCode@Low
 14589  00353C  C08C  F0A3         	movff	?i2___ftmul+1,RF_CheckCode@Low+1
 14590  003540  C08D  F0A4         	movff	?i2___ftmul+2,RF_CheckCode@Low+2
 14591                           
 14592                           ;RF.c: 284: High = (double)RF_SavedTiming[i] * (1.0 + 0.02);
 14593  003544  0100               	movlb	0	; () banked
 14594  003546  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 14595  003548  0D02               	mullw	2
 14596  00354A  0E00               	movlw	0
 14597  00354C  24F3               	addwf	prodl,w,c
 14598  00354E  6EF6               	movwf	tblptrl,c
 14599  003550  0E25               	movlw	37
 14600  003552  20F4               	addwfc	prodh,w,c
 14601  003554  6EF7               	movwf	tblptrh,c
 14602  003556  6AF8               	clrf	tblptru,c
 14603  003558  0E00               	movlw	0
 14604  00355A  22F8               	addwfc	tblptru,f,c
 14605  00355C  0009               	tblrd		*+
 14606  00355E  CFF5 F088          	movff	tablat,i2___lwtoft@c
 14607  003562  000A               	tblrd		*-
 14608  003564  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 14609  003568  ECCD  F00A         	call	i2___lwtoft	;wreg free
 14610  00356C  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 14611  003570  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 14612  003574  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 14613  003578  0E8F               	movlw	143
 14614  00357A  0100               	movlb	0	; () banked
 14615  00357C  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 14616  00357E  0E82               	movlw	130
 14617  003580  0100               	movlb	0	; () banked
 14618  003582  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 14619  003584  0E3F               	movlw	63
 14620  003586  0100               	movlb	0	; () banked
 14621  003588  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 14622  00358A  EC21  F01E         	call	i2___ftmul	;wreg free
 14623  00358E  D050               	goto	L8
 14624  003590                     i2l6654:
 14625                           
 14626                           ;RF.c: 286: else
 14627                           ;RF.c: 287: {
 14628                           ;RF.c: 288: Low = (double)RF_SavedTiming[i] * (1.0 - 0.5);
 14629  003590  0100               	movlb	0	; () banked
 14630  003592  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 14631  003594  0D02               	mullw	2
 14632  003596  0E00               	movlw	0
 14633  003598  24F3               	addwf	prodl,w,c
 14634  00359A  6EF6               	movwf	tblptrl,c
 14635  00359C  0E25               	movlw	37
 14636  00359E  20F4               	addwfc	prodh,w,c
 14637  0035A0  6EF7               	movwf	tblptrh,c
 14638  0035A2  6AF8               	clrf	tblptru,c
 14639  0035A4  0E00               	movlw	0
 14640  0035A6  22F8               	addwfc	tblptru,f,c
 14641  0035A8  0009               	tblrd		*+
 14642  0035AA  CFF5 F088          	movff	tablat,i2___lwtoft@c
 14643  0035AE  000A               	tblrd		*-
 14644  0035B0  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 14645  0035B4  ECCD  F00A         	call	i2___lwtoft	;wreg free
 14646  0035B8  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 14647  0035BC  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 14648  0035C0  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 14649  0035C4  0E00               	movlw	0
 14650  0035C6  0100               	movlb	0	; () banked
 14651  0035C8  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 14652  0035CA  0E00               	movlw	0
 14653  0035CC  0100               	movlb	0	; () banked
 14654  0035CE  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 14655  0035D0  0E3F               	movlw	63
 14656  0035D2  0100               	movlb	0	; () banked
 14657  0035D4  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 14658  0035D6  EC21  F01E         	call	i2___ftmul	;wreg free
 14659  0035DA  C08B  F0A2         	movff	?i2___ftmul,RF_CheckCode@Low
 14660  0035DE  C08C  F0A3         	movff	?i2___ftmul+1,RF_CheckCode@Low+1
 14661  0035E2  C08D  F0A4         	movff	?i2___ftmul+2,RF_CheckCode@Low+2
 14662                           
 14663                           ;RF.c: 289: High = (double)RF_SavedTiming[i] * (1.0 + 0.5);
 14664  0035E6  0100               	movlb	0	; () banked
 14665  0035E8  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 14666  0035EA  0D02               	mullw	2
 14667  0035EC  0E00               	movlw	0
 14668  0035EE  24F3               	addwf	prodl,w,c
 14669  0035F0  6EF6               	movwf	tblptrl,c
 14670  0035F2  0E25               	movlw	37
 14671  0035F4  20F4               	addwfc	prodh,w,c
 14672  0035F6  6EF7               	movwf	tblptrh,c
 14673  0035F8  6AF8               	clrf	tblptru,c
 14674  0035FA  0E00               	movlw	0
 14675  0035FC  22F8               	addwfc	tblptru,f,c
 14676  0035FE  0009               	tblrd		*+
 14677  003600  CFF5 F088          	movff	tablat,i2___lwtoft@c
 14678  003604  000A               	tblrd		*-
 14679  003606  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 14680  00360A  ECCD  F00A         	call	i2___lwtoft	;wreg free
 14681  00360E  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 14682  003612  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 14683  003616  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 14684  00361A  0E00               	movlw	0
 14685  00361C  0100               	movlb	0	; () banked
 14686  00361E  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 14687  003620  0EC0               	movlw	192
 14688  003622  0100               	movlb	0	; () banked
 14689  003624  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 14690  003626  0E3F               	movlw	63
 14691  003628  0100               	movlb	0	; () banked
 14692  00362A  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 14693  00362C  EC21  F01E         	call	i2___ftmul	;wreg free
 14694  003630                     L8:
 14695  003630  C08B  F0A5         	movff	?i2___ftmul,RF_CheckCode@High
 14696  003634  C08C  F0A6         	movff	?i2___ftmul+1,RF_CheckCode@High+1
 14697  003638  C08D  F0A7         	movff	?i2___ftmul+2,RF_CheckCode@High+2
 14698                           
 14699                           ;RF.c: 290: }
 14700                           ;RF.c: 292: if((double)RF_DataTiming[i] < Low || (double)RF_DataTiming[i] > High )
 14701  00363C  0100               	movlb	0	; () banked
 14702  00363E  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 14703  003640  0D02               	mullw	2
 14704  003642  0E00               	movlw	low _RF_DataTiming
 14705  003644  24F3               	addwf	prodl,w,c
 14706  003646  6ED9               	movwf	fsr2l,c
 14707  003648  0E03               	movlw	high _RF_DataTiming
 14708  00364A  20F4               	addwfc	prodh,w,c
 14709  00364C  6EDA               	movwf	fsr2h,c
 14710  00364E  CFDE F088          	movff	postinc2,i2___lwtoft@c
 14711  003652  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 14712  003656  ECCD  F00A         	call	i2___lwtoft	;wreg free
 14713  00365A  C088  F08B         	movff	?i2___lwtoft,i2___ftge@ff1
 14714  00365E  C089  F08C         	movff	?i2___lwtoft+1,i2___ftge@ff1+1
 14715  003662  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftge@ff1+2
 14716  003666  C0A2  F08E         	movff	RF_CheckCode@Low,i2___ftge@ff2
 14717  00366A  C0A3  F08F         	movff	RF_CheckCode@Low+1,i2___ftge@ff2+1
 14718  00366E  C0A4  F090         	movff	RF_CheckCode@Low+2,i2___ftge@ff2+2
 14719  003672  EC6F  F004         	call	i2___ftge	;wreg free
 14720  003676  0100               	movlb	0	; () banked
 14721  003678  A0D8               	btfss	status,0,c
 14722  00367A  D020               	goto	i2l6660
 14723                           
 14724                           ; BSR set to: 0
 14725  00367C  C0A5  F08B         	movff	RF_CheckCode@High,i2___ftge@ff1
 14726  003680  C0A6  F08C         	movff	RF_CheckCode@High+1,i2___ftge@ff1+1
 14727  003684  C0A7  F08D         	movff	RF_CheckCode@High+2,i2___ftge@ff1+2
 14728  003688  0100               	movlb	0	; () banked
 14729  00368A  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 14730  00368C  0D02               	mullw	2
 14731  00368E  0E00               	movlw	low _RF_DataTiming
 14732  003690  24F3               	addwf	prodl,w,c
 14733  003692  6ED9               	movwf	fsr2l,c
 14734  003694  0E03               	movlw	high _RF_DataTiming
 14735  003696  20F4               	addwfc	prodh,w,c
 14736  003698  6EDA               	movwf	fsr2h,c
 14737  00369A  CFDE F088          	movff	postinc2,i2___lwtoft@c
 14738  00369E  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 14739  0036A2  ECCD  F00A         	call	i2___lwtoft	;wreg free
 14740  0036A6  C088  F08E         	movff	?i2___lwtoft,i2___ftge@ff2
 14741  0036AA  C089  F08F         	movff	?i2___lwtoft+1,i2___ftge@ff2+1
 14742  0036AE  C08A  F090         	movff	?i2___lwtoft+2,i2___ftge@ff2+2
 14743  0036B2  EC6F  F004         	call	i2___ftge	;wreg free
 14744  0036B6  0100               	movlb	0	; () banked
 14745  0036B8  B0D8               	btfsc	status,0,c
 14746  0036BA  D002               	goto	i2l6664
 14747  0036BC                     i2l6660:
 14748                           
 14749                           ; BSR set to: 0
 14750                           ;RF.c: 293: {
 14751                           ;RF.c: 294: return 0;
 14752  0036BC  0E00               	movlw	0
 14753                           
 14754                           ; BSR set to: 0
 14755  0036BE  0012               	return	
 14756  0036C0                     i2l6664:
 14757                           
 14758                           ; BSR set to: 0
 14759  0036C0  0100               	movlb	0	; () banked
 14760  0036C2  2BA8               	incf	RF_CheckCode@i& (0+255),f,b
 14761  0036C4                     i2l6666:
 14762                           
 14763                           ; BSR set to: 0
 14764  0036C4  0100               	movlb	0	; () banked
 14765  0036C6  51C6               	movf	_RF_CodeSize& (0+255),w,b
 14766  0036C8  0100               	movlb	0	; () banked
 14767  0036CA  5DA8               	subwf	RF_CheckCode@i& (0+255),w,b
 14768  0036CC  A0D8               	btfss	status,0,c
 14769  0036CE  D70A               	goto	i2l6650
 14770                           
 14771                           ; BSR set to: 0
 14772                           ;RF.c: 295: }
 14773                           ;RF.c: 296: }
 14774                           ;RF.c: 297: return 1;
 14775                           
 14776                           ; BSR set to: 0
 14777  0036D0  0E01               	movlw	1
 14778                           
 14779                           ; BSR set to: 0
 14780                           ;RF.c: 298: }
 14781                           
 14782                           ; BSR set to: 0
 14783  0036D2  0012               	return	
 14784  0036D4                     i2l6674:
 14785                           
 14786                           ; BSR set to: 0
 14787                           ;RF.c: 299: else
 14788                           ;RF.c: 300: {
 14789                           ;RF.c: 301: if(RF_DataPlace >= 20)
 14790  0036D4  0E13               	movlw	19
 14791  0036D6  0100               	movlb	0	; () banked
 14792  0036D8  65C8               	cpfsgt	_RF_DataPlace& (0+255),b
 14793  0036DA  D045               	goto	i2l6706
 14794                           
 14795                           ; BSR set to: 0
 14796                           ;RF.c: 302: {
 14797                           ;RF.c: 303: for(i=0;i<RF_DataPlace;i++)
 14798  0036DC  0E00               	movlw	0
 14799  0036DE  0100               	movlb	0	; () banked
 14800  0036E0  6FA8               	movwf	RF_CheckCode@i& (0+255),b
 14801  0036E2  D014               	goto	i2l6686
 14802  0036E4                     i2l6678:
 14803                           
 14804                           ; BSR set to: 0
 14805                           ;RF.c: 304: {
 14806                           ;RF.c: 305: if(RF_DataTiming[i] < 5)
 14807  0036E4  0100               	movlb	0	; () banked
 14808  0036E6  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 14809  0036E8  0D02               	mullw	2
 14810  0036EA  0E00               	movlw	low _RF_DataTiming
 14811  0036EC  24F3               	addwf	prodl,w,c
 14812  0036EE  6ED9               	movwf	fsr2l,c
 14813  0036F0  0E03               	movlw	high _RF_DataTiming
 14814  0036F2  20F4               	addwfc	prodh,w,c
 14815  0036F4  6EDA               	movwf	fsr2h,c
 14816  0036F6  0E01               	movlw	1
 14817  0036F8  50DB               	movf	plusw2,w,c
 14818  0036FA  E106               	bnz	i2l6684
 14819  0036FC  0E05               	movlw	5
 14820  0036FE  5CDE               	subwf	postinc2,w,c
 14821  003700  B0D8               	btfsc	status,0,c
 14822  003702  D002               	goto	i2l6684
 14823                           
 14824                           ; BSR set to: 0
 14825                           ;RF.c: 306: {
 14826                           ;RF.c: 308: return 0;
 14827  003704  0E00               	movlw	0
 14828                           
 14829                           ; BSR set to: 0
 14830  003706  0012               	return	
 14831  003708                     i2l6684:
 14832                           
 14833                           ; BSR set to: 0
 14834  003708  0100               	movlb	0	; () banked
 14835  00370A  2BA8               	incf	RF_CheckCode@i& (0+255),f,b
 14836  00370C                     i2l6686:
 14837                           
 14838                           ; BSR set to: 0
 14839  00370C  0100               	movlb	0	; () banked
 14840  00370E  51C8               	movf	_RF_DataPlace& (0+255),w,b
 14841  003710  0100               	movlb	0	; () banked
 14842  003712  5DA8               	subwf	RF_CheckCode@i& (0+255),w,b
 14843  003714  A0D8               	btfss	status,0,c
 14844  003716  D7E6               	goto	i2l6678
 14845                           
 14846                           ; BSR set to: 0
 14847                           ;RF.c: 309: }
 14848                           ;RF.c: 310: }
 14849                           ;RF.c: 312: for(i=RF_DataPlace;i<128;i++)
 14850  003718  C0C8  F0A8         	movff	_RF_DataPlace,RF_CheckCode@i
 14851  00371C                     i2l6688:
 14852                           
 14853                           ; BSR set to: 0
 14854  00371C  0E7F               	movlw	127
 14855  00371E  0100               	movlb	0	; () banked
 14856  003720  65A8               	cpfsgt	RF_CheckCode@i& (0+255),b
 14857  003722  D001               	goto	i2l6692
 14858  003724  D010               	goto	i2l6698
 14859  003726                     i2l6692:
 14860                           
 14861                           ; BSR set to: 0
 14862                           ;RF.c: 313: {
 14863                           ;RF.c: 315: RF_DataTiming[i] = 0;
 14864  003726  0100               	movlb	0	; () banked
 14865  003728  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 14866  00372A  0D02               	mullw	2
 14867  00372C  0E00               	movlw	low _RF_DataTiming
 14868  00372E  24F3               	addwf	prodl,w,c
 14869  003730  6ED9               	movwf	fsr2l,c
 14870  003732  0E03               	movlw	high _RF_DataTiming
 14871  003734  20F4               	addwfc	prodh,w,c
 14872  003736  6EDA               	movwf	fsr2h,c
 14873  003738  0E00               	movlw	0
 14874  00373A  6EDE               	movwf	postinc2,c
 14875  00373C  0E00               	movlw	0
 14876  00373E  6EDD               	movwf	postdec2,c
 14877                           
 14878                           ; BSR set to: 0
 14879  003740  0100               	movlb	0	; () banked
 14880  003742  2BA8               	incf	RF_CheckCode@i& (0+255),f,b
 14881  003744  D7EB               	goto	i2l6688
 14882  003746                     i2l6698:
 14883                           
 14884                           ; BSR set to: 0
 14885                           ;RF.c: 316: }
 14886                           ;RF.c: 319: Flash_Status = FSH_Write_IR_RF();
 14887  003746  EC22  F014         	call	i2_FSH_Write_IR_RF	;wreg free
 14888  00374A  0100               	movlb	0	; () banked
 14889  00374C  6FC2               	movwf	_Flash_Status& (0+255),b
 14890                           
 14891                           ; BSR set to: 0
 14892                           ;RF.c: 320: if(Flash_Status)
 14893  00374E  0100               	movlb	0	; () banked
 14894  003750  51C2               	movf	_Flash_Status& (0+255),w,b
 14895  003752  B4D8               	btfsc	status,2,c
 14896  003754  D005               	goto	i2l443
 14897                           
 14898                           ; BSR set to: 0
 14899                           ;RF.c: 321: {
 14900                           ;RF.c: 322: RF_CodeSize = RF_DataPlace;
 14901  003756  C0C8  F0C6         	movff	_RF_DataPlace,_RF_CodeSize
 14902                           
 14903                           ; BSR set to: 0
 14904                           ;RF.c: 323: RF_Saved = 90;
 14905  00375A  0E5A               	movlw	90
 14906  00375C  0100               	movlb	0	; () banked
 14907  00375E  6FCE               	movwf	_RF_Saved& (0+255),b
 14908  003760                     i2l443:
 14909                           
 14910                           ; BSR set to: 0
 14911                           ;RF.c: 324: }
 14912                           ;RF.c: 325: System_State = 8;
 14913  003760  0E08               	movlw	8
 14914  003762  0100               	movlb	0	; () banked
 14915  003764  6FCF               	movwf	_System_State& (0+255),b	;volatile
 14916  003766                     i2l6706:
 14917                           
 14918                           ; BSR set to: 0
 14919                           ;RF.c: 326: }
 14920                           ;RF.c: 327: return 0;
 14921  003766  0E00               	movlw	0
 14922                           
 14923                           ; BSR set to: 0
 14924  003768  0012               	return	
 14925  00376A                     __end_of_RF_CheckCode:
 14926                           	opt stack 0
 14927                           pclatu	equ	0xFFB
 14928                           pclath	equ	0xFFA
 14929                           tblptru	equ	0xFF8
 14930                           tblptrh	equ	0xFF7
 14931                           tblptrl	equ	0xFF6
 14932                           tablat	equ	0xFF5
 14933                           prodh	equ	0xFF4
 14934                           prodl	equ	0xFF3
 14935                           intcon	equ	0xFF2
 14936                           intcon2	equ	0xFF1
 14937                           intcon3	equ	0xFF0
 14938                           postinc0	equ	0xFEE
 14939                           fsr0h	equ	0xFEA
 14940                           fsr0l	equ	0xFE9
 14941                           wreg	equ	0xFE8
 14942                           postdec1	equ	0xFE5
 14943                           fsr1h	equ	0xFE2
 14944                           fsr1l	equ	0xFE1
 14945                           bsr	equ	0xFE0
 14946                           postinc2	equ	0xFDE
 14947                           postdec2	equ	0xFDD
 14948                           plusw2	equ	0xFDB
 14949                           fsr2h	equ	0xFDA
 14950                           fsr2l	equ	0xFD9
 14951                           status	equ	0xFD8
 14952                           
 14953 ;; *************** function i2___lwtoft *****************
 14954 ;; Defined at:
 14955 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
 14956 ;; Parameters:    Size  Location     Type
 14957 ;;  c               2    8[BANK0 ] unsigned int 
 14958 ;; Auto vars:     Size  Location     Type
 14959 ;;		None
 14960 ;; Return value:  Size  Location     Type
 14961 ;;                  3    8[BANK0 ] float 
 14962 ;; Registers used:
 14963 ;;		wreg, status,2, status,0, cstack
 14964 ;; Tracked objects:
 14965 ;;		On entry : 0/0
 14966 ;;		On exit  : 0/0
 14967 ;;		Unchanged: 0/0
 14968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14969 ;;      Params:         0       3       0       0       0
 14970 ;;      Locals:         0       0       0       0       0
 14971 ;;      Temps:          0       0       0       0       0
 14972 ;;      Totals:         0       3       0       0       0
 14973 ;;Total ram usage:        3 bytes
 14974 ;; Hardware stack levels used:    1
 14975 ;; Hardware stack levels required when called:    1
 14976 ;; This function calls:
 14977 ;;		i2___ftpack
 14978 ;; This function is called by:
 14979 ;;		_RF_CheckCode
 14980 ;; This function uses a non-reentrant model
 14981 ;;
 14982                           
 14983                           	psect	text97
 14984  00159A                     __ptext97:
 14985                           	opt stack 0
 14986  00159A                     i2___lwtoft:
 14987                           	opt stack 15
 14988                           
 14989                           ; BSR set to: 0
 14990                           ;incstack = 0
 14991  00159A  C088  F080         	movff	i2___lwtoft@c,i2___ftpack@arg
 14992  00159E  C089  F081         	movff	i2___lwtoft@c+1,i2___ftpack@arg+1
 14993  0015A2  0100               	movlb	0	; () banked
 14994  0015A4  6B82               	clrf	(i2___ftpack@arg+2)& (0+255),b
 14995  0015A6  0E8E               	movlw	142
 14996  0015A8  0100               	movlb	0	; () banked
 14997  0015AA  6F83               	movwf	i2___ftpack@exp& (0+255),b
 14998  0015AC  0E00               	movlw	0
 14999  0015AE  0100               	movlb	0	; () banked
 15000  0015B0  6F84               	movwf	i2___ftpack@sign& (0+255),b
 15001  0015B2  EC49  F001         	call	i2___ftpack	;wreg free
 15002  0015B6  C080  F088         	movff	?i2___ftpack,?i2___lwtoft
 15003  0015BA  C081  F089         	movff	?i2___ftpack+1,?i2___lwtoft+1
 15004  0015BE  C082  F08A         	movff	?i2___ftpack+2,?i2___lwtoft+2
 15005  0015C2  0012               	return	
 15006  0015C4                     __end_ofi2___lwtoft:
 15007                           	opt stack 0
 15008                           pclatu	equ	0xFFB
 15009                           pclath	equ	0xFFA
 15010                           tblptru	equ	0xFF8
 15011                           tblptrh	equ	0xFF7
 15012                           tblptrl	equ	0xFF6
 15013                           tablat	equ	0xFF5
 15014                           prodh	equ	0xFF4
 15015                           prodl	equ	0xFF3
 15016                           intcon	equ	0xFF2
 15017                           intcon2	equ	0xFF1
 15018                           intcon3	equ	0xFF0
 15019                           postinc0	equ	0xFEE
 15020                           fsr0h	equ	0xFEA
 15021                           fsr0l	equ	0xFE9
 15022                           wreg	equ	0xFE8
 15023                           postdec1	equ	0xFE5
 15024                           fsr1h	equ	0xFE2
 15025                           fsr1l	equ	0xFE1
 15026                           bsr	equ	0xFE0
 15027                           postinc2	equ	0xFDE
 15028                           postdec2	equ	0xFDD
 15029                           plusw2	equ	0xFDB
 15030                           fsr2h	equ	0xFDA
 15031                           fsr2l	equ	0xFD9
 15032                           status	equ	0xFD8
 15033                           
 15034 ;; *************** function i2___ftmul *****************
 15035 ;; Defined at:
 15036 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
 15037 ;; Parameters:    Size  Location     Type
 15038 ;;  f1              3   11[BANK0 ] float 
 15039 ;;  f2              3   14[BANK0 ] float 
 15040 ;; Auto vars:     Size  Location     Type
 15041 ;;  __ftmul         3   21[BANK0 ] unsigned um
 15042 ;;  __ftmul         1   25[BANK0 ] unsigned char 
 15043 ;;  __ftmul         1   24[BANK0 ] unsigned char 
 15044 ;;  __ftmul         1   20[BANK0 ] unsigned char 
 15045 ;; Return value:  Size  Location     Type
 15046 ;;                  3   11[BANK0 ] float 
 15047 ;; Registers used:
 15048 ;;		wreg, status,2, status,0, cstack
 15049 ;; Tracked objects:
 15050 ;;		On entry : 0/0
 15051 ;;		On exit  : 0/0
 15052 ;;		Unchanged: 0/0
 15053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15054 ;;      Params:         0       6       0       0       0
 15055 ;;      Locals:         0       6       0       0       0
 15056 ;;      Temps:          0       3       0       0       0
 15057 ;;      Totals:         0      15       0       0       0
 15058 ;;Total ram usage:       15 bytes
 15059 ;; Hardware stack levels used:    1
 15060 ;; Hardware stack levels required when called:    1
 15061 ;; This function calls:
 15062 ;;		i2___ftpack
 15063 ;; This function is called by:
 15064 ;;		_RF_CheckCode
 15065 ;; This function uses a non-reentrant model
 15066 ;;
 15067                           
 15068                           	psect	text98
 15069  003C42                     __ptext98:
 15070                           	opt stack 0
 15071  003C42                     i2___ftmul:
 15072                           	opt stack 15
 15073                           
 15074                           ;incstack = 0
 15075  003C42  C08D  F091         	movff	i2___ftmul@f1+2,??i2___ftmul
 15076  003C46  0100               	movlb	0	; () banked
 15077  003C48  6B92               	clrf	(??i2___ftmul+1)& (0+255),b
 15078  003C4A  6B93               	clrf	(??i2___ftmul+2)& (0+255),b
 15079  003C4C  0100               	movlb	0	; () banked
 15080  003C4E  358C               	rlcf	(i2___ftmul@f1+1)& (0+255),w,b
 15081  003C50  0100               	movlb	0	; () banked
 15082  003C52  3791               	rlcf	??i2___ftmul& (0+255),f,b
 15083  003C54  E301               	bnc	u704_41
 15084  003C56  8192               	bsf	(??i2___ftmul+1)& (0+255),0,b
 15085  003C58                     u704_41:
 15086  003C58  0100               	movlb	0	; () banked
 15087  003C5A  5191               	movf	??i2___ftmul& (0+255),w,b
 15088  003C5C  0100               	movlb	0	; () banked
 15089  003C5E  6F94               	movwf	i2___ftmul@exp& (0+255),b
 15090  003C60  0100               	movlb	0	; () banked
 15091  003C62  5194               	movf	i2___ftmul@exp& (0+255),w,b
 15092  003C64  A4D8               	btfss	status,2,c
 15093  003C66  D00A               	goto	i2l6456
 15094                           
 15095                           ; BSR set to: 0
 15096  003C68  0E00               	movlw	0
 15097  003C6A  0100               	movlb	0	; () banked
 15098  003C6C  6F8B               	movwf	?i2___ftmul& (0+255),b
 15099  003C6E  0E00               	movlw	0
 15100  003C70  0100               	movlb	0	; () banked
 15101  003C72  6F8C               	movwf	(?i2___ftmul+1)& (0+255),b
 15102  003C74  0E00               	movlw	0
 15103  003C76  0100               	movlb	0	; () banked
 15104  003C78  6F8D               	movwf	(?i2___ftmul+2)& (0+255),b
 15105                           
 15106                           ; BSR set to: 0
 15107  003C7A  0012               	return	
 15108  003C7C                     i2l6456:
 15109                           
 15110                           ; BSR set to: 0
 15111  003C7C  C090  F091         	movff	i2___ftmul@f2+2,??i2___ftmul
 15112  003C80  0100               	movlb	0	; () banked
 15113  003C82  6B92               	clrf	(??i2___ftmul+1)& (0+255),b
 15114  003C84  6B93               	clrf	(??i2___ftmul+2)& (0+255),b
 15115  003C86  0100               	movlb	0	; () banked
 15116  003C88  358F               	rlcf	(i2___ftmul@f2+1)& (0+255),w,b
 15117  003C8A  0100               	movlb	0	; () banked
 15118  003C8C  3791               	rlcf	??i2___ftmul& (0+255),f,b
 15119  003C8E  E301               	bnc	u706_41
 15120  003C90  8192               	bsf	(??i2___ftmul+1)& (0+255),0,b
 15121  003C92                     u706_41:
 15122  003C92  0100               	movlb	0	; () banked
 15123  003C94  5191               	movf	??i2___ftmul& (0+255),w,b
 15124  003C96  0100               	movlb	0	; () banked
 15125  003C98  6F99               	movwf	i2___ftmul@sign& (0+255),b
 15126  003C9A  0100               	movlb	0	; () banked
 15127  003C9C  5199               	movf	i2___ftmul@sign& (0+255),w,b
 15128  003C9E  A4D8               	btfss	status,2,c
 15129  003CA0  D00A               	goto	i2l6462
 15130                           
 15131                           ; BSR set to: 0
 15132  003CA2  0E00               	movlw	0
 15133  003CA4  0100               	movlb	0	; () banked
 15134  003CA6  6F8B               	movwf	?i2___ftmul& (0+255),b
 15135  003CA8  0E00               	movlw	0
 15136  003CAA  0100               	movlb	0	; () banked
 15137  003CAC  6F8C               	movwf	(?i2___ftmul+1)& (0+255),b
 15138  003CAE  0E00               	movlw	0
 15139  003CB0  0100               	movlb	0	; () banked
 15140  003CB2  6F8D               	movwf	(?i2___ftmul+2)& (0+255),b
 15141                           
 15142                           ; BSR set to: 0
 15143  003CB4  0012               	return	
 15144  003CB6                     i2l6462:
 15145                           
 15146                           ; BSR set to: 0
 15147  003CB6  0100               	movlb	0	; () banked
 15148  003CB8  5199               	movf	i2___ftmul@sign& (0+255),w,b
 15149  003CBA  0F7B               	addlw	123
 15150  003CBC  0100               	movlb	0	; () banked
 15151  003CBE  2794               	addwf	i2___ftmul@exp& (0+255),f,b
 15152                           
 15153                           ; BSR set to: 0
 15154  003CC0  C08D  F099         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 15155  003CC4  0100               	movlb	0	; () banked
 15156  003CC6  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 15157  003CC8  0100               	movlb	0	; () banked
 15158  003CCA  1B99               	xorwf	i2___ftmul@sign& (0+255),f,b
 15159  003CCC  0E80               	movlw	128
 15160  003CCE  0100               	movlb	0	; () banked
 15161  003CD0  1799               	andwf	i2___ftmul@sign& (0+255),f,b
 15162                           
 15163                           ; BSR set to: 0
 15164  003CD2  0100               	movlb	0	; () banked
 15165  003CD4  8F8C               	bsf	(i2___ftmul@f1+1)& (0+255),7,b
 15166                           
 15167                           ; BSR set to: 0
 15168  003CD6  0100               	movlb	0	; () banked
 15169  003CD8  8F8F               	bsf	(i2___ftmul@f2+1)& (0+255),7,b
 15170                           
 15171                           ; BSR set to: 0
 15172  003CDA  0EFF               	movlw	255
 15173  003CDC  0100               	movlb	0	; () banked
 15174  003CDE  178E               	andwf	i2___ftmul@f2& (0+255),f,b
 15175  003CE0  0EFF               	movlw	255
 15176  003CE2  0100               	movlb	0	; () banked
 15177  003CE4  178F               	andwf	(i2___ftmul@f2+1)& (0+255),f,b
 15178  003CE6  0E00               	movlw	0
 15179  003CE8  0100               	movlb	0	; () banked
 15180  003CEA  1790               	andwf	(i2___ftmul@f2+2)& (0+255),f,b
 15181                           
 15182                           ; BSR set to: 0
 15183  003CEC  0E00               	movlw	0
 15184  003CEE  0100               	movlb	0	; () banked
 15185  003CF0  6F95               	movwf	i2___ftmul@f3_as_product& (0+255),b
 15186  003CF2  0E00               	movlw	0
 15187  003CF4  0100               	movlb	0	; () banked
 15188  003CF6  6F96               	movwf	(i2___ftmul@f3_as_product+1)& (0+255),b
 15189  003CF8  0E00               	movlw	0
 15190  003CFA  0100               	movlb	0	; () banked
 15191  003CFC  6F97               	movwf	(i2___ftmul@f3_as_product+2)& (0+255),b
 15192                           
 15193                           ; BSR set to: 0
 15194  003CFE  0E07               	movlw	7
 15195  003D00  0100               	movlb	0	; () banked
 15196  003D02  6F98               	movwf	i2___ftmul@cntr& (0+255),b
 15197  003D04                     i2l6476:
 15198                           
 15199                           ; BSR set to: 0
 15200  003D04  0100               	movlb	0	; () banked
 15201  003D06  A18B               	btfss	i2___ftmul@f1& (0+255),0,b
 15202  003D08  D00C               	goto	i2l6480
 15203                           
 15204                           ; BSR set to: 0
 15205  003D0A  0100               	movlb	0	; () banked
 15206  003D0C  518E               	movf	i2___ftmul@f2& (0+255),w,b
 15207  003D0E  0100               	movlb	0	; () banked
 15208  003D10  2795               	addwf	i2___ftmul@f3_as_product& (0+255),f,b
 15209  003D12  0100               	movlb	0	; () banked
 15210  003D14  518F               	movf	(i2___ftmul@f2+1)& (0+255),w,b
 15211  003D16  0100               	movlb	0	; () banked
 15212  003D18  2396               	addwfc	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 15213  003D1A  0100               	movlb	0	; () banked
 15214  003D1C  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 15215  003D1E  0100               	movlb	0	; () banked
 15216  003D20  2397               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 15217  003D22                     i2l6480:
 15218                           
 15219                           ; BSR set to: 0
 15220  003D22  0100               	movlb	0	; () banked
 15221  003D24  90D8               	bcf	status,0,c
 15222  003D26  338D               	rrcf	(i2___ftmul@f1+2)& (0+255),f,b
 15223  003D28  338C               	rrcf	(i2___ftmul@f1+1)& (0+255),f,b
 15224  003D2A  338B               	rrcf	i2___ftmul@f1& (0+255),f,b
 15225  003D2C  0100               	movlb	0	; () banked
 15226  003D2E  90D8               	bcf	status,0,c
 15227  003D30  378E               	rlcf	i2___ftmul@f2& (0+255),f,b
 15228  003D32  378F               	rlcf	(i2___ftmul@f2+1)& (0+255),f,b
 15229  003D34  3790               	rlcf	(i2___ftmul@f2+2)& (0+255),f,b
 15230                           
 15231                           ; BSR set to: 0
 15232  003D36  0100               	movlb	0	; () banked
 15233  003D38  2F98               	decfsz	i2___ftmul@cntr& (0+255),f,b
 15234  003D3A  D7E4               	goto	i2l6476
 15235                           
 15236                           ; BSR set to: 0
 15237                           
 15238                           ; BSR set to: 0
 15239  003D3C  0E09               	movlw	9
 15240  003D3E  0100               	movlb	0	; () banked
 15241  003D40  6F98               	movwf	i2___ftmul@cntr& (0+255),b
 15242  003D42                     i2l6486:
 15243                           
 15244                           ; BSR set to: 0
 15245  003D42  0100               	movlb	0	; () banked
 15246  003D44  A18B               	btfss	i2___ftmul@f1& (0+255),0,b
 15247  003D46  D00C               	goto	i2l6490
 15248                           
 15249                           ; BSR set to: 0
 15250  003D48  0100               	movlb	0	; () banked
 15251  003D4A  518E               	movf	i2___ftmul@f2& (0+255),w,b
 15252  003D4C  0100               	movlb	0	; () banked
 15253  003D4E  2795               	addwf	i2___ftmul@f3_as_product& (0+255),f,b
 15254  003D50  0100               	movlb	0	; () banked
 15255  003D52  518F               	movf	(i2___ftmul@f2+1)& (0+255),w,b
 15256  003D54  0100               	movlb	0	; () banked
 15257  003D56  2396               	addwfc	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 15258  003D58  0100               	movlb	0	; () banked
 15259  003D5A  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 15260  003D5C  0100               	movlb	0	; () banked
 15261  003D5E  2397               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 15262  003D60                     i2l6490:
 15263                           
 15264                           ; BSR set to: 0
 15265  003D60  0100               	movlb	0	; () banked
 15266  003D62  90D8               	bcf	status,0,c
 15267  003D64  338D               	rrcf	(i2___ftmul@f1+2)& (0+255),f,b
 15268  003D66  338C               	rrcf	(i2___ftmul@f1+1)& (0+255),f,b
 15269  003D68  338B               	rrcf	i2___ftmul@f1& (0+255),f,b
 15270  003D6A  0100               	movlb	0	; () banked
 15271  003D6C  90D8               	bcf	status,0,c
 15272  003D6E  3397               	rrcf	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 15273  003D70  3396               	rrcf	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 15274  003D72  3395               	rrcf	i2___ftmul@f3_as_product& (0+255),f,b
 15275                           
 15276                           ; BSR set to: 0
 15277  003D74  0100               	movlb	0	; () banked
 15278  003D76  2F98               	decfsz	i2___ftmul@cntr& (0+255),f,b
 15279  003D78  D7E4               	goto	i2l6486
 15280                           
 15281                           ; BSR set to: 0
 15282                           
 15283                           ; BSR set to: 0
 15284  003D7A  C095  F080         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 15285  003D7E  C096  F081         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 15286  003D82  C097  F082         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 15287  003D86  C094  F083         	movff	i2___ftmul@exp,i2___ftpack@exp
 15288  003D8A  C099  F084         	movff	i2___ftmul@sign,i2___ftpack@sign
 15289  003D8E  EC49  F001         	call	i2___ftpack	;wreg free
 15290  003D92  C080  F08B         	movff	?i2___ftpack,?i2___ftmul
 15291  003D96  C081  F08C         	movff	?i2___ftpack+1,?i2___ftmul+1
 15292  003D9A  C082  F08D         	movff	?i2___ftpack+2,?i2___ftmul+2
 15293  003D9E  0012               	return	
 15294  003DA0                     __end_ofi2___ftmul:
 15295                           	opt stack 0
 15296                           pclatu	equ	0xFFB
 15297                           pclath	equ	0xFFA
 15298                           tblptru	equ	0xFF8
 15299                           tblptrh	equ	0xFF7
 15300                           tblptrl	equ	0xFF6
 15301                           tablat	equ	0xFF5
 15302                           prodh	equ	0xFF4
 15303                           prodl	equ	0xFF3
 15304                           intcon	equ	0xFF2
 15305                           intcon2	equ	0xFF1
 15306                           intcon3	equ	0xFF0
 15307                           postinc0	equ	0xFEE
 15308                           fsr0h	equ	0xFEA
 15309                           fsr0l	equ	0xFE9
 15310                           wreg	equ	0xFE8
 15311                           postdec1	equ	0xFE5
 15312                           fsr1h	equ	0xFE2
 15313                           fsr1l	equ	0xFE1
 15314                           bsr	equ	0xFE0
 15315                           postinc2	equ	0xFDE
 15316                           postdec2	equ	0xFDD
 15317                           plusw2	equ	0xFDB
 15318                           fsr2h	equ	0xFDA
 15319                           fsr2l	equ	0xFD9
 15320                           status	equ	0xFD8
 15321                           
 15322 ;; *************** function i2___ftpack *****************
 15323 ;; Defined at:
 15324 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 15325 ;; Parameters:    Size  Location     Type
 15326 ;;  arg             3    0[BANK0 ] unsigned um
 15327 ;;  exp             1    3[BANK0 ] unsigned char 
 15328 ;;  sign            1    4[BANK0 ] unsigned char 
 15329 ;; Auto vars:     Size  Location     Type
 15330 ;;		None
 15331 ;; Return value:  Size  Location     Type
 15332 ;;                  3    0[BANK0 ] float 
 15333 ;; Registers used:
 15334 ;;		wreg, status,2, status,0
 15335 ;; Tracked objects:
 15336 ;;		On entry : 0/0
 15337 ;;		On exit  : 0/0
 15338 ;;		Unchanged: 0/0
 15339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15340 ;;      Params:         0       5       0       0       0
 15341 ;;      Locals:         0       0       0       0       0
 15342 ;;      Temps:          0       3       0       0       0
 15343 ;;      Totals:         0       8       0       0       0
 15344 ;;Total ram usage:        8 bytes
 15345 ;; Hardware stack levels used:    1
 15346 ;; This function calls:
 15347 ;;		Nothing
 15348 ;; This function is called by:
 15349 ;;		i2___ftmul
 15350 ;;		i2___lwtoft
 15351 ;; This function uses a non-reentrant model
 15352 ;;
 15353                           
 15354                           	psect	text99
 15355  000292                     __ptext99:
 15356                           	opt stack 0
 15357  000292                     i2___ftpack:
 15358                           	opt stack 15
 15359                           
 15360                           ;incstack = 0
 15361  000292  0100               	movlb	0	; () banked
 15362  000294  5183               	movf	i2___ftpack@exp& (0+255),w,b
 15363  000296  0100               	movlb	0	; () banked
 15364  000298  B4D8               	btfsc	status,2,c
 15365  00029A  D008               	goto	i2l5596
 15366                           
 15367                           ; BSR set to: 0
 15368  00029C  0100               	movlb	0	; () banked
 15369  00029E  5180               	movf	i2___ftpack@arg& (0+255),w,b
 15370  0002A0  0100               	movlb	0	; () banked
 15371  0002A2  1181               	iorwf	(i2___ftpack@arg+1)& (0+255),w,b
 15372  0002A4  0100               	movlb	0	; () banked
 15373  0002A6  1182               	iorwf	(i2___ftpack@arg+2)& (0+255),w,b
 15374  0002A8  A4D8               	btfss	status,2,c
 15375  0002AA  D011               	goto	i2l5602
 15376  0002AC                     i2l5596:
 15377                           
 15378                           ; BSR set to: 0
 15379  0002AC  0E00               	movlw	0
 15380  0002AE  0100               	movlb	0	; () banked
 15381  0002B0  6F80               	movwf	?i2___ftpack& (0+255),b
 15382  0002B2  0E00               	movlw	0
 15383  0002B4  0100               	movlb	0	; () banked
 15384  0002B6  6F81               	movwf	(?i2___ftpack+1)& (0+255),b
 15385  0002B8  0E00               	movlw	0
 15386  0002BA  0100               	movlb	0	; () banked
 15387  0002BC  6F82               	movwf	(?i2___ftpack+2)& (0+255),b
 15388                           
 15389                           ; BSR set to: 0
 15390  0002BE  0012               	return	
 15391  0002C0                     i2l5600:
 15392                           
 15393                           ; BSR set to: 0
 15394  0002C0  0100               	movlb	0	; () banked
 15395  0002C2  2B83               	incf	i2___ftpack@exp& (0+255),f,b
 15396  0002C4  0100               	movlb	0	; () banked
 15397  0002C6  90D8               	bcf	status,0,c
 15398  0002C8  3382               	rrcf	(i2___ftpack@arg+2)& (0+255),f,b
 15399  0002CA  3381               	rrcf	(i2___ftpack@arg+1)& (0+255),f,b
 15400  0002CC  3380               	rrcf	i2___ftpack@arg& (0+255),f,b
 15401  0002CE                     i2l5602:
 15402                           
 15403                           ; BSR set to: 0
 15404  0002CE  0E00               	movlw	0
 15405  0002D0  0100               	movlb	0	; () banked
 15406  0002D2  1580               	andwf	i2___ftpack@arg& (0+255),w,b
 15407  0002D4  0100               	movlb	0	; () banked
 15408  0002D6  6F85               	movwf	??i2___ftpack& (0+255),b
 15409  0002D8  0E00               	movlw	0
 15410  0002DA  0100               	movlb	0	; () banked
 15411  0002DC  1581               	andwf	(i2___ftpack@arg+1)& (0+255),w,b
 15412  0002DE  0100               	movlb	0	; () banked
 15413  0002E0  6F86               	movwf	(??i2___ftpack+1)& (0+255),b
 15414  0002E2  0EFE               	movlw	254
 15415  0002E4  0100               	movlb	0	; () banked
 15416  0002E6  1582               	andwf	(i2___ftpack@arg+2)& (0+255),w,b
 15417  0002E8  0100               	movlb	0	; () banked
 15418  0002EA  6F87               	movwf	(??i2___ftpack+2)& (0+255),b
 15419  0002EC  0100               	movlb	0	; () banked
 15420  0002EE  5185               	movf	??i2___ftpack& (0+255),w,b
 15421  0002F0  0100               	movlb	0	; () banked
 15422  0002F2  1186               	iorwf	(??i2___ftpack+1)& (0+255),w,b
 15423  0002F4  0100               	movlb	0	; () banked
 15424  0002F6  1187               	iorwf	(??i2___ftpack+2)& (0+255),w,b
 15425  0002F8  B4D8               	btfsc	status,2,c
 15426  0002FA  D011               	goto	i2l5608
 15427  0002FC  D7E1               	goto	i2l5600
 15428  0002FE                     i2l5604:
 15429                           
 15430                           ; BSR set to: 0
 15431  0002FE  0100               	movlb	0	; () banked
 15432  000300  2B83               	incf	i2___ftpack@exp& (0+255),f,b
 15433                           
 15434                           ; BSR set to: 0
 15435  000302  0E01               	movlw	1
 15436  000304  0100               	movlb	0	; () banked
 15437  000306  2780               	addwf	i2___ftpack@arg& (0+255),f,b
 15438  000308  0E00               	movlw	0
 15439  00030A  0100               	movlb	0	; () banked
 15440  00030C  2381               	addwfc	(i2___ftpack@arg+1)& (0+255),f,b
 15441  00030E  0E00               	movlw	0
 15442  000310  0100               	movlb	0	; () banked
 15443  000312  2382               	addwfc	(i2___ftpack@arg+2)& (0+255),f,b
 15444  000314  0100               	movlb	0	; () banked
 15445  000316  90D8               	bcf	status,0,c
 15446  000318  3382               	rrcf	(i2___ftpack@arg+2)& (0+255),f,b
 15447  00031A  3381               	rrcf	(i2___ftpack@arg+1)& (0+255),f,b
 15448  00031C  3380               	rrcf	i2___ftpack@arg& (0+255),f,b
 15449  00031E                     i2l5608:
 15450                           
 15451                           ; BSR set to: 0
 15452  00031E  0E00               	movlw	0
 15453  000320  0100               	movlb	0	; () banked
 15454  000322  1580               	andwf	i2___ftpack@arg& (0+255),w,b
 15455  000324  0100               	movlb	0	; () banked
 15456  000326  6F85               	movwf	??i2___ftpack& (0+255),b
 15457  000328  0E00               	movlw	0
 15458  00032A  0100               	movlb	0	; () banked
 15459  00032C  1581               	andwf	(i2___ftpack@arg+1)& (0+255),w,b
 15460  00032E  0100               	movlb	0	; () banked
 15461  000330  6F86               	movwf	(??i2___ftpack+1)& (0+255),b
 15462  000332  0EFF               	movlw	255
 15463  000334  0100               	movlb	0	; () banked
 15464  000336  1582               	andwf	(i2___ftpack@arg+2)& (0+255),w,b
 15465  000338  0100               	movlb	0	; () banked
 15466  00033A  6F87               	movwf	(??i2___ftpack+2)& (0+255),b
 15467  00033C  0100               	movlb	0	; () banked
 15468  00033E  5185               	movf	??i2___ftpack& (0+255),w,b
 15469  000340  0100               	movlb	0	; () banked
 15470  000342  1186               	iorwf	(??i2___ftpack+1)& (0+255),w,b
 15471  000344  0100               	movlb	0	; () banked
 15472  000346  1187               	iorwf	(??i2___ftpack+2)& (0+255),w,b
 15473  000348  B4D8               	btfsc	status,2,c
 15474  00034A  D008               	goto	i2l5612
 15475  00034C  D7D8               	goto	i2l5604
 15476  00034E                     i2l5610:
 15477                           
 15478                           ; BSR set to: 0
 15479  00034E  0100               	movlb	0	; () banked
 15480  000350  0783               	decf	i2___ftpack@exp& (0+255),f,b
 15481  000352  0100               	movlb	0	; () banked
 15482  000354  90D8               	bcf	status,0,c
 15483  000356  3780               	rlcf	i2___ftpack@arg& (0+255),f,b
 15484  000358  3781               	rlcf	(i2___ftpack@arg+1)& (0+255),f,b
 15485  00035A  3782               	rlcf	(i2___ftpack@arg+2)& (0+255),f,b
 15486  00035C                     i2l5612:
 15487                           
 15488                           ; BSR set to: 0
 15489  00035C  0100               	movlb	0	; () banked
 15490  00035E  BF81               	btfsc	(i2___ftpack@arg+1)& (0+255),7,b
 15491  000360  D004               	goto	i2l1516
 15492                           
 15493                           ; BSR set to: 0
 15494  000362  0E02               	movlw	2
 15495  000364  0100               	movlb	0	; () banked
 15496  000366  6183               	cpfslt	i2___ftpack@exp& (0+255),b
 15497  000368  D7F2               	goto	i2l5610
 15498  00036A                     i2l1516:
 15499                           
 15500                           ; BSR set to: 0
 15501  00036A  0100               	movlb	0	; () banked
 15502  00036C  B183               	btfsc	i2___ftpack@exp& (0+255),0,b
 15503  00036E  D002               	goto	i2l5618
 15504                           
 15505                           ; BSR set to: 0
 15506  000370  0100               	movlb	0	; () banked
 15507  000372  9F81               	bcf	(i2___ftpack@arg+1)& (0+255),7,b
 15508  000374                     i2l5618:
 15509                           
 15510                           ; BSR set to: 0
 15511  000374  0100               	movlb	0	; () banked
 15512  000376  90D8               	bcf	status,0,c
 15513  000378  3383               	rrcf	i2___ftpack@exp& (0+255),f,b
 15514  00037A  0100               	movlb	0	; () banked
 15515  00037C  5183               	movf	i2___ftpack@exp& (0+255),w,b
 15516  00037E  0100               	movlb	0	; () banked
 15517  000380  1382               	iorwf	(i2___ftpack@arg+2)& (0+255),f,b
 15518                           
 15519                           ; BSR set to: 0
 15520  000382  0100               	movlb	0	; () banked
 15521  000384  5184               	movf	i2___ftpack@sign& (0+255),w,b
 15522  000386  0100               	movlb	0	; () banked
 15523  000388  B4D8               	btfsc	status,2,c
 15524  00038A  D002               	goto	i2l5624
 15525                           
 15526                           ; BSR set to: 0
 15527  00038C  0100               	movlb	0	; () banked
 15528  00038E  8F82               	bsf	(i2___ftpack@arg+2)& (0+255),7,b
 15529  000390                     i2l5624:
 15530                           
 15531                           ; BSR set to: 0
 15532  000390  C080  F080         	movff	i2___ftpack@arg,?i2___ftpack
 15533  000394  C081  F081         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 15534  000398  C082  F082         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 15535  00039C  0012               	return	
 15536  00039E                     __end_ofi2___ftpack:
 15537                           	opt stack 0
 15538                           pclatu	equ	0xFFB
 15539                           pclath	equ	0xFFA
 15540                           tblptru	equ	0xFF8
 15541                           tblptrh	equ	0xFF7
 15542                           tblptrl	equ	0xFF6
 15543                           tablat	equ	0xFF5
 15544                           prodh	equ	0xFF4
 15545                           prodl	equ	0xFF3
 15546                           intcon	equ	0xFF2
 15547                           intcon2	equ	0xFF1
 15548                           intcon3	equ	0xFF0
 15549                           postinc0	equ	0xFEE
 15550                           fsr0h	equ	0xFEA
 15551                           fsr0l	equ	0xFE9
 15552                           wreg	equ	0xFE8
 15553                           postdec1	equ	0xFE5
 15554                           fsr1h	equ	0xFE2
 15555                           fsr1l	equ	0xFE1
 15556                           bsr	equ	0xFE0
 15557                           postinc2	equ	0xFDE
 15558                           postdec2	equ	0xFDD
 15559                           plusw2	equ	0xFDB
 15560                           fsr2h	equ	0xFDA
 15561                           fsr2l	equ	0xFD9
 15562                           status	equ	0xFD8
 15563                           
 15564 ;; *************** function i2___ftge *****************
 15565 ;; Defined at:
 15566 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
 15567 ;; Parameters:    Size  Location     Type
 15568 ;;  ff1             3   11[BANK0 ] float 
 15569 ;;  ff2             3   14[BANK0 ] float 
 15570 ;; Auto vars:     Size  Location     Type
 15571 ;;		None
 15572 ;; Return value:  Size  Location     Type
 15573 ;;		None               void
 15574 ;; Registers used:
 15575 ;;		wreg, status,2, status,0
 15576 ;; Tracked objects:
 15577 ;;		On entry : 0/0
 15578 ;;		On exit  : 0/0
 15579 ;;		Unchanged: 0/0
 15580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15581 ;;      Params:         0       6       0       0       0
 15582 ;;      Locals:         0       0       0       0       0
 15583 ;;      Temps:          0       3       0       0       0
 15584 ;;      Totals:         0       9       0       0       0
 15585 ;;Total ram usage:        9 bytes
 15586 ;; Hardware stack levels used:    1
 15587 ;; This function calls:
 15588 ;;		Nothing
 15589 ;; This function is called by:
 15590 ;;		_RF_CheckCode
 15591 ;; This function uses a non-reentrant model
 15592 ;;
 15593                           
 15594                           	psect	text100
 15595  0008DE                     __ptext100:
 15596                           	opt stack 0
 15597  0008DE                     i2___ftge:
 15598                           	opt stack 16
 15599                           
 15600                           ; BSR set to: 0
 15601                           ;incstack = 0
 15602  0008DE  0100               	movlb	0	; () banked
 15603  0008E0  AF8D               	btfss	(i2___ftge@ff1+2)& (0+255),7,b
 15604  0008E2  D01D               	goto	i2l6388
 15605                           
 15606                           ; BSR set to: 0
 15607  0008E4  C08B  F091         	movff	i2___ftge@ff1,??i2___ftge
 15608  0008E8  C08C  F092         	movff	i2___ftge@ff1+1,??i2___ftge+1
 15609  0008EC  C08D  F093         	movff	i2___ftge@ff1+2,??i2___ftge+2
 15610  0008F0  0100               	movlb	0	; () banked
 15611  0008F2  1F91               	comf	??i2___ftge& (0+255),f,b
 15612  0008F4  1F92               	comf	(??i2___ftge+1)& (0+255),f,b
 15613  0008F6  1F93               	comf	(??i2___ftge+2)& (0+255),f,b
 15614  0008F8  2B91               	incf	??i2___ftge& (0+255),f,b
 15615  0008FA  0E00               	movlw	0
 15616  0008FC  2392               	addwfc	(??i2___ftge+1)& (0+255),f,b
 15617  0008FE  2393               	addwfc	(??i2___ftge+2)& (0+255),f,b
 15618  000900  0E00               	movlw	0
 15619  000902  0100               	movlb	0	; () banked
 15620  000904  2591               	addwf	??i2___ftge& (0+255),w,b
 15621  000906  0100               	movlb	0	; () banked
 15622  000908  6F8B               	movwf	i2___ftge@ff1& (0+255),b
 15623  00090A  0E00               	movlw	0
 15624  00090C  0100               	movlb	0	; () banked
 15625  00090E  2192               	addwfc	(??i2___ftge+1)& (0+255),w,b
 15626  000910  0100               	movlb	0	; () banked
 15627  000912  6F8C               	movwf	(i2___ftge@ff1+1)& (0+255),b
 15628  000914  0E80               	movlw	128
 15629  000916  0100               	movlb	0	; () banked
 15630  000918  2193               	addwfc	(??i2___ftge+2)& (0+255),w,b
 15631  00091A  0100               	movlb	0	; () banked
 15632  00091C  6F8D               	movwf	(i2___ftge@ff1+2)& (0+255),b
 15633  00091E                     i2l6388:
 15634                           
 15635                           ; BSR set to: 0
 15636  00091E  0100               	movlb	0	; () banked
 15637  000920  AF90               	btfss	(i2___ftge@ff2+2)& (0+255),7,b
 15638  000922  D01D               	goto	i2l6392
 15639                           
 15640                           ; BSR set to: 0
 15641  000924  C08E  F091         	movff	i2___ftge@ff2,??i2___ftge
 15642  000928  C08F  F092         	movff	i2___ftge@ff2+1,??i2___ftge+1
 15643  00092C  C090  F093         	movff	i2___ftge@ff2+2,??i2___ftge+2
 15644  000930  0100               	movlb	0	; () banked
 15645  000932  1F91               	comf	??i2___ftge& (0+255),f,b
 15646  000934  1F92               	comf	(??i2___ftge+1)& (0+255),f,b
 15647  000936  1F93               	comf	(??i2___ftge+2)& (0+255),f,b
 15648  000938  2B91               	incf	??i2___ftge& (0+255),f,b
 15649  00093A  0E00               	movlw	0
 15650  00093C  2392               	addwfc	(??i2___ftge+1)& (0+255),f,b
 15651  00093E  2393               	addwfc	(??i2___ftge+2)& (0+255),f,b
 15652  000940  0E00               	movlw	0
 15653  000942  0100               	movlb	0	; () banked
 15654  000944  2591               	addwf	??i2___ftge& (0+255),w,b
 15655  000946  0100               	movlb	0	; () banked
 15656  000948  6F8E               	movwf	i2___ftge@ff2& (0+255),b
 15657  00094A  0E00               	movlw	0
 15658  00094C  0100               	movlb	0	; () banked
 15659  00094E  2192               	addwfc	(??i2___ftge+1)& (0+255),w,b
 15660  000950  0100               	movlb	0	; () banked
 15661  000952  6F8F               	movwf	(i2___ftge@ff2+1)& (0+255),b
 15662  000954  0E80               	movlw	128
 15663  000956  0100               	movlb	0	; () banked
 15664  000958  2193               	addwfc	(??i2___ftge+2)& (0+255),w,b
 15665  00095A  0100               	movlb	0	; () banked
 15666  00095C  6F90               	movwf	(i2___ftge@ff2+2)& (0+255),b
 15667  00095E                     i2l6392:
 15668                           
 15669                           ; BSR set to: 0
 15670  00095E  0E00               	movlw	0
 15671  000960  0100               	movlb	0	; () banked
 15672  000962  1B8B               	xorwf	i2___ftge@ff1& (0+255),f,b
 15673  000964  0E00               	movlw	0
 15674  000966  0100               	movlb	0	; () banked
 15675  000968  1B8C               	xorwf	(i2___ftge@ff1+1)& (0+255),f,b
 15676  00096A  0E80               	movlw	128
 15677  00096C  0100               	movlb	0	; () banked
 15678  00096E  1B8D               	xorwf	(i2___ftge@ff1+2)& (0+255),f,b
 15679                           
 15680                           ; BSR set to: 0
 15681  000970  0E00               	movlw	0
 15682  000972  0100               	movlb	0	; () banked
 15683  000974  1B8E               	xorwf	i2___ftge@ff2& (0+255),f,b
 15684  000976  0E00               	movlw	0
 15685  000978  0100               	movlb	0	; () banked
 15686  00097A  1B8F               	xorwf	(i2___ftge@ff2+1)& (0+255),f,b
 15687  00097C  0E80               	movlw	128
 15688  00097E  0100               	movlb	0	; () banked
 15689  000980  1B90               	xorwf	(i2___ftge@ff2+2)& (0+255),f,b
 15690  000982  0100               	movlb	0	; () banked
 15691  000984  518E               	movf	i2___ftge@ff2& (0+255),w,b
 15692  000986  0100               	movlb	0	; () banked
 15693  000988  5D8B               	subwf	i2___ftge@ff1& (0+255),w,b
 15694  00098A  0100               	movlb	0	; () banked
 15695  00098C  518F               	movf	(i2___ftge@ff2+1)& (0+255),w,b
 15696  00098E  0100               	movlb	0	; () banked
 15697  000990  598C               	subwfb	(i2___ftge@ff1+1)& (0+255),w,b
 15698  000992  0100               	movlb	0	; () banked
 15699  000994  5190               	movf	(i2___ftge@ff2+2)& (0+255),w,b
 15700  000996  0100               	movlb	0	; () banked
 15701  000998  598D               	subwfb	(i2___ftge@ff1+2)& (0+255),w,b
 15702  00099A  B0D8               	btfsc	status,0,c
 15703  00099C  D002               	goto	i2l6398
 15704                           
 15705                           ; BSR set to: 0
 15706  00099E  90D8               	bcf	status,0,c
 15707  0009A0  0012               	return	
 15708  0009A2                     i2l6398:
 15709                           
 15710                           ; BSR set to: 0
 15711  0009A2  80D8               	bsf	status,0,c
 15712                           
 15713                           ; BSR set to: 0
 15714  0009A4  0012               	return	
 15715  0009A6                     __end_ofi2___ftge:
 15716                           	opt stack 0
 15717                           pclatu	equ	0xFFB
 15718                           pclath	equ	0xFFA
 15719                           tblptru	equ	0xFF8
 15720                           tblptrh	equ	0xFF7
 15721                           tblptrl	equ	0xFF6
 15722                           tablat	equ	0xFF5
 15723                           prodh	equ	0xFF4
 15724                           prodl	equ	0xFF3
 15725                           intcon	equ	0xFF2
 15726                           intcon2	equ	0xFF1
 15727                           intcon3	equ	0xFF0
 15728                           postinc0	equ	0xFEE
 15729                           fsr0h	equ	0xFEA
 15730                           fsr0l	equ	0xFE9
 15731                           wreg	equ	0xFE8
 15732                           postdec1	equ	0xFE5
 15733                           fsr1h	equ	0xFE2
 15734                           fsr1l	equ	0xFE1
 15735                           bsr	equ	0xFE0
 15736                           postinc2	equ	0xFDE
 15737                           postdec2	equ	0xFDD
 15738                           plusw2	equ	0xFDB
 15739                           fsr2h	equ	0xFDA
 15740                           fsr2l	equ	0xFD9
 15741                           status	equ	0xFD8
 15742                           
 15743 ;; *************** function i2_FSH_Write_IR_RF *****************
 15744 ;; Defined at:
 15745 ;;		line 196 in file "FLASH.c"
 15746 ;; Parameters:    Size  Location     Type
 15747 ;;		None
 15748 ;; Auto vars:     Size  Location     Type
 15749 ;;  FSH_Write_IR    2   29[BANK0 ] unsigned int 
 15750 ;;  FSH_Write_IR    2   25[BANK0 ] unsigned int 
 15751 ;;  FSH_Write_IR    1   31[BANK0 ] unsigned char 
 15752 ;;  FSH_Write_IR    1   28[BANK0 ] unsigned char 
 15753 ;;  FSH_Write_IR    1   27[BANK0 ] unsigned char 
 15754 ;;  FSH_Write_IR    1   24[BANK0 ] unsigned char 
 15755 ;;  FSH_Write_IR    1   23[BANK0 ] unsigned char 
 15756 ;; Return value:  Size  Location     Type
 15757 ;;                  1    wreg      unsigned char 
 15758 ;; Registers used:
 15759 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15760 ;; Tracked objects:
 15761 ;;		On entry : 0/0
 15762 ;;		On exit  : 0/0
 15763 ;;		Unchanged: 0/0
 15764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15765 ;;      Params:         0       0       0       0       0
 15766 ;;      Locals:         0       9       0       0       0
 15767 ;;      Temps:          0       6       0       0       0
 15768 ;;      Totals:         0      15       0       0       0
 15769 ;;Total ram usage:       15 bytes
 15770 ;; Hardware stack levels used:    1
 15771 ;; Hardware stack levels required when called:    3
 15772 ;; This function calls:
 15773 ;;		i2_FSH_AddressToBlock
 15774 ;;		i2_FSH_EraseBlock
 15775 ;;		i2_FSH_VerifyWriteIntArray
 15776 ;;		i2_FSH_WriteIntArray
 15777 ;;		i2_IR_ResetData
 15778 ;;		i2_MSC_BufferCopyIntConst
 15779 ;;		i2_RF_ResetData
 15780 ;; This function is called by:
 15781 ;;		_RF_CheckCode
 15782 ;; This function uses a non-reentrant model
 15783 ;;
 15784                           
 15785                           	psect	text101
 15786  002844                     __ptext101:
 15787                           	opt stack 0
 15788  002844                     i2_FSH_Write_IR_RF:
 15789                           	opt stack 13
 15790                           
 15791                           ;FLASH.c: 198: unsigned int i;
 15792                           ;FLASH.c: 199: unsigned char j;
 15793                           ;FLASH.c: 200: unsigned char highint = INTCONbits.GIE;
 15794                           
 15795                           ; BSR set to: 0
 15796                           ;incstack = 0
 15797  002844  0E00               	movlw	0
 15798  002846  BEF2               	btfsc	intcon,7,c	;volatile
 15799  002848  0E01               	movlw	1
 15800  00284A  0100               	movlb	0	; () banked
 15801  00284C  6F97               	movwf	i2FSH_Write_IR_RF@highint& (0+255),b
 15802                           
 15803                           ;FLASH.c: 201: unsigned char lowint = INTCONbits.PEIE;
 15804  00284E  0E00               	movlw	0
 15805  002850  BCF2               	btfsc	intcon,6,c	;volatile
 15806  002852  0E01               	movlw	1
 15807  002854  0100               	movlb	0	; () banked
 15808  002856  6F98               	movwf	i2FSH_Write_IR_RF@lowint& (0+255),b
 15809                           
 15810                           ; BSR set to: 0
 15811                           ;FLASH.c: 202: unsigned char WriteTries;
 15812                           ;FLASH.c: 203: unsigned char status = 0;
 15813  002858  0E00               	movlw	0
 15814  00285A  0100               	movlb	0	; () banked
 15815  00285C  6F9C               	movwf	i2FSH_Write_IR_RF@status& (0+255),b
 15816                           
 15817                           ; BSR set to: 0
 15818                           ;FLASH.c: 204: unsigned int FlashWasteindex = 0;
 15819  00285E  0E00               	movlw	0
 15820  002860  0100               	movlb	0	; () banked
 15821  002862  6F9A               	movwf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),b
 15822  002864  0E00               	movlw	0
 15823  002866  6F99               	movwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),b
 15824                           
 15825                           ; BSR set to: 0
 15826                           ;FLASH.c: 206: INTCONbits.GIE = 0;
 15827  002868  9EF2               	bcf	intcon,7,c	;volatile
 15828                           
 15829                           ; BSR set to: 0
 15830                           ;FLASH.c: 207: INTCONbits.PEIE = 0;
 15831  00286A  9CF2               	bcf	intcon,6,c	;volatile
 15832                           
 15833                           ; BSR set to: 0
 15834                           ;FLASH.c: 209: if(IR_Saved == 90 && RF_Saved == 90)
 15835  00286C  0E5A               	movlw	90
 15836  00286E  0100               	movlb	0	; () banked
 15837  002870  19CD               	xorwf	_IR_Saved& (0+255),w,b
 15838  002872  A4D8               	btfss	status,2,c
 15839  002874  D005               	goto	i2l6168
 15840                           
 15841                           ; BSR set to: 0
 15842  002876  0E5A               	movlw	90
 15843  002878  0100               	movlb	0	; () banked
 15844  00287A  19CE               	xorwf	_RF_Saved& (0+255),w,b
 15845  00287C  B4D8               	btfsc	status,2,c
 15846  00287E  D00A               	goto	i2l6172
 15847  002880                     i2l6168:
 15848                           
 15849                           ; BSR set to: 0
 15850                           ;FLASH.c: 216: else if(IR_Saved != 90 && RF_Saved != 90)
 15851  002880  0E5A               	movlw	90
 15852  002882  0100               	movlb	0	; () banked
 15853  002884  19CD               	xorwf	_IR_Saved& (0+255),w,b
 15854  002886  B4D8               	btfsc	status,2,c
 15855  002888  D00C               	goto	i2l6174
 15856                           
 15857                           ; BSR set to: 0
 15858  00288A  0E5A               	movlw	90
 15859  00288C  0100               	movlb	0	; () banked
 15860  00288E  19CE               	xorwf	_RF_Saved& (0+255),w,b
 15861  002890  B4D8               	btfsc	status,2,c
 15862  002892  D007               	goto	i2l6174
 15863  002894                     i2l6172:
 15864                           
 15865                           ; BSR set to: 0
 15866                           ;FLASH.c: 217: {
 15867                           ;FLASH.c: 219: IR_Saved = 91;
 15868  002894  0E5B               	movlw	91
 15869  002896  0100               	movlb	0	; () banked
 15870  002898  6FCD               	movwf	_IR_Saved& (0+255),b
 15871                           
 15872                           ;FLASH.c: 220: RF_Saved = 91;
 15873  00289A  0E5B               	movlw	91
 15874  00289C  0100               	movlb	0	; () banked
 15875  00289E  6FCE               	movwf	_RF_Saved& (0+255),b
 15876                           
 15877                           ;FLASH.c: 221: goto END;
 15878  0028A0  D239               	goto	i2l1182
 15879  0028A2                     i2l6174:
 15880                           
 15881                           ; BSR set to: 0
 15882                           ;FLASH.c: 222: }
 15883                           ;FLASH.c: 224: if(IR_Saved == 90)
 15884  0028A2  0E5A               	movlw	90
 15885  0028A4  0100               	movlb	0	; () banked
 15886  0028A6  19CD               	xorwf	_IR_Saved& (0+255),w,b
 15887  0028A8  A4D8               	btfss	status,2,c
 15888  0028AA  D01E               	goto	i2l6180
 15889                           
 15890                           ; BSR set to: 0
 15891                           ;FLASH.c: 225: {
 15892                           ;FLASH.c: 227: RF_ResetData();
 15893  0028AC  EC11  F00D         	call	i2_RF_ResetData	;wreg free
 15894                           
 15895                           ;FLASH.c: 228: MSC_BufferCopyIntConst(&RF_SavedTiming,&RF_DataTiming, 128, 0);
 15896  0028B0  0E00               	movlw	0
 15897  0028B2  0100               	movlb	0	; () banked
 15898  0028B4  6F86               	movwf	i2MSC_BufferCopyIntConst@from& (0+255),b
 15899  0028B6  0E25               	movlw	37
 15900  0028B8  0100               	movlb	0	; () banked
 15901  0028BA  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 15902  0028BC  0E00               	movlw	0
 15903  0028BE  0100               	movlb	0	; () banked
 15904  0028C0  6F88               	movwf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 15905  0028C2  0E00               	movlw	low _RF_DataTiming
 15906  0028C4  0100               	movlb	0	; () banked
 15907  0028C6  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 15908  0028C8  0E03               	movlw	high _RF_DataTiming
 15909  0028CA  0100               	movlb	0	; () banked
 15910  0028CC  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 15911  0028CE  0E00               	movlw	0
 15912  0028D0  0100               	movlb	0	; () banked
 15913  0028D2  6F8C               	movwf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 15914  0028D4  0E80               	movlw	128
 15915  0028D6  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 15916  0028D8  0E00               	movlw	0
 15917  0028DA  0100               	movlb	0	; () banked
 15918  0028DC  6F8E               	movwf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 15919  0028DE  0E00               	movlw	0
 15920  0028E0  6F8D               	movwf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 15921  0028E2  EC35  F005         	call	i2_MSC_BufferCopyIntConst	;wreg free
 15922                           
 15923                           ;FLASH.c: 229: }
 15924  0028E6  D01D               	goto	i2l6184
 15925  0028E8                     i2l6180:
 15926                           
 15927                           ;FLASH.c: 230: else
 15928                           ;FLASH.c: 231: {
 15929                           ;FLASH.c: 233: IR_ResetData();
 15930  0028E8  EC18  F00D         	call	i2_IR_ResetData	;wreg free
 15931                           
 15932                           ;FLASH.c: 234: MSC_BufferCopyIntConst(&IR_SavedTiming,&IR_DataTiming, 128, 0);
 15933  0028EC  0E00               	movlw	0
 15934  0028EE  0100               	movlb	0	; () banked
 15935  0028F0  6F86               	movwf	i2MSC_BufferCopyIntConst@from& (0+255),b
 15936  0028F2  0E24               	movlw	36
 15937  0028F4  0100               	movlb	0	; () banked
 15938  0028F6  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 15939  0028F8  0E00               	movlw	0
 15940  0028FA  0100               	movlb	0	; () banked
 15941  0028FC  6F88               	movwf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 15942  0028FE  0E00               	movlw	low _IR_DataTiming
 15943  002900  0100               	movlb	0	; () banked
 15944  002902  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 15945  002904  0E02               	movlw	high _IR_DataTiming
 15946  002906  0100               	movlb	0	; () banked
 15947  002908  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 15948  00290A  0E00               	movlw	0
 15949  00290C  0100               	movlb	0	; () banked
 15950  00290E  6F8C               	movwf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 15951  002910  0E80               	movlw	128
 15952  002912  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 15953  002914  0E00               	movlw	0
 15954  002916  0100               	movlb	0	; () banked
 15955  002918  6F8E               	movwf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 15956  00291A  0E00               	movlw	0
 15957  00291C  6F8D               	movwf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 15958  00291E  EC35  F005         	call	i2_MSC_BufferCopyIntConst	;wreg free
 15959  002922                     i2l6184:
 15960                           
 15961                           ;FLASH.c: 235: }
 15962                           ;FLASH.c: 237: FSH_EraseBlock(&IR_SavedTiming);
 15963  002922  0E00               	movlw	0
 15964  002924  0100               	movlb	0	; () banked
 15965  002926  6F84               	movwf	i2FSH_EraseBlock@Address& (0+255),b
 15966  002928  0E24               	movlw	36
 15967  00292A  6F85               	movwf	(i2FSH_EraseBlock@Address+1)& (0+255),b
 15968  00292C  0E00               	movlw	0
 15969  00292E  6F86               	movwf	(i2FSH_EraseBlock@Address+2)& (0+255),b
 15970  002930  0E00               	movlw	0
 15971  002932  6F87               	movwf	(i2FSH_EraseBlock@Address+3)& (0+255),b
 15972  002934  EC53  F007         	call	i2_FSH_EraseBlock	;wreg free
 15973                           
 15974                           ;FLASH.c: 242: WriteTries = 1;
 15975  002938  0E01               	movlw	1
 15976  00293A  0100               	movlb	0	; () banked
 15977  00293C  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 15978  00293E                     i2l6188:
 15979                           
 15980                           ; BSR set to: 0
 15981                           ;FLASH.c: 246: FSH_WriteIntArray(&IR_SavedTiming[0]);
 15982  00293E  0E00               	movlw	0
 15983  002940  0100               	movlb	0	; () banked
 15984  002942  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 15985  002944  0E24               	movlw	36
 15986  002946  0100               	movlb	0	; () banked
 15987  002948  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 15988  00294A  0E00               	movlw	0
 15989  00294C  0100               	movlb	0	; () banked
 15990  00294E  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 15991  002950  ECA5  F003         	call	i2_FSH_WriteIntArray	;wreg free
 15992                           
 15993                           ;FLASH.c: 249: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[0],&IR_DataTiming[0]))
 15994  002954  0E00               	movlw	0
 15995  002956  0100               	movlb	0	; () banked
 15996  002958  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 15997  00295A  0E24               	movlw	36
 15998  00295C  0100               	movlb	0	; () banked
 15999  00295E  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 16000  002960  0E00               	movlw	0
 16001  002962  0100               	movlb	0	; () banked
 16002  002964  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 16003  002966  0E00               	movlw	low _IR_DataTiming
 16004  002968  0100               	movlb	0	; () banked
 16005  00296A  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 16006  00296C  0E02               	movlw	high _IR_DataTiming
 16007  00296E  0100               	movlb	0	; () banked
 16008  002970  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 16009  002972  EC18  F007         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 16010  002976  0900               	iorlw	0
 16011  002978  A4D8               	btfss	status,2,c
 16012  00297A  D007               	goto	i2l6200
 16013                           
 16014                           ;FLASH.c: 250: {
 16015                           ;FLASH.c: 251: WriteTries++;
 16016  00297C  0100               	movlb	0	; () banked
 16017  00297E  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 16018                           
 16019                           ; BSR set to: 0
 16020                           ;FLASH.c: 252: if(WriteTries > 10)
 16021  002980  0E0A               	movlw	10
 16022  002982  0100               	movlb	0	; () banked
 16023  002984  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16024  002986  D7DB               	goto	i2l6188
 16025  002988  D1B6               	goto	i2l6334
 16026  00298A                     i2l6200:
 16027                           
 16028                           ;FLASH.c: 260: }
 16029                           ;FLASH.c: 261: }
 16030                           ;FLASH.c: 264: WriteTries = 1;
 16031  00298A  0E01               	movlw	1
 16032  00298C  0100               	movlb	0	; () banked
 16033  00298E  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16034  002990                     i2l6202:
 16035                           
 16036                           ; BSR set to: 0
 16037                           ;FLASH.c: 268: FSH_WriteIntArray(&IR_SavedTiming[32]);
 16038  002990  0E40               	movlw	64
 16039  002992  0100               	movlb	0	; () banked
 16040  002994  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 16041  002996  0E24               	movlw	36
 16042  002998  0100               	movlb	0	; () banked
 16043  00299A  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 16044  00299C  0E00               	movlw	0
 16045  00299E  0100               	movlb	0	; () banked
 16046  0029A0  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 16047  0029A2  ECA5  F003         	call	i2_FSH_WriteIntArray	;wreg free
 16048                           
 16049                           ;FLASH.c: 271: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[32],&IR_DataTiming[32]))
 16050  0029A6  0E40               	movlw	64
 16051  0029A8  0100               	movlb	0	; () banked
 16052  0029AA  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 16053  0029AC  0E24               	movlw	36
 16054  0029AE  0100               	movlb	0	; () banked
 16055  0029B0  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 16056  0029B2  0E00               	movlw	0
 16057  0029B4  0100               	movlb	0	; () banked
 16058  0029B6  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 16059  0029B8  0E40               	movlw	low (_IR_DataTiming+64)
 16060  0029BA  0100               	movlb	0	; () banked
 16061  0029BC  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 16062  0029BE  0E02               	movlw	high (_IR_DataTiming+64)
 16063  0029C0  0100               	movlb	0	; () banked
 16064  0029C2  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 16065  0029C4  EC18  F007         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 16066  0029C8  0900               	iorlw	0
 16067  0029CA  A4D8               	btfss	status,2,c
 16068  0029CC  D007               	goto	i2l6214
 16069                           
 16070                           ;FLASH.c: 272: {
 16071                           ;FLASH.c: 273: WriteTries++;
 16072  0029CE  0100               	movlb	0	; () banked
 16073  0029D0  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 16074                           
 16075                           ; BSR set to: 0
 16076                           ;FLASH.c: 274: if(WriteTries > 10)
 16077  0029D2  0E0A               	movlw	10
 16078  0029D4  0100               	movlb	0	; () banked
 16079  0029D6  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16080  0029D8  D7DB               	goto	i2l6202
 16081  0029DA  D18D               	goto	i2l6334
 16082  0029DC                     i2l6214:
 16083                           
 16084                           ;FLASH.c: 282: }
 16085                           ;FLASH.c: 283: }
 16086                           ;FLASH.c: 286: WriteTries = 1;
 16087  0029DC  0E01               	movlw	1
 16088  0029DE  0100               	movlb	0	; () banked
 16089  0029E0  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16090  0029E2                     i2l6216:
 16091                           
 16092                           ; BSR set to: 0
 16093                           ;FLASH.c: 290: FSH_WriteIntArray(&IR_SavedTiming[64]);
 16094  0029E2  0E80               	movlw	128
 16095  0029E4  0100               	movlb	0	; () banked
 16096  0029E6  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 16097  0029E8  0E24               	movlw	36
 16098  0029EA  0100               	movlb	0	; () banked
 16099  0029EC  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 16100  0029EE  0E00               	movlw	0
 16101  0029F0  0100               	movlb	0	; () banked
 16102  0029F2  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 16103  0029F4  ECA5  F003         	call	i2_FSH_WriteIntArray	;wreg free
 16104                           
 16105                           ;FLASH.c: 293: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[64],&IR_DataTiming[64]))
 16106  0029F8  0E80               	movlw	128
 16107  0029FA  0100               	movlb	0	; () banked
 16108  0029FC  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 16109  0029FE  0E24               	movlw	36
 16110  002A00  0100               	movlb	0	; () banked
 16111  002A02  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 16112  002A04  0E00               	movlw	0
 16113  002A06  0100               	movlb	0	; () banked
 16114  002A08  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 16115  002A0A  0E80               	movlw	low (_IR_DataTiming+128)
 16116  002A0C  0100               	movlb	0	; () banked
 16117  002A0E  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 16118  002A10  0E02               	movlw	high (_IR_DataTiming+128)
 16119  002A12  0100               	movlb	0	; () banked
 16120  002A14  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 16121  002A16  EC18  F007         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 16122  002A1A  0900               	iorlw	0
 16123  002A1C  A4D8               	btfss	status,2,c
 16124  002A1E  D007               	goto	i2l6228
 16125                           
 16126                           ;FLASH.c: 294: {
 16127                           ;FLASH.c: 295: WriteTries++;
 16128  002A20  0100               	movlb	0	; () banked
 16129  002A22  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 16130                           
 16131                           ; BSR set to: 0
 16132                           ;FLASH.c: 296: if(WriteTries > 10)
 16133  002A24  0E0A               	movlw	10
 16134  002A26  0100               	movlb	0	; () banked
 16135  002A28  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16136  002A2A  D7DB               	goto	i2l6216
 16137  002A2C  D164               	goto	i2l6334
 16138  002A2E                     i2l6228:
 16139                           
 16140                           ;FLASH.c: 304: }
 16141                           ;FLASH.c: 305: }
 16142                           ;FLASH.c: 308: WriteTries = 1;
 16143  002A2E  0E01               	movlw	1
 16144  002A30  0100               	movlb	0	; () banked
 16145  002A32  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16146  002A34                     i2l6230:
 16147                           
 16148                           ; BSR set to: 0
 16149                           ;FLASH.c: 312: FSH_WriteIntArray(&IR_SavedTiming[96]);
 16150  002A34  0EC0               	movlw	192
 16151  002A36  0100               	movlb	0	; () banked
 16152  002A38  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 16153  002A3A  0E24               	movlw	36
 16154  002A3C  0100               	movlb	0	; () banked
 16155  002A3E  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 16156  002A40  0E00               	movlw	0
 16157  002A42  0100               	movlb	0	; () banked
 16158  002A44  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 16159  002A46  ECA5  F003         	call	i2_FSH_WriteIntArray	;wreg free
 16160                           
 16161                           ;FLASH.c: 315: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[96],&IR_DataTiming[96]))
 16162  002A4A  0EC0               	movlw	192
 16163  002A4C  0100               	movlb	0	; () banked
 16164  002A4E  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 16165  002A50  0E24               	movlw	36
 16166  002A52  0100               	movlb	0	; () banked
 16167  002A54  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 16168  002A56  0E00               	movlw	0
 16169  002A58  0100               	movlb	0	; () banked
 16170  002A5A  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 16171  002A5C  0EC0               	movlw	low (_IR_DataTiming+192)
 16172  002A5E  0100               	movlb	0	; () banked
 16173  002A60  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 16174  002A62  0E02               	movlw	high (_IR_DataTiming+192)
 16175  002A64  0100               	movlb	0	; () banked
 16176  002A66  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 16177  002A68  EC18  F007         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 16178  002A6C  0900               	iorlw	0
 16179  002A6E  A4D8               	btfss	status,2,c
 16180  002A70  D007               	goto	i2l6242
 16181                           
 16182                           ;FLASH.c: 316: {
 16183                           ;FLASH.c: 317: WriteTries++;
 16184  002A72  0100               	movlb	0	; () banked
 16185  002A74  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 16186                           
 16187                           ; BSR set to: 0
 16188                           ;FLASH.c: 318: if(WriteTries > 10)
 16189  002A76  0E0A               	movlw	10
 16190  002A78  0100               	movlb	0	; () banked
 16191  002A7A  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16192  002A7C  D7DB               	goto	i2l6230
 16193  002A7E  D13B               	goto	i2l6334
 16194  002A80                     i2l6242:
 16195                           
 16196                           ;FLASH.c: 326: }
 16197                           ;FLASH.c: 327: }
 16198                           ;FLASH.c: 330: WriteTries = 1;
 16199  002A80  0E01               	movlw	1
 16200  002A82  0100               	movlb	0	; () banked
 16201  002A84  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16202  002A86                     i2l6244:
 16203                           
 16204                           ; BSR set to: 0
 16205                           ;FLASH.c: 334: FSH_WriteIntArray(&RF_SavedTiming[0]);
 16206  002A86  0E00               	movlw	0
 16207  002A88  0100               	movlb	0	; () banked
 16208  002A8A  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 16209  002A8C  0E25               	movlw	37
 16210  002A8E  0100               	movlb	0	; () banked
 16211  002A90  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 16212  002A92  0E00               	movlw	0
 16213  002A94  0100               	movlb	0	; () banked
 16214  002A96  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 16215  002A98  ECA5  F003         	call	i2_FSH_WriteIntArray	;wreg free
 16216                           
 16217                           ;FLASH.c: 337: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]))
 16218  002A9C  0E00               	movlw	0
 16219  002A9E  0100               	movlb	0	; () banked
 16220  002AA0  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 16221  002AA2  0E25               	movlw	37
 16222  002AA4  0100               	movlb	0	; () banked
 16223  002AA6  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 16224  002AA8  0E00               	movlw	0
 16225  002AAA  0100               	movlb	0	; () banked
 16226  002AAC  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 16227  002AAE  0E00               	movlw	low _RF_DataTiming
 16228  002AB0  0100               	movlb	0	; () banked
 16229  002AB2  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 16230  002AB4  0E03               	movlw	high _RF_DataTiming
 16231  002AB6  0100               	movlb	0	; () banked
 16232  002AB8  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 16233  002ABA  EC18  F007         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 16234  002ABE  0900               	iorlw	0
 16235  002AC0  A4D8               	btfss	status,2,c
 16236  002AC2  D007               	goto	i2l6256
 16237                           
 16238                           ;FLASH.c: 338: {
 16239                           ;FLASH.c: 339: WriteTries++;
 16240  002AC4  0100               	movlb	0	; () banked
 16241  002AC6  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 16242                           
 16243                           ; BSR set to: 0
 16244                           ;FLASH.c: 340: if(WriteTries > 10)
 16245  002AC8  0E0A               	movlw	10
 16246  002ACA  0100               	movlb	0	; () banked
 16247  002ACC  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16248  002ACE  D7DB               	goto	i2l6244
 16249  002AD0  D112               	goto	i2l6334
 16250  002AD2                     i2l6256:
 16251                           
 16252                           ;FLASH.c: 348: }
 16253                           ;FLASH.c: 349: }
 16254                           ;FLASH.c: 352: WriteTries = 1;
 16255  002AD2  0E01               	movlw	1
 16256  002AD4  0100               	movlb	0	; () banked
 16257  002AD6  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16258  002AD8                     i2l6258:
 16259                           
 16260                           ; BSR set to: 0
 16261                           ;FLASH.c: 356: FSH_WriteIntArray(&RF_SavedTiming[32]);
 16262  002AD8  0E40               	movlw	64
 16263  002ADA  0100               	movlb	0	; () banked
 16264  002ADC  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 16265  002ADE  0E25               	movlw	37
 16266  002AE0  0100               	movlb	0	; () banked
 16267  002AE2  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 16268  002AE4  0E00               	movlw	0
 16269  002AE6  0100               	movlb	0	; () banked
 16270  002AE8  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 16271  002AEA  ECA5  F003         	call	i2_FSH_WriteIntArray	;wreg free
 16272                           
 16273                           ;FLASH.c: 359: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]))
 16274  002AEE  0E40               	movlw	64
 16275  002AF0  0100               	movlb	0	; () banked
 16276  002AF2  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 16277  002AF4  0E25               	movlw	37
 16278  002AF6  0100               	movlb	0	; () banked
 16279  002AF8  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 16280  002AFA  0E00               	movlw	0
 16281  002AFC  0100               	movlb	0	; () banked
 16282  002AFE  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 16283  002B00  0E40               	movlw	low (_RF_DataTiming+64)
 16284  002B02  0100               	movlb	0	; () banked
 16285  002B04  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 16286  002B06  0E03               	movlw	high (_RF_DataTiming+64)
 16287  002B08  0100               	movlb	0	; () banked
 16288  002B0A  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 16289  002B0C  EC18  F007         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 16290  002B10  0900               	iorlw	0
 16291  002B12  A4D8               	btfss	status,2,c
 16292  002B14  D007               	goto	i2l6270
 16293                           
 16294                           ;FLASH.c: 360: {
 16295                           ;FLASH.c: 361: WriteTries++;
 16296  002B16  0100               	movlb	0	; () banked
 16297  002B18  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 16298                           
 16299                           ; BSR set to: 0
 16300                           ;FLASH.c: 362: if(WriteTries > 10)
 16301  002B1A  0E0A               	movlw	10
 16302  002B1C  0100               	movlb	0	; () banked
 16303  002B1E  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16304  002B20  D7DB               	goto	i2l6258
 16305  002B22  D0E9               	goto	i2l6334
 16306  002B24                     i2l6270:
 16307                           
 16308                           ;FLASH.c: 370: }
 16309                           ;FLASH.c: 371: }
 16310                           ;FLASH.c: 374: WriteTries = 1;
 16311  002B24  0E01               	movlw	1
 16312  002B26  0100               	movlb	0	; () banked
 16313  002B28  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16314  002B2A                     i2l6272:
 16315                           
 16316                           ; BSR set to: 0
 16317                           ;FLASH.c: 378: FSH_WriteIntArray(&RF_SavedTiming[64]);
 16318  002B2A  0E80               	movlw	128
 16319  002B2C  0100               	movlb	0	; () banked
 16320  002B2E  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 16321  002B30  0E25               	movlw	37
 16322  002B32  0100               	movlb	0	; () banked
 16323  002B34  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 16324  002B36  0E00               	movlw	0
 16325  002B38  0100               	movlb	0	; () banked
 16326  002B3A  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 16327  002B3C  ECA5  F003         	call	i2_FSH_WriteIntArray	;wreg free
 16328                           
 16329                           ;FLASH.c: 381: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[64],&RF_DataTiming[64]))
 16330  002B40  0E80               	movlw	128
 16331  002B42  0100               	movlb	0	; () banked
 16332  002B44  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 16333  002B46  0E25               	movlw	37
 16334  002B48  0100               	movlb	0	; () banked
 16335  002B4A  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 16336  002B4C  0E00               	movlw	0
 16337  002B4E  0100               	movlb	0	; () banked
 16338  002B50  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 16339  002B52  0E80               	movlw	low (_RF_DataTiming+128)
 16340  002B54  0100               	movlb	0	; () banked
 16341  002B56  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 16342  002B58  0E03               	movlw	high (_RF_DataTiming+128)
 16343  002B5A  0100               	movlb	0	; () banked
 16344  002B5C  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 16345  002B5E  EC18  F007         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 16346  002B62  0900               	iorlw	0
 16347  002B64  A4D8               	btfss	status,2,c
 16348  002B66  D007               	goto	i2l6284
 16349                           
 16350                           ;FLASH.c: 382: {
 16351                           ;FLASH.c: 383: WriteTries++;
 16352  002B68  0100               	movlb	0	; () banked
 16353  002B6A  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 16354                           
 16355                           ; BSR set to: 0
 16356                           ;FLASH.c: 384: if(WriteTries > 10)
 16357  002B6C  0E0A               	movlw	10
 16358  002B6E  0100               	movlb	0	; () banked
 16359  002B70  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16360  002B72  D7DB               	goto	i2l6272
 16361  002B74  D0C0               	goto	i2l6334
 16362  002B76                     i2l6284:
 16363                           
 16364                           ;FLASH.c: 392: }
 16365                           ;FLASH.c: 393: }
 16366                           ;FLASH.c: 396: WriteTries = 1;
 16367  002B76  0E01               	movlw	1
 16368  002B78  0100               	movlb	0	; () banked
 16369  002B7A  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16370  002B7C                     i2l6286:
 16371                           
 16372                           ; BSR set to: 0
 16373                           ;FLASH.c: 400: FSH_WriteIntArray(&RF_SavedTiming[96]);
 16374  002B7C  0EC0               	movlw	192
 16375  002B7E  0100               	movlb	0	; () banked
 16376  002B80  6F84               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 16377  002B82  0E25               	movlw	37
 16378  002B84  0100               	movlb	0	; () banked
 16379  002B86  6F85               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 16380  002B88  0E00               	movlw	0
 16381  002B8A  0100               	movlb	0	; () banked
 16382  002B8C  6F86               	movwf	(i2FSH_WriteIntArray@Array+2)& (0+255),b
 16383  002B8E  ECA5  F003         	call	i2_FSH_WriteIntArray	;wreg free
 16384                           
 16385                           ;FLASH.c: 403: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[96],&RF_DataTiming[96]))
 16386  002B92  0EC0               	movlw	192
 16387  002B94  0100               	movlb	0	; () banked
 16388  002B96  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 16389  002B98  0E25               	movlw	37
 16390  002B9A  0100               	movlb	0	; () banked
 16391  002B9C  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 16392  002B9E  0E00               	movlw	0
 16393  002BA0  0100               	movlb	0	; () banked
 16394  002BA2  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 16395  002BA4  0EC0               	movlw	low (_RF_DataTiming+192)
 16396  002BA6  0100               	movlb	0	; () banked
 16397  002BA8  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 16398  002BAA  0E03               	movlw	high (_RF_DataTiming+192)
 16399  002BAC  0100               	movlb	0	; () banked
 16400  002BAE  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 16401  002BB0  EC18  F007         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 16402  002BB4  0900               	iorlw	0
 16403  002BB6  A4D8               	btfss	status,2,c
 16404  002BB8  D007               	goto	i2l6298
 16405                           
 16406                           ;FLASH.c: 404: {
 16407                           ;FLASH.c: 405: WriteTries++;
 16408  002BBA  0100               	movlb	0	; () banked
 16409  002BBC  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 16410                           
 16411                           ; BSR set to: 0
 16412                           ;FLASH.c: 406: if(WriteTries > 10)
 16413  002BBE  0E0A               	movlw	10
 16414  002BC0  0100               	movlb	0	; () banked
 16415  002BC2  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16416  002BC4  D7DB               	goto	i2l6286
 16417  002BC6  D097               	goto	i2l6334
 16418  002BC8                     i2l6298:
 16419                           
 16420                           ;FLASH.c: 414: }
 16421                           ;FLASH.c: 415: }
 16422                           ;FLASH.c: 418: for(j=8;j<16;j++)
 16423  002BC8  0E08               	movlw	8
 16424  002BCA  0100               	movlb	0	; () banked
 16425  002BCC  6F9B               	movwf	i2FSH_Write_IR_RF@j& (0+255),b
 16426  002BCE                     i2l6300:
 16427                           
 16428                           ; BSR set to: 0
 16429  002BCE  0E0F               	movlw	15
 16430  002BD0  0100               	movlb	0	; () banked
 16431  002BD2  659B               	cpfsgt	i2FSH_Write_IR_RF@j& (0+255),b
 16432  002BD4  D001               	goto	i2l6304
 16433  002BD6  D09B               	goto	i2l6346
 16434  002BD8                     i2l6304:
 16435                           
 16436                           ; BSR set to: 0
 16437                           ;FLASH.c: 419: {
 16438                           ;FLASH.c: 420: WriteTries = 1;
 16439  002BD8  0E01               	movlw	1
 16440  002BDA  0100               	movlb	0	; () banked
 16441  002BDC  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16442  002BDE                     i2l1221:
 16443                           
 16444                           ; BSR set to: 0
 16445                           ;FLASH.c: 423: i=0;
 16446  002BDE  0E00               	movlw	0
 16447  002BE0  0100               	movlb	0	; () banked
 16448  002BE2  6F9E               	movwf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 16449  002BE4  0E00               	movlw	0
 16450  002BE6  6F9D               	movwf	i2FSH_Write_IR_RF@i& (0+255),b
 16451                           
 16452                           ; BSR set to: 0
 16453                           ;FLASH.c: 424: FlashWasteindex = i + 64*(j-8);
 16454  002BE8  0100               	movlb	0	; () banked
 16455  002BEA  519B               	movf	i2FSH_Write_IR_RF@j& (0+255),w,b
 16456  002BEC  0100               	movlb	0	; () banked
 16457  002BEE  6F91               	movwf	??i2_FSH_Write_IR_RF& (0+255),b
 16458  002BF0  6B92               	clrf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 16459  002BF2  0E06               	movlw	6
 16460  002BF4                     i2u681_45:
 16461  002BF4  90D8               	bcf	status,0,c
 16462  002BF6  0100               	movlb	0	; () banked
 16463  002BF8  3791               	rlcf	??i2_FSH_Write_IR_RF& (0+255),f,b
 16464  002BFA  3792               	rlcf	(??i2_FSH_Write_IR_RF+1)& (0+255),f,b
 16465  002BFC  2EE8               	decfsz	wreg,f,c
 16466  002BFE  D7FA               	goto	i2u681_45
 16467  002C00  0100               	movlb	0	; () banked
 16468  002C02  519D               	movf	i2FSH_Write_IR_RF@i& (0+255),w,b
 16469  002C04  0100               	movlb	0	; () banked
 16470  002C06  2791               	addwf	??i2_FSH_Write_IR_RF& (0+255),f,b
 16471  002C08  0100               	movlb	0	; () banked
 16472  002C0A  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 16473  002C0C  0100               	movlb	0	; () banked
 16474  002C0E  2392               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),f,b
 16475  002C10  0E00               	movlw	0
 16476  002C12  0100               	movlb	0	; () banked
 16477  002C14  2591               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 16478  002C16  0100               	movlb	0	; () banked
 16479  002C18  6F99               	movwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),b
 16480  002C1A  0EFE               	movlw	254
 16481  002C1C  0100               	movlb	0	; () banked
 16482  002C1E  2192               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 16483  002C20  0100               	movlb	0	; () banked
 16484  002C22  6F9A               	movwf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),b
 16485                           
 16486                           ; BSR set to: 0
 16487                           ;FLASH.c: 425: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 16488  002C24  0E00               	movlw	0
 16489  002C26  0100               	movlb	0	; () banked
 16490  002C28  6F91               	movwf	??i2_FSH_Write_IR_RF& (0+255),b
 16491  002C2A  0E26               	movlw	38
 16492  002C2C  6F92               	movwf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 16493  002C2E  0E00               	movlw	0
 16494  002C30  6F93               	movwf	(??i2_FSH_Write_IR_RF+2)& (0+255),b
 16495  002C32  0100               	movlb	0	; () banked
 16496  002C34  5199               	movf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 16497  002C36  0100               	movlb	0	; () banked
 16498  002C38  2591               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 16499  002C3A  0100               	movlb	0	; () banked
 16500  002C3C  6F94               	movwf	(??i2_FSH_Write_IR_RF+3)& (0+255),b
 16501  002C3E  0100               	movlb	0	; () banked
 16502  002C40  519A               	movf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 16503  002C42  0100               	movlb	0	; () banked
 16504  002C44  2192               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 16505  002C46  0100               	movlb	0	; () banked
 16506  002C48  6F95               	movwf	(??i2_FSH_Write_IR_RF+4)& (0+255),b
 16507  002C4A  0E00               	movlw	0
 16508  002C4C  0100               	movlb	0	; () banked
 16509  002C4E  2193               	addwfc	(??i2_FSH_Write_IR_RF+2)& (0+255),w,b
 16510  002C50  0100               	movlb	0	; () banked
 16511  002C52  6F96               	movwf	(??i2_FSH_Write_IR_RF+5)& (0+255),b
 16512  002C54  0100               	movlb	0	; () banked
 16513  002C56  5194               	movf	(??i2_FSH_Write_IR_RF+3)& (0+255),w,b
 16514  002C58  0100               	movlb	0	; () banked
 16515  002C5A  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 16516  002C5C  0100               	movlb	0	; () banked
 16517  002C5E  5195               	movf	(??i2_FSH_Write_IR_RF+4)& (0+255),w,b
 16518  002C60  0100               	movlb	0	; () banked
 16519  002C62  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 16520  002C64  0100               	movlb	0	; () banked
 16521  002C66  5196               	movf	(??i2_FSH_Write_IR_RF+5)& (0+255),w,b
 16522  002C68  0100               	movlb	0	; () banked
 16523  002C6A  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 16524  002C6C  0100               	movlb	0	; () banked
 16525  002C6E  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 16526  002C70  EC62  F009         	call	i2_FSH_AddressToBlock	;wreg free
 16527                           
 16528                           ;FLASH.c: 426: for(i = 0; i<64; i++)
 16529  002C74  0E00               	movlw	0
 16530  002C76  0100               	movlb	0	; () banked
 16531  002C78  6F9E               	movwf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 16532  002C7A  0E00               	movlw	0
 16533  002C7C  6F9D               	movwf	i2FSH_Write_IR_RF@i& (0+255),b
 16534                           
 16535                           ; BSR set to: 0
 16536  002C7E  0100               	movlb	0	; () banked
 16537  002C80  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 16538  002C82  E10F               	bnz	i2l1223
 16539  002C84  0E40               	movlw	64
 16540  002C86  0100               	movlb	0	; () banked
 16541  002C88  5D9D               	subwf	i2FSH_Write_IR_RF@i& (0+255),w,b
 16542  002C8A  B0D8               	btfsc	status,0,c
 16543  002C8C  D00A               	goto	i2l1223
 16544                           
 16545                           ; BSR set to: 0
 16546                           ;FLASH.c: 427: {
 16547                           ;FLASH.c: 429: TABLAT = 0xDA;
 16548                           
 16549                           ; BSR set to: 0
 16550                           
 16551                           ; BSR set to: 0
 16552  002C8E  0EDA               	movlw	218
 16553  002C90  6EF5               	movwf	tablat,c	;volatile
 16554  002C92  000D               	tblwt		*+	;# 
 16555  002C94  0100               	movlb	0	; () banked
 16556  002C96  4B9D               	infsnz	i2FSH_Write_IR_RF@i& (0+255),f,b
 16557  002C98  2B9E               	incf	(i2FSH_Write_IR_RF@i+1)& (0+255),f,b
 16558                           
 16559                           ; BSR set to: 0
 16560  002C9A  0100               	movlb	0	; () banked
 16561  002C9C  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 16562  002C9E  E101               	bnz	i2u683_40
 16563  002CA0  D7F1               	goto	L10
 16564  002CA2                     i2u683_40:
 16565  002CA2                     i2l1223:
 16566                           
 16567                           ; BSR set to: 0
 16568                           ;FLASH.c: 431: }
 16569                           ;FLASH.c: 432: EECON1bits.FREE = 0;
 16570  002CA2  98A6               	bcf	4006,4,c	;volatile
 16571  002CA4  84A6               	bsf	4006,2,c	;# 
 16572  002CA6  9EF2               	bcf	intcon,7,c	;# 
 16573  002CA8  0E55               	movlw	85	;# 
 16574  002CAA  6EA7               	movwf	4007,c	;# 
 16575  002CAC  0EAA               	movlw	170	;# 
 16576  002CAE  6EA7               	movwf	4007,c	;# 
 16577  002CB0  82A6               	bsf	4006,1,c	;# 
 16578                           
 16579                           ;FLASH.c: 443: for(i=0; i<64;i++)
 16580  002CB2  0E00               	movlw	0
 16581  002CB4  0100               	movlb	0	; () banked
 16582  002CB6  6F9E               	movwf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 16583  002CB8  0E00               	movlw	0
 16584  002CBA  6F9D               	movwf	i2FSH_Write_IR_RF@i& (0+255),b
 16585  002CBC                     i2l6324:
 16586                           
 16587                           ; BSR set to: 0
 16588  002CBC  0100               	movlb	0	; () banked
 16589  002CBE  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 16590  002CC0  E123               	bnz	i2l6342
 16591  002CC2  0E40               	movlw	64
 16592  002CC4  0100               	movlb	0	; () banked
 16593  002CC6  5D9D               	subwf	i2FSH_Write_IR_RF@i& (0+255),w,b
 16594  002CC8  B0D8               	btfsc	status,0,c
 16595  002CCA  D01E               	goto	i2l6342
 16596                           
 16597                           ; BSR set to: 0
 16598                           ;FLASH.c: 444: {
 16599                           ;FLASH.c: 445: if(FlashWaste[FlashWasteindex] != 0xDA)
 16600                           
 16601                           ; BSR set to: 0
 16602                           
 16603                           ; BSR set to: 0
 16604  002CCC  0E00               	movlw	0
 16605  002CCE  0100               	movlb	0	; () banked
 16606  002CD0  2599               	addwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 16607  002CD2  6EF6               	movwf	tblptrl,c
 16608  002CD4  0E26               	movlw	38
 16609  002CD6  219A               	addwfc	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 16610  002CD8  6EF7               	movwf	tblptrh,c
 16611  002CDA  6AF8               	clrf	tblptru,c
 16612  002CDC  0E00               	movlw	0
 16613  002CDE  22F8               	addwfc	tblptru,f,c
 16614  002CE0  0008               	tblrd		*
 16615  002CE2  50F5               	movf	tablat,w,c
 16616  002CE4  0ADA               	xorlw	218
 16617  002CE6  B4D8               	btfsc	status,2,c
 16618  002CE8  D008               	goto	i2l6338
 16619                           
 16620                           ; BSR set to: 0
 16621                           ;FLASH.c: 446: {
 16622                           ;FLASH.c: 447: WriteTries++;
 16623  002CEA  0100               	movlb	0	; () banked
 16624  002CEC  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 16625                           
 16626                           ; BSR set to: 0
 16627                           ;FLASH.c: 448: if(WriteTries > 10)
 16628  002CEE  0E0A               	movlw	10
 16629  002CF0  0100               	movlb	0	; () banked
 16630  002CF2  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 16631  002CF4  D774               	goto	i2l1221
 16632  002CF6                     i2l6334:
 16633                           
 16634                           ; BSR set to: 0
 16635                           ;FLASH.c: 449: {
 16636                           ;FLASH.c: 450: status = 0;
 16637  002CF6  0E00               	movlw	0
 16638  002CF8  D00B               	goto	L9
 16639  002CFA                     i2l6338:
 16640                           
 16641                           ; BSR set to: 0
 16642                           ;FLASH.c: 456: }
 16643                           ;FLASH.c: 457: }
 16644                           ;FLASH.c: 458: FlashWasteindex++;
 16645  002CFA  0100               	movlb	0	; () banked
 16646  002CFC  4B99               	infsnz	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),f,b
 16647  002CFE  2B9A               	incf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),f,b
 16648  002D00  0100               	movlb	0	; () banked
 16649  002D02  4B9D               	infsnz	i2FSH_Write_IR_RF@i& (0+255),f,b
 16650  002D04  2B9E               	incf	(i2FSH_Write_IR_RF@i+1)& (0+255),f,b
 16651  002D06  D7DA               	goto	i2l6324
 16652  002D08                     i2l6342:
 16653                           
 16654                           ; BSR set to: 0
 16655  002D08  0100               	movlb	0	; () banked
 16656  002D0A  2B9B               	incf	i2FSH_Write_IR_RF@j& (0+255),f,b
 16657  002D0C  D760               	goto	i2l6300
 16658  002D0E                     i2l6346:
 16659                           
 16660                           ; BSR set to: 0
 16661                           ;FLASH.c: 459: }
 16662                           ;FLASH.c: 460: }
 16663                           ;FLASH.c: 461: status = 1;
 16664  002D0E  0E01               	movlw	1
 16665  002D10                     L9:
 16666  002D10  0100               	movlb	0	; () banked
 16667  002D12  6F9C               	movwf	i2FSH_Write_IR_RF@status& (0+255),b
 16668  002D14                     i2l1182:
 16669                           
 16670                           ; BSR set to: 0
 16671                           ;FLASH.c: 464: if(highint)
 16672  002D14  0100               	movlb	0	; () banked
 16673  002D16  5197               	movf	i2FSH_Write_IR_RF@highint& (0+255),w,b
 16674  002D18  0100               	movlb	0	; () banked
 16675  002D1A  A4D8               	btfss	status,2,c
 16676                           
 16677                           ; BSR set to: 0
 16678                           ;FLASH.c: 465: {
 16679                           ;FLASH.c: 466: INTCONbits.GIE = 1;
 16680  002D1C  8EF2               	bsf	intcon,7,c	;volatile
 16681                           
 16682                           ; BSR set to: 0
 16683                           ;FLASH.c: 467: }
 16684                           ;FLASH.c: 468: if(lowint)
 16685                           
 16686                           ; BSR set to: 0
 16687  002D1E  0100               	movlb	0	; () banked
 16688  002D20  5198               	movf	i2FSH_Write_IR_RF@lowint& (0+255),w,b
 16689  002D22  0100               	movlb	0	; () banked
 16690  002D24  A4D8               	btfss	status,2,c
 16691                           
 16692                           ; BSR set to: 0
 16693                           ;FLASH.c: 469: {
 16694                           ;FLASH.c: 470: INTCONbits.PEIE = 1;
 16695  002D26  8CF2               	bsf	intcon,6,c	;volatile
 16696                           
 16697                           ; BSR set to: 0
 16698                           ;FLASH.c: 471: }
 16699                           ;FLASH.c: 472: return status;
 16700                           
 16701                           ; BSR set to: 0
 16702  002D28  0100               	movlb	0	; () banked
 16703  002D2A  519C               	movf	i2FSH_Write_IR_RF@status& (0+255),w,b
 16704  002D2C  0012               	return	
 16705  002D2E                     __end_ofi2_FSH_Write_IR_RF:
 16706                           	opt stack 0
 16707                           pclatu	equ	0xFFB
 16708                           pclath	equ	0xFFA
 16709                           tblptru	equ	0xFF8
 16710                           tblptrh	equ	0xFF7
 16711                           tblptrl	equ	0xFF6
 16712                           tablat	equ	0xFF5
 16713                           prodh	equ	0xFF4
 16714                           prodl	equ	0xFF3
 16715                           intcon	equ	0xFF2
 16716                           intcon2	equ	0xFF1
 16717                           intcon3	equ	0xFF0
 16718                           postinc0	equ	0xFEE
 16719                           fsr0h	equ	0xFEA
 16720                           fsr0l	equ	0xFE9
 16721                           wreg	equ	0xFE8
 16722                           postdec1	equ	0xFE5
 16723                           fsr1h	equ	0xFE2
 16724                           fsr1l	equ	0xFE1
 16725                           bsr	equ	0xFE0
 16726                           postinc2	equ	0xFDE
 16727                           postdec2	equ	0xFDD
 16728                           plusw2	equ	0xFDB
 16729                           fsr2h	equ	0xFDA
 16730                           fsr2l	equ	0xFD9
 16731                           status	equ	0xFD8
 16732                           
 16733 ;; *************** function i2_RF_ResetData *****************
 16734 ;; Defined at:
 16735 ;;		line 221 in file "RF.c"
 16736 ;; Parameters:    Size  Location     Type
 16737 ;;		None
 16738 ;; Auto vars:     Size  Location     Type
 16739 ;;		None
 16740 ;; Return value:  Size  Location     Type
 16741 ;;		None               void
 16742 ;; Registers used:
 16743 ;;		wreg, status,2
 16744 ;; Tracked objects:
 16745 ;;		On entry : 0/0
 16746 ;;		On exit  : 0/0
 16747 ;;		Unchanged: 0/0
 16748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16749 ;;      Params:         0       0       0       0       0
 16750 ;;      Locals:         0       0       0       0       0
 16751 ;;      Temps:          0       0       0       0       0
 16752 ;;      Totals:         0       0       0       0       0
 16753 ;;Total ram usage:        0 bytes
 16754 ;; Hardware stack levels used:    1
 16755 ;; This function calls:
 16756 ;;		Nothing
 16757 ;; This function is called by:
 16758 ;;		_high_isr
 16759 ;;		i2_FSH_Write_IR_RF
 16760 ;; This function uses a non-reentrant model
 16761 ;;
 16762                           
 16763                           	psect	text102
 16764  001A22                     __ptext102:
 16765                           	opt stack 0
 16766  001A22                     i2_RF_ResetData:
 16767                           	opt stack 17
 16768                           
 16769                           ;RF.c: 223: RF_DataPlace = 0;
 16770                           
 16771                           ; BSR set to: 0
 16772                           ;incstack = 0
 16773  001A22  0E00               	movlw	0
 16774  001A24  0100               	movlb	0	; () banked
 16775  001A26  6FC8               	movwf	_RF_DataPlace& (0+255),b
 16776                           
 16777                           ;RF.c: 224: RFStarted = 0;
 16778  001A28  0E00               	movlw	0
 16779  001A2A  0100               	movlb	0	; () banked
 16780  001A2C  6FC5               	movwf	_RFStarted& (0+255),b
 16781                           
 16782                           ; BSR set to: 0
 16783  001A2E  0012               	return		;funcret
 16784  001A30                     __end_ofi2_RF_ResetData:
 16785                           	opt stack 0
 16786                           pclatu	equ	0xFFB
 16787                           pclath	equ	0xFFA
 16788                           tblptru	equ	0xFF8
 16789                           tblptrh	equ	0xFF7
 16790                           tblptrl	equ	0xFF6
 16791                           tablat	equ	0xFF5
 16792                           prodh	equ	0xFF4
 16793                           prodl	equ	0xFF3
 16794                           intcon	equ	0xFF2
 16795                           intcon2	equ	0xFF1
 16796                           intcon3	equ	0xFF0
 16797                           postinc0	equ	0xFEE
 16798                           fsr0h	equ	0xFEA
 16799                           fsr0l	equ	0xFE9
 16800                           wreg	equ	0xFE8
 16801                           postdec1	equ	0xFE5
 16802                           fsr1h	equ	0xFE2
 16803                           fsr1l	equ	0xFE1
 16804                           bsr	equ	0xFE0
 16805                           postinc2	equ	0xFDE
 16806                           postdec2	equ	0xFDD
 16807                           plusw2	equ	0xFDB
 16808                           fsr2h	equ	0xFDA
 16809                           fsr2l	equ	0xFD9
 16810                           status	equ	0xFD8
 16811                           
 16812 ;; *************** function i2_MSC_BufferCopyIntConst *****************
 16813 ;; Defined at:
 16814 ;;		line 238 in file "MISC.c"
 16815 ;; Parameters:    Size  Location     Type
 16816 ;;  from            3    6[BANK0 ] PTR const unsigned int 
 16817 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 16818 ;;  to              2    9[BANK0 ] PTR unsigned int 
 16819 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 16820 ;;  count           2   11[BANK0 ] unsigned int 
 16821 ;;  shift           2   13[BANK0 ] unsigned int 
 16822 ;; Auto vars:     Size  Location     Type
 16823 ;;  MSC_BufferCo    2   15[BANK0 ] unsigned int 
 16824 ;; Return value:  Size  Location     Type
 16825 ;;		None               void
 16826 ;; Registers used:
 16827 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 16828 ;; Tracked objects:
 16829 ;;		On entry : 0/0
 16830 ;;		On exit  : 0/0
 16831 ;;		Unchanged: 0/0
 16832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16833 ;;      Params:         0       9       0       0       0
 16834 ;;      Locals:         0       2       0       0       0
 16835 ;;      Temps:          0       0       0       0       0
 16836 ;;      Totals:         0      11       0       0       0
 16837 ;;Total ram usage:       11 bytes
 16838 ;; Hardware stack levels used:    1
 16839 ;; Hardware stack levels required when called:    1
 16840 ;; This function calls:
 16841 ;;		i2_MSC_CleanBufferInt
 16842 ;; This function is called by:
 16843 ;;		i2_FSH_Write_IR_RF
 16844 ;; This function uses a non-reentrant model
 16845 ;;
 16846                           
 16847                           	psect	text103
 16848  000A6A                     __ptext103:
 16849                           	opt stack 0
 16850  000A6A                     i2_MSC_BufferCopyIntConst:
 16851                           	opt stack 14
 16852                           
 16853                           ;MISC.c: 240: unsigned int i=0;
 16854                           
 16855                           ; BSR set to: 0
 16856                           ;incstack = 0
 16857  000A6A  0E00               	movlw	0
 16858  000A6C  0100               	movlb	0	; () banked
 16859  000A6E  6F90               	movwf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),b
 16860  000A70  0E00               	movlw	0
 16861  000A72  6F8F               	movwf	i2MSC_BufferCopyIntConst@i& (0+255),b
 16862                           
 16863                           ; BSR set to: 0
 16864                           ;MISC.c: 241: MSC_CleanBufferInt(to,count);
 16865  000A74  C089  F080         	movff	i2MSC_BufferCopyIntConst@to,i2MSC_CleanBufferInt@data
 16866  000A78  C08A  F081         	movff	i2MSC_BufferCopyIntConst@to+1,i2MSC_CleanBufferInt@data+1
 16867  000A7C  C08B  F082         	movff	i2MSC_BufferCopyIntConst@count,i2MSC_CleanBufferInt@count
 16868  000A80  C08C  F083         	movff	i2MSC_BufferCopyIntConst@count+1,i2MSC_CleanBufferInt@count+1
 16869  000A84  EC72  F008         	call	i2_MSC_CleanBufferInt	;wreg free
 16870                           
 16871                           ;MISC.c: 242: for(i = shift; i>0; i--)
 16872  000A88  C08D  F08F         	movff	i2MSC_BufferCopyIntConst@shift,i2MSC_BufferCopyIntConst@i
 16873  000A8C  C08E  F090         	movff	i2MSC_BufferCopyIntConst@shift+1,i2MSC_BufferCopyIntConst@i+1
 16874  000A90                     i2l5460:
 16875  000A90  0100               	movlb	0	; () banked
 16876  000A92  518F               	movf	i2MSC_BufferCopyIntConst@i& (0+255),w,b
 16877  000A94  0100               	movlb	0	; () banked
 16878  000A96  1190               	iorwf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),w,b
 16879  000A98  B4D8               	btfsc	status,2,c
 16880  000A9A  D032               	goto	i2l5480
 16881                           
 16882                           ; BSR set to: 0
 16883                           ;MISC.c: 243: {
 16884                           ;MISC.c: 244: *to = ' ';
 16885                           
 16886                           ; BSR set to: 0
 16887                           
 16888                           ; BSR set to: 0
 16889  000A9C  C089  FFD9         	movff	i2MSC_BufferCopyIntConst@to,fsr2l
 16890  000AA0  C08A  FFDA         	movff	i2MSC_BufferCopyIntConst@to+1,fsr2h
 16891  000AA4  0E20               	movlw	32
 16892  000AA6  6EDE               	movwf	postinc2,c
 16893  000AA8  0E00               	movlw	0
 16894  000AAA  6EDD               	movwf	postdec2,c
 16895                           
 16896                           ; BSR set to: 0
 16897                           ;MISC.c: 245: to++;
 16898  000AAC  0E02               	movlw	2
 16899  000AAE  0100               	movlb	0	; () banked
 16900  000AB0  2789               	addwf	i2MSC_BufferCopyIntConst@to& (0+255),f,b
 16901  000AB2  0E00               	movlw	0
 16902  000AB4  238A               	addwfc	(i2MSC_BufferCopyIntConst@to+1)& (0+255),f,b
 16903                           
 16904                           ; BSR set to: 0
 16905  000AB6  0100               	movlb	0	; () banked
 16906  000AB8  078F               	decf	i2MSC_BufferCopyIntConst@i& (0+255),f,b
 16907  000ABA  A0D8               	btfss	status,0,c
 16908  000ABC  0790               	decf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),f,b
 16909  000ABE  D7E8               	goto	i2l5460
 16910  000AC0                     i2l5472:
 16911                           
 16912                           ; BSR set to: 0
 16913                           ;MISC.c: 248: {
 16914                           ;MISC.c: 249: *to = *from;
 16915  000AC0  C086  FFF6         	movff	i2MSC_BufferCopyIntConst@from,tblptrl
 16916  000AC4  C087  FFF7         	movff	i2MSC_BufferCopyIntConst@from+1,tblptrh
 16917  000AC8  C088  FFF8         	movff	i2MSC_BufferCopyIntConst@from+2,tblptru
 16918  000ACC  C089  FFD9         	movff	i2MSC_BufferCopyIntConst@to,fsr2l
 16919  000AD0  C08A  FFDA         	movff	i2MSC_BufferCopyIntConst@to+1,fsr2h
 16920  000AD4  0009               	tblrd		*+
 16921  000AD6  CFF5 FFDE          	movff	tablat,postinc2
 16922  000ADA  0008               	tblrd		*
 16923  000ADC  CFF5 FFDD          	movff	tablat,postdec2
 16924                           
 16925                           ; BSR set to: 0
 16926                           ;MISC.c: 250: from++;
 16927  000AE0  0100               	movlb	0	; () banked
 16928  000AE2  0E02               	movlw	2
 16929  000AE4  2786               	addwf	i2MSC_BufferCopyIntConst@from& (0+255),f,b
 16930  000AE6  0E00               	movlw	0
 16931  000AE8  2387               	addwfc	(i2MSC_BufferCopyIntConst@from+1)& (0+255),f,b
 16932  000AEA  0E00               	movlw	0
 16933  000AEC  2388               	addwfc	(i2MSC_BufferCopyIntConst@from+2)& (0+255),f,b
 16934                           
 16935                           ; BSR set to: 0
 16936                           ;MISC.c: 251: to++;
 16937  000AEE  0E02               	movlw	2
 16938  000AF0  0100               	movlb	0	; () banked
 16939  000AF2  2789               	addwf	i2MSC_BufferCopyIntConst@to& (0+255),f,b
 16940  000AF4  0E00               	movlw	0
 16941  000AF6  238A               	addwfc	(i2MSC_BufferCopyIntConst@to+1)& (0+255),f,b
 16942                           
 16943                           ; BSR set to: 0
 16944                           ;MISC.c: 252: count--;
 16945  000AF8  0100               	movlb	0	; () banked
 16946  000AFA  078B               	decf	i2MSC_BufferCopyIntConst@count& (0+255),f,b
 16947  000AFC  A0D8               	btfss	status,0,c
 16948  000AFE  078C               	decf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),f,b
 16949  000B00                     i2l5480:
 16950                           
 16951                           ; BSR set to: 0
 16952  000B00  C086  FFF6         	movff	i2MSC_BufferCopyIntConst@from,tblptrl
 16953  000B04  C087  FFF7         	movff	i2MSC_BufferCopyIntConst@from+1,tblptrh
 16954  000B08  C088  FFF8         	movff	i2MSC_BufferCopyIntConst@from+2,tblptru
 16955  000B0C  0009               	tblrd		*+
 16956  000B0E  50F5               	movf	tablat,w,c
 16957  000B10  0009               	tblrd		*+
 16958  000B12  10F5               	iorwf	tablat,w,c
 16959  000B14  B4D8               	btfsc	status,2,c
 16960  000B16  0012               	return	
 16961                           
 16962                           ; BSR set to: 0
 16963  000B18  0100               	movlb	0	; () banked
 16964  000B1A  518B               	movf	i2MSC_BufferCopyIntConst@count& (0+255),w,b
 16965  000B1C  0100               	movlb	0	; () banked
 16966  000B1E  118C               	iorwf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),w,b
 16967  000B20  B4D8               	btfsc	status,2,c
 16968  000B22  0012               	return	
 16969  000B24  D7CD               	goto	i2l5472
 16970  000B26                     __end_ofi2_MSC_BufferCopyIntConst:
 16971                           	opt stack 0
 16972                           pclatu	equ	0xFFB
 16973                           pclath	equ	0xFFA
 16974                           tblptru	equ	0xFF8
 16975                           tblptrh	equ	0xFF7
 16976                           tblptrl	equ	0xFF6
 16977                           tablat	equ	0xFF5
 16978                           prodh	equ	0xFF4
 16979                           prodl	equ	0xFF3
 16980                           intcon	equ	0xFF2
 16981                           intcon2	equ	0xFF1
 16982                           intcon3	equ	0xFF0
 16983                           postinc0	equ	0xFEE
 16984                           fsr0h	equ	0xFEA
 16985                           fsr0l	equ	0xFE9
 16986                           wreg	equ	0xFE8
 16987                           postdec1	equ	0xFE5
 16988                           fsr1h	equ	0xFE2
 16989                           fsr1l	equ	0xFE1
 16990                           bsr	equ	0xFE0
 16991                           postinc2	equ	0xFDE
 16992                           postdec2	equ	0xFDD
 16993                           plusw2	equ	0xFDB
 16994                           fsr2h	equ	0xFDA
 16995                           fsr2l	equ	0xFD9
 16996                           status	equ	0xFD8
 16997                           
 16998 ;; *************** function i2_MSC_CleanBufferInt *****************
 16999 ;; Defined at:
 17000 ;;		line 166 in file "MISC.c"
 17001 ;; Parameters:    Size  Location     Type
 17002 ;;  data            2    0[BANK0 ] PTR unsigned int 
 17003 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 17004 ;;  count           2    2[BANK0 ] unsigned int 
 17005 ;; Auto vars:     Size  Location     Type
 17006 ;;  MSC_CleanBuf    2    4[BANK0 ] unsigned int 
 17007 ;; Return value:  Size  Location     Type
 17008 ;;		None               void
 17009 ;; Registers used:
 17010 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17011 ;; Tracked objects:
 17012 ;;		On entry : 0/0
 17013 ;;		On exit  : 0/0
 17014 ;;		Unchanged: 0/0
 17015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17016 ;;      Params:         0       4       0       0       0
 17017 ;;      Locals:         0       2       0       0       0
 17018 ;;      Temps:          0       0       0       0       0
 17019 ;;      Totals:         0       6       0       0       0
 17020 ;;Total ram usage:        6 bytes
 17021 ;; Hardware stack levels used:    1
 17022 ;; This function calls:
 17023 ;;		Nothing
 17024 ;; This function is called by:
 17025 ;;		i2_MSC_BufferCopyIntConst
 17026 ;; This function uses a non-reentrant model
 17027 ;;
 17028                           
 17029                           	psect	text104
 17030  0010E4                     __ptext104:
 17031                           	opt stack 0
 17032  0010E4                     i2_MSC_CleanBufferInt:
 17033                           	opt stack 14
 17034                           
 17035                           ;MISC.c: 168: unsigned int i=0;
 17036                           
 17037                           ; BSR set to: 0
 17038                           ;incstack = 0
 17039  0010E4  0E00               	movlw	0
 17040  0010E6  0100               	movlb	0	; () banked
 17041  0010E8  6F85               	movwf	(i2MSC_CleanBufferInt@i+1)& (0+255),b
 17042  0010EA  0E00               	movlw	0
 17043  0010EC  6F84               	movwf	i2MSC_CleanBufferInt@i& (0+255),b
 17044                           
 17045                           ;MISC.c: 169: for(i=0; i<count;i++)
 17046  0010EE  0E00               	movlw	0
 17047  0010F0  0100               	movlb	0	; () banked
 17048  0010F2  6F85               	movwf	(i2MSC_CleanBufferInt@i+1)& (0+255),b
 17049  0010F4  0E00               	movlw	0
 17050  0010F6  6F84               	movwf	i2MSC_CleanBufferInt@i& (0+255),b
 17051  0010F8  D014               	goto	i2l5180
 17052  0010FA                     i2l5176:
 17053                           
 17054                           ; BSR set to: 0
 17055                           ;MISC.c: 170: {
 17056                           ;MISC.c: 171: data[i]= 0;
 17057  0010FA  90D8               	bcf	status,0,c
 17058  0010FC  0100               	movlb	0	; () banked
 17059  0010FE  3584               	rlcf	i2MSC_CleanBufferInt@i& (0+255),w,b
 17060  001100  6ED9               	movwf	fsr2l,c
 17061  001102  0100               	movlb	0	; () banked
 17062  001104  3585               	rlcf	(i2MSC_CleanBufferInt@i+1)& (0+255),w,b
 17063  001106  6EDA               	movwf	fsr2h,c
 17064  001108  0100               	movlb	0	; () banked
 17065  00110A  5180               	movf	i2MSC_CleanBufferInt@data& (0+255),w,b
 17066  00110C  26D9               	addwf	fsr2l,f,c
 17067  00110E  0100               	movlb	0	; () banked
 17068  001110  5181               	movf	(i2MSC_CleanBufferInt@data+1)& (0+255),w,b
 17069  001112  22DA               	addwfc	fsr2h,f,c
 17070  001114  0E00               	movlw	0
 17071  001116  6EDE               	movwf	postinc2,c
 17072  001118  0E00               	movlw	0
 17073  00111A  6EDD               	movwf	postdec2,c
 17074                           
 17075                           ; BSR set to: 0
 17076  00111C  0100               	movlb	0	; () banked
 17077  00111E  4B84               	infsnz	i2MSC_CleanBufferInt@i& (0+255),f,b
 17078  001120  2B85               	incf	(i2MSC_CleanBufferInt@i+1)& (0+255),f,b
 17079  001122                     i2l5180:
 17080                           
 17081                           ; BSR set to: 0
 17082  001122  0100               	movlb	0	; () banked
 17083  001124  5182               	movf	i2MSC_CleanBufferInt@count& (0+255),w,b
 17084  001126  0100               	movlb	0	; () banked
 17085  001128  5D84               	subwf	i2MSC_CleanBufferInt@i& (0+255),w,b
 17086  00112A  0100               	movlb	0	; () banked
 17087  00112C  5183               	movf	(i2MSC_CleanBufferInt@count+1)& (0+255),w,b
 17088  00112E  0100               	movlb	0	; () banked
 17089  001130  5985               	subwfb	(i2MSC_CleanBufferInt@i+1)& (0+255),w,b
 17090  001132  B0D8               	btfsc	status,0,c
 17091  001134  0012               	return	
 17092  001136  D7E1               	goto	i2l5176
 17093  001138                     __end_ofi2_MSC_CleanBufferInt:
 17094                           	opt stack 0
 17095                           pclatu	equ	0xFFB
 17096                           pclath	equ	0xFFA
 17097                           tblptru	equ	0xFF8
 17098                           tblptrh	equ	0xFF7
 17099                           tblptrl	equ	0xFF6
 17100                           tablat	equ	0xFF5
 17101                           prodh	equ	0xFF4
 17102                           prodl	equ	0xFF3
 17103                           intcon	equ	0xFF2
 17104                           intcon2	equ	0xFF1
 17105                           intcon3	equ	0xFF0
 17106                           postinc0	equ	0xFEE
 17107                           fsr0h	equ	0xFEA
 17108                           fsr0l	equ	0xFE9
 17109                           wreg	equ	0xFE8
 17110                           postdec1	equ	0xFE5
 17111                           fsr1h	equ	0xFE2
 17112                           fsr1l	equ	0xFE1
 17113                           bsr	equ	0xFE0
 17114                           postinc2	equ	0xFDE
 17115                           postdec2	equ	0xFDD
 17116                           plusw2	equ	0xFDB
 17117                           fsr2h	equ	0xFDA
 17118                           fsr2l	equ	0xFD9
 17119                           status	equ	0xFD8
 17120                           
 17121 ;; *************** function i2_IR_ResetData *****************
 17122 ;; Defined at:
 17123 ;;		line 107 in file "IR.c"
 17124 ;; Parameters:    Size  Location     Type
 17125 ;;		None
 17126 ;; Auto vars:     Size  Location     Type
 17127 ;;		None
 17128 ;; Return value:  Size  Location     Type
 17129 ;;		None               void
 17130 ;; Registers used:
 17131 ;;		wreg, status,2, cstack
 17132 ;; Tracked objects:
 17133 ;;		On entry : 0/0
 17134 ;;		On exit  : 0/0
 17135 ;;		Unchanged: 0/0
 17136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17137 ;;      Params:         0       0       0       0       0
 17138 ;;      Locals:         0       0       0       0       0
 17139 ;;      Temps:          0       0       0       0       0
 17140 ;;      Totals:         0       0       0       0       0
 17141 ;;Total ram usage:        0 bytes
 17142 ;; Hardware stack levels used:    1
 17143 ;; Hardware stack levels required when called:    2
 17144 ;; This function calls:
 17145 ;;		i2_RF_Enable
 17146 ;; This function is called by:
 17147 ;;		i2_FSH_Write_IR_RF
 17148 ;; This function uses a non-reentrant model
 17149 ;;
 17150                           
 17151                           	psect	text105
 17152  001A30                     __ptext105:
 17153                           	opt stack 0
 17154  001A30                     i2_IR_ResetData:
 17155                           	opt stack 13
 17156                           
 17157                           ;IR.c: 109: IR_DataPlace = 0;
 17158                           
 17159                           ; BSR set to: 0
 17160                           ;incstack = 0
 17161  001A30  0E00               	movlw	0
 17162  001A32  6E5D               	movwf	_IR_DataPlace,c
 17163                           
 17164                           ;IR.c: 110: IRStarted = 0;
 17165  001A34  0E00               	movlw	0
 17166  001A36  6E5B               	movwf	_IRStarted,c
 17167                           
 17168                           ;IR.c: 111: RF_Enable();
 17169  001A38  EC9E  F00C         	call	i2_RF_Enable	;wreg free
 17170  001A3C  0012               	return		;funcret
 17171  001A3E                     __end_ofi2_IR_ResetData:
 17172                           	opt stack 0
 17173                           pclatu	equ	0xFFB
 17174                           pclath	equ	0xFFA
 17175                           tblptru	equ	0xFF8
 17176                           tblptrh	equ	0xFF7
 17177                           tblptrl	equ	0xFF6
 17178                           tablat	equ	0xFF5
 17179                           prodh	equ	0xFF4
 17180                           prodl	equ	0xFF3
 17181                           intcon	equ	0xFF2
 17182                           intcon2	equ	0xFF1
 17183                           intcon3	equ	0xFF0
 17184                           postinc0	equ	0xFEE
 17185                           fsr0h	equ	0xFEA
 17186                           fsr0l	equ	0xFE9
 17187                           wreg	equ	0xFE8
 17188                           postdec1	equ	0xFE5
 17189                           fsr1h	equ	0xFE2
 17190                           fsr1l	equ	0xFE1
 17191                           bsr	equ	0xFE0
 17192                           postinc2	equ	0xFDE
 17193                           postdec2	equ	0xFDD
 17194                           plusw2	equ	0xFDB
 17195                           fsr2h	equ	0xFDA
 17196                           fsr2l	equ	0xFD9
 17197                           status	equ	0xFD8
 17198                           
 17199 ;; *************** function i2_RF_Enable *****************
 17200 ;; Defined at:
 17201 ;;		line 206 in file "RF.c"
 17202 ;; Parameters:    Size  Location     Type
 17203 ;;		None
 17204 ;; Auto vars:     Size  Location     Type
 17205 ;;		None
 17206 ;; Return value:  Size  Location     Type
 17207 ;;		None               void
 17208 ;; Registers used:
 17209 ;;		wreg, status,2, cstack
 17210 ;; Tracked objects:
 17211 ;;		On entry : 0/0
 17212 ;;		On exit  : 0/0
 17213 ;;		Unchanged: 0/0
 17214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17215 ;;      Params:         0       0       0       0       0
 17216 ;;      Locals:         0       0       0       0       0
 17217 ;;      Temps:          0       0       0       0       0
 17218 ;;      Totals:         0       0       0       0       0
 17219 ;;Total ram usage:        0 bytes
 17220 ;; Hardware stack levels used:    1
 17221 ;; Hardware stack levels required when called:    1
 17222 ;; This function calls:
 17223 ;;		i2_RF_DataInt
 17224 ;;		i2_TMR_Timer0Int
 17225 ;; This function is called by:
 17226 ;;		i2_IR_ResetData
 17227 ;; This function uses a non-reentrant model
 17228 ;;
 17229                           
 17230                           	psect	text106
 17231  00193C                     __ptext106:
 17232                           	opt stack 0
 17233  00193C                     i2_RF_Enable:
 17234                           	opt stack 13
 17235                           
 17236                           ;RF.c: 208: INTCON3bits.INT1IF = 0;
 17237                           
 17238                           ;incstack = 0
 17239  00193C  90F0               	bcf	intcon3,0,c	;volatile
 17240                           
 17241                           ;RF.c: 209: INTCON3bits.INT2IF = 0;
 17242  00193E  92F0               	bcf	intcon3,1,c	;volatile
 17243                           
 17244                           ;RF.c: 210: INTCONbits.TMR0IF = 0;
 17245  001940  94F2               	bcf	intcon,2,c	;volatile
 17246                           
 17247                           ;RF.c: 211: RF_DataInt(1);
 17248  001942  0E01               	movlw	1
 17249  001944  ECB7  F00B         	call	i2_RF_DataInt
 17250                           
 17251                           ;RF.c: 212: TMR_Timer0Int(1);
 17252  001948  0E01               	movlw	1
 17253  00194A  EC75  F00C         	call	i2_TMR_Timer0Int
 17254  00194E  0012               	return		;funcret
 17255  001950                     __end_ofi2_RF_Enable:
 17256                           	opt stack 0
 17257                           pclatu	equ	0xFFB
 17258                           pclath	equ	0xFFA
 17259                           tblptru	equ	0xFF8
 17260                           tblptrh	equ	0xFF7
 17261                           tblptrl	equ	0xFF6
 17262                           tablat	equ	0xFF5
 17263                           prodh	equ	0xFF4
 17264                           prodl	equ	0xFF3
 17265                           intcon	equ	0xFF2
 17266                           intcon2	equ	0xFF1
 17267                           intcon3	equ	0xFF0
 17268                           postinc0	equ	0xFEE
 17269                           fsr0h	equ	0xFEA
 17270                           fsr0l	equ	0xFE9
 17271                           wreg	equ	0xFE8
 17272                           postdec1	equ	0xFE5
 17273                           fsr1h	equ	0xFE2
 17274                           fsr1l	equ	0xFE1
 17275                           bsr	equ	0xFE0
 17276                           postinc2	equ	0xFDE
 17277                           postdec2	equ	0xFDD
 17278                           plusw2	equ	0xFDB
 17279                           fsr2h	equ	0xFDA
 17280                           fsr2l	equ	0xFD9
 17281                           status	equ	0xFD8
 17282                           
 17283 ;; *************** function i2_TMR_Timer0Int *****************
 17284 ;; Defined at:
 17285 ;;		line 208 in file "TIMERS.c"
 17286 ;; Parameters:    Size  Location     Type
 17287 ;;  state           1    wreg     unsigned char 
 17288 ;; Auto vars:     Size  Location     Type
 17289 ;;  state           1    0[BANK0 ] unsigned char 
 17290 ;; Return value:  Size  Location     Type
 17291 ;;		None               void
 17292 ;; Registers used:
 17293 ;;		wreg, status,2
 17294 ;; Tracked objects:
 17295 ;;		On entry : 0/0
 17296 ;;		On exit  : 0/0
 17297 ;;		Unchanged: 0/0
 17298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17299 ;;      Params:         0       0       0       0       0
 17300 ;;      Locals:         0       1       0       0       0
 17301 ;;      Temps:          0       0       0       0       0
 17302 ;;      Totals:         0       1       0       0       0
 17303 ;;Total ram usage:        1 bytes
 17304 ;; Hardware stack levels used:    1
 17305 ;; This function calls:
 17306 ;;		Nothing
 17307 ;; This function is called by:
 17308 ;;		i2_RF_Enable
 17309 ;; This function uses a non-reentrant model
 17310 ;;
 17311                           
 17312                           	psect	text107
 17313  0018EA                     __ptext107:
 17314                           	opt stack 0
 17315  0018EA                     i2_TMR_Timer0Int:
 17316                           	opt stack 13
 17317                           
 17318                           ;incstack = 0
 17319                           ;i2TMR_Timer0Int@state stored from wreg
 17320  0018EA  0100               	movlb	0	; () banked
 17321  0018EC  6F80               	movwf	i2TMR_Timer0Int@state& (0+255),b
 17322                           
 17323                           ;TIMERS.c: 210: if(state)
 17324  0018EE  0100               	movlb	0	; () banked
 17325  0018F0  5180               	movf	i2TMR_Timer0Int@state& (0+255),w,b
 17326  0018F2  0100               	movlb	0	; () banked
 17327  0018F4  B4D8               	btfsc	status,2,c
 17328  0018F6  D002               	goto	i2l1064
 17329                           
 17330                           ; BSR set to: 0
 17331                           ;TIMERS.c: 211: {
 17332                           ;TIMERS.c: 213: INTCONbits.TMR0IE = 1;
 17333  0018F8  8AF2               	bsf	intcon,5,c	;volatile
 17334                           
 17335                           ;TIMERS.c: 214: }
 17336  0018FA  0012               	return	
 17337  0018FC                     i2l1064:
 17338                           
 17339                           ; BSR set to: 0
 17340                           ;TIMERS.c: 215: else
 17341                           ;TIMERS.c: 216: {
 17342                           ;TIMERS.c: 218: INTCONbits.TMR0IE = 0;
 17343  0018FC  9AF2               	bcf	intcon,5,c	;volatile
 17344  0018FE  0012               	return	
 17345  001900                     __end_ofi2_TMR_Timer0Int:
 17346                           	opt stack 0
 17347                           pclatu	equ	0xFFB
 17348                           pclath	equ	0xFFA
 17349                           tblptru	equ	0xFF8
 17350                           tblptrh	equ	0xFF7
 17351                           tblptrl	equ	0xFF6
 17352                           tablat	equ	0xFF5
 17353                           prodh	equ	0xFF4
 17354                           prodl	equ	0xFF3
 17355                           intcon	equ	0xFF2
 17356                           intcon2	equ	0xFF1
 17357                           intcon3	equ	0xFF0
 17358                           postinc0	equ	0xFEE
 17359                           fsr0h	equ	0xFEA
 17360                           fsr0l	equ	0xFE9
 17361                           wreg	equ	0xFE8
 17362                           postdec1	equ	0xFE5
 17363                           fsr1h	equ	0xFE2
 17364                           fsr1l	equ	0xFE1
 17365                           bsr	equ	0xFE0
 17366                           postinc2	equ	0xFDE
 17367                           postdec2	equ	0xFDD
 17368                           plusw2	equ	0xFDB
 17369                           fsr2h	equ	0xFDA
 17370                           fsr2l	equ	0xFD9
 17371                           status	equ	0xFD8
 17372                           
 17373 ;; *************** function i2_RF_DataInt *****************
 17374 ;; Defined at:
 17375 ;;		line 78 in file "RF.c"
 17376 ;; Parameters:    Size  Location     Type
 17377 ;;  state           1    wreg     unsigned char 
 17378 ;; Auto vars:     Size  Location     Type
 17379 ;;  state           1    0[BANK0 ] unsigned char 
 17380 ;; Return value:  Size  Location     Type
 17381 ;;		None               void
 17382 ;; Registers used:
 17383 ;;		wreg, status,2
 17384 ;; Tracked objects:
 17385 ;;		On entry : 0/0
 17386 ;;		On exit  : 0/0
 17387 ;;		Unchanged: 0/0
 17388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17389 ;;      Params:         0       0       0       0       0
 17390 ;;      Locals:         0       1       0       0       0
 17391 ;;      Temps:          0       0       0       0       0
 17392 ;;      Totals:         0       1       0       0       0
 17393 ;;Total ram usage:        1 bytes
 17394 ;; Hardware stack levels used:    1
 17395 ;; This function calls:
 17396 ;;		Nothing
 17397 ;; This function is called by:
 17398 ;;		i2_RF_Enable
 17399 ;; This function uses a non-reentrant model
 17400 ;;
 17401                           
 17402                           	psect	text108
 17403  00176E                     __ptext108:
 17404                           	opt stack 0
 17405  00176E                     i2_RF_DataInt:
 17406                           	opt stack 13
 17407                           
 17408                           ; BSR set to: 0
 17409                           ;incstack = 0
 17410                           ;i2RF_DataInt@state stored from wreg
 17411  00176E  0100               	movlb	0	; () banked
 17412  001770  6F80               	movwf	i2RF_DataInt@state& (0+255),b
 17413                           
 17414                           ;RF.c: 80: if(state)
 17415  001772  0100               	movlb	0	; () banked
 17416  001774  5180               	movf	i2RF_DataInt@state& (0+255),w,b
 17417  001776  0100               	movlb	0	; () banked
 17418  001778  B4D8               	btfsc	status,2,c
 17419  00177A  D003               	goto	i2l380
 17420                           
 17421                           ; BSR set to: 0
 17422                           ;RF.c: 81: {
 17423                           ;RF.c: 83: INTCON3bits.INT1E = 1;
 17424  00177C  86F0               	bsf	intcon3,3,c	;volatile
 17425                           
 17426                           ;RF.c: 84: INTCON3bits.INT2E = 1;
 17427  00177E  88F0               	bsf	intcon3,4,c	;volatile
 17428                           
 17429                           ;RF.c: 85: }
 17430  001780  0012               	return	
 17431  001782                     i2l380:
 17432                           
 17433                           ; BSR set to: 0
 17434                           ;RF.c: 86: else
 17435                           ;RF.c: 87: {
 17436                           ;RF.c: 89: INTCON3bits.INT1E = 0;
 17437  001782  96F0               	bcf	intcon3,3,c	;volatile
 17438                           
 17439                           ;RF.c: 90: INTCON3bits.INT2E = 0;
 17440  001784  98F0               	bcf	intcon3,4,c	;volatile
 17441  001786  0012               	return	
 17442  001788                     __end_ofi2_RF_DataInt:
 17443                           	opt stack 0
 17444                           pclatu	equ	0xFFB
 17445                           pclath	equ	0xFFA
 17446                           tblptru	equ	0xFF8
 17447                           tblptrh	equ	0xFF7
 17448                           tblptrl	equ	0xFF6
 17449                           tablat	equ	0xFF5
 17450                           prodh	equ	0xFF4
 17451                           prodl	equ	0xFF3
 17452                           intcon	equ	0xFF2
 17453                           intcon2	equ	0xFF1
 17454                           intcon3	equ	0xFF0
 17455                           postinc0	equ	0xFEE
 17456                           fsr0h	equ	0xFEA
 17457                           fsr0l	equ	0xFE9
 17458                           wreg	equ	0xFE8
 17459                           postdec1	equ	0xFE5
 17460                           fsr1h	equ	0xFE2
 17461                           fsr1l	equ	0xFE1
 17462                           bsr	equ	0xFE0
 17463                           postinc2	equ	0xFDE
 17464                           postdec2	equ	0xFDD
 17465                           plusw2	equ	0xFDB
 17466                           fsr2h	equ	0xFDA
 17467                           fsr2l	equ	0xFD9
 17468                           status	equ	0xFD8
 17469                           
 17470 ;; *************** function i2_FSH_WriteIntArray *****************
 17471 ;; Defined at:
 17472 ;;		line 146 in file "FLASH.c"
 17473 ;; Parameters:    Size  Location     Type
 17474 ;;  Array           3    4[BANK0 ] PTR unsigned int 
 17475 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 17476 ;; Auto vars:     Size  Location     Type
 17477 ;;  FSH_WriteInt    1   12[BANK0 ] unsigned char 
 17478 ;; Return value:  Size  Location     Type
 17479 ;;		None               void
 17480 ;; Registers used:
 17481 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17482 ;; Tracked objects:
 17483 ;;		On entry : 0/0
 17484 ;;		On exit  : 0/0
 17485 ;;		Unchanged: 0/0
 17486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17487 ;;      Params:         0       3       0       0       0
 17488 ;;      Locals:         0       1       0       0       0
 17489 ;;      Temps:          0       5       0       0       0
 17490 ;;      Totals:         0       9       0       0       0
 17491 ;;Total ram usage:        9 bytes
 17492 ;; Hardware stack levels used:    1
 17493 ;; Hardware stack levels required when called:    1
 17494 ;; This function calls:
 17495 ;;		i2_FSH_AddressToBlock
 17496 ;; This function is called by:
 17497 ;;		i2_FSH_Write_IR_RF
 17498 ;; This function uses a non-reentrant model
 17499 ;;
 17500                           
 17501                           	psect	text109
 17502  00074A                     __ptext109:
 17503                           	opt stack 0
 17504  00074A                     i2_FSH_WriteIntArray:
 17505                           	opt stack 14
 17506                           
 17507                           ;FLASH.c: 148: unsigned char i;
 17508                           ;FLASH.c: 150: FSH_AddressToBlock(Array);
 17509                           
 17510                           ; BSR set to: 0
 17511                           ;incstack = 0
 17512  00074A  0100               	movlb	0	; () banked
 17513  00074C  5184               	movf	i2FSH_WriteIntArray@Array& (0+255),w,b
 17514  00074E  0100               	movlb	0	; () banked
 17515  000750  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 17516  000752  0100               	movlb	0	; () banked
 17517  000754  5185               	movf	(i2FSH_WriteIntArray@Array+1)& (0+255),w,b
 17518  000756  0100               	movlb	0	; () banked
 17519  000758  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 17520  00075A  0100               	movlb	0	; () banked
 17521  00075C  5186               	movf	(i2FSH_WriteIntArray@Array+2)& (0+255),w,b
 17522  00075E  0100               	movlb	0	; () banked
 17523  000760  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 17524  000762  0100               	movlb	0	; () banked
 17525  000764  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 17526  000766  EC62  F009         	call	i2_FSH_AddressToBlock	;wreg free
 17527                           
 17528                           ;FLASH.c: 152: for(i = 0; i<32; i++)
 17529  00076A  0E00               	movlw	0
 17530  00076C  0100               	movlb	0	; () banked
 17531  00076E  6F8C               	movwf	i2FSH_WriteIntArray@i& (0+255),b
 17532  000770                     i2l5526:
 17533                           
 17534                           ; BSR set to: 0
 17535  000770  0E1F               	movlw	31
 17536  000772  0100               	movlb	0	; () banked
 17537  000774  658C               	cpfsgt	i2FSH_WriteIntArray@i& (0+255),b
 17538  000776  D001               	goto	i2l5530
 17539  000778  D045               	goto	i2l1171
 17540  00077A                     i2l5530:
 17541                           
 17542                           ; BSR set to: 0
 17543                           ;FLASH.c: 153: {
 17544                           ;FLASH.c: 155: TABLAT =(Array[i] & 0xFF00) >> 8;
 17545  00077A  0100               	movlb	0	; () banked
 17546  00077C  518C               	movf	i2FSH_WriteIntArray@i& (0+255),w,b
 17547  00077E  0D02               	mullw	2
 17548  000780  50F3               	movf	prodl,w,c
 17549  000782  0100               	movlb	0	; () banked
 17550  000784  2584               	addwf	i2FSH_WriteIntArray@Array& (0+255),w,b
 17551  000786  0100               	movlb	0	; () banked
 17552  000788  6F87               	movwf	??i2_FSH_WriteIntArray& (0+255),b
 17553  00078A  50F4               	movf	prodh,w,c
 17554  00078C  0100               	movlb	0	; () banked
 17555  00078E  2185               	addwfc	(i2FSH_WriteIntArray@Array+1)& (0+255),w,b
 17556  000790  0100               	movlb	0	; () banked
 17557  000792  6F88               	movwf	(??i2_FSH_WriteIntArray+1)& (0+255),b
 17558  000794  0E00               	movlw	0
 17559  000796  0100               	movlb	0	; () banked
 17560  000798  2186               	addwfc	(i2FSH_WriteIntArray@Array+2)& (0+255),w,b
 17561  00079A  0100               	movlb	0	; () banked
 17562  00079C  6F89               	movwf	(??i2_FSH_WriteIntArray+2)& (0+255),b
 17563  00079E  C087  FFF6         	movff	??i2_FSH_WriteIntArray,tblptrl
 17564  0007A2  C088  FFF7         	movff	??i2_FSH_WriteIntArray+1,tblptrh
 17565  0007A6  C089  FFF8         	movff	??i2_FSH_WriteIntArray+2,tblptru
 17566  0007AA  0009               	tblrd		*+
 17567  0007AC  CFF5 F08A          	movff	tablat,??i2_FSH_WriteIntArray+3
 17568  0007B0  0009               	tblrd		*+
 17569  0007B2  CFF5 F08B          	movff	tablat,??i2_FSH_WriteIntArray+4
 17570  0007B6  C08B  F08A         	movff	??i2_FSH_WriteIntArray+4,??i2_FSH_WriteIntArray+3
 17571  0007BA  0100               	movlb	0	; () banked
 17572  0007BC  6B8B               	clrf	(??i2_FSH_WriteIntArray+4)& (0+255),b
 17573  0007BE  0100               	movlb	0	; () banked
 17574  0007C0  518A               	movf	(??i2_FSH_WriteIntArray+3)& (0+255),w,b
 17575  0007C2  6EF5               	movwf	tablat,c	;volatile
 17576  0007C4  000D               	tblwt		*+	;# 
 17577                           
 17578                           ;FLASH.c: 157: TABLAT = (Array[i] & 0x00FF);
 17579  0007C6  0100               	movlb	0	; () banked
 17580  0007C8  518C               	movf	i2FSH_WriteIntArray@i& (0+255),w,b
 17581  0007CA  0D02               	mullw	2
 17582  0007CC  50F3               	movf	prodl,w,c
 17583  0007CE  0100               	movlb	0	; () banked
 17584  0007D0  2584               	addwf	i2FSH_WriteIntArray@Array& (0+255),w,b
 17585  0007D2  0100               	movlb	0	; () banked
 17586  0007D4  6F87               	movwf	??i2_FSH_WriteIntArray& (0+255),b
 17587  0007D6  50F4               	movf	prodh,w,c
 17588  0007D8  0100               	movlb	0	; () banked
 17589  0007DA  2185               	addwfc	(i2FSH_WriteIntArray@Array+1)& (0+255),w,b
 17590  0007DC  0100               	movlb	0	; () banked
 17591  0007DE  6F88               	movwf	(??i2_FSH_WriteIntArray+1)& (0+255),b
 17592  0007E0  0E00               	movlw	0
 17593  0007E2  0100               	movlb	0	; () banked
 17594  0007E4  2186               	addwfc	(i2FSH_WriteIntArray@Array+2)& (0+255),w,b
 17595  0007E6  0100               	movlb	0	; () banked
 17596  0007E8  6F89               	movwf	(??i2_FSH_WriteIntArray+2)& (0+255),b
 17597  0007EA  C087  FFF6         	movff	??i2_FSH_WriteIntArray,tblptrl
 17598  0007EE  C088  FFF7         	movff	??i2_FSH_WriteIntArray+1,tblptrh
 17599  0007F2  C089  FFF8         	movff	??i2_FSH_WriteIntArray+2,tblptru
 17600  0007F6  0008               	tblrd		*
 17601  0007F8  CFF5 FFF5          	movff	tablat,tablat	;volatile
 17602  0007FC  000D               	tblwt		*+	;# 
 17603  0007FE  0100               	movlb	0	; () banked
 17604  000800  2B8C               	incf	i2FSH_WriteIntArray@i& (0+255),f,b
 17605  000802  D7B6               	goto	i2l5526
 17606  000804                     i2l1171:
 17607                           
 17608                           ; BSR set to: 0
 17609                           ;FLASH.c: 159: }
 17610                           ;FLASH.c: 160: EECON1bits.FREE = 0;
 17611  000804  98A6               	bcf	4006,4,c	;volatile
 17612  000806  84A6               	bsf	4006,2,c	;# 
 17613  000808  9EF2               	bcf	intcon,7,c	;# 
 17614  00080A  0E55               	movlw	85	;# 
 17615  00080C  6EA7               	movwf	4007,c	;# 
 17616  00080E  0EAA               	movlw	170	;# 
 17617  000810  6EA7               	movwf	4007,c	;# 
 17618  000812  82A6               	bsf	4006,1,c	;# 
 17619  000814  0012               	return		;funcret
 17620  000816                     __end_ofi2_FSH_WriteIntArray:
 17621                           	opt stack 0
 17622                           pclatu	equ	0xFFB
 17623                           pclath	equ	0xFFA
 17624                           tblptru	equ	0xFF8
 17625                           tblptrh	equ	0xFF7
 17626                           tblptrl	equ	0xFF6
 17627                           tablat	equ	0xFF5
 17628                           prodh	equ	0xFF4
 17629                           prodl	equ	0xFF3
 17630                           intcon	equ	0xFF2
 17631                           intcon2	equ	0xFF1
 17632                           intcon3	equ	0xFF0
 17633                           postinc0	equ	0xFEE
 17634                           fsr0h	equ	0xFEA
 17635                           fsr0l	equ	0xFE9
 17636                           wreg	equ	0xFE8
 17637                           postdec1	equ	0xFE5
 17638                           fsr1h	equ	0xFE2
 17639                           fsr1l	equ	0xFE1
 17640                           bsr	equ	0xFE0
 17641                           postinc2	equ	0xFDE
 17642                           postdec2	equ	0xFDD
 17643                           plusw2	equ	0xFDB
 17644                           fsr2h	equ	0xFDA
 17645                           fsr2l	equ	0xFD9
 17646                           status	equ	0xFD8
 17647                           
 17648 ;; *************** function i2_FSH_VerifyWriteIntArray *****************
 17649 ;; Defined at:
 17650 ;;		line 176 in file "FLASH.c"
 17651 ;; Parameters:    Size  Location     Type
 17652 ;;  ConstArray      3    0[BANK0 ] PTR const unsigned int 
 17653 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 17654 ;;  Array           2    3[BANK0 ] PTR unsigned int 
 17655 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 17656 ;; Auto vars:     Size  Location     Type
 17657 ;;  FSH_VerifyWr    1   10[BANK0 ] unsigned char 
 17658 ;; Return value:  Size  Location     Type
 17659 ;;                  1    wreg      unsigned char 
 17660 ;; Registers used:
 17661 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 17662 ;; Tracked objects:
 17663 ;;		On entry : 0/0
 17664 ;;		On exit  : 0/0
 17665 ;;		Unchanged: 0/0
 17666 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17667 ;;      Params:         0       5       0       0       0
 17668 ;;      Locals:         0       1       0       0       0
 17669 ;;      Temps:          0       5       0       0       0
 17670 ;;      Totals:         0      11       0       0       0
 17671 ;;Total ram usage:       11 bytes
 17672 ;; Hardware stack levels used:    1
 17673 ;; This function calls:
 17674 ;;		Nothing
 17675 ;; This function is called by:
 17676 ;;		i2_FSH_Write_IR_RF
 17677 ;; This function uses a non-reentrant model
 17678 ;;
 17679                           
 17680                           	psect	text110
 17681  000E30                     __ptext110:
 17682                           	opt stack 0
 17683  000E30                     i2_FSH_VerifyWriteIntArray:
 17684                           	opt stack 15
 17685                           
 17686                           ;FLASH.c: 178: unsigned char i;
 17687                           ;FLASH.c: 180: for(i = 0; i<32; i++)
 17688                           
 17689                           ;incstack = 0
 17690  000E30  0E00               	movlw	0
 17691  000E32  0100               	movlb	0	; () banked
 17692  000E34  6F8A               	movwf	i2FSH_VerifyWriteIntArray@i& (0+255),b
 17693  000E36                     i2l5538:
 17694                           
 17695                           ; BSR set to: 0
 17696  000E36  0E1F               	movlw	31
 17697  000E38  0100               	movlb	0	; () banked
 17698  000E3A  658A               	cpfsgt	i2FSH_VerifyWriteIntArray@i& (0+255),b
 17699  000E3C  D001               	goto	i2l5542
 17700  000E3E  D031               	goto	i2l5552
 17701  000E40                     i2l5542:
 17702                           
 17703                           ; BSR set to: 0
 17704                           ;FLASH.c: 181: {
 17705                           ;FLASH.c: 182: if(ConstArray[i] != Array[i])
 17706  000E40  0100               	movlb	0	; () banked
 17707  000E42  518A               	movf	i2FSH_VerifyWriteIntArray@i& (0+255),w,b
 17708  000E44  0D02               	mullw	2
 17709  000E46  50F3               	movf	prodl,w,c
 17710  000E48  0100               	movlb	0	; () banked
 17711  000E4A  2583               	addwf	i2FSH_VerifyWriteIntArray@Array& (0+255),w,b
 17712  000E4C  6ED9               	movwf	fsr2l,c
 17713  000E4E  50F4               	movf	prodh,w,c
 17714  000E50  0100               	movlb	0	; () banked
 17715  000E52  2184               	addwfc	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),w,b
 17716  000E54  6EDA               	movwf	fsr2h,c
 17717  000E56  0100               	movlb	0	; () banked
 17718  000E58  518A               	movf	i2FSH_VerifyWriteIntArray@i& (0+255),w,b
 17719  000E5A  0D02               	mullw	2
 17720  000E5C  50F3               	movf	prodl,w,c
 17721  000E5E  0100               	movlb	0	; () banked
 17722  000E60  2580               	addwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),w,b
 17723  000E62  0100               	movlb	0	; () banked
 17724  000E64  6F87               	movwf	(??i2_FSH_VerifyWriteIntArray+2)& (0+255),b
 17725  000E66  50F4               	movf	prodh,w,c
 17726  000E68  0100               	movlb	0	; () banked
 17727  000E6A  2181               	addwfc	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),w,b
 17728  000E6C  0100               	movlb	0	; () banked
 17729  000E6E  6F88               	movwf	(??i2_FSH_VerifyWriteIntArray+3)& (0+255),b
 17730  000E70  0E00               	movlw	0
 17731  000E72  0100               	movlb	0	; () banked
 17732  000E74  2182               	addwfc	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),w,b
 17733  000E76  0100               	movlb	0	; () banked
 17734  000E78  6F89               	movwf	(??i2_FSH_VerifyWriteIntArray+4)& (0+255),b
 17735  000E7A  C087  FFF6         	movff	??i2_FSH_VerifyWriteIntArray+2,tblptrl
 17736  000E7E  C088  FFF7         	movff	??i2_FSH_VerifyWriteIntArray+3,tblptrh
 17737  000E82  C089  FFF8         	movff	??i2_FSH_VerifyWriteIntArray+4,tblptru
 17738  000E86  50DE               	movf	postinc2,w,c
 17739  000E88  0009               	tblrd		*+
 17740  000E8A  18F5               	xorwf	tablat,w,c
 17741  000E8C  E105               	bnz	i2u574_40
 17742  000E8E  50DE               	movf	postinc2,w,c
 17743  000E90  0009               	tblrd		*+
 17744  000E92  18F5               	xorwf	tablat,w,c
 17745  000E94  B4D8               	btfsc	status,2,c
 17746  000E96  D002               	goto	i2l5548
 17747  000E98                     i2u574_40:
 17748                           
 17749                           ; BSR set to: 0
 17750                           ;FLASH.c: 183: {
 17751                           ;FLASH.c: 184: return 0;
 17752  000E98  0E00               	movlw	0
 17753                           
 17754                           ; BSR set to: 0
 17755  000E9A  0012               	return	
 17756  000E9C                     i2l5548:
 17757                           
 17758                           ; BSR set to: 0
 17759  000E9C  0100               	movlb	0	; () banked
 17760  000E9E  2B8A               	incf	i2FSH_VerifyWriteIntArray@i& (0+255),f,b
 17761  000EA0  D7CA               	goto	i2l5538
 17762  000EA2                     i2l5552:
 17763                           
 17764                           ; BSR set to: 0
 17765                           ;FLASH.c: 185: }
 17766                           ;FLASH.c: 186: }
 17767                           ;FLASH.c: 187: return 1;
 17768  000EA2  0E01               	movlw	1
 17769  000EA4  0012               	return	
 17770  000EA6                     __end_ofi2_FSH_VerifyWriteIntArray:
 17771                           	opt stack 0
 17772                           pclatu	equ	0xFFB
 17773                           pclath	equ	0xFFA
 17774                           tblptru	equ	0xFF8
 17775                           tblptrh	equ	0xFF7
 17776                           tblptrl	equ	0xFF6
 17777                           tablat	equ	0xFF5
 17778                           prodh	equ	0xFF4
 17779                           prodl	equ	0xFF3
 17780                           intcon	equ	0xFF2
 17781                           intcon2	equ	0xFF1
 17782                           intcon3	equ	0xFF0
 17783                           postinc0	equ	0xFEE
 17784                           fsr0h	equ	0xFEA
 17785                           fsr0l	equ	0xFE9
 17786                           wreg	equ	0xFE8
 17787                           postdec1	equ	0xFE5
 17788                           fsr1h	equ	0xFE2
 17789                           fsr1l	equ	0xFE1
 17790                           bsr	equ	0xFE0
 17791                           postinc2	equ	0xFDE
 17792                           postdec2	equ	0xFDD
 17793                           plusw2	equ	0xFDB
 17794                           fsr2h	equ	0xFDA
 17795                           fsr2l	equ	0xFD9
 17796                           status	equ	0xFD8
 17797                           
 17798 ;; *************** function i2_FSH_EraseBlock *****************
 17799 ;; Defined at:
 17800 ;;		line 98 in file "FLASH.c"
 17801 ;; Parameters:    Size  Location     Type
 17802 ;;  Address         4    4[BANK0 ] unsigned long 
 17803 ;; Auto vars:     Size  Location     Type
 17804 ;;  FSH_EraseBlo    4    0        unsigned long 
 17805 ;;  FSH_EraseBlo    1   10[BANK0 ] unsigned char 
 17806 ;;  FSH_EraseBlo    1    9[BANK0 ] unsigned char 
 17807 ;;  FSH_EraseBlo    1    8[BANK0 ] unsigned char 
 17808 ;; Return value:  Size  Location     Type
 17809 ;;		None               void
 17810 ;; Registers used:
 17811 ;;		wreg, status,2, status,0, cstack
 17812 ;; Tracked objects:
 17813 ;;		On entry : 0/0
 17814 ;;		On exit  : 0/0
 17815 ;;		Unchanged: 0/0
 17816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17817 ;;      Params:         0       4       0       0       0
 17818 ;;      Locals:         0       3       0       0       0
 17819 ;;      Temps:          0       0       0       0       0
 17820 ;;      Totals:         0       7       0       0       0
 17821 ;;Total ram usage:        7 bytes
 17822 ;; Hardware stack levels used:    1
 17823 ;; Hardware stack levels required when called:    1
 17824 ;; This function calls:
 17825 ;;		i2_FSH_AddressToBlock
 17826 ;; This function is called by:
 17827 ;;		i2_FSH_Write_IR_RF
 17828 ;; This function uses a non-reentrant model
 17829 ;;
 17830                           
 17831                           	psect	text111
 17832  000EA6                     __ptext111:
 17833                           	opt stack 0
 17834  000EA6                     i2_FSH_EraseBlock:
 17835                           	opt stack 14
 17836                           
 17837                           ;FLASH.c: 100: unsigned char highint = INTCONbits.GIE;
 17838                           
 17839                           ; BSR set to: 0
 17840                           ;incstack = 0
 17841  000EA6  0E00               	movlw	0
 17842  000EA8  BEF2               	btfsc	intcon,7,c	;volatile
 17843  000EAA  0E01               	movlw	1
 17844  000EAC  0100               	movlb	0	; () banked
 17845  000EAE  6F88               	movwf	i2FSH_EraseBlock@highint& (0+255),b
 17846                           
 17847                           ;FLASH.c: 101: unsigned char lowint = INTCONbits.PEIE;
 17848  000EB0  0E00               	movlw	0
 17849  000EB2  BCF2               	btfsc	intcon,6,c	;volatile
 17850  000EB4  0E01               	movlw	1
 17851  000EB6  0100               	movlb	0	; () banked
 17852  000EB8  6F89               	movwf	i2FSH_EraseBlock@lowint& (0+255),b
 17853                           
 17854                           ; BSR set to: 0
 17855                           ;FLASH.c: 102: unsigned char WriteTries;
 17856                           ;FLASH.c: 103: unsigned long i;
 17857                           ;FLASH.c: 105: INTCONbits.GIE = 0;
 17858  000EBA  9EF2               	bcf	intcon,7,c	;volatile
 17859                           
 17860                           ; BSR set to: 0
 17861                           ;FLASH.c: 106: INTCONbits.PEIE = 0;
 17862  000EBC  9CF2               	bcf	intcon,6,c	;volatile
 17863  000EBE                     i2l5502:
 17864                           
 17865                           ; BSR set to: 0
 17866                           ;FLASH.c: 109: FSH_AddressToBlock(Address);
 17867  000EBE  C084  F080         	movff	i2FSH_EraseBlock@Address,i2FSH_AddressToBlock@Address
 17868  000EC2  C085  F081         	movff	i2FSH_EraseBlock@Address+1,i2FSH_AddressToBlock@Address+1
 17869  000EC6  C086  F082         	movff	i2FSH_EraseBlock@Address+2,i2FSH_AddressToBlock@Address+2
 17870  000ECA  C087  F083         	movff	i2FSH_EraseBlock@Address+3,i2FSH_AddressToBlock@Address+3
 17871  000ECE  EC62  F009         	call	i2_FSH_AddressToBlock	;wreg free
 17872                           
 17873                           ;FLASH.c: 111: WriteTries = 1;
 17874  000ED2  0E01               	movlw	1
 17875  000ED4  0100               	movlb	0	; () banked
 17876  000ED6  6F8A               	movwf	i2FSH_EraseBlock@WriteTries& (0+255),b
 17877  000ED8  84A6               	bsf	4006,2,c	;# 
 17878  000EDA  88A6               	bsf	4006,4,c	;# 
 17879  000EDC  9EF2               	bcf	intcon,7,c	;# 
 17880  000EDE  0E55               	movlw	85	;# 
 17881  000EE0  6EA7               	movwf	4007,c	;# 
 17882  000EE2  0EAA               	movlw	170	;# 
 17883  000EE4  6EA7               	movwf	4007,c	;# 
 17884  000EE6  82A6               	bsf	4006,1,c	;# 
 17885                           
 17886                           ;FLASH.c: 122: if(EECON1bits.WRERR)
 17887  000EE8  A6A6               	btfss	4006,3,c	;volatile
 17888  000EEA  D007               	goto	i2l5514
 17889                           
 17890                           ;FLASH.c: 123: {
 17891                           ;FLASH.c: 124: WriteTries++;
 17892  000EEC  0100               	movlb	0	; () banked
 17893  000EEE  2B8A               	incf	i2FSH_EraseBlock@WriteTries& (0+255),f,b
 17894                           
 17895                           ; BSR set to: 0
 17896                           ;FLASH.c: 125: if(WriteTries < 10)
 17897  000EF0  0E0A               	movlw	10
 17898  000EF2  0100               	movlb	0	; () banked
 17899  000EF4  618A               	cpfslt	i2FSH_EraseBlock@WriteTries& (0+255),b
 17900  000EF6  D001               	goto	i2l5514
 17901  000EF8  D7E2               	goto	i2l5502
 17902  000EFA                     i2l5514:
 17903                           
 17904                           ;FLASH.c: 128: }
 17905                           ;FLASH.c: 129: }
 17906                           ;FLASH.c: 131: if(highint)
 17907  000EFA  0100               	movlb	0	; () banked
 17908  000EFC  5188               	movf	i2FSH_EraseBlock@highint& (0+255),w,b
 17909  000EFE  0100               	movlb	0	; () banked
 17910  000F00  A4D8               	btfss	status,2,c
 17911                           
 17912                           ; BSR set to: 0
 17913                           ;FLASH.c: 132: {
 17914                           ;FLASH.c: 133: INTCONbits.GIE = 1;
 17915  000F02  8EF2               	bsf	intcon,7,c	;volatile
 17916                           
 17917                           ; BSR set to: 0
 17918                           ;FLASH.c: 134: }
 17919                           ;FLASH.c: 135: if(lowint)
 17920                           
 17921                           ; BSR set to: 0
 17922  000F04  0100               	movlb	0	; () banked
 17923  000F06  5189               	movf	i2FSH_EraseBlock@lowint& (0+255),w,b
 17924  000F08  0100               	movlb	0	; () banked
 17925  000F0A  B4D8               	btfsc	status,2,c
 17926  000F0C  0012               	return	
 17927                           
 17928                           ; BSR set to: 0
 17929                           ;FLASH.c: 136: {
 17930                           ;FLASH.c: 137: INTCONbits.PEIE = 1;
 17931  000F0E  8CF2               	bsf	intcon,6,c	;volatile
 17932  000F10  0012               	return	
 17933  000F12                     __end_ofi2_FSH_EraseBlock:
 17934                           	opt stack 0
 17935                           pclatu	equ	0xFFB
 17936                           pclath	equ	0xFFA
 17937                           tblptru	equ	0xFF8
 17938                           tblptrh	equ	0xFF7
 17939                           tblptrl	equ	0xFF6
 17940                           tablat	equ	0xFF5
 17941                           prodh	equ	0xFF4
 17942                           prodl	equ	0xFF3
 17943                           intcon	equ	0xFF2
 17944                           intcon2	equ	0xFF1
 17945                           intcon3	equ	0xFF0
 17946                           postinc0	equ	0xFEE
 17947                           fsr0h	equ	0xFEA
 17948                           fsr0l	equ	0xFE9
 17949                           wreg	equ	0xFE8
 17950                           postdec1	equ	0xFE5
 17951                           fsr1h	equ	0xFE2
 17952                           fsr1l	equ	0xFE1
 17953                           bsr	equ	0xFE0
 17954                           postinc2	equ	0xFDE
 17955                           postdec2	equ	0xFDD
 17956                           plusw2	equ	0xFDB
 17957                           fsr2h	equ	0xFDA
 17958                           fsr2l	equ	0xFD9
 17959                           status	equ	0xFD8
 17960                           
 17961 ;; *************** function i2_FSH_AddressToBlock *****************
 17962 ;; Defined at:
 17963 ;;		line 481 in file "FLASH.c"
 17964 ;; Parameters:    Size  Location     Type
 17965 ;;  Address         4    0[BANK0 ] unsigned long 
 17966 ;; Auto vars:     Size  Location     Type
 17967 ;;		None
 17968 ;; Return value:  Size  Location     Type
 17969 ;;		None               void
 17970 ;; Registers used:
 17971 ;;		wreg, status,2, status,0
 17972 ;; Tracked objects:
 17973 ;;		On entry : 0/0
 17974 ;;		On exit  : 0/0
 17975 ;;		Unchanged: 0/0
 17976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17977 ;;      Params:         0       4       0       0       0
 17978 ;;      Locals:         0       0       0       0       0
 17979 ;;      Temps:          0       0       0       0       0
 17980 ;;      Totals:         0       4       0       0       0
 17981 ;;Total ram usage:        4 bytes
 17982 ;; Hardware stack levels used:    1
 17983 ;; This function calls:
 17984 ;;		Nothing
 17985 ;; This function is called by:
 17986 ;;		i2_FSH_EraseBlock
 17987 ;;		i2_FSH_WriteIntArray
 17988 ;;		i2_FSH_Write_IR_RF
 17989 ;; This function uses a non-reentrant model
 17990 ;;
 17991                           
 17992                           	psect	text112
 17993  0012C4                     __ptext112:
 17994                           	opt stack 0
 17995  0012C4                     i2_FSH_AddressToBlock:
 17996                           	opt stack 14
 17997                           
 17998                           ;FLASH.c: 483: if(Address > 0x3600)
 17999                           
 18000                           ; BSR set to: 0
 18001                           ;incstack = 0
 18002  0012C4  0100               	movlb	0	; () banked
 18003  0012C6  5183               	movf	(i2FSH_AddressToBlock@Address+3)& (0+255),w,b
 18004  0012C8  0100               	movlb	0	; () banked
 18005  0012CA  1182               	iorwf	(i2FSH_AddressToBlock@Address+2)& (0+255),w,b
 18006  0012CC  E107               	bnz	i2u522_40
 18007  0012CE  0100               	movlb	0	; () banked
 18008  0012D0  0580               	decf	i2FSH_AddressToBlock@Address& (0+255),w,b
 18009  0012D2  0E36               	movlw	54
 18010  0012D4  0100               	movlb	0	; () banked
 18011  0012D6  5981               	subwfb	(i2FSH_AddressToBlock@Address+1)& (0+255),w,b
 18012  0012D8  A0D8               	btfss	status,0,c
 18013  0012DA  D009               	goto	i2l5186
 18014  0012DC                     i2u522_40:
 18015                           
 18016                           ; BSR set to: 0
 18017                           ;FLASH.c: 484: {
 18018                           ;FLASH.c: 485: Address = 0x3600;
 18019  0012DC  0E00               	movlw	0
 18020  0012DE  0100               	movlb	0	; () banked
 18021  0012E0  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 18022  0012E2  0E36               	movlw	54
 18023  0012E4  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 18024  0012E6  0E00               	movlw	0
 18025  0012E8  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 18026  0012EA  0E00               	movlw	0
 18027  0012EC  6F83               	movwf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 18028  0012EE                     i2l5186:
 18029                           
 18030                           ; BSR set to: 0
 18031                           ;FLASH.c: 486: }
 18032                           ;FLASH.c: 487: TBLPTRU = (Address & 0x002F0000) >> 16;
 18033  0012EE  0100               	movlb	0	; () banked
 18034  0012F0  5182               	movf	(i2FSH_AddressToBlock@Address+2)& (0+255),w,b
 18035  0012F2  0B2F               	andlw	47
 18036  0012F4  6EF8               	movwf	tblptru,c	;volatile
 18037                           
 18038                           ; BSR set to: 0
 18039                           ;FLASH.c: 488: TBLPTRH = (Address & 0x0000FF00) >> 8;
 18040  0012F6  C081  FFF7         	movff	i2FSH_AddressToBlock@Address+1,tblptrh	;volatile
 18041                           
 18042                           ; BSR set to: 0
 18043                           ;FLASH.c: 489: TBLPTRL = (Address & 0x000000FF);
 18044  0012FA  C080  FFF6         	movff	i2FSH_AddressToBlock@Address,tblptrl	;volatile
 18045                           
 18046                           ; BSR set to: 0
 18047  0012FE  0012               	return		;funcret
 18048  001300                     __end_ofi2_FSH_AddressToBlock:
 18049                           	opt stack 0
 18050                           pclatu	equ	0xFFB
 18051                           pclath	equ	0xFFA
 18052                           tblptru	equ	0xFF8
 18053                           tblptrh	equ	0xFF7
 18054                           tblptrl	equ	0xFF6
 18055                           tablat	equ	0xFF5
 18056                           prodh	equ	0xFF4
 18057                           prodl	equ	0xFF3
 18058                           intcon	equ	0xFF2
 18059                           intcon2	equ	0xFF1
 18060                           intcon3	equ	0xFF0
 18061                           postinc0	equ	0xFEE
 18062                           fsr0h	equ	0xFEA
 18063                           fsr0l	equ	0xFE9
 18064                           wreg	equ	0xFE8
 18065                           postdec1	equ	0xFE5
 18066                           fsr1h	equ	0xFE2
 18067                           fsr1l	equ	0xFE1
 18068                           bsr	equ	0xFE0
 18069                           postinc2	equ	0xFDE
 18070                           postdec2	equ	0xFDD
 18071                           plusw2	equ	0xFDB
 18072                           fsr2h	equ	0xFDA
 18073                           fsr2l	equ	0xFD9
 18074                           status	equ	0xFD8
 18075                           pclatu	equ	0xFFB
 18076                           pclath	equ	0xFFA
 18077                           tblptru	equ	0xFF8
 18078                           tblptrh	equ	0xFF7
 18079                           tblptrl	equ	0xFF6
 18080                           tablat	equ	0xFF5
 18081                           prodh	equ	0xFF4
 18082                           prodl	equ	0xFF3
 18083                           intcon	equ	0xFF2
 18084                           intcon2	equ	0xFF1
 18085                           intcon3	equ	0xFF0
 18086                           postinc0	equ	0xFEE
 18087                           fsr0h	equ	0xFEA
 18088                           fsr0l	equ	0xFE9
 18089                           wreg	equ	0xFE8
 18090                           postdec1	equ	0xFE5
 18091                           fsr1h	equ	0xFE2
 18092                           fsr1l	equ	0xFE1
 18093                           bsr	equ	0xFE0
 18094                           postinc2	equ	0xFDE
 18095                           postdec2	equ	0xFDD
 18096                           plusw2	equ	0xFDB
 18097                           fsr2h	equ	0xFDA
 18098                           fsr2l	equ	0xFD9
 18099                           status	equ	0xFD8
 18100                           
 18101                           	psect	param0
 18102  0000                     pclatu	equ	0xFFB
 18103                           pclath	equ	0xFFA
 18104                           tblptru	equ	0xFF8
 18105                           tblptrh	equ	0xFF7
 18106                           tblptrl	equ	0xFF6
 18107                           tablat	equ	0xFF5
 18108                           prodh	equ	0xFF4
 18109                           prodl	equ	0xFF3
 18110                           intcon	equ	0xFF2
 18111                           intcon2	equ	0xFF1
 18112                           intcon3	equ	0xFF0
 18113                           postinc0	equ	0xFEE
 18114                           fsr0h	equ	0xFEA
 18115                           fsr0l	equ	0xFE9
 18116                           wreg	equ	0xFE8
 18117                           postdec1	equ	0xFE5
 18118                           fsr1h	equ	0xFE2
 18119                           fsr1l	equ	0xFE1
 18120                           bsr	equ	0xFE0
 18121                           postinc2	equ	0xFDE
 18122                           postdec2	equ	0xFDD
 18123                           plusw2	equ	0xFDB
 18124                           fsr2h	equ	0xFDA
 18125                           fsr2l	equ	0xFD9
 18126                           status	equ	0xFD8
 18127                           
 18128                           	psect	temp
 18129  000060                     btemp:
 18130                           	opt stack 0
 18131  000060                     	ds	1
 18132  0000                     int$flags	set	btemp
 18133                           pclatu	equ	0xFFB
 18134                           pclath	equ	0xFFA
 18135                           tblptru	equ	0xFF8
 18136                           tblptrh	equ	0xFF7
 18137                           tblptrl	equ	0xFF6
 18138                           tablat	equ	0xFF5
 18139                           prodh	equ	0xFF4
 18140                           prodl	equ	0xFF3
 18141                           intcon	equ	0xFF2
 18142                           intcon2	equ	0xFF1
 18143                           intcon3	equ	0xFF0
 18144                           postinc0	equ	0xFEE
 18145                           fsr0h	equ	0xFEA
 18146                           fsr0l	equ	0xFE9
 18147                           wreg	equ	0xFE8
 18148                           postdec1	equ	0xFE5
 18149                           fsr1h	equ	0xFE2
 18150                           fsr1l	equ	0xFE1
 18151                           bsr	equ	0xFE0
 18152                           postinc2	equ	0xFDE
 18153                           postdec2	equ	0xFDD
 18154                           plusw2	equ	0xFDB
 18155                           fsr2h	equ	0xFDA
 18156                           fsr2l	equ	0xFD9
 18157                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    66
    Data        7
    BSS         680
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     71      95
    BANK0           128     57      80
    BANK1           256     32     160
    BANK2           256      0     256
    BANK3           256      0     256

Pointer List with Targets:

    FSH_VerifyWriteIntArray@Array	PTR unsigned int  size(2) Largest target is 256
		 -> IR_DataTiming(BANK2[256]), RF_DataTiming(BANK3[256]), 

    FSH_VerifyWriteIntArray@ConstArray	PTR const unsigned int  size(3) Largest target is 256
		 -> IR_SavedTiming(CODE[256]), RF_SavedTiming(CODE[256]), 

    FSH_WriteIntArray@Array	PTR unsigned int  size(3) Largest target is 256
		 -> IR_SavedTiming(CODE[256]), RF_SavedTiming(CODE[256]), 

    MSC_BufferCopyIntConst@from	PTR const unsigned int  size(3) Largest target is 256
		 -> IR_SavedTiming(CODE[256]), RF_SavedTiming(CODE[256]), 

    MSC_BufferCopyIntConst@to	PTR unsigned int  size(2) Largest target is 256
		 -> IR_DataTiming(BANK2[256]), RF_DataTiming(BANK3[256]), 

    MSC_CleanBufferInt@data	PTR unsigned int  size(2) Largest target is 256
		 -> IR_DataTiming(BANK2[256]), RF_DataTiming(BANK3[256]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    _low_isr->_IR_CheckCode
    _TMR_Timer2Start->_TMR_ResetTimer2
    _TMR_ResetTimer2->i1_TMR_Timer2
    _TMR_Timer1Start->i1_TMR_ResetTimer1
    i1_TMR_ResetTimer1->i1_TMR_Timer1
    _RF_Disable->i1_RF_DataInt
    _RF_Disable->i1_TMR_Timer0
    _RF_Disable->i1_TMR_Timer0Int
    _IR_CleanBuffer->i1_MSC_CleanBufferInt
    _IR_CheckCode->i1___ftmul
    i1___ftge->i1___lwtoft
    _FSH_Write_IR_RF->_MSC_BufferCopyIntConst
    _MSC_BufferCopyIntConst->i1_MSC_CleanBufferInt
    _RF_Enable->i1_RF_DataInt
    _RF_Enable->i1_TMR_Timer0Int
    _FSH_WriteIntArray->_FSH_AddressToBlock
    _FSH_EraseBlock->_FSH_AddressToBlock
    _ADC_CalculateVoltage->i1___ftmul
    i1___lwtoft->i1___ftpack
    i1___ftmul->___ftdiv
    ___ftdiv->i1___lwtoft

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    _high_isr->_RF_CheckCode
    _TMR_Timer0Start->i2_TMR_ResetTimer0
    i2_TMR_ResetTimer0->i2_TMR_Timer0
    _RF_CheckCode->i2_FSH_Write_IR_RF
    i2___lwtoft->i2___ftpack
    i2___ftmul->i2___lwtoft
    i2___ftge->i2___lwtoft
    i2_FSH_Write_IR_RF->i2_MSC_BufferCopyIntConst
    i2_MSC_BufferCopyIntConst->i2_MSC_CleanBufferInt
    i2_RF_Enable->i2_RF_DataInt
    i2_RF_Enable->i2_TMR_Timer0Int
    i2_FSH_WriteIntArray->i2_FSH_AddressToBlock
    i2_FSH_EraseBlock->i2_FSH_AddressToBlock

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_IR_LoadCode
    _main->_RF_LoadCode
    _RF_LoadCode->___ftmul
    _MTR_Rotate->_MSC_DelayMS
    _MSC_BlinkLED->_MSC_DelayMS
    _MSC_DelayMS->_MSC_DelayNOP
    _InitTimer2->_TMR_Timer2
    _InitTimer2->_TMR_Timer2Int
    _InitTimer1->_TMR_Timer1Function
    _TMR_Timer1Function->_TMR_ResetTimer1
    _TMR_ResetTimer1->_TMR_Timer1
    _InitTimer0->_TMR_ResetTimer0
    _TMR_ResetTimer0->_TMR_Timer0
    _InitRF->_MSC_CleanBufferInt
    _InitLDO->_LDO_Pass
    _InitIR->_MSC_CleanBufferInt
    _InitButton->_BUT_IR_PinChangeInt
    _InitButton->_BUT_ReadButton
    _InitADC->_ADC_ConversionInt
    _InitADC->_ADC_Module
    _IR_LoadCode->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   26421
                          _ADC_Start
                        _IR_LoadCode
                           _Init_App
                        _Init_System
                       _MSC_BlinkLED
                        _MSC_DelayMS
                         _MTR_Rotate
                        _RF_LoadCode
                  _SYS_ActivityTimer
            _SYS_ConfigureOscillator
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6    1298
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (1) _SYS_ConfigureOscillator                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYS_ActivityTimer                                    0     0      0       0
             _SYS_ActivityTimerReset
                          _SYS_Sleep
 ---------------------------------------------------------------------------------
 (2) _SYS_Sleep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYS_ActivityTimerReset                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_LoadCode                                          6     6      0    9993
                                             26 BANK1      6     6      0
               _RF_CalculateCodesize
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _RF_CalculateCodesize                                 1     1      0     130
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MTR_Rotate                                           0     0      0     660
                        _MSC_DelayMS
                            _MTR_IN1
                            _MTR_IN2
 ---------------------------------------------------------------------------------
 (2) _MTR_IN2                                              1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTR_IN1                                              1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MSC_BlinkLED                                         8     4      4    1467
                                             13 BANK1      8     4      4
                        _MSC_DelayMS
 ---------------------------------------------------------------------------------
 (2) _MSC_DelayMS                                          9     5      4     598
                                              4 BANK1      9     5      4
                       _MSC_DelayNOP
 ---------------------------------------------------------------------------------
 (3) _MSC_DelayNOP                                         4     2      2     145
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0    2412
                     _BUT_ReadButton
                    _IR_ReadReceiver
                            _InitADC
                         _InitButton
                          _InitFlash
                             _InitIR
                            _InitLDO
                          _InitMOTOR
                             _InitRF
                         _InitTimers
 ---------------------------------------------------------------------------------
 (2) _InitTimers                                           0     0      0     474
                         _InitTimer0
                         _InitTimer1
                         _InitTimer2
 ---------------------------------------------------------------------------------
 (3) _InitTimer2                                           0     0      0      62
                         _TMR_Timer2
                      _TMR_Timer2Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2Int                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer1                                           0     0      0     285
                    _TMR_ResetTimer1
                         _TMR_Timer1
                 _TMR_Timer1Function
                      _TMR_Timer1Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer1Int                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer1Function                                   1     1      0     158
                                              2 BANK1      1     1      0
                    _TMR_ResetTimer1
                         _TMR_Timer1
                      _TMR_Timer1Osc
 ---------------------------------------------------------------------------------
 (5) _TMR_Timer1Osc                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (5) _TMR_ResetTimer1                                      1     1      0      65
                                              1 BANK1      1     1      0
                         _TMR_Timer1
 ---------------------------------------------------------------------------------
 (5) _TMR_Timer1                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer0                                           0     0      0     127
                    _TMR_ResetTimer0
                         _TMR_Timer0
                      _TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer0Int                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_ResetTimer0                                      1     1      0      65
                                              1 BANK1      1     1      0
                         _TMR_Timer0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer0                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitRF                                               0     0      0     949
                 _MSC_CleanBufferInt
                         _RF_DataInt
                        _RF_Receiver
                    _RF_SetBandwidth
                      _RF_SetSquelch
 ---------------------------------------------------------------------------------
 (3) _RF_SetSquelch                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_SetBandwidth                                      1     1      0      93
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_Receiver                                          1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_DataInt                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitMOTOR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitLDO                                              0     0      0      31
                           _LDO_Pass
 ---------------------------------------------------------------------------------
 (3) _LDO_Pass                                             1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitIR                                               0     0      0     763
                 _MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (3) _MSC_CleanBufferInt                                   6     2      4     763
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) _InitFlash                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitButton                                           0     0      0      65
                _BUT_IR_PinChangeInt
                     _BUT_ReadButton
 ---------------------------------------------------------------------------------
 (3) _BUT_ReadButton                                       1     1      0      34
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _BUT_IR_PinChangeInt                                  1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitADC                                              0     0      0      62
                  _ADC_ChangeChannel
                  _ADC_ConversionInt
                         _ADC_Module
 ---------------------------------------------------------------------------------
 (3) _ADC_Module                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionInt                                    1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ChangeChannel                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IR_ReadReceiver                                      1     1      0      34
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_App                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_LoadCode                                          6     6      0    9993
                                             26 BANK1      6     6      0
               _IR_CalculateCodesize
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3268
                                              8 BANK1      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1158
                                              0 BANK1     15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5363
                                             11 BANK1     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2299
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (2) _IR_CalculateCodesize                                 1     1      0     130
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                             21    21      0   11528
                                             50 COMRAM    21    21      0
               _ADC_CalculateVoltage
                       _IR_CheckCode
                     _IR_CleanBuffer
                       _IR_ResetData
                         _RF_Disable
                    _TMR_Timer1Start
                   _TMR_Timer1Status
                    _TMR_Timer2Start
                   i1_BUT_ReadButton
                  i1_IR_ReadReceiver
           i1_SYS_ActivityTimerReset
                  i1_TMR_ResetTimer1
                       i1_TMR_Timer1
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) i1_SYS_ActivityTimerReset                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_IR_ReadReceiver                                    1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_BUT_ReadButton                                     1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer2Start                                      2     0      2     345
                                              2 COMRAM     2     0      2
                    _TMR_ResetTimer2
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (9) _TMR_ResetTimer2                                      1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) i1_TMR_Timer2                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer1Status                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer1Start                                      0     0      0      67
                  i1_TMR_ResetTimer1
                       i1_TMR_Timer1
 ---------------------------------------------------------------------------------
 (8) i1_TMR_ResetTimer1                                    1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer1
 ---------------------------------------------------------------------------------
 (8) i1_TMR_Timer1                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _RF_Disable                                           0     0      0      66
                       i1_RF_DataInt
                       i1_TMR_Timer0
                    i1_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (9) i1_TMR_Timer0                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _IR_CleanBuffer                                       0     0      0     195
               i1_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (8) _IR_CheckCode                                         9     9      0    7208
                                             41 COMRAM     9     9      0
                    _FSH_Write_IR_RF
                           i1___ftge
                          i1___ftmul
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (9) i1___ftge                                             9     3      6     240
                                             11 COMRAM     9     3      6
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) _FSH_Write_IR_RF                                     15    15      0    4520
                                             17 COMRAM    15    15      0
                 _FSH_AddressToBlock
                     _FSH_EraseBlock
            _FSH_VerifyWriteIntArray
                  _FSH_WriteIntArray
                       _IR_ResetData
             _MSC_BufferCopyIntConst
                       _RF_ResetData
 ---------------------------------------------------------------------------------
 (10) _RF_ResetData                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _MSC_BufferCopyIntConst                             11     2      9     934
                                              6 COMRAM    11     2      9
               i1_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (9) i1_MSC_CleanBufferInt                                 6     2      4     195
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _IR_ResetData                                         0     0      0      44
                          _RF_Enable
 ---------------------------------------------------------------------------------
 (9) _RF_Enable                                            0     0      0      44
                       i1_RF_DataInt
                    i1_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (9) i1_TMR_Timer0Int                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1_RF_DataInt                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _FSH_WriteIntArray                                   9     6      3    1013
                                              4 COMRAM     9     6      3
                 _FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (10) _FSH_VerifyWriteIntArray                            11     6      5    1158
                                              0 COMRAM    11     6      5
 ---------------------------------------------------------------------------------
 (10) _FSH_EraseBlock                                     11     7      4     501
                                              4 COMRAM     7     3      4
                 _FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (11) _FSH_AddressToBlock                                  4     0      4     345
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (8) _ADC_CalculateVoltage                                 5     5      0    3331
                                             41 COMRAM     5     5      0
                            ___ftdiv
                i1_ADC_ChangeChannel
                          i1___ftmul
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (9) i1___lwtoft                                           3     0      3     721
                                              8 COMRAM     3     0      3
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (9) i1___ftmul                                           15     9      6    1207
                                             26 COMRAM    15     9      6
                            ___ftdiv (ARG)
                         i1___ftpack
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) i1_ADC_ChangeChannel                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    1333
                                             11 COMRAM    15     9      6
                         i1___ftpack
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _high_isr                                           16    16      0    4995
                                             41 BANK0     16    16      0
                       _RF_CheckCode
                    _TMR_Timer0Start
                   _TMR_Timer0Status
                     i2_RF_ResetData
           i2_SYS_ActivityTimerReset
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_SYS_ActivityTimerReset                            0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR_Timer0Status                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR_Timer0Start                                     0     0      0      67
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_TMR_ResetTimer0                                   1     1      0      45
                                              1 BANK0      1     1      0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_TMR_Timer0                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (14) _RF_CheckCode                                        9     9      0    4748
                                             32 BANK0      9     9      0
                  i2_FSH_Write_IR_RF
                           i2___ftge
                          i2___ftmul
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (15) i2___lwtoft                                          3     0      3     565
                                              8 BANK0      3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (15) i2___ftmul                                          15     9      6     921
                                             11 BANK0     15     9      6
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (16) i2___ftpack                                          8     3      5     387
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (15) i2___ftge                                            9     3      6     240
                                             11 BANK0      9     3      6
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (15) i2_FSH_Write_IR_RF                                  15    15      0    2680
                                             17 BANK0     15    15      0
               i2_FSH_AddressToBlock
                   i2_FSH_EraseBlock
          i2_FSH_VerifyWriteIntArray
                i2_FSH_WriteIntArray
                     i2_IR_ResetData
           i2_MSC_BufferCopyIntConst
                     i2_RF_ResetData
 ---------------------------------------------------------------------------------
 (14) i2_RF_ResetData                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i2_MSC_BufferCopyIntConst                           11     2      9     578
                                              6 BANK0     11     2      9
               i2_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (17) i2_MSC_CleanBufferInt                                6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (16) i2_IR_ResetData                                      0     0      0      44
                        i2_RF_Enable
 ---------------------------------------------------------------------------------
 (17) i2_RF_Enable                                         0     0      0      44
                       i2_RF_DataInt
                    i2_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (18) i2_TMR_Timer0Int                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (18) i2_RF_DataInt                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (16) i2_FSH_WriteIntArray                                 9     6      3     531
                                              4 BANK0      9     6      3
               i2_FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (16) i2_FSH_VerifyWriteIntArray                          11     6      5     550
                                              0 BANK0     11     6      5
 ---------------------------------------------------------------------------------
 (16) i2_FSH_EraseBlock                                   11     7      4     285
                                              4 BANK0      7     3      4
               i2_FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (17) i2_FSH_AddressToBlock                                4     0      4     167
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Start
   _IR_LoadCode
     _IR_CalculateCodesize
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lwtoft
       ___ftpack
   _Init_App
   _Init_System
     _BUT_ReadButton
     _IR_ReadReceiver
     _InitADC
       _ADC_ChangeChannel
       _ADC_ConversionInt
       _ADC_Module
     _InitButton
       _BUT_IR_PinChangeInt
       _BUT_ReadButton
     _InitFlash
     _InitIR
       _MSC_CleanBufferInt
     _InitLDO
       _LDO_Pass
     _InitMOTOR
     _InitRF
       _MSC_CleanBufferInt
       _RF_DataInt
       _RF_Receiver
       _RF_SetBandwidth
       _RF_SetSquelch
     _InitTimers
       _InitTimer0
         _TMR_ResetTimer0
           _TMR_Timer0
         _TMR_Timer0
         _TMR_Timer0Int
       _InitTimer1
         _TMR_ResetTimer1
           _TMR_Timer1
         _TMR_Timer1
         _TMR_Timer1Function
           _TMR_ResetTimer1
             _TMR_Timer1
           _TMR_Timer1
           _TMR_Timer1Osc
         _TMR_Timer1Int
       _InitTimer2
         _TMR_Timer2
         _TMR_Timer2Int
   _MSC_BlinkLED
     _MSC_DelayMS
       _MSC_DelayNOP
   _MSC_DelayMS
     _MSC_DelayNOP
   _MTR_Rotate
     _MSC_DelayMS
       _MSC_DelayNOP
     _MTR_IN1
     _MTR_IN2
   _RF_LoadCode
     _RF_CalculateCodesize
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lwtoft
       ___ftpack
   _SYS_ActivityTimer
     _SYS_ActivityTimerReset
     _SYS_Sleep
   _SYS_ConfigureOscillator
   ___ftge

 _low_isr (ROOT)
   _ADC_CalculateVoltage
     ___ftdiv
       i1___ftpack
       i1___lwtoft (ARG)
         i1___ftpack
     i1_ADC_ChangeChannel
     i1___ftmul
       ___ftdiv (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftpack (ARG)
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack
   _IR_CheckCode
     _FSH_Write_IR_RF
       _FSH_AddressToBlock
       _FSH_EraseBlock
         _FSH_AddressToBlock
       _FSH_VerifyWriteIntArray
       _FSH_WriteIntArray
         _FSH_AddressToBlock
       _IR_ResetData
         _RF_Enable
           i1_RF_DataInt
           i1_TMR_Timer0Int
       _MSC_BufferCopyIntConst
         i1_MSC_CleanBufferInt
       _RF_ResetData
     i1___ftge
       i1___lwtoft (ARG)
         i1___ftpack
     i1___ftmul
       ___ftdiv (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftpack (ARG)
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack
   _IR_CleanBuffer
     i1_MSC_CleanBufferInt
   _IR_ResetData
     _RF_Enable
       i1_RF_DataInt
       i1_TMR_Timer0Int
   _RF_Disable
     i1_RF_DataInt
     i1_TMR_Timer0
     i1_TMR_Timer0Int
   _TMR_Timer1Start
     i1_TMR_ResetTimer1
       i1_TMR_Timer1
     i1_TMR_Timer1
   _TMR_Timer1Status
   _TMR_Timer2Start
     _TMR_ResetTimer2
       i1_TMR_Timer2
     i1_TMR_Timer2
   i1_BUT_ReadButton
   i1_IR_ReadReceiver
   i1_SYS_ActivityTimerReset
   i1_TMR_ResetTimer1
     i1_TMR_Timer1
   i1_TMR_Timer1
   i1_TMR_Timer2

 _high_isr (ROOT)
   _RF_CheckCode
     i2_FSH_Write_IR_RF
       i2_FSH_AddressToBlock
       i2_FSH_EraseBlock
         i2_FSH_AddressToBlock
       i2_FSH_VerifyWriteIntArray
       i2_FSH_WriteIntArray
         i2_FSH_AddressToBlock
       i2_IR_ResetData
         i2_RF_Enable
           i2_RF_DataInt
           i2_TMR_Timer0Int
       i2_MSC_BufferCopyIntConst
         i2_MSC_CleanBufferInt
       i2_RF_ResetData
     i2___ftge
       i2___lwtoft (ARG)
         i2___ftpack
     i2___ftmul
       i2___ftpack
       i2___lwtoft (ARG)
         i2___ftpack
     i2___lwtoft
       i2___ftpack
   _TMR_Timer0Start
     i2_TMR_ResetTimer0
       i2_TMR_Timer0
     i2_TMR_Timer0
   _TMR_Timer0Status
   i2_RF_ResetData
   i2_SYS_ActivityTimerReset
   i2_TMR_ResetTimer0
     i2_TMR_Timer0
   i2_TMR_Timer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3FF      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0     100      10      100.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0     100       8      100.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     20      A0       6       62.5%
BITBANK0            80      0       0       3        0.0%
BANK0               80     39      50       4       62.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     47      5F       1       75.4%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     34F      11        0.0%
DATA                 0      0     34F      13        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sat Aug 29 09:16:50 2015

            MSC_BufferCopyIntConst@i 0010              __end_of_IR_ReadReceiver 13A4  
           MSC_BufferCopyIntConst@to 000A            __size_ofi2_FSH_EraseBlock 006C  
                         _RF_SyncLow 00BD                   TMR_Timer0Int@state 0180  
                         i1___ftpack 0B26                          _RF_SyncHigh 00BB  
                                 l70 3926            i2MSC_CleanBufferInt@count 0082  
                                 bsr 000FE0                           i1___lwtoft 165C  
                 __size_of_ADC_Start 0004                  i2_FSH_WriteIntArray 074A  
                 TMR_Timer1Int@state 0180           ??i1_SYS_ActivityTimerReset 0001  
                         i2___ftpack 0292                         __CFG_CP0$OFF 000000  
                         _TMR_Timer0 183A                           _TMR_Timer1 180E  
                         _TMR_Timer2 17E2                                  l317 3FF2  
                                l520 139A                                  l380 174E  
                                l518 1384                                  l571 179C  
                                l596 14D4                                  l972 188E  
                                l981 134E                           i2___lwtoft 159A  
                                l983 1364                                  _PR2 000FCB  
                       i1___ftge@ff1 000C                         i1___ftge@ff2 000F  
                __size_of_ADC_Module 0016                   TMR_Timer2Int@state 0180  
              ??i1_ADC_ChangeChannel 0001                                  prod 000FF3  
                                wreg 000FE8                         i1___ftmul@f1 001B  
                       i1___ftmul@f2 001E                      IR_CheckCode@Low 002C  
                 TMR_Timer1Osc@state 0180     __size_of_FSH_VerifyWriteIntArray 005C  
       FSH_VerifyWriteIntArray@Array 0004                       ?_RF_SetSquelch 0001  
                       ___ftdiv@cntr 0015                         ___ftdiv@sign 001A  
                               l1034 184C                                 l1044 17F4  
                               l1039 1820                                 l1064 1836  
                               l1074 17DE                                 l1069 180A  
                               l1079 16FA                                 l1264 18A4  
                               l1516 3FBC                                 l1276 18BA  
              ?i2_MSC_CleanBufferInt 0080                                 l7310 145E  
                               l7314 1468                                 l7326 1358  
                               l7342 1878                                 l7352 1322  
                               l7602 120A                                 l7450 3F20  
                               l7370 10CE                                 l7362 1862  
                               l7460 3FAE                                 l7452 3F50  
                               l7444 3EFE                                 l7612 3B1E  
                               l7436 162A                                 l7356 1332  
                               l7348 1314                                 l7366 10A6  
                               l7382 14DC                                 l7472 3FE2  
                               l7456 3F70                                 l7448 3F12  
                               l7632 3BA6                                 l7560 1196  
                               l7466 3FC6                                 l7458 3FA0  
                               l7642 3BE4                                 l7618 3B58  
                               l7482 0FA8                                 l7570 11C6  
                               l7636 3BC4                                 l7660 3DDA  
                               l7804 1160                                 l7812 0F42  
                               l7556 118C                                 l7646 3C02  
                               l7478 0F8C                                 l7566 11C0  
                               l7592 11DA                                 l7496 138E  
                               l7584 17B2                                 l7912 38C8  
                               l7690 3EAC                                 l7682 3E80  
                               l7578 17C8                                 l7826 14BA  
                               l7834 0856                                 l7930 3940  
                               l7588 11D0                                 l7692 3EB6  
                               l7844 08DA                                 l7916 38E2  
                               l7908 3878                                 l7598 1204  
                               l7678 3E6C                                 l7838 0896  
                               l7918 38E8                                 l7862 3798  
                               l7696 3ED2                                 l7688 3E9C  
                               l7874 37D8                                 l7890 3846  
                               l7884 3822                                 l7876 37F0  
                               l7798 1144                                 l7886 383A  
                               l7878 37F6                                 l7896 385E  
                               l7888 3840                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
           FSH_VerifyWriteIntArray@i 000B                                 u8701 3DB6  
                               u8720 3E00                                 u8641 3AFA  
                               u8810 14B0                                 u8661 3B34  
                               u8725 3DF6                                 u8990 3956  
                               _TMR2 000FCC                     ?_RF_SetBandwidth 0001  
               ?i2_FSH_WriteIntArray 0084          ADC_CalculateVoltage@Voltage 002C  
             __size_of_TMR_Timer0Int 0016               __size_of_TMR_Timer1Int 0016  
             __size_of_TMR_Timer2Int 0016               __size_of_TMR_Timer1Osc 001E  
        __size_of_FSH_AddressToBlock 0030                    ??i1_TMR_Timer0Int 0001  
                    __end_of_MTR_IN1 17CC                      __end_of_MTR_IN2 17B6  
  __size_ofi2_SYS_ActivityTimerReset 0012                                 _main 376A  
          ?i2_SYS_ActivityTimerReset 0001               _SYS_ActivityTimerReset 1950  
                       ___ftpack@arg 0180                         ___ftpack@exp 0183  
                       i1___lwtoft@c 0009                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 fsr1l 000FE1  
                               fsr2l 000FD9                                 btemp 0060  
                               pclat 000FFA                         i2___ftge@ff1 008B  
                       i2___ftge@ff2 008E                                 prodh 000FF4  
                               prodl 000FF3                                 start 028E  
                      __CFG_IESO$OFF 000000                        __CFG_FOSC2$ON 000000  
               i2_FSH_AddressToBlock 12C4                     IR_CheckCode@High 002F  
                       ___ftmul@cntr 0198                i1MSC_CleanBufferInt@i 0005  
                       i2___ftmul@f1 008B                         i2___ftmul@f2 008E  
                       ___param_bank 000000           __size_of_SYS_ActivityTimer 002A  
                       ___ftmul@sign 0199                      __end_of_InitADC 15EC  
                    __end_of_InitLDO 1A5E                        i1___ftmul@exp 0024  
                              EECON1 000FA6                                EECON2 000FA7  
       __end_of_ADC_CalculateVoltage 0A6A                         ___fttol@exp1 018E  
                      ??_Init_System 0186                      _FSH_Write_IR_RF 3100  
                       ___fttol@lval 018A              __size_of_IR_CleanBuffer 0016  
        __size_of_TMR_Timer1Function 0030                                INTCON 000FF2  
            i1___ftmul@f3_as_product 0025                                ?_main 0001  
                   __end_of_LDO_Pass 17A0                      __end_of___ftdiv 074A  
                       i2___lwtoft@c 0088                      __end_of___ftmul 3C42  
                    __end_of___fttol 3EE4                                i1l210 01BE  
                              i1l202 01C2                           _FlashWaste 2600  
                              i1l211 01BC                                i1l212 0108  
                              i1l214 0160                                i1l233 0212  
                              i1l226 0206                                i1l235 0244  
                              i1l239 0246                                i1l520 13CE  
                              i1l380 1936                                i1l518 13B8  
                              i1l562 30F6                                i2l182 3A90  
                              i2l185 39B8                                i2l443 3760  
                              i2l187 3A32                                i2l380 1782  
                              i2l197 3AA6                                i2l199 3AA8  
                              i1l981 13EC                                i1l983 1402  
                              _TMR0H 000FD7                                _TMR1H 000FCF  
                              _TMR0L 000FD6                                _TMR1L 000FCE  
                              _PORTB 000F81              i2FSH_Write_IR_RF@lowint 0098  
                     i2_IR_ResetData 1A30              i2FSH_Write_IR_RF@status 009C  
                BUT_ReadButton@value 0180                       __CFG_FCMEN$OFF 000000  
                              _errno 0057                        ___ftpack@sign 0184  
                 RF_SetSquelch@state 0180                   __size_of_RF_Enable 0014  
                        ?_RF_DataInt 0001                ??i2_FSH_WriteIntArray 0087  
                   __end_ofi1___ftge 0DA4                      __end_of_low_isr 028E  
                              tablat 000FF5                     __end_ofi2___ftge 09A6  
                  __end_of_ADC_Start 1A76                          ?_RF_Disable 0001  
                              plusw2 000FDB                                status 000FD8  
                 __size_ofi1___ftmul 00F4                          ?_MTR_Rotate 0001  
       i2MSC_BufferCopyIntConst@from 0086                FSH_EraseBlock@Address 0005  
           ??_MSC_BufferCopyIntConst 0010                       i1___ftpack@arg 0001  
                 __size_ofi2___ftmul 015E                       i1___ftpack@exp 0004  
              ?i2_FSH_AddressToBlock 0080                           _InitButton 19F8  
                    __initialization 0DA4                           _InitTimer0 16A4  
                         _InitTimer1 1702                           _InitTimer2 16C6  
                         _InitTimers 19EA                         __end_of_main 3966  
                   ?_IR_ReadReceiver 0001                        i2___ftmul@exp 0094  
                   _ButtonValue_prev 00BF         __end_ofi1_MSC_CleanBufferInt 124C  
                        ?i1___ftpack 0001                       i1___ftmul@cntr 0028  
                     i1___ftmul@sign 0029                     __end_of_Init_App 12C4  
                      _TMR_Timer0Int 1824                        _TMR_Timer1Int 17F8  
                        ?i1___lwtoft 0009                        _TMR_Timer2Int 17CC  
                      _TMR_Timer1Osc 16E4                          ?i2___ftpack 0080  
                 __size_of_SYS_Sleep 0006                          ?_TMR_Timer0 0001  
                        ?_TMR_Timer1 0001                          ?_TMR_Timer2 0001  
                       ?_MSC_DelayMS 0184                               ??_main 01A0  
             __end_ofi2_IR_ResetData 1A3E                        ___fttol@sign1 0189  
                        ?i2___lwtoft 0088                        __activetblptr 000002  
                       ?i2_RF_Enable 0001                    _ADC_ConversionInt 18A8  
                TMR_Timer2Start@time 0003                  __end_of_Init_System 143E  
                  i1_TMR_ResetTimer1 1638                      ??_RF_SetSquelch 0180  
                    _ADC_SampleCount 00B9                   ?_ADC_ConversionInt 0001  
              FSH_EraseBlock@highint 0009              __size_of_FSH_EraseBlock 005A  
           __size_ofi2_TMR_Timer0Int 0016               ??i2_MSC_CleanBufferInt 0084  
                          ??_MTR_IN1 0180                            ??_MTR_IN2 0180  
                 ?i1_TMR_ResetTimer1 0001                          _FlashBuffer 0100  
                             _ADRESH 000FC4                               _ADRESL 000FC3  
           i2FSH_Write_IR_RF@highint 0097                     __end_of___ftpack 3FF0  
                     RF_LoadCode@Low 019A             __size_of_TMR_ResetTimer0 002A  
           __size_of_TMR_ResetTimer1 002A             __size_of_TMR_ResetTimer2 0028  
                   _TMR_Timer0Status 1A4A                   __size_of_InitMOTOR 0004  
                             i1l1034 19D6                               i1l1044 19B6  
                             i1l1221 33BE                               i1l1223 3440  
                             i1l1039 19C6                               i1l1064 19E6  
                   _TMR_Timer1Status 1A3E                               i1l1171 0D02  
                             i1l1182 349E                               i1l1516 0BB4  
                             i1l1284 0A58                               i1l1574 0718  
                             i2l1034 18E6                               i1l6010 06F2  
                             i2l1221 2BDE                               i2l1223 2CA2  
                             i2l1064 18FC                               i2l1171 0804  
                             i1l5156 148E                               i1l5172 123E  
                             i2l1182 2D14                               i1l5342 104A  
                             i1l5168 1220                               i1l5272 0BF8  
                             i1l7112 01B6                               i1l5354 1080  
                             i1l5370 0C9A                               i1l7130 0202  
                             i1l7122 01E4                               i1l7050 00A8  
                             i2l1516 036A                               i1l5284 0C20  
                             i1l5292 0C5A                               i1l7108 01AC  
                             i1l7060 00DC                               i1l6414 03EE  
                             i1l5382 0FE6                               i1l5366 0C92  
                             i1l7126 01FA                               i1l7054 00BA  
                             i1l5560 0B36                               i1l6432 0430  
                             i1l6408 03C6                               i1l5392 1032  
                             i1l7144 0234                               i1l7064 00EC  
                             i1l6362 1696                               i1l6442 0458  
                             i1l5378 0FDE                               i1l6370 0D44  
                             i1l7066 00F2                               i1l5572 0B82  
                             i1l5564 0B44                               i1l6428 0420  
                             i1l5388 102E                               i1l5900 3458  
                             i1l5820 32C2                               i1l5804 3282  
                             i1l6380 0DA0                               i1l5574 0BA0  
                             i1l5566 0B4E                               i1l6438 0448  
                             i1l5910 3488                               i1l5806 3286  
                             i1l5750 3156                               i1l6374 0D74  
                             i1l7086 0144                       __CFG_WDTEN$OFF 000000  
                             i1l5576 0BAA                               i1l5568 0B6C  
                             i1l5832 32FA                               i1l5760 31BA  
                             i1l5744 3134                               i1l6720 1A46  
                             i1l5914 348C                               i1l5922 349A  
                             i1l5834 32FE                               i1l5818 32BE  
                             i1l5860 3372                               i1l5764 31D2  
                             i1l5756 318E                               i1l5748 3148  
                             i1l6822 0A64                               i1l5918 3496  
                             i1l5862 3376                               i1l5846 3336  
                             i1l5790 3246                               i1l6806 30FC  
                             i1l6750 3000                               i1l6734 2D56  
                             i2l6200 298A                               i1l5880 33BA  
                             i1l5848 333A                               i1l5792 324A  
                             i1l5776 320A                               i1l6744 2EEC  
                             i2l6202 2990                               i1l5874 33AE  
                             i1l5778 320E                               i1l6754 3004  
                             i1l6738 2E0E                               i2l5180 1122  
                             i2l6300 2BCE                               i1l5876 33B2  
                             i1l6780 3076                               i1l6756 3006  
                             i1l6764 3012                               i2l5502 0EBE  
                             i2l6230 2A34                               i2l6214 29DC  
                             i2l7022 3A8A                               i1l5990 06B4  
                             i2l5176 10FA                               i2l6304 2BD8  
                             i2l6216 29E2                               i2l5600 02C0  
                             i1l5984 068C                               i1l6792 30C0  
                             i1l6784 30AA                               i1l6776 3040  
                             i1l6768 301E                               i2l5186 12EE  
                             i2l5514 0EFA                               i2l5530 077A  
                             i2l6242 2A80                               i2l5610 034E  
                             i2l5602 02CE                               i2l7018 3A80  
                             i1l6786 30AC                               i1l6858 13C2  
                             i2l5460 0A90                               i2l6324 2CBC  
                             i2l6244 2A86                               i2l6228 2A2E  
                             i2l6180 28E8                               i2l6172 2894  
                             i2l5612 035C                               i2l5604 02FE  
                             i1l6788 30B8                               i1l6876 13F6  
                             i2l5542 0E40                               i2l5526 0770  
                             i2l6334 2CF6                               i2l6342 2D08  
                             i2l6270 2B24                               i2l6174 28A2  
                             i1l6798 30DC                               i2l5552 0EA2  
                             i2l5472 0AC0                               i2l5480 0B00  
                             i2l6272 2B2A                               i2l6256 2AD2  
                             i2l6184 2922                               i2l6168 2880  
                             i2l5624 0390                               i2l5608 031E  
                             i2l5538 0E36                               i2l6338 2CFA  
                             i2l6346 2D0E                               i2l6258 2AD8  
                             i2l5618 0374                               i2l5548 0E9C  
                             i2l6284 2B76                               i2l6188 293E  
                             i2l6286 2B7C                               i2l6462 3CB6  
                             i2l6392 095E                               i2l6480 3D22  
                             i2l6456 3C7C                               i2l6298 2BC8  
                             i2l6490 3D60                               i2l6706 3766  
                             i2l6650 34E4                               i2l6388 091E  
                             i2l5596 02AC                               i2l6476 3D04  
                             i2l6660 36BC                               i2l6398 09A2  
                             i2l6486 3D42                               i2l6654 3590  
                             i2l6638 1A52                               _TABLAT 000FF5  
                             i2l6664 36C0                               i2l6666 36C4  
                             i2l6674 36D4                               i2l6692 3726  
                             i2l6684 3708                               i2l6678 36E4  
                             i2l6686 370C                               i2l6688 371C  
                             i2l6698 3746                               i2l6980 39A8  
                             i2l6998 3A0C                     __end_of___lwtoft 1570  
                             u700_21 03D6                               u704_41 3C58  
                             _OSCCON 000FD3                               u706_41 3C92  
                 __size_of_InitFlash 0004                               u637_21 0674  
                             u639_21 069C                  ??_ADC_ConversionInt 0180  
                       ??_ADC_Module 0180                         _System_State 00CF  
                             u698_21 03AE                  ??i1_TMR_ResetTimer1 0002  
             i2FSH_EraseBlock@lowint 0089                            ??_InitADC 0181  
                          ??_InitLDO 0181                         ?_IR_LoadCode 0001  
            __end_of_FSH_Write_IR_RF 34AE             __size_of_TMR_Timer0Start 0012  
           __size_of_TMR_Timer1Start 0012                               _InitIR 171E  
                             _InitRF 124C             __size_of_TMR_Timer2Start 001A  
                     i2_RF_ResetData 1A22         __end_of_IR_CalculateCodesize 120E  
       __end_of_RF_CalculateCodesize 11CA           MSC_BufferCopyIntConst@from 0007  
                     __CFG_XINST$OFF 000000                           _Timer2Post 0053  
                    low_isr@IR_state 0044                     __end_of_high_isr 3AE4  
                  ?i1_BUT_ReadButton 0001                               ___ftge 0816  
             i1IR_ReadReceiver@value 0001                     i2_FSH_EraseBlock 0EA6  
            __size_of_BUT_ReadButton 0036                       __CFG_STVREN$ON 000000  
                          ??___ftdiv 0012                            ??___ftmul 0191  
                          ??___fttol 0184         __size_of_BUT_IR_PinChangeInt 0016  
                     ?_TMR_Timer0Int 0001                       ?_TMR_Timer1Int 0001  
                     ?_TMR_Timer2Int 0001             i2MSC_CleanBufferInt@data 0080  
                     ?_TMR_Timer1Osc 0001                   ??i1_BUT_ReadButton 0001  
                  __end_of_RF_Enable 1928                               clear_0 0DAC  
                             clear_1 0DC0                               clear_2 0DD2  
                             clear_3 0DDE                               clear_4 0DEA  
                __size_of_RF_DataInt 001A            __end_of_ADC_ConversionInt 18BE  
                    ?i2_IR_ResetData 0001                  __size_of_RF_Disable 0014  
          __end_ofi1_TMR_ResetTimer1 165C                ___ftmul@f3_as_product 0195  
                  __end_ofi1___ftmul 0492                         __pdataCOMRAM 005F  
 __size_ofi2_FSH_VerifyWriteIntArray 0076                   __end_of_ADC_Module 18A8  
                __size_of_MTR_Rotate 0066                    __end_ofi2___ftmul 3DA0  
         ?i2_FSH_VerifyWriteIntArray 0080              _FSH_VerifyWriteIntArray 0FDA  
                       __mediumconst 2800                            ??_low_isr 0033  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                         ?_RF_LoadCode 0001  
               _ADC_CalculateVoltage 09A6                  __size_ofi1___ftpack 00AE  
                  i2_TMR_ResetTimer0 1570              __p_IR_SavedTiming_const 2400  
                    __CFG_FOSC$HSPLL 000000              __p_RF_SavedTiming_const 2500  
                   __end_ofexp@coeff 2828                     __end_oflog@coeff 2843  
                    TMR_Timer0@state 0180                      TMR_Timer1@state 0180  
        i2FSH_Write_IR_RF@WriteTries 009F                           __accesstop 0080  
            __end_of__initialization 0E22                  __size_ofi1___lwtoft 0024  
                    TMR_Timer2@state 0180                    __end_of_SYS_Sleep 1A6A  
                       ?_RF_Receiver 0001                  __size_ofi2___ftpack 010C  
             __end_ofi2_RF_ResetData 1A30                   ?i2_TMR_ResetTimer0 0001  
                         ___ftge@ff1 0180                           ___ftge@ff2 0183  
                __size_of_TMR_Timer0 0016                  __size_of_TMR_Timer1 0016  
                __size_of_TMR_Timer2 0016                      i1___ftpack@sign 0005  
             ??i2_FSH_AddressToBlock 0084                        ___rparam_used 000000  
                         ___ftdiv@f1 000C                           ___ftdiv@f2 000F  
                         ___ftdiv@f3 0016                            ?_LDO_Pass 0001  
                __size_ofi2___lwtoft 002A             FSH_EraseBlock@WriteTries 000B  
                     i2___ftpack@arg 0080      __size_of_MSC_BufferCopyIntConst 00A8  
                     i2___ftpack@exp 0083                    i1RF_DataInt@state 0001  
                     high_isr@RFtemp 00B7                          ?_InitButton 0001  
                         ___ftmul@f1 018B                           ___ftmul@f2 018E  
                         ___fttol@f1 0180                       __pcstackCOMRAM 0001  
                        ?_InitTimer0 0001                          ?_InitTimer1 0001  
                        ?_InitTimer2 0001                          ?_InitTimers 0001  
                ??i2_TMR_ResetTimer0 0081                         __pidataBANK0 1A5E  
                     _IR_CleanBuffer 18BE                 IR_ReadReceiver@value 0180  
                     i2___ftmul@cntr 0098                       i2___ftmul@sign 0099  
                      ?i1_RF_DataInt 0001              _FlashWaste_absconstaddr 002600  
                        _Init_System 140C                    __end_of_InitMOTOR 1A6E  
                        _Button_Data 00C0                            ?i1___ftge 000C  
                  __end_of_InitFlash 1A72                           ___lwtoft@c 0188  
         __end_of_MSC_CleanBufferInt 10E4                            ?i2___ftge 008B  
           ?_SYS_ConfigureOscillator 0001     __end_ofi2_SYS_ActivityTimerReset 1998  
                    i1_TMR_Timer0Int 19DA    __end_ofi2_FSH_VerifyWriteIntArray 0EA6  
                   RF_Receiver@state 0180                 i2FSH_WriteIntArray@i 008C  
                      ?_MSC_DelayNOP 0180            __end_ofi2_TMR_ResetTimer0 159A  
                      ?_MSC_BlinkLED 018D              ?_SYS_ActivityTimerReset 0001  
              ?_ADC_CalculateVoltage 0001                 i1_MSC_CleanBufferInt 120E  
                      ?i2_RF_DataInt 0001                           __pbssBANK0 00B9  
                         __pbssBANK1 0100                           __pbssBANK2 0200  
                         __pbssBANK3 0300                    _FSH_WriteIntArray 0C7C  
                          ?_Init_App 0001                     RF_CheckCode@High 00A5  
                      ?i1_TMR_Timer0 0001                        ?i1_TMR_Timer1 0001  
                      ?i1_TMR_Timer2 0001              i2FSH_EraseBlock@Address 0084  
                  ??i2_TMR_Timer0Int 0080             i1TMR_ResetTimer1@TimerOn 0002  
                    ?i2_RF_ResetData 0001                   ?_FSH_WriteIntArray 0005  
                         ??_LDO_Pass 0180                    ??_TMR_ResetTimer0 0181  
                  ??_TMR_ResetTimer1 0181                    ??_TMR_ResetTimer2 0002  
                   ?_FSH_Write_IR_RF 0001                              ?_InitIR 0001  
                            ?_InitRF 0001       i2FSH_VerifyWriteIntArray@Array 0083  
             __end_of_IR_CleanBuffer 18D4                      ??_TMR_Timer0Int 0180  
                    ??_TMR_Timer1Int 0180                      ??_TMR_Timer2Int 0180  
                    ??_TMR_Timer1Osc 0180                              ?___ftge 0180  
                ??_FSH_WriteIntArray 0008                       ??i1_RF_DataInt 0001  
                      ?_IR_CheckCode 0001          __end_ofi1_ADC_ChangeChannel 16A4  
                  ??_TMR_Timer0Start 0082                    ??_TMR_Timer1Start 0003  
                  ??_TMR_Timer2Start 0005                    i2RF_DataInt@state 0080  
                          ?___ftpack 0180                           ??i1___ftge 0012  
                    RF_LoadCode@High 019D                        ?i2_TMR_Timer0 0001  
         __size_of_ADC_ConversionInt 0016            ??_FSH_VerifyWriteIntArray 0006  
                         ??i2___ftge 0091                            ?___lwtoft 0188  
         __size_ofi1_TMR_ResetTimer1 0024    __size_ofi2_MSC_BufferCopyIntConst 00BC  
          ?i2_MSC_BufferCopyIntConst 0086               _MSC_BufferCopyIntConst 0BD4  
                       _Flash_Status 00C2                 __size_of_MSC_DelayMS 0062  
                      MSC_DelayMS@US 0184              i2FSH_EraseBlock@highint 0088  
                      MSC_DelayNOP@i 0182                       IR_LoadCode@Low 019A  
                            _TBLPTRH 000FF7                              _TBLPTRL 000FF6  
                            _TBLPTRU 000FF8                 _IR_CalculateCodesize 11CA  
                     _FSH_EraseBlock 1036            i2MSC_BufferCopyIntConst@i 008F  
               _RF_CalculateCodesize 1186                 __size_ofi2_RF_Enable 0014  
                     ??_MSC_DelayNOP 0182       __end_of_SYS_ActivityTimerReset 1962  
                            _IR_Data 00C4                  __size_of_InitButton 000E  
                     ??_MSC_BlinkLED 0191                              _MTR_IN1 17B6  
                            _MTR_IN2 17A0                              _RF_Data 00C7  
                __size_of_InitTimer0 0022                  __size_of_InitTimer1 001C  
                __size_of_InitTimer2 001E                        MSC_BlinkLED@i 0193  
         __end_of_FSH_AddressToBlock 149E            __end_of_FSH_WriteIntArray 0D14  
                __size_of_InitTimers 000E                       ??i2_RF_DataInt 0080  
                          ?_high_isr 0001                ?i1_MSC_CleanBufferInt 0001  
                       ??_RF_DataInt 0180    __size_ofi1_SYS_ActivityTimerReset 0012  
                     ??i1_TMR_Timer0 0001                       ??i1_TMR_Timer1 0001  
                     ??i1_TMR_Timer2 0001                    _ADC_CurrentSource 005F  
                       ??_RF_Disable 0002            ?i1_SYS_ActivityTimerReset 0001  
                         ??_Init_App 0180                      _Timer2PostCount 0055  
                    ADC_Module@state 0180                              _InitADC 15C4  
                       ??_MTR_Rotate 018D                              _InitLDO 1A56  
        MSC_BufferCopyIntConst@count 000C                            _ADC_Start 1A72  
                            __Hparam 0000          MSC_BufferCopyIntConst@shift 000E  
                    __size_of_InitIR 001C                      __size_of_InitRF 003C  
                            __Lparam 0000                      ?_IR_CleanBuffer 0001  
           __size_of_RF_SetBandwidth 0038           __end_of_TMR_Timer1Function 146E  
              i2MSC_CleanBufferInt@i 0084                 __size_of_IR_LoadCode 00E8  
                     _BUT_ReadButton 1338                       ??_IR_CheckCode 002A  
                    __size_of___ftge 00C8                         ??i1___ftpack 0006  
               i2TMR_Timer0Int@state 0080                              ___ftdiv 0664  
                            ___ftmul 3AE4                              ___fttol 3DA0  
            __end_ofi1_TMR_Timer0Int 19EA      __end_of_SYS_ConfigureOscillator 3FF8  
                       ??i1___lwtoft 000C             __end_of_TMR_Timer0Status 1A56  
           __end_of_TMR_Timer1Status 1A4A                              __pcinit 0DA4  
                     ??i2_TMR_Timer0 0080                         ??i2___ftpack 0085  
                         ??___ftpack 0185                        ?_IR_ResetData 0001  
            i2___ftmul@f3_as_product 0095                              __ramtop 0400  
                       ??_TMR_Timer0 0180                         ??_TMR_Timer1 0180  
                       ??_TMR_Timer2 0180                              __ptext0 376A  
                            __ptext1 0816                              __ptext2 3FF0  
                            __ptext3 149E                              __ptext4 1A64  
                            __ptext5 1950                              __ptext6 0492  
                            __ptext7 1186                              __ptext8 0F12  
                            __ptext9 17A0                   __end_of_RF_DataInt 1754  
                       ??i2___lwtoft 008B                           ??___lwtoft 018B  
                          _T0CONbits 000FD5                            _T1CONbits 000FCD  
                 __end_of_RF_Disable 1914                            _T2CONbits 000FCA  
             __end_of_FSH_EraseBlock 1090          __end_ofi2_FSH_WriteIntArray 0816  
              ?_IR_CalculateCodesize 0001                ?_RF_CalculateCodesize 0001  
                 __end_of_MTR_Rotate 0F78                              _low_isr 0018  
             ??_ADC_CalculateVoltage 002A             BUT_IR_PinChangeInt@state 0180  
         __size_ofi2_TMR_ResetTimer0 002A             __end_ofi2_FSH_EraseBlock 0F12  
        _IR_SavedTiming_absconstaddr 002400             i2_SYS_ActivityTimerReset 1986  
                         ??_high_isr 00A9                       __pintcode_body 3966  
                _BUT_IR_PinChangeInt 187C                        ?_RF_CheckCode 0001  
               end_of_initialization 0E22                   __end_ofi1___ftpack 0BD4  
                      __Lmediumconst 2800                 __size_of_RF_LoadCode 00EA  
                            int_func 3966                   __end_ofi1___lwtoft 1680  
                 __end_ofi2___ftpack 039E                   __end_of_TMR_Timer0 1850  
                 __end_of_TMR_Timer1 1824                   __end_of_TMR_Timer2 17F8  
                         ?_ADC_Start 0001               __end_of_BUT_ReadButton 136E  
               __size_of_RF_Receiver 0016                   __end_ofi2___lwtoft 15C4  
                   FSH_Write_IR_RF@i 001E                     FSH_Write_IR_RF@j 001C  
             FSH_WriteIntArray@Array 0005                              postdec1 000FE5  
                            postdec2 000FDD                     ??i2_IR_ResetData 0081  
                            postinc0 000FEE                              postinc2 000FDE  
             TMR_Timer1Function@mode 0182                 ?_BUT_IR_PinChangeInt 0001  
                  i1_IR_ReadReceiver 13A4                       ??_IR_ResetData 0002  
                __p_FlashWaste_const 2600            FSH_AddressToBlock@Address 0001  
                 ?i1_IR_ReadReceiver 0001                            _IRStarted 005B  
           __size_of_IR_ReadReceiver 0036                            _RF_Enable 1914  
                    ?_FSH_EraseBlock 0005                            _TRISAbits 000F92  
        ??i2_FSH_VerifyWriteIntArray 0085                            _TRISBbits 000F93  
                          _TRISCbits 000F94            __size_ofi1_BUT_ReadButton 0034  
                ??i1_IR_ReadReceiver 0001                            _RFStarted 00C5  
             ??i1_MSC_CleanBufferInt 0005                            i1___ftmul 039E  
              __end_of_RF_SetSquelch 1866                       ??_RF_CheckCode 00A0  
         __size_of_FSH_WriteIntArray 0098                        IR_CheckCode@i 0032  
                          i2___ftmul 3C42                 __end_ofi1_RF_DataInt 193C  
      __size_ofi2_MSC_CleanBufferInt 0054                        ?_RF_ResetData 0001  
                        ___ftdiv@exp 0019                      i2___ftpack@sign 0084  
                    ?_BUT_ReadButton 0001                       _IR_SavedTiming 2400  
                       ??_InitButton 0181                   __end_of_FlashWaste 2800  
                          _SYS_Sleep 1A64                          ___ftmul@exp 0194  
                       ??_InitTimer0 0182                         ??_InitTimer1 0183  
                       ??_InitTimer2 0181                       __end_of_InitIR 173A  
                     __end_of_InitRF 1288                    __size_of_LDO_Pass 0018  
                       ??_InitTimers 0183            __end_ofi1_IR_ReadReceiver 13D8  
        _RF_SavedTiming_absconstaddr 002500                 __end_of_MSC_DelayNOP 14F2  
              ??_BUT_IR_PinChangeInt 0180             i1MSC_CleanBufferInt@data 0001  
               __end_of_MSC_BlinkLED 1186                       __end_of___ftge 08DE  
                       ?_Init_System 0001                 __end_ofi2_RF_DataInt 1788  
                   ?i1_TMR_Timer0Int 0001                        __pidataCOMRAM 1A76  
                  ??_RF_SetBandwidth 0180                 __end_ofi1_TMR_Timer0 19DA  
               __end_ofi1_TMR_Timer1 19CA                 __end_ofi1_TMR_Timer2 19BA  
                      low_isr@IRtemp 0046        ADC_CalculateVoltage@ADCcounts 002A  
                         ?_RF_Enable 0001               ??_IR_CalculateCodesize 0180  
             ??_RF_CalculateCodesize 0180                            _InitMOTOR 1A6A  
                       _ButtonChange 0059                    __size_ofi1___ftge 0090  
              i1BUT_ReadButton@value 0001                  start_initialization 0DA4  
                  __size_ofi2___ftge 00C8                    _ADC_ChangeChannel 1614  
                          _InitFlash 1A6E               ADC_ConversionInt@state 0180  
                    i2_TMR_Timer0Int 18EA                           ?i1___ftmul 001B  
                          _Rail_RSSI 004C                      _TMR_ResetTimer0 151C  
                    _TMR_ResetTimer1 14F2                      _TMR_ResetTimer2 15EC  
                 ?_ADC_ChangeChannel 0001                   __end_of_InitButton 1A06  
                   ??i2_RF_ResetData 0080                 __end_of_IR_CheckCode 3100  
                         ?i2___ftmul 008B                   __end_of_InitTimer0 16C6  
                 __end_of_InitTimer1 171E                   __end_of_InitTimer2 16E4  
                 __end_of_InitTimers 19F8                   _MSC_CleanBufferInt 1090  
                     ??_RF_ResetData 0001                 __end_ofi2_TMR_Timer0 18EA  
   __size_of_SYS_ConfigureOscillator 0008                  ??_ADC_ChangeChannel 0180  
             __end_of_IR_SavedTiming 2500                      _TMR_Timer0Start 1998  
                    _TMR_Timer1Start 1974                      _TMR_Timer2Start 1754  
               FSH_EraseBlock@lowint 000A                    __size_of_Init_App 003C  
                        ??_ADC_Start 0180                             ??_InitIR 0186  
                           ??_InitRF 0186                  ?_MSC_CleanBufferInt 0180  
          i2_FSH_VerifyWriteIntArray 0E30                           ?_SYS_Sleep 0001  
      __size_ofi2_FSH_AddressToBlock 003C                            _Timer2Use 005E  
   __end_ofi2_MSC_BufferCopyIntConst 0B26               TMR_ResetTimer0@TimerOn 0181  
                MSC_CleanBufferInt@i 0184                             ??___ftge 0186  
             TMR_ResetTimer1@TimerOn 0181                IR_CalculateCodesize@i 0180  
             TMR_ResetTimer2@TimerOn 0002                          __pdataBANK0 00CA  
              RF_CalculateCodesize@i 0180              ?_MSC_BufferCopyIntConst 0007  
   __end_ofi1_SYS_ActivityTimerReset 1974            __end_of_ADC_ChangeChannel 1638  
                  __size_of___ftpack 010C                           ?_InitMOTOR 0001  
                      _IR_DataTiming 0200                 ??_MSC_CleanBufferInt 0184  
                        __pbssCOMRAM 0048                           ?_InitFlash 0001  
                  __size_of___lwtoft 002A                        __pcstackBANK0 0080  
                      __pcstackBANK1 0180                             ?_MTR_IN1 0001  
                           ?_MTR_IN2 0001                    ??_IR_ReadReceiver 0180  
                __CFG_CCP2MX$DEFAULT 000000              MSC_CleanBufferInt@count 0182  
               __end_of_IR_ResetData 1A22                    __size_of_high_isr 3ADC  
                   ??_IR_CleanBuffer 0007                             ?_InitADC 0001  
                           ?_InitLDO 0001                      RF_CheckCode@Low 00A2  
                 _FSH_AddressToBlock 146E                  _System_State_Change 00C9  
         __size_ofi1_IR_ReadReceiver 0034                            __pintcode 0008  
          i1MSC_CleanBufferInt@count 0003                        __pmediumconst 2800  
                    RF_DataInt@state 0180                            __ptext100 08DE  
                          __ptext101 2844                            __ptext110 0E30  
                          __ptext102 1A22                            __ptext111 0EA6  
                          __ptext103 0A6A                            __ptext112 12C4  
                          __ptext104 10E4                            __ptext105 1A30  
                          __ptext106 193C                            __ptext107 18EA  
                          __ptext108 176E                            __ptext109 074A  
                           ?___ftdiv 000C                             ?___ftmul 018B  
                           ?___fttol 0180       __end_of_MSC_BufferCopyIntConst 0C7C  
              __end_of_TMR_Timer0Int 183A                __end_of_TMR_Timer1Int 180E  
              __end_of_TMR_Timer2Int 17E2                 __end_of_RF_CheckCode 376A  
              __end_of_TMR_Timer1Osc 1702                          __pintcodelo 0018  
           __size_of_FSH_Write_IR_RF 03AE                         MSC_DelayMS@i 0189  
            __end_ofi2_TMR_Timer0Int 1900                    ?_TMR_Timer0Status 0001  
                ?_FSH_AddressToBlock 0001                    ?_TMR_Timer1Status 0001  
                      ??_MSC_DelayMS 0188           ??i2_SYS_ActivityTimerReset 0080  
            __end_of_TMR_ResetTimer0 1546              __end_of_TMR_ResetTimer1 151C  
            __end_of_TMR_ResetTimer2 1614                        ??i2_RF_Enable 0081  
                 ??_TMR_Timer0Status 0080                          ??_RF_Enable 0002  
                 ??_TMR_Timer1Status 0001                   _TMR_Timer1Function 143E  
       __size_ofi1_ADC_ChangeChannel 0024                __size_ofi1_RF_DataInt 0014  
                           ?_low_isr 0001                     i1_BUT_ReadButton 13D8  
                        ??i1___ftmul 0021                  __end_of_PCB_Version 280A  
            __end_of_TMR_Timer0Start 19AA              __end_of_TMR_Timer1Start 1986  
            __end_of_TMR_Timer2Start 176E                          ??i2___ftmul 0091  
                  ?i2_FSH_EraseBlock 0084                  ?_TMR_Timer1Function 0001  
               ??_FSH_AddressToBlock 0005                             _DC_Motor 00C1  
                 ??i2_FSH_EraseBlock 0088                  RF_SetBandwidth@band 0180  
                      ??_IR_LoadCode 019A                __size_of_MSC_DelayNOP 002A  
                      LDO_Pass@state 0180                             _IPR1bits 000F9F  
                           _PIE1bits 000F9D                             _LDO_Pass 1788  
                    IR_LoadCode@High 019D                __size_of_MSC_BlinkLED 004E  
                           i1u621_25 33CE                             i1u519_20 147E  
                           i1u623_20 3440                          ??_SYS_Sleep 0180  
              __size_ofi2_RF_DataInt 001A                             i1u547_20 102A  
                           _PIR1bits 000F9E                             i2u522_40 12DC  
                           _IRChange 005A                             i2u574_40 0E98  
                           i2u681_45 2BF4                             i2u683_40 2CA2  
                           _RCONbits 000FD0           i2MSC_BufferCopyIntConst@to 0089  
                   __CFG_WDTPS$32768 000000                __size_ofi1_TMR_Timer0 0010  
              __size_ofi1_TMR_Timer1 0010                __size_ofi1_TMR_Timer2 0010  
               i1TMR_Timer0Int@state 0001             ?_FSH_VerifyWriteIntArray 0001  
               ??_TMR_Timer1Function 0182                             _IR_Saved 00CD  
                   ??_FSH_EraseBlock 0009                         i1_RF_DataInt 1928  
           i2_MSC_BufferCopyIntConst 0A6A                             _RF_Saved 00CE  
               __end_of_RF_ResetData 1A14                    i2_FSH_Write_IR_RF 2844  
                           i1___ftge 0D14                           _ADCON0bits 000FC2  
                         _ADCON1bits 000FC1                           _ADCON2bits 000FC0  
                           i2___ftge 08DE                 __size_of_Init_System 0032  
         __size_of_ADC_ChangeChannel 0024                   ?i2_FSH_Write_IR_RF 0001  
                        ??_InitMOTOR 0180                __size_of_IR_CheckCode 03D2  
                        ??_InitFlash 0180                  __end_of_MSC_DelayMS 0FDA  
           i1_SYS_ActivityTimerReset 1962                __size_ofi2_TMR_Timer0 0016  
                       _MSC_DelayNOP 14C8                          _INTCON2bits 000FF1  
                      ??_RF_LoadCode 019A                  __end_ofi2_RF_Enable 1950  
                        _INTCON3bits 000FF0                  ??i2_FSH_Write_IR_RF 0091  
                          copy_data0 0E04                     __size_of_MTR_IN1 0016  
                   __size_of_MTR_IN2 0016                         _MSC_BlinkLED 1138  
         i2FSH_VerifyWriteIntArray@i 008A        __size_of_ADC_CalculateVoltage 00C4  
                       i2_RF_DataInt 176E              _SYS_ConfigureOscillator 3FF0  
                   ??_BUT_ReadButton 0180         __size_ofi2_FSH_WriteIntArray 00CC  
                           _Init_App 1288                        ??_RF_Receiver 0180  
                           _Rail_VIN 00CA       FSH_Write_IR_RF@FlashWasteindex 001A  
   i2FSH_Write_IR_RF@FlashWasteindex 0099                           _ADC_Module 1892  
             FSH_Write_IR_RF@highint 0018                         i1_TMR_Timer0 19CA  
                       i1_TMR_Timer1 19BA                         i1_TMR_Timer2 19AA  
          FSH_Write_IR_RF@WriteTries 0020                           _EECON1bits 000FA6  
                           __Hparam0 0000                     __size_of_InitADC 0028  
                   __size_of_InitLDO 0008                      _RF_SetBandwidth 1300  
                           __Lparam0 0000         __end_ofi2_MSC_CleanBufferInt 1138  
                __end_of_IR_LoadCode 0664            __end_ofi2_FSH_Write_IR_RF 2D2E  
                       _IR_CheckCode 2D2E                         _IR_DataPlace 005D  
                   __size_of___ftdiv 00E6                     __size_of___ftmul 015E  
                   __size_of___fttol 0144                   i2FSH_Write_IR_RF@i 009D  
                 i2FSH_Write_IR_RF@j 009B                             ___ftpack 3EE4  
                   ?i2_TMR_Timer0Int 0001             ??_SYS_ActivityTimerReset 0180  
                       i2_TMR_Timer0 18D4                          _PCB_Version 2801  
                           ___lwtoft 1546               MSC_CleanBufferInt@data 0180  
  FSH_VerifyWriteIntArray@ConstArray 0001  i2FSH_VerifyWriteIntArray@ConstArray 0080  
                   ?_TMR_ResetTimer0 0001                     ?_TMR_ResetTimer1 0001  
                   ?_TMR_ResetTimer2 0001                  low_isr@button_state 0045  
                      _RF_DataTiming 0300                    ??_FSH_Write_IR_RF 0012  
              __size_of_IR_ResetData 000E                     __size_of_low_isr 0276  
                           __ptext10 17B6                             __ptext11 1138  
                           __ptext20 17F8                             __ptext12 0F78  
                           __ptext21 143E                             __ptext13 14C8  
                           __ptext30 1850                             __ptext22 16E4  
                           __ptext14 140C                             __ptext31 1300  
                           __ptext23 14F2                             __ptext15 19EA  
                           __ptext40 19F8                             __ptext32 1866  
                           __ptext24 180E                             __ptext16 16C6  
                           __ptext41 1338                             __ptext33 173A  
                           __ptext25 16A4                             __ptext17 17CC  
                           __ptext50 1546                             __ptext42 187C  
                           __ptext34 1A6A                             __ptext26 1824  
                           __ptext18 17E2                             __ptext51 3DA0  
                           __ptext43 15C4                             __ptext35 1A56  
                           __ptext27 151C                             __ptext19 1702  
                           __ptext60 1754                             __ptext52 3AE4  
                           __ptext44 1892                             __ptext36 1788  
                           __ptext28 183A                             __ptext61 15EC  
                           __ptext53 3EE4                             __ptext45 18A8  
                           __ptext37 171E                             __ptext29 124C  
                           __ptext70 2D2E                             __ptext62 19AA  
                           __ptext54 11CA                             __ptext46 1614  
                           __ptext38 1090                             __ptext71 0D14  
                           __ptext63 1A3E                             __ptext55 1A72  
                           __ptext47 136E                             __ptext39 1A6E  
                           __ptext80 0C7C                             __ptext72 3100  
                           __ptext64 1974                             __ptext48 1288  
                           __ptext81 0FDA                             __ptext73 1A06  
                           __ptext65 1638                             __ptext57 1962  
                           __ptext49 057C                             __ptext82 1036  
                           __ptext74 0BD4                             __ptext66 19BA  
                           __ptext58 13A4                             __ptext91 1986  
                           __ptext83 146E                             __ptext75 120E  
                           __ptext67 1900                             __ptext59 13D8  
                           __ptext92 1A4A                             __ptext84 09A6  
                           __ptext76 1A14                             __ptext68 19CA  
                           __ptext93 1998                             __ptext85 165C  
                           __ptext77 1914                             __ptext69 18BE  
                           __ptext94 1570                             __ptext86 039E  
                           __ptext78 19DA                             __ptext95 18D4  
                           __ptext87 1680                             __ptext79 1928  
                           __ptext96 34AE                             __ptext88 0664  
                           __ptext97 159A                             __ptext89 0B26  
                           __ptext98 3C42                             __ptext99 0292  
      i2MSC_BufferCopyIntConst@count 008B        i2MSC_BufferCopyIntConst@shift 008D  
                  i1TMR_Timer0@state 0001                     ?_TMR_Timer0Start 0001  
                   ?_TMR_Timer1Start 0001                             _high_isr 0008  
                  i1TMR_Timer1@state 0001                     ?_TMR_Timer2Start 0003  
                  i1TMR_Timer2@state 0001        __size_ofi1_MSC_CleanBufferInt 003E  
                      __size_of_main 01FC          __end_of_BUT_IR_PinChangeInt 1892  
                     _Activity_Timer 0048             i2FSH_WriteIntArray@Array 0084  
                __end_of_RF_LoadCode 057C      __end_of_FSH_VerifyWriteIntArray 1036  
              __size_of_RF_CheckCode 02BC                         MTR_IN1@state 0180  
                __end_of_RF_Receiver 187C                         MTR_IN2@state 0180  
                           int$flags 0060                    _SYS_ActivityTimer 149E  
             __size_of_RF_SetSquelch 0016                   ?_SYS_ActivityTimer 0001  
                       _IR_ResetData 1A14                      _IR_ReadReceiver 136E  
                        _MSC_DelayMS 0F78                             exp@coeff 280A  
                           log@coeff 2828                         _IRValue_prev 00C3  
                        i2_RF_Enable 193C                          _OSCTUNEbits 000F9B  
                         _INTCONbits 000FF2         __end_ofi2_FSH_AddressToBlock 1300  
            __size_ofi2_IR_ResetData 000E                FSH_Write_IR_RF@lowint 0019  
           __size_ofi1_TMR_Timer0Int 0010        __size_of_IR_CalculateCodesize 0044  
                ??_SYS_ActivityTimer 0180        __size_of_RF_CalculateCodesize 0044  
              FSH_Write_IR_RF@status 001D            ??_SYS_ConfigureOscillator 0180  
                   MSC_DelayNOP@NOPs 0180                   FSH_WriteIntArray@i 000D  
                       _RF_CheckCode 34AE                             intlevel1 0000  
                           intlevel2 0000                          _IR_CodeSize 005C  
            __end_of_RF_SetBandwidth 1338                         _RF_DataPlace 00C8  
                      RF_CheckCode@i 00A8                          ?_ADC_Module 0001  
                  i2TMR_Timer0@state 0080                          _IR_LoadCode 057C  
                i1_ADC_ChangeChannel 1680                           _OSCCONbits 000FD3  
           __end_ofi1_BUT_ReadButton 140C            __end_of_SYS_ActivityTimer 14C8  
                     _RF_SavedTiming 2500                __size_of_RF_ResetData 000E  
         __size_ofi2_FSH_Write_IR_RF 04EA          i2FSH_AddressToBlock@Address 0080  
    __size_of_SYS_ActivityTimerReset 0012                          _IR_SyncHigh 004F  
               ?i1_ADC_ChangeChannel 0001                          _RF_CodeSize 00C6  
        __size_of_MSC_CleanBufferInt 0054                        _RF_SetSquelch 1850  
                        _RF_LoadCode 0492                           _RF_DataInt 173A  
               i2_MSC_CleanBufferInt 10E4            __size_of_TMR_Timer0Status 000C  
          __size_of_TMR_Timer1Status 000C                           _IR_SyncLow 0051  
                  MSC_BlinkLED@blink 018D                           _RF_Disable 1900  
                  MSC_BlinkLED@speed 018F                         _RF_ResetData 1A06  
                        _RF_Receiver 1866             i2TMR_ResetTimer0@TimerOn 0081  
                         _MTR_Rotate 0F12           i2FSH_EraseBlock@WriteTries 008A  
         ??i2_MSC_BufferCopyIntConst 008F               __end_of_RF_SavedTiming 2600  
            __size_ofi2_RF_ResetData 000E  
