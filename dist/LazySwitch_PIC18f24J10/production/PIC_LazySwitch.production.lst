

Microchip Technology PIC18 LITE Macro Assembler V1.35 build -356382666 
                                                                                               Sun Aug 30 09:33:33 2015

Microchip Technology Omniscient Code Generator v1.35 (Free mode) build 201507080246
     1                           	processor	18F24J10
     2                           	fnconf	param0,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	_FlashWaste_const,global,ovrld,reloc=2,class=CODE,delta=1
     9                           	psect	_IR_SavedTiming_const,global,ovrld,reloc=2,class=CODE,delta=1
    10                           	psect	_RF_SavedTiming_const,global,ovrld,reloc=2,class=CODE,delta=1
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    18                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    22                           	psect	text0,global,reloc=2,class=CODE,delta=1
    23                           	psect	text1,global,reloc=2,class=CODE,delta=1
    24                           	psect	text2,global,reloc=2,class=CODE,delta=1
    25                           	psect	text3,global,reloc=2,class=CODE,delta=1
    26                           	psect	text4,global,reloc=2,class=CODE,delta=1
    27                           	psect	text5,global,reloc=2,class=CODE,delta=1
    28                           	psect	text6,global,reloc=2,class=CODE,delta=1
    29                           	psect	text7,global,reloc=2,class=CODE,delta=1
    30                           	psect	text8,global,reloc=2,class=CODE,delta=1
    31                           	psect	text9,global,reloc=2,class=CODE,delta=1
    32                           	psect	text10,global,reloc=2,class=CODE,delta=1
    33                           	psect	text11,global,reloc=2,class=CODE,delta=1
    34                           	psect	text12,global,reloc=2,class=CODE,delta=1
    35                           	psect	text13,global,reloc=2,class=CODE,delta=1
    36                           	psect	text14,global,reloc=2,class=CODE,delta=1
    37                           	psect	text15,global,reloc=2,class=CODE,delta=1
    38                           	psect	text16,global,reloc=2,class=CODE,delta=1
    39                           	psect	text17,global,reloc=2,class=CODE,delta=1
    40                           	psect	text18,global,reloc=2,class=CODE,delta=1
    41                           	psect	text19,global,reloc=2,class=CODE,delta=1
    42                           	psect	text20,global,reloc=2,class=CODE,delta=1
    43                           	psect	text21,global,reloc=2,class=CODE,delta=1
    44                           	psect	text22,global,reloc=2,class=CODE,delta=1
    45                           	psect	text23,global,reloc=2,class=CODE,delta=1
    46                           	psect	text24,global,reloc=2,class=CODE,delta=1
    47                           	psect	text25,global,reloc=2,class=CODE,delta=1
    48                           	psect	text26,global,reloc=2,class=CODE,delta=1
    49                           	psect	text27,global,reloc=2,class=CODE,delta=1
    50                           	psect	text28,global,reloc=2,class=CODE,delta=1
    51                           	psect	text29,global,reloc=2,class=CODE,delta=1
    52                           	psect	text30,global,reloc=2,class=CODE,delta=1
    53                           	psect	text31,global,reloc=2,class=CODE,delta=1
    54                           	psect	text32,global,reloc=2,class=CODE,delta=1
    55                           	psect	text33,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	text45,global,reloc=2,class=CODE,delta=1
    68                           	psect	text46,global,reloc=2,class=CODE,delta=1
    69                           	psect	text47,global,reloc=2,class=CODE,delta=1
    70                           	psect	text48,global,reloc=2,class=CODE,delta=1
    71                           	psect	text49,global,reloc=2,class=CODE,delta=1
    72                           	psect	text50,global,reloc=2,class=CODE,delta=1
    73                           	psect	text51,global,reloc=2,class=CODE,delta=1
    74                           	psect	text52,global,reloc=2,class=CODE,delta=1
    75                           	psect	text53,global,reloc=2,class=CODE,delta=1
    76                           	psect	text54,global,reloc=2,class=CODE,delta=1
    77                           	psect	text55,global,reloc=2,class=CODE,delta=1
    78                           	psect	text56,global,reloc=2,class=CODE,delta=1
    79                           	psect	text57,global,reloc=2,class=CODE,delta=1
    80                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    81                           	psect	text59,global,reloc=2,class=CODE,delta=1
    82                           	psect	text60,global,reloc=2,class=CODE,delta=1
    83                           	psect	text61,global,reloc=2,class=CODE,delta=1
    84                           	psect	text62,global,reloc=2,class=CODE,delta=1
    85                           	psect	text63,global,reloc=2,class=CODE,delta=1
    86                           	psect	text64,global,reloc=2,class=CODE,delta=1
    87                           	psect	text65,global,reloc=2,class=CODE,delta=1
    88                           	psect	text66,global,reloc=2,class=CODE,delta=1
    89                           	psect	text67,global,reloc=2,class=CODE,delta=1
    90                           	psect	text68,global,reloc=2,class=CODE,delta=1
    91                           	psect	text69,global,reloc=2,class=CODE,delta=1
    92                           	psect	text70,global,reloc=2,class=CODE,delta=1
    93                           	psect	text71,global,reloc=2,class=CODE,delta=1
    94                           	psect	text72,global,reloc=2,class=CODE,delta=1
    95                           	psect	text73,global,reloc=2,class=CODE,delta=1
    96                           	psect	text74,global,reloc=2,class=CODE,delta=1
    97                           	psect	text75,global,reloc=2,class=CODE,delta=1
    98                           	psect	text76,global,reloc=2,class=CODE,delta=1
    99                           	psect	text77,global,reloc=2,class=CODE,delta=1
   100                           	psect	text78,global,reloc=2,class=CODE,delta=1
   101                           	psect	text79,global,reloc=2,class=CODE,delta=1
   102                           	psect	text80,global,reloc=2,class=CODE,delta=1
   103                           	psect	text81,global,reloc=2,class=CODE,delta=1
   104                           	psect	text82,global,reloc=2,class=CODE,delta=1
   105                           	psect	text83,global,reloc=2,class=CODE,delta=1
   106                           	psect	text84,global,reloc=2,class=CODE,delta=1
   107                           	psect	text85,global,reloc=2,class=CODE,delta=1
   108                           	psect	text86,global,reloc=2,class=CODE,delta=1
   109                           	psect	text87,global,reloc=2,class=CODE,delta=1
   110                           	psect	text88,global,reloc=2,class=CODE,delta=1
   111                           	psect	text89,global,reloc=2,class=CODE,delta=1
   112                           	psect	text90,global,reloc=2,class=CODE,delta=1
   113                           	psect	text91,global,reloc=2,class=CODE,delta=1
   114                           	psect	text92,global,reloc=2,class=CODE,delta=1
   115                           	psect	text93,global,reloc=2,class=CODE,delta=1
   116                           	psect	text94,global,reloc=2,class=CODE,delta=1
   117                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   118                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   145                           	psect	param0,global,class=BANK0,space=1,delta=1
   146                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   147  0000                     
   148                           	psect	idataCOMRAM
   149  003FF6                     __pidataCOMRAM:
   150                           	opt stack 0
   151                           
   152                           ;initializer for _ADC_CurrentSource
   153  003FF6  0A                 	db	10
   154                           
   155                           	psect	idataBANK0
   156  001F94                     __pidataBANK0:
   157                           	opt stack 0
   158                           
   159                           ;initializer for _Rail_VIN
   160  001F94  00                 	db	0
   161  001F95  90                 	db	144
   162  001F96  40                 	db	64
   163                           
   164                           ;initializer for _IR_Saved
   165  001F97  5B                 	db	91
   166                           
   167                           ;initializer for _RF_Saved
   168  001F98  5B                 	db	91
   169                           
   170                           ;initializer for _System_State
   171  001F99  08                 	db	8
   172                           
   173                           	psect	mediumconst
   174  002800                     __pmediumconst:
   175                           	opt stack 0
   176  002800  00                 	db	0
   177  002801                     _PCB_Version:
   178                           	opt stack 0
   179  002801  50                 	db	80
   180  002802  43                 	db	67
   181  002803  42                 	db	66
   182  002804  20                 	db	32
   183  002805  72                 	db	114
   184  002806  65                 	db	101
   185  002807  76                 	db	118
   186  002808  42                 	db	66
   187  002809  00                 	db	0
   188  00280A                     __end_of_PCB_Version:
   189                           	opt stack 0
   190  0000                     _FlashWaste_absconstaddr	set	9728
   191  0000                     _IR_SavedTiming_absconstaddr	set	9216
   192  0000                     _RF_SavedTiming_absconstaddr	set	9472
   193  00280A  00                 	db	0
   194  00280B  80                 	db	128
   195  00280C  3F                 	db	63
   196  00280D  72                 	db	114
   197  00280E  31                 	db	49
   198  00280F  3F                 	db	63
   199  002810  FE                 	db	254
   200  002811  75                 	db	117
   201  002812  3E                 	db	62
   202  002813  58                 	db	88
   203  002814  63                 	db	99
   204  002815  3D                 	db	61
   205  002816  95                 	db	149
   206  002817  1D                 	db	29
   207  002818  3C                 	db	60
   208  002819  C5                 	db	197
   209  00281A  AE                 	db	174
   210  00281B  3A                 	db	58
   211  00281C  79                 	db	121
   212  00281D  21                 	db	33
   213  00281E  39                 	db	57
   214  00281F  94                 	db	148
   215  002820  80                 	db	128
   216  002821  37                 	db	55
   217  002822  93                 	db	147
   218  002823  A7                 	db	167
   219  002824  35                 	db	53
   220  002825  56                 	db	86
   221  002826  15                 	db	21
   222  002827  34                 	db	52
   223  002828                     __end_ofexp@coeff:
   224                           	opt stack 0
   225  002828  00                 	db	0
   226  002829  00                 	db	0
   227  00282A  00                 	db	0
   228  00282B  00                 	db	0
   229  00282C  80                 	db	128
   230  00282D  3F                 	db	63
   231  00282E  F0                 	db	240
   232  00282F  FF                 	db	255
   233  002830  BE                 	db	190
   234  002831  E2                 	db	226
   235  002832  A9                 	db	169
   236  002833  3E                 	db	62
   237  002834  83                 	db	131
   238  002835  76                 	db	118
   239  002836  BE                 	db	190
   240  002837  AE                 	db	174
   241  002838  2B                 	db	43
   242  002839  3E                 	db	62
   243  00283A  3C                 	db	60
   244  00283B  C3                 	db	195
   245  00283C  BD                 	db	189
   246  00283D  D2                 	db	210
   247  00283E  13                 	db	19
   248  00283F  3D                 	db	61
   249  002840  78                 	db	120
   250  002841  D3                 	db	211
   251  002842  BB                 	db	187
   252  002843                     __end_oflog@coeff:
   253                           	opt stack 0
   254  0000                     _FlashWaste_absconstaddr	set	9728
   255  002843  00                 	db	0	; dummy byte at the end
   256  0000                     
   257                           	psect	_FlashWaste_const
   258  002600                     __p_FlashWaste_const:
   259                           	opt stack 0
   260  002600                     _FlashWaste:
   261                           	opt stack 0
   262  002600  DA                 	db	218
   263  002601  DA                 	db	218
   264  002602  DA                 	db	218
   265  002603  DA                 	db	218
   266  002604  DA                 	db	218
   267  002605  DA                 	db	218
   268  002606  DA                 	db	218
   269  002607  DA                 	db	218
   270  002608  DA                 	db	218
   271  002609  DA                 	db	218
   272  00260A  DA                 	db	218
   273  00260B  DA                 	db	218
   274  00260C  DA                 	db	218
   275  00260D  DA                 	db	218
   276  00260E  DA                 	db	218
   277  00260F  DA                 	db	218
   278  002610  DA                 	db	218
   279  002611  DA                 	db	218
   280  002612  DA                 	db	218
   281  002613  DA                 	db	218
   282  002614  DA                 	db	218
   283  002615  DA                 	db	218
   284  002616  DA                 	db	218
   285  002617  DA                 	db	218
   286  002618  DA                 	db	218
   287  002619  DA                 	db	218
   288  00261A  DA                 	db	218
   289  00261B  DA                 	db	218
   290  00261C  DA                 	db	218
   291  00261D  DA                 	db	218
   292  00261E  DA                 	db	218
   293  00261F  DA                 	db	218
   294  002620  DA                 	db	218
   295  002621  DA                 	db	218
   296  002622  DA                 	db	218
   297  002623  DA                 	db	218
   298  002624  DA                 	db	218
   299  002625  DA                 	db	218
   300  002626  DA                 	db	218
   301  002627  DA                 	db	218
   302  002628  DA                 	db	218
   303  002629  DA                 	db	218
   304  00262A  DA                 	db	218
   305  00262B  DA                 	db	218
   306  00262C  DA                 	db	218
   307  00262D  DA                 	db	218
   308  00262E  DA                 	db	218
   309  00262F  DA                 	db	218
   310  002630  DA                 	db	218
   311  002631  DA                 	db	218
   312  002632  DA                 	db	218
   313  002633  DA                 	db	218
   314  002634  DA                 	db	218
   315  002635  DA                 	db	218
   316  002636  DA                 	db	218
   317  002637  DA                 	db	218
   318  002638  DA                 	db	218
   319  002639  DA                 	db	218
   320  00263A  DA                 	db	218
   321  00263B  DA                 	db	218
   322  00263C  DA                 	db	218
   323  00263D  DA                 	db	218
   324  00263E  DA                 	db	218
   325  00263F  DA                 	db	218
   326  002640  DA                 	db	218
   327  002641  DA                 	db	218
   328  002642  DA                 	db	218
   329  002643  DA                 	db	218
   330  002644  DA                 	db	218
   331  002645  DA                 	db	218
   332  002646  DA                 	db	218
   333  002647  DA                 	db	218
   334  002648  DA                 	db	218
   335  002649  DA                 	db	218
   336  00264A  DA                 	db	218
   337  00264B  DA                 	db	218
   338  00264C  DA                 	db	218
   339  00264D  DA                 	db	218
   340  00264E  DA                 	db	218
   341  00264F  DA                 	db	218
   342  002650  DA                 	db	218
   343  002651  DA                 	db	218
   344  002652  DA                 	db	218
   345  002653  DA                 	db	218
   346  002654  DA                 	db	218
   347  002655  DA                 	db	218
   348  002656  DA                 	db	218
   349  002657  DA                 	db	218
   350  002658  DA                 	db	218
   351  002659  DA                 	db	218
   352  00265A  DA                 	db	218
   353  00265B  DA                 	db	218
   354  00265C  DA                 	db	218
   355  00265D  DA                 	db	218
   356  00265E  DA                 	db	218
   357  00265F  DA                 	db	218
   358  002660  DA                 	db	218
   359  002661  DA                 	db	218
   360  002662  DA                 	db	218
   361  002663  DA                 	db	218
   362  002664  DA                 	db	218
   363  002665  DA                 	db	218
   364  002666  DA                 	db	218
   365  002667  DA                 	db	218
   366  002668  DA                 	db	218
   367  002669  DA                 	db	218
   368  00266A  DA                 	db	218
   369  00266B  DA                 	db	218
   370  00266C  DA                 	db	218
   371  00266D  DA                 	db	218
   372  00266E  DA                 	db	218
   373  00266F  DA                 	db	218
   374  002670  DA                 	db	218
   375  002671  DA                 	db	218
   376  002672  DA                 	db	218
   377  002673  DA                 	db	218
   378  002674  DA                 	db	218
   379  002675  DA                 	db	218
   380  002676  DA                 	db	218
   381  002677  DA                 	db	218
   382  002678  DA                 	db	218
   383  002679  DA                 	db	218
   384  00267A  DA                 	db	218
   385  00267B  DA                 	db	218
   386  00267C  DA                 	db	218
   387  00267D  DA                 	db	218
   388  00267E  DA                 	db	218
   389  00267F  DA                 	db	218
   390  002680  DA                 	db	218
   391  002681  DA                 	db	218
   392  002682  DA                 	db	218
   393  002683  DA                 	db	218
   394  002684  DA                 	db	218
   395  002685  DA                 	db	218
   396  002686  DA                 	db	218
   397  002687  DA                 	db	218
   398  002688  DA                 	db	218
   399  002689  DA                 	db	218
   400  00268A  DA                 	db	218
   401  00268B  DA                 	db	218
   402  00268C  DA                 	db	218
   403  00268D  DA                 	db	218
   404  00268E  DA                 	db	218
   405  00268F  DA                 	db	218
   406  002690  DA                 	db	218
   407  002691  DA                 	db	218
   408  002692  DA                 	db	218
   409  002693  DA                 	db	218
   410  002694  DA                 	db	218
   411  002695  DA                 	db	218
   412  002696  DA                 	db	218
   413  002697  DA                 	db	218
   414  002698  DA                 	db	218
   415  002699  DA                 	db	218
   416  00269A  DA                 	db	218
   417  00269B  DA                 	db	218
   418  00269C  DA                 	db	218
   419  00269D  DA                 	db	218
   420  00269E  DA                 	db	218
   421  00269F  DA                 	db	218
   422  0026A0  DA                 	db	218
   423  0026A1  DA                 	db	218
   424  0026A2  DA                 	db	218
   425  0026A3  DA                 	db	218
   426  0026A4  DA                 	db	218
   427  0026A5  DA                 	db	218
   428  0026A6  DA                 	db	218
   429  0026A7  DA                 	db	218
   430  0026A8  DA                 	db	218
   431  0026A9  DA                 	db	218
   432  0026AA  DA                 	db	218
   433  0026AB  DA                 	db	218
   434  0026AC  DA                 	db	218
   435  0026AD  DA                 	db	218
   436  0026AE  DA                 	db	218
   437  0026AF  DA                 	db	218
   438  0026B0  DA                 	db	218
   439  0026B1  DA                 	db	218
   440  0026B2  DA                 	db	218
   441  0026B3  DA                 	db	218
   442  0026B4  DA                 	db	218
   443  0026B5  DA                 	db	218
   444  0026B6  DA                 	db	218
   445  0026B7  DA                 	db	218
   446  0026B8  DA                 	db	218
   447  0026B9  DA                 	db	218
   448  0026BA  DA                 	db	218
   449  0026BB  DA                 	db	218
   450  0026BC  DA                 	db	218
   451  0026BD  DA                 	db	218
   452  0026BE  DA                 	db	218
   453  0026BF  DA                 	db	218
   454  0026C0  DA                 	db	218
   455  0026C1  DA                 	db	218
   456  0026C2  DA                 	db	218
   457  0026C3  DA                 	db	218
   458  0026C4  DA                 	db	218
   459  0026C5  DA                 	db	218
   460  0026C6  DA                 	db	218
   461  0026C7  DA                 	db	218
   462  0026C8  DA                 	db	218
   463  0026C9  DA                 	db	218
   464  0026CA  DA                 	db	218
   465  0026CB  DA                 	db	218
   466  0026CC  DA                 	db	218
   467  0026CD  DA                 	db	218
   468  0026CE  DA                 	db	218
   469  0026CF  DA                 	db	218
   470  0026D0  DA                 	db	218
   471  0026D1  DA                 	db	218
   472  0026D2  DA                 	db	218
   473  0026D3  DA                 	db	218
   474  0026D4  DA                 	db	218
   475  0026D5  DA                 	db	218
   476  0026D6  DA                 	db	218
   477  0026D7  DA                 	db	218
   478  0026D8  DA                 	db	218
   479  0026D9  DA                 	db	218
   480  0026DA  DA                 	db	218
   481  0026DB  DA                 	db	218
   482  0026DC  DA                 	db	218
   483  0026DD  DA                 	db	218
   484  0026DE  DA                 	db	218
   485  0026DF  DA                 	db	218
   486  0026E0  DA                 	db	218
   487  0026E1  DA                 	db	218
   488  0026E2  DA                 	db	218
   489  0026E3  DA                 	db	218
   490  0026E4  DA                 	db	218
   491  0026E5  DA                 	db	218
   492  0026E6  DA                 	db	218
   493  0026E7  DA                 	db	218
   494  0026E8  DA                 	db	218
   495  0026E9  DA                 	db	218
   496  0026EA  DA                 	db	218
   497  0026EB  DA                 	db	218
   498  0026EC  DA                 	db	218
   499  0026ED  DA                 	db	218
   500  0026EE  DA                 	db	218
   501  0026EF  DA                 	db	218
   502  0026F0  DA                 	db	218
   503  0026F1  DA                 	db	218
   504  0026F2  DA                 	db	218
   505  0026F3  DA                 	db	218
   506  0026F4  DA                 	db	218
   507  0026F5  DA                 	db	218
   508  0026F6  DA                 	db	218
   509  0026F7  DA                 	db	218
   510  0026F8  DA                 	db	218
   511  0026F9  DA                 	db	218
   512  0026FA  DA                 	db	218
   513  0026FB  DA                 	db	218
   514  0026FC  DA                 	db	218
   515  0026FD  DA                 	db	218
   516  0026FE  DA                 	db	218
   517  0026FF  DA                 	db	218
   518  002700  DA                 	db	218
   519  002701  DA                 	db	218
   520  002702  DA                 	db	218
   521  002703  DA                 	db	218
   522  002704  DA                 	db	218
   523  002705  DA                 	db	218
   524  002706  DA                 	db	218
   525  002707  DA                 	db	218
   526  002708  DA                 	db	218
   527  002709  DA                 	db	218
   528  00270A  DA                 	db	218
   529  00270B  DA                 	db	218
   530  00270C  DA                 	db	218
   531  00270D  DA                 	db	218
   532  00270E  DA                 	db	218
   533  00270F  DA                 	db	218
   534  002710  DA                 	db	218
   535  002711  DA                 	db	218
   536  002712  DA                 	db	218
   537  002713  DA                 	db	218
   538  002714  DA                 	db	218
   539  002715  DA                 	db	218
   540  002716  DA                 	db	218
   541  002717  DA                 	db	218
   542  002718  DA                 	db	218
   543  002719  DA                 	db	218
   544  00271A  DA                 	db	218
   545  00271B  DA                 	db	218
   546  00271C  DA                 	db	218
   547  00271D  DA                 	db	218
   548  00271E  DA                 	db	218
   549  00271F  DA                 	db	218
   550  002720  DA                 	db	218
   551  002721  DA                 	db	218
   552  002722  DA                 	db	218
   553  002723  DA                 	db	218
   554  002724  DA                 	db	218
   555  002725  DA                 	db	218
   556  002726  DA                 	db	218
   557  002727  DA                 	db	218
   558  002728  DA                 	db	218
   559  002729  DA                 	db	218
   560  00272A  DA                 	db	218
   561  00272B  DA                 	db	218
   562  00272C  DA                 	db	218
   563  00272D  DA                 	db	218
   564  00272E  DA                 	db	218
   565  00272F  DA                 	db	218
   566  002730  DA                 	db	218
   567  002731  DA                 	db	218
   568  002732  DA                 	db	218
   569  002733  DA                 	db	218
   570  002734  DA                 	db	218
   571  002735  DA                 	db	218
   572  002736  DA                 	db	218
   573  002737  DA                 	db	218
   574  002738  DA                 	db	218
   575  002739  DA                 	db	218
   576  00273A  DA                 	db	218
   577  00273B  DA                 	db	218
   578  00273C  DA                 	db	218
   579  00273D  DA                 	db	218
   580  00273E  DA                 	db	218
   581  00273F  DA                 	db	218
   582  002740  DA                 	db	218
   583  002741  DA                 	db	218
   584  002742  DA                 	db	218
   585  002743  DA                 	db	218
   586  002744  DA                 	db	218
   587  002745  DA                 	db	218
   588  002746  DA                 	db	218
   589  002747  DA                 	db	218
   590  002748  DA                 	db	218
   591  002749  DA                 	db	218
   592  00274A  DA                 	db	218
   593  00274B  DA                 	db	218
   594  00274C  DA                 	db	218
   595  00274D  DA                 	db	218
   596  00274E  DA                 	db	218
   597  00274F  DA                 	db	218
   598  002750  DA                 	db	218
   599  002751  DA                 	db	218
   600  002752  DA                 	db	218
   601  002753  DA                 	db	218
   602  002754  DA                 	db	218
   603  002755  DA                 	db	218
   604  002756  DA                 	db	218
   605  002757  DA                 	db	218
   606  002758  DA                 	db	218
   607  002759  DA                 	db	218
   608  00275A  DA                 	db	218
   609  00275B  DA                 	db	218
   610  00275C  DA                 	db	218
   611  00275D  DA                 	db	218
   612  00275E  DA                 	db	218
   613  00275F  DA                 	db	218
   614  002760  DA                 	db	218
   615  002761  DA                 	db	218
   616  002762  DA                 	db	218
   617  002763  DA                 	db	218
   618  002764  DA                 	db	218
   619  002765  DA                 	db	218
   620  002766  DA                 	db	218
   621  002767  DA                 	db	218
   622  002768  DA                 	db	218
   623  002769  DA                 	db	218
   624  00276A  DA                 	db	218
   625  00276B  DA                 	db	218
   626  00276C  DA                 	db	218
   627  00276D  DA                 	db	218
   628  00276E  DA                 	db	218
   629  00276F  DA                 	db	218
   630  002770  DA                 	db	218
   631  002771  DA                 	db	218
   632  002772  DA                 	db	218
   633  002773  DA                 	db	218
   634  002774  DA                 	db	218
   635  002775  DA                 	db	218
   636  002776  DA                 	db	218
   637  002777  DA                 	db	218
   638  002778  DA                 	db	218
   639  002779  DA                 	db	218
   640  00277A  DA                 	db	218
   641  00277B  DA                 	db	218
   642  00277C  DA                 	db	218
   643  00277D  DA                 	db	218
   644  00277E  DA                 	db	218
   645  00277F  DA                 	db	218
   646  002780  DA                 	db	218
   647  002781  DA                 	db	218
   648  002782  DA                 	db	218
   649  002783  DA                 	db	218
   650  002784  DA                 	db	218
   651  002785  DA                 	db	218
   652  002786  DA                 	db	218
   653  002787  DA                 	db	218
   654  002788  DA                 	db	218
   655  002789  DA                 	db	218
   656  00278A  DA                 	db	218
   657  00278B  DA                 	db	218
   658  00278C  DA                 	db	218
   659  00278D  DA                 	db	218
   660  00278E  DA                 	db	218
   661  00278F  DA                 	db	218
   662  002790  DA                 	db	218
   663  002791  DA                 	db	218
   664  002792  DA                 	db	218
   665  002793  DA                 	db	218
   666  002794  DA                 	db	218
   667  002795  DA                 	db	218
   668  002796  DA                 	db	218
   669  002797  DA                 	db	218
   670  002798  DA                 	db	218
   671  002799  DA                 	db	218
   672  00279A  DA                 	db	218
   673  00279B  DA                 	db	218
   674  00279C  DA                 	db	218
   675  00279D  DA                 	db	218
   676  00279E  DA                 	db	218
   677  00279F  DA                 	db	218
   678  0027A0  DA                 	db	218
   679  0027A1  DA                 	db	218
   680  0027A2  DA                 	db	218
   681  0027A3  DA                 	db	218
   682  0027A4  DA                 	db	218
   683  0027A5  DA                 	db	218
   684  0027A6  DA                 	db	218
   685  0027A7  DA                 	db	218
   686  0027A8  DA                 	db	218
   687  0027A9  DA                 	db	218
   688  0027AA  DA                 	db	218
   689  0027AB  DA                 	db	218
   690  0027AC  DA                 	db	218
   691  0027AD  DA                 	db	218
   692  0027AE  DA                 	db	218
   693  0027AF  DA                 	db	218
   694  0027B0  DA                 	db	218
   695  0027B1  DA                 	db	218
   696  0027B2  DA                 	db	218
   697  0027B3  DA                 	db	218
   698  0027B4  DA                 	db	218
   699  0027B5  DA                 	db	218
   700  0027B6  DA                 	db	218
   701  0027B7  DA                 	db	218
   702  0027B8  DA                 	db	218
   703  0027B9  DA                 	db	218
   704  0027BA  DA                 	db	218
   705  0027BB  DA                 	db	218
   706  0027BC  DA                 	db	218
   707  0027BD  DA                 	db	218
   708  0027BE  DA                 	db	218
   709  0027BF  DA                 	db	218
   710  0027C0  DA                 	db	218
   711  0027C1  DA                 	db	218
   712  0027C2  DA                 	db	218
   713  0027C3  DA                 	db	218
   714  0027C4  DA                 	db	218
   715  0027C5  DA                 	db	218
   716  0027C6  DA                 	db	218
   717  0027C7  DA                 	db	218
   718  0027C8  DA                 	db	218
   719  0027C9  DA                 	db	218
   720  0027CA  DA                 	db	218
   721  0027CB  DA                 	db	218
   722  0027CC  DA                 	db	218
   723  0027CD  DA                 	db	218
   724  0027CE  DA                 	db	218
   725  0027CF  DA                 	db	218
   726  0027D0  DA                 	db	218
   727  0027D1  DA                 	db	218
   728  0027D2  DA                 	db	218
   729  0027D3  DA                 	db	218
   730  0027D4  DA                 	db	218
   731  0027D5  DA                 	db	218
   732  0027D6  DA                 	db	218
   733  0027D7  DA                 	db	218
   734  0027D8  DA                 	db	218
   735  0027D9  DA                 	db	218
   736  0027DA  DA                 	db	218
   737  0027DB  DA                 	db	218
   738  0027DC  DA                 	db	218
   739  0027DD  DA                 	db	218
   740  0027DE  DA                 	db	218
   741  0027DF  DA                 	db	218
   742  0027E0  DA                 	db	218
   743  0027E1  DA                 	db	218
   744  0027E2  DA                 	db	218
   745  0027E3  DA                 	db	218
   746  0027E4  DA                 	db	218
   747  0027E5  DA                 	db	218
   748  0027E6  DA                 	db	218
   749  0027E7  DA                 	db	218
   750  0027E8  DA                 	db	218
   751  0027E9  DA                 	db	218
   752  0027EA  DA                 	db	218
   753  0027EB  DA                 	db	218
   754  0027EC  DA                 	db	218
   755  0027ED  DA                 	db	218
   756  0027EE  DA                 	db	218
   757  0027EF  DA                 	db	218
   758  0027F0  DA                 	db	218
   759  0027F1  DA                 	db	218
   760  0027F2  DA                 	db	218
   761  0027F3  DA                 	db	218
   762  0027F4  DA                 	db	218
   763  0027F5  DA                 	db	218
   764  0027F6  DA                 	db	218
   765  0027F7  DA                 	db	218
   766  0027F8  DA                 	db	218
   767  0027F9  DA                 	db	218
   768  0027FA  DA                 	db	218
   769  0027FB  DA                 	db	218
   770  0027FC  DA                 	db	218
   771  0027FD  DA                 	db	218
   772  0027FE  DA                 	db	218
   773  0027FF  DA                 	db	218
   774  002800                     __end_of_FlashWaste:
   775                           	opt stack 0
   776  0000                     _IR_SavedTiming_absconstaddr	set	9216
   777                           
   778                           	psect	_IR_SavedTiming_const
   779  002400                     __p_IR_SavedTiming_const:
   780                           	opt stack 0
   781  002400                     _IR_SavedTiming:
   782                           	opt stack 0
   783  002400  2198               	dw	8600
   784  002402  1068               	dw	4200
   785  002404  01C2               	dw	450
   786  002406  04B0               	dw	1200
   787  002408  01C2               	dw	450
   788  00240A  01C2               	dw	450
   789  00240C  01C2               	dw	450
   790  00240E  04B0               	dw	1200
   791  002410  01C2               	dw	450
   792  002412  04B0               	dw	1200
   793  002414  01C2               	dw	450
   794  002416  01C2               	dw	450
   795  002418  01C2               	dw	450
   796  00241A  04B0               	dw	1200
   797  00241C  01C2               	dw	450
   798  00241E  01C2               	dw	450
   799  002420  01C2               	dw	450
   800  002422  04B0               	dw	1200
   801  002424  01C2               	dw	450
   802  002426  01C2               	dw	450
   803  002428  01C2               	dw	450
   804  00242A  04B0               	dw	1200
   805  00242C  01C2               	dw	450
   806  00242E  01C2               	dw	450
   807  002430  01C2               	dw	450
   808  002432  01C2               	dw	450
   809  002434  01C2               	dw	450
   810  002436  04B0               	dw	1200
   811  002438  01C2               	dw	450
   812  00243A  01C2               	dw	450
   813  00243C  01C2               	dw	450
   814  00243E  04B0               	dw	1200
   815  002440  01C2               	dw	450
   816  002442  01C2               	dw	450
   817  002444  01C2               	dw	450
   818  002446  01C2               	dw	450
   819  002448  01C2               	dw	450
   820  00244A  04B0               	dw	1200
   821  00244C  01C2               	dw	450
   822  00244E  01C2               	dw	450
   823  002450  01C2               	dw	450
   824  002452  04B0               	dw	1200
   825  002454  01C2               	dw	450
   826  002456  01C2               	dw	450
   827  002458  01C2               	dw	450
   828  00245A  01C2               	dw	450
   829  00245C  01C2               	dw	450
   830  00245E  01C2               	dw	450
   831  002460  01C2               	dw	450
   832  002462  01C2               	dw	450
   833  002464  01C2               	dw	450
   834  002466  04B0               	dw	1200
   835  002468  01C2               	dw	450
   836  00246A  01C2               	dw	450
   837  00246C  01C2               	dw	450
   838  00246E  04B0               	dw	1200
   839  002470  01C2               	dw	450
   840  002472  01C2               	dw	450
   841  002474  01C2               	dw	450
   842  002476  04B0               	dw	1200
   843  002478  01C2               	dw	450
   844  00247A  04B0               	dw	1200
   845  00247C  01C2               	dw	450
   846  00247E  04B0               	dw	1200
   847  002480  01C2               	dw	450
   848  002482  04B0               	dw	1200
   849  002484  01C2               	dw	450
   850  002486  00                 	db	0
   851  002487  00                 	db	0
   852  002488  00                 	db	0
   853  002489  00                 	db	0
   854  00248A  00                 	db	0
   855  00248B  00                 	db	0
   856  00248C  00                 	db	0
   857  00248D  00                 	db	0
   858  00248E  00                 	db	0
   859  00248F  00                 	db	0
   860  002490  00                 	db	0
   861  002491  00                 	db	0
   862  002492  00                 	db	0
   863  002493  00                 	db	0
   864  002494  00                 	db	0
   865  002495  00                 	db	0
   866  002496  00                 	db	0
   867  002497  00                 	db	0
   868  002498  00                 	db	0
   869  002499  00                 	db	0
   870  00249A  00                 	db	0
   871  00249B  00                 	db	0
   872  00249C  00                 	db	0
   873  00249D  00                 	db	0
   874  00249E  00                 	db	0
   875  00249F  00                 	db	0
   876  0024A0  00                 	db	0
   877  0024A1  00                 	db	0
   878  0024A2  00                 	db	0
   879  0024A3  00                 	db	0
   880  0024A4  00                 	db	0
   881  0024A5  00                 	db	0
   882  0024A6  00                 	db	0
   883  0024A7  00                 	db	0
   884  0024A8  00                 	db	0
   885  0024A9  00                 	db	0
   886  0024AA  00                 	db	0
   887  0024AB  00                 	db	0
   888  0024AC  00                 	db	0
   889  0024AD  00                 	db	0
   890  0024AE  00                 	db	0
   891  0024AF  00                 	db	0
   892  0024B0  00                 	db	0
   893  0024B1  00                 	db	0
   894  0024B2  00                 	db	0
   895  0024B3  00                 	db	0
   896  0024B4  00                 	db	0
   897  0024B5  00                 	db	0
   898  0024B6  00                 	db	0
   899  0024B7  00                 	db	0
   900  0024B8  00                 	db	0
   901  0024B9  00                 	db	0
   902  0024BA  00                 	db	0
   903  0024BB  00                 	db	0
   904  0024BC  00                 	db	0
   905  0024BD  00                 	db	0
   906  0024BE  00                 	db	0
   907  0024BF  00                 	db	0
   908  0024C0  00                 	db	0
   909  0024C1  00                 	db	0
   910  0024C2  00                 	db	0
   911  0024C3  00                 	db	0
   912  0024C4  00                 	db	0
   913  0024C5  00                 	db	0
   914  0024C6  00                 	db	0
   915  0024C7  00                 	db	0
   916  0024C8  00                 	db	0
   917  0024C9  00                 	db	0
   918  0024CA  00                 	db	0
   919  0024CB  00                 	db	0
   920  0024CC  00                 	db	0
   921  0024CD  00                 	db	0
   922  0024CE  00                 	db	0
   923  0024CF  00                 	db	0
   924  0024D0  00                 	db	0
   925  0024D1  00                 	db	0
   926  0024D2  00                 	db	0
   927  0024D3  00                 	db	0
   928  0024D4  00                 	db	0
   929  0024D5  00                 	db	0
   930  0024D6  00                 	db	0
   931  0024D7  00                 	db	0
   932  0024D8  00                 	db	0
   933  0024D9  00                 	db	0
   934  0024DA  00                 	db	0
   935  0024DB  00                 	db	0
   936  0024DC  00                 	db	0
   937  0024DD  00                 	db	0
   938  0024DE  00                 	db	0
   939  0024DF  00                 	db	0
   940  0024E0  00                 	db	0
   941  0024E1  00                 	db	0
   942  0024E2  00                 	db	0
   943  0024E3  00                 	db	0
   944  0024E4  00                 	db	0
   945  0024E5  00                 	db	0
   946  0024E6  00                 	db	0
   947  0024E7  00                 	db	0
   948  0024E8  00                 	db	0
   949  0024E9  00                 	db	0
   950  0024EA  00                 	db	0
   951  0024EB  00                 	db	0
   952  0024EC  00                 	db	0
   953  0024ED  00                 	db	0
   954  0024EE  00                 	db	0
   955  0024EF  00                 	db	0
   956  0024F0  00                 	db	0
   957  0024F1  00                 	db	0
   958  0024F2  00                 	db	0
   959  0024F3  00                 	db	0
   960  0024F4  00                 	db	0
   961  0024F5  00                 	db	0
   962  0024F6  00                 	db	0
   963  0024F7  00                 	db	0
   964  0024F8  00                 	db	0
   965  0024F9  00                 	db	0
   966  0024FA  00                 	db	0
   967  0024FB  00                 	db	0
   968  0024FC  00                 	db	0
   969  0024FD  00                 	db	0
   970  0024FE  00                 	db	0
   971  0024FF  00                 	db	0
   972  002500                     __end_of_IR_SavedTiming:
   973                           	opt stack 0
   974  0000                     _RF_SavedTiming_absconstaddr	set	9472
   975                           
   976                           	psect	_RF_SavedTiming_const
   977  002500                     __p_RF_SavedTiming_const:
   978                           	opt stack 0
   979  002500                     _RF_SavedTiming:
   980                           	opt stack 0
   981  002500  0342               	dw	834
   982  002502  0015               	dw	21
   983  002504  0050               	dw	80
   984  002506  0016               	dw	22
   985  002508  0050               	dw	80
   986  00250A  0015               	dw	21
   987  00250C  004E               	dw	78
   988  00250E  004F               	dw	79
   989  002510  001A               	dw	26
   990  002512  0016               	dw	22
   991  002514  004E               	dw	78
   992  002516  004E               	dw	78
   993  002518  001B               	dw	27
   994  00251A  0015               	dw	21
   995  00251C  004F               	dw	79
   996  00251E  004C               	dw	76
   997  002520  0019               	dw	25
   998  002522  0017               	dw	23
   999  002524  004F               	dw	79
  1000  002526  004B               	dw	75
  1001  002528  001B               	dw	27
  1002  00252A  0015               	dw	21
  1003  00252C  0051               	dw	81
  1004  00252E  004B               	dw	75
  1005  002530  0019               	dw	25
  1006  002532  0016               	dw	22
  1007  002534  0051               	dw	81
  1008  002536  0016               	dw	22
  1009  002538  004F               	dw	79
  1010  00253A  0016               	dw	22
  1011  00253C  0050               	dw	80
  1012  00253E  0018               	dw	24
  1013  002540  004F               	dw	79
  1014  002542  004D               	dw	77
  1015  002544  0019               	dw	25
  1016  002546  004C               	dw	76
  1017  002548  001B               	dw	27
  1018  00254A  0015               	dw	21
  1019  00254C  0050               	dw	80
  1020  00254E  0015               	dw	21
  1021  002550  0051               	dw	81
  1022  002552  0015               	dw	21
  1023  002554  0050               	dw	80
  1024  002556  0016               	dw	22
  1025  002558  0050               	dw	80
  1026  00255A  0016               	dw	22
  1027  00255C  0051               	dw	81
  1028  00255E  0016               	dw	22
  1029  002560  004F               	dw	79
  1030  002562  0016               	dw	22
  1031  002564  00                 	db	0
  1032  002565  00                 	db	0
  1033  002566  00                 	db	0
  1034  002567  00                 	db	0
  1035  002568  00                 	db	0
  1036  002569  00                 	db	0
  1037  00256A  00                 	db	0
  1038  00256B  00                 	db	0
  1039  00256C  00                 	db	0
  1040  00256D  00                 	db	0
  1041  00256E  00                 	db	0
  1042  00256F  00                 	db	0
  1043  002570  00                 	db	0
  1044  002571  00                 	db	0
  1045  002572  00                 	db	0
  1046  002573  00                 	db	0
  1047  002574  00                 	db	0
  1048  002575  00                 	db	0
  1049  002576  00                 	db	0
  1050  002577  00                 	db	0
  1051  002578  00                 	db	0
  1052  002579  00                 	db	0
  1053  00257A  00                 	db	0
  1054  00257B  00                 	db	0
  1055  00257C  00                 	db	0
  1056  00257D  00                 	db	0
  1057  00257E  00                 	db	0
  1058  00257F  00                 	db	0
  1059  002580  00                 	db	0
  1060  002581  00                 	db	0
  1061  002582  00                 	db	0
  1062  002583  00                 	db	0
  1063  002584  00                 	db	0
  1064  002585  00                 	db	0
  1065  002586  00                 	db	0
  1066  002587  00                 	db	0
  1067  002588  00                 	db	0
  1068  002589  00                 	db	0
  1069  00258A  00                 	db	0
  1070  00258B  00                 	db	0
  1071  00258C  00                 	db	0
  1072  00258D  00                 	db	0
  1073  00258E  00                 	db	0
  1074  00258F  00                 	db	0
  1075  002590  00                 	db	0
  1076  002591  00                 	db	0
  1077  002592  00                 	db	0
  1078  002593  00                 	db	0
  1079  002594  00                 	db	0
  1080  002595  00                 	db	0
  1081  002596  00                 	db	0
  1082  002597  00                 	db	0
  1083  002598  00                 	db	0
  1084  002599  00                 	db	0
  1085  00259A  00                 	db	0
  1086  00259B  00                 	db	0
  1087  00259C  00                 	db	0
  1088  00259D  00                 	db	0
  1089  00259E  00                 	db	0
  1090  00259F  00                 	db	0
  1091  0025A0  00                 	db	0
  1092  0025A1  00                 	db	0
  1093  0025A2  00                 	db	0
  1094  0025A3  00                 	db	0
  1095  0025A4  00                 	db	0
  1096  0025A5  00                 	db	0
  1097  0025A6  00                 	db	0
  1098  0025A7  00                 	db	0
  1099  0025A8  00                 	db	0
  1100  0025A9  00                 	db	0
  1101  0025AA  00                 	db	0
  1102  0025AB  00                 	db	0
  1103  0025AC  00                 	db	0
  1104  0025AD  00                 	db	0
  1105  0025AE  00                 	db	0
  1106  0025AF  00                 	db	0
  1107  0025B0  00                 	db	0
  1108  0025B1  00                 	db	0
  1109  0025B2  00                 	db	0
  1110  0025B3  00                 	db	0
  1111  0025B4  00                 	db	0
  1112  0025B5  00                 	db	0
  1113  0025B6  00                 	db	0
  1114  0025B7  00                 	db	0
  1115  0025B8  00                 	db	0
  1116  0025B9  00                 	db	0
  1117  0025BA  00                 	db	0
  1118  0025BB  00                 	db	0
  1119  0025BC  00                 	db	0
  1120  0025BD  00                 	db	0
  1121  0025BE  00                 	db	0
  1122  0025BF  00                 	db	0
  1123  0025C0  00                 	db	0
  1124  0025C1  00                 	db	0
  1125  0025C2  00                 	db	0
  1126  0025C3  00                 	db	0
  1127  0025C4  00                 	db	0
  1128  0025C5  00                 	db	0
  1129  0025C6  00                 	db	0
  1130  0025C7  00                 	db	0
  1131  0025C8  00                 	db	0
  1132  0025C9  00                 	db	0
  1133  0025CA  00                 	db	0
  1134  0025CB  00                 	db	0
  1135  0025CC  00                 	db	0
  1136  0025CD  00                 	db	0
  1137  0025CE  00                 	db	0
  1138  0025CF  00                 	db	0
  1139  0025D0  00                 	db	0
  1140  0025D1  00                 	db	0
  1141  0025D2  00                 	db	0
  1142  0025D3  00                 	db	0
  1143  0025D4  00                 	db	0
  1144  0025D5  00                 	db	0
  1145  0025D6  00                 	db	0
  1146  0025D7  00                 	db	0
  1147  0025D8  00                 	db	0
  1148  0025D9  00                 	db	0
  1149  0025DA  00                 	db	0
  1150  0025DB  00                 	db	0
  1151  0025DC  00                 	db	0
  1152  0025DD  00                 	db	0
  1153  0025DE  00                 	db	0
  1154  0025DF  00                 	db	0
  1155  0025E0  00                 	db	0
  1156  0025E1  00                 	db	0
  1157  0025E2  00                 	db	0
  1158  0025E3  00                 	db	0
  1159  0025E4  00                 	db	0
  1160  0025E5  00                 	db	0
  1161  0025E6  00                 	db	0
  1162  0025E7  00                 	db	0
  1163  0025E8  00                 	db	0
  1164  0025E9  00                 	db	0
  1165  0025EA  00                 	db	0
  1166  0025EB  00                 	db	0
  1167  0025EC  00                 	db	0
  1168  0025ED  00                 	db	0
  1169  0025EE  00                 	db	0
  1170  0025EF  00                 	db	0
  1171  0025F0  00                 	db	0
  1172  0025F1  00                 	db	0
  1173  0025F2  00                 	db	0
  1174  0025F3  00                 	db	0
  1175  0025F4  00                 	db	0
  1176  0025F5  00                 	db	0
  1177  0025F6  00                 	db	0
  1178  0025F7  00                 	db	0
  1179  0025F8  00                 	db	0
  1180  0025F9  00                 	db	0
  1181  0025FA  00                 	db	0
  1182  0025FB  00                 	db	0
  1183  0025FC  00                 	db	0
  1184  0025FD  00                 	db	0
  1185  0025FE  00                 	db	0
  1186  0025FF  00                 	db	0
  1187  002600                     __end_of_RF_SavedTiming:
  1188                           	opt stack 0
  1189  0000                     _ADCON0bits	set	4034
  1190  0000                     _ADCON1bits	set	4033
  1191  0000                     _ADCON2bits	set	4032
  1192  0000                     _ADRESH	set	4036
  1193  0000                     _ADRESL	set	4035
  1194  0000                     _EECON1bits	set	4006
  1195  0000                     _INTCON2bits	set	4081
  1196  0000                     _INTCON3bits	set	4080
  1197  0000                     _INTCONbits	set	4082
  1198  0000                     _IPR1bits	set	3999
  1199  0000                     _LATA	set	3977
  1200  0000                     _LATB	set	3978
  1201  0000                     _LATC	set	3979
  1202  0000                     _OSCCON	set	4051
  1203  0000                     _OSCCONbits	set	4051
  1204  0000                     _OSCTUNEbits	set	3995
  1205  0000                     _PIE1bits	set	3997
  1206  0000                     _PIR1bits	set	3998
  1207  0000                     _PORTB	set	3969
  1208  0000                     _PR2	set	4043
  1209  0000                     _RCONbits	set	4048
  1210  0000                     _T0CONbits	set	4053
  1211  0000                     _T1CONbits	set	4045
  1212  0000                     _T2CONbits	set	4042
  1213  0000                     _TABLAT	set	4085
  1214  0000                     _TBLPTRH	set	4087
  1215  0000                     _TBLPTRL	set	4086
  1216  0000                     _TBLPTRU	set	4088
  1217  0000                     _TMR0H	set	4055
  1218  0000                     _TMR0L	set	4054
  1219  0000                     _TMR1H	set	4047
  1220  0000                     _TMR1L	set	4046
  1221  0000                     _TMR2	set	4044
  1222  0000                     _TRISAbits	set	3986
  1223  0000                     _TRISBbits	set	3987
  1224  0000                     _TRISCbits	set	3988
  1225                           
  1226                           ; #config settings
  1227  0000                     
  1228                           	psect	cinit
  1229  001276                     __pcinit:
  1230                           	opt stack 0
  1231  001276                     start_initialization:
  1232                           	opt stack 0
  1233  001276                     __initialization:
  1234                           	opt stack 0
  1235                           
  1236                           ; Clear objects allocated to BANK3 (256 bytes)
  1237  001276  EE03  F000         	lfsr	0,__pbssBANK3
  1238  00127A  EE11 F000          	lfsr	1,256
  1239  00127E                     clear_0:
  1240  00127E  6AEE               	clrf	postinc0,c
  1241  001280  50E5               	movf	postdec1,w,c
  1242  001282  50E1               	movf	fsr1l,w,c
  1243  001284  E1FC               	bnz	clear_0
  1244  001286  50E2               	movf	fsr1h,w,c
  1245  001288  E1FA               	bnz	clear_0
  1246                           
  1247                           ; Clear objects allocated to BANK2 (256 bytes)
  1248  00128A  EE02  F000         	lfsr	0,__pbssBANK2
  1249  00128E  EE11 F000          	lfsr	1,256
  1250  001292                     clear_1:
  1251  001292  6AEE               	clrf	postinc0,c
  1252  001294  50E5               	movf	postdec1,w,c
  1253  001296  50E1               	movf	fsr1l,w,c
  1254  001298  E1FC               	bnz	clear_1
  1255  00129A  50E2               	movf	fsr1h,w,c
  1256  00129C  E1FA               	bnz	clear_1
  1257                           
  1258                           ; Clear objects allocated to BANK1 (128 bytes)
  1259  00129E  EE01  F000         	lfsr	0,__pbssBANK1
  1260  0012A2  0E80               	movlw	128
  1261  0012A4                     clear_2:
  1262  0012A4  6AEE               	clrf	postinc0,c
  1263  0012A6  06E8               	decf	wreg,f,c
  1264  0012A8  E1FD               	bnz	clear_2
  1265                           
  1266                           ; Clear objects allocated to BANK0 (17 bytes)
  1267  0012AA  EE00  F0B9         	lfsr	0,__pbssBANK0
  1268  0012AE  0E11               	movlw	17
  1269  0012B0                     clear_3:
  1270  0012B0  6AEE               	clrf	postinc0,c
  1271  0012B2  06E8               	decf	wreg,f,c
  1272  0012B4  E1FD               	bnz	clear_3
  1273                           
  1274                           ; Clear objects allocated to COMRAM (23 bytes)
  1275  0012B6  EE00  F04E         	lfsr	0,__pbssCOMRAM
  1276  0012BA  0E17               	movlw	23
  1277  0012BC                     clear_4:
  1278  0012BC  6AEE               	clrf	postinc0,c
  1279  0012BE  06E8               	decf	wreg,f,c
  1280  0012C0  E1FD               	bnz	clear_4
  1281                           
  1282                           ; Initialize objects allocated to BANK0 (6 bytes)
  1283                           ; load TBLPTR registers with __pidataBANK0
  1284  0012C2  0E94               	movlw	low __pidataBANK0
  1285  0012C4  6EF6               	movwf	tblptrl,c
  1286  0012C6  0E1F               	movlw	high __pidataBANK0
  1287  0012C8  6EF7               	movwf	tblptrh,c
  1288  0012CA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1289  0012CC  6EF8               	movwf	tblptru,c
  1290  0012CE  EE00  F0CA         	lfsr	0,__pdataBANK0
  1291  0012D2  EE10 F006          	lfsr	1,6
  1292  0012D6                     copy_data0:
  1293  0012D6  0009               	tblrd		*+
  1294  0012D8  CFF5 FFEE          	movff	tablat,postinc0
  1295  0012DC  50E5               	movf	postdec1,w,c
  1296  0012DE  50E1               	movf	fsr1l,w,c
  1297  0012E0  E1FA               	bnz	copy_data0
  1298                           
  1299                           ; Initialize objects allocated to COMRAM (1 bytes)
  1300                           ; load TBLPTR registers with __pidataCOMRAM
  1301  0012E2  0EF6               	movlw	low __pidataCOMRAM
  1302  0012E4  6EF6               	movwf	tblptrl,c
  1303  0012E6  0E3F               	movlw	high __pidataCOMRAM
  1304  0012E8  6EF7               	movwf	tblptrh,c
  1305  0012EA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1306  0012EC  6EF8               	movwf	tblptru,c
  1307  0012EE  0009               	tblrd		*+	;fetch initializer
  1308  0012F0  CFF5 F065          	movff	tablat,__pdataCOMRAM
  1309  0012F4                     end_of_initialization:
  1310                           	opt stack 0
  1311  0012F4                     __end_of__initialization:
  1312                           	opt stack 0
  1313  0012F4  9066               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1314  0012F6  9266               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1315  0012F8  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1316  0012FA  6EF8               	movwf	tblptru,c
  1317  0012FC  0100               	movlb	0
  1318  0012FE  EF03  F01C         	goto	_main	;jump to C main() function
  1319                           tblptru	equ	0xFF8
  1320                           tblptrh	equ	0xFF7
  1321                           tblptrl	equ	0xFF6
  1322                           tablat	equ	0xFF5
  1323                           postinc0	equ	0xFEE
  1324                           wreg	equ	0xFE8
  1325                           postdec1	equ	0xFE5
  1326                           fsr1h	equ	0xFE2
  1327                           fsr1l	equ	0xFE1
  1328                           
  1329                           	psect	bssCOMRAM
  1330  00004E                     __pbssCOMRAM:
  1331                           	opt stack 0
  1332  00004E                     _Activity_Timer:
  1333                           	opt stack 0
  1334  00004E                     	ds	4
  1335  000052                     _Rail_RSSI:
  1336                           	opt stack 0
  1337  000052                     	ds	3
  1338  000055                     _IR_SyncHigh:
  1339                           	opt stack 0
  1340  000055                     	ds	2
  1341  000057                     _IR_SyncLow:
  1342                           	opt stack 0
  1343  000057                     	ds	2
  1344  000059                     _Timer2Post:
  1345                           	opt stack 0
  1346  000059                     	ds	2
  1347  00005B                     _Timer2PostCount:
  1348                           	opt stack 0
  1349  00005B                     	ds	2
  1350  00005D                     _errno:
  1351                           	opt stack 0
  1352  00005D                     	ds	2
  1353  00005F                     _ButtonChange:
  1354                           	opt stack 0
  1355  00005F                     	ds	1
  1356  000060                     _IRChange:
  1357                           	opt stack 0
  1358  000060                     	ds	1
  1359  000061                     _IRStarted:
  1360                           	opt stack 0
  1361  000061                     	ds	1
  1362  000062                     _IR_CodeSize:
  1363                           	opt stack 0
  1364  000062                     	ds	1
  1365  000063                     _IR_DataPlace:
  1366                           	opt stack 0
  1367  000063                     	ds	1
  1368  000064                     _Timer2Use:
  1369                           	opt stack 0
  1370  000064                     	ds	1
  1371                           tblptru	equ	0xFF8
  1372                           tblptrh	equ	0xFF7
  1373                           tblptrl	equ	0xFF6
  1374                           tablat	equ	0xFF5
  1375                           postinc0	equ	0xFEE
  1376                           wreg	equ	0xFE8
  1377                           postdec1	equ	0xFE5
  1378                           fsr1h	equ	0xFE2
  1379                           fsr1l	equ	0xFE1
  1380                           
  1381                           	psect	dataCOMRAM
  1382  000065                     __pdataCOMRAM:
  1383                           	opt stack 0
  1384  000065                     _ADC_CurrentSource:
  1385                           	opt stack 0
  1386  000065                     	ds	1
  1387                           tblptru	equ	0xFF8
  1388                           tblptrh	equ	0xFF7
  1389                           tblptrl	equ	0xFF6
  1390                           tablat	equ	0xFF5
  1391                           postinc0	equ	0xFEE
  1392                           wreg	equ	0xFE8
  1393                           postdec1	equ	0xFE5
  1394                           fsr1h	equ	0xFE2
  1395                           fsr1l	equ	0xFE1
  1396                           
  1397                           	psect	bssBANK0
  1398  0000B9                     __pbssBANK0:
  1399                           	opt stack 0
  1400  0000B9                     _ADC_SampleCount:
  1401                           	opt stack 0
  1402  0000B9                     	ds	2
  1403  0000BB                     _RF_SyncHigh:
  1404                           	opt stack 0
  1405  0000BB                     	ds	2
  1406  0000BD                     _RF_SyncLow:
  1407                           	opt stack 0
  1408  0000BD                     	ds	2
  1409  0000BF                     _ButtonValue_prev:
  1410                           	opt stack 0
  1411  0000BF                     	ds	1
  1412  0000C0                     _Button_Data:
  1413                           	opt stack 0
  1414  0000C0                     	ds	1
  1415  0000C1                     _DC_Motor:
  1416                           	opt stack 0
  1417  0000C1                     	ds	1
  1418  0000C2                     _Flash_Status:
  1419                           	opt stack 0
  1420  0000C2                     	ds	1
  1421  0000C3                     _IRValue_prev:
  1422                           	opt stack 0
  1423  0000C3                     	ds	1
  1424  0000C4                     _IR_Data:
  1425                           	opt stack 0
  1426  0000C4                     	ds	1
  1427  0000C5                     _RFStarted:
  1428                           	opt stack 0
  1429  0000C5                     	ds	1
  1430  0000C6                     _RF_CodeSize:
  1431                           	opt stack 0
  1432  0000C6                     	ds	1
  1433  0000C7                     _RF_Data:
  1434                           	opt stack 0
  1435  0000C7                     	ds	1
  1436  0000C8                     _RF_DataPlace:
  1437                           	opt stack 0
  1438  0000C8                     	ds	1
  1439  0000C9                     _System_State_Change:
  1440                           	opt stack 0
  1441  0000C9                     	ds	1
  1442                           tblptru	equ	0xFF8
  1443                           tblptrh	equ	0xFF7
  1444                           tblptrl	equ	0xFF6
  1445                           tablat	equ	0xFF5
  1446                           postinc0	equ	0xFEE
  1447                           wreg	equ	0xFE8
  1448                           postdec1	equ	0xFE5
  1449                           fsr1h	equ	0xFE2
  1450                           fsr1l	equ	0xFE1
  1451                           
  1452                           	psect	dataBANK0
  1453  0000CA                     __pdataBANK0:
  1454                           	opt stack 0
  1455  0000CA                     _Rail_VIN:
  1456                           	opt stack 0
  1457  0000CA                     	ds	3
  1458  0000CD                     _IR_Saved:
  1459                           	opt stack 0
  1460  0000CD                     	ds	1
  1461  0000CE                     _RF_Saved:
  1462                           	opt stack 0
  1463  0000CE                     	ds	1
  1464  0000CF                     _System_State:
  1465                           	opt stack 0
  1466  0000CF                     	ds	1
  1467                           tblptru	equ	0xFF8
  1468                           tblptrh	equ	0xFF7
  1469                           tblptrl	equ	0xFF6
  1470                           tablat	equ	0xFF5
  1471                           postinc0	equ	0xFEE
  1472                           wreg	equ	0xFE8
  1473                           postdec1	equ	0xFE5
  1474                           fsr1h	equ	0xFE2
  1475                           fsr1l	equ	0xFE1
  1476                           
  1477                           	psect	bssBANK1
  1478  000100                     __pbssBANK1:
  1479                           	opt stack 0
  1480  000100                     _FlashBuffer:
  1481                           	opt stack 0
  1482  000100                     	ds	128
  1483                           tblptru	equ	0xFF8
  1484                           tblptrh	equ	0xFF7
  1485                           tblptrl	equ	0xFF6
  1486                           tablat	equ	0xFF5
  1487                           postinc0	equ	0xFEE
  1488                           wreg	equ	0xFE8
  1489                           postdec1	equ	0xFE5
  1490                           fsr1h	equ	0xFE2
  1491                           fsr1l	equ	0xFE1
  1492                           
  1493                           	psect	bssBANK2
  1494  000200                     __pbssBANK2:
  1495                           	opt stack 0
  1496  000200                     _IR_DataTiming:
  1497                           	opt stack 0
  1498  000200                     	ds	256
  1499                           tblptru	equ	0xFF8
  1500                           tblptrh	equ	0xFF7
  1501                           tblptrl	equ	0xFF6
  1502                           tablat	equ	0xFF5
  1503                           postinc0	equ	0xFEE
  1504                           wreg	equ	0xFE8
  1505                           postdec1	equ	0xFE5
  1506                           fsr1h	equ	0xFE2
  1507                           fsr1l	equ	0xFE1
  1508                           
  1509                           	psect	bssBANK3
  1510  000300                     __pbssBANK3:
  1511                           	opt stack 0
  1512  000300                     _RF_DataTiming:
  1513                           	opt stack 0
  1514  000300                     	ds	256
  1515                           tblptru	equ	0xFF8
  1516                           tblptrh	equ	0xFF7
  1517                           tblptrl	equ	0xFF6
  1518                           tablat	equ	0xFF5
  1519                           postinc0	equ	0xFEE
  1520                           wreg	equ	0xFE8
  1521                           postdec1	equ	0xFE5
  1522                           fsr1h	equ	0xFE2
  1523                           fsr1l	equ	0xFE1
  1524                           
  1525                           	psect	cstackBANK1
  1526  000180                     __pcstackBANK1:
  1527                           	opt stack 0
  1528  000180                     ?___ftpack:
  1529                           	opt stack 0
  1530  000180                     ?___fttol:
  1531                           	opt stack 0
  1532  000180                     RF_DataInt@state:
  1533                           	opt stack 0
  1534  000180                     RF_Receiver@state:
  1535                           	opt stack 0
  1536  000180                     RF_SetBandwidth@band:
  1537                           	opt stack 0
  1538  000180                     RF_SetSquelch@state:
  1539                           	opt stack 0
  1540  000180                     RF_CalculateCodesize@i:
  1541                           	opt stack 0
  1542  000180                     MTR_IN1@state:
  1543                           	opt stack 0
  1544  000180                     MTR_IN2@state:
  1545                           	opt stack 0
  1546  000180                     IR_ReadReceiver@value:
  1547                           	opt stack 0
  1548  000180                     IR_CalculateCodesize@i:
  1549                           	opt stack 0
  1550  000180                     LDO_Pass@state:
  1551                           	opt stack 0
  1552  000180                     BUT_IR_PinChangeInt@state:
  1553                           	opt stack 0
  1554  000180                     BUT_ReadButton@value:
  1555                           	opt stack 0
  1556  000180                     TMR_Timer0@state:
  1557                           	opt stack 0
  1558  000180                     TMR_Timer1@state:
  1559                           	opt stack 0
  1560  000180                     TMR_Timer2@state:
  1561                           	opt stack 0
  1562  000180                     TMR_Timer0Int@state:
  1563                           	opt stack 0
  1564  000180                     TMR_Timer1Int@state:
  1565                           	opt stack 0
  1566  000180                     TMR_Timer2Int@state:
  1567                           	opt stack 0
  1568  000180                     TMR_Timer1Osc@state:
  1569                           	opt stack 0
  1570  000180                     ADC_Module@state:
  1571                           	opt stack 0
  1572  000180                     ADC_ConversionInt@state:
  1573                           	opt stack 0
  1574  000180                     MSC_DelayNOP@NOPs:
  1575                           	opt stack 0
  1576  000180                     MSC_CleanBufferInt@data:
  1577                           	opt stack 0
  1578  000180                     ___ftpack@arg:
  1579                           	opt stack 0
  1580  000180                     ___ftge@ff1:
  1581                           	opt stack 0
  1582  000180                     ___fttol@f1:
  1583                           	opt stack 0
  1584                           
  1585                           ; 3 bytes @ 0x0
  1586  000180                     	ds	1
  1587  000181                     TMR_ResetTimer0@TimerOn:
  1588                           	opt stack 0
  1589  000181                     TMR_ResetTimer1@TimerOn:
  1590                           	opt stack 0
  1591                           
  1592                           ; 1 bytes @ 0x1
  1593  000181                     	ds	1
  1594  000182                     TMR_Timer1Function@mode:
  1595                           	opt stack 0
  1596  000182                     MSC_DelayNOP@i:
  1597                           	opt stack 0
  1598  000182                     MSC_CleanBufferInt@count:
  1599                           	opt stack 0
  1600                           
  1601                           ; 2 bytes @ 0x2
  1602  000182                     	ds	1
  1603  000183                     ___ftpack@exp:
  1604                           	opt stack 0
  1605  000183                     ___ftge@ff2:
  1606                           	opt stack 0
  1607                           
  1608                           ; 3 bytes @ 0x3
  1609  000183                     	ds	1
  1610  000184                     ??___fttol:
  1611  000184                     ___ftpack@sign:
  1612                           	opt stack 0
  1613  000184                     MSC_CleanBufferInt@i:
  1614                           	opt stack 0
  1615  000184                     MSC_DelayMS@US:
  1616                           	opt stack 0
  1617                           
  1618                           ; 4 bytes @ 0x4
  1619  000184                     	ds	1
  1620  000185                     ??___ftpack:
  1621                           
  1622                           ; 0 bytes @ 0x5
  1623  000185                     	ds	1
  1624  000186                     ??___ftge:
  1625                           
  1626                           ; 0 bytes @ 0x6
  1627  000186                     	ds	2
  1628  000188                     ??_MSC_DelayMS:
  1629  000188                     ?___lwtoft:
  1630                           	opt stack 0
  1631  000188                     ___lwtoft@c:
  1632                           	opt stack 0
  1633                           
  1634                           ; 2 bytes @ 0x8
  1635  000188                     	ds	1
  1636  000189                     ___fttol@sign1:
  1637                           	opt stack 0
  1638  000189                     MSC_DelayMS@i:
  1639                           	opt stack 0
  1640                           
  1641                           ; 4 bytes @ 0x9
  1642  000189                     	ds	1
  1643  00018A                     ___fttol@lval:
  1644                           	opt stack 0
  1645                           
  1646                           ; 4 bytes @ 0xA
  1647  00018A                     	ds	1
  1648  00018B                     ?___ftmul:
  1649                           	opt stack 0
  1650  00018B                     ___ftmul@f1:
  1651                           	opt stack 0
  1652                           
  1653                           ; 3 bytes @ 0xB
  1654  00018B                     	ds	2
  1655  00018D                     MSC_BlinkLED@blink:
  1656                           	opt stack 0
  1657                           
  1658                           ; 2 bytes @ 0xD
  1659  00018D                     	ds	1
  1660  00018E                     ___fttol@exp1:
  1661                           	opt stack 0
  1662  00018E                     ___ftmul@f2:
  1663                           	opt stack 0
  1664                           
  1665                           ; 3 bytes @ 0xE
  1666  00018E                     	ds	1
  1667  00018F                     MSC_BlinkLED@speed:
  1668                           	opt stack 0
  1669                           
  1670                           ; 2 bytes @ 0xF
  1671  00018F                     	ds	2
  1672  000191                     ??_MSC_BlinkLED:
  1673  000191                     ??___ftmul:
  1674                           
  1675                           ; 0 bytes @ 0x11
  1676  000191                     	ds	2
  1677  000193                     MSC_BlinkLED@i:
  1678                           	opt stack 0
  1679                           
  1680                           ; 2 bytes @ 0x13
  1681  000193                     	ds	1
  1682  000194                     ___ftmul@exp:
  1683                           	opt stack 0
  1684                           
  1685                           ; 1 bytes @ 0x14
  1686  000194                     	ds	1
  1687  000195                     ___ftmul@f3_as_product:
  1688                           	opt stack 0
  1689                           
  1690                           ; 3 bytes @ 0x15
  1691  000195                     	ds	3
  1692  000198                     ___ftmul@cntr:
  1693                           	opt stack 0
  1694                           
  1695                           ; 1 bytes @ 0x18
  1696  000198                     	ds	1
  1697  000199                     ___ftmul@sign:
  1698                           	opt stack 0
  1699                           
  1700                           ; 1 bytes @ 0x19
  1701  000199                     	ds	1
  1702  00019A                     RF_LoadCode@Low:
  1703                           	opt stack 0
  1704  00019A                     IR_LoadCode@Low:
  1705                           	opt stack 0
  1706                           
  1707                           ; 3 bytes @ 0x1A
  1708  00019A                     	ds	3
  1709  00019D                     RF_LoadCode@High:
  1710                           	opt stack 0
  1711  00019D                     IR_LoadCode@High:
  1712                           	opt stack 0
  1713                           
  1714                           ; 3 bytes @ 0x1D
  1715  00019D                     	ds	3
  1716  0001A0                     tblptru	equ	0xFF8
  1717                           tblptrh	equ	0xFF7
  1718                           tblptrl	equ	0xFF6
  1719                           tablat	equ	0xFF5
  1720                           postinc0	equ	0xFEE
  1721                           wreg	equ	0xFE8
  1722                           postdec1	equ	0xFE5
  1723                           fsr1h	equ	0xFE2
  1724                           fsr1l	equ	0xFE1
  1725                           
  1726                           ; 0 bytes @ 0x20
  1727                           
  1728                           	psect	cstackBANK0
  1729  000080                     __pcstackBANK0:
  1730                           	opt stack 0
  1731  000080                     ?i2___ftpack:
  1732                           	opt stack 0
  1733  000080                     ?i2___fttol:
  1734                           	opt stack 0
  1735  000080                     i2RF_DataInt@state:
  1736                           	opt stack 0
  1737  000080                     i2RF_CalculateCodesize@i:
  1738                           	opt stack 0
  1739  000080                     i2TMR_Timer0@state:
  1740                           	opt stack 0
  1741  000080                     i2TMR_Timer0Int@state:
  1742                           	opt stack 0
  1743  000080                     i2MSC_CleanBufferInt@data:
  1744                           	opt stack 0
  1745  000080                     i2FSH_VerifyWriteIntArray@ConstArray:
  1746                           	opt stack 0
  1747  000080                     i2___ftpack@arg:
  1748                           	opt stack 0
  1749  000080                     i2___fttol@f1:
  1750                           	opt stack 0
  1751  000080                     i2FSH_AddressToBlock@Address:
  1752                           	opt stack 0
  1753                           
  1754                           ; 4 bytes @ 0x0
  1755  000080                     	ds	1
  1756  000081                     i2TMR_ResetTimer0@TimerOn:
  1757                           	opt stack 0
  1758                           
  1759                           ; 1 bytes @ 0x1
  1760  000081                     	ds	1
  1761  000082                     i2MSC_CleanBufferInt@count:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0x2
  1765  000082                     	ds	1
  1766  000083                     i2___ftpack@exp:
  1767                           	opt stack 0
  1768  000083                     i2FSH_VerifyWriteIntArray@Array:
  1769                           	opt stack 0
  1770                           
  1771                           ; 2 bytes @ 0x3
  1772  000083                     	ds	1
  1773  000084                     ??i2___fttol:
  1774  000084                     i2___ftpack@sign:
  1775                           	opt stack 0
  1776  000084                     i2MSC_CleanBufferInt@i:
  1777                           	opt stack 0
  1778  000084                     i2FSH_WriteIntArray@ConstArray:
  1779                           	opt stack 0
  1780  000084                     i2FSH_EraseBlock@Address:
  1781                           	opt stack 0
  1782                           
  1783                           ; 4 bytes @ 0x4
  1784  000084                     	ds	1
  1785  000085                     ??i2_FSH_VerifyWriteIntArray:
  1786  000085                     ??i2___ftpack:
  1787                           
  1788                           ; 0 bytes @ 0x5
  1789  000085                     	ds	1
  1790  000086                     i2MSC_BufferCopyIntConst@from:
  1791                           	opt stack 0
  1792                           
  1793                           ; 3 bytes @ 0x6
  1794  000086                     	ds	1
  1795  000087                     i2FSH_WriteIntArray@Array:
  1796                           	opt stack 0
  1797                           
  1798                           ; 2 bytes @ 0x7
  1799  000087                     	ds	1
  1800  000088                     ?i2___lwtoft:
  1801                           	opt stack 0
  1802  000088                     i2FSH_EraseBlock@highint:
  1803                           	opt stack 0
  1804  000088                     i2FSH_VerifyWriteIntArray@data:
  1805                           	opt stack 0
  1806  000088                     i2___lwtoft@c:
  1807                           	opt stack 0
  1808                           
  1809                           ; 2 bytes @ 0x8
  1810  000088                     	ds	1
  1811  000089                     ??i2_FSH_WriteIntArray:
  1812  000089                     i2FSH_EraseBlock@lowint:
  1813                           	opt stack 0
  1814  000089                     i2___fttol@sign1:
  1815                           	opt stack 0
  1816  000089                     i2MSC_BufferCopyIntConst@to:
  1817                           	opt stack 0
  1818                           
  1819                           ; 2 bytes @ 0x9
  1820  000089                     	ds	1
  1821  00008A                     i2FSH_EraseBlock@WriteTries:
  1822                           	opt stack 0
  1823  00008A                     i2FSH_VerifyWriteIntArray@failcount:
  1824                           	opt stack 0
  1825  00008A                     i2___fttol@lval:
  1826                           	opt stack 0
  1827                           
  1828                           ; 4 bytes @ 0xA
  1829  00008A                     	ds	1
  1830  00008B                     ?i2___ftmul:
  1831                           	opt stack 0
  1832  00008B                     i2FSH_WriteIntArray@i:
  1833                           	opt stack 0
  1834  00008B                     i2FSH_VerifyWriteIntArray@i:
  1835                           	opt stack 0
  1836  00008B                     i2MSC_BufferCopyIntConst@count:
  1837                           	opt stack 0
  1838  00008B                     i2___ftge@ff1:
  1839                           	opt stack 0
  1840  00008B                     i2___ftmul@f1:
  1841                           	opt stack 0
  1842                           
  1843                           ; 3 bytes @ 0xB
  1844  00008B                     	ds	2
  1845  00008D                     i2MSC_BufferCopyIntConst@shift:
  1846                           	opt stack 0
  1847                           
  1848                           ; 2 bytes @ 0xD
  1849  00008D                     	ds	1
  1850  00008E                     i2___fttol@exp1:
  1851                           	opt stack 0
  1852  00008E                     i2___ftge@ff2:
  1853                           	opt stack 0
  1854  00008E                     i2___ftmul@f2:
  1855                           	opt stack 0
  1856                           
  1857                           ; 3 bytes @ 0xE
  1858  00008E                     	ds	1
  1859  00008F                     i2MSC_BufferCopyIntConst@i:
  1860                           	opt stack 0
  1861                           
  1862                           ; 2 bytes @ 0xF
  1863  00008F                     	ds	2
  1864  000091                     ??i2_FSH_Write_IR_RF:
  1865  000091                     ??i2___ftge:
  1866  000091                     ??i2___ftmul:
  1867                           
  1868                           ; 0 bytes @ 0x11
  1869  000091                     	ds	3
  1870  000094                     i2___ftmul@exp:
  1871                           	opt stack 0
  1872                           
  1873                           ; 1 bytes @ 0x14
  1874  000094                     	ds	1
  1875  000095                     i2___ftmul@f3_as_product:
  1876                           	opt stack 0
  1877                           
  1878                           ; 3 bytes @ 0x15
  1879  000095                     	ds	2
  1880  000097                     i2FSH_Write_IR_RF@highint:
  1881                           	opt stack 0
  1882                           
  1883                           ; 1 bytes @ 0x17
  1884  000097                     	ds	1
  1885  000098                     i2FSH_Write_IR_RF@lowint:
  1886                           	opt stack 0
  1887  000098                     i2___ftmul@cntr:
  1888                           	opt stack 0
  1889                           
  1890                           ; 1 bytes @ 0x18
  1891  000098                     	ds	1
  1892  000099                     i2___ftmul@sign:
  1893                           	opt stack 0
  1894  000099                     i2FSH_Write_IR_RF@FlashWasteindex:
  1895                           	opt stack 0
  1896                           
  1897                           ; 2 bytes @ 0x19
  1898  000099                     	ds	1
  1899  00009A                     i2RF_LoadCode@Low:
  1900                           	opt stack 0
  1901                           
  1902                           ; 3 bytes @ 0x1A
  1903  00009A                     	ds	1
  1904  00009B                     i2FSH_Write_IR_RF@j:
  1905                           	opt stack 0
  1906                           
  1907                           ; 1 bytes @ 0x1B
  1908  00009B                     	ds	1
  1909  00009C                     i2FSH_Write_IR_RF@status:
  1910                           	opt stack 0
  1911                           
  1912                           ; 1 bytes @ 0x1C
  1913  00009C                     	ds	1
  1914  00009D                     i2FSH_Write_IR_RF@i:
  1915                           	opt stack 0
  1916  00009D                     i2RF_LoadCode@High:
  1917                           	opt stack 0
  1918                           
  1919                           ; 3 bytes @ 0x1D
  1920  00009D                     	ds	2
  1921  00009F                     i2FSH_Write_IR_RF@WriteTries:
  1922                           	opt stack 0
  1923                           
  1924                           ; 1 bytes @ 0x1F
  1925  00009F                     	ds	1
  1926  0000A0                     
  1927                           ; 0 bytes @ 0x20
  1928  0000A0                     	ds	2
  1929  0000A2                     RF_CheckCode@Low:
  1930                           	opt stack 0
  1931                           
  1932                           ; 3 bytes @ 0x22
  1933  0000A2                     	ds	3
  1934  0000A5                     RF_CheckCode@High:
  1935                           	opt stack 0
  1936                           
  1937                           ; 3 bytes @ 0x25
  1938  0000A5                     	ds	3
  1939  0000A8                     RF_CheckCode@i:
  1940                           	opt stack 0
  1941                           
  1942                           ; 1 bytes @ 0x28
  1943  0000A8                     	ds	1
  1944  0000A9                     ??_high_isr:
  1945                           
  1946                           ; 0 bytes @ 0x29
  1947  0000A9                     	ds	14
  1948  0000B7                     high_isr@RFtemp:
  1949                           	opt stack 0
  1950                           
  1951                           ; 2 bytes @ 0x37
  1952  0000B7                     	ds	2
  1953                           tblptru	equ	0xFF8
  1954                           tblptrh	equ	0xFF7
  1955                           tblptrl	equ	0xFF6
  1956                           tablat	equ	0xFF5
  1957                           postinc0	equ	0xFEE
  1958                           wreg	equ	0xFE8
  1959                           postdec1	equ	0xFE5
  1960                           fsr1h	equ	0xFE2
  1961                           fsr1l	equ	0xFE1
  1962                           
  1963                           	psect	cstackCOMRAM
  1964  000001                     __pcstackCOMRAM:
  1965                           	opt stack 0
  1966  000001                     ?i1___ftpack:
  1967                           	opt stack 0
  1968  000001                     ?i1___fttol:
  1969                           	opt stack 0
  1970  000001                     i1RF_DataInt@state:
  1971                           	opt stack 0
  1972  000001                     i1IR_ReadReceiver@value:
  1973                           	opt stack 0
  1974  000001                     i1IR_CalculateCodesize@i:
  1975                           	opt stack 0
  1976  000001                     i1BUT_ReadButton@value:
  1977                           	opt stack 0
  1978  000001                     i1TMR_Timer0@state:
  1979                           	opt stack 0
  1980  000001                     i1TMR_Timer1@state:
  1981                           	opt stack 0
  1982  000001                     i1TMR_Timer2@state:
  1983                           	opt stack 0
  1984  000001                     i1TMR_Timer0Int@state:
  1985                           	opt stack 0
  1986  000001                     i1MSC_CleanBufferInt@data:
  1987                           	opt stack 0
  1988  000001                     FSH_VerifyWriteIntArray@ConstArray:
  1989                           	opt stack 0
  1990  000001                     i1___ftpack@arg:
  1991                           	opt stack 0
  1992  000001                     i1___fttol@f1:
  1993                           	opt stack 0
  1994  000001                     FSH_AddressToBlock@Address:
  1995                           	opt stack 0
  1996                           
  1997                           ; 4 bytes @ 0x0
  1998  000001                     	ds	1
  1999  000002                     TMR_ResetTimer2@TimerOn:
  2000                           	opt stack 0
  2001  000002                     i1TMR_ResetTimer1@TimerOn:
  2002                           	opt stack 0
  2003                           
  2004                           ; 1 bytes @ 0x1
  2005  000002                     	ds	1
  2006  000003                     TMR_Timer2Start@time:
  2007                           	opt stack 0
  2008  000003                     i1MSC_CleanBufferInt@count:
  2009                           	opt stack 0
  2010                           
  2011                           ; 2 bytes @ 0x2
  2012  000003                     	ds	1
  2013  000004                     i1___ftpack@exp:
  2014                           	opt stack 0
  2015  000004                     FSH_VerifyWriteIntArray@Array:
  2016                           	opt stack 0
  2017                           
  2018                           ; 2 bytes @ 0x3
  2019  000004                     	ds	1
  2020  000005                     ??i1___fttol:
  2021  000005                     i1___ftpack@sign:
  2022                           	opt stack 0
  2023  000005                     i1MSC_CleanBufferInt@i:
  2024                           	opt stack 0
  2025  000005                     FSH_WriteIntArray@ConstArray:
  2026                           	opt stack 0
  2027  000005                     FSH_EraseBlock@Address:
  2028                           	opt stack 0
  2029                           
  2030                           ; 4 bytes @ 0x4
  2031  000005                     	ds	1
  2032  000006                     ??_FSH_VerifyWriteIntArray:
  2033  000006                     ??i1___ftpack:
  2034                           
  2035                           ; 0 bytes @ 0x5
  2036  000006                     	ds	1
  2037  000007                     MSC_BufferCopyIntConst@from:
  2038                           	opt stack 0
  2039                           
  2040                           ; 3 bytes @ 0x6
  2041  000007                     	ds	1
  2042  000008                     FSH_WriteIntArray@Array:
  2043                           	opt stack 0
  2044                           
  2045                           ; 2 bytes @ 0x7
  2046  000008                     	ds	1
  2047  000009                     ?i1___lwtoft:
  2048                           	opt stack 0
  2049  000009                     FSH_EraseBlock@highint:
  2050                           	opt stack 0
  2051  000009                     FSH_VerifyWriteIntArray@data:
  2052                           	opt stack 0
  2053  000009                     i1___lwtoft@c:
  2054                           	opt stack 0
  2055                           
  2056                           ; 2 bytes @ 0x8
  2057  000009                     	ds	1
  2058  00000A                     ??_FSH_WriteIntArray:
  2059  00000A                     FSH_EraseBlock@lowint:
  2060                           	opt stack 0
  2061  00000A                     i1___fttol@sign1:
  2062                           	opt stack 0
  2063  00000A                     MSC_BufferCopyIntConst@to:
  2064                           	opt stack 0
  2065                           
  2066                           ; 2 bytes @ 0x9
  2067  00000A                     	ds	1
  2068  00000B                     FSH_EraseBlock@WriteTries:
  2069                           	opt stack 0
  2070  00000B                     FSH_VerifyWriteIntArray@failcount:
  2071                           	opt stack 0
  2072  00000B                     i1___fttol@lval:
  2073                           	opt stack 0
  2074                           
  2075                           ; 4 bytes @ 0xA
  2076  00000B                     	ds	1
  2077  00000C                     ?___ftdiv:
  2078                           	opt stack 0
  2079  00000C                     FSH_WriteIntArray@i:
  2080                           	opt stack 0
  2081  00000C                     FSH_VerifyWriteIntArray@i:
  2082                           	opt stack 0
  2083  00000C                     MSC_BufferCopyIntConst@count:
  2084                           	opt stack 0
  2085  00000C                     ___ftdiv@f1:
  2086                           	opt stack 0
  2087  00000C                     i1___ftge@ff1:
  2088                           	opt stack 0
  2089                           
  2090                           ; 3 bytes @ 0xB
  2091  00000C                     	ds	2
  2092  00000E                     MSC_BufferCopyIntConst@shift:
  2093                           	opt stack 0
  2094                           
  2095                           ; 2 bytes @ 0xD
  2096  00000E                     	ds	1
  2097  00000F                     i1___fttol@exp1:
  2098                           	opt stack 0
  2099  00000F                     ___ftdiv@f2:
  2100                           	opt stack 0
  2101  00000F                     i1___ftge@ff2:
  2102                           	opt stack 0
  2103                           
  2104                           ; 3 bytes @ 0xE
  2105  00000F                     	ds	1
  2106  000010                     MSC_BufferCopyIntConst@i:
  2107                           	opt stack 0
  2108                           
  2109                           ; 2 bytes @ 0xF
  2110  000010                     	ds	2
  2111  000012                     ??_FSH_Write_IR_RF:
  2112  000012                     ??___ftdiv:
  2113  000012                     ??i1___ftge:
  2114                           
  2115                           ; 0 bytes @ 0x11
  2116  000012                     	ds	3
  2117  000015                     ___ftdiv@cntr:
  2118                           	opt stack 0
  2119                           
  2120                           ; 1 bytes @ 0x14
  2121  000015                     	ds	1
  2122  000016                     ___ftdiv@f3:
  2123                           	opt stack 0
  2124                           
  2125                           ; 3 bytes @ 0x15
  2126  000016                     	ds	2
  2127  000018                     FSH_Write_IR_RF@highint:
  2128                           	opt stack 0
  2129                           
  2130                           ; 1 bytes @ 0x17
  2131  000018                     	ds	1
  2132  000019                     FSH_Write_IR_RF@lowint:
  2133                           	opt stack 0
  2134  000019                     ___ftdiv@exp:
  2135                           	opt stack 0
  2136                           
  2137                           ; 1 bytes @ 0x18
  2138  000019                     	ds	1
  2139  00001A                     ___ftdiv@sign:
  2140                           	opt stack 0
  2141  00001A                     FSH_Write_IR_RF@FlashWasteindex:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x19
  2145  00001A                     	ds	1
  2146  00001B                     ?i1___ftmul:
  2147                           	opt stack 0
  2148  00001B                     i1___ftmul@f1:
  2149                           	opt stack 0
  2150                           
  2151                           ; 3 bytes @ 0x1A
  2152  00001B                     	ds	1
  2153  00001C                     FSH_Write_IR_RF@j:
  2154                           	opt stack 0
  2155                           
  2156                           ; 1 bytes @ 0x1B
  2157  00001C                     	ds	1
  2158  00001D                     FSH_Write_IR_RF@status:
  2159                           	opt stack 0
  2160                           
  2161                           ; 1 bytes @ 0x1C
  2162  00001D                     	ds	1
  2163  00001E                     FSH_Write_IR_RF@i:
  2164                           	opt stack 0
  2165  00001E                     i1___ftmul@f2:
  2166                           	opt stack 0
  2167                           
  2168                           ; 3 bytes @ 0x1D
  2169  00001E                     	ds	2
  2170  000020                     FSH_Write_IR_RF@WriteTries:
  2171                           	opt stack 0
  2172                           
  2173                           ; 1 bytes @ 0x1F
  2174  000020                     	ds	1
  2175  000021                     ??i1___ftmul:
  2176                           
  2177                           ; 0 bytes @ 0x20
  2178  000021                     	ds	3
  2179  000024                     i1___ftmul@exp:
  2180                           	opt stack 0
  2181                           
  2182                           ; 1 bytes @ 0x23
  2183  000024                     	ds	1
  2184  000025                     i1___ftmul@f3_as_product:
  2185                           	opt stack 0
  2186                           
  2187                           ; 3 bytes @ 0x24
  2188  000025                     	ds	3
  2189  000028                     i1___ftmul@cntr:
  2190                           	opt stack 0
  2191                           
  2192                           ; 1 bytes @ 0x27
  2193  000028                     	ds	1
  2194  000029                     i1___ftmul@sign:
  2195                           	opt stack 0
  2196                           
  2197                           ; 1 bytes @ 0x28
  2198  000029                     	ds	1
  2199  00002A                     ADC_CalculateVoltage@ADCcounts:
  2200                           	opt stack 0
  2201  00002A                     i1IR_LoadCode@Low:
  2202                           	opt stack 0
  2203                           
  2204                           ; 3 bytes @ 0x29
  2205  00002A                     	ds	2
  2206  00002C                     ADC_CalculateVoltage@Voltage:
  2207                           	opt stack 0
  2208                           
  2209                           ; 3 bytes @ 0x2B
  2210  00002C                     	ds	1
  2211  00002D                     i1IR_LoadCode@High:
  2212                           	opt stack 0
  2213                           
  2214                           ; 3 bytes @ 0x2C
  2215  00002D                     	ds	3
  2216  000030                     
  2217                           ; 0 bytes @ 0x2F
  2218  000030                     	ds	2
  2219  000032                     IR_CheckCode@Low:
  2220                           	opt stack 0
  2221                           
  2222                           ; 3 bytes @ 0x31
  2223  000032                     	ds	3
  2224  000035                     IR_CheckCode@High:
  2225                           	opt stack 0
  2226                           
  2227                           ; 3 bytes @ 0x34
  2228  000035                     	ds	3
  2229  000038                     IR_CheckCode@i:
  2230                           	opt stack 0
  2231                           
  2232                           ; 1 bytes @ 0x37
  2233  000038                     	ds	1
  2234  000039                     ??_low_isr:
  2235                           
  2236                           ; 0 bytes @ 0x38
  2237  000039                     	ds	17
  2238  00004A                     low_isr@IR_state:
  2239                           	opt stack 0
  2240                           
  2241                           ; 1 bytes @ 0x49
  2242  00004A                     	ds	1
  2243  00004B                     low_isr@button_state:
  2244                           	opt stack 0
  2245                           
  2246                           ; 1 bytes @ 0x4A
  2247  00004B                     	ds	1
  2248  00004C                     low_isr@IRtemp:
  2249                           	opt stack 0
  2250                           
  2251                           ; 2 bytes @ 0x4B
  2252  00004C                     	ds	2
  2253                           tblptru	equ	0xFF8
  2254                           tblptrh	equ	0xFF7
  2255                           tblptrl	equ	0xFF6
  2256                           tablat	equ	0xFF5
  2257                           postinc0	equ	0xFEE
  2258                           wreg	equ	0xFE8
  2259                           postdec1	equ	0xFE5
  2260                           fsr1h	equ	0xFE2
  2261                           fsr1l	equ	0xFE1
  2262                           
  2263 ;;
  2264 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2265 ;;
  2266 ;; *************** function _main *****************
  2267 ;; Defined at:
  2268 ;;		line 80 in file "main.c"
  2269 ;; Parameters:    Size  Location     Type
  2270 ;;		None
  2271 ;; Auto vars:     Size  Location     Type
  2272 ;;		None
  2273 ;; Return value:  Size  Location     Type
  2274 ;;                  2   56[None  ] int 
  2275 ;; Registers used:
  2276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2277 ;; Tracked objects:
  2278 ;;		On entry : 0/0
  2279 ;;		On exit  : 0/0
  2280 ;;		Unchanged: 0/0
  2281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2282 ;;      Params:         0       0       0       0       0
  2283 ;;      Locals:         0       0       0       0       0
  2284 ;;      Temps:          0       0       0       0       0
  2285 ;;      Totals:         0       0       0       0       0
  2286 ;;Total ram usage:        0 bytes
  2287 ;; Hardware stack levels required when called:   18
  2288 ;; This function calls:
  2289 ;;		_ADC_Start
  2290 ;;		_IR_LoadCode
  2291 ;;		_Init_App
  2292 ;;		_Init_System
  2293 ;;		_MSC_BlinkLED
  2294 ;;		_MSC_DelayMS
  2295 ;;		_MTR_Rotate
  2296 ;;		_RF_LoadCode
  2297 ;;		_SYS_ActivityTimer
  2298 ;;		_SYS_ConfigureOscillator
  2299 ;;		_SYS_DisableInt
  2300 ;;		_SYS_EnableInt
  2301 ;;		___ftge
  2302 ;; This function is called by:
  2303 ;;		Startup code after reset
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           	psect	text0
  2308  003806                     __ptext0:
  2309                           	opt stack 0
  2310  003806                     _main:
  2311                           	opt stack 13
  2312                           
  2313                           ;main.c: 83: SYS_ConfigureOscillator();
  2314                           
  2315                           ;incstack = 0
  2316  003806  ECC2  F00F         	call	_SYS_ConfigureOscillator	;wreg free
  2317                           
  2318                           ;main.c: 84: Init_App();
  2319  00380A  ECB0  F00B         	call	_Init_App	;wreg free
  2320                           
  2321                           ;main.c: 85: Init_System();
  2322  00380E  EC8F  F00C         	call	_Init_System	;wreg free
  2323                           
  2324                           ;main.c: 88: RF_LoadCode();
  2325  003812  ECEB  F003         	call	_RF_LoadCode	;wreg free
  2326                           
  2327                           ;main.c: 89: IR_LoadCode();
  2328  003816  ECD5  F004         	call	_IR_LoadCode	;wreg free
  2329                           
  2330                           ;main.c: 90: MSC_BlinkLED(4,50);
  2331  00381A  0E00               	movlw	0
  2332  00381C  0101               	movlb	1	; () banked
  2333  00381E  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2334  003820  0E04               	movlw	4
  2335  003822  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2336  003824  0E00               	movlw	0
  2337  003826  0101               	movlb	1	; () banked
  2338  003828  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2339  00382A  0E32               	movlw	50
  2340  00382C  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2341  00382E  ECE6  F00A         	call	_MSC_BlinkLED	;wreg free
  2342                           
  2343                           ;main.c: 91: (LATC &= ~0x10);
  2344  003832  988B               	bcf	3979,4,c	;volatile
  2345  003834                     l8335:
  2346                           
  2347                           ;main.c: 94: {
  2348                           ;main.c: 95: if(System_State == 8)
  2349  003834  0E08               	movlw	8
  2350  003836  0100               	movlb	0	; () banked
  2351  003838  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
  2352  00383A  A4D8               	btfss	status,2,c
  2353  00383C  D0B4               	goto	l8405
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;main.c: 96: {
  2357                           ;main.c: 98: if(System_State_Change)
  2358  00383E  0100               	movlb	0	; () banked
  2359  003840  51C9               	movf	_System_State_Change& (0+255),w,b	;volatile
  2360  003842  B4D8               	btfsc	status,2,c
  2361  003844  D050               	goto	l8371
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;main.c: 99: {
  2365                           ;main.c: 101: (LATC &= ~0x10);
  2366  003846  988B               	bcf	3979,4,c	;volatile
  2367                           
  2368                           ; BSR set to: 0
  2369                           ;main.c: 102: if(RF_Saved == 90)
  2370  003848  0E5A               	movlw	90
  2371  00384A  0100               	movlb	0	; () banked
  2372  00384C  19CE               	xorwf	_RF_Saved& (0+255),w,b
  2373  00384E  A4D8               	btfss	status,2,c
  2374  003850  D021               	goto	l8355
  2375                           
  2376                           ; BSR set to: 0
  2377                           ;main.c: 103: {
  2378                           ;main.c: 104: if(Flash_Status == 1)
  2379  003852  0100               	movlb	0	; () banked
  2380  003854  05C2               	decf	_Flash_Status& (0+255),w,b
  2381  003856  A4D8               	btfss	status,2,c
  2382  003858  D00D               	goto	l8349
  2383                           
  2384                           ; BSR set to: 0
  2385                           ;main.c: 105: {
  2386                           ;main.c: 106: MSC_BlinkLED(4,50);
  2387  00385A  0E00               	movlw	0
  2388  00385C  0101               	movlb	1	; () banked
  2389  00385E  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2390  003860  0E04               	movlw	4
  2391  003862  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2392  003864  0E00               	movlw	0
  2393  003866  0101               	movlb	1	; () banked
  2394  003868  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2395  00386A  0E32               	movlw	50
  2396  00386C  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2397  00386E  ECE6  F00A         	call	_MSC_BlinkLED	;wreg free
  2398  003872  D00C               	goto	l8351
  2399  003874                     l8349:
  2400                           
  2401                           ;main.c: 109: else
  2402                           ;main.c: 110: {
  2403                           ;main.c: 111: MSC_BlinkLED(6,75);
  2404  003874  0E00               	movlw	0
  2405  003876  0101               	movlb	1	; () banked
  2406  003878  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2407  00387A  0E06               	movlw	6
  2408  00387C  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2409  00387E  0E00               	movlw	0
  2410  003880  0101               	movlb	1	; () banked
  2411  003882  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2412  003884  0E4B               	movlw	75
  2413  003886  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2414  003888  ECE6  F00A         	call	_MSC_BlinkLED	;wreg free
  2415  00388C                     l8351:
  2416                           
  2417                           ;main.c: 112: (LATC &= ~0x10);
  2418  00388C  988B               	bcf	3979,4,c	;volatile
  2419                           
  2420                           ;main.c: 113: }
  2421                           ;main.c: 114: RF_Saved = 91;
  2422  00388E  0E5B               	movlw	91
  2423  003890  0100               	movlb	0	; () banked
  2424  003892  6FCE               	movwf	_RF_Saved& (0+255),b
  2425  003894                     l8355:
  2426                           
  2427                           ; BSR set to: 0
  2428                           ;main.c: 115: }
  2429                           ;main.c: 116: if(IR_Saved == 90)
  2430  003894  0E5A               	movlw	90
  2431  003896  0100               	movlb	0	; () banked
  2432  003898  19CD               	xorwf	_IR_Saved& (0+255),w,b
  2433  00389A  A4D8               	btfss	status,2,c
  2434  00389C  D021               	goto	l8369
  2435                           
  2436                           ; BSR set to: 0
  2437                           ;main.c: 117: {
  2438                           ;main.c: 118: if(Flash_Status == 1)
  2439  00389E  0100               	movlb	0	; () banked
  2440  0038A0  05C2               	decf	_Flash_Status& (0+255),w,b
  2441  0038A2  A4D8               	btfss	status,2,c
  2442  0038A4  D00D               	goto	l8363
  2443                           
  2444                           ; BSR set to: 0
  2445                           ;main.c: 119: {
  2446                           ;main.c: 120: MSC_BlinkLED(4,50);
  2447  0038A6  0E00               	movlw	0
  2448  0038A8  0101               	movlb	1	; () banked
  2449  0038AA  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2450  0038AC  0E04               	movlw	4
  2451  0038AE  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2452  0038B0  0E00               	movlw	0
  2453  0038B2  0101               	movlb	1	; () banked
  2454  0038B4  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2455  0038B6  0E32               	movlw	50
  2456  0038B8  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2457  0038BA  ECE6  F00A         	call	_MSC_BlinkLED	;wreg free
  2458  0038BE  D00C               	goto	l8365
  2459  0038C0                     l8363:
  2460                           
  2461                           ;main.c: 123: else
  2462                           ;main.c: 124: {
  2463                           ;main.c: 125: MSC_BlinkLED(6,75);
  2464  0038C0  0E00               	movlw	0
  2465  0038C2  0101               	movlb	1	; () banked
  2466  0038C4  6F8E               	movwf	(MSC_BlinkLED@blink+1)& (0+255),b
  2467  0038C6  0E06               	movlw	6
  2468  0038C8  6F8D               	movwf	MSC_BlinkLED@blink& (0+255),b
  2469  0038CA  0E00               	movlw	0
  2470  0038CC  0101               	movlb	1	; () banked
  2471  0038CE  6F90               	movwf	(MSC_BlinkLED@speed+1)& (0+255),b
  2472  0038D0  0E4B               	movlw	75
  2473  0038D2  6F8F               	movwf	MSC_BlinkLED@speed& (0+255),b
  2474  0038D4  ECE6  F00A         	call	_MSC_BlinkLED	;wreg free
  2475  0038D8                     l8365:
  2476                           
  2477                           ;main.c: 126: (LATC &= ~0x10);
  2478  0038D8  988B               	bcf	3979,4,c	;volatile
  2479                           
  2480                           ;main.c: 127: }
  2481                           ;main.c: 128: IR_Saved = 91;
  2482  0038DA  0E5B               	movlw	91
  2483  0038DC  0100               	movlb	0	; () banked
  2484  0038DE  6FCD               	movwf	_IR_Saved& (0+255),b
  2485  0038E0                     l8369:
  2486                           
  2487                           ; BSR set to: 0
  2488                           ;main.c: 129: }
  2489                           ;main.c: 130: System_State_Change = 0;
  2490  0038E0  0E00               	movlw	0
  2491  0038E2  0100               	movlb	0	; () banked
  2492  0038E4  6FC9               	movwf	_System_State_Change& (0+255),b	;volatile
  2493  0038E6                     l8371:
  2494                           
  2495                           ; BSR set to: 0
  2496                           ;main.c: 131: }
  2497                           ;main.c: 132: if(RF_Data || IR_Data || Button_Data)
  2498  0038E6  0100               	movlb	0	; () banked
  2499  0038E8  51C7               	movf	_RF_Data& (0+255),w,b	;volatile
  2500  0038EA  A4D8               	btfss	status,2,c
  2501  0038EC  D008               	goto	l8377
  2502                           
  2503                           ; BSR set to: 0
  2504  0038EE  0100               	movlb	0	; () banked
  2505  0038F0  51C4               	movf	_IR_Data& (0+255),w,b	;volatile
  2506  0038F2  A4D8               	btfss	status,2,c
  2507  0038F4  D004               	goto	l8377
  2508                           
  2509                           ; BSR set to: 0
  2510  0038F6  0100               	movlb	0	; () banked
  2511  0038F8  51C0               	movf	_Button_Data& (0+255),w,b	;volatile
  2512  0038FA  B4D8               	btfsc	status,2,c
  2513  0038FC  D01C               	goto	l8395
  2514  0038FE                     l8377:
  2515                           
  2516                           ; BSR set to: 0
  2517                           ;main.c: 133: {
  2518                           ;main.c: 134: (LATC |= 0x10);
  2519  0038FE  888B               	bsf	3979,4,c	;volatile
  2520                           
  2521                           ; BSR set to: 0
  2522                           ;main.c: 135: SYS_DisableInt();
  2523  003900  ECCD  F00F         	call	_SYS_DisableInt	;wreg free
  2524                           
  2525                           ;main.c: 136: MTR_Rotate();
  2526  003904  EC2B  F00A         	call	_MTR_Rotate	;wreg free
  2527                           
  2528                           ;main.c: 137: MSC_DelayMS(200);
  2529  003908  0EC8               	movlw	200
  2530  00390A  0101               	movlb	1	; () banked
  2531  00390C  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  2532  00390E  0E00               	movlw	0
  2533  003910  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  2534  003912  0E00               	movlw	0
  2535  003914  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  2536  003916  0E00               	movlw	0
  2537  003918  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  2538  00391A  EC5E  F00A         	call	_MSC_DelayMS	;wreg free
  2539                           
  2540                           ;main.c: 138: SYS_EnableInt();
  2541  00391E  EC0A  F00E         	call	_SYS_EnableInt	;wreg free
  2542                           
  2543                           ;main.c: 139: RF_Data = 0;
  2544  003922  0E00               	movlw	0
  2545  003924  0100               	movlb	0	; () banked
  2546  003926  6FC7               	movwf	_RF_Data& (0+255),b	;volatile
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;main.c: 140: IR_Data = 0;
  2550  003928  0E00               	movlw	0
  2551  00392A  0100               	movlb	0	; () banked
  2552  00392C  6FC4               	movwf	_IR_Data& (0+255),b	;volatile
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;main.c: 141: Button_Data = 0;
  2556  00392E  0E00               	movlw	0
  2557  003930  0100               	movlb	0	; () banked
  2558  003932  6FC0               	movwf	_Button_Data& (0+255),b	;volatile
  2559                           
  2560                           ; BSR set to: 0
  2561                           ;main.c: 142: (LATC &= ~0x10);
  2562  003934  988B               	bcf	3979,4,c	;volatile
  2563  003936                     l8395:
  2564                           
  2565                           ; BSR set to: 0
  2566                           ;main.c: 143: }
  2567                           ;main.c: 144: if(Rail_VIN < 3.5 || Rail_VIN > 5.5 )
  2568  003936  C0CA  F180         	movff	_Rail_VIN,___ftge@ff1
  2569  00393A  C0CB  F181         	movff	_Rail_VIN+1,___ftge@ff1+1
  2570  00393E  C0CC  F182         	movff	_Rail_VIN+2,___ftge@ff1+2
  2571  003942  0E00               	movlw	0
  2572  003944  0101               	movlb	1	; () banked
  2573  003946  6F83               	movwf	___ftge@ff2& (0+255),b
  2574  003948  0E60               	movlw	96
  2575  00394A  0101               	movlb	1	; () banked
  2576  00394C  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2577  00394E  0E40               	movlw	64
  2578  003950  0101               	movlb	1	; () banked
  2579  003952  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2580  003954  EC24  F006         	call	___ftge	;wreg free
  2581  003958  0101               	movlb	1	; () banked
  2582  00395A  A0D8               	btfss	status,0,c
  2583  00395C  D014               	goto	l8399
  2584                           
  2585                           ; BSR set to: 1
  2586  00395E  0E00               	movlw	0
  2587  003960  0101               	movlb	1	; () banked
  2588  003962  6F80               	movwf	___ftge@ff1& (0+255),b
  2589  003964  0EB0               	movlw	176
  2590  003966  0101               	movlb	1	; () banked
  2591  003968  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  2592  00396A  0E40               	movlw	64
  2593  00396C  0101               	movlb	1	; () banked
  2594  00396E  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  2595  003970  C0CA  F183         	movff	_Rail_VIN,___ftge@ff2
  2596  003974  C0CB  F184         	movff	_Rail_VIN+1,___ftge@ff2+1
  2597  003978  C0CC  F185         	movff	_Rail_VIN+2,___ftge@ff2+2
  2598  00397C  EC24  F006         	call	___ftge	;wreg free
  2599  003980  0101               	movlb	1	; () banked
  2600  003982  B0D8               	btfsc	status,0,c
  2601  003984  D00D               	goto	l8403
  2602  003986                     l8399:
  2603                           
  2604                           ; BSR set to: 1
  2605                           ;main.c: 145: {
  2606                           ;main.c: 146: MSC_DelayMS(100);
  2607  003986  0E64               	movlw	100
  2608  003988  0101               	movlb	1	; () banked
  2609  00398A  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  2610  00398C  0E00               	movlw	0
  2611  00398E  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  2612  003990  0E00               	movlw	0
  2613  003992  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  2614  003994  0E00               	movlw	0
  2615  003996  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  2616  003998  EC5E  F00A         	call	_MSC_DelayMS	;wreg free
  2617                           
  2618                           ;main.c: 147: (LATC ^= 0x10);
  2619  00399C  0E10               	movlw	16
  2620  00399E  1A8B               	xorwf	3979,f,c	;volatile
  2621  0039A0                     l8403:
  2622                           
  2623                           ;main.c: 148: }
  2624                           ;main.c: 149: SYS_ActivityTimer();
  2625  0039A0  ECD8  F00C         	call	_SYS_ActivityTimer	;wreg free
  2626                           
  2627                           ;main.c: 150: }
  2628  0039A4  D02C               	goto	l8417
  2629  0039A6                     l8405:
  2630                           
  2631                           ;main.c: 151: else if(System_State == 10)
  2632  0039A6  0E0A               	movlw	10
  2633  0039A8  0100               	movlb	0	; () banked
  2634  0039AA  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
  2635  0039AC  A4D8               	btfss	status,2,c
  2636  0039AE  D027               	goto	l8417
  2637                           
  2638                           ; BSR set to: 0
  2639                           ;main.c: 152: {
  2640                           ;main.c: 154: MSC_DelayMS(25);
  2641  0039B0  0E19               	movlw	25
  2642  0039B2  0101               	movlb	1	; () banked
  2643  0039B4  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  2644  0039B6  0E00               	movlw	0
  2645  0039B8  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  2646  0039BA  0E00               	movlw	0
  2647  0039BC  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  2648  0039BE  0E00               	movlw	0
  2649  0039C0  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  2650  0039C2  EC5E  F00A         	call	_MSC_DelayMS	;wreg free
  2651                           
  2652                           ;main.c: 155: (LATC ^= 0x10);
  2653  0039C6  0E10               	movlw	16
  2654  0039C8  1A8B               	xorwf	3979,f,c	;volatile
  2655                           
  2656                           ;main.c: 156: if(RF_Data)
  2657  0039CA  0100               	movlb	0	; () banked
  2658  0039CC  51C7               	movf	_RF_Data& (0+255),w,b	;volatile
  2659  0039CE  B4D8               	btfsc	status,2,c
  2660  0039D0  D009               	goto	l74
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;main.c: 157: {
  2664                           ;main.c: 159: RF_Data = 0;
  2665  0039D2  0E00               	movlw	0
  2666  0039D4  0100               	movlb	0	; () banked
  2667  0039D6  6FC7               	movwf	_RF_Data& (0+255),b	;volatile
  2668                           
  2669                           ;main.c: 160: System_State = 8;
  2670  0039D8  0E08               	movlw	8
  2671  0039DA  0100               	movlb	0	; () banked
  2672  0039DC  6FCF               	movwf	_System_State& (0+255),b	;volatile
  2673                           
  2674                           ;main.c: 161: System_State_Change = 1;
  2675  0039DE  0E01               	movlw	1
  2676  0039E0  0100               	movlb	0	; () banked
  2677  0039E2  6FC9               	movwf	_System_State_Change& (0+255),b	;volatile
  2678  0039E4                     l74:
  2679                           
  2680                           ; BSR set to: 0
  2681                           ;main.c: 162: }
  2682                           ;main.c: 163: if(IR_Data)
  2683  0039E4  0100               	movlb	0	; () banked
  2684  0039E6  51C4               	movf	_IR_Data& (0+255),w,b	;volatile
  2685  0039E8  B4D8               	btfsc	status,2,c
  2686  0039EA  D009               	goto	l8417
  2687                           
  2688                           ; BSR set to: 0
  2689                           ;main.c: 164: {
  2690                           ;main.c: 166: IR_Data = 0;
  2691  0039EC  0E00               	movlw	0
  2692  0039EE  0100               	movlb	0	; () banked
  2693  0039F0  6FC4               	movwf	_IR_Data& (0+255),b	;volatile
  2694                           
  2695                           ;main.c: 167: System_State = 8;
  2696  0039F2  0E08               	movlw	8
  2697  0039F4  0100               	movlb	0	; () banked
  2698  0039F6  6FCF               	movwf	_System_State& (0+255),b	;volatile
  2699                           
  2700                           ;main.c: 168: System_State_Change = 1;
  2701  0039F8  0E01               	movlw	1
  2702  0039FA  0100               	movlb	0	; () banked
  2703  0039FC  6FC9               	movwf	_System_State_Change& (0+255),b	;volatile
  2704  0039FE                     l8417:
  2705                           
  2706                           ;main.c: 169: }
  2707                           ;main.c: 170: }
  2708                           ;main.c: 172: ADC_SampleCount++;
  2709  0039FE  0100               	movlb	0	; () banked
  2710  003A00  4BB9               	infsnz	_ADC_SampleCount& (0+255),f,b
  2711  003A02  2BBA               	incf	(_ADC_SampleCount+1)& (0+255),f,b
  2712                           
  2713                           ; BSR set to: 0
  2714                           ;main.c: 173: if(ADC_SampleCount > 10)
  2715  003A04  0100               	movlb	0	; () banked
  2716  003A06  51BA               	movf	(_ADC_SampleCount+1)& (0+255),w,b
  2717  003A08  E105               	bnz	u9470
  2718  003A0A  0E0B               	movlw	11
  2719  003A0C  0100               	movlb	0	; () banked
  2720  003A0E  5DB9               	subwf	_ADC_SampleCount& (0+255),w,b
  2721  003A10  A0D8               	btfss	status,0,c
  2722  003A12  D710               	goto	l8335
  2723  003A14                     u9470:
  2724                           
  2725                           ; BSR set to: 0
  2726                           ;main.c: 174: {
  2727                           ;main.c: 175: ADC_Start();
  2728  003A14  ECD7  F00F         	call	_ADC_Start	;wreg free
  2729                           
  2730                           ;main.c: 176: ADC_SampleCount = 0;
  2731  003A18  0E00               	movlw	0
  2732  003A1A  0100               	movlb	0	; () banked
  2733  003A1C  6FBA               	movwf	(_ADC_SampleCount+1)& (0+255),b
  2734  003A1E  0E00               	movlw	0
  2735  003A20  6FB9               	movwf	_ADC_SampleCount& (0+255),b
  2736                           
  2737                           ; BSR set to: 0
  2738                           
  2739                           ; BSR set to: 0
  2740  003A22  D708               	goto	l8335
  2741  003A24                     __end_of_main:
  2742                           	opt stack 0
  2743                           tblptru	equ	0xFF8
  2744                           tblptrh	equ	0xFF7
  2745                           tblptrl	equ	0xFF6
  2746                           tablat	equ	0xFF5
  2747                           postinc0	equ	0xFEE
  2748                           wreg	equ	0xFE8
  2749                           postdec1	equ	0xFE5
  2750                           fsr1h	equ	0xFE2
  2751                           fsr1l	equ	0xFE1
  2752                           status	equ	0xFD8
  2753                           
  2754 ;; *************** function ___ftge *****************
  2755 ;; Defined at:
  2756 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
  2757 ;; Parameters:    Size  Location     Type
  2758 ;;  ff1             3    0[BANK1 ] float 
  2759 ;;  ff2             3    3[BANK1 ] float 
  2760 ;; Auto vars:     Size  Location     Type
  2761 ;;		None
  2762 ;; Return value:  Size  Location     Type
  2763 ;;		None               void
  2764 ;; Registers used:
  2765 ;;		wreg, status,2, status,0
  2766 ;; Tracked objects:
  2767 ;;		On entry : 0/0
  2768 ;;		On exit  : 0/0
  2769 ;;		Unchanged: 0/0
  2770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2771 ;;      Params:         0       0       6       0       0
  2772 ;;      Locals:         0       0       0       0       0
  2773 ;;      Temps:          0       0       3       0       0
  2774 ;;      Totals:         0       0       9       0       0
  2775 ;;Total ram usage:        9 bytes
  2776 ;; Hardware stack levels used:    1
  2777 ;; Hardware stack levels required when called:   12
  2778 ;; This function calls:
  2779 ;;		Nothing
  2780 ;; This function is called by:
  2781 ;;		_main
  2782 ;; This function uses a non-reentrant model
  2783 ;;
  2784                           
  2785                           	psect	text1
  2786  000C48                     __ptext1:
  2787                           	opt stack 0
  2788  000C48                     ___ftge:
  2789                           	opt stack 18
  2790                           
  2791                           ; BSR set to: 0
  2792                           ;incstack = 0
  2793  000C48  0101               	movlb	1	; () banked
  2794  000C4A  AF82               	btfss	(___ftge@ff1+2)& (0+255),7,b
  2795  000C4C  D01D               	goto	l8307
  2796                           
  2797                           ; BSR set to: 1
  2798  000C4E  C180  F186         	movff	___ftge@ff1,??___ftge
  2799  000C52  C181  F187         	movff	___ftge@ff1+1,??___ftge+1
  2800  000C56  C182  F188         	movff	___ftge@ff1+2,??___ftge+2
  2801  000C5A  0101               	movlb	1	; () banked
  2802  000C5C  1F86               	comf	??___ftge& (0+255),f,b
  2803  000C5E  1F87               	comf	(??___ftge+1)& (0+255),f,b
  2804  000C60  1F88               	comf	(??___ftge+2)& (0+255),f,b
  2805  000C62  2B86               	incf	??___ftge& (0+255),f,b
  2806  000C64  0E00               	movlw	0
  2807  000C66  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  2808  000C68  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  2809  000C6A  0E00               	movlw	0
  2810  000C6C  0101               	movlb	1	; () banked
  2811  000C6E  2586               	addwf	??___ftge& (0+255),w,b
  2812  000C70  0101               	movlb	1	; () banked
  2813  000C72  6F80               	movwf	___ftge@ff1& (0+255),b
  2814  000C74  0E00               	movlw	0
  2815  000C76  0101               	movlb	1	; () banked
  2816  000C78  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  2817  000C7A  0101               	movlb	1	; () banked
  2818  000C7C  6F81               	movwf	(___ftge@ff1+1)& (0+255),b
  2819  000C7E  0E80               	movlw	128
  2820  000C80  0101               	movlb	1	; () banked
  2821  000C82  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  2822  000C84  0101               	movlb	1	; () banked
  2823  000C86  6F82               	movwf	(___ftge@ff1+2)& (0+255),b
  2824  000C88                     l8307:
  2825                           
  2826                           ; BSR set to: 1
  2827  000C88  0101               	movlb	1	; () banked
  2828  000C8A  AF85               	btfss	(___ftge@ff2+2)& (0+255),7,b
  2829  000C8C  D01D               	goto	l8311
  2830                           
  2831                           ; BSR set to: 1
  2832  000C8E  C183  F186         	movff	___ftge@ff2,??___ftge
  2833  000C92  C184  F187         	movff	___ftge@ff2+1,??___ftge+1
  2834  000C96  C185  F188         	movff	___ftge@ff2+2,??___ftge+2
  2835  000C9A  0101               	movlb	1	; () banked
  2836  000C9C  1F86               	comf	??___ftge& (0+255),f,b
  2837  000C9E  1F87               	comf	(??___ftge+1)& (0+255),f,b
  2838  000CA0  1F88               	comf	(??___ftge+2)& (0+255),f,b
  2839  000CA2  2B86               	incf	??___ftge& (0+255),f,b
  2840  000CA4  0E00               	movlw	0
  2841  000CA6  2387               	addwfc	(??___ftge+1)& (0+255),f,b
  2842  000CA8  2388               	addwfc	(??___ftge+2)& (0+255),f,b
  2843  000CAA  0E00               	movlw	0
  2844  000CAC  0101               	movlb	1	; () banked
  2845  000CAE  2586               	addwf	??___ftge& (0+255),w,b
  2846  000CB0  0101               	movlb	1	; () banked
  2847  000CB2  6F83               	movwf	___ftge@ff2& (0+255),b
  2848  000CB4  0E00               	movlw	0
  2849  000CB6  0101               	movlb	1	; () banked
  2850  000CB8  2187               	addwfc	(??___ftge+1)& (0+255),w,b
  2851  000CBA  0101               	movlb	1	; () banked
  2852  000CBC  6F84               	movwf	(___ftge@ff2+1)& (0+255),b
  2853  000CBE  0E80               	movlw	128
  2854  000CC0  0101               	movlb	1	; () banked
  2855  000CC2  2188               	addwfc	(??___ftge+2)& (0+255),w,b
  2856  000CC4  0101               	movlb	1	; () banked
  2857  000CC6  6F85               	movwf	(___ftge@ff2+2)& (0+255),b
  2858  000CC8                     l8311:
  2859                           
  2860                           ; BSR set to: 1
  2861  000CC8  0E00               	movlw	0
  2862  000CCA  0101               	movlb	1	; () banked
  2863  000CCC  1B80               	xorwf	___ftge@ff1& (0+255),f,b
  2864  000CCE  0E00               	movlw	0
  2865  000CD0  0101               	movlb	1	; () banked
  2866  000CD2  1B81               	xorwf	(___ftge@ff1+1)& (0+255),f,b
  2867  000CD4  0E80               	movlw	128
  2868  000CD6  0101               	movlb	1	; () banked
  2869  000CD8  1B82               	xorwf	(___ftge@ff1+2)& (0+255),f,b
  2870                           
  2871                           ; BSR set to: 1
  2872  000CDA  0E00               	movlw	0
  2873  000CDC  0101               	movlb	1	; () banked
  2874  000CDE  1B83               	xorwf	___ftge@ff2& (0+255),f,b
  2875  000CE0  0E00               	movlw	0
  2876  000CE2  0101               	movlb	1	; () banked
  2877  000CE4  1B84               	xorwf	(___ftge@ff2+1)& (0+255),f,b
  2878  000CE6  0E80               	movlw	128
  2879  000CE8  0101               	movlb	1	; () banked
  2880  000CEA  1B85               	xorwf	(___ftge@ff2+2)& (0+255),f,b
  2881  000CEC  0101               	movlb	1	; () banked
  2882  000CEE  5183               	movf	___ftge@ff2& (0+255),w,b
  2883  000CF0  0101               	movlb	1	; () banked
  2884  000CF2  5D80               	subwf	___ftge@ff1& (0+255),w,b
  2885  000CF4  0101               	movlb	1	; () banked
  2886  000CF6  5184               	movf	(___ftge@ff2+1)& (0+255),w,b
  2887  000CF8  0101               	movlb	1	; () banked
  2888  000CFA  5981               	subwfb	(___ftge@ff1+1)& (0+255),w,b
  2889  000CFC  0101               	movlb	1	; () banked
  2890  000CFE  5185               	movf	(___ftge@ff2+2)& (0+255),w,b
  2891  000D00  0101               	movlb	1	; () banked
  2892  000D02  5982               	subwfb	(___ftge@ff1+2)& (0+255),w,b
  2893  000D04  B0D8               	btfsc	status,0,c
  2894  000D06  D002               	goto	l8317
  2895                           
  2896                           ; BSR set to: 1
  2897  000D08  90D8               	bcf	status,0,c
  2898  000D0A  0012               	return	
  2899  000D0C                     l8317:
  2900                           
  2901                           ; BSR set to: 1
  2902  000D0C  80D8               	bsf	status,0,c
  2903                           
  2904                           ; BSR set to: 1
  2905  000D0E  0012               	return	
  2906  000D10                     __end_of___ftge:
  2907                           	opt stack 0
  2908                           tblptru	equ	0xFF8
  2909                           tblptrh	equ	0xFF7
  2910                           tblptrl	equ	0xFF6
  2911                           tablat	equ	0xFF5
  2912                           postinc0	equ	0xFEE
  2913                           wreg	equ	0xFE8
  2914                           postdec1	equ	0xFE5
  2915                           fsr1h	equ	0xFE2
  2916                           fsr1l	equ	0xFE1
  2917                           status	equ	0xFD8
  2918                           
  2919 ;; *************** function _SYS_EnableInt *****************
  2920 ;; Defined at:
  2921 ;;		line 90 in file "SYSTEM.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;		None
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;		None
  2926 ;; Return value:  Size  Location     Type
  2927 ;;		None               void
  2928 ;; Registers used:
  2929 ;;		wreg, status,2, status,0, cstack
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  2935 ;;      Params:         0       0       0       0       0
  2936 ;;      Locals:         0       0       0       0       0
  2937 ;;      Temps:          0       0       0       0       0
  2938 ;;      Totals:         0       0       0       0       0
  2939 ;;Total ram usage:        0 bytes
  2940 ;; Hardware stack levels used:    1
  2941 ;; Hardware stack levels required when called:   13
  2942 ;; This function calls:
  2943 ;;		_BUT_ReadButton
  2944 ;;		_IR_ReadReceiver
  2945 ;; This function is called by:
  2946 ;;		_main
  2947 ;; This function uses a non-reentrant model
  2948 ;;
  2949                           
  2950                           	psect	text2
  2951  001C14                     __ptext2:
  2952                           	opt stack 0
  2953  001C14                     _SYS_EnableInt:
  2954                           	opt stack 17
  2955                           
  2956                           ;SYSTEM.c: 92: INTCON3bits.INT1IF = 0;
  2957                           
  2958                           ; BSR set to: 1
  2959                           ;incstack = 0
  2960  001C14  90F0               	bcf	intcon3,0,c	;volatile
  2961                           
  2962                           ;SYSTEM.c: 93: INTCON3bits.INT2IF = 0;
  2963  001C16  92F0               	bcf	intcon3,1,c	;volatile
  2964                           
  2965                           ;SYSTEM.c: 94: INTCONbits.TMR0IF = 0;
  2966  001C18  94F2               	bcf	intcon,2,c	;volatile
  2967                           
  2968                           ;SYSTEM.c: 95: IR_ReadReceiver();
  2969  001C1A  EC40  F00C         	call	_IR_ReadReceiver	;wreg free
  2970                           
  2971                           ;SYSTEM.c: 96: BUT_ReadButton();
  2972  001C1E  EC25  F00C         	call	_BUT_ReadButton	;wreg free
  2973                           
  2974                           ;SYSTEM.c: 97: INTCONbits.RBIF = 0;
  2975  001C22  90F2               	bcf	intcon,0,c	;volatile
  2976                           
  2977                           ;SYSTEM.c: 98: PIR1bits.TMR2IF = 0;
  2978  001C24  929E               	bcf	3998,1,c	;volatile
  2979                           
  2980                           ;SYSTEM.c: 99: PIR1bits.ADIF = 0;
  2981  001C26  9C9E               	bcf	3998,6,c	;volatile
  2982                           
  2983                           ;SYSTEM.c: 100: PIR1bits.TMR1IF = 0;
  2984  001C28  909E               	bcf	3998,0,c	;volatile
  2985                           
  2986                           ;SYSTEM.c: 101: INTCONbits.GIE = 1;
  2987  001C2A  8EF2               	bsf	intcon,7,c	;volatile
  2988                           
  2989                           ;SYSTEM.c: 102: INTCONbits.PEIE = 1;
  2990  001C2C  8CF2               	bsf	intcon,6,c	;volatile
  2991  001C2E  0012               	return		;funcret
  2992  001C30                     __end_of_SYS_EnableInt:
  2993                           	opt stack 0
  2994                           tblptru	equ	0xFF8
  2995                           tblptrh	equ	0xFF7
  2996                           tblptrl	equ	0xFF6
  2997                           tablat	equ	0xFF5
  2998                           intcon	equ	0xFF2
  2999                           intcon3	equ	0xFF0
  3000                           postinc0	equ	0xFEE
  3001                           wreg	equ	0xFE8
  3002                           postdec1	equ	0xFE5
  3003                           fsr1h	equ	0xFE2
  3004                           fsr1l	equ	0xFE1
  3005                           status	equ	0xFD8
  3006                           
  3007 ;; *************** function _SYS_DisableInt *****************
  3008 ;; Defined at:
  3009 ;;		line 79 in file "SYSTEM.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;		None
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;		None
  3014 ;; Return value:  Size  Location     Type
  3015 ;;		None               void
  3016 ;; Registers used:
  3017 ;;		None
  3018 ;; Tracked objects:
  3019 ;;		On entry : 0/0
  3020 ;;		On exit  : 0/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3023 ;;      Params:         0       0       0       0       0
  3024 ;;      Locals:         0       0       0       0       0
  3025 ;;      Temps:          0       0       0       0       0
  3026 ;;      Totals:         0       0       0       0       0
  3027 ;;Total ram usage:        0 bytes
  3028 ;; Hardware stack levels used:    1
  3029 ;; Hardware stack levels required when called:   12
  3030 ;; This function calls:
  3031 ;;		Nothing
  3032 ;; This function is called by:
  3033 ;;		_main
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           	psect	text3
  3038  001F9A                     __ptext3:
  3039                           	opt stack 0
  3040  001F9A                     _SYS_DisableInt:
  3041                           	opt stack 18
  3042                           
  3043                           ;SYSTEM.c: 81: INTCONbits.GIE = 0;
  3044                           
  3045                           ;incstack = 0
  3046  001F9A  9EF2               	bcf	intcon,7,c	;volatile
  3047                           
  3048                           ;SYSTEM.c: 82: INTCONbits.PEIE = 0;
  3049  001F9C  9CF2               	bcf	intcon,6,c	;volatile
  3050  001F9E  0012               	return		;funcret
  3051  001FA0                     __end_of_SYS_DisableInt:
  3052                           	opt stack 0
  3053                           tblptru	equ	0xFF8
  3054                           tblptrh	equ	0xFF7
  3055                           tblptrl	equ	0xFF6
  3056                           tablat	equ	0xFF5
  3057                           intcon	equ	0xFF2
  3058                           intcon3	equ	0xFF0
  3059                           postinc0	equ	0xFEE
  3060                           wreg	equ	0xFE8
  3061                           postdec1	equ	0xFE5
  3062                           fsr1h	equ	0xFE2
  3063                           fsr1l	equ	0xFE1
  3064                           status	equ	0xFD8
  3065                           
  3066 ;; *************** function _SYS_ConfigureOscillator *****************
  3067 ;; Defined at:
  3068 ;;		line 121 in file "SYSTEM.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;		None
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;		None
  3073 ;; Return value:  Size  Location     Type
  3074 ;;		None               void
  3075 ;; Registers used:
  3076 ;;		None
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3082 ;;      Params:         0       0       0       0       0
  3083 ;;      Locals:         0       0       0       0       0
  3084 ;;      Temps:          0       0       0       0       0
  3085 ;;      Totals:         0       0       0       0       0
  3086 ;;Total ram usage:        0 bytes
  3087 ;; Hardware stack levels used:    1
  3088 ;; Hardware stack levels required when called:   12
  3089 ;; This function calls:
  3090 ;;		Nothing
  3091 ;; This function is called by:
  3092 ;;		_main
  3093 ;; This function uses a non-reentrant model
  3094 ;;
  3095                           
  3096                           	psect	text4
  3097  001F84                     __ptext4:
  3098                           	opt stack 0
  3099  001F84                     _SYS_ConfigureOscillator:
  3100                           	opt stack 18
  3101                           
  3102                           ;SYSTEM.c: 124: OSCTUNEbits.PLLEN = 1;
  3103                           
  3104                           ;incstack = 0
  3105  001F84  8C9B               	bsf	3995,6,c	;volatile
  3106  001F86                     l339:
  3107  001F86  B6D3               	btfsc	4051,3,c	;volatile
  3108  001F88  0012               	return	
  3109  001F8A  D7FD               	goto	l339
  3110  001F8C                     __end_of_SYS_ConfigureOscillator:
  3111                           	opt stack 0
  3112                           tblptru	equ	0xFF8
  3113                           tblptrh	equ	0xFF7
  3114                           tblptrl	equ	0xFF6
  3115                           tablat	equ	0xFF5
  3116                           intcon	equ	0xFF2
  3117                           intcon3	equ	0xFF0
  3118                           postinc0	equ	0xFEE
  3119                           wreg	equ	0xFE8
  3120                           postdec1	equ	0xFE5
  3121                           fsr1h	equ	0xFE2
  3122                           fsr1l	equ	0xFE1
  3123                           status	equ	0xFD8
  3124                           
  3125 ;; *************** function _SYS_ActivityTimer *****************
  3126 ;; Defined at:
  3127 ;;		line 134 in file "SYSTEM.c"
  3128 ;; Parameters:    Size  Location     Type
  3129 ;;		None
  3130 ;; Auto vars:     Size  Location     Type
  3131 ;;		None
  3132 ;; Return value:  Size  Location     Type
  3133 ;;		None               void
  3134 ;; Registers used:
  3135 ;;		wreg, status,2, status,0, cstack
  3136 ;; Tracked objects:
  3137 ;;		On entry : 0/0
  3138 ;;		On exit  : 0/0
  3139 ;;		Unchanged: 0/0
  3140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3141 ;;      Params:         0       0       0       0       0
  3142 ;;      Locals:         0       0       0       0       0
  3143 ;;      Temps:          0       0       0       0       0
  3144 ;;      Totals:         0       0       0       0       0
  3145 ;;Total ram usage:        0 bytes
  3146 ;; Hardware stack levels used:    1
  3147 ;; Hardware stack levels required when called:   13
  3148 ;; This function calls:
  3149 ;;		_SYS_ActivityTimerReset
  3150 ;;		_SYS_Sleep
  3151 ;; This function is called by:
  3152 ;;		_main
  3153 ;; This function uses a non-reentrant model
  3154 ;;
  3155                           
  3156                           	psect	text5
  3157  0019B0                     __ptext5:
  3158                           	opt stack 0
  3159  0019B0                     _SYS_ActivityTimer:
  3160                           	opt stack 17
  3161                           
  3162                           ;SYSTEM.c: 136: if(Activity_Timer > 1000)
  3163                           
  3164                           ;incstack = 0
  3165  0019B0  5051               	movf	_Activity_Timer+3,w,c
  3166  0019B2  1050               	iorwf	_Activity_Timer+2,w,c
  3167  0019B4  E106               	bnz	u9290
  3168  0019B6  0EE9               	movlw	233
  3169  0019B8  5C4E               	subwf	_Activity_Timer,w,c
  3170  0019BA  0E03               	movlw	3
  3171  0019BC  584F               	subwfb	_Activity_Timer+1,w,c
  3172  0019BE  A0D8               	btfss	status,0,c
  3173  0019C0  D005               	goto	l8299
  3174  0019C2                     u9290:
  3175                           
  3176                           ;SYSTEM.c: 137: {
  3177                           ;SYSTEM.c: 138: SYS_ActivityTimerReset();
  3178  0019C2  EC3F  F00F         	call	_SYS_ActivityTimerReset	;wreg free
  3179                           
  3180                           ;SYSTEM.c: 139: SYS_Sleep();
  3181  0019C6  ECD0  F00F         	call	_SYS_Sleep	;wreg free
  3182                           
  3183                           ;SYSTEM.c: 140: }
  3184  0019CA  0012               	return	
  3185  0019CC                     l8299:
  3186                           
  3187                           ;SYSTEM.c: 141: else
  3188                           ;SYSTEM.c: 142: {
  3189                           ;SYSTEM.c: 143: Activity_Timer++;
  3190  0019CC  0E01               	movlw	1
  3191  0019CE  264E               	addwf	_Activity_Timer,f,c
  3192  0019D0  0E00               	movlw	0
  3193  0019D2  224F               	addwfc	_Activity_Timer+1,f,c
  3194  0019D4  2250               	addwfc	_Activity_Timer+2,f,c
  3195  0019D6  2251               	addwfc	_Activity_Timer+3,f,c
  3196  0019D8  0012               	return	
  3197  0019DA                     __end_of_SYS_ActivityTimer:
  3198                           	opt stack 0
  3199                           tblptru	equ	0xFF8
  3200                           tblptrh	equ	0xFF7
  3201                           tblptrl	equ	0xFF6
  3202                           tablat	equ	0xFF5
  3203                           intcon	equ	0xFF2
  3204                           intcon3	equ	0xFF0
  3205                           postinc0	equ	0xFEE
  3206                           wreg	equ	0xFE8
  3207                           postdec1	equ	0xFE5
  3208                           fsr1h	equ	0xFE2
  3209                           fsr1l	equ	0xFE1
  3210                           status	equ	0xFD8
  3211                           
  3212 ;; *************** function _SYS_Sleep *****************
  3213 ;; Defined at:
  3214 ;;		line 110 in file "SYSTEM.c"
  3215 ;; Parameters:    Size  Location     Type
  3216 ;;		None
  3217 ;; Auto vars:     Size  Location     Type
  3218 ;;		None
  3219 ;; Return value:  Size  Location     Type
  3220 ;;		None               void
  3221 ;; Registers used:
  3222 ;;		status,2, status,0
  3223 ;; Tracked objects:
  3224 ;;		On entry : 0/0
  3225 ;;		On exit  : 0/0
  3226 ;;		Unchanged: 0/0
  3227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3228 ;;      Params:         0       0       0       0       0
  3229 ;;      Locals:         0       0       0       0       0
  3230 ;;      Temps:          0       0       0       0       0
  3231 ;;      Totals:         0       0       0       0       0
  3232 ;;Total ram usage:        0 bytes
  3233 ;; Hardware stack levels used:    1
  3234 ;; Hardware stack levels required when called:   12
  3235 ;; This function calls:
  3236 ;;		Nothing
  3237 ;; This function is called by:
  3238 ;;		_SYS_ActivityTimer
  3239 ;; This function uses a non-reentrant model
  3240 ;;
  3241                           
  3242                           	psect	text6
  3243  001FA0                     __ptext6:
  3244                           	opt stack 0
  3245  001FA0                     _SYS_Sleep:
  3246                           	opt stack 17
  3247                           
  3248                           ;SYSTEM.c: 112: OSCCON &= ~0b10000000;
  3249                           
  3250                           ;incstack = 0
  3251  001FA0  9ED3               	bcf	4051,7,c	;volatile
  3252  001FA2  0003               	sleep		;# 
  3253  001FA4  0012               	return		;funcret
  3254  001FA6                     __end_of_SYS_Sleep:
  3255                           	opt stack 0
  3256                           tblptru	equ	0xFF8
  3257                           tblptrh	equ	0xFF7
  3258                           tblptrl	equ	0xFF6
  3259                           tablat	equ	0xFF5
  3260                           intcon	equ	0xFF2
  3261                           intcon3	equ	0xFF0
  3262                           postinc0	equ	0xFEE
  3263                           wreg	equ	0xFE8
  3264                           postdec1	equ	0xFE5
  3265                           fsr1h	equ	0xFE2
  3266                           fsr1l	equ	0xFE1
  3267                           status	equ	0xFD8
  3268                           
  3269 ;; *************** function _SYS_ActivityTimerReset *****************
  3270 ;; Defined at:
  3271 ;;		line 69 in file "SYSTEM.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;		None
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;		None
  3276 ;; Return value:  Size  Location     Type
  3277 ;;		None               void
  3278 ;; Registers used:
  3279 ;;		wreg, status,2
  3280 ;; Tracked objects:
  3281 ;;		On entry : 0/0
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3285 ;;      Params:         0       0       0       0       0
  3286 ;;      Locals:         0       0       0       0       0
  3287 ;;      Temps:          0       0       0       0       0
  3288 ;;      Totals:         0       0       0       0       0
  3289 ;;Total ram usage:        0 bytes
  3290 ;; Hardware stack levels used:    1
  3291 ;; Hardware stack levels required when called:   12
  3292 ;; This function calls:
  3293 ;;		Nothing
  3294 ;; This function is called by:
  3295 ;;		_SYS_ActivityTimer
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           	psect	text7
  3300  001E7E                     __ptext7:
  3301                           	opt stack 0
  3302  001E7E                     _SYS_ActivityTimerReset:
  3303                           	opt stack 17
  3304                           
  3305                           ;SYSTEM.c: 71: Activity_Timer = 0;
  3306                           
  3307                           ;incstack = 0
  3308  001E7E  0E00               	movlw	0
  3309  001E80  6E4E               	movwf	_Activity_Timer,c
  3310  001E82  0E00               	movlw	0
  3311  001E84  6E4F               	movwf	_Activity_Timer+1,c
  3312  001E86  0E00               	movlw	0
  3313  001E88  6E50               	movwf	_Activity_Timer+2,c
  3314  001E8A  0E00               	movlw	0
  3315  001E8C  6E51               	movwf	_Activity_Timer+3,c
  3316  001E8E  0012               	return		;funcret
  3317  001E90                     __end_of_SYS_ActivityTimerReset:
  3318                           	opt stack 0
  3319                           tblptru	equ	0xFF8
  3320                           tblptrh	equ	0xFF7
  3321                           tblptrl	equ	0xFF6
  3322                           tablat	equ	0xFF5
  3323                           intcon	equ	0xFF2
  3324                           intcon3	equ	0xFF0
  3325                           postinc0	equ	0xFEE
  3326                           wreg	equ	0xFE8
  3327                           postdec1	equ	0xFE5
  3328                           fsr1h	equ	0xFE2
  3329                           fsr1l	equ	0xFE1
  3330                           status	equ	0xFD8
  3331                           
  3332 ;; *************** function _RF_LoadCode *****************
  3333 ;; Defined at:
  3334 ;;		line 232 in file "RF.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;		None
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;  High            3   29[BANK1 ] float 
  3339 ;;  Low             3   26[BANK1 ] float 
  3340 ;; Return value:  Size  Location     Type
  3341 ;;		None               void
  3342 ;; Registers used:
  3343 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3349 ;;      Params:         0       0       0       0       0
  3350 ;;      Locals:         0       0       6       0       0
  3351 ;;      Temps:          0       0       0       0       0
  3352 ;;      Totals:         0       0       6       0       0
  3353 ;;Total ram usage:        6 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; Hardware stack levels required when called:   14
  3356 ;; This function calls:
  3357 ;;		_RF_CalculateCodesize
  3358 ;;		___ftmul
  3359 ;;		___fttol
  3360 ;;		___lwtoft
  3361 ;; This function is called by:
  3362 ;;		_main
  3363 ;; This function uses a non-reentrant model
  3364 ;;
  3365                           
  3366                           	psect	text8
  3367  0007D6                     __ptext8:
  3368                           	opt stack 0
  3369  0007D6                     _RF_LoadCode:
  3370                           	opt stack 16
  3371                           
  3372                           ;RF.c: 234: double Low = 0.0;
  3373                           
  3374                           ;incstack = 0
  3375  0007D6  0E00               	movlw	0
  3376  0007D8  0101               	movlb	1	; () banked
  3377  0007DA  6F9A               	movwf	RF_LoadCode@Low& (0+255),b
  3378  0007DC  0E00               	movlw	0
  3379  0007DE  0101               	movlb	1	; () banked
  3380  0007E0  6F9B               	movwf	(RF_LoadCode@Low+1)& (0+255),b
  3381  0007E2  0E00               	movlw	0
  3382  0007E4  0101               	movlb	1	; () banked
  3383  0007E6  6F9C               	movwf	(RF_LoadCode@Low+2)& (0+255),b
  3384                           
  3385                           ;RF.c: 235: double High = 0.0;
  3386  0007E8  0E00               	movlw	0
  3387  0007EA  0101               	movlb	1	; () banked
  3388  0007EC  6F9D               	movwf	RF_LoadCode@High& (0+255),b
  3389  0007EE  0E00               	movlw	0
  3390  0007F0  0101               	movlb	1	; () banked
  3391  0007F2  6F9E               	movwf	(RF_LoadCode@High+1)& (0+255),b
  3392  0007F4  0E00               	movlw	0
  3393  0007F6  0101               	movlb	1	; () banked
  3394  0007F8  6F9F               	movwf	(RF_LoadCode@High+2)& (0+255),b
  3395                           
  3396                           ; BSR set to: 1
  3397                           ;RF.c: 237: Low = (double)RF_SavedTiming[0] * (1.0 - 0.02);
  3398  0007FA  0E00               	movlw	0
  3399  0007FC  6EF6               	movwf	tblptrl,c
  3400  0007FE                     	if	1	;There is more than 1 active tblptr byte
  3401  0007FE  0E25               	movlw	37
  3402  000800  6EF7               	movwf	tblptrh,c
  3403  000802                     	endif
  3404  000802                     	if	0	;There are less than 3 active tblptr bytes
  3405  000802                     	endif
  3406  000802  0009               	tblrd		*+
  3407  000804  CFF5 F188          	movff	tablat,___lwtoft@c
  3408  000808  000A               	tblrd		*-
  3409  00080A  CFF5 F189          	movff	tablat,___lwtoft@c+1
  3410  00080E  EC2C  F00D         	call	___lwtoft	;wreg free
  3411  000812  C188  F18B         	movff	?___lwtoft,___ftmul@f1
  3412  000816  C189  F18C         	movff	?___lwtoft+1,___ftmul@f1+1
  3413  00081A  C18A  F18D         	movff	?___lwtoft+2,___ftmul@f1+2
  3414  00081E  0EE1               	movlw	225
  3415  000820  0101               	movlb	1	; () banked
  3416  000822  6F8E               	movwf	___ftmul@f2& (0+255),b
  3417  000824  0E7A               	movlw	122
  3418  000826  0101               	movlb	1	; () banked
  3419  000828  6F8F               	movwf	(___ftmul@f2+1)& (0+255),b
  3420  00082A  0E3F               	movlw	63
  3421  00082C  0101               	movlb	1	; () banked
  3422  00082E  6F90               	movwf	(___ftmul@f2+2)& (0+255),b
  3423  000830  ECD1  F01D         	call	___ftmul	;wreg free
  3424  000834  C18B  F19A         	movff	?___ftmul,RF_LoadCode@Low
  3425  000838  C18C  F19B         	movff	?___ftmul+1,RF_LoadCode@Low+1
  3426  00083C  C18D  F19C         	movff	?___ftmul+2,RF_LoadCode@Low+2
  3427                           
  3428                           ;RF.c: 238: High = (double)RF_SavedTiming[0] * (1.0 + 0.02);
  3429  000840  0E00               	movlw	0
  3430  000842  6EF6               	movwf	tblptrl,c
  3431  000844                     	if	1	;There is more than 1 active tblptr byte
  3432  000844  0E25               	movlw	37
  3433  000846  6EF7               	movwf	tblptrh,c
  3434  000848                     	endif
  3435  000848                     	if	0	;There are less than 3 active tblptr bytes
  3436  000848                     	endif
  3437  000848  0009               	tblrd		*+
  3438  00084A  CFF5 F188          	movff	tablat,___lwtoft@c
  3439  00084E  000A               	tblrd		*-
  3440  000850  CFF5 F189          	movff	tablat,___lwtoft@c+1
  3441  000854  EC2C  F00D         	call	___lwtoft	;wreg free
  3442  000858  C188  F18B         	movff	?___lwtoft,___ftmul@f1
  3443  00085C  C189  F18C         	movff	?___lwtoft+1,___ftmul@f1+1
  3444  000860  C18A  F18D         	movff	?___lwtoft+2,___ftmul@f1+2
  3445  000864  0E8F               	movlw	143
  3446  000866  0101               	movlb	1	; () banked
  3447  000868  6F8E               	movwf	___ftmul@f2& (0+255),b
  3448  00086A  0E82               	movlw	130
  3449  00086C  0101               	movlb	1	; () banked
  3450  00086E  6F8F               	movwf	(___ftmul@f2+1)& (0+255),b
  3451  000870  0E3F               	movlw	63
  3452  000872  0101               	movlb	1	; () banked
  3453  000874  6F90               	movwf	(___ftmul@f2+2)& (0+255),b
  3454  000876  ECD1  F01D         	call	___ftmul	;wreg free
  3455  00087A  C18B  F19D         	movff	?___ftmul,RF_LoadCode@High
  3456  00087E  C18C  F19E         	movff	?___ftmul+1,RF_LoadCode@High+1
  3457  000882  C18D  F19F         	movff	?___ftmul+2,RF_LoadCode@High+2
  3458                           
  3459                           ;RF.c: 240: RF_SyncLow = (unsigned int) Low;
  3460  000886  C19A  F180         	movff	RF_LoadCode@Low,___fttol@f1
  3461  00088A  C19B  F181         	movff	RF_LoadCode@Low+1,___fttol@f1+1
  3462  00088E  C19C  F182         	movff	RF_LoadCode@Low+2,___fttol@f1+2
  3463  000892  EC2F  F01F         	call	___fttol	;wreg free
  3464  000896  C180  F0BD         	movff	?___fttol,_RF_SyncLow
  3465  00089A  C181  F0BE         	movff	?___fttol+1,_RF_SyncLow+1
  3466                           
  3467                           ;RF.c: 241: RF_SyncHigh = (unsigned int) High;
  3468  00089E  C19D  F180         	movff	RF_LoadCode@High,___fttol@f1
  3469  0008A2  C19E  F181         	movff	RF_LoadCode@High+1,___fttol@f1+1
  3470  0008A6  C19F  F182         	movff	RF_LoadCode@High+2,___fttol@f1+2
  3471  0008AA  EC2F  F01F         	call	___fttol	;wreg free
  3472  0008AE  C180  F0BB         	movff	?___fttol,_RF_SyncHigh
  3473  0008B2  C181  F0BC         	movff	?___fttol+1,_RF_SyncHigh+1
  3474                           
  3475                           ;RF.c: 243: RF_CodeSize = RF_CalculateCodesize();
  3476  0008B6  EC0D  F00B         	call	_RF_CalculateCodesize	;wreg free
  3477  0008BA  0100               	movlb	0	; () banked
  3478  0008BC  6FC6               	movwf	_RF_CodeSize& (0+255),b
  3479                           
  3480                           ; BSR set to: 0
  3481  0008BE  0012               	return		;funcret
  3482  0008C0                     __end_of_RF_LoadCode:
  3483                           	opt stack 0
  3484                           tblptru	equ	0xFF8
  3485                           tblptrh	equ	0xFF7
  3486                           tblptrl	equ	0xFF6
  3487                           tablat	equ	0xFF5
  3488                           intcon	equ	0xFF2
  3489                           intcon3	equ	0xFF0
  3490                           postinc0	equ	0xFEE
  3491                           wreg	equ	0xFE8
  3492                           postdec1	equ	0xFE5
  3493                           fsr1h	equ	0xFE2
  3494                           fsr1l	equ	0xFE1
  3495                           status	equ	0xFD8
  3496                           
  3497 ;; *************** function _RF_CalculateCodesize *****************
  3498 ;; Defined at:
  3499 ;;		line 251 in file "RF.c"
  3500 ;; Parameters:    Size  Location     Type
  3501 ;;		None
  3502 ;; Auto vars:     Size  Location     Type
  3503 ;;  i               1    0[BANK1 ] unsigned char 
  3504 ;; Return value:  Size  Location     Type
  3505 ;;                  1    wreg      unsigned char 
  3506 ;; Registers used:
  3507 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  3508 ;; Tracked objects:
  3509 ;;		On entry : 0/0
  3510 ;;		On exit  : 0/0
  3511 ;;		Unchanged: 0/0
  3512 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3513 ;;      Params:         0       0       0       0       0
  3514 ;;      Locals:         0       0       1       0       0
  3515 ;;      Temps:          0       0       0       0       0
  3516 ;;      Totals:         0       0       1       0       0
  3517 ;;Total ram usage:        1 bytes
  3518 ;; Hardware stack levels used:    1
  3519 ;; Hardware stack levels required when called:   12
  3520 ;; This function calls:
  3521 ;;		Nothing
  3522 ;; This function is called by:
  3523 ;;		_RF_LoadCode
  3524 ;; This function uses a non-reentrant model
  3525 ;;
  3526                           
  3527                           	psect	text9
  3528  00161A                     __ptext9:
  3529                           	opt stack 0
  3530  00161A                     _RF_CalculateCodesize:
  3531                           	opt stack 17
  3532                           
  3533                           ;RF.c: 253: unsigned char i;
  3534                           ;RF.c: 255: for(i=0; i<128;i++)
  3535                           
  3536                           ; BSR set to: 0
  3537                           ;incstack = 0
  3538  00161A  0E00               	movlw	0
  3539  00161C  0101               	movlb	1	; () banked
  3540  00161E  6F80               	movwf	RF_CalculateCodesize@i& (0+255),b
  3541  001620                     l8011:
  3542                           
  3543                           ; BSR set to: 1
  3544  001620  0E7F               	movlw	127
  3545  001622  0101               	movlb	1	; () banked
  3546  001624  6580               	cpfsgt	RF_CalculateCodesize@i& (0+255),b
  3547  001626  D001               	goto	l8015
  3548  001628  D018               	goto	l8025
  3549  00162A                     l8015:
  3550                           
  3551                           ; BSR set to: 1
  3552                           ;RF.c: 256: {
  3553                           ;RF.c: 257: if(RF_SavedTiming[i] == 0)
  3554  00162A  0101               	movlb	1	; () banked
  3555  00162C  5180               	movf	RF_CalculateCodesize@i& (0+255),w,b
  3556  00162E  0D02               	mullw	2
  3557  001630  0E00               	movlw	0
  3558  001632  24F3               	addwf	prodl,w,c
  3559  001634  6EF6               	movwf	tblptrl,c
  3560  001636  0E25               	movlw	37
  3561  001638  20F4               	addwfc	prodh,w,c
  3562  00163A  6EF7               	movwf	tblptrh,c
  3563  00163C  6AF8               	clrf	tblptru,c
  3564  00163E  0E00               	movlw	0
  3565  001640  22F8               	addwfc	tblptru,f,c
  3566  001642  0009               	tblrd		*+
  3567  001644  50F5               	movf	tablat,w,c
  3568  001646  0009               	tblrd		*+
  3569  001648  10F5               	iorwf	tablat,w,c
  3570  00164A  A4D8               	btfss	status,2,c
  3571  00164C  D003               	goto	l8021
  3572                           
  3573                           ; BSR set to: 1
  3574                           ;RF.c: 258: {
  3575                           ;RF.c: 259: return i;
  3576  00164E  0101               	movlb	1	; () banked
  3577  001650  5180               	movf	RF_CalculateCodesize@i& (0+255),w,b
  3578                           
  3579                           ; BSR set to: 1
  3580  001652  0012               	return	
  3581  001654                     l8021:
  3582                           
  3583                           ; BSR set to: 1
  3584  001654  0101               	movlb	1	; () banked
  3585  001656  2B80               	incf	RF_CalculateCodesize@i& (0+255),f,b
  3586  001658  D7E3               	goto	l8011
  3587  00165A                     l8025:
  3588                           
  3589                           ; BSR set to: 1
  3590                           ;RF.c: 260: }
  3591                           ;RF.c: 261: }
  3592                           ;RF.c: 262: return 128;
  3593  00165A  0E80               	movlw	128
  3594  00165C  0012               	return	
  3595  00165E                     __end_of_RF_CalculateCodesize:
  3596                           	opt stack 0
  3597                           tblptru	equ	0xFF8
  3598                           tblptrh	equ	0xFF7
  3599                           tblptrl	equ	0xFF6
  3600                           tablat	equ	0xFF5
  3601                           prodh	equ	0xFF4
  3602                           prodl	equ	0xFF3
  3603                           intcon	equ	0xFF2
  3604                           intcon3	equ	0xFF0
  3605                           postinc0	equ	0xFEE
  3606                           wreg	equ	0xFE8
  3607                           postdec1	equ	0xFE5
  3608                           fsr1h	equ	0xFE2
  3609                           fsr1l	equ	0xFE1
  3610                           status	equ	0xFD8
  3611                           
  3612 ;; *************** function _MTR_Rotate *****************
  3613 ;; Defined at:
  3614 ;;		line 104 in file "MOTOR.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;		None
  3617 ;; Auto vars:     Size  Location     Type
  3618 ;;		None
  3619 ;; Return value:  Size  Location     Type
  3620 ;;		None               void
  3621 ;; Registers used:
  3622 ;;		wreg, status,2, status,0, cstack
  3623 ;; Tracked objects:
  3624 ;;		On entry : 0/0
  3625 ;;		On exit  : 0/0
  3626 ;;		Unchanged: 0/0
  3627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3628 ;;      Params:         0       0       0       0       0
  3629 ;;      Locals:         0       0       0       0       0
  3630 ;;      Temps:          0       0       0       0       0
  3631 ;;      Totals:         0       0       0       0       0
  3632 ;;Total ram usage:        0 bytes
  3633 ;; Hardware stack levels used:    1
  3634 ;; Hardware stack levels required when called:   14
  3635 ;; This function calls:
  3636 ;;		_MSC_DelayMS
  3637 ;;		_MTR_IN1
  3638 ;;		_MTR_IN2
  3639 ;; This function is called by:
  3640 ;;		_main
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           	psect	text10
  3645  001456                     __ptext10:
  3646                           	opt stack 0
  3647  001456                     _MTR_Rotate:
  3648                           	opt stack 16
  3649                           
  3650                           ;MOTOR.c: 106: if(DC_Motor == 0)
  3651                           
  3652                           ; BSR set to: 1
  3653                           ;incstack = 0
  3654  001456  0100               	movlb	0	; () banked
  3655  001458  51C1               	movf	_DC_Motor& (0+255),w,b
  3656  00145A  0100               	movlb	0	; () banked
  3657  00145C  A4D8               	btfss	status,2,c
  3658  00145E  D013               	goto	l8269
  3659                           
  3660                           ; BSR set to: 0
  3661                           ;MOTOR.c: 107: {
  3662                           ;MOTOR.c: 108: MTR_IN1(0);
  3663  001460  0E00               	movlw	0
  3664  001462  EC72  F00E         	call	_MTR_IN1
  3665                           
  3666                           ;MOTOR.c: 109: MTR_IN2(1);
  3667  001466  0E01               	movlw	1
  3668  001468  EC67  F00E         	call	_MTR_IN2
  3669                           
  3670                           ;MOTOR.c: 110: MSC_DelayMS(100);
  3671  00146C  0E64               	movlw	100
  3672  00146E  0101               	movlb	1	; () banked
  3673  001470  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  3674  001472  0E00               	movlw	0
  3675  001474  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  3676  001476  0E00               	movlw	0
  3677  001478  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  3678  00147A  0E00               	movlw	0
  3679  00147C  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  3680  00147E  EC5E  F00A         	call	_MSC_DelayMS	;wreg free
  3681                           
  3682                           ;MOTOR.c: 111: DC_Motor = 1;
  3683  001482  0E01               	movlw	1
  3684  001484  D012               	goto	L1
  3685  001486                     l8269:
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;MOTOR.c: 113: else
  3689                           ;MOTOR.c: 114: {
  3690                           ;MOTOR.c: 115: MTR_IN1(1);
  3691  001486  0E01               	movlw	1
  3692  001488  EC72  F00E         	call	_MTR_IN1
  3693                           
  3694                           ;MOTOR.c: 116: MTR_IN2(0);
  3695  00148C  0E00               	movlw	0
  3696  00148E  EC67  F00E         	call	_MTR_IN2
  3697                           
  3698                           ;MOTOR.c: 117: MSC_DelayMS(100);
  3699  001492  0E64               	movlw	100
  3700  001494  0101               	movlb	1	; () banked
  3701  001496  6F84               	movwf	MSC_DelayMS@US& (0+255),b
  3702  001498  0E00               	movlw	0
  3703  00149A  6F85               	movwf	(MSC_DelayMS@US+1)& (0+255),b
  3704  00149C  0E00               	movlw	0
  3705  00149E  6F86               	movwf	(MSC_DelayMS@US+2)& (0+255),b
  3706  0014A0  0E00               	movlw	0
  3707  0014A2  6F87               	movwf	(MSC_DelayMS@US+3)& (0+255),b
  3708  0014A4  EC5E  F00A         	call	_MSC_DelayMS	;wreg free
  3709                           
  3710                           ;MOTOR.c: 118: DC_Motor = 0;
  3711  0014A8  0E00               	movlw	0
  3712  0014AA                     L1:
  3713  0014AA  0100               	movlb	0	; () banked
  3714  0014AC  6FC1               	movwf	_DC_Motor& (0+255),b
  3715                           
  3716                           ; BSR set to: 0
  3717                           ;MOTOR.c: 119: }
  3718                           ;MOTOR.c: 120: MTR_IN1(0);
  3719                           
  3720                           ; BSR set to: 0
  3721  0014AE  0E00               	movlw	0
  3722  0014B0  EC72  F00E         	call	_MTR_IN1
  3723                           
  3724                           ;MOTOR.c: 121: MTR_IN2(0);
  3725  0014B4  0E00               	movlw	0
  3726  0014B6  EC67  F00E         	call	_MTR_IN2
  3727  0014BA  0012               	return		;funcret
  3728  0014BC                     __end_of_MTR_Rotate:
  3729                           	opt stack 0
  3730                           tblptru	equ	0xFF8
  3731                           tblptrh	equ	0xFF7
  3732                           tblptrl	equ	0xFF6
  3733                           tablat	equ	0xFF5
  3734                           prodh	equ	0xFF4
  3735                           prodl	equ	0xFF3
  3736                           intcon	equ	0xFF2
  3737                           intcon3	equ	0xFF0
  3738                           postinc0	equ	0xFEE
  3739                           wreg	equ	0xFE8
  3740                           postdec1	equ	0xFE5
  3741                           fsr1h	equ	0xFE2
  3742                           fsr1l	equ	0xFE1
  3743                           status	equ	0xFD8
  3744                           
  3745 ;; *************** function _MTR_IN2 *****************
  3746 ;; Defined at:
  3747 ;;		line 71 in file "MOTOR.c"
  3748 ;; Parameters:    Size  Location     Type
  3749 ;;  state           1    wreg     unsigned char 
  3750 ;; Auto vars:     Size  Location     Type
  3751 ;;  state           1    0[BANK1 ] unsigned char 
  3752 ;; Return value:  Size  Location     Type
  3753 ;;		None               void
  3754 ;; Registers used:
  3755 ;;		wreg, status,2, status,0
  3756 ;; Tracked objects:
  3757 ;;		On entry : 0/0
  3758 ;;		On exit  : 0/0
  3759 ;;		Unchanged: 0/0
  3760 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3761 ;;      Params:         0       0       0       0       0
  3762 ;;      Locals:         0       0       1       0       0
  3763 ;;      Temps:          0       0       0       0       0
  3764 ;;      Totals:         0       0       1       0       0
  3765 ;;Total ram usage:        1 bytes
  3766 ;; Hardware stack levels used:    1
  3767 ;; Hardware stack levels required when called:   12
  3768 ;; This function calls:
  3769 ;;		Nothing
  3770 ;; This function is called by:
  3771 ;;		_MTR_Rotate
  3772 ;; This function uses a non-reentrant model
  3773 ;;
  3774                           
  3775                           	psect	text11
  3776  001CCE                     __ptext11:
  3777                           	opt stack 0
  3778  001CCE                     _MTR_IN2:
  3779                           	opt stack 17
  3780                           
  3781                           ;incstack = 0
  3782                           ;MTR_IN2@state stored from wreg
  3783  001CCE  0101               	movlb	1	; () banked
  3784  001CD0  6F80               	movwf	MTR_IN2@state& (0+255),b
  3785                           
  3786                           ;MOTOR.c: 73: if(state)
  3787  001CD2  0101               	movlb	1	; () banked
  3788  001CD4  5180               	movf	MTR_IN2@state& (0+255),w,b
  3789  001CD6  0101               	movlb	1	; () banked
  3790  001CD8  B4D8               	btfsc	status,2,c
  3791  001CDA  D002               	goto	l8039
  3792                           
  3793                           ; BSR set to: 1
  3794                           ;MOTOR.c: 74: {
  3795                           ;MOTOR.c: 75: LATC |= 0x04;
  3796  001CDC  848B               	bsf	3979,2,c	;volatile
  3797                           
  3798                           ;MOTOR.c: 76: }
  3799  001CDE  0012               	return	
  3800  001CE0                     l8039:
  3801                           
  3802                           ; BSR set to: 1
  3803                           ;MOTOR.c: 77: else
  3804                           ;MOTOR.c: 78: {
  3805                           ;MOTOR.c: 79: LATC &= ~0x04;
  3806  001CE0  948B               	bcf	3979,2,c	;volatile
  3807  001CE2  0012               	return	
  3808  001CE4                     __end_of_MTR_IN2:
  3809                           	opt stack 0
  3810                           tblptru	equ	0xFF8
  3811                           tblptrh	equ	0xFF7
  3812                           tblptrl	equ	0xFF6
  3813                           tablat	equ	0xFF5
  3814                           prodh	equ	0xFF4
  3815                           prodl	equ	0xFF3
  3816                           intcon	equ	0xFF2
  3817                           intcon3	equ	0xFF0
  3818                           postinc0	equ	0xFEE
  3819                           wreg	equ	0xFE8
  3820                           postdec1	equ	0xFE5
  3821                           fsr1h	equ	0xFE2
  3822                           fsr1l	equ	0xFE1
  3823                           status	equ	0xFD8
  3824                           
  3825 ;; *************** function _MTR_IN1 *****************
  3826 ;; Defined at:
  3827 ;;		line 54 in file "MOTOR.c"
  3828 ;; Parameters:    Size  Location     Type
  3829 ;;  state           1    wreg     unsigned char 
  3830 ;; Auto vars:     Size  Location     Type
  3831 ;;  state           1    0[BANK1 ] unsigned char 
  3832 ;; Return value:  Size  Location     Type
  3833 ;;		None               void
  3834 ;; Registers used:
  3835 ;;		wreg, status,2, status,0
  3836 ;; Tracked objects:
  3837 ;;		On entry : 0/0
  3838 ;;		On exit  : 0/0
  3839 ;;		Unchanged: 0/0
  3840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3841 ;;      Params:         0       0       0       0       0
  3842 ;;      Locals:         0       0       1       0       0
  3843 ;;      Temps:          0       0       0       0       0
  3844 ;;      Totals:         0       0       1       0       0
  3845 ;;Total ram usage:        1 bytes
  3846 ;; Hardware stack levels used:    1
  3847 ;; Hardware stack levels required when called:   12
  3848 ;; This function calls:
  3849 ;;		Nothing
  3850 ;; This function is called by:
  3851 ;;		_MTR_Rotate
  3852 ;; This function uses a non-reentrant model
  3853 ;;
  3854                           
  3855                           	psect	text12
  3856  001CE4                     __ptext12:
  3857                           	opt stack 0
  3858  001CE4                     _MTR_IN1:
  3859                           	opt stack 17
  3860                           
  3861                           ; BSR set to: 1
  3862                           ;incstack = 0
  3863                           ;MTR_IN1@state stored from wreg
  3864  001CE4  0101               	movlb	1	; () banked
  3865  001CE6  6F80               	movwf	MTR_IN1@state& (0+255),b
  3866                           
  3867                           ;MOTOR.c: 56: if(state)
  3868  001CE8  0101               	movlb	1	; () banked
  3869  001CEA  5180               	movf	MTR_IN1@state& (0+255),w,b
  3870  001CEC  0101               	movlb	1	; () banked
  3871  001CEE  B4D8               	btfsc	status,2,c
  3872  001CF0  D002               	goto	l8033
  3873                           
  3874                           ; BSR set to: 1
  3875                           ;MOTOR.c: 57: {
  3876                           ;MOTOR.c: 58: LATB |= 0x08;
  3877  001CF2  868A               	bsf	3978,3,c	;volatile
  3878                           
  3879                           ;MOTOR.c: 59: }
  3880  001CF4  0012               	return	
  3881  001CF6                     l8033:
  3882                           
  3883                           ; BSR set to: 1
  3884                           ;MOTOR.c: 60: else
  3885                           ;MOTOR.c: 61: {
  3886                           ;MOTOR.c: 62: LATB &= ~0x08;
  3887  001CF6  968A               	bcf	3978,3,c	;volatile
  3888  001CF8  0012               	return	
  3889  001CFA                     __end_of_MTR_IN1:
  3890                           	opt stack 0
  3891                           tblptru	equ	0xFF8
  3892                           tblptrh	equ	0xFF7
  3893                           tblptrl	equ	0xFF6
  3894                           tablat	equ	0xFF5
  3895                           prodh	equ	0xFF4
  3896                           prodl	equ	0xFF3
  3897                           intcon	equ	0xFF2
  3898                           intcon3	equ	0xFF0
  3899                           postinc0	equ	0xFEE
  3900                           wreg	equ	0xFE8
  3901                           postdec1	equ	0xFE5
  3902                           fsr1h	equ	0xFE2
  3903                           fsr1l	equ	0xFE1
  3904                           status	equ	0xFD8
  3905                           
  3906 ;; *************** function _MSC_BlinkLED *****************
  3907 ;; Defined at:
  3908 ;;		line 1158 in file "MISC.c"
  3909 ;; Parameters:    Size  Location     Type
  3910 ;;  blink           2   13[BANK1 ] unsigned int 
  3911 ;;  speed           2   15[BANK1 ] unsigned int 
  3912 ;; Auto vars:     Size  Location     Type
  3913 ;;  i               2   19[BANK1 ] unsigned int 
  3914 ;; Return value:  Size  Location     Type
  3915 ;;		None               void
  3916 ;; Registers used:
  3917 ;;		wreg, status,2, status,0, cstack
  3918 ;; Tracked objects:
  3919 ;;		On entry : 0/0
  3920 ;;		On exit  : 0/0
  3921 ;;		Unchanged: 0/0
  3922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  3923 ;;      Params:         0       0       4       0       0
  3924 ;;      Locals:         0       0       2       0       0
  3925 ;;      Temps:          0       0       2       0       0
  3926 ;;      Totals:         0       0       8       0       0
  3927 ;;Total ram usage:        8 bytes
  3928 ;; Hardware stack levels used:    1
  3929 ;; Hardware stack levels required when called:   14
  3930 ;; This function calls:
  3931 ;;		_MSC_DelayMS
  3932 ;; This function is called by:
  3933 ;;		_main
  3934 ;; This function uses a non-reentrant model
  3935 ;;
  3936                           
  3937                           	psect	text13
  3938  0015CC                     __ptext13:
  3939                           	opt stack 0
  3940  0015CC                     _MSC_BlinkLED:
  3941                           	opt stack 16
  3942                           
  3943                           ;MISC.c: 1160: unsigned int i;
  3944                           ;MISC.c: 1162: for(i=0;i<(blink<<1);i++)
  3945                           
  3946                           ; BSR set to: 1
  3947                           ;incstack = 0
  3948  0015CC  0E00               	movlw	0
  3949  0015CE  0101               	movlb	1	; () banked
  3950  0015D0  6F94               	movwf	(MSC_BlinkLED@i+1)& (0+255),b
  3951  0015D2  0E00               	movlw	0
  3952  0015D4  6F93               	movwf	MSC_BlinkLED@i& (0+255),b
  3953  0015D6  D00E               	goto	l8259
  3954  0015D8                     l8253:
  3955                           
  3956                           ; BSR set to: 1
  3957                           ;MISC.c: 1163: {
  3958                           ;MISC.c: 1164: MSC_DelayMS(speed);
  3959  0015D8  C18F  F184         	movff	MSC_BlinkLED@speed,MSC_DelayMS@US
  3960  0015DC  C190  F185         	movff	MSC_BlinkLED@speed+1,MSC_DelayMS@US+1
  3961  0015E0  0101               	movlb	1	; () banked
  3962  0015E2  6B86               	clrf	(MSC_DelayMS@US+2)& (0+255),b
  3963  0015E4  6B87               	clrf	(MSC_DelayMS@US+3)& (0+255),b
  3964  0015E6  EC5E  F00A         	call	_MSC_DelayMS	;wreg free
  3965                           
  3966                           ;MISC.c: 1165: (LATC ^= 0x10);
  3967  0015EA  0E10               	movlw	16
  3968  0015EC  1A8B               	xorwf	3979,f,c	;volatile
  3969  0015EE  0101               	movlb	1	; () banked
  3970  0015F0  4B93               	infsnz	MSC_BlinkLED@i& (0+255),f,b
  3971  0015F2  2B94               	incf	(MSC_BlinkLED@i+1)& (0+255),f,b
  3972  0015F4                     l8259:
  3973                           
  3974                           ; BSR set to: 1
  3975  0015F4  C18D  F191         	movff	MSC_BlinkLED@blink,??_MSC_BlinkLED
  3976  0015F8  C18E  F192         	movff	MSC_BlinkLED@blink+1,??_MSC_BlinkLED+1
  3977  0015FC  90D8               	bcf	status,0,c
  3978  0015FE  0101               	movlb	1	; () banked
  3979  001600  3791               	rlcf	??_MSC_BlinkLED& (0+255),f,b
  3980  001602  3792               	rlcf	(??_MSC_BlinkLED+1)& (0+255),f,b
  3981  001604  0101               	movlb	1	; () banked
  3982  001606  5191               	movf	??_MSC_BlinkLED& (0+255),w,b
  3983  001608  0101               	movlb	1	; () banked
  3984  00160A  5D93               	subwf	MSC_BlinkLED@i& (0+255),w,b
  3985  00160C  0101               	movlb	1	; () banked
  3986  00160E  5192               	movf	(??_MSC_BlinkLED+1)& (0+255),w,b
  3987  001610  0101               	movlb	1	; () banked
  3988  001612  5994               	subwfb	(MSC_BlinkLED@i+1)& (0+255),w,b
  3989  001614  B0D8               	btfsc	status,0,c
  3990  001616  0012               	return	
  3991  001618  D7DF               	goto	l8253
  3992  00161A                     __end_of_MSC_BlinkLED:
  3993                           	opt stack 0
  3994                           tblptru	equ	0xFF8
  3995                           tblptrh	equ	0xFF7
  3996                           tblptrl	equ	0xFF6
  3997                           tablat	equ	0xFF5
  3998                           prodh	equ	0xFF4
  3999                           prodl	equ	0xFF3
  4000                           intcon	equ	0xFF2
  4001                           intcon3	equ	0xFF0
  4002                           postinc0	equ	0xFEE
  4003                           wreg	equ	0xFE8
  4004                           postdec1	equ	0xFE5
  4005                           fsr1h	equ	0xFE2
  4006                           fsr1l	equ	0xFE1
  4007                           status	equ	0xFD8
  4008                           
  4009 ;; *************** function _MSC_DelayMS *****************
  4010 ;; Defined at:
  4011 ;;		line 47 in file "MISC.c"
  4012 ;; Parameters:    Size  Location     Type
  4013 ;;  US              4    4[BANK1 ] long 
  4014 ;; Auto vars:     Size  Location     Type
  4015 ;;  i               4    9[BANK1 ] long 
  4016 ;; Return value:  Size  Location     Type
  4017 ;;		None               void
  4018 ;; Registers used:
  4019 ;;		wreg, status,2, status,0, cstack
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4025 ;;      Params:         0       0       4       0       0
  4026 ;;      Locals:         0       0       4       0       0
  4027 ;;      Temps:          0       0       1       0       0
  4028 ;;      Totals:         0       0       9       0       0
  4029 ;;Total ram usage:        9 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:   13
  4032 ;; This function calls:
  4033 ;;		_MSC_DelayNOP
  4034 ;; This function is called by:
  4035 ;;		_main
  4036 ;;		_MTR_Rotate
  4037 ;;		_MSC_BlinkLED
  4038 ;; This function uses a non-reentrant model
  4039 ;;
  4040                           
  4041                           	psect	text14
  4042  0014BC                     __ptext14:
  4043                           	opt stack 0
  4044  0014BC                     _MSC_DelayMS:
  4045                           	opt stack 16
  4046                           
  4047                           ;MISC.c: 49: long i;
  4048                           ;MISC.c: 51: for(i=0; i<US; i++)
  4049                           
  4050                           ; BSR set to: 1
  4051                           ;incstack = 0
  4052  0014BC  0E00               	movlw	0
  4053  0014BE  0101               	movlb	1	; () banked
  4054  0014C0  6F89               	movwf	MSC_DelayMS@i& (0+255),b
  4055  0014C2  0E00               	movlw	0
  4056  0014C4  6F8A               	movwf	(MSC_DelayMS@i+1)& (0+255),b
  4057  0014C6  0E00               	movlw	0
  4058  0014C8  6F8B               	movwf	(MSC_DelayMS@i+2)& (0+255),b
  4059  0014CA  0E00               	movlw	0
  4060  0014CC  6F8C               	movwf	(MSC_DelayMS@i+3)& (0+255),b
  4061  0014CE  D00E               	goto	l7937
  4062  0014D0                     l7933:
  4063                           
  4064                           ; BSR set to: 1
  4065                           ;MISC.c: 52: {
  4066                           ;MISC.c: 53: MSC_DelayNOP(466);
  4067  0014D0  0E01               	movlw	1
  4068  0014D2  0101               	movlb	1	; () banked
  4069  0014D4  6F81               	movwf	(MSC_DelayNOP@NOPs+1)& (0+255),b
  4070  0014D6  0ED2               	movlw	210
  4071  0014D8  6F80               	movwf	MSC_DelayNOP@NOPs& (0+255),b
  4072  0014DA  ECED  F00C         	call	_MSC_DelayNOP	;wreg free
  4073  0014DE  0E01               	movlw	1
  4074  0014E0  0101               	movlb	1	; () banked
  4075  0014E2  2789               	addwf	MSC_DelayMS@i& (0+255),f,b
  4076  0014E4  0E00               	movlw	0
  4077  0014E6  238A               	addwfc	(MSC_DelayMS@i+1)& (0+255),f,b
  4078  0014E8  238B               	addwfc	(MSC_DelayMS@i+2)& (0+255),f,b
  4079  0014EA  238C               	addwfc	(MSC_DelayMS@i+3)& (0+255),f,b
  4080  0014EC                     l7937:
  4081                           
  4082                           ; BSR set to: 1
  4083  0014EC  0101               	movlb	1	; () banked
  4084  0014EE  5184               	movf	MSC_DelayMS@US& (0+255),w,b
  4085  0014F0  0101               	movlb	1	; () banked
  4086  0014F2  5D89               	subwf	MSC_DelayMS@i& (0+255),w,b
  4087  0014F4  0101               	movlb	1	; () banked
  4088  0014F6  5185               	movf	(MSC_DelayMS@US+1)& (0+255),w,b
  4089  0014F8  0101               	movlb	1	; () banked
  4090  0014FA  598A               	subwfb	(MSC_DelayMS@i+1)& (0+255),w,b
  4091  0014FC  0101               	movlb	1	; () banked
  4092  0014FE  5186               	movf	(MSC_DelayMS@US+2)& (0+255),w,b
  4093  001500  0101               	movlb	1	; () banked
  4094  001502  598B               	subwfb	(MSC_DelayMS@i+2)& (0+255),w,b
  4095  001504  0101               	movlb	1	; () banked
  4096  001506  518C               	movf	(MSC_DelayMS@i+3)& (0+255),w,b
  4097  001508  0A80               	xorlw	128
  4098  00150A  0101               	movlb	1	; () banked
  4099  00150C  6F88               	movwf	??_MSC_DelayMS& (0+255),b
  4100  00150E  0101               	movlb	1	; () banked
  4101  001510  5187               	movf	(MSC_DelayMS@US+3)& (0+255),w,b
  4102  001512  0A80               	xorlw	128
  4103  001514  0101               	movlb	1	; () banked
  4104  001516  5988               	subwfb	??_MSC_DelayMS& (0+255),w,b
  4105  001518  B0D8               	btfsc	status,0,c
  4106  00151A  0012               	return	
  4107  00151C  D7D9               	goto	l7933
  4108  00151E                     __end_of_MSC_DelayMS:
  4109                           	opt stack 0
  4110                           tblptru	equ	0xFF8
  4111                           tblptrh	equ	0xFF7
  4112                           tblptrl	equ	0xFF6
  4113                           tablat	equ	0xFF5
  4114                           prodh	equ	0xFF4
  4115                           prodl	equ	0xFF3
  4116                           intcon	equ	0xFF2
  4117                           intcon3	equ	0xFF0
  4118                           postinc0	equ	0xFEE
  4119                           wreg	equ	0xFE8
  4120                           postdec1	equ	0xFE5
  4121                           fsr1h	equ	0xFE2
  4122                           fsr1l	equ	0xFE1
  4123                           status	equ	0xFD8
  4124                           
  4125 ;; *************** function _MSC_DelayNOP *****************
  4126 ;; Defined at:
  4127 ;;		line 62 in file "MISC.c"
  4128 ;; Parameters:    Size  Location     Type
  4129 ;;  NOPs            2    0[BANK1 ] unsigned int 
  4130 ;; Auto vars:     Size  Location     Type
  4131 ;;  i               2    2[BANK1 ] unsigned int 
  4132 ;; Return value:  Size  Location     Type
  4133 ;;		None               void
  4134 ;; Registers used:
  4135 ;;		wreg, status,2, status,0
  4136 ;; Tracked objects:
  4137 ;;		On entry : 0/0
  4138 ;;		On exit  : 0/0
  4139 ;;		Unchanged: 0/0
  4140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4141 ;;      Params:         0       0       2       0       0
  4142 ;;      Locals:         0       0       2       0       0
  4143 ;;      Temps:          0       0       0       0       0
  4144 ;;      Totals:         0       0       4       0       0
  4145 ;;Total ram usage:        4 bytes
  4146 ;; Hardware stack levels used:    1
  4147 ;; Hardware stack levels required when called:   12
  4148 ;; This function calls:
  4149 ;;		Nothing
  4150 ;; This function is called by:
  4151 ;;		_MSC_DelayMS
  4152 ;; This function uses a non-reentrant model
  4153 ;;
  4154                           
  4155                           	psect	text15
  4156  0019DA                     __ptext15:
  4157                           	opt stack 0
  4158  0019DA                     _MSC_DelayNOP:
  4159                           	opt stack 16
  4160                           
  4161                           ;MISC.c: 64: unsigned int i;
  4162                           ;MISC.c: 65: for(i=0; i<NOPs; i++)
  4163                           
  4164                           ; BSR set to: 1
  4165                           ;incstack = 0
  4166  0019DA  0E00               	movlw	0
  4167  0019DC  0101               	movlb	1	; () banked
  4168  0019DE  6F83               	movwf	(MSC_DelayNOP@i+1)& (0+255),b
  4169  0019E0  0E00               	movlw	0
  4170  0019E2  6F82               	movwf	MSC_DelayNOP@i& (0+255),b
  4171  0019E4  D004               	goto	l7837
  4172  0019E6                     l618:
  4173                           
  4174                           ; BSR set to: 1
  4175                           ;MISC.c: 66: {
  4176                           ;MISC.c: 67: __nop();
  4177  0019E6  F000               	nop	
  4178  0019E8  0101               	movlb	1	; () banked
  4179  0019EA  4B82               	infsnz	MSC_DelayNOP@i& (0+255),f,b
  4180  0019EC  2B83               	incf	(MSC_DelayNOP@i+1)& (0+255),f,b
  4181  0019EE                     l7837:
  4182                           
  4183                           ; BSR set to: 1
  4184  0019EE  0101               	movlb	1	; () banked
  4185  0019F0  5180               	movf	MSC_DelayNOP@NOPs& (0+255),w,b
  4186  0019F2  0101               	movlb	1	; () banked
  4187  0019F4  5D82               	subwf	MSC_DelayNOP@i& (0+255),w,b
  4188  0019F6  0101               	movlb	1	; () banked
  4189  0019F8  5181               	movf	(MSC_DelayNOP@NOPs+1)& (0+255),w,b
  4190  0019FA  0101               	movlb	1	; () banked
  4191  0019FC  5983               	subwfb	(MSC_DelayNOP@i+1)& (0+255),w,b
  4192  0019FE  B0D8               	btfsc	status,0,c
  4193  001A00  0012               	return	
  4194  001A02  D7F1               	goto	l618
  4195  001A04                     __end_of_MSC_DelayNOP:
  4196                           	opt stack 0
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           intcon	equ	0xFF2
  4204                           intcon3	equ	0xFF0
  4205                           postinc0	equ	0xFEE
  4206                           wreg	equ	0xFE8
  4207                           postdec1	equ	0xFE5
  4208                           fsr1h	equ	0xFE2
  4209                           fsr1l	equ	0xFE1
  4210                           status	equ	0xFD8
  4211                           
  4212 ;; *************** function _Init_System *****************
  4213 ;; Defined at:
  4214 ;;		line 153 in file "USER.c"
  4215 ;; Parameters:    Size  Location     Type
  4216 ;;		None
  4217 ;; Auto vars:     Size  Location     Type
  4218 ;;		None
  4219 ;; Return value:  Size  Location     Type
  4220 ;;		None               void
  4221 ;; Registers used:
  4222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4223 ;; Tracked objects:
  4224 ;;		On entry : 0/0
  4225 ;;		On exit  : 0/0
  4226 ;;		Unchanged: 0/0
  4227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4228 ;;      Params:         0       0       0       0       0
  4229 ;;      Locals:         0       0       0       0       0
  4230 ;;      Temps:          0       0       0       0       0
  4231 ;;      Totals:         0       0       0       0       0
  4232 ;;Total ram usage:        0 bytes
  4233 ;; Hardware stack levels used:    1
  4234 ;; Hardware stack levels required when called:   17
  4235 ;; This function calls:
  4236 ;;		_BUT_ReadButton
  4237 ;;		_IR_ReadReceiver
  4238 ;;		_InitADC
  4239 ;;		_InitButton
  4240 ;;		_InitFlash
  4241 ;;		_InitIR
  4242 ;;		_InitLDO
  4243 ;;		_InitMOTOR
  4244 ;;		_InitRF
  4245 ;;		_InitTimers
  4246 ;; This function is called by:
  4247 ;;		_main
  4248 ;; This function uses a non-reentrant model
  4249 ;;
  4250                           
  4251                           	psect	text16
  4252  00191E                     __ptext16:
  4253                           	opt stack 0
  4254  00191E                     _Init_System:
  4255                           	opt stack 13
  4256                           
  4257                           ;USER.c: 155: InitTimers();
  4258                           
  4259                           ; BSR set to: 1
  4260                           ;incstack = 0
  4261  00191E  EC8C  F00F         	call	_InitTimers	;wreg free
  4262                           
  4263                           ;USER.c: 156: InitRF();
  4264  001922  EC92  F00B         	call	_InitRF	;wreg free
  4265                           
  4266                           ;USER.c: 157: InitButton();
  4267  001926  EC93  F00F         	call	_InitButton	;wreg free
  4268                           
  4269                           ;USER.c: 158: InitIR();
  4270  00192A  EC26  F00E         	call	_InitIR	;wreg free
  4271                           
  4272                           ;USER.c: 159: InitLDO();
  4273  00192E  ECC6  F00F         	call	_InitLDO	;wreg free
  4274                           
  4275                           ;USER.c: 160: InitMOTOR();
  4276  001932  ECD3  F00F         	call	_InitMOTOR	;wreg free
  4277                           
  4278                           ;USER.c: 161: InitFlash();
  4279  001936  ECD5  F00F         	call	_InitFlash	;wreg free
  4280                           
  4281                           ;USER.c: 162: InitADC();
  4282  00193A  EC6B  F00D         	call	_InitADC	;wreg free
  4283                           
  4284                           ;USER.c: 164: BUT_ReadButton();
  4285  00193E  EC25  F00C         	call	_BUT_ReadButton	;wreg free
  4286                           
  4287                           ;USER.c: 165: IR_ReadReceiver();
  4288  001942  EC40  F00C         	call	_IR_ReadReceiver	;wreg free
  4289                           
  4290                           ;USER.c: 166: INTCONbits.RBIF = 0;
  4291  001946  90F2               	bcf	intcon,0,c	;volatile
  4292                           
  4293                           ;USER.c: 169: RCONbits.IPEN = 1;
  4294  001948  8ED0               	bsf	4048,7,c	;volatile
  4295                           
  4296                           ;USER.c: 170: INTCONbits.GIE = 1;
  4297  00194A  8EF2               	bsf	intcon,7,c	;volatile
  4298                           
  4299                           ;USER.c: 171: INTCONbits.PEIE = 1;
  4300  00194C  8CF2               	bsf	intcon,6,c	;volatile
  4301  00194E  0012               	return		;funcret
  4302  001950                     __end_of_Init_System:
  4303                           	opt stack 0
  4304                           tblptru	equ	0xFF8
  4305                           tblptrh	equ	0xFF7
  4306                           tblptrl	equ	0xFF6
  4307                           tablat	equ	0xFF5
  4308                           prodh	equ	0xFF4
  4309                           prodl	equ	0xFF3
  4310                           intcon	equ	0xFF2
  4311                           intcon3	equ	0xFF0
  4312                           postinc0	equ	0xFEE
  4313                           wreg	equ	0xFE8
  4314                           postdec1	equ	0xFE5
  4315                           fsr1h	equ	0xFE2
  4316                           fsr1l	equ	0xFE1
  4317                           status	equ	0xFD8
  4318                           
  4319 ;; *************** function _InitTimers *****************
  4320 ;; Defined at:
  4321 ;;		line 304 in file "TIMERS.c"
  4322 ;; Parameters:    Size  Location     Type
  4323 ;;		None
  4324 ;; Auto vars:     Size  Location     Type
  4325 ;;		None
  4326 ;; Return value:  Size  Location     Type
  4327 ;;		None               void
  4328 ;; Registers used:
  4329 ;;		wreg, status,2, status,0, cstack
  4330 ;; Tracked objects:
  4331 ;;		On entry : 0/0
  4332 ;;		On exit  : 0/0
  4333 ;;		Unchanged: 0/0
  4334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4335 ;;      Params:         0       0       0       0       0
  4336 ;;      Locals:         0       0       0       0       0
  4337 ;;      Temps:          0       0       0       0       0
  4338 ;;      Totals:         0       0       0       0       0
  4339 ;;Total ram usage:        0 bytes
  4340 ;; Hardware stack levels used:    1
  4341 ;; Hardware stack levels required when called:   16
  4342 ;; This function calls:
  4343 ;;		_InitTimer0
  4344 ;;		_InitTimer1
  4345 ;;		_InitTimer2
  4346 ;; This function is called by:
  4347 ;;		_Init_System
  4348 ;; This function uses a non-reentrant model
  4349 ;;
  4350                           
  4351                           	psect	text17
  4352  001F18                     __ptext17:
  4353                           	opt stack 0
  4354  001F18                     _InitTimers:
  4355                           	opt stack 13
  4356                           
  4357                           ;TIMERS.c: 306: InitTimer0();
  4358                           
  4359                           ;incstack = 0
  4360  001F18  ECDB  F00D         	call	_InitTimer0	;wreg free
  4361                           
  4362                           ;TIMERS.c: 307: InitTimer1();
  4363  001F1C  EC18  F00E         	call	_InitTimer1	;wreg free
  4364                           
  4365                           ;TIMERS.c: 308: InitTimer2();
  4366  001F20  ECEC  F00D         	call	_InitTimer2	;wreg free
  4367  001F24  0012               	return		;funcret
  4368  001F26                     __end_of_InitTimers:
  4369                           	opt stack 0
  4370                           tblptru	equ	0xFF8
  4371                           tblptrh	equ	0xFF7
  4372                           tblptrl	equ	0xFF6
  4373                           tablat	equ	0xFF5
  4374                           prodh	equ	0xFF4
  4375                           prodl	equ	0xFF3
  4376                           intcon	equ	0xFF2
  4377                           intcon3	equ	0xFF0
  4378                           postinc0	equ	0xFEE
  4379                           wreg	equ	0xFE8
  4380                           postdec1	equ	0xFE5
  4381                           fsr1h	equ	0xFE2
  4382                           fsr1l	equ	0xFE1
  4383                           status	equ	0xFD8
  4384                           
  4385 ;; *************** function _InitTimer2 *****************
  4386 ;; Defined at:
  4387 ;;		line 348 in file "TIMERS.c"
  4388 ;; Parameters:    Size  Location     Type
  4389 ;;		None
  4390 ;; Auto vars:     Size  Location     Type
  4391 ;;		None
  4392 ;; Return value:  Size  Location     Type
  4393 ;;		None               void
  4394 ;; Registers used:
  4395 ;;		wreg, status,2, cstack
  4396 ;; Tracked objects:
  4397 ;;		On entry : 0/0
  4398 ;;		On exit  : 0/0
  4399 ;;		Unchanged: 0/0
  4400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4401 ;;      Params:         0       0       0       0       0
  4402 ;;      Locals:         0       0       0       0       0
  4403 ;;      Temps:          0       0       0       0       0
  4404 ;;      Totals:         0       0       0       0       0
  4405 ;;Total ram usage:        0 bytes
  4406 ;; Hardware stack levels used:    1
  4407 ;; Hardware stack levels required when called:   13
  4408 ;; This function calls:
  4409 ;;		_TMR_Timer2
  4410 ;;		_TMR_Timer2Int
  4411 ;; This function is called by:
  4412 ;;		_InitTimers
  4413 ;; This function uses a non-reentrant model
  4414 ;;
  4415                           
  4416                           	psect	text18
  4417  001BD8                     __ptext18:
  4418                           	opt stack 0
  4419  001BD8                     _InitTimer2:
  4420                           	opt stack 15
  4421                           
  4422                           ;TIMERS.c: 350: TMR_Timer2(0);
  4423                           
  4424                           ;incstack = 0
  4425  001BD8  0E00               	movlw	0
  4426  001BDA  EC88  F00E         	call	_TMR_Timer2
  4427                           
  4428                           ;TIMERS.c: 351: T2CONbits.TOUTPS = 0b1111;
  4429  001BDE  86CA               	bsf	4042,3,c	;volatile
  4430  001BE0  88CA               	bsf	4042,4,c	;volatile
  4431  001BE2  8ACA               	bsf	4042,5,c	;volatile
  4432  001BE4  8CCA               	bsf	4042,6,c	;volatile
  4433                           
  4434                           ;TIMERS.c: 352: T2CONbits.T2CKPS = 0b11;
  4435  001BE6  0E03               	movlw	3
  4436  001BE8  12CA               	iorwf	4042,f,c	;volatile
  4437                           
  4438                           ;TIMERS.c: 353: IPR1bits.TMR2IP = 0;
  4439  001BEA  929F               	bcf	3999,1,c	;volatile
  4440                           
  4441                           ;TIMERS.c: 354: PR2 = 0xFF;
  4442  001BEC  68CB               	setf	4043,c	;volatile
  4443                           
  4444                           ;TIMERS.c: 355: TMR_Timer2Int(1);
  4445  001BEE  0E01               	movlw	1
  4446  001BF0  EC7D  F00E         	call	_TMR_Timer2Int
  4447  001BF4  0012               	return		;funcret
  4448  001BF6                     __end_of_InitTimer2:
  4449                           	opt stack 0
  4450                           tblptru	equ	0xFF8
  4451                           tblptrh	equ	0xFF7
  4452                           tblptrl	equ	0xFF6
  4453                           tablat	equ	0xFF5
  4454                           prodh	equ	0xFF4
  4455                           prodl	equ	0xFF3
  4456                           intcon	equ	0xFF2
  4457                           intcon3	equ	0xFF0
  4458                           postinc0	equ	0xFEE
  4459                           wreg	equ	0xFE8
  4460                           postdec1	equ	0xFE5
  4461                           fsr1h	equ	0xFE2
  4462                           fsr1l	equ	0xFE1
  4463                           status	equ	0xFD8
  4464                           
  4465 ;; *************** function _TMR_Timer2Int *****************
  4466 ;; Defined at:
  4467 ;;		line 246 in file "TIMERS.c"
  4468 ;; Parameters:    Size  Location     Type
  4469 ;;  state           1    wreg     unsigned char 
  4470 ;; Auto vars:     Size  Location     Type
  4471 ;;  state           1    0[BANK1 ] unsigned char 
  4472 ;; Return value:  Size  Location     Type
  4473 ;;		None               void
  4474 ;; Registers used:
  4475 ;;		wreg, status,2
  4476 ;; Tracked objects:
  4477 ;;		On entry : 0/0
  4478 ;;		On exit  : 0/0
  4479 ;;		Unchanged: 0/0
  4480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4481 ;;      Params:         0       0       0       0       0
  4482 ;;      Locals:         0       0       1       0       0
  4483 ;;      Temps:          0       0       0       0       0
  4484 ;;      Totals:         0       0       1       0       0
  4485 ;;Total ram usage:        1 bytes
  4486 ;; Hardware stack levels used:    1
  4487 ;; Hardware stack levels required when called:   12
  4488 ;; This function calls:
  4489 ;;		Nothing
  4490 ;; This function is called by:
  4491 ;;		_InitTimer2
  4492 ;; This function uses a non-reentrant model
  4493 ;;
  4494                           
  4495                           	psect	text19
  4496  001CFA                     __ptext19:
  4497                           	opt stack 0
  4498  001CFA                     _TMR_Timer2Int:
  4499                           	opt stack 15
  4500                           
  4501                           ;incstack = 0
  4502                           ;TMR_Timer2Int@state stored from wreg
  4503  001CFA  0101               	movlb	1	; () banked
  4504  001CFC  6F80               	movwf	TMR_Timer2Int@state& (0+255),b
  4505                           
  4506                           ;TIMERS.c: 248: if(state)
  4507  001CFE  0101               	movlb	1	; () banked
  4508  001D00  5180               	movf	TMR_Timer2Int@state& (0+255),w,b
  4509  001D02  0101               	movlb	1	; () banked
  4510  001D04  B4D8               	btfsc	status,2,c
  4511  001D06  D002               	goto	l1096
  4512                           
  4513                           ; BSR set to: 1
  4514                           ;TIMERS.c: 249: {
  4515                           ;TIMERS.c: 251: PIE1bits.TMR2IE = 1;
  4516  001D08  829D               	bsf	3997,1,c	;volatile
  4517                           
  4518                           ;TIMERS.c: 252: }
  4519  001D0A  0012               	return	
  4520  001D0C                     l1096:
  4521                           
  4522                           ; BSR set to: 1
  4523                           ;TIMERS.c: 253: else
  4524                           ;TIMERS.c: 254: {
  4525                           ;TIMERS.c: 256: PIE1bits.TMR2IE = 0;
  4526  001D0C  929D               	bcf	3997,1,c	;volatile
  4527  001D0E  0012               	return	
  4528  001D10                     __end_of_TMR_Timer2Int:
  4529                           	opt stack 0
  4530                           tblptru	equ	0xFF8
  4531                           tblptrh	equ	0xFF7
  4532                           tblptrl	equ	0xFF6
  4533                           tablat	equ	0xFF5
  4534                           prodh	equ	0xFF4
  4535                           prodl	equ	0xFF3
  4536                           intcon	equ	0xFF2
  4537                           intcon3	equ	0xFF0
  4538                           postinc0	equ	0xFEE
  4539                           wreg	equ	0xFE8
  4540                           postdec1	equ	0xFE5
  4541                           fsr1h	equ	0xFE2
  4542                           fsr1l	equ	0xFE1
  4543                           status	equ	0xFD8
  4544                           
  4545 ;; *************** function _TMR_Timer2 *****************
  4546 ;; Defined at:
  4547 ;;		line 125 in file "TIMERS.c"
  4548 ;; Parameters:    Size  Location     Type
  4549 ;;  state           1    wreg     unsigned char 
  4550 ;; Auto vars:     Size  Location     Type
  4551 ;;  state           1    0[BANK1 ] unsigned char 
  4552 ;; Return value:  Size  Location     Type
  4553 ;;		None               void
  4554 ;; Registers used:
  4555 ;;		wreg, status,2
  4556 ;; Tracked objects:
  4557 ;;		On entry : 0/0
  4558 ;;		On exit  : 0/0
  4559 ;;		Unchanged: 0/0
  4560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4561 ;;      Params:         0       0       0       0       0
  4562 ;;      Locals:         0       0       1       0       0
  4563 ;;      Temps:          0       0       0       0       0
  4564 ;;      Totals:         0       0       1       0       0
  4565 ;;Total ram usage:        1 bytes
  4566 ;; Hardware stack levels used:    1
  4567 ;; Hardware stack levels required when called:   12
  4568 ;; This function calls:
  4569 ;;		Nothing
  4570 ;; This function is called by:
  4571 ;;		_InitTimer2
  4572 ;; This function uses a non-reentrant model
  4573 ;;
  4574                           
  4575                           	psect	text20
  4576  001D10                     __ptext20:
  4577                           	opt stack 0
  4578  001D10                     _TMR_Timer2:
  4579                           	opt stack 15
  4580                           
  4581                           ; BSR set to: 1
  4582                           ;incstack = 0
  4583                           ;TMR_Timer2@state stored from wreg
  4584  001D10  0101               	movlb	1	; () banked
  4585  001D12  6F80               	movwf	TMR_Timer2@state& (0+255),b
  4586                           
  4587                           ;TIMERS.c: 127: if(state)
  4588  001D14  0101               	movlb	1	; () banked
  4589  001D16  5180               	movf	TMR_Timer2@state& (0+255),w,b
  4590  001D18  0101               	movlb	1	; () banked
  4591  001D1A  B4D8               	btfsc	status,2,c
  4592  001D1C  D002               	goto	l1066
  4593                           
  4594                           ; BSR set to: 1
  4595                           ;TIMERS.c: 128: {
  4596                           ;TIMERS.c: 130: T2CONbits.TMR2ON = 1;
  4597  001D1E  84CA               	bsf	4042,2,c	;volatile
  4598                           
  4599                           ;TIMERS.c: 131: }
  4600  001D20  0012               	return	
  4601  001D22                     l1066:
  4602                           
  4603                           ; BSR set to: 1
  4604                           ;TIMERS.c: 132: else
  4605                           ;TIMERS.c: 133: {
  4606                           ;TIMERS.c: 135: T2CONbits.TMR2ON = 0;
  4607  001D22  94CA               	bcf	4042,2,c	;volatile
  4608  001D24  0012               	return	
  4609  001D26                     __end_of_TMR_Timer2:
  4610                           	opt stack 0
  4611                           tblptru	equ	0xFF8
  4612                           tblptrh	equ	0xFF7
  4613                           tblptrl	equ	0xFF6
  4614                           tablat	equ	0xFF5
  4615                           prodh	equ	0xFF4
  4616                           prodl	equ	0xFF3
  4617                           intcon	equ	0xFF2
  4618                           intcon3	equ	0xFF0
  4619                           postinc0	equ	0xFEE
  4620                           wreg	equ	0xFE8
  4621                           postdec1	equ	0xFE5
  4622                           fsr1h	equ	0xFE2
  4623                           fsr1l	equ	0xFE1
  4624                           status	equ	0xFD8
  4625                           
  4626 ;; *************** function _InitTimer1 *****************
  4627 ;; Defined at:
  4628 ;;		line 333 in file "TIMERS.c"
  4629 ;; Parameters:    Size  Location     Type
  4630 ;;		None
  4631 ;; Auto vars:     Size  Location     Type
  4632 ;;		None
  4633 ;; Return value:  Size  Location     Type
  4634 ;;		None               void
  4635 ;; Registers used:
  4636 ;;		wreg, status,2, status,0, cstack
  4637 ;; Tracked objects:
  4638 ;;		On entry : 0/0
  4639 ;;		On exit  : 0/0
  4640 ;;		Unchanged: 0/0
  4641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4642 ;;      Params:         0       0       0       0       0
  4643 ;;      Locals:         0       0       0       0       0
  4644 ;;      Temps:          0       0       0       0       0
  4645 ;;      Totals:         0       0       0       0       0
  4646 ;;Total ram usage:        0 bytes
  4647 ;; Hardware stack levels used:    1
  4648 ;; Hardware stack levels required when called:   15
  4649 ;; This function calls:
  4650 ;;		_TMR_ResetTimer1
  4651 ;;		_TMR_Timer1
  4652 ;;		_TMR_Timer1Function
  4653 ;;		_TMR_Timer1Int
  4654 ;; This function is called by:
  4655 ;;		_InitTimers
  4656 ;; This function uses a non-reentrant model
  4657 ;;
  4658                           
  4659                           	psect	text21
  4660  001C30                     __ptext21:
  4661                           	opt stack 0
  4662  001C30                     _InitTimer1:
  4663                           	opt stack 13
  4664                           
  4665                           ;TIMERS.c: 335: TMR_Timer1(0);
  4666                           
  4667                           ; BSR set to: 1
  4668                           ;incstack = 0
  4669  001C30  0E00               	movlw	0
  4670  001C32  EC9E  F00E         	call	_TMR_Timer1
  4671                           
  4672                           ;TIMERS.c: 336: TMR_ResetTimer1();
  4673  001C36  EC02  F00D         	call	_TMR_ResetTimer1	;wreg free
  4674                           
  4675                           ;TIMERS.c: 337: T1CONbits.RD16 = 1;
  4676  001C3A  8ECD               	bsf	4045,7,c	;volatile
  4677                           
  4678                           ;TIMERS.c: 338: TMR_Timer1Function(16);
  4679  001C3C  0E10               	movlw	16
  4680  001C3E  ECA8  F00C         	call	_TMR_Timer1Function
  4681                           
  4682                           ;TIMERS.c: 339: IPR1bits.TMR1IP = 0;
  4683  001C42  909F               	bcf	3999,0,c	;volatile
  4684                           
  4685                           ;TIMERS.c: 340: TMR_Timer1Int(1);
  4686  001C44  0E01               	movlw	1
  4687  001C46  EC93  F00E         	call	_TMR_Timer1Int
  4688  001C4A  0012               	return		;funcret
  4689  001C4C                     __end_of_InitTimer1:
  4690                           	opt stack 0
  4691                           tblptru	equ	0xFF8
  4692                           tblptrh	equ	0xFF7
  4693                           tblptrl	equ	0xFF6
  4694                           tablat	equ	0xFF5
  4695                           prodh	equ	0xFF4
  4696                           prodl	equ	0xFF3
  4697                           intcon	equ	0xFF2
  4698                           intcon3	equ	0xFF0
  4699                           postinc0	equ	0xFEE
  4700                           wreg	equ	0xFE8
  4701                           postdec1	equ	0xFE5
  4702                           fsr1h	equ	0xFE2
  4703                           fsr1l	equ	0xFE1
  4704                           status	equ	0xFD8
  4705                           
  4706 ;; *************** function _TMR_Timer1Int *****************
  4707 ;; Defined at:
  4708 ;;		line 227 in file "TIMERS.c"
  4709 ;; Parameters:    Size  Location     Type
  4710 ;;  state           1    wreg     unsigned char 
  4711 ;; Auto vars:     Size  Location     Type
  4712 ;;  state           1    0[BANK1 ] unsigned char 
  4713 ;; Return value:  Size  Location     Type
  4714 ;;		None               void
  4715 ;; Registers used:
  4716 ;;		wreg, status,2
  4717 ;; Tracked objects:
  4718 ;;		On entry : 0/0
  4719 ;;		On exit  : 0/0
  4720 ;;		Unchanged: 0/0
  4721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4722 ;;      Params:         0       0       0       0       0
  4723 ;;      Locals:         0       0       1       0       0
  4724 ;;      Temps:          0       0       0       0       0
  4725 ;;      Totals:         0       0       1       0       0
  4726 ;;Total ram usage:        1 bytes
  4727 ;; Hardware stack levels used:    1
  4728 ;; Hardware stack levels required when called:   12
  4729 ;; This function calls:
  4730 ;;		Nothing
  4731 ;; This function is called by:
  4732 ;;		_InitTimer1
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735                           
  4736                           	psect	text22
  4737  001D26                     __ptext22:
  4738                           	opt stack 0
  4739  001D26                     _TMR_Timer1Int:
  4740                           	opt stack 15
  4741                           
  4742                           ;incstack = 0
  4743                           ;TMR_Timer1Int@state stored from wreg
  4744  001D26  0101               	movlb	1	; () banked
  4745  001D28  6F80               	movwf	TMR_Timer1Int@state& (0+255),b
  4746                           
  4747                           ;TIMERS.c: 229: if(state)
  4748  001D2A  0101               	movlb	1	; () banked
  4749  001D2C  5180               	movf	TMR_Timer1Int@state& (0+255),w,b
  4750  001D2E  0101               	movlb	1	; () banked
  4751  001D30  B4D8               	btfsc	status,2,c
  4752  001D32  D002               	goto	l1091
  4753                           
  4754                           ; BSR set to: 1
  4755                           ;TIMERS.c: 230: {
  4756                           ;TIMERS.c: 232: PIE1bits.TMR1IE = 1;
  4757  001D34  809D               	bsf	3997,0,c	;volatile
  4758                           
  4759                           ;TIMERS.c: 233: }
  4760  001D36  0012               	return	
  4761  001D38                     l1091:
  4762                           
  4763                           ; BSR set to: 1
  4764                           ;TIMERS.c: 234: else
  4765                           ;TIMERS.c: 235: {
  4766                           ;TIMERS.c: 237: PIE1bits.TMR1IE = 0;
  4767  001D38  909D               	bcf	3997,0,c	;volatile
  4768  001D3A  0012               	return	
  4769  001D3C                     __end_of_TMR_Timer1Int:
  4770                           	opt stack 0
  4771                           tblptru	equ	0xFF8
  4772                           tblptrh	equ	0xFF7
  4773                           tblptrl	equ	0xFF6
  4774                           tablat	equ	0xFF5
  4775                           prodh	equ	0xFF4
  4776                           prodl	equ	0xFF3
  4777                           intcon	equ	0xFF2
  4778                           intcon3	equ	0xFF0
  4779                           postinc0	equ	0xFEE
  4780                           wreg	equ	0xFE8
  4781                           postdec1	equ	0xFE5
  4782                           fsr1h	equ	0xFE2
  4783                           fsr1l	equ	0xFE1
  4784                           status	equ	0xFD8
  4785                           
  4786 ;; *************** function _TMR_Timer1Function *****************
  4787 ;; Defined at:
  4788 ;;		line 402 in file "TIMERS.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  mode            1    wreg     unsigned char 
  4791 ;; Auto vars:     Size  Location     Type
  4792 ;;  mode            1    2[BANK1 ] unsigned char 
  4793 ;; Return value:  Size  Location     Type
  4794 ;;		None               void
  4795 ;; Registers used:
  4796 ;;		wreg, status,2, status,0, cstack
  4797 ;; Tracked objects:
  4798 ;;		On entry : 0/0
  4799 ;;		On exit  : 0/0
  4800 ;;		Unchanged: 0/0
  4801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4802 ;;      Params:         0       0       0       0       0
  4803 ;;      Locals:         0       0       1       0       0
  4804 ;;      Temps:          0       0       0       0       0
  4805 ;;      Totals:         0       0       1       0       0
  4806 ;;Total ram usage:        1 bytes
  4807 ;; Hardware stack levels used:    1
  4808 ;; Hardware stack levels required when called:   14
  4809 ;; This function calls:
  4810 ;;		_TMR_ResetTimer1
  4811 ;;		_TMR_Timer1
  4812 ;;		_TMR_Timer1Osc
  4813 ;; This function is called by:
  4814 ;;		_InitTimer1
  4815 ;; This function uses a non-reentrant model
  4816 ;;
  4817                           
  4818                           	psect	text23
  4819  001950                     __ptext23:
  4820                           	opt stack 0
  4821  001950                     _TMR_Timer1Function:
  4822                           	opt stack 13
  4823                           
  4824                           ; BSR set to: 1
  4825                           ;incstack = 0
  4826                           ;TMR_Timer1Function@mode stored from wreg
  4827  001950  0101               	movlb	1	; () banked
  4828  001952  6F82               	movwf	TMR_Timer1Function@mode& (0+255),b
  4829                           
  4830                           ;TIMERS.c: 404: TMR_Timer1(0);
  4831  001954  0E00               	movlw	0
  4832  001956  EC9E  F00E         	call	_TMR_Timer1
  4833                           
  4834                           ;TIMERS.c: 405: if(mode == 15)
  4835  00195A  0E0F               	movlw	15
  4836  00195C  0101               	movlb	1	; () banked
  4837  00195E  1982               	xorwf	TMR_Timer1Function@mode& (0+255),w,b
  4838  001960  A4D8               	btfss	status,2,c
  4839  001962  D006               	goto	l7765
  4840                           
  4841                           ; BSR set to: 1
  4842                           ;TIMERS.c: 406: {
  4843                           ;TIMERS.c: 407: T1CONbits.T1CKPS = 0b00;
  4844  001964  0ECF               	movlw	-49
  4845  001966  16CD               	andwf	4045,f,c	;volatile
  4846                           
  4847                           ; BSR set to: 1
  4848                           ;TIMERS.c: 408: TMR_Timer1Osc(1);
  4849  001968  0E01               	movlw	1
  4850  00196A  ECFB  F00D         	call	_TMR_Timer1Osc
  4851                           
  4852                           ;TIMERS.c: 409: }
  4853  00196E  D005               	goto	l7769
  4854  001970                     l7765:
  4855                           
  4856                           ;TIMERS.c: 410: else
  4857                           ;TIMERS.c: 411: {
  4858                           ;TIMERS.c: 412: T1CONbits.T1CKPS = 0b11;
  4859  001970  0E30               	movlw	48
  4860  001972  12CD               	iorwf	4045,f,c	;volatile
  4861                           
  4862                           ;TIMERS.c: 413: TMR_Timer1Osc(0);
  4863  001974  0E00               	movlw	0
  4864  001976  ECFB  F00D         	call	_TMR_Timer1Osc
  4865  00197A                     l7769:
  4866                           
  4867                           ;TIMERS.c: 414: }
  4868                           ;TIMERS.c: 415: TMR_ResetTimer1();
  4869  00197A  EC02  F00D         	call	_TMR_ResetTimer1	;wreg free
  4870  00197E  0012               	return		;funcret
  4871  001980                     __end_of_TMR_Timer1Function:
  4872                           	opt stack 0
  4873                           tblptru	equ	0xFF8
  4874                           tblptrh	equ	0xFF7
  4875                           tblptrl	equ	0xFF6
  4876                           tablat	equ	0xFF5
  4877                           prodh	equ	0xFF4
  4878                           prodl	equ	0xFF3
  4879                           intcon	equ	0xFF2
  4880                           intcon3	equ	0xFF0
  4881                           postinc0	equ	0xFEE
  4882                           wreg	equ	0xFE8
  4883                           postdec1	equ	0xFE5
  4884                           fsr1h	equ	0xFE2
  4885                           fsr1l	equ	0xFE1
  4886                           status	equ	0xFD8
  4887                           
  4888 ;; *************** function _TMR_Timer1Osc *****************
  4889 ;; Defined at:
  4890 ;;		line 265 in file "TIMERS.c"
  4891 ;; Parameters:    Size  Location     Type
  4892 ;;  state           1    wreg     unsigned char 
  4893 ;; Auto vars:     Size  Location     Type
  4894 ;;  state           1    0[BANK1 ] unsigned char 
  4895 ;; Return value:  Size  Location     Type
  4896 ;;		None               void
  4897 ;; Registers used:
  4898 ;;		wreg, status,2
  4899 ;; Tracked objects:
  4900 ;;		On entry : 0/0
  4901 ;;		On exit  : 0/0
  4902 ;;		Unchanged: 0/0
  4903 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4904 ;;      Params:         0       0       0       0       0
  4905 ;;      Locals:         0       0       1       0       0
  4906 ;;      Temps:          0       0       0       0       0
  4907 ;;      Totals:         0       0       1       0       0
  4908 ;;Total ram usage:        1 bytes
  4909 ;; Hardware stack levels used:    1
  4910 ;; Hardware stack levels required when called:   12
  4911 ;; This function calls:
  4912 ;;		Nothing
  4913 ;; This function is called by:
  4914 ;;		_TMR_Timer1Function
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           	psect	text24
  4919  001BF6                     __ptext24:
  4920                           	opt stack 0
  4921  001BF6                     _TMR_Timer1Osc:
  4922                           	opt stack 14
  4923                           
  4924                           ;incstack = 0
  4925                           ;TMR_Timer1Osc@state stored from wreg
  4926  001BF6  0101               	movlb	1	; () banked
  4927  001BF8  6F80               	movwf	TMR_Timer1Osc@state& (0+255),b
  4928                           
  4929                           ;TIMERS.c: 267: if(state)
  4930  001BFA  0101               	movlb	1	; () banked
  4931  001BFC  5180               	movf	TMR_Timer1Osc@state& (0+255),w,b
  4932  001BFE  0101               	movlb	1	; () banked
  4933  001C00  B4D8               	btfsc	status,2,c
  4934  001C02  D004               	goto	l1101
  4935                           
  4936                           ; BSR set to: 1
  4937                           ;TIMERS.c: 268: {
  4938                           ;TIMERS.c: 269: T1CONbits.T1RUN = 1;
  4939  001C04  8CCD               	bsf	4045,6,c	;volatile
  4940                           
  4941                           ;TIMERS.c: 270: T1CONbits.T1OSCEN = 1;
  4942  001C06  86CD               	bsf	4045,3,c	;volatile
  4943                           
  4944                           ;TIMERS.c: 271: T1CONbits.TMR1CS = 1;
  4945  001C08  82CD               	bsf	4045,1,c	;volatile
  4946                           
  4947                           ;TIMERS.c: 272: }
  4948  001C0A  0012               	return	
  4949  001C0C                     l1101:
  4950                           
  4951                           ; BSR set to: 1
  4952                           ;TIMERS.c: 273: else
  4953                           ;TIMERS.c: 274: {
  4954                           ;TIMERS.c: 275: T1CONbits.T1RUN = 0;
  4955  001C0C  9CCD               	bcf	4045,6,c	;volatile
  4956                           
  4957                           ;TIMERS.c: 276: T1CONbits.T1OSCEN = 0;
  4958  001C0E  96CD               	bcf	4045,3,c	;volatile
  4959                           
  4960                           ;TIMERS.c: 277: T1CONbits.TMR1CS = 0;
  4961  001C10  92CD               	bcf	4045,1,c	;volatile
  4962  001C12  0012               	return	
  4963  001C14                     __end_of_TMR_Timer1Osc:
  4964                           	opt stack 0
  4965                           tblptru	equ	0xFF8
  4966                           tblptrh	equ	0xFF7
  4967                           tblptrl	equ	0xFF6
  4968                           tablat	equ	0xFF5
  4969                           prodh	equ	0xFF4
  4970                           prodl	equ	0xFF3
  4971                           intcon	equ	0xFF2
  4972                           intcon3	equ	0xFF0
  4973                           postinc0	equ	0xFEE
  4974                           wreg	equ	0xFE8
  4975                           postdec1	equ	0xFE5
  4976                           fsr1h	equ	0xFE2
  4977                           fsr1l	equ	0xFE1
  4978                           status	equ	0xFD8
  4979                           
  4980 ;; *************** function _TMR_ResetTimer1 *****************
  4981 ;; Defined at:
  4982 ;;		line 162 in file "TIMERS.c"
  4983 ;; Parameters:    Size  Location     Type
  4984 ;;		None
  4985 ;; Auto vars:     Size  Location     Type
  4986 ;;  TimerOn         1    1[BANK1 ] unsigned char 
  4987 ;; Return value:  Size  Location     Type
  4988 ;;		None               void
  4989 ;; Registers used:
  4990 ;;		wreg, status,2, cstack
  4991 ;; Tracked objects:
  4992 ;;		On entry : 0/0
  4993 ;;		On exit  : 0/0
  4994 ;;		Unchanged: 0/0
  4995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  4996 ;;      Params:         0       0       0       0       0
  4997 ;;      Locals:         0       0       1       0       0
  4998 ;;      Temps:          0       0       0       0       0
  4999 ;;      Totals:         0       0       1       0       0
  5000 ;;Total ram usage:        1 bytes
  5001 ;; Hardware stack levels used:    1
  5002 ;; Hardware stack levels required when called:   13
  5003 ;; This function calls:
  5004 ;;		_TMR_Timer1
  5005 ;; This function is called by:
  5006 ;;		_InitTimer1
  5007 ;;		_TMR_Timer1Function
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text25
  5012  001A04                     __ptext25:
  5013                           	opt stack 0
  5014  001A04                     _TMR_ResetTimer1:
  5015                           	opt stack 13
  5016                           
  5017                           ;TIMERS.c: 164: unsigned char TimerOn = T1CONbits.TMR1ON;
  5018                           
  5019                           ; BSR set to: 1
  5020                           ;incstack = 0
  5021  001A04  0E00               	movlw	0
  5022  001A06  B0CD               	btfsc	4045,0,c	;volatile
  5023  001A08  0E01               	movlw	1
  5024  001A0A  0101               	movlb	1	; () banked
  5025  001A0C  6F81               	movwf	TMR_ResetTimer1@TimerOn& (0+255),b
  5026                           
  5027                           ; BSR set to: 1
  5028                           ;TIMERS.c: 166: TMR_Timer1(0);
  5029  001A0E  0E00               	movlw	0
  5030  001A10  EC9E  F00E         	call	_TMR_Timer1
  5031                           
  5032                           ;TIMERS.c: 167: TMR1H = 0;
  5033  001A14  0E00               	movlw	0
  5034  001A16  6ECF               	movwf	4047,c	;volatile
  5035                           
  5036                           ;TIMERS.c: 168: TMR1L = 2;
  5037  001A18  0E02               	movlw	2
  5038  001A1A  6ECE               	movwf	4046,c	;volatile
  5039                           
  5040                           ;TIMERS.c: 169: if(TimerOn)
  5041  001A1C  0101               	movlb	1	; () banked
  5042  001A1E  5181               	movf	TMR_ResetTimer1@TimerOn& (0+255),w,b
  5043  001A20  0101               	movlb	1	; () banked
  5044  001A22  B4D8               	btfsc	status,2,c
  5045  001A24  0012               	return	
  5046                           
  5047                           ; BSR set to: 1
  5048                           ;TIMERS.c: 170: {
  5049                           ;TIMERS.c: 171: TMR_Timer1(1);
  5050  001A26  0E01               	movlw	1
  5051  001A28  EC9E  F00E         	call	_TMR_Timer1
  5052  001A2C  0012               	return	
  5053  001A2E                     __end_of_TMR_ResetTimer1:
  5054                           	opt stack 0
  5055                           tblptru	equ	0xFF8
  5056                           tblptrh	equ	0xFF7
  5057                           tblptrl	equ	0xFF6
  5058                           tablat	equ	0xFF5
  5059                           prodh	equ	0xFF4
  5060                           prodl	equ	0xFF3
  5061                           intcon	equ	0xFF2
  5062                           intcon3	equ	0xFF0
  5063                           postinc0	equ	0xFEE
  5064                           wreg	equ	0xFE8
  5065                           postdec1	equ	0xFE5
  5066                           fsr1h	equ	0xFE2
  5067                           fsr1l	equ	0xFE1
  5068                           status	equ	0xFD8
  5069                           
  5070 ;; *************** function _TMR_Timer1 *****************
  5071 ;; Defined at:
  5072 ;;		line 106 in file "TIMERS.c"
  5073 ;; Parameters:    Size  Location     Type
  5074 ;;  state           1    wreg     unsigned char 
  5075 ;; Auto vars:     Size  Location     Type
  5076 ;;  state           1    0[BANK1 ] unsigned char 
  5077 ;; Return value:  Size  Location     Type
  5078 ;;		None               void
  5079 ;; Registers used:
  5080 ;;		wreg, status,2
  5081 ;; Tracked objects:
  5082 ;;		On entry : 0/0
  5083 ;;		On exit  : 0/0
  5084 ;;		Unchanged: 0/0
  5085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5086 ;;      Params:         0       0       0       0       0
  5087 ;;      Locals:         0       0       1       0       0
  5088 ;;      Temps:          0       0       0       0       0
  5089 ;;      Totals:         0       0       1       0       0
  5090 ;;Total ram usage:        1 bytes
  5091 ;; Hardware stack levels used:    1
  5092 ;; Hardware stack levels required when called:   12
  5093 ;; This function calls:
  5094 ;;		Nothing
  5095 ;; This function is called by:
  5096 ;;		_TMR_ResetTimer1
  5097 ;;		_InitTimer1
  5098 ;;		_TMR_Timer1Function
  5099 ;; This function uses a non-reentrant model
  5100 ;;
  5101                           
  5102                           	psect	text26
  5103  001D3C                     __ptext26:
  5104                           	opt stack 0
  5105  001D3C                     _TMR_Timer1:
  5106                           	opt stack 14
  5107                           
  5108                           ;incstack = 0
  5109                           ;TMR_Timer1@state stored from wreg
  5110  001D3C  0101               	movlb	1	; () banked
  5111  001D3E  6F80               	movwf	TMR_Timer1@state& (0+255),b
  5112                           
  5113                           ;TIMERS.c: 108: if(state)
  5114  001D40  0101               	movlb	1	; () banked
  5115  001D42  5180               	movf	TMR_Timer1@state& (0+255),w,b
  5116  001D44  0101               	movlb	1	; () banked
  5117  001D46  B4D8               	btfsc	status,2,c
  5118  001D48  D002               	goto	l1061
  5119                           
  5120                           ; BSR set to: 1
  5121                           ;TIMERS.c: 109: {
  5122                           ;TIMERS.c: 111: T1CONbits.TMR1ON = 1;
  5123  001D4A  80CD               	bsf	4045,0,c	;volatile
  5124                           
  5125                           ;TIMERS.c: 112: }
  5126  001D4C  0012               	return	
  5127  001D4E                     l1061:
  5128                           
  5129                           ; BSR set to: 1
  5130                           ;TIMERS.c: 113: else
  5131                           ;TIMERS.c: 114: {
  5132                           ;TIMERS.c: 116: T1CONbits.TMR1ON = 0;
  5133  001D4E  90CD               	bcf	4045,0,c	;volatile
  5134  001D50  0012               	return	
  5135  001D52                     __end_of_TMR_Timer1:
  5136                           	opt stack 0
  5137                           tblptru	equ	0xFF8
  5138                           tblptrh	equ	0xFF7
  5139                           tblptrl	equ	0xFF6
  5140                           tablat	equ	0xFF5
  5141                           prodh	equ	0xFF4
  5142                           prodl	equ	0xFF3
  5143                           intcon	equ	0xFF2
  5144                           intcon3	equ	0xFF0
  5145                           postinc0	equ	0xFEE
  5146                           wreg	equ	0xFE8
  5147                           postdec1	equ	0xFE5
  5148                           fsr1h	equ	0xFE2
  5149                           fsr1l	equ	0xFE1
  5150                           status	equ	0xFD8
  5151                           
  5152 ;; *************** function _InitTimer0 *****************
  5153 ;; Defined at:
  5154 ;;		line 316 in file "TIMERS.c"
  5155 ;; Parameters:    Size  Location     Type
  5156 ;;		None
  5157 ;; Auto vars:     Size  Location     Type
  5158 ;;		None
  5159 ;; Return value:  Size  Location     Type
  5160 ;;		None               void
  5161 ;; Registers used:
  5162 ;;		wreg, status,2, cstack
  5163 ;; Tracked objects:
  5164 ;;		On entry : 0/0
  5165 ;;		On exit  : 0/0
  5166 ;;		Unchanged: 0/0
  5167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5168 ;;      Params:         0       0       0       0       0
  5169 ;;      Locals:         0       0       0       0       0
  5170 ;;      Temps:          0       0       0       0       0
  5171 ;;      Totals:         0       0       0       0       0
  5172 ;;Total ram usage:        0 bytes
  5173 ;; Hardware stack levels used:    1
  5174 ;; Hardware stack levels required when called:   14
  5175 ;; This function calls:
  5176 ;;		_TMR_ResetTimer0
  5177 ;;		_TMR_Timer0
  5178 ;;		_TMR_Timer0Int
  5179 ;; This function is called by:
  5180 ;;		_InitTimers
  5181 ;; This function uses a non-reentrant model
  5182 ;;
  5183                           
  5184                           	psect	text27
  5185  001BB6                     __ptext27:
  5186                           	opt stack 0
  5187  001BB6                     _InitTimer0:
  5188                           	opt stack 14
  5189                           
  5190                           ;TIMERS.c: 318: TMR_Timer0(0);
  5191                           
  5192                           ; BSR set to: 1
  5193                           ;incstack = 0
  5194  001BB6  0E00               	movlw	0
  5195  001BB8  ECB4  F00E         	call	_TMR_Timer0
  5196                           
  5197                           ;TIMERS.c: 319: TMR_ResetTimer0();
  5198  001BBC  EC17  F00D         	call	_TMR_ResetTimer0	;wreg free
  5199                           
  5200                           ;TIMERS.c: 320: T0CONbits.T08BIT = 0;
  5201  001BC0  9CD5               	bcf	4053,6,c	;volatile
  5202                           
  5203                           ;TIMERS.c: 321: T0CONbits.T0CS = 0;
  5204  001BC2  9AD5               	bcf	4053,5,c	;volatile
  5205                           
  5206                           ;TIMERS.c: 322: T0CONbits.PSA = 0;
  5207  001BC4  96D5               	bcf	4053,3,c	;volatile
  5208                           
  5209                           ;TIMERS.c: 323: T0CONbits.T0PS = 0b101;
  5210  001BC6  50D5               	movf	4053,w,c	;volatile
  5211  001BC8  0BF8               	andlw	-8
  5212  001BCA  0905               	iorlw	5
  5213  001BCC  6ED5               	movwf	4053,c	;volatile
  5214                           
  5215                           ;TIMERS.c: 324: INTCON2bits.TMR0IP = 1;
  5216  001BCE  84F1               	bsf	intcon2,2,c	;volatile
  5217                           
  5218                           ;TIMERS.c: 325: TMR_Timer0Int(1);
  5219  001BD0  0E01               	movlw	1
  5220  001BD2  ECA9  F00E         	call	_TMR_Timer0Int
  5221  001BD6  0012               	return		;funcret
  5222  001BD8                     __end_of_InitTimer0:
  5223                           	opt stack 0
  5224                           tblptru	equ	0xFF8
  5225                           tblptrh	equ	0xFF7
  5226                           tblptrl	equ	0xFF6
  5227                           tablat	equ	0xFF5
  5228                           prodh	equ	0xFF4
  5229                           prodl	equ	0xFF3
  5230                           intcon	equ	0xFF2
  5231                           intcon2	equ	0xFF1
  5232                           intcon3	equ	0xFF0
  5233                           postinc0	equ	0xFEE
  5234                           wreg	equ	0xFE8
  5235                           postdec1	equ	0xFE5
  5236                           fsr1h	equ	0xFE2
  5237                           fsr1l	equ	0xFE1
  5238                           status	equ	0xFD8
  5239                           
  5240 ;; *************** function _TMR_Timer0Int *****************
  5241 ;; Defined at:
  5242 ;;		line 208 in file "TIMERS.c"
  5243 ;; Parameters:    Size  Location     Type
  5244 ;;  state           1    wreg     unsigned char 
  5245 ;; Auto vars:     Size  Location     Type
  5246 ;;  state           1    0[BANK1 ] unsigned char 
  5247 ;; Return value:  Size  Location     Type
  5248 ;;		None               void
  5249 ;; Registers used:
  5250 ;;		wreg, status,2
  5251 ;; Tracked objects:
  5252 ;;		On entry : 0/0
  5253 ;;		On exit  : 0/0
  5254 ;;		Unchanged: 0/0
  5255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5256 ;;      Params:         0       0       0       0       0
  5257 ;;      Locals:         0       0       1       0       0
  5258 ;;      Temps:          0       0       0       0       0
  5259 ;;      Totals:         0       0       1       0       0
  5260 ;;Total ram usage:        1 bytes
  5261 ;; Hardware stack levels used:    1
  5262 ;; Hardware stack levels required when called:   12
  5263 ;; This function calls:
  5264 ;;		Nothing
  5265 ;; This function is called by:
  5266 ;;		_InitTimer0
  5267 ;; This function uses a non-reentrant model
  5268 ;;
  5269                           
  5270                           	psect	text28
  5271  001D52                     __ptext28:
  5272                           	opt stack 0
  5273  001D52                     _TMR_Timer0Int:
  5274                           	opt stack 15
  5275                           
  5276                           ;incstack = 0
  5277                           ;TMR_Timer0Int@state stored from wreg
  5278  001D52  0101               	movlb	1	; () banked
  5279  001D54  6F80               	movwf	TMR_Timer0Int@state& (0+255),b
  5280                           
  5281                           ;TIMERS.c: 210: if(state)
  5282  001D56  0101               	movlb	1	; () banked
  5283  001D58  5180               	movf	TMR_Timer0Int@state& (0+255),w,b
  5284  001D5A  0101               	movlb	1	; () banked
  5285  001D5C  B4D8               	btfsc	status,2,c
  5286  001D5E  D002               	goto	l1086
  5287                           
  5288                           ; BSR set to: 1
  5289                           ;TIMERS.c: 211: {
  5290                           ;TIMERS.c: 213: INTCONbits.TMR0IE = 1;
  5291  001D60  8AF2               	bsf	intcon,5,c	;volatile
  5292                           
  5293                           ;TIMERS.c: 214: }
  5294  001D62  0012               	return	
  5295  001D64                     l1086:
  5296                           
  5297                           ; BSR set to: 1
  5298                           ;TIMERS.c: 215: else
  5299                           ;TIMERS.c: 216: {
  5300                           ;TIMERS.c: 218: INTCONbits.TMR0IE = 0;
  5301  001D64  9AF2               	bcf	intcon,5,c	;volatile
  5302  001D66  0012               	return	
  5303  001D68                     __end_of_TMR_Timer0Int:
  5304                           	opt stack 0
  5305                           tblptru	equ	0xFF8
  5306                           tblptrh	equ	0xFF7
  5307                           tblptrl	equ	0xFF6
  5308                           tablat	equ	0xFF5
  5309                           prodh	equ	0xFF4
  5310                           prodl	equ	0xFF3
  5311                           intcon	equ	0xFF2
  5312                           intcon2	equ	0xFF1
  5313                           intcon3	equ	0xFF0
  5314                           postinc0	equ	0xFEE
  5315                           wreg	equ	0xFE8
  5316                           postdec1	equ	0xFE5
  5317                           fsr1h	equ	0xFE2
  5318                           fsr1l	equ	0xFE1
  5319                           status	equ	0xFD8
  5320                           
  5321 ;; *************** function _TMR_ResetTimer0 *****************
  5322 ;; Defined at:
  5323 ;;		line 144 in file "TIMERS.c"
  5324 ;; Parameters:    Size  Location     Type
  5325 ;;		None
  5326 ;; Auto vars:     Size  Location     Type
  5327 ;;  TimerOn         1    1[BANK1 ] unsigned char 
  5328 ;; Return value:  Size  Location     Type
  5329 ;;		None               void
  5330 ;; Registers used:
  5331 ;;		wreg, status,2, cstack
  5332 ;; Tracked objects:
  5333 ;;		On entry : 0/0
  5334 ;;		On exit  : 0/0
  5335 ;;		Unchanged: 0/0
  5336 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5337 ;;      Params:         0       0       0       0       0
  5338 ;;      Locals:         0       0       1       0       0
  5339 ;;      Temps:          0       0       0       0       0
  5340 ;;      Totals:         0       0       1       0       0
  5341 ;;Total ram usage:        1 bytes
  5342 ;; Hardware stack levels used:    1
  5343 ;; Hardware stack levels required when called:   13
  5344 ;; This function calls:
  5345 ;;		_TMR_Timer0
  5346 ;; This function is called by:
  5347 ;;		_InitTimer0
  5348 ;; This function uses a non-reentrant model
  5349 ;;
  5350                           
  5351                           	psect	text29
  5352  001A2E                     __ptext29:
  5353                           	opt stack 0
  5354  001A2E                     _TMR_ResetTimer0:
  5355                           	opt stack 14
  5356                           
  5357                           ;TIMERS.c: 146: unsigned char TimerOn = T0CONbits.TMR0ON;
  5358                           
  5359                           ; BSR set to: 1
  5360                           ;incstack = 0
  5361  001A2E  0E00               	movlw	0
  5362  001A30  BED5               	btfsc	4053,7,c	;volatile
  5363  001A32  0E01               	movlw	1
  5364  001A34  0101               	movlb	1	; () banked
  5365  001A36  6F81               	movwf	TMR_ResetTimer0@TimerOn& (0+255),b
  5366                           
  5367                           ; BSR set to: 1
  5368                           ;TIMERS.c: 148: TMR_Timer0(0);
  5369  001A38  0E00               	movlw	0
  5370  001A3A  ECB4  F00E         	call	_TMR_Timer0
  5371                           
  5372                           ;TIMERS.c: 149: TMR0H = 0;
  5373  001A3E  0E00               	movlw	0
  5374  001A40  6ED7               	movwf	4055,c	;volatile
  5375                           
  5376                           ;TIMERS.c: 150: TMR0L = 2;
  5377  001A42  0E02               	movlw	2
  5378  001A44  6ED6               	movwf	4054,c	;volatile
  5379                           
  5380                           ;TIMERS.c: 151: if(TimerOn)
  5381  001A46  0101               	movlb	1	; () banked
  5382  001A48  5181               	movf	TMR_ResetTimer0@TimerOn& (0+255),w,b
  5383  001A4A  0101               	movlb	1	; () banked
  5384  001A4C  B4D8               	btfsc	status,2,c
  5385  001A4E  0012               	return	
  5386                           
  5387                           ; BSR set to: 1
  5388                           ;TIMERS.c: 152: {
  5389                           ;TIMERS.c: 153: TMR_Timer0(1);
  5390  001A50  0E01               	movlw	1
  5391  001A52  ECB4  F00E         	call	_TMR_Timer0
  5392  001A56  0012               	return	
  5393  001A58                     __end_of_TMR_ResetTimer0:
  5394                           	opt stack 0
  5395                           tblptru	equ	0xFF8
  5396                           tblptrh	equ	0xFF7
  5397                           tblptrl	equ	0xFF6
  5398                           tablat	equ	0xFF5
  5399                           prodh	equ	0xFF4
  5400                           prodl	equ	0xFF3
  5401                           intcon	equ	0xFF2
  5402                           intcon2	equ	0xFF1
  5403                           intcon3	equ	0xFF0
  5404                           postinc0	equ	0xFEE
  5405                           wreg	equ	0xFE8
  5406                           postdec1	equ	0xFE5
  5407                           fsr1h	equ	0xFE2
  5408                           fsr1l	equ	0xFE1
  5409                           status	equ	0xFD8
  5410                           
  5411 ;; *************** function _TMR_Timer0 *****************
  5412 ;; Defined at:
  5413 ;;		line 87 in file "TIMERS.c"
  5414 ;; Parameters:    Size  Location     Type
  5415 ;;  state           1    wreg     unsigned char 
  5416 ;; Auto vars:     Size  Location     Type
  5417 ;;  state           1    0[BANK1 ] unsigned char 
  5418 ;; Return value:  Size  Location     Type
  5419 ;;		None               void
  5420 ;; Registers used:
  5421 ;;		wreg, status,2
  5422 ;; Tracked objects:
  5423 ;;		On entry : 0/0
  5424 ;;		On exit  : 0/0
  5425 ;;		Unchanged: 0/0
  5426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5427 ;;      Params:         0       0       0       0       0
  5428 ;;      Locals:         0       0       1       0       0
  5429 ;;      Temps:          0       0       0       0       0
  5430 ;;      Totals:         0       0       1       0       0
  5431 ;;Total ram usage:        1 bytes
  5432 ;; Hardware stack levels used:    1
  5433 ;; Hardware stack levels required when called:   12
  5434 ;; This function calls:
  5435 ;;		Nothing
  5436 ;; This function is called by:
  5437 ;;		_TMR_ResetTimer0
  5438 ;;		_InitTimer0
  5439 ;; This function uses a non-reentrant model
  5440 ;;
  5441                           
  5442                           	psect	text30
  5443  001D68                     __ptext30:
  5444                           	opt stack 0
  5445  001D68                     _TMR_Timer0:
  5446                           	opt stack 15
  5447                           
  5448                           ;incstack = 0
  5449                           ;TMR_Timer0@state stored from wreg
  5450  001D68  0101               	movlb	1	; () banked
  5451  001D6A  6F80               	movwf	TMR_Timer0@state& (0+255),b
  5452                           
  5453                           ;TIMERS.c: 89: if(state)
  5454  001D6C  0101               	movlb	1	; () banked
  5455  001D6E  5180               	movf	TMR_Timer0@state& (0+255),w,b
  5456  001D70  0101               	movlb	1	; () banked
  5457  001D72  B4D8               	btfsc	status,2,c
  5458  001D74  D002               	goto	l1056
  5459                           
  5460                           ; BSR set to: 1
  5461                           ;TIMERS.c: 90: {
  5462                           ;TIMERS.c: 92: T0CONbits.TMR0ON = 1;
  5463  001D76  8ED5               	bsf	4053,7,c	;volatile
  5464                           
  5465                           ;TIMERS.c: 93: }
  5466  001D78  0012               	return	
  5467  001D7A                     l1056:
  5468                           
  5469                           ; BSR set to: 1
  5470                           ;TIMERS.c: 94: else
  5471                           ;TIMERS.c: 95: {
  5472                           ;TIMERS.c: 97: T0CONbits.TMR0ON = 0;
  5473  001D7A  9ED5               	bcf	4053,7,c	;volatile
  5474  001D7C  0012               	return	
  5475  001D7E                     __end_of_TMR_Timer0:
  5476                           	opt stack 0
  5477                           tblptru	equ	0xFF8
  5478                           tblptrh	equ	0xFF7
  5479                           tblptrl	equ	0xFF6
  5480                           tablat	equ	0xFF5
  5481                           prodh	equ	0xFF4
  5482                           prodl	equ	0xFF3
  5483                           intcon	equ	0xFF2
  5484                           intcon2	equ	0xFF1
  5485                           intcon3	equ	0xFF0
  5486                           postinc0	equ	0xFEE
  5487                           wreg	equ	0xFE8
  5488                           postdec1	equ	0xFE5
  5489                           fsr1h	equ	0xFE2
  5490                           fsr1l	equ	0xFE1
  5491                           status	equ	0xFD8
  5492                           
  5493 ;; *************** function _InitRF *****************
  5494 ;; Defined at:
  5495 ;;		line 177 in file "RF.c"
  5496 ;; Parameters:    Size  Location     Type
  5497 ;;		None
  5498 ;; Auto vars:     Size  Location     Type
  5499 ;;		None
  5500 ;; Return value:  Size  Location     Type
  5501 ;;		None               void
  5502 ;; Registers used:
  5503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5504 ;; Tracked objects:
  5505 ;;		On entry : 0/0
  5506 ;;		On exit  : 0/0
  5507 ;;		Unchanged: 0/0
  5508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5509 ;;      Params:         0       0       0       0       0
  5510 ;;      Locals:         0       0       0       0       0
  5511 ;;      Temps:          0       0       0       0       0
  5512 ;;      Totals:         0       0       0       0       0
  5513 ;;Total ram usage:        0 bytes
  5514 ;; Hardware stack levels used:    1
  5515 ;; Hardware stack levels required when called:   13
  5516 ;; This function calls:
  5517 ;;		_MSC_CleanBufferInt
  5518 ;;		_RF_DataInt
  5519 ;;		_RF_Receiver
  5520 ;;		_RF_SetBandwidth
  5521 ;;		_RF_SetSquelch
  5522 ;; This function is called by:
  5523 ;;		_Init_System
  5524 ;; This function uses a non-reentrant model
  5525 ;;
  5526                           
  5527                           	psect	text31
  5528  001724                     __ptext31:
  5529                           	opt stack 0
  5530  001724                     _InitRF:
  5531                           	opt stack 16
  5532                           
  5533                           ;RF.c: 179: RF_Receiver(1);
  5534                           
  5535                           ; BSR set to: 1
  5536                           ;incstack = 0
  5537  001724  0E01               	movlw	1
  5538  001726  ECCA  F00E         	call	_RF_Receiver
  5539                           
  5540                           ;RF.c: 180: RF_SetBandwidth(2);
  5541  00172A  0E02               	movlw	2
  5542  00172C  EC09  F00C         	call	_RF_SetBandwidth
  5543                           
  5544                           ;RF.c: 181: MSC_CleanBufferInt(&RF_DataTiming,128);
  5545  001730  0E00               	movlw	low _RF_DataTiming
  5546  001732  0101               	movlb	1	; () banked
  5547  001734  6F80               	movwf	MSC_CleanBufferInt@data& (0+255),b
  5548  001736  0E03               	movlw	high _RF_DataTiming
  5549  001738  0101               	movlb	1	; () banked
  5550  00173A  6F81               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  5551  00173C  0E00               	movlw	0
  5552  00173E  0101               	movlb	1	; () banked
  5553  001740  6F83               	movwf	(MSC_CleanBufferInt@count+1)& (0+255),b
  5554  001742  0E80               	movlw	128
  5555  001744  6F82               	movwf	MSC_CleanBufferInt@count& (0+255),b
  5556  001746  ECD1  F01F         	call	_MSC_CleanBufferInt	;wreg free
  5557                           
  5558                           ;RF.c: 182: RF_SetSquelch(1);
  5559  00174A  0E01               	movlw	1
  5560  00174C  ECBF  F00E         	call	_RF_SetSquelch
  5561                           
  5562                           ;RF.c: 183: INTCON3bits.INT1P = 1;
  5563  001750  8CF0               	bsf	intcon3,6,c	;volatile
  5564                           
  5565                           ;RF.c: 184: INTCON3bits.INT2P = 1;
  5566  001752  8EF0               	bsf	intcon3,7,c	;volatile
  5567                           
  5568                           ;RF.c: 185: INTCON2bits.INTEDG1 = 1;
  5569  001754  8AF1               	bsf	intcon2,5,c	;volatile
  5570                           
  5571                           ;RF.c: 186: INTCON2bits.INTEDG2 = 0;
  5572  001756  98F1               	bcf	intcon2,4,c	;volatile
  5573                           
  5574                           ;RF.c: 187: RF_DataInt(1);
  5575  001758  0E01               	movlw	1
  5576  00175A  EC34  F00E         	call	_RF_DataInt
  5577  00175E  0012               	return		;funcret
  5578  001760                     __end_of_InitRF:
  5579                           	opt stack 0
  5580                           tblptru	equ	0xFF8
  5581                           tblptrh	equ	0xFF7
  5582                           tblptrl	equ	0xFF6
  5583                           tablat	equ	0xFF5
  5584                           prodh	equ	0xFF4
  5585                           prodl	equ	0xFF3
  5586                           intcon	equ	0xFF2
  5587                           intcon2	equ	0xFF1
  5588                           intcon3	equ	0xFF0
  5589                           postinc0	equ	0xFEE
  5590                           wreg	equ	0xFE8
  5591                           postdec1	equ	0xFE5
  5592                           fsr1h	equ	0xFE2
  5593                           fsr1l	equ	0xFE1
  5594                           status	equ	0xFD8
  5595                           
  5596 ;; *************** function _RF_SetSquelch *****************
  5597 ;; Defined at:
  5598 ;;		line 153 in file "RF.c"
  5599 ;; Parameters:    Size  Location     Type
  5600 ;;  state           1    wreg     unsigned char 
  5601 ;; Auto vars:     Size  Location     Type
  5602 ;;  state           1    0[BANK1 ] unsigned char 
  5603 ;; Return value:  Size  Location     Type
  5604 ;;		None               void
  5605 ;; Registers used:
  5606 ;;		wreg, status,2, status,0
  5607 ;; Tracked objects:
  5608 ;;		On entry : 0/0
  5609 ;;		On exit  : 0/0
  5610 ;;		Unchanged: 0/0
  5611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5612 ;;      Params:         0       0       0       0       0
  5613 ;;      Locals:         0       0       1       0       0
  5614 ;;      Temps:          0       0       0       0       0
  5615 ;;      Totals:         0       0       1       0       0
  5616 ;;Total ram usage:        1 bytes
  5617 ;; Hardware stack levels used:    1
  5618 ;; Hardware stack levels required when called:   12
  5619 ;; This function calls:
  5620 ;;		Nothing
  5621 ;; This function is called by:
  5622 ;;		_InitRF
  5623 ;; This function uses a non-reentrant model
  5624 ;;
  5625                           
  5626                           	psect	text32
  5627  001D7E                     __ptext32:
  5628                           	opt stack 0
  5629  001D7E                     _RF_SetSquelch:
  5630                           	opt stack 16
  5631                           
  5632                           ;incstack = 0
  5633                           ;RF_SetSquelch@state stored from wreg
  5634  001D7E  0101               	movlb	1	; () banked
  5635  001D80  6F80               	movwf	RF_SetSquelch@state& (0+255),b
  5636                           
  5637                           ;RF.c: 155: if(!state)
  5638  001D82  0101               	movlb	1	; () banked
  5639  001D84  5180               	movf	RF_SetSquelch@state& (0+255),w,b
  5640  001D86  0101               	movlb	1	; () banked
  5641  001D88  A4D8               	btfss	status,2,c
  5642  001D8A  D002               	goto	l7817
  5643                           
  5644                           ; BSR set to: 1
  5645                           ;RF.c: 156: {
  5646                           ;RF.c: 158: LATA |= 0x20;
  5647  001D8C  8A89               	bsf	3977,5,c	;volatile
  5648                           
  5649                           ;RF.c: 159: }
  5650  001D8E  0012               	return	
  5651  001D90                     l7817:
  5652                           
  5653                           ; BSR set to: 1
  5654                           ;RF.c: 160: else
  5655                           ;RF.c: 161: {
  5656                           ;RF.c: 163: LATA &= ~0x20;
  5657  001D90  9A89               	bcf	3977,5,c	;volatile
  5658  001D92  0012               	return	
  5659  001D94                     __end_of_RF_SetSquelch:
  5660                           	opt stack 0
  5661                           tblptru	equ	0xFF8
  5662                           tblptrh	equ	0xFF7
  5663                           tblptrl	equ	0xFF6
  5664                           tablat	equ	0xFF5
  5665                           prodh	equ	0xFF4
  5666                           prodl	equ	0xFF3
  5667                           intcon	equ	0xFF2
  5668                           intcon2	equ	0xFF1
  5669                           intcon3	equ	0xFF0
  5670                           postinc0	equ	0xFEE
  5671                           wreg	equ	0xFE8
  5672                           postdec1	equ	0xFE5
  5673                           fsr1h	equ	0xFE2
  5674                           fsr1l	equ	0xFE1
  5675                           status	equ	0xFD8
  5676                           
  5677 ;; *************** function _RF_SetBandwidth *****************
  5678 ;; Defined at:
  5679 ;;		line 119 in file "RF.c"
  5680 ;; Parameters:    Size  Location     Type
  5681 ;;  band            1    wreg     unsigned char 
  5682 ;; Auto vars:     Size  Location     Type
  5683 ;;  band            1    0[BANK1 ] unsigned char 
  5684 ;; Return value:  Size  Location     Type
  5685 ;;		None               void
  5686 ;; Registers used:
  5687 ;;		wreg, status,2, status,0
  5688 ;; Tracked objects:
  5689 ;;		On entry : 0/0
  5690 ;;		On exit  : 0/0
  5691 ;;		Unchanged: 0/0
  5692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5693 ;;      Params:         0       0       0       0       0
  5694 ;;      Locals:         0       0       1       0       0
  5695 ;;      Temps:          0       0       0       0       0
  5696 ;;      Totals:         0       0       1       0       0
  5697 ;;Total ram usage:        1 bytes
  5698 ;; Hardware stack levels used:    1
  5699 ;; Hardware stack levels required when called:   12
  5700 ;; This function calls:
  5701 ;;		Nothing
  5702 ;; This function is called by:
  5703 ;;		_InitRF
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           	psect	text33
  5708  001812                     __ptext33:
  5709                           	opt stack 0
  5710  001812                     _RF_SetBandwidth:
  5711                           	opt stack 16
  5712                           
  5713                           ; BSR set to: 1
  5714                           ;incstack = 0
  5715                           ;RF_SetBandwidth@band stored from wreg
  5716  001812  0101               	movlb	1	; () banked
  5717  001814  6F80               	movwf	RF_SetBandwidth@band& (0+255),b
  5718                           
  5719                           ;RF.c: 121: if(band == 0)
  5720  001816  0101               	movlb	1	; () banked
  5721  001818  5180               	movf	RF_SetBandwidth@band& (0+255),w,b
  5722  00181A  0101               	movlb	1	; () banked
  5723  00181C  A4D8               	btfss	status,2,c
  5724  00181E  D003               	goto	l7803
  5725                           
  5726                           ; BSR set to: 1
  5727                           ;RF.c: 122: {
  5728                           ;RF.c: 124: LATC &= ~0x40;
  5729  001820  9C8B               	bcf	3979,6,c	;volatile
  5730                           
  5731                           ;RF.c: 125: LATC &= ~0x80;
  5732  001822  9E8B               	bcf	3979,7,c	;volatile
  5733                           
  5734                           ;RF.c: 126: }
  5735  001824  0012               	return	
  5736  001826                     l7803:
  5737                           
  5738                           ; BSR set to: 1
  5739                           ;RF.c: 127: else if(band == 1)
  5740  001826  0101               	movlb	1	; () banked
  5741  001828  0580               	decf	RF_SetBandwidth@band& (0+255),w,b
  5742  00182A  A4D8               	btfss	status,2,c
  5743  00182C  D003               	goto	l7807
  5744                           
  5745                           ; BSR set to: 1
  5746                           ;RF.c: 128: {
  5747                           ;RF.c: 130: LATC |= 0x40;
  5748  00182E  8C8B               	bsf	3979,6,c	;volatile
  5749                           
  5750                           ;RF.c: 131: LATC &= ~0x80;
  5751  001830  9E8B               	bcf	3979,7,c	;volatile
  5752                           
  5753                           ;RF.c: 132: }
  5754  001832  0012               	return	
  5755  001834                     l7807:
  5756                           
  5757                           ; BSR set to: 1
  5758                           ;RF.c: 133: else if(band == 2)
  5759  001834  0E02               	movlw	2
  5760  001836  0101               	movlb	1	; () banked
  5761  001838  1980               	xorwf	RF_SetBandwidth@band& (0+255),w,b
  5762  00183A  A4D8               	btfss	status,2,c
  5763  00183C  D003               	goto	l7811
  5764                           
  5765                           ; BSR set to: 1
  5766                           ;RF.c: 134: {
  5767                           ;RF.c: 136: LATC &= ~0x40;
  5768  00183E  9C8B               	bcf	3979,6,c	;volatile
  5769                           
  5770                           ;RF.c: 137: LATC |= 0x80;
  5771  001840  8E8B               	bsf	3979,7,c	;volatile
  5772                           
  5773                           ;RF.c: 138: }
  5774  001842  0012               	return	
  5775  001844                     l7811:
  5776                           
  5777                           ; BSR set to: 1
  5778                           ;RF.c: 139: else
  5779                           ;RF.c: 140: {
  5780                           ;RF.c: 142: LATC |= 0x40;
  5781  001844  8C8B               	bsf	3979,6,c	;volatile
  5782                           
  5783                           ;RF.c: 143: LATC |= 0x80;
  5784  001846  8E8B               	bsf	3979,7,c	;volatile
  5785                           
  5786                           ; BSR set to: 1
  5787                           
  5788                           ; BSR set to: 1
  5789  001848  0012               	return	
  5790  00184A                     __end_of_RF_SetBandwidth:
  5791                           	opt stack 0
  5792                           tblptru	equ	0xFF8
  5793                           tblptrh	equ	0xFF7
  5794                           tblptrl	equ	0xFF6
  5795                           tablat	equ	0xFF5
  5796                           prodh	equ	0xFF4
  5797                           prodl	equ	0xFF3
  5798                           intcon	equ	0xFF2
  5799                           intcon2	equ	0xFF1
  5800                           intcon3	equ	0xFF0
  5801                           postinc0	equ	0xFEE
  5802                           wreg	equ	0xFE8
  5803                           postdec1	equ	0xFE5
  5804                           fsr1h	equ	0xFE2
  5805                           fsr1l	equ	0xFE1
  5806                           status	equ	0xFD8
  5807                           
  5808 ;; *************** function _RF_Receiver *****************
  5809 ;; Defined at:
  5810 ;;		line 100 in file "RF.c"
  5811 ;; Parameters:    Size  Location     Type
  5812 ;;  state           1    wreg     unsigned char 
  5813 ;; Auto vars:     Size  Location     Type
  5814 ;;  state           1    0[BANK1 ] unsigned char 
  5815 ;; Return value:  Size  Location     Type
  5816 ;;		None               void
  5817 ;; Registers used:
  5818 ;;		wreg, status,2, status,0
  5819 ;; Tracked objects:
  5820 ;;		On entry : 0/0
  5821 ;;		On exit  : 0/0
  5822 ;;		Unchanged: 0/0
  5823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5824 ;;      Params:         0       0       0       0       0
  5825 ;;      Locals:         0       0       1       0       0
  5826 ;;      Temps:          0       0       0       0       0
  5827 ;;      Totals:         0       0       1       0       0
  5828 ;;Total ram usage:        1 bytes
  5829 ;; Hardware stack levels used:    1
  5830 ;; Hardware stack levels required when called:   12
  5831 ;; This function calls:
  5832 ;;		Nothing
  5833 ;; This function is called by:
  5834 ;;		_InitRF
  5835 ;; This function uses a non-reentrant model
  5836 ;;
  5837                           
  5838                           	psect	text34
  5839  001D94                     __ptext34:
  5840                           	opt stack 0
  5841  001D94                     _RF_Receiver:
  5842                           	opt stack 16
  5843                           
  5844                           ; BSR set to: 1
  5845                           ;incstack = 0
  5846                           ;RF_Receiver@state stored from wreg
  5847  001D94  0101               	movlb	1	; () banked
  5848  001D96  6F80               	movwf	RF_Receiver@state& (0+255),b
  5849                           
  5850                           ;RF.c: 102: if(!state)
  5851  001D98  0101               	movlb	1	; () banked
  5852  001D9A  5180               	movf	RF_Receiver@state& (0+255),w,b
  5853  001D9C  0101               	movlb	1	; () banked
  5854  001D9E  A4D8               	btfss	status,2,c
  5855  001DA0  D002               	goto	l7797
  5856                           
  5857                           ; BSR set to: 1
  5858                           ;RF.c: 103: {
  5859                           ;RF.c: 105: LATA |= 0x04;
  5860  001DA2  8489               	bsf	3977,2,c	;volatile
  5861                           
  5862                           ;RF.c: 106: }
  5863  001DA4  0012               	return	
  5864  001DA6                     l7797:
  5865                           
  5866                           ; BSR set to: 1
  5867                           ;RF.c: 107: else
  5868                           ;RF.c: 108: {
  5869                           ;RF.c: 110: LATA &= ~0x04;
  5870  001DA6  9489               	bcf	3977,2,c	;volatile
  5871  001DA8  0012               	return	
  5872  001DAA                     __end_of_RF_Receiver:
  5873                           	opt stack 0
  5874                           tblptru	equ	0xFF8
  5875                           tblptrh	equ	0xFF7
  5876                           tblptrl	equ	0xFF6
  5877                           tablat	equ	0xFF5
  5878                           prodh	equ	0xFF4
  5879                           prodl	equ	0xFF3
  5880                           intcon	equ	0xFF2
  5881                           intcon2	equ	0xFF1
  5882                           intcon3	equ	0xFF0
  5883                           postinc0	equ	0xFEE
  5884                           wreg	equ	0xFE8
  5885                           postdec1	equ	0xFE5
  5886                           fsr1h	equ	0xFE2
  5887                           fsr1l	equ	0xFE1
  5888                           status	equ	0xFD8
  5889                           
  5890 ;; *************** function _RF_DataInt *****************
  5891 ;; Defined at:
  5892 ;;		line 78 in file "RF.c"
  5893 ;; Parameters:    Size  Location     Type
  5894 ;;  state           1    wreg     unsigned char 
  5895 ;; Auto vars:     Size  Location     Type
  5896 ;;  state           1    0[BANK1 ] unsigned char 
  5897 ;; Return value:  Size  Location     Type
  5898 ;;		None               void
  5899 ;; Registers used:
  5900 ;;		wreg, status,2
  5901 ;; Tracked objects:
  5902 ;;		On entry : 0/0
  5903 ;;		On exit  : 0/0
  5904 ;;		Unchanged: 0/0
  5905 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5906 ;;      Params:         0       0       0       0       0
  5907 ;;      Locals:         0       0       1       0       0
  5908 ;;      Temps:          0       0       0       0       0
  5909 ;;      Totals:         0       0       1       0       0
  5910 ;;Total ram usage:        1 bytes
  5911 ;; Hardware stack levels used:    1
  5912 ;; Hardware stack levels required when called:   12
  5913 ;; This function calls:
  5914 ;;		Nothing
  5915 ;; This function is called by:
  5916 ;;		_InitRF
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           	psect	text35
  5921  001C68                     __ptext35:
  5922                           	opt stack 0
  5923  001C68                     _RF_DataInt:
  5924                           	opt stack 16
  5925                           
  5926                           ; BSR set to: 1
  5927                           ;incstack = 0
  5928                           ;RF_DataInt@state stored from wreg
  5929  001C68  0101               	movlb	1	; () banked
  5930  001C6A  6F80               	movwf	RF_DataInt@state& (0+255),b
  5931                           
  5932                           ;RF.c: 80: if(state)
  5933  001C6C  0101               	movlb	1	; () banked
  5934  001C6E  5180               	movf	RF_DataInt@state& (0+255),w,b
  5935  001C70  0101               	movlb	1	; () banked
  5936  001C72  B4D8               	btfsc	status,2,c
  5937  001C74  D003               	goto	l402
  5938                           
  5939                           ; BSR set to: 1
  5940                           ;RF.c: 81: {
  5941                           ;RF.c: 83: INTCON3bits.INT1E = 1;
  5942  001C76  86F0               	bsf	intcon3,3,c	;volatile
  5943                           
  5944                           ;RF.c: 84: INTCON3bits.INT2E = 1;
  5945  001C78  88F0               	bsf	intcon3,4,c	;volatile
  5946                           
  5947                           ;RF.c: 85: }
  5948  001C7A  0012               	return	
  5949  001C7C                     l402:
  5950                           
  5951                           ; BSR set to: 1
  5952                           ;RF.c: 86: else
  5953                           ;RF.c: 87: {
  5954                           ;RF.c: 89: INTCON3bits.INT1E = 0;
  5955  001C7C  96F0               	bcf	intcon3,3,c	;volatile
  5956                           
  5957                           ;RF.c: 90: INTCON3bits.INT2E = 0;
  5958  001C7E  98F0               	bcf	intcon3,4,c	;volatile
  5959  001C80  0012               	return	
  5960  001C82                     __end_of_RF_DataInt:
  5961                           	opt stack 0
  5962                           tblptru	equ	0xFF8
  5963                           tblptrh	equ	0xFF7
  5964                           tblptrl	equ	0xFF6
  5965                           tablat	equ	0xFF5
  5966                           prodh	equ	0xFF4
  5967                           prodl	equ	0xFF3
  5968                           intcon	equ	0xFF2
  5969                           intcon2	equ	0xFF1
  5970                           intcon3	equ	0xFF0
  5971                           postinc0	equ	0xFEE
  5972                           wreg	equ	0xFE8
  5973                           postdec1	equ	0xFE5
  5974                           fsr1h	equ	0xFE2
  5975                           fsr1l	equ	0xFE1
  5976                           status	equ	0xFD8
  5977                           
  5978 ;; *************** function _InitMOTOR *****************
  5979 ;; Defined at:
  5980 ;;		line 92 in file "MOTOR.c"
  5981 ;; Parameters:    Size  Location     Type
  5982 ;;		None
  5983 ;; Auto vars:     Size  Location     Type
  5984 ;;		None
  5985 ;; Return value:  Size  Location     Type
  5986 ;;		None               void
  5987 ;; Registers used:
  5988 ;;		None
  5989 ;; Tracked objects:
  5990 ;;		On entry : 0/0
  5991 ;;		On exit  : 0/0
  5992 ;;		Unchanged: 0/0
  5993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  5994 ;;      Params:         0       0       0       0       0
  5995 ;;      Locals:         0       0       0       0       0
  5996 ;;      Temps:          0       0       0       0       0
  5997 ;;      Totals:         0       0       0       0       0
  5998 ;;Total ram usage:        0 bytes
  5999 ;; Hardware stack levels used:    1
  6000 ;; Hardware stack levels required when called:   12
  6001 ;; This function calls:
  6002 ;;		Nothing
  6003 ;; This function is called by:
  6004 ;;		_Init_System
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           	psect	text36
  6009  001FA6                     __ptext36:
  6010                           	opt stack 0
  6011  001FA6                     _InitMOTOR:
  6012                           	opt stack 17
  6013                           
  6014                           ;MOTOR.c: 95: __nop();
  6015                           
  6016                           ; BSR set to: 1
  6017                           ;incstack = 0
  6018  001FA6  F000               	nop	
  6019  001FA8  0012               	return		;funcret
  6020  001FAA                     __end_of_InitMOTOR:
  6021                           	opt stack 0
  6022                           tblptru	equ	0xFF8
  6023                           tblptrh	equ	0xFF7
  6024                           tblptrl	equ	0xFF6
  6025                           tablat	equ	0xFF5
  6026                           prodh	equ	0xFF4
  6027                           prodl	equ	0xFF3
  6028                           intcon	equ	0xFF2
  6029                           intcon2	equ	0xFF1
  6030                           intcon3	equ	0xFF0
  6031                           postinc0	equ	0xFEE
  6032                           wreg	equ	0xFE8
  6033                           postdec1	equ	0xFE5
  6034                           fsr1h	equ	0xFE2
  6035                           fsr1l	equ	0xFE1
  6036                           status	equ	0xFD8
  6037                           
  6038 ;; *************** function _InitLDO *****************
  6039 ;; Defined at:
  6040 ;;		line 75 in file "LDO.c"
  6041 ;; Parameters:    Size  Location     Type
  6042 ;;		None
  6043 ;; Auto vars:     Size  Location     Type
  6044 ;;		None
  6045 ;; Return value:  Size  Location     Type
  6046 ;;		None               void
  6047 ;; Registers used:
  6048 ;;		wreg, status,2, status,0, cstack
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6054 ;;      Params:         0       0       0       0       0
  6055 ;;      Locals:         0       0       0       0       0
  6056 ;;      Temps:          0       0       0       0       0
  6057 ;;      Totals:         0       0       0       0       0
  6058 ;;Total ram usage:        0 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; Hardware stack levels required when called:   13
  6061 ;; This function calls:
  6062 ;;		_LDO_Pass
  6063 ;; This function is called by:
  6064 ;;		_Init_System
  6065 ;; This function uses a non-reentrant model
  6066 ;;
  6067                           
  6068                           	psect	text37
  6069  001F8C                     __ptext37:
  6070                           	opt stack 0
  6071  001F8C                     _InitLDO:
  6072                           	opt stack 16
  6073                           
  6074                           ;LDO.c: 77: LDO_Pass(0);
  6075                           
  6076                           ;incstack = 0
  6077  001F8C  0E00               	movlw	0
  6078  001F8E  EC5B  F00E         	call	_LDO_Pass
  6079  001F92  0012               	return		;funcret
  6080  001F94                     __end_of_InitLDO:
  6081                           	opt stack 0
  6082                           tblptru	equ	0xFF8
  6083                           tblptrh	equ	0xFF7
  6084                           tblptrl	equ	0xFF6
  6085                           tablat	equ	0xFF5
  6086                           prodh	equ	0xFF4
  6087                           prodl	equ	0xFF3
  6088                           intcon	equ	0xFF2
  6089                           intcon2	equ	0xFF1
  6090                           intcon3	equ	0xFF0
  6091                           postinc0	equ	0xFEE
  6092                           wreg	equ	0xFE8
  6093                           postdec1	equ	0xFE5
  6094                           fsr1h	equ	0xFE2
  6095                           fsr1l	equ	0xFE1
  6096                           status	equ	0xFD8
  6097                           
  6098 ;; *************** function _LDO_Pass *****************
  6099 ;; Defined at:
  6100 ;;		line 52 in file "LDO.c"
  6101 ;; Parameters:    Size  Location     Type
  6102 ;;  state           1    wreg     unsigned char 
  6103 ;; Auto vars:     Size  Location     Type
  6104 ;;  state           1    0[BANK1 ] unsigned char 
  6105 ;; Return value:  Size  Location     Type
  6106 ;;		None               void
  6107 ;; Registers used:
  6108 ;;		wreg, status,2, status,0
  6109 ;; Tracked objects:
  6110 ;;		On entry : 0/0
  6111 ;;		On exit  : 0/0
  6112 ;;		Unchanged: 0/0
  6113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6114 ;;      Params:         0       0       0       0       0
  6115 ;;      Locals:         0       0       1       0       0
  6116 ;;      Temps:          0       0       0       0       0
  6117 ;;      Totals:         0       0       1       0       0
  6118 ;;Total ram usage:        1 bytes
  6119 ;; Hardware stack levels used:    1
  6120 ;; Hardware stack levels required when called:   12
  6121 ;; This function calls:
  6122 ;;		Nothing
  6123 ;; This function is called by:
  6124 ;;		_InitLDO
  6125 ;; This function uses a non-reentrant model
  6126 ;;
  6127                           
  6128                           	psect	text38
  6129  001CB6                     __ptext38:
  6130                           	opt stack 0
  6131  001CB6                     _LDO_Pass:
  6132                           	opt stack 16
  6133                           
  6134                           ;incstack = 0
  6135                           ;LDO_Pass@state stored from wreg
  6136  001CB6  0101               	movlb	1	; () banked
  6137  001CB8  6F80               	movwf	LDO_Pass@state& (0+255),b
  6138                           
  6139                           ;LDO.c: 54: if(state)
  6140  001CBA  0101               	movlb	1	; () banked
  6141  001CBC  5180               	movf	LDO_Pass@state& (0+255),w,b
  6142  001CBE  0101               	movlb	1	; () banked
  6143  001CC0  B4D8               	btfsc	status,2,c
  6144  001CC2  D003               	goto	l593
  6145                           
  6146                           ; BSR set to: 1
  6147                           ;LDO.c: 55: {
  6148                           ;LDO.c: 57: TRISCbits.TRISC5 = 0;
  6149  001CC4  9A94               	bcf	3988,5,c	;volatile
  6150                           
  6151                           ; BSR set to: 1
  6152                           ;LDO.c: 58: LATC &= ~0x20;
  6153  001CC6  9A8B               	bcf	3979,5,c	;volatile
  6154                           
  6155                           ;LDO.c: 59: }
  6156  001CC8  0012               	return	
  6157  001CCA                     l593:
  6158                           
  6159                           ; BSR set to: 1
  6160                           ;LDO.c: 60: else
  6161                           ;LDO.c: 61: {
  6162                           ;LDO.c: 63: TRISCbits.TRISC5 = 1;
  6163  001CCA  8A94               	bsf	3988,5,c	;volatile
  6164  001CCC  0012               	return	
  6165  001CCE                     __end_of_LDO_Pass:
  6166                           	opt stack 0
  6167                           tblptru	equ	0xFF8
  6168                           tblptrh	equ	0xFF7
  6169                           tblptrl	equ	0xFF6
  6170                           tablat	equ	0xFF5
  6171                           prodh	equ	0xFF4
  6172                           prodl	equ	0xFF3
  6173                           intcon	equ	0xFF2
  6174                           intcon2	equ	0xFF1
  6175                           intcon3	equ	0xFF0
  6176                           postinc0	equ	0xFEE
  6177                           wreg	equ	0xFE8
  6178                           postdec1	equ	0xFE5
  6179                           fsr1h	equ	0xFE2
  6180                           fsr1l	equ	0xFE1
  6181                           status	equ	0xFD8
  6182                           
  6183 ;; *************** function _InitIR *****************
  6184 ;; Defined at:
  6185 ;;		line 70 in file "IR.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;		None
  6188 ;; Auto vars:     Size  Location     Type
  6189 ;;		None
  6190 ;; Return value:  Size  Location     Type
  6191 ;;		None               void
  6192 ;; Registers used:
  6193 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6199 ;;      Params:         0       0       0       0       0
  6200 ;;      Locals:         0       0       0       0       0
  6201 ;;      Temps:          0       0       0       0       0
  6202 ;;      Totals:         0       0       0       0       0
  6203 ;;Total ram usage:        0 bytes
  6204 ;; Hardware stack levels used:    1
  6205 ;; Hardware stack levels required when called:   13
  6206 ;; This function calls:
  6207 ;;		_MSC_CleanBufferInt
  6208 ;; This function is called by:
  6209 ;;		_Init_System
  6210 ;; This function uses a non-reentrant model
  6211 ;;
  6212                           
  6213                           	psect	text39
  6214  001C4C                     __ptext39:
  6215                           	opt stack 0
  6216  001C4C                     _InitIR:
  6217                           	opt stack 16
  6218                           
  6219                           ;IR.c: 72: MSC_CleanBufferInt(&IR_DataTiming,128);
  6220                           
  6221                           ; BSR set to: 1
  6222                           ;incstack = 0
  6223  001C4C  0E00               	movlw	low _IR_DataTiming
  6224  001C4E  0101               	movlb	1	; () banked
  6225  001C50  6F80               	movwf	MSC_CleanBufferInt@data& (0+255),b
  6226  001C52  0E02               	movlw	high _IR_DataTiming
  6227  001C54  0101               	movlb	1	; () banked
  6228  001C56  6F81               	movwf	(MSC_CleanBufferInt@data+1)& (0+255),b
  6229  001C58  0E00               	movlw	0
  6230  001C5A  0101               	movlb	1	; () banked
  6231  001C5C  6F83               	movwf	(MSC_CleanBufferInt@count+1)& (0+255),b
  6232  001C5E  0E80               	movlw	128
  6233  001C60  6F82               	movwf	MSC_CleanBufferInt@count& (0+255),b
  6234  001C62  ECD1  F01F         	call	_MSC_CleanBufferInt	;wreg free
  6235  001C66  0012               	return		;funcret
  6236  001C68                     __end_of_InitIR:
  6237                           	opt stack 0
  6238                           tblptru	equ	0xFF8
  6239                           tblptrh	equ	0xFF7
  6240                           tblptrl	equ	0xFF6
  6241                           tablat	equ	0xFF5
  6242                           prodh	equ	0xFF4
  6243                           prodl	equ	0xFF3
  6244                           intcon	equ	0xFF2
  6245                           intcon2	equ	0xFF1
  6246                           intcon3	equ	0xFF0
  6247                           postinc0	equ	0xFEE
  6248                           wreg	equ	0xFE8
  6249                           postdec1	equ	0xFE5
  6250                           fsr1h	equ	0xFE2
  6251                           fsr1l	equ	0xFE1
  6252                           status	equ	0xFD8
  6253                           
  6254 ;; *************** function _MSC_CleanBufferInt *****************
  6255 ;; Defined at:
  6256 ;;		line 166 in file "MISC.c"
  6257 ;; Parameters:    Size  Location     Type
  6258 ;;  data            2    0[BANK1 ] PTR unsigned int 
  6259 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
  6260 ;;  count           2    2[BANK1 ] unsigned int 
  6261 ;; Auto vars:     Size  Location     Type
  6262 ;;  i               2    4[BANK1 ] unsigned int 
  6263 ;; Return value:  Size  Location     Type
  6264 ;;		None               void
  6265 ;; Registers used:
  6266 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6267 ;; Tracked objects:
  6268 ;;		On entry : 0/0
  6269 ;;		On exit  : 0/0
  6270 ;;		Unchanged: 0/0
  6271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6272 ;;      Params:         0       0       4       0       0
  6273 ;;      Locals:         0       0       2       0       0
  6274 ;;      Temps:          0       0       0       0       0
  6275 ;;      Totals:         0       0       6       0       0
  6276 ;;Total ram usage:        6 bytes
  6277 ;; Hardware stack levels used:    1
  6278 ;; Hardware stack levels required when called:   12
  6279 ;; This function calls:
  6280 ;;		Nothing
  6281 ;; This function is called by:
  6282 ;;		_InitRF
  6283 ;;		_InitIR
  6284 ;;		_MSC_BufferCopyInt
  6285 ;; This function uses a non-reentrant model
  6286 ;;
  6287                           
  6288                           	psect	text40
  6289  003FA2                     __ptext40:
  6290                           	opt stack 0
  6291  003FA2                     _MSC_CleanBufferInt:
  6292                           	opt stack 16
  6293                           
  6294                           ;MISC.c: 168: unsigned int i=0;
  6295                           
  6296                           ;incstack = 0
  6297  003FA2  0E00               	movlw	0
  6298  003FA4  0101               	movlb	1	; () banked
  6299  003FA6  6F85               	movwf	(MSC_CleanBufferInt@i+1)& (0+255),b
  6300  003FA8  0E00               	movlw	0
  6301  003FAA  6F84               	movwf	MSC_CleanBufferInt@i& (0+255),b
  6302                           
  6303                           ;MISC.c: 169: for(i=0; i<count;i++)
  6304  003FAC  0E00               	movlw	0
  6305  003FAE  0101               	movlb	1	; () banked
  6306  003FB0  6F85               	movwf	(MSC_CleanBufferInt@i+1)& (0+255),b
  6307  003FB2  0E00               	movlw	0
  6308  003FB4  6F84               	movwf	MSC_CleanBufferInt@i& (0+255),b
  6309  003FB6  D014               	goto	l7825
  6310  003FB8                     l7821:
  6311                           
  6312                           ; BSR set to: 1
  6313                           ;MISC.c: 170: {
  6314                           ;MISC.c: 171: data[i]= 0;
  6315  003FB8  90D8               	bcf	status,0,c
  6316  003FBA  0101               	movlb	1	; () banked
  6317  003FBC  3584               	rlcf	MSC_CleanBufferInt@i& (0+255),w,b
  6318  003FBE  6ED9               	movwf	fsr2l,c
  6319  003FC0  0101               	movlb	1	; () banked
  6320  003FC2  3585               	rlcf	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  6321  003FC4  6EDA               	movwf	fsr2h,c
  6322  003FC6  0101               	movlb	1	; () banked
  6323  003FC8  5180               	movf	MSC_CleanBufferInt@data& (0+255),w,b
  6324  003FCA  26D9               	addwf	fsr2l,f,c
  6325  003FCC  0101               	movlb	1	; () banked
  6326  003FCE  5181               	movf	(MSC_CleanBufferInt@data+1)& (0+255),w,b
  6327  003FD0  22DA               	addwfc	fsr2h,f,c
  6328  003FD2  0E00               	movlw	0
  6329  003FD4  6EDE               	movwf	postinc2,c
  6330  003FD6  0E00               	movlw	0
  6331  003FD8  6EDD               	movwf	postdec2,c
  6332                           
  6333                           ; BSR set to: 1
  6334  003FDA  0101               	movlb	1	; () banked
  6335  003FDC  4B84               	infsnz	MSC_CleanBufferInt@i& (0+255),f,b
  6336  003FDE  2B85               	incf	(MSC_CleanBufferInt@i+1)& (0+255),f,b
  6337  003FE0                     l7825:
  6338                           
  6339                           ; BSR set to: 1
  6340  003FE0  0101               	movlb	1	; () banked
  6341  003FE2  5182               	movf	MSC_CleanBufferInt@count& (0+255),w,b
  6342  003FE4  0101               	movlb	1	; () banked
  6343  003FE6  5D84               	subwf	MSC_CleanBufferInt@i& (0+255),w,b
  6344  003FE8  0101               	movlb	1	; () banked
  6345  003FEA  5183               	movf	(MSC_CleanBufferInt@count+1)& (0+255),w,b
  6346  003FEC  0101               	movlb	1	; () banked
  6347  003FEE  5985               	subwfb	(MSC_CleanBufferInt@i+1)& (0+255),w,b
  6348  003FF0  B0D8               	btfsc	status,0,c
  6349  003FF2  0012               	return	
  6350  003FF4  D7E1               	goto	l7821
  6351  003FF6                     __end_of_MSC_CleanBufferInt:
  6352                           	opt stack 0
  6353                           tblptru	equ	0xFF8
  6354                           tblptrh	equ	0xFF7
  6355                           tblptrl	equ	0xFF6
  6356                           tablat	equ	0xFF5
  6357                           prodh	equ	0xFF4
  6358                           prodl	equ	0xFF3
  6359                           intcon	equ	0xFF2
  6360                           intcon2	equ	0xFF1
  6361                           intcon3	equ	0xFF0
  6362                           postinc0	equ	0xFEE
  6363                           wreg	equ	0xFE8
  6364                           postdec1	equ	0xFE5
  6365                           fsr1h	equ	0xFE2
  6366                           fsr1l	equ	0xFE1
  6367                           postinc2	equ	0xFDE
  6368                           postdec2	equ	0xFDD
  6369                           fsr2h	equ	0xFDA
  6370                           fsr2l	equ	0xFD9
  6371                           status	equ	0xFD8
  6372                           
  6373 ;; *************** function _InitFlash *****************
  6374 ;; Defined at:
  6375 ;;		line 61 in file "FLASH.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;		None
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;		None
  6380 ;; Return value:  Size  Location     Type
  6381 ;;		None               void
  6382 ;; Registers used:
  6383 ;;		None
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6389 ;;      Params:         0       0       0       0       0
  6390 ;;      Locals:         0       0       0       0       0
  6391 ;;      Temps:          0       0       0       0       0
  6392 ;;      Totals:         0       0       0       0       0
  6393 ;;Total ram usage:        0 bytes
  6394 ;; Hardware stack levels used:    1
  6395 ;; Hardware stack levels required when called:   12
  6396 ;; This function calls:
  6397 ;;		Nothing
  6398 ;; This function is called by:
  6399 ;;		_Init_System
  6400 ;; This function uses a non-reentrant model
  6401 ;;
  6402                           
  6403                           	psect	text41
  6404  001FAA                     __ptext41:
  6405                           	opt stack 0
  6406  001FAA                     _InitFlash:
  6407                           	opt stack 17
  6408                           
  6409                           ;FLASH.c: 64: __nop();
  6410                           
  6411                           ; BSR set to: 1
  6412                           ;incstack = 0
  6413  001FAA  F000               	nop	
  6414  001FAC  0012               	return		;funcret
  6415  001FAE                     __end_of_InitFlash:
  6416                           	opt stack 0
  6417                           tblptru	equ	0xFF8
  6418                           tblptrh	equ	0xFF7
  6419                           tblptrl	equ	0xFF6
  6420                           tablat	equ	0xFF5
  6421                           prodh	equ	0xFF4
  6422                           prodl	equ	0xFF3
  6423                           intcon	equ	0xFF2
  6424                           intcon2	equ	0xFF1
  6425                           intcon3	equ	0xFF0
  6426                           postinc0	equ	0xFEE
  6427                           wreg	equ	0xFE8
  6428                           postdec1	equ	0xFE5
  6429                           fsr1h	equ	0xFE2
  6430                           fsr1l	equ	0xFE1
  6431                           postinc2	equ	0xFDE
  6432                           postdec2	equ	0xFDD
  6433                           fsr2h	equ	0xFDA
  6434                           fsr2l	equ	0xFD9
  6435                           status	equ	0xFD8
  6436                           
  6437 ;; *************** function _InitButton *****************
  6438 ;; Defined at:
  6439 ;;		line 78 in file "BUTTON.c"
  6440 ;; Parameters:    Size  Location     Type
  6441 ;;		None
  6442 ;; Auto vars:     Size  Location     Type
  6443 ;;		None
  6444 ;; Return value:  Size  Location     Type
  6445 ;;		None               void
  6446 ;; Registers used:
  6447 ;;		wreg, status,2, status,0, cstack
  6448 ;; Tracked objects:
  6449 ;;		On entry : 0/0
  6450 ;;		On exit  : 0/0
  6451 ;;		Unchanged: 0/0
  6452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6453 ;;      Params:         0       0       0       0       0
  6454 ;;      Locals:         0       0       0       0       0
  6455 ;;      Temps:          0       0       0       0       0
  6456 ;;      Totals:         0       0       0       0       0
  6457 ;;Total ram usage:        0 bytes
  6458 ;; Hardware stack levels used:    1
  6459 ;; Hardware stack levels required when called:   13
  6460 ;; This function calls:
  6461 ;;		_BUT_IR_PinChangeInt
  6462 ;;		_BUT_ReadButton
  6463 ;; This function is called by:
  6464 ;;		_Init_System
  6465 ;; This function uses a non-reentrant model
  6466 ;;
  6467                           
  6468                           	psect	text42
  6469  001F26                     __ptext42:
  6470                           	opt stack 0
  6471  001F26                     _InitButton:
  6472                           	opt stack 16
  6473                           
  6474                           ;BUTTON.c: 81: INTCON2bits.RBIP = 0;
  6475                           
  6476                           ;incstack = 0
  6477  001F26  90F1               	bcf	intcon2,0,c	;volatile
  6478                           
  6479                           ;BUTTON.c: 82: BUT_ReadButton();
  6480  001F28  EC25  F00C         	call	_BUT_ReadButton	;wreg free
  6481                           
  6482                           ;BUTTON.c: 83: BUT_IR_PinChangeInt(1);
  6483  001F2C  0E01               	movlw	1
  6484  001F2E  ECD5  F00E         	call	_BUT_IR_PinChangeInt
  6485  001F32  0012               	return		;funcret
  6486  001F34                     __end_of_InitButton:
  6487                           	opt stack 0
  6488                           tblptru	equ	0xFF8
  6489                           tblptrh	equ	0xFF7
  6490                           tblptrl	equ	0xFF6
  6491                           tablat	equ	0xFF5
  6492                           prodh	equ	0xFF4
  6493                           prodl	equ	0xFF3
  6494                           intcon	equ	0xFF2
  6495                           intcon2	equ	0xFF1
  6496                           intcon3	equ	0xFF0
  6497                           postinc0	equ	0xFEE
  6498                           wreg	equ	0xFE8
  6499                           postdec1	equ	0xFE5
  6500                           fsr1h	equ	0xFE2
  6501                           fsr1l	equ	0xFE1
  6502                           postinc2	equ	0xFDE
  6503                           postdec2	equ	0xFDD
  6504                           fsr2h	equ	0xFDA
  6505                           fsr2l	equ	0xFD9
  6506                           status	equ	0xFD8
  6507                           
  6508 ;; *************** function _BUT_ReadButton *****************
  6509 ;; Defined at:
  6510 ;;		line 92 in file "BUTTON.c"
  6511 ;; Parameters:    Size  Location     Type
  6512 ;;		None
  6513 ;; Auto vars:     Size  Location     Type
  6514 ;;  value           1    0[BANK1 ] unsigned char 
  6515 ;; Return value:  Size  Location     Type
  6516 ;;                  1    wreg      unsigned char 
  6517 ;; Registers used:
  6518 ;;		wreg, status,2, status,0
  6519 ;; Tracked objects:
  6520 ;;		On entry : 0/0
  6521 ;;		On exit  : 0/0
  6522 ;;		Unchanged: 0/0
  6523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6524 ;;      Params:         0       0       0       0       0
  6525 ;;      Locals:         0       0       1       0       0
  6526 ;;      Temps:          0       0       0       0       0
  6527 ;;      Totals:         0       0       1       0       0
  6528 ;;Total ram usage:        1 bytes
  6529 ;; Hardware stack levels used:    1
  6530 ;; Hardware stack levels required when called:   12
  6531 ;; This function calls:
  6532 ;;		Nothing
  6533 ;; This function is called by:
  6534 ;;		_Init_System
  6535 ;;		_SYS_EnableInt
  6536 ;;		_InitButton
  6537 ;; This function uses a non-reentrant model
  6538 ;;
  6539                           
  6540                           	psect	text43
  6541  00184A                     __ptext43:
  6542                           	opt stack 0
  6543  00184A                     _BUT_ReadButton:
  6544                           	opt stack 17
  6545                           
  6546                           ;BUTTON.c: 94: unsigned char value = PORTB;
  6547                           
  6548                           ;incstack = 0
  6549  00184A  CF81 F180          	movff	3969,BUT_ReadButton@value	;volatile
  6550                           
  6551                           ;BUTTON.c: 95: if((value & 0x20) == 0)
  6552  00184E  0101               	movlb	1	; () banked
  6553  001850  BB80               	btfsc	BUT_ReadButton@value& (0+255),5,b
  6554  001852  D00B               	goto	l7781
  6555                           
  6556                           ; BSR set to: 1
  6557                           ;BUTTON.c: 96: {
  6558                           ;BUTTON.c: 98: if(ButtonValue_prev == 0)
  6559  001854  0100               	movlb	0	; () banked
  6560  001856  51BF               	movf	_ButtonValue_prev& (0+255),w,b
  6561  001858  A4D8               	btfss	status,2,c
  6562  00185A  D002               	goto	l1003
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;BUTTON.c: 99: {
  6566                           ;BUTTON.c: 100: ButtonChange = 1;
  6567  00185C  0E01               	movlw	1
  6568  00185E  6E5F               	movwf	_ButtonChange,c
  6569  001860                     l1003:
  6570                           
  6571                           ; BSR set to: 0
  6572                           ;BUTTON.c: 101: }
  6573                           ;BUTTON.c: 102: ButtonValue_prev = 1;
  6574  001860  0E01               	movlw	1
  6575  001862  0100               	movlb	0	; () banked
  6576  001864  6FBF               	movwf	_ButtonValue_prev& (0+255),b
  6577                           
  6578                           ; BSR set to: 0
  6579                           ;BUTTON.c: 103: return 1;
  6580  001866  0E01               	movlw	1
  6581                           
  6582                           ; BSR set to: 0
  6583  001868  0012               	return	
  6584  00186A                     l7781:
  6585                           
  6586                           ;BUTTON.c: 104: }
  6587                           ;BUTTON.c: 107: if(ButtonValue_prev == 1)
  6588  00186A  0100               	movlb	0	; () banked
  6589  00186C  05BF               	decf	_ButtonValue_prev& (0+255),w,b
  6590  00186E  A4D8               	btfss	status,2,c
  6591  001870  D002               	goto	l1005
  6592                           
  6593                           ; BSR set to: 0
  6594                           ;BUTTON.c: 108: {
  6595                           ;BUTTON.c: 109: ButtonChange = 1;
  6596  001872  0E01               	movlw	1
  6597  001874  6E5F               	movwf	_ButtonChange,c
  6598  001876                     l1005:
  6599                           
  6600                           ; BSR set to: 0
  6601                           ;BUTTON.c: 110: }
  6602                           ;BUTTON.c: 111: ButtonValue_prev = 0;
  6603  001876  0E00               	movlw	0
  6604  001878  0100               	movlb	0	; () banked
  6605  00187A  6FBF               	movwf	_ButtonValue_prev& (0+255),b
  6606                           
  6607                           ; BSR set to: 0
  6608                           ;BUTTON.c: 112: return 0;
  6609  00187C  0E00               	movlw	0
  6610  00187E  0012               	return	
  6611  001880                     __end_of_BUT_ReadButton:
  6612                           	opt stack 0
  6613                           tblptru	equ	0xFF8
  6614                           tblptrh	equ	0xFF7
  6615                           tblptrl	equ	0xFF6
  6616                           tablat	equ	0xFF5
  6617                           prodh	equ	0xFF4
  6618                           prodl	equ	0xFF3
  6619                           intcon	equ	0xFF2
  6620                           intcon2	equ	0xFF1
  6621                           intcon3	equ	0xFF0
  6622                           postinc0	equ	0xFEE
  6623                           wreg	equ	0xFE8
  6624                           postdec1	equ	0xFE5
  6625                           fsr1h	equ	0xFE2
  6626                           fsr1l	equ	0xFE1
  6627                           postinc2	equ	0xFDE
  6628                           postdec2	equ	0xFDD
  6629                           fsr2h	equ	0xFDA
  6630                           fsr2l	equ	0xFD9
  6631                           status	equ	0xFD8
  6632                           
  6633 ;; *************** function _BUT_IR_PinChangeInt *****************
  6634 ;; Defined at:
  6635 ;;		line 55 in file "BUTTON.c"
  6636 ;; Parameters:    Size  Location     Type
  6637 ;;  state           1    wreg     unsigned char 
  6638 ;; Auto vars:     Size  Location     Type
  6639 ;;  state           1    0[BANK1 ] unsigned char 
  6640 ;; Return value:  Size  Location     Type
  6641 ;;		None               void
  6642 ;; Registers used:
  6643 ;;		wreg, status,2
  6644 ;; Tracked objects:
  6645 ;;		On entry : 0/0
  6646 ;;		On exit  : 0/0
  6647 ;;		Unchanged: 0/0
  6648 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6649 ;;      Params:         0       0       0       0       0
  6650 ;;      Locals:         0       0       1       0       0
  6651 ;;      Temps:          0       0       0       0       0
  6652 ;;      Totals:         0       0       1       0       0
  6653 ;;Total ram usage:        1 bytes
  6654 ;; Hardware stack levels used:    1
  6655 ;; Hardware stack levels required when called:   12
  6656 ;; This function calls:
  6657 ;;		Nothing
  6658 ;; This function is called by:
  6659 ;;		_InitButton
  6660 ;; This function uses a non-reentrant model
  6661 ;;
  6662                           
  6663                           	psect	text44
  6664  001DAA                     __ptext44:
  6665                           	opt stack 0
  6666  001DAA                     _BUT_IR_PinChangeInt:
  6667                           	opt stack 16
  6668                           
  6669                           ; BSR set to: 0
  6670                           ;incstack = 0
  6671                           ;BUT_IR_PinChangeInt@state stored from wreg
  6672  001DAA  0101               	movlb	1	; () banked
  6673  001DAC  6F80               	movwf	BUT_IR_PinChangeInt@state& (0+255),b
  6674                           
  6675                           ;BUTTON.c: 57: if(state)
  6676  001DAE  0101               	movlb	1	; () banked
  6677  001DB0  5180               	movf	BUT_IR_PinChangeInt@state& (0+255),w,b
  6678  001DB2  0101               	movlb	1	; () banked
  6679  001DB4  B4D8               	btfsc	status,2,c
  6680  001DB6  D002               	goto	l994
  6681                           
  6682                           ; BSR set to: 1
  6683                           ;BUTTON.c: 58: {
  6684                           ;BUTTON.c: 60: INTCONbits.RBIE = 1;
  6685  001DB8  86F2               	bsf	intcon,3,c	;volatile
  6686                           
  6687                           ;BUTTON.c: 61: }
  6688  001DBA  0012               	return	
  6689  001DBC                     l994:
  6690                           
  6691                           ; BSR set to: 1
  6692                           ;BUTTON.c: 62: else
  6693                           ;BUTTON.c: 63: {
  6694                           ;BUTTON.c: 65: INTCONbits.RBIE = 0;
  6695  001DBC  96F2               	bcf	intcon,3,c	;volatile
  6696  001DBE  0012               	return	
  6697  001DC0                     __end_of_BUT_IR_PinChangeInt:
  6698                           	opt stack 0
  6699                           tblptru	equ	0xFF8
  6700                           tblptrh	equ	0xFF7
  6701                           tblptrl	equ	0xFF6
  6702                           tablat	equ	0xFF5
  6703                           prodh	equ	0xFF4
  6704                           prodl	equ	0xFF3
  6705                           intcon	equ	0xFF2
  6706                           intcon2	equ	0xFF1
  6707                           intcon3	equ	0xFF0
  6708                           postinc0	equ	0xFEE
  6709                           wreg	equ	0xFE8
  6710                           postdec1	equ	0xFE5
  6711                           fsr1h	equ	0xFE2
  6712                           fsr1l	equ	0xFE1
  6713                           postinc2	equ	0xFDE
  6714                           postdec2	equ	0xFDD
  6715                           fsr2h	equ	0xFDA
  6716                           fsr2l	equ	0xFD9
  6717                           status	equ	0xFD8
  6718                           
  6719 ;; *************** function _InitADC *****************
  6720 ;; Defined at:
  6721 ;;		line 122 in file "ADC.c"
  6722 ;; Parameters:    Size  Location     Type
  6723 ;;		None
  6724 ;; Auto vars:     Size  Location     Type
  6725 ;;		None
  6726 ;; Return value:  Size  Location     Type
  6727 ;;		None               void
  6728 ;; Registers used:
  6729 ;;		wreg, status,2, status,0, cstack
  6730 ;; Tracked objects:
  6731 ;;		On entry : 0/0
  6732 ;;		On exit  : 0/0
  6733 ;;		Unchanged: 0/0
  6734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6735 ;;      Params:         0       0       0       0       0
  6736 ;;      Locals:         0       0       0       0       0
  6737 ;;      Temps:          0       0       0       0       0
  6738 ;;      Totals:         0       0       0       0       0
  6739 ;;Total ram usage:        0 bytes
  6740 ;; Hardware stack levels used:    1
  6741 ;; Hardware stack levels required when called:   13
  6742 ;; This function calls:
  6743 ;;		_ADC_ChangeChannel
  6744 ;;		_ADC_ConversionInt
  6745 ;;		_ADC_Module
  6746 ;; This function is called by:
  6747 ;;		_Init_System
  6748 ;; This function uses a non-reentrant model
  6749 ;;
  6750                           
  6751                           	psect	text45
  6752  001AD6                     __ptext45:
  6753                           	opt stack 0
  6754  001AD6                     _InitADC:
  6755                           	opt stack 16
  6756                           
  6757                           ;ADC.c: 124: ADCON1bits.VCFG1 = 0;
  6758                           
  6759                           ; BSR set to: 1
  6760                           ;incstack = 0
  6761  001AD6  9AC1               	bcf	4033,5,c	;volatile
  6762                           
  6763                           ;ADC.c: 125: ADCON1bits.VCFG0 = 0;
  6764  001AD8  98C1               	bcf	4033,4,c	;volatile
  6765                           
  6766                           ;ADC.c: 126: ADCON2bits.ADFM = 1;
  6767  001ADA  8EC0               	bsf	4032,7,c	;volatile
  6768                           
  6769                           ;ADC.c: 127: ADCON2bits.ACQT = 0b111;
  6770  001ADC  86C0               	bsf	4032,3,c	;volatile
  6771  001ADE  88C0               	bsf	4032,4,c	;volatile
  6772  001AE0  8AC0               	bsf	4032,5,c	;volatile
  6773                           
  6774                           ;ADC.c: 128: ADCON2bits.ADCS = 0b110;
  6775  001AE2  50C0               	movf	4032,w,c	;volatile
  6776  001AE4  0BF8               	andlw	-8
  6777  001AE6  0906               	iorlw	6
  6778  001AE8  6EC0               	movwf	4032,c	;volatile
  6779                           
  6780                           ;ADC.c: 129: IPR1bits.ADIP = 0;
  6781  001AEA  9C9F               	bcf	3999,6,c	;volatile
  6782                           
  6783                           ;ADC.c: 130: ADC_ChangeChannel();
  6784  001AEC  EC93  F00D         	call	_ADC_ChangeChannel	;wreg free
  6785                           
  6786                           ;ADC.c: 131: ADC_ConversionInt(1);
  6787  001AF0  0E01               	movlw	1
  6788  001AF2  ECEB  F00E         	call	_ADC_ConversionInt
  6789                           
  6790                           ;ADC.c: 132: ADC_Module(1);
  6791  001AF6  0E01               	movlw	1
  6792  001AF8  ECE0  F00E         	call	_ADC_Module
  6793  001AFC  0012               	return		;funcret
  6794  001AFE                     __end_of_InitADC:
  6795                           	opt stack 0
  6796                           tblptru	equ	0xFF8
  6797                           tblptrh	equ	0xFF7
  6798                           tblptrl	equ	0xFF6
  6799                           tablat	equ	0xFF5
  6800                           prodh	equ	0xFF4
  6801                           prodl	equ	0xFF3
  6802                           intcon	equ	0xFF2
  6803                           intcon2	equ	0xFF1
  6804                           intcon3	equ	0xFF0
  6805                           postinc0	equ	0xFEE
  6806                           wreg	equ	0xFE8
  6807                           postdec1	equ	0xFE5
  6808                           fsr1h	equ	0xFE2
  6809                           fsr1l	equ	0xFE1
  6810                           postinc2	equ	0xFDE
  6811                           postdec2	equ	0xFDD
  6812                           fsr2h	equ	0xFDA
  6813                           fsr2l	equ	0xFD9
  6814                           status	equ	0xFD8
  6815                           
  6816 ;; *************** function _ADC_Module *****************
  6817 ;; Defined at:
  6818 ;;		line 56 in file "ADC.c"
  6819 ;; Parameters:    Size  Location     Type
  6820 ;;  state           1    wreg     unsigned char 
  6821 ;; Auto vars:     Size  Location     Type
  6822 ;;  state           1    0[BANK1 ] unsigned char 
  6823 ;; Return value:  Size  Location     Type
  6824 ;;		None               void
  6825 ;; Registers used:
  6826 ;;		wreg, status,2
  6827 ;; Tracked objects:
  6828 ;;		On entry : 0/0
  6829 ;;		On exit  : 0/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6832 ;;      Params:         0       0       0       0       0
  6833 ;;      Locals:         0       0       1       0       0
  6834 ;;      Temps:          0       0       0       0       0
  6835 ;;      Totals:         0       0       1       0       0
  6836 ;;Total ram usage:        1 bytes
  6837 ;; Hardware stack levels used:    1
  6838 ;; Hardware stack levels required when called:   12
  6839 ;; This function calls:
  6840 ;;		Nothing
  6841 ;; This function is called by:
  6842 ;;		_InitADC
  6843 ;; This function uses a non-reentrant model
  6844 ;;
  6845                           
  6846                           	psect	text46
  6847  001DC0                     __ptext46:
  6848                           	opt stack 0
  6849  001DC0                     _ADC_Module:
  6850                           	opt stack 16
  6851                           
  6852                           ;incstack = 0
  6853                           ;ADC_Module@state stored from wreg
  6854  001DC0  0101               	movlb	1	; () banked
  6855  001DC2  6F80               	movwf	ADC_Module@state& (0+255),b
  6856                           
  6857                           ;ADC.c: 58: if(state)
  6858  001DC4  0101               	movlb	1	; () banked
  6859  001DC6  5180               	movf	ADC_Module@state& (0+255),w,b
  6860  001DC8  0101               	movlb	1	; () banked
  6861  001DCA  B4D8               	btfsc	status,2,c
  6862  001DCC  D002               	goto	l1287
  6863                           
  6864                           ; BSR set to: 1
  6865                           ;ADC.c: 59: {
  6866                           ;ADC.c: 61: ADCON0bits.ADON = 1;
  6867  001DCE  80C2               	bsf	4034,0,c	;volatile
  6868                           
  6869                           ;ADC.c: 62: }
  6870  001DD0  0012               	return	
  6871  001DD2                     l1287:
  6872                           
  6873                           ; BSR set to: 1
  6874                           ;ADC.c: 63: else
  6875                           ;ADC.c: 64: {
  6876                           ;ADC.c: 66: ADCON0bits.ADON = 0;
  6877  001DD2  90C2               	bcf	4034,0,c	;volatile
  6878  001DD4  0012               	return	
  6879  001DD6                     __end_of_ADC_Module:
  6880                           	opt stack 0
  6881                           tblptru	equ	0xFF8
  6882                           tblptrh	equ	0xFF7
  6883                           tblptrl	equ	0xFF6
  6884                           tablat	equ	0xFF5
  6885                           prodh	equ	0xFF4
  6886                           prodl	equ	0xFF3
  6887                           intcon	equ	0xFF2
  6888                           intcon2	equ	0xFF1
  6889                           intcon3	equ	0xFF0
  6890                           postinc0	equ	0xFEE
  6891                           wreg	equ	0xFE8
  6892                           postdec1	equ	0xFE5
  6893                           fsr1h	equ	0xFE2
  6894                           fsr1l	equ	0xFE1
  6895                           postinc2	equ	0xFDE
  6896                           postdec2	equ	0xFDD
  6897                           fsr2h	equ	0xFDA
  6898                           fsr2l	equ	0xFD9
  6899                           status	equ	0xFD8
  6900                           
  6901 ;; *************** function _ADC_ConversionInt *****************
  6902 ;; Defined at:
  6903 ;;		line 99 in file "ADC.c"
  6904 ;; Parameters:    Size  Location     Type
  6905 ;;  state           1    wreg     unsigned char 
  6906 ;; Auto vars:     Size  Location     Type
  6907 ;;  state           1    0[BANK1 ] unsigned char 
  6908 ;; Return value:  Size  Location     Type
  6909 ;;		None               void
  6910 ;; Registers used:
  6911 ;;		wreg, status,2
  6912 ;; Tracked objects:
  6913 ;;		On entry : 0/0
  6914 ;;		On exit  : 0/0
  6915 ;;		Unchanged: 0/0
  6916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  6917 ;;      Params:         0       0       0       0       0
  6918 ;;      Locals:         0       0       1       0       0
  6919 ;;      Temps:          0       0       0       0       0
  6920 ;;      Totals:         0       0       1       0       0
  6921 ;;Total ram usage:        1 bytes
  6922 ;; Hardware stack levels used:    1
  6923 ;; Hardware stack levels required when called:   12
  6924 ;; This function calls:
  6925 ;;		Nothing
  6926 ;; This function is called by:
  6927 ;;		_InitADC
  6928 ;; This function uses a non-reentrant model
  6929 ;;
  6930                           
  6931                           	psect	text47
  6932  001DD6                     __ptext47:
  6933                           	opt stack 0
  6934  001DD6                     _ADC_ConversionInt:
  6935                           	opt stack 16
  6936                           
  6937                           ; BSR set to: 1
  6938                           ;incstack = 0
  6939                           ;ADC_ConversionInt@state stored from wreg
  6940  001DD6  0101               	movlb	1	; () banked
  6941  001DD8  6F80               	movwf	ADC_ConversionInt@state& (0+255),b
  6942                           
  6943                           ;ADC.c: 101: if(state)
  6944  001DDA  0101               	movlb	1	; () banked
  6945  001DDC  5180               	movf	ADC_ConversionInt@state& (0+255),w,b
  6946  001DDE  0101               	movlb	1	; () banked
  6947  001DE0  B4D8               	btfsc	status,2,c
  6948  001DE2  D002               	goto	l1299
  6949                           
  6950                           ; BSR set to: 1
  6951                           ;ADC.c: 102: {
  6952                           ;ADC.c: 104: PIE1bits.ADIE = 1;
  6953  001DE4  8C9D               	bsf	3997,6,c	;volatile
  6954                           
  6955                           ;ADC.c: 105: }
  6956  001DE6  0012               	return	
  6957  001DE8                     l1299:
  6958                           
  6959                           ; BSR set to: 1
  6960                           ;ADC.c: 106: else
  6961                           ;ADC.c: 107: {
  6962                           ;ADC.c: 109: PIE1bits.ADIE = 0;
  6963  001DE8  9C9D               	bcf	3997,6,c	;volatile
  6964  001DEA  0012               	return	
  6965  001DEC                     __end_of_ADC_ConversionInt:
  6966                           	opt stack 0
  6967                           tblptru	equ	0xFF8
  6968                           tblptrh	equ	0xFF7
  6969                           tblptrl	equ	0xFF6
  6970                           tablat	equ	0xFF5
  6971                           prodh	equ	0xFF4
  6972                           prodl	equ	0xFF3
  6973                           intcon	equ	0xFF2
  6974                           intcon2	equ	0xFF1
  6975                           intcon3	equ	0xFF0
  6976                           postinc0	equ	0xFEE
  6977                           wreg	equ	0xFE8
  6978                           postdec1	equ	0xFE5
  6979                           fsr1h	equ	0xFE2
  6980                           fsr1l	equ	0xFE1
  6981                           postinc2	equ	0xFDE
  6982                           postdec2	equ	0xFDD
  6983                           fsr2h	equ	0xFDA
  6984                           fsr2l	equ	0xFD9
  6985                           status	equ	0xFD8
  6986                           
  6987 ;; *************** function _ADC_ChangeChannel *****************
  6988 ;; Defined at:
  6989 ;;		line 166 in file "ADC.c"
  6990 ;; Parameters:    Size  Location     Type
  6991 ;;		None
  6992 ;; Auto vars:     Size  Location     Type
  6993 ;;		None
  6994 ;; Return value:  Size  Location     Type
  6995 ;;		None               void
  6996 ;; Registers used:
  6997 ;;		wreg, status,2, status,0
  6998 ;; Tracked objects:
  6999 ;;		On entry : 0/0
  7000 ;;		On exit  : 0/0
  7001 ;;		Unchanged: 0/0
  7002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7003 ;;      Params:         0       0       0       0       0
  7004 ;;      Locals:         0       0       0       0       0
  7005 ;;      Temps:          0       0       0       0       0
  7006 ;;      Totals:         0       0       0       0       0
  7007 ;;Total ram usage:        0 bytes
  7008 ;; Hardware stack levels used:    1
  7009 ;; Hardware stack levels required when called:   12
  7010 ;; This function calls:
  7011 ;;		Nothing
  7012 ;; This function is called by:
  7013 ;;		_InitADC
  7014 ;; This function uses a non-reentrant model
  7015 ;;
  7016                           
  7017                           	psect	text48
  7018  001B26                     __ptext48:
  7019                           	opt stack 0
  7020  001B26                     _ADC_ChangeChannel:
  7021                           	opt stack 16
  7022                           
  7023                           ;ADC.c: 168: if(ADC_CurrentSource == 10)
  7024                           
  7025                           ; BSR set to: 1
  7026                           ;incstack = 0
  7027  001B26  0E0A               	movlw	10
  7028  001B28  1865               	xorwf	_ADC_CurrentSource,w,c
  7029  001B2A  A4D8               	btfss	status,2,c
  7030  001B2C  D007               	goto	l7891
  7031                           
  7032                           ;ADC.c: 169: {
  7033                           ;ADC.c: 170: ADC_CurrentSource = 11;
  7034  001B2E  0E0B               	movlw	11
  7035  001B30  6E65               	movwf	_ADC_CurrentSource,c
  7036                           
  7037                           ;ADC.c: 171: ADCON0bits.CHS = 1;
  7038  001B32  50C2               	movf	4034,w,c	;volatile
  7039  001B34  0BC3               	andlw	-61
  7040  001B36  0904               	iorlw	4
  7041  001B38  6EC2               	movwf	4034,c	;volatile
  7042                           
  7043                           ;ADC.c: 172: }
  7044  001B3A  0012               	return	
  7045  001B3C                     l7891:
  7046                           
  7047                           ;ADC.c: 173: else
  7048                           ;ADC.c: 174: {
  7049                           ;ADC.c: 175: ADC_CurrentSource = 10;
  7050  001B3C  0E0A               	movlw	10
  7051  001B3E  6E65               	movwf	_ADC_CurrentSource,c
  7052                           
  7053                           ;ADC.c: 176: ADCON0bits.CHS = 0;
  7054  001B40  94C2               	bcf	4034,2,c	;volatile
  7055  001B42  96C2               	bcf	4034,3,c	;volatile
  7056  001B44  98C2               	bcf	4034,4,c	;volatile
  7057  001B46  9AC2               	bcf	4034,5,c	;volatile
  7058  001B48  0012               	return	
  7059  001B4A                     __end_of_ADC_ChangeChannel:
  7060                           	opt stack 0
  7061                           tblptru	equ	0xFF8
  7062                           tblptrh	equ	0xFF7
  7063                           tblptrl	equ	0xFF6
  7064                           tablat	equ	0xFF5
  7065                           prodh	equ	0xFF4
  7066                           prodl	equ	0xFF3
  7067                           intcon	equ	0xFF2
  7068                           intcon2	equ	0xFF1
  7069                           intcon3	equ	0xFF0
  7070                           postinc0	equ	0xFEE
  7071                           wreg	equ	0xFE8
  7072                           postdec1	equ	0xFE5
  7073                           fsr1h	equ	0xFE2
  7074                           fsr1l	equ	0xFE1
  7075                           postinc2	equ	0xFDE
  7076                           postdec2	equ	0xFDD
  7077                           fsr2h	equ	0xFDA
  7078                           fsr2l	equ	0xFD9
  7079                           status	equ	0xFD8
  7080                           
  7081 ;; *************** function _IR_ReadReceiver *****************
  7082 ;; Defined at:
  7083 ;;		line 80 in file "IR.c"
  7084 ;; Parameters:    Size  Location     Type
  7085 ;;		None
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;  value           1    0[BANK1 ] unsigned char 
  7088 ;; Return value:  Size  Location     Type
  7089 ;;                  1    wreg      unsigned char 
  7090 ;; Registers used:
  7091 ;;		wreg, status,2, status,0
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7097 ;;      Params:         0       0       0       0       0
  7098 ;;      Locals:         0       0       1       0       0
  7099 ;;      Temps:          0       0       0       0       0
  7100 ;;      Totals:         0       0       1       0       0
  7101 ;;Total ram usage:        1 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:   12
  7104 ;; This function calls:
  7105 ;;		Nothing
  7106 ;; This function is called by:
  7107 ;;		_Init_System
  7108 ;;		_SYS_EnableInt
  7109 ;; This function uses a non-reentrant model
  7110 ;;
  7111                           
  7112                           	psect	text49
  7113  001880                     __ptext49:
  7114                           	opt stack 0
  7115  001880                     _IR_ReadReceiver:
  7116                           	opt stack 17
  7117                           
  7118                           ;IR.c: 82: unsigned char value = PORTB;
  7119                           
  7120                           ;incstack = 0
  7121  001880  CF81 F180          	movff	3969,IR_ReadReceiver@value	;volatile
  7122                           
  7123                           ;IR.c: 84: if(value & 0x10)
  7124  001884  0101               	movlb	1	; () banked
  7125  001886  A980               	btfss	IR_ReadReceiver@value& (0+255),4,b
  7126  001888  D00B               	goto	l7951
  7127                           
  7128                           ; BSR set to: 1
  7129                           ;IR.c: 85: {
  7130                           ;IR.c: 86: if(IRValue_prev == 0)
  7131  00188A  0100               	movlb	0	; () banked
  7132  00188C  51C3               	movf	_IRValue_prev& (0+255),w,b
  7133  00188E  A4D8               	btfss	status,2,c
  7134  001890  D002               	goto	l540
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;IR.c: 87: {
  7138                           ;IR.c: 88: IRChange = 1;
  7139  001892  0E01               	movlw	1
  7140  001894  6E60               	movwf	_IRChange,c
  7141  001896                     l540:
  7142                           
  7143                           ; BSR set to: 0
  7144                           ;IR.c: 89: }
  7145                           ;IR.c: 90: IRValue_prev = 1;
  7146  001896  0E01               	movlw	1
  7147  001898  0100               	movlb	0	; () banked
  7148  00189A  6FC3               	movwf	_IRValue_prev& (0+255),b
  7149                           
  7150                           ; BSR set to: 0
  7151                           ;IR.c: 91: return 1;
  7152  00189C  0E01               	movlw	1
  7153                           
  7154                           ; BSR set to: 0
  7155  00189E  0012               	return	
  7156  0018A0                     l7951:
  7157                           
  7158                           ;IR.c: 92: }
  7159                           ;IR.c: 94: if(IRValue_prev == 1)
  7160  0018A0  0100               	movlb	0	; () banked
  7161  0018A2  05C3               	decf	_IRValue_prev& (0+255),w,b
  7162  0018A4  A4D8               	btfss	status,2,c
  7163  0018A6  D002               	goto	l542
  7164                           
  7165                           ; BSR set to: 0
  7166                           ;IR.c: 95: {
  7167                           ;IR.c: 96: IRChange = 1;
  7168  0018A8  0E01               	movlw	1
  7169  0018AA  6E60               	movwf	_IRChange,c
  7170  0018AC                     l542:
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;IR.c: 97: }
  7174                           ;IR.c: 98: IRValue_prev = 0;
  7175  0018AC  0E00               	movlw	0
  7176  0018AE  0100               	movlb	0	; () banked
  7177  0018B0  6FC3               	movwf	_IRValue_prev& (0+255),b
  7178                           
  7179                           ; BSR set to: 0
  7180                           ;IR.c: 99: return 0;
  7181  0018B2  0E00               	movlw	0
  7182  0018B4  0012               	return	
  7183  0018B6                     __end_of_IR_ReadReceiver:
  7184                           	opt stack 0
  7185                           tblptru	equ	0xFF8
  7186                           tblptrh	equ	0xFF7
  7187                           tblptrl	equ	0xFF6
  7188                           tablat	equ	0xFF5
  7189                           prodh	equ	0xFF4
  7190                           prodl	equ	0xFF3
  7191                           intcon	equ	0xFF2
  7192                           intcon2	equ	0xFF1
  7193                           intcon3	equ	0xFF0
  7194                           postinc0	equ	0xFEE
  7195                           wreg	equ	0xFE8
  7196                           postdec1	equ	0xFE5
  7197                           fsr1h	equ	0xFE2
  7198                           fsr1l	equ	0xFE1
  7199                           postinc2	equ	0xFDE
  7200                           postdec2	equ	0xFDD
  7201                           fsr2h	equ	0xFDA
  7202                           fsr2l	equ	0xFD9
  7203                           status	equ	0xFD8
  7204                           
  7205 ;; *************** function _Init_App *****************
  7206 ;; Defined at:
  7207 ;;		line 72 in file "USER.c"
  7208 ;; Parameters:    Size  Location     Type
  7209 ;;		None
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;		None
  7212 ;; Return value:  Size  Location     Type
  7213 ;;		None               void
  7214 ;; Registers used:
  7215 ;;		wreg, status,2
  7216 ;; Tracked objects:
  7217 ;;		On entry : 0/0
  7218 ;;		On exit  : 0/0
  7219 ;;		Unchanged: 0/0
  7220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7221 ;;      Params:         0       0       0       0       0
  7222 ;;      Locals:         0       0       0       0       0
  7223 ;;      Temps:          0       0       0       0       0
  7224 ;;      Totals:         0       0       0       0       0
  7225 ;;Total ram usage:        0 bytes
  7226 ;; Hardware stack levels used:    1
  7227 ;; Hardware stack levels required when called:   12
  7228 ;; This function calls:
  7229 ;;		Nothing
  7230 ;; This function is called by:
  7231 ;;		_main
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           	psect	text50
  7236  001760                     __ptext50:
  7237                           	opt stack 0
  7238  001760                     _Init_App:
  7239                           	opt stack 18
  7240                           
  7241                           ;USER.c: 74: LATA = 0;
  7242                           
  7243                           ; BSR set to: 0
  7244                           ;incstack = 0
  7245  001760  0E00               	movlw	0
  7246  001762  6E89               	movwf	3977,c	;volatile
  7247                           
  7248                           ;USER.c: 75: LATB = 0;
  7249  001764  0E00               	movlw	0
  7250  001766  6E8A               	movwf	3978,c	;volatile
  7251                           
  7252                           ;USER.c: 76: LATC = 0;
  7253  001768  0E00               	movlw	0
  7254  00176A  6E8B               	movwf	3979,c	;volatile
  7255                           
  7256                           ;USER.c: 78: ADCON1bits.PCFG = 0b1101;
  7257  00176C  50C1               	movf	4033,w,c	;volatile
  7258  00176E  0BF0               	andlw	-16
  7259  001770  090D               	iorlw	13
  7260  001772  6EC1               	movwf	4033,c	;volatile
  7261                           
  7262                           ;USER.c: 81: TRISCbits.TRISC0 = 1;
  7263  001774  8094               	bsf	3988,0,c	;volatile
  7264                           
  7265                           ;USER.c: 82: TRISCbits.TRISC1 = 1;
  7266  001776  8294               	bsf	3988,1,c	;volatile
  7267                           
  7268                           ;USER.c: 85: TRISAbits.TRISA0 = 1;
  7269  001778  8092               	bsf	3986,0,c	;volatile
  7270                           
  7271                           ;USER.c: 89: TRISAbits.TRISA1 = 1;
  7272  00177A  8292               	bsf	3986,1,c	;volatile
  7273                           
  7274                           ;USER.c: 92: TRISAbits.TRISA2 = 0;
  7275  00177C  9492               	bcf	3986,2,c	;volatile
  7276                           
  7277                           ;USER.c: 95: TRISAbits.TRISA5 = 0;
  7278  00177E  9A92               	bcf	3986,5,c	;volatile
  7279                           
  7280                           ;USER.c: 98: TRISBbits.TRISB1 = 1;
  7281  001780  8293               	bsf	3987,1,c	;volatile
  7282                           
  7283                           ;USER.c: 99: TRISBbits.TRISB2 = 1;
  7284  001782  8493               	bsf	3987,2,c	;volatile
  7285                           
  7286                           ;USER.c: 103: TRISBbits.TRISB3 = 0;
  7287  001784  9693               	bcf	3987,3,c	;volatile
  7288                           
  7289                           ;USER.c: 106: TRISCbits.TRISC2 = 0;
  7290  001786  9494               	bcf	3988,2,c	;volatile
  7291                           
  7292                           ;USER.c: 110: TRISCbits.TRISC3 = 1;
  7293  001788  8694               	bsf	3988,3,c	;volatile
  7294                           
  7295                           ;USER.c: 113: TRISCbits.TRISC5 = 1;
  7296  00178A  8A94               	bsf	3988,5,c	;volatile
  7297                           
  7298                           ;USER.c: 117: TRISCbits.TRISC4 = 0;
  7299  00178C  9894               	bcf	3988,4,c	;volatile
  7300                           
  7301                           ;USER.c: 121: TRISBbits.TRISB0 = 1;
  7302  00178E  8093               	bsf	3987,0,c	;volatile
  7303                           
  7304                           ;USER.c: 122: TRISBbits.TRISB4 = 1;
  7305  001790  8893               	bsf	3987,4,c	;volatile
  7306                           
  7307                           ;USER.c: 126: TRISBbits.TRISB5 = 1;
  7308  001792  8A93               	bsf	3987,5,c	;volatile
  7309                           
  7310                           ;USER.c: 130: TRISAbits.TRISA3 = 1;
  7311  001794  8692               	bsf	3986,3,c	;volatile
  7312                           
  7313                           ;USER.c: 142: TRISCbits.TRISC6 = 0;
  7314  001796  9C94               	bcf	3988,6,c	;volatile
  7315                           
  7316                           ;USER.c: 143: TRISCbits.TRISC7 = 0;
  7317  001798  9E94               	bcf	3988,7,c	;volatile
  7318  00179A  0012               	return		;funcret
  7319  00179C                     __end_of_Init_App:
  7320                           	opt stack 0
  7321                           tblptru	equ	0xFF8
  7322                           tblptrh	equ	0xFF7
  7323                           tblptrl	equ	0xFF6
  7324                           tablat	equ	0xFF5
  7325                           prodh	equ	0xFF4
  7326                           prodl	equ	0xFF3
  7327                           intcon	equ	0xFF2
  7328                           intcon2	equ	0xFF1
  7329                           intcon3	equ	0xFF0
  7330                           postinc0	equ	0xFEE
  7331                           wreg	equ	0xFE8
  7332                           postdec1	equ	0xFE5
  7333                           fsr1h	equ	0xFE2
  7334                           fsr1l	equ	0xFE1
  7335                           postinc2	equ	0xFDE
  7336                           postdec2	equ	0xFDD
  7337                           fsr2h	equ	0xFDA
  7338                           fsr2l	equ	0xFD9
  7339                           status	equ	0xFD8
  7340                           
  7341 ;; *************** function _IR_LoadCode *****************
  7342 ;; Defined at:
  7343 ;;		line 129 in file "IR.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;		None
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;  High            3   29[BANK1 ] unsigned char 
  7348 ;;  Low             3   26[BANK1 ] unsigned char 
  7349 ;; Return value:  Size  Location     Type
  7350 ;;		None               void
  7351 ;; Registers used:
  7352 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7353 ;; Tracked objects:
  7354 ;;		On entry : 0/0
  7355 ;;		On exit  : 0/0
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7358 ;;      Params:         0       0       0       0       0
  7359 ;;      Locals:         0       0       6       0       0
  7360 ;;      Temps:          0       0       0       0       0
  7361 ;;      Totals:         0       0       6       0       0
  7362 ;;Total ram usage:        6 bytes
  7363 ;; Hardware stack levels used:    1
  7364 ;; Hardware stack levels required when called:   14
  7365 ;; This function calls:
  7366 ;;		_IR_CalculateCodesize
  7367 ;;		___ftmul
  7368 ;;		___fttol
  7369 ;;		___lwtoft
  7370 ;; This function is called by:
  7371 ;;		_main
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           	psect	text51
  7376  0009AA                     __ptext51:
  7377                           	opt stack 0
  7378  0009AA                     _IR_LoadCode:
  7379                           	opt stack 16
  7380                           
  7381                           ;IR.c: 131: double Low = 0.0;
  7382                           
  7383                           ;incstack = 0
  7384  0009AA  0E00               	movlw	0
  7385  0009AC  0101               	movlb	1	; () banked
  7386  0009AE  6F9A               	movwf	IR_LoadCode@Low& (0+255),b
  7387  0009B0  0E00               	movlw	0
  7388  0009B2  0101               	movlb	1	; () banked
  7389  0009B4  6F9B               	movwf	(IR_LoadCode@Low+1)& (0+255),b
  7390  0009B6  0E00               	movlw	0
  7391  0009B8  0101               	movlb	1	; () banked
  7392  0009BA  6F9C               	movwf	(IR_LoadCode@Low+2)& (0+255),b
  7393                           
  7394                           ;IR.c: 132: double High = 0.0;
  7395  0009BC  0E00               	movlw	0
  7396  0009BE  0101               	movlb	1	; () banked
  7397  0009C0  6F9D               	movwf	IR_LoadCode@High& (0+255),b
  7398  0009C2  0E00               	movlw	0
  7399  0009C4  0101               	movlb	1	; () banked
  7400  0009C6  6F9E               	movwf	(IR_LoadCode@High+1)& (0+255),b
  7401  0009C8  0E00               	movlw	0
  7402  0009CA  0101               	movlb	1	; () banked
  7403  0009CC  6F9F               	movwf	(IR_LoadCode@High+2)& (0+255),b
  7404                           
  7405                           ; BSR set to: 1
  7406                           ;IR.c: 134: Low = (double)IR_SavedTiming[0] * (1.0 - 0.3);
  7407  0009CE  0E00               	movlw	0
  7408  0009D0  6EF6               	movwf	tblptrl,c
  7409  0009D2                     	if	1	;There is more than 1 active tblptr byte
  7410  0009D2  0E24               	movlw	36
  7411  0009D4  6EF7               	movwf	tblptrh,c
  7412  0009D6                     	endif
  7413  0009D6                     	if	0	;There are less than 3 active tblptr bytes
  7414  0009D6                     	endif
  7415  0009D6  0009               	tblrd		*+
  7416  0009D8  CFF5 F188          	movff	tablat,___lwtoft@c
  7417  0009DC  000A               	tblrd		*-
  7418  0009DE  CFF5 F189          	movff	tablat,___lwtoft@c+1
  7419  0009E2  EC2C  F00D         	call	___lwtoft	;wreg free
  7420  0009E6  C188  F18B         	movff	?___lwtoft,___ftmul@f1
  7421  0009EA  C189  F18C         	movff	?___lwtoft+1,___ftmul@f1+1
  7422  0009EE  C18A  F18D         	movff	?___lwtoft+2,___ftmul@f1+2
  7423  0009F2  0E33               	movlw	51
  7424  0009F4  0101               	movlb	1	; () banked
  7425  0009F6  6F8E               	movwf	___ftmul@f2& (0+255),b
  7426  0009F8  0E33               	movlw	51
  7427  0009FA  0101               	movlb	1	; () banked
  7428  0009FC  6F8F               	movwf	(___ftmul@f2+1)& (0+255),b
  7429  0009FE  0E3F               	movlw	63
  7430  000A00  0101               	movlb	1	; () banked
  7431  000A02  6F90               	movwf	(___ftmul@f2+2)& (0+255),b
  7432  000A04  ECD1  F01D         	call	___ftmul	;wreg free
  7433  000A08  C18B  F19A         	movff	?___ftmul,IR_LoadCode@Low
  7434  000A0C  C18C  F19B         	movff	?___ftmul+1,IR_LoadCode@Low+1
  7435  000A10  C18D  F19C         	movff	?___ftmul+2,IR_LoadCode@Low+2
  7436                           
  7437                           ;IR.c: 135: High = (double)IR_SavedTiming[0] * (1.0 + 0.3);
  7438  000A14  0E00               	movlw	0
  7439  000A16  6EF6               	movwf	tblptrl,c
  7440  000A18                     	if	1	;There is more than 1 active tblptr byte
  7441  000A18  0E24               	movlw	36
  7442  000A1A  6EF7               	movwf	tblptrh,c
  7443  000A1C                     	endif
  7444  000A1C                     	if	0	;There are less than 3 active tblptr bytes
  7445  000A1C                     	endif
  7446  000A1C  0009               	tblrd		*+
  7447  000A1E  CFF5 F188          	movff	tablat,___lwtoft@c
  7448  000A22  000A               	tblrd		*-
  7449  000A24  CFF5 F189          	movff	tablat,___lwtoft@c+1
  7450  000A28  EC2C  F00D         	call	___lwtoft	;wreg free
  7451  000A2C  C188  F18B         	movff	?___lwtoft,___ftmul@f1
  7452  000A30  C189  F18C         	movff	?___lwtoft+1,___ftmul@f1+1
  7453  000A34  C18A  F18D         	movff	?___lwtoft+2,___ftmul@f1+2
  7454  000A38  0E66               	movlw	102
  7455  000A3A  0101               	movlb	1	; () banked
  7456  000A3C  6F8E               	movwf	___ftmul@f2& (0+255),b
  7457  000A3E  0EA6               	movlw	166
  7458  000A40  0101               	movlb	1	; () banked
  7459  000A42  6F8F               	movwf	(___ftmul@f2+1)& (0+255),b
  7460  000A44  0E3F               	movlw	63
  7461  000A46  0101               	movlb	1	; () banked
  7462  000A48  6F90               	movwf	(___ftmul@f2+2)& (0+255),b
  7463  000A4A  ECD1  F01D         	call	___ftmul	;wreg free
  7464  000A4E  C18B  F19D         	movff	?___ftmul,IR_LoadCode@High
  7465  000A52  C18C  F19E         	movff	?___ftmul+1,IR_LoadCode@High+1
  7466  000A56  C18D  F19F         	movff	?___ftmul+2,IR_LoadCode@High+2
  7467                           
  7468                           ;IR.c: 137: IR_SyncLow = (unsigned int) Low;
  7469  000A5A  C19A  F180         	movff	IR_LoadCode@Low,___fttol@f1
  7470  000A5E  C19B  F181         	movff	IR_LoadCode@Low+1,___fttol@f1+1
  7471  000A62  C19C  F182         	movff	IR_LoadCode@Low+2,___fttol@f1+2
  7472  000A66  EC2F  F01F         	call	___fttol	;wreg free
  7473  000A6A  C180  F057         	movff	?___fttol,_IR_SyncLow
  7474  000A6E  C181  F058         	movff	?___fttol+1,_IR_SyncLow+1
  7475                           
  7476                           ;IR.c: 138: IR_SyncHigh = (unsigned int) High;
  7477  000A72  C19D  F180         	movff	IR_LoadCode@High,___fttol@f1
  7478  000A76  C19E  F181         	movff	IR_LoadCode@High+1,___fttol@f1+1
  7479  000A7A  C19F  F182         	movff	IR_LoadCode@High+2,___fttol@f1+2
  7480  000A7E  EC2F  F01F         	call	___fttol	;wreg free
  7481  000A82  C180  F055         	movff	?___fttol,_IR_SyncHigh
  7482  000A86  C181  F056         	movff	?___fttol+1,_IR_SyncHigh+1
  7483                           
  7484                           ;IR.c: 140: IR_CodeSize = IR_CalculateCodesize();
  7485  000A8A  EC2F  F00B         	call	_IR_CalculateCodesize	;wreg free
  7486  000A8E  6E62               	movwf	_IR_CodeSize,c
  7487  000A90  0012               	return		;funcret
  7488  000A92                     __end_of_IR_LoadCode:
  7489                           	opt stack 0
  7490                           tblptru	equ	0xFF8
  7491                           tblptrh	equ	0xFF7
  7492                           tblptrl	equ	0xFF6
  7493                           tablat	equ	0xFF5
  7494                           prodh	equ	0xFF4
  7495                           prodl	equ	0xFF3
  7496                           intcon	equ	0xFF2
  7497                           intcon2	equ	0xFF1
  7498                           intcon3	equ	0xFF0
  7499                           postinc0	equ	0xFEE
  7500                           wreg	equ	0xFE8
  7501                           postdec1	equ	0xFE5
  7502                           fsr1h	equ	0xFE2
  7503                           fsr1l	equ	0xFE1
  7504                           postinc2	equ	0xFDE
  7505                           postdec2	equ	0xFDD
  7506                           fsr2h	equ	0xFDA
  7507                           fsr2l	equ	0xFD9
  7508                           status	equ	0xFD8
  7509                           
  7510 ;; *************** function ___lwtoft *****************
  7511 ;; Defined at:
  7512 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
  7513 ;; Parameters:    Size  Location     Type
  7514 ;;  c               2    8[BANK1 ] unsigned int 
  7515 ;; Auto vars:     Size  Location     Type
  7516 ;;		None
  7517 ;; Return value:  Size  Location     Type
  7518 ;;                  3    8[BANK1 ] float 
  7519 ;; Registers used:
  7520 ;;		wreg, status,2, status,0, cstack
  7521 ;; Tracked objects:
  7522 ;;		On entry : 0/0
  7523 ;;		On exit  : 0/0
  7524 ;;		Unchanged: 0/0
  7525 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7526 ;;      Params:         0       0       3       0       0
  7527 ;;      Locals:         0       0       0       0       0
  7528 ;;      Temps:          0       0       0       0       0
  7529 ;;      Totals:         0       0       3       0       0
  7530 ;;Total ram usage:        3 bytes
  7531 ;; Hardware stack levels used:    1
  7532 ;; Hardware stack levels required when called:   13
  7533 ;; This function calls:
  7534 ;;		___ftpack
  7535 ;; This function is called by:
  7536 ;;		_RF_LoadCode
  7537 ;;		_IR_LoadCode
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           	psect	text52
  7542  001A58                     __ptext52:
  7543                           	opt stack 0
  7544  001A58                     ___lwtoft:
  7545                           	opt stack 16
  7546                           
  7547                           ;incstack = 0
  7548  001A58  C188  F180         	movff	___lwtoft@c,___ftpack@arg
  7549  001A5C  C189  F181         	movff	___lwtoft@c+1,___ftpack@arg+1
  7550  001A60  0101               	movlb	1	; () banked
  7551  001A62  6B82               	clrf	(___ftpack@arg+2)& (0+255),b
  7552  001A64  0E8E               	movlw	142
  7553  001A66  0101               	movlb	1	; () banked
  7554  001A68  6F83               	movwf	___ftpack@exp& (0+255),b
  7555  001A6A  0E00               	movlw	0
  7556  001A6C  0101               	movlb	1	; () banked
  7557  001A6E  6F84               	movwf	___ftpack@sign& (0+255),b
  7558  001A70  ECEB  F001         	call	___ftpack	;wreg free
  7559  001A74  C180  F188         	movff	?___ftpack,?___lwtoft
  7560  001A78  C181  F189         	movff	?___ftpack+1,?___lwtoft+1
  7561  001A7C  C182  F18A         	movff	?___ftpack+2,?___lwtoft+2
  7562  001A80  0012               	return	
  7563  001A82                     __end_of___lwtoft:
  7564                           	opt stack 0
  7565                           tblptru	equ	0xFF8
  7566                           tblptrh	equ	0xFF7
  7567                           tblptrl	equ	0xFF6
  7568                           tablat	equ	0xFF5
  7569                           prodh	equ	0xFF4
  7570                           prodl	equ	0xFF3
  7571                           intcon	equ	0xFF2
  7572                           intcon2	equ	0xFF1
  7573                           intcon3	equ	0xFF0
  7574                           postinc0	equ	0xFEE
  7575                           wreg	equ	0xFE8
  7576                           postdec1	equ	0xFE5
  7577                           fsr1h	equ	0xFE2
  7578                           fsr1l	equ	0xFE1
  7579                           postinc2	equ	0xFDE
  7580                           postdec2	equ	0xFDD
  7581                           fsr2h	equ	0xFDA
  7582                           fsr2l	equ	0xFD9
  7583                           status	equ	0xFD8
  7584                           
  7585 ;; *************** function ___fttol *****************
  7586 ;; Defined at:
  7587 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
  7588 ;; Parameters:    Size  Location     Type
  7589 ;;  f1              3    0[BANK1 ] float 
  7590 ;; Auto vars:     Size  Location     Type
  7591 ;;  lval            4   10[BANK1 ] unsigned long 
  7592 ;;  exp1            1   14[BANK1 ] unsigned char 
  7593 ;;  sign1           1    9[BANK1 ] unsigned char 
  7594 ;; Return value:  Size  Location     Type
  7595 ;;                  4    0[BANK1 ] long 
  7596 ;; Registers used:
  7597 ;;		wreg, status,2, status,0
  7598 ;; Tracked objects:
  7599 ;;		On entry : 0/0
  7600 ;;		On exit  : 0/0
  7601 ;;		Unchanged: 0/0
  7602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7603 ;;      Params:         0       0       4       0       0
  7604 ;;      Locals:         0       0       6       0       0
  7605 ;;      Temps:          0       0       5       0       0
  7606 ;;      Totals:         0       0      15       0       0
  7607 ;;Total ram usage:       15 bytes
  7608 ;; Hardware stack levels used:    1
  7609 ;; Hardware stack levels required when called:   12
  7610 ;; This function calls:
  7611 ;;		Nothing
  7612 ;; This function is called by:
  7613 ;;		_RF_LoadCode
  7614 ;;		_IR_LoadCode
  7615 ;;		_MSC_Round
  7616 ;;		_MSC_DB_Round
  7617 ;;		_MSC_LG_Round
  7618 ;;		_MSC_Scale
  7619 ;; This function uses a non-reentrant model
  7620 ;;
  7621                           
  7622                           	psect	text53
  7623  003E5E                     __ptext53:
  7624                           	opt stack 0
  7625  003E5E                     ___fttol:
  7626                           	opt stack 17
  7627                           
  7628                           ;incstack = 0
  7629  003E5E  C182  F184         	movff	___fttol@f1+2,??___fttol
  7630  003E62  0101               	movlb	1	; () banked
  7631  003E64  6B85               	clrf	(??___fttol+1)& (0+255),b
  7632  003E66  6B86               	clrf	(??___fttol+2)& (0+255),b
  7633  003E68  0101               	movlb	1	; () banked
  7634  003E6A  3581               	rlcf	(___fttol@f1+1)& (0+255),w,b
  7635  003E6C  0101               	movlb	1	; () banked
  7636  003E6E  3784               	rlcf	??___fttol& (0+255),f,b
  7637  003E70  E301               	bnc	u9181
  7638  003E72  8185               	bsf	(??___fttol+1)& (0+255),0,b
  7639  003E74                     u9181:
  7640  003E74  0101               	movlb	1	; () banked
  7641  003E76  5184               	movf	??___fttol& (0+255),w,b
  7642  003E78  0101               	movlb	1	; () banked
  7643  003E7A  6F8E               	movwf	___fttol@exp1& (0+255),b
  7644  003E7C  0101               	movlb	1	; () banked
  7645  003E7E  518E               	movf	___fttol@exp1& (0+255),w,b
  7646  003E80  A4D8               	btfss	status,2,c
  7647  003E82  D00A               	goto	l8115
  7648                           
  7649                           ; BSR set to: 1
  7650  003E84  0E00               	movlw	0
  7651  003E86  0101               	movlb	1	; () banked
  7652  003E88  6F80               	movwf	?___fttol& (0+255),b
  7653  003E8A  0E00               	movlw	0
  7654  003E8C  6F81               	movwf	(?___fttol+1)& (0+255),b
  7655  003E8E  0E00               	movlw	0
  7656  003E90  6F82               	movwf	(?___fttol+2)& (0+255),b
  7657  003E92  0E00               	movlw	0
  7658  003E94  6F83               	movwf	(?___fttol+3)& (0+255),b
  7659                           
  7660                           ; BSR set to: 1
  7661  003E96  0012               	return	
  7662  003E98                     l8115:
  7663                           
  7664                           ; BSR set to: 1
  7665  003E98  0E17               	movlw	23
  7666  003E9A  0101               	movlb	1	; () banked
  7667  003E9C  6F84               	movwf	??___fttol& (0+255),b
  7668  003E9E  C180  F185         	movff	___fttol@f1,??___fttol+1
  7669  003EA2  C181  F186         	movff	___fttol@f1+1,??___fttol+2
  7670  003EA6  C182  F187         	movff	___fttol@f1+2,??___fttol+3
  7671  003EAA  0101               	movlb	1	; () banked
  7672  003EAC  2984               	incf	??___fttol& (0+255),w,b
  7673  003EAE  0101               	movlb	1	; () banked
  7674  003EB0  6F88               	movwf	(??___fttol+4)& (0+255),b
  7675  003EB2  D005               	goto	u9200
  7676  003EB4                     u9205:
  7677  003EB4  0101               	movlb	1	; () banked
  7678  003EB6  90D8               	bcf	status,0,c
  7679  003EB8  3387               	rrcf	(??___fttol+3)& (0+255),f,b
  7680  003EBA  3386               	rrcf	(??___fttol+2)& (0+255),f,b
  7681  003EBC  3385               	rrcf	(??___fttol+1)& (0+255),f,b
  7682  003EBE                     u9200:
  7683  003EBE  0101               	movlb	1	; () banked
  7684  003EC0  2F88               	decfsz	(??___fttol+4)& (0+255),f,b
  7685  003EC2  D7F8               	goto	u9205
  7686  003EC4  0101               	movlb	1	; () banked
  7687  003EC6  5185               	movf	(??___fttol+1)& (0+255),w,b
  7688  003EC8  0101               	movlb	1	; () banked
  7689  003ECA  6F89               	movwf	___fttol@sign1& (0+255),b
  7690                           
  7691                           ; BSR set to: 1
  7692  003ECC  0101               	movlb	1	; () banked
  7693  003ECE  8F81               	bsf	(___fttol@f1+1)& (0+255),7,b
  7694                           
  7695                           ; BSR set to: 1
  7696  003ED0  0EFF               	movlw	255
  7697  003ED2  0101               	movlb	1	; () banked
  7698  003ED4  1780               	andwf	___fttol@f1& (0+255),f,b
  7699  003ED6  0EFF               	movlw	255
  7700  003ED8  0101               	movlb	1	; () banked
  7701  003EDA  1781               	andwf	(___fttol@f1+1)& (0+255),f,b
  7702  003EDC  0E00               	movlw	0
  7703  003EDE  0101               	movlb	1	; () banked
  7704  003EE0  1782               	andwf	(___fttol@f1+2)& (0+255),f,b
  7705                           
  7706                           ; BSR set to: 1
  7707  003EE2  0101               	movlb	1	; () banked
  7708  003EE4  5180               	movf	___fttol@f1& (0+255),w,b
  7709  003EE6  0101               	movlb	1	; () banked
  7710  003EE8  6F8A               	movwf	___fttol@lval& (0+255),b
  7711  003EEA  0101               	movlb	1	; () banked
  7712  003EEC  5181               	movf	(___fttol@f1+1)& (0+255),w,b
  7713  003EEE  0101               	movlb	1	; () banked
  7714  003EF0  6F8B               	movwf	(___fttol@lval+1)& (0+255),b
  7715  003EF2  0101               	movlb	1	; () banked
  7716  003EF4  5182               	movf	(___fttol@f1+2)& (0+255),w,b
  7717  003EF6  0101               	movlb	1	; () banked
  7718  003EF8  6F8C               	movwf	(___fttol@lval+2)& (0+255),b
  7719  003EFA  0101               	movlb	1	; () banked
  7720  003EFC  6B8D               	clrf	(___fttol@lval+3)& (0+255),b
  7721                           
  7722                           ; BSR set to: 1
  7723  003EFE  0E8E               	movlw	142
  7724  003F00  0101               	movlb	1	; () banked
  7725  003F02  5F8E               	subwf	___fttol@exp1& (0+255),f,b
  7726                           
  7727                           ; BSR set to: 1
  7728  003F04  0101               	movlb	1	; () banked
  7729  003F06  AF8E               	btfss	___fttol@exp1& (0+255),7,b
  7730  003F08  D01A               	goto	l8137
  7731                           
  7732                           ; BSR set to: 1
  7733  003F0A  0101               	movlb	1	; () banked
  7734  003F0C  518E               	movf	___fttol@exp1& (0+255),w,b
  7735  003F0E  0A80               	xorlw	128
  7736  003F10  0F8F               	addlw	143
  7737  003F12  B0D8               	btfsc	status,0,c
  7738  003F14  D00A               	goto	l8133
  7739                           
  7740                           ; BSR set to: 1
  7741  003F16  0E00               	movlw	0
  7742  003F18  0101               	movlb	1	; () banked
  7743  003F1A  6F80               	movwf	?___fttol& (0+255),b
  7744  003F1C  0E00               	movlw	0
  7745  003F1E  6F81               	movwf	(?___fttol+1)& (0+255),b
  7746  003F20  0E00               	movlw	0
  7747  003F22  6F82               	movwf	(?___fttol+2)& (0+255),b
  7748  003F24  0E00               	movlw	0
  7749  003F26  6F83               	movwf	(?___fttol+3)& (0+255),b
  7750                           
  7751                           ; BSR set to: 1
  7752  003F28  0012               	return	
  7753  003F2A                     l8133:
  7754                           
  7755                           ; BSR set to: 1
  7756  003F2A  0101               	movlb	1	; () banked
  7757  003F2C  90D8               	bcf	status,0,c
  7758  003F2E  338D               	rrcf	(___fttol@lval+3)& (0+255),f,b
  7759  003F30  338C               	rrcf	(___fttol@lval+2)& (0+255),f,b
  7760  003F32  338B               	rrcf	(___fttol@lval+1)& (0+255),f,b
  7761  003F34  338A               	rrcf	___fttol@lval& (0+255),f,b
  7762                           
  7763                           ; BSR set to: 1
  7764  003F36  0101               	movlb	1	; () banked
  7765  003F38  3F8E               	incfsz	___fttol@exp1& (0+255),f,b
  7766  003F3A  D7F7               	goto	l8133
  7767                           
  7768                           ; BSR set to: 1
  7769  003F3C  D01B               	goto	l8147
  7770  003F3E                     l8137:
  7771                           
  7772                           ; BSR set to: 1
  7773  003F3E  0E17               	movlw	23
  7774  003F40  0101               	movlb	1	; () banked
  7775  003F42  658E               	cpfsgt	___fttol@exp1& (0+255),b
  7776  003F44  D012               	goto	l8145
  7777                           
  7778                           ; BSR set to: 1
  7779  003F46  0E00               	movlw	0
  7780  003F48  0101               	movlb	1	; () banked
  7781  003F4A  6F80               	movwf	?___fttol& (0+255),b
  7782  003F4C  0E00               	movlw	0
  7783  003F4E  6F81               	movwf	(?___fttol+1)& (0+255),b
  7784  003F50  0E00               	movlw	0
  7785  003F52  6F82               	movwf	(?___fttol+2)& (0+255),b
  7786  003F54  0E00               	movlw	0
  7787  003F56  6F83               	movwf	(?___fttol+3)& (0+255),b
  7788                           
  7789                           ; BSR set to: 1
  7790  003F58  0012               	return	
  7791  003F5A                     l8143:
  7792                           
  7793                           ; BSR set to: 1
  7794  003F5A  0101               	movlb	1	; () banked
  7795  003F5C  90D8               	bcf	status,0,c
  7796  003F5E  378A               	rlcf	___fttol@lval& (0+255),f,b
  7797  003F60  378B               	rlcf	(___fttol@lval+1)& (0+255),f,b
  7798  003F62  378C               	rlcf	(___fttol@lval+2)& (0+255),f,b
  7799  003F64  378D               	rlcf	(___fttol@lval+3)& (0+255),f,b
  7800  003F66  0101               	movlb	1	; () banked
  7801  003F68  078E               	decf	___fttol@exp1& (0+255),f,b
  7802  003F6A                     l8145:
  7803                           
  7804                           ; BSR set to: 1
  7805  003F6A  0101               	movlb	1	; () banked
  7806  003F6C  518E               	movf	___fttol@exp1& (0+255),w,b
  7807  003F6E  0101               	movlb	1	; () banked
  7808  003F70  A4D8               	btfss	status,2,c
  7809  003F72  D7F3               	goto	l8143
  7810  003F74                     l8147:
  7811                           
  7812                           ; BSR set to: 1
  7813  003F74  0101               	movlb	1	; () banked
  7814  003F76  5189               	movf	___fttol@sign1& (0+255),w,b
  7815  003F78  0101               	movlb	1	; () banked
  7816  003F7A  B4D8               	btfsc	status,2,c
  7817  003F7C  D009               	goto	l8151
  7818                           
  7819                           ; BSR set to: 1
  7820  003F7E  0101               	movlb	1	; () banked
  7821  003F80  1F8D               	comf	(___fttol@lval+3)& (0+255),f,b
  7822  003F82  1F8C               	comf	(___fttol@lval+2)& (0+255),f,b
  7823  003F84  1F8B               	comf	(___fttol@lval+1)& (0+255),f,b
  7824  003F86  6D8A               	negf	___fttol@lval& (0+255),b
  7825  003F88  0E00               	movlw	0
  7826  003F8A  238B               	addwfc	(___fttol@lval+1)& (0+255),f,b
  7827  003F8C  238C               	addwfc	(___fttol@lval+2)& (0+255),f,b
  7828  003F8E  238D               	addwfc	(___fttol@lval+3)& (0+255),f,b
  7829  003F90                     l8151:
  7830                           
  7831                           ; BSR set to: 1
  7832  003F90  C18A  F180         	movff	___fttol@lval,?___fttol
  7833  003F94  C18B  F181         	movff	___fttol@lval+1,?___fttol+1
  7834  003F98  C18C  F182         	movff	___fttol@lval+2,?___fttol+2
  7835  003F9C  C18D  F183         	movff	___fttol@lval+3,?___fttol+3
  7836  003FA0  0012               	return	
  7837  003FA2                     __end_of___fttol:
  7838                           	opt stack 0
  7839                           tblptru	equ	0xFF8
  7840                           tblptrh	equ	0xFF7
  7841                           tblptrl	equ	0xFF6
  7842                           tablat	equ	0xFF5
  7843                           prodh	equ	0xFF4
  7844                           prodl	equ	0xFF3
  7845                           intcon	equ	0xFF2
  7846                           intcon2	equ	0xFF1
  7847                           intcon3	equ	0xFF0
  7848                           postinc0	equ	0xFEE
  7849                           wreg	equ	0xFE8
  7850                           postdec1	equ	0xFE5
  7851                           fsr1h	equ	0xFE2
  7852                           fsr1l	equ	0xFE1
  7853                           postinc2	equ	0xFDE
  7854                           postdec2	equ	0xFDD
  7855                           fsr2h	equ	0xFDA
  7856                           fsr2l	equ	0xFD9
  7857                           status	equ	0xFD8
  7858                           
  7859 ;; *************** function ___ftmul *****************
  7860 ;; Defined at:
  7861 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
  7862 ;; Parameters:    Size  Location     Type
  7863 ;;  f1              3   11[BANK1 ] float 
  7864 ;;  f2              3   14[BANK1 ] float 
  7865 ;; Auto vars:     Size  Location     Type
  7866 ;;  f3_as_produc    3   21[BANK1 ] unsigned um
  7867 ;;  sign            1   25[BANK1 ] unsigned char 
  7868 ;;  cntr            1   24[BANK1 ] unsigned char 
  7869 ;;  exp             1   20[BANK1 ] unsigned char 
  7870 ;; Return value:  Size  Location     Type
  7871 ;;                  3   11[BANK1 ] float 
  7872 ;; Registers used:
  7873 ;;		wreg, status,2, status,0, cstack
  7874 ;; Tracked objects:
  7875 ;;		On entry : 0/0
  7876 ;;		On exit  : 0/0
  7877 ;;		Unchanged: 0/0
  7878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  7879 ;;      Params:         0       0       6       0       0
  7880 ;;      Locals:         0       0       6       0       0
  7881 ;;      Temps:          0       0       3       0       0
  7882 ;;      Totals:         0       0      15       0       0
  7883 ;;Total ram usage:       15 bytes
  7884 ;; Hardware stack levels used:    1
  7885 ;; Hardware stack levels required when called:   13
  7886 ;; This function calls:
  7887 ;;		___ftpack
  7888 ;; This function is called by:
  7889 ;;		_RF_LoadCode
  7890 ;;		_IR_LoadCode
  7891 ;;		_MSC_Scale
  7892 ;; This function uses a non-reentrant model
  7893 ;;
  7894                           
  7895                           	psect	text54
  7896  003BA2                     __ptext54:
  7897                           	opt stack 0
  7898  003BA2                     ___ftmul:
  7899                           	opt stack 16
  7900                           
  7901                           ; BSR set to: 1
  7902                           ;incstack = 0
  7903  003BA2  C18D  F191         	movff	___ftmul@f1+2,??___ftmul
  7904  003BA6  0101               	movlb	1	; () banked
  7905  003BA8  6B92               	clrf	(??___ftmul+1)& (0+255),b
  7906  003BAA  6B93               	clrf	(??___ftmul+2)& (0+255),b
  7907  003BAC  0101               	movlb	1	; () banked
  7908  003BAE  358C               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  7909  003BB0  0101               	movlb	1	; () banked
  7910  003BB2  3791               	rlcf	??___ftmul& (0+255),f,b
  7911  003BB4  E301               	bnc	u9121
  7912  003BB6  8192               	bsf	(??___ftmul+1)& (0+255),0,b
  7913  003BB8                     u9121:
  7914  003BB8  0101               	movlb	1	; () banked
  7915  003BBA  5191               	movf	??___ftmul& (0+255),w,b
  7916  003BBC  0101               	movlb	1	; () banked
  7917  003BBE  6F94               	movwf	___ftmul@exp& (0+255),b
  7918  003BC0  0101               	movlb	1	; () banked
  7919  003BC2  5194               	movf	___ftmul@exp& (0+255),w,b
  7920  003BC4  A4D8               	btfss	status,2,c
  7921  003BC6  D00A               	goto	l8067
  7922                           
  7923                           ; BSR set to: 1
  7924  003BC8  0E00               	movlw	0
  7925  003BCA  0101               	movlb	1	; () banked
  7926  003BCC  6F8B               	movwf	?___ftmul& (0+255),b
  7927  003BCE  0E00               	movlw	0
  7928  003BD0  0101               	movlb	1	; () banked
  7929  003BD2  6F8C               	movwf	(?___ftmul+1)& (0+255),b
  7930  003BD4  0E00               	movlw	0
  7931  003BD6  0101               	movlb	1	; () banked
  7932  003BD8  6F8D               	movwf	(?___ftmul+2)& (0+255),b
  7933                           
  7934                           ; BSR set to: 1
  7935  003BDA  0012               	return	
  7936  003BDC                     l8067:
  7937                           
  7938                           ; BSR set to: 1
  7939  003BDC  C190  F191         	movff	___ftmul@f2+2,??___ftmul
  7940  003BE0  0101               	movlb	1	; () banked
  7941  003BE2  6B92               	clrf	(??___ftmul+1)& (0+255),b
  7942  003BE4  6B93               	clrf	(??___ftmul+2)& (0+255),b
  7943  003BE6  0101               	movlb	1	; () banked
  7944  003BE8  358F               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  7945  003BEA  0101               	movlb	1	; () banked
  7946  003BEC  3791               	rlcf	??___ftmul& (0+255),f,b
  7947  003BEE  E301               	bnc	u9141
  7948  003BF0  8192               	bsf	(??___ftmul+1)& (0+255),0,b
  7949  003BF2                     u9141:
  7950  003BF2  0101               	movlb	1	; () banked
  7951  003BF4  5191               	movf	??___ftmul& (0+255),w,b
  7952  003BF6  0101               	movlb	1	; () banked
  7953  003BF8  6F99               	movwf	___ftmul@sign& (0+255),b
  7954  003BFA  0101               	movlb	1	; () banked
  7955  003BFC  5199               	movf	___ftmul@sign& (0+255),w,b
  7956  003BFE  A4D8               	btfss	status,2,c
  7957  003C00  D00A               	goto	l8073
  7958                           
  7959                           ; BSR set to: 1
  7960  003C02  0E00               	movlw	0
  7961  003C04  0101               	movlb	1	; () banked
  7962  003C06  6F8B               	movwf	?___ftmul& (0+255),b
  7963  003C08  0E00               	movlw	0
  7964  003C0A  0101               	movlb	1	; () banked
  7965  003C0C  6F8C               	movwf	(?___ftmul+1)& (0+255),b
  7966  003C0E  0E00               	movlw	0
  7967  003C10  0101               	movlb	1	; () banked
  7968  003C12  6F8D               	movwf	(?___ftmul+2)& (0+255),b
  7969                           
  7970                           ; BSR set to: 1
  7971  003C14  0012               	return	
  7972  003C16                     l8073:
  7973                           
  7974                           ; BSR set to: 1
  7975  003C16  0101               	movlb	1	; () banked
  7976  003C18  5199               	movf	___ftmul@sign& (0+255),w,b
  7977  003C1A  0F7B               	addlw	123
  7978  003C1C  0101               	movlb	1	; () banked
  7979  003C1E  2794               	addwf	___ftmul@exp& (0+255),f,b
  7980                           
  7981                           ; BSR set to: 1
  7982  003C20  C18D  F199         	movff	___ftmul@f1+2,___ftmul@sign
  7983  003C24  0101               	movlb	1	; () banked
  7984  003C26  5190               	movf	(___ftmul@f2+2)& (0+255),w,b
  7985  003C28  0101               	movlb	1	; () banked
  7986  003C2A  1B99               	xorwf	___ftmul@sign& (0+255),f,b
  7987  003C2C  0E80               	movlw	128
  7988  003C2E  0101               	movlb	1	; () banked
  7989  003C30  1799               	andwf	___ftmul@sign& (0+255),f,b
  7990                           
  7991                           ; BSR set to: 1
  7992  003C32  0101               	movlb	1	; () banked
  7993  003C34  8F8C               	bsf	(___ftmul@f1+1)& (0+255),7,b
  7994                           
  7995                           ; BSR set to: 1
  7996  003C36  0101               	movlb	1	; () banked
  7997  003C38  8F8F               	bsf	(___ftmul@f2+1)& (0+255),7,b
  7998                           
  7999                           ; BSR set to: 1
  8000  003C3A  0EFF               	movlw	255
  8001  003C3C  0101               	movlb	1	; () banked
  8002  003C3E  178E               	andwf	___ftmul@f2& (0+255),f,b
  8003  003C40  0EFF               	movlw	255
  8004  003C42  0101               	movlb	1	; () banked
  8005  003C44  178F               	andwf	(___ftmul@f2+1)& (0+255),f,b
  8006  003C46  0E00               	movlw	0
  8007  003C48  0101               	movlb	1	; () banked
  8008  003C4A  1790               	andwf	(___ftmul@f2+2)& (0+255),f,b
  8009                           
  8010                           ; BSR set to: 1
  8011  003C4C  0E00               	movlw	0
  8012  003C4E  0101               	movlb	1	; () banked
  8013  003C50  6F95               	movwf	___ftmul@f3_as_product& (0+255),b
  8014  003C52  0E00               	movlw	0
  8015  003C54  0101               	movlb	1	; () banked
  8016  003C56  6F96               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8017  003C58  0E00               	movlw	0
  8018  003C5A  0101               	movlb	1	; () banked
  8019  003C5C  6F97               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8020                           
  8021                           ; BSR set to: 1
  8022  003C5E  0E07               	movlw	7
  8023  003C60  0101               	movlb	1	; () banked
  8024  003C62  6F98               	movwf	___ftmul@cntr& (0+255),b
  8025  003C64                     l8087:
  8026                           
  8027                           ; BSR set to: 1
  8028  003C64  0101               	movlb	1	; () banked
  8029  003C66  A18B               	btfss	___ftmul@f1& (0+255),0,b
  8030  003C68  D00C               	goto	l8091
  8031                           
  8032                           ; BSR set to: 1
  8033  003C6A  0101               	movlb	1	; () banked
  8034  003C6C  518E               	movf	___ftmul@f2& (0+255),w,b
  8035  003C6E  0101               	movlb	1	; () banked
  8036  003C70  2795               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8037  003C72  0101               	movlb	1	; () banked
  8038  003C74  518F               	movf	(___ftmul@f2+1)& (0+255),w,b
  8039  003C76  0101               	movlb	1	; () banked
  8040  003C78  2396               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8041  003C7A  0101               	movlb	1	; () banked
  8042  003C7C  5190               	movf	(___ftmul@f2+2)& (0+255),w,b
  8043  003C7E  0101               	movlb	1	; () banked
  8044  003C80  2397               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8045  003C82                     l8091:
  8046                           
  8047                           ; BSR set to: 1
  8048  003C82  0101               	movlb	1	; () banked
  8049  003C84  90D8               	bcf	status,0,c
  8050  003C86  338D               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8051  003C88  338C               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8052  003C8A  338B               	rrcf	___ftmul@f1& (0+255),f,b
  8053  003C8C  0101               	movlb	1	; () banked
  8054  003C8E  90D8               	bcf	status,0,c
  8055  003C90  378E               	rlcf	___ftmul@f2& (0+255),f,b
  8056  003C92  378F               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8057  003C94  3790               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8058                           
  8059                           ; BSR set to: 1
  8060  003C96  0101               	movlb	1	; () banked
  8061  003C98  2F98               	decfsz	___ftmul@cntr& (0+255),f,b
  8062  003C9A  D7E4               	goto	l8087
  8063                           
  8064                           ; BSR set to: 1
  8065                           
  8066                           ; BSR set to: 1
  8067  003C9C  0E09               	movlw	9
  8068  003C9E  0101               	movlb	1	; () banked
  8069  003CA0  6F98               	movwf	___ftmul@cntr& (0+255),b
  8070  003CA2                     l8097:
  8071                           
  8072                           ; BSR set to: 1
  8073  003CA2  0101               	movlb	1	; () banked
  8074  003CA4  A18B               	btfss	___ftmul@f1& (0+255),0,b
  8075  003CA6  D00C               	goto	l8101
  8076                           
  8077                           ; BSR set to: 1
  8078  003CA8  0101               	movlb	1	; () banked
  8079  003CAA  518E               	movf	___ftmul@f2& (0+255),w,b
  8080  003CAC  0101               	movlb	1	; () banked
  8081  003CAE  2795               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8082  003CB0  0101               	movlb	1	; () banked
  8083  003CB2  518F               	movf	(___ftmul@f2+1)& (0+255),w,b
  8084  003CB4  0101               	movlb	1	; () banked
  8085  003CB6  2396               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8086  003CB8  0101               	movlb	1	; () banked
  8087  003CBA  5190               	movf	(___ftmul@f2+2)& (0+255),w,b
  8088  003CBC  0101               	movlb	1	; () banked
  8089  003CBE  2397               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8090  003CC0                     l8101:
  8091                           
  8092                           ; BSR set to: 1
  8093  003CC0  0101               	movlb	1	; () banked
  8094  003CC2  90D8               	bcf	status,0,c
  8095  003CC4  338D               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8096  003CC6  338C               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8097  003CC8  338B               	rrcf	___ftmul@f1& (0+255),f,b
  8098  003CCA  0101               	movlb	1	; () banked
  8099  003CCC  90D8               	bcf	status,0,c
  8100  003CCE  3397               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8101  003CD0  3396               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8102  003CD2  3395               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8103                           
  8104                           ; BSR set to: 1
  8105  003CD4  0101               	movlb	1	; () banked
  8106  003CD6  2F98               	decfsz	___ftmul@cntr& (0+255),f,b
  8107  003CD8  D7E4               	goto	l8097
  8108                           
  8109                           ; BSR set to: 1
  8110                           
  8111                           ; BSR set to: 1
  8112  003CDA  C195  F180         	movff	___ftmul@f3_as_product,___ftpack@arg
  8113  003CDE  C196  F181         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8114  003CE2  C197  F182         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8115  003CE6  C194  F183         	movff	___ftmul@exp,___ftpack@exp
  8116  003CEA  C199  F184         	movff	___ftmul@sign,___ftpack@sign
  8117  003CEE  ECEB  F001         	call	___ftpack	;wreg free
  8118  003CF2  C180  F18B         	movff	?___ftpack,?___ftmul
  8119  003CF6  C181  F18C         	movff	?___ftpack+1,?___ftmul+1
  8120  003CFA  C182  F18D         	movff	?___ftpack+2,?___ftmul+2
  8121  003CFE  0012               	return	
  8122  003D00                     __end_of___ftmul:
  8123                           	opt stack 0
  8124                           tblptru	equ	0xFF8
  8125                           tblptrh	equ	0xFF7
  8126                           tblptrl	equ	0xFF6
  8127                           tablat	equ	0xFF5
  8128                           prodh	equ	0xFF4
  8129                           prodl	equ	0xFF3
  8130                           intcon	equ	0xFF2
  8131                           intcon2	equ	0xFF1
  8132                           intcon3	equ	0xFF0
  8133                           postinc0	equ	0xFEE
  8134                           wreg	equ	0xFE8
  8135                           postdec1	equ	0xFE5
  8136                           fsr1h	equ	0xFE2
  8137                           fsr1l	equ	0xFE1
  8138                           postinc2	equ	0xFDE
  8139                           postdec2	equ	0xFDD
  8140                           fsr2h	equ	0xFDA
  8141                           fsr2l	equ	0xFD9
  8142                           status	equ	0xFD8
  8143                           
  8144 ;; *************** function ___ftpack *****************
  8145 ;; Defined at:
  8146 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
  8147 ;; Parameters:    Size  Location     Type
  8148 ;;  arg             3    0[BANK1 ] unsigned um
  8149 ;;  exp             1    3[BANK1 ] unsigned char 
  8150 ;;  sign            1    4[BANK1 ] unsigned char 
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;		None
  8153 ;; Return value:  Size  Location     Type
  8154 ;;                  3    0[BANK1 ] float 
  8155 ;; Registers used:
  8156 ;;		wreg, status,2, status,0
  8157 ;; Tracked objects:
  8158 ;;		On entry : 0/0
  8159 ;;		On exit  : 0/0
  8160 ;;		Unchanged: 0/0
  8161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8162 ;;      Params:         0       0       5       0       0
  8163 ;;      Locals:         0       0       0       0       0
  8164 ;;      Temps:          0       0       3       0       0
  8165 ;;      Totals:         0       0       8       0       0
  8166 ;;Total ram usage:        8 bytes
  8167 ;; Hardware stack levels used:    1
  8168 ;; Hardware stack levels required when called:   12
  8169 ;; This function calls:
  8170 ;;		Nothing
  8171 ;; This function is called by:
  8172 ;;		___ftmul
  8173 ;;		___lwtoft
  8174 ;; This function uses a non-reentrant model
  8175 ;;
  8176                           
  8177                           	psect	text55
  8178  0003D6                     __ptext55:
  8179                           	opt stack 0
  8180  0003D6                     ___ftpack:
  8181                           	opt stack 16
  8182                           
  8183                           ;incstack = 0
  8184  0003D6  0101               	movlb	1	; () banked
  8185  0003D8  5183               	movf	___ftpack@exp& (0+255),w,b
  8186  0003DA  0101               	movlb	1	; () banked
  8187  0003DC  B4D8               	btfsc	status,2,c
  8188  0003DE  D008               	goto	l7899
  8189                           
  8190                           ; BSR set to: 1
  8191  0003E0  0101               	movlb	1	; () banked
  8192  0003E2  5180               	movf	___ftpack@arg& (0+255),w,b
  8193  0003E4  0101               	movlb	1	; () banked
  8194  0003E6  1181               	iorwf	(___ftpack@arg+1)& (0+255),w,b
  8195  0003E8  0101               	movlb	1	; () banked
  8196  0003EA  1182               	iorwf	(___ftpack@arg+2)& (0+255),w,b
  8197  0003EC  A4D8               	btfss	status,2,c
  8198  0003EE  D011               	goto	l7905
  8199  0003F0                     l7899:
  8200                           
  8201                           ; BSR set to: 1
  8202  0003F0  0E00               	movlw	0
  8203  0003F2  0101               	movlb	1	; () banked
  8204  0003F4  6F80               	movwf	?___ftpack& (0+255),b
  8205  0003F6  0E00               	movlw	0
  8206  0003F8  0101               	movlb	1	; () banked
  8207  0003FA  6F81               	movwf	(?___ftpack+1)& (0+255),b
  8208  0003FC  0E00               	movlw	0
  8209  0003FE  0101               	movlb	1	; () banked
  8210  000400  6F82               	movwf	(?___ftpack+2)& (0+255),b
  8211                           
  8212                           ; BSR set to: 1
  8213  000402  0012               	return	
  8214  000404                     l7903:
  8215                           
  8216                           ; BSR set to: 1
  8217  000404  0101               	movlb	1	; () banked
  8218  000406  2B83               	incf	___ftpack@exp& (0+255),f,b
  8219  000408  0101               	movlb	1	; () banked
  8220  00040A  90D8               	bcf	status,0,c
  8221  00040C  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8222  00040E  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8223  000410  3380               	rrcf	___ftpack@arg& (0+255),f,b
  8224  000412                     l7905:
  8225                           
  8226                           ; BSR set to: 1
  8227  000412  0E00               	movlw	0
  8228  000414  0101               	movlb	1	; () banked
  8229  000416  1580               	andwf	___ftpack@arg& (0+255),w,b
  8230  000418  0101               	movlb	1	; () banked
  8231  00041A  6F85               	movwf	??___ftpack& (0+255),b
  8232  00041C  0E00               	movlw	0
  8233  00041E  0101               	movlb	1	; () banked
  8234  000420  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  8235  000422  0101               	movlb	1	; () banked
  8236  000424  6F86               	movwf	(??___ftpack+1)& (0+255),b
  8237  000426  0EFE               	movlw	254
  8238  000428  0101               	movlb	1	; () banked
  8239  00042A  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8240  00042C  0101               	movlb	1	; () banked
  8241  00042E  6F87               	movwf	(??___ftpack+2)& (0+255),b
  8242  000430  0101               	movlb	1	; () banked
  8243  000432  5185               	movf	??___ftpack& (0+255),w,b
  8244  000434  0101               	movlb	1	; () banked
  8245  000436  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  8246  000438  0101               	movlb	1	; () banked
  8247  00043A  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  8248  00043C  B4D8               	btfsc	status,2,c
  8249  00043E  D011               	goto	l7911
  8250  000440  D7E1               	goto	l7903
  8251  000442                     l7907:
  8252                           
  8253                           ; BSR set to: 1
  8254  000442  0101               	movlb	1	; () banked
  8255  000444  2B83               	incf	___ftpack@exp& (0+255),f,b
  8256                           
  8257                           ; BSR set to: 1
  8258  000446  0E01               	movlw	1
  8259  000448  0101               	movlb	1	; () banked
  8260  00044A  2780               	addwf	___ftpack@arg& (0+255),f,b
  8261  00044C  0E00               	movlw	0
  8262  00044E  0101               	movlb	1	; () banked
  8263  000450  2381               	addwfc	(___ftpack@arg+1)& (0+255),f,b
  8264  000452  0E00               	movlw	0
  8265  000454  0101               	movlb	1	; () banked
  8266  000456  2382               	addwfc	(___ftpack@arg+2)& (0+255),f,b
  8267  000458  0101               	movlb	1	; () banked
  8268  00045A  90D8               	bcf	status,0,c
  8269  00045C  3382               	rrcf	(___ftpack@arg+2)& (0+255),f,b
  8270  00045E  3381               	rrcf	(___ftpack@arg+1)& (0+255),f,b
  8271  000460  3380               	rrcf	___ftpack@arg& (0+255),f,b
  8272  000462                     l7911:
  8273                           
  8274                           ; BSR set to: 1
  8275  000462  0E00               	movlw	0
  8276  000464  0101               	movlb	1	; () banked
  8277  000466  1580               	andwf	___ftpack@arg& (0+255),w,b
  8278  000468  0101               	movlb	1	; () banked
  8279  00046A  6F85               	movwf	??___ftpack& (0+255),b
  8280  00046C  0E00               	movlw	0
  8281  00046E  0101               	movlb	1	; () banked
  8282  000470  1581               	andwf	(___ftpack@arg+1)& (0+255),w,b
  8283  000472  0101               	movlb	1	; () banked
  8284  000474  6F86               	movwf	(??___ftpack+1)& (0+255),b
  8285  000476  0EFF               	movlw	255
  8286  000478  0101               	movlb	1	; () banked
  8287  00047A  1582               	andwf	(___ftpack@arg+2)& (0+255),w,b
  8288  00047C  0101               	movlb	1	; () banked
  8289  00047E  6F87               	movwf	(??___ftpack+2)& (0+255),b
  8290  000480  0101               	movlb	1	; () banked
  8291  000482  5185               	movf	??___ftpack& (0+255),w,b
  8292  000484  0101               	movlb	1	; () banked
  8293  000486  1186               	iorwf	(??___ftpack+1)& (0+255),w,b
  8294  000488  0101               	movlb	1	; () banked
  8295  00048A  1187               	iorwf	(??___ftpack+2)& (0+255),w,b
  8296  00048C  B4D8               	btfsc	status,2,c
  8297  00048E  D008               	goto	l7915
  8298  000490  D7D8               	goto	l7907
  8299  000492                     l7913:
  8300                           
  8301                           ; BSR set to: 1
  8302  000492  0101               	movlb	1	; () banked
  8303  000494  0783               	decf	___ftpack@exp& (0+255),f,b
  8304  000496  0101               	movlb	1	; () banked
  8305  000498  90D8               	bcf	status,0,c
  8306  00049A  3780               	rlcf	___ftpack@arg& (0+255),f,b
  8307  00049C  3781               	rlcf	(___ftpack@arg+1)& (0+255),f,b
  8308  00049E  3782               	rlcf	(___ftpack@arg+2)& (0+255),f,b
  8309  0004A0                     l7915:
  8310                           
  8311                           ; BSR set to: 1
  8312  0004A0  0101               	movlb	1	; () banked
  8313  0004A2  BF81               	btfsc	(___ftpack@arg+1)& (0+255),7,b
  8314  0004A4  D004               	goto	l1539
  8315                           
  8316                           ; BSR set to: 1
  8317  0004A6  0E02               	movlw	2
  8318  0004A8  0101               	movlb	1	; () banked
  8319  0004AA  6183               	cpfslt	___ftpack@exp& (0+255),b
  8320  0004AC  D7F2               	goto	l7913
  8321  0004AE                     l1539:
  8322                           
  8323                           ; BSR set to: 1
  8324  0004AE  0101               	movlb	1	; () banked
  8325  0004B0  B183               	btfsc	___ftpack@exp& (0+255),0,b
  8326  0004B2  D002               	goto	l7921
  8327                           
  8328                           ; BSR set to: 1
  8329  0004B4  0101               	movlb	1	; () banked
  8330  0004B6  9F81               	bcf	(___ftpack@arg+1)& (0+255),7,b
  8331  0004B8                     l7921:
  8332                           
  8333                           ; BSR set to: 1
  8334  0004B8  0101               	movlb	1	; () banked
  8335  0004BA  90D8               	bcf	status,0,c
  8336  0004BC  3383               	rrcf	___ftpack@exp& (0+255),f,b
  8337  0004BE  0101               	movlb	1	; () banked
  8338  0004C0  5183               	movf	___ftpack@exp& (0+255),w,b
  8339  0004C2  0101               	movlb	1	; () banked
  8340  0004C4  1382               	iorwf	(___ftpack@arg+2)& (0+255),f,b
  8341                           
  8342                           ; BSR set to: 1
  8343  0004C6  0101               	movlb	1	; () banked
  8344  0004C8  5184               	movf	___ftpack@sign& (0+255),w,b
  8345  0004CA  0101               	movlb	1	; () banked
  8346  0004CC  B4D8               	btfsc	status,2,c
  8347  0004CE  D002               	goto	l7927
  8348                           
  8349                           ; BSR set to: 1
  8350  0004D0  0101               	movlb	1	; () banked
  8351  0004D2  8F82               	bsf	(___ftpack@arg+2)& (0+255),7,b
  8352  0004D4                     l7927:
  8353                           
  8354                           ; BSR set to: 1
  8355  0004D4  C180  F180         	movff	___ftpack@arg,?___ftpack
  8356  0004D8  C181  F181         	movff	___ftpack@arg+1,?___ftpack+1
  8357  0004DC  C182  F182         	movff	___ftpack@arg+2,?___ftpack+2
  8358  0004E0  0012               	return	
  8359  0004E2                     __end_of___ftpack:
  8360                           	opt stack 0
  8361                           tblptru	equ	0xFF8
  8362                           tblptrh	equ	0xFF7
  8363                           tblptrl	equ	0xFF6
  8364                           tablat	equ	0xFF5
  8365                           prodh	equ	0xFF4
  8366                           prodl	equ	0xFF3
  8367                           intcon	equ	0xFF2
  8368                           intcon2	equ	0xFF1
  8369                           intcon3	equ	0xFF0
  8370                           postinc0	equ	0xFEE
  8371                           wreg	equ	0xFE8
  8372                           postdec1	equ	0xFE5
  8373                           fsr1h	equ	0xFE2
  8374                           fsr1l	equ	0xFE1
  8375                           postinc2	equ	0xFDE
  8376                           postdec2	equ	0xFDD
  8377                           fsr2h	equ	0xFDA
  8378                           fsr2l	equ	0xFD9
  8379                           status	equ	0xFD8
  8380                           
  8381 ;; *************** function _IR_CalculateCodesize *****************
  8382 ;; Defined at:
  8383 ;;		line 148 in file "IR.c"
  8384 ;; Parameters:    Size  Location     Type
  8385 ;;		None
  8386 ;; Auto vars:     Size  Location     Type
  8387 ;;  i               1    0[BANK1 ] unsigned char 
  8388 ;; Return value:  Size  Location     Type
  8389 ;;                  1    wreg      unsigned char 
  8390 ;; Registers used:
  8391 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  8392 ;; Tracked objects:
  8393 ;;		On entry : 0/0
  8394 ;;		On exit  : 0/0
  8395 ;;		Unchanged: 0/0
  8396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8397 ;;      Params:         0       0       0       0       0
  8398 ;;      Locals:         0       0       1       0       0
  8399 ;;      Temps:          0       0       0       0       0
  8400 ;;      Totals:         0       0       1       0       0
  8401 ;;Total ram usage:        1 bytes
  8402 ;; Hardware stack levels used:    1
  8403 ;; Hardware stack levels required when called:   12
  8404 ;; This function calls:
  8405 ;;		Nothing
  8406 ;; This function is called by:
  8407 ;;		_IR_LoadCode
  8408 ;; This function uses a non-reentrant model
  8409 ;;
  8410                           
  8411                           	psect	text56
  8412  00165E                     __ptext56:
  8413                           	opt stack 0
  8414  00165E                     _IR_CalculateCodesize:
  8415                           	opt stack 17
  8416                           
  8417                           ;IR.c: 150: unsigned char i;
  8418                           ;IR.c: 152: for(i=0; i<128;i++)
  8419                           
  8420                           ; BSR set to: 1
  8421                           ;incstack = 0
  8422  00165E  0E00               	movlw	0
  8423  001660  0101               	movlb	1	; () banked
  8424  001662  6F80               	movwf	IR_CalculateCodesize@i& (0+255),b
  8425  001664                     l8043:
  8426                           
  8427                           ; BSR set to: 1
  8428  001664  0E7F               	movlw	127
  8429  001666  0101               	movlb	1	; () banked
  8430  001668  6580               	cpfsgt	IR_CalculateCodesize@i& (0+255),b
  8431  00166A  D001               	goto	l8047
  8432  00166C  D018               	goto	l8057
  8433  00166E                     l8047:
  8434                           
  8435                           ; BSR set to: 1
  8436                           ;IR.c: 153: {
  8437                           ;IR.c: 154: if(IR_SavedTiming[i] == 0)
  8438  00166E  0101               	movlb	1	; () banked
  8439  001670  5180               	movf	IR_CalculateCodesize@i& (0+255),w,b
  8440  001672  0D02               	mullw	2
  8441  001674  0E00               	movlw	0
  8442  001676  24F3               	addwf	prodl,w,c
  8443  001678  6EF6               	movwf	tblptrl,c
  8444  00167A  0E24               	movlw	36
  8445  00167C  20F4               	addwfc	prodh,w,c
  8446  00167E  6EF7               	movwf	tblptrh,c
  8447  001680  6AF8               	clrf	tblptru,c
  8448  001682  0E00               	movlw	0
  8449  001684  22F8               	addwfc	tblptru,f,c
  8450  001686  0009               	tblrd		*+
  8451  001688  50F5               	movf	tablat,w,c
  8452  00168A  0009               	tblrd		*+
  8453  00168C  10F5               	iorwf	tablat,w,c
  8454  00168E  A4D8               	btfss	status,2,c
  8455  001690  D003               	goto	l8053
  8456                           
  8457                           ; BSR set to: 1
  8458                           ;IR.c: 155: {
  8459                           ;IR.c: 156: return i;
  8460  001692  0101               	movlb	1	; () banked
  8461  001694  5180               	movf	IR_CalculateCodesize@i& (0+255),w,b
  8462                           
  8463                           ; BSR set to: 1
  8464  001696  0012               	return	
  8465  001698                     l8053:
  8466                           
  8467                           ; BSR set to: 1
  8468  001698  0101               	movlb	1	; () banked
  8469  00169A  2B80               	incf	IR_CalculateCodesize@i& (0+255),f,b
  8470  00169C  D7E3               	goto	l8043
  8471  00169E                     l8057:
  8472                           
  8473                           ; BSR set to: 1
  8474                           ;IR.c: 157: }
  8475                           ;IR.c: 158: }
  8476                           ;IR.c: 159: return 128;
  8477  00169E  0E80               	movlw	128
  8478  0016A0  0012               	return	
  8479  0016A2                     __end_of_IR_CalculateCodesize:
  8480                           	opt stack 0
  8481                           tblptru	equ	0xFF8
  8482                           tblptrh	equ	0xFF7
  8483                           tblptrl	equ	0xFF6
  8484                           tablat	equ	0xFF5
  8485                           prodh	equ	0xFF4
  8486                           prodl	equ	0xFF3
  8487                           intcon	equ	0xFF2
  8488                           intcon2	equ	0xFF1
  8489                           intcon3	equ	0xFF0
  8490                           postinc0	equ	0xFEE
  8491                           wreg	equ	0xFE8
  8492                           postdec1	equ	0xFE5
  8493                           fsr1h	equ	0xFE2
  8494                           fsr1l	equ	0xFE1
  8495                           postinc2	equ	0xFDE
  8496                           postdec2	equ	0xFDD
  8497                           fsr2h	equ	0xFDA
  8498                           fsr2l	equ	0xFD9
  8499                           status	equ	0xFD8
  8500                           
  8501 ;; *************** function _ADC_Start *****************
  8502 ;; Defined at:
  8503 ;;		line 75 in file "ADC.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;		None
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;		None
  8508 ;; Return value:  Size  Location     Type
  8509 ;;		None               void
  8510 ;; Registers used:
  8511 ;;		None
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8517 ;;      Params:         0       0       0       0       0
  8518 ;;      Locals:         0       0       0       0       0
  8519 ;;      Temps:          0       0       0       0       0
  8520 ;;      Totals:         0       0       0       0       0
  8521 ;;Total ram usage:        0 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:   12
  8524 ;; This function calls:
  8525 ;;		Nothing
  8526 ;; This function is called by:
  8527 ;;		_main
  8528 ;; This function uses a non-reentrant model
  8529 ;;
  8530                           
  8531                           	psect	text57
  8532  001FAE                     __ptext57:
  8533                           	opt stack 0
  8534  001FAE                     _ADC_Start:
  8535                           	opt stack 18
  8536                           
  8537                           ;ADC.c: 77: ADCON0bits.GO = 1;
  8538                           
  8539                           ; BSR set to: 1
  8540                           ;incstack = 0
  8541  001FAE  82C2               	bsf	4034,1,c	;volatile
  8542  001FB0  0012               	return		;funcret
  8543  001FB2                     __end_of_ADC_Start:
  8544                           	opt stack 0
  8545                           tblptru	equ	0xFF8
  8546                           tblptrh	equ	0xFF7
  8547                           tblptrl	equ	0xFF6
  8548                           tablat	equ	0xFF5
  8549                           prodh	equ	0xFF4
  8550                           prodl	equ	0xFF3
  8551                           intcon	equ	0xFF2
  8552                           intcon2	equ	0xFF1
  8553                           intcon3	equ	0xFF0
  8554                           postinc0	equ	0xFEE
  8555                           wreg	equ	0xFE8
  8556                           postdec1	equ	0xFE5
  8557                           fsr1h	equ	0xFE2
  8558                           fsr1l	equ	0xFE1
  8559                           postinc2	equ	0xFDE
  8560                           postdec2	equ	0xFDD
  8561                           fsr2h	equ	0xFDA
  8562                           fsr2l	equ	0xFD9
  8563                           status	equ	0xFD8
  8564                           
  8565 ;; *************** function _low_isr *****************
  8566 ;; Defined at:
  8567 ;;		line 122 in file "INTERRUPTS.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;		None
  8570 ;; Auto vars:     Size  Location     Type
  8571 ;;  IRtemp          2   75[COMRAM] unsigned int 
  8572 ;;  button_state    1   74[COMRAM] unsigned char 
  8573 ;;  IR_state        1   73[COMRAM] unsigned char 
  8574 ;; Return value:  Size  Location     Type
  8575 ;;		None               void
  8576 ;; Registers used:
  8577 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  8583 ;;      Params:         0       0       0       0       0
  8584 ;;      Locals:         4       0       0       0       0
  8585 ;;      Temps:         17       0       0       0       0
  8586 ;;      Totals:        21       0       0       0       0
  8587 ;;Total ram usage:       21 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; Hardware stack levels required when called:   11
  8590 ;; This function calls:
  8591 ;;		_ADC_CalculateVoltage
  8592 ;;		_IR_CheckCode
  8593 ;;		_IR_CleanBuffer
  8594 ;;		_IR_ResetData
  8595 ;;		_RF_Disable
  8596 ;;		_TMR_Timer1Start
  8597 ;;		_TMR_Timer1Status
  8598 ;;		_TMR_Timer2Start
  8599 ;;		i1_BUT_ReadButton
  8600 ;;		i1_IR_ReadReceiver
  8601 ;;		i1_SYS_ActivityTimerReset
  8602 ;;		i1_TMR_ResetTimer1
  8603 ;;		i1_TMR_Timer1
  8604 ;;		i1_TMR_Timer2
  8605 ;; This function is called by:
  8606 ;;		Interrupt level 1
  8607 ;; This function uses a non-reentrant model
  8608 ;;
  8609                           
  8610                           	psect	intcodelo
  8611  000018                     __pintcodelo:
  8612                           	opt stack 0
  8613  000018                     _low_isr:
  8614                           	opt stack 13
  8615                           
  8616                           ;incstack = 0
  8617  000018  8066               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
  8618  00001A  CFD8 F039          	movff	status,??_low_isr
  8619  00001E  CFE8 F03A          	movff	wreg,??_low_isr+1
  8620  000022  CFE0 F03B          	movff	bsr,??_low_isr+2
  8621  000026  CFFA F03C          	movff	pclath,??_low_isr+3
  8622  00002A  CFFB F03D          	movff	pclatu,??_low_isr+4
  8623  00002E  CFE9 F03E          	movff	fsr0l,??_low_isr+5
  8624  000032  CFEA F03F          	movff	fsr0h,??_low_isr+6
  8625  000036  CFE1 F040          	movff	fsr1l,??_low_isr+7
  8626  00003A  CFE2 F041          	movff	fsr1h,??_low_isr+8
  8627  00003E  CFD9 F042          	movff	fsr2l,??_low_isr+9
  8628  000042  CFDA F043          	movff	fsr2h,??_low_isr+10
  8629  000046  CFF3 F044          	movff	prodl,??_low_isr+11
  8630  00004A  CFF4 F045          	movff	prodh,??_low_isr+12
  8631  00004E  CFF6 F046          	movff	tblptrl,??_low_isr+13
  8632  000052  CFF7 F047          	movff	tblptrh,??_low_isr+14
  8633  000056  CFF8 F048          	movff	tblptru,??_low_isr+15
  8634  00005A  CFF5 F049          	movff	tablat,??_low_isr+16
  8635                           
  8636                           ;INTERRUPTS.c: 124: unsigned char button_state;
  8637                           ;INTERRUPTS.c: 125: unsigned char IR_state;
  8638                           ;INTERRUPTS.c: 126: unsigned int IRtemp = 0;
  8639  00005E  0E00               	movlw	0
  8640  000060  6E4D               	movwf	low_isr@IRtemp+1,c
  8641  000062  0E00               	movlw	0
  8642  000064  6E4C               	movwf	low_isr@IRtemp,c
  8643                           
  8644                           ;INTERRUPTS.c: 128: if(INTCONbits.RBIF)
  8645  000066  A0F2               	btfss	intcon,0,c	;volatile
  8646  000068  D0AC               	goto	i1l206
  8647                           
  8648                           ;INTERRUPTS.c: 129: {
  8649                           ;INTERRUPTS.c: 134: button_state = BUT_ReadButton();
  8650  00006A  EC75  F00C         	call	i1_BUT_ReadButton	;wreg free
  8651  00006E  6E4B               	movwf	low_isr@button_state,c
  8652                           
  8653                           ;INTERRUPTS.c: 135: IR_state = IR_ReadReceiver();
  8654  000070  EC5B  F00C         	call	i1_IR_ReadReceiver	;wreg free
  8655  000074  6E4A               	movwf	low_isr@IR_state,c
  8656                           
  8657                           ;INTERRUPTS.c: 136: SYS_ActivityTimerReset();
  8658  000076  EC48  F00F         	call	i1_SYS_ActivityTimerReset	;wreg free
  8659                           
  8660                           ;INTERRUPTS.c: 137: if(ButtonChange)
  8661  00007A  505F               	movf	_ButtonChange,w,c
  8662  00007C  B4D8               	btfsc	status,2,c
  8663  00007E  D039               	goto	i1l7521
  8664                           
  8665                           ;INTERRUPTS.c: 138: {
  8666                           ;INTERRUPTS.c: 140: TMR_Timer2(0);
  8667  000080  0E00               	movlw	0
  8668  000082  EC6C  F00F         	call	i1_TMR_Timer2
  8669                           
  8670                           ;INTERRUPTS.c: 141: if(button_state)
  8671  000086  504B               	movf	low_isr@button_state,w,c
  8672  000088  B4D8               	btfsc	status,2,c
  8673  00008A  D017               	goto	i1l7509
  8674                           
  8675                           ;INTERRUPTS.c: 142: {
  8676                           ;INTERRUPTS.c: 144: if(System_State == 8)
  8677  00008C  0E08               	movlw	8
  8678  00008E  0100               	movlb	0	; () banked
  8679  000090  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
  8680  000092  A4D8               	btfss	status,2,c
  8681  000094  D009               	goto	i1l7505
  8682                           
  8683                           ; BSR set to: 0
  8684                           ;INTERRUPTS.c: 145: {
  8685                           ;INTERRUPTS.c: 146: Timer2Use = 17;
  8686  000096  0E11               	movlw	17
  8687  000098  6E64               	movwf	_Timer2Use,c
  8688                           
  8689                           ; BSR set to: 0
  8690                           ;INTERRUPTS.c: 147: TMR_Timer2Start(400);
  8691  00009A  0E01               	movlw	1
  8692  00009C  6E04               	movwf	TMR_Timer2Start@time+1,c
  8693  00009E  0E90               	movlw	144
  8694  0000A0  6E03               	movwf	TMR_Timer2Start@time,c
  8695  0000A2  EC41  F00E         	call	_TMR_Timer2Start	;wreg free
  8696                           
  8697                           ;INTERRUPTS.c: 148: }
  8698  0000A6  D022               	goto	i1l7519
  8699  0000A8                     i1l7505:
  8700                           
  8701                           ;INTERRUPTS.c: 149: else
  8702                           ;INTERRUPTS.c: 150: {
  8703                           ;INTERRUPTS.c: 151: Timer2Use = 19;
  8704  0000A8  0E13               	movlw	19
  8705  0000AA  6E64               	movwf	_Timer2Use,c
  8706                           
  8707                           ;INTERRUPTS.c: 152: TMR_Timer2Start(8);
  8708  0000AC  0E00               	movlw	0
  8709  0000AE  6E04               	movwf	TMR_Timer2Start@time+1,c
  8710  0000B0  0E08               	movlw	8
  8711  0000B2  6E03               	movwf	TMR_Timer2Start@time,c
  8712  0000B4  EC41  F00E         	call	_TMR_Timer2Start	;wreg free
  8713                           
  8714                           ;INTERRUPTS.c: 153: }
  8715                           ;INTERRUPTS.c: 154: }
  8716  0000B8  D019               	goto	i1l7519
  8717  0000BA                     i1l7509:
  8718                           
  8719                           ;INTERRUPTS.c: 155: else
  8720                           ;INTERRUPTS.c: 156: {
  8721                           ;INTERRUPTS.c: 157: if(System_State != 10)
  8722  0000BA  0E0A               	movlw	10
  8723  0000BC  0100               	movlb	0	; () banked
  8724  0000BE  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
  8725  0000C0  B4D8               	btfsc	status,2,c
  8726  0000C2  D00C               	goto	i1l7515
  8727                           
  8728                           ; BSR set to: 0
  8729                           ;INTERRUPTS.c: 158: {
  8730                           ;INTERRUPTS.c: 160: Button_Data = 1;
  8731  0000C4  0E01               	movlw	1
  8732  0000C6  0100               	movlb	0	; () banked
  8733  0000C8  6FC0               	movwf	_Button_Data& (0+255),b	;volatile
  8734                           
  8735                           ;INTERRUPTS.c: 161: Timer2Use = 19;
  8736  0000CA  0E13               	movlw	19
  8737  0000CC  6E64               	movwf	_Timer2Use,c
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;INTERRUPTS.c: 162: TMR_Timer2Start(8);
  8741  0000CE  0E00               	movlw	0
  8742  0000D0  6E04               	movwf	TMR_Timer2Start@time+1,c
  8743  0000D2  0E08               	movlw	8
  8744  0000D4  6E03               	movwf	TMR_Timer2Start@time,c
  8745  0000D6  EC41  F00E         	call	_TMR_Timer2Start	;wreg free
  8746                           
  8747                           ;INTERRUPTS.c: 163: }
  8748  0000DA  D008               	goto	i1l7519
  8749  0000DC                     i1l7515:
  8750                           
  8751                           ;INTERRUPTS.c: 164: else
  8752                           ;INTERRUPTS.c: 165: {
  8753                           ;INTERRUPTS.c: 166: Timer2Use = 18;
  8754  0000DC  0E12               	movlw	18
  8755  0000DE  6E64               	movwf	_Timer2Use,c
  8756                           
  8757                           ;INTERRUPTS.c: 167: TMR_Timer2Start(500);
  8758  0000E0  0E01               	movlw	1
  8759  0000E2  6E04               	movwf	TMR_Timer2Start@time+1,c
  8760  0000E4  0EF4               	movlw	244
  8761  0000E6  6E03               	movwf	TMR_Timer2Start@time,c
  8762  0000E8  EC41  F00E         	call	_TMR_Timer2Start	;wreg free
  8763  0000EC                     i1l7519:
  8764                           
  8765                           ;INTERRUPTS.c: 168: }
  8766                           ;INTERRUPTS.c: 169: }
  8767                           ;INTERRUPTS.c: 170: ButtonChange = 0;
  8768  0000EC  0E00               	movlw	0
  8769  0000EE  6E5F               	movwf	_ButtonChange,c
  8770                           
  8771                           ;INTERRUPTS.c: 171: }
  8772  0000F0  D066               	goto	i1l214
  8773  0000F2                     i1l7521:
  8774                           
  8775                           ;INTERRUPTS.c: 172: else if(IRChange)
  8776  0000F2  5060               	movf	_IRChange,w,c
  8777  0000F4  B4D8               	btfsc	status,2,c
  8778  0000F6  D062               	goto	i1l215
  8779                           
  8780                           ;INTERRUPTS.c: 173: {
  8781                           ;INTERRUPTS.c: 175: if(!TMR_Timer1Status())
  8782  0000F8  ECB6  F00F         	call	_TMR_Timer1Status	;wreg free
  8783  0000FC  0900               	iorlw	0
  8784  0000FE  A4D8               	btfss	status,2,c
  8785  000100  D003               	goto	i1l216
  8786                           
  8787                           ;INTERRUPTS.c: 176: {
  8788                           ;INTERRUPTS.c: 178: TMR_Timer1Start();
  8789  000102  EC51  F00F         	call	_TMR_Timer1Start	;wreg free
  8790                           
  8791                           ;INTERRUPTS.c: 179: }
  8792  000106  D057               	goto	i1l7567
  8793  000108                     i1l216:
  8794                           
  8795                           ;INTERRUPTS.c: 180: else
  8796                           ;INTERRUPTS.c: 181: {
  8797                           ;INTERRUPTS.c: 182: IRtemp = TMR1L;
  8798  000108  CFCE F04C          	movff	4046,low_isr@IRtemp	;volatile
  8799  00010C  6A4D               	clrf	low_isr@IRtemp+1,c
  8800                           
  8801                           ;INTERRUPTS.c: 183: IRtemp += (unsigned int)TMR1H << 8;
  8802  00010E  50CF               	movf	4047,w,c	;volatile
  8803  000110  264D               	addwf	low_isr@IRtemp+1,f,c
  8804                           
  8805                           ;INTERRUPTS.c: 184: TMR_ResetTimer1();
  8806  000112  ECA5  F00D         	call	i1_TMR_ResetTimer1	;wreg free
  8807                           
  8808                           ;INTERRUPTS.c: 185: if(!IRStarted)
  8809  000116  5061               	movf	_IRStarted,w,c
  8810  000118  A4D8               	btfss	status,2,c
  8811  00011A  D022               	goto	i1l218
  8812                           
  8813                           ;INTERRUPTS.c: 186: {
  8814                           ;INTERRUPTS.c: 187: if(System_State == 8)
  8815  00011C  0E08               	movlw	8
  8816  00011E  0100               	movlb	0	; () banked
  8817  000120  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
  8818  000122  A4D8               	btfss	status,2,c
  8819  000124  D00F               	goto	i1l7541
  8820                           
  8821                           ; BSR set to: 0
  8822                           ;INTERRUPTS.c: 188: {
  8823                           ;INTERRUPTS.c: 189: if(IRtemp >= IR_SyncLow && IRtemp <= IR_SyncHigh)
  8824  000126  5057               	movf	_IR_SyncLow,w,c
  8825  000128  5C4C               	subwf	low_isr@IRtemp,w,c
  8826  00012A  5058               	movf	_IR_SyncLow+1,w,c
  8827  00012C  584D               	subwfb	low_isr@IRtemp+1,w,c
  8828  00012E  A0D8               	btfss	status,0,c
  8829  000130  D017               	goto	i1l218
  8830                           
  8831                           ; BSR set to: 0
  8832  000132  504C               	movf	low_isr@IRtemp,w,c
  8833  000134  5C55               	subwf	_IR_SyncHigh,w,c
  8834  000136  504D               	movf	low_isr@IRtemp+1,w,c
  8835  000138  5856               	subwfb	_IR_SyncHigh+1,w,c
  8836  00013A  A0D8               	btfss	status,0,c
  8837  00013C  D011               	goto	i1l218
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;INTERRUPTS.c: 190: {
  8841                           ;INTERRUPTS.c: 191: IRStarted = 1;
  8842  00013E  0E01               	movlw	1
  8843  000140  6E61               	movwf	_IRStarted,c
  8844                           
  8845                           ; BSR set to: 0
  8846                           ;INTERRUPTS.c: 192: }
  8847                           ;INTERRUPTS.c: 193: }
  8848  000142  D00E               	goto	i1l218
  8849  000144                     i1l7541:
  8850                           
  8851                           ; BSR set to: 0
  8852                           ;INTERRUPTS.c: 194: else
  8853                           ;INTERRUPTS.c: 195: {
  8854                           ;INTERRUPTS.c: 196: if(IRtemp >= 6000 && IRtemp <= 10000)
  8855  000144  0E70               	movlw	112
  8856  000146  5C4C               	subwf	low_isr@IRtemp,w,c
  8857  000148  0E17               	movlw	23
  8858  00014A  584D               	subwfb	low_isr@IRtemp+1,w,c
  8859  00014C  A0D8               	btfss	status,0,c
  8860  00014E  D008               	goto	i1l218
  8861                           
  8862                           ; BSR set to: 0
  8863  000150  0E11               	movlw	17
  8864  000152  5C4C               	subwf	low_isr@IRtemp,w,c
  8865  000154  0E27               	movlw	39
  8866  000156  584D               	subwfb	low_isr@IRtemp+1,w,c
  8867  000158  B0D8               	btfsc	status,0,c
  8868  00015A  D002               	goto	i1l218
  8869                           
  8870                           ; BSR set to: 0
  8871                           ;INTERRUPTS.c: 197: {
  8872                           ;INTERRUPTS.c: 198: IRStarted = 1;
  8873  00015C  0E01               	movlw	1
  8874  00015E  6E61               	movwf	_IRStarted,c
  8875  000160                     i1l218:
  8876                           
  8877                           ;INTERRUPTS.c: 199: }
  8878                           ;INTERRUPTS.c: 200: }
  8879                           ;INTERRUPTS.c: 201: }
  8880                           ;INTERRUPTS.c: 202: if(IRStarted)
  8881  000160  5061               	movf	_IRStarted,w,c
  8882  000162  B4D8               	btfsc	status,2,c
  8883  000164  D028               	goto	i1l7567
  8884                           
  8885                           ;INTERRUPTS.c: 203: {
  8886                           ;INTERRUPTS.c: 204: RF_Disable();
  8887  000166  EC17  F00F         	call	_RF_Disable	;wreg free
  8888                           
  8889                           ;INTERRUPTS.c: 205: if(IR_DataPlace < 128)
  8890  00016A  0E80               	movlw	128
  8891  00016C  6063               	cpfslt	_IR_DataPlace,c
  8892  00016E  D023               	goto	i1l7567
  8893                           
  8894                           ;INTERRUPTS.c: 206: {
  8895                           ;INTERRUPTS.c: 207: IR_DataTiming[IR_DataPlace] = IRtemp;
  8896  000170  5063               	movf	_IR_DataPlace,w,c
  8897  000172  0D02               	mullw	2
  8898  000174  0E00               	movlw	low _IR_DataTiming
  8899  000176  24F3               	addwf	prodl,w,c
  8900  000178  6ED9               	movwf	fsr2l,c
  8901  00017A  0E02               	movlw	high _IR_DataTiming
  8902  00017C  20F4               	addwfc	prodh,w,c
  8903  00017E  6EDA               	movwf	fsr2h,c
  8904  000180  C04C  FFDE         	movff	low_isr@IRtemp,postinc2
  8905  000184  C04D  FFDD         	movff	low_isr@IRtemp+1,postdec2
  8906                           
  8907                           ;INTERRUPTS.c: 208: IR_DataPlace++;
  8908  000188  2A63               	incf	_IR_DataPlace,f,c
  8909                           
  8910                           ;INTERRUPTS.c: 209: if(System_State == 8)
  8911  00018A  0E08               	movlw	8
  8912  00018C  0100               	movlb	0	; () banked
  8913  00018E  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
  8914  000190  A4D8               	btfss	status,2,c
  8915  000192  D011               	goto	i1l7567
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;INTERRUPTS.c: 210: {
  8919                           ;INTERRUPTS.c: 211: if(IR_DataPlace >= IR_CodeSize)
  8920  000194  5062               	movf	_IR_CodeSize,w,c
  8921  000196  5C63               	subwf	_IR_DataPlace,w,c
  8922  000198  A0D8               	btfss	status,0,c
  8923  00019A  D00D               	goto	i1l7567
  8924                           
  8925                           ; BSR set to: 0
  8926                           ;INTERRUPTS.c: 212: {
  8927                           ;INTERRUPTS.c: 213: if(!IR_Data)
  8928  00019C  0100               	movlb	0	; () banked
  8929  00019E  51C4               	movf	_IR_Data& (0+255),w,b	;volatile
  8930  0001A0  A4D8               	btfss	status,2,c
  8931  0001A2  D004               	goto	i1l7563
  8932                           
  8933                           ; BSR set to: 0
  8934                           ;INTERRUPTS.c: 214: {
  8935                           ;INTERRUPTS.c: 215: IR_Data = IR_CheckCode();
  8936  0001A4  ECBE  F018         	call	_IR_CheckCode	;wreg free
  8937  0001A8  0100               	movlb	0	; () banked
  8938  0001AA  6FC4               	movwf	_IR_Data& (0+255),b	;volatile
  8939  0001AC                     i1l7563:
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;INTERRUPTS.c: 216: }
  8943                           ;INTERRUPTS.c: 217: TMR_Timer1(0);
  8944  0001AC  0E00               	movlw	0
  8945  0001AE  EC74  F00F         	call	i1_TMR_Timer1
  8946                           
  8947                           ;INTERRUPTS.c: 218: IR_ResetData();
  8948  0001B2  ECA1  F00F         	call	_IR_ResetData	;wreg free
  8949  0001B6                     i1l7567:
  8950                           
  8951                           ;INTERRUPTS.c: 219: }
  8952                           ;INTERRUPTS.c: 220: }
  8953                           ;INTERRUPTS.c: 221: }
  8954                           ;INTERRUPTS.c: 222: }
  8955                           ;INTERRUPTS.c: 223: }
  8956                           ;INTERRUPTS.c: 224: IRChange = 0;
  8957  0001B6  0E00               	movlw	0
  8958  0001B8  6E60               	movwf	_IRChange,c
  8959                           
  8960                           ;INTERRUPTS.c: 225: }
  8961  0001BA  D001               	goto	i1l214
  8962  0001BC                     i1l215:
  8963                           
  8964                           ;INTERRUPTS.c: 226: else
  8965                           ;INTERRUPTS.c: 227: {
  8966                           ;INTERRUPTS.c: 229: __nop();
  8967  0001BC  F000               	nop	
  8968  0001BE                     i1l214:
  8969                           
  8970                           ;INTERRUPTS.c: 230: }
  8971                           ;INTERRUPTS.c: 231: INTCONbits.RBIF = 0;
  8972  0001BE  90F2               	bcf	intcon,0,c	;volatile
  8973                           
  8974                           ;INTERRUPTS.c: 232: }
  8975  0001C0  D042               	goto	i1l243
  8976  0001C2                     i1l206:
  8977                           
  8978                           ;INTERRUPTS.c: 233: else if(PIR1bits.TMR2IF)
  8979  0001C2  A29E               	btfss	3998,1,c	;volatile
  8980  0001C4  D020               	goto	i1l230
  8981                           
  8982                           ;INTERRUPTS.c: 234: {
  8983                           ;INTERRUPTS.c: 236: if(Timer2PostCount >= Timer2Post)
  8984  0001C6  5059               	movf	_Timer2Post,w,c
  8985  0001C8  5C5B               	subwf	_Timer2PostCount,w,c
  8986  0001CA  505A               	movf	_Timer2Post+1,w,c
  8987  0001CC  585C               	subwfb	_Timer2PostCount+1,w,c
  8988  0001CE  A0D8               	btfss	status,0,c
  8989  0001D0  D014               	goto	i1l7581
  8990                           
  8991                           ;INTERRUPTS.c: 237: {
  8992                           ;INTERRUPTS.c: 238: TMR_Timer2(0);
  8993  0001D2  0E00               	movlw	0
  8994  0001D4  EC6C  F00F         	call	i1_TMR_Timer2
  8995                           
  8996                           ;INTERRUPTS.c: 239: if(Timer2Use == 17)
  8997  0001D8  0E11               	movlw	17
  8998  0001DA  1864               	xorwf	_Timer2Use,w,c
  8999  0001DC  A4D8               	btfss	status,2,c
  9000  0001DE  D002               	goto	i1l7577
  9001                           
  9002                           ;INTERRUPTS.c: 240: {
  9003                           ;INTERRUPTS.c: 242: System_State = 10;
  9004  0001E0  0E0A               	movlw	10
  9005  0001E2  D005               	goto	L2
  9006  0001E4                     i1l7577:
  9007                           
  9008                           ;INTERRUPTS.c: 245: else if(Timer2Use == 18)
  9009  0001E4  0E12               	movlw	18
  9010  0001E6  1864               	xorwf	_Timer2Use,w,c
  9011  0001E8  A4D8               	btfss	status,2,c
  9012  0001EA  D00B               	goto	i1l7585
  9013                           
  9014                           ;INTERRUPTS.c: 246: {
  9015                           ;INTERRUPTS.c: 247: System_State = 8;
  9016  0001EC  0E08               	movlw	8
  9017  0001EE                     L2:
  9018  0001EE  0100               	movlb	0	; () banked
  9019  0001F0  6FCF               	movwf	_System_State& (0+255),b	;volatile
  9020                           
  9021                           ;INTERRUPTS.c: 248: System_State_Change = 1;
  9022  0001F2  0E01               	movlw	1
  9023  0001F4  0100               	movlb	0	; () banked
  9024  0001F6  6FC9               	movwf	_System_State_Change& (0+255),b	;volatile
  9025                           
  9026                           ; BSR set to: 0
  9027                           ;INTERRUPTS.c: 249: }
  9028                           ;INTERRUPTS.c: 250: }
  9029                           
  9030                           ; BSR set to: 0
  9031  0001F8  D004               	goto	i1l7585
  9032  0001FA                     i1l7581:
  9033                           
  9034                           ;INTERRUPTS.c: 251: else
  9035                           ;INTERRUPTS.c: 252: {
  9036                           ;INTERRUPTS.c: 253: SYS_ActivityTimerReset();
  9037  0001FA  EC48  F00F         	call	i1_SYS_ActivityTimerReset	;wreg free
  9038                           
  9039                           ;INTERRUPTS.c: 254: Timer2PostCount++;
  9040  0001FE  4A5B               	infsnz	_Timer2PostCount,f,c
  9041  000200  2A5C               	incf	_Timer2PostCount+1,f,c
  9042  000202                     i1l7585:
  9043                           
  9044                           ;INTERRUPTS.c: 255: }
  9045                           ;INTERRUPTS.c: 256: PIR1bits.TMR2IF = 0;
  9046  000202  929E               	bcf	3998,1,c	;volatile
  9047                           
  9048                           ;INTERRUPTS.c: 257: }
  9049  000204  D020               	goto	i1l243
  9050  000206                     i1l230:
  9051                           
  9052                           ;INTERRUPTS.c: 258: else if(PIR1bits.ADIF)
  9053  000206  AC9E               	btfss	3998,6,c	;volatile
  9054  000208  D004               	goto	i1l237
  9055                           
  9056                           ;INTERRUPTS.c: 259: {
  9057                           ;INTERRUPTS.c: 261: ADC_CalculateVoltage();
  9058  00020A  ECEC  F006         	call	_ADC_CalculateVoltage	;wreg free
  9059                           
  9060                           ;INTERRUPTS.c: 262: PIR1bits.ADIF = 0;
  9061  00020E  9C9E               	bcf	3998,6,c	;volatile
  9062                           
  9063                           ;INTERRUPTS.c: 263: }
  9064  000210  D01A               	goto	i1l243
  9065  000212                     i1l237:
  9066                           
  9067                           ;INTERRUPTS.c: 264: else if(PIR1bits.TMR1IF)
  9068  000212  A09E               	btfss	3998,0,c	;volatile
  9069  000214  D017               	goto	i1l239
  9070                           
  9071                           ;INTERRUPTS.c: 265: {
  9072                           ;INTERRUPTS.c: 267: TMR_Timer1(0);
  9073  000216  0E00               	movlw	0
  9074  000218  EC74  F00F         	call	i1_TMR_Timer1
  9075                           
  9076                           ;INTERRUPTS.c: 268: if(System_State == 10)
  9077  00021C  0E0A               	movlw	10
  9078  00021E  0100               	movlb	0	; () banked
  9079  000220  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
  9080  000222  A4D8               	btfss	status,2,c
  9081  000224  D007               	goto	i1l7599
  9082                           
  9083                           ; BSR set to: 0
  9084                           ;INTERRUPTS.c: 269: {
  9085                           ;INTERRUPTS.c: 270: if(IR_DataPlace >= 40)
  9086  000226  0E27               	movlw	39
  9087  000228  6463               	cpfsgt	_IR_DataPlace,c
  9088  00022A  D004               	goto	i1l7599
  9089                           
  9090                           ; BSR set to: 0
  9091                           ;INTERRUPTS.c: 271: {
  9092                           ;INTERRUPTS.c: 273: IR_Data = IR_CheckCode();
  9093  00022C  ECBE  F018         	call	_IR_CheckCode	;wreg free
  9094  000230  0100               	movlb	0	; () banked
  9095  000232  6FC4               	movwf	_IR_Data& (0+255),b	;volatile
  9096  000234                     i1l7599:
  9097                           
  9098                           ; BSR set to: 0
  9099                           ;INTERRUPTS.c: 274: }
  9100                           ;INTERRUPTS.c: 275: }
  9101                           ;INTERRUPTS.c: 276: TMR_ResetTimer1();
  9102  000234  ECA5  F00D         	call	i1_TMR_ResetTimer1	;wreg free
  9103                           
  9104                           ;INTERRUPTS.c: 277: IR_ResetData();
  9105  000238  ECA1  F00F         	call	_IR_ResetData	;wreg free
  9106                           
  9107                           ;INTERRUPTS.c: 278: IR_CleanBuffer();
  9108  00023C  ECF6  F00E         	call	_IR_CleanBuffer	;wreg free
  9109                           
  9110                           ;INTERRUPTS.c: 279: PIR1bits.TMR1IF = 0;
  9111  000240  909E               	bcf	3998,0,c	;volatile
  9112                           
  9113                           ;INTERRUPTS.c: 280: }
  9114  000242  D001               	goto	i1l243
  9115  000244                     i1l239:
  9116                           
  9117                           ;INTERRUPTS.c: 281: else
  9118                           ;INTERRUPTS.c: 282: {
  9119                           ;INTERRUPTS.c: 284: __nop();
  9120  000244  F000               	nop	
  9121  000246                     i1l243:
  9122  000246  C049  FFF5         	movff	??_low_isr+16,tablat
  9123  00024A  C048  FFF8         	movff	??_low_isr+15,tblptru
  9124  00024E  C047  FFF7         	movff	??_low_isr+14,tblptrh
  9125  000252  C046  FFF6         	movff	??_low_isr+13,tblptrl
  9126  000256  C045  FFF4         	movff	??_low_isr+12,prodh
  9127  00025A  C044  FFF3         	movff	??_low_isr+11,prodl
  9128  00025E  C043  FFDA         	movff	??_low_isr+10,fsr2h
  9129  000262  C042  FFD9         	movff	??_low_isr+9,fsr2l
  9130  000266  C041  FFE2         	movff	??_low_isr+8,fsr1h
  9131  00026A  C040  FFE1         	movff	??_low_isr+7,fsr1l
  9132  00026E  C03F  FFEA         	movff	??_low_isr+6,fsr0h
  9133  000272  C03E  FFE9         	movff	??_low_isr+5,fsr0l
  9134  000276  C03D  FFFB         	movff	??_low_isr+4,pclatu
  9135  00027A  C03C  FFFA         	movff	??_low_isr+3,pclath
  9136  00027E  C03B  FFE0         	movff	??_low_isr+2,bsr
  9137  000282  C03A  FFE8         	movff	??_low_isr+1,wreg
  9138  000286  C039  FFD8         	movff	??_low_isr,status
  9139  00028A  9066               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
  9140  00028C  0010               	retfie	
  9141  00028E                     __end_of_low_isr:
  9142                           	opt stack 0
  9143                           pclatu	equ	0xFFB
  9144                           pclath	equ	0xFFA
  9145                           tblptru	equ	0xFF8
  9146                           tblptrh	equ	0xFF7
  9147                           tblptrl	equ	0xFF6
  9148                           tablat	equ	0xFF5
  9149                           prodh	equ	0xFF4
  9150                           prodl	equ	0xFF3
  9151                           intcon	equ	0xFF2
  9152                           intcon2	equ	0xFF1
  9153                           intcon3	equ	0xFF0
  9154                           postinc0	equ	0xFEE
  9155                           fsr0h	equ	0xFEA
  9156                           fsr0l	equ	0xFE9
  9157                           wreg	equ	0xFE8
  9158                           postdec1	equ	0xFE5
  9159                           fsr1h	equ	0xFE2
  9160                           fsr1l	equ	0xFE1
  9161                           bsr	equ	0xFE0
  9162                           postinc2	equ	0xFDE
  9163                           postdec2	equ	0xFDD
  9164                           fsr2h	equ	0xFDA
  9165                           fsr2l	equ	0xFD9
  9166                           status	equ	0xFD8
  9167                           
  9168 ;; *************** function i1_SYS_ActivityTimerReset *****************
  9169 ;; Defined at:
  9170 ;;		line 69 in file "SYSTEM.c"
  9171 ;; Parameters:    Size  Location     Type
  9172 ;;		None
  9173 ;; Auto vars:     Size  Location     Type
  9174 ;;		None
  9175 ;; Return value:  Size  Location     Type
  9176 ;;		None               void
  9177 ;; Registers used:
  9178 ;;		wreg, status,2
  9179 ;; Tracked objects:
  9180 ;;		On entry : 0/0
  9181 ;;		On exit  : 0/0
  9182 ;;		Unchanged: 0/0
  9183 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9184 ;;      Params:         0       0       0       0       0
  9185 ;;      Locals:         0       0       0       0       0
  9186 ;;      Temps:          0       0       0       0       0
  9187 ;;      Totals:         0       0       0       0       0
  9188 ;;Total ram usage:        0 bytes
  9189 ;; Hardware stack levels used:    1
  9190 ;; Hardware stack levels required when called:    6
  9191 ;; This function calls:
  9192 ;;		Nothing
  9193 ;; This function is called by:
  9194 ;;		_low_isr
  9195 ;; This function uses a non-reentrant model
  9196 ;;
  9197                           
  9198                           	psect	text59
  9199  001E90                     __ptext59:
  9200                           	opt stack 0
  9201  001E90                     i1_SYS_ActivityTimerReset:
  9202                           	opt stack 17
  9203                           
  9204                           ;SYSTEM.c: 71: Activity_Timer = 0;
  9205                           
  9206                           ;incstack = 0
  9207  001E90  0E00               	movlw	0
  9208  001E92  6E4E               	movwf	_Activity_Timer,c
  9209  001E94  0E00               	movlw	0
  9210  001E96  6E4F               	movwf	_Activity_Timer+1,c
  9211  001E98  0E00               	movlw	0
  9212  001E9A  6E50               	movwf	_Activity_Timer+2,c
  9213  001E9C  0E00               	movlw	0
  9214  001E9E  6E51               	movwf	_Activity_Timer+3,c
  9215  001EA0  0012               	return		;funcret
  9216  001EA2                     __end_ofi1_SYS_ActivityTimerReset:
  9217                           	opt stack 0
  9218                           pclatu	equ	0xFFB
  9219                           pclath	equ	0xFFA
  9220                           tblptru	equ	0xFF8
  9221                           tblptrh	equ	0xFF7
  9222                           tblptrl	equ	0xFF6
  9223                           tablat	equ	0xFF5
  9224                           prodh	equ	0xFF4
  9225                           prodl	equ	0xFF3
  9226                           intcon	equ	0xFF2
  9227                           intcon2	equ	0xFF1
  9228                           intcon3	equ	0xFF0
  9229                           postinc0	equ	0xFEE
  9230                           fsr0h	equ	0xFEA
  9231                           fsr0l	equ	0xFE9
  9232                           wreg	equ	0xFE8
  9233                           postdec1	equ	0xFE5
  9234                           fsr1h	equ	0xFE2
  9235                           fsr1l	equ	0xFE1
  9236                           bsr	equ	0xFE0
  9237                           postinc2	equ	0xFDE
  9238                           postdec2	equ	0xFDD
  9239                           fsr2h	equ	0xFDA
  9240                           fsr2l	equ	0xFD9
  9241                           status	equ	0xFD8
  9242                           
  9243 ;; *************** function i1_IR_ReadReceiver *****************
  9244 ;; Defined at:
  9245 ;;		line 80 in file "IR.c"
  9246 ;; Parameters:    Size  Location     Type
  9247 ;;		None
  9248 ;; Auto vars:     Size  Location     Type
  9249 ;;  IR_ReadRecei    1    0[COMRAM] unsigned char 
  9250 ;; Return value:  Size  Location     Type
  9251 ;;                  1    wreg      unsigned char 
  9252 ;; Registers used:
  9253 ;;		wreg, status,2, status,0
  9254 ;; Tracked objects:
  9255 ;;		On entry : 0/0
  9256 ;;		On exit  : 0/0
  9257 ;;		Unchanged: 0/0
  9258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9259 ;;      Params:         0       0       0       0       0
  9260 ;;      Locals:         1       0       0       0       0
  9261 ;;      Temps:          0       0       0       0       0
  9262 ;;      Totals:         1       0       0       0       0
  9263 ;;Total ram usage:        1 bytes
  9264 ;; Hardware stack levels used:    1
  9265 ;; Hardware stack levels required when called:    6
  9266 ;; This function calls:
  9267 ;;		Nothing
  9268 ;; This function is called by:
  9269 ;;		_low_isr
  9270 ;; This function uses a non-reentrant model
  9271 ;;
  9272                           
  9273                           	psect	text60
  9274  0018B6                     __ptext60:
  9275                           	opt stack 0
  9276  0018B6                     i1_IR_ReadReceiver:
  9277                           	opt stack 17
  9278                           
  9279                           ;IR.c: 82: unsigned char value = PORTB;
  9280                           
  9281                           ;incstack = 0
  9282  0018B6  CF81 F001          	movff	3969,i1IR_ReadReceiver@value	;volatile
  9283                           
  9284                           ;IR.c: 84: if(value & 0x10)
  9285  0018BA  A801               	btfss	i1IR_ReadReceiver@value,4,c
  9286  0018BC  D00B               	goto	i1l7299
  9287                           
  9288                           ;IR.c: 85: {
  9289                           ;IR.c: 86: if(IRValue_prev == 0)
  9290  0018BE  0100               	movlb	0	; () banked
  9291  0018C0  51C3               	movf	_IRValue_prev& (0+255),w,b
  9292  0018C2  A4D8               	btfss	status,2,c
  9293  0018C4  D002               	goto	i1l540
  9294                           
  9295                           ; BSR set to: 0
  9296                           ;IR.c: 87: {
  9297                           ;IR.c: 88: IRChange = 1;
  9298  0018C6  0E01               	movlw	1
  9299  0018C8  6E60               	movwf	_IRChange,c
  9300  0018CA                     i1l540:
  9301                           
  9302                           ; BSR set to: 0
  9303                           ;IR.c: 89: }
  9304                           ;IR.c: 90: IRValue_prev = 1;
  9305  0018CA  0E01               	movlw	1
  9306  0018CC  0100               	movlb	0	; () banked
  9307  0018CE  6FC3               	movwf	_IRValue_prev& (0+255),b
  9308                           
  9309                           ; BSR set to: 0
  9310                           ;IR.c: 91: return 1;
  9311  0018D0  0E01               	movlw	1
  9312                           
  9313                           ; BSR set to: 0
  9314  0018D2  0012               	return	
  9315  0018D4                     i1l7299:
  9316                           
  9317                           ;IR.c: 92: }
  9318                           ;IR.c: 94: if(IRValue_prev == 1)
  9319  0018D4  0100               	movlb	0	; () banked
  9320  0018D6  05C3               	decf	_IRValue_prev& (0+255),w,b
  9321  0018D8  A4D8               	btfss	status,2,c
  9322  0018DA  D002               	goto	i1l542
  9323                           
  9324                           ; BSR set to: 0
  9325                           ;IR.c: 95: {
  9326                           ;IR.c: 96: IRChange = 1;
  9327  0018DC  0E01               	movlw	1
  9328  0018DE  6E60               	movwf	_IRChange,c
  9329  0018E0                     i1l542:
  9330                           
  9331                           ; BSR set to: 0
  9332                           ;IR.c: 97: }
  9333                           ;IR.c: 98: IRValue_prev = 0;
  9334  0018E0  0E00               	movlw	0
  9335  0018E2  0100               	movlb	0	; () banked
  9336  0018E4  6FC3               	movwf	_IRValue_prev& (0+255),b
  9337                           
  9338                           ; BSR set to: 0
  9339                           ;IR.c: 99: return 0;
  9340  0018E6  0E00               	movlw	0
  9341  0018E8  0012               	return	
  9342  0018EA                     __end_ofi1_IR_ReadReceiver:
  9343                           	opt stack 0
  9344                           pclatu	equ	0xFFB
  9345                           pclath	equ	0xFFA
  9346                           tblptru	equ	0xFF8
  9347                           tblptrh	equ	0xFF7
  9348                           tblptrl	equ	0xFF6
  9349                           tablat	equ	0xFF5
  9350                           prodh	equ	0xFF4
  9351                           prodl	equ	0xFF3
  9352                           intcon	equ	0xFF2
  9353                           intcon2	equ	0xFF1
  9354                           intcon3	equ	0xFF0
  9355                           postinc0	equ	0xFEE
  9356                           fsr0h	equ	0xFEA
  9357                           fsr0l	equ	0xFE9
  9358                           wreg	equ	0xFE8
  9359                           postdec1	equ	0xFE5
  9360                           fsr1h	equ	0xFE2
  9361                           fsr1l	equ	0xFE1
  9362                           bsr	equ	0xFE0
  9363                           postinc2	equ	0xFDE
  9364                           postdec2	equ	0xFDD
  9365                           fsr2h	equ	0xFDA
  9366                           fsr2l	equ	0xFD9
  9367                           status	equ	0xFD8
  9368                           
  9369 ;; *************** function i1_BUT_ReadButton *****************
  9370 ;; Defined at:
  9371 ;;		line 92 in file "BUTTON.c"
  9372 ;; Parameters:    Size  Location     Type
  9373 ;;		None
  9374 ;; Auto vars:     Size  Location     Type
  9375 ;;  BUT_ReadButt    1    0[COMRAM] unsigned char 
  9376 ;; Return value:  Size  Location     Type
  9377 ;;                  1    wreg      unsigned char 
  9378 ;; Registers used:
  9379 ;;		wreg, status,2, status,0
  9380 ;; Tracked objects:
  9381 ;;		On entry : 0/0
  9382 ;;		On exit  : 0/0
  9383 ;;		Unchanged: 0/0
  9384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9385 ;;      Params:         0       0       0       0       0
  9386 ;;      Locals:         1       0       0       0       0
  9387 ;;      Temps:          0       0       0       0       0
  9388 ;;      Totals:         1       0       0       0       0
  9389 ;;Total ram usage:        1 bytes
  9390 ;; Hardware stack levels used:    1
  9391 ;; Hardware stack levels required when called:    6
  9392 ;; This function calls:
  9393 ;;		Nothing
  9394 ;; This function is called by:
  9395 ;;		_low_isr
  9396 ;; This function uses a non-reentrant model
  9397 ;;
  9398                           
  9399                           	psect	text61
  9400  0018EA                     __ptext61:
  9401                           	opt stack 0
  9402  0018EA                     i1_BUT_ReadButton:
  9403                           	opt stack 17
  9404                           
  9405                           ;BUTTON.c: 94: unsigned char value = PORTB;
  9406                           
  9407                           ; BSR set to: 0
  9408                           ;incstack = 0
  9409  0018EA  CF81 F001          	movff	3969,i1BUT_ReadButton@value	;volatile
  9410                           
  9411                           ;BUTTON.c: 95: if((value & 0x20) == 0)
  9412  0018EE  BA01               	btfsc	i1BUT_ReadButton@value,5,c
  9413  0018F0  D00B               	goto	i1l7317
  9414                           
  9415                           ;BUTTON.c: 96: {
  9416                           ;BUTTON.c: 98: if(ButtonValue_prev == 0)
  9417  0018F2  0100               	movlb	0	; () banked
  9418  0018F4  51BF               	movf	_ButtonValue_prev& (0+255),w,b
  9419  0018F6  A4D8               	btfss	status,2,c
  9420  0018F8  D002               	goto	i1l1003
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;BUTTON.c: 99: {
  9424                           ;BUTTON.c: 100: ButtonChange = 1;
  9425  0018FA  0E01               	movlw	1
  9426  0018FC  6E5F               	movwf	_ButtonChange,c
  9427  0018FE                     i1l1003:
  9428                           
  9429                           ; BSR set to: 0
  9430                           ;BUTTON.c: 101: }
  9431                           ;BUTTON.c: 102: ButtonValue_prev = 1;
  9432  0018FE  0E01               	movlw	1
  9433  001900  0100               	movlb	0	; () banked
  9434  001902  6FBF               	movwf	_ButtonValue_prev& (0+255),b
  9435                           
  9436                           ; BSR set to: 0
  9437                           ;BUTTON.c: 103: return 1;
  9438  001904  0E01               	movlw	1
  9439                           
  9440                           ; BSR set to: 0
  9441  001906  0012               	return	
  9442  001908                     i1l7317:
  9443                           
  9444                           ;BUTTON.c: 104: }
  9445                           ;BUTTON.c: 107: if(ButtonValue_prev == 1)
  9446  001908  0100               	movlb	0	; () banked
  9447  00190A  05BF               	decf	_ButtonValue_prev& (0+255),w,b
  9448  00190C  A4D8               	btfss	status,2,c
  9449  00190E  D002               	goto	i1l1005
  9450                           
  9451                           ; BSR set to: 0
  9452                           ;BUTTON.c: 108: {
  9453                           ;BUTTON.c: 109: ButtonChange = 1;
  9454  001910  0E01               	movlw	1
  9455  001912  6E5F               	movwf	_ButtonChange,c
  9456  001914                     i1l1005:
  9457                           
  9458                           ; BSR set to: 0
  9459                           ;BUTTON.c: 110: }
  9460                           ;BUTTON.c: 111: ButtonValue_prev = 0;
  9461  001914  0E00               	movlw	0
  9462  001916  0100               	movlb	0	; () banked
  9463  001918  6FBF               	movwf	_ButtonValue_prev& (0+255),b
  9464                           
  9465                           ; BSR set to: 0
  9466                           ;BUTTON.c: 112: return 0;
  9467  00191A  0E00               	movlw	0
  9468  00191C  0012               	return	
  9469  00191E                     __end_ofi1_BUT_ReadButton:
  9470                           	opt stack 0
  9471                           pclatu	equ	0xFFB
  9472                           pclath	equ	0xFFA
  9473                           tblptru	equ	0xFF8
  9474                           tblptrh	equ	0xFF7
  9475                           tblptrl	equ	0xFF6
  9476                           tablat	equ	0xFF5
  9477                           prodh	equ	0xFF4
  9478                           prodl	equ	0xFF3
  9479                           intcon	equ	0xFF2
  9480                           intcon2	equ	0xFF1
  9481                           intcon3	equ	0xFF0
  9482                           postinc0	equ	0xFEE
  9483                           fsr0h	equ	0xFEA
  9484                           fsr0l	equ	0xFE9
  9485                           wreg	equ	0xFE8
  9486                           postdec1	equ	0xFE5
  9487                           fsr1h	equ	0xFE2
  9488                           fsr1l	equ	0xFE1
  9489                           bsr	equ	0xFE0
  9490                           postinc2	equ	0xFDE
  9491                           postdec2	equ	0xFDD
  9492                           fsr2h	equ	0xFDA
  9493                           fsr2l	equ	0xFD9
  9494                           status	equ	0xFD8
  9495                           
  9496 ;; *************** function _TMR_Timer2Start *****************
  9497 ;; Defined at:
  9498 ;;		line 387 in file "TIMERS.c"
  9499 ;; Parameters:    Size  Location     Type
  9500 ;;  time            2    2[COMRAM] unsigned int 
  9501 ;; Auto vars:     Size  Location     Type
  9502 ;;		None
  9503 ;; Return value:  Size  Location     Type
  9504 ;;		None               void
  9505 ;; Registers used:
  9506 ;;		wreg, status,2, cstack
  9507 ;; Tracked objects:
  9508 ;;		On entry : 0/0
  9509 ;;		On exit  : 0/0
  9510 ;;		Unchanged: 0/0
  9511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9512 ;;      Params:         2       0       0       0       0
  9513 ;;      Locals:         0       0       0       0       0
  9514 ;;      Temps:          0       0       0       0       0
  9515 ;;      Totals:         2       0       0       0       0
  9516 ;;Total ram usage:        2 bytes
  9517 ;; Hardware stack levels used:    1
  9518 ;; Hardware stack levels required when called:    8
  9519 ;; This function calls:
  9520 ;;		_TMR_ResetTimer2
  9521 ;;		i1_TMR_Timer2
  9522 ;; This function is called by:
  9523 ;;		_low_isr
  9524 ;; This function uses a non-reentrant model
  9525 ;;
  9526                           
  9527                           	psect	text62
  9528  001C82                     __ptext62:
  9529                           	opt stack 0
  9530  001C82                     _TMR_Timer2Start:
  9531                           	opt stack 15
  9532                           
  9533                           ;TIMERS.c: 389: TMR_Timer2(0);
  9534                           
  9535                           ; BSR set to: 0
  9536                           ;incstack = 0
  9537  001C82  0E00               	movlw	0
  9538  001C84  EC6C  F00F         	call	i1_TMR_Timer2
  9539                           
  9540                           ;TIMERS.c: 390: Timer2Post = time;
  9541  001C88  C003  F059         	movff	TMR_Timer2Start@time,_Timer2Post
  9542  001C8C  C004  F05A         	movff	TMR_Timer2Start@time+1,_Timer2Post+1
  9543                           
  9544                           ;TIMERS.c: 391: TMR_ResetTimer2();
  9545  001C90  EC7F  F00D         	call	_TMR_ResetTimer2	;wreg free
  9546                           
  9547                           ;TIMERS.c: 392: TMR_Timer2(1);
  9548  001C94  0E01               	movlw	1
  9549  001C96  EC6C  F00F         	call	i1_TMR_Timer2
  9550  001C9A  0012               	return		;funcret
  9551  001C9C                     __end_of_TMR_Timer2Start:
  9552                           	opt stack 0
  9553                           pclatu	equ	0xFFB
  9554                           pclath	equ	0xFFA
  9555                           tblptru	equ	0xFF8
  9556                           tblptrh	equ	0xFF7
  9557                           tblptrl	equ	0xFF6
  9558                           tablat	equ	0xFF5
  9559                           prodh	equ	0xFF4
  9560                           prodl	equ	0xFF3
  9561                           intcon	equ	0xFF2
  9562                           intcon2	equ	0xFF1
  9563                           intcon3	equ	0xFF0
  9564                           postinc0	equ	0xFEE
  9565                           fsr0h	equ	0xFEA
  9566                           fsr0l	equ	0xFE9
  9567                           wreg	equ	0xFE8
  9568                           postdec1	equ	0xFE5
  9569                           fsr1h	equ	0xFE2
  9570                           fsr1l	equ	0xFE1
  9571                           bsr	equ	0xFE0
  9572                           postinc2	equ	0xFDE
  9573                           postdec2	equ	0xFDD
  9574                           fsr2h	equ	0xFDA
  9575                           fsr2l	equ	0xFD9
  9576                           status	equ	0xFD8
  9577                           
  9578 ;; *************** function _TMR_ResetTimer2 *****************
  9579 ;; Defined at:
  9580 ;;		line 180 in file "TIMERS.c"
  9581 ;; Parameters:    Size  Location     Type
  9582 ;;		None
  9583 ;; Auto vars:     Size  Location     Type
  9584 ;;  TimerOn         1    1[COMRAM] unsigned char 
  9585 ;; Return value:  Size  Location     Type
  9586 ;;		None               void
  9587 ;; Registers used:
  9588 ;;		wreg, status,2, cstack
  9589 ;; Tracked objects:
  9590 ;;		On entry : 0/0
  9591 ;;		On exit  : 0/0
  9592 ;;		Unchanged: 0/0
  9593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9594 ;;      Params:         0       0       0       0       0
  9595 ;;      Locals:         1       0       0       0       0
  9596 ;;      Temps:          0       0       0       0       0
  9597 ;;      Totals:         1       0       0       0       0
  9598 ;;Total ram usage:        1 bytes
  9599 ;; Hardware stack levels used:    1
  9600 ;; Hardware stack levels required when called:    7
  9601 ;; This function calls:
  9602 ;;		i1_TMR_Timer2
  9603 ;; This function is called by:
  9604 ;;		_TMR_Timer2Start
  9605 ;; This function uses a non-reentrant model
  9606 ;;
  9607                           
  9608                           	psect	text63
  9609  001AFE                     __ptext63:
  9610                           	opt stack 0
  9611  001AFE                     _TMR_ResetTimer2:
  9612                           	opt stack 15
  9613                           
  9614                           ;TIMERS.c: 182: unsigned char TimerOn = T2CONbits.TMR2ON;
  9615                           
  9616                           ;incstack = 0
  9617  001AFE  0E00               	movlw	0
  9618  001B00  B4CA               	btfsc	4042,2,c	;volatile
  9619  001B02  0E01               	movlw	1
  9620  001B04  6E02               	movwf	TMR_ResetTimer2@TimerOn,c
  9621                           
  9622                           ;TIMERS.c: 184: TMR_Timer2(0);
  9623  001B06  0E00               	movlw	0
  9624  001B08  EC6C  F00F         	call	i1_TMR_Timer2
  9625                           
  9626                           ;TIMERS.c: 185: Timer2PostCount = 0;
  9627  001B0C  0E00               	movlw	0
  9628  001B0E  6E5C               	movwf	_Timer2PostCount+1,c
  9629  001B10  0E00               	movlw	0
  9630  001B12  6E5B               	movwf	_Timer2PostCount,c
  9631                           
  9632                           ;TIMERS.c: 186: TMR2 = 0;
  9633  001B14  0E00               	movlw	0
  9634  001B16  6ECC               	movwf	4044,c	;volatile
  9635                           
  9636                           ;TIMERS.c: 187: if(TimerOn)
  9637  001B18  5002               	movf	TMR_ResetTimer2@TimerOn,w,c
  9638  001B1A  B4D8               	btfsc	status,2,c
  9639  001B1C  0012               	return	
  9640                           
  9641                           ;TIMERS.c: 188: {
  9642                           ;TIMERS.c: 189: TMR_Timer2(1);
  9643  001B1E  0E01               	movlw	1
  9644  001B20  EC6C  F00F         	call	i1_TMR_Timer2
  9645  001B24  0012               	return	
  9646  001B26                     __end_of_TMR_ResetTimer2:
  9647                           	opt stack 0
  9648                           pclatu	equ	0xFFB
  9649                           pclath	equ	0xFFA
  9650                           tblptru	equ	0xFF8
  9651                           tblptrh	equ	0xFF7
  9652                           tblptrl	equ	0xFF6
  9653                           tablat	equ	0xFF5
  9654                           prodh	equ	0xFF4
  9655                           prodl	equ	0xFF3
  9656                           intcon	equ	0xFF2
  9657                           intcon2	equ	0xFF1
  9658                           intcon3	equ	0xFF0
  9659                           postinc0	equ	0xFEE
  9660                           fsr0h	equ	0xFEA
  9661                           fsr0l	equ	0xFE9
  9662                           wreg	equ	0xFE8
  9663                           postdec1	equ	0xFE5
  9664                           fsr1h	equ	0xFE2
  9665                           fsr1l	equ	0xFE1
  9666                           bsr	equ	0xFE0
  9667                           postinc2	equ	0xFDE
  9668                           postdec2	equ	0xFDD
  9669                           fsr2h	equ	0xFDA
  9670                           fsr2l	equ	0xFD9
  9671                           status	equ	0xFD8
  9672                           
  9673 ;; *************** function i1_TMR_Timer2 *****************
  9674 ;; Defined at:
  9675 ;;		line 125 in file "TIMERS.c"
  9676 ;; Parameters:    Size  Location     Type
  9677 ;;  state           1    wreg     unsigned char 
  9678 ;; Auto vars:     Size  Location     Type
  9679 ;;  state           1    0[COMRAM] unsigned char 
  9680 ;; Return value:  Size  Location     Type
  9681 ;;		None               void
  9682 ;; Registers used:
  9683 ;;		wreg, status,2
  9684 ;; Tracked objects:
  9685 ;;		On entry : 0/0
  9686 ;;		On exit  : 0/0
  9687 ;;		Unchanged: 0/0
  9688 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9689 ;;      Params:         0       0       0       0       0
  9690 ;;      Locals:         1       0       0       0       0
  9691 ;;      Temps:          0       0       0       0       0
  9692 ;;      Totals:         1       0       0       0       0
  9693 ;;Total ram usage:        1 bytes
  9694 ;; Hardware stack levels used:    1
  9695 ;; Hardware stack levels required when called:    6
  9696 ;; This function calls:
  9697 ;;		Nothing
  9698 ;; This function is called by:
  9699 ;;		_low_isr
  9700 ;;		_TMR_ResetTimer2
  9701 ;;		_TMR_Timer2Start
  9702 ;; This function uses a non-reentrant model
  9703 ;;
  9704                           
  9705                           	psect	text64
  9706  001ED8                     __ptext64:
  9707                           	opt stack 0
  9708  001ED8                     i1_TMR_Timer2:
  9709                           	opt stack 17
  9710                           
  9711                           ;incstack = 0
  9712                           ;i1TMR_Timer2@state stored from wreg
  9713  001ED8  6E01               	movwf	i1TMR_Timer2@state,c
  9714                           
  9715                           ;TIMERS.c: 127: if(state)
  9716  001EDA  5001               	movf	i1TMR_Timer2@state,w,c
  9717  001EDC  B4D8               	btfsc	status,2,c
  9718  001EDE  D002               	goto	i1l1066
  9719                           
  9720                           ;TIMERS.c: 128: {
  9721                           ;TIMERS.c: 130: T2CONbits.TMR2ON = 1;
  9722  001EE0  84CA               	bsf	4042,2,c	;volatile
  9723                           
  9724                           ;TIMERS.c: 131: }
  9725  001EE2  0012               	return	
  9726  001EE4                     i1l1066:
  9727                           
  9728                           ;TIMERS.c: 132: else
  9729                           ;TIMERS.c: 133: {
  9730                           ;TIMERS.c: 135: T2CONbits.TMR2ON = 0;
  9731  001EE4  94CA               	bcf	4042,2,c	;volatile
  9732  001EE6  0012               	return	
  9733  001EE8                     __end_ofi1_TMR_Timer2:
  9734                           	opt stack 0
  9735                           pclatu	equ	0xFFB
  9736                           pclath	equ	0xFFA
  9737                           tblptru	equ	0xFF8
  9738                           tblptrh	equ	0xFF7
  9739                           tblptrl	equ	0xFF6
  9740                           tablat	equ	0xFF5
  9741                           prodh	equ	0xFF4
  9742                           prodl	equ	0xFF3
  9743                           intcon	equ	0xFF2
  9744                           intcon2	equ	0xFF1
  9745                           intcon3	equ	0xFF0
  9746                           postinc0	equ	0xFEE
  9747                           fsr0h	equ	0xFEA
  9748                           fsr0l	equ	0xFE9
  9749                           wreg	equ	0xFE8
  9750                           postdec1	equ	0xFE5
  9751                           fsr1h	equ	0xFE2
  9752                           fsr1l	equ	0xFE1
  9753                           bsr	equ	0xFE0
  9754                           postinc2	equ	0xFDE
  9755                           postdec2	equ	0xFDD
  9756                           fsr2h	equ	0xFDA
  9757                           fsr2l	equ	0xFD9
  9758                           status	equ	0xFD8
  9759                           
  9760 ;; *************** function _TMR_Timer1Status *****************
  9761 ;; Defined at:
  9762 ;;		line 72 in file "TIMERS.c"
  9763 ;; Parameters:    Size  Location     Type
  9764 ;;		None
  9765 ;; Auto vars:     Size  Location     Type
  9766 ;;		None
  9767 ;; Return value:  Size  Location     Type
  9768 ;;                  1    wreg      unsigned char 
  9769 ;; Registers used:
  9770 ;;		wreg
  9771 ;; Tracked objects:
  9772 ;;		On entry : 0/0
  9773 ;;		On exit  : 0/0
  9774 ;;		Unchanged: 0/0
  9775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9776 ;;      Params:         0       0       0       0       0
  9777 ;;      Locals:         0       0       0       0       0
  9778 ;;      Temps:          0       0       0       0       0
  9779 ;;      Totals:         0       0       0       0       0
  9780 ;;Total ram usage:        0 bytes
  9781 ;; Hardware stack levels used:    1
  9782 ;; Hardware stack levels required when called:    6
  9783 ;; This function calls:
  9784 ;;		Nothing
  9785 ;; This function is called by:
  9786 ;;		_low_isr
  9787 ;; This function uses a non-reentrant model
  9788 ;;
  9789                           
  9790                           	psect	text65
  9791  001F6C                     __ptext65:
  9792                           	opt stack 0
  9793  001F6C                     _TMR_Timer1Status:
  9794                           	opt stack 17
  9795                           
  9796                           ;TIMERS.c: 74: if(T1CONbits.TMR1ON)
  9797                           
  9798                           ;incstack = 0
  9799  001F6C  A0CD               	btfss	4045,0,c	;volatile
  9800  001F6E  D002               	goto	i1l7159
  9801                           
  9802                           ;TIMERS.c: 75: {
  9803                           ;TIMERS.c: 77: return 1;
  9804  001F70  0E01               	movlw	1
  9805  001F72  0012               	return	
  9806  001F74                     i1l7159:
  9807                           
  9808                           ;TIMERS.c: 78: }
  9809                           ;TIMERS.c: 79: return 0;
  9810  001F74  0E00               	movlw	0
  9811  001F76  0012               	return	
  9812  001F78                     __end_of_TMR_Timer1Status:
  9813                           	opt stack 0
  9814                           pclatu	equ	0xFFB
  9815                           pclath	equ	0xFFA
  9816                           tblptru	equ	0xFF8
  9817                           tblptrh	equ	0xFF7
  9818                           tblptrl	equ	0xFF6
  9819                           tablat	equ	0xFF5
  9820                           prodh	equ	0xFF4
  9821                           prodl	equ	0xFF3
  9822                           intcon	equ	0xFF2
  9823                           intcon2	equ	0xFF1
  9824                           intcon3	equ	0xFF0
  9825                           postinc0	equ	0xFEE
  9826                           fsr0h	equ	0xFEA
  9827                           fsr0l	equ	0xFE9
  9828                           wreg	equ	0xFE8
  9829                           postdec1	equ	0xFE5
  9830                           fsr1h	equ	0xFE2
  9831                           fsr1l	equ	0xFE1
  9832                           bsr	equ	0xFE0
  9833                           postinc2	equ	0xFDE
  9834                           postdec2	equ	0xFDD
  9835                           fsr2h	equ	0xFDA
  9836                           fsr2l	equ	0xFD9
  9837                           status	equ	0xFD8
  9838                           
  9839 ;; *************** function _TMR_Timer1Start *****************
  9840 ;; Defined at:
  9841 ;;		line 375 in file "TIMERS.c"
  9842 ;; Parameters:    Size  Location     Type
  9843 ;;		None
  9844 ;; Auto vars:     Size  Location     Type
  9845 ;;		None
  9846 ;; Return value:  Size  Location     Type
  9847 ;;		None               void
  9848 ;; Registers used:
  9849 ;;		wreg, status,2, cstack
  9850 ;; Tracked objects:
  9851 ;;		On entry : 0/0
  9852 ;;		On exit  : 0/0
  9853 ;;		Unchanged: 0/0
  9854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9855 ;;      Params:         0       0       0       0       0
  9856 ;;      Locals:         0       0       0       0       0
  9857 ;;      Temps:          0       0       0       0       0
  9858 ;;      Totals:         0       0       0       0       0
  9859 ;;Total ram usage:        0 bytes
  9860 ;; Hardware stack levels used:    1
  9861 ;; Hardware stack levels required when called:    8
  9862 ;; This function calls:
  9863 ;;		i1_TMR_ResetTimer1
  9864 ;;		i1_TMR_Timer1
  9865 ;; This function is called by:
  9866 ;;		_low_isr
  9867 ;; This function uses a non-reentrant model
  9868 ;;
  9869                           
  9870                           	psect	text66
  9871  001EA2                     __ptext66:
  9872                           	opt stack 0
  9873  001EA2                     _TMR_Timer1Start:
  9874                           	opt stack 15
  9875                           
  9876                           ;TIMERS.c: 377: TMR_Timer1(0);
  9877                           
  9878                           ;incstack = 0
  9879  001EA2  0E00               	movlw	0
  9880  001EA4  EC74  F00F         	call	i1_TMR_Timer1
  9881                           
  9882                           ;TIMERS.c: 378: TMR_ResetTimer1();
  9883  001EA8  ECA5  F00D         	call	i1_TMR_ResetTimer1	;wreg free
  9884                           
  9885                           ;TIMERS.c: 379: TMR_Timer1(1);
  9886  001EAC  0E01               	movlw	1
  9887  001EAE  EC74  F00F         	call	i1_TMR_Timer1
  9888  001EB2  0012               	return		;funcret
  9889  001EB4                     __end_of_TMR_Timer1Start:
  9890                           	opt stack 0
  9891                           pclatu	equ	0xFFB
  9892                           pclath	equ	0xFFA
  9893                           tblptru	equ	0xFF8
  9894                           tblptrh	equ	0xFF7
  9895                           tblptrl	equ	0xFF6
  9896                           tablat	equ	0xFF5
  9897                           prodh	equ	0xFF4
  9898                           prodl	equ	0xFF3
  9899                           intcon	equ	0xFF2
  9900                           intcon2	equ	0xFF1
  9901                           intcon3	equ	0xFF0
  9902                           postinc0	equ	0xFEE
  9903                           fsr0h	equ	0xFEA
  9904                           fsr0l	equ	0xFE9
  9905                           wreg	equ	0xFE8
  9906                           postdec1	equ	0xFE5
  9907                           fsr1h	equ	0xFE2
  9908                           fsr1l	equ	0xFE1
  9909                           bsr	equ	0xFE0
  9910                           postinc2	equ	0xFDE
  9911                           postdec2	equ	0xFDD
  9912                           fsr2h	equ	0xFDA
  9913                           fsr2l	equ	0xFD9
  9914                           status	equ	0xFD8
  9915                           
  9916 ;; *************** function i1_TMR_ResetTimer1 *****************
  9917 ;; Defined at:
  9918 ;;		line 162 in file "TIMERS.c"
  9919 ;; Parameters:    Size  Location     Type
  9920 ;;		None
  9921 ;; Auto vars:     Size  Location     Type
  9922 ;;  TMR_ResetTim    1    1[COMRAM] unsigned char 
  9923 ;; Return value:  Size  Location     Type
  9924 ;;		None               void
  9925 ;; Registers used:
  9926 ;;		wreg, status,2, cstack
  9927 ;; Tracked objects:
  9928 ;;		On entry : 0/0
  9929 ;;		On exit  : 0/0
  9930 ;;		Unchanged: 0/0
  9931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
  9932 ;;      Params:         0       0       0       0       0
  9933 ;;      Locals:         1       0       0       0       0
  9934 ;;      Temps:          0       0       0       0       0
  9935 ;;      Totals:         1       0       0       0       0
  9936 ;;Total ram usage:        1 bytes
  9937 ;; Hardware stack levels used:    1
  9938 ;; Hardware stack levels required when called:    7
  9939 ;; This function calls:
  9940 ;;		i1_TMR_Timer1
  9941 ;; This function is called by:
  9942 ;;		_low_isr
  9943 ;;		_TMR_Timer1Start
  9944 ;; This function uses a non-reentrant model
  9945 ;;
  9946                           
  9947                           	psect	text67
  9948  001B4A                     __ptext67:
  9949                           	opt stack 0
  9950  001B4A                     i1_TMR_ResetTimer1:
  9951                           	opt stack 16
  9952                           
  9953                           ;TIMERS.c: 164: unsigned char TimerOn = T1CONbits.TMR1ON;
  9954                           
  9955                           ;incstack = 0
  9956  001B4A  0E00               	movlw	0
  9957  001B4C  B0CD               	btfsc	4045,0,c	;volatile
  9958  001B4E  0E01               	movlw	1
  9959  001B50  6E02               	movwf	i1TMR_ResetTimer1@TimerOn,c
  9960                           
  9961                           ;TIMERS.c: 166: TMR_Timer1(0);
  9962  001B52  0E00               	movlw	0
  9963  001B54  EC74  F00F         	call	i1_TMR_Timer1
  9964                           
  9965                           ;TIMERS.c: 167: TMR1H = 0;
  9966  001B58  0E00               	movlw	0
  9967  001B5A  6ECF               	movwf	4047,c	;volatile
  9968                           
  9969                           ;TIMERS.c: 168: TMR1L = 2;
  9970  001B5C  0E02               	movlw	2
  9971  001B5E  6ECE               	movwf	4046,c	;volatile
  9972                           
  9973                           ;TIMERS.c: 169: if(TimerOn)
  9974  001B60  5002               	movf	i1TMR_ResetTimer1@TimerOn,w,c
  9975  001B62  B4D8               	btfsc	status,2,c
  9976  001B64  0012               	return	
  9977                           
  9978                           ;TIMERS.c: 170: {
  9979                           ;TIMERS.c: 171: TMR_Timer1(1);
  9980  001B66  0E01               	movlw	1
  9981  001B68  EC74  F00F         	call	i1_TMR_Timer1
  9982  001B6C  0012               	return	
  9983  001B6E                     __end_ofi1_TMR_ResetTimer1:
  9984                           	opt stack 0
  9985                           pclatu	equ	0xFFB
  9986                           pclath	equ	0xFFA
  9987                           tblptru	equ	0xFF8
  9988                           tblptrh	equ	0xFF7
  9989                           tblptrl	equ	0xFF6
  9990                           tablat	equ	0xFF5
  9991                           prodh	equ	0xFF4
  9992                           prodl	equ	0xFF3
  9993                           intcon	equ	0xFF2
  9994                           intcon2	equ	0xFF1
  9995                           intcon3	equ	0xFF0
  9996                           postinc0	equ	0xFEE
  9997                           fsr0h	equ	0xFEA
  9998                           fsr0l	equ	0xFE9
  9999                           wreg	equ	0xFE8
 10000                           postdec1	equ	0xFE5
 10001                           fsr1h	equ	0xFE2
 10002                           fsr1l	equ	0xFE1
 10003                           bsr	equ	0xFE0
 10004                           postinc2	equ	0xFDE
 10005                           postdec2	equ	0xFDD
 10006                           fsr2h	equ	0xFDA
 10007                           fsr2l	equ	0xFD9
 10008                           status	equ	0xFD8
 10009                           
 10010 ;; *************** function i1_TMR_Timer1 *****************
 10011 ;; Defined at:
 10012 ;;		line 106 in file "TIMERS.c"
 10013 ;; Parameters:    Size  Location     Type
 10014 ;;  state           1    wreg     unsigned char 
 10015 ;; Auto vars:     Size  Location     Type
 10016 ;;  state           1    0[COMRAM] unsigned char 
 10017 ;; Return value:  Size  Location     Type
 10018 ;;		None               void
 10019 ;; Registers used:
 10020 ;;		wreg, status,2
 10021 ;; Tracked objects:
 10022 ;;		On entry : 0/0
 10023 ;;		On exit  : 0/0
 10024 ;;		Unchanged: 0/0
 10025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10026 ;;      Params:         0       0       0       0       0
 10027 ;;      Locals:         1       0       0       0       0
 10028 ;;      Temps:          0       0       0       0       0
 10029 ;;      Totals:         1       0       0       0       0
 10030 ;;Total ram usage:        1 bytes
 10031 ;; Hardware stack levels used:    1
 10032 ;; Hardware stack levels required when called:    6
 10033 ;; This function calls:
 10034 ;;		Nothing
 10035 ;; This function is called by:
 10036 ;;		_low_isr
 10037 ;;		_TMR_Timer1Start
 10038 ;;		i1_TMR_ResetTimer1
 10039 ;; This function uses a non-reentrant model
 10040 ;;
 10041                           
 10042                           	psect	text68
 10043  001EE8                     __ptext68:
 10044                           	opt stack 0
 10045  001EE8                     i1_TMR_Timer1:
 10046                           	opt stack 17
 10047                           
 10048                           ;incstack = 0
 10049                           ;i1TMR_Timer1@state stored from wreg
 10050  001EE8  6E01               	movwf	i1TMR_Timer1@state,c
 10051                           
 10052                           ;TIMERS.c: 108: if(state)
 10053  001EEA  5001               	movf	i1TMR_Timer1@state,w,c
 10054  001EEC  B4D8               	btfsc	status,2,c
 10055  001EEE  D002               	goto	i1l1061
 10056                           
 10057                           ;TIMERS.c: 109: {
 10058                           ;TIMERS.c: 111: T1CONbits.TMR1ON = 1;
 10059  001EF0  80CD               	bsf	4045,0,c	;volatile
 10060                           
 10061                           ;TIMERS.c: 112: }
 10062  001EF2  0012               	return	
 10063  001EF4                     i1l1061:
 10064                           
 10065                           ;TIMERS.c: 113: else
 10066                           ;TIMERS.c: 114: {
 10067                           ;TIMERS.c: 116: T1CONbits.TMR1ON = 0;
 10068  001EF4  90CD               	bcf	4045,0,c	;volatile
 10069  001EF6  0012               	return	
 10070  001EF8                     __end_ofi1_TMR_Timer1:
 10071                           	opt stack 0
 10072                           pclatu	equ	0xFFB
 10073                           pclath	equ	0xFFA
 10074                           tblptru	equ	0xFF8
 10075                           tblptrh	equ	0xFF7
 10076                           tblptrl	equ	0xFF6
 10077                           tablat	equ	0xFF5
 10078                           prodh	equ	0xFF4
 10079                           prodl	equ	0xFF3
 10080                           intcon	equ	0xFF2
 10081                           intcon2	equ	0xFF1
 10082                           intcon3	equ	0xFF0
 10083                           postinc0	equ	0xFEE
 10084                           fsr0h	equ	0xFEA
 10085                           fsr0l	equ	0xFE9
 10086                           wreg	equ	0xFE8
 10087                           postdec1	equ	0xFE5
 10088                           fsr1h	equ	0xFE2
 10089                           fsr1l	equ	0xFE1
 10090                           bsr	equ	0xFE0
 10091                           postinc2	equ	0xFDE
 10092                           postdec2	equ	0xFDD
 10093                           fsr2h	equ	0xFDA
 10094                           fsr2l	equ	0xFD9
 10095                           status	equ	0xFD8
 10096                           
 10097 ;; *************** function _RF_Disable *****************
 10098 ;; Defined at:
 10099 ;;		line 195 in file "RF.c"
 10100 ;; Parameters:    Size  Location     Type
 10101 ;;		None
 10102 ;; Auto vars:     Size  Location     Type
 10103 ;;		None
 10104 ;; Return value:  Size  Location     Type
 10105 ;;		None               void
 10106 ;; Registers used:
 10107 ;;		wreg, status,2, cstack
 10108 ;; Tracked objects:
 10109 ;;		On entry : 0/0
 10110 ;;		On exit  : 0/0
 10111 ;;		Unchanged: 0/0
 10112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10113 ;;      Params:         0       0       0       0       0
 10114 ;;      Locals:         0       0       0       0       0
 10115 ;;      Temps:          0       0       0       0       0
 10116 ;;      Totals:         0       0       0       0       0
 10117 ;;Total ram usage:        0 bytes
 10118 ;; Hardware stack levels used:    1
 10119 ;; Hardware stack levels required when called:    7
 10120 ;; This function calls:
 10121 ;;		i1_RF_DataInt
 10122 ;;		i1_TMR_Timer0
 10123 ;;		i1_TMR_Timer0Int
 10124 ;; This function is called by:
 10125 ;;		_low_isr
 10126 ;; This function uses a non-reentrant model
 10127 ;;
 10128                           
 10129                           	psect	text69
 10130  001E2E                     __ptext69:
 10131                           	opt stack 0
 10132  001E2E                     _RF_Disable:
 10133                           	opt stack 16
 10134                           
 10135                           ;RF.c: 197: RF_DataInt(0);
 10136                           
 10137                           ;incstack = 0
 10138  001E2E  0E00               	movlw	0
 10139  001E30  EC2B  F00F         	call	i1_RF_DataInt
 10140                           
 10141                           ;RF.c: 198: TMR_Timer0Int(0);
 10142  001E34  0E00               	movlw	0
 10143  001E36  EC84  F00F         	call	i1_TMR_Timer0Int
 10144                           
 10145                           ;RF.c: 199: TMR_Timer0(0);
 10146  001E3A  0E00               	movlw	0
 10147  001E3C  EC7C  F00F         	call	i1_TMR_Timer0
 10148  001E40  0012               	return		;funcret
 10149  001E42                     __end_of_RF_Disable:
 10150                           	opt stack 0
 10151                           pclatu	equ	0xFFB
 10152                           pclath	equ	0xFFA
 10153                           tblptru	equ	0xFF8
 10154                           tblptrh	equ	0xFF7
 10155                           tblptrl	equ	0xFF6
 10156                           tablat	equ	0xFF5
 10157                           prodh	equ	0xFF4
 10158                           prodl	equ	0xFF3
 10159                           intcon	equ	0xFF2
 10160                           intcon2	equ	0xFF1
 10161                           intcon3	equ	0xFF0
 10162                           postinc0	equ	0xFEE
 10163                           fsr0h	equ	0xFEA
 10164                           fsr0l	equ	0xFE9
 10165                           wreg	equ	0xFE8
 10166                           postdec1	equ	0xFE5
 10167                           fsr1h	equ	0xFE2
 10168                           fsr1l	equ	0xFE1
 10169                           bsr	equ	0xFE0
 10170                           postinc2	equ	0xFDE
 10171                           postdec2	equ	0xFDD
 10172                           fsr2h	equ	0xFDA
 10173                           fsr2l	equ	0xFD9
 10174                           status	equ	0xFD8
 10175                           
 10176 ;; *************** function i1_TMR_Timer0 *****************
 10177 ;; Defined at:
 10178 ;;		line 87 in file "TIMERS.c"
 10179 ;; Parameters:    Size  Location     Type
 10180 ;;  state           1    wreg     unsigned char 
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;  state           1    0[COMRAM] unsigned char 
 10183 ;; Return value:  Size  Location     Type
 10184 ;;		None               void
 10185 ;; Registers used:
 10186 ;;		wreg, status,2
 10187 ;; Tracked objects:
 10188 ;;		On entry : 0/0
 10189 ;;		On exit  : 0/0
 10190 ;;		Unchanged: 0/0
 10191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10192 ;;      Params:         0       0       0       0       0
 10193 ;;      Locals:         1       0       0       0       0
 10194 ;;      Temps:          0       0       0       0       0
 10195 ;;      Totals:         1       0       0       0       0
 10196 ;;Total ram usage:        1 bytes
 10197 ;; Hardware stack levels used:    1
 10198 ;; Hardware stack levels required when called:    6
 10199 ;; This function calls:
 10200 ;;		Nothing
 10201 ;; This function is called by:
 10202 ;;		_RF_Disable
 10203 ;; This function uses a non-reentrant model
 10204 ;;
 10205                           
 10206                           	psect	text70
 10207  001EF8                     __ptext70:
 10208                           	opt stack 0
 10209  001EF8                     i1_TMR_Timer0:
 10210                           	opt stack 16
 10211                           
 10212                           ;incstack = 0
 10213                           ;i1TMR_Timer0@state stored from wreg
 10214  001EF8  6E01               	movwf	i1TMR_Timer0@state,c
 10215                           
 10216                           ;TIMERS.c: 89: if(state)
 10217  001EFA  5001               	movf	i1TMR_Timer0@state,w,c
 10218  001EFC  B4D8               	btfsc	status,2,c
 10219  001EFE  D002               	goto	i1l1056
 10220                           
 10221                           ;TIMERS.c: 90: {
 10222                           ;TIMERS.c: 92: T0CONbits.TMR0ON = 1;
 10223  001F00  8ED5               	bsf	4053,7,c	;volatile
 10224                           
 10225                           ;TIMERS.c: 93: }
 10226  001F02  0012               	return	
 10227  001F04                     i1l1056:
 10228                           
 10229                           ;TIMERS.c: 94: else
 10230                           ;TIMERS.c: 95: {
 10231                           ;TIMERS.c: 97: T0CONbits.TMR0ON = 0;
 10232  001F04  9ED5               	bcf	4053,7,c	;volatile
 10233  001F06  0012               	return	
 10234  001F08                     __end_ofi1_TMR_Timer0:
 10235                           	opt stack 0
 10236                           pclatu	equ	0xFFB
 10237                           pclath	equ	0xFFA
 10238                           tblptru	equ	0xFF8
 10239                           tblptrh	equ	0xFF7
 10240                           tblptrl	equ	0xFF6
 10241                           tablat	equ	0xFF5
 10242                           prodh	equ	0xFF4
 10243                           prodl	equ	0xFF3
 10244                           intcon	equ	0xFF2
 10245                           intcon2	equ	0xFF1
 10246                           intcon3	equ	0xFF0
 10247                           postinc0	equ	0xFEE
 10248                           fsr0h	equ	0xFEA
 10249                           fsr0l	equ	0xFE9
 10250                           wreg	equ	0xFE8
 10251                           postdec1	equ	0xFE5
 10252                           fsr1h	equ	0xFE2
 10253                           fsr1l	equ	0xFE1
 10254                           bsr	equ	0xFE0
 10255                           postinc2	equ	0xFDE
 10256                           postdec2	equ	0xFDD
 10257                           fsr2h	equ	0xFDA
 10258                           fsr2l	equ	0xFD9
 10259                           status	equ	0xFD8
 10260                           
 10261 ;; *************** function _IR_CleanBuffer *****************
 10262 ;; Defined at:
 10263 ;;		line 119 in file "IR.c"
 10264 ;; Parameters:    Size  Location     Type
 10265 ;;		None
 10266 ;; Auto vars:     Size  Location     Type
 10267 ;;		None
 10268 ;; Return value:  Size  Location     Type
 10269 ;;		None               void
 10270 ;; Registers used:
 10271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10272 ;; Tracked objects:
 10273 ;;		On entry : 0/0
 10274 ;;		On exit  : 0/0
 10275 ;;		Unchanged: 0/0
 10276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10277 ;;      Params:         0       0       0       0       0
 10278 ;;      Locals:         0       0       0       0       0
 10279 ;;      Temps:          0       0       0       0       0
 10280 ;;      Totals:         0       0       0       0       0
 10281 ;;Total ram usage:        0 bytes
 10282 ;; Hardware stack levels used:    1
 10283 ;; Hardware stack levels required when called:    7
 10284 ;; This function calls:
 10285 ;;		i1_MSC_CleanBufferInt
 10286 ;; This function is called by:
 10287 ;;		_low_isr
 10288 ;; This function uses a non-reentrant model
 10289 ;;
 10290                           
 10291                           	psect	text71
 10292  001DEC                     __ptext71:
 10293                           	opt stack 0
 10294  001DEC                     _IR_CleanBuffer:
 10295                           	opt stack 16
 10296                           
 10297                           ;IR.c: 121: MSC_CleanBufferInt(&IR_DataTiming,128);
 10298                           
 10299                           ;incstack = 0
 10300  001DEC  0E00               	movlw	low _IR_DataTiming
 10301  001DEE  6E01               	movwf	i1MSC_CleanBufferInt@data,c
 10302  001DF0  0E02               	movlw	high _IR_DataTiming
 10303  001DF2  6E02               	movwf	i1MSC_CleanBufferInt@data+1,c
 10304  001DF4  0E00               	movlw	0
 10305  001DF6  6E04               	movwf	i1MSC_CleanBufferInt@count+1,c
 10306  001DF8  0E80               	movlw	128
 10307  001DFA  6E03               	movwf	i1MSC_CleanBufferInt@count,c
 10308  001DFC  EC73  F00B         	call	i1_MSC_CleanBufferInt	;wreg free
 10309  001E00  0012               	return		;funcret
 10310  001E02                     __end_of_IR_CleanBuffer:
 10311                           	opt stack 0
 10312                           pclatu	equ	0xFFB
 10313                           pclath	equ	0xFFA
 10314                           tblptru	equ	0xFF8
 10315                           tblptrh	equ	0xFF7
 10316                           tblptrl	equ	0xFF6
 10317                           tablat	equ	0xFF5
 10318                           prodh	equ	0xFF4
 10319                           prodl	equ	0xFF3
 10320                           intcon	equ	0xFF2
 10321                           intcon2	equ	0xFF1
 10322                           intcon3	equ	0xFF0
 10323                           postinc0	equ	0xFEE
 10324                           fsr0h	equ	0xFEA
 10325                           fsr0l	equ	0xFE9
 10326                           wreg	equ	0xFE8
 10327                           postdec1	equ	0xFE5
 10328                           fsr1h	equ	0xFE2
 10329                           fsr1l	equ	0xFE1
 10330                           bsr	equ	0xFE0
 10331                           postinc2	equ	0xFDE
 10332                           postdec2	equ	0xFDD
 10333                           fsr2h	equ	0xFDA
 10334                           fsr2l	equ	0xFD9
 10335                           status	equ	0xFD8
 10336                           
 10337 ;; *************** function _IR_CheckCode *****************
 10338 ;; Defined at:
 10339 ;;		line 168 in file "IR.c"
 10340 ;; Parameters:    Size  Location     Type
 10341 ;;		None
 10342 ;; Auto vars:     Size  Location     Type
 10343 ;;  High            3   52[COMRAM] unsigned char 
 10344 ;;  Low             3   49[COMRAM] unsigned char 
 10345 ;;  i               1   55[COMRAM] unsigned char 
 10346 ;; Return value:  Size  Location     Type
 10347 ;;                  1    wreg      unsigned char 
 10348 ;; Registers used:
 10349 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10350 ;; Tracked objects:
 10351 ;;		On entry : 0/0
 10352 ;;		On exit  : 0/0
 10353 ;;		Unchanged: 0/0
 10354 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10355 ;;      Params:         0       0       0       0       0
 10356 ;;      Locals:         7       0       0       0       0
 10357 ;;      Temps:          2       0       0       0       0
 10358 ;;      Totals:         9       0       0       0       0
 10359 ;;Total ram usage:        9 bytes
 10360 ;; Hardware stack levels used:    1
 10361 ;; Hardware stack levels required when called:   10
 10362 ;; This function calls:
 10363 ;;		_FSH_Write_IR_RF
 10364 ;;		i1_IR_LoadCode
 10365 ;;		i1___ftge
 10366 ;;		i1___ftmul
 10367 ;;		i1___lwtoft
 10368 ;; This function is called by:
 10369 ;;		_low_isr
 10370 ;; This function uses a non-reentrant model
 10371 ;;
 10372                           
 10373                           	psect	text72
 10374  00317C                     __ptext72:
 10375                           	opt stack 0
 10376  00317C                     _IR_CheckCode:
 10377                           	opt stack 13
 10378                           
 10379                           ;IR.c: 170: unsigned char i;
 10380                           ;IR.c: 171: double Low = 0.0;
 10381                           
 10382                           ;incstack = 0
 10383  00317C  0E00               	movlw	0
 10384  00317E  6E32               	movwf	IR_CheckCode@Low,c
 10385  003180  0E00               	movlw	0
 10386  003182  6E33               	movwf	IR_CheckCode@Low+1,c
 10387  003184  0E00               	movlw	0
 10388  003186  6E34               	movwf	IR_CheckCode@Low+2,c
 10389                           
 10390                           ;IR.c: 172: double High = 0.0;
 10391  003188  0E00               	movlw	0
 10392  00318A  6E35               	movwf	IR_CheckCode@High,c
 10393  00318C  0E00               	movlw	0
 10394  00318E  6E36               	movwf	IR_CheckCode@High+1,c
 10395  003190  0E00               	movlw	0
 10396  003192  6E37               	movwf	IR_CheckCode@High+2,c
 10397                           
 10398                           ;IR.c: 174: if(System_State == 8)
 10399  003194  0E08               	movlw	8
 10400  003196  0100               	movlb	0	; () banked
 10401  003198  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
 10402  00319A  A4D8               	btfss	status,2,c
 10403  00319C  D161               	goto	i1l7203
 10404                           
 10405                           ; BSR set to: 0
 10406                           ;IR.c: 175: {
 10407                           ;IR.c: 176: for(i=0; i<IR_CodeSize;i++)
 10408  00319E  0E00               	movlw	0
 10409  0031A0  6E38               	movwf	IR_CheckCode@i,c
 10410  0031A2  D158               	goto	i1l7195
 10411  0031A4                     i1l7173:
 10412                           
 10413                           ;IR.c: 177: {
 10414                           ;IR.c: 178: if(IR_SavedTiming[i] > 4000)
 10415  0031A4  5038               	movf	IR_CheckCode@i,w,c
 10416  0031A6  0D02               	mullw	2
 10417  0031A8  0E00               	movlw	0
 10418  0031AA  24F3               	addwf	prodl,w,c
 10419  0031AC  6EF6               	movwf	tblptrl,c
 10420  0031AE  0E24               	movlw	36
 10421  0031B0  20F4               	addwfc	prodh,w,c
 10422  0031B2  6EF7               	movwf	tblptrh,c
 10423  0031B4  6AF8               	clrf	tblptru,c
 10424  0031B6  0E00               	movlw	0
 10425  0031B8  22F8               	addwfc	tblptru,f,c
 10426  0031BA  0009               	tblrd		*+
 10427  0031BC  0EA1               	movlw	161
 10428  0031BE  5EF5               	subwf	tablat,f,c
 10429  0031C0  0009               	tblrd		*+
 10430  0031C2  0E0F               	movlw	15
 10431  0031C4  5AF5               	subwfb	tablat,f,c
 10432  0031C6  A0D8               	btfss	status,0,c
 10433  0031C8  D049               	goto	i1l7177
 10434                           
 10435                           ;IR.c: 179: {
 10436                           ;IR.c: 180: Low = (double)IR_SavedTiming[i] * (1.0 - 0.3);
 10437  0031CA  5038               	movf	IR_CheckCode@i,w,c
 10438  0031CC  0D02               	mullw	2
 10439  0031CE  0E00               	movlw	0
 10440  0031D0  24F3               	addwf	prodl,w,c
 10441  0031D2  6EF6               	movwf	tblptrl,c
 10442  0031D4  0E24               	movlw	36
 10443  0031D6  20F4               	addwfc	prodh,w,c
 10444  0031D8  6EF7               	movwf	tblptrh,c
 10445  0031DA  6AF8               	clrf	tblptru,c
 10446  0031DC  0E00               	movlw	0
 10447  0031DE  22F8               	addwfc	tblptru,f,c
 10448  0031E0  0009               	tblrd		*+
 10449  0031E2  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10450  0031E6  000A               	tblrd		*-
 10451  0031E8  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10452  0031EC  ECB7  F00D         	call	i1___lwtoft	;wreg free
 10453  0031F0  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10454  0031F4  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10455  0031F8  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10456  0031FC  0E33               	movlw	51
 10457  0031FE  6E1E               	movwf	i1___ftmul@f2,c
 10458  003200  0E33               	movlw	51
 10459  003202  6E1F               	movwf	i1___ftmul@f2+1,c
 10460  003204  0E3F               	movlw	63
 10461  003206  6E20               	movwf	i1___ftmul@f2+2,c
 10462  003208  EC71  F003         	call	i1___ftmul	;wreg free
 10463  00320C  C01B  F032         	movff	?i1___ftmul,IR_CheckCode@Low
 10464  003210  C01C  F033         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10465  003214  C01D  F034         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10466                           
 10467                           ;IR.c: 181: High = (double)IR_SavedTiming[i] * (1.0 + 0.3);
 10468  003218  5038               	movf	IR_CheckCode@i,w,c
 10469  00321A  0D02               	mullw	2
 10470  00321C  0E00               	movlw	0
 10471  00321E  24F3               	addwf	prodl,w,c
 10472  003220  6EF6               	movwf	tblptrl,c
 10473  003222  0E24               	movlw	36
 10474  003224  20F4               	addwfc	prodh,w,c
 10475  003226  6EF7               	movwf	tblptrh,c
 10476  003228  6AF8               	clrf	tblptru,c
 10477  00322A  0E00               	movlw	0
 10478  00322C  22F8               	addwfc	tblptru,f,c
 10479  00322E  0009               	tblrd		*+
 10480  003230  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10481  003234  000A               	tblrd		*-
 10482  003236  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10483  00323A  ECB7  F00D         	call	i1___lwtoft	;wreg free
 10484  00323E  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10485  003242  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10486  003246  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10487  00324A  0E66               	movlw	102
 10488  00324C  6E1E               	movwf	i1___ftmul@f2,c
 10489  00324E  0EA6               	movlw	166
 10490  003250  6E1F               	movwf	i1___ftmul@f2+1,c
 10491  003252  0E3F               	movlw	63
 10492  003254  6E20               	movwf	i1___ftmul@f2+2,c
 10493  003256  EC71  F003         	call	i1___ftmul	;wreg free
 10494  00325A  D0B7               	goto	L4
 10495  00325C                     i1l7177:
 10496                           
 10497                           ;IR.c: 183: else if(IR_SavedTiming[i] <= 4000 && IR_SavedTiming[i] > 1000)
 10498  00325C  5038               	movf	IR_CheckCode@i,w,c
 10499  00325E  0D02               	mullw	2
 10500  003260  0E00               	movlw	0
 10501  003262  24F3               	addwf	prodl,w,c
 10502  003264  6EF6               	movwf	tblptrl,c
 10503  003266  0E24               	movlw	36
 10504  003268  20F4               	addwfc	prodh,w,c
 10505  00326A  6EF7               	movwf	tblptrh,c
 10506  00326C  6AF8               	clrf	tblptru,c
 10507  00326E  0E00               	movlw	0
 10508  003270  22F8               	addwfc	tblptru,f,c
 10509  003272  0009               	tblrd		*+
 10510  003274  0EA1               	movlw	161
 10511  003276  5EF5               	subwf	tablat,f,c
 10512  003278  0009               	tblrd		*+
 10513  00327A  0E0F               	movlw	15
 10514  00327C  5AF5               	subwfb	tablat,f,c
 10515  00327E  B0D8               	btfsc	status,0,c
 10516  003280  D05C               	goto	i1l7183
 10517  003282  5038               	movf	IR_CheckCode@i,w,c
 10518  003284  0D02               	mullw	2
 10519  003286  0E00               	movlw	0
 10520  003288  24F3               	addwf	prodl,w,c
 10521  00328A  6EF6               	movwf	tblptrl,c
 10522  00328C  0E24               	movlw	36
 10523  00328E  20F4               	addwfc	prodh,w,c
 10524  003290  6EF7               	movwf	tblptrh,c
 10525  003292  6AF8               	clrf	tblptru,c
 10526  003294  0E00               	movlw	0
 10527  003296  22F8               	addwfc	tblptru,f,c
 10528  003298  0009               	tblrd		*+
 10529  00329A  0EE9               	movlw	233
 10530  00329C  5EF5               	subwf	tablat,f,c
 10531  00329E  0009               	tblrd		*+
 10532  0032A0  0E03               	movlw	3
 10533  0032A2  5AF5               	subwfb	tablat,f,c
 10534  0032A4  A0D8               	btfss	status,0,c
 10535  0032A6  D049               	goto	i1l7183
 10536                           
 10537                           ;IR.c: 184: {
 10538                           ;IR.c: 185: Low = (double)IR_SavedTiming[i] * (1.0 - 0.75);
 10539  0032A8  5038               	movf	IR_CheckCode@i,w,c
 10540  0032AA  0D02               	mullw	2
 10541  0032AC  0E00               	movlw	0
 10542  0032AE  24F3               	addwf	prodl,w,c
 10543  0032B0  6EF6               	movwf	tblptrl,c
 10544  0032B2  0E24               	movlw	36
 10545  0032B4  20F4               	addwfc	prodh,w,c
 10546  0032B6  6EF7               	movwf	tblptrh,c
 10547  0032B8  6AF8               	clrf	tblptru,c
 10548  0032BA  0E00               	movlw	0
 10549  0032BC  22F8               	addwfc	tblptru,f,c
 10550  0032BE  0009               	tblrd		*+
 10551  0032C0  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10552  0032C4  000A               	tblrd		*-
 10553  0032C6  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10554  0032CA  ECB7  F00D         	call	i1___lwtoft	;wreg free
 10555  0032CE  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10556  0032D2  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10557  0032D6  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10558  0032DA  0E00               	movlw	0
 10559  0032DC  6E1E               	movwf	i1___ftmul@f2,c
 10560  0032DE  0E80               	movlw	128
 10561  0032E0  6E1F               	movwf	i1___ftmul@f2+1,c
 10562  0032E2  0E3E               	movlw	62
 10563  0032E4  6E20               	movwf	i1___ftmul@f2+2,c
 10564  0032E6  EC71  F003         	call	i1___ftmul	;wreg free
 10565  0032EA  C01B  F032         	movff	?i1___ftmul,IR_CheckCode@Low
 10566  0032EE  C01C  F033         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10567  0032F2  C01D  F034         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10568                           
 10569                           ;IR.c: 186: High = (double)IR_SavedTiming[i] * (1.0 + 0.75);
 10570  0032F6  5038               	movf	IR_CheckCode@i,w,c
 10571  0032F8  0D02               	mullw	2
 10572  0032FA  0E00               	movlw	0
 10573  0032FC  24F3               	addwf	prodl,w,c
 10574  0032FE  6EF6               	movwf	tblptrl,c
 10575  003300  0E24               	movlw	36
 10576  003302  20F4               	addwfc	prodh,w,c
 10577  003304  6EF7               	movwf	tblptrh,c
 10578  003306  6AF8               	clrf	tblptru,c
 10579  003308  0E00               	movlw	0
 10580  00330A  22F8               	addwfc	tblptru,f,c
 10581  00330C  0009               	tblrd		*+
 10582  00330E  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10583  003312  000A               	tblrd		*-
 10584  003314  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10585  003318  ECB7  F00D         	call	i1___lwtoft	;wreg free
 10586  00331C  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10587  003320  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10588  003324  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10589  003328  0E00               	movlw	0
 10590  00332A  6E1E               	movwf	i1___ftmul@f2,c
 10591  00332C  0EE0               	movlw	224
 10592  00332E  6E1F               	movwf	i1___ftmul@f2+1,c
 10593  003330  0E3F               	movlw	63
 10594  003332  6E20               	movwf	i1___ftmul@f2+2,c
 10595  003334  EC71  F003         	call	i1___ftmul	;wreg free
 10596  003338  D048               	goto	L4
 10597  00333A                     i1l7183:
 10598                           
 10599                           ;IR.c: 188: else
 10600                           ;IR.c: 189: {
 10601                           ;IR.c: 190: Low = (double)IR_SavedTiming[i] * (1.0 - 1.1);
 10602  00333A  5038               	movf	IR_CheckCode@i,w,c
 10603  00333C  0D02               	mullw	2
 10604  00333E  0E00               	movlw	0
 10605  003340  24F3               	addwf	prodl,w,c
 10606  003342  6EF6               	movwf	tblptrl,c
 10607  003344  0E24               	movlw	36
 10608  003346  20F4               	addwfc	prodh,w,c
 10609  003348  6EF7               	movwf	tblptrh,c
 10610  00334A  6AF8               	clrf	tblptru,c
 10611  00334C  0E00               	movlw	0
 10612  00334E  22F8               	addwfc	tblptru,f,c
 10613  003350  0009               	tblrd		*+
 10614  003352  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10615  003356  000A               	tblrd		*-
 10616  003358  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10617  00335C  ECB7  F00D         	call	i1___lwtoft	;wreg free
 10618  003360  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10619  003364  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10620  003368  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10621  00336C  0ECD               	movlw	205
 10622  00336E  6E1E               	movwf	i1___ftmul@f2,c
 10623  003370  0ECC               	movlw	204
 10624  003372  6E1F               	movwf	i1___ftmul@f2+1,c
 10625  003374  0EBD               	movlw	189
 10626  003376  6E20               	movwf	i1___ftmul@f2+2,c
 10627  003378  EC71  F003         	call	i1___ftmul	;wreg free
 10628  00337C  C01B  F032         	movff	?i1___ftmul,IR_CheckCode@Low
 10629  003380  C01C  F033         	movff	?i1___ftmul+1,IR_CheckCode@Low+1
 10630  003384  C01D  F034         	movff	?i1___ftmul+2,IR_CheckCode@Low+2
 10631                           
 10632                           ;IR.c: 191: High = (double)IR_SavedTiming[i] * (1.0 + 1.1);
 10633  003388  5038               	movf	IR_CheckCode@i,w,c
 10634  00338A  0D02               	mullw	2
 10635  00338C  0E00               	movlw	0
 10636  00338E  24F3               	addwf	prodl,w,c
 10637  003390  6EF6               	movwf	tblptrl,c
 10638  003392  0E24               	movlw	36
 10639  003394  20F4               	addwfc	prodh,w,c
 10640  003396  6EF7               	movwf	tblptrh,c
 10641  003398  6AF8               	clrf	tblptru,c
 10642  00339A  0E00               	movlw	0
 10643  00339C  22F8               	addwfc	tblptru,f,c
 10644  00339E  0009               	tblrd		*+
 10645  0033A0  CFF5 F009          	movff	tablat,i1___lwtoft@c
 10646  0033A4  000A               	tblrd		*-
 10647  0033A6  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 10648  0033AA  ECB7  F00D         	call	i1___lwtoft	;wreg free
 10649  0033AE  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 10650  0033B2  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 10651  0033B6  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 10652  0033BA  0E66               	movlw	102
 10653  0033BC  6E1E               	movwf	i1___ftmul@f2,c
 10654  0033BE  0E06               	movlw	6
 10655  0033C0  6E1F               	movwf	i1___ftmul@f2+1,c
 10656  0033C2  0E40               	movlw	64
 10657  0033C4  6E20               	movwf	i1___ftmul@f2+2,c
 10658  0033C6  EC71  F003         	call	i1___ftmul	;wreg free
 10659  0033CA                     L4:
 10660  0033CA  C01B  F035         	movff	?i1___ftmul,IR_CheckCode@High
 10661  0033CE  C01C  F036         	movff	?i1___ftmul+1,IR_CheckCode@High+1
 10662  0033D2  C01D  F037         	movff	?i1___ftmul+2,IR_CheckCode@High+2
 10663                           
 10664                           ;IR.c: 192: }
 10665                           ;IR.c: 194: if((double)IR_DataTiming[i] < Low || (double)IR_DataTiming[i] > High )
 10666  0033D6  5038               	movf	IR_CheckCode@i,w,c
 10667  0033D8  0D02               	mullw	2
 10668  0033DA  0E00               	movlw	low _IR_DataTiming
 10669  0033DC  24F3               	addwf	prodl,w,c
 10670  0033DE  6ED9               	movwf	fsr2l,c
 10671  0033E0  0E02               	movlw	high _IR_DataTiming
 10672  0033E2  20F4               	addwfc	prodh,w,c
 10673  0033E4  6EDA               	movwf	fsr2h,c
 10674  0033E6  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10675  0033EA  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10676  0033EE  ECB7  F00D         	call	i1___lwtoft	;wreg free
 10677  0033F2  C009  F00C         	movff	?i1___lwtoft,i1___ftge@ff1
 10678  0033F6  C00A  F00D         	movff	?i1___lwtoft+1,i1___ftge@ff1+1
 10679  0033FA  C00B  F00E         	movff	?i1___lwtoft+2,i1___ftge@ff1+2
 10680  0033FE  C032  F00F         	movff	IR_CheckCode@Low,i1___ftge@ff2
 10681  003402  C033  F010         	movff	IR_CheckCode@Low+1,i1___ftge@ff2+1
 10682  003406  C034  F011         	movff	IR_CheckCode@Low+2,i1___ftge@ff2+2
 10683  00340A  ECF3  F008         	call	i1___ftge	;wreg free
 10684  00340E  A0D8               	btfss	status,0,c
 10685  003410  D01E               	goto	i1l7189
 10686  003412  C035  F00C         	movff	IR_CheckCode@High,i1___ftge@ff1
 10687  003416  C036  F00D         	movff	IR_CheckCode@High+1,i1___ftge@ff1+1
 10688  00341A  C037  F00E         	movff	IR_CheckCode@High+2,i1___ftge@ff1+2
 10689  00341E  5038               	movf	IR_CheckCode@i,w,c
 10690  003420  0D02               	mullw	2
 10691  003422  0E00               	movlw	low _IR_DataTiming
 10692  003424  24F3               	addwf	prodl,w,c
 10693  003426  6ED9               	movwf	fsr2l,c
 10694  003428  0E02               	movlw	high _IR_DataTiming
 10695  00342A  20F4               	addwfc	prodh,w,c
 10696  00342C  6EDA               	movwf	fsr2h,c
 10697  00342E  CFDE F009          	movff	postinc2,i1___lwtoft@c
 10698  003432  CFDD F00A          	movff	postdec2,i1___lwtoft@c+1
 10699  003436  ECB7  F00D         	call	i1___lwtoft	;wreg free
 10700  00343A  C009  F00F         	movff	?i1___lwtoft,i1___ftge@ff2
 10701  00343E  C00A  F010         	movff	?i1___lwtoft+1,i1___ftge@ff2+1
 10702  003442  C00B  F011         	movff	?i1___lwtoft+2,i1___ftge@ff2+2
 10703  003446  ECF3  F008         	call	i1___ftge	;wreg free
 10704  00344A  B0D8               	btfsc	status,0,c
 10705  00344C  D002               	goto	i1l7193
 10706  00344E                     i1l7189:
 10707                           
 10708                           ;IR.c: 195: {
 10709                           ;IR.c: 196: return 0;
 10710  00344E  0E00               	movlw	0
 10711  003450  0012               	return	
 10712  003452                     i1l7193:
 10713  003452  2A38               	incf	IR_CheckCode@i,f,c
 10714  003454                     i1l7195:
 10715  003454  5062               	movf	_IR_CodeSize,w,c
 10716  003456  5C38               	subwf	IR_CheckCode@i,w,c
 10717  003458  A0D8               	btfss	status,0,c
 10718  00345A  D6A4               	goto	i1l7173
 10719                           
 10720                           ;IR.c: 197: }
 10721                           ;IR.c: 198: }
 10722                           ;IR.c: 199: return 1;
 10723  00345C  0E01               	movlw	1
 10724                           
 10725                           ;IR.c: 200: }
 10726  00345E  0012               	return	
 10727  003460                     i1l7203:
 10728                           
 10729                           ;IR.c: 201: else
 10730                           ;IR.c: 202: {
 10731                           ;IR.c: 203: if(IR_DataPlace >= 40)
 10732  003460  0E27               	movlw	39
 10733  003462  6463               	cpfsgt	_IR_DataPlace,c
 10734  003464  D071               	goto	i1l7247
 10735                           
 10736                           ;IR.c: 204: {
 10737                           ;IR.c: 205: for(i=0;i<IR_DataPlace;i++)
 10738  003466  0E00               	movlw	0
 10739  003468  6E38               	movwf	IR_CheckCode@i,c
 10740  00346A  D047               	goto	i1l7225
 10741  00346C                     i1l7207:
 10742                           
 10743                           ;IR.c: 206: {
 10744                           ;IR.c: 207: if(IR_DataTiming[i] < 40)
 10745  00346C  5038               	movf	IR_CheckCode@i,w,c
 10746  00346E  0D02               	mullw	2
 10747  003470  0E00               	movlw	low _IR_DataTiming
 10748  003472  24F3               	addwf	prodl,w,c
 10749  003474  6ED9               	movwf	fsr2l,c
 10750  003476  0E02               	movlw	high _IR_DataTiming
 10751  003478  20F4               	addwfc	prodh,w,c
 10752  00347A  6EDA               	movwf	fsr2h,c
 10753  00347C  0E01               	movlw	1
 10754  00347E  50DB               	movf	plusw2,w,c
 10755  003480  E106               	bnz	i1l7215
 10756  003482  0E28               	movlw	40
 10757  003484  5CDE               	subwf	postinc2,w,c
 10758  003486  B0D8               	btfsc	status,0,c
 10759  003488  D002               	goto	i1l7215
 10760                           
 10761                           ;IR.c: 208: {
 10762                           ;IR.c: 210: return 0;
 10763  00348A  0E00               	movlw	0
 10764  00348C  0012               	return	
 10765  00348E                     i1l7215:
 10766                           
 10767                           ;IR.c: 212: else if(IR_DataTiming[i] < 200)
 10768  00348E  5038               	movf	IR_CheckCode@i,w,c
 10769  003490  0D02               	mullw	2
 10770  003492  0E00               	movlw	low _IR_DataTiming
 10771  003494  24F3               	addwf	prodl,w,c
 10772  003496  6ED9               	movwf	fsr2l,c
 10773  003498  0E02               	movlw	high _IR_DataTiming
 10774  00349A  20F4               	addwfc	prodh,w,c
 10775  00349C  6EDA               	movwf	fsr2h,c
 10776  00349E  0E01               	movlw	1
 10777  0034A0  50DB               	movf	plusw2,w,c
 10778  0034A2  E110               	bnz	i1l7219
 10779  0034A4  0EC8               	movlw	200
 10780  0034A6  5CDE               	subwf	postinc2,w,c
 10781  0034A8  B0D8               	btfsc	status,0,c
 10782  0034AA  D00C               	goto	i1l7219
 10783                           
 10784                           ;IR.c: 213: {
 10785                           ;IR.c: 214: IR_DataTiming[i] +=350;
 10786  0034AC  5038               	movf	IR_CheckCode@i,w,c
 10787  0034AE  0D02               	mullw	2
 10788  0034B0  0E00               	movlw	low _IR_DataTiming
 10789  0034B2  24F3               	addwf	prodl,w,c
 10790  0034B4  6ED9               	movwf	fsr2l,c
 10791  0034B6  0E02               	movlw	high _IR_DataTiming
 10792  0034B8  20F4               	addwfc	prodh,w,c
 10793  0034BA  6EDA               	movwf	fsr2h,c
 10794  0034BC  0E5E               	movlw	94
 10795  0034BE  26DE               	addwf	postinc2,f,c
 10796  0034C0  0E01               	movlw	1
 10797  0034C2  D019               	goto	L5
 10798  0034C4                     i1l7219:
 10799                           
 10800                           ;IR.c: 216: else if(IR_DataTiming[i] < 320)
 10801  0034C4  5038               	movf	IR_CheckCode@i,w,c
 10802  0034C6  0D02               	mullw	2
 10803  0034C8  0E00               	movlw	low _IR_DataTiming
 10804  0034CA  24F3               	addwf	prodl,w,c
 10805  0034CC  6ED9               	movwf	fsr2l,c
 10806  0034CE  0E02               	movlw	high _IR_DataTiming
 10807  0034D0  20F4               	addwfc	prodh,w,c
 10808  0034D2  6EDA               	movwf	fsr2h,c
 10809  0034D4  0E40               	movlw	64
 10810  0034D6  5CDE               	subwf	postinc2,w,c
 10811  0034D8  0E01               	movlw	1
 10812  0034DA  58DE               	subwfb	postinc2,w,c
 10813  0034DC  B0D8               	btfsc	status,0,c
 10814  0034DE  D00C               	goto	i1l7223
 10815                           
 10816                           ;IR.c: 217: {
 10817                           ;IR.c: 218: IR_DataTiming[i] +=150;
 10818  0034E0  5038               	movf	IR_CheckCode@i,w,c
 10819  0034E2  0D02               	mullw	2
 10820  0034E4  0E00               	movlw	low _IR_DataTiming
 10821  0034E6  24F3               	addwf	prodl,w,c
 10822  0034E8  6ED9               	movwf	fsr2l,c
 10823  0034EA  0E02               	movlw	high _IR_DataTiming
 10824  0034EC  20F4               	addwfc	prodh,w,c
 10825  0034EE  6EDA               	movwf	fsr2h,c
 10826  0034F0  0E96               	movlw	150
 10827  0034F2  26DE               	addwf	postinc2,f,c
 10828  0034F4  0E00               	movlw	0
 10829  0034F6                     L5:
 10830  0034F6  22DD               	addwfc	postdec2,f,c
 10831  0034F8                     i1l7223:
 10832  0034F8  2A38               	incf	IR_CheckCode@i,f,c
 10833  0034FA                     i1l7225:
 10834  0034FA  5063               	movf	_IR_DataPlace,w,c
 10835  0034FC  5C38               	subwf	IR_CheckCode@i,w,c
 10836  0034FE  A0D8               	btfss	status,0,c
 10837  003500  D7B5               	goto	i1l7207
 10838                           
 10839                           ;IR.c: 219: }
 10840                           ;IR.c: 220: }
 10841                           ;IR.c: 221: for(i=IR_DataPlace;i<128;i++)
 10842  003502  C063  F038         	movff	_IR_DataPlace,IR_CheckCode@i
 10843  003506                     i1l7227:
 10844  003506  0E7F               	movlw	127
 10845  003508  6438               	cpfsgt	IR_CheckCode@i,c
 10846  00350A  D001               	goto	i1l7231
 10847  00350C  D00E               	goto	i1l7237
 10848  00350E                     i1l7231:
 10849                           
 10850                           ;IR.c: 222: {
 10851                           ;IR.c: 224: IR_DataTiming[i] = 0;
 10852  00350E  5038               	movf	IR_CheckCode@i,w,c
 10853  003510  0D02               	mullw	2
 10854  003512  0E00               	movlw	low _IR_DataTiming
 10855  003514  24F3               	addwf	prodl,w,c
 10856  003516  6ED9               	movwf	fsr2l,c
 10857  003518  0E02               	movlw	high _IR_DataTiming
 10858  00351A  20F4               	addwfc	prodh,w,c
 10859  00351C  6EDA               	movwf	fsr2h,c
 10860  00351E  0E00               	movlw	0
 10861  003520  6EDE               	movwf	postinc2,c
 10862  003522  0E00               	movlw	0
 10863  003524  6EDD               	movwf	postdec2,c
 10864  003526  2A38               	incf	IR_CheckCode@i,f,c
 10865  003528  D7EE               	goto	i1l7227
 10866  00352A                     i1l7237:
 10867                           
 10868                           ;IR.c: 225: }
 10869                           ;IR.c: 228: IR_Saved = 90;
 10870  00352A  0E5A               	movlw	90
 10871  00352C  0100               	movlb	0	; () banked
 10872  00352E  6FCD               	movwf	_IR_Saved& (0+255),b
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;IR.c: 229: Flash_Status = FSH_Write_IR_RF();
 10876  003530  ECC7  F016         	call	_FSH_Write_IR_RF	;wreg free
 10877  003534  0100               	movlb	0	; () banked
 10878  003536  6FC2               	movwf	_Flash_Status& (0+255),b
 10879                           
 10880                           ; BSR set to: 0
 10881                           ;IR.c: 230: if(Flash_Status)
 10882  003538  0100               	movlb	0	; () banked
 10883  00353A  51C2               	movf	_Flash_Status& (0+255),w,b
 10884  00353C  A4D8               	btfss	status,2,c
 10885                           
 10886                           ; BSR set to: 0
 10887                           ;IR.c: 231: {
 10888                           ;IR.c: 232: IR_LoadCode();
 10889  00353E  ECBC  F005         	call	i1_IR_LoadCode	;wreg free
 10890                           
 10891                           ;IR.c: 233: }
 10892                           ;IR.c: 234: System_State = 8;
 10893  003542  0E08               	movlw	8
 10894  003544  0100               	movlb	0	; () banked
 10895  003546  6FCF               	movwf	_System_State& (0+255),b	;volatile
 10896  003548                     i1l7247:
 10897                           
 10898                           ;IR.c: 235: }
 10899                           ;IR.c: 236: return 0;
 10900  003548  0E00               	movlw	0
 10901  00354A  0012               	return	
 10902  00354C                     __end_of_IR_CheckCode:
 10903                           	opt stack 0
 10904                           pclatu	equ	0xFFB
 10905                           pclath	equ	0xFFA
 10906                           tblptru	equ	0xFF8
 10907                           tblptrh	equ	0xFF7
 10908                           tblptrl	equ	0xFF6
 10909                           tablat	equ	0xFF5
 10910                           prodh	equ	0xFF4
 10911                           prodl	equ	0xFF3
 10912                           intcon	equ	0xFF2
 10913                           intcon2	equ	0xFF1
 10914                           intcon3	equ	0xFF0
 10915                           postinc0	equ	0xFEE
 10916                           fsr0h	equ	0xFEA
 10917                           fsr0l	equ	0xFE9
 10918                           wreg	equ	0xFE8
 10919                           postdec1	equ	0xFE5
 10920                           fsr1h	equ	0xFE2
 10921                           fsr1l	equ	0xFE1
 10922                           bsr	equ	0xFE0
 10923                           postinc2	equ	0xFDE
 10924                           postdec2	equ	0xFDD
 10925                           plusw2	equ	0xFDB
 10926                           fsr2h	equ	0xFDA
 10927                           fsr2l	equ	0xFD9
 10928                           status	equ	0xFD8
 10929                           
 10930 ;; *************** function i1___ftge *****************
 10931 ;; Defined at:
 10932 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
 10933 ;; Parameters:    Size  Location     Type
 10934 ;;  ff1             3   11[COMRAM] float 
 10935 ;;  ff2             3   14[COMRAM] float 
 10936 ;; Auto vars:     Size  Location     Type
 10937 ;;		None
 10938 ;; Return value:  Size  Location     Type
 10939 ;;		None               void
 10940 ;; Registers used:
 10941 ;;		wreg, status,2, status,0
 10942 ;; Tracked objects:
 10943 ;;		On entry : 0/0
 10944 ;;		On exit  : 0/0
 10945 ;;		Unchanged: 0/0
 10946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 10947 ;;      Params:         6       0       0       0       0
 10948 ;;      Locals:         0       0       0       0       0
 10949 ;;      Temps:          3       0       0       0       0
 10950 ;;      Totals:         9       0       0       0       0
 10951 ;;Total ram usage:        9 bytes
 10952 ;; Hardware stack levels used:    1
 10953 ;; Hardware stack levels required when called:    6
 10954 ;; This function calls:
 10955 ;;		Nothing
 10956 ;; This function is called by:
 10957 ;;		_IR_CheckCode
 10958 ;; This function uses a non-reentrant model
 10959 ;;
 10960                           
 10961                           	psect	text73
 10962  0011E6                     __ptext73:
 10963                           	opt stack 0
 10964  0011E6                     i1___ftge:
 10965                           	opt stack 16
 10966                           
 10967                           ;incstack = 0
 10968  0011E6  AE0E               	btfss	i1___ftge@ff1+2,7,c
 10969  0011E8  D016               	goto	i1l6893
 10970  0011EA  C00C  F012         	movff	i1___ftge@ff1,??i1___ftge
 10971  0011EE  C00D  F013         	movff	i1___ftge@ff1+1,??i1___ftge+1
 10972  0011F2  C00E  F014         	movff	i1___ftge@ff1+2,??i1___ftge+2
 10973  0011F6  1E12               	comf	??i1___ftge,f,c
 10974  0011F8  1E13               	comf	??i1___ftge+1,f,c
 10975  0011FA  1E14               	comf	??i1___ftge+2,f,c
 10976  0011FC  2A12               	incf	??i1___ftge,f,c
 10977  0011FE  0E00               	movlw	0
 10978  001200  2213               	addwfc	??i1___ftge+1,f,c
 10979  001202  2214               	addwfc	??i1___ftge+2,f,c
 10980  001204  0E00               	movlw	0
 10981  001206  2412               	addwf	??i1___ftge,w,c
 10982  001208  6E0C               	movwf	i1___ftge@ff1,c
 10983  00120A  0E00               	movlw	0
 10984  00120C  2013               	addwfc	??i1___ftge+1,w,c
 10985  00120E  6E0D               	movwf	i1___ftge@ff1+1,c
 10986  001210  0E80               	movlw	128
 10987  001212  2014               	addwfc	??i1___ftge+2,w,c
 10988  001214  6E0E               	movwf	i1___ftge@ff1+2,c
 10989  001216                     i1l6893:
 10990  001216  AE11               	btfss	i1___ftge@ff2+2,7,c
 10991  001218  D016               	goto	i1l6897
 10992  00121A  C00F  F012         	movff	i1___ftge@ff2,??i1___ftge
 10993  00121E  C010  F013         	movff	i1___ftge@ff2+1,??i1___ftge+1
 10994  001222  C011  F014         	movff	i1___ftge@ff2+2,??i1___ftge+2
 10995  001226  1E12               	comf	??i1___ftge,f,c
 10996  001228  1E13               	comf	??i1___ftge+1,f,c
 10997  00122A  1E14               	comf	??i1___ftge+2,f,c
 10998  00122C  2A12               	incf	??i1___ftge,f,c
 10999  00122E  0E00               	movlw	0
 11000  001230  2213               	addwfc	??i1___ftge+1,f,c
 11001  001232  2214               	addwfc	??i1___ftge+2,f,c
 11002  001234  0E00               	movlw	0
 11003  001236  2412               	addwf	??i1___ftge,w,c
 11004  001238  6E0F               	movwf	i1___ftge@ff2,c
 11005  00123A  0E00               	movlw	0
 11006  00123C  2013               	addwfc	??i1___ftge+1,w,c
 11007  00123E  6E10               	movwf	i1___ftge@ff2+1,c
 11008  001240  0E80               	movlw	128
 11009  001242  2014               	addwfc	??i1___ftge+2,w,c
 11010  001244  6E11               	movwf	i1___ftge@ff2+2,c
 11011  001246                     i1l6897:
 11012  001246  0E00               	movlw	0
 11013  001248  1A0C               	xorwf	i1___ftge@ff1,f,c
 11014  00124A  0E00               	movlw	0
 11015  00124C  1A0D               	xorwf	i1___ftge@ff1+1,f,c
 11016  00124E  0E80               	movlw	128
 11017  001250  1A0E               	xorwf	i1___ftge@ff1+2,f,c
 11018  001252  0E00               	movlw	0
 11019  001254  1A0F               	xorwf	i1___ftge@ff2,f,c
 11020  001256  0E00               	movlw	0
 11021  001258  1A10               	xorwf	i1___ftge@ff2+1,f,c
 11022  00125A  0E80               	movlw	128
 11023  00125C  1A11               	xorwf	i1___ftge@ff2+2,f,c
 11024  00125E  500F               	movf	i1___ftge@ff2,w,c
 11025  001260  5C0C               	subwf	i1___ftge@ff1,w,c
 11026  001262  5010               	movf	i1___ftge@ff2+1,w,c
 11027  001264  580D               	subwfb	i1___ftge@ff1+1,w,c
 11028  001266  5011               	movf	i1___ftge@ff2+2,w,c
 11029  001268  580E               	subwfb	i1___ftge@ff1+2,w,c
 11030  00126A  B0D8               	btfsc	status,0,c
 11031  00126C  D002               	goto	i1l6903
 11032  00126E  90D8               	bcf	status,0,c
 11033  001270  0012               	return	
 11034  001272                     i1l6903:
 11035  001272  80D8               	bsf	status,0,c
 11036  001274  0012               	return	
 11037  001276                     __end_ofi1___ftge:
 11038                           	opt stack 0
 11039                           pclatu	equ	0xFFB
 11040                           pclath	equ	0xFFA
 11041                           tblptru	equ	0xFF8
 11042                           tblptrh	equ	0xFF7
 11043                           tblptrl	equ	0xFF6
 11044                           tablat	equ	0xFF5
 11045                           prodh	equ	0xFF4
 11046                           prodl	equ	0xFF3
 11047                           intcon	equ	0xFF2
 11048                           intcon2	equ	0xFF1
 11049                           intcon3	equ	0xFF0
 11050                           postinc0	equ	0xFEE
 11051                           fsr0h	equ	0xFEA
 11052                           fsr0l	equ	0xFE9
 11053                           wreg	equ	0xFE8
 11054                           postdec1	equ	0xFE5
 11055                           fsr1h	equ	0xFE2
 11056                           fsr1l	equ	0xFE1
 11057                           bsr	equ	0xFE0
 11058                           postinc2	equ	0xFDE
 11059                           postdec2	equ	0xFDD
 11060                           plusw2	equ	0xFDB
 11061                           fsr2h	equ	0xFDA
 11062                           fsr2l	equ	0xFD9
 11063                           status	equ	0xFD8
 11064                           
 11065 ;; *************** function i1_IR_LoadCode *****************
 11066 ;; Defined at:
 11067 ;;		line 129 in file "IR.c"
 11068 ;; Parameters:    Size  Location     Type
 11069 ;;		None
 11070 ;; Auto vars:     Size  Location     Type
 11071 ;;  IR_LoadCode     3   44[COMRAM] float 
 11072 ;;  IR_LoadCode     3   41[COMRAM] float 
 11073 ;; Return value:  Size  Location     Type
 11074 ;;		None               void
 11075 ;; Registers used:
 11076 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11077 ;; Tracked objects:
 11078 ;;		On entry : 0/0
 11079 ;;		On exit  : 0/0
 11080 ;;		Unchanged: 0/0
 11081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11082 ;;      Params:         0       0       0       0       0
 11083 ;;      Locals:         6       0       0       0       0
 11084 ;;      Temps:          0       0       0       0       0
 11085 ;;      Totals:         6       0       0       0       0
 11086 ;;Total ram usage:        6 bytes
 11087 ;; Hardware stack levels used:    1
 11088 ;; Hardware stack levels required when called:    8
 11089 ;; This function calls:
 11090 ;;		i1_IR_CalculateCodesize
 11091 ;;		i1___ftmul
 11092 ;;		i1___fttol
 11093 ;;		i1___lwtoft
 11094 ;; This function is called by:
 11095 ;;		_IR_CheckCode
 11096 ;; This function uses a non-reentrant model
 11097 ;;
 11098                           
 11099                           	psect	text74
 11100  000B78                     __ptext74:
 11101                           	opt stack 0
 11102  000B78                     i1_IR_LoadCode:
 11103                           	opt stack 14
 11104                           
 11105                           ;IR.c: 131: double Low = 0.0;
 11106                           
 11107                           ;incstack = 0
 11108  000B78  0E00               	movlw	0
 11109  000B7A  6E2A               	movwf	i1IR_LoadCode@Low,c
 11110  000B7C  0E00               	movlw	0
 11111  000B7E  6E2B               	movwf	i1IR_LoadCode@Low+1,c
 11112  000B80  0E00               	movlw	0
 11113  000B82  6E2C               	movwf	i1IR_LoadCode@Low+2,c
 11114                           
 11115                           ;IR.c: 132: double High = 0.0;
 11116  000B84  0E00               	movlw	0
 11117  000B86  6E2D               	movwf	i1IR_LoadCode@High,c
 11118  000B88  0E00               	movlw	0
 11119  000B8A  6E2E               	movwf	i1IR_LoadCode@High+1,c
 11120  000B8C  0E00               	movlw	0
 11121  000B8E  6E2F               	movwf	i1IR_LoadCode@High+2,c
 11122                           
 11123                           ;IR.c: 134: Low = (double)IR_SavedTiming[0] * (1.0 - 0.3);
 11124  000B90  0E00               	movlw	0
 11125  000B92  6EF6               	movwf	tblptrl,c
 11126  000B94                     	if	1	;There is more than 1 active tblptr byte
 11127  000B94  0E24               	movlw	36
 11128  000B96  6EF7               	movwf	tblptrh,c
 11129  000B98                     	endif
 11130  000B98                     	if	0	;There are less than 3 active tblptr bytes
 11131  000B98                     	endif
 11132  000B98  0009               	tblrd		*+
 11133  000B9A  CFF5 F009          	movff	tablat,i1___lwtoft@c
 11134  000B9E  000A               	tblrd		*-
 11135  000BA0  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 11136  000BA4  ECB7  F00D         	call	i1___lwtoft	;wreg free
 11137  000BA8  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 11138  000BAC  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 11139  000BB0  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 11140  000BB4  0E33               	movlw	51
 11141  000BB6  6E1E               	movwf	i1___ftmul@f2,c
 11142  000BB8  0E33               	movlw	51
 11143  000BBA  6E1F               	movwf	i1___ftmul@f2+1,c
 11144  000BBC  0E3F               	movlw	63
 11145  000BBE  6E20               	movwf	i1___ftmul@f2+2,c
 11146  000BC0  EC71  F003         	call	i1___ftmul	;wreg free
 11147  000BC4  C01B  F02A         	movff	?i1___ftmul,i1IR_LoadCode@Low
 11148  000BC8  C01C  F02B         	movff	?i1___ftmul+1,i1IR_LoadCode@Low+1
 11149  000BCC  C01D  F02C         	movff	?i1___ftmul+2,i1IR_LoadCode@Low+2
 11150                           
 11151                           ;IR.c: 135: High = (double)IR_SavedTiming[0] * (1.0 + 0.3);
 11152  000BD0  0E00               	movlw	0
 11153  000BD2  6EF6               	movwf	tblptrl,c
 11154  000BD4                     	if	1	;There is more than 1 active tblptr byte
 11155  000BD4  0E24               	movlw	36
 11156  000BD6  6EF7               	movwf	tblptrh,c
 11157  000BD8                     	endif
 11158  000BD8                     	if	0	;There are less than 3 active tblptr bytes
 11159  000BD8                     	endif
 11160  000BD8  0009               	tblrd		*+
 11161  000BDA  CFF5 F009          	movff	tablat,i1___lwtoft@c
 11162  000BDE  000A               	tblrd		*-
 11163  000BE0  CFF5 F00A          	movff	tablat,i1___lwtoft@c+1
 11164  000BE4  ECB7  F00D         	call	i1___lwtoft	;wreg free
 11165  000BE8  C009  F01B         	movff	?i1___lwtoft,i1___ftmul@f1
 11166  000BEC  C00A  F01C         	movff	?i1___lwtoft+1,i1___ftmul@f1+1
 11167  000BF0  C00B  F01D         	movff	?i1___lwtoft+2,i1___ftmul@f1+2
 11168  000BF4  0E66               	movlw	102
 11169  000BF6  6E1E               	movwf	i1___ftmul@f2,c
 11170  000BF8  0EA6               	movlw	166
 11171  000BFA  6E1F               	movwf	i1___ftmul@f2+1,c
 11172  000BFC  0E3F               	movlw	63
 11173  000BFE  6E20               	movwf	i1___ftmul@f2+2,c
 11174  000C00  EC71  F003         	call	i1___ftmul	;wreg free
 11175  000C04  C01B  F02D         	movff	?i1___ftmul,i1IR_LoadCode@High
 11176  000C08  C01C  F02E         	movff	?i1___ftmul+1,i1IR_LoadCode@High+1
 11177  000C0C  C01D  F02F         	movff	?i1___ftmul+2,i1IR_LoadCode@High+2
 11178                           
 11179                           ;IR.c: 137: IR_SyncLow = (unsigned int) Low;
 11180  000C10  C02A  F001         	movff	i1IR_LoadCode@Low,i1___fttol@f1
 11181  000C14  C02B  F002         	movff	i1IR_LoadCode@Low+1,i1___fttol@f1+1
 11182  000C18  C02C  F003         	movff	i1IR_LoadCode@Low+2,i1___fttol@f1+2
 11183  000C1C  ECF7  F002         	call	i1___fttol	;wreg free
 11184  000C20  C001  F057         	movff	?i1___fttol,_IR_SyncLow
 11185  000C24  C002  F058         	movff	?i1___fttol+1,_IR_SyncLow+1
 11186                           
 11187                           ;IR.c: 138: IR_SyncHigh = (unsigned int) High;
 11188  000C28  C02D  F001         	movff	i1IR_LoadCode@High,i1___fttol@f1
 11189  000C2C  C02E  F002         	movff	i1IR_LoadCode@High+1,i1___fttol@f1+1
 11190  000C30  C02F  F003         	movff	i1IR_LoadCode@High+2,i1___fttol@f1+2
 11191  000C34  ECF7  F002         	call	i1___fttol	;wreg free
 11192  000C38  C001  F055         	movff	?i1___fttol,_IR_SyncHigh
 11193  000C3C  C002  F056         	movff	?i1___fttol+1,_IR_SyncHigh+1
 11194                           
 11195                           ;IR.c: 140: IR_CodeSize = IR_CalculateCodesize();
 11196  000C40  ECEC  F00B         	call	i1_IR_CalculateCodesize	;wreg free
 11197  000C44  6E62               	movwf	_IR_CodeSize,c
 11198  000C46  0012               	return		;funcret
 11199  000C48                     __end_ofi1_IR_LoadCode:
 11200                           	opt stack 0
 11201                           pclatu	equ	0xFFB
 11202                           pclath	equ	0xFFA
 11203                           tblptru	equ	0xFF8
 11204                           tblptrh	equ	0xFF7
 11205                           tblptrl	equ	0xFF6
 11206                           tablat	equ	0xFF5
 11207                           prodh	equ	0xFF4
 11208                           prodl	equ	0xFF3
 11209                           intcon	equ	0xFF2
 11210                           intcon2	equ	0xFF1
 11211                           intcon3	equ	0xFF0
 11212                           postinc0	equ	0xFEE
 11213                           fsr0h	equ	0xFEA
 11214                           fsr0l	equ	0xFE9
 11215                           wreg	equ	0xFE8
 11216                           postdec1	equ	0xFE5
 11217                           fsr1h	equ	0xFE2
 11218                           fsr1l	equ	0xFE1
 11219                           bsr	equ	0xFE0
 11220                           postinc2	equ	0xFDE
 11221                           postdec2	equ	0xFDD
 11222                           plusw2	equ	0xFDB
 11223                           fsr2h	equ	0xFDA
 11224                           fsr2l	equ	0xFD9
 11225                           status	equ	0xFD8
 11226                           
 11227 ;; *************** function i1___fttol *****************
 11228 ;; Defined at:
 11229 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
 11230 ;; Parameters:    Size  Location     Type
 11231 ;;  f1              3    0[COMRAM] float 
 11232 ;; Auto vars:     Size  Location     Type
 11233 ;;  __fttol         4   10[COMRAM] unsigned long 
 11234 ;;  __fttol         1   14[COMRAM] unsigned char 
 11235 ;;  __fttol         1    9[COMRAM] unsigned char 
 11236 ;; Return value:  Size  Location     Type
 11237 ;;                  4    0[COMRAM] long 
 11238 ;; Registers used:
 11239 ;;		wreg, status,2, status,0
 11240 ;; Tracked objects:
 11241 ;;		On entry : 0/0
 11242 ;;		On exit  : 0/0
 11243 ;;		Unchanged: 0/0
 11244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11245 ;;      Params:         4       0       0       0       0
 11246 ;;      Locals:         6       0       0       0       0
 11247 ;;      Temps:          5       0       0       0       0
 11248 ;;      Totals:        15       0       0       0       0
 11249 ;;Total ram usage:       15 bytes
 11250 ;; Hardware stack levels used:    1
 11251 ;; Hardware stack levels required when called:    6
 11252 ;; This function calls:
 11253 ;;		Nothing
 11254 ;; This function is called by:
 11255 ;;		i1_IR_LoadCode
 11256 ;; This function uses a non-reentrant model
 11257 ;;
 11258                           
 11259                           	psect	text75
 11260  0005EE                     __ptext75:
 11261                           	opt stack 0
 11262  0005EE                     i1___fttol:
 11263                           	opt stack 15
 11264                           
 11265                           ;incstack = 0
 11266  0005EE  C003  F005         	movff	i1___fttol@f1+2,??i1___fttol
 11267  0005F2  6A06               	clrf	(??i1___fttol+1)& (0+255),c
 11268  0005F4  6A07               	clrf	(??i1___fttol+2)& (0+255),c
 11269  0005F6  3402               	rlcf	i1___fttol@f1+1,w,c
 11270  0005F8  3605               	rlcf	??i1___fttol& (0+255),f,c
 11271  0005FA  E301               	bnc	u636_21
 11272  0005FC  8006               	bsf	(??i1___fttol+1)& (0+255),0,c
 11273  0005FE                     u636_21:
 11274  0005FE  5005               	movf	??i1___fttol,w,c
 11275  000600  6E0F               	movwf	i1___fttol@exp1,c
 11276  000602  500F               	movf	i1___fttol@exp1,w,c
 11277  000604  A4D8               	btfss	status,2,c
 11278  000606  D009               	goto	i1l6033
 11279  000608  0E00               	movlw	0
 11280  00060A  6E01               	movwf	?i1___fttol,c
 11281  00060C  0E00               	movlw	0
 11282  00060E  6E02               	movwf	?i1___fttol+1,c
 11283  000610  0E00               	movlw	0
 11284  000612  6E03               	movwf	?i1___fttol+2,c
 11285  000614  0E00               	movlw	0
 11286  000616  6E04               	movwf	?i1___fttol+3,c
 11287  000618  0012               	return	
 11288  00061A                     i1l6033:
 11289  00061A  0E17               	movlw	23
 11290  00061C  6E05               	movwf	??i1___fttol& (0+255),c
 11291  00061E  C001  F006         	movff	i1___fttol@f1,??i1___fttol+1
 11292  000622  C002  F007         	movff	i1___fttol@f1+1,??i1___fttol+2
 11293  000626  C003  F008         	movff	i1___fttol@f1+2,??i1___fttol+3
 11294  00062A  2805               	incf	??i1___fttol,w,c
 11295  00062C  6E09               	movwf	(??i1___fttol+4)& (0+255),c
 11296  00062E  D004               	goto	i1u638_20
 11297  000630                     i1u638_25:
 11298  000630  90D8               	bcf	status,0,c
 11299  000632  3208               	rrcf	??i1___fttol+3,f,c
 11300  000634  3207               	rrcf	??i1___fttol+2,f,c
 11301  000636  3206               	rrcf	??i1___fttol+1,f,c
 11302  000638                     i1u638_20:
 11303  000638  2E09               	decfsz	(??i1___fttol+4)& (0+255),f,c
 11304  00063A  D7FA               	goto	i1u638_25
 11305  00063C  5006               	movf	??i1___fttol+1,w,c
 11306  00063E  6E0A               	movwf	i1___fttol@sign1,c
 11307  000640  8E02               	bsf	i1___fttol@f1+1,7,c
 11308  000642  0EFF               	movlw	255
 11309  000644  1601               	andwf	i1___fttol@f1,f,c
 11310  000646  0EFF               	movlw	255
 11311  000648  1602               	andwf	i1___fttol@f1+1,f,c
 11312  00064A  0E00               	movlw	0
 11313  00064C  1603               	andwf	i1___fttol@f1+2,f,c
 11314  00064E  5001               	movf	i1___fttol@f1,w,c
 11315  000650  6E0B               	movwf	i1___fttol@lval,c
 11316  000652  5002               	movf	i1___fttol@f1+1,w,c
 11317  000654  6E0C               	movwf	i1___fttol@lval+1,c
 11318  000656  5003               	movf	i1___fttol@f1+2,w,c
 11319  000658  6E0D               	movwf	i1___fttol@lval+2,c
 11320  00065A  6A0E               	clrf	i1___fttol@lval+3,c
 11321  00065C  0E8E               	movlw	142
 11322  00065E  5E0F               	subwf	i1___fttol@exp1,f,c
 11323  000660  AE0F               	btfss	i1___fttol@exp1,7,c
 11324  000662  D016               	goto	i1l6055
 11325  000664  500F               	movf	i1___fttol@exp1,w,c
 11326  000666  0A80               	xorlw	128
 11327  000668  0F8F               	addlw	143
 11328  00066A  B0D8               	btfsc	status,0,c
 11329  00066C  D009               	goto	i1l6051
 11330  00066E  0E00               	movlw	0
 11331  000670  6E01               	movwf	?i1___fttol,c
 11332  000672  0E00               	movlw	0
 11333  000674  6E02               	movwf	?i1___fttol+1,c
 11334  000676  0E00               	movlw	0
 11335  000678  6E03               	movwf	?i1___fttol+2,c
 11336  00067A  0E00               	movlw	0
 11337  00067C  6E04               	movwf	?i1___fttol+3,c
 11338  00067E  0012               	return	
 11339  000680                     i1l6051:
 11340  000680  90D8               	bcf	status,0,c
 11341  000682  320E               	rrcf	i1___fttol@lval+3,f,c
 11342  000684  320D               	rrcf	i1___fttol@lval+2,f,c
 11343  000686  320C               	rrcf	i1___fttol@lval+1,f,c
 11344  000688  320B               	rrcf	i1___fttol@lval,f,c
 11345  00068A  3E0F               	incfsz	i1___fttol@exp1,f,c
 11346  00068C  D7F9               	goto	i1l6051
 11347  00068E  D015               	goto	i1l6065
 11348  000690                     i1l6055:
 11349  000690  0E17               	movlw	23
 11350  000692  640F               	cpfsgt	i1___fttol@exp1,c
 11351  000694  D00F               	goto	i1l6063
 11352  000696  0E00               	movlw	0
 11353  000698  6E01               	movwf	?i1___fttol,c
 11354  00069A  0E00               	movlw	0
 11355  00069C  6E02               	movwf	?i1___fttol+1,c
 11356  00069E  0E00               	movlw	0
 11357  0006A0  6E03               	movwf	?i1___fttol+2,c
 11358  0006A2  0E00               	movlw	0
 11359  0006A4  6E04               	movwf	?i1___fttol+3,c
 11360  0006A6  0012               	return	
 11361  0006A8                     i1l6061:
 11362  0006A8  90D8               	bcf	status,0,c
 11363  0006AA  360B               	rlcf	i1___fttol@lval,f,c
 11364  0006AC  360C               	rlcf	i1___fttol@lval+1,f,c
 11365  0006AE  360D               	rlcf	i1___fttol@lval+2,f,c
 11366  0006B0  360E               	rlcf	i1___fttol@lval+3,f,c
 11367  0006B2  060F               	decf	i1___fttol@exp1,f,c
 11368  0006B4                     i1l6063:
 11369  0006B4  500F               	movf	i1___fttol@exp1,w,c
 11370  0006B6  A4D8               	btfss	status,2,c
 11371  0006B8  D7F7               	goto	i1l6061
 11372  0006BA                     i1l6065:
 11373  0006BA  500A               	movf	i1___fttol@sign1,w,c
 11374  0006BC  B4D8               	btfsc	status,2,c
 11375  0006BE  D008               	goto	i1l6069
 11376  0006C0  1E0E               	comf	i1___fttol@lval+3,f,c
 11377  0006C2  1E0D               	comf	i1___fttol@lval+2,f,c
 11378  0006C4  1E0C               	comf	i1___fttol@lval+1,f,c
 11379  0006C6  6C0B               	negf	i1___fttol@lval,c
 11380  0006C8  0E00               	movlw	0
 11381  0006CA  220C               	addwfc	i1___fttol@lval+1,f,c
 11382  0006CC  220D               	addwfc	i1___fttol@lval+2,f,c
 11383  0006CE  220E               	addwfc	i1___fttol@lval+3,f,c
 11384  0006D0                     i1l6069:
 11385  0006D0  C00B  F001         	movff	i1___fttol@lval,?i1___fttol
 11386  0006D4  C00C  F002         	movff	i1___fttol@lval+1,?i1___fttol+1
 11387  0006D8  C00D  F003         	movff	i1___fttol@lval+2,?i1___fttol+2
 11388  0006DC  C00E  F004         	movff	i1___fttol@lval+3,?i1___fttol+3
 11389  0006E0  0012               	return	
 11390  0006E2                     __end_ofi1___fttol:
 11391                           	opt stack 0
 11392                           pclatu	equ	0xFFB
 11393                           pclath	equ	0xFFA
 11394                           tblptru	equ	0xFF8
 11395                           tblptrh	equ	0xFF7
 11396                           tblptrl	equ	0xFF6
 11397                           tablat	equ	0xFF5
 11398                           prodh	equ	0xFF4
 11399                           prodl	equ	0xFF3
 11400                           intcon	equ	0xFF2
 11401                           intcon2	equ	0xFF1
 11402                           intcon3	equ	0xFF0
 11403                           postinc0	equ	0xFEE
 11404                           fsr0h	equ	0xFEA
 11405                           fsr0l	equ	0xFE9
 11406                           wreg	equ	0xFE8
 11407                           postdec1	equ	0xFE5
 11408                           fsr1h	equ	0xFE2
 11409                           fsr1l	equ	0xFE1
 11410                           bsr	equ	0xFE0
 11411                           postinc2	equ	0xFDE
 11412                           postdec2	equ	0xFDD
 11413                           plusw2	equ	0xFDB
 11414                           fsr2h	equ	0xFDA
 11415                           fsr2l	equ	0xFD9
 11416                           status	equ	0xFD8
 11417                           
 11418 ;; *************** function i1_IR_CalculateCodesize *****************
 11419 ;; Defined at:
 11420 ;;		line 148 in file "IR.c"
 11421 ;; Parameters:    Size  Location     Type
 11422 ;;		None
 11423 ;; Auto vars:     Size  Location     Type
 11424 ;;  IR_Calculate    1    0[COMRAM] unsigned char 
 11425 ;; Return value:  Size  Location     Type
 11426 ;;                  1    wreg      unsigned char 
 11427 ;; Registers used:
 11428 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 11429 ;; Tracked objects:
 11430 ;;		On entry : 0/0
 11431 ;;		On exit  : 0/0
 11432 ;;		Unchanged: 0/0
 11433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11434 ;;      Params:         0       0       0       0       0
 11435 ;;      Locals:         1       0       0       0       0
 11436 ;;      Temps:          0       0       0       0       0
 11437 ;;      Totals:         1       0       0       0       0
 11438 ;;Total ram usage:        1 bytes
 11439 ;; Hardware stack levels used:    1
 11440 ;; Hardware stack levels required when called:    6
 11441 ;; This function calls:
 11442 ;;		Nothing
 11443 ;; This function is called by:
 11444 ;;		i1_IR_LoadCode
 11445 ;; This function uses a non-reentrant model
 11446 ;;
 11447                           
 11448                           	psect	text76
 11449  0017D8                     __ptext76:
 11450                           	opt stack 0
 11451  0017D8                     i1_IR_CalculateCodesize:
 11452                           	opt stack 15
 11453                           
 11454                           ;IR.c: 150: unsigned char i;
 11455                           ;IR.c: 152: for(i=0; i<128;i++)
 11456                           
 11457                           ;incstack = 0
 11458  0017D8  0E00               	movlw	0
 11459  0017DA  6E01               	movwf	i1IR_CalculateCodesize@i,c
 11460  0017DC                     i1l5799:
 11461  0017DC  0E7F               	movlw	127
 11462  0017DE  6401               	cpfsgt	i1IR_CalculateCodesize@i,c
 11463  0017E0  D001               	goto	i1l5803
 11464  0017E2  D015               	goto	i1l5813
 11465  0017E4                     i1l5803:
 11466                           
 11467                           ;IR.c: 153: {
 11468                           ;IR.c: 154: if(IR_SavedTiming[i] == 0)
 11469  0017E4  5001               	movf	i1IR_CalculateCodesize@i,w,c
 11470  0017E6  0D02               	mullw	2
 11471  0017E8  0E00               	movlw	0
 11472  0017EA  24F3               	addwf	prodl,w,c
 11473  0017EC  6EF6               	movwf	tblptrl,c
 11474  0017EE  0E24               	movlw	36
 11475  0017F0  20F4               	addwfc	prodh,w,c
 11476  0017F2  6EF7               	movwf	tblptrh,c
 11477  0017F4  6AF8               	clrf	tblptru,c
 11478  0017F6  0E00               	movlw	0
 11479  0017F8  22F8               	addwfc	tblptru,f,c
 11480  0017FA  0009               	tblrd		*+
 11481  0017FC  50F5               	movf	tablat,w,c
 11482  0017FE  0009               	tblrd		*+
 11483  001800  10F5               	iorwf	tablat,w,c
 11484  001802  A4D8               	btfss	status,2,c
 11485  001804  D002               	goto	i1l5809
 11486                           
 11487                           ;IR.c: 155: {
 11488                           ;IR.c: 156: return i;
 11489  001806  5001               	movf	i1IR_CalculateCodesize@i,w,c
 11490  001808  0012               	return	
 11491  00180A                     i1l5809:
 11492  00180A  2A01               	incf	i1IR_CalculateCodesize@i,f,c
 11493  00180C  D7E7               	goto	i1l5799
 11494  00180E                     i1l5813:
 11495                           
 11496                           ;IR.c: 157: }
 11497                           ;IR.c: 158: }
 11498                           ;IR.c: 159: return 128;
 11499  00180E  0E80               	movlw	128
 11500  001810  0012               	return	
 11501  001812                     __end_ofi1_IR_CalculateCodesize:
 11502                           	opt stack 0
 11503                           pclatu	equ	0xFFB
 11504                           pclath	equ	0xFFA
 11505                           tblptru	equ	0xFF8
 11506                           tblptrh	equ	0xFF7
 11507                           tblptrl	equ	0xFF6
 11508                           tablat	equ	0xFF5
 11509                           prodh	equ	0xFF4
 11510                           prodl	equ	0xFF3
 11511                           intcon	equ	0xFF2
 11512                           intcon2	equ	0xFF1
 11513                           intcon3	equ	0xFF0
 11514                           postinc0	equ	0xFEE
 11515                           fsr0h	equ	0xFEA
 11516                           fsr0l	equ	0xFE9
 11517                           wreg	equ	0xFE8
 11518                           postdec1	equ	0xFE5
 11519                           fsr1h	equ	0xFE2
 11520                           fsr1l	equ	0xFE1
 11521                           bsr	equ	0xFE0
 11522                           postinc2	equ	0xFDE
 11523                           postdec2	equ	0xFDD
 11524                           plusw2	equ	0xFDB
 11525                           fsr2h	equ	0xFDA
 11526                           fsr2l	equ	0xFD9
 11527                           status	equ	0xFD8
 11528                           
 11529 ;; *************** function _FSH_Write_IR_RF *****************
 11530 ;; Defined at:
 11531 ;;		line 210 in file "FLASH.c"
 11532 ;; Parameters:    Size  Location     Type
 11533 ;;		None
 11534 ;; Auto vars:     Size  Location     Type
 11535 ;;  i               2   29[COMRAM] unsigned int 
 11536 ;;  FlashWastein    2   25[COMRAM] unsigned int 
 11537 ;;  WriteTries      1   31[COMRAM] unsigned char 
 11538 ;;  status          1   28[COMRAM] unsigned char 
 11539 ;;  j               1   27[COMRAM] unsigned char 
 11540 ;;  lowint          1   24[COMRAM] unsigned char 
 11541 ;;  highint         1   23[COMRAM] unsigned char 
 11542 ;; Return value:  Size  Location     Type
 11543 ;;                  1    wreg      unsigned char 
 11544 ;; Registers used:
 11545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11546 ;; Tracked objects:
 11547 ;;		On entry : 0/0
 11548 ;;		On exit  : 0/0
 11549 ;;		Unchanged: 0/0
 11550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 11551 ;;      Params:         0       0       0       0       0
 11552 ;;      Locals:         9       0       0       0       0
 11553 ;;      Temps:          6       0       0       0       0
 11554 ;;      Totals:        15       0       0       0       0
 11555 ;;Total ram usage:       15 bytes
 11556 ;; Hardware stack levels used:    1
 11557 ;; Hardware stack levels required when called:    9
 11558 ;; This function calls:
 11559 ;;		_FSH_AddressToBlock
 11560 ;;		_FSH_EraseBlock
 11561 ;;		_FSH_VerifyWriteIntArray
 11562 ;;		_FSH_WriteIntArray
 11563 ;;		_IR_ResetData
 11564 ;;		_MSC_BufferCopyIntConst
 11565 ;;		_RF_ResetData
 11566 ;; This function is called by:
 11567 ;;		_IR_CheckCode
 11568 ;; This function uses a non-reentrant model
 11569 ;;
 11570                           
 11571                           	psect	text77
 11572  002D8E                     __ptext77:
 11573                           	opt stack 0
 11574  002D8E                     _FSH_Write_IR_RF:
 11575                           	opt stack 13
 11576                           
 11577                           ;FLASH.c: 212: unsigned int i;
 11578                           ;FLASH.c: 213: unsigned char j;
 11579                           ;FLASH.c: 214: unsigned char WriteTries;
 11580                           ;FLASH.c: 215: unsigned char status = 0;
 11581                           
 11582                           ;incstack = 0
 11583  002D8E  0E00               	movlw	0
 11584  002D90  6E1D               	movwf	FSH_Write_IR_RF@status,c
 11585                           
 11586                           ;FLASH.c: 216: unsigned int FlashWasteindex = 0;
 11587  002D92  0E00               	movlw	0
 11588  002D94  6E1B               	movwf	FSH_Write_IR_RF@FlashWasteindex+1,c
 11589  002D96  0E00               	movlw	0
 11590  002D98  6E1A               	movwf	FSH_Write_IR_RF@FlashWasteindex,c
 11591                           
 11592                           ;FLASH.c: 217: unsigned char highint = INTCONbits.GIE;
 11593  002D9A  0E00               	movlw	0
 11594  002D9C  BEF2               	btfsc	intcon,7,c	;volatile
 11595  002D9E  0E01               	movlw	1
 11596  002DA0  6E18               	movwf	FSH_Write_IR_RF@highint,c
 11597                           
 11598                           ;FLASH.c: 218: unsigned char lowint = INTCONbits.PEIE;
 11599  002DA2  0E00               	movlw	0
 11600  002DA4  BCF2               	btfsc	intcon,6,c	;volatile
 11601  002DA6  0E01               	movlw	1
 11602  002DA8  6E19               	movwf	FSH_Write_IR_RF@lowint,c
 11603                           
 11604                           ;FLASH.c: 220: INTCONbits.GIE = 0;
 11605  002DAA  9EF2               	bcf	intcon,7,c	;volatile
 11606                           
 11607                           ;FLASH.c: 221: INTCONbits.PEIE = 0;
 11608  002DAC  9CF2               	bcf	intcon,6,c	;volatile
 11609                           
 11610                           ;FLASH.c: 223: if(IR_Saved == 90 && RF_Saved == 90)
 11611  002DAE  0E5A               	movlw	90
 11612  002DB0  0100               	movlb	0	; () banked
 11613  002DB2  19CD               	xorwf	_IR_Saved& (0+255),w,b
 11614  002DB4  A4D8               	btfss	status,2,c
 11615  002DB6  D005               	goto	i1l6243
 11616                           
 11617                           ; BSR set to: 0
 11618  002DB8  0E5A               	movlw	90
 11619  002DBA  0100               	movlb	0	; () banked
 11620  002DBC  19CE               	xorwf	_RF_Saved& (0+255),w,b
 11621  002DBE  B4D8               	btfsc	status,2,c
 11622  002DC0  D00A               	goto	i1l6247
 11623  002DC2                     i1l6243:
 11624                           
 11625                           ; BSR set to: 0
 11626                           ;FLASH.c: 230: else if(IR_Saved != 90 && RF_Saved != 90)
 11627  002DC2  0E5A               	movlw	90
 11628  002DC4  0100               	movlb	0	; () banked
 11629  002DC6  19CD               	xorwf	_IR_Saved& (0+255),w,b
 11630  002DC8  B4D8               	btfsc	status,2,c
 11631  002DCA  D00C               	goto	i1l6249
 11632                           
 11633                           ; BSR set to: 0
 11634  002DCC  0E5A               	movlw	90
 11635  002DCE  0100               	movlb	0	; () banked
 11636  002DD0  19CE               	xorwf	_RF_Saved& (0+255),w,b
 11637  002DD2  B4D8               	btfsc	status,2,c
 11638  002DD4  D007               	goto	i1l6249
 11639  002DD6                     i1l6247:
 11640                           
 11641                           ; BSR set to: 0
 11642                           ;FLASH.c: 231: {
 11643                           ;FLASH.c: 233: IR_Saved = 91;
 11644  002DD6  0E5B               	movlw	91
 11645  002DD8  0100               	movlb	0	; () banked
 11646  002DDA  6FCD               	movwf	_IR_Saved& (0+255),b
 11647                           
 11648                           ;FLASH.c: 234: RF_Saved = 91;
 11649  002DDC  0E5B               	movlw	91
 11650  002DDE  0100               	movlb	0	; () banked
 11651  002DE0  6FCE               	movwf	_RF_Saved& (0+255),b
 11652                           
 11653                           ;FLASH.c: 235: goto END;
 11654  002DE2  D1C4               	goto	i1l1205
 11655  002DE4                     i1l6249:
 11656                           
 11657                           ; BSR set to: 0
 11658                           ;FLASH.c: 236: }
 11659                           ;FLASH.c: 238: if(IR_Saved == 90)
 11660  002DE4  0E5A               	movlw	90
 11661  002DE6  0100               	movlb	0	; () banked
 11662  002DE8  19CD               	xorwf	_IR_Saved& (0+255),w,b
 11663  002DEA  A4D8               	btfss	status,2,c
 11664  002DEC  D017               	goto	i1l6255
 11665                           
 11666                           ; BSR set to: 0
 11667                           ;FLASH.c: 239: {
 11668                           ;FLASH.c: 241: RF_ResetData();
 11669  002DEE  EC9A  F00F         	call	_RF_ResetData	;wreg free
 11670                           
 11671                           ;FLASH.c: 242: MSC_BufferCopyIntConst(&RF_SavedTiming,&RF_DataTiming, 128, 0);
 11672  002DF2  0E00               	movlw	0
 11673  002DF4  6E07               	movwf	MSC_BufferCopyIntConst@from,c
 11674  002DF6  0E25               	movlw	37
 11675  002DF8  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 11676  002DFA  0E00               	movlw	0
 11677  002DFC  6E09               	movwf	MSC_BufferCopyIntConst@from+2,c
 11678  002DFE  0E00               	movlw	low _RF_DataTiming
 11679  002E00  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 11680  002E02  0E03               	movlw	high _RF_DataTiming
 11681  002E04  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 11682  002E06  0E00               	movlw	0
 11683  002E08  6E0D               	movwf	MSC_BufferCopyIntConst@count+1,c
 11684  002E0A  0E80               	movlw	128
 11685  002E0C  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 11686  002E0E  0E00               	movlw	0
 11687  002E10  6E0F               	movwf	MSC_BufferCopyIntConst@shift+1,c
 11688  002E12  0E00               	movlw	0
 11689  002E14  6E0E               	movwf	MSC_BufferCopyIntConst@shift,c
 11690  002E16  EC03  F008         	call	_MSC_BufferCopyIntConst	;wreg free
 11691                           
 11692                           ;FLASH.c: 243: }
 11693  002E1A  D016               	goto	i1l6259
 11694  002E1C                     i1l6255:
 11695                           
 11696                           ;FLASH.c: 244: else
 11697                           ;FLASH.c: 245: {
 11698                           ;FLASH.c: 247: IR_ResetData();
 11699  002E1C  ECA1  F00F         	call	_IR_ResetData	;wreg free
 11700                           
 11701                           ;FLASH.c: 248: MSC_BufferCopyIntConst(&IR_SavedTiming,&IR_DataTiming, 128, 0);
 11702  002E20  0E00               	movlw	0
 11703  002E22  6E07               	movwf	MSC_BufferCopyIntConst@from,c
 11704  002E24  0E24               	movlw	36
 11705  002E26  6E08               	movwf	MSC_BufferCopyIntConst@from+1,c
 11706  002E28  0E00               	movlw	0
 11707  002E2A  6E09               	movwf	MSC_BufferCopyIntConst@from+2,c
 11708  002E2C  0E00               	movlw	low _IR_DataTiming
 11709  002E2E  6E0A               	movwf	MSC_BufferCopyIntConst@to,c
 11710  002E30  0E02               	movlw	high _IR_DataTiming
 11711  002E32  6E0B               	movwf	MSC_BufferCopyIntConst@to+1,c
 11712  002E34  0E00               	movlw	0
 11713  002E36  6E0D               	movwf	MSC_BufferCopyIntConst@count+1,c
 11714  002E38  0E80               	movlw	128
 11715  002E3A  6E0C               	movwf	MSC_BufferCopyIntConst@count,c
 11716  002E3C  0E00               	movlw	0
 11717  002E3E  6E0F               	movwf	MSC_BufferCopyIntConst@shift+1,c
 11718  002E40  0E00               	movlw	0
 11719  002E42  6E0E               	movwf	MSC_BufferCopyIntConst@shift,c
 11720  002E44  EC03  F008         	call	_MSC_BufferCopyIntConst	;wreg free
 11721  002E48                     i1l6259:
 11722                           
 11723                           ;FLASH.c: 249: }
 11724                           ;FLASH.c: 251: FSH_EraseBlock(&IR_SavedTiming);
 11725  002E48  0E00               	movlw	0
 11726  002E4A  6E05               	movwf	FSH_EraseBlock@Address,c
 11727  002E4C  0E24               	movlw	36
 11728  002E4E  6E06               	movwf	FSH_EraseBlock@Address+1,c
 11729  002E50  0E00               	movlw	0
 11730  002E52  6E07               	movwf	FSH_EraseBlock@Address+2,c
 11731  002E54  0E00               	movlw	0
 11732  002E56  6E08               	movwf	FSH_EraseBlock@Address+3,c
 11733  002E58  EC8F  F00A         	call	_FSH_EraseBlock	;wreg free
 11734                           
 11735                           ;FLASH.c: 256: WriteTries = 1;
 11736  002E5C  0E01               	movlw	1
 11737  002E5E  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11738  002E60                     i1l6263:
 11739                           
 11740                           ;FLASH.c: 261: FSH_WriteIntArray(&IR_SavedTiming[0], &IR_DataTiming[0]);
 11741  002E60  0E00               	movlw	0
 11742  002E62  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 11743  002E64  0E24               	movlw	36
 11744  002E66  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 11745  002E68  0E00               	movlw	0
 11746  002E6A  6E07               	movwf	FSH_WriteIntArray@ConstArray+2,c
 11747  002E6C  0E00               	movlw	low _IR_DataTiming
 11748  002E6E  6E08               	movwf	FSH_WriteIntArray@Array,c
 11749  002E70  0E02               	movlw	high _IR_DataTiming
 11750  002E72  6E09               	movwf	FSH_WriteIntArray@Array+1,c
 11751  002E74  EC81  F009         	call	_FSH_WriteIntArray	;wreg free
 11752                           
 11753                           ;FLASH.c: 264: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[0],&IR_DataTiming[0]))
 11754  002E78  0E00               	movlw	0
 11755  002E7A  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11756  002E7C  0E24               	movlw	36
 11757  002E7E  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11758  002E80  0E00               	movlw	0
 11759  002E82  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11760  002E84  0E00               	movlw	low _IR_DataTiming
 11761  002E86  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11762  002E88  0E02               	movlw	high _IR_DataTiming
 11763  002E8A  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11764  002E8C  ECBE  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 11765  002E90  0900               	iorlw	0
 11766  002E92  A4D8               	btfss	status,2,c
 11767  002E94  D005               	goto	i1l6275
 11768                           
 11769                           ;FLASH.c: 265: {
 11770                           ;FLASH.c: 266: WriteTries++;
 11771  002E96  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11772                           
 11773                           ;FLASH.c: 267: if(WriteTries > 10)
 11774  002E98  0E0A               	movlw	10
 11775  002E9A  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11776  002E9C  D7E1               	goto	i1l6263
 11777  002E9E  D15B               	goto	i1l6409
 11778  002EA0                     i1l6275:
 11779                           
 11780                           ;FLASH.c: 275: }
 11781                           ;FLASH.c: 276: }
 11782                           ;FLASH.c: 279: WriteTries = 1;
 11783  002EA0  0E01               	movlw	1
 11784  002EA2  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11785  002EA4                     i1l6277:
 11786                           
 11787                           ;FLASH.c: 284: FSH_WriteIntArray(&IR_SavedTiming[32], &IR_DataTiming[32]);
 11788  002EA4  0E40               	movlw	64
 11789  002EA6  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 11790  002EA8  0E24               	movlw	36
 11791  002EAA  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 11792  002EAC  0E00               	movlw	0
 11793  002EAE  6E07               	movwf	FSH_WriteIntArray@ConstArray+2,c
 11794  002EB0  0E40               	movlw	low (_IR_DataTiming+64)
 11795  002EB2  6E08               	movwf	FSH_WriteIntArray@Array,c
 11796  002EB4  0E02               	movlw	high (_IR_DataTiming+64)
 11797  002EB6  6E09               	movwf	FSH_WriteIntArray@Array+1,c
 11798  002EB8  EC81  F009         	call	_FSH_WriteIntArray	;wreg free
 11799                           
 11800                           ;FLASH.c: 287: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[32],&IR_DataTiming[32]))
 11801  002EBC  0E40               	movlw	64
 11802  002EBE  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11803  002EC0  0E24               	movlw	36
 11804  002EC2  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11805  002EC4  0E00               	movlw	0
 11806  002EC6  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11807  002EC8  0E40               	movlw	low (_IR_DataTiming+64)
 11808  002ECA  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11809  002ECC  0E02               	movlw	high (_IR_DataTiming+64)
 11810  002ECE  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11811  002ED0  ECBE  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 11812  002ED4  0900               	iorlw	0
 11813  002ED6  A4D8               	btfss	status,2,c
 11814  002ED8  D005               	goto	i1l6289
 11815                           
 11816                           ;FLASH.c: 288: {
 11817                           ;FLASH.c: 289: WriteTries++;
 11818  002EDA  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11819                           
 11820                           ;FLASH.c: 290: if(WriteTries > 10)
 11821  002EDC  0E0A               	movlw	10
 11822  002EDE  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11823  002EE0  D7E1               	goto	i1l6277
 11824  002EE2  D139               	goto	i1l6409
 11825  002EE4                     i1l6289:
 11826                           
 11827                           ;FLASH.c: 298: }
 11828                           ;FLASH.c: 299: }
 11829                           ;FLASH.c: 302: WriteTries = 1;
 11830  002EE4  0E01               	movlw	1
 11831  002EE6  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11832  002EE8                     i1l6291:
 11833                           
 11834                           ;FLASH.c: 307: FSH_WriteIntArray(&IR_SavedTiming[64], &IR_DataTiming[64]);
 11835  002EE8  0E80               	movlw	128
 11836  002EEA  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 11837  002EEC  0E24               	movlw	36
 11838  002EEE  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 11839  002EF0  0E00               	movlw	0
 11840  002EF2  6E07               	movwf	FSH_WriteIntArray@ConstArray+2,c
 11841  002EF4  0E80               	movlw	low (_IR_DataTiming+128)
 11842  002EF6  6E08               	movwf	FSH_WriteIntArray@Array,c
 11843  002EF8  0E02               	movlw	high (_IR_DataTiming+128)
 11844  002EFA  6E09               	movwf	FSH_WriteIntArray@Array+1,c
 11845  002EFC  EC81  F009         	call	_FSH_WriteIntArray	;wreg free
 11846                           
 11847                           ;FLASH.c: 310: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[64],&IR_DataTiming[64]))
 11848  002F00  0E80               	movlw	128
 11849  002F02  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11850  002F04  0E24               	movlw	36
 11851  002F06  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11852  002F08  0E00               	movlw	0
 11853  002F0A  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11854  002F0C  0E80               	movlw	low (_IR_DataTiming+128)
 11855  002F0E  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11856  002F10  0E02               	movlw	high (_IR_DataTiming+128)
 11857  002F12  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11858  002F14  ECBE  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 11859  002F18  0900               	iorlw	0
 11860  002F1A  A4D8               	btfss	status,2,c
 11861  002F1C  D005               	goto	i1l6303
 11862                           
 11863                           ;FLASH.c: 311: {
 11864                           ;FLASH.c: 312: WriteTries++;
 11865  002F1E  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11866                           
 11867                           ;FLASH.c: 313: if(WriteTries > 10)
 11868  002F20  0E0A               	movlw	10
 11869  002F22  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11870  002F24  D7E1               	goto	i1l6291
 11871  002F26  D117               	goto	i1l6409
 11872  002F28                     i1l6303:
 11873                           
 11874                           ;FLASH.c: 321: }
 11875                           ;FLASH.c: 322: }
 11876                           ;FLASH.c: 325: WriteTries = 1;
 11877  002F28  0E01               	movlw	1
 11878  002F2A  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11879  002F2C                     i1l6305:
 11880                           
 11881                           ;FLASH.c: 330: FSH_WriteIntArray(&IR_SavedTiming[96], &IR_DataTiming[96]);
 11882  002F2C  0EC0               	movlw	192
 11883  002F2E  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 11884  002F30  0E24               	movlw	36
 11885  002F32  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 11886  002F34  0E00               	movlw	0
 11887  002F36  6E07               	movwf	FSH_WriteIntArray@ConstArray+2,c
 11888  002F38  0EC0               	movlw	low (_IR_DataTiming+192)
 11889  002F3A  6E08               	movwf	FSH_WriteIntArray@Array,c
 11890  002F3C  0E02               	movlw	high (_IR_DataTiming+192)
 11891  002F3E  6E09               	movwf	FSH_WriteIntArray@Array+1,c
 11892  002F40  EC81  F009         	call	_FSH_WriteIntArray	;wreg free
 11893                           
 11894                           ;FLASH.c: 333: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[96],&IR_DataTiming[96]))
 11895  002F44  0EC0               	movlw	192
 11896  002F46  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11897  002F48  0E24               	movlw	36
 11898  002F4A  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11899  002F4C  0E00               	movlw	0
 11900  002F4E  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11901  002F50  0EC0               	movlw	low (_IR_DataTiming+192)
 11902  002F52  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11903  002F54  0E02               	movlw	high (_IR_DataTiming+192)
 11904  002F56  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11905  002F58  ECBE  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 11906  002F5C  0900               	iorlw	0
 11907  002F5E  A4D8               	btfss	status,2,c
 11908  002F60  D005               	goto	i1l6317
 11909                           
 11910                           ;FLASH.c: 334: {
 11911                           ;FLASH.c: 335: WriteTries++;
 11912  002F62  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11913                           
 11914                           ;FLASH.c: 336: if(WriteTries > 10)
 11915  002F64  0E0A               	movlw	10
 11916  002F66  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11917  002F68  D7E1               	goto	i1l6305
 11918  002F6A  D0F5               	goto	i1l6409
 11919  002F6C                     i1l6317:
 11920                           
 11921                           ;FLASH.c: 344: }
 11922                           ;FLASH.c: 345: }
 11923                           ;FLASH.c: 348: WriteTries = 1;
 11924  002F6C  0E01               	movlw	1
 11925  002F6E  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11926  002F70                     i1l6319:
 11927                           
 11928                           ;FLASH.c: 353: FSH_WriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]);
 11929  002F70  0E00               	movlw	0
 11930  002F72  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 11931  002F74  0E25               	movlw	37
 11932  002F76  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 11933  002F78  0E00               	movlw	0
 11934  002F7A  6E07               	movwf	FSH_WriteIntArray@ConstArray+2,c
 11935  002F7C  0E00               	movlw	low _RF_DataTiming
 11936  002F7E  6E08               	movwf	FSH_WriteIntArray@Array,c
 11937  002F80  0E03               	movlw	high _RF_DataTiming
 11938  002F82  6E09               	movwf	FSH_WriteIntArray@Array+1,c
 11939  002F84  EC81  F009         	call	_FSH_WriteIntArray	;wreg free
 11940                           
 11941                           ;FLASH.c: 356: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]))
 11942  002F88  0E00               	movlw	0
 11943  002F8A  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11944  002F8C  0E25               	movlw	37
 11945  002F8E  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11946  002F90  0E00               	movlw	0
 11947  002F92  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11948  002F94  0E00               	movlw	low _RF_DataTiming
 11949  002F96  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11950  002F98  0E03               	movlw	high _RF_DataTiming
 11951  002F9A  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11952  002F9C  ECBE  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 11953  002FA0  0900               	iorlw	0
 11954  002FA2  A4D8               	btfss	status,2,c
 11955  002FA4  D005               	goto	i1l6331
 11956                           
 11957                           ;FLASH.c: 357: {
 11958                           ;FLASH.c: 358: WriteTries++;
 11959  002FA6  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 11960                           
 11961                           ;FLASH.c: 359: if(WriteTries > 10)
 11962  002FA8  0E0A               	movlw	10
 11963  002FAA  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 11964  002FAC  D7E1               	goto	i1l6319
 11965  002FAE  D0D3               	goto	i1l6409
 11966  002FB0                     i1l6331:
 11967                           
 11968                           ;FLASH.c: 367: }
 11969                           ;FLASH.c: 368: }
 11970                           ;FLASH.c: 371: WriteTries = 1;
 11971  002FB0  0E01               	movlw	1
 11972  002FB2  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 11973  002FB4                     i1l6333:
 11974                           
 11975                           ;FLASH.c: 376: FSH_WriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]);
 11976  002FB4  0E40               	movlw	64
 11977  002FB6  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 11978  002FB8  0E25               	movlw	37
 11979  002FBA  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 11980  002FBC  0E00               	movlw	0
 11981  002FBE  6E07               	movwf	FSH_WriteIntArray@ConstArray+2,c
 11982  002FC0  0E40               	movlw	low (_RF_DataTiming+64)
 11983  002FC2  6E08               	movwf	FSH_WriteIntArray@Array,c
 11984  002FC4  0E03               	movlw	high (_RF_DataTiming+64)
 11985  002FC6  6E09               	movwf	FSH_WriteIntArray@Array+1,c
 11986  002FC8  EC81  F009         	call	_FSH_WriteIntArray	;wreg free
 11987                           
 11988                           ;FLASH.c: 379: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]))
 11989  002FCC  0E40               	movlw	64
 11990  002FCE  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 11991  002FD0  0E25               	movlw	37
 11992  002FD2  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 11993  002FD4  0E00               	movlw	0
 11994  002FD6  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 11995  002FD8  0E40               	movlw	low (_RF_DataTiming+64)
 11996  002FDA  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 11997  002FDC  0E03               	movlw	high (_RF_DataTiming+64)
 11998  002FDE  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 11999  002FE0  ECBE  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 12000  002FE4  0900               	iorlw	0
 12001  002FE6  A4D8               	btfss	status,2,c
 12002  002FE8  D005               	goto	i1l6345
 12003                           
 12004                           ;FLASH.c: 380: {
 12005                           ;FLASH.c: 381: WriteTries++;
 12006  002FEA  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12007                           
 12008                           ;FLASH.c: 382: if(WriteTries > 10)
 12009  002FEC  0E0A               	movlw	10
 12010  002FEE  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12011  002FF0  D7E1               	goto	i1l6333
 12012  002FF2  D0B1               	goto	i1l6409
 12013  002FF4                     i1l6345:
 12014                           
 12015                           ;FLASH.c: 390: }
 12016                           ;FLASH.c: 391: }
 12017                           ;FLASH.c: 394: WriteTries = 1;
 12018  002FF4  0E01               	movlw	1
 12019  002FF6  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12020  002FF8                     i1l6347:
 12021                           
 12022                           ;FLASH.c: 399: FSH_WriteIntArray(&RF_SavedTiming[64],&RF_DataTiming[64]);
 12023  002FF8  0E80               	movlw	128
 12024  002FFA  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12025  002FFC  0E25               	movlw	37
 12026  002FFE  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12027  003000  0E00               	movlw	0
 12028  003002  6E07               	movwf	FSH_WriteIntArray@ConstArray+2,c
 12029  003004  0E80               	movlw	low (_RF_DataTiming+128)
 12030  003006  6E08               	movwf	FSH_WriteIntArray@Array,c
 12031  003008  0E03               	movlw	high (_RF_DataTiming+128)
 12032  00300A  6E09               	movwf	FSH_WriteIntArray@Array+1,c
 12033  00300C  EC81  F009         	call	_FSH_WriteIntArray	;wreg free
 12034                           
 12035                           ;FLASH.c: 402: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[64],&RF_DataTiming[64]))
 12036  003010  0E80               	movlw	128
 12037  003012  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12038  003014  0E25               	movlw	37
 12039  003016  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12040  003018  0E00               	movlw	0
 12041  00301A  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12042  00301C  0E80               	movlw	low (_RF_DataTiming+128)
 12043  00301E  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 12044  003020  0E03               	movlw	high (_RF_DataTiming+128)
 12045  003022  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 12046  003024  ECBE  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 12047  003028  0900               	iorlw	0
 12048  00302A  A4D8               	btfss	status,2,c
 12049  00302C  D005               	goto	i1l6359
 12050                           
 12051                           ;FLASH.c: 403: {
 12052                           ;FLASH.c: 404: WriteTries++;
 12053  00302E  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12054                           
 12055                           ;FLASH.c: 405: if(WriteTries > 10)
 12056  003030  0E0A               	movlw	10
 12057  003032  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12058  003034  D7E1               	goto	i1l6347
 12059  003036  D08F               	goto	i1l6409
 12060  003038                     i1l6359:
 12061                           
 12062                           ;FLASH.c: 413: }
 12063                           ;FLASH.c: 414: }
 12064                           ;FLASH.c: 417: WriteTries = 1;
 12065  003038  0E01               	movlw	1
 12066  00303A  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12067  00303C                     i1l6361:
 12068                           
 12069                           ;FLASH.c: 422: FSH_WriteIntArray(&RF_SavedTiming[96],&RF_DataTiming[96]);
 12070  00303C  0EC0               	movlw	192
 12071  00303E  6E05               	movwf	FSH_WriteIntArray@ConstArray,c
 12072  003040  0E25               	movlw	37
 12073  003042  6E06               	movwf	FSH_WriteIntArray@ConstArray+1,c
 12074  003044  0E00               	movlw	0
 12075  003046  6E07               	movwf	FSH_WriteIntArray@ConstArray+2,c
 12076  003048  0EC0               	movlw	low (_RF_DataTiming+192)
 12077  00304A  6E08               	movwf	FSH_WriteIntArray@Array,c
 12078  00304C  0E03               	movlw	high (_RF_DataTiming+192)
 12079  00304E  6E09               	movwf	FSH_WriteIntArray@Array+1,c
 12080  003050  EC81  F009         	call	_FSH_WriteIntArray	;wreg free
 12081                           
 12082                           ;FLASH.c: 425: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[96],&RF_DataTiming[96]))
 12083  003054  0EC0               	movlw	192
 12084  003056  6E01               	movwf	FSH_VerifyWriteIntArray@ConstArray,c
 12085  003058  0E25               	movlw	37
 12086  00305A  6E02               	movwf	FSH_VerifyWriteIntArray@ConstArray+1,c
 12087  00305C  0E00               	movlw	0
 12088  00305E  6E03               	movwf	FSH_VerifyWriteIntArray@ConstArray+2,c
 12089  003060  0EC0               	movlw	low (_RF_DataTiming+192)
 12090  003062  6E04               	movwf	FSH_VerifyWriteIntArray@Array,c
 12091  003064  0E03               	movlw	high (_RF_DataTiming+192)
 12092  003066  6E05               	movwf	FSH_VerifyWriteIntArray@Array+1,c
 12093  003068  ECBE  F009         	call	_FSH_VerifyWriteIntArray	;wreg free
 12094  00306C  0900               	iorlw	0
 12095  00306E  A4D8               	btfss	status,2,c
 12096  003070  D005               	goto	i1l6373
 12097                           
 12098                           ;FLASH.c: 426: {
 12099                           ;FLASH.c: 427: WriteTries++;
 12100  003072  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12101                           
 12102                           ;FLASH.c: 428: if(WriteTries > 10)
 12103  003074  0E0A               	movlw	10
 12104  003076  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12105  003078  D7E1               	goto	i1l6361
 12106  00307A  D06D               	goto	i1l6409
 12107  00307C                     i1l6373:
 12108                           
 12109                           ;FLASH.c: 436: }
 12110                           ;FLASH.c: 437: }
 12111                           ;FLASH.c: 440: for(j=8;j<16;j++)
 12112  00307C  0E08               	movlw	8
 12113  00307E  6E1C               	movwf	FSH_Write_IR_RF@j,c
 12114  003080                     i1l6375:
 12115  003080  0E0F               	movlw	15
 12116  003082  641C               	cpfsgt	FSH_Write_IR_RF@j,c
 12117  003084  D001               	goto	i1l6379
 12118  003086  D070               	goto	i1l6421
 12119  003088                     i1l6379:
 12120                           
 12121                           ;FLASH.c: 441: {
 12122                           ;FLASH.c: 442: WriteTries = 1;
 12123  003088  0E01               	movlw	1
 12124  00308A  6E20               	movwf	FSH_Write_IR_RF@WriteTries,c
 12125  00308C                     i1l1244:
 12126                           
 12127                           ;FLASH.c: 445: i=0;
 12128  00308C  0E00               	movlw	0
 12129  00308E  6E1F               	movwf	FSH_Write_IR_RF@i+1,c
 12130  003090  0E00               	movlw	0
 12131  003092  6E1E               	movwf	FSH_Write_IR_RF@i,c
 12132                           
 12133                           ;FLASH.c: 446: FlashWasteindex = i + 64*(j-8);
 12134  003094  501C               	movf	FSH_Write_IR_RF@j,w,c
 12135  003096  6E12               	movwf	??_FSH_Write_IR_RF& (0+255),c
 12136  003098  6A13               	clrf	(??_FSH_Write_IR_RF+1)& (0+255),c
 12137  00309A  0E06               	movlw	6
 12138  00309C                     i1u681_25:
 12139  00309C  90D8               	bcf	status,0,c
 12140  00309E  3612               	rlcf	??_FSH_Write_IR_RF,f,c
 12141  0030A0  3613               	rlcf	??_FSH_Write_IR_RF+1,f,c
 12142  0030A2  2EE8               	decfsz	wreg,f,c
 12143  0030A4  D7FB               	goto	i1u681_25
 12144  0030A6  501E               	movf	FSH_Write_IR_RF@i,w,c
 12145  0030A8  2612               	addwf	??_FSH_Write_IR_RF,f,c
 12146  0030AA  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 12147  0030AC  2213               	addwfc	??_FSH_Write_IR_RF+1,f,c
 12148  0030AE  0E00               	movlw	0
 12149  0030B0  2412               	addwf	??_FSH_Write_IR_RF,w,c
 12150  0030B2  6E1A               	movwf	FSH_Write_IR_RF@FlashWasteindex,c
 12151  0030B4  0EFE               	movlw	254
 12152  0030B6  2013               	addwfc	??_FSH_Write_IR_RF+1,w,c
 12153  0030B8  6E1B               	movwf	FSH_Write_IR_RF@FlashWasteindex+1,c
 12154                           
 12155                           ;FLASH.c: 447: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 12156  0030BA  0E00               	movlw	0
 12157  0030BC  6E12               	movwf	??_FSH_Write_IR_RF& (0+255),c
 12158  0030BE  0E26               	movlw	38
 12159  0030C0  6E13               	movwf	(??_FSH_Write_IR_RF+1)& (0+255),c
 12160  0030C2  0E00               	movlw	0
 12161  0030C4  6E14               	movwf	(??_FSH_Write_IR_RF+2)& (0+255),c
 12162  0030C6  501A               	movf	FSH_Write_IR_RF@FlashWasteindex,w,c
 12163  0030C8  2412               	addwf	??_FSH_Write_IR_RF,w,c
 12164  0030CA  6E15               	movwf	(??_FSH_Write_IR_RF+3)& (0+255),c
 12165  0030CC  501B               	movf	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 12166  0030CE  2013               	addwfc	??_FSH_Write_IR_RF+1,w,c
 12167  0030D0  6E16               	movwf	(??_FSH_Write_IR_RF+4)& (0+255),c
 12168  0030D2  0E00               	movlw	0
 12169  0030D4  2014               	addwfc	??_FSH_Write_IR_RF+2,w,c
 12170  0030D6  6E17               	movwf	(??_FSH_Write_IR_RF+5)& (0+255),c
 12171  0030D8  5015               	movf	??_FSH_Write_IR_RF+3,w,c
 12172  0030DA  6E01               	movwf	FSH_AddressToBlock@Address,c
 12173  0030DC  5016               	movf	??_FSH_Write_IR_RF+4,w,c
 12174  0030DE  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 12175  0030E0  5017               	movf	??_FSH_Write_IR_RF+5,w,c
 12176  0030E2  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 12177  0030E4  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 12178  0030E6  ECC0  F00C         	call	_FSH_AddressToBlock	;wreg free
 12179                           
 12180                           ;FLASH.c: 448: for(i = 0; i<64; i++)
 12181  0030EA  0E00               	movlw	0
 12182  0030EC  6E1F               	movwf	FSH_Write_IR_RF@i+1,c
 12183  0030EE  0E00               	movlw	0
 12184  0030F0  6E1E               	movwf	FSH_Write_IR_RF@i,c
 12185  0030F2  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 12186  0030F4  E10C               	bnz	i1l1246
 12187  0030F6  0E40               	movlw	64
 12188  0030F8  5C1E               	subwf	FSH_Write_IR_RF@i,w,c
 12189  0030FA  B0D8               	btfsc	status,0,c
 12190  0030FC  D008               	goto	i1l1246
 12191                           
 12192                           ;FLASH.c: 449: {
 12193                           ;FLASH.c: 451: TABLAT = 0xDA;
 12194  0030FE  0EDA               	movlw	218
 12195  003100  6EF5               	movwf	tablat,c	;volatile
 12196  003102  000D               	tblwt		*+	;# 
 12197  003104  4A1E               	infsnz	FSH_Write_IR_RF@i,f,c
 12198  003106  2A1F               	incf	FSH_Write_IR_RF@i+1,f,c
 12199  003108  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 12200  00310A  E101               	bnz	i1u683_20
 12201  00310C  D7F4               	goto	L7
 12202  00310E                     i1u683_20:
 12203  00310E                     i1l1246:
 12204                           
 12205                           ;FLASH.c: 453: }
 12206                           ;FLASH.c: 454: EECON1bits.FREE = 0;
 12207  00310E  98A6               	bcf	4006,4,c	;volatile
 12208  003110  84A6               	bsf	4006,2,c	;# 
 12209  003112  9EF2               	bcf	intcon,7,c	;# 
 12210  003114  0E55               	movlw	85	;# 
 12211  003116  6EA7               	movwf	4007,c	;# 
 12212  003118  0EAA               	movlw	170	;# 
 12213  00311A  6EA7               	movwf	4007,c	;# 
 12214  00311C  82A6               	bsf	4006,1,c	;# 
 12215                           
 12216                           ;FLASH.c: 465: for(i=0; i<64;i++)
 12217  00311E  0E00               	movlw	0
 12218  003120  6E1F               	movwf	FSH_Write_IR_RF@i+1,c
 12219  003122  0E00               	movlw	0
 12220  003124  6E1E               	movwf	FSH_Write_IR_RF@i,c
 12221  003126                     i1l6399:
 12222  003126  501F               	movf	FSH_Write_IR_RF@i+1,w,c
 12223  003128  E11D               	bnz	i1l6417
 12224  00312A  0E40               	movlw	64
 12225  00312C  5C1E               	subwf	FSH_Write_IR_RF@i,w,c
 12226  00312E  B0D8               	btfsc	status,0,c
 12227  003130  D019               	goto	i1l6417
 12228                           
 12229                           ;FLASH.c: 466: {
 12230                           ;FLASH.c: 467: if(FlashWaste[FlashWasteindex] != 0xDA)
 12231  003132  0E00               	movlw	0
 12232  003134  241A               	addwf	FSH_Write_IR_RF@FlashWasteindex,w,c
 12233  003136  6EF6               	movwf	tblptrl,c
 12234  003138  0E26               	movlw	38
 12235  00313A  201B               	addwfc	FSH_Write_IR_RF@FlashWasteindex+1,w,c
 12236  00313C  6EF7               	movwf	tblptrh,c
 12237  00313E  6AF8               	clrf	tblptru,c
 12238  003140  0E00               	movlw	0
 12239  003142  22F8               	addwfc	tblptru,f,c
 12240  003144  0008               	tblrd		*
 12241  003146  50F5               	movf	tablat,w,c
 12242  003148  0ADA               	xorlw	218
 12243  00314A  B4D8               	btfsc	status,2,c
 12244  00314C  D006               	goto	i1l6413
 12245                           
 12246                           ;FLASH.c: 468: {
 12247                           ;FLASH.c: 469: WriteTries++;
 12248  00314E  2A20               	incf	FSH_Write_IR_RF@WriteTries,f,c
 12249                           
 12250                           ;FLASH.c: 470: if(WriteTries > 10)
 12251  003150  0E0A               	movlw	10
 12252  003152  6420               	cpfsgt	FSH_Write_IR_RF@WriteTries,c
 12253  003154  D79B               	goto	i1l1244
 12254  003156                     i1l6409:
 12255                           
 12256                           ;FLASH.c: 471: {
 12257                           ;FLASH.c: 472: status = 0;
 12258  003156  0E00               	movlw	0
 12259  003158  D008               	goto	L6
 12260  00315A                     i1l6413:
 12261                           
 12262                           ;FLASH.c: 478: }
 12263                           ;FLASH.c: 479: }
 12264                           ;FLASH.c: 480: FlashWasteindex++;
 12265  00315A  4A1A               	infsnz	FSH_Write_IR_RF@FlashWasteindex,f,c
 12266  00315C  2A1B               	incf	FSH_Write_IR_RF@FlashWasteindex+1,f,c
 12267  00315E  4A1E               	infsnz	FSH_Write_IR_RF@i,f,c
 12268  003160  2A1F               	incf	FSH_Write_IR_RF@i+1,f,c
 12269  003162  D7E1               	goto	i1l6399
 12270  003164                     i1l6417:
 12271  003164  2A1C               	incf	FSH_Write_IR_RF@j,f,c
 12272  003166  D78C               	goto	i1l6375
 12273  003168                     i1l6421:
 12274                           
 12275                           ;FLASH.c: 481: }
 12276                           ;FLASH.c: 482: }
 12277                           ;FLASH.c: 483: status = 1;
 12278  003168  0E01               	movlw	1
 12279  00316A                     L6:
 12280  00316A  6E1D               	movwf	FSH_Write_IR_RF@status,c
 12281  00316C                     i1l1205:
 12282                           
 12283                           ;FLASH.c: 486: if(highint)
 12284  00316C  5018               	movf	FSH_Write_IR_RF@highint,w,c
 12285  00316E  A4D8               	btfss	status,2,c
 12286                           
 12287                           ;FLASH.c: 487: {
 12288                           ;FLASH.c: 488: INTCONbits.GIE = 1;
 12289  003170  8EF2               	bsf	intcon,7,c	;volatile
 12290                           
 12291                           ;FLASH.c: 489: }
 12292                           ;FLASH.c: 490: if(lowint)
 12293  003172  5019               	movf	FSH_Write_IR_RF@lowint,w,c
 12294  003174  A4D8               	btfss	status,2,c
 12295                           
 12296                           ;FLASH.c: 491: {
 12297                           ;FLASH.c: 492: INTCONbits.PEIE = 1;
 12298  003176  8CF2               	bsf	intcon,6,c	;volatile
 12299                           
 12300                           ;FLASH.c: 493: }
 12301                           ;FLASH.c: 494: return status;
 12302  003178  501D               	movf	FSH_Write_IR_RF@status,w,c
 12303  00317A  0012               	return	
 12304  00317C                     __end_of_FSH_Write_IR_RF:
 12305                           	opt stack 0
 12306                           pclatu	equ	0xFFB
 12307                           pclath	equ	0xFFA
 12308                           tblptru	equ	0xFF8
 12309                           tblptrh	equ	0xFF7
 12310                           tblptrl	equ	0xFF6
 12311                           tablat	equ	0xFF5
 12312                           prodh	equ	0xFF4
 12313                           prodl	equ	0xFF3
 12314                           intcon	equ	0xFF2
 12315                           intcon2	equ	0xFF1
 12316                           intcon3	equ	0xFF0
 12317                           postinc0	equ	0xFEE
 12318                           fsr0h	equ	0xFEA
 12319                           fsr0l	equ	0xFE9
 12320                           wreg	equ	0xFE8
 12321                           postdec1	equ	0xFE5
 12322                           fsr1h	equ	0xFE2
 12323                           fsr1l	equ	0xFE1
 12324                           bsr	equ	0xFE0
 12325                           postinc2	equ	0xFDE
 12326                           postdec2	equ	0xFDD
 12327                           plusw2	equ	0xFDB
 12328                           fsr2h	equ	0xFDA
 12329                           fsr2l	equ	0xFD9
 12330                           status	equ	0xFD8
 12331                           
 12332 ;; *************** function _RF_ResetData *****************
 12333 ;; Defined at:
 12334 ;;		line 221 in file "RF.c"
 12335 ;; Parameters:    Size  Location     Type
 12336 ;;		None
 12337 ;; Auto vars:     Size  Location     Type
 12338 ;;		None
 12339 ;; Return value:  Size  Location     Type
 12340 ;;		None               void
 12341 ;; Registers used:
 12342 ;;		wreg, status,2
 12343 ;; Tracked objects:
 12344 ;;		On entry : 0/0
 12345 ;;		On exit  : 0/0
 12346 ;;		Unchanged: 0/0
 12347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12348 ;;      Params:         0       0       0       0       0
 12349 ;;      Locals:         0       0       0       0       0
 12350 ;;      Temps:          0       0       0       0       0
 12351 ;;      Totals:         0       0       0       0       0
 12352 ;;Total ram usage:        0 bytes
 12353 ;; Hardware stack levels used:    1
 12354 ;; Hardware stack levels required when called:    6
 12355 ;; This function calls:
 12356 ;;		Nothing
 12357 ;; This function is called by:
 12358 ;;		_FSH_Write_IR_RF
 12359 ;; This function uses a non-reentrant model
 12360 ;;
 12361                           
 12362                           	psect	text78
 12363  001F34                     __ptext78:
 12364                           	opt stack 0
 12365  001F34                     _RF_ResetData:
 12366                           	opt stack 15
 12367                           
 12368                           ;RF.c: 223: RF_DataPlace = 0;
 12369                           
 12370                           ;incstack = 0
 12371  001F34  0E00               	movlw	0
 12372  001F36  0100               	movlb	0	; () banked
 12373  001F38  6FC8               	movwf	_RF_DataPlace& (0+255),b
 12374                           
 12375                           ;RF.c: 224: RFStarted = 0;
 12376  001F3A  0E00               	movlw	0
 12377  001F3C  0100               	movlb	0	; () banked
 12378  001F3E  6FC5               	movwf	_RFStarted& (0+255),b
 12379                           
 12380                           ; BSR set to: 0
 12381  001F40  0012               	return		;funcret
 12382  001F42                     __end_of_RF_ResetData:
 12383                           	opt stack 0
 12384                           pclatu	equ	0xFFB
 12385                           pclath	equ	0xFFA
 12386                           tblptru	equ	0xFF8
 12387                           tblptrh	equ	0xFF7
 12388                           tblptrl	equ	0xFF6
 12389                           tablat	equ	0xFF5
 12390                           prodh	equ	0xFF4
 12391                           prodl	equ	0xFF3
 12392                           intcon	equ	0xFF2
 12393                           intcon2	equ	0xFF1
 12394                           intcon3	equ	0xFF0
 12395                           postinc0	equ	0xFEE
 12396                           fsr0h	equ	0xFEA
 12397                           fsr0l	equ	0xFE9
 12398                           wreg	equ	0xFE8
 12399                           postdec1	equ	0xFE5
 12400                           fsr1h	equ	0xFE2
 12401                           fsr1l	equ	0xFE1
 12402                           bsr	equ	0xFE0
 12403                           postinc2	equ	0xFDE
 12404                           postdec2	equ	0xFDD
 12405                           plusw2	equ	0xFDB
 12406                           fsr2h	equ	0xFDA
 12407                           fsr2l	equ	0xFD9
 12408                           status	equ	0xFD8
 12409                           
 12410 ;; *************** function _MSC_BufferCopyIntConst *****************
 12411 ;; Defined at:
 12412 ;;		line 238 in file "MISC.c"
 12413 ;; Parameters:    Size  Location     Type
 12414 ;;  from            3    6[COMRAM] PTR const unsigned int 
 12415 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 12416 ;;  to              2    9[COMRAM] PTR unsigned int 
 12417 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 12418 ;;  count           2   11[COMRAM] unsigned int 
 12419 ;;  shift           2   13[COMRAM] unsigned int 
 12420 ;; Auto vars:     Size  Location     Type
 12421 ;;  i               2   15[COMRAM] unsigned int 
 12422 ;; Return value:  Size  Location     Type
 12423 ;;		None               void
 12424 ;; Registers used:
 12425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12426 ;; Tracked objects:
 12427 ;;		On entry : 0/0
 12428 ;;		On exit  : 0/0
 12429 ;;		Unchanged: 0/0
 12430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12431 ;;      Params:         9       0       0       0       0
 12432 ;;      Locals:         2       0       0       0       0
 12433 ;;      Temps:          0       0       0       0       0
 12434 ;;      Totals:        11       0       0       0       0
 12435 ;;Total ram usage:       11 bytes
 12436 ;; Hardware stack levels used:    1
 12437 ;; Hardware stack levels required when called:    7
 12438 ;; This function calls:
 12439 ;;		i1_MSC_CleanBufferInt
 12440 ;; This function is called by:
 12441 ;;		_FSH_Write_IR_RF
 12442 ;; This function uses a non-reentrant model
 12443 ;;
 12444                           
 12445                           	psect	text79
 12446  001006                     __ptext79:
 12447                           	opt stack 0
 12448  001006                     _MSC_BufferCopyIntConst:
 12449                           	opt stack 14
 12450                           
 12451                           ;MISC.c: 240: unsigned int i=0;
 12452                           
 12453                           ; BSR set to: 0
 12454                           ;incstack = 0
 12455  001006  0E00               	movlw	0
 12456  001008  6E11               	movwf	MSC_BufferCopyIntConst@i+1,c
 12457  00100A  0E00               	movlw	0
 12458  00100C  6E10               	movwf	MSC_BufferCopyIntConst@i,c
 12459                           
 12460                           ;MISC.c: 241: MSC_CleanBufferInt(to,count);
 12461  00100E  C00A  F001         	movff	MSC_BufferCopyIntConst@to,i1MSC_CleanBufferInt@data
 12462  001012  C00B  F002         	movff	MSC_BufferCopyIntConst@to+1,i1MSC_CleanBufferInt@data+1
 12463  001016  C00C  F003         	movff	MSC_BufferCopyIntConst@count,i1MSC_CleanBufferInt@count
 12464  00101A  C00D  F004         	movff	MSC_BufferCopyIntConst@count+1,i1MSC_CleanBufferInt@count+1
 12465  00101E  EC73  F00B         	call	i1_MSC_CleanBufferInt	;wreg free
 12466                           
 12467                           ;MISC.c: 242: for(i = shift; i>0; i--)
 12468  001022  C00E  F010         	movff	MSC_BufferCopyIntConst@shift,MSC_BufferCopyIntConst@i
 12469  001026  C00F  F011         	movff	MSC_BufferCopyIntConst@shift+1,MSC_BufferCopyIntConst@i+1
 12470  00102A                     i1l5583:
 12471  00102A  5010               	movf	MSC_BufferCopyIntConst@i,w,c
 12472  00102C  1011               	iorwf	MSC_BufferCopyIntConst@i+1,w,c
 12473  00102E  B4D8               	btfsc	status,2,c
 12474  001030  D02D               	goto	i1l5603
 12475                           
 12476                           ;MISC.c: 243: {
 12477                           ;MISC.c: 244: *to = ' ';
 12478  001032  C00A  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
 12479  001036  C00B  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
 12480  00103A  0E20               	movlw	32
 12481  00103C  6EDE               	movwf	postinc2,c
 12482  00103E  0E00               	movlw	0
 12483  001040  6EDD               	movwf	postdec2,c
 12484                           
 12485                           ;MISC.c: 245: to++;
 12486  001042  0E02               	movlw	2
 12487  001044  260A               	addwf	MSC_BufferCopyIntConst@to,f,c
 12488  001046  0E00               	movlw	0
 12489  001048  220B               	addwfc	MSC_BufferCopyIntConst@to+1,f,c
 12490  00104A  0610               	decf	MSC_BufferCopyIntConst@i,f,c
 12491  00104C  A0D8               	btfss	status,0,c
 12492  00104E  0611               	decf	MSC_BufferCopyIntConst@i+1,f,c
 12493  001050  D7EC               	goto	i1l5583
 12494  001052                     i1l5595:
 12495                           
 12496                           ;MISC.c: 248: {
 12497                           ;MISC.c: 249: *to = *from;
 12498  001052  C007  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
 12499  001056  C008  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
 12500  00105A  C009  FFF8         	movff	MSC_BufferCopyIntConst@from+2,tblptru
 12501  00105E  C00A  FFD9         	movff	MSC_BufferCopyIntConst@to,fsr2l
 12502  001062  C00B  FFDA         	movff	MSC_BufferCopyIntConst@to+1,fsr2h
 12503  001066  0009               	tblrd		*+
 12504  001068  CFF5 FFDE          	movff	tablat,postinc2
 12505  00106C  0008               	tblrd		*
 12506  00106E  CFF5 FFDD          	movff	tablat,postdec2
 12507                           
 12508                           ;MISC.c: 250: from++;
 12509  001072  0E02               	movlw	2
 12510  001074  2607               	addwf	MSC_BufferCopyIntConst@from,f,c
 12511  001076  0E00               	movlw	0
 12512  001078  2208               	addwfc	MSC_BufferCopyIntConst@from+1,f,c
 12513  00107A  0E00               	movlw	0
 12514  00107C  2209               	addwfc	MSC_BufferCopyIntConst@from+2,f,c
 12515                           
 12516                           ;MISC.c: 251: to++;
 12517  00107E  0E02               	movlw	2
 12518  001080  260A               	addwf	MSC_BufferCopyIntConst@to,f,c
 12519  001082  0E00               	movlw	0
 12520  001084  220B               	addwfc	MSC_BufferCopyIntConst@to+1,f,c
 12521                           
 12522                           ;MISC.c: 252: count--;
 12523  001086  060C               	decf	MSC_BufferCopyIntConst@count,f,c
 12524  001088  A0D8               	btfss	status,0,c
 12525  00108A  060D               	decf	MSC_BufferCopyIntConst@count+1,f,c
 12526  00108C                     i1l5603:
 12527  00108C  C007  FFF6         	movff	MSC_BufferCopyIntConst@from,tblptrl
 12528  001090  C008  FFF7         	movff	MSC_BufferCopyIntConst@from+1,tblptrh
 12529  001094  C009  FFF8         	movff	MSC_BufferCopyIntConst@from+2,tblptru
 12530  001098  0009               	tblrd		*+
 12531  00109A  50F5               	movf	tablat,w,c
 12532  00109C  0009               	tblrd		*+
 12533  00109E  10F5               	iorwf	tablat,w,c
 12534  0010A0  B4D8               	btfsc	status,2,c
 12535  0010A2  0012               	return	
 12536  0010A4  500C               	movf	MSC_BufferCopyIntConst@count,w,c
 12537  0010A6  100D               	iorwf	MSC_BufferCopyIntConst@count+1,w,c
 12538  0010A8  B4D8               	btfsc	status,2,c
 12539  0010AA  0012               	return	
 12540  0010AC  D7D2               	goto	i1l5595
 12541  0010AE                     __end_of_MSC_BufferCopyIntConst:
 12542                           	opt stack 0
 12543                           pclatu	equ	0xFFB
 12544                           pclath	equ	0xFFA
 12545                           tblptru	equ	0xFF8
 12546                           tblptrh	equ	0xFF7
 12547                           tblptrl	equ	0xFF6
 12548                           tablat	equ	0xFF5
 12549                           prodh	equ	0xFF4
 12550                           prodl	equ	0xFF3
 12551                           intcon	equ	0xFF2
 12552                           intcon2	equ	0xFF1
 12553                           intcon3	equ	0xFF0
 12554                           postinc0	equ	0xFEE
 12555                           fsr0h	equ	0xFEA
 12556                           fsr0l	equ	0xFE9
 12557                           wreg	equ	0xFE8
 12558                           postdec1	equ	0xFE5
 12559                           fsr1h	equ	0xFE2
 12560                           fsr1l	equ	0xFE1
 12561                           bsr	equ	0xFE0
 12562                           postinc2	equ	0xFDE
 12563                           postdec2	equ	0xFDD
 12564                           plusw2	equ	0xFDB
 12565                           fsr2h	equ	0xFDA
 12566                           fsr2l	equ	0xFD9
 12567                           status	equ	0xFD8
 12568                           
 12569 ;; *************** function i1_MSC_CleanBufferInt *****************
 12570 ;; Defined at:
 12571 ;;		line 166 in file "MISC.c"
 12572 ;; Parameters:    Size  Location     Type
 12573 ;;  data            2    0[COMRAM] PTR unsigned int 
 12574 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 12575 ;;  count           2    2[COMRAM] unsigned int 
 12576 ;; Auto vars:     Size  Location     Type
 12577 ;;  MSC_CleanBuf    2    4[COMRAM] unsigned int 
 12578 ;; Return value:  Size  Location     Type
 12579 ;;		None               void
 12580 ;; Registers used:
 12581 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12582 ;; Tracked objects:
 12583 ;;		On entry : 0/0
 12584 ;;		On exit  : 0/0
 12585 ;;		Unchanged: 0/0
 12586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12587 ;;      Params:         4       0       0       0       0
 12588 ;;      Locals:         2       0       0       0       0
 12589 ;;      Temps:          0       0       0       0       0
 12590 ;;      Totals:         6       0       0       0       0
 12591 ;;Total ram usage:        6 bytes
 12592 ;; Hardware stack levels used:    1
 12593 ;; Hardware stack levels required when called:    6
 12594 ;; This function calls:
 12595 ;;		Nothing
 12596 ;; This function is called by:
 12597 ;;		_IR_CleanBuffer
 12598 ;;		_MSC_BufferCopyIntConst
 12599 ;; This function uses a non-reentrant model
 12600 ;;
 12601                           
 12602                           	psect	text80
 12603  0016E6                     __ptext80:
 12604                           	opt stack 0
 12605  0016E6                     i1_MSC_CleanBufferInt:
 12606                           	opt stack 16
 12607                           
 12608                           ;MISC.c: 168: unsigned int i=0;
 12609                           
 12610                           ;incstack = 0
 12611  0016E6  0E00               	movlw	0
 12612  0016E8  6E06               	movwf	i1MSC_CleanBufferInt@i+1,c
 12613  0016EA  0E00               	movlw	0
 12614  0016EC  6E05               	movwf	i1MSC_CleanBufferInt@i,c
 12615                           
 12616                           ;MISC.c: 169: for(i=0; i<count;i++)
 12617  0016EE  0E00               	movlw	0
 12618  0016F0  6E06               	movwf	i1MSC_CleanBufferInt@i+1,c
 12619  0016F2  0E00               	movlw	0
 12620  0016F4  6E05               	movwf	i1MSC_CleanBufferInt@i,c
 12621  0016F6  D00F               	goto	i1l5411
 12622  0016F8                     i1l5407:
 12623                           
 12624                           ;MISC.c: 170: {
 12625                           ;MISC.c: 171: data[i]= 0;
 12626  0016F8  90D8               	bcf	status,0,c
 12627  0016FA  3405               	rlcf	i1MSC_CleanBufferInt@i,w,c
 12628  0016FC  6ED9               	movwf	fsr2l,c
 12629  0016FE  3406               	rlcf	i1MSC_CleanBufferInt@i+1,w,c
 12630  001700  6EDA               	movwf	fsr2h,c
 12631  001702  5001               	movf	i1MSC_CleanBufferInt@data,w,c
 12632  001704  26D9               	addwf	fsr2l,f,c
 12633  001706  5002               	movf	i1MSC_CleanBufferInt@data+1,w,c
 12634  001708  22DA               	addwfc	fsr2h,f,c
 12635  00170A  0E00               	movlw	0
 12636  00170C  6EDE               	movwf	postinc2,c
 12637  00170E  0E00               	movlw	0
 12638  001710  6EDD               	movwf	postdec2,c
 12639  001712  4A05               	infsnz	i1MSC_CleanBufferInt@i,f,c
 12640  001714  2A06               	incf	i1MSC_CleanBufferInt@i+1,f,c
 12641  001716                     i1l5411:
 12642  001716  5003               	movf	i1MSC_CleanBufferInt@count,w,c
 12643  001718  5C05               	subwf	i1MSC_CleanBufferInt@i,w,c
 12644  00171A  5004               	movf	i1MSC_CleanBufferInt@count+1,w,c
 12645  00171C  5806               	subwfb	i1MSC_CleanBufferInt@i+1,w,c
 12646  00171E  B0D8               	btfsc	status,0,c
 12647  001720  0012               	return	
 12648  001722  D7EA               	goto	i1l5407
 12649  001724                     __end_ofi1_MSC_CleanBufferInt:
 12650                           	opt stack 0
 12651                           pclatu	equ	0xFFB
 12652                           pclath	equ	0xFFA
 12653                           tblptru	equ	0xFF8
 12654                           tblptrh	equ	0xFF7
 12655                           tblptrl	equ	0xFF6
 12656                           tablat	equ	0xFF5
 12657                           prodh	equ	0xFF4
 12658                           prodl	equ	0xFF3
 12659                           intcon	equ	0xFF2
 12660                           intcon2	equ	0xFF1
 12661                           intcon3	equ	0xFF0
 12662                           postinc0	equ	0xFEE
 12663                           fsr0h	equ	0xFEA
 12664                           fsr0l	equ	0xFE9
 12665                           wreg	equ	0xFE8
 12666                           postdec1	equ	0xFE5
 12667                           fsr1h	equ	0xFE2
 12668                           fsr1l	equ	0xFE1
 12669                           bsr	equ	0xFE0
 12670                           postinc2	equ	0xFDE
 12671                           postdec2	equ	0xFDD
 12672                           plusw2	equ	0xFDB
 12673                           fsr2h	equ	0xFDA
 12674                           fsr2l	equ	0xFD9
 12675                           status	equ	0xFD8
 12676                           
 12677 ;; *************** function _IR_ResetData *****************
 12678 ;; Defined at:
 12679 ;;		line 107 in file "IR.c"
 12680 ;; Parameters:    Size  Location     Type
 12681 ;;		None
 12682 ;; Auto vars:     Size  Location     Type
 12683 ;;		None
 12684 ;; Return value:  Size  Location     Type
 12685 ;;		None               void
 12686 ;; Registers used:
 12687 ;;		wreg, status,2, cstack
 12688 ;; Tracked objects:
 12689 ;;		On entry : 0/0
 12690 ;;		On exit  : 0/0
 12691 ;;		Unchanged: 0/0
 12692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12693 ;;      Params:         0       0       0       0       0
 12694 ;;      Locals:         0       0       0       0       0
 12695 ;;      Temps:          0       0       0       0       0
 12696 ;;      Totals:         0       0       0       0       0
 12697 ;;Total ram usage:        0 bytes
 12698 ;; Hardware stack levels used:    1
 12699 ;; Hardware stack levels required when called:    8
 12700 ;; This function calls:
 12701 ;;		_RF_Enable
 12702 ;; This function is called by:
 12703 ;;		_low_isr
 12704 ;;		_FSH_Write_IR_RF
 12705 ;; This function uses a non-reentrant model
 12706 ;;
 12707                           
 12708                           	psect	text81
 12709  001F42                     __ptext81:
 12710                           	opt stack 0
 12711  001F42                     _IR_ResetData:
 12712                           	opt stack 15
 12713                           
 12714                           ;IR.c: 109: IR_DataPlace = 0;
 12715                           
 12716                           ;incstack = 0
 12717  001F42  0E00               	movlw	0
 12718  001F44  6E63               	movwf	_IR_DataPlace,c
 12719                           
 12720                           ;IR.c: 110: IRStarted = 0;
 12721  001F46  0E00               	movlw	0
 12722  001F48  6E61               	movwf	_IRStarted,c
 12723                           
 12724                           ;IR.c: 111: RF_Enable();
 12725  001F4A  EC21  F00F         	call	_RF_Enable	;wreg free
 12726  001F4E  0012               	return		;funcret
 12727  001F50                     __end_of_IR_ResetData:
 12728                           	opt stack 0
 12729                           pclatu	equ	0xFFB
 12730                           pclath	equ	0xFFA
 12731                           tblptru	equ	0xFF8
 12732                           tblptrh	equ	0xFF7
 12733                           tblptrl	equ	0xFF6
 12734                           tablat	equ	0xFF5
 12735                           prodh	equ	0xFF4
 12736                           prodl	equ	0xFF3
 12737                           intcon	equ	0xFF2
 12738                           intcon2	equ	0xFF1
 12739                           intcon3	equ	0xFF0
 12740                           postinc0	equ	0xFEE
 12741                           fsr0h	equ	0xFEA
 12742                           fsr0l	equ	0xFE9
 12743                           wreg	equ	0xFE8
 12744                           postdec1	equ	0xFE5
 12745                           fsr1h	equ	0xFE2
 12746                           fsr1l	equ	0xFE1
 12747                           bsr	equ	0xFE0
 12748                           postinc2	equ	0xFDE
 12749                           postdec2	equ	0xFDD
 12750                           plusw2	equ	0xFDB
 12751                           fsr2h	equ	0xFDA
 12752                           fsr2l	equ	0xFD9
 12753                           status	equ	0xFD8
 12754                           
 12755 ;; *************** function _RF_Enable *****************
 12756 ;; Defined at:
 12757 ;;		line 206 in file "RF.c"
 12758 ;; Parameters:    Size  Location     Type
 12759 ;;		None
 12760 ;; Auto vars:     Size  Location     Type
 12761 ;;		None
 12762 ;; Return value:  Size  Location     Type
 12763 ;;		None               void
 12764 ;; Registers used:
 12765 ;;		wreg, status,2, cstack
 12766 ;; Tracked objects:
 12767 ;;		On entry : 0/0
 12768 ;;		On exit  : 0/0
 12769 ;;		Unchanged: 0/0
 12770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12771 ;;      Params:         0       0       0       0       0
 12772 ;;      Locals:         0       0       0       0       0
 12773 ;;      Temps:          0       0       0       0       0
 12774 ;;      Totals:         0       0       0       0       0
 12775 ;;Total ram usage:        0 bytes
 12776 ;; Hardware stack levels used:    1
 12777 ;; Hardware stack levels required when called:    7
 12778 ;; This function calls:
 12779 ;;		i1_RF_DataInt
 12780 ;;		i1_TMR_Timer0Int
 12781 ;; This function is called by:
 12782 ;;		_IR_ResetData
 12783 ;; This function uses a non-reentrant model
 12784 ;;
 12785                           
 12786                           	psect	text82
 12787  001E42                     __ptext82:
 12788                           	opt stack 0
 12789  001E42                     _RF_Enable:
 12790                           	opt stack 15
 12791                           
 12792                           ;RF.c: 208: INTCON3bits.INT1IF = 0;
 12793                           
 12794                           ;incstack = 0
 12795  001E42  90F0               	bcf	intcon3,0,c	;volatile
 12796                           
 12797                           ;RF.c: 209: INTCON3bits.INT2IF = 0;
 12798  001E44  92F0               	bcf	intcon3,1,c	;volatile
 12799                           
 12800                           ;RF.c: 210: INTCONbits.TMR0IF = 0;
 12801  001E46  94F2               	bcf	intcon,2,c	;volatile
 12802                           
 12803                           ;RF.c: 211: RF_DataInt(1);
 12804  001E48  0E01               	movlw	1
 12805  001E4A  EC2B  F00F         	call	i1_RF_DataInt
 12806                           
 12807                           ;RF.c: 212: TMR_Timer0Int(1);
 12808  001E4E  0E01               	movlw	1
 12809  001E50  EC84  F00F         	call	i1_TMR_Timer0Int
 12810  001E54  0012               	return		;funcret
 12811  001E56                     __end_of_RF_Enable:
 12812                           	opt stack 0
 12813                           pclatu	equ	0xFFB
 12814                           pclath	equ	0xFFA
 12815                           tblptru	equ	0xFF8
 12816                           tblptrh	equ	0xFF7
 12817                           tblptrl	equ	0xFF6
 12818                           tablat	equ	0xFF5
 12819                           prodh	equ	0xFF4
 12820                           prodl	equ	0xFF3
 12821                           intcon	equ	0xFF2
 12822                           intcon2	equ	0xFF1
 12823                           intcon3	equ	0xFF0
 12824                           postinc0	equ	0xFEE
 12825                           fsr0h	equ	0xFEA
 12826                           fsr0l	equ	0xFE9
 12827                           wreg	equ	0xFE8
 12828                           postdec1	equ	0xFE5
 12829                           fsr1h	equ	0xFE2
 12830                           fsr1l	equ	0xFE1
 12831                           bsr	equ	0xFE0
 12832                           postinc2	equ	0xFDE
 12833                           postdec2	equ	0xFDD
 12834                           plusw2	equ	0xFDB
 12835                           fsr2h	equ	0xFDA
 12836                           fsr2l	equ	0xFD9
 12837                           status	equ	0xFD8
 12838                           
 12839 ;; *************** function i1_TMR_Timer0Int *****************
 12840 ;; Defined at:
 12841 ;;		line 208 in file "TIMERS.c"
 12842 ;; Parameters:    Size  Location     Type
 12843 ;;  state           1    wreg     unsigned char 
 12844 ;; Auto vars:     Size  Location     Type
 12845 ;;  state           1    0[COMRAM] unsigned char 
 12846 ;; Return value:  Size  Location     Type
 12847 ;;		None               void
 12848 ;; Registers used:
 12849 ;;		wreg, status,2
 12850 ;; Tracked objects:
 12851 ;;		On entry : 0/0
 12852 ;;		On exit  : 0/0
 12853 ;;		Unchanged: 0/0
 12854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12855 ;;      Params:         0       0       0       0       0
 12856 ;;      Locals:         1       0       0       0       0
 12857 ;;      Temps:          0       0       0       0       0
 12858 ;;      Totals:         1       0       0       0       0
 12859 ;;Total ram usage:        1 bytes
 12860 ;; Hardware stack levels used:    1
 12861 ;; Hardware stack levels required when called:    6
 12862 ;; This function calls:
 12863 ;;		Nothing
 12864 ;; This function is called by:
 12865 ;;		_RF_Disable
 12866 ;;		_RF_Enable
 12867 ;; This function uses a non-reentrant model
 12868 ;;
 12869                           
 12870                           	psect	text83
 12871  001F08                     __ptext83:
 12872                           	opt stack 0
 12873  001F08                     i1_TMR_Timer0Int:
 12874                           	opt stack 16
 12875                           
 12876                           ;incstack = 0
 12877                           ;i1TMR_Timer0Int@state stored from wreg
 12878  001F08  6E01               	movwf	i1TMR_Timer0Int@state,c
 12879                           
 12880                           ;TIMERS.c: 210: if(state)
 12881  001F0A  5001               	movf	i1TMR_Timer0Int@state,w,c
 12882  001F0C  B4D8               	btfsc	status,2,c
 12883  001F0E  D002               	goto	i1l1086
 12884                           
 12885                           ;TIMERS.c: 211: {
 12886                           ;TIMERS.c: 213: INTCONbits.TMR0IE = 1;
 12887  001F10  8AF2               	bsf	intcon,5,c	;volatile
 12888                           
 12889                           ;TIMERS.c: 214: }
 12890  001F12  0012               	return	
 12891  001F14                     i1l1086:
 12892                           
 12893                           ;TIMERS.c: 215: else
 12894                           ;TIMERS.c: 216: {
 12895                           ;TIMERS.c: 218: INTCONbits.TMR0IE = 0;
 12896  001F14  9AF2               	bcf	intcon,5,c	;volatile
 12897  001F16  0012               	return	
 12898  001F18                     __end_ofi1_TMR_Timer0Int:
 12899                           	opt stack 0
 12900                           pclatu	equ	0xFFB
 12901                           pclath	equ	0xFFA
 12902                           tblptru	equ	0xFF8
 12903                           tblptrh	equ	0xFF7
 12904                           tblptrl	equ	0xFF6
 12905                           tablat	equ	0xFF5
 12906                           prodh	equ	0xFF4
 12907                           prodl	equ	0xFF3
 12908                           intcon	equ	0xFF2
 12909                           intcon2	equ	0xFF1
 12910                           intcon3	equ	0xFF0
 12911                           postinc0	equ	0xFEE
 12912                           fsr0h	equ	0xFEA
 12913                           fsr0l	equ	0xFE9
 12914                           wreg	equ	0xFE8
 12915                           postdec1	equ	0xFE5
 12916                           fsr1h	equ	0xFE2
 12917                           fsr1l	equ	0xFE1
 12918                           bsr	equ	0xFE0
 12919                           postinc2	equ	0xFDE
 12920                           postdec2	equ	0xFDD
 12921                           plusw2	equ	0xFDB
 12922                           fsr2h	equ	0xFDA
 12923                           fsr2l	equ	0xFD9
 12924                           status	equ	0xFD8
 12925                           
 12926 ;; *************** function i1_RF_DataInt *****************
 12927 ;; Defined at:
 12928 ;;		line 78 in file "RF.c"
 12929 ;; Parameters:    Size  Location     Type
 12930 ;;  state           1    wreg     unsigned char 
 12931 ;; Auto vars:     Size  Location     Type
 12932 ;;  state           1    0[COMRAM] unsigned char 
 12933 ;; Return value:  Size  Location     Type
 12934 ;;		None               void
 12935 ;; Registers used:
 12936 ;;		wreg, status,2
 12937 ;; Tracked objects:
 12938 ;;		On entry : 0/0
 12939 ;;		On exit  : 0/0
 12940 ;;		Unchanged: 0/0
 12941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 12942 ;;      Params:         0       0       0       0       0
 12943 ;;      Locals:         1       0       0       0       0
 12944 ;;      Temps:          0       0       0       0       0
 12945 ;;      Totals:         1       0       0       0       0
 12946 ;;Total ram usage:        1 bytes
 12947 ;; Hardware stack levels used:    1
 12948 ;; Hardware stack levels required when called:    6
 12949 ;; This function calls:
 12950 ;;		Nothing
 12951 ;; This function is called by:
 12952 ;;		_RF_Disable
 12953 ;;		_RF_Enable
 12954 ;; This function uses a non-reentrant model
 12955 ;;
 12956                           
 12957                           	psect	text84
 12958  001E56                     __ptext84:
 12959                           	opt stack 0
 12960  001E56                     i1_RF_DataInt:
 12961                           	opt stack 16
 12962                           
 12963                           ;incstack = 0
 12964                           ;i1RF_DataInt@state stored from wreg
 12965  001E56  6E01               	movwf	i1RF_DataInt@state,c
 12966                           
 12967                           ;RF.c: 80: if(state)
 12968  001E58  5001               	movf	i1RF_DataInt@state,w,c
 12969  001E5A  B4D8               	btfsc	status,2,c
 12970  001E5C  D003               	goto	i1l402
 12971                           
 12972                           ;RF.c: 81: {
 12973                           ;RF.c: 83: INTCON3bits.INT1E = 1;
 12974  001E5E  86F0               	bsf	intcon3,3,c	;volatile
 12975                           
 12976                           ;RF.c: 84: INTCON3bits.INT2E = 1;
 12977  001E60  88F0               	bsf	intcon3,4,c	;volatile
 12978                           
 12979                           ;RF.c: 85: }
 12980  001E62  0012               	return	
 12981  001E64                     i1l402:
 12982                           
 12983                           ;RF.c: 86: else
 12984                           ;RF.c: 87: {
 12985                           ;RF.c: 89: INTCON3bits.INT1E = 0;
 12986  001E64  96F0               	bcf	intcon3,3,c	;volatile
 12987                           
 12988                           ;RF.c: 90: INTCON3bits.INT2E = 0;
 12989  001E66  98F0               	bcf	intcon3,4,c	;volatile
 12990  001E68  0012               	return	
 12991  001E6A                     __end_ofi1_RF_DataInt:
 12992                           	opt stack 0
 12993                           pclatu	equ	0xFFB
 12994                           pclath	equ	0xFFA
 12995                           tblptru	equ	0xFF8
 12996                           tblptrh	equ	0xFF7
 12997                           tblptrl	equ	0xFF6
 12998                           tablat	equ	0xFF5
 12999                           prodh	equ	0xFF4
 13000                           prodl	equ	0xFF3
 13001                           intcon	equ	0xFF2
 13002                           intcon2	equ	0xFF1
 13003                           intcon3	equ	0xFF0
 13004                           postinc0	equ	0xFEE
 13005                           fsr0h	equ	0xFEA
 13006                           fsr0l	equ	0xFE9
 13007                           wreg	equ	0xFE8
 13008                           postdec1	equ	0xFE5
 13009                           fsr1h	equ	0xFE2
 13010                           fsr1l	equ	0xFE1
 13011                           bsr	equ	0xFE0
 13012                           postinc2	equ	0xFDE
 13013                           postdec2	equ	0xFDD
 13014                           plusw2	equ	0xFDB
 13015                           fsr2h	equ	0xFDA
 13016                           fsr2l	equ	0xFD9
 13017                           status	equ	0xFD8
 13018                           
 13019 ;; *************** function _FSH_WriteIntArray *****************
 13020 ;; Defined at:
 13021 ;;		line 146 in file "FLASH.c"
 13022 ;; Parameters:    Size  Location     Type
 13023 ;;  ConstArray      3    4[COMRAM] PTR const unsigned int 
 13024 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 13025 ;;  Array           2    7[COMRAM] PTR unsigned int 
 13026 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 13027 ;; Auto vars:     Size  Location     Type
 13028 ;;  i               1   11[COMRAM] unsigned char 
 13029 ;; Return value:  Size  Location     Type
 13030 ;;		None               void
 13031 ;; Registers used:
 13032 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13033 ;; Tracked objects:
 13034 ;;		On entry : 0/0
 13035 ;;		On exit  : 0/0
 13036 ;;		Unchanged: 0/0
 13037 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13038 ;;      Params:         5       0       0       0       0
 13039 ;;      Locals:         1       0       0       0       0
 13040 ;;      Temps:          2       0       0       0       0
 13041 ;;      Totals:         8       0       0       0       0
 13042 ;;Total ram usage:        8 bytes
 13043 ;; Hardware stack levels used:    1
 13044 ;; Hardware stack levels required when called:    7
 13045 ;; This function calls:
 13046 ;;		_FSH_AddressToBlock
 13047 ;; This function is called by:
 13048 ;;		_FSH_Write_IR_RF
 13049 ;; This function uses a non-reentrant model
 13050 ;;
 13051                           
 13052                           	psect	text85
 13053  001302                     __ptext85:
 13054                           	opt stack 0
 13055  001302                     _FSH_WriteIntArray:
 13056                           	opt stack 14
 13057                           
 13058                           ;FLASH.c: 148: unsigned char i;
 13059                           ;FLASH.c: 151: FSH_AddressToBlock(ConstArray);
 13060                           
 13061                           ;incstack = 0
 13062  001302  5005               	movf	FSH_WriteIntArray@ConstArray,w,c
 13063  001304  6E01               	movwf	FSH_AddressToBlock@Address,c
 13064  001306  5006               	movf	FSH_WriteIntArray@ConstArray+1,w,c
 13065  001308  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 13066  00130A  5007               	movf	FSH_WriteIntArray@ConstArray+2,w,c
 13067  00130C  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 13068  00130E  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 13069  001310  ECC0  F00C         	call	_FSH_AddressToBlock	;wreg free
 13070                           
 13071                           ;FLASH.c: 153: for(i = 0; i<32; i++)
 13072  001314  0E00               	movlw	0
 13073  001316  6E0C               	movwf	FSH_WriteIntArray@i,c
 13074  001318                     i1l5677:
 13075  001318  0E1F               	movlw	31
 13076  00131A  640C               	cpfsgt	FSH_WriteIntArray@i,c
 13077  00131C  D001               	goto	i1l5681
 13078  00131E  D01B               	goto	i1l5689
 13079  001320                     i1l5681:
 13080                           
 13081                           ;FLASH.c: 154: {
 13082                           ;FLASH.c: 156: TABLAT = *Array;
 13083  001320  C008  FFD9         	movff	FSH_WriteIntArray@Array,fsr2l
 13084  001324  C009  FFDA         	movff	FSH_WriteIntArray@Array+1,fsr2h
 13085  001328  50DF               	movf	indf2,w,c
 13086  00132A  6EF5               	movwf	tablat,c	;volatile
 13087  00132C  000D               	tblwt		*+	;# 
 13088                           
 13089                           ;FLASH.c: 158: TABLAT = *Array >> 8;
 13090  00132E  C008  FFD9         	movff	FSH_WriteIntArray@Array,fsr2l
 13091  001332  C009  FFDA         	movff	FSH_WriteIntArray@Array+1,fsr2h
 13092  001336  CFDE F00A          	movff	postinc2,??_FSH_WriteIntArray
 13093  00133A  CFDD F00B          	movff	postdec2,??_FSH_WriteIntArray+1
 13094  00133E  C00B  F00A         	movff	??_FSH_WriteIntArray+1,??_FSH_WriteIntArray
 13095  001342  6A0B               	clrf	??_FSH_WriteIntArray+1,c
 13096  001344  500A               	movf	??_FSH_WriteIntArray,w,c
 13097  001346  6EF5               	movwf	tablat,c	;volatile
 13098  001348  000D               	tblwt		*+	;# 
 13099                           
 13100                           ;FLASH.c: 160: Array++;
 13101  00134A  0E02               	movlw	2
 13102  00134C  2608               	addwf	FSH_WriteIntArray@Array,f,c
 13103  00134E  0E00               	movlw	0
 13104  001350  2209               	addwfc	FSH_WriteIntArray@Array+1,f,c
 13105  001352  2A0C               	incf	FSH_WriteIntArray@i,f,c
 13106  001354  D7E1               	goto	i1l5677
 13107  001356                     i1l5689:
 13108                           
 13109                           ;FLASH.c: 161: }
 13110                           ;FLASH.c: 164: FSH_AddressToBlock(ConstArray);
 13111  001356  5005               	movf	FSH_WriteIntArray@ConstArray,w,c
 13112  001358  6E01               	movwf	FSH_AddressToBlock@Address,c
 13113  00135A  5006               	movf	FSH_WriteIntArray@ConstArray+1,w,c
 13114  00135C  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 13115  00135E  5007               	movf	FSH_WriteIntArray@ConstArray+2,w,c
 13116  001360  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 13117  001362  6A04               	clrf	FSH_AddressToBlock@Address+3,c
 13118  001364  ECC0  F00C         	call	_FSH_AddressToBlock	;wreg free
 13119                           
 13120                           ;FLASH.c: 166: EECON1bits.WRERR = 0;
 13121  001368  96A6               	bcf	4006,3,c	;volatile
 13122                           
 13123                           ;FLASH.c: 167: EECON1bits.FREE = 0;
 13124  00136A  98A6               	bcf	4006,4,c	;volatile
 13125  00136C  84A6               	bsf	4006,2,c	;# 
 13126  00136E  9EF2               	bcf	intcon,7,c	;# 
 13127  001370  0E55               	movlw	85	;# 
 13128  001372  6EA7               	movwf	4007,c	;# 
 13129  001374  0EAA               	movlw	170	;# 
 13130  001376  6EA7               	movwf	4007,c	;# 
 13131  001378  82A6               	bsf	4006,1,c	;# 
 13132  00137A  0012               	return		;funcret
 13133  00137C                     __end_of_FSH_WriteIntArray:
 13134                           	opt stack 0
 13135                           pclatu	equ	0xFFB
 13136                           pclath	equ	0xFFA
 13137                           tblptru	equ	0xFF8
 13138                           tblptrh	equ	0xFF7
 13139                           tblptrl	equ	0xFF6
 13140                           tablat	equ	0xFF5
 13141                           prodh	equ	0xFF4
 13142                           prodl	equ	0xFF3
 13143                           intcon	equ	0xFF2
 13144                           intcon2	equ	0xFF1
 13145                           intcon3	equ	0xFF0
 13146                           postinc0	equ	0xFEE
 13147                           fsr0h	equ	0xFEA
 13148                           fsr0l	equ	0xFE9
 13149                           wreg	equ	0xFE8
 13150                           postdec1	equ	0xFE5
 13151                           fsr1h	equ	0xFE2
 13152                           fsr1l	equ	0xFE1
 13153                           bsr	equ	0xFE0
 13154                           indf2	equ	0xFDF
 13155                           postinc2	equ	0xFDE
 13156                           postdec2	equ	0xFDD
 13157                           plusw2	equ	0xFDB
 13158                           fsr2h	equ	0xFDA
 13159                           fsr2l	equ	0xFD9
 13160                           status	equ	0xFD8
 13161                           
 13162 ;; *************** function _FSH_VerifyWriteIntArray *****************
 13163 ;; Defined at:
 13164 ;;		line 183 in file "FLASH.c"
 13165 ;; Parameters:    Size  Location     Type
 13166 ;;  ConstArray      3    0[COMRAM] PTR const unsigned int 
 13167 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 13168 ;;  Array           2    3[COMRAM] PTR unsigned int 
 13169 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 13170 ;; Auto vars:     Size  Location     Type
 13171 ;;  data            2    8[COMRAM] unsigned int 
 13172 ;;  i               1   11[COMRAM] unsigned char 
 13173 ;;  failcount       1   10[COMRAM] unsigned char 
 13174 ;; Return value:  Size  Location     Type
 13175 ;;                  1    wreg      unsigned char 
 13176 ;; Registers used:
 13177 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 13178 ;; Tracked objects:
 13179 ;;		On entry : 0/0
 13180 ;;		On exit  : 0/0
 13181 ;;		Unchanged: 0/0
 13182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13183 ;;      Params:         5       0       0       0       0
 13184 ;;      Locals:         4       0       0       0       0
 13185 ;;      Temps:          3       0       0       0       0
 13186 ;;      Totals:        12       0       0       0       0
 13187 ;;Total ram usage:       12 bytes
 13188 ;; Hardware stack levels used:    1
 13189 ;; Hardware stack levels required when called:    6
 13190 ;; This function calls:
 13191 ;;		Nothing
 13192 ;; This function is called by:
 13193 ;;		_FSH_Write_IR_RF
 13194 ;; This function uses a non-reentrant model
 13195 ;;
 13196                           
 13197                           	psect	text86
 13198  00137C                     __ptext86:
 13199                           	opt stack 0
 13200  00137C                     _FSH_VerifyWriteIntArray:
 13201                           	opt stack 15
 13202                           
 13203                           ;FLASH.c: 185: unsigned char i;
 13204                           ;FLASH.c: 186: unsigned int data;
 13205                           ;FLASH.c: 187: unsigned char failcount = 0;
 13206                           
 13207                           ;incstack = 0
 13208  00137C  0E00               	movlw	0
 13209  00137E  6E0B               	movwf	FSH_VerifyWriteIntArray@failcount,c
 13210                           
 13211                           ;FLASH.c: 189: for(i = 0; i<32; i++)
 13212  001380  0E00               	movlw	0
 13213  001382  6E0C               	movwf	FSH_VerifyWriteIntArray@i,c
 13214  001384                     i1l5697:
 13215  001384  0E1F               	movlw	31
 13216  001386  640C               	cpfsgt	FSH_VerifyWriteIntArray@i,c
 13217  001388  D001               	goto	i1l5701
 13218  00138A  D028               	goto	i1l5709
 13219  00138C                     i1l5701:
 13220                           
 13221                           ;FLASH.c: 190: {
 13222                           ;FLASH.c: 191: data = ConstArray[i];
 13223  00138C  500C               	movf	FSH_VerifyWriteIntArray@i,w,c
 13224  00138E  0D02               	mullw	2
 13225  001390  50F3               	movf	prodl,w,c
 13226  001392  2401               	addwf	FSH_VerifyWriteIntArray@ConstArray,w,c
 13227  001394  6E06               	movwf	??_FSH_VerifyWriteIntArray& (0+255),c
 13228  001396  50F4               	movf	prodh,w,c
 13229  001398  2002               	addwfc	FSH_VerifyWriteIntArray@ConstArray+1,w,c
 13230  00139A  6E07               	movwf	(??_FSH_VerifyWriteIntArray+1)& (0+255),c
 13231  00139C  0E00               	movlw	0
 13232  00139E  2003               	addwfc	FSH_VerifyWriteIntArray@ConstArray+2,w,c
 13233  0013A0  6E08               	movwf	(??_FSH_VerifyWriteIntArray+2)& (0+255),c
 13234  0013A2  C006  FFF6         	movff	??_FSH_VerifyWriteIntArray,tblptrl
 13235  0013A6  C007  FFF7         	movff	??_FSH_VerifyWriteIntArray+1,tblptrh
 13236  0013AA  C008  FFF8         	movff	??_FSH_VerifyWriteIntArray+2,tblptru
 13237  0013AE  0009               	tblrd		*+
 13238  0013B0  CFF5 F009          	movff	tablat,FSH_VerifyWriteIntArray@data
 13239  0013B4  000A               	tblrd		*-
 13240  0013B6  CFF5 F00A          	movff	tablat,FSH_VerifyWriteIntArray@data+1
 13241                           
 13242                           ;FLASH.c: 192: if(data != Array[i])
 13243  0013BA  500C               	movf	FSH_VerifyWriteIntArray@i,w,c
 13244  0013BC  0D02               	mullw	2
 13245  0013BE  50F3               	movf	prodl,w,c
 13246  0013C0  2404               	addwf	FSH_VerifyWriteIntArray@Array,w,c
 13247  0013C2  6ED9               	movwf	fsr2l,c
 13248  0013C4  50F4               	movf	prodh,w,c
 13249  0013C6  2005               	addwfc	FSH_VerifyWriteIntArray@Array+1,w,c
 13250  0013C8  6EDA               	movwf	fsr2h,c
 13251  0013CA  5009               	movf	FSH_VerifyWriteIntArray@data,w,c
 13252  0013CC  18DE               	xorwf	postinc2,w,c
 13253  0013CE  E103               	bnz	i1u587_20
 13254  0013D0  500A               	movf	FSH_VerifyWriteIntArray@data+1,w,c
 13255  0013D2  18DE               	xorwf	postinc2,w,c
 13256  0013D4  A4D8               	btfss	status,2,c
 13257  0013D6                     i1u587_20:
 13258                           
 13259                           ;FLASH.c: 193: {
 13260                           ;FLASH.c: 194: failcount++;
 13261  0013D6  2A0B               	incf	FSH_VerifyWriteIntArray@failcount,f,c
 13262  0013D8  2A0C               	incf	FSH_VerifyWriteIntArray@i,f,c
 13263  0013DA  D7D4               	goto	i1l5697
 13264  0013DC                     i1l5709:
 13265                           
 13266                           ;FLASH.c: 195: }
 13267                           ;FLASH.c: 196: }
 13268                           ;FLASH.c: 197: if(failcount)
 13269  0013DC  500B               	movf	FSH_VerifyWriteIntArray@failcount,w,c
 13270  0013DE  B4D8               	btfsc	status,2,c
 13271  0013E0  D002               	goto	i1l5715
 13272                           
 13273                           ;FLASH.c: 198: {
 13274                           ;FLASH.c: 199: return 0;
 13275  0013E2  0E00               	movlw	0
 13276  0013E4  0012               	return	
 13277  0013E6                     i1l5715:
 13278                           
 13279                           ;FLASH.c: 200: }
 13280                           ;FLASH.c: 201: return 1;
 13281  0013E6  0E01               	movlw	1
 13282  0013E8  0012               	return	
 13283  0013EA                     __end_of_FSH_VerifyWriteIntArray:
 13284                           	opt stack 0
 13285                           pclatu	equ	0xFFB
 13286                           pclath	equ	0xFFA
 13287                           tblptru	equ	0xFF8
 13288                           tblptrh	equ	0xFF7
 13289                           tblptrl	equ	0xFF6
 13290                           tablat	equ	0xFF5
 13291                           prodh	equ	0xFF4
 13292                           prodl	equ	0xFF3
 13293                           intcon	equ	0xFF2
 13294                           intcon2	equ	0xFF1
 13295                           intcon3	equ	0xFF0
 13296                           postinc0	equ	0xFEE
 13297                           fsr0h	equ	0xFEA
 13298                           fsr0l	equ	0xFE9
 13299                           wreg	equ	0xFE8
 13300                           postdec1	equ	0xFE5
 13301                           fsr1h	equ	0xFE2
 13302                           fsr1l	equ	0xFE1
 13303                           bsr	equ	0xFE0
 13304                           indf2	equ	0xFDF
 13305                           postinc2	equ	0xFDE
 13306                           postdec2	equ	0xFDD
 13307                           plusw2	equ	0xFDB
 13308                           fsr2h	equ	0xFDA
 13309                           fsr2l	equ	0xFD9
 13310                           status	equ	0xFD8
 13311                           
 13312 ;; *************** function _FSH_EraseBlock *****************
 13313 ;; Defined at:
 13314 ;;		line 98 in file "FLASH.c"
 13315 ;; Parameters:    Size  Location     Type
 13316 ;;  Address         4    4[COMRAM] unsigned long 
 13317 ;; Auto vars:     Size  Location     Type
 13318 ;;  i               4    0        unsigned long 
 13319 ;;  WriteTries      1   10[COMRAM] unsigned char 
 13320 ;;  lowint          1    9[COMRAM] unsigned char 
 13321 ;;  highint         1    8[COMRAM] unsigned char 
 13322 ;; Return value:  Size  Location     Type
 13323 ;;		None               void
 13324 ;; Registers used:
 13325 ;;		wreg, status,2, status,0, cstack
 13326 ;; Tracked objects:
 13327 ;;		On entry : 0/0
 13328 ;;		On exit  : 0/0
 13329 ;;		Unchanged: 0/0
 13330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13331 ;;      Params:         4       0       0       0       0
 13332 ;;      Locals:         3       0       0       0       0
 13333 ;;      Temps:          0       0       0       0       0
 13334 ;;      Totals:         7       0       0       0       0
 13335 ;;Total ram usage:        7 bytes
 13336 ;; Hardware stack levels used:    1
 13337 ;; Hardware stack levels required when called:    7
 13338 ;; This function calls:
 13339 ;;		_FSH_AddressToBlock
 13340 ;; This function is called by:
 13341 ;;		_FSH_Write_IR_RF
 13342 ;; This function uses a non-reentrant model
 13343 ;;
 13344                           
 13345                           	psect	text87
 13346  00151E                     __ptext87:
 13347                           	opt stack 0
 13348  00151E                     _FSH_EraseBlock:
 13349                           	opt stack 14
 13350                           
 13351                           ;FLASH.c: 100: unsigned char highint = INTCONbits.GIE;
 13352                           
 13353                           ;incstack = 0
 13354  00151E  0E00               	movlw	0
 13355  001520  BEF2               	btfsc	intcon,7,c	;volatile
 13356  001522  0E01               	movlw	1
 13357  001524  6E09               	movwf	FSH_EraseBlock@highint,c
 13358                           
 13359                           ;FLASH.c: 101: unsigned char lowint = INTCONbits.PEIE;
 13360  001526  0E00               	movlw	0
 13361  001528  BCF2               	btfsc	intcon,6,c	;volatile
 13362  00152A  0E01               	movlw	1
 13363  00152C  6E0A               	movwf	FSH_EraseBlock@lowint,c
 13364                           
 13365                           ;FLASH.c: 102: unsigned char WriteTries;
 13366                           ;FLASH.c: 103: unsigned long i;
 13367                           ;FLASH.c: 105: INTCONbits.GIE = 0;
 13368  00152E  9EF2               	bcf	intcon,7,c	;volatile
 13369                           
 13370                           ;FLASH.c: 106: INTCONbits.PEIE = 0;
 13371  001530  9CF2               	bcf	intcon,6,c	;volatile
 13372  001532                     i1l5653:
 13373                           
 13374                           ;FLASH.c: 109: FSH_AddressToBlock(Address);
 13375  001532  C005  F001         	movff	FSH_EraseBlock@Address,FSH_AddressToBlock@Address
 13376  001536  C006  F002         	movff	FSH_EraseBlock@Address+1,FSH_AddressToBlock@Address+1
 13377  00153A  C007  F003         	movff	FSH_EraseBlock@Address+2,FSH_AddressToBlock@Address+2
 13378  00153E  C008  F004         	movff	FSH_EraseBlock@Address+3,FSH_AddressToBlock@Address+3
 13379  001542  ECC0  F00C         	call	_FSH_AddressToBlock	;wreg free
 13380                           
 13381                           ;FLASH.c: 111: WriteTries = 1;
 13382  001546  0E01               	movlw	1
 13383  001548  6E0B               	movwf	FSH_EraseBlock@WriteTries,c
 13384  00154A  84A6               	bsf	4006,2,c	;# 
 13385  00154C  88A6               	bsf	4006,4,c	;# 
 13386  00154E  9EF2               	bcf	intcon,7,c	;# 
 13387  001550  0E55               	movlw	85	;# 
 13388  001552  6EA7               	movwf	4007,c	;# 
 13389  001554  0EAA               	movlw	170	;# 
 13390  001556  6EA7               	movwf	4007,c	;# 
 13391  001558  82A6               	bsf	4006,1,c	;# 
 13392                           
 13393                           ;FLASH.c: 122: if(EECON1bits.WRERR)
 13394  00155A  A6A6               	btfss	4006,3,c	;volatile
 13395  00155C  D005               	goto	i1l5665
 13396                           
 13397                           ;FLASH.c: 123: {
 13398                           ;FLASH.c: 124: WriteTries++;
 13399  00155E  2A0B               	incf	FSH_EraseBlock@WriteTries,f,c
 13400                           
 13401                           ;FLASH.c: 125: if(WriteTries < 10)
 13402  001560  0E0A               	movlw	10
 13403  001562  600B               	cpfslt	FSH_EraseBlock@WriteTries,c
 13404  001564  D001               	goto	i1l5665
 13405  001566  D7E5               	goto	i1l5653
 13406  001568                     i1l5665:
 13407                           
 13408                           ;FLASH.c: 128: }
 13409                           ;FLASH.c: 129: }
 13410                           ;FLASH.c: 131: if(highint)
 13411  001568  5009               	movf	FSH_EraseBlock@highint,w,c
 13412  00156A  A4D8               	btfss	status,2,c
 13413                           
 13414                           ;FLASH.c: 132: {
 13415                           ;FLASH.c: 133: INTCONbits.GIE = 1;
 13416  00156C  8EF2               	bsf	intcon,7,c	;volatile
 13417                           
 13418                           ;FLASH.c: 134: }
 13419                           ;FLASH.c: 135: if(lowint)
 13420  00156E  500A               	movf	FSH_EraseBlock@lowint,w,c
 13421  001570  B4D8               	btfsc	status,2,c
 13422  001572  0012               	return	
 13423                           
 13424                           ;FLASH.c: 136: {
 13425                           ;FLASH.c: 137: INTCONbits.PEIE = 1;
 13426  001574  8CF2               	bsf	intcon,6,c	;volatile
 13427  001576  0012               	return	
 13428  001578                     __end_of_FSH_EraseBlock:
 13429                           	opt stack 0
 13430                           pclatu	equ	0xFFB
 13431                           pclath	equ	0xFFA
 13432                           tblptru	equ	0xFF8
 13433                           tblptrh	equ	0xFF7
 13434                           tblptrl	equ	0xFF6
 13435                           tablat	equ	0xFF5
 13436                           prodh	equ	0xFF4
 13437                           prodl	equ	0xFF3
 13438                           intcon	equ	0xFF2
 13439                           intcon2	equ	0xFF1
 13440                           intcon3	equ	0xFF0
 13441                           postinc0	equ	0xFEE
 13442                           fsr0h	equ	0xFEA
 13443                           fsr0l	equ	0xFE9
 13444                           wreg	equ	0xFE8
 13445                           postdec1	equ	0xFE5
 13446                           fsr1h	equ	0xFE2
 13447                           fsr1l	equ	0xFE1
 13448                           bsr	equ	0xFE0
 13449                           indf2	equ	0xFDF
 13450                           postinc2	equ	0xFDE
 13451                           postdec2	equ	0xFDD
 13452                           plusw2	equ	0xFDB
 13453                           fsr2h	equ	0xFDA
 13454                           fsr2l	equ	0xFD9
 13455                           status	equ	0xFD8
 13456                           
 13457 ;; *************** function _FSH_AddressToBlock *****************
 13458 ;; Defined at:
 13459 ;;		line 503 in file "FLASH.c"
 13460 ;; Parameters:    Size  Location     Type
 13461 ;;  Address         4    0[COMRAM] unsigned long 
 13462 ;; Auto vars:     Size  Location     Type
 13463 ;;		None
 13464 ;; Return value:  Size  Location     Type
 13465 ;;		None               void
 13466 ;; Registers used:
 13467 ;;		wreg, status,2, status,0
 13468 ;; Tracked objects:
 13469 ;;		On entry : 0/0
 13470 ;;		On exit  : 0/0
 13471 ;;		Unchanged: 0/0
 13472 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13473 ;;      Params:         4       0       0       0       0
 13474 ;;      Locals:         0       0       0       0       0
 13475 ;;      Temps:          0       0       0       0       0
 13476 ;;      Totals:         4       0       0       0       0
 13477 ;;Total ram usage:        4 bytes
 13478 ;; Hardware stack levels used:    1
 13479 ;; Hardware stack levels required when called:    6
 13480 ;; This function calls:
 13481 ;;		Nothing
 13482 ;; This function is called by:
 13483 ;;		_FSH_EraseBlock
 13484 ;;		_FSH_WriteIntArray
 13485 ;;		_FSH_Write_IR_RF
 13486 ;;		_FSH_EraseALL
 13487 ;; This function uses a non-reentrant model
 13488 ;;
 13489                           
 13490                           	psect	text88
 13491  001980                     __ptext88:
 13492                           	opt stack 0
 13493  001980                     _FSH_AddressToBlock:
 13494                           	opt stack 14
 13495                           
 13496                           ;FLASH.c: 505: if(Address > 0x3600)
 13497                           
 13498                           ;incstack = 0
 13499  001980  5004               	movf	FSH_AddressToBlock@Address+3,w,c
 13500  001982  1003               	iorwf	FSH_AddressToBlock@Address+2,w,c
 13501  001984  E105               	bnz	i1u543_20
 13502  001986  0401               	decf	FSH_AddressToBlock@Address,w,c
 13503  001988  0E36               	movlw	54
 13504  00198A  5802               	subwfb	FSH_AddressToBlock@Address+1,w,c
 13505  00198C  A0D8               	btfss	status,0,c
 13506  00198E  D008               	goto	i1l5395
 13507  001990                     i1u543_20:
 13508                           
 13509                           ;FLASH.c: 506: {
 13510                           ;FLASH.c: 507: Address = 0x3600;
 13511  001990  0E00               	movlw	0
 13512  001992  6E01               	movwf	FSH_AddressToBlock@Address,c
 13513  001994  0E36               	movlw	54
 13514  001996  6E02               	movwf	FSH_AddressToBlock@Address+1,c
 13515  001998  0E00               	movlw	0
 13516  00199A  6E03               	movwf	FSH_AddressToBlock@Address+2,c
 13517  00199C  0E00               	movlw	0
 13518  00199E  6E04               	movwf	FSH_AddressToBlock@Address+3,c
 13519  0019A0                     i1l5395:
 13520                           
 13521                           ;FLASH.c: 508: }
 13522                           ;FLASH.c: 509: TBLPTRU = (Address & 0x002F0000) >> 16;
 13523  0019A0  5003               	movf	FSH_AddressToBlock@Address+2,w,c
 13524  0019A2  0B2F               	andlw	47
 13525  0019A4  6EF8               	movwf	tblptru,c	;volatile
 13526                           
 13527                           ;FLASH.c: 510: TBLPTRH = (Address & 0x0000FF00) >> 8;
 13528  0019A6  C002  FFF7         	movff	FSH_AddressToBlock@Address+1,tblptrh	;volatile
 13529                           
 13530                           ;FLASH.c: 511: TBLPTRL = (Address & 0x000000FF);
 13531  0019AA  C001  FFF6         	movff	FSH_AddressToBlock@Address,tblptrl	;volatile
 13532  0019AE  0012               	return		;funcret
 13533  0019B0                     __end_of_FSH_AddressToBlock:
 13534                           	opt stack 0
 13535                           pclatu	equ	0xFFB
 13536                           pclath	equ	0xFFA
 13537                           tblptru	equ	0xFF8
 13538                           tblptrh	equ	0xFF7
 13539                           tblptrl	equ	0xFF6
 13540                           tablat	equ	0xFF5
 13541                           prodh	equ	0xFF4
 13542                           prodl	equ	0xFF3
 13543                           intcon	equ	0xFF2
 13544                           intcon2	equ	0xFF1
 13545                           intcon3	equ	0xFF0
 13546                           postinc0	equ	0xFEE
 13547                           fsr0h	equ	0xFEA
 13548                           fsr0l	equ	0xFE9
 13549                           wreg	equ	0xFE8
 13550                           postdec1	equ	0xFE5
 13551                           fsr1h	equ	0xFE2
 13552                           fsr1l	equ	0xFE1
 13553                           bsr	equ	0xFE0
 13554                           indf2	equ	0xFDF
 13555                           postinc2	equ	0xFDE
 13556                           postdec2	equ	0xFDD
 13557                           plusw2	equ	0xFDB
 13558                           fsr2h	equ	0xFDA
 13559                           fsr2l	equ	0xFD9
 13560                           status	equ	0xFD8
 13561                           
 13562 ;; *************** function _ADC_CalculateVoltage *****************
 13563 ;; Defined at:
 13564 ;;		line 140 in file "ADC.c"
 13565 ;; Parameters:    Size  Location     Type
 13566 ;;		None
 13567 ;; Auto vars:     Size  Location     Type
 13568 ;;  Voltage         3   43[COMRAM] unsigned long 
 13569 ;;  ADCcounts       2   41[COMRAM] unsigned int 
 13570 ;; Return value:  Size  Location     Type
 13571 ;;		None               void
 13572 ;; Registers used:
 13573 ;;		wreg, status,2, status,0, cstack
 13574 ;; Tracked objects:
 13575 ;;		On entry : 0/0
 13576 ;;		On exit  : 0/0
 13577 ;;		Unchanged: 0/0
 13578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13579 ;;      Params:         0       0       0       0       0
 13580 ;;      Locals:         5       0       0       0       0
 13581 ;;      Temps:          0       0       0       0       0
 13582 ;;      Totals:         5       0       0       0       0
 13583 ;;Total ram usage:        5 bytes
 13584 ;; Hardware stack levels used:    1
 13585 ;; Hardware stack levels required when called:    8
 13586 ;; This function calls:
 13587 ;;		___ftdiv
 13588 ;;		i1_ADC_ChangeChannel
 13589 ;;		i1___ftmul
 13590 ;;		i1___lwtoft
 13591 ;; This function is called by:
 13592 ;;		_low_isr
 13593 ;; This function uses a non-reentrant model
 13594 ;;
 13595                           
 13596                           	psect	text89
 13597  000DD8                     __ptext89:
 13598                           	opt stack 0
 13599  000DD8                     _ADC_CalculateVoltage:
 13600                           	opt stack 15
 13601                           
 13602                           ;ADC.c: 142: unsigned int ADCcounts;
 13603                           ;ADC.c: 143: double Voltage;
 13604                           ;ADC.c: 145: ADCcounts = ADRESH;
 13605                           
 13606                           ;incstack = 0
 13607  000DD8  CFC4 F02A          	movff	4036,ADC_CalculateVoltage@ADCcounts	;volatile
 13608  000DDC  6A2B               	clrf	ADC_CalculateVoltage@ADCcounts+1,c
 13609                           
 13610                           ;ADC.c: 146: ADCcounts <<= 8;
 13611  000DDE  502A               	movf	ADC_CalculateVoltage@ADCcounts,w,c
 13612  000DE0  6E2B               	movwf	ADC_CalculateVoltage@ADCcounts+1,c
 13613  000DE2  6A2A               	clrf	ADC_CalculateVoltage@ADCcounts,c
 13614                           
 13615                           ;ADC.c: 147: ADCcounts += ADRESL;
 13616  000DE4  50C3               	movf	4035,w,c	;volatile
 13617  000DE6  262A               	addwf	ADC_CalculateVoltage@ADCcounts,f,c
 13618  000DE8  0E00               	movlw	0
 13619  000DEA  222B               	addwfc	ADC_CalculateVoltage@ADCcounts+1,f,c
 13620                           
 13621                           ;ADC.c: 149: Voltage = ((double)ADCcounts / (1 << 10)) * 3.3;
 13622  000DEC  0E00               	movlw	0
 13623  000DEE  6E0F               	movwf	___ftdiv@f2,c
 13624  000DF0  0E80               	movlw	128
 13625  000DF2  6E10               	movwf	___ftdiv@f2+1,c
 13626  000DF4  0E44               	movlw	68
 13627  000DF6  6E11               	movwf	___ftdiv@f2+2,c
 13628  000DF8  C02A  F009         	movff	ADC_CalculateVoltage@ADCcounts,i1___lwtoft@c
 13629  000DFC  C02B  F00A         	movff	ADC_CalculateVoltage@ADCcounts+1,i1___lwtoft@c+1
 13630  000E00  ECB7  F00D         	call	i1___lwtoft	;wreg free
 13631  000E04  C009  F00C         	movff	?i1___lwtoft,___ftdiv@f1
 13632  000E08  C00A  F00D         	movff	?i1___lwtoft+1,___ftdiv@f1+1
 13633  000E0C  C00B  F00E         	movff	?i1___lwtoft+2,___ftdiv@f1+2
 13634  000E10  EC49  F005         	call	___ftdiv	;wreg free
 13635  000E14  C00C  F01B         	movff	?___ftdiv,i1___ftmul@f1
 13636  000E18  C00D  F01C         	movff	?___ftdiv+1,i1___ftmul@f1+1
 13637  000E1C  C00E  F01D         	movff	?___ftdiv+2,i1___ftmul@f1+2
 13638  000E20  0E33               	movlw	51
 13639  000E22  6E1E               	movwf	i1___ftmul@f2,c
 13640  000E24  0E53               	movlw	83
 13641  000E26  6E1F               	movwf	i1___ftmul@f2+1,c
 13642  000E28  0E40               	movlw	64
 13643  000E2A  6E20               	movwf	i1___ftmul@f2+2,c
 13644  000E2C  EC71  F003         	call	i1___ftmul	;wreg free
 13645  000E30  C01B  F02C         	movff	?i1___ftmul,ADC_CalculateVoltage@Voltage
 13646  000E34  C01C  F02D         	movff	?i1___ftmul+1,ADC_CalculateVoltage@Voltage+1
 13647  000E38  C01D  F02E         	movff	?i1___ftmul+2,ADC_CalculateVoltage@Voltage+2
 13648                           
 13649                           ;ADC.c: 150: if(ADC_CurrentSource == 10)
 13650  000E3C  0E0A               	movlw	10
 13651  000E3E  1865               	xorwf	_ADC_CurrentSource,w,c
 13652  000E40  A4D8               	btfss	status,2,c
 13653  000E42  D023               	goto	i1l1307
 13654                           
 13655                           ;ADC.c: 151: {
 13656                           ;ADC.c: 152: Rail_VIN = Voltage * (200000.0 + 500000.0) / 200000.0;
 13657  000E44  0EE6               	movlw	230
 13658  000E46  6E1E               	movwf	i1___ftmul@f2,c
 13659  000E48  0E2A               	movlw	42
 13660  000E4A  6E1F               	movwf	i1___ftmul@f2+1,c
 13661  000E4C  0E49               	movlw	73
 13662  000E4E  6E20               	movwf	i1___ftmul@f2+2,c
 13663  000E50  C02C  F01B         	movff	ADC_CalculateVoltage@Voltage,i1___ftmul@f1
 13664  000E54  C02D  F01C         	movff	ADC_CalculateVoltage@Voltage+1,i1___ftmul@f1+1
 13665  000E58  C02E  F01D         	movff	ADC_CalculateVoltage@Voltage+2,i1___ftmul@f1+2
 13666  000E5C  EC71  F003         	call	i1___ftmul	;wreg free
 13667  000E60  C01B  F00C         	movff	?i1___ftmul,___ftdiv@f1
 13668  000E64  C01C  F00D         	movff	?i1___ftmul+1,___ftdiv@f1+1
 13669  000E68  C01D  F00E         	movff	?i1___ftmul+2,___ftdiv@f1+2
 13670  000E6C  0E50               	movlw	80
 13671  000E6E  6E0F               	movwf	___ftdiv@f2,c
 13672  000E70  0E43               	movlw	67
 13673  000E72  6E10               	movwf	___ftdiv@f2+1,c
 13674  000E74  0E48               	movlw	72
 13675  000E76  6E11               	movwf	___ftdiv@f2+2,c
 13676  000E78  EC49  F005         	call	___ftdiv	;wreg free
 13677  000E7C  C00C  F0CA         	movff	?___ftdiv,_Rail_VIN
 13678  000E80  C00D  F0CB         	movff	?___ftdiv+1,_Rail_VIN+1
 13679  000E84  C00E  F0CC         	movff	?___ftdiv+2,_Rail_VIN+2
 13680                           
 13681                           ;ADC.c: 153: }
 13682  000E88  D006               	goto	i1l7263
 13683  000E8A                     i1l1307:
 13684                           
 13685                           ;ADC.c: 154: else
 13686                           ;ADC.c: 155: {
 13687                           ;ADC.c: 156: Rail_RSSI = Voltage;
 13688  000E8A  C02C  F052         	movff	ADC_CalculateVoltage@Voltage,_Rail_RSSI
 13689  000E8E  C02D  F053         	movff	ADC_CalculateVoltage@Voltage+1,_Rail_RSSI+1
 13690  000E92  C02E  F054         	movff	ADC_CalculateVoltage@Voltage+2,_Rail_RSSI+2
 13691  000E96                     i1l7263:
 13692                           
 13693                           ;ADC.c: 157: }
 13694                           ;ADC.c: 158: ADC_ChangeChannel();
 13695  000E96  ECC9  F00D         	call	i1_ADC_ChangeChannel	;wreg free
 13696  000E9A  0012               	return		;funcret
 13697  000E9C                     __end_of_ADC_CalculateVoltage:
 13698                           	opt stack 0
 13699                           pclatu	equ	0xFFB
 13700                           pclath	equ	0xFFA
 13701                           tblptru	equ	0xFF8
 13702                           tblptrh	equ	0xFF7
 13703                           tblptrl	equ	0xFF6
 13704                           tablat	equ	0xFF5
 13705                           prodh	equ	0xFF4
 13706                           prodl	equ	0xFF3
 13707                           intcon	equ	0xFF2
 13708                           intcon2	equ	0xFF1
 13709                           intcon3	equ	0xFF0
 13710                           postinc0	equ	0xFEE
 13711                           fsr0h	equ	0xFEA
 13712                           fsr0l	equ	0xFE9
 13713                           wreg	equ	0xFE8
 13714                           postdec1	equ	0xFE5
 13715                           fsr1h	equ	0xFE2
 13716                           fsr1l	equ	0xFE1
 13717                           bsr	equ	0xFE0
 13718                           indf2	equ	0xFDF
 13719                           postinc2	equ	0xFDE
 13720                           postdec2	equ	0xFDD
 13721                           plusw2	equ	0xFDB
 13722                           fsr2h	equ	0xFDA
 13723                           fsr2l	equ	0xFD9
 13724                           status	equ	0xFD8
 13725                           
 13726 ;; *************** function i1___lwtoft *****************
 13727 ;; Defined at:
 13728 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
 13729 ;; Parameters:    Size  Location     Type
 13730 ;;  c               2    8[COMRAM] unsigned int 
 13731 ;; Auto vars:     Size  Location     Type
 13732 ;;		None
 13733 ;; Return value:  Size  Location     Type
 13734 ;;                  3    8[COMRAM] float 
 13735 ;; Registers used:
 13736 ;;		wreg, status,2, status,0, cstack
 13737 ;; Tracked objects:
 13738 ;;		On entry : 0/0
 13739 ;;		On exit  : 0/0
 13740 ;;		Unchanged: 0/0
 13741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13742 ;;      Params:         3       0       0       0       0
 13743 ;;      Locals:         0       0       0       0       0
 13744 ;;      Temps:          0       0       0       0       0
 13745 ;;      Totals:         3       0       0       0       0
 13746 ;;Total ram usage:        3 bytes
 13747 ;; Hardware stack levels used:    1
 13748 ;; Hardware stack levels required when called:    7
 13749 ;; This function calls:
 13750 ;;		i1___ftpack
 13751 ;; This function is called by:
 13752 ;;		_IR_CheckCode
 13753 ;;		_ADC_CalculateVoltage
 13754 ;;		i1_IR_LoadCode
 13755 ;; This function uses a non-reentrant model
 13756 ;;
 13757                           
 13758                           	psect	text90
 13759  001B6E                     __ptext90:
 13760                           	opt stack 0
 13761  001B6E                     i1___lwtoft:
 13762                           	opt stack 15
 13763                           
 13764                           ;incstack = 0
 13765  001B6E  C009  F001         	movff	i1___lwtoft@c,i1___ftpack@arg
 13766  001B72  C00A  F002         	movff	i1___lwtoft@c+1,i1___ftpack@arg+1
 13767  001B76  6A03               	clrf	i1___ftpack@arg+2,c
 13768  001B78  0E8E               	movlw	142
 13769  001B7A  6E04               	movwf	i1___ftpack@exp,c
 13770  001B7C  0E00               	movlw	0
 13771  001B7E  6E05               	movwf	i1___ftpack@sign,c
 13772  001B80  ECAC  F007         	call	i1___ftpack	;wreg free
 13773  001B84  C001  F009         	movff	?i1___ftpack,?i1___lwtoft
 13774  001B88  C002  F00A         	movff	?i1___ftpack+1,?i1___lwtoft+1
 13775  001B8C  C003  F00B         	movff	?i1___ftpack+2,?i1___lwtoft+2
 13776  001B90  0012               	return	
 13777  001B92                     __end_ofi1___lwtoft:
 13778                           	opt stack 0
 13779                           pclatu	equ	0xFFB
 13780                           pclath	equ	0xFFA
 13781                           tblptru	equ	0xFF8
 13782                           tblptrh	equ	0xFF7
 13783                           tblptrl	equ	0xFF6
 13784                           tablat	equ	0xFF5
 13785                           prodh	equ	0xFF4
 13786                           prodl	equ	0xFF3
 13787                           intcon	equ	0xFF2
 13788                           intcon2	equ	0xFF1
 13789                           intcon3	equ	0xFF0
 13790                           postinc0	equ	0xFEE
 13791                           fsr0h	equ	0xFEA
 13792                           fsr0l	equ	0xFE9
 13793                           wreg	equ	0xFE8
 13794                           postdec1	equ	0xFE5
 13795                           fsr1h	equ	0xFE2
 13796                           fsr1l	equ	0xFE1
 13797                           bsr	equ	0xFE0
 13798                           indf2	equ	0xFDF
 13799                           postinc2	equ	0xFDE
 13800                           postdec2	equ	0xFDD
 13801                           plusw2	equ	0xFDB
 13802                           fsr2h	equ	0xFDA
 13803                           fsr2l	equ	0xFD9
 13804                           status	equ	0xFD8
 13805                           
 13806 ;; *************** function i1___ftmul *****************
 13807 ;; Defined at:
 13808 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
 13809 ;; Parameters:    Size  Location     Type
 13810 ;;  f1              3   26[COMRAM] float 
 13811 ;;  f2              3   29[COMRAM] float 
 13812 ;; Auto vars:     Size  Location     Type
 13813 ;;  __ftmul         3   36[COMRAM] unsigned um
 13814 ;;  __ftmul         1   40[COMRAM] unsigned char 
 13815 ;;  __ftmul         1   39[COMRAM] unsigned char 
 13816 ;;  __ftmul         1   35[COMRAM] unsigned char 
 13817 ;; Return value:  Size  Location     Type
 13818 ;;                  3   26[COMRAM] float 
 13819 ;; Registers used:
 13820 ;;		wreg, status,2, status,0, cstack
 13821 ;; Tracked objects:
 13822 ;;		On entry : 0/0
 13823 ;;		On exit  : 0/0
 13824 ;;		Unchanged: 0/0
 13825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 13826 ;;      Params:         6       0       0       0       0
 13827 ;;      Locals:         6       0       0       0       0
 13828 ;;      Temps:          3       0       0       0       0
 13829 ;;      Totals:        15       0       0       0       0
 13830 ;;Total ram usage:       15 bytes
 13831 ;; Hardware stack levels used:    1
 13832 ;; Hardware stack levels required when called:    7
 13833 ;; This function calls:
 13834 ;;		i1___ftpack
 13835 ;; This function is called by:
 13836 ;;		_IR_CheckCode
 13837 ;;		_ADC_CalculateVoltage
 13838 ;;		i1_IR_LoadCode
 13839 ;; This function uses a non-reentrant model
 13840 ;;
 13841                           
 13842                           	psect	text91
 13843  0006E2                     __ptext91:
 13844                           	opt stack 0
 13845  0006E2                     i1___ftmul:
 13846                           	opt stack 15
 13847                           
 13848                           ;incstack = 0
 13849  0006E2  C01D  F021         	movff	i1___ftmul@f1+2,??i1___ftmul
 13850  0006E6  6A22               	clrf	(??i1___ftmul+1)& (0+255),c
 13851  0006E8  6A23               	clrf	(??i1___ftmul+2)& (0+255),c
 13852  0006EA  341C               	rlcf	i1___ftmul@f1+1,w,c
 13853  0006EC  3621               	rlcf	??i1___ftmul& (0+255),f,c
 13854  0006EE  E301               	bnc	u624_21
 13855  0006F0  8022               	bsf	(??i1___ftmul+1)& (0+255),0,c
 13856  0006F2                     u624_21:
 13857  0006F2  5021               	movf	??i1___ftmul,w,c
 13858  0006F4  6E24               	movwf	i1___ftmul@exp,c
 13859  0006F6  5024               	movf	i1___ftmul@exp,w,c
 13860  0006F8  A4D8               	btfss	status,2,c
 13861  0006FA  D007               	goto	i1l5937
 13862  0006FC  0E00               	movlw	0
 13863  0006FE  6E1B               	movwf	?i1___ftmul,c
 13864  000700  0E00               	movlw	0
 13865  000702  6E1C               	movwf	?i1___ftmul+1,c
 13866  000704  0E00               	movlw	0
 13867  000706  6E1D               	movwf	?i1___ftmul+2,c
 13868  000708  0012               	return	
 13869  00070A                     i1l5937:
 13870  00070A  C020  F021         	movff	i1___ftmul@f2+2,??i1___ftmul
 13871  00070E  6A22               	clrf	(??i1___ftmul+1)& (0+255),c
 13872  000710  6A23               	clrf	(??i1___ftmul+2)& (0+255),c
 13873  000712  341F               	rlcf	i1___ftmul@f2+1,w,c
 13874  000714  3621               	rlcf	??i1___ftmul& (0+255),f,c
 13875  000716  E301               	bnc	u626_21
 13876  000718  8022               	bsf	(??i1___ftmul+1)& (0+255),0,c
 13877  00071A                     u626_21:
 13878  00071A  5021               	movf	??i1___ftmul,w,c
 13879  00071C  6E29               	movwf	i1___ftmul@sign,c
 13880  00071E  5029               	movf	i1___ftmul@sign,w,c
 13881  000720  A4D8               	btfss	status,2,c
 13882  000722  D007               	goto	i1l5943
 13883  000724  0E00               	movlw	0
 13884  000726  6E1B               	movwf	?i1___ftmul,c
 13885  000728  0E00               	movlw	0
 13886  00072A  6E1C               	movwf	?i1___ftmul+1,c
 13887  00072C  0E00               	movlw	0
 13888  00072E  6E1D               	movwf	?i1___ftmul+2,c
 13889  000730  0012               	return	
 13890  000732                     i1l5943:
 13891  000732  5029               	movf	i1___ftmul@sign,w,c
 13892  000734  0F7B               	addlw	123
 13893  000736  2624               	addwf	i1___ftmul@exp,f,c
 13894  000738  C01D  F029         	movff	i1___ftmul@f1+2,i1___ftmul@sign
 13895  00073C  5020               	movf	i1___ftmul@f2+2,w,c
 13896  00073E  1A29               	xorwf	i1___ftmul@sign,f,c
 13897  000740  0E80               	movlw	128
 13898  000742  1629               	andwf	i1___ftmul@sign,f,c
 13899  000744  8E1C               	bsf	i1___ftmul@f1+1,7,c
 13900  000746  8E1F               	bsf	i1___ftmul@f2+1,7,c
 13901  000748  0EFF               	movlw	255
 13902  00074A  161E               	andwf	i1___ftmul@f2,f,c
 13903  00074C  0EFF               	movlw	255
 13904  00074E  161F               	andwf	i1___ftmul@f2+1,f,c
 13905  000750  0E00               	movlw	0
 13906  000752  1620               	andwf	i1___ftmul@f2+2,f,c
 13907  000754  0E00               	movlw	0
 13908  000756  6E25               	movwf	i1___ftmul@f3_as_product,c
 13909  000758  0E00               	movlw	0
 13910  00075A  6E26               	movwf	i1___ftmul@f3_as_product+1,c
 13911  00075C  0E00               	movlw	0
 13912  00075E  6E27               	movwf	i1___ftmul@f3_as_product+2,c
 13913  000760  0E07               	movlw	7
 13914  000762  6E28               	movwf	i1___ftmul@cntr,c
 13915  000764                     i1l5957:
 13916  000764  A01B               	btfss	i1___ftmul@f1,0,c
 13917  000766  D006               	goto	i1l5961
 13918  000768  501E               	movf	i1___ftmul@f2,w,c
 13919  00076A  2625               	addwf	i1___ftmul@f3_as_product,f,c
 13920  00076C  501F               	movf	i1___ftmul@f2+1,w,c
 13921  00076E  2226               	addwfc	i1___ftmul@f3_as_product+1,f,c
 13922  000770  5020               	movf	i1___ftmul@f2+2,w,c
 13923  000772  2227               	addwfc	i1___ftmul@f3_as_product+2,f,c
 13924  000774                     i1l5961:
 13925  000774  90D8               	bcf	status,0,c
 13926  000776  321D               	rrcf	i1___ftmul@f1+2,f,c
 13927  000778  321C               	rrcf	i1___ftmul@f1+1,f,c
 13928  00077A  321B               	rrcf	i1___ftmul@f1,f,c
 13929  00077C  90D8               	bcf	status,0,c
 13930  00077E  361E               	rlcf	i1___ftmul@f2,f,c
 13931  000780  361F               	rlcf	i1___ftmul@f2+1,f,c
 13932  000782  3620               	rlcf	i1___ftmul@f2+2,f,c
 13933  000784  2E28               	decfsz	i1___ftmul@cntr,f,c
 13934  000786  D7EE               	goto	i1l5957
 13935  000788  0E09               	movlw	9
 13936  00078A  6E28               	movwf	i1___ftmul@cntr,c
 13937  00078C                     i1l5967:
 13938  00078C  A01B               	btfss	i1___ftmul@f1,0,c
 13939  00078E  D006               	goto	i1l5971
 13940  000790  501E               	movf	i1___ftmul@f2,w,c
 13941  000792  2625               	addwf	i1___ftmul@f3_as_product,f,c
 13942  000794  501F               	movf	i1___ftmul@f2+1,w,c
 13943  000796  2226               	addwfc	i1___ftmul@f3_as_product+1,f,c
 13944  000798  5020               	movf	i1___ftmul@f2+2,w,c
 13945  00079A  2227               	addwfc	i1___ftmul@f3_as_product+2,f,c
 13946  00079C                     i1l5971:
 13947  00079C  90D8               	bcf	status,0,c
 13948  00079E  321D               	rrcf	i1___ftmul@f1+2,f,c
 13949  0007A0  321C               	rrcf	i1___ftmul@f1+1,f,c
 13950  0007A2  321B               	rrcf	i1___ftmul@f1,f,c
 13951  0007A4  90D8               	bcf	status,0,c
 13952  0007A6  3227               	rrcf	i1___ftmul@f3_as_product+2,f,c
 13953  0007A8  3226               	rrcf	i1___ftmul@f3_as_product+1,f,c
 13954  0007AA  3225               	rrcf	i1___ftmul@f3_as_product,f,c
 13955  0007AC  2E28               	decfsz	i1___ftmul@cntr,f,c
 13956  0007AE  D7EE               	goto	i1l5967
 13957  0007B0  C025  F001         	movff	i1___ftmul@f3_as_product,i1___ftpack@arg
 13958  0007B4  C026  F002         	movff	i1___ftmul@f3_as_product+1,i1___ftpack@arg+1
 13959  0007B8  C027  F003         	movff	i1___ftmul@f3_as_product+2,i1___ftpack@arg+2
 13960  0007BC  C024  F004         	movff	i1___ftmul@exp,i1___ftpack@exp
 13961  0007C0  C029  F005         	movff	i1___ftmul@sign,i1___ftpack@sign
 13962  0007C4  ECAC  F007         	call	i1___ftpack	;wreg free
 13963  0007C8  C001  F01B         	movff	?i1___ftpack,?i1___ftmul
 13964  0007CC  C002  F01C         	movff	?i1___ftpack+1,?i1___ftmul+1
 13965  0007D0  C003  F01D         	movff	?i1___ftpack+2,?i1___ftmul+2
 13966  0007D4  0012               	return	
 13967  0007D6                     __end_ofi1___ftmul:
 13968                           	opt stack 0
 13969                           pclatu	equ	0xFFB
 13970                           pclath	equ	0xFFA
 13971                           tblptru	equ	0xFF8
 13972                           tblptrh	equ	0xFF7
 13973                           tblptrl	equ	0xFF6
 13974                           tablat	equ	0xFF5
 13975                           prodh	equ	0xFF4
 13976                           prodl	equ	0xFF3
 13977                           intcon	equ	0xFF2
 13978                           intcon2	equ	0xFF1
 13979                           intcon3	equ	0xFF0
 13980                           postinc0	equ	0xFEE
 13981                           fsr0h	equ	0xFEA
 13982                           fsr0l	equ	0xFE9
 13983                           wreg	equ	0xFE8
 13984                           postdec1	equ	0xFE5
 13985                           fsr1h	equ	0xFE2
 13986                           fsr1l	equ	0xFE1
 13987                           bsr	equ	0xFE0
 13988                           indf2	equ	0xFDF
 13989                           postinc2	equ	0xFDE
 13990                           postdec2	equ	0xFDD
 13991                           plusw2	equ	0xFDB
 13992                           fsr2h	equ	0xFDA
 13993                           fsr2l	equ	0xFD9
 13994                           status	equ	0xFD8
 13995                           
 13996 ;; *************** function i1_ADC_ChangeChannel *****************
 13997 ;; Defined at:
 13998 ;;		line 166 in file "ADC.c"
 13999 ;; Parameters:    Size  Location     Type
 14000 ;;		None
 14001 ;; Auto vars:     Size  Location     Type
 14002 ;;		None
 14003 ;; Return value:  Size  Location     Type
 14004 ;;		None               void
 14005 ;; Registers used:
 14006 ;;		wreg, status,2, status,0
 14007 ;; Tracked objects:
 14008 ;;		On entry : 0/0
 14009 ;;		On exit  : 0/0
 14010 ;;		Unchanged: 0/0
 14011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14012 ;;      Params:         0       0       0       0       0
 14013 ;;      Locals:         0       0       0       0       0
 14014 ;;      Temps:          0       0       0       0       0
 14015 ;;      Totals:         0       0       0       0       0
 14016 ;;Total ram usage:        0 bytes
 14017 ;; Hardware stack levels used:    1
 14018 ;; Hardware stack levels required when called:    6
 14019 ;; This function calls:
 14020 ;;		Nothing
 14021 ;; This function is called by:
 14022 ;;		_ADC_CalculateVoltage
 14023 ;; This function uses a non-reentrant model
 14024 ;;
 14025                           
 14026                           	psect	text92
 14027  001B92                     __ptext92:
 14028                           	opt stack 0
 14029  001B92                     i1_ADC_ChangeChannel:
 14030                           	opt stack 16
 14031                           
 14032                           ;ADC.c: 168: if(ADC_CurrentSource == 10)
 14033                           
 14034                           ;incstack = 0
 14035  001B92  0E0A               	movlw	10
 14036  001B94  1865               	xorwf	_ADC_CurrentSource,w,c
 14037  001B96  A4D8               	btfss	status,2,c
 14038  001B98  D007               	goto	i1l6885
 14039                           
 14040                           ;ADC.c: 169: {
 14041                           ;ADC.c: 170: ADC_CurrentSource = 11;
 14042  001B9A  0E0B               	movlw	11
 14043  001B9C  6E65               	movwf	_ADC_CurrentSource,c
 14044                           
 14045                           ;ADC.c: 171: ADCON0bits.CHS = 1;
 14046  001B9E  50C2               	movf	4034,w,c	;volatile
 14047  001BA0  0BC3               	andlw	-61
 14048  001BA2  0904               	iorlw	4
 14049  001BA4  6EC2               	movwf	4034,c	;volatile
 14050                           
 14051                           ;ADC.c: 172: }
 14052  001BA6  0012               	return	
 14053  001BA8                     i1l6885:
 14054                           
 14055                           ;ADC.c: 173: else
 14056                           ;ADC.c: 174: {
 14057                           ;ADC.c: 175: ADC_CurrentSource = 10;
 14058  001BA8  0E0A               	movlw	10
 14059  001BAA  6E65               	movwf	_ADC_CurrentSource,c
 14060                           
 14061                           ;ADC.c: 176: ADCON0bits.CHS = 0;
 14062  001BAC  94C2               	bcf	4034,2,c	;volatile
 14063  001BAE  96C2               	bcf	4034,3,c	;volatile
 14064  001BB0  98C2               	bcf	4034,4,c	;volatile
 14065  001BB2  9AC2               	bcf	4034,5,c	;volatile
 14066  001BB4  0012               	return	
 14067  001BB6                     __end_ofi1_ADC_ChangeChannel:
 14068                           	opt stack 0
 14069                           pclatu	equ	0xFFB
 14070                           pclath	equ	0xFFA
 14071                           tblptru	equ	0xFF8
 14072                           tblptrh	equ	0xFF7
 14073                           tblptrl	equ	0xFF6
 14074                           tablat	equ	0xFF5
 14075                           prodh	equ	0xFF4
 14076                           prodl	equ	0xFF3
 14077                           intcon	equ	0xFF2
 14078                           intcon2	equ	0xFF1
 14079                           intcon3	equ	0xFF0
 14080                           postinc0	equ	0xFEE
 14081                           fsr0h	equ	0xFEA
 14082                           fsr0l	equ	0xFE9
 14083                           wreg	equ	0xFE8
 14084                           postdec1	equ	0xFE5
 14085                           fsr1h	equ	0xFE2
 14086                           fsr1l	equ	0xFE1
 14087                           bsr	equ	0xFE0
 14088                           indf2	equ	0xFDF
 14089                           postinc2	equ	0xFDE
 14090                           postdec2	equ	0xFDD
 14091                           plusw2	equ	0xFDB
 14092                           fsr2h	equ	0xFDA
 14093                           fsr2l	equ	0xFD9
 14094                           status	equ	0xFD8
 14095                           
 14096 ;; *************** function ___ftdiv *****************
 14097 ;; Defined at:
 14098 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftdiv.c"
 14099 ;; Parameters:    Size  Location     Type
 14100 ;;  f1              3   11[COMRAM] float 
 14101 ;;  f2              3   14[COMRAM] float 
 14102 ;; Auto vars:     Size  Location     Type
 14103 ;;  f3              3   21[COMRAM] float 
 14104 ;;  sign            1   25[COMRAM] unsigned char 
 14105 ;;  exp             1   24[COMRAM] unsigned char 
 14106 ;;  cntr            1   20[COMRAM] unsigned char 
 14107 ;; Return value:  Size  Location     Type
 14108 ;;                  3   11[COMRAM] float 
 14109 ;; Registers used:
 14110 ;;		wreg, status,2, status,0, cstack
 14111 ;; Tracked objects:
 14112 ;;		On entry : 0/0
 14113 ;;		On exit  : 0/0
 14114 ;;		Unchanged: 0/0
 14115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14116 ;;      Params:         6       0       0       0       0
 14117 ;;      Locals:         6       0       0       0       0
 14118 ;;      Temps:          3       0       0       0       0
 14119 ;;      Totals:        15       0       0       0       0
 14120 ;;Total ram usage:       15 bytes
 14121 ;; Hardware stack levels used:    1
 14122 ;; Hardware stack levels required when called:    7
 14123 ;; This function calls:
 14124 ;;		i1___ftpack
 14125 ;; This function is called by:
 14126 ;;		_ADC_CalculateVoltage
 14127 ;;		_MSC_Scale
 14128 ;; This function uses a non-reentrant model
 14129 ;;
 14130                           
 14131                           	psect	text93
 14132  000A92                     __ptext93:
 14133                           	opt stack 0
 14134  000A92                     ___ftdiv:
 14135                           	opt stack 15
 14136                           
 14137                           ;incstack = 0
 14138  000A92  C00E  F012         	movff	___ftdiv@f1+2,??___ftdiv
 14139  000A96  6A13               	clrf	(??___ftdiv+1)& (0+255),c
 14140  000A98  6A14               	clrf	(??___ftdiv+2)& (0+255),c
 14141  000A9A  340D               	rlcf	___ftdiv@f1+1,w,c
 14142  000A9C  3612               	rlcf	??___ftdiv& (0+255),f,c
 14143  000A9E  E301               	bnc	u697_21
 14144  000AA0  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
 14145  000AA2                     u697_21:
 14146  000AA2  5012               	movf	??___ftdiv,w,c
 14147  000AA4  6E19               	movwf	___ftdiv@exp,c
 14148  000AA6  5019               	movf	___ftdiv@exp,w,c
 14149  000AA8  A4D8               	btfss	status,2,c
 14150  000AAA  D007               	goto	i1l6483
 14151  000AAC  0E00               	movlw	0
 14152  000AAE  6E0C               	movwf	?___ftdiv,c
 14153  000AB0  0E00               	movlw	0
 14154  000AB2  6E0D               	movwf	?___ftdiv+1,c
 14155  000AB4  0E00               	movlw	0
 14156  000AB6  6E0E               	movwf	?___ftdiv+2,c
 14157  000AB8  0012               	return	
 14158  000ABA                     i1l6483:
 14159  000ABA  C011  F012         	movff	___ftdiv@f2+2,??___ftdiv
 14160  000ABE  6A13               	clrf	(??___ftdiv+1)& (0+255),c
 14161  000AC0  6A14               	clrf	(??___ftdiv+2)& (0+255),c
 14162  000AC2  3410               	rlcf	___ftdiv@f2+1,w,c
 14163  000AC4  3612               	rlcf	??___ftdiv& (0+255),f,c
 14164  000AC6  E301               	bnc	u699_21
 14165  000AC8  8013               	bsf	(??___ftdiv+1)& (0+255),0,c
 14166  000ACA                     u699_21:
 14167  000ACA  5012               	movf	??___ftdiv,w,c
 14168  000ACC  6E1A               	movwf	___ftdiv@sign,c
 14169  000ACE  501A               	movf	___ftdiv@sign,w,c
 14170  000AD0  A4D8               	btfss	status,2,c
 14171  000AD2  D007               	goto	i1l6489
 14172  000AD4  0E00               	movlw	0
 14173  000AD6  6E0C               	movwf	?___ftdiv,c
 14174  000AD8  0E00               	movlw	0
 14175  000ADA  6E0D               	movwf	?___ftdiv+1,c
 14176  000ADC  0E00               	movlw	0
 14177  000ADE  6E0E               	movwf	?___ftdiv+2,c
 14178  000AE0  0012               	return	
 14179  000AE2                     i1l6489:
 14180  000AE2  0E00               	movlw	0
 14181  000AE4  6E16               	movwf	___ftdiv@f3,c
 14182  000AE6  0E00               	movlw	0
 14183  000AE8  6E17               	movwf	___ftdiv@f3+1,c
 14184  000AEA  0E00               	movlw	0
 14185  000AEC  6E18               	movwf	___ftdiv@f3+2,c
 14186  000AEE  501A               	movf	___ftdiv@sign,w,c
 14187  000AF0  0F89               	addlw	137
 14188  000AF2  5E19               	subwf	___ftdiv@exp,f,c
 14189  000AF4  C00E  F01A         	movff	___ftdiv@f1+2,___ftdiv@sign
 14190  000AF8  5011               	movf	___ftdiv@f2+2,w,c
 14191  000AFA  1A1A               	xorwf	___ftdiv@sign,f,c
 14192  000AFC  0E80               	movlw	128
 14193  000AFE  161A               	andwf	___ftdiv@sign,f,c
 14194  000B00  8E0D               	bsf	___ftdiv@f1+1,7,c
 14195  000B02  0EFF               	movlw	255
 14196  000B04  160C               	andwf	___ftdiv@f1,f,c
 14197  000B06  0EFF               	movlw	255
 14198  000B08  160D               	andwf	___ftdiv@f1+1,f,c
 14199  000B0A  0E00               	movlw	0
 14200  000B0C  160E               	andwf	___ftdiv@f1+2,f,c
 14201  000B0E  8E10               	bsf	___ftdiv@f2+1,7,c
 14202  000B10  0EFF               	movlw	255
 14203  000B12  160F               	andwf	___ftdiv@f2,f,c
 14204  000B14  0EFF               	movlw	255
 14205  000B16  1610               	andwf	___ftdiv@f2+1,f,c
 14206  000B18  0E00               	movlw	0
 14207  000B1A  1611               	andwf	___ftdiv@f2+2,f,c
 14208  000B1C  0E18               	movlw	24
 14209  000B1E  6E15               	movwf	___ftdiv@cntr,c
 14210  000B20                     i1l6509:
 14211  000B20  90D8               	bcf	status,0,c
 14212  000B22  3616               	rlcf	___ftdiv@f3,f,c
 14213  000B24  3617               	rlcf	___ftdiv@f3+1,f,c
 14214  000B26  3618               	rlcf	___ftdiv@f3+2,f,c
 14215  000B28  500F               	movf	___ftdiv@f2,w,c
 14216  000B2A  5C0C               	subwf	___ftdiv@f1,w,c
 14217  000B2C  5010               	movf	___ftdiv@f2+1,w,c
 14218  000B2E  580D               	subwfb	___ftdiv@f1+1,w,c
 14219  000B30  5011               	movf	___ftdiv@f2+2,w,c
 14220  000B32  580E               	subwfb	___ftdiv@f1+2,w,c
 14221  000B34  A0D8               	btfss	status,0,c
 14222  000B36  D007               	goto	i1l1597
 14223  000B38  500F               	movf	___ftdiv@f2,w,c
 14224  000B3A  5E0C               	subwf	___ftdiv@f1,f,c
 14225  000B3C  5010               	movf	___ftdiv@f2+1,w,c
 14226  000B3E  5A0D               	subwfb	___ftdiv@f1+1,f,c
 14227  000B40  5011               	movf	___ftdiv@f2+2,w,c
 14228  000B42  5A0E               	subwfb	___ftdiv@f1+2,f,c
 14229  000B44  8016               	bsf	___ftdiv@f3,0,c
 14230  000B46                     i1l1597:
 14231  000B46  90D8               	bcf	status,0,c
 14232  000B48  360C               	rlcf	___ftdiv@f1,f,c
 14233  000B4A  360D               	rlcf	___ftdiv@f1+1,f,c
 14234  000B4C  360E               	rlcf	___ftdiv@f1+2,f,c
 14235  000B4E  2E15               	decfsz	___ftdiv@cntr,f,c
 14236  000B50  D7E7               	goto	i1l6509
 14237  000B52  C016  F001         	movff	___ftdiv@f3,i1___ftpack@arg
 14238  000B56  C017  F002         	movff	___ftdiv@f3+1,i1___ftpack@arg+1
 14239  000B5A  C018  F003         	movff	___ftdiv@f3+2,i1___ftpack@arg+2
 14240  000B5E  C019  F004         	movff	___ftdiv@exp,i1___ftpack@exp
 14241  000B62  C01A  F005         	movff	___ftdiv@sign,i1___ftpack@sign
 14242  000B66  ECAC  F007         	call	i1___ftpack	;wreg free
 14243  000B6A  C001  F00C         	movff	?i1___ftpack,?___ftdiv
 14244  000B6E  C002  F00D         	movff	?i1___ftpack+1,?___ftdiv+1
 14245  000B72  C003  F00E         	movff	?i1___ftpack+2,?___ftdiv+2
 14246  000B76  0012               	return	
 14247  000B78                     __end_of___ftdiv:
 14248                           	opt stack 0
 14249                           pclatu	equ	0xFFB
 14250                           pclath	equ	0xFFA
 14251                           tblptru	equ	0xFF8
 14252                           tblptrh	equ	0xFF7
 14253                           tblptrl	equ	0xFF6
 14254                           tablat	equ	0xFF5
 14255                           prodh	equ	0xFF4
 14256                           prodl	equ	0xFF3
 14257                           intcon	equ	0xFF2
 14258                           intcon2	equ	0xFF1
 14259                           intcon3	equ	0xFF0
 14260                           postinc0	equ	0xFEE
 14261                           fsr0h	equ	0xFEA
 14262                           fsr0l	equ	0xFE9
 14263                           wreg	equ	0xFE8
 14264                           postdec1	equ	0xFE5
 14265                           fsr1h	equ	0xFE2
 14266                           fsr1l	equ	0xFE1
 14267                           bsr	equ	0xFE0
 14268                           indf2	equ	0xFDF
 14269                           postinc2	equ	0xFDE
 14270                           postdec2	equ	0xFDD
 14271                           plusw2	equ	0xFDB
 14272                           fsr2h	equ	0xFDA
 14273                           fsr2l	equ	0xFD9
 14274                           status	equ	0xFD8
 14275                           
 14276 ;; *************** function i1___ftpack *****************
 14277 ;; Defined at:
 14278 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 14279 ;; Parameters:    Size  Location     Type
 14280 ;;  arg             3    0[COMRAM] unsigned um
 14281 ;;  exp             1    3[COMRAM] unsigned char 
 14282 ;;  sign            1    4[COMRAM] unsigned char 
 14283 ;; Auto vars:     Size  Location     Type
 14284 ;;		None
 14285 ;; Return value:  Size  Location     Type
 14286 ;;                  3    0[COMRAM] float 
 14287 ;; Registers used:
 14288 ;;		wreg, status,2, status,0
 14289 ;; Tracked objects:
 14290 ;;		On entry : 0/0
 14291 ;;		On exit  : 0/0
 14292 ;;		Unchanged: 0/0
 14293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14294 ;;      Params:         5       0       0       0       0
 14295 ;;      Locals:         0       0       0       0       0
 14296 ;;      Temps:          3       0       0       0       0
 14297 ;;      Totals:         8       0       0       0       0
 14298 ;;Total ram usage:        8 bytes
 14299 ;; Hardware stack levels used:    1
 14300 ;; Hardware stack levels required when called:    6
 14301 ;; This function calls:
 14302 ;;		Nothing
 14303 ;; This function is called by:
 14304 ;;		___ftdiv
 14305 ;;		i1___ftmul
 14306 ;;		i1___lwtoft
 14307 ;; This function uses a non-reentrant model
 14308 ;;
 14309                           
 14310                           	psect	text94
 14311  000F58                     __ptext94:
 14312                           	opt stack 0
 14313  000F58                     i1___ftpack:
 14314                           	opt stack 15
 14315                           
 14316                           ;incstack = 0
 14317  000F58  5004               	movf	i1___ftpack@exp,w,c
 14318  000F5A  B4D8               	btfsc	status,2,c
 14319  000F5C  D005               	goto	i1l5435
 14320  000F5E  5001               	movf	i1___ftpack@arg,w,c
 14321  000F60  1002               	iorwf	i1___ftpack@arg+1,w,c
 14322  000F62  1003               	iorwf	i1___ftpack@arg+2,w,c
 14323  000F64  A4D8               	btfss	status,2,c
 14324  000F66  D00C               	goto	i1l5441
 14325  000F68                     i1l5435:
 14326  000F68  0E00               	movlw	0
 14327  000F6A  6E01               	movwf	?i1___ftpack,c
 14328  000F6C  0E00               	movlw	0
 14329  000F6E  6E02               	movwf	?i1___ftpack+1,c
 14330  000F70  0E00               	movlw	0
 14331  000F72  6E03               	movwf	?i1___ftpack+2,c
 14332  000F74  0012               	return	
 14333  000F76                     i1l5439:
 14334  000F76  2A04               	incf	i1___ftpack@exp,f,c
 14335  000F78  90D8               	bcf	status,0,c
 14336  000F7A  3203               	rrcf	i1___ftpack@arg+2,f,c
 14337  000F7C  3202               	rrcf	i1___ftpack@arg+1,f,c
 14338  000F7E  3201               	rrcf	i1___ftpack@arg,f,c
 14339  000F80                     i1l5441:
 14340  000F80  0E00               	movlw	0
 14341  000F82  1401               	andwf	i1___ftpack@arg,w,c
 14342  000F84  6E06               	movwf	??i1___ftpack& (0+255),c
 14343  000F86  0E00               	movlw	0
 14344  000F88  1402               	andwf	i1___ftpack@arg+1,w,c
 14345  000F8A  6E07               	movwf	(??i1___ftpack+1)& (0+255),c
 14346  000F8C  0EFE               	movlw	254
 14347  000F8E  1403               	andwf	i1___ftpack@arg+2,w,c
 14348  000F90  6E08               	movwf	(??i1___ftpack+2)& (0+255),c
 14349  000F92  5006               	movf	??i1___ftpack,w,c
 14350  000F94  1007               	iorwf	??i1___ftpack+1,w,c
 14351  000F96  1008               	iorwf	??i1___ftpack+2,w,c
 14352  000F98  B4D8               	btfsc	status,2,c
 14353  000F9A  D00C               	goto	i1l5447
 14354  000F9C  D7EC               	goto	i1l5439
 14355  000F9E                     i1l5443:
 14356  000F9E  2A04               	incf	i1___ftpack@exp,f,c
 14357  000FA0  0E01               	movlw	1
 14358  000FA2  2601               	addwf	i1___ftpack@arg,f,c
 14359  000FA4  0E00               	movlw	0
 14360  000FA6  2202               	addwfc	i1___ftpack@arg+1,f,c
 14361  000FA8  0E00               	movlw	0
 14362  000FAA  2203               	addwfc	i1___ftpack@arg+2,f,c
 14363  000FAC  90D8               	bcf	status,0,c
 14364  000FAE  3203               	rrcf	i1___ftpack@arg+2,f,c
 14365  000FB0  3202               	rrcf	i1___ftpack@arg+1,f,c
 14366  000FB2  3201               	rrcf	i1___ftpack@arg,f,c
 14367  000FB4                     i1l5447:
 14368  000FB4  0E00               	movlw	0
 14369  000FB6  1401               	andwf	i1___ftpack@arg,w,c
 14370  000FB8  6E06               	movwf	??i1___ftpack& (0+255),c
 14371  000FBA  0E00               	movlw	0
 14372  000FBC  1402               	andwf	i1___ftpack@arg+1,w,c
 14373  000FBE  6E07               	movwf	(??i1___ftpack+1)& (0+255),c
 14374  000FC0  0EFF               	movlw	255
 14375  000FC2  1403               	andwf	i1___ftpack@arg+2,w,c
 14376  000FC4  6E08               	movwf	(??i1___ftpack+2)& (0+255),c
 14377  000FC6  5006               	movf	??i1___ftpack,w,c
 14378  000FC8  1007               	iorwf	??i1___ftpack+1,w,c
 14379  000FCA  1008               	iorwf	??i1___ftpack+2,w,c
 14380  000FCC  B4D8               	btfsc	status,2,c
 14381  000FCE  D006               	goto	i1l5451
 14382  000FD0  D7E6               	goto	i1l5443
 14383  000FD2                     i1l5449:
 14384  000FD2  0604               	decf	i1___ftpack@exp,f,c
 14385  000FD4  90D8               	bcf	status,0,c
 14386  000FD6  3601               	rlcf	i1___ftpack@arg,f,c
 14387  000FD8  3602               	rlcf	i1___ftpack@arg+1,f,c
 14388  000FDA  3603               	rlcf	i1___ftpack@arg+2,f,c
 14389  000FDC                     i1l5451:
 14390  000FDC  BE02               	btfsc	i1___ftpack@arg+1,7,c
 14391  000FDE  D003               	goto	i1l1539
 14392  000FE0  0E02               	movlw	2
 14393  000FE2  6004               	cpfslt	i1___ftpack@exp,c
 14394  000FE4  D7F6               	goto	i1l5449
 14395  000FE6                     i1l1539:
 14396  000FE6  A004               	btfss	i1___ftpack@exp,0,c
 14397  000FE8  9E02               	bcf	i1___ftpack@arg+1,7,c
 14398  000FEA  90D8               	bcf	status,0,c
 14399  000FEC  3204               	rrcf	i1___ftpack@exp,f,c
 14400  000FEE  5004               	movf	i1___ftpack@exp,w,c
 14401  000FF0  1203               	iorwf	i1___ftpack@arg+2,f,c
 14402  000FF2  5005               	movf	i1___ftpack@sign,w,c
 14403  000FF4  A4D8               	btfss	status,2,c
 14404  000FF6  8E03               	bsf	i1___ftpack@arg+2,7,c
 14405  000FF8  C001  F001         	movff	i1___ftpack@arg,?i1___ftpack
 14406  000FFC  C002  F002         	movff	i1___ftpack@arg+1,?i1___ftpack+1
 14407  001000  C003  F003         	movff	i1___ftpack@arg+2,?i1___ftpack+2
 14408  001004  0012               	return	
 14409  001006                     __end_ofi1___ftpack:
 14410                           	opt stack 0
 14411                           pclatu	equ	0xFFB
 14412                           pclath	equ	0xFFA
 14413                           tblptru	equ	0xFF8
 14414                           tblptrh	equ	0xFF7
 14415                           tblptrl	equ	0xFF6
 14416                           tablat	equ	0xFF5
 14417                           prodh	equ	0xFF4
 14418                           prodl	equ	0xFF3
 14419                           intcon	equ	0xFF2
 14420                           intcon2	equ	0xFF1
 14421                           intcon3	equ	0xFF0
 14422                           postinc0	equ	0xFEE
 14423                           fsr0h	equ	0xFEA
 14424                           fsr0l	equ	0xFE9
 14425                           wreg	equ	0xFE8
 14426                           postdec1	equ	0xFE5
 14427                           fsr1h	equ	0xFE2
 14428                           fsr1l	equ	0xFE1
 14429                           bsr	equ	0xFE0
 14430                           indf2	equ	0xFDF
 14431                           postinc2	equ	0xFDE
 14432                           postdec2	equ	0xFDD
 14433                           plusw2	equ	0xFDB
 14434                           fsr2h	equ	0xFDA
 14435                           fsr2l	equ	0xFD9
 14436                           status	equ	0xFD8
 14437                           
 14438 ;; *************** function _high_isr *****************
 14439 ;; Defined at:
 14440 ;;		line 48 in file "INTERRUPTS.c"
 14441 ;; Parameters:    Size  Location     Type
 14442 ;;		None
 14443 ;; Auto vars:     Size  Location     Type
 14444 ;;  RFtemp          2   55[BANK0 ] unsigned int 
 14445 ;; Return value:  Size  Location     Type
 14446 ;;		None               void
 14447 ;; Registers used:
 14448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14449 ;; Tracked objects:
 14450 ;;		On entry : 0/0
 14451 ;;		On exit  : 0/0
 14452 ;;		Unchanged: 0/0
 14453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14454 ;;      Params:         0       0       0       0       0
 14455 ;;      Locals:         0       2       0       0       0
 14456 ;;      Temps:          0      14       0       0       0
 14457 ;;      Totals:         0      16       0       0       0
 14458 ;;Total ram usage:       16 bytes
 14459 ;; Hardware stack levels used:    1
 14460 ;; Hardware stack levels required when called:    5
 14461 ;; This function calls:
 14462 ;;		_RF_CheckCode
 14463 ;;		_TMR_Timer0Start
 14464 ;;		_TMR_Timer0Status
 14465 ;;		i2_RF_ResetData
 14466 ;;		i2_SYS_ActivityTimerReset
 14467 ;;		i2_TMR_ResetTimer0
 14468 ;;		i2_TMR_Timer0
 14469 ;; This function is called by:
 14470 ;;		Interrupt level 2
 14471 ;; This function uses a non-reentrant model
 14472 ;;
 14473                           
 14474                           	psect	intcode
 14475  000008                     __pintcode:
 14476                           	opt stack 0
 14477  000008                     _high_isr:
 14478                           	opt stack 13
 14479                           
 14480                           ;incstack = 0
 14481  000008  8266               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 14482  00000A  CFFA F0A9          	movff	pclath,??_high_isr
 14483  00000E  CFFB F0AA          	movff	pclatu,??_high_isr+1
 14484  000012  EF12  F01D         	goto	int_func
 14485                           pclatu	equ	0xFFB
 14486                           pclath	equ	0xFFA
 14487                           tblptru	equ	0xFF8
 14488                           tblptrh	equ	0xFF7
 14489                           tblptrl	equ	0xFF6
 14490                           tablat	equ	0xFF5
 14491                           prodh	equ	0xFF4
 14492                           prodl	equ	0xFF3
 14493                           intcon	equ	0xFF2
 14494                           intcon2	equ	0xFF1
 14495                           intcon3	equ	0xFF0
 14496                           postinc0	equ	0xFEE
 14497                           fsr0h	equ	0xFEA
 14498                           fsr0l	equ	0xFE9
 14499                           wreg	equ	0xFE8
 14500                           postdec1	equ	0xFE5
 14501                           fsr1h	equ	0xFE2
 14502                           fsr1l	equ	0xFE1
 14503                           bsr	equ	0xFE0
 14504                           indf2	equ	0xFDF
 14505                           postinc2	equ	0xFDE
 14506                           postdec2	equ	0xFDD
 14507                           plusw2	equ	0xFDB
 14508                           fsr2h	equ	0xFDA
 14509                           fsr2l	equ	0xFD9
 14510                           status	equ	0xFD8
 14511                           
 14512                           	psect	intcode_body
 14513  003A24                     __pintcode_body:
 14514                           	opt stack 13
 14515  003A24                     int_func:
 14516                           	opt stack 13
 14517  003A24  CFE9 F0AB          	movff	fsr0l,??_high_isr+2
 14518  003A28  CFEA F0AC          	movff	fsr0h,??_high_isr+3
 14519  003A2C  CFE1 F0AD          	movff	fsr1l,??_high_isr+4
 14520  003A30  CFE2 F0AE          	movff	fsr1h,??_high_isr+5
 14521  003A34  CFD9 F0AF          	movff	fsr2l,??_high_isr+6
 14522  003A38  CFDA F0B0          	movff	fsr2h,??_high_isr+7
 14523  003A3C  CFF3 F0B1          	movff	prodl,??_high_isr+8
 14524  003A40  CFF4 F0B2          	movff	prodh,??_high_isr+9
 14525  003A44  CFF6 F0B3          	movff	tblptrl,??_high_isr+10
 14526  003A48  CFF7 F0B4          	movff	tblptrh,??_high_isr+11
 14527  003A4C  CFF8 F0B5          	movff	tblptru,??_high_isr+12
 14528  003A50  CFF5 F0B6          	movff	tablat,??_high_isr+13
 14529                           
 14530                           ;INTERRUPTS.c: 50: unsigned int RFtemp = 0;
 14531  003A54  0E00               	movlw	0
 14532  003A56  0100               	movlb	0	; () banked
 14533  003A58  6FB8               	movwf	(high_isr@RFtemp+1)& (0+255),b
 14534  003A5A  0E00               	movlw	0
 14535  003A5C  6FB7               	movwf	high_isr@RFtemp& (0+255),b
 14536                           
 14537                           ; BSR set to: 0
 14538                           ;INTERRUPTS.c: 52: if(INTCON3bits.INT1IF || INTCON3bits.INT2IF)
 14539  003A5E  A0F0               	btfss	intcon3,0,c	;volatile
 14540                           
 14541                           ; BSR set to: 0
 14542  003A60  B2F0               	btfsc	intcon3,1,c	;volatile
 14543  003A62  D001               	goto	i2l7435
 14544  003A64  D074               	goto	i2l186
 14545  003A66                     i2l7435:
 14546                           
 14547                           ; BSR set to: 0
 14548                           ;INTERRUPTS.c: 53: {
 14549                           ;INTERRUPTS.c: 55: if(!TMR_Timer0Status())
 14550  003A66  ECBC  F00F         	call	_TMR_Timer0Status	;wreg free
 14551  003A6A  0900               	iorlw	0
 14552  003A6C  A4D8               	btfss	status,2,c
 14553  003A6E  D003               	goto	i2l189
 14554                           
 14555                           ;INTERRUPTS.c: 56: {
 14556                           ;INTERRUPTS.c: 58: TMR_Timer0Start();
 14557  003A70  EC63  F00F         	call	_TMR_Timer0Start	;wreg free
 14558                           
 14559                           ;INTERRUPTS.c: 59: }
 14560  003A74  D069               	goto	i2l7477
 14561  003A76                     i2l189:
 14562                           
 14563                           ;INTERRUPTS.c: 60: else
 14564                           ;INTERRUPTS.c: 61: {
 14565                           ;INTERRUPTS.c: 62: RFtemp = TMR0L;
 14566  003A76  CFD6 F0B7          	movff	4054,high_isr@RFtemp	;volatile
 14567  003A7A  0100               	movlb	0	; () banked
 14568  003A7C  6BB8               	clrf	(high_isr@RFtemp+1)& (0+255),b
 14569                           
 14570                           ; BSR set to: 0
 14571                           ;INTERRUPTS.c: 63: RFtemp += (unsigned int)TMR0H << 8;
 14572  003A7E  50D7               	movf	4055,w,c	;volatile
 14573  003A80  0100               	movlb	0	; () banked
 14574  003A82  27B8               	addwf	(high_isr@RFtemp+1)& (0+255),f,b
 14575                           
 14576                           ; BSR set to: 0
 14577                           ;INTERRUPTS.c: 64: TMR_ResetTimer0();
 14578  003A84  EC41  F00D         	call	i2_TMR_ResetTimer0	;wreg free
 14579                           
 14580                           ;INTERRUPTS.c: 65: if(!RFStarted)
 14581  003A88  0100               	movlb	0	; () banked
 14582  003A8A  51C5               	movf	_RFStarted& (0+255),w,b
 14583  003A8C  A4D8               	btfss	status,2,c
 14584  003A8E  D030               	goto	i2l191
 14585                           
 14586                           ; BSR set to: 0
 14587                           ;INTERRUPTS.c: 66: {
 14588                           ;INTERRUPTS.c: 67: if(System_State == 8)
 14589  003A90  0E08               	movlw	8
 14590  003A92  0100               	movlb	0	; () banked
 14591  003A94  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
 14592  003A96  A4D8               	btfss	status,2,c
 14593  003A98  D018               	goto	i2l7453
 14594                           
 14595                           ; BSR set to: 0
 14596                           ;INTERRUPTS.c: 68: {
 14597                           ;INTERRUPTS.c: 69: if(RFtemp >= RF_SyncLow && RFtemp <= RF_SyncHigh)
 14598  003A9A  0100               	movlb	0	; () banked
 14599  003A9C  51BD               	movf	_RF_SyncLow& (0+255),w,b
 14600  003A9E  0100               	movlb	0	; () banked
 14601  003AA0  5DB7               	subwf	high_isr@RFtemp& (0+255),w,b
 14602  003AA2  0100               	movlb	0	; () banked
 14603  003AA4  51BE               	movf	(_RF_SyncLow+1)& (0+255),w,b
 14604  003AA6  0100               	movlb	0	; () banked
 14605  003AA8  59B8               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14606  003AAA  A0D8               	btfss	status,0,c
 14607  003AAC  D021               	goto	i2l191
 14608                           
 14609                           ; BSR set to: 0
 14610  003AAE  0100               	movlb	0	; () banked
 14611  003AB0  51B7               	movf	high_isr@RFtemp& (0+255),w,b
 14612  003AB2  0100               	movlb	0	; () banked
 14613  003AB4  5DBB               	subwf	_RF_SyncHigh& (0+255),w,b
 14614  003AB6  0100               	movlb	0	; () banked
 14615  003AB8  51B8               	movf	(high_isr@RFtemp+1)& (0+255),w,b
 14616  003ABA  0100               	movlb	0	; () banked
 14617  003ABC  59BC               	subwfb	(_RF_SyncHigh+1)& (0+255),w,b
 14618  003ABE  A0D8               	btfss	status,0,c
 14619  003AC0  D017               	goto	i2l191
 14620                           
 14621                           ; BSR set to: 0
 14622                           ;INTERRUPTS.c: 70: {
 14623                           ;INTERRUPTS.c: 71: RFStarted = 1;
 14624  003AC2  0E01               	movlw	1
 14625  003AC4  0100               	movlb	0	; () banked
 14626  003AC6  6FC5               	movwf	_RFStarted& (0+255),b
 14627                           
 14628                           ; BSR set to: 0
 14629                           ;INTERRUPTS.c: 72: }
 14630                           ;INTERRUPTS.c: 73: }
 14631  003AC8  D013               	goto	i2l191
 14632  003ACA                     i2l7453:
 14633                           
 14634                           ; BSR set to: 0
 14635                           ;INTERRUPTS.c: 74: else
 14636                           ;INTERRUPTS.c: 75: {
 14637                           ;INTERRUPTS.c: 76: if(RFtemp >= 400 && RFtemp <= 1000)
 14638  003ACA  0E90               	movlw	144
 14639  003ACC  0100               	movlb	0	; () banked
 14640  003ACE  5DB7               	subwf	high_isr@RFtemp& (0+255),w,b
 14641  003AD0  0E01               	movlw	1
 14642  003AD2  0100               	movlb	0	; () banked
 14643  003AD4  59B8               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14644  003AD6  A0D8               	btfss	status,0,c
 14645  003AD8  D00B               	goto	i2l191
 14646                           
 14647                           ; BSR set to: 0
 14648  003ADA  0EE9               	movlw	233
 14649  003ADC  0100               	movlb	0	; () banked
 14650  003ADE  5DB7               	subwf	high_isr@RFtemp& (0+255),w,b
 14651  003AE0  0E03               	movlw	3
 14652  003AE2  0100               	movlb	0	; () banked
 14653  003AE4  59B8               	subwfb	(high_isr@RFtemp+1)& (0+255),w,b
 14654  003AE6  B0D8               	btfsc	status,0,c
 14655  003AE8  D003               	goto	i2l191
 14656                           
 14657                           ; BSR set to: 0
 14658                           ;INTERRUPTS.c: 77: {
 14659                           ;INTERRUPTS.c: 78: RFStarted = 1;
 14660  003AEA  0E01               	movlw	1
 14661  003AEC  0100               	movlb	0	; () banked
 14662  003AEE  6FC5               	movwf	_RFStarted& (0+255),b
 14663  003AF0                     i2l191:
 14664                           
 14665                           ; BSR set to: 0
 14666                           ;INTERRUPTS.c: 79: }
 14667                           ;INTERRUPTS.c: 80: }
 14668                           ;INTERRUPTS.c: 81: }
 14669                           ;INTERRUPTS.c: 82: if(RFStarted)
 14670  003AF0  0100               	movlb	0	; () banked
 14671  003AF2  51C5               	movf	_RFStarted& (0+255),w,b
 14672  003AF4  B4D8               	btfsc	status,2,c
 14673  003AF6  D028               	goto	i2l7477
 14674                           
 14675                           ; BSR set to: 0
 14676                           ;INTERRUPTS.c: 83: {
 14677                           ;INTERRUPTS.c: 84: SYS_ActivityTimerReset();
 14678  003AF8  EC5A  F00F         	call	i2_SYS_ActivityTimerReset	;wreg free
 14679                           
 14680                           ;INTERRUPTS.c: 85: if(RF_DataPlace < 128)
 14681  003AFC  0E80               	movlw	128
 14682  003AFE  0100               	movlb	0	; () banked
 14683  003B00  61C8               	cpfslt	_RF_DataPlace& (0+255),b
 14684  003B02  D022               	goto	i2l7477
 14685                           
 14686                           ; BSR set to: 0
 14687                           ;INTERRUPTS.c: 86: {
 14688                           ;INTERRUPTS.c: 87: RF_DataTiming[RF_DataPlace] = RFtemp;
 14689  003B04  0100               	movlb	0	; () banked
 14690  003B06  51C8               	movf	_RF_DataPlace& (0+255),w,b
 14691  003B08  0D02               	mullw	2
 14692  003B0A  0E00               	movlw	low _RF_DataTiming
 14693  003B0C  24F3               	addwf	prodl,w,c
 14694  003B0E  6ED9               	movwf	fsr2l,c
 14695  003B10  0E03               	movlw	high _RF_DataTiming
 14696  003B12  20F4               	addwfc	prodh,w,c
 14697  003B14  6EDA               	movwf	fsr2h,c
 14698  003B16  C0B7  FFDE         	movff	high_isr@RFtemp,postinc2
 14699  003B1A  C0B8  FFDD         	movff	high_isr@RFtemp+1,postdec2
 14700                           
 14701                           ; BSR set to: 0
 14702                           ;INTERRUPTS.c: 88: RF_DataPlace++;
 14703  003B1E  0100               	movlb	0	; () banked
 14704  003B20  2BC8               	incf	_RF_DataPlace& (0+255),f,b
 14705                           
 14706                           ; BSR set to: 0
 14707                           ;INTERRUPTS.c: 89: if(RF_DataPlace >= RF_CodeSize)
 14708  003B22  0100               	movlb	0	; () banked
 14709  003B24  51C6               	movf	_RF_CodeSize& (0+255),w,b
 14710  003B26  0100               	movlb	0	; () banked
 14711  003B28  5DC8               	subwf	_RF_DataPlace& (0+255),w,b
 14712  003B2A  A0D8               	btfss	status,0,c
 14713  003B2C  D00D               	goto	i2l7477
 14714                           
 14715                           ; BSR set to: 0
 14716                           ;INTERRUPTS.c: 90: {
 14717                           ;INTERRUPTS.c: 91: if(!RF_Data)
 14718  003B2E  0100               	movlb	0	; () banked
 14719  003B30  51C7               	movf	_RF_Data& (0+255),w,b	;volatile
 14720  003B32  A4D8               	btfss	status,2,c
 14721  003B34  D004               	goto	i2l7473
 14722                           
 14723                           ; BSR set to: 0
 14724                           ;INTERRUPTS.c: 92: {
 14725                           ;INTERRUPTS.c: 93: RF_Data = RF_CheckCode();
 14726  003B36  ECA6  F01A         	call	_RF_CheckCode	;wreg free
 14727  003B3A  0100               	movlb	0	; () banked
 14728  003B3C  6FC7               	movwf	_RF_Data& (0+255),b	;volatile
 14729  003B3E                     i2l7473:
 14730                           
 14731                           ; BSR set to: 0
 14732                           ;INTERRUPTS.c: 94: }
 14733                           ;INTERRUPTS.c: 95: TMR_Timer0(0);
 14734  003B3E  0E00               	movlw	0
 14735  003B40  EC01  F00F         	call	i2_TMR_Timer0
 14736                           
 14737                           ;INTERRUPTS.c: 96: RF_ResetData();
 14738  003B44  ECA8  F00F         	call	i2_RF_ResetData	;wreg free
 14739  003B48                     i2l7477:
 14740                           
 14741                           ;INTERRUPTS.c: 97: }
 14742                           ;INTERRUPTS.c: 98: }
 14743                           ;INTERRUPTS.c: 99: }
 14744                           ;INTERRUPTS.c: 100: }
 14745                           ;INTERRUPTS.c: 101: INTCON3bits.INT1IF = 0;
 14746  003B48  90F0               	bcf	intcon3,0,c	;volatile
 14747                           
 14748                           ;INTERRUPTS.c: 102: INTCON3bits.INT2IF = 0;
 14749  003B4A  92F0               	bcf	intcon3,1,c	;volatile
 14750                           
 14751                           ;INTERRUPTS.c: 103: }
 14752  003B4C  D00C               	goto	i2l203
 14753  003B4E                     i2l186:
 14754                           
 14755                           ; BSR set to: 0
 14756                           ;INTERRUPTS.c: 104: else if(INTCONbits.TMR0IF)
 14757  003B4E  A4F2               	btfss	intcon,2,c	;volatile
 14758  003B50  D009               	goto	i2l201
 14759                           
 14760                           ; BSR set to: 0
 14761                           ;INTERRUPTS.c: 105: {
 14762                           ;INTERRUPTS.c: 107: TMR_Timer0(0);
 14763  003B52  0E00               	movlw	0
 14764  003B54  EC01  F00F         	call	i2_TMR_Timer0
 14765                           
 14766                           ;INTERRUPTS.c: 108: TMR_ResetTimer0();
 14767  003B58  EC41  F00D         	call	i2_TMR_ResetTimer0	;wreg free
 14768                           
 14769                           ;INTERRUPTS.c: 109: RF_ResetData();
 14770  003B5C  ECA8  F00F         	call	i2_RF_ResetData	;wreg free
 14771                           
 14772                           ;INTERRUPTS.c: 110: INTCONbits.TMR0IF = 0;
 14773  003B60  94F2               	bcf	intcon,2,c	;volatile
 14774                           
 14775                           ;INTERRUPTS.c: 111: }
 14776  003B62  D001               	goto	i2l203
 14777  003B64                     i2l201:
 14778                           
 14779                           ; BSR set to: 0
 14780                           ;INTERRUPTS.c: 112: else
 14781                           ;INTERRUPTS.c: 113: {
 14782                           ;INTERRUPTS.c: 115: __nop();
 14783  003B64  F000               	nop	
 14784  003B66                     i2l203:
 14785  003B66  C0B6  FFF5         	movff	??_high_isr+13,tablat
 14786  003B6A  C0B5  FFF8         	movff	??_high_isr+12,tblptru
 14787  003B6E  C0B4  FFF7         	movff	??_high_isr+11,tblptrh
 14788  003B72  C0B3  FFF6         	movff	??_high_isr+10,tblptrl
 14789  003B76  C0B2  FFF4         	movff	??_high_isr+9,prodh
 14790  003B7A  C0B1  FFF3         	movff	??_high_isr+8,prodl
 14791  003B7E  C0B0  FFDA         	movff	??_high_isr+7,fsr2h
 14792  003B82  C0AF  FFD9         	movff	??_high_isr+6,fsr2l
 14793  003B86  C0AE  FFE2         	movff	??_high_isr+5,fsr1h
 14794  003B8A  C0AD  FFE1         	movff	??_high_isr+4,fsr1l
 14795  003B8E  C0AC  FFEA         	movff	??_high_isr+3,fsr0h
 14796  003B92  C0AB  FFE9         	movff	??_high_isr+2,fsr0l
 14797  003B96  C0AA  FFFB         	movff	??_high_isr+1,pclatu
 14798  003B9A  C0A9  FFFA         	movff	??_high_isr,pclath
 14799  003B9E  9266               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 14800  003BA0  0011               	retfie		f
 14801  003BA2                     __end_of_high_isr:
 14802                           	opt stack 0
 14803                           pclatu	equ	0xFFB
 14804                           pclath	equ	0xFFA
 14805                           tblptru	equ	0xFF8
 14806                           tblptrh	equ	0xFF7
 14807                           tblptrl	equ	0xFF6
 14808                           tablat	equ	0xFF5
 14809                           prodh	equ	0xFF4
 14810                           prodl	equ	0xFF3
 14811                           intcon	equ	0xFF2
 14812                           intcon2	equ	0xFF1
 14813                           intcon3	equ	0xFF0
 14814                           postinc0	equ	0xFEE
 14815                           fsr0h	equ	0xFEA
 14816                           fsr0l	equ	0xFE9
 14817                           wreg	equ	0xFE8
 14818                           postdec1	equ	0xFE5
 14819                           fsr1h	equ	0xFE2
 14820                           fsr1l	equ	0xFE1
 14821                           bsr	equ	0xFE0
 14822                           indf2	equ	0xFDF
 14823                           postinc2	equ	0xFDE
 14824                           postdec2	equ	0xFDD
 14825                           plusw2	equ	0xFDB
 14826                           fsr2h	equ	0xFDA
 14827                           fsr2l	equ	0xFD9
 14828                           status	equ	0xFD8
 14829                           
 14830 ;; *************** function i2_SYS_ActivityTimerReset *****************
 14831 ;; Defined at:
 14832 ;;		line 69 in file "SYSTEM.c"
 14833 ;; Parameters:    Size  Location     Type
 14834 ;;		None
 14835 ;; Auto vars:     Size  Location     Type
 14836 ;;		None
 14837 ;; Return value:  Size  Location     Type
 14838 ;;		None               void
 14839 ;; Registers used:
 14840 ;;		wreg, status,2
 14841 ;; Tracked objects:
 14842 ;;		On entry : 0/0
 14843 ;;		On exit  : 0/0
 14844 ;;		Unchanged: 0/0
 14845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14846 ;;      Params:         0       0       0       0       0
 14847 ;;      Locals:         0       0       0       0       0
 14848 ;;      Temps:          0       0       0       0       0
 14849 ;;      Totals:         0       0       0       0       0
 14850 ;;Total ram usage:        0 bytes
 14851 ;; Hardware stack levels used:    1
 14852 ;; This function calls:
 14853 ;;		Nothing
 14854 ;; This function is called by:
 14855 ;;		_high_isr
 14856 ;; This function uses a non-reentrant model
 14857 ;;
 14858                           
 14859                           	psect	text96
 14860  001EB4                     __ptext96:
 14861                           	opt stack 0
 14862  001EB4                     i2_SYS_ActivityTimerReset:
 14863                           	opt stack 17
 14864                           
 14865                           ;SYSTEM.c: 71: Activity_Timer = 0;
 14866                           
 14867                           ;incstack = 0
 14868  001EB4  0E00               	movlw	0
 14869  001EB6  6E4E               	movwf	_Activity_Timer,c
 14870  001EB8  0E00               	movlw	0
 14871  001EBA  6E4F               	movwf	_Activity_Timer+1,c
 14872  001EBC  0E00               	movlw	0
 14873  001EBE  6E50               	movwf	_Activity_Timer+2,c
 14874  001EC0  0E00               	movlw	0
 14875  001EC2  6E51               	movwf	_Activity_Timer+3,c
 14876  001EC4  0012               	return		;funcret
 14877  001EC6                     __end_ofi2_SYS_ActivityTimerReset:
 14878                           	opt stack 0
 14879                           pclatu	equ	0xFFB
 14880                           pclath	equ	0xFFA
 14881                           tblptru	equ	0xFF8
 14882                           tblptrh	equ	0xFF7
 14883                           tblptrl	equ	0xFF6
 14884                           tablat	equ	0xFF5
 14885                           prodh	equ	0xFF4
 14886                           prodl	equ	0xFF3
 14887                           intcon	equ	0xFF2
 14888                           intcon2	equ	0xFF1
 14889                           intcon3	equ	0xFF0
 14890                           postinc0	equ	0xFEE
 14891                           fsr0h	equ	0xFEA
 14892                           fsr0l	equ	0xFE9
 14893                           wreg	equ	0xFE8
 14894                           postdec1	equ	0xFE5
 14895                           fsr1h	equ	0xFE2
 14896                           fsr1l	equ	0xFE1
 14897                           bsr	equ	0xFE0
 14898                           indf2	equ	0xFDF
 14899                           postinc2	equ	0xFDE
 14900                           postdec2	equ	0xFDD
 14901                           plusw2	equ	0xFDB
 14902                           fsr2h	equ	0xFDA
 14903                           fsr2l	equ	0xFD9
 14904                           status	equ	0xFD8
 14905                           
 14906 ;; *************** function _TMR_Timer0Status *****************
 14907 ;; Defined at:
 14908 ;;		line 56 in file "TIMERS.c"
 14909 ;; Parameters:    Size  Location     Type
 14910 ;;		None
 14911 ;; Auto vars:     Size  Location     Type
 14912 ;;		None
 14913 ;; Return value:  Size  Location     Type
 14914 ;;                  1    wreg      unsigned char 
 14915 ;; Registers used:
 14916 ;;		wreg
 14917 ;; Tracked objects:
 14918 ;;		On entry : 0/0
 14919 ;;		On exit  : 0/0
 14920 ;;		Unchanged: 0/0
 14921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 14922 ;;      Params:         0       0       0       0       0
 14923 ;;      Locals:         0       0       0       0       0
 14924 ;;      Temps:          0       0       0       0       0
 14925 ;;      Totals:         0       0       0       0       0
 14926 ;;Total ram usage:        0 bytes
 14927 ;; Hardware stack levels used:    1
 14928 ;; This function calls:
 14929 ;;		Nothing
 14930 ;; This function is called by:
 14931 ;;		_high_isr
 14932 ;; This function uses a non-reentrant model
 14933 ;;
 14934                           
 14935                           	psect	text97
 14936  001F78                     __ptext97:
 14937                           	opt stack 0
 14938  001F78                     _TMR_Timer0Status:
 14939                           	opt stack 17
 14940                           
 14941                           ;TIMERS.c: 58: if(T0CONbits.TMR0ON)
 14942                           
 14943                           ;incstack = 0
 14944  001F78  AED5               	btfss	4053,7,c	;volatile
 14945  001F7A  D002               	goto	i2l7075
 14946                           
 14947                           ;TIMERS.c: 59: {
 14948                           ;TIMERS.c: 61: return 1;
 14949  001F7C  0E01               	movlw	1
 14950  001F7E  0012               	return	
 14951  001F80                     i2l7075:
 14952                           
 14953                           ;TIMERS.c: 62: }
 14954                           ;TIMERS.c: 63: return 0;
 14955  001F80  0E00               	movlw	0
 14956  001F82  0012               	return	
 14957  001F84                     __end_of_TMR_Timer0Status:
 14958                           	opt stack 0
 14959                           pclatu	equ	0xFFB
 14960                           pclath	equ	0xFFA
 14961                           tblptru	equ	0xFF8
 14962                           tblptrh	equ	0xFF7
 14963                           tblptrl	equ	0xFF6
 14964                           tablat	equ	0xFF5
 14965                           prodh	equ	0xFF4
 14966                           prodl	equ	0xFF3
 14967                           intcon	equ	0xFF2
 14968                           intcon2	equ	0xFF1
 14969                           intcon3	equ	0xFF0
 14970                           postinc0	equ	0xFEE
 14971                           fsr0h	equ	0xFEA
 14972                           fsr0l	equ	0xFE9
 14973                           wreg	equ	0xFE8
 14974                           postdec1	equ	0xFE5
 14975                           fsr1h	equ	0xFE2
 14976                           fsr1l	equ	0xFE1
 14977                           bsr	equ	0xFE0
 14978                           indf2	equ	0xFDF
 14979                           postinc2	equ	0xFDE
 14980                           postdec2	equ	0xFDD
 14981                           plusw2	equ	0xFDB
 14982                           fsr2h	equ	0xFDA
 14983                           fsr2l	equ	0xFD9
 14984                           status	equ	0xFD8
 14985                           
 14986 ;; *************** function _TMR_Timer0Start *****************
 14987 ;; Defined at:
 14988 ;;		line 363 in file "TIMERS.c"
 14989 ;; Parameters:    Size  Location     Type
 14990 ;;		None
 14991 ;; Auto vars:     Size  Location     Type
 14992 ;;		None
 14993 ;; Return value:  Size  Location     Type
 14994 ;;		None               void
 14995 ;; Registers used:
 14996 ;;		wreg, status,2, cstack
 14997 ;; Tracked objects:
 14998 ;;		On entry : 0/0
 14999 ;;		On exit  : 0/0
 15000 ;;		Unchanged: 0/0
 15001 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15002 ;;      Params:         0       0       0       0       0
 15003 ;;      Locals:         0       0       0       0       0
 15004 ;;      Temps:          0       0       0       0       0
 15005 ;;      Totals:         0       0       0       0       0
 15006 ;;Total ram usage:        0 bytes
 15007 ;; Hardware stack levels used:    1
 15008 ;; Hardware stack levels required when called:    2
 15009 ;; This function calls:
 15010 ;;		i2_TMR_ResetTimer0
 15011 ;;		i2_TMR_Timer0
 15012 ;; This function is called by:
 15013 ;;		_high_isr
 15014 ;; This function uses a non-reentrant model
 15015 ;;
 15016                           
 15017                           	psect	text98
 15018  001EC6                     __ptext98:
 15019                           	opt stack 0
 15020  001EC6                     _TMR_Timer0Start:
 15021                           	opt stack 15
 15022                           
 15023                           ;TIMERS.c: 365: TMR_Timer0(0);
 15024                           
 15025                           ;incstack = 0
 15026  001EC6  0E00               	movlw	0
 15027  001EC8  EC01  F00F         	call	i2_TMR_Timer0
 15028                           
 15029                           ;TIMERS.c: 366: TMR_ResetTimer0();
 15030  001ECC  EC41  F00D         	call	i2_TMR_ResetTimer0	;wreg free
 15031                           
 15032                           ;TIMERS.c: 367: TMR_Timer0(1);
 15033  001ED0  0E01               	movlw	1
 15034  001ED2  EC01  F00F         	call	i2_TMR_Timer0
 15035  001ED6  0012               	return		;funcret
 15036  001ED8                     __end_of_TMR_Timer0Start:
 15037                           	opt stack 0
 15038                           pclatu	equ	0xFFB
 15039                           pclath	equ	0xFFA
 15040                           tblptru	equ	0xFF8
 15041                           tblptrh	equ	0xFF7
 15042                           tblptrl	equ	0xFF6
 15043                           tablat	equ	0xFF5
 15044                           prodh	equ	0xFF4
 15045                           prodl	equ	0xFF3
 15046                           intcon	equ	0xFF2
 15047                           intcon2	equ	0xFF1
 15048                           intcon3	equ	0xFF0
 15049                           postinc0	equ	0xFEE
 15050                           fsr0h	equ	0xFEA
 15051                           fsr0l	equ	0xFE9
 15052                           wreg	equ	0xFE8
 15053                           postdec1	equ	0xFE5
 15054                           fsr1h	equ	0xFE2
 15055                           fsr1l	equ	0xFE1
 15056                           bsr	equ	0xFE0
 15057                           indf2	equ	0xFDF
 15058                           postinc2	equ	0xFDE
 15059                           postdec2	equ	0xFDD
 15060                           plusw2	equ	0xFDB
 15061                           fsr2h	equ	0xFDA
 15062                           fsr2l	equ	0xFD9
 15063                           status	equ	0xFD8
 15064                           
 15065 ;; *************** function i2_TMR_ResetTimer0 *****************
 15066 ;; Defined at:
 15067 ;;		line 144 in file "TIMERS.c"
 15068 ;; Parameters:    Size  Location     Type
 15069 ;;		None
 15070 ;; Auto vars:     Size  Location     Type
 15071 ;;  TMR_ResetTim    1    1[BANK0 ] unsigned char 
 15072 ;; Return value:  Size  Location     Type
 15073 ;;		None               void
 15074 ;; Registers used:
 15075 ;;		wreg, status,2, cstack
 15076 ;; Tracked objects:
 15077 ;;		On entry : 0/0
 15078 ;;		On exit  : 0/0
 15079 ;;		Unchanged: 0/0
 15080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15081 ;;      Params:         0       0       0       0       0
 15082 ;;      Locals:         0       1       0       0       0
 15083 ;;      Temps:          0       0       0       0       0
 15084 ;;      Totals:         0       1       0       0       0
 15085 ;;Total ram usage:        1 bytes
 15086 ;; Hardware stack levels used:    1
 15087 ;; Hardware stack levels required when called:    1
 15088 ;; This function calls:
 15089 ;;		i2_TMR_Timer0
 15090 ;; This function is called by:
 15091 ;;		_high_isr
 15092 ;;		_TMR_Timer0Start
 15093 ;; This function uses a non-reentrant model
 15094 ;;
 15095                           
 15096                           	psect	text99
 15097  001A82                     __ptext99:
 15098                           	opt stack 0
 15099  001A82                     i2_TMR_ResetTimer0:
 15100                           	opt stack 16
 15101                           
 15102                           ;TIMERS.c: 146: unsigned char TimerOn = T0CONbits.TMR0ON;
 15103                           
 15104                           ;incstack = 0
 15105  001A82  0E00               	movlw	0
 15106  001A84  BED5               	btfsc	4053,7,c	;volatile
 15107  001A86  0E01               	movlw	1
 15108  001A88  0100               	movlb	0	; () banked
 15109  001A8A  6F81               	movwf	i2TMR_ResetTimer0@TimerOn& (0+255),b
 15110                           
 15111                           ; BSR set to: 0
 15112                           ;TIMERS.c: 148: TMR_Timer0(0);
 15113  001A8C  0E00               	movlw	0
 15114  001A8E  EC01  F00F         	call	i2_TMR_Timer0
 15115                           
 15116                           ;TIMERS.c: 149: TMR0H = 0;
 15117  001A92  0E00               	movlw	0
 15118  001A94  6ED7               	movwf	4055,c	;volatile
 15119                           
 15120                           ;TIMERS.c: 150: TMR0L = 2;
 15121  001A96  0E02               	movlw	2
 15122  001A98  6ED6               	movwf	4054,c	;volatile
 15123                           
 15124                           ;TIMERS.c: 151: if(TimerOn)
 15125  001A9A  0100               	movlb	0	; () banked
 15126  001A9C  5181               	movf	i2TMR_ResetTimer0@TimerOn& (0+255),w,b
 15127  001A9E  0100               	movlb	0	; () banked
 15128  001AA0  B4D8               	btfsc	status,2,c
 15129  001AA2  0012               	return	
 15130                           
 15131                           ; BSR set to: 0
 15132                           ;TIMERS.c: 152: {
 15133                           ;TIMERS.c: 153: TMR_Timer0(1);
 15134  001AA4  0E01               	movlw	1
 15135  001AA6  EC01  F00F         	call	i2_TMR_Timer0
 15136  001AAA  0012               	return	
 15137  001AAC                     __end_ofi2_TMR_ResetTimer0:
 15138                           	opt stack 0
 15139                           pclatu	equ	0xFFB
 15140                           pclath	equ	0xFFA
 15141                           tblptru	equ	0xFF8
 15142                           tblptrh	equ	0xFF7
 15143                           tblptrl	equ	0xFF6
 15144                           tablat	equ	0xFF5
 15145                           prodh	equ	0xFF4
 15146                           prodl	equ	0xFF3
 15147                           intcon	equ	0xFF2
 15148                           intcon2	equ	0xFF1
 15149                           intcon3	equ	0xFF0
 15150                           postinc0	equ	0xFEE
 15151                           fsr0h	equ	0xFEA
 15152                           fsr0l	equ	0xFE9
 15153                           wreg	equ	0xFE8
 15154                           postdec1	equ	0xFE5
 15155                           fsr1h	equ	0xFE2
 15156                           fsr1l	equ	0xFE1
 15157                           bsr	equ	0xFE0
 15158                           indf2	equ	0xFDF
 15159                           postinc2	equ	0xFDE
 15160                           postdec2	equ	0xFDD
 15161                           plusw2	equ	0xFDB
 15162                           fsr2h	equ	0xFDA
 15163                           fsr2l	equ	0xFD9
 15164                           status	equ	0xFD8
 15165                           
 15166 ;; *************** function i2_TMR_Timer0 *****************
 15167 ;; Defined at:
 15168 ;;		line 87 in file "TIMERS.c"
 15169 ;; Parameters:    Size  Location     Type
 15170 ;;  state           1    wreg     unsigned char 
 15171 ;; Auto vars:     Size  Location     Type
 15172 ;;  state           1    0[BANK0 ] unsigned char 
 15173 ;; Return value:  Size  Location     Type
 15174 ;;		None               void
 15175 ;; Registers used:
 15176 ;;		wreg, status,2
 15177 ;; Tracked objects:
 15178 ;;		On entry : 0/0
 15179 ;;		On exit  : 0/0
 15180 ;;		Unchanged: 0/0
 15181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15182 ;;      Params:         0       0       0       0       0
 15183 ;;      Locals:         0       1       0       0       0
 15184 ;;      Temps:          0       0       0       0       0
 15185 ;;      Totals:         0       1       0       0       0
 15186 ;;Total ram usage:        1 bytes
 15187 ;; Hardware stack levels used:    1
 15188 ;; This function calls:
 15189 ;;		Nothing
 15190 ;; This function is called by:
 15191 ;;		_high_isr
 15192 ;;		_TMR_Timer0Start
 15193 ;;		i2_TMR_ResetTimer0
 15194 ;; This function uses a non-reentrant model
 15195 ;;
 15196                           
 15197                           	psect	text100
 15198  001E02                     __ptext100:
 15199                           	opt stack 0
 15200  001E02                     i2_TMR_Timer0:
 15201                           	opt stack 17
 15202                           
 15203                           ;incstack = 0
 15204                           ;i2TMR_Timer0@state stored from wreg
 15205  001E02  0100               	movlb	0	; () banked
 15206  001E04  6F80               	movwf	i2TMR_Timer0@state& (0+255),b
 15207                           
 15208                           ;TIMERS.c: 89: if(state)
 15209  001E06  0100               	movlb	0	; () banked
 15210  001E08  5180               	movf	i2TMR_Timer0@state& (0+255),w,b
 15211  001E0A  0100               	movlb	0	; () banked
 15212  001E0C  B4D8               	btfsc	status,2,c
 15213  001E0E  D002               	goto	i2l1056
 15214                           
 15215                           ; BSR set to: 0
 15216                           ;TIMERS.c: 90: {
 15217                           ;TIMERS.c: 92: T0CONbits.TMR0ON = 1;
 15218  001E10  8ED5               	bsf	4053,7,c	;volatile
 15219                           
 15220                           ;TIMERS.c: 93: }
 15221  001E12  0012               	return	
 15222  001E14                     i2l1056:
 15223                           
 15224                           ; BSR set to: 0
 15225                           ;TIMERS.c: 94: else
 15226                           ;TIMERS.c: 95: {
 15227                           ;TIMERS.c: 97: T0CONbits.TMR0ON = 0;
 15228  001E14  9ED5               	bcf	4053,7,c	;volatile
 15229  001E16  0012               	return	
 15230  001E18                     __end_ofi2_TMR_Timer0:
 15231                           	opt stack 0
 15232                           pclatu	equ	0xFFB
 15233                           pclath	equ	0xFFA
 15234                           tblptru	equ	0xFF8
 15235                           tblptrh	equ	0xFF7
 15236                           tblptrl	equ	0xFF6
 15237                           tablat	equ	0xFF5
 15238                           prodh	equ	0xFF4
 15239                           prodl	equ	0xFF3
 15240                           intcon	equ	0xFF2
 15241                           intcon2	equ	0xFF1
 15242                           intcon3	equ	0xFF0
 15243                           postinc0	equ	0xFEE
 15244                           fsr0h	equ	0xFEA
 15245                           fsr0l	equ	0xFE9
 15246                           wreg	equ	0xFE8
 15247                           postdec1	equ	0xFE5
 15248                           fsr1h	equ	0xFE2
 15249                           fsr1l	equ	0xFE1
 15250                           bsr	equ	0xFE0
 15251                           indf2	equ	0xFDF
 15252                           postinc2	equ	0xFDE
 15253                           postdec2	equ	0xFDD
 15254                           plusw2	equ	0xFDB
 15255                           fsr2h	equ	0xFDA
 15256                           fsr2l	equ	0xFD9
 15257                           status	equ	0xFD8
 15258                           
 15259 ;; *************** function _RF_CheckCode *****************
 15260 ;; Defined at:
 15261 ;;		line 271 in file "RF.c"
 15262 ;; Parameters:    Size  Location     Type
 15263 ;;		None
 15264 ;; Auto vars:     Size  Location     Type
 15265 ;;  High            3   37[BANK0 ] unsigned char 
 15266 ;;  Low             3   34[BANK0 ] unsigned char 
 15267 ;;  i               1   40[BANK0 ] unsigned char 
 15268 ;; Return value:  Size  Location     Type
 15269 ;;                  1    wreg      unsigned char 
 15270 ;; Registers used:
 15271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15272 ;; Tracked objects:
 15273 ;;		On entry : 0/0
 15274 ;;		On exit  : 0/0
 15275 ;;		Unchanged: 0/0
 15276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15277 ;;      Params:         0       0       0       0       0
 15278 ;;      Locals:         0       7       0       0       0
 15279 ;;      Temps:          0       2       0       0       0
 15280 ;;      Totals:         0       9       0       0       0
 15281 ;;Total ram usage:        9 bytes
 15282 ;; Hardware stack levels used:    1
 15283 ;; Hardware stack levels required when called:    4
 15284 ;; This function calls:
 15285 ;;		i2_FSH_Write_IR_RF
 15286 ;;		i2_RF_LoadCode
 15287 ;;		i2___ftge
 15288 ;;		i2___ftmul
 15289 ;;		i2___lwtoft
 15290 ;; This function is called by:
 15291 ;;		_high_isr
 15292 ;; This function uses a non-reentrant model
 15293 ;;
 15294                           
 15295                           	psect	text101
 15296  00354C                     __ptext101:
 15297                           	opt stack 0
 15298  00354C                     _RF_CheckCode:
 15299                           	opt stack 13
 15300                           
 15301                           ;RF.c: 273: unsigned char i;
 15302                           ;RF.c: 274: double Low = 0.0;
 15303                           
 15304                           ; BSR set to: 0
 15305                           ;incstack = 0
 15306  00354C  0E00               	movlw	0
 15307  00354E  0100               	movlb	0	; () banked
 15308  003550  6FA2               	movwf	RF_CheckCode@Low& (0+255),b
 15309  003552  0E00               	movlw	0
 15310  003554  0100               	movlb	0	; () banked
 15311  003556  6FA3               	movwf	(RF_CheckCode@Low+1)& (0+255),b
 15312  003558  0E00               	movlw	0
 15313  00355A  0100               	movlb	0	; () banked
 15314  00355C  6FA4               	movwf	(RF_CheckCode@Low+2)& (0+255),b
 15315                           
 15316                           ;RF.c: 275: double High = 0.0;
 15317  00355E  0E00               	movlw	0
 15318  003560  0100               	movlb	0	; () banked
 15319  003562  6FA5               	movwf	RF_CheckCode@High& (0+255),b
 15320  003564  0E00               	movlw	0
 15321  003566  0100               	movlb	0	; () banked
 15322  003568  6FA6               	movwf	(RF_CheckCode@High+1)& (0+255),b
 15323  00356A  0E00               	movlw	0
 15324  00356C  0100               	movlb	0	; () banked
 15325  00356E  6FA7               	movwf	(RF_CheckCode@High+2)& (0+255),b
 15326                           
 15327                           ; BSR set to: 0
 15328                           ;RF.c: 277: if(System_State == 8)
 15329  003570  0E08               	movlw	8
 15330  003572  0100               	movlb	0	; () banked
 15331  003574  19CF               	xorwf	_System_State& (0+255),w,b	;volatile
 15332  003576  A4D8               	btfss	status,2,c
 15333  003578  D0FC               	goto	i2l7111
 15334                           
 15335                           ; BSR set to: 0
 15336                           ;RF.c: 278: {
 15337                           ;RF.c: 279: for(i=0; i<RF_CodeSize;i++)
 15338  00357A  0E00               	movlw	0
 15339  00357C  0100               	movlb	0	; () banked
 15340  00357E  6FA8               	movwf	RF_CheckCode@i& (0+255),b
 15341  003580  D0F0               	goto	i2l7103
 15342  003582                     i2l7087:
 15343                           
 15344                           ; BSR set to: 0
 15345                           ;RF.c: 280: {
 15346                           ;RF.c: 281: if(i == 0)
 15347  003582  0100               	movlb	0	; () banked
 15348  003584  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 15349  003586  0100               	movlb	0	; () banked
 15350  003588  A4D8               	btfss	status,2,c
 15351  00358A  D051               	goto	i2l7091
 15352                           
 15353                           ; BSR set to: 0
 15354                           ;RF.c: 282: {
 15355                           ;RF.c: 283: Low = (double)RF_SavedTiming[i] * (1.0 - 0.02);
 15356  00358C  0100               	movlb	0	; () banked
 15357  00358E  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 15358  003590  0D02               	mullw	2
 15359  003592  0E00               	movlw	0
 15360  003594  24F3               	addwf	prodl,w,c
 15361  003596  6EF6               	movwf	tblptrl,c
 15362  003598  0E25               	movlw	37
 15363  00359A  20F4               	addwfc	prodh,w,c
 15364  00359C  6EF7               	movwf	tblptrh,c
 15365  00359E  6AF8               	clrf	tblptru,c
 15366  0035A0  0E00               	movlw	0
 15367  0035A2  22F8               	addwfc	tblptru,f,c
 15368  0035A4  0009               	tblrd		*+
 15369  0035A6  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15370  0035AA  000A               	tblrd		*-
 15371  0035AC  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15372  0035B0  EC56  F00D         	call	i2___lwtoft	;wreg free
 15373  0035B4  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15374  0035B8  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15375  0035BC  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15376  0035C0  0EE1               	movlw	225
 15377  0035C2  0100               	movlb	0	; () banked
 15378  0035C4  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15379  0035C6  0E7A               	movlw	122
 15380  0035C8  0100               	movlb	0	; () banked
 15381  0035CA  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15382  0035CC  0E3F               	movlw	63
 15383  0035CE  0100               	movlb	0	; () banked
 15384  0035D0  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15385  0035D2  EC80  F01E         	call	i2___ftmul	;wreg free
 15386  0035D6  C08B  F0A2         	movff	?i2___ftmul,RF_CheckCode@Low
 15387  0035DA  C08C  F0A3         	movff	?i2___ftmul+1,RF_CheckCode@Low+1
 15388  0035DE  C08D  F0A4         	movff	?i2___ftmul+2,RF_CheckCode@Low+2
 15389                           
 15390                           ;RF.c: 284: High = (double)RF_SavedTiming[i] * (1.0 + 0.02);
 15391  0035E2  0100               	movlb	0	; () banked
 15392  0035E4  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 15393  0035E6  0D02               	mullw	2
 15394  0035E8  0E00               	movlw	0
 15395  0035EA  24F3               	addwf	prodl,w,c
 15396  0035EC  6EF6               	movwf	tblptrl,c
 15397  0035EE  0E25               	movlw	37
 15398  0035F0  20F4               	addwfc	prodh,w,c
 15399  0035F2  6EF7               	movwf	tblptrh,c
 15400  0035F4  6AF8               	clrf	tblptru,c
 15401  0035F6  0E00               	movlw	0
 15402  0035F8  22F8               	addwfc	tblptru,f,c
 15403  0035FA  0009               	tblrd		*+
 15404  0035FC  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15405  003600  000A               	tblrd		*-
 15406  003602  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15407  003606  EC56  F00D         	call	i2___lwtoft	;wreg free
 15408  00360A  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15409  00360E  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15410  003612  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15411  003616  0E8F               	movlw	143
 15412  003618  0100               	movlb	0	; () banked
 15413  00361A  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15414  00361C  0E82               	movlw	130
 15415  00361E  0100               	movlb	0	; () banked
 15416  003620  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15417  003622  0E3F               	movlw	63
 15418  003624  0100               	movlb	0	; () banked
 15419  003626  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15420  003628  EC80  F01E         	call	i2___ftmul	;wreg free
 15421  00362C  D050               	goto	L8
 15422  00362E                     i2l7091:
 15423                           
 15424                           ;RF.c: 286: else
 15425                           ;RF.c: 287: {
 15426                           ;RF.c: 288: Low = (double)RF_SavedTiming[i] * (1.0 - 0.5);
 15427  00362E  0100               	movlb	0	; () banked
 15428  003630  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 15429  003632  0D02               	mullw	2
 15430  003634  0E00               	movlw	0
 15431  003636  24F3               	addwf	prodl,w,c
 15432  003638  6EF6               	movwf	tblptrl,c
 15433  00363A  0E25               	movlw	37
 15434  00363C  20F4               	addwfc	prodh,w,c
 15435  00363E  6EF7               	movwf	tblptrh,c
 15436  003640  6AF8               	clrf	tblptru,c
 15437  003642  0E00               	movlw	0
 15438  003644  22F8               	addwfc	tblptru,f,c
 15439  003646  0009               	tblrd		*+
 15440  003648  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15441  00364C  000A               	tblrd		*-
 15442  00364E  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15443  003652  EC56  F00D         	call	i2___lwtoft	;wreg free
 15444  003656  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15445  00365A  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15446  00365E  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15447  003662  0E00               	movlw	0
 15448  003664  0100               	movlb	0	; () banked
 15449  003666  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15450  003668  0E00               	movlw	0
 15451  00366A  0100               	movlb	0	; () banked
 15452  00366C  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15453  00366E  0E3F               	movlw	63
 15454  003670  0100               	movlb	0	; () banked
 15455  003672  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15456  003674  EC80  F01E         	call	i2___ftmul	;wreg free
 15457  003678  C08B  F0A2         	movff	?i2___ftmul,RF_CheckCode@Low
 15458  00367C  C08C  F0A3         	movff	?i2___ftmul+1,RF_CheckCode@Low+1
 15459  003680  C08D  F0A4         	movff	?i2___ftmul+2,RF_CheckCode@Low+2
 15460                           
 15461                           ;RF.c: 289: High = (double)RF_SavedTiming[i] * (1.0 + 0.5);
 15462  003684  0100               	movlb	0	; () banked
 15463  003686  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 15464  003688  0D02               	mullw	2
 15465  00368A  0E00               	movlw	0
 15466  00368C  24F3               	addwf	prodl,w,c
 15467  00368E  6EF6               	movwf	tblptrl,c
 15468  003690  0E25               	movlw	37
 15469  003692  20F4               	addwfc	prodh,w,c
 15470  003694  6EF7               	movwf	tblptrh,c
 15471  003696  6AF8               	clrf	tblptru,c
 15472  003698  0E00               	movlw	0
 15473  00369A  22F8               	addwfc	tblptru,f,c
 15474  00369C  0009               	tblrd		*+
 15475  00369E  CFF5 F088          	movff	tablat,i2___lwtoft@c
 15476  0036A2  000A               	tblrd		*-
 15477  0036A4  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 15478  0036A8  EC56  F00D         	call	i2___lwtoft	;wreg free
 15479  0036AC  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 15480  0036B0  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 15481  0036B4  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 15482  0036B8  0E00               	movlw	0
 15483  0036BA  0100               	movlb	0	; () banked
 15484  0036BC  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 15485  0036BE  0EC0               	movlw	192
 15486  0036C0  0100               	movlb	0	; () banked
 15487  0036C2  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 15488  0036C4  0E3F               	movlw	63
 15489  0036C6  0100               	movlb	0	; () banked
 15490  0036C8  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 15491  0036CA  EC80  F01E         	call	i2___ftmul	;wreg free
 15492  0036CE                     L8:
 15493  0036CE  C08B  F0A5         	movff	?i2___ftmul,RF_CheckCode@High
 15494  0036D2  C08C  F0A6         	movff	?i2___ftmul+1,RF_CheckCode@High+1
 15495  0036D6  C08D  F0A7         	movff	?i2___ftmul+2,RF_CheckCode@High+2
 15496                           
 15497                           ;RF.c: 290: }
 15498                           ;RF.c: 292: if((double)RF_DataTiming[i] < Low || (double)RF_DataTiming[i] > High )
 15499  0036DA  0100               	movlb	0	; () banked
 15500  0036DC  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 15501  0036DE  0D02               	mullw	2
 15502  0036E0  0E00               	movlw	low _RF_DataTiming
 15503  0036E2  24F3               	addwf	prodl,w,c
 15504  0036E4  6ED9               	movwf	fsr2l,c
 15505  0036E6  0E03               	movlw	high _RF_DataTiming
 15506  0036E8  20F4               	addwfc	prodh,w,c
 15507  0036EA  6EDA               	movwf	fsr2h,c
 15508  0036EC  CFDE F088          	movff	postinc2,i2___lwtoft@c
 15509  0036F0  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 15510  0036F4  EC56  F00D         	call	i2___lwtoft	;wreg free
 15511  0036F8  C088  F08B         	movff	?i2___lwtoft,i2___ftge@ff1
 15512  0036FC  C089  F08C         	movff	?i2___lwtoft+1,i2___ftge@ff1+1
 15513  003700  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftge@ff1+2
 15514  003704  C0A2  F08E         	movff	RF_CheckCode@Low,i2___ftge@ff2
 15515  003708  C0A3  F08F         	movff	RF_CheckCode@Low+1,i2___ftge@ff2+1
 15516  00370C  C0A4  F090         	movff	RF_CheckCode@Low+2,i2___ftge@ff2+2
 15517  003710  EC88  F006         	call	i2___ftge	;wreg free
 15518  003714  0100               	movlb	0	; () banked
 15519  003716  A0D8               	btfss	status,0,c
 15520  003718  D020               	goto	i2l7097
 15521                           
 15522                           ; BSR set to: 0
 15523  00371A  C0A5  F08B         	movff	RF_CheckCode@High,i2___ftge@ff1
 15524  00371E  C0A6  F08C         	movff	RF_CheckCode@High+1,i2___ftge@ff1+1
 15525  003722  C0A7  F08D         	movff	RF_CheckCode@High+2,i2___ftge@ff1+2
 15526  003726  0100               	movlb	0	; () banked
 15527  003728  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 15528  00372A  0D02               	mullw	2
 15529  00372C  0E00               	movlw	low _RF_DataTiming
 15530  00372E  24F3               	addwf	prodl,w,c
 15531  003730  6ED9               	movwf	fsr2l,c
 15532  003732  0E03               	movlw	high _RF_DataTiming
 15533  003734  20F4               	addwfc	prodh,w,c
 15534  003736  6EDA               	movwf	fsr2h,c
 15535  003738  CFDE F088          	movff	postinc2,i2___lwtoft@c
 15536  00373C  CFDD F089          	movff	postdec2,i2___lwtoft@c+1
 15537  003740  EC56  F00D         	call	i2___lwtoft	;wreg free
 15538  003744  C088  F08E         	movff	?i2___lwtoft,i2___ftge@ff2
 15539  003748  C089  F08F         	movff	?i2___lwtoft+1,i2___ftge@ff2+1
 15540  00374C  C08A  F090         	movff	?i2___lwtoft+2,i2___ftge@ff2+2
 15541  003750  EC88  F006         	call	i2___ftge	;wreg free
 15542  003754  0100               	movlb	0	; () banked
 15543  003756  B0D8               	btfsc	status,0,c
 15544  003758  D002               	goto	i2l7101
 15545  00375A                     i2l7097:
 15546                           
 15547                           ; BSR set to: 0
 15548                           ;RF.c: 293: {
 15549                           ;RF.c: 294: return 0;
 15550  00375A  0E00               	movlw	0
 15551                           
 15552                           ; BSR set to: 0
 15553  00375C  0012               	return	
 15554  00375E                     i2l7101:
 15555                           
 15556                           ; BSR set to: 0
 15557  00375E  0100               	movlb	0	; () banked
 15558  003760  2BA8               	incf	RF_CheckCode@i& (0+255),f,b
 15559  003762                     i2l7103:
 15560                           
 15561                           ; BSR set to: 0
 15562  003762  0100               	movlb	0	; () banked
 15563  003764  51C6               	movf	_RF_CodeSize& (0+255),w,b
 15564  003766  0100               	movlb	0	; () banked
 15565  003768  5DA8               	subwf	RF_CheckCode@i& (0+255),w,b
 15566  00376A  A0D8               	btfss	status,0,c
 15567  00376C  D70A               	goto	i2l7087
 15568                           
 15569                           ; BSR set to: 0
 15570                           ;RF.c: 295: }
 15571                           ;RF.c: 296: }
 15572                           ;RF.c: 297: return 1;
 15573                           
 15574                           ; BSR set to: 0
 15575  00376E  0E01               	movlw	1
 15576                           
 15577                           ; BSR set to: 0
 15578                           ;RF.c: 298: }
 15579                           
 15580                           ; BSR set to: 0
 15581  003770  0012               	return	
 15582  003772                     i2l7111:
 15583                           
 15584                           ; BSR set to: 0
 15585                           ;RF.c: 299: else
 15586                           ;RF.c: 300: {
 15587                           ;RF.c: 301: if(RF_DataPlace >= 20)
 15588  003772  0E13               	movlw	19
 15589  003774  0100               	movlb	0	; () banked
 15590  003776  65C8               	cpfsgt	_RF_DataPlace& (0+255),b
 15591  003778  D044               	goto	i2l7145
 15592                           
 15593                           ; BSR set to: 0
 15594                           ;RF.c: 302: {
 15595                           ;RF.c: 303: for(i=0;i<RF_DataPlace;i++)
 15596  00377A  0E00               	movlw	0
 15597  00377C  0100               	movlb	0	; () banked
 15598  00377E  6FA8               	movwf	RF_CheckCode@i& (0+255),b
 15599  003780  D014               	goto	i2l7123
 15600  003782                     i2l7115:
 15601                           
 15602                           ; BSR set to: 0
 15603                           ;RF.c: 304: {
 15604                           ;RF.c: 305: if(RF_DataTiming[i] < 5)
 15605  003782  0100               	movlb	0	; () banked
 15606  003784  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 15607  003786  0D02               	mullw	2
 15608  003788  0E00               	movlw	low _RF_DataTiming
 15609  00378A  24F3               	addwf	prodl,w,c
 15610  00378C  6ED9               	movwf	fsr2l,c
 15611  00378E  0E03               	movlw	high _RF_DataTiming
 15612  003790  20F4               	addwfc	prodh,w,c
 15613  003792  6EDA               	movwf	fsr2h,c
 15614  003794  0E01               	movlw	1
 15615  003796  50DB               	movf	plusw2,w,c
 15616  003798  E106               	bnz	i2l7121
 15617  00379A  0E05               	movlw	5
 15618  00379C  5CDE               	subwf	postinc2,w,c
 15619  00379E  B0D8               	btfsc	status,0,c
 15620  0037A0  D002               	goto	i2l7121
 15621                           
 15622                           ; BSR set to: 0
 15623                           ;RF.c: 306: {
 15624                           ;RF.c: 308: return 0;
 15625  0037A2  0E00               	movlw	0
 15626                           
 15627                           ; BSR set to: 0
 15628  0037A4  0012               	return	
 15629  0037A6                     i2l7121:
 15630                           
 15631                           ; BSR set to: 0
 15632  0037A6  0100               	movlb	0	; () banked
 15633  0037A8  2BA8               	incf	RF_CheckCode@i& (0+255),f,b
 15634  0037AA                     i2l7123:
 15635                           
 15636                           ; BSR set to: 0
 15637  0037AA  0100               	movlb	0	; () banked
 15638  0037AC  51C8               	movf	_RF_DataPlace& (0+255),w,b
 15639  0037AE  0100               	movlb	0	; () banked
 15640  0037B0  5DA8               	subwf	RF_CheckCode@i& (0+255),w,b
 15641  0037B2  A0D8               	btfss	status,0,c
 15642  0037B4  D7E6               	goto	i2l7115
 15643                           
 15644                           ; BSR set to: 0
 15645                           ;RF.c: 309: }
 15646                           ;RF.c: 310: }
 15647                           ;RF.c: 312: for(i=RF_DataPlace;i<128;i++)
 15648  0037B6  C0C8  F0A8         	movff	_RF_DataPlace,RF_CheckCode@i
 15649  0037BA                     i2l7125:
 15650                           
 15651                           ; BSR set to: 0
 15652  0037BA  0E7F               	movlw	127
 15653  0037BC  0100               	movlb	0	; () banked
 15654  0037BE  65A8               	cpfsgt	RF_CheckCode@i& (0+255),b
 15655  0037C0  D001               	goto	i2l7129
 15656  0037C2  D010               	goto	i2l7135
 15657  0037C4                     i2l7129:
 15658                           
 15659                           ; BSR set to: 0
 15660                           ;RF.c: 313: {
 15661                           ;RF.c: 315: RF_DataTiming[i] = 0;
 15662  0037C4  0100               	movlb	0	; () banked
 15663  0037C6  51A8               	movf	RF_CheckCode@i& (0+255),w,b
 15664  0037C8  0D02               	mullw	2
 15665  0037CA  0E00               	movlw	low _RF_DataTiming
 15666  0037CC  24F3               	addwf	prodl,w,c
 15667  0037CE  6ED9               	movwf	fsr2l,c
 15668  0037D0  0E03               	movlw	high _RF_DataTiming
 15669  0037D2  20F4               	addwfc	prodh,w,c
 15670  0037D4  6EDA               	movwf	fsr2h,c
 15671  0037D6  0E00               	movlw	0
 15672  0037D8  6EDE               	movwf	postinc2,c
 15673  0037DA  0E00               	movlw	0
 15674  0037DC  6EDD               	movwf	postdec2,c
 15675                           
 15676                           ; BSR set to: 0
 15677  0037DE  0100               	movlb	0	; () banked
 15678  0037E0  2BA8               	incf	RF_CheckCode@i& (0+255),f,b
 15679  0037E2  D7EB               	goto	i2l7125
 15680  0037E4                     i2l7135:
 15681                           
 15682                           ; BSR set to: 0
 15683                           ;RF.c: 316: }
 15684                           ;RF.c: 319: RF_Saved = 90;
 15685  0037E4  0E5A               	movlw	90
 15686  0037E6  0100               	movlb	0	; () banked
 15687  0037E8  6FCE               	movwf	_RF_Saved& (0+255),b
 15688                           
 15689                           ; BSR set to: 0
 15690                           ;RF.c: 320: Flash_Status = FSH_Write_IR_RF();
 15691  0037EA  EC22  F014         	call	i2_FSH_Write_IR_RF	;wreg free
 15692  0037EE  0100               	movlb	0	; () banked
 15693  0037F0  6FC2               	movwf	_Flash_Status& (0+255),b
 15694                           
 15695                           ; BSR set to: 0
 15696                           ;RF.c: 321: if(Flash_Status)
 15697  0037F2  0100               	movlb	0	; () banked
 15698  0037F4  51C2               	movf	_Flash_Status& (0+255),w,b
 15699  0037F6  A4D8               	btfss	status,2,c
 15700                           
 15701                           ; BSR set to: 0
 15702                           ;RF.c: 322: {
 15703                           ;RF.c: 323: RF_LoadCode();
 15704  0037F8  EC60  F004         	call	i2_RF_LoadCode	;wreg free
 15705                           
 15706                           ;RF.c: 324: }
 15707                           ;RF.c: 325: System_State = 8;
 15708  0037FC  0E08               	movlw	8
 15709  0037FE  0100               	movlb	0	; () banked
 15710  003800  6FCF               	movwf	_System_State& (0+255),b	;volatile
 15711  003802                     i2l7145:
 15712                           
 15713                           ; BSR set to: 0
 15714                           ;RF.c: 326: }
 15715                           ;RF.c: 327: return 0;
 15716  003802  0E00               	movlw	0
 15717                           
 15718                           ; BSR set to: 0
 15719  003804  0012               	return	
 15720  003806                     __end_of_RF_CheckCode:
 15721                           	opt stack 0
 15722                           pclatu	equ	0xFFB
 15723                           pclath	equ	0xFFA
 15724                           tblptru	equ	0xFF8
 15725                           tblptrh	equ	0xFF7
 15726                           tblptrl	equ	0xFF6
 15727                           tablat	equ	0xFF5
 15728                           prodh	equ	0xFF4
 15729                           prodl	equ	0xFF3
 15730                           intcon	equ	0xFF2
 15731                           intcon2	equ	0xFF1
 15732                           intcon3	equ	0xFF0
 15733                           postinc0	equ	0xFEE
 15734                           fsr0h	equ	0xFEA
 15735                           fsr0l	equ	0xFE9
 15736                           wreg	equ	0xFE8
 15737                           postdec1	equ	0xFE5
 15738                           fsr1h	equ	0xFE2
 15739                           fsr1l	equ	0xFE1
 15740                           bsr	equ	0xFE0
 15741                           indf2	equ	0xFDF
 15742                           postinc2	equ	0xFDE
 15743                           postdec2	equ	0xFDD
 15744                           plusw2	equ	0xFDB
 15745                           fsr2h	equ	0xFDA
 15746                           fsr2l	equ	0xFD9
 15747                           status	equ	0xFD8
 15748                           
 15749 ;; *************** function i2___ftge *****************
 15750 ;; Defined at:
 15751 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftge.c"
 15752 ;; Parameters:    Size  Location     Type
 15753 ;;  ff1             3   11[BANK0 ] float 
 15754 ;;  ff2             3   14[BANK0 ] float 
 15755 ;; Auto vars:     Size  Location     Type
 15756 ;;		None
 15757 ;; Return value:  Size  Location     Type
 15758 ;;		None               void
 15759 ;; Registers used:
 15760 ;;		wreg, status,2, status,0
 15761 ;; Tracked objects:
 15762 ;;		On entry : 0/0
 15763 ;;		On exit  : 0/0
 15764 ;;		Unchanged: 0/0
 15765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15766 ;;      Params:         0       6       0       0       0
 15767 ;;      Locals:         0       0       0       0       0
 15768 ;;      Temps:          0       3       0       0       0
 15769 ;;      Totals:         0       9       0       0       0
 15770 ;;Total ram usage:        9 bytes
 15771 ;; Hardware stack levels used:    1
 15772 ;; This function calls:
 15773 ;;		Nothing
 15774 ;; This function is called by:
 15775 ;;		_RF_CheckCode
 15776 ;; This function uses a non-reentrant model
 15777 ;;
 15778                           
 15779                           	psect	text102
 15780  000D10                     __ptext102:
 15781                           	opt stack 0
 15782  000D10                     i2___ftge:
 15783                           	opt stack 16
 15784                           
 15785                           ; BSR set to: 0
 15786                           ;incstack = 0
 15787  000D10  0100               	movlb	0	; () banked
 15788  000D12  AF8D               	btfss	(i2___ftge@ff1+2)& (0+255),7,b
 15789  000D14  D01D               	goto	i2l6911
 15790                           
 15791                           ; BSR set to: 0
 15792  000D16  C08B  F091         	movff	i2___ftge@ff1,??i2___ftge
 15793  000D1A  C08C  F092         	movff	i2___ftge@ff1+1,??i2___ftge+1
 15794  000D1E  C08D  F093         	movff	i2___ftge@ff1+2,??i2___ftge+2
 15795  000D22  0100               	movlb	0	; () banked
 15796  000D24  1F91               	comf	??i2___ftge& (0+255),f,b
 15797  000D26  1F92               	comf	(??i2___ftge+1)& (0+255),f,b
 15798  000D28  1F93               	comf	(??i2___ftge+2)& (0+255),f,b
 15799  000D2A  2B91               	incf	??i2___ftge& (0+255),f,b
 15800  000D2C  0E00               	movlw	0
 15801  000D2E  2392               	addwfc	(??i2___ftge+1)& (0+255),f,b
 15802  000D30  2393               	addwfc	(??i2___ftge+2)& (0+255),f,b
 15803  000D32  0E00               	movlw	0
 15804  000D34  0100               	movlb	0	; () banked
 15805  000D36  2591               	addwf	??i2___ftge& (0+255),w,b
 15806  000D38  0100               	movlb	0	; () banked
 15807  000D3A  6F8B               	movwf	i2___ftge@ff1& (0+255),b
 15808  000D3C  0E00               	movlw	0
 15809  000D3E  0100               	movlb	0	; () banked
 15810  000D40  2192               	addwfc	(??i2___ftge+1)& (0+255),w,b
 15811  000D42  0100               	movlb	0	; () banked
 15812  000D44  6F8C               	movwf	(i2___ftge@ff1+1)& (0+255),b
 15813  000D46  0E80               	movlw	128
 15814  000D48  0100               	movlb	0	; () banked
 15815  000D4A  2193               	addwfc	(??i2___ftge+2)& (0+255),w,b
 15816  000D4C  0100               	movlb	0	; () banked
 15817  000D4E  6F8D               	movwf	(i2___ftge@ff1+2)& (0+255),b
 15818  000D50                     i2l6911:
 15819                           
 15820                           ; BSR set to: 0
 15821  000D50  0100               	movlb	0	; () banked
 15822  000D52  AF90               	btfss	(i2___ftge@ff2+2)& (0+255),7,b
 15823  000D54  D01D               	goto	i2l6915
 15824                           
 15825                           ; BSR set to: 0
 15826  000D56  C08E  F091         	movff	i2___ftge@ff2,??i2___ftge
 15827  000D5A  C08F  F092         	movff	i2___ftge@ff2+1,??i2___ftge+1
 15828  000D5E  C090  F093         	movff	i2___ftge@ff2+2,??i2___ftge+2
 15829  000D62  0100               	movlb	0	; () banked
 15830  000D64  1F91               	comf	??i2___ftge& (0+255),f,b
 15831  000D66  1F92               	comf	(??i2___ftge+1)& (0+255),f,b
 15832  000D68  1F93               	comf	(??i2___ftge+2)& (0+255),f,b
 15833  000D6A  2B91               	incf	??i2___ftge& (0+255),f,b
 15834  000D6C  0E00               	movlw	0
 15835  000D6E  2392               	addwfc	(??i2___ftge+1)& (0+255),f,b
 15836  000D70  2393               	addwfc	(??i2___ftge+2)& (0+255),f,b
 15837  000D72  0E00               	movlw	0
 15838  000D74  0100               	movlb	0	; () banked
 15839  000D76  2591               	addwf	??i2___ftge& (0+255),w,b
 15840  000D78  0100               	movlb	0	; () banked
 15841  000D7A  6F8E               	movwf	i2___ftge@ff2& (0+255),b
 15842  000D7C  0E00               	movlw	0
 15843  000D7E  0100               	movlb	0	; () banked
 15844  000D80  2192               	addwfc	(??i2___ftge+1)& (0+255),w,b
 15845  000D82  0100               	movlb	0	; () banked
 15846  000D84  6F8F               	movwf	(i2___ftge@ff2+1)& (0+255),b
 15847  000D86  0E80               	movlw	128
 15848  000D88  0100               	movlb	0	; () banked
 15849  000D8A  2193               	addwfc	(??i2___ftge+2)& (0+255),w,b
 15850  000D8C  0100               	movlb	0	; () banked
 15851  000D8E  6F90               	movwf	(i2___ftge@ff2+2)& (0+255),b
 15852  000D90                     i2l6915:
 15853                           
 15854                           ; BSR set to: 0
 15855  000D90  0E00               	movlw	0
 15856  000D92  0100               	movlb	0	; () banked
 15857  000D94  1B8B               	xorwf	i2___ftge@ff1& (0+255),f,b
 15858  000D96  0E00               	movlw	0
 15859  000D98  0100               	movlb	0	; () banked
 15860  000D9A  1B8C               	xorwf	(i2___ftge@ff1+1)& (0+255),f,b
 15861  000D9C  0E80               	movlw	128
 15862  000D9E  0100               	movlb	0	; () banked
 15863  000DA0  1B8D               	xorwf	(i2___ftge@ff1+2)& (0+255),f,b
 15864                           
 15865                           ; BSR set to: 0
 15866  000DA2  0E00               	movlw	0
 15867  000DA4  0100               	movlb	0	; () banked
 15868  000DA6  1B8E               	xorwf	i2___ftge@ff2& (0+255),f,b
 15869  000DA8  0E00               	movlw	0
 15870  000DAA  0100               	movlb	0	; () banked
 15871  000DAC  1B8F               	xorwf	(i2___ftge@ff2+1)& (0+255),f,b
 15872  000DAE  0E80               	movlw	128
 15873  000DB0  0100               	movlb	0	; () banked
 15874  000DB2  1B90               	xorwf	(i2___ftge@ff2+2)& (0+255),f,b
 15875  000DB4  0100               	movlb	0	; () banked
 15876  000DB6  518E               	movf	i2___ftge@ff2& (0+255),w,b
 15877  000DB8  0100               	movlb	0	; () banked
 15878  000DBA  5D8B               	subwf	i2___ftge@ff1& (0+255),w,b
 15879  000DBC  0100               	movlb	0	; () banked
 15880  000DBE  518F               	movf	(i2___ftge@ff2+1)& (0+255),w,b
 15881  000DC0  0100               	movlb	0	; () banked
 15882  000DC2  598C               	subwfb	(i2___ftge@ff1+1)& (0+255),w,b
 15883  000DC4  0100               	movlb	0	; () banked
 15884  000DC6  5190               	movf	(i2___ftge@ff2+2)& (0+255),w,b
 15885  000DC8  0100               	movlb	0	; () banked
 15886  000DCA  598D               	subwfb	(i2___ftge@ff1+2)& (0+255),w,b
 15887  000DCC  B0D8               	btfsc	status,0,c
 15888  000DCE  D002               	goto	i2l6921
 15889                           
 15890                           ; BSR set to: 0
 15891  000DD0  90D8               	bcf	status,0,c
 15892  000DD2  0012               	return	
 15893  000DD4                     i2l6921:
 15894                           
 15895                           ; BSR set to: 0
 15896  000DD4  80D8               	bsf	status,0,c
 15897                           
 15898                           ; BSR set to: 0
 15899  000DD6  0012               	return	
 15900  000DD8                     __end_ofi2___ftge:
 15901                           	opt stack 0
 15902                           pclatu	equ	0xFFB
 15903                           pclath	equ	0xFFA
 15904                           tblptru	equ	0xFF8
 15905                           tblptrh	equ	0xFF7
 15906                           tblptrl	equ	0xFF6
 15907                           tablat	equ	0xFF5
 15908                           prodh	equ	0xFF4
 15909                           prodl	equ	0xFF3
 15910                           intcon	equ	0xFF2
 15911                           intcon2	equ	0xFF1
 15912                           intcon3	equ	0xFF0
 15913                           postinc0	equ	0xFEE
 15914                           fsr0h	equ	0xFEA
 15915                           fsr0l	equ	0xFE9
 15916                           wreg	equ	0xFE8
 15917                           postdec1	equ	0xFE5
 15918                           fsr1h	equ	0xFE2
 15919                           fsr1l	equ	0xFE1
 15920                           bsr	equ	0xFE0
 15921                           indf2	equ	0xFDF
 15922                           postinc2	equ	0xFDE
 15923                           postdec2	equ	0xFDD
 15924                           plusw2	equ	0xFDB
 15925                           fsr2h	equ	0xFDA
 15926                           fsr2l	equ	0xFD9
 15927                           status	equ	0xFD8
 15928                           
 15929 ;; *************** function i2_RF_LoadCode *****************
 15930 ;; Defined at:
 15931 ;;		line 232 in file "RF.c"
 15932 ;; Parameters:    Size  Location     Type
 15933 ;;		None
 15934 ;; Auto vars:     Size  Location     Type
 15935 ;;  RF_LoadCode     3   29[BANK0 ] float 
 15936 ;;  RF_LoadCode     3   26[BANK0 ] float 
 15937 ;; Return value:  Size  Location     Type
 15938 ;;		None               void
 15939 ;; Registers used:
 15940 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15941 ;; Tracked objects:
 15942 ;;		On entry : 0/0
 15943 ;;		On exit  : 0/0
 15944 ;;		Unchanged: 0/0
 15945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 15946 ;;      Params:         0       0       0       0       0
 15947 ;;      Locals:         0       6       0       0       0
 15948 ;;      Temps:          0       0       0       0       0
 15949 ;;      Totals:         0       6       0       0       0
 15950 ;;Total ram usage:        6 bytes
 15951 ;; Hardware stack levels used:    1
 15952 ;; Hardware stack levels required when called:    2
 15953 ;; This function calls:
 15954 ;;		i2_RF_CalculateCodesize
 15955 ;;		i2___ftmul
 15956 ;;		i2___fttol
 15957 ;;		i2___lwtoft
 15958 ;; This function is called by:
 15959 ;;		_RF_CheckCode
 15960 ;; This function uses a non-reentrant model
 15961 ;;
 15962                           
 15963                           	psect	text103
 15964  0008C0                     __ptext103:
 15965                           	opt stack 0
 15966  0008C0                     i2_RF_LoadCode:
 15967                           	opt stack 14
 15968                           
 15969                           ;RF.c: 234: double Low = 0.0;
 15970                           
 15971                           ; BSR set to: 0
 15972                           ;incstack = 0
 15973  0008C0  0E00               	movlw	0
 15974  0008C2  0100               	movlb	0	; () banked
 15975  0008C4  6F9A               	movwf	i2RF_LoadCode@Low& (0+255),b
 15976  0008C6  0E00               	movlw	0
 15977  0008C8  0100               	movlb	0	; () banked
 15978  0008CA  6F9B               	movwf	(i2RF_LoadCode@Low+1)& (0+255),b
 15979  0008CC  0E00               	movlw	0
 15980  0008CE  0100               	movlb	0	; () banked
 15981  0008D0  6F9C               	movwf	(i2RF_LoadCode@Low+2)& (0+255),b
 15982                           
 15983                           ;RF.c: 235: double High = 0.0;
 15984  0008D2  0E00               	movlw	0
 15985  0008D4  0100               	movlb	0	; () banked
 15986  0008D6  6F9D               	movwf	i2RF_LoadCode@High& (0+255),b
 15987  0008D8  0E00               	movlw	0
 15988  0008DA  0100               	movlb	0	; () banked
 15989  0008DC  6F9E               	movwf	(i2RF_LoadCode@High+1)& (0+255),b
 15990  0008DE  0E00               	movlw	0
 15991  0008E0  0100               	movlb	0	; () banked
 15992  0008E2  6F9F               	movwf	(i2RF_LoadCode@High+2)& (0+255),b
 15993                           
 15994                           ; BSR set to: 0
 15995                           ;RF.c: 237: Low = (double)RF_SavedTiming[0] * (1.0 - 0.02);
 15996  0008E4  0E00               	movlw	0
 15997  0008E6  6EF6               	movwf	tblptrl,c
 15998  0008E8                     	if	1	;There is more than 1 active tblptr byte
 15999  0008E8  0E25               	movlw	37
 16000  0008EA  6EF7               	movwf	tblptrh,c
 16001  0008EC                     	endif
 16002  0008EC                     	if	0	;There are less than 3 active tblptr bytes
 16003  0008EC                     	endif
 16004  0008EC  0009               	tblrd		*+
 16005  0008EE  CFF5 F088          	movff	tablat,i2___lwtoft@c
 16006  0008F2  000A               	tblrd		*-
 16007  0008F4  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 16008  0008F8  EC56  F00D         	call	i2___lwtoft	;wreg free
 16009  0008FC  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 16010  000900  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 16011  000904  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 16012  000908  0EE1               	movlw	225
 16013  00090A  0100               	movlb	0	; () banked
 16014  00090C  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 16015  00090E  0E7A               	movlw	122
 16016  000910  0100               	movlb	0	; () banked
 16017  000912  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 16018  000914  0E3F               	movlw	63
 16019  000916  0100               	movlb	0	; () banked
 16020  000918  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 16021  00091A  EC80  F01E         	call	i2___ftmul	;wreg free
 16022  00091E  C08B  F09A         	movff	?i2___ftmul,i2RF_LoadCode@Low
 16023  000922  C08C  F09B         	movff	?i2___ftmul+1,i2RF_LoadCode@Low+1
 16024  000926  C08D  F09C         	movff	?i2___ftmul+2,i2RF_LoadCode@Low+2
 16025                           
 16026                           ;RF.c: 238: High = (double)RF_SavedTiming[0] * (1.0 + 0.02);
 16027  00092A  0E00               	movlw	0
 16028  00092C  6EF6               	movwf	tblptrl,c
 16029  00092E                     	if	1	;There is more than 1 active tblptr byte
 16030  00092E  0E25               	movlw	37
 16031  000930  6EF7               	movwf	tblptrh,c
 16032  000932                     	endif
 16033  000932                     	if	0	;There are less than 3 active tblptr bytes
 16034  000932                     	endif
 16035  000932  0009               	tblrd		*+
 16036  000934  CFF5 F088          	movff	tablat,i2___lwtoft@c
 16037  000938  000A               	tblrd		*-
 16038  00093A  CFF5 F089          	movff	tablat,i2___lwtoft@c+1
 16039  00093E  EC56  F00D         	call	i2___lwtoft	;wreg free
 16040  000942  C088  F08B         	movff	?i2___lwtoft,i2___ftmul@f1
 16041  000946  C089  F08C         	movff	?i2___lwtoft+1,i2___ftmul@f1+1
 16042  00094A  C08A  F08D         	movff	?i2___lwtoft+2,i2___ftmul@f1+2
 16043  00094E  0E8F               	movlw	143
 16044  000950  0100               	movlb	0	; () banked
 16045  000952  6F8E               	movwf	i2___ftmul@f2& (0+255),b
 16046  000954  0E82               	movlw	130
 16047  000956  0100               	movlb	0	; () banked
 16048  000958  6F8F               	movwf	(i2___ftmul@f2+1)& (0+255),b
 16049  00095A  0E3F               	movlw	63
 16050  00095C  0100               	movlb	0	; () banked
 16051  00095E  6F90               	movwf	(i2___ftmul@f2+2)& (0+255),b
 16052  000960  EC80  F01E         	call	i2___ftmul	;wreg free
 16053  000964  C08B  F09D         	movff	?i2___ftmul,i2RF_LoadCode@High
 16054  000968  C08C  F09E         	movff	?i2___ftmul+1,i2RF_LoadCode@High+1
 16055  00096C  C08D  F09F         	movff	?i2___ftmul+2,i2RF_LoadCode@High+2
 16056                           
 16057                           ;RF.c: 240: RF_SyncLow = (unsigned int) Low;
 16058  000970  C09A  F080         	movff	i2RF_LoadCode@Low,i2___fttol@f1
 16059  000974  C09B  F081         	movff	i2RF_LoadCode@Low+1,i2___fttol@f1+1
 16060  000978  C09C  F082         	movff	i2RF_LoadCode@Low+2,i2___fttol@f1+2
 16061  00097C  EC49  F001         	call	i2___fttol	;wreg free
 16062  000980  C080  F0BD         	movff	?i2___fttol,_RF_SyncLow
 16063  000984  C081  F0BE         	movff	?i2___fttol+1,_RF_SyncLow+1
 16064                           
 16065                           ;RF.c: 241: RF_SyncHigh = (unsigned int) High;
 16066  000988  C09D  F080         	movff	i2RF_LoadCode@High,i2___fttol@f1
 16067  00098C  C09E  F081         	movff	i2RF_LoadCode@High+1,i2___fttol@f1+1
 16068  000990  C09F  F082         	movff	i2RF_LoadCode@High+2,i2___fttol@f1+2
 16069  000994  EC49  F001         	call	i2___fttol	;wreg free
 16070  000998  C080  F0BB         	movff	?i2___fttol,_RF_SyncHigh
 16071  00099C  C081  F0BC         	movff	?i2___fttol+1,_RF_SyncHigh+1
 16072                           
 16073                           ;RF.c: 243: RF_CodeSize = RF_CalculateCodesize();
 16074  0009A0  EC51  F00B         	call	i2_RF_CalculateCodesize	;wreg free
 16075  0009A4  0100               	movlb	0	; () banked
 16076  0009A6  6FC6               	movwf	_RF_CodeSize& (0+255),b
 16077                           
 16078                           ; BSR set to: 0
 16079  0009A8  0012               	return		;funcret
 16080  0009AA                     __end_ofi2_RF_LoadCode:
 16081                           	opt stack 0
 16082                           pclatu	equ	0xFFB
 16083                           pclath	equ	0xFFA
 16084                           tblptru	equ	0xFF8
 16085                           tblptrh	equ	0xFF7
 16086                           tblptrl	equ	0xFF6
 16087                           tablat	equ	0xFF5
 16088                           prodh	equ	0xFF4
 16089                           prodl	equ	0xFF3
 16090                           intcon	equ	0xFF2
 16091                           intcon2	equ	0xFF1
 16092                           intcon3	equ	0xFF0
 16093                           postinc0	equ	0xFEE
 16094                           fsr0h	equ	0xFEA
 16095                           fsr0l	equ	0xFE9
 16096                           wreg	equ	0xFE8
 16097                           postdec1	equ	0xFE5
 16098                           fsr1h	equ	0xFE2
 16099                           fsr1l	equ	0xFE1
 16100                           bsr	equ	0xFE0
 16101                           indf2	equ	0xFDF
 16102                           postinc2	equ	0xFDE
 16103                           postdec2	equ	0xFDD
 16104                           plusw2	equ	0xFDB
 16105                           fsr2h	equ	0xFDA
 16106                           fsr2l	equ	0xFD9
 16107                           status	equ	0xFD8
 16108                           
 16109 ;; *************** function i2___lwtoft *****************
 16110 ;; Defined at:
 16111 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\lwtoft.c"
 16112 ;; Parameters:    Size  Location     Type
 16113 ;;  c               2    8[BANK0 ] unsigned int 
 16114 ;; Auto vars:     Size  Location     Type
 16115 ;;		None
 16116 ;; Return value:  Size  Location     Type
 16117 ;;                  3    8[BANK0 ] float 
 16118 ;; Registers used:
 16119 ;;		wreg, status,2, status,0, cstack
 16120 ;; Tracked objects:
 16121 ;;		On entry : 0/0
 16122 ;;		On exit  : 0/0
 16123 ;;		Unchanged: 0/0
 16124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16125 ;;      Params:         0       3       0       0       0
 16126 ;;      Locals:         0       0       0       0       0
 16127 ;;      Temps:          0       0       0       0       0
 16128 ;;      Totals:         0       3       0       0       0
 16129 ;;Total ram usage:        3 bytes
 16130 ;; Hardware stack levels used:    1
 16131 ;; Hardware stack levels required when called:    1
 16132 ;; This function calls:
 16133 ;;		i2___ftpack
 16134 ;; This function is called by:
 16135 ;;		_RF_CheckCode
 16136 ;;		i2_RF_LoadCode
 16137 ;; This function uses a non-reentrant model
 16138 ;;
 16139                           
 16140                           	psect	text104
 16141  001AAC                     __ptext104:
 16142                           	opt stack 0
 16143  001AAC                     i2___lwtoft:
 16144                           	opt stack 15
 16145                           
 16146                           ; BSR set to: 0
 16147                           ;incstack = 0
 16148  001AAC  C088  F080         	movff	i2___lwtoft@c,i2___ftpack@arg
 16149  001AB0  C089  F081         	movff	i2___lwtoft@c+1,i2___ftpack@arg+1
 16150  001AB4  0100               	movlb	0	; () banked
 16151  001AB6  6B82               	clrf	(i2___ftpack@arg+2)& (0+255),b
 16152  001AB8  0E8E               	movlw	142
 16153  001ABA  0100               	movlb	0	; () banked
 16154  001ABC  6F83               	movwf	i2___ftpack@exp& (0+255),b
 16155  001ABE  0E00               	movlw	0
 16156  001AC0  0100               	movlb	0	; () banked
 16157  001AC2  6F84               	movwf	i2___ftpack@sign& (0+255),b
 16158  001AC4  EC71  F002         	call	i2___ftpack	;wreg free
 16159  001AC8  C080  F088         	movff	?i2___ftpack,?i2___lwtoft
 16160  001ACC  C081  F089         	movff	?i2___ftpack+1,?i2___lwtoft+1
 16161  001AD0  C082  F08A         	movff	?i2___ftpack+2,?i2___lwtoft+2
 16162  001AD4  0012               	return	
 16163  001AD6                     __end_ofi2___lwtoft:
 16164                           	opt stack 0
 16165                           pclatu	equ	0xFFB
 16166                           pclath	equ	0xFFA
 16167                           tblptru	equ	0xFF8
 16168                           tblptrh	equ	0xFF7
 16169                           tblptrl	equ	0xFF6
 16170                           tablat	equ	0xFF5
 16171                           prodh	equ	0xFF4
 16172                           prodl	equ	0xFF3
 16173                           intcon	equ	0xFF2
 16174                           intcon2	equ	0xFF1
 16175                           intcon3	equ	0xFF0
 16176                           postinc0	equ	0xFEE
 16177                           fsr0h	equ	0xFEA
 16178                           fsr0l	equ	0xFE9
 16179                           wreg	equ	0xFE8
 16180                           postdec1	equ	0xFE5
 16181                           fsr1h	equ	0xFE2
 16182                           fsr1l	equ	0xFE1
 16183                           bsr	equ	0xFE0
 16184                           indf2	equ	0xFDF
 16185                           postinc2	equ	0xFDE
 16186                           postdec2	equ	0xFDD
 16187                           plusw2	equ	0xFDB
 16188                           fsr2h	equ	0xFDA
 16189                           fsr2l	equ	0xFD9
 16190                           status	equ	0xFD8
 16191                           
 16192 ;; *************** function i2___fttol *****************
 16193 ;; Defined at:
 16194 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\fttol.c"
 16195 ;; Parameters:    Size  Location     Type
 16196 ;;  f1              3    0[BANK0 ] float 
 16197 ;; Auto vars:     Size  Location     Type
 16198 ;;  __fttol         4   10[BANK0 ] unsigned long 
 16199 ;;  __fttol         1   14[BANK0 ] unsigned char 
 16200 ;;  __fttol         1    9[BANK0 ] unsigned char 
 16201 ;; Return value:  Size  Location     Type
 16202 ;;                  4    0[BANK0 ] long 
 16203 ;; Registers used:
 16204 ;;		wreg, status,2, status,0
 16205 ;; Tracked objects:
 16206 ;;		On entry : 0/0
 16207 ;;		On exit  : 0/0
 16208 ;;		Unchanged: 0/0
 16209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16210 ;;      Params:         0       4       0       0       0
 16211 ;;      Locals:         0       6       0       0       0
 16212 ;;      Temps:          0       5       0       0       0
 16213 ;;      Totals:         0      15       0       0       0
 16214 ;;Total ram usage:       15 bytes
 16215 ;; Hardware stack levels used:    1
 16216 ;; This function calls:
 16217 ;;		Nothing
 16218 ;; This function is called by:
 16219 ;;		i2_RF_LoadCode
 16220 ;; This function uses a non-reentrant model
 16221 ;;
 16222                           
 16223                           	psect	text105
 16224  000292                     __ptext105:
 16225                           	opt stack 0
 16226  000292                     i2___fttol:
 16227                           	opt stack 15
 16228                           
 16229                           ;incstack = 0
 16230  000292  C082  F084         	movff	i2___fttol@f1+2,??i2___fttol
 16231  000296  0100               	movlb	0	; () banked
 16232  000298  6B85               	clrf	(??i2___fttol+1)& (0+255),b
 16233  00029A  6B86               	clrf	(??i2___fttol+2)& (0+255),b
 16234  00029C  0100               	movlb	0	; () banked
 16235  00029E  3581               	rlcf	(i2___fttol@f1+1)& (0+255),w,b
 16236  0002A0  0100               	movlb	0	; () banked
 16237  0002A2  3784               	rlcf	??i2___fttol& (0+255),f,b
 16238  0002A4  E301               	bnc	u644_41
 16239  0002A6  8185               	bsf	(??i2___fttol+1)& (0+255),0,b
 16240  0002A8                     u644_41:
 16241  0002A8  0100               	movlb	0	; () banked
 16242  0002AA  5184               	movf	??i2___fttol& (0+255),w,b
 16243  0002AC  0100               	movlb	0	; () banked
 16244  0002AE  6F8E               	movwf	i2___fttol@exp1& (0+255),b
 16245  0002B0  0100               	movlb	0	; () banked
 16246  0002B2  518E               	movf	i2___fttol@exp1& (0+255),w,b
 16247  0002B4  A4D8               	btfss	status,2,c
 16248  0002B6  D00A               	goto	i2l6079
 16249                           
 16250                           ; BSR set to: 0
 16251  0002B8  0E00               	movlw	0
 16252  0002BA  0100               	movlb	0	; () banked
 16253  0002BC  6F80               	movwf	?i2___fttol& (0+255),b
 16254  0002BE  0E00               	movlw	0
 16255  0002C0  6F81               	movwf	(?i2___fttol+1)& (0+255),b
 16256  0002C2  0E00               	movlw	0
 16257  0002C4  6F82               	movwf	(?i2___fttol+2)& (0+255),b
 16258  0002C6  0E00               	movlw	0
 16259  0002C8  6F83               	movwf	(?i2___fttol+3)& (0+255),b
 16260                           
 16261                           ; BSR set to: 0
 16262  0002CA  0012               	return	
 16263  0002CC                     i2l6079:
 16264                           
 16265                           ; BSR set to: 0
 16266  0002CC  0E17               	movlw	23
 16267  0002CE  0100               	movlb	0	; () banked
 16268  0002D0  6F84               	movwf	??i2___fttol& (0+255),b
 16269  0002D2  C080  F085         	movff	i2___fttol@f1,??i2___fttol+1
 16270  0002D6  C081  F086         	movff	i2___fttol@f1+1,??i2___fttol+2
 16271  0002DA  C082  F087         	movff	i2___fttol@f1+2,??i2___fttol+3
 16272  0002DE  0100               	movlb	0	; () banked
 16273  0002E0  2984               	incf	??i2___fttol& (0+255),w,b
 16274  0002E2  0100               	movlb	0	; () banked
 16275  0002E4  6F88               	movwf	(??i2___fttol+4)& (0+255),b
 16276  0002E6  D005               	goto	i2u646_40
 16277  0002E8                     i2u646_45:
 16278  0002E8  0100               	movlb	0	; () banked
 16279  0002EA  90D8               	bcf	status,0,c
 16280  0002EC  3387               	rrcf	(??i2___fttol+3)& (0+255),f,b
 16281  0002EE  3386               	rrcf	(??i2___fttol+2)& (0+255),f,b
 16282  0002F0  3385               	rrcf	(??i2___fttol+1)& (0+255),f,b
 16283  0002F2                     i2u646_40:
 16284  0002F2  0100               	movlb	0	; () banked
 16285  0002F4  2F88               	decfsz	(??i2___fttol+4)& (0+255),f,b
 16286  0002F6  D7F8               	goto	i2u646_45
 16287  0002F8  0100               	movlb	0	; () banked
 16288  0002FA  5185               	movf	(??i2___fttol+1)& (0+255),w,b
 16289  0002FC  0100               	movlb	0	; () banked
 16290  0002FE  6F89               	movwf	i2___fttol@sign1& (0+255),b
 16291                           
 16292                           ; BSR set to: 0
 16293  000300  0100               	movlb	0	; () banked
 16294  000302  8F81               	bsf	(i2___fttol@f1+1)& (0+255),7,b
 16295                           
 16296                           ; BSR set to: 0
 16297  000304  0EFF               	movlw	255
 16298  000306  0100               	movlb	0	; () banked
 16299  000308  1780               	andwf	i2___fttol@f1& (0+255),f,b
 16300  00030A  0EFF               	movlw	255
 16301  00030C  0100               	movlb	0	; () banked
 16302  00030E  1781               	andwf	(i2___fttol@f1+1)& (0+255),f,b
 16303  000310  0E00               	movlw	0
 16304  000312  0100               	movlb	0	; () banked
 16305  000314  1782               	andwf	(i2___fttol@f1+2)& (0+255),f,b
 16306                           
 16307                           ; BSR set to: 0
 16308  000316  0100               	movlb	0	; () banked
 16309  000318  5180               	movf	i2___fttol@f1& (0+255),w,b
 16310  00031A  0100               	movlb	0	; () banked
 16311  00031C  6F8A               	movwf	i2___fttol@lval& (0+255),b
 16312  00031E  0100               	movlb	0	; () banked
 16313  000320  5181               	movf	(i2___fttol@f1+1)& (0+255),w,b
 16314  000322  0100               	movlb	0	; () banked
 16315  000324  6F8B               	movwf	(i2___fttol@lval+1)& (0+255),b
 16316  000326  0100               	movlb	0	; () banked
 16317  000328  5182               	movf	(i2___fttol@f1+2)& (0+255),w,b
 16318  00032A  0100               	movlb	0	; () banked
 16319  00032C  6F8C               	movwf	(i2___fttol@lval+2)& (0+255),b
 16320  00032E  0100               	movlb	0	; () banked
 16321  000330  6B8D               	clrf	(i2___fttol@lval+3)& (0+255),b
 16322                           
 16323                           ; BSR set to: 0
 16324  000332  0E8E               	movlw	142
 16325  000334  0100               	movlb	0	; () banked
 16326  000336  5F8E               	subwf	i2___fttol@exp1& (0+255),f,b
 16327                           
 16328                           ; BSR set to: 0
 16329  000338  0100               	movlb	0	; () banked
 16330  00033A  AF8E               	btfss	i2___fttol@exp1& (0+255),7,b
 16331  00033C  D01A               	goto	i2l6101
 16332                           
 16333                           ; BSR set to: 0
 16334  00033E  0100               	movlb	0	; () banked
 16335  000340  518E               	movf	i2___fttol@exp1& (0+255),w,b
 16336  000342  0A80               	xorlw	128
 16337  000344  0F8F               	addlw	143
 16338  000346  B0D8               	btfsc	status,0,c
 16339  000348  D00A               	goto	i2l6097
 16340                           
 16341                           ; BSR set to: 0
 16342  00034A  0E00               	movlw	0
 16343  00034C  0100               	movlb	0	; () banked
 16344  00034E  6F80               	movwf	?i2___fttol& (0+255),b
 16345  000350  0E00               	movlw	0
 16346  000352  6F81               	movwf	(?i2___fttol+1)& (0+255),b
 16347  000354  0E00               	movlw	0
 16348  000356  6F82               	movwf	(?i2___fttol+2)& (0+255),b
 16349  000358  0E00               	movlw	0
 16350  00035A  6F83               	movwf	(?i2___fttol+3)& (0+255),b
 16351                           
 16352                           ; BSR set to: 0
 16353  00035C  0012               	return	
 16354  00035E                     i2l6097:
 16355                           
 16356                           ; BSR set to: 0
 16357  00035E  0100               	movlb	0	; () banked
 16358  000360  90D8               	bcf	status,0,c
 16359  000362  338D               	rrcf	(i2___fttol@lval+3)& (0+255),f,b
 16360  000364  338C               	rrcf	(i2___fttol@lval+2)& (0+255),f,b
 16361  000366  338B               	rrcf	(i2___fttol@lval+1)& (0+255),f,b
 16362  000368  338A               	rrcf	i2___fttol@lval& (0+255),f,b
 16363                           
 16364                           ; BSR set to: 0
 16365  00036A  0100               	movlb	0	; () banked
 16366  00036C  3F8E               	incfsz	i2___fttol@exp1& (0+255),f,b
 16367  00036E  D7F7               	goto	i2l6097
 16368                           
 16369                           ; BSR set to: 0
 16370  000370  D01B               	goto	i2l6111
 16371  000372                     i2l6101:
 16372                           
 16373                           ; BSR set to: 0
 16374  000372  0E17               	movlw	23
 16375  000374  0100               	movlb	0	; () banked
 16376  000376  658E               	cpfsgt	i2___fttol@exp1& (0+255),b
 16377  000378  D012               	goto	i2l6109
 16378                           
 16379                           ; BSR set to: 0
 16380  00037A  0E00               	movlw	0
 16381  00037C  0100               	movlb	0	; () banked
 16382  00037E  6F80               	movwf	?i2___fttol& (0+255),b
 16383  000380  0E00               	movlw	0
 16384  000382  6F81               	movwf	(?i2___fttol+1)& (0+255),b
 16385  000384  0E00               	movlw	0
 16386  000386  6F82               	movwf	(?i2___fttol+2)& (0+255),b
 16387  000388  0E00               	movlw	0
 16388  00038A  6F83               	movwf	(?i2___fttol+3)& (0+255),b
 16389                           
 16390                           ; BSR set to: 0
 16391  00038C  0012               	return	
 16392  00038E                     i2l6107:
 16393                           
 16394                           ; BSR set to: 0
 16395  00038E  0100               	movlb	0	; () banked
 16396  000390  90D8               	bcf	status,0,c
 16397  000392  378A               	rlcf	i2___fttol@lval& (0+255),f,b
 16398  000394  378B               	rlcf	(i2___fttol@lval+1)& (0+255),f,b
 16399  000396  378C               	rlcf	(i2___fttol@lval+2)& (0+255),f,b
 16400  000398  378D               	rlcf	(i2___fttol@lval+3)& (0+255),f,b
 16401  00039A  0100               	movlb	0	; () banked
 16402  00039C  078E               	decf	i2___fttol@exp1& (0+255),f,b
 16403  00039E                     i2l6109:
 16404                           
 16405                           ; BSR set to: 0
 16406  00039E  0100               	movlb	0	; () banked
 16407  0003A0  518E               	movf	i2___fttol@exp1& (0+255),w,b
 16408  0003A2  0100               	movlb	0	; () banked
 16409  0003A4  A4D8               	btfss	status,2,c
 16410  0003A6  D7F3               	goto	i2l6107
 16411  0003A8                     i2l6111:
 16412                           
 16413                           ; BSR set to: 0
 16414  0003A8  0100               	movlb	0	; () banked
 16415  0003AA  5189               	movf	i2___fttol@sign1& (0+255),w,b
 16416  0003AC  0100               	movlb	0	; () banked
 16417  0003AE  B4D8               	btfsc	status,2,c
 16418  0003B0  D009               	goto	i2l6115
 16419                           
 16420                           ; BSR set to: 0
 16421  0003B2  0100               	movlb	0	; () banked
 16422  0003B4  1F8D               	comf	(i2___fttol@lval+3)& (0+255),f,b
 16423  0003B6  1F8C               	comf	(i2___fttol@lval+2)& (0+255),f,b
 16424  0003B8  1F8B               	comf	(i2___fttol@lval+1)& (0+255),f,b
 16425  0003BA  6D8A               	negf	i2___fttol@lval& (0+255),b
 16426  0003BC  0E00               	movlw	0
 16427  0003BE  238B               	addwfc	(i2___fttol@lval+1)& (0+255),f,b
 16428  0003C0  238C               	addwfc	(i2___fttol@lval+2)& (0+255),f,b
 16429  0003C2  238D               	addwfc	(i2___fttol@lval+3)& (0+255),f,b
 16430  0003C4                     i2l6115:
 16431                           
 16432                           ; BSR set to: 0
 16433  0003C4  C08A  F080         	movff	i2___fttol@lval,?i2___fttol
 16434  0003C8  C08B  F081         	movff	i2___fttol@lval+1,?i2___fttol+1
 16435  0003CC  C08C  F082         	movff	i2___fttol@lval+2,?i2___fttol+2
 16436  0003D0  C08D  F083         	movff	i2___fttol@lval+3,?i2___fttol+3
 16437  0003D4  0012               	return	
 16438  0003D6                     __end_ofi2___fttol:
 16439                           	opt stack 0
 16440                           pclatu	equ	0xFFB
 16441                           pclath	equ	0xFFA
 16442                           tblptru	equ	0xFF8
 16443                           tblptrh	equ	0xFF7
 16444                           tblptrl	equ	0xFF6
 16445                           tablat	equ	0xFF5
 16446                           prodh	equ	0xFF4
 16447                           prodl	equ	0xFF3
 16448                           intcon	equ	0xFF2
 16449                           intcon2	equ	0xFF1
 16450                           intcon3	equ	0xFF0
 16451                           postinc0	equ	0xFEE
 16452                           fsr0h	equ	0xFEA
 16453                           fsr0l	equ	0xFE9
 16454                           wreg	equ	0xFE8
 16455                           postdec1	equ	0xFE5
 16456                           fsr1h	equ	0xFE2
 16457                           fsr1l	equ	0xFE1
 16458                           bsr	equ	0xFE0
 16459                           indf2	equ	0xFDF
 16460                           postinc2	equ	0xFDE
 16461                           postdec2	equ	0xFDD
 16462                           plusw2	equ	0xFDB
 16463                           fsr2h	equ	0xFDA
 16464                           fsr2l	equ	0xFD9
 16465                           status	equ	0xFD8
 16466                           
 16467 ;; *************** function i2___ftmul *****************
 16468 ;; Defined at:
 16469 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\ftmul.c"
 16470 ;; Parameters:    Size  Location     Type
 16471 ;;  f1              3   11[BANK0 ] float 
 16472 ;;  f2              3   14[BANK0 ] float 
 16473 ;; Auto vars:     Size  Location     Type
 16474 ;;  __ftmul         3   21[BANK0 ] unsigned um
 16475 ;;  __ftmul         1   25[BANK0 ] unsigned char 
 16476 ;;  __ftmul         1   24[BANK0 ] unsigned char 
 16477 ;;  __ftmul         1   20[BANK0 ] unsigned char 
 16478 ;; Return value:  Size  Location     Type
 16479 ;;                  3   11[BANK0 ] float 
 16480 ;; Registers used:
 16481 ;;		wreg, status,2, status,0, cstack
 16482 ;; Tracked objects:
 16483 ;;		On entry : 0/0
 16484 ;;		On exit  : 0/0
 16485 ;;		Unchanged: 0/0
 16486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16487 ;;      Params:         0       6       0       0       0
 16488 ;;      Locals:         0       6       0       0       0
 16489 ;;      Temps:          0       3       0       0       0
 16490 ;;      Totals:         0      15       0       0       0
 16491 ;;Total ram usage:       15 bytes
 16492 ;; Hardware stack levels used:    1
 16493 ;; Hardware stack levels required when called:    1
 16494 ;; This function calls:
 16495 ;;		i2___ftpack
 16496 ;; This function is called by:
 16497 ;;		_RF_CheckCode
 16498 ;;		i2_RF_LoadCode
 16499 ;; This function uses a non-reentrant model
 16500 ;;
 16501                           
 16502                           	psect	text106
 16503  003D00                     __ptext106:
 16504                           	opt stack 0
 16505  003D00                     i2___ftmul:
 16506                           	opt stack 15
 16507                           
 16508                           ; BSR set to: 0
 16509                           ;incstack = 0
 16510  003D00  C08D  F091         	movff	i2___ftmul@f1+2,??i2___ftmul
 16511  003D04  0100               	movlb	0	; () banked
 16512  003D06  6B92               	clrf	(??i2___ftmul+1)& (0+255),b
 16513  003D08  6B93               	clrf	(??i2___ftmul+2)& (0+255),b
 16514  003D0A  0100               	movlb	0	; () banked
 16515  003D0C  358C               	rlcf	(i2___ftmul@f1+1)& (0+255),w,b
 16516  003D0E  0100               	movlb	0	; () banked
 16517  003D10  3791               	rlcf	??i2___ftmul& (0+255),f,b
 16518  003D12  E301               	bnc	u630_41
 16519  003D14  8192               	bsf	(??i2___ftmul+1)& (0+255),0,b
 16520  003D16                     u630_41:
 16521  003D16  0100               	movlb	0	; () banked
 16522  003D18  5191               	movf	??i2___ftmul& (0+255),w,b
 16523  003D1A  0100               	movlb	0	; () banked
 16524  003D1C  6F94               	movwf	i2___ftmul@exp& (0+255),b
 16525  003D1E  0100               	movlb	0	; () banked
 16526  003D20  5194               	movf	i2___ftmul@exp& (0+255),w,b
 16527  003D22  A4D8               	btfss	status,2,c
 16528  003D24  D00A               	goto	i2l5985
 16529                           
 16530                           ; BSR set to: 0
 16531  003D26  0E00               	movlw	0
 16532  003D28  0100               	movlb	0	; () banked
 16533  003D2A  6F8B               	movwf	?i2___ftmul& (0+255),b
 16534  003D2C  0E00               	movlw	0
 16535  003D2E  0100               	movlb	0	; () banked
 16536  003D30  6F8C               	movwf	(?i2___ftmul+1)& (0+255),b
 16537  003D32  0E00               	movlw	0
 16538  003D34  0100               	movlb	0	; () banked
 16539  003D36  6F8D               	movwf	(?i2___ftmul+2)& (0+255),b
 16540                           
 16541                           ; BSR set to: 0
 16542  003D38  0012               	return	
 16543  003D3A                     i2l5985:
 16544                           
 16545                           ; BSR set to: 0
 16546  003D3A  C090  F091         	movff	i2___ftmul@f2+2,??i2___ftmul
 16547  003D3E  0100               	movlb	0	; () banked
 16548  003D40  6B92               	clrf	(??i2___ftmul+1)& (0+255),b
 16549  003D42  6B93               	clrf	(??i2___ftmul+2)& (0+255),b
 16550  003D44  0100               	movlb	0	; () banked
 16551  003D46  358F               	rlcf	(i2___ftmul@f2+1)& (0+255),w,b
 16552  003D48  0100               	movlb	0	; () banked
 16553  003D4A  3791               	rlcf	??i2___ftmul& (0+255),f,b
 16554  003D4C  E301               	bnc	u632_41
 16555  003D4E  8192               	bsf	(??i2___ftmul+1)& (0+255),0,b
 16556  003D50                     u632_41:
 16557  003D50  0100               	movlb	0	; () banked
 16558  003D52  5191               	movf	??i2___ftmul& (0+255),w,b
 16559  003D54  0100               	movlb	0	; () banked
 16560  003D56  6F99               	movwf	i2___ftmul@sign& (0+255),b
 16561  003D58  0100               	movlb	0	; () banked
 16562  003D5A  5199               	movf	i2___ftmul@sign& (0+255),w,b
 16563  003D5C  A4D8               	btfss	status,2,c
 16564  003D5E  D00A               	goto	i2l5991
 16565                           
 16566                           ; BSR set to: 0
 16567  003D60  0E00               	movlw	0
 16568  003D62  0100               	movlb	0	; () banked
 16569  003D64  6F8B               	movwf	?i2___ftmul& (0+255),b
 16570  003D66  0E00               	movlw	0
 16571  003D68  0100               	movlb	0	; () banked
 16572  003D6A  6F8C               	movwf	(?i2___ftmul+1)& (0+255),b
 16573  003D6C  0E00               	movlw	0
 16574  003D6E  0100               	movlb	0	; () banked
 16575  003D70  6F8D               	movwf	(?i2___ftmul+2)& (0+255),b
 16576                           
 16577                           ; BSR set to: 0
 16578  003D72  0012               	return	
 16579  003D74                     i2l5991:
 16580                           
 16581                           ; BSR set to: 0
 16582  003D74  0100               	movlb	0	; () banked
 16583  003D76  5199               	movf	i2___ftmul@sign& (0+255),w,b
 16584  003D78  0F7B               	addlw	123
 16585  003D7A  0100               	movlb	0	; () banked
 16586  003D7C  2794               	addwf	i2___ftmul@exp& (0+255),f,b
 16587                           
 16588                           ; BSR set to: 0
 16589  003D7E  C08D  F099         	movff	i2___ftmul@f1+2,i2___ftmul@sign
 16590  003D82  0100               	movlb	0	; () banked
 16591  003D84  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 16592  003D86  0100               	movlb	0	; () banked
 16593  003D88  1B99               	xorwf	i2___ftmul@sign& (0+255),f,b
 16594  003D8A  0E80               	movlw	128
 16595  003D8C  0100               	movlb	0	; () banked
 16596  003D8E  1799               	andwf	i2___ftmul@sign& (0+255),f,b
 16597                           
 16598                           ; BSR set to: 0
 16599  003D90  0100               	movlb	0	; () banked
 16600  003D92  8F8C               	bsf	(i2___ftmul@f1+1)& (0+255),7,b
 16601                           
 16602                           ; BSR set to: 0
 16603  003D94  0100               	movlb	0	; () banked
 16604  003D96  8F8F               	bsf	(i2___ftmul@f2+1)& (0+255),7,b
 16605                           
 16606                           ; BSR set to: 0
 16607  003D98  0EFF               	movlw	255
 16608  003D9A  0100               	movlb	0	; () banked
 16609  003D9C  178E               	andwf	i2___ftmul@f2& (0+255),f,b
 16610  003D9E  0EFF               	movlw	255
 16611  003DA0  0100               	movlb	0	; () banked
 16612  003DA2  178F               	andwf	(i2___ftmul@f2+1)& (0+255),f,b
 16613  003DA4  0E00               	movlw	0
 16614  003DA6  0100               	movlb	0	; () banked
 16615  003DA8  1790               	andwf	(i2___ftmul@f2+2)& (0+255),f,b
 16616                           
 16617                           ; BSR set to: 0
 16618  003DAA  0E00               	movlw	0
 16619  003DAC  0100               	movlb	0	; () banked
 16620  003DAE  6F95               	movwf	i2___ftmul@f3_as_product& (0+255),b
 16621  003DB0  0E00               	movlw	0
 16622  003DB2  0100               	movlb	0	; () banked
 16623  003DB4  6F96               	movwf	(i2___ftmul@f3_as_product+1)& (0+255),b
 16624  003DB6  0E00               	movlw	0
 16625  003DB8  0100               	movlb	0	; () banked
 16626  003DBA  6F97               	movwf	(i2___ftmul@f3_as_product+2)& (0+255),b
 16627                           
 16628                           ; BSR set to: 0
 16629  003DBC  0E07               	movlw	7
 16630  003DBE  0100               	movlb	0	; () banked
 16631  003DC0  6F98               	movwf	i2___ftmul@cntr& (0+255),b
 16632  003DC2                     i2l6005:
 16633                           
 16634                           ; BSR set to: 0
 16635  003DC2  0100               	movlb	0	; () banked
 16636  003DC4  A18B               	btfss	i2___ftmul@f1& (0+255),0,b
 16637  003DC6  D00C               	goto	i2l6009
 16638                           
 16639                           ; BSR set to: 0
 16640  003DC8  0100               	movlb	0	; () banked
 16641  003DCA  518E               	movf	i2___ftmul@f2& (0+255),w,b
 16642  003DCC  0100               	movlb	0	; () banked
 16643  003DCE  2795               	addwf	i2___ftmul@f3_as_product& (0+255),f,b
 16644  003DD0  0100               	movlb	0	; () banked
 16645  003DD2  518F               	movf	(i2___ftmul@f2+1)& (0+255),w,b
 16646  003DD4  0100               	movlb	0	; () banked
 16647  003DD6  2396               	addwfc	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16648  003DD8  0100               	movlb	0	; () banked
 16649  003DDA  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 16650  003DDC  0100               	movlb	0	; () banked
 16651  003DDE  2397               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16652  003DE0                     i2l6009:
 16653                           
 16654                           ; BSR set to: 0
 16655  003DE0  0100               	movlb	0	; () banked
 16656  003DE2  90D8               	bcf	status,0,c
 16657  003DE4  338D               	rrcf	(i2___ftmul@f1+2)& (0+255),f,b
 16658  003DE6  338C               	rrcf	(i2___ftmul@f1+1)& (0+255),f,b
 16659  003DE8  338B               	rrcf	i2___ftmul@f1& (0+255),f,b
 16660  003DEA  0100               	movlb	0	; () banked
 16661  003DEC  90D8               	bcf	status,0,c
 16662  003DEE  378E               	rlcf	i2___ftmul@f2& (0+255),f,b
 16663  003DF0  378F               	rlcf	(i2___ftmul@f2+1)& (0+255),f,b
 16664  003DF2  3790               	rlcf	(i2___ftmul@f2+2)& (0+255),f,b
 16665                           
 16666                           ; BSR set to: 0
 16667  003DF4  0100               	movlb	0	; () banked
 16668  003DF6  2F98               	decfsz	i2___ftmul@cntr& (0+255),f,b
 16669  003DF8  D7E4               	goto	i2l6005
 16670                           
 16671                           ; BSR set to: 0
 16672                           
 16673                           ; BSR set to: 0
 16674  003DFA  0E09               	movlw	9
 16675  003DFC  0100               	movlb	0	; () banked
 16676  003DFE  6F98               	movwf	i2___ftmul@cntr& (0+255),b
 16677  003E00                     i2l6015:
 16678                           
 16679                           ; BSR set to: 0
 16680  003E00  0100               	movlb	0	; () banked
 16681  003E02  A18B               	btfss	i2___ftmul@f1& (0+255),0,b
 16682  003E04  D00C               	goto	i2l6019
 16683                           
 16684                           ; BSR set to: 0
 16685  003E06  0100               	movlb	0	; () banked
 16686  003E08  518E               	movf	i2___ftmul@f2& (0+255),w,b
 16687  003E0A  0100               	movlb	0	; () banked
 16688  003E0C  2795               	addwf	i2___ftmul@f3_as_product& (0+255),f,b
 16689  003E0E  0100               	movlb	0	; () banked
 16690  003E10  518F               	movf	(i2___ftmul@f2+1)& (0+255),w,b
 16691  003E12  0100               	movlb	0	; () banked
 16692  003E14  2396               	addwfc	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16693  003E16  0100               	movlb	0	; () banked
 16694  003E18  5190               	movf	(i2___ftmul@f2+2)& (0+255),w,b
 16695  003E1A  0100               	movlb	0	; () banked
 16696  003E1C  2397               	addwfc	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16697  003E1E                     i2l6019:
 16698                           
 16699                           ; BSR set to: 0
 16700  003E1E  0100               	movlb	0	; () banked
 16701  003E20  90D8               	bcf	status,0,c
 16702  003E22  338D               	rrcf	(i2___ftmul@f1+2)& (0+255),f,b
 16703  003E24  338C               	rrcf	(i2___ftmul@f1+1)& (0+255),f,b
 16704  003E26  338B               	rrcf	i2___ftmul@f1& (0+255),f,b
 16705  003E28  0100               	movlb	0	; () banked
 16706  003E2A  90D8               	bcf	status,0,c
 16707  003E2C  3397               	rrcf	(i2___ftmul@f3_as_product+2)& (0+255),f,b
 16708  003E2E  3396               	rrcf	(i2___ftmul@f3_as_product+1)& (0+255),f,b
 16709  003E30  3395               	rrcf	i2___ftmul@f3_as_product& (0+255),f,b
 16710                           
 16711                           ; BSR set to: 0
 16712  003E32  0100               	movlb	0	; () banked
 16713  003E34  2F98               	decfsz	i2___ftmul@cntr& (0+255),f,b
 16714  003E36  D7E4               	goto	i2l6015
 16715                           
 16716                           ; BSR set to: 0
 16717                           
 16718                           ; BSR set to: 0
 16719  003E38  C095  F080         	movff	i2___ftmul@f3_as_product,i2___ftpack@arg
 16720  003E3C  C096  F081         	movff	i2___ftmul@f3_as_product+1,i2___ftpack@arg+1
 16721  003E40  C097  F082         	movff	i2___ftmul@f3_as_product+2,i2___ftpack@arg+2
 16722  003E44  C094  F083         	movff	i2___ftmul@exp,i2___ftpack@exp
 16723  003E48  C099  F084         	movff	i2___ftmul@sign,i2___ftpack@sign
 16724  003E4C  EC71  F002         	call	i2___ftpack	;wreg free
 16725  003E50  C080  F08B         	movff	?i2___ftpack,?i2___ftmul
 16726  003E54  C081  F08C         	movff	?i2___ftpack+1,?i2___ftmul+1
 16727  003E58  C082  F08D         	movff	?i2___ftpack+2,?i2___ftmul+2
 16728  003E5C  0012               	return	
 16729  003E5E                     __end_ofi2___ftmul:
 16730                           	opt stack 0
 16731                           pclatu	equ	0xFFB
 16732                           pclath	equ	0xFFA
 16733                           tblptru	equ	0xFF8
 16734                           tblptrh	equ	0xFF7
 16735                           tblptrl	equ	0xFF6
 16736                           tablat	equ	0xFF5
 16737                           prodh	equ	0xFF4
 16738                           prodl	equ	0xFF3
 16739                           intcon	equ	0xFF2
 16740                           intcon2	equ	0xFF1
 16741                           intcon3	equ	0xFF0
 16742                           postinc0	equ	0xFEE
 16743                           fsr0h	equ	0xFEA
 16744                           fsr0l	equ	0xFE9
 16745                           wreg	equ	0xFE8
 16746                           postdec1	equ	0xFE5
 16747                           fsr1h	equ	0xFE2
 16748                           fsr1l	equ	0xFE1
 16749                           bsr	equ	0xFE0
 16750                           indf2	equ	0xFDF
 16751                           postinc2	equ	0xFDE
 16752                           postdec2	equ	0xFDD
 16753                           plusw2	equ	0xFDB
 16754                           fsr2h	equ	0xFDA
 16755                           fsr2l	equ	0xFD9
 16756                           status	equ	0xFD8
 16757                           
 16758 ;; *************** function i2___ftpack *****************
 16759 ;; Defined at:
 16760 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.35\sources\common\float.c"
 16761 ;; Parameters:    Size  Location     Type
 16762 ;;  arg             3    0[BANK0 ] unsigned um
 16763 ;;  exp             1    3[BANK0 ] unsigned char 
 16764 ;;  sign            1    4[BANK0 ] unsigned char 
 16765 ;; Auto vars:     Size  Location     Type
 16766 ;;		None
 16767 ;; Return value:  Size  Location     Type
 16768 ;;                  3    0[BANK0 ] float 
 16769 ;; Registers used:
 16770 ;;		wreg, status,2, status,0
 16771 ;; Tracked objects:
 16772 ;;		On entry : 0/0
 16773 ;;		On exit  : 0/0
 16774 ;;		Unchanged: 0/0
 16775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 16776 ;;      Params:         0       5       0       0       0
 16777 ;;      Locals:         0       0       0       0       0
 16778 ;;      Temps:          0       3       0       0       0
 16779 ;;      Totals:         0       8       0       0       0
 16780 ;;Total ram usage:        8 bytes
 16781 ;; Hardware stack levels used:    1
 16782 ;; This function calls:
 16783 ;;		Nothing
 16784 ;; This function is called by:
 16785 ;;		i2___ftmul
 16786 ;;		i2___lwtoft
 16787 ;; This function uses a non-reentrant model
 16788 ;;
 16789                           
 16790                           	psect	text107
 16791  0004E2                     __ptext107:
 16792                           	opt stack 0
 16793  0004E2                     i2___ftpack:
 16794                           	opt stack 15
 16795                           
 16796                           ;incstack = 0
 16797  0004E2  0100               	movlb	0	; () banked
 16798  0004E4  5183               	movf	i2___ftpack@exp& (0+255),w,b
 16799  0004E6  0100               	movlb	0	; () banked
 16800  0004E8  B4D8               	btfsc	status,2,c
 16801  0004EA  D008               	goto	i2l5471
 16802                           
 16803                           ; BSR set to: 0
 16804  0004EC  0100               	movlb	0	; () banked
 16805  0004EE  5180               	movf	i2___ftpack@arg& (0+255),w,b
 16806  0004F0  0100               	movlb	0	; () banked
 16807  0004F2  1181               	iorwf	(i2___ftpack@arg+1)& (0+255),w,b
 16808  0004F4  0100               	movlb	0	; () banked
 16809  0004F6  1182               	iorwf	(i2___ftpack@arg+2)& (0+255),w,b
 16810  0004F8  A4D8               	btfss	status,2,c
 16811  0004FA  D011               	goto	i2l5477
 16812  0004FC                     i2l5471:
 16813                           
 16814                           ; BSR set to: 0
 16815  0004FC  0E00               	movlw	0
 16816  0004FE  0100               	movlb	0	; () banked
 16817  000500  6F80               	movwf	?i2___ftpack& (0+255),b
 16818  000502  0E00               	movlw	0
 16819  000504  0100               	movlb	0	; () banked
 16820  000506  6F81               	movwf	(?i2___ftpack+1)& (0+255),b
 16821  000508  0E00               	movlw	0
 16822  00050A  0100               	movlb	0	; () banked
 16823  00050C  6F82               	movwf	(?i2___ftpack+2)& (0+255),b
 16824                           
 16825                           ; BSR set to: 0
 16826  00050E  0012               	return	
 16827  000510                     i2l5475:
 16828                           
 16829                           ; BSR set to: 0
 16830  000510  0100               	movlb	0	; () banked
 16831  000512  2B83               	incf	i2___ftpack@exp& (0+255),f,b
 16832  000514  0100               	movlb	0	; () banked
 16833  000516  90D8               	bcf	status,0,c
 16834  000518  3382               	rrcf	(i2___ftpack@arg+2)& (0+255),f,b
 16835  00051A  3381               	rrcf	(i2___ftpack@arg+1)& (0+255),f,b
 16836  00051C  3380               	rrcf	i2___ftpack@arg& (0+255),f,b
 16837  00051E                     i2l5477:
 16838                           
 16839                           ; BSR set to: 0
 16840  00051E  0E00               	movlw	0
 16841  000520  0100               	movlb	0	; () banked
 16842  000522  1580               	andwf	i2___ftpack@arg& (0+255),w,b
 16843  000524  0100               	movlb	0	; () banked
 16844  000526  6F85               	movwf	??i2___ftpack& (0+255),b
 16845  000528  0E00               	movlw	0
 16846  00052A  0100               	movlb	0	; () banked
 16847  00052C  1581               	andwf	(i2___ftpack@arg+1)& (0+255),w,b
 16848  00052E  0100               	movlb	0	; () banked
 16849  000530  6F86               	movwf	(??i2___ftpack+1)& (0+255),b
 16850  000532  0EFE               	movlw	254
 16851  000534  0100               	movlb	0	; () banked
 16852  000536  1582               	andwf	(i2___ftpack@arg+2)& (0+255),w,b
 16853  000538  0100               	movlb	0	; () banked
 16854  00053A  6F87               	movwf	(??i2___ftpack+2)& (0+255),b
 16855  00053C  0100               	movlb	0	; () banked
 16856  00053E  5185               	movf	??i2___ftpack& (0+255),w,b
 16857  000540  0100               	movlb	0	; () banked
 16858  000542  1186               	iorwf	(??i2___ftpack+1)& (0+255),w,b
 16859  000544  0100               	movlb	0	; () banked
 16860  000546  1187               	iorwf	(??i2___ftpack+2)& (0+255),w,b
 16861  000548  B4D8               	btfsc	status,2,c
 16862  00054A  D011               	goto	i2l5483
 16863  00054C  D7E1               	goto	i2l5475
 16864  00054E                     i2l5479:
 16865                           
 16866                           ; BSR set to: 0
 16867  00054E  0100               	movlb	0	; () banked
 16868  000550  2B83               	incf	i2___ftpack@exp& (0+255),f,b
 16869                           
 16870                           ; BSR set to: 0
 16871  000552  0E01               	movlw	1
 16872  000554  0100               	movlb	0	; () banked
 16873  000556  2780               	addwf	i2___ftpack@arg& (0+255),f,b
 16874  000558  0E00               	movlw	0
 16875  00055A  0100               	movlb	0	; () banked
 16876  00055C  2381               	addwfc	(i2___ftpack@arg+1)& (0+255),f,b
 16877  00055E  0E00               	movlw	0
 16878  000560  0100               	movlb	0	; () banked
 16879  000562  2382               	addwfc	(i2___ftpack@arg+2)& (0+255),f,b
 16880  000564  0100               	movlb	0	; () banked
 16881  000566  90D8               	bcf	status,0,c
 16882  000568  3382               	rrcf	(i2___ftpack@arg+2)& (0+255),f,b
 16883  00056A  3381               	rrcf	(i2___ftpack@arg+1)& (0+255),f,b
 16884  00056C  3380               	rrcf	i2___ftpack@arg& (0+255),f,b
 16885  00056E                     i2l5483:
 16886                           
 16887                           ; BSR set to: 0
 16888  00056E  0E00               	movlw	0
 16889  000570  0100               	movlb	0	; () banked
 16890  000572  1580               	andwf	i2___ftpack@arg& (0+255),w,b
 16891  000574  0100               	movlb	0	; () banked
 16892  000576  6F85               	movwf	??i2___ftpack& (0+255),b
 16893  000578  0E00               	movlw	0
 16894  00057A  0100               	movlb	0	; () banked
 16895  00057C  1581               	andwf	(i2___ftpack@arg+1)& (0+255),w,b
 16896  00057E  0100               	movlb	0	; () banked
 16897  000580  6F86               	movwf	(??i2___ftpack+1)& (0+255),b
 16898  000582  0EFF               	movlw	255
 16899  000584  0100               	movlb	0	; () banked
 16900  000586  1582               	andwf	(i2___ftpack@arg+2)& (0+255),w,b
 16901  000588  0100               	movlb	0	; () banked
 16902  00058A  6F87               	movwf	(??i2___ftpack+2)& (0+255),b
 16903  00058C  0100               	movlb	0	; () banked
 16904  00058E  5185               	movf	??i2___ftpack& (0+255),w,b
 16905  000590  0100               	movlb	0	; () banked
 16906  000592  1186               	iorwf	(??i2___ftpack+1)& (0+255),w,b
 16907  000594  0100               	movlb	0	; () banked
 16908  000596  1187               	iorwf	(??i2___ftpack+2)& (0+255),w,b
 16909  000598  B4D8               	btfsc	status,2,c
 16910  00059A  D008               	goto	i2l5487
 16911  00059C  D7D8               	goto	i2l5479
 16912  00059E                     i2l5485:
 16913                           
 16914                           ; BSR set to: 0
 16915  00059E  0100               	movlb	0	; () banked
 16916  0005A0  0783               	decf	i2___ftpack@exp& (0+255),f,b
 16917  0005A2  0100               	movlb	0	; () banked
 16918  0005A4  90D8               	bcf	status,0,c
 16919  0005A6  3780               	rlcf	i2___ftpack@arg& (0+255),f,b
 16920  0005A8  3781               	rlcf	(i2___ftpack@arg+1)& (0+255),f,b
 16921  0005AA  3782               	rlcf	(i2___ftpack@arg+2)& (0+255),f,b
 16922  0005AC                     i2l5487:
 16923                           
 16924                           ; BSR set to: 0
 16925  0005AC  0100               	movlb	0	; () banked
 16926  0005AE  BF81               	btfsc	(i2___ftpack@arg+1)& (0+255),7,b
 16927  0005B0  D004               	goto	i2l1539
 16928                           
 16929                           ; BSR set to: 0
 16930  0005B2  0E02               	movlw	2
 16931  0005B4  0100               	movlb	0	; () banked
 16932  0005B6  6183               	cpfslt	i2___ftpack@exp& (0+255),b
 16933  0005B8  D7F2               	goto	i2l5485
 16934  0005BA                     i2l1539:
 16935                           
 16936                           ; BSR set to: 0
 16937  0005BA  0100               	movlb	0	; () banked
 16938  0005BC  B183               	btfsc	i2___ftpack@exp& (0+255),0,b
 16939  0005BE  D002               	goto	i2l5493
 16940                           
 16941                           ; BSR set to: 0
 16942  0005C0  0100               	movlb	0	; () banked
 16943  0005C2  9F81               	bcf	(i2___ftpack@arg+1)& (0+255),7,b
 16944  0005C4                     i2l5493:
 16945                           
 16946                           ; BSR set to: 0
 16947  0005C4  0100               	movlb	0	; () banked
 16948  0005C6  90D8               	bcf	status,0,c
 16949  0005C8  3383               	rrcf	i2___ftpack@exp& (0+255),f,b
 16950  0005CA  0100               	movlb	0	; () banked
 16951  0005CC  5183               	movf	i2___ftpack@exp& (0+255),w,b
 16952  0005CE  0100               	movlb	0	; () banked
 16953  0005D0  1382               	iorwf	(i2___ftpack@arg+2)& (0+255),f,b
 16954                           
 16955                           ; BSR set to: 0
 16956  0005D2  0100               	movlb	0	; () banked
 16957  0005D4  5184               	movf	i2___ftpack@sign& (0+255),w,b
 16958  0005D6  0100               	movlb	0	; () banked
 16959  0005D8  B4D8               	btfsc	status,2,c
 16960  0005DA  D002               	goto	i2l5499
 16961                           
 16962                           ; BSR set to: 0
 16963  0005DC  0100               	movlb	0	; () banked
 16964  0005DE  8F82               	bsf	(i2___ftpack@arg+2)& (0+255),7,b
 16965  0005E0                     i2l5499:
 16966                           
 16967                           ; BSR set to: 0
 16968  0005E0  C080  F080         	movff	i2___ftpack@arg,?i2___ftpack
 16969  0005E4  C081  F081         	movff	i2___ftpack@arg+1,?i2___ftpack+1
 16970  0005E8  C082  F082         	movff	i2___ftpack@arg+2,?i2___ftpack+2
 16971  0005EC  0012               	return	
 16972  0005EE                     __end_ofi2___ftpack:
 16973                           	opt stack 0
 16974                           pclatu	equ	0xFFB
 16975                           pclath	equ	0xFFA
 16976                           tblptru	equ	0xFF8
 16977                           tblptrh	equ	0xFF7
 16978                           tblptrl	equ	0xFF6
 16979                           tablat	equ	0xFF5
 16980                           prodh	equ	0xFF4
 16981                           prodl	equ	0xFF3
 16982                           intcon	equ	0xFF2
 16983                           intcon2	equ	0xFF1
 16984                           intcon3	equ	0xFF0
 16985                           postinc0	equ	0xFEE
 16986                           fsr0h	equ	0xFEA
 16987                           fsr0l	equ	0xFE9
 16988                           wreg	equ	0xFE8
 16989                           postdec1	equ	0xFE5
 16990                           fsr1h	equ	0xFE2
 16991                           fsr1l	equ	0xFE1
 16992                           bsr	equ	0xFE0
 16993                           indf2	equ	0xFDF
 16994                           postinc2	equ	0xFDE
 16995                           postdec2	equ	0xFDD
 16996                           plusw2	equ	0xFDB
 16997                           fsr2h	equ	0xFDA
 16998                           fsr2l	equ	0xFD9
 16999                           status	equ	0xFD8
 17000                           
 17001 ;; *************** function i2_RF_CalculateCodesize *****************
 17002 ;; Defined at:
 17003 ;;		line 251 in file "RF.c"
 17004 ;; Parameters:    Size  Location     Type
 17005 ;;		None
 17006 ;; Auto vars:     Size  Location     Type
 17007 ;;  RF_Calculate    1    0[BANK0 ] unsigned char 
 17008 ;; Return value:  Size  Location     Type
 17009 ;;                  1    wreg      unsigned char 
 17010 ;; Registers used:
 17011 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 17012 ;; Tracked objects:
 17013 ;;		On entry : 0/0
 17014 ;;		On exit  : 0/0
 17015 ;;		Unchanged: 0/0
 17016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17017 ;;      Params:         0       0       0       0       0
 17018 ;;      Locals:         0       1       0       0       0
 17019 ;;      Temps:          0       0       0       0       0
 17020 ;;      Totals:         0       1       0       0       0
 17021 ;;Total ram usage:        1 bytes
 17022 ;; Hardware stack levels used:    1
 17023 ;; This function calls:
 17024 ;;		Nothing
 17025 ;; This function is called by:
 17026 ;;		i2_RF_LoadCode
 17027 ;; This function uses a non-reentrant model
 17028 ;;
 17029                           
 17030                           	psect	text108
 17031  0016A2                     __ptext108:
 17032                           	opt stack 0
 17033  0016A2                     i2_RF_CalculateCodesize:
 17034                           	opt stack 15
 17035                           
 17036                           ;RF.c: 253: unsigned char i;
 17037                           ;RF.c: 255: for(i=0; i<128;i++)
 17038                           
 17039                           ; BSR set to: 0
 17040                           ;incstack = 0
 17041  0016A2  0E00               	movlw	0
 17042  0016A4  0100               	movlb	0	; () banked
 17043  0016A6  6F80               	movwf	i2RF_CalculateCodesize@i& (0+255),b
 17044  0016A8                     i2l5775:
 17045                           
 17046                           ; BSR set to: 0
 17047  0016A8  0E7F               	movlw	127
 17048  0016AA  0100               	movlb	0	; () banked
 17049  0016AC  6580               	cpfsgt	i2RF_CalculateCodesize@i& (0+255),b
 17050  0016AE  D001               	goto	i2l5779
 17051  0016B0  D018               	goto	i2l5789
 17052  0016B2                     i2l5779:
 17053                           
 17054                           ; BSR set to: 0
 17055                           ;RF.c: 256: {
 17056                           ;RF.c: 257: if(RF_SavedTiming[i] == 0)
 17057  0016B2  0100               	movlb	0	; () banked
 17058  0016B4  5180               	movf	i2RF_CalculateCodesize@i& (0+255),w,b
 17059  0016B6  0D02               	mullw	2
 17060  0016B8  0E00               	movlw	0
 17061  0016BA  24F3               	addwf	prodl,w,c
 17062  0016BC  6EF6               	movwf	tblptrl,c
 17063  0016BE  0E25               	movlw	37
 17064  0016C0  20F4               	addwfc	prodh,w,c
 17065  0016C2  6EF7               	movwf	tblptrh,c
 17066  0016C4  6AF8               	clrf	tblptru,c
 17067  0016C6  0E00               	movlw	0
 17068  0016C8  22F8               	addwfc	tblptru,f,c
 17069  0016CA  0009               	tblrd		*+
 17070  0016CC  50F5               	movf	tablat,w,c
 17071  0016CE  0009               	tblrd		*+
 17072  0016D0  10F5               	iorwf	tablat,w,c
 17073  0016D2  A4D8               	btfss	status,2,c
 17074  0016D4  D003               	goto	i2l5785
 17075                           
 17076                           ; BSR set to: 0
 17077                           ;RF.c: 258: {
 17078                           ;RF.c: 259: return i;
 17079  0016D6  0100               	movlb	0	; () banked
 17080  0016D8  5180               	movf	i2RF_CalculateCodesize@i& (0+255),w,b
 17081                           
 17082                           ; BSR set to: 0
 17083  0016DA  0012               	return	
 17084  0016DC                     i2l5785:
 17085                           
 17086                           ; BSR set to: 0
 17087  0016DC  0100               	movlb	0	; () banked
 17088  0016DE  2B80               	incf	i2RF_CalculateCodesize@i& (0+255),f,b
 17089  0016E0  D7E3               	goto	i2l5775
 17090  0016E2                     i2l5789:
 17091                           
 17092                           ; BSR set to: 0
 17093                           ;RF.c: 260: }
 17094                           ;RF.c: 261: }
 17095                           ;RF.c: 262: return 128;
 17096  0016E2  0E80               	movlw	128
 17097  0016E4  0012               	return	
 17098  0016E6                     __end_ofi2_RF_CalculateCodesize:
 17099                           	opt stack 0
 17100                           pclatu	equ	0xFFB
 17101                           pclath	equ	0xFFA
 17102                           tblptru	equ	0xFF8
 17103                           tblptrh	equ	0xFF7
 17104                           tblptrl	equ	0xFF6
 17105                           tablat	equ	0xFF5
 17106                           prodh	equ	0xFF4
 17107                           prodl	equ	0xFF3
 17108                           intcon	equ	0xFF2
 17109                           intcon2	equ	0xFF1
 17110                           intcon3	equ	0xFF0
 17111                           postinc0	equ	0xFEE
 17112                           fsr0h	equ	0xFEA
 17113                           fsr0l	equ	0xFE9
 17114                           wreg	equ	0xFE8
 17115                           postdec1	equ	0xFE5
 17116                           fsr1h	equ	0xFE2
 17117                           fsr1l	equ	0xFE1
 17118                           bsr	equ	0xFE0
 17119                           indf2	equ	0xFDF
 17120                           postinc2	equ	0xFDE
 17121                           postdec2	equ	0xFDD
 17122                           plusw2	equ	0xFDB
 17123                           fsr2h	equ	0xFDA
 17124                           fsr2l	equ	0xFD9
 17125                           status	equ	0xFD8
 17126                           
 17127 ;; *************** function i2_FSH_Write_IR_RF *****************
 17128 ;; Defined at:
 17129 ;;		line 210 in file "FLASH.c"
 17130 ;; Parameters:    Size  Location     Type
 17131 ;;		None
 17132 ;; Auto vars:     Size  Location     Type
 17133 ;;  FSH_Write_IR    2   29[BANK0 ] unsigned int 
 17134 ;;  FSH_Write_IR    2   25[BANK0 ] unsigned int 
 17135 ;;  FSH_Write_IR    1   31[BANK0 ] unsigned char 
 17136 ;;  FSH_Write_IR    1   28[BANK0 ] unsigned char 
 17137 ;;  FSH_Write_IR    1   27[BANK0 ] unsigned char 
 17138 ;;  FSH_Write_IR    1   24[BANK0 ] unsigned char 
 17139 ;;  FSH_Write_IR    1   23[BANK0 ] unsigned char 
 17140 ;; Return value:  Size  Location     Type
 17141 ;;                  1    wreg      unsigned char 
 17142 ;; Registers used:
 17143 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17144 ;; Tracked objects:
 17145 ;;		On entry : 0/0
 17146 ;;		On exit  : 0/0
 17147 ;;		Unchanged: 0/0
 17148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 17149 ;;      Params:         0       0       0       0       0
 17150 ;;      Locals:         0       9       0       0       0
 17151 ;;      Temps:          0       6       0       0       0
 17152 ;;      Totals:         0      15       0       0       0
 17153 ;;Total ram usage:       15 bytes
 17154 ;; Hardware stack levels used:    1
 17155 ;; Hardware stack levels required when called:    3
 17156 ;; This function calls:
 17157 ;;		i2_FSH_AddressToBlock
 17158 ;;		i2_FSH_EraseBlock
 17159 ;;		i2_FSH_VerifyWriteIntArray
 17160 ;;		i2_FSH_WriteIntArray
 17161 ;;		i2_IR_ResetData
 17162 ;;		i2_MSC_BufferCopyIntConst
 17163 ;;		i2_RF_ResetData
 17164 ;; This function is called by:
 17165 ;;		_RF_CheckCode
 17166 ;; This function uses a non-reentrant model
 17167 ;;
 17168                           
 17169                           	psect	text109
 17170  002844                     __ptext109:
 17171                           	opt stack 0
 17172  002844                     i2_FSH_Write_IR_RF:
 17173                           	opt stack 13
 17174                           
 17175                           ;FLASH.c: 212: unsigned int i;
 17176                           ;FLASH.c: 213: unsigned char j;
 17177                           ;FLASH.c: 214: unsigned char WriteTries;
 17178                           ;FLASH.c: 215: unsigned char status = 0;
 17179                           
 17180                           ; BSR set to: 0
 17181                           ;incstack = 0
 17182  002844  0E00               	movlw	0
 17183  002846  0100               	movlb	0	; () banked
 17184  002848  6F9C               	movwf	i2FSH_Write_IR_RF@status& (0+255),b
 17185                           
 17186                           ;FLASH.c: 216: unsigned int FlashWasteindex = 0;
 17187  00284A  0E00               	movlw	0
 17188  00284C  0100               	movlb	0	; () banked
 17189  00284E  6F9A               	movwf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),b
 17190  002850  0E00               	movlw	0
 17191  002852  6F99               	movwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),b
 17192                           
 17193                           ; BSR set to: 0
 17194                           ;FLASH.c: 217: unsigned char highint = INTCONbits.GIE;
 17195  002854  0E00               	movlw	0
 17196  002856  BEF2               	btfsc	intcon,7,c	;volatile
 17197  002858  0E01               	movlw	1
 17198  00285A  0100               	movlb	0	; () banked
 17199  00285C  6F97               	movwf	i2FSH_Write_IR_RF@highint& (0+255),b
 17200                           
 17201                           ; BSR set to: 0
 17202                           ;FLASH.c: 218: unsigned char lowint = INTCONbits.PEIE;
 17203  00285E  0E00               	movlw	0
 17204  002860  BCF2               	btfsc	intcon,6,c	;volatile
 17205  002862  0E01               	movlw	1
 17206  002864  0100               	movlb	0	; () banked
 17207  002866  6F98               	movwf	i2FSH_Write_IR_RF@lowint& (0+255),b
 17208                           
 17209                           ; BSR set to: 0
 17210                           ;FLASH.c: 220: INTCONbits.GIE = 0;
 17211  002868  9EF2               	bcf	intcon,7,c	;volatile
 17212                           
 17213                           ; BSR set to: 0
 17214                           ;FLASH.c: 221: INTCONbits.PEIE = 0;
 17215  00286A  9CF2               	bcf	intcon,6,c	;volatile
 17216                           
 17217                           ; BSR set to: 0
 17218                           ;FLASH.c: 223: if(IR_Saved == 90 && RF_Saved == 90)
 17219  00286C  0E5A               	movlw	90
 17220  00286E  0100               	movlb	0	; () banked
 17221  002870  19CD               	xorwf	_IR_Saved& (0+255),w,b
 17222  002872  A4D8               	btfss	status,2,c
 17223  002874  D005               	goto	i2l6691
 17224                           
 17225                           ; BSR set to: 0
 17226  002876  0E5A               	movlw	90
 17227  002878  0100               	movlb	0	; () banked
 17228  00287A  19CE               	xorwf	_RF_Saved& (0+255),w,b
 17229  00287C  B4D8               	btfsc	status,2,c
 17230  00287E  D00A               	goto	i2l6695
 17231  002880                     i2l6691:
 17232                           
 17233                           ; BSR set to: 0
 17234                           ;FLASH.c: 230: else if(IR_Saved != 90 && RF_Saved != 90)
 17235  002880  0E5A               	movlw	90
 17236  002882  0100               	movlb	0	; () banked
 17237  002884  19CD               	xorwf	_IR_Saved& (0+255),w,b
 17238  002886  B4D8               	btfsc	status,2,c
 17239  002888  D00C               	goto	i2l6697
 17240                           
 17241                           ; BSR set to: 0
 17242  00288A  0E5A               	movlw	90
 17243  00288C  0100               	movlb	0	; () banked
 17244  00288E  19CE               	xorwf	_RF_Saved& (0+255),w,b
 17245  002890  B4D8               	btfsc	status,2,c
 17246  002892  D007               	goto	i2l6697
 17247  002894                     i2l6695:
 17248                           
 17249                           ; BSR set to: 0
 17250                           ;FLASH.c: 231: {
 17251                           ;FLASH.c: 233: IR_Saved = 91;
 17252  002894  0E5B               	movlw	91
 17253  002896  0100               	movlb	0	; () banked
 17254  002898  6FCD               	movwf	_IR_Saved& (0+255),b
 17255                           
 17256                           ;FLASH.c: 234: RF_Saved = 91;
 17257  00289A  0E5B               	movlw	91
 17258  00289C  0100               	movlb	0	; () banked
 17259  00289E  6FCE               	movwf	_RF_Saved& (0+255),b
 17260                           
 17261                           ;FLASH.c: 235: goto END;
 17262  0028A0  D269               	goto	i2l1205
 17263  0028A2                     i2l6697:
 17264                           
 17265                           ; BSR set to: 0
 17266                           ;FLASH.c: 236: }
 17267                           ;FLASH.c: 238: if(IR_Saved == 90)
 17268  0028A2  0E5A               	movlw	90
 17269  0028A4  0100               	movlb	0	; () banked
 17270  0028A6  19CD               	xorwf	_IR_Saved& (0+255),w,b
 17271  0028A8  A4D8               	btfss	status,2,c
 17272  0028AA  D01E               	goto	i2l6703
 17273                           
 17274                           ; BSR set to: 0
 17275                           ;FLASH.c: 239: {
 17276                           ;FLASH.c: 241: RF_ResetData();
 17277  0028AC  ECA8  F00F         	call	i2_RF_ResetData	;wreg free
 17278                           
 17279                           ;FLASH.c: 242: MSC_BufferCopyIntConst(&RF_SavedTiming,&RF_DataTiming, 128, 0);
 17280  0028B0  0E00               	movlw	0
 17281  0028B2  0100               	movlb	0	; () banked
 17282  0028B4  6F86               	movwf	i2MSC_BufferCopyIntConst@from& (0+255),b
 17283  0028B6  0E25               	movlw	37
 17284  0028B8  0100               	movlb	0	; () banked
 17285  0028BA  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 17286  0028BC  0E00               	movlw	0
 17287  0028BE  0100               	movlb	0	; () banked
 17288  0028C0  6F88               	movwf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 17289  0028C2  0E00               	movlw	low _RF_DataTiming
 17290  0028C4  0100               	movlb	0	; () banked
 17291  0028C6  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 17292  0028C8  0E03               	movlw	high _RF_DataTiming
 17293  0028CA  0100               	movlb	0	; () banked
 17294  0028CC  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 17295  0028CE  0E00               	movlw	0
 17296  0028D0  0100               	movlb	0	; () banked
 17297  0028D2  6F8C               	movwf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 17298  0028D4  0E80               	movlw	128
 17299  0028D6  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 17300  0028D8  0E00               	movlw	0
 17301  0028DA  0100               	movlb	0	; () banked
 17302  0028DC  6F8E               	movwf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 17303  0028DE  0E00               	movlw	0
 17304  0028E0  6F8D               	movwf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 17305  0028E2  EC4E  F007         	call	i2_MSC_BufferCopyIntConst	;wreg free
 17306                           
 17307                           ;FLASH.c: 243: }
 17308  0028E6  D01D               	goto	i2l6707
 17309  0028E8                     i2l6703:
 17310                           
 17311                           ;FLASH.c: 244: else
 17312                           ;FLASH.c: 245: {
 17313                           ;FLASH.c: 247: IR_ResetData();
 17314  0028E8  ECAF  F00F         	call	i2_IR_ResetData	;wreg free
 17315                           
 17316                           ;FLASH.c: 248: MSC_BufferCopyIntConst(&IR_SavedTiming,&IR_DataTiming, 128, 0);
 17317  0028EC  0E00               	movlw	0
 17318  0028EE  0100               	movlb	0	; () banked
 17319  0028F0  6F86               	movwf	i2MSC_BufferCopyIntConst@from& (0+255),b
 17320  0028F2  0E24               	movlw	36
 17321  0028F4  0100               	movlb	0	; () banked
 17322  0028F6  6F87               	movwf	(i2MSC_BufferCopyIntConst@from+1)& (0+255),b
 17323  0028F8  0E00               	movlw	0
 17324  0028FA  0100               	movlb	0	; () banked
 17325  0028FC  6F88               	movwf	(i2MSC_BufferCopyIntConst@from+2)& (0+255),b
 17326  0028FE  0E00               	movlw	low _IR_DataTiming
 17327  002900  0100               	movlb	0	; () banked
 17328  002902  6F89               	movwf	i2MSC_BufferCopyIntConst@to& (0+255),b
 17329  002904  0E02               	movlw	high _IR_DataTiming
 17330  002906  0100               	movlb	0	; () banked
 17331  002908  6F8A               	movwf	(i2MSC_BufferCopyIntConst@to+1)& (0+255),b
 17332  00290A  0E00               	movlw	0
 17333  00290C  0100               	movlb	0	; () banked
 17334  00290E  6F8C               	movwf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),b
 17335  002910  0E80               	movlw	128
 17336  002912  6F8B               	movwf	i2MSC_BufferCopyIntConst@count& (0+255),b
 17337  002914  0E00               	movlw	0
 17338  002916  0100               	movlb	0	; () banked
 17339  002918  6F8E               	movwf	(i2MSC_BufferCopyIntConst@shift+1)& (0+255),b
 17340  00291A  0E00               	movlw	0
 17341  00291C  6F8D               	movwf	i2MSC_BufferCopyIntConst@shift& (0+255),b
 17342  00291E  EC4E  F007         	call	i2_MSC_BufferCopyIntConst	;wreg free
 17343  002922                     i2l6707:
 17344                           
 17345                           ;FLASH.c: 249: }
 17346                           ;FLASH.c: 251: FSH_EraseBlock(&IR_SavedTiming);
 17347  002922  0E00               	movlw	0
 17348  002924  0100               	movlb	0	; () banked
 17349  002926  6F84               	movwf	i2FSH_EraseBlock@Address& (0+255),b
 17350  002928  0E24               	movlw	36
 17351  00292A  6F85               	movwf	(i2FSH_EraseBlock@Address+1)& (0+255),b
 17352  00292C  0E00               	movlw	0
 17353  00292E  6F86               	movwf	(i2FSH_EraseBlock@Address+2)& (0+255),b
 17354  002930  0E00               	movlw	0
 17355  002932  6F87               	movwf	(i2FSH_EraseBlock@Address+3)& (0+255),b
 17356  002934  ECF5  F009         	call	i2_FSH_EraseBlock	;wreg free
 17357                           
 17358                           ;FLASH.c: 256: WriteTries = 1;
 17359  002938  0E01               	movlw	1
 17360  00293A  0100               	movlb	0	; () banked
 17361  00293C  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17362  00293E                     i2l6711:
 17363                           
 17364                           ; BSR set to: 0
 17365                           ;FLASH.c: 261: FSH_WriteIntArray(&IR_SavedTiming[0], &IR_DataTiming[0]);
 17366  00293E  0E00               	movlw	0
 17367  002940  0100               	movlb	0	; () banked
 17368  002942  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17369  002944  0E24               	movlw	36
 17370  002946  0100               	movlb	0	; () banked
 17371  002948  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17372  00294A  0E00               	movlw	0
 17373  00294C  0100               	movlb	0	; () banked
 17374  00294E  6F86               	movwf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17375  002950  0E00               	movlw	low _IR_DataTiming
 17376  002952  0100               	movlb	0	; () banked
 17377  002954  6F87               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17378  002956  0E02               	movlw	high _IR_DataTiming
 17379  002958  0100               	movlb	0	; () banked
 17380  00295A  6F88               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17381  00295C  EC57  F008         	call	i2_FSH_WriteIntArray	;wreg free
 17382                           
 17383                           ;FLASH.c: 264: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[0],&IR_DataTiming[0]))
 17384  002960  0E00               	movlw	0
 17385  002962  0100               	movlb	0	; () banked
 17386  002964  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17387  002966  0E24               	movlw	36
 17388  002968  0100               	movlb	0	; () banked
 17389  00296A  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17390  00296C  0E00               	movlw	0
 17391  00296E  0100               	movlb	0	; () banked
 17392  002970  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17393  002972  0E00               	movlw	low _IR_DataTiming
 17394  002974  0100               	movlb	0	; () banked
 17395  002976  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17396  002978  0E02               	movlw	high _IR_DataTiming
 17397  00297A  0100               	movlb	0	; () banked
 17398  00297C  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17399  00297E  ECA8  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17400  002982  0900               	iorlw	0
 17401  002984  A4D8               	btfss	status,2,c
 17402  002986  D007               	goto	i2l6723
 17403                           
 17404                           ;FLASH.c: 265: {
 17405                           ;FLASH.c: 266: WriteTries++;
 17406  002988  0100               	movlb	0	; () banked
 17407  00298A  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17408                           
 17409                           ; BSR set to: 0
 17410                           ;FLASH.c: 267: if(WriteTries > 10)
 17411  00298C  0E0A               	movlw	10
 17412  00298E  0100               	movlb	0	; () banked
 17413  002990  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17414  002992  D7D5               	goto	i2l6711
 17415  002994  D1E0               	goto	i2l6857
 17416  002996                     i2l6723:
 17417                           
 17418                           ;FLASH.c: 275: }
 17419                           ;FLASH.c: 276: }
 17420                           ;FLASH.c: 279: WriteTries = 1;
 17421  002996  0E01               	movlw	1
 17422  002998  0100               	movlb	0	; () banked
 17423  00299A  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17424  00299C                     i2l6725:
 17425                           
 17426                           ; BSR set to: 0
 17427                           ;FLASH.c: 284: FSH_WriteIntArray(&IR_SavedTiming[32], &IR_DataTiming[32]);
 17428  00299C  0E40               	movlw	64
 17429  00299E  0100               	movlb	0	; () banked
 17430  0029A0  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17431  0029A2  0E24               	movlw	36
 17432  0029A4  0100               	movlb	0	; () banked
 17433  0029A6  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17434  0029A8  0E00               	movlw	0
 17435  0029AA  0100               	movlb	0	; () banked
 17436  0029AC  6F86               	movwf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17437  0029AE  0E40               	movlw	low (_IR_DataTiming+64)
 17438  0029B0  0100               	movlb	0	; () banked
 17439  0029B2  6F87               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17440  0029B4  0E02               	movlw	high (_IR_DataTiming+64)
 17441  0029B6  0100               	movlb	0	; () banked
 17442  0029B8  6F88               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17443  0029BA  EC57  F008         	call	i2_FSH_WriteIntArray	;wreg free
 17444                           
 17445                           ;FLASH.c: 287: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[32],&IR_DataTiming[32]))
 17446  0029BE  0E40               	movlw	64
 17447  0029C0  0100               	movlb	0	; () banked
 17448  0029C2  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17449  0029C4  0E24               	movlw	36
 17450  0029C6  0100               	movlb	0	; () banked
 17451  0029C8  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17452  0029CA  0E00               	movlw	0
 17453  0029CC  0100               	movlb	0	; () banked
 17454  0029CE  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17455  0029D0  0E40               	movlw	low (_IR_DataTiming+64)
 17456  0029D2  0100               	movlb	0	; () banked
 17457  0029D4  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17458  0029D6  0E02               	movlw	high (_IR_DataTiming+64)
 17459  0029D8  0100               	movlb	0	; () banked
 17460  0029DA  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17461  0029DC  ECA8  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17462  0029E0  0900               	iorlw	0
 17463  0029E2  A4D8               	btfss	status,2,c
 17464  0029E4  D007               	goto	i2l6737
 17465                           
 17466                           ;FLASH.c: 288: {
 17467                           ;FLASH.c: 289: WriteTries++;
 17468  0029E6  0100               	movlb	0	; () banked
 17469  0029E8  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17470                           
 17471                           ; BSR set to: 0
 17472                           ;FLASH.c: 290: if(WriteTries > 10)
 17473  0029EA  0E0A               	movlw	10
 17474  0029EC  0100               	movlb	0	; () banked
 17475  0029EE  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17476  0029F0  D7D5               	goto	i2l6725
 17477  0029F2  D1B1               	goto	i2l6857
 17478  0029F4                     i2l6737:
 17479                           
 17480                           ;FLASH.c: 298: }
 17481                           ;FLASH.c: 299: }
 17482                           ;FLASH.c: 302: WriteTries = 1;
 17483  0029F4  0E01               	movlw	1
 17484  0029F6  0100               	movlb	0	; () banked
 17485  0029F8  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17486  0029FA                     i2l6739:
 17487                           
 17488                           ; BSR set to: 0
 17489                           ;FLASH.c: 307: FSH_WriteIntArray(&IR_SavedTiming[64], &IR_DataTiming[64]);
 17490  0029FA  0E80               	movlw	128
 17491  0029FC  0100               	movlb	0	; () banked
 17492  0029FE  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17493  002A00  0E24               	movlw	36
 17494  002A02  0100               	movlb	0	; () banked
 17495  002A04  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17496  002A06  0E00               	movlw	0
 17497  002A08  0100               	movlb	0	; () banked
 17498  002A0A  6F86               	movwf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17499  002A0C  0E80               	movlw	low (_IR_DataTiming+128)
 17500  002A0E  0100               	movlb	0	; () banked
 17501  002A10  6F87               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17502  002A12  0E02               	movlw	high (_IR_DataTiming+128)
 17503  002A14  0100               	movlb	0	; () banked
 17504  002A16  6F88               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17505  002A18  EC57  F008         	call	i2_FSH_WriteIntArray	;wreg free
 17506                           
 17507                           ;FLASH.c: 310: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[64],&IR_DataTiming[64]))
 17508  002A1C  0E80               	movlw	128
 17509  002A1E  0100               	movlb	0	; () banked
 17510  002A20  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17511  002A22  0E24               	movlw	36
 17512  002A24  0100               	movlb	0	; () banked
 17513  002A26  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17514  002A28  0E00               	movlw	0
 17515  002A2A  0100               	movlb	0	; () banked
 17516  002A2C  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17517  002A2E  0E80               	movlw	low (_IR_DataTiming+128)
 17518  002A30  0100               	movlb	0	; () banked
 17519  002A32  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17520  002A34  0E02               	movlw	high (_IR_DataTiming+128)
 17521  002A36  0100               	movlb	0	; () banked
 17522  002A38  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17523  002A3A  ECA8  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17524  002A3E  0900               	iorlw	0
 17525  002A40  A4D8               	btfss	status,2,c
 17526  002A42  D007               	goto	i2l6751
 17527                           
 17528                           ;FLASH.c: 311: {
 17529                           ;FLASH.c: 312: WriteTries++;
 17530  002A44  0100               	movlb	0	; () banked
 17531  002A46  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17532                           
 17533                           ; BSR set to: 0
 17534                           ;FLASH.c: 313: if(WriteTries > 10)
 17535  002A48  0E0A               	movlw	10
 17536  002A4A  0100               	movlb	0	; () banked
 17537  002A4C  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17538  002A4E  D7D5               	goto	i2l6739
 17539  002A50  D182               	goto	i2l6857
 17540  002A52                     i2l6751:
 17541                           
 17542                           ;FLASH.c: 321: }
 17543                           ;FLASH.c: 322: }
 17544                           ;FLASH.c: 325: WriteTries = 1;
 17545  002A52  0E01               	movlw	1
 17546  002A54  0100               	movlb	0	; () banked
 17547  002A56  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17548  002A58                     i2l6753:
 17549                           
 17550                           ; BSR set to: 0
 17551                           ;FLASH.c: 330: FSH_WriteIntArray(&IR_SavedTiming[96], &IR_DataTiming[96]);
 17552  002A58  0EC0               	movlw	192
 17553  002A5A  0100               	movlb	0	; () banked
 17554  002A5C  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17555  002A5E  0E24               	movlw	36
 17556  002A60  0100               	movlb	0	; () banked
 17557  002A62  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17558  002A64  0E00               	movlw	0
 17559  002A66  0100               	movlb	0	; () banked
 17560  002A68  6F86               	movwf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17561  002A6A  0EC0               	movlw	low (_IR_DataTiming+192)
 17562  002A6C  0100               	movlb	0	; () banked
 17563  002A6E  6F87               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17564  002A70  0E02               	movlw	high (_IR_DataTiming+192)
 17565  002A72  0100               	movlb	0	; () banked
 17566  002A74  6F88               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17567  002A76  EC57  F008         	call	i2_FSH_WriteIntArray	;wreg free
 17568                           
 17569                           ;FLASH.c: 333: if(!FSH_VerifyWriteIntArray(&IR_SavedTiming[96],&IR_DataTiming[96]))
 17570  002A7A  0EC0               	movlw	192
 17571  002A7C  0100               	movlb	0	; () banked
 17572  002A7E  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17573  002A80  0E24               	movlw	36
 17574  002A82  0100               	movlb	0	; () banked
 17575  002A84  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17576  002A86  0E00               	movlw	0
 17577  002A88  0100               	movlb	0	; () banked
 17578  002A8A  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17579  002A8C  0EC0               	movlw	low (_IR_DataTiming+192)
 17580  002A8E  0100               	movlb	0	; () banked
 17581  002A90  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17582  002A92  0E02               	movlw	high (_IR_DataTiming+192)
 17583  002A94  0100               	movlb	0	; () banked
 17584  002A96  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17585  002A98  ECA8  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17586  002A9C  0900               	iorlw	0
 17587  002A9E  A4D8               	btfss	status,2,c
 17588  002AA0  D007               	goto	i2l6765
 17589                           
 17590                           ;FLASH.c: 334: {
 17591                           ;FLASH.c: 335: WriteTries++;
 17592  002AA2  0100               	movlb	0	; () banked
 17593  002AA4  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17594                           
 17595                           ; BSR set to: 0
 17596                           ;FLASH.c: 336: if(WriteTries > 10)
 17597  002AA6  0E0A               	movlw	10
 17598  002AA8  0100               	movlb	0	; () banked
 17599  002AAA  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17600  002AAC  D7D5               	goto	i2l6753
 17601  002AAE  D153               	goto	i2l6857
 17602  002AB0                     i2l6765:
 17603                           
 17604                           ;FLASH.c: 344: }
 17605                           ;FLASH.c: 345: }
 17606                           ;FLASH.c: 348: WriteTries = 1;
 17607  002AB0  0E01               	movlw	1
 17608  002AB2  0100               	movlb	0	; () banked
 17609  002AB4  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17610  002AB6                     i2l6767:
 17611                           
 17612                           ; BSR set to: 0
 17613                           ;FLASH.c: 353: FSH_WriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]);
 17614  002AB6  0E00               	movlw	0
 17615  002AB8  0100               	movlb	0	; () banked
 17616  002ABA  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17617  002ABC  0E25               	movlw	37
 17618  002ABE  0100               	movlb	0	; () banked
 17619  002AC0  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17620  002AC2  0E00               	movlw	0
 17621  002AC4  0100               	movlb	0	; () banked
 17622  002AC6  6F86               	movwf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17623  002AC8  0E00               	movlw	low _RF_DataTiming
 17624  002ACA  0100               	movlb	0	; () banked
 17625  002ACC  6F87               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17626  002ACE  0E03               	movlw	high _RF_DataTiming
 17627  002AD0  0100               	movlb	0	; () banked
 17628  002AD2  6F88               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17629  002AD4  EC57  F008         	call	i2_FSH_WriteIntArray	;wreg free
 17630                           
 17631                           ;FLASH.c: 356: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[0],&RF_DataTiming[0]))
 17632  002AD8  0E00               	movlw	0
 17633  002ADA  0100               	movlb	0	; () banked
 17634  002ADC  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17635  002ADE  0E25               	movlw	37
 17636  002AE0  0100               	movlb	0	; () banked
 17637  002AE2  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17638  002AE4  0E00               	movlw	0
 17639  002AE6  0100               	movlb	0	; () banked
 17640  002AE8  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17641  002AEA  0E00               	movlw	low _RF_DataTiming
 17642  002AEC  0100               	movlb	0	; () banked
 17643  002AEE  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17644  002AF0  0E03               	movlw	high _RF_DataTiming
 17645  002AF2  0100               	movlb	0	; () banked
 17646  002AF4  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17647  002AF6  ECA8  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17648  002AFA  0900               	iorlw	0
 17649  002AFC  A4D8               	btfss	status,2,c
 17650  002AFE  D007               	goto	i2l6779
 17651                           
 17652                           ;FLASH.c: 357: {
 17653                           ;FLASH.c: 358: WriteTries++;
 17654  002B00  0100               	movlb	0	; () banked
 17655  002B02  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17656                           
 17657                           ; BSR set to: 0
 17658                           ;FLASH.c: 359: if(WriteTries > 10)
 17659  002B04  0E0A               	movlw	10
 17660  002B06  0100               	movlb	0	; () banked
 17661  002B08  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17662  002B0A  D7D5               	goto	i2l6767
 17663  002B0C  D124               	goto	i2l6857
 17664  002B0E                     i2l6779:
 17665                           
 17666                           ;FLASH.c: 367: }
 17667                           ;FLASH.c: 368: }
 17668                           ;FLASH.c: 371: WriteTries = 1;
 17669  002B0E  0E01               	movlw	1
 17670  002B10  0100               	movlb	0	; () banked
 17671  002B12  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17672  002B14                     i2l6781:
 17673                           
 17674                           ; BSR set to: 0
 17675                           ;FLASH.c: 376: FSH_WriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]);
 17676  002B14  0E40               	movlw	64
 17677  002B16  0100               	movlb	0	; () banked
 17678  002B18  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17679  002B1A  0E25               	movlw	37
 17680  002B1C  0100               	movlb	0	; () banked
 17681  002B1E  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17682  002B20  0E00               	movlw	0
 17683  002B22  0100               	movlb	0	; () banked
 17684  002B24  6F86               	movwf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17685  002B26  0E40               	movlw	low (_RF_DataTiming+64)
 17686  002B28  0100               	movlb	0	; () banked
 17687  002B2A  6F87               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17688  002B2C  0E03               	movlw	high (_RF_DataTiming+64)
 17689  002B2E  0100               	movlb	0	; () banked
 17690  002B30  6F88               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17691  002B32  EC57  F008         	call	i2_FSH_WriteIntArray	;wreg free
 17692                           
 17693                           ;FLASH.c: 379: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[32],&RF_DataTiming[32]))
 17694  002B36  0E40               	movlw	64
 17695  002B38  0100               	movlb	0	; () banked
 17696  002B3A  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17697  002B3C  0E25               	movlw	37
 17698  002B3E  0100               	movlb	0	; () banked
 17699  002B40  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17700  002B42  0E00               	movlw	0
 17701  002B44  0100               	movlb	0	; () banked
 17702  002B46  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17703  002B48  0E40               	movlw	low (_RF_DataTiming+64)
 17704  002B4A  0100               	movlb	0	; () banked
 17705  002B4C  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17706  002B4E  0E03               	movlw	high (_RF_DataTiming+64)
 17707  002B50  0100               	movlb	0	; () banked
 17708  002B52  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17709  002B54  ECA8  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17710  002B58  0900               	iorlw	0
 17711  002B5A  A4D8               	btfss	status,2,c
 17712  002B5C  D007               	goto	i2l6793
 17713                           
 17714                           ;FLASH.c: 380: {
 17715                           ;FLASH.c: 381: WriteTries++;
 17716  002B5E  0100               	movlb	0	; () banked
 17717  002B60  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17718                           
 17719                           ; BSR set to: 0
 17720                           ;FLASH.c: 382: if(WriteTries > 10)
 17721  002B62  0E0A               	movlw	10
 17722  002B64  0100               	movlb	0	; () banked
 17723  002B66  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17724  002B68  D7D5               	goto	i2l6781
 17725  002B6A  D0F5               	goto	i2l6857
 17726  002B6C                     i2l6793:
 17727                           
 17728                           ;FLASH.c: 390: }
 17729                           ;FLASH.c: 391: }
 17730                           ;FLASH.c: 394: WriteTries = 1;
 17731  002B6C  0E01               	movlw	1
 17732  002B6E  0100               	movlb	0	; () banked
 17733  002B70  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17734  002B72                     i2l6795:
 17735                           
 17736                           ; BSR set to: 0
 17737                           ;FLASH.c: 399: FSH_WriteIntArray(&RF_SavedTiming[64],&RF_DataTiming[64]);
 17738  002B72  0E80               	movlw	128
 17739  002B74  0100               	movlb	0	; () banked
 17740  002B76  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17741  002B78  0E25               	movlw	37
 17742  002B7A  0100               	movlb	0	; () banked
 17743  002B7C  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17744  002B7E  0E00               	movlw	0
 17745  002B80  0100               	movlb	0	; () banked
 17746  002B82  6F86               	movwf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17747  002B84  0E80               	movlw	low (_RF_DataTiming+128)
 17748  002B86  0100               	movlb	0	; () banked
 17749  002B88  6F87               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17750  002B8A  0E03               	movlw	high (_RF_DataTiming+128)
 17751  002B8C  0100               	movlb	0	; () banked
 17752  002B8E  6F88               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17753  002B90  EC57  F008         	call	i2_FSH_WriteIntArray	;wreg free
 17754                           
 17755                           ;FLASH.c: 402: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[64],&RF_DataTiming[64]))
 17756  002B94  0E80               	movlw	128
 17757  002B96  0100               	movlb	0	; () banked
 17758  002B98  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17759  002B9A  0E25               	movlw	37
 17760  002B9C  0100               	movlb	0	; () banked
 17761  002B9E  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17762  002BA0  0E00               	movlw	0
 17763  002BA2  0100               	movlb	0	; () banked
 17764  002BA4  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17765  002BA6  0E80               	movlw	low (_RF_DataTiming+128)
 17766  002BA8  0100               	movlb	0	; () banked
 17767  002BAA  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17768  002BAC  0E03               	movlw	high (_RF_DataTiming+128)
 17769  002BAE  0100               	movlb	0	; () banked
 17770  002BB0  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17771  002BB2  ECA8  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17772  002BB6  0900               	iorlw	0
 17773  002BB8  A4D8               	btfss	status,2,c
 17774  002BBA  D007               	goto	i2l6807
 17775                           
 17776                           ;FLASH.c: 403: {
 17777                           ;FLASH.c: 404: WriteTries++;
 17778  002BBC  0100               	movlb	0	; () banked
 17779  002BBE  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17780                           
 17781                           ; BSR set to: 0
 17782                           ;FLASH.c: 405: if(WriteTries > 10)
 17783  002BC0  0E0A               	movlw	10
 17784  002BC2  0100               	movlb	0	; () banked
 17785  002BC4  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17786  002BC6  D7D5               	goto	i2l6795
 17787  002BC8  D0C6               	goto	i2l6857
 17788  002BCA                     i2l6807:
 17789                           
 17790                           ;FLASH.c: 413: }
 17791                           ;FLASH.c: 414: }
 17792                           ;FLASH.c: 417: WriteTries = 1;
 17793  002BCA  0E01               	movlw	1
 17794  002BCC  0100               	movlb	0	; () banked
 17795  002BCE  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17796  002BD0                     i2l6809:
 17797                           
 17798                           ; BSR set to: 0
 17799                           ;FLASH.c: 422: FSH_WriteIntArray(&RF_SavedTiming[96],&RF_DataTiming[96]);
 17800  002BD0  0EC0               	movlw	192
 17801  002BD2  0100               	movlb	0	; () banked
 17802  002BD4  6F84               	movwf	i2FSH_WriteIntArray@ConstArray& (0+255),b
 17803  002BD6  0E25               	movlw	37
 17804  002BD8  0100               	movlb	0	; () banked
 17805  002BDA  6F85               	movwf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),b
 17806  002BDC  0E00               	movlw	0
 17807  002BDE  0100               	movlb	0	; () banked
 17808  002BE0  6F86               	movwf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),b
 17809  002BE2  0EC0               	movlw	low (_RF_DataTiming+192)
 17810  002BE4  0100               	movlb	0	; () banked
 17811  002BE6  6F87               	movwf	i2FSH_WriteIntArray@Array& (0+255),b
 17812  002BE8  0E03               	movlw	high (_RF_DataTiming+192)
 17813  002BEA  0100               	movlb	0	; () banked
 17814  002BEC  6F88               	movwf	(i2FSH_WriteIntArray@Array+1)& (0+255),b
 17815  002BEE  EC57  F008         	call	i2_FSH_WriteIntArray	;wreg free
 17816                           
 17817                           ;FLASH.c: 425: if(!FSH_VerifyWriteIntArray(&RF_SavedTiming[96],&RF_DataTiming[96]))
 17818  002BF2  0EC0               	movlw	192
 17819  002BF4  0100               	movlb	0	; () banked
 17820  002BF6  6F80               	movwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),b
 17821  002BF8  0E25               	movlw	37
 17822  002BFA  0100               	movlb	0	; () banked
 17823  002BFC  6F81               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),b
 17824  002BFE  0E00               	movlw	0
 17825  002C00  0100               	movlb	0	; () banked
 17826  002C02  6F82               	movwf	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),b
 17827  002C04  0EC0               	movlw	low (_RF_DataTiming+192)
 17828  002C06  0100               	movlb	0	; () banked
 17829  002C08  6F83               	movwf	i2FSH_VerifyWriteIntArray@Array& (0+255),b
 17830  002C0A  0E03               	movlw	high (_RF_DataTiming+192)
 17831  002C0C  0100               	movlb	0	; () banked
 17832  002C0E  6F84               	movwf	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),b
 17833  002C10  ECA8  F008         	call	i2_FSH_VerifyWriteIntArray	;wreg free
 17834  002C14  0900               	iorlw	0
 17835  002C16  A4D8               	btfss	status,2,c
 17836  002C18  D007               	goto	i2l6821
 17837                           
 17838                           ;FLASH.c: 426: {
 17839                           ;FLASH.c: 427: WriteTries++;
 17840  002C1A  0100               	movlb	0	; () banked
 17841  002C1C  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 17842                           
 17843                           ; BSR set to: 0
 17844                           ;FLASH.c: 428: if(WriteTries > 10)
 17845  002C1E  0E0A               	movlw	10
 17846  002C20  0100               	movlb	0	; () banked
 17847  002C22  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17848  002C24  D7D5               	goto	i2l6809
 17849  002C26  D097               	goto	i2l6857
 17850  002C28                     i2l6821:
 17851                           
 17852                           ;FLASH.c: 436: }
 17853                           ;FLASH.c: 437: }
 17854                           ;FLASH.c: 440: for(j=8;j<16;j++)
 17855  002C28  0E08               	movlw	8
 17856  002C2A  0100               	movlb	0	; () banked
 17857  002C2C  6F9B               	movwf	i2FSH_Write_IR_RF@j& (0+255),b
 17858  002C2E                     i2l6823:
 17859                           
 17860                           ; BSR set to: 0
 17861  002C2E  0E0F               	movlw	15
 17862  002C30  0100               	movlb	0	; () banked
 17863  002C32  659B               	cpfsgt	i2FSH_Write_IR_RF@j& (0+255),b
 17864  002C34  D001               	goto	i2l6827
 17865  002C36  D09B               	goto	i2l6869
 17866  002C38                     i2l6827:
 17867                           
 17868                           ; BSR set to: 0
 17869                           ;FLASH.c: 441: {
 17870                           ;FLASH.c: 442: WriteTries = 1;
 17871  002C38  0E01               	movlw	1
 17872  002C3A  0100               	movlb	0	; () banked
 17873  002C3C  6F9F               	movwf	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 17874  002C3E                     i2l1244:
 17875                           
 17876                           ; BSR set to: 0
 17877                           ;FLASH.c: 445: i=0;
 17878  002C3E  0E00               	movlw	0
 17879  002C40  0100               	movlb	0	; () banked
 17880  002C42  6F9E               	movwf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 17881  002C44  0E00               	movlw	0
 17882  002C46  6F9D               	movwf	i2FSH_Write_IR_RF@i& (0+255),b
 17883                           
 17884                           ; BSR set to: 0
 17885                           ;FLASH.c: 446: FlashWasteindex = i + 64*(j-8);
 17886  002C48  0100               	movlb	0	; () banked
 17887  002C4A  519B               	movf	i2FSH_Write_IR_RF@j& (0+255),w,b
 17888  002C4C  0100               	movlb	0	; () banked
 17889  002C4E  6F91               	movwf	??i2_FSH_Write_IR_RF& (0+255),b
 17890  002C50  6B92               	clrf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 17891  002C52  0E06               	movlw	6
 17892  002C54                     i2u741_45:
 17893  002C54  90D8               	bcf	status,0,c
 17894  002C56  0100               	movlb	0	; () banked
 17895  002C58  3791               	rlcf	??i2_FSH_Write_IR_RF& (0+255),f,b
 17896  002C5A  3792               	rlcf	(??i2_FSH_Write_IR_RF+1)& (0+255),f,b
 17897  002C5C  2EE8               	decfsz	wreg,f,c
 17898  002C5E  D7FA               	goto	i2u741_45
 17899  002C60  0100               	movlb	0	; () banked
 17900  002C62  519D               	movf	i2FSH_Write_IR_RF@i& (0+255),w,b
 17901  002C64  0100               	movlb	0	; () banked
 17902  002C66  2791               	addwf	??i2_FSH_Write_IR_RF& (0+255),f,b
 17903  002C68  0100               	movlb	0	; () banked
 17904  002C6A  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17905  002C6C  0100               	movlb	0	; () banked
 17906  002C6E  2392               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),f,b
 17907  002C70  0E00               	movlw	0
 17908  002C72  0100               	movlb	0	; () banked
 17909  002C74  2591               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 17910  002C76  0100               	movlb	0	; () banked
 17911  002C78  6F99               	movwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),b
 17912  002C7A  0EFE               	movlw	254
 17913  002C7C  0100               	movlb	0	; () banked
 17914  002C7E  2192               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 17915  002C80  0100               	movlb	0	; () banked
 17916  002C82  6F9A               	movwf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),b
 17917                           
 17918                           ; BSR set to: 0
 17919                           ;FLASH.c: 447: FSH_AddressToBlock(&FlashWaste[FlashWasteindex]);
 17920  002C84  0E00               	movlw	0
 17921  002C86  0100               	movlb	0	; () banked
 17922  002C88  6F91               	movwf	??i2_FSH_Write_IR_RF& (0+255),b
 17923  002C8A  0E26               	movlw	38
 17924  002C8C  6F92               	movwf	(??i2_FSH_Write_IR_RF+1)& (0+255),b
 17925  002C8E  0E00               	movlw	0
 17926  002C90  6F93               	movwf	(??i2_FSH_Write_IR_RF+2)& (0+255),b
 17927  002C92  0100               	movlb	0	; () banked
 17928  002C94  5199               	movf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 17929  002C96  0100               	movlb	0	; () banked
 17930  002C98  2591               	addwf	??i2_FSH_Write_IR_RF& (0+255),w,b
 17931  002C9A  0100               	movlb	0	; () banked
 17932  002C9C  6F94               	movwf	(??i2_FSH_Write_IR_RF+3)& (0+255),b
 17933  002C9E  0100               	movlb	0	; () banked
 17934  002CA0  519A               	movf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 17935  002CA2  0100               	movlb	0	; () banked
 17936  002CA4  2192               	addwfc	(??i2_FSH_Write_IR_RF+1)& (0+255),w,b
 17937  002CA6  0100               	movlb	0	; () banked
 17938  002CA8  6F95               	movwf	(??i2_FSH_Write_IR_RF+4)& (0+255),b
 17939  002CAA  0E00               	movlw	0
 17940  002CAC  0100               	movlb	0	; () banked
 17941  002CAE  2193               	addwfc	(??i2_FSH_Write_IR_RF+2)& (0+255),w,b
 17942  002CB0  0100               	movlb	0	; () banked
 17943  002CB2  6F96               	movwf	(??i2_FSH_Write_IR_RF+5)& (0+255),b
 17944  002CB4  0100               	movlb	0	; () banked
 17945  002CB6  5194               	movf	(??i2_FSH_Write_IR_RF+3)& (0+255),w,b
 17946  002CB8  0100               	movlb	0	; () banked
 17947  002CBA  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 17948  002CBC  0100               	movlb	0	; () banked
 17949  002CBE  5195               	movf	(??i2_FSH_Write_IR_RF+4)& (0+255),w,b
 17950  002CC0  0100               	movlb	0	; () banked
 17951  002CC2  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 17952  002CC4  0100               	movlb	0	; () banked
 17953  002CC6  5196               	movf	(??i2_FSH_Write_IR_RF+5)& (0+255),w,b
 17954  002CC8  0100               	movlb	0	; () banked
 17955  002CCA  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 17956  002CCC  0100               	movlb	0	; () banked
 17957  002CCE  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 17958  002CD0  ECCE  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 17959                           
 17960                           ;FLASH.c: 448: for(i = 0; i<64; i++)
 17961  002CD4  0E00               	movlw	0
 17962  002CD6  0100               	movlb	0	; () banked
 17963  002CD8  6F9E               	movwf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 17964  002CDA  0E00               	movlw	0
 17965  002CDC  6F9D               	movwf	i2FSH_Write_IR_RF@i& (0+255),b
 17966                           
 17967                           ; BSR set to: 0
 17968  002CDE  0100               	movlb	0	; () banked
 17969  002CE0  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17970  002CE2  E10F               	bnz	i2l1246
 17971  002CE4  0E40               	movlw	64
 17972  002CE6  0100               	movlb	0	; () banked
 17973  002CE8  5D9D               	subwf	i2FSH_Write_IR_RF@i& (0+255),w,b
 17974  002CEA  B0D8               	btfsc	status,0,c
 17975  002CEC  D00A               	goto	i2l1246
 17976                           
 17977                           ; BSR set to: 0
 17978                           ;FLASH.c: 449: {
 17979                           ;FLASH.c: 451: TABLAT = 0xDA;
 17980                           
 17981                           ; BSR set to: 0
 17982                           
 17983                           ; BSR set to: 0
 17984  002CEE  0EDA               	movlw	218
 17985  002CF0  6EF5               	movwf	tablat,c	;volatile
 17986  002CF2  000D               	tblwt		*+	;# 
 17987  002CF4  0100               	movlb	0	; () banked
 17988  002CF6  4B9D               	infsnz	i2FSH_Write_IR_RF@i& (0+255),f,b
 17989  002CF8  2B9E               	incf	(i2FSH_Write_IR_RF@i+1)& (0+255),f,b
 17990                           
 17991                           ; BSR set to: 0
 17992  002CFA  0100               	movlb	0	; () banked
 17993  002CFC  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 17994  002CFE  E101               	bnz	i2u743_40
 17995  002D00  D7F1               	goto	L10
 17996  002D02                     i2u743_40:
 17997  002D02                     i2l1246:
 17998                           
 17999                           ; BSR set to: 0
 18000                           ;FLASH.c: 453: }
 18001                           ;FLASH.c: 454: EECON1bits.FREE = 0;
 18002  002D02  98A6               	bcf	4006,4,c	;volatile
 18003  002D04  84A6               	bsf	4006,2,c	;# 
 18004  002D06  9EF2               	bcf	intcon,7,c	;# 
 18005  002D08  0E55               	movlw	85	;# 
 18006  002D0A  6EA7               	movwf	4007,c	;# 
 18007  002D0C  0EAA               	movlw	170	;# 
 18008  002D0E  6EA7               	movwf	4007,c	;# 
 18009  002D10  82A6               	bsf	4006,1,c	;# 
 18010                           
 18011                           ;FLASH.c: 465: for(i=0; i<64;i++)
 18012  002D12  0E00               	movlw	0
 18013  002D14  0100               	movlb	0	; () banked
 18014  002D16  6F9E               	movwf	(i2FSH_Write_IR_RF@i+1)& (0+255),b
 18015  002D18  0E00               	movlw	0
 18016  002D1A  6F9D               	movwf	i2FSH_Write_IR_RF@i& (0+255),b
 18017  002D1C                     i2l6847:
 18018                           
 18019                           ; BSR set to: 0
 18020  002D1C  0100               	movlb	0	; () banked
 18021  002D1E  519E               	movf	(i2FSH_Write_IR_RF@i+1)& (0+255),w,b
 18022  002D20  E123               	bnz	i2l6865
 18023  002D22  0E40               	movlw	64
 18024  002D24  0100               	movlb	0	; () banked
 18025  002D26  5D9D               	subwf	i2FSH_Write_IR_RF@i& (0+255),w,b
 18026  002D28  B0D8               	btfsc	status,0,c
 18027  002D2A  D01E               	goto	i2l6865
 18028                           
 18029                           ; BSR set to: 0
 18030                           ;FLASH.c: 466: {
 18031                           ;FLASH.c: 467: if(FlashWaste[FlashWasteindex] != 0xDA)
 18032                           
 18033                           ; BSR set to: 0
 18034                           
 18035                           ; BSR set to: 0
 18036  002D2C  0E00               	movlw	0
 18037  002D2E  0100               	movlb	0	; () banked
 18038  002D30  2599               	addwf	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),w,b
 18039  002D32  6EF6               	movwf	tblptrl,c
 18040  002D34  0E26               	movlw	38
 18041  002D36  219A               	addwfc	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),w,b
 18042  002D38  6EF7               	movwf	tblptrh,c
 18043  002D3A  6AF8               	clrf	tblptru,c
 18044  002D3C  0E00               	movlw	0
 18045  002D3E  22F8               	addwfc	tblptru,f,c
 18046  002D40  0008               	tblrd		*
 18047  002D42  50F5               	movf	tablat,w,c
 18048  002D44  0ADA               	xorlw	218
 18049  002D46  B4D8               	btfsc	status,2,c
 18050  002D48  D008               	goto	i2l6861
 18051                           
 18052                           ; BSR set to: 0
 18053                           ;FLASH.c: 468: {
 18054                           ;FLASH.c: 469: WriteTries++;
 18055  002D4A  0100               	movlb	0	; () banked
 18056  002D4C  2B9F               	incf	i2FSH_Write_IR_RF@WriteTries& (0+255),f,b
 18057                           
 18058                           ; BSR set to: 0
 18059                           ;FLASH.c: 470: if(WriteTries > 10)
 18060  002D4E  0E0A               	movlw	10
 18061  002D50  0100               	movlb	0	; () banked
 18062  002D52  659F               	cpfsgt	i2FSH_Write_IR_RF@WriteTries& (0+255),b
 18063  002D54  D774               	goto	i2l1244
 18064  002D56                     i2l6857:
 18065                           
 18066                           ; BSR set to: 0
 18067                           ;FLASH.c: 471: {
 18068                           ;FLASH.c: 472: status = 0;
 18069  002D56  0E00               	movlw	0
 18070  002D58  D00B               	goto	L9
 18071  002D5A                     i2l6861:
 18072                           
 18073                           ; BSR set to: 0
 18074                           ;FLASH.c: 478: }
 18075                           ;FLASH.c: 479: }
 18076                           ;FLASH.c: 480: FlashWasteindex++;
 18077  002D5A  0100               	movlb	0	; () banked
 18078  002D5C  4B99               	infsnz	i2FSH_Write_IR_RF@FlashWasteindex& (0+255),f,b
 18079  002D5E  2B9A               	incf	(i2FSH_Write_IR_RF@FlashWasteindex+1)& (0+255),f,b
 18080  002D60  0100               	movlb	0	; () banked
 18081  002D62  4B9D               	infsnz	i2FSH_Write_IR_RF@i& (0+255),f,b
 18082  002D64  2B9E               	incf	(i2FSH_Write_IR_RF@i+1)& (0+255),f,b
 18083  002D66  D7DA               	goto	i2l6847
 18084  002D68                     i2l6865:
 18085                           
 18086                           ; BSR set to: 0
 18087  002D68  0100               	movlb	0	; () banked
 18088  002D6A  2B9B               	incf	i2FSH_Write_IR_RF@j& (0+255),f,b
 18089  002D6C  D760               	goto	i2l6823
 18090  002D6E                     i2l6869:
 18091                           
 18092                           ; BSR set to: 0
 18093                           ;FLASH.c: 481: }
 18094                           ;FLASH.c: 482: }
 18095                           ;FLASH.c: 483: status = 1;
 18096  002D6E  0E01               	movlw	1
 18097  002D70                     L9:
 18098  002D70  0100               	movlb	0	; () banked
 18099  002D72  6F9C               	movwf	i2FSH_Write_IR_RF@status& (0+255),b
 18100  002D74                     i2l1205:
 18101                           
 18102                           ; BSR set to: 0
 18103                           ;FLASH.c: 486: if(highint)
 18104  002D74  0100               	movlb	0	; () banked
 18105  002D76  5197               	movf	i2FSH_Write_IR_RF@highint& (0+255),w,b
 18106  002D78  0100               	movlb	0	; () banked
 18107  002D7A  A4D8               	btfss	status,2,c
 18108                           
 18109                           ; BSR set to: 0
 18110                           ;FLASH.c: 487: {
 18111                           ;FLASH.c: 488: INTCONbits.GIE = 1;
 18112  002D7C  8EF2               	bsf	intcon,7,c	;volatile
 18113                           
 18114                           ; BSR set to: 0
 18115                           ;FLASH.c: 489: }
 18116                           ;FLASH.c: 490: if(lowint)
 18117                           
 18118                           ; BSR set to: 0
 18119  002D7E  0100               	movlb	0	; () banked
 18120  002D80  5198               	movf	i2FSH_Write_IR_RF@lowint& (0+255),w,b
 18121  002D82  0100               	movlb	0	; () banked
 18122  002D84  A4D8               	btfss	status,2,c
 18123                           
 18124                           ; BSR set to: 0
 18125                           ;FLASH.c: 491: {
 18126                           ;FLASH.c: 492: INTCONbits.PEIE = 1;
 18127  002D86  8CF2               	bsf	intcon,6,c	;volatile
 18128                           
 18129                           ; BSR set to: 0
 18130                           ;FLASH.c: 493: }
 18131                           ;FLASH.c: 494: return status;
 18132                           
 18133                           ; BSR set to: 0
 18134  002D88  0100               	movlb	0	; () banked
 18135  002D8A  519C               	movf	i2FSH_Write_IR_RF@status& (0+255),w,b
 18136  002D8C  0012               	return	
 18137  002D8E                     __end_ofi2_FSH_Write_IR_RF:
 18138                           	opt stack 0
 18139                           pclatu	equ	0xFFB
 18140                           pclath	equ	0xFFA
 18141                           tblptru	equ	0xFF8
 18142                           tblptrh	equ	0xFF7
 18143                           tblptrl	equ	0xFF6
 18144                           tablat	equ	0xFF5
 18145                           prodh	equ	0xFF4
 18146                           prodl	equ	0xFF3
 18147                           intcon	equ	0xFF2
 18148                           intcon2	equ	0xFF1
 18149                           intcon3	equ	0xFF0
 18150                           postinc0	equ	0xFEE
 18151                           fsr0h	equ	0xFEA
 18152                           fsr0l	equ	0xFE9
 18153                           wreg	equ	0xFE8
 18154                           postdec1	equ	0xFE5
 18155                           fsr1h	equ	0xFE2
 18156                           fsr1l	equ	0xFE1
 18157                           bsr	equ	0xFE0
 18158                           indf2	equ	0xFDF
 18159                           postinc2	equ	0xFDE
 18160                           postdec2	equ	0xFDD
 18161                           plusw2	equ	0xFDB
 18162                           fsr2h	equ	0xFDA
 18163                           fsr2l	equ	0xFD9
 18164                           status	equ	0xFD8
 18165                           
 18166 ;; *************** function i2_RF_ResetData *****************
 18167 ;; Defined at:
 18168 ;;		line 221 in file "RF.c"
 18169 ;; Parameters:    Size  Location     Type
 18170 ;;		None
 18171 ;; Auto vars:     Size  Location     Type
 18172 ;;		None
 18173 ;; Return value:  Size  Location     Type
 18174 ;;		None               void
 18175 ;; Registers used:
 18176 ;;		wreg, status,2
 18177 ;; Tracked objects:
 18178 ;;		On entry : 0/0
 18179 ;;		On exit  : 0/0
 18180 ;;		Unchanged: 0/0
 18181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18182 ;;      Params:         0       0       0       0       0
 18183 ;;      Locals:         0       0       0       0       0
 18184 ;;      Temps:          0       0       0       0       0
 18185 ;;      Totals:         0       0       0       0       0
 18186 ;;Total ram usage:        0 bytes
 18187 ;; Hardware stack levels used:    1
 18188 ;; This function calls:
 18189 ;;		Nothing
 18190 ;; This function is called by:
 18191 ;;		_high_isr
 18192 ;;		i2_FSH_Write_IR_RF
 18193 ;; This function uses a non-reentrant model
 18194 ;;
 18195                           
 18196                           	psect	text110
 18197  001F50                     __ptext110:
 18198                           	opt stack 0
 18199  001F50                     i2_RF_ResetData:
 18200                           	opt stack 17
 18201                           
 18202                           ;RF.c: 223: RF_DataPlace = 0;
 18203                           
 18204                           ; BSR set to: 0
 18205                           ;incstack = 0
 18206  001F50  0E00               	movlw	0
 18207  001F52  0100               	movlb	0	; () banked
 18208  001F54  6FC8               	movwf	_RF_DataPlace& (0+255),b
 18209                           
 18210                           ;RF.c: 224: RFStarted = 0;
 18211  001F56  0E00               	movlw	0
 18212  001F58  0100               	movlb	0	; () banked
 18213  001F5A  6FC5               	movwf	_RFStarted& (0+255),b
 18214                           
 18215                           ; BSR set to: 0
 18216  001F5C  0012               	return		;funcret
 18217  001F5E                     __end_ofi2_RF_ResetData:
 18218                           	opt stack 0
 18219                           pclatu	equ	0xFFB
 18220                           pclath	equ	0xFFA
 18221                           tblptru	equ	0xFF8
 18222                           tblptrh	equ	0xFF7
 18223                           tblptrl	equ	0xFF6
 18224                           tablat	equ	0xFF5
 18225                           prodh	equ	0xFF4
 18226                           prodl	equ	0xFF3
 18227                           intcon	equ	0xFF2
 18228                           intcon2	equ	0xFF1
 18229                           intcon3	equ	0xFF0
 18230                           postinc0	equ	0xFEE
 18231                           fsr0h	equ	0xFEA
 18232                           fsr0l	equ	0xFE9
 18233                           wreg	equ	0xFE8
 18234                           postdec1	equ	0xFE5
 18235                           fsr1h	equ	0xFE2
 18236                           fsr1l	equ	0xFE1
 18237                           bsr	equ	0xFE0
 18238                           indf2	equ	0xFDF
 18239                           postinc2	equ	0xFDE
 18240                           postdec2	equ	0xFDD
 18241                           plusw2	equ	0xFDB
 18242                           fsr2h	equ	0xFDA
 18243                           fsr2l	equ	0xFD9
 18244                           status	equ	0xFD8
 18245                           
 18246 ;; *************** function i2_MSC_BufferCopyIntConst *****************
 18247 ;; Defined at:
 18248 ;;		line 238 in file "MISC.c"
 18249 ;; Parameters:    Size  Location     Type
 18250 ;;  from            3    6[BANK0 ] PTR const unsigned int 
 18251 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 18252 ;;  to              2    9[BANK0 ] PTR unsigned int 
 18253 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 18254 ;;  count           2   11[BANK0 ] unsigned int 
 18255 ;;  shift           2   13[BANK0 ] unsigned int 
 18256 ;; Auto vars:     Size  Location     Type
 18257 ;;  MSC_BufferCo    2   15[BANK0 ] unsigned int 
 18258 ;; Return value:  Size  Location     Type
 18259 ;;		None               void
 18260 ;; Registers used:
 18261 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 18262 ;; Tracked objects:
 18263 ;;		On entry : 0/0
 18264 ;;		On exit  : 0/0
 18265 ;;		Unchanged: 0/0
 18266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18267 ;;      Params:         0       9       0       0       0
 18268 ;;      Locals:         0       2       0       0       0
 18269 ;;      Temps:          0       0       0       0       0
 18270 ;;      Totals:         0      11       0       0       0
 18271 ;;Total ram usage:       11 bytes
 18272 ;; Hardware stack levels used:    1
 18273 ;; Hardware stack levels required when called:    1
 18274 ;; This function calls:
 18275 ;;		i2_MSC_CleanBufferInt
 18276 ;; This function is called by:
 18277 ;;		i2_FSH_Write_IR_RF
 18278 ;; This function uses a non-reentrant model
 18279 ;;
 18280                           
 18281                           	psect	text111
 18282  000E9C                     __ptext111:
 18283                           	opt stack 0
 18284  000E9C                     i2_MSC_BufferCopyIntConst:
 18285                           	opt stack 14
 18286                           
 18287                           ;MISC.c: 240: unsigned int i=0;
 18288                           
 18289                           ; BSR set to: 0
 18290                           ;incstack = 0
 18291  000E9C  0E00               	movlw	0
 18292  000E9E  0100               	movlb	0	; () banked
 18293  000EA0  6F90               	movwf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),b
 18294  000EA2  0E00               	movlw	0
 18295  000EA4  6F8F               	movwf	i2MSC_BufferCopyIntConst@i& (0+255),b
 18296                           
 18297                           ; BSR set to: 0
 18298                           ;MISC.c: 241: MSC_CleanBufferInt(to,count);
 18299  000EA6  C089  F080         	movff	i2MSC_BufferCopyIntConst@to,i2MSC_CleanBufferInt@data
 18300  000EAA  C08A  F081         	movff	i2MSC_BufferCopyIntConst@to+1,i2MSC_CleanBufferInt@data+1
 18301  000EAE  C08B  F082         	movff	i2MSC_BufferCopyIntConst@count,i2MSC_CleanBufferInt@count
 18302  000EB2  C08C  F083         	movff	i2MSC_BufferCopyIntConst@count+1,i2MSC_CleanBufferInt@count+1
 18303  000EB6  ECBC  F00A         	call	i2_MSC_CleanBufferInt	;wreg free
 18304                           
 18305                           ;MISC.c: 242: for(i = shift; i>0; i--)
 18306  000EBA  C08D  F08F         	movff	i2MSC_BufferCopyIntConst@shift,i2MSC_BufferCopyIntConst@i
 18307  000EBE  C08E  F090         	movff	i2MSC_BufferCopyIntConst@shift+1,i2MSC_BufferCopyIntConst@i+1
 18308  000EC2                     i2l5823:
 18309  000EC2  0100               	movlb	0	; () banked
 18310  000EC4  518F               	movf	i2MSC_BufferCopyIntConst@i& (0+255),w,b
 18311  000EC6  0100               	movlb	0	; () banked
 18312  000EC8  1190               	iorwf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),w,b
 18313  000ECA  B4D8               	btfsc	status,2,c
 18314  000ECC  D032               	goto	i2l5843
 18315                           
 18316                           ; BSR set to: 0
 18317                           ;MISC.c: 243: {
 18318                           ;MISC.c: 244: *to = ' ';
 18319                           
 18320                           ; BSR set to: 0
 18321                           
 18322                           ; BSR set to: 0
 18323  000ECE  C089  FFD9         	movff	i2MSC_BufferCopyIntConst@to,fsr2l
 18324  000ED2  C08A  FFDA         	movff	i2MSC_BufferCopyIntConst@to+1,fsr2h
 18325  000ED6  0E20               	movlw	32
 18326  000ED8  6EDE               	movwf	postinc2,c
 18327  000EDA  0E00               	movlw	0
 18328  000EDC  6EDD               	movwf	postdec2,c
 18329                           
 18330                           ; BSR set to: 0
 18331                           ;MISC.c: 245: to++;
 18332  000EDE  0E02               	movlw	2
 18333  000EE0  0100               	movlb	0	; () banked
 18334  000EE2  2789               	addwf	i2MSC_BufferCopyIntConst@to& (0+255),f,b
 18335  000EE4  0E00               	movlw	0
 18336  000EE6  238A               	addwfc	(i2MSC_BufferCopyIntConst@to+1)& (0+255),f,b
 18337                           
 18338                           ; BSR set to: 0
 18339  000EE8  0100               	movlb	0	; () banked
 18340  000EEA  078F               	decf	i2MSC_BufferCopyIntConst@i& (0+255),f,b
 18341  000EEC  A0D8               	btfss	status,0,c
 18342  000EEE  0790               	decf	(i2MSC_BufferCopyIntConst@i+1)& (0+255),f,b
 18343  000EF0  D7E8               	goto	i2l5823
 18344  000EF2                     i2l5835:
 18345                           
 18346                           ; BSR set to: 0
 18347                           ;MISC.c: 248: {
 18348                           ;MISC.c: 249: *to = *from;
 18349  000EF2  C086  FFF6         	movff	i2MSC_BufferCopyIntConst@from,tblptrl
 18350  000EF6  C087  FFF7         	movff	i2MSC_BufferCopyIntConst@from+1,tblptrh
 18351  000EFA  C088  FFF8         	movff	i2MSC_BufferCopyIntConst@from+2,tblptru
 18352  000EFE  C089  FFD9         	movff	i2MSC_BufferCopyIntConst@to,fsr2l
 18353  000F02  C08A  FFDA         	movff	i2MSC_BufferCopyIntConst@to+1,fsr2h
 18354  000F06  0009               	tblrd		*+
 18355  000F08  CFF5 FFDE          	movff	tablat,postinc2
 18356  000F0C  0008               	tblrd		*
 18357  000F0E  CFF5 FFDD          	movff	tablat,postdec2
 18358                           
 18359                           ; BSR set to: 0
 18360                           ;MISC.c: 250: from++;
 18361  000F12  0100               	movlb	0	; () banked
 18362  000F14  0E02               	movlw	2
 18363  000F16  2786               	addwf	i2MSC_BufferCopyIntConst@from& (0+255),f,b
 18364  000F18  0E00               	movlw	0
 18365  000F1A  2387               	addwfc	(i2MSC_BufferCopyIntConst@from+1)& (0+255),f,b
 18366  000F1C  0E00               	movlw	0
 18367  000F1E  2388               	addwfc	(i2MSC_BufferCopyIntConst@from+2)& (0+255),f,b
 18368                           
 18369                           ; BSR set to: 0
 18370                           ;MISC.c: 251: to++;
 18371  000F20  0E02               	movlw	2
 18372  000F22  0100               	movlb	0	; () banked
 18373  000F24  2789               	addwf	i2MSC_BufferCopyIntConst@to& (0+255),f,b
 18374  000F26  0E00               	movlw	0
 18375  000F28  238A               	addwfc	(i2MSC_BufferCopyIntConst@to+1)& (0+255),f,b
 18376                           
 18377                           ; BSR set to: 0
 18378                           ;MISC.c: 252: count--;
 18379  000F2A  0100               	movlb	0	; () banked
 18380  000F2C  078B               	decf	i2MSC_BufferCopyIntConst@count& (0+255),f,b
 18381  000F2E  A0D8               	btfss	status,0,c
 18382  000F30  078C               	decf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),f,b
 18383  000F32                     i2l5843:
 18384                           
 18385                           ; BSR set to: 0
 18386  000F32  C086  FFF6         	movff	i2MSC_BufferCopyIntConst@from,tblptrl
 18387  000F36  C087  FFF7         	movff	i2MSC_BufferCopyIntConst@from+1,tblptrh
 18388  000F3A  C088  FFF8         	movff	i2MSC_BufferCopyIntConst@from+2,tblptru
 18389  000F3E  0009               	tblrd		*+
 18390  000F40  50F5               	movf	tablat,w,c
 18391  000F42  0009               	tblrd		*+
 18392  000F44  10F5               	iorwf	tablat,w,c
 18393  000F46  B4D8               	btfsc	status,2,c
 18394  000F48  0012               	return	
 18395                           
 18396                           ; BSR set to: 0
 18397  000F4A  0100               	movlb	0	; () banked
 18398  000F4C  518B               	movf	i2MSC_BufferCopyIntConst@count& (0+255),w,b
 18399  000F4E  0100               	movlb	0	; () banked
 18400  000F50  118C               	iorwf	(i2MSC_BufferCopyIntConst@count+1)& (0+255),w,b
 18401  000F52  B4D8               	btfsc	status,2,c
 18402  000F54  0012               	return	
 18403  000F56  D7CD               	goto	i2l5835
 18404  000F58                     __end_ofi2_MSC_BufferCopyIntConst:
 18405                           	opt stack 0
 18406                           pclatu	equ	0xFFB
 18407                           pclath	equ	0xFFA
 18408                           tblptru	equ	0xFF8
 18409                           tblptrh	equ	0xFF7
 18410                           tblptrl	equ	0xFF6
 18411                           tablat	equ	0xFF5
 18412                           prodh	equ	0xFF4
 18413                           prodl	equ	0xFF3
 18414                           intcon	equ	0xFF2
 18415                           intcon2	equ	0xFF1
 18416                           intcon3	equ	0xFF0
 18417                           postinc0	equ	0xFEE
 18418                           fsr0h	equ	0xFEA
 18419                           fsr0l	equ	0xFE9
 18420                           wreg	equ	0xFE8
 18421                           postdec1	equ	0xFE5
 18422                           fsr1h	equ	0xFE2
 18423                           fsr1l	equ	0xFE1
 18424                           bsr	equ	0xFE0
 18425                           indf2	equ	0xFDF
 18426                           postinc2	equ	0xFDE
 18427                           postdec2	equ	0xFDD
 18428                           plusw2	equ	0xFDB
 18429                           fsr2h	equ	0xFDA
 18430                           fsr2l	equ	0xFD9
 18431                           status	equ	0xFD8
 18432                           
 18433 ;; *************** function i2_MSC_CleanBufferInt *****************
 18434 ;; Defined at:
 18435 ;;		line 166 in file "MISC.c"
 18436 ;; Parameters:    Size  Location     Type
 18437 ;;  data            2    0[BANK0 ] PTR unsigned int 
 18438 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 18439 ;;  count           2    2[BANK0 ] unsigned int 
 18440 ;; Auto vars:     Size  Location     Type
 18441 ;;  MSC_CleanBuf    2    4[BANK0 ] unsigned int 
 18442 ;; Return value:  Size  Location     Type
 18443 ;;		None               void
 18444 ;; Registers used:
 18445 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18446 ;; Tracked objects:
 18447 ;;		On entry : 0/0
 18448 ;;		On exit  : 0/0
 18449 ;;		Unchanged: 0/0
 18450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18451 ;;      Params:         0       4       0       0       0
 18452 ;;      Locals:         0       2       0       0       0
 18453 ;;      Temps:          0       0       0       0       0
 18454 ;;      Totals:         0       6       0       0       0
 18455 ;;Total ram usage:        6 bytes
 18456 ;; Hardware stack levels used:    1
 18457 ;; This function calls:
 18458 ;;		Nothing
 18459 ;; This function is called by:
 18460 ;;		i2_MSC_BufferCopyIntConst
 18461 ;; This function uses a non-reentrant model
 18462 ;;
 18463                           
 18464                           	psect	text112
 18465  001578                     __ptext112:
 18466                           	opt stack 0
 18467  001578                     i2_MSC_CleanBufferInt:
 18468                           	opt stack 14
 18469                           
 18470                           ;MISC.c: 168: unsigned int i=0;
 18471                           
 18472                           ; BSR set to: 0
 18473                           ;incstack = 0
 18474  001578  0E00               	movlw	0
 18475  00157A  0100               	movlb	0	; () banked
 18476  00157C  6F85               	movwf	(i2MSC_CleanBufferInt@i+1)& (0+255),b
 18477  00157E  0E00               	movlw	0
 18478  001580  6F84               	movwf	i2MSC_CleanBufferInt@i& (0+255),b
 18479                           
 18480                           ;MISC.c: 169: for(i=0; i<count;i++)
 18481  001582  0E00               	movlw	0
 18482  001584  0100               	movlb	0	; () banked
 18483  001586  6F85               	movwf	(i2MSC_CleanBufferInt@i+1)& (0+255),b
 18484  001588  0E00               	movlw	0
 18485  00158A  6F84               	movwf	i2MSC_CleanBufferInt@i& (0+255),b
 18486  00158C  D014               	goto	i2l5419
 18487  00158E                     i2l5415:
 18488                           
 18489                           ; BSR set to: 0
 18490                           ;MISC.c: 170: {
 18491                           ;MISC.c: 171: data[i]= 0;
 18492  00158E  90D8               	bcf	status,0,c
 18493  001590  0100               	movlb	0	; () banked
 18494  001592  3584               	rlcf	i2MSC_CleanBufferInt@i& (0+255),w,b
 18495  001594  6ED9               	movwf	fsr2l,c
 18496  001596  0100               	movlb	0	; () banked
 18497  001598  3585               	rlcf	(i2MSC_CleanBufferInt@i+1)& (0+255),w,b
 18498  00159A  6EDA               	movwf	fsr2h,c
 18499  00159C  0100               	movlb	0	; () banked
 18500  00159E  5180               	movf	i2MSC_CleanBufferInt@data& (0+255),w,b
 18501  0015A0  26D9               	addwf	fsr2l,f,c
 18502  0015A2  0100               	movlb	0	; () banked
 18503  0015A4  5181               	movf	(i2MSC_CleanBufferInt@data+1)& (0+255),w,b
 18504  0015A6  22DA               	addwfc	fsr2h,f,c
 18505  0015A8  0E00               	movlw	0
 18506  0015AA  6EDE               	movwf	postinc2,c
 18507  0015AC  0E00               	movlw	0
 18508  0015AE  6EDD               	movwf	postdec2,c
 18509                           
 18510                           ; BSR set to: 0
 18511  0015B0  0100               	movlb	0	; () banked
 18512  0015B2  4B84               	infsnz	i2MSC_CleanBufferInt@i& (0+255),f,b
 18513  0015B4  2B85               	incf	(i2MSC_CleanBufferInt@i+1)& (0+255),f,b
 18514  0015B6                     i2l5419:
 18515                           
 18516                           ; BSR set to: 0
 18517  0015B6  0100               	movlb	0	; () banked
 18518  0015B8  5182               	movf	i2MSC_CleanBufferInt@count& (0+255),w,b
 18519  0015BA  0100               	movlb	0	; () banked
 18520  0015BC  5D84               	subwf	i2MSC_CleanBufferInt@i& (0+255),w,b
 18521  0015BE  0100               	movlb	0	; () banked
 18522  0015C0  5183               	movf	(i2MSC_CleanBufferInt@count+1)& (0+255),w,b
 18523  0015C2  0100               	movlb	0	; () banked
 18524  0015C4  5985               	subwfb	(i2MSC_CleanBufferInt@i+1)& (0+255),w,b
 18525  0015C6  B0D8               	btfsc	status,0,c
 18526  0015C8  0012               	return	
 18527  0015CA  D7E1               	goto	i2l5415
 18528  0015CC                     __end_ofi2_MSC_CleanBufferInt:
 18529                           	opt stack 0
 18530                           pclatu	equ	0xFFB
 18531                           pclath	equ	0xFFA
 18532                           tblptru	equ	0xFF8
 18533                           tblptrh	equ	0xFF7
 18534                           tblptrl	equ	0xFF6
 18535                           tablat	equ	0xFF5
 18536                           prodh	equ	0xFF4
 18537                           prodl	equ	0xFF3
 18538                           intcon	equ	0xFF2
 18539                           intcon2	equ	0xFF1
 18540                           intcon3	equ	0xFF0
 18541                           postinc0	equ	0xFEE
 18542                           fsr0h	equ	0xFEA
 18543                           fsr0l	equ	0xFE9
 18544                           wreg	equ	0xFE8
 18545                           postdec1	equ	0xFE5
 18546                           fsr1h	equ	0xFE2
 18547                           fsr1l	equ	0xFE1
 18548                           bsr	equ	0xFE0
 18549                           indf2	equ	0xFDF
 18550                           postinc2	equ	0xFDE
 18551                           postdec2	equ	0xFDD
 18552                           plusw2	equ	0xFDB
 18553                           fsr2h	equ	0xFDA
 18554                           fsr2l	equ	0xFD9
 18555                           status	equ	0xFD8
 18556                           
 18557 ;; *************** function i2_IR_ResetData *****************
 18558 ;; Defined at:
 18559 ;;		line 107 in file "IR.c"
 18560 ;; Parameters:    Size  Location     Type
 18561 ;;		None
 18562 ;; Auto vars:     Size  Location     Type
 18563 ;;		None
 18564 ;; Return value:  Size  Location     Type
 18565 ;;		None               void
 18566 ;; Registers used:
 18567 ;;		wreg, status,2, cstack
 18568 ;; Tracked objects:
 18569 ;;		On entry : 0/0
 18570 ;;		On exit  : 0/0
 18571 ;;		Unchanged: 0/0
 18572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18573 ;;      Params:         0       0       0       0       0
 18574 ;;      Locals:         0       0       0       0       0
 18575 ;;      Temps:          0       0       0       0       0
 18576 ;;      Totals:         0       0       0       0       0
 18577 ;;Total ram usage:        0 bytes
 18578 ;; Hardware stack levels used:    1
 18579 ;; Hardware stack levels required when called:    2
 18580 ;; This function calls:
 18581 ;;		i2_RF_Enable
 18582 ;; This function is called by:
 18583 ;;		i2_FSH_Write_IR_RF
 18584 ;; This function uses a non-reentrant model
 18585 ;;
 18586                           
 18587                           	psect	text113
 18588  001F5E                     __ptext113:
 18589                           	opt stack 0
 18590  001F5E                     i2_IR_ResetData:
 18591                           	opt stack 13
 18592                           
 18593                           ;IR.c: 109: IR_DataPlace = 0;
 18594                           
 18595                           ; BSR set to: 0
 18596                           ;incstack = 0
 18597  001F5E  0E00               	movlw	0
 18598  001F60  6E63               	movwf	_IR_DataPlace,c
 18599                           
 18600                           ;IR.c: 110: IRStarted = 0;
 18601  001F62  0E00               	movlw	0
 18602  001F64  6E61               	movwf	_IRStarted,c
 18603                           
 18604                           ;IR.c: 111: RF_Enable();
 18605  001F66  EC35  F00F         	call	i2_RF_Enable	;wreg free
 18606  001F6A  0012               	return		;funcret
 18607  001F6C                     __end_ofi2_IR_ResetData:
 18608                           	opt stack 0
 18609                           pclatu	equ	0xFFB
 18610                           pclath	equ	0xFFA
 18611                           tblptru	equ	0xFF8
 18612                           tblptrh	equ	0xFF7
 18613                           tblptrl	equ	0xFF6
 18614                           tablat	equ	0xFF5
 18615                           prodh	equ	0xFF4
 18616                           prodl	equ	0xFF3
 18617                           intcon	equ	0xFF2
 18618                           intcon2	equ	0xFF1
 18619                           intcon3	equ	0xFF0
 18620                           postinc0	equ	0xFEE
 18621                           fsr0h	equ	0xFEA
 18622                           fsr0l	equ	0xFE9
 18623                           wreg	equ	0xFE8
 18624                           postdec1	equ	0xFE5
 18625                           fsr1h	equ	0xFE2
 18626                           fsr1l	equ	0xFE1
 18627                           bsr	equ	0xFE0
 18628                           indf2	equ	0xFDF
 18629                           postinc2	equ	0xFDE
 18630                           postdec2	equ	0xFDD
 18631                           plusw2	equ	0xFDB
 18632                           fsr2h	equ	0xFDA
 18633                           fsr2l	equ	0xFD9
 18634                           status	equ	0xFD8
 18635                           
 18636 ;; *************** function i2_RF_Enable *****************
 18637 ;; Defined at:
 18638 ;;		line 206 in file "RF.c"
 18639 ;; Parameters:    Size  Location     Type
 18640 ;;		None
 18641 ;; Auto vars:     Size  Location     Type
 18642 ;;		None
 18643 ;; Return value:  Size  Location     Type
 18644 ;;		None               void
 18645 ;; Registers used:
 18646 ;;		wreg, status,2, cstack
 18647 ;; Tracked objects:
 18648 ;;		On entry : 0/0
 18649 ;;		On exit  : 0/0
 18650 ;;		Unchanged: 0/0
 18651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18652 ;;      Params:         0       0       0       0       0
 18653 ;;      Locals:         0       0       0       0       0
 18654 ;;      Temps:          0       0       0       0       0
 18655 ;;      Totals:         0       0       0       0       0
 18656 ;;Total ram usage:        0 bytes
 18657 ;; Hardware stack levels used:    1
 18658 ;; Hardware stack levels required when called:    1
 18659 ;; This function calls:
 18660 ;;		i2_RF_DataInt
 18661 ;;		i2_TMR_Timer0Int
 18662 ;; This function is called by:
 18663 ;;		i2_IR_ResetData
 18664 ;; This function uses a non-reentrant model
 18665 ;;
 18666                           
 18667                           	psect	text114
 18668  001E6A                     __ptext114:
 18669                           	opt stack 0
 18670  001E6A                     i2_RF_Enable:
 18671                           	opt stack 13
 18672                           
 18673                           ;RF.c: 208: INTCON3bits.INT1IF = 0;
 18674                           
 18675                           ;incstack = 0
 18676  001E6A  90F0               	bcf	intcon3,0,c	;volatile
 18677                           
 18678                           ;RF.c: 209: INTCON3bits.INT2IF = 0;
 18679  001E6C  92F0               	bcf	intcon3,1,c	;volatile
 18680                           
 18681                           ;RF.c: 210: INTCONbits.TMR0IF = 0;
 18682  001E6E  94F2               	bcf	intcon,2,c	;volatile
 18683                           
 18684                           ;RF.c: 211: RF_DataInt(1);
 18685  001E70  0E01               	movlw	1
 18686  001E72  EC4E  F00E         	call	i2_RF_DataInt
 18687                           
 18688                           ;RF.c: 212: TMR_Timer0Int(1);
 18689  001E76  0E01               	movlw	1
 18690  001E78  EC0C  F00F         	call	i2_TMR_Timer0Int
 18691  001E7C  0012               	return		;funcret
 18692  001E7E                     __end_ofi2_RF_Enable:
 18693                           	opt stack 0
 18694                           pclatu	equ	0xFFB
 18695                           pclath	equ	0xFFA
 18696                           tblptru	equ	0xFF8
 18697                           tblptrh	equ	0xFF7
 18698                           tblptrl	equ	0xFF6
 18699                           tablat	equ	0xFF5
 18700                           prodh	equ	0xFF4
 18701                           prodl	equ	0xFF3
 18702                           intcon	equ	0xFF2
 18703                           intcon2	equ	0xFF1
 18704                           intcon3	equ	0xFF0
 18705                           postinc0	equ	0xFEE
 18706                           fsr0h	equ	0xFEA
 18707                           fsr0l	equ	0xFE9
 18708                           wreg	equ	0xFE8
 18709                           postdec1	equ	0xFE5
 18710                           fsr1h	equ	0xFE2
 18711                           fsr1l	equ	0xFE1
 18712                           bsr	equ	0xFE0
 18713                           indf2	equ	0xFDF
 18714                           postinc2	equ	0xFDE
 18715                           postdec2	equ	0xFDD
 18716                           plusw2	equ	0xFDB
 18717                           fsr2h	equ	0xFDA
 18718                           fsr2l	equ	0xFD9
 18719                           status	equ	0xFD8
 18720                           
 18721 ;; *************** function i2_TMR_Timer0Int *****************
 18722 ;; Defined at:
 18723 ;;		line 208 in file "TIMERS.c"
 18724 ;; Parameters:    Size  Location     Type
 18725 ;;  state           1    wreg     unsigned char 
 18726 ;; Auto vars:     Size  Location     Type
 18727 ;;  state           1    0[BANK0 ] unsigned char 
 18728 ;; Return value:  Size  Location     Type
 18729 ;;		None               void
 18730 ;; Registers used:
 18731 ;;		wreg, status,2
 18732 ;; Tracked objects:
 18733 ;;		On entry : 0/0
 18734 ;;		On exit  : 0/0
 18735 ;;		Unchanged: 0/0
 18736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18737 ;;      Params:         0       0       0       0       0
 18738 ;;      Locals:         0       1       0       0       0
 18739 ;;      Temps:          0       0       0       0       0
 18740 ;;      Totals:         0       1       0       0       0
 18741 ;;Total ram usage:        1 bytes
 18742 ;; Hardware stack levels used:    1
 18743 ;; This function calls:
 18744 ;;		Nothing
 18745 ;; This function is called by:
 18746 ;;		i2_RF_Enable
 18747 ;; This function uses a non-reentrant model
 18748 ;;
 18749                           
 18750                           	psect	text115
 18751  001E18                     __ptext115:
 18752                           	opt stack 0
 18753  001E18                     i2_TMR_Timer0Int:
 18754                           	opt stack 13
 18755                           
 18756                           ;incstack = 0
 18757                           ;i2TMR_Timer0Int@state stored from wreg
 18758  001E18  0100               	movlb	0	; () banked
 18759  001E1A  6F80               	movwf	i2TMR_Timer0Int@state& (0+255),b
 18760                           
 18761                           ;TIMERS.c: 210: if(state)
 18762  001E1C  0100               	movlb	0	; () banked
 18763  001E1E  5180               	movf	i2TMR_Timer0Int@state& (0+255),w,b
 18764  001E20  0100               	movlb	0	; () banked
 18765  001E22  B4D8               	btfsc	status,2,c
 18766  001E24  D002               	goto	i2l1086
 18767                           
 18768                           ; BSR set to: 0
 18769                           ;TIMERS.c: 211: {
 18770                           ;TIMERS.c: 213: INTCONbits.TMR0IE = 1;
 18771  001E26  8AF2               	bsf	intcon,5,c	;volatile
 18772                           
 18773                           ;TIMERS.c: 214: }
 18774  001E28  0012               	return	
 18775  001E2A                     i2l1086:
 18776                           
 18777                           ; BSR set to: 0
 18778                           ;TIMERS.c: 215: else
 18779                           ;TIMERS.c: 216: {
 18780                           ;TIMERS.c: 218: INTCONbits.TMR0IE = 0;
 18781  001E2A  9AF2               	bcf	intcon,5,c	;volatile
 18782  001E2C  0012               	return	
 18783  001E2E                     __end_ofi2_TMR_Timer0Int:
 18784                           	opt stack 0
 18785                           pclatu	equ	0xFFB
 18786                           pclath	equ	0xFFA
 18787                           tblptru	equ	0xFF8
 18788                           tblptrh	equ	0xFF7
 18789                           tblptrl	equ	0xFF6
 18790                           tablat	equ	0xFF5
 18791                           prodh	equ	0xFF4
 18792                           prodl	equ	0xFF3
 18793                           intcon	equ	0xFF2
 18794                           intcon2	equ	0xFF1
 18795                           intcon3	equ	0xFF0
 18796                           postinc0	equ	0xFEE
 18797                           fsr0h	equ	0xFEA
 18798                           fsr0l	equ	0xFE9
 18799                           wreg	equ	0xFE8
 18800                           postdec1	equ	0xFE5
 18801                           fsr1h	equ	0xFE2
 18802                           fsr1l	equ	0xFE1
 18803                           bsr	equ	0xFE0
 18804                           indf2	equ	0xFDF
 18805                           postinc2	equ	0xFDE
 18806                           postdec2	equ	0xFDD
 18807                           plusw2	equ	0xFDB
 18808                           fsr2h	equ	0xFDA
 18809                           fsr2l	equ	0xFD9
 18810                           status	equ	0xFD8
 18811                           
 18812 ;; *************** function i2_RF_DataInt *****************
 18813 ;; Defined at:
 18814 ;;		line 78 in file "RF.c"
 18815 ;; Parameters:    Size  Location     Type
 18816 ;;  state           1    wreg     unsigned char 
 18817 ;; Auto vars:     Size  Location     Type
 18818 ;;  state           1    0[BANK0 ] unsigned char 
 18819 ;; Return value:  Size  Location     Type
 18820 ;;		None               void
 18821 ;; Registers used:
 18822 ;;		wreg, status,2
 18823 ;; Tracked objects:
 18824 ;;		On entry : 0/0
 18825 ;;		On exit  : 0/0
 18826 ;;		Unchanged: 0/0
 18827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18828 ;;      Params:         0       0       0       0       0
 18829 ;;      Locals:         0       1       0       0       0
 18830 ;;      Temps:          0       0       0       0       0
 18831 ;;      Totals:         0       1       0       0       0
 18832 ;;Total ram usage:        1 bytes
 18833 ;; Hardware stack levels used:    1
 18834 ;; This function calls:
 18835 ;;		Nothing
 18836 ;; This function is called by:
 18837 ;;		i2_RF_Enable
 18838 ;; This function uses a non-reentrant model
 18839 ;;
 18840                           
 18841                           	psect	text116
 18842  001C9C                     __ptext116:
 18843                           	opt stack 0
 18844  001C9C                     i2_RF_DataInt:
 18845                           	opt stack 13
 18846                           
 18847                           ; BSR set to: 0
 18848                           ;incstack = 0
 18849                           ;i2RF_DataInt@state stored from wreg
 18850  001C9C  0100               	movlb	0	; () banked
 18851  001C9E  6F80               	movwf	i2RF_DataInt@state& (0+255),b
 18852                           
 18853                           ;RF.c: 80: if(state)
 18854  001CA0  0100               	movlb	0	; () banked
 18855  001CA2  5180               	movf	i2RF_DataInt@state& (0+255),w,b
 18856  001CA4  0100               	movlb	0	; () banked
 18857  001CA6  B4D8               	btfsc	status,2,c
 18858  001CA8  D003               	goto	i2l402
 18859                           
 18860                           ; BSR set to: 0
 18861                           ;RF.c: 81: {
 18862                           ;RF.c: 83: INTCON3bits.INT1E = 1;
 18863  001CAA  86F0               	bsf	intcon3,3,c	;volatile
 18864                           
 18865                           ;RF.c: 84: INTCON3bits.INT2E = 1;
 18866  001CAC  88F0               	bsf	intcon3,4,c	;volatile
 18867                           
 18868                           ;RF.c: 85: }
 18869  001CAE  0012               	return	
 18870  001CB0                     i2l402:
 18871                           
 18872                           ; BSR set to: 0
 18873                           ;RF.c: 86: else
 18874                           ;RF.c: 87: {
 18875                           ;RF.c: 89: INTCON3bits.INT1E = 0;
 18876  001CB0  96F0               	bcf	intcon3,3,c	;volatile
 18877                           
 18878                           ;RF.c: 90: INTCON3bits.INT2E = 0;
 18879  001CB2  98F0               	bcf	intcon3,4,c	;volatile
 18880  001CB4  0012               	return	
 18881  001CB6                     __end_ofi2_RF_DataInt:
 18882                           	opt stack 0
 18883                           pclatu	equ	0xFFB
 18884                           pclath	equ	0xFFA
 18885                           tblptru	equ	0xFF8
 18886                           tblptrh	equ	0xFF7
 18887                           tblptrl	equ	0xFF6
 18888                           tablat	equ	0xFF5
 18889                           prodh	equ	0xFF4
 18890                           prodl	equ	0xFF3
 18891                           intcon	equ	0xFF2
 18892                           intcon2	equ	0xFF1
 18893                           intcon3	equ	0xFF0
 18894                           postinc0	equ	0xFEE
 18895                           fsr0h	equ	0xFEA
 18896                           fsr0l	equ	0xFE9
 18897                           wreg	equ	0xFE8
 18898                           postdec1	equ	0xFE5
 18899                           fsr1h	equ	0xFE2
 18900                           fsr1l	equ	0xFE1
 18901                           bsr	equ	0xFE0
 18902                           indf2	equ	0xFDF
 18903                           postinc2	equ	0xFDE
 18904                           postdec2	equ	0xFDD
 18905                           plusw2	equ	0xFDB
 18906                           fsr2h	equ	0xFDA
 18907                           fsr2l	equ	0xFD9
 18908                           status	equ	0xFD8
 18909                           
 18910 ;; *************** function i2_FSH_WriteIntArray *****************
 18911 ;; Defined at:
 18912 ;;		line 146 in file "FLASH.c"
 18913 ;; Parameters:    Size  Location     Type
 18914 ;;  ConstArray      3    4[BANK0 ] PTR const unsigned int 
 18915 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 18916 ;;  Array           2    7[BANK0 ] PTR unsigned int 
 18917 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 18918 ;; Auto vars:     Size  Location     Type
 18919 ;;  FSH_WriteInt    1   11[BANK0 ] unsigned char 
 18920 ;; Return value:  Size  Location     Type
 18921 ;;		None               void
 18922 ;; Registers used:
 18923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18924 ;; Tracked objects:
 18925 ;;		On entry : 0/0
 18926 ;;		On exit  : 0/0
 18927 ;;		Unchanged: 0/0
 18928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 18929 ;;      Params:         0       5       0       0       0
 18930 ;;      Locals:         0       1       0       0       0
 18931 ;;      Temps:          0       2       0       0       0
 18932 ;;      Totals:         0       8       0       0       0
 18933 ;;Total ram usage:        8 bytes
 18934 ;; Hardware stack levels used:    1
 18935 ;; Hardware stack levels required when called:    1
 18936 ;; This function calls:
 18937 ;;		i2_FSH_AddressToBlock
 18938 ;; This function is called by:
 18939 ;;		i2_FSH_Write_IR_RF
 18940 ;; This function uses a non-reentrant model
 18941 ;;
 18942                           
 18943                           	psect	text117
 18944  0010AE                     __ptext117:
 18945                           	opt stack 0
 18946  0010AE                     i2_FSH_WriteIntArray:
 18947                           	opt stack 14
 18948                           
 18949                           ;FLASH.c: 148: unsigned char i;
 18950                           ;FLASH.c: 151: FSH_AddressToBlock(ConstArray);
 18951                           
 18952                           ; BSR set to: 0
 18953                           ;incstack = 0
 18954  0010AE  0100               	movlb	0	; () banked
 18955  0010B0  5184               	movf	i2FSH_WriteIntArray@ConstArray& (0+255),w,b
 18956  0010B2  0100               	movlb	0	; () banked
 18957  0010B4  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 18958  0010B6  0100               	movlb	0	; () banked
 18959  0010B8  5185               	movf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),w,b
 18960  0010BA  0100               	movlb	0	; () banked
 18961  0010BC  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 18962  0010BE  0100               	movlb	0	; () banked
 18963  0010C0  5186               	movf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),w,b
 18964  0010C2  0100               	movlb	0	; () banked
 18965  0010C4  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 18966  0010C6  0100               	movlb	0	; () banked
 18967  0010C8  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 18968  0010CA  ECCE  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 18969                           
 18970                           ;FLASH.c: 153: for(i = 0; i<32; i++)
 18971  0010CE  0E00               	movlw	0
 18972  0010D0  0100               	movlb	0	; () banked
 18973  0010D2  6F8B               	movwf	i2FSH_WriteIntArray@i& (0+255),b
 18974  0010D4                     i2l5889:
 18975                           
 18976                           ; BSR set to: 0
 18977  0010D4  0E1F               	movlw	31
 18978  0010D6  0100               	movlb	0	; () banked
 18979  0010D8  658B               	cpfsgt	i2FSH_WriteIntArray@i& (0+255),b
 18980  0010DA  D001               	goto	i2l5893
 18981  0010DC  D01F               	goto	i2l5901
 18982  0010DE                     i2l5893:
 18983                           
 18984                           ; BSR set to: 0
 18985                           ;FLASH.c: 154: {
 18986                           ;FLASH.c: 156: TABLAT = *Array;
 18987  0010DE  C087  FFD9         	movff	i2FSH_WriteIntArray@Array,fsr2l
 18988  0010E2  C088  FFDA         	movff	i2FSH_WriteIntArray@Array+1,fsr2h
 18989  0010E6  50DF               	movf	indf2,w,c
 18990  0010E8  6EF5               	movwf	tablat,c	;volatile
 18991  0010EA  000D               	tblwt		*+	;# 
 18992                           
 18993                           ;FLASH.c: 158: TABLAT = *Array >> 8;
 18994  0010EC  C087  FFD9         	movff	i2FSH_WriteIntArray@Array,fsr2l
 18995  0010F0  C088  FFDA         	movff	i2FSH_WriteIntArray@Array+1,fsr2h
 18996  0010F4  CFDE F089          	movff	postinc2,??i2_FSH_WriteIntArray
 18997  0010F8  CFDD F08A          	movff	postdec2,??i2_FSH_WriteIntArray+1
 18998  0010FC  C08A  F089         	movff	??i2_FSH_WriteIntArray+1,??i2_FSH_WriteIntArray
 18999  001100  0100               	movlb	0	; () banked
 19000  001102  6B8A               	clrf	(??i2_FSH_WriteIntArray+1)& (0+255),b
 19001  001104  0100               	movlb	0	; () banked
 19002  001106  5189               	movf	??i2_FSH_WriteIntArray& (0+255),w,b
 19003  001108  6EF5               	movwf	tablat,c	;volatile
 19004  00110A  000D               	tblwt		*+	;# 
 19005                           
 19006                           ;FLASH.c: 160: Array++;
 19007  00110C  0E02               	movlw	2
 19008  00110E  0100               	movlb	0	; () banked
 19009  001110  2787               	addwf	i2FSH_WriteIntArray@Array& (0+255),f,b
 19010  001112  0E00               	movlw	0
 19011  001114  2388               	addwfc	(i2FSH_WriteIntArray@Array+1)& (0+255),f,b
 19012                           
 19013                           ; BSR set to: 0
 19014  001116  0100               	movlb	0	; () banked
 19015  001118  2B8B               	incf	i2FSH_WriteIntArray@i& (0+255),f,b
 19016  00111A  D7DC               	goto	i2l5889
 19017  00111C                     i2l5901:
 19018                           
 19019                           ; BSR set to: 0
 19020                           ;FLASH.c: 161: }
 19021                           ;FLASH.c: 164: FSH_AddressToBlock(ConstArray);
 19022  00111C  0100               	movlb	0	; () banked
 19023  00111E  5184               	movf	i2FSH_WriteIntArray@ConstArray& (0+255),w,b
 19024  001120  0100               	movlb	0	; () banked
 19025  001122  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 19026  001124  0100               	movlb	0	; () banked
 19027  001126  5185               	movf	(i2FSH_WriteIntArray@ConstArray+1)& (0+255),w,b
 19028  001128  0100               	movlb	0	; () banked
 19029  00112A  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 19030  00112C  0100               	movlb	0	; () banked
 19031  00112E  5186               	movf	(i2FSH_WriteIntArray@ConstArray+2)& (0+255),w,b
 19032  001130  0100               	movlb	0	; () banked
 19033  001132  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 19034  001134  0100               	movlb	0	; () banked
 19035  001136  6B83               	clrf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 19036  001138  ECCE  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 19037                           
 19038                           ;FLASH.c: 166: EECON1bits.WRERR = 0;
 19039  00113C  96A6               	bcf	4006,3,c	;volatile
 19040                           
 19041                           ;FLASH.c: 167: EECON1bits.FREE = 0;
 19042  00113E  98A6               	bcf	4006,4,c	;volatile
 19043  001140  84A6               	bsf	4006,2,c	;# 
 19044  001142  9EF2               	bcf	intcon,7,c	;# 
 19045  001144  0E55               	movlw	85	;# 
 19046  001146  6EA7               	movwf	4007,c	;# 
 19047  001148  0EAA               	movlw	170	;# 
 19048  00114A  6EA7               	movwf	4007,c	;# 
 19049  00114C  82A6               	bsf	4006,1,c	;# 
 19050  00114E  0012               	return		;funcret
 19051  001150                     __end_ofi2_FSH_WriteIntArray:
 19052                           	opt stack 0
 19053                           pclatu	equ	0xFFB
 19054                           pclath	equ	0xFFA
 19055                           tblptru	equ	0xFF8
 19056                           tblptrh	equ	0xFF7
 19057                           tblptrl	equ	0xFF6
 19058                           tablat	equ	0xFF5
 19059                           prodh	equ	0xFF4
 19060                           prodl	equ	0xFF3
 19061                           intcon	equ	0xFF2
 19062                           intcon2	equ	0xFF1
 19063                           intcon3	equ	0xFF0
 19064                           postinc0	equ	0xFEE
 19065                           fsr0h	equ	0xFEA
 19066                           fsr0l	equ	0xFE9
 19067                           wreg	equ	0xFE8
 19068                           postdec1	equ	0xFE5
 19069                           fsr1h	equ	0xFE2
 19070                           fsr1l	equ	0xFE1
 19071                           bsr	equ	0xFE0
 19072                           indf2	equ	0xFDF
 19073                           postinc2	equ	0xFDE
 19074                           postdec2	equ	0xFDD
 19075                           plusw2	equ	0xFDB
 19076                           fsr2h	equ	0xFDA
 19077                           fsr2l	equ	0xFD9
 19078                           status	equ	0xFD8
 19079                           
 19080 ;; *************** function i2_FSH_VerifyWriteIntArray *****************
 19081 ;; Defined at:
 19082 ;;		line 183 in file "FLASH.c"
 19083 ;; Parameters:    Size  Location     Type
 19084 ;;  ConstArray      3    0[BANK0 ] PTR const unsigned int 
 19085 ;;		 -> IR_SavedTiming(256), RF_SavedTiming(256), 
 19086 ;;  Array           2    3[BANK0 ] PTR unsigned int 
 19087 ;;		 -> IR_DataTiming(256), RF_DataTiming(256), 
 19088 ;; Auto vars:     Size  Location     Type
 19089 ;;  FSH_VerifyWr    2    8[BANK0 ] unsigned int 
 19090 ;;  FSH_VerifyWr    1   11[BANK0 ] unsigned char 
 19091 ;;  FSH_VerifyWr    1   10[BANK0 ] unsigned char 
 19092 ;; Return value:  Size  Location     Type
 19093 ;;                  1    wreg      unsigned char 
 19094 ;; Registers used:
 19095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 19096 ;; Tracked objects:
 19097 ;;		On entry : 0/0
 19098 ;;		On exit  : 0/0
 19099 ;;		Unchanged: 0/0
 19100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 19101 ;;      Params:         0       5       0       0       0
 19102 ;;      Locals:         0       4       0       0       0
 19103 ;;      Temps:          0       3       0       0       0
 19104 ;;      Totals:         0      12       0       0       0
 19105 ;;Total ram usage:       12 bytes
 19106 ;; Hardware stack levels used:    1
 19107 ;; This function calls:
 19108 ;;		Nothing
 19109 ;; This function is called by:
 19110 ;;		i2_FSH_Write_IR_RF
 19111 ;; This function uses a non-reentrant model
 19112 ;;
 19113                           
 19114                           	psect	text118
 19115  001150                     __ptext118:
 19116                           	opt stack 0
 19117  001150                     i2_FSH_VerifyWriteIntArray:
 19118                           	opt stack 15
 19119                           
 19120                           ;FLASH.c: 185: unsigned char i;
 19121                           ;FLASH.c: 186: unsigned int data;
 19122                           ;FLASH.c: 187: unsigned char failcount = 0;
 19123                           
 19124                           ;incstack = 0
 19125  001150  0E00               	movlw	0
 19126  001152  0100               	movlb	0	; () banked
 19127  001154  6F8A               	movwf	i2FSH_VerifyWriteIntArray@failcount& (0+255),b
 19128                           
 19129                           ;FLASH.c: 189: for(i = 0; i<32; i++)
 19130  001156  0E00               	movlw	0
 19131  001158  0100               	movlb	0	; () banked
 19132  00115A  6F8B               	movwf	i2FSH_VerifyWriteIntArray@i& (0+255),b
 19133  00115C                     i2l5909:
 19134                           
 19135                           ; BSR set to: 0
 19136  00115C  0E1F               	movlw	31
 19137  00115E  0100               	movlb	0	; () banked
 19138  001160  658B               	cpfsgt	i2FSH_VerifyWriteIntArray@i& (0+255),b
 19139  001162  D001               	goto	i2l5913
 19140  001164  D037               	goto	i2l5921
 19141  001166                     i2l5913:
 19142                           
 19143                           ; BSR set to: 0
 19144                           ;FLASH.c: 190: {
 19145                           ;FLASH.c: 191: data = ConstArray[i];
 19146  001166  0100               	movlb	0	; () banked
 19147  001168  518B               	movf	i2FSH_VerifyWriteIntArray@i& (0+255),w,b
 19148  00116A  0D02               	mullw	2
 19149  00116C  50F3               	movf	prodl,w,c
 19150  00116E  0100               	movlb	0	; () banked
 19151  001170  2580               	addwf	i2FSH_VerifyWriteIntArray@ConstArray& (0+255),w,b
 19152  001172  0100               	movlb	0	; () banked
 19153  001174  6F85               	movwf	??i2_FSH_VerifyWriteIntArray& (0+255),b
 19154  001176  50F4               	movf	prodh,w,c
 19155  001178  0100               	movlb	0	; () banked
 19156  00117A  2181               	addwfc	(i2FSH_VerifyWriteIntArray@ConstArray+1)& (0+255),w,b
 19157  00117C  0100               	movlb	0	; () banked
 19158  00117E  6F86               	movwf	(??i2_FSH_VerifyWriteIntArray+1)& (0+255),b
 19159  001180  0E00               	movlw	0
 19160  001182  0100               	movlb	0	; () banked
 19161  001184  2182               	addwfc	(i2FSH_VerifyWriteIntArray@ConstArray+2)& (0+255),w,b
 19162  001186  0100               	movlb	0	; () banked
 19163  001188  6F87               	movwf	(??i2_FSH_VerifyWriteIntArray+2)& (0+255),b
 19164  00118A  C085  FFF6         	movff	??i2_FSH_VerifyWriteIntArray,tblptrl
 19165  00118E  C086  FFF7         	movff	??i2_FSH_VerifyWriteIntArray+1,tblptrh
 19166  001192  C087  FFF8         	movff	??i2_FSH_VerifyWriteIntArray+2,tblptru
 19167  001196  0009               	tblrd		*+
 19168  001198  CFF5 F088          	movff	tablat,i2FSH_VerifyWriteIntArray@data
 19169  00119C  000A               	tblrd		*-
 19170  00119E  CFF5 F089          	movff	tablat,i2FSH_VerifyWriteIntArray@data+1
 19171                           
 19172                           ; BSR set to: 0
 19173                           ;FLASH.c: 192: if(data != Array[i])
 19174  0011A2  0100               	movlb	0	; () banked
 19175  0011A4  518B               	movf	i2FSH_VerifyWriteIntArray@i& (0+255),w,b
 19176  0011A6  0D02               	mullw	2
 19177  0011A8  50F3               	movf	prodl,w,c
 19178  0011AA  0100               	movlb	0	; () banked
 19179  0011AC  2583               	addwf	i2FSH_VerifyWriteIntArray@Array& (0+255),w,b
 19180  0011AE  6ED9               	movwf	fsr2l,c
 19181  0011B0  50F4               	movf	prodh,w,c
 19182  0011B2  0100               	movlb	0	; () banked
 19183  0011B4  2184               	addwfc	(i2FSH_VerifyWriteIntArray@Array+1)& (0+255),w,b
 19184  0011B6  6EDA               	movwf	fsr2h,c
 19185  0011B8  0100               	movlb	0	; () banked
 19186  0011BA  5188               	movf	i2FSH_VerifyWriteIntArray@data& (0+255),w,b
 19187  0011BC  18DE               	xorwf	postinc2,w,c
 19188  0011BE  E105               	bnz	i2u621_40
 19189  0011C0  0100               	movlb	0	; () banked
 19190  0011C2  5189               	movf	(i2FSH_VerifyWriteIntArray@data+1)& (0+255),w,b
 19191  0011C4  18DE               	xorwf	postinc2,w,c
 19192  0011C6  B4D8               	btfsc	status,2,c
 19193  0011C8  D002               	goto	i2l1199
 19194  0011CA                     i2u621_40:
 19195                           
 19196                           ; BSR set to: 0
 19197                           ;FLASH.c: 193: {
 19198                           ;FLASH.c: 194: failcount++;
 19199  0011CA  0100               	movlb	0	; () banked
 19200  0011CC  2B8A               	incf	i2FSH_VerifyWriteIntArray@failcount& (0+255),f,b
 19201  0011CE                     i2l1199:
 19202                           
 19203                           ; BSR set to: 0
 19204  0011CE  0100               	movlb	0	; () banked
 19205  0011D0  2B8B               	incf	i2FSH_VerifyWriteIntArray@i& (0+255),f,b
 19206  0011D2  D7C4               	goto	i2l5909
 19207  0011D4                     i2l5921:
 19208                           
 19209                           ; BSR set to: 0
 19210                           ;FLASH.c: 195: }
 19211                           ;FLASH.c: 196: }
 19212                           ;FLASH.c: 197: if(failcount)
 19213  0011D4  0100               	movlb	0	; () banked
 19214  0011D6  518A               	movf	i2FSH_VerifyWriteIntArray@failcount& (0+255),w,b
 19215  0011D8  0100               	movlb	0	; () banked
 19216  0011DA  B4D8               	btfsc	status,2,c
 19217  0011DC  D002               	goto	i2l5927
 19218                           
 19219                           ; BSR set to: 0
 19220                           ;FLASH.c: 198: {
 19221                           ;FLASH.c: 199: return 0;
 19222  0011DE  0E00               	movlw	0
 19223                           
 19224                           ; BSR set to: 0
 19225  0011E0  0012               	return	
 19226  0011E2                     i2l5927:
 19227                           
 19228                           ; BSR set to: 0
 19229                           ;FLASH.c: 200: }
 19230                           ;FLASH.c: 201: return 1;
 19231  0011E2  0E01               	movlw	1
 19232  0011E4  0012               	return	
 19233  0011E6                     __end_ofi2_FSH_VerifyWriteIntArray:
 19234                           	opt stack 0
 19235                           pclatu	equ	0xFFB
 19236                           pclath	equ	0xFFA
 19237                           tblptru	equ	0xFF8
 19238                           tblptrh	equ	0xFF7
 19239                           tblptrl	equ	0xFF6
 19240                           tablat	equ	0xFF5
 19241                           prodh	equ	0xFF4
 19242                           prodl	equ	0xFF3
 19243                           intcon	equ	0xFF2
 19244                           intcon2	equ	0xFF1
 19245                           intcon3	equ	0xFF0
 19246                           postinc0	equ	0xFEE
 19247                           fsr0h	equ	0xFEA
 19248                           fsr0l	equ	0xFE9
 19249                           wreg	equ	0xFE8
 19250                           postdec1	equ	0xFE5
 19251                           fsr1h	equ	0xFE2
 19252                           fsr1l	equ	0xFE1
 19253                           bsr	equ	0xFE0
 19254                           indf2	equ	0xFDF
 19255                           postinc2	equ	0xFDE
 19256                           postdec2	equ	0xFDD
 19257                           plusw2	equ	0xFDB
 19258                           fsr2h	equ	0xFDA
 19259                           fsr2l	equ	0xFD9
 19260                           status	equ	0xFD8
 19261                           
 19262 ;; *************** function i2_FSH_EraseBlock *****************
 19263 ;; Defined at:
 19264 ;;		line 98 in file "FLASH.c"
 19265 ;; Parameters:    Size  Location     Type
 19266 ;;  Address         4    4[BANK0 ] unsigned long 
 19267 ;; Auto vars:     Size  Location     Type
 19268 ;;  FSH_EraseBlo    4    0        unsigned long 
 19269 ;;  FSH_EraseBlo    1   10[BANK0 ] unsigned char 
 19270 ;;  FSH_EraseBlo    1    9[BANK0 ] unsigned char 
 19271 ;;  FSH_EraseBlo    1    8[BANK0 ] unsigned char 
 19272 ;; Return value:  Size  Location     Type
 19273 ;;		None               void
 19274 ;; Registers used:
 19275 ;;		wreg, status,2, status,0, cstack
 19276 ;; Tracked objects:
 19277 ;;		On entry : 0/0
 19278 ;;		On exit  : 0/0
 19279 ;;		Unchanged: 0/0
 19280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 19281 ;;      Params:         0       4       0       0       0
 19282 ;;      Locals:         0       3       0       0       0
 19283 ;;      Temps:          0       0       0       0       0
 19284 ;;      Totals:         0       7       0       0       0
 19285 ;;Total ram usage:        7 bytes
 19286 ;; Hardware stack levels used:    1
 19287 ;; Hardware stack levels required when called:    1
 19288 ;; This function calls:
 19289 ;;		i2_FSH_AddressToBlock
 19290 ;; This function is called by:
 19291 ;;		i2_FSH_Write_IR_RF
 19292 ;; This function uses a non-reentrant model
 19293 ;;
 19294                           
 19295                           	psect	text119
 19296  0013EA                     __ptext119:
 19297                           	opt stack 0
 19298  0013EA                     i2_FSH_EraseBlock:
 19299                           	opt stack 14
 19300                           
 19301                           ;FLASH.c: 100: unsigned char highint = INTCONbits.GIE;
 19302                           
 19303                           ; BSR set to: 0
 19304                           ;incstack = 0
 19305  0013EA  0E00               	movlw	0
 19306  0013EC  BEF2               	btfsc	intcon,7,c	;volatile
 19307  0013EE  0E01               	movlw	1
 19308  0013F0  0100               	movlb	0	; () banked
 19309  0013F2  6F88               	movwf	i2FSH_EraseBlock@highint& (0+255),b
 19310                           
 19311                           ;FLASH.c: 101: unsigned char lowint = INTCONbits.PEIE;
 19312  0013F4  0E00               	movlw	0
 19313  0013F6  BCF2               	btfsc	intcon,6,c	;volatile
 19314  0013F8  0E01               	movlw	1
 19315  0013FA  0100               	movlb	0	; () banked
 19316  0013FC  6F89               	movwf	i2FSH_EraseBlock@lowint& (0+255),b
 19317                           
 19318                           ; BSR set to: 0
 19319                           ;FLASH.c: 102: unsigned char WriteTries;
 19320                           ;FLASH.c: 103: unsigned long i;
 19321                           ;FLASH.c: 105: INTCONbits.GIE = 0;
 19322  0013FE  9EF2               	bcf	intcon,7,c	;volatile
 19323                           
 19324                           ; BSR set to: 0
 19325                           ;FLASH.c: 106: INTCONbits.PEIE = 0;
 19326  001400  9CF2               	bcf	intcon,6,c	;volatile
 19327  001402                     i2l5865:
 19328                           
 19329                           ; BSR set to: 0
 19330                           ;FLASH.c: 109: FSH_AddressToBlock(Address);
 19331  001402  C084  F080         	movff	i2FSH_EraseBlock@Address,i2FSH_AddressToBlock@Address
 19332  001406  C085  F081         	movff	i2FSH_EraseBlock@Address+1,i2FSH_AddressToBlock@Address+1
 19333  00140A  C086  F082         	movff	i2FSH_EraseBlock@Address+2,i2FSH_AddressToBlock@Address+2
 19334  00140E  C087  F083         	movff	i2FSH_EraseBlock@Address+3,i2FSH_AddressToBlock@Address+3
 19335  001412  ECCE  F00B         	call	i2_FSH_AddressToBlock	;wreg free
 19336                           
 19337                           ;FLASH.c: 111: WriteTries = 1;
 19338  001416  0E01               	movlw	1
 19339  001418  0100               	movlb	0	; () banked
 19340  00141A  6F8A               	movwf	i2FSH_EraseBlock@WriteTries& (0+255),b
 19341  00141C  84A6               	bsf	4006,2,c	;# 
 19342  00141E  88A6               	bsf	4006,4,c	;# 
 19343  001420  9EF2               	bcf	intcon,7,c	;# 
 19344  001422  0E55               	movlw	85	;# 
 19345  001424  6EA7               	movwf	4007,c	;# 
 19346  001426  0EAA               	movlw	170	;# 
 19347  001428  6EA7               	movwf	4007,c	;# 
 19348  00142A  82A6               	bsf	4006,1,c	;# 
 19349                           
 19350                           ;FLASH.c: 122: if(EECON1bits.WRERR)
 19351  00142C  A6A6               	btfss	4006,3,c	;volatile
 19352  00142E  D007               	goto	i2l5877
 19353                           
 19354                           ;FLASH.c: 123: {
 19355                           ;FLASH.c: 124: WriteTries++;
 19356  001430  0100               	movlb	0	; () banked
 19357  001432  2B8A               	incf	i2FSH_EraseBlock@WriteTries& (0+255),f,b
 19358                           
 19359                           ; BSR set to: 0
 19360                           ;FLASH.c: 125: if(WriteTries < 10)
 19361  001434  0E0A               	movlw	10
 19362  001436  0100               	movlb	0	; () banked
 19363  001438  618A               	cpfslt	i2FSH_EraseBlock@WriteTries& (0+255),b
 19364  00143A  D001               	goto	i2l5877
 19365  00143C  D7E2               	goto	i2l5865
 19366  00143E                     i2l5877:
 19367                           
 19368                           ;FLASH.c: 128: }
 19369                           ;FLASH.c: 129: }
 19370                           ;FLASH.c: 131: if(highint)
 19371  00143E  0100               	movlb	0	; () banked
 19372  001440  5188               	movf	i2FSH_EraseBlock@highint& (0+255),w,b
 19373  001442  0100               	movlb	0	; () banked
 19374  001444  A4D8               	btfss	status,2,c
 19375                           
 19376                           ; BSR set to: 0
 19377                           ;FLASH.c: 132: {
 19378                           ;FLASH.c: 133: INTCONbits.GIE = 1;
 19379  001446  8EF2               	bsf	intcon,7,c	;volatile
 19380                           
 19381                           ; BSR set to: 0
 19382                           ;FLASH.c: 134: }
 19383                           ;FLASH.c: 135: if(lowint)
 19384                           
 19385                           ; BSR set to: 0
 19386  001448  0100               	movlb	0	; () banked
 19387  00144A  5189               	movf	i2FSH_EraseBlock@lowint& (0+255),w,b
 19388  00144C  0100               	movlb	0	; () banked
 19389  00144E  B4D8               	btfsc	status,2,c
 19390  001450  0012               	return	
 19391                           
 19392                           ; BSR set to: 0
 19393                           ;FLASH.c: 136: {
 19394                           ;FLASH.c: 137: INTCONbits.PEIE = 1;
 19395  001452  8CF2               	bsf	intcon,6,c	;volatile
 19396  001454  0012               	return	
 19397  001456                     __end_ofi2_FSH_EraseBlock:
 19398                           	opt stack 0
 19399                           pclatu	equ	0xFFB
 19400                           pclath	equ	0xFFA
 19401                           tblptru	equ	0xFF8
 19402                           tblptrh	equ	0xFF7
 19403                           tblptrl	equ	0xFF6
 19404                           tablat	equ	0xFF5
 19405                           prodh	equ	0xFF4
 19406                           prodl	equ	0xFF3
 19407                           intcon	equ	0xFF2
 19408                           intcon2	equ	0xFF1
 19409                           intcon3	equ	0xFF0
 19410                           postinc0	equ	0xFEE
 19411                           fsr0h	equ	0xFEA
 19412                           fsr0l	equ	0xFE9
 19413                           wreg	equ	0xFE8
 19414                           postdec1	equ	0xFE5
 19415                           fsr1h	equ	0xFE2
 19416                           fsr1l	equ	0xFE1
 19417                           bsr	equ	0xFE0
 19418                           indf2	equ	0xFDF
 19419                           postinc2	equ	0xFDE
 19420                           postdec2	equ	0xFDD
 19421                           plusw2	equ	0xFDB
 19422                           fsr2h	equ	0xFDA
 19423                           fsr2l	equ	0xFD9
 19424                           status	equ	0xFD8
 19425                           
 19426 ;; *************** function i2_FSH_AddressToBlock *****************
 19427 ;; Defined at:
 19428 ;;		line 503 in file "FLASH.c"
 19429 ;; Parameters:    Size  Location     Type
 19430 ;;  Address         4    0[BANK0 ] unsigned long 
 19431 ;; Auto vars:     Size  Location     Type
 19432 ;;		None
 19433 ;; Return value:  Size  Location     Type
 19434 ;;		None               void
 19435 ;; Registers used:
 19436 ;;		wreg, status,2, status,0
 19437 ;; Tracked objects:
 19438 ;;		On entry : 0/0
 19439 ;;		On exit  : 0/0
 19440 ;;		Unchanged: 0/0
 19441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3
 19442 ;;      Params:         0       4       0       0       0
 19443 ;;      Locals:         0       0       0       0       0
 19444 ;;      Temps:          0       0       0       0       0
 19445 ;;      Totals:         0       4       0       0       0
 19446 ;;Total ram usage:        4 bytes
 19447 ;; Hardware stack levels used:    1
 19448 ;; This function calls:
 19449 ;;		Nothing
 19450 ;; This function is called by:
 19451 ;;		i2_FSH_EraseBlock
 19452 ;;		i2_FSH_WriteIntArray
 19453 ;;		i2_FSH_Write_IR_RF
 19454 ;; This function uses a non-reentrant model
 19455 ;;
 19456                           
 19457                           	psect	text120
 19458  00179C                     __ptext120:
 19459                           	opt stack 0
 19460  00179C                     i2_FSH_AddressToBlock:
 19461                           	opt stack 14
 19462                           
 19463                           ;FLASH.c: 505: if(Address > 0x3600)
 19464                           
 19465                           ; BSR set to: 0
 19466                           ;incstack = 0
 19467  00179C  0100               	movlb	0	; () banked
 19468  00179E  5183               	movf	(i2FSH_AddressToBlock@Address+3)& (0+255),w,b
 19469  0017A0  0100               	movlb	0	; () banked
 19470  0017A2  1182               	iorwf	(i2FSH_AddressToBlock@Address+2)& (0+255),w,b
 19471  0017A4  E107               	bnz	i2u546_40
 19472  0017A6  0100               	movlb	0	; () banked
 19473  0017A8  0580               	decf	i2FSH_AddressToBlock@Address& (0+255),w,b
 19474  0017AA  0E36               	movlw	54
 19475  0017AC  0100               	movlb	0	; () banked
 19476  0017AE  5981               	subwfb	(i2FSH_AddressToBlock@Address+1)& (0+255),w,b
 19477  0017B0  A0D8               	btfss	status,0,c
 19478  0017B2  D009               	goto	i2l5425
 19479  0017B4                     i2u546_40:
 19480                           
 19481                           ; BSR set to: 0
 19482                           ;FLASH.c: 506: {
 19483                           ;FLASH.c: 507: Address = 0x3600;
 19484  0017B4  0E00               	movlw	0
 19485  0017B6  0100               	movlb	0	; () banked
 19486  0017B8  6F80               	movwf	i2FSH_AddressToBlock@Address& (0+255),b
 19487  0017BA  0E36               	movlw	54
 19488  0017BC  6F81               	movwf	(i2FSH_AddressToBlock@Address+1)& (0+255),b
 19489  0017BE  0E00               	movlw	0
 19490  0017C0  6F82               	movwf	(i2FSH_AddressToBlock@Address+2)& (0+255),b
 19491  0017C2  0E00               	movlw	0
 19492  0017C4  6F83               	movwf	(i2FSH_AddressToBlock@Address+3)& (0+255),b
 19493  0017C6                     i2l5425:
 19494                           
 19495                           ; BSR set to: 0
 19496                           ;FLASH.c: 508: }
 19497                           ;FLASH.c: 509: TBLPTRU = (Address & 0x002F0000) >> 16;
 19498  0017C6  0100               	movlb	0	; () banked
 19499  0017C8  5182               	movf	(i2FSH_AddressToBlock@Address+2)& (0+255),w,b
 19500  0017CA  0B2F               	andlw	47
 19501  0017CC  6EF8               	movwf	tblptru,c	;volatile
 19502                           
 19503                           ; BSR set to: 0
 19504                           ;FLASH.c: 510: TBLPTRH = (Address & 0x0000FF00) >> 8;
 19505  0017CE  C081  FFF7         	movff	i2FSH_AddressToBlock@Address+1,tblptrh	;volatile
 19506                           
 19507                           ; BSR set to: 0
 19508                           ;FLASH.c: 511: TBLPTRL = (Address & 0x000000FF);
 19509  0017D2  C080  FFF6         	movff	i2FSH_AddressToBlock@Address,tblptrl	;volatile
 19510                           
 19511                           ; BSR set to: 0
 19512  0017D6  0012               	return		;funcret
 19513  0017D8                     __end_ofi2_FSH_AddressToBlock:
 19514                           	opt stack 0
 19515                           pclatu	equ	0xFFB
 19516                           pclath	equ	0xFFA
 19517                           tblptru	equ	0xFF8
 19518                           tblptrh	equ	0xFF7
 19519                           tblptrl	equ	0xFF6
 19520                           tablat	equ	0xFF5
 19521                           prodh	equ	0xFF4
 19522                           prodl	equ	0xFF3
 19523                           intcon	equ	0xFF2
 19524                           intcon2	equ	0xFF1
 19525                           intcon3	equ	0xFF0
 19526                           postinc0	equ	0xFEE
 19527                           fsr0h	equ	0xFEA
 19528                           fsr0l	equ	0xFE9
 19529                           wreg	equ	0xFE8
 19530                           postdec1	equ	0xFE5
 19531                           fsr1h	equ	0xFE2
 19532                           fsr1l	equ	0xFE1
 19533                           bsr	equ	0xFE0
 19534                           indf2	equ	0xFDF
 19535                           postinc2	equ	0xFDE
 19536                           postdec2	equ	0xFDD
 19537                           plusw2	equ	0xFDB
 19538                           fsr2h	equ	0xFDA
 19539                           fsr2l	equ	0xFD9
 19540                           status	equ	0xFD8
 19541                           pclatu	equ	0xFFB
 19542                           pclath	equ	0xFFA
 19543                           tblptru	equ	0xFF8
 19544                           tblptrh	equ	0xFF7
 19545                           tblptrl	equ	0xFF6
 19546                           tablat	equ	0xFF5
 19547                           prodh	equ	0xFF4
 19548                           prodl	equ	0xFF3
 19549                           intcon	equ	0xFF2
 19550                           intcon2	equ	0xFF1
 19551                           intcon3	equ	0xFF0
 19552                           postinc0	equ	0xFEE
 19553                           fsr0h	equ	0xFEA
 19554                           fsr0l	equ	0xFE9
 19555                           wreg	equ	0xFE8
 19556                           postdec1	equ	0xFE5
 19557                           fsr1h	equ	0xFE2
 19558                           fsr1l	equ	0xFE1
 19559                           bsr	equ	0xFE0
 19560                           indf2	equ	0xFDF
 19561                           postinc2	equ	0xFDE
 19562                           postdec2	equ	0xFDD
 19563                           plusw2	equ	0xFDB
 19564                           fsr2h	equ	0xFDA
 19565                           fsr2l	equ	0xFD9
 19566                           status	equ	0xFD8
 19567                           
 19568                           	psect	param0
 19569  0000                     pclatu	equ	0xFFB
 19570                           pclath	equ	0xFFA
 19571                           tblptru	equ	0xFF8
 19572                           tblptrh	equ	0xFF7
 19573                           tblptrl	equ	0xFF6
 19574                           tablat	equ	0xFF5
 19575                           prodh	equ	0xFF4
 19576                           prodl	equ	0xFF3
 19577                           intcon	equ	0xFF2
 19578                           intcon2	equ	0xFF1
 19579                           intcon3	equ	0xFF0
 19580                           postinc0	equ	0xFEE
 19581                           fsr0h	equ	0xFEA
 19582                           fsr0l	equ	0xFE9
 19583                           wreg	equ	0xFE8
 19584                           postdec1	equ	0xFE5
 19585                           fsr1h	equ	0xFE2
 19586                           fsr1l	equ	0xFE1
 19587                           bsr	equ	0xFE0
 19588                           indf2	equ	0xFDF
 19589                           postinc2	equ	0xFDE
 19590                           postdec2	equ	0xFDD
 19591                           plusw2	equ	0xFDB
 19592                           fsr2h	equ	0xFDA
 19593                           fsr2l	equ	0xFD9
 19594                           status	equ	0xFD8
 19595                           
 19596                           	psect	temp
 19597  000066                     btemp:
 19598                           	opt stack 0
 19599  000066                     	ds	1
 19600  0000                     int$flags	set	btemp
 19601                           pclatu	equ	0xFFB
 19602                           pclath	equ	0xFFA
 19603                           tblptru	equ	0xFF8
 19604                           tblptrh	equ	0xFF7
 19605                           tblptrl	equ	0xFF6
 19606                           tablat	equ	0xFF5
 19607                           prodh	equ	0xFF4
 19608                           prodl	equ	0xFF3
 19609                           intcon	equ	0xFF2
 19610                           intcon2	equ	0xFF1
 19611                           intcon3	equ	0xFF0
 19612                           postinc0	equ	0xFEE
 19613                           fsr0h	equ	0xFEA
 19614                           fsr0l	equ	0xFE9
 19615                           wreg	equ	0xFE8
 19616                           postdec1	equ	0xFE5
 19617                           fsr1h	equ	0xFE2
 19618                           fsr1l	equ	0xFE1
 19619                           bsr	equ	0xFE0
 19620                           indf2	equ	0xFDF
 19621                           postinc2	equ	0xFDE
 19622                           postdec2	equ	0xFDD
 19623                           plusw2	equ	0xFDB
 19624                           fsr2h	equ	0xFDA
 19625                           fsr2l	equ	0xFD9
 19626                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    66
    Data        7
    BSS         680
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     77     101
    BANK0           128     57      80
    BANK1           256     32     160
    BANK2           256      0     256
    BANK3           256      0     256

Pointer List with Targets:

    FSH_VerifyWriteIntArray@Array	PTR unsigned int  size(2) Largest target is 256
		 -> IR_DataTiming(BANK2[256]), RF_DataTiming(BANK3[256]), 

    FSH_VerifyWriteIntArray@ConstArray	PTR const unsigned int  size(3) Largest target is 256
		 -> IR_SavedTiming(CODE[256]), RF_SavedTiming(CODE[256]), 

    FSH_WriteIntArray@Array	PTR unsigned int  size(2) Largest target is 256
		 -> IR_DataTiming(BANK2[256]), RF_DataTiming(BANK3[256]), 

    FSH_WriteIntArray@ConstArray	PTR const unsigned int  size(3) Largest target is 256
		 -> IR_SavedTiming(CODE[256]), RF_SavedTiming(CODE[256]), 

    MSC_BufferCopyIntConst@from	PTR const unsigned int  size(3) Largest target is 256
		 -> IR_SavedTiming(CODE[256]), RF_SavedTiming(CODE[256]), 

    MSC_BufferCopyIntConst@to	PTR unsigned int  size(2) Largest target is 256
		 -> IR_DataTiming(BANK2[256]), RF_DataTiming(BANK3[256]), 

    MSC_CleanBufferInt@data	PTR unsigned int  size(2) Largest target is 256
		 -> IR_DataTiming(BANK2[256]), RF_DataTiming(BANK3[256]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _high_isr in COMRAM

    None.

Critical Paths under _low_isr in COMRAM

    _low_isr->_IR_CheckCode
    _TMR_Timer2Start->_TMR_ResetTimer2
    _TMR_ResetTimer2->i1_TMR_Timer2
    _TMR_Timer1Start->i1_TMR_ResetTimer1
    i1_TMR_ResetTimer1->i1_TMR_Timer1
    _RF_Disable->i1_RF_DataInt
    _RF_Disable->i1_TMR_Timer0
    _RF_Disable->i1_TMR_Timer0Int
    _IR_CleanBuffer->i1_MSC_CleanBufferInt
    _IR_CheckCode->i1_IR_LoadCode
    i1___ftge->i1___lwtoft
    i1_IR_LoadCode->i1___ftmul
    _FSH_Write_IR_RF->_MSC_BufferCopyIntConst
    _MSC_BufferCopyIntConst->i1_MSC_CleanBufferInt
    _RF_Enable->i1_RF_DataInt
    _RF_Enable->i1_TMR_Timer0Int
    _FSH_WriteIntArray->_FSH_AddressToBlock
    _FSH_EraseBlock->_FSH_AddressToBlock
    _ADC_CalculateVoltage->i1___ftmul
    i1___lwtoft->i1___ftpack
    i1___ftmul->___ftdiv
    ___ftdiv->i1___lwtoft

Critical Paths under _main in BANK0

    None.

Critical Paths under _high_isr in BANK0

    _high_isr->_RF_CheckCode
    _TMR_Timer0Start->i2_TMR_ResetTimer0
    i2_TMR_ResetTimer0->i2_TMR_Timer0
    _RF_CheckCode->i2_FSH_Write_IR_RF
    _RF_CheckCode->i2_RF_LoadCode
    i2___ftge->i2___lwtoft
    i2_RF_LoadCode->i2___ftmul
    i2___lwtoft->i2___ftpack
    i2___ftmul->i2___lwtoft
    i2_FSH_Write_IR_RF->i2_MSC_BufferCopyIntConst
    i2_MSC_BufferCopyIntConst->i2_MSC_CleanBufferInt
    i2_RF_Enable->i2_RF_DataInt
    i2_RF_Enable->i2_TMR_Timer0Int
    i2_FSH_WriteIntArray->i2_FSH_AddressToBlock
    i2_FSH_EraseBlock->i2_FSH_AddressToBlock

Critical Paths under _low_isr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_IR_LoadCode
    _main->_RF_LoadCode
    _SYS_EnableInt->_BUT_ReadButton
    _SYS_EnableInt->_IR_ReadReceiver
    _RF_LoadCode->___ftmul
    _MTR_Rotate->_MSC_DelayMS
    _MSC_BlinkLED->_MSC_DelayMS
    _MSC_DelayMS->_MSC_DelayNOP
    _InitTimer2->_TMR_Timer2
    _InitTimer2->_TMR_Timer2Int
    _InitTimer1->_TMR_Timer1Function
    _TMR_Timer1Function->_TMR_ResetTimer1
    _TMR_ResetTimer1->_TMR_Timer1
    _InitTimer0->_TMR_ResetTimer0
    _TMR_ResetTimer0->_TMR_Timer0
    _InitRF->_MSC_CleanBufferInt
    _InitLDO->_LDO_Pass
    _InitIR->_MSC_CleanBufferInt
    _InitButton->_BUT_IR_PinChangeInt
    _InitButton->_BUT_ReadButton
    _InitADC->_ADC_ConversionInt
    _InitADC->_ADC_Module
    _IR_LoadCode->___ftmul
    ___lwtoft->___ftpack
    ___ftmul->___lwtoft

Critical Paths under _high_isr in BANK1

    None.

Critical Paths under _low_isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _high_isr in BANK2

    None.

Critical Paths under _low_isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _high_isr in BANK3

    None.

Critical Paths under _low_isr in BANK3

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   26720
                          _ADC_Start
                        _IR_LoadCode
                           _Init_App
                        _Init_System
                       _MSC_BlinkLED
                        _MSC_DelayMS
                         _MTR_Rotate
                        _RF_LoadCode
                  _SYS_ActivityTimer
            _SYS_ConfigureOscillator
                     _SYS_DisableInt
                      _SYS_EnableInt
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6    1298
                                              0 BANK1      9     3      6
 ---------------------------------------------------------------------------------
 (1) _SYS_EnableInt                                        0     0      0      68
                     _BUT_ReadButton
                    _IR_ReadReceiver
 ---------------------------------------------------------------------------------
 (1) _SYS_DisableInt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYS_ConfigureOscillator                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYS_ActivityTimer                                    0     0      0       0
             _SYS_ActivityTimerReset
                          _SYS_Sleep
 ---------------------------------------------------------------------------------
 (2) _SYS_Sleep                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SYS_ActivityTimerReset                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_LoadCode                                          6     6      0    9993
                                             26 BANK1      6     6      0
               _RF_CalculateCodesize
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) _RF_CalculateCodesize                                 1     1      0     130
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MTR_Rotate                                           0     0      0     737
                        _MSC_DelayMS
                            _MTR_IN1
                            _MTR_IN2
 ---------------------------------------------------------------------------------
 (2) _MTR_IN2                                              1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _MTR_IN1                                              1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _MSC_BlinkLED                                         8     4      4    1544
                                             13 BANK1      8     4      4
                        _MSC_DelayMS
 ---------------------------------------------------------------------------------
 (2) _MSC_DelayMS                                          9     5      4     675
                                              4 BANK1      9     5      4
                       _MSC_DelayNOP
 ---------------------------------------------------------------------------------
 (3) _MSC_DelayNOP                                         4     2      2     145
                                              0 BANK1      4     2      2
 ---------------------------------------------------------------------------------
 (1) _Init_System                                          0     0      0    2412
                     _BUT_ReadButton
                    _IR_ReadReceiver
                            _InitADC
                         _InitButton
                          _InitFlash
                             _InitIR
                            _InitLDO
                          _InitMOTOR
                             _InitRF
                         _InitTimers
 ---------------------------------------------------------------------------------
 (2) _InitTimers                                           0     0      0     474
                         _InitTimer0
                         _InitTimer1
                         _InitTimer2
 ---------------------------------------------------------------------------------
 (3) _InitTimer2                                           0     0      0      62
                         _TMR_Timer2
                      _TMR_Timer2Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2Int                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer2                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer1                                           0     0      0     285
                    _TMR_ResetTimer1
                         _TMR_Timer1
                 _TMR_Timer1Function
                      _TMR_Timer1Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer1Int                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer1Function                                   1     1      0     158
                                              2 BANK1      1     1      0
                    _TMR_ResetTimer1
                         _TMR_Timer1
                      _TMR_Timer1Osc
 ---------------------------------------------------------------------------------
 (5) _TMR_Timer1Osc                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (5) _TMR_ResetTimer1                                      1     1      0      65
                                              1 BANK1      1     1      0
                         _TMR_Timer1
 ---------------------------------------------------------------------------------
 (5) _TMR_Timer1                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _InitTimer0                                           0     0      0     127
                    _TMR_ResetTimer0
                         _TMR_Timer0
                      _TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer0Int                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (4) _TMR_ResetTimer0                                      1     1      0      65
                                              1 BANK1      1     1      0
                         _TMR_Timer0
 ---------------------------------------------------------------------------------
 (4) _TMR_Timer0                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitRF                                               0     0      0     949
                 _MSC_CleanBufferInt
                         _RF_DataInt
                        _RF_Receiver
                    _RF_SetBandwidth
                      _RF_SetSquelch
 ---------------------------------------------------------------------------------
 (3) _RF_SetSquelch                                        1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_SetBandwidth                                      1     1      0      93
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_Receiver                                          1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _RF_DataInt                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitMOTOR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitLDO                                              0     0      0      31
                           _LDO_Pass
 ---------------------------------------------------------------------------------
 (3) _LDO_Pass                                             1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitIR                                               0     0      0     763
                 _MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (3) _MSC_CleanBufferInt                                   6     2      4     763
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) _InitFlash                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _InitButton                                           0     0      0      65
                _BUT_IR_PinChangeInt
                     _BUT_ReadButton
 ---------------------------------------------------------------------------------
 (2) _BUT_ReadButton                                       1     1      0      34
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _BUT_IR_PinChangeInt                                  1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitADC                                              0     0      0      62
                  _ADC_ChangeChannel
                  _ADC_ConversionInt
                         _ADC_Module
 ---------------------------------------------------------------------------------
 (3) _ADC_Module                                           1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionInt                                    1     1      0      31
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ChangeChannel                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IR_ReadReceiver                                      1     1      0      34
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Init_App                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _IR_LoadCode                                          6     6      0    9993
                                             26 BANK1      6     6      0
               _IR_CalculateCodesize
                            ___ftmul
                            ___fttol
                           ___lwtoft
 ---------------------------------------------------------------------------------
 (2) ___lwtoft                                             3     0      3    3268
                                              8 BANK1      3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4    1158
                                              0 BANK1     15    11      4
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    5363
                                             11 BANK1     15     9      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2299
                                              0 BANK1      8     3      5
 ---------------------------------------------------------------------------------
 (2) _IR_CalculateCodesize                                 1     1      0     130
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_Start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _low_isr                                             21    21      0   15096
                                             56 COMRAM    21    21      0
               _ADC_CalculateVoltage
                       _IR_CheckCode
                     _IR_CleanBuffer
                       _IR_ResetData
                         _RF_Disable
                    _TMR_Timer1Start
                   _TMR_Timer1Status
                    _TMR_Timer2Start
                   i1_BUT_ReadButton
                  i1_IR_ReadReceiver
           i1_SYS_ActivityTimerReset
                  i1_TMR_ResetTimer1
                       i1_TMR_Timer1
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) i1_SYS_ActivityTimerReset                             0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i1_IR_ReadReceiver                                    1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) i1_BUT_ReadButton                                     1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer2Start                                      2     0      2     345
                                              2 COMRAM     2     0      2
                    _TMR_ResetTimer2
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (9) _TMR_ResetTimer2                                      1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer2
 ---------------------------------------------------------------------------------
 (8) i1_TMR_Timer2                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer1Status                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR_Timer1Start                                      0     0      0      67
                  i1_TMR_ResetTimer1
                       i1_TMR_Timer1
 ---------------------------------------------------------------------------------
 (8) i1_TMR_ResetTimer1                                    1     1      0      45
                                              1 COMRAM     1     1      0
                       i1_TMR_Timer1
 ---------------------------------------------------------------------------------
 (8) i1_TMR_Timer1                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _RF_Disable                                           0     0      0      66
                       i1_RF_DataInt
                       i1_TMR_Timer0
                    i1_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (9) i1_TMR_Timer0                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _IR_CleanBuffer                                       0     0      0     195
               i1_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (8) _IR_CheckCode                                         9     9      0   10620
                                             47 COMRAM     9     9      0
                    _FSH_Write_IR_RF
                      i1_IR_LoadCode
                           i1___ftge
                          i1___ftmul
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (9) i1___ftge                                             9     3      6     240
                                             11 COMRAM     9     3      6
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) i1_IR_LoadCode                                        6     6      0    2526
                                             41 COMRAM     6     6      0
             i1_IR_CalculateCodesize
                          i1___ftmul
                          i1___fttol
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (10) i1___fttol                                          15    11      4     304
                                              0 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (10) i1_IR_CalculateCodesize                              1     1      0      90
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _FSH_Write_IR_RF                                     15    15      0    5250
                                             17 COMRAM    15    15      0
                 _FSH_AddressToBlock
                     _FSH_EraseBlock
            _FSH_VerifyWriteIntArray
                  _FSH_WriteIntArray
                       _IR_ResetData
             _MSC_BufferCopyIntConst
                       _RF_ResetData
 ---------------------------------------------------------------------------------
 (10) _RF_ResetData                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _MSC_BufferCopyIntConst                             11     2      9     934
                                              6 COMRAM    11     2      9
               i1_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (9) i1_MSC_CleanBufferInt                                 6     2      4     195
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (8) _IR_ResetData                                         0     0      0      44
                          _RF_Enable
 ---------------------------------------------------------------------------------
 (9) _RF_Enable                                            0     0      0      44
                       i1_RF_DataInt
                    i1_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (9) i1_TMR_Timer0Int                                      1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) i1_RF_DataInt                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _FSH_WriteIntArray                                   8     3      5    1568
                                              4 COMRAM     8     3      5
                 _FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (10) _FSH_VerifyWriteIntArray                            12     7      5    1205
                                              0 COMRAM    12     7      5
 ---------------------------------------------------------------------------------
 (10) _FSH_EraseBlock                                     11     7      4     565
                                              4 COMRAM     7     3      4
                 _FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (11) _FSH_AddressToBlock                                  4     0      4     409
                                              0 COMRAM     4     0      4
 ---------------------------------------------------------------------------------
 (8) _ADC_CalculateVoltage                                 5     5      0    3487
                                             41 COMRAM     5     5      0
                            ___ftdiv
                i1_ADC_ChangeChannel
                          i1___ftmul
                         i1___lwtoft
 ---------------------------------------------------------------------------------
 (9) i1___lwtoft                                           3     0      3     773
                                              8 COMRAM     3     0      3
                         i1___ftpack
 ---------------------------------------------------------------------------------
 (9) i1___ftmul                                           15     9      6    1311
                                             26 COMRAM    15     9      6
                            ___ftdiv (ARG)
                         i1___ftpack
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) i1_ADC_ChangeChannel                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    1333
                                             11 COMRAM    15     9      6
                         i1___ftpack
                         i1___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (10) i1___ftpack                                          8     3      5     465
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (13) _high_isr                                           16    16      0    7547
                                             41 BANK0     16    16      0
                       _RF_CheckCode
                    _TMR_Timer0Start
                   _TMR_Timer0Status
                     i2_RF_ResetData
           i2_SYS_ActivityTimerReset
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_SYS_ActivityTimerReset                            0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR_Timer0Status                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) _TMR_Timer0Start                                     0     0      0      67
                  i2_TMR_ResetTimer0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_TMR_ResetTimer0                                   1     1      0      45
                                              1 BANK0      1     1      0
                       i2_TMR_Timer0
 ---------------------------------------------------------------------------------
 (14) i2_TMR_Timer0                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (14) _RF_CheckCode                                        9     9      0    7300
                                             32 BANK0      9     9      0
                  i2_FSH_Write_IR_RF
                      i2_RF_LoadCode
                           i2___ftge
                          i2___ftmul
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (15) i2___ftge                                            9     3      6     240
                                             11 BANK0      9     3      6
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (15) i2_RF_LoadCode                                       6     6      0    2084
                                             26 BANK0      6     6      0
             i2_RF_CalculateCodesize
                          i2___ftmul
                          i2___fttol
                         i2___lwtoft
 ---------------------------------------------------------------------------------
 (15) i2___lwtoft                                          3     0      3     617
                                              8 BANK0      3     0      3
                         i2___ftpack
 ---------------------------------------------------------------------------------
 (16) i2___fttol                                          15    11      4     304
                                              0 BANK0     15    11      4
 ---------------------------------------------------------------------------------
 (15) i2___ftmul                                          15     9      6    1025
                                             11 BANK0     15     9      6
                         i2___ftpack
                         i2___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (16) i2___ftpack                                          8     3      5     387
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (16) i2_RF_CalculateCodesize                              1     1      0      90
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (15) i2_FSH_Write_IR_RF                                  15    15      0    2992
                                             17 BANK0     15    15      0
               i2_FSH_AddressToBlock
                   i2_FSH_EraseBlock
          i2_FSH_VerifyWriteIntArray
                i2_FSH_WriteIntArray
                     i2_IR_ResetData
           i2_MSC_BufferCopyIntConst
                     i2_RF_ResetData
 ---------------------------------------------------------------------------------
 (14) i2_RF_ResetData                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (16) i2_MSC_BufferCopyIntConst                           11     2      9     578
                                              6 BANK0     11     2      9
               i2_MSC_CleanBufferInt
 ---------------------------------------------------------------------------------
 (17) i2_MSC_CleanBufferInt                                6     2      4     143
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (16) i2_IR_ResetData                                      0     0      0      44
                        i2_RF_Enable
 ---------------------------------------------------------------------------------
 (17) i2_RF_Enable                                         0     0      0      44
                       i2_RF_DataInt
                    i2_TMR_Timer0Int
 ---------------------------------------------------------------------------------
 (18) i2_TMR_Timer0Int                                     1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (18) i2_RF_DataInt                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (16) i2_FSH_WriteIntArray                                 8     3      5     744
                                              4 BANK0      8     3      5
               i2_FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (16) i2_FSH_VerifyWriteIntArray                          12     7      5     597
                                              0 BANK0     12     7      5
 ---------------------------------------------------------------------------------
 (16) i2_FSH_EraseBlock                                   11     7      4     311
                                              4 BANK0      7     3      4
               i2_FSH_AddressToBlock
 ---------------------------------------------------------------------------------
 (17) i2_FSH_AddressToBlock                                4     0      4     193
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_Start
   _IR_LoadCode
     _IR_CalculateCodesize
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lwtoft
       ___ftpack
   _Init_App
   _Init_System
     _BUT_ReadButton
     _IR_ReadReceiver
     _InitADC
       _ADC_ChangeChannel
       _ADC_ConversionInt
       _ADC_Module
     _InitButton
       _BUT_IR_PinChangeInt
       _BUT_ReadButton
     _InitFlash
     _InitIR
       _MSC_CleanBufferInt
     _InitLDO
       _LDO_Pass
     _InitMOTOR
     _InitRF
       _MSC_CleanBufferInt
       _RF_DataInt
       _RF_Receiver
       _RF_SetBandwidth
       _RF_SetSquelch
     _InitTimers
       _InitTimer0
         _TMR_ResetTimer0
           _TMR_Timer0
         _TMR_Timer0
         _TMR_Timer0Int
       _InitTimer1
         _TMR_ResetTimer1
           _TMR_Timer1
         _TMR_Timer1
         _TMR_Timer1Function
           _TMR_ResetTimer1
             _TMR_Timer1
           _TMR_Timer1
           _TMR_Timer1Osc
         _TMR_Timer1Int
       _InitTimer2
         _TMR_Timer2
         _TMR_Timer2Int
   _MSC_BlinkLED
     _MSC_DelayMS
       _MSC_DelayNOP
   _MSC_DelayMS
     _MSC_DelayNOP
   _MTR_Rotate
     _MSC_DelayMS
       _MSC_DelayNOP
     _MTR_IN1
     _MTR_IN2
   _RF_LoadCode
     _RF_CalculateCodesize
     ___ftmul
       ___ftpack
       ___lwtoft (ARG)
         ___ftpack
     ___fttol
     ___lwtoft
       ___ftpack
   _SYS_ActivityTimer
     _SYS_ActivityTimerReset
     _SYS_Sleep
   _SYS_ConfigureOscillator
   _SYS_DisableInt
   _SYS_EnableInt
     _BUT_ReadButton
     _IR_ReadReceiver
   ___ftge

 _low_isr (ROOT)
   _ADC_CalculateVoltage
     ___ftdiv
       i1___ftpack
       i1___lwtoft (ARG)
         i1___ftpack
     i1_ADC_ChangeChannel
     i1___ftmul
       ___ftdiv (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftpack (ARG)
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack
   _IR_CheckCode
     _FSH_Write_IR_RF
       _FSH_AddressToBlock
       _FSH_EraseBlock
         _FSH_AddressToBlock
       _FSH_VerifyWriteIntArray
       _FSH_WriteIntArray
         _FSH_AddressToBlock
       _IR_ResetData
         _RF_Enable
           i1_RF_DataInt
           i1_TMR_Timer0Int
       _MSC_BufferCopyIntConst
         i1_MSC_CleanBufferInt
       _RF_ResetData
     i1_IR_LoadCode
       i1_IR_CalculateCodesize
       i1___ftmul
         ___ftdiv (ARG)
           i1___ftpack
           i1___lwtoft (ARG)
             i1___ftpack
         i1___ftpack (ARG)
         i1___lwtoft (ARG)
           i1___ftpack
       i1___fttol
       i1___lwtoft
         i1___ftpack
     i1___ftge
       i1___lwtoft (ARG)
         i1___ftpack
     i1___ftmul
       ___ftdiv (ARG)
         i1___ftpack
         i1___lwtoft (ARG)
           i1___ftpack
       i1___ftpack (ARG)
       i1___lwtoft (ARG)
         i1___ftpack
     i1___lwtoft
       i1___ftpack
   _IR_CleanBuffer
     i1_MSC_CleanBufferInt
   _IR_ResetData
     _RF_Enable
       i1_RF_DataInt
       i1_TMR_Timer0Int
   _RF_Disable
     i1_RF_DataInt
     i1_TMR_Timer0
     i1_TMR_Timer0Int
   _TMR_Timer1Start
     i1_TMR_ResetTimer1
       i1_TMR_Timer1
     i1_TMR_Timer1
   _TMR_Timer1Status
   _TMR_Timer2Start
     _TMR_ResetTimer2
       i1_TMR_Timer2
     i1_TMR_Timer2
   i1_BUT_ReadButton
   i1_IR_ReadReceiver
   i1_SYS_ActivityTimerReset
   i1_TMR_ResetTimer1
     i1_TMR_Timer1
   i1_TMR_Timer1
   i1_TMR_Timer2

 _high_isr (ROOT)
   _RF_CheckCode
     i2_FSH_Write_IR_RF
       i2_FSH_AddressToBlock
       i2_FSH_EraseBlock
         i2_FSH_AddressToBlock
       i2_FSH_VerifyWriteIntArray
       i2_FSH_WriteIntArray
         i2_FSH_AddressToBlock
       i2_IR_ResetData
         i2_RF_Enable
           i2_RF_DataInt
           i2_TMR_Timer0Int
       i2_MSC_BufferCopyIntConst
         i2_MSC_CleanBufferInt
       i2_RF_ResetData
     i2_RF_LoadCode
       i2_RF_CalculateCodesize
       i2___ftmul
         i2___ftpack
         i2___lwtoft (ARG)
           i2___ftpack
       i2___fttol
       i2___lwtoft
         i2___ftpack
     i2___ftge
       i2___lwtoft (ARG)
         i2___ftpack
     i2___ftmul
       i2___ftpack
       i2___lwtoft (ARG)
         i2___ftpack
     i2___lwtoft
       i2___ftpack
   _TMR_Timer0Start
     i2_TMR_ResetTimer0
       i2_TMR_Timer0
     i2_TMR_Timer0
   _TMR_Timer0Status
   i2_RF_ResetData
   i2_SYS_ActivityTimerReset
   i2_TMR_ResetTimer0
     i2_TMR_Timer0
   i2_TMR_Timer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3FF      0       0      12        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0     100      10      100.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0     100       8      100.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100     20      A0       6       62.5%
BITBANK0            80      0       0       3        0.0%
BANK0               80     39      50       4       62.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     4D      65       1       80.2%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     355      11        0.0%
DATA                 0      0     355      13        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.35 build -356382666 
Symbol Table                                                                                   Sun Aug 30 09:33:33 2015

            MSC_BufferCopyIntConst@i 0010              __end_of_IR_ReadReceiver 18B6  
           MSC_BufferCopyIntConst@to 000A            __size_ofi2_FSH_EraseBlock 006C  
                         _RF_SyncLow 00BD                   TMR_Timer0Int@state 0180  
                         i1___ftpack 0F58                          _RF_SyncHigh 00BB  
                                 l74 39E4                      ?_SYS_DisableInt 0001  
          i2MSC_CleanBufferInt@count 0082                                   bsr 000FE0  
                         i1___lwtoft 1B6E                   __size_of_ADC_Start 0004  
                   i2RF_LoadCode@Low 009A                  i2_FSH_WriteIntArray 10AE  
                 TMR_Timer1Int@state 0180           ??i1_SYS_ActivityTimerReset 0001  
                         i2___ftpack 04E2                         __CFG_CP0$OFF 000000  
                         _TMR_Timer0 1D68                           _TMR_Timer1 1D3C  
                         _TMR_Timer2 1D10                                  l402 1C7C  
                                l339 1F86                                  l540 1896  
                                l542 18AC                                  l618 19E6  
                                l593 1CCA                           i2___lwtoft 1AAC  
                                l994 1DBC                                  _PR2 000FCB  
   FSH_VerifyWriteIntArray@failcount 000B   i2FSH_VerifyWriteIntArray@failcount 008A  
                       i1___ftge@ff1 000C                         i1___ftge@ff2 000F  
                __size_of_ADC_Module 0016                   TMR_Timer2Int@state 0180  
              ??i1_ADC_ChangeChannel 0001                    i2RF_LoadCode@High 009D  
                                prod 000FF3                                  wreg 000FE8  
                       i1___ftmul@f1 001B                         i1___ftmul@f2 001E  
                    IR_CheckCode@Low 0032                   TMR_Timer1Osc@state 0180  
   __size_of_FSH_VerifyWriteIntArray 006E                         i1___fttol@f1 0001  
       FSH_VerifyWriteIntArray@Array 0004                       ?_RF_SetSquelch 0001  
                       ___ftdiv@cntr 0015                         ___ftdiv@sign 001A  
                               l1003 1860                                 l1005 1876  
                               l1101 1C0C                                 l1061 1D4E  
                               l1056 1D7A                                 l1066 1D22  
                               l1091 1D38                                 l1086 1D64  
                               l1096 1D0C                                 l1287 1DD2  
              ?i2_MSC_CleanBufferInt 0080                                 l1539 04AE  
                               l1299 1DE8                                 l8011 1620  
                               l8101 3CC0                                 l8021 1654  
                               l8015 162A                                 l8033 1CF6  
                               l8025 165A                                 l8043 1664  
                               l8115 3E98                                 l8053 1698  
                               l8133 3F2A                                 l8047 166E  
                               l8151 3F90                                 l8143 3F5A  
                               l8039 1CE0                                 l8311 0CC8  
                               l8057 169E                                 l8073 3C16  
                               l8145 3F6A                                 l8137 3F3E  
                               l8091 3C82                                 l8067 3BDC  
                               l8147 3F74                                 l8307 0C88  
                               l8403 39A0                                 l8253 15D8  
                               l8317 0D0C                                 l8405 39A6  
                               l8087 3C64                                 l8351 388C  
                               l8335 3834                                 l8097 3CA2  
                               l8417 39FE                                 l7811 1844  
                               l7803 1826                                 l8259 15F4  
                               l8363 38C0                                 l8355 3894  
                               l8371 38E6                                 l7821 3FB8  
                               l8269 1486                                 l8365 38D8  
                               l8349 3874                                 l7911 0462  
                               l7903 0404                                 l7807 1834  
                               l7921 04B8                                 l7913 0492  
                               l7905 0412                                 l7825 3FE0  
                               l7817 1D90                                 l8377 38FE  
                               l8369 38E0                                 l7915 04A0  
                               l7907 0442                                 l8299 19CC  
                               l8395 3936                                 l7781 186A  
                               l7765 1970                                 l7837 19EE  
                               l7933 14D0                                 l7927 04D4  
                               l7951 18A0                                 l8399 3986  
                               l7769 197A                                 l7937 14EC  
                               l7891 1B3C                                 l7797 1DA6  
                               l7899 03F0                                 _LATA 000F89  
                               _LATB 000F8A                                 _LATC 000F8B  
           FSH_VerifyWriteIntArray@i 000C                                 u9200 3EBE  
                               u9121 3BB8                                 u9141 3BF2  
                               u9205 3EB4                                 u9181 3E74  
                               u9290 19C2                                 u9470 3A14  
                               _TMR2 000FCC                     ?_RF_SetBandwidth 0001  
               ?i2_FSH_WriteIntArray 0084          ADC_CalculateVoltage@Voltage 002C  
             __size_of_TMR_Timer0Int 0016               __size_of_TMR_Timer1Int 0016  
             __size_of_TMR_Timer2Int 0016               __size_of_TMR_Timer1Osc 001E  
        __size_of_FSH_AddressToBlock 0030                    ??i1_TMR_Timer0Int 0001  
                    __end_of_MTR_IN1 1CFA                      __end_of_MTR_IN2 1CE4  
  __size_ofi2_SYS_ActivityTimerReset 0012                                 _main 3806  
          ?i2_SYS_ActivityTimerReset 0001               _SYS_ActivityTimerReset 1E7E  
                       ___ftpack@arg 0180                         ___ftpack@exp 0183  
                       i1___lwtoft@c 0009                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr0l 000FE9  
                               fsr2h 000FDA                                 fsr1l 000FE1  
                               indf2 000FDF                                 fsr2l 000FD9  
                               btemp 0066                                 pclat 000FFA  
                       i2___ftge@ff1 008B                         i2___ftge@ff2 008E  
                               prodh 000FF4                                 prodl 000FF3  
                               start 028E                        __CFG_IESO$OFF 000000  
                      __CFG_FOSC2$ON 000000             ??i1_IR_CalculateCodesize 0001  
               i2_FSH_AddressToBlock 179C                     IR_CheckCode@High 0035  
                       ___ftmul@cntr 0198                i1MSC_CleanBufferInt@i 0005  
                       i2___ftmul@f1 008B                         i2___ftmul@f2 008E  
                       ___param_bank 000000           __size_of_SYS_ActivityTimer 002A  
                       ___ftmul@sign 0199                      __end_of_InitADC 1AFE  
                    __end_of_InitLDO 1F94                         i2___fttol@f1 0080  
                      i1___ftmul@exp 0024                                EECON1 000FA6  
                              EECON2 000FA7         __end_of_ADC_CalculateVoltage 0E9C  
                       ___fttol@exp1 018E                        ??_Init_System 0186  
                    _FSH_Write_IR_RF 2D8E                         ___fttol@lval 018A  
            __size_of_IR_CleanBuffer 0016          __size_of_TMR_Timer1Function 0030  
                              INTCON 000FF2              i1___ftmul@f3_as_product 0025  
                              ?_main 0001                     __end_of_LDO_Pass 1CCE  
                    __end_of___ftdiv 0B78                         i2___lwtoft@c 0088  
                    __end_of___ftmul 3D00                      __end_of___fttol 3FA2  
                         _FlashWaste 2600                                i1l230 0206  
                              i1l214 01BE                                i1l206 01C2  
                              i1l215 01BC                                i1l216 0108  
                              i1l402 1E64                                i1l218 0160  
                              i1l243 0246                                i1l237 0212  
                              i1l239 0244                                i2l201 3B64  
                              i2l203 3B66                                i1l540 18CA  
                              i1l542 18E0                                i2l402 1CB0  
                              i2l191 3AF0                                i2l186 3B4E  
                              i2l189 3A76                                _TMR0H 000FD7  
                              _TMR1H 000FCF                                _TMR0L 000FD6  
                              _TMR1L 000FCE                                _PORTB 000F81  
            i2FSH_Write_IR_RF@lowint 0098                       i2_IR_ResetData 1F5E  
            i2FSH_Write_IR_RF@status 009C                  BUT_ReadButton@value 0180  
                     __CFG_FCMEN$OFF 000000                                _errno 005D  
                      ___ftpack@sign 0184                   RF_SetSquelch@state 0180  
                 __size_of_RF_Enable 0014                          ?_RF_DataInt 0001  
              ??i2_FSH_WriteIntArray 0089                __end_ofi2_RF_LoadCode 09AA  
                   __end_ofi1___ftge 1276                      __end_of_low_isr 028E  
                              tablat 000FF5                     __end_ofi2___ftge 0DD8  
                  __end_of_ADC_Start 1FB2                          ?_RF_Disable 0001  
                              plusw2 000FDB                                status 000FD8  
                 __size_ofi1___ftmul 00F4                   __size_ofi1___fttol 00F4  
                        ?_MTR_Rotate 0001         i2MSC_BufferCopyIntConst@from 0086  
              FSH_EraseBlock@Address 0005             ??_MSC_BufferCopyIntConst 0010  
                     i1___ftpack@arg 0001                   __size_ofi2___ftmul 015E  
                     i1___ftpack@exp 0004                   __size_ofi2___fttol 0144  
              ?i2_FSH_AddressToBlock 0080                           _InitButton 1F26  
                    __initialization 1276                           _InitTimer0 1BB6  
                         _InitTimer1 1C30                           _InitTimer2 1BD8  
                         _InitTimers 1F18                         __end_of_main 3A24  
                   ?_IR_ReadReceiver 0001                        i2___ftmul@exp 0094  
                   _ButtonValue_prev 00BF         __end_ofi1_MSC_CleanBufferInt 1724  
                        ?i1___ftpack 0001                       i1___ftmul@cntr 0028  
                     i1___ftmul@sign 0029                     __end_of_Init_App 179C  
                      _TMR_Timer0Int 1D52                        _TMR_Timer1Int 1D26  
                        ?i1___lwtoft 0009                        _TMR_Timer2Int 1CFA  
                      _TMR_Timer1Osc 1BF6                       i1___fttol@exp1 000F  
                        ?i2___ftpack 0080                   __size_of_SYS_Sleep 0006  
                     i1___fttol@lval 000B                          ?_TMR_Timer0 0001  
                        ?_TMR_Timer1 0001                          ?_TMR_Timer2 0001  
                       ?_MSC_DelayMS 0184                               ??_main 01A0  
             __end_ofi2_IR_ResetData 1F6C                        ___fttol@sign1 0189  
                        ?i2___lwtoft 0088                        __activetblptr 000002  
                       ?i2_RF_Enable 0001                    _ADC_ConversionInt 1DD6  
                TMR_Timer2Start@time 0003                  __end_of_Init_System 1950  
                  i1_TMR_ResetTimer1 1B4A                      ??_RF_SetSquelch 0180  
                    _ADC_SampleCount 00B9                   ?_ADC_ConversionInt 0001  
      i2FSH_VerifyWriteIntArray@data 0088                FSH_EraseBlock@highint 0009  
            __size_of_FSH_EraseBlock 005A             __size_ofi2_TMR_Timer0Int 0016  
             ??i2_MSC_CleanBufferInt 0084                            ??_MTR_IN1 0180  
                          ??_MTR_IN2 0180                   ?i1_TMR_ResetTimer1 0001  
                        _FlashBuffer 0100                               _ADRESH 000FC4  
                             _ADRESL 000FC3             i2FSH_Write_IR_RF@highint 0097  
                   __end_of___ftpack 04E2                       RF_LoadCode@Low 019A  
           __size_of_TMR_ResetTimer0 002A             __size_of_TMR_ResetTimer1 002A  
           __size_of_TMR_ResetTimer2 0028                     _TMR_Timer0Status 1F78  
                 __size_of_InitMOTOR 0004                               i1l1003 18FE  
                             i1l1005 1914                               i1l1205 316C  
                             i1l1061 1EF4                               i1l1056 1F04  
                   _TMR_Timer1Status 1F6C                               i1l1066 1EE4  
                             i1l1307 0E8A                               i1l1244 308C  
                             i1l1086 1F14                               i1l1246 310E  
                             i1l1539 0FE6                               i2l1205 2D74  
                             i1l1597 0B46                               i2l1056 1E14  
                             i1l6033 061A                               i1l5411 1716  
                             i1l6051 0680                               i2l1244 2C3E  
                             i1l6061 06A8                               i2l1086 1E2A  
                             i2l1246 2D02                               i1l5407 16F8  
                             i1l6303 2F28                               i1l6063 06B4  
                             i1l6055 0690                               i1l5441 0F80  
                             i1l6305 2F2C                               i1l6065 06BA  
                             i1l5451 0FDC                               i1l5443 0F9E  
                             i1l5435 0F68                               i1l5603 108C  
                             i1l6331 2FB0                               i1l6243 2DC2  
                             i1l7203 3460                               i1l5701 138C  
                             i1l6413 315A                               i1l6421 3168  
                             i1l6333 2FB4                               i1l6317 2F6C  
                             i1l6069 06D0                               i2l1199 11CE  
                             i1l5447 0FB4                               i1l5439 0F76  
                             i1l6319 2F70                               i1l6263 2E60  
                             i1l6255 2E1C                               i1l6247 2DD6  
                             i1l7231 350E                               i1l7223 34F8  
                             i1l7215 348E                               i1l7207 346C  
                             i1l5449 0FD2                               i1l6409 3156  
                             i1l6417 3164                               i1l6361 303C  
                             i1l6345 2FF4                               i1l6249 2DE4  
                             i1l7225 34FA                               i2l1539 05BA  
                             i1l5395 19A0                               i1l5715 13E6  
                             i1l6347 2FF8                               i1l6291 2EE8  
                             i1l6275 2EA0                               i1l6259 2E48  
                             i1l5803 17E4                               i1l7227 3506  
                             i1l7219 34C4                               i1l6509 0B20  
                             i1l5653 1532                               i1l5709 13DC  
                             i1l6373 307C                               i1l6277 2EA4  
                             i1l5813 180E                               i1l7237 352A  
                             i1l7173 31A4                               i1l7317 1908  
                     __CFG_WDTEN$OFF 000000                               i1l7263 0E96  
                             i1l5583 102A                               i1l6375 3080  
                             i1l6359 3038                               i1l7247 3548  
                             i1l7183 333A                               i1l7159 1F74  
                             i1l5665 1568                               i1l5681 1320  
                             i1l6289 2EE4                               i1l5809 180A  
                             i1l7193 3452                               i1l7177 325C  
                             i1l7505 00A8                               i1l7521 00F2  
                             i1l6483 0ABA                               i1l5595 1052  
                             i1l6379 3088                               i1l7195 3454  
                             i1l7515 00DC                               i2l6005 3DC2  
                             i2l6101 0372                               i1l5677 1318  
                             i1l7189 344E                               i1l7541 0144  
                             i1l7509 00BA                               i2l6015 3E00  
                             i2l6111 03A8                               i1l5943 0732  
                             i1l6399 3126                               i1l6903 1272  
                             i1l7519 00EC                               i2l6009 3DE0  
                             i1l6489 0AE2                               i1l5961 0774  
                             i1l5937 070A                               i1l5697 1384  
                             i1l5689 1356                               i2l6019 3E1E  
                             i2l6115 03C4                               i2l6107 038E  
                             i1l5971 079C                               i1l7299 18D4  
                             i1l7563 01AC                               i2l6109 039E  
                             i2l7101 375E                               i1l5957 0764  
                             i1l7581 01FA                               i2l5415 158E  
                             i2l7103 3762                               i2l7111 3772  
                             i1l5967 078C                               i1l5799 17DC  
                             i1l7567 01B6                               i2l5425 17C6  
                             i2l7121 37A6                               i1l7585 0202  
                             i1l7577 01E4                               i2l5419 15B6  
                             i2l7115 3782                               i2l7123 37AA  
                             i2l7125 37BA                               i1l6885 1BA8  
                             i1l6893 1216                               i2l5471 04FC  
                             i2l6079 02CC                               i2l7135 37E4  
                             i1l7599 0234                               i2l6097 035E  
                             i2l7129 37C4                               i2l7145 3802  
                             i1l6897 1246                               i2l5483 056E  
                             i2l5475 0510                               i2l7091 362E  
                             i2l7075 1F80                               i2l5901 111C  
                             i2l5493 05C4                               i2l5485 059E  
                             i2l5477 051E                               i2l5823 0EC2  
                             i2l6711 293E                               i2l6703 28E8  
                             i2l5487 05AC                               i2l5479 054E  
                             i2l7087 3582                               i2l5921 11D4  
                             i2l5913 1166                               i2l7097 375A  
                             i2l5835 0EF2                               i2l5843 0F32  
                             i2l6723 2996                               i2l6707 2922  
                             i2l5499 05E0                               i2l7435 3A66  
                             i2l5909 115C                               i2l6821 2C28  
                             i2l6725 299C                               i2l7453 3ACA  
                             _TABLAT 000FF5                               i2l5927 11E2  
                             i2l6823 2C2E                               i2l6807 2BCA  
                             i2l6751 2A52                               i2l5775 16A8  
                             i2l6911 0D50                               i2l5865 1402  
                             i2l6809 2BD0                               i2l6753 2A58  
                             i2l6737 29F4                               i2l5785 16DC  
                             i2l6921 0DD4                               i2l7473 3B3E  
                             i2l6827 2C38                               i2l6739 29FA  
                             i2l6691 2880                               i2l5779 16B2  
                             i2l6915 0D90                               i2l5877 143E  
                             i2l5893 10DE                               i2l6861 2D5A  
                             i2l6781 2B14                               i2l6765 2AB0  
                             i2l5789 16E2                               i2l7477 3B48  
                             i2l6847 2D1C                               i2l6767 2AB6  
                             i2l6695 2894                               i2l5991 3D74  
                             i2l5889 10D4                               i2l6857 2D56  
                             i2l6865 2D68                               i2l6793 2B6C  
                             i2l6697 28A2                               i2l5985 3D3A  
                             i2l6795 2B72                               i2l6779 2B0E  
                             i2l6869 2D6E                     __end_of___lwtoft 1A82  
                             u630_41 3D16                               u624_21 06F2  
                             u632_41 3D50                               _OSCCON 000FD3  
                             u626_21 071A                               u636_21 05FE  
                 __size_of_InitFlash 0004                               u644_41 02A8  
                ??_ADC_ConversionInt 0180                         ??_ADC_Module 0180  
                       _System_State 00CF                               u697_21 0AA2  
                             u699_21 0ACA                  ??i1_TMR_ResetTimer1 0002  
             i2FSH_EraseBlock@lowint 0089                            ??_InitADC 0181  
                          ??_InitLDO 0181                         ?_IR_LoadCode 0001  
            __end_of_FSH_Write_IR_RF 317C             __size_of_TMR_Timer0Start 0012  
           __size_of_TMR_Timer1Start 0012                               _InitIR 1C4C  
                             _InitRF 1724             __size_of_TMR_Timer2Start 001A  
                     i2_RF_ResetData 1F50         __end_of_IR_CalculateCodesize 16A2  
       __end_of_RF_CalculateCodesize 165E           MSC_BufferCopyIntConst@from 0007  
                     __CFG_XINST$OFF 000000      __size_ofi1_IR_CalculateCodesize 003A  
                         _Timer2Post 0059                      low_isr@IR_state 004A  
                   __end_of_high_isr 3BA2                    ?i1_BUT_ReadButton 0001  
                             ___ftge 0C48               i1IR_ReadReceiver@value 0001  
                   i2_FSH_EraseBlock 13EA              __size_of_BUT_ReadButton 0036  
                     __CFG_STVREN$ON 000000                            ??___ftdiv 0012  
                          ??___ftmul 0191                            ??___fttol 0184  
       __size_of_BUT_IR_PinChangeInt 0016                       ?_TMR_Timer0Int 0001  
                     ?_TMR_Timer1Int 0001                       ?_TMR_Timer2Int 0001  
           i2MSC_CleanBufferInt@data 0080                       ?_TMR_Timer1Osc 0001  
                 ??i1_BUT_ReadButton 0001                    __end_of_RF_Enable 1E56  
                             clear_0 127E                               clear_1 1292  
                             clear_2 12A4                               clear_3 12B0  
                             clear_4 12BC                  __size_of_RF_DataInt 001A  
          __end_of_ADC_ConversionInt 1DEC                      ?i2_IR_ResetData 0001  
            ?i2_RF_CalculateCodesize 0001                  __size_of_RF_Disable 0014  
          __end_ofi1_TMR_ResetTimer1 1B6E                ___ftmul@f3_as_product 0195  
                  __end_ofi1___ftmul 07D6                    __end_ofi1___fttol 06E2  
                       __pdataCOMRAM 0065   __size_ofi2_FSH_VerifyWriteIntArray 0096  
                 __end_of_ADC_Module 1DD6                  __size_of_MTR_Rotate 0066  
                  __end_ofi2___ftmul 3E5E                    __end_ofi2___fttol 03D6  
         ?i2_FSH_VerifyWriteIntArray 0080              _FSH_VerifyWriteIntArray 137C  
                       __mediumconst 2800                            ??_low_isr 0039  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                         ?_RF_LoadCode 0001  
               _ADC_CalculateVoltage 0DD8                  __size_ofi1___ftpack 00AE  
                  i2_TMR_ResetTimer0 1A82              __p_IR_SavedTiming_const 2400  
                    __CFG_FOSC$HSPLL 000000              __p_RF_SavedTiming_const 2500  
                   __end_ofexp@coeff 2828                     __end_oflog@coeff 2843  
                    TMR_Timer0@state 0180                      TMR_Timer1@state 0180  
        i2FSH_Write_IR_RF@WriteTries 009F                           __accesstop 0080  
            __end_of__initialization 12F4                  __size_ofi1___lwtoft 0024  
                    TMR_Timer2@state 0180                    __end_of_SYS_Sleep 1FA6  
                       ?_RF_Receiver 0001                  __size_ofi2___ftpack 010C  
             __end_ofi2_RF_ResetData 1F5E                   ?i2_TMR_ResetTimer0 0001  
                         ___ftge@ff1 0180                           ___ftge@ff2 0183  
                __size_of_TMR_Timer0 0016                  __size_of_TMR_Timer1 0016  
                __size_of_TMR_Timer2 0016                      i1___ftpack@sign 0005  
             ??i2_FSH_AddressToBlock 0084                        ___rparam_used 000000  
                         ___ftdiv@f1 000C                           ___ftdiv@f2 000F  
                         ___ftdiv@f3 0016                            ?_LDO_Pass 0001  
                __size_ofi2___lwtoft 002A             FSH_EraseBlock@WriteTries 000B  
                     i2___ftpack@arg 0080      __size_of_MSC_BufferCopyIntConst 00A8  
                     i2___ftpack@exp 0083                    i1RF_DataInt@state 0001  
                   ??_SYS_DisableInt 0180                       high_isr@RFtemp 00B7  
                        ?_InitButton 0001                           ___ftmul@f1 018B  
                         ___ftmul@f2 018E                           ___fttol@f1 0180  
                     __pcstackCOMRAM 0001                          ?_InitTimer0 0001  
                        ?_InitTimer1 0001                          ?_InitTimer2 0001  
                        ?_InitTimers 0001                  ??i2_TMR_ResetTimer0 0081  
                       __pidataBANK0 1F94                       _IR_CleanBuffer 1DEC  
               IR_ReadReceiver@value 0180                       i2___ftmul@cntr 0098  
                     i2___ftmul@sign 0099                        ?i1_RF_DataInt 0001  
            _FlashWaste_absconstaddr 002600                          _Init_System 191E  
     __end_ofi2_RF_CalculateCodesize 16E6                    __end_of_InitMOTOR 1FAA  
                        _Button_Data 00C0                       i2___fttol@exp1 008E  
                          ?i1___ftge 000C                    __end_of_InitFlash 1FAE  
                         ___lwtoft@c 0188                       i2___fttol@lval 008A  
         __end_of_MSC_CleanBufferInt 3FF6                            ?i2___ftge 008B  
           ?_SYS_ConfigureOscillator 0001     __end_ofi2_SYS_ActivityTimerReset 1EC6  
                    i1_TMR_Timer0Int 1F08               i1_IR_CalculateCodesize 17D8  
  __end_ofi2_FSH_VerifyWriteIntArray 11E6                      i1___fttol@sign1 000A  
                   RF_Receiver@state 0180                 i2FSH_WriteIntArray@i 008B  
                      ?_MSC_DelayNOP 0180            __end_ofi2_TMR_ResetTimer0 1AAC  
                      ?_MSC_BlinkLED 018D              ?_SYS_ActivityTimerReset 0001  
              ?_ADC_CalculateVoltage 0001                 i1_MSC_CleanBufferInt 16E6  
                      ?i2_RF_DataInt 0001                           __pbssBANK0 00B9  
                         __pbssBANK1 0100                           __pbssBANK2 0200  
                         __pbssBANK3 0300                    _FSH_WriteIntArray 1302  
                          ?_Init_App 0001                     RF_CheckCode@High 00A5  
                  i1IR_LoadCode@High 002D                        ?i1_TMR_Timer0 0001  
                      ?i1_TMR_Timer1 0001                        ?i1_TMR_Timer2 0001  
            i2FSH_EraseBlock@Address 0084                    ??i2_TMR_Timer0Int 0080  
           i1TMR_ResetTimer1@TimerOn 0002                      ?i2_RF_ResetData 0001  
                 ?_FSH_WriteIntArray 0005                           ??_LDO_Pass 0180  
                  ??_TMR_ResetTimer0 0181                    ??_TMR_ResetTimer1 0181  
                  ??_TMR_ResetTimer2 0002                     ?_FSH_Write_IR_RF 0001  
                            ?_InitIR 0001                              ?_InitRF 0001  
     i2FSH_VerifyWriteIntArray@Array 0083               __end_of_IR_CleanBuffer 1E02  
                    ??_TMR_Timer0Int 0180                      ??_TMR_Timer1Int 0180  
                    ??_TMR_Timer2Int 0180                      ??_TMR_Timer1Osc 0180  
                            ?___ftge 0180                  ??_FSH_WriteIntArray 000A  
                     ??i1_RF_DataInt 0001                        ?_IR_CheckCode 0001  
             __size_of_SYS_EnableInt 001C          __end_ofi1_ADC_ChangeChannel 1BB6  
                  ??_TMR_Timer0Start 0082                    ??_TMR_Timer1Start 0003  
                  ??_TMR_Timer2Start 0005                    i2RF_DataInt@state 0080  
                          ?___ftpack 0180                           ??i1___ftge 0012  
                    RF_LoadCode@High 019D                        ?i2_TMR_Timer0 0001  
         __size_of_ADC_ConversionInt 0016            ??_FSH_VerifyWriteIntArray 0006  
                         ??i2___ftge 0091                            ?___lwtoft 0188  
         __size_ofi1_TMR_ResetTimer1 0024    __size_ofi2_MSC_BufferCopyIntConst 00BC  
          ?i2_MSC_BufferCopyIntConst 0086               _MSC_BufferCopyIntConst 1006  
                       _Flash_Status 00C2                 __size_of_MSC_DelayMS 0062  
                      MSC_DelayMS@US 0184              i2FSH_EraseBlock@highint 0088  
                      MSC_DelayNOP@i 0182                       IR_LoadCode@Low 019A  
             __size_ofi1_IR_LoadCode 00D0                              _TBLPTRH 000FF7  
                            _TBLPTRL 000FF6                              _TBLPTRU 000FF8  
               _IR_CalculateCodesize 165E                       _FSH_EraseBlock 151E  
          i2MSC_BufferCopyIntConst@i 008F                 _RF_CalculateCodesize 161A  
               __size_ofi2_RF_Enable 0014                       ??_MSC_DelayNOP 0182  
     __end_of_SYS_ActivityTimerReset 1E90                              _IR_Data 00C4  
                __size_of_InitButton 000E                       ??_MSC_BlinkLED 0191  
                            _MTR_IN1 1CE4                              _MTR_IN2 1CCE  
                            _RF_Data 00C7                  __size_of_InitTimer0 0022  
                __size_of_InitTimer1 001C                  __size_of_InitTimer2 001E  
                      MSC_BlinkLED@i 0193           __end_of_FSH_AddressToBlock 19B0  
          __end_of_FSH_WriteIntArray 137C                  __size_of_InitTimers 000E  
                     ??i2_RF_DataInt 0080                            ?_high_isr 0001  
              ?i1_MSC_CleanBufferInt 0001                         ??_RF_DataInt 0180  
  __size_ofi1_SYS_ActivityTimerReset 0012                       ??i1_TMR_Timer0 0001  
                     ??i1_TMR_Timer1 0001                       ??i1_TMR_Timer2 0001  
                  _ADC_CurrentSource 0065                         ??_RF_Disable 0002  
          ?i1_SYS_ActivityTimerReset 0001                           ??_Init_App 0180  
                    _Timer2PostCount 005B                      ADC_Module@state 0180  
                            _InitADC 1AD6                         ??_MTR_Rotate 018D  
                            _InitLDO 1F8C          MSC_BufferCopyIntConst@count 000C  
                          _ADC_Start 1FAE                              __Hparam 0000  
        MSC_BufferCopyIntConst@shift 000E                      __size_of_InitIR 001C  
                    __size_of_InitRF 003C                              __Lparam 0000  
                    ?_IR_CleanBuffer 0001             __size_of_RF_SetBandwidth 0038  
         __end_of_TMR_Timer1Function 1980                i2MSC_CleanBufferInt@i 0084  
               __size_of_IR_LoadCode 00E8                       _BUT_ReadButton 184A  
                     ??_IR_CheckCode 0030                      __size_of___ftge 00C8  
                       ??i1___ftpack 0006                 i2TMR_Timer0Int@state 0080  
                            ___ftdiv 0A92                              ___ftmul 3BA2  
                            ___fttol 3E5E              __end_ofi1_TMR_Timer0Int 1F18  
    __end_of_SYS_ConfigureOscillator 1F8C                         ??i1___lwtoft 000C  
           __end_of_TMR_Timer0Status 1F84             __end_of_TMR_Timer1Status 1F78  
                            __pcinit 1276                       ??i2_TMR_Timer0 0080  
                       ??i2___ftpack 0085                           ??___ftpack 0185  
                      ?_IR_ResetData 0001              i2___ftmul@f3_as_product 0095  
                            __ramtop 0400                         ??_TMR_Timer0 0180  
                       ??_TMR_Timer1 0180                         ??_TMR_Timer2 0180  
                            __ptext0 3806                              __ptext1 0C48  
                            __ptext2 1C14                              __ptext3 1F9A  
                            __ptext4 1F84                              __ptext5 19B0  
                            __ptext6 1FA0                              __ptext7 1E7E  
                            __ptext8 07D6                              __ptext9 161A  
                 __end_of_RF_DataInt 1C82                         ??i2___lwtoft 008B  
                         ??___lwtoft 018B                            _T0CONbits 000FD5  
                          _T1CONbits 000FCD                   __end_of_RF_Disable 1E42  
                          _T2CONbits 000FCA               __end_of_FSH_EraseBlock 1578  
        __end_ofi2_FSH_WriteIntArray 1150                ?_IR_CalculateCodesize 0001  
              ?_RF_CalculateCodesize 0001                   __end_of_MTR_Rotate 14BC  
                            _low_isr 0018          FSH_WriteIntArray@ConstArray 0005  
             ??_ADC_CalculateVoltage 002A             BUT_IR_PinChangeInt@state 0180  
         __size_ofi2_TMR_ResetTimer0 002A             __end_ofi2_FSH_EraseBlock 1456  
        _IR_SavedTiming_absconstaddr 002400                        _SYS_EnableInt 1C14  
           i2_SYS_ActivityTimerReset 1EB4                           ??_high_isr 00A9  
                     __pintcode_body 3A24                  _BUT_IR_PinChangeInt 1DAA  
                      ?_RF_CheckCode 0001                 end_of_initialization 12F4  
                 __end_ofi1___ftpack 1006                        __Lmediumconst 2800  
               __size_of_RF_LoadCode 00EA                              int_func 3A24  
                 __end_ofi1___lwtoft 1B92                   __end_ofi2___ftpack 05EE  
                 __end_of_TMR_Timer0 1D7E                   __end_of_TMR_Timer1 1D52  
                 __end_of_TMR_Timer2 1D26                           ?_ADC_Start 0001  
             __end_of_BUT_ReadButton 1880                 __size_of_RF_Receiver 0016  
                 __end_ofi2___lwtoft 1AD6                        i1_IR_LoadCode 0B78  
                   FSH_Write_IR_RF@i 001E                     FSH_Write_IR_RF@j 001C  
            i1IR_CalculateCodesize@i 0001               FSH_WriteIntArray@Array 0008  
                            postdec1 000FE5                              postdec2 000FDD  
                   ??i2_IR_ResetData 0081                              postinc0 000FEE  
                            postinc2 000FDE               TMR_Timer1Function@mode 0182  
               ?_BUT_IR_PinChangeInt 0001                    i1_IR_ReadReceiver 18B6  
                     ??_IR_ResetData 0002                  __p_FlashWaste_const 2600  
          FSH_AddressToBlock@Address 0001               __size_ofi2_RF_LoadCode 00EA  
                 ?i1_IR_ReadReceiver 0001                            _IRStarted 0061  
           __size_of_IR_ReadReceiver 0036                            _RF_Enable 1E42  
                    ?_FSH_EraseBlock 0005                            _TRISAbits 000F92  
        ??i2_FSH_VerifyWriteIntArray 0085                            _TRISBbits 000F93  
                          _TRISCbits 000F94            __size_ofi1_BUT_ReadButton 0034  
                ??i1_IR_ReadReceiver 0001                       ?_SYS_EnableInt 0001  
                          _RFStarted 00C5               ??i1_MSC_CleanBufferInt 0005  
                          i1___ftmul 06E2                            i1___fttol 05EE  
              __end_of_RF_SetSquelch 1D94                       ??_RF_CheckCode 00A0  
         __size_of_FSH_WriteIntArray 007A                        IR_CheckCode@i 0038  
                          i2___ftmul 3D00                            i2___fttol 0292  
               __end_ofi1_RF_DataInt 1E6A        __size_ofi2_MSC_CleanBufferInt 0054  
                      ?_RF_ResetData 0001                          ___ftdiv@exp 0019  
                     ?i1_IR_LoadCode 0001                      i2___ftpack@sign 0084  
                    ?_BUT_ReadButton 0001                       _IR_SavedTiming 2400  
                       ??_InitButton 0181                   __end_of_FlashWaste 2800  
                          _SYS_Sleep 1FA0                          ___ftmul@exp 0194  
                       ??_InitTimer0 0182                         ??_InitTimer1 0183  
                       ??_InitTimer2 0181                       __end_of_InitIR 1C68  
                     __end_of_InitRF 1760                    __size_of_LDO_Pass 0018  
                       ??_InitTimers 0183            __end_ofi1_IR_ReadReceiver 18EA  
        _RF_SavedTiming_absconstaddr 002500                 __end_of_MSC_DelayNOP 1A04  
              ??_BUT_IR_PinChangeInt 0180             i1MSC_CleanBufferInt@data 0001  
               __end_of_MSC_BlinkLED 161A                       __end_of___ftge 0D10  
                       ?_Init_System 0001                 __end_ofi2_RF_DataInt 1CB6  
                   ?i1_TMR_Timer0Int 0001                        __pidataCOMRAM 3FF6  
                  ??_RF_SetBandwidth 0180                 __end_ofi1_TMR_Timer0 1F08  
               __end_ofi1_TMR_Timer1 1EF8                 __end_ofi1_TMR_Timer2 1EE8  
                      low_isr@IRtemp 004C              ?i1_IR_CalculateCodesize 0001  
      ADC_CalculateVoltage@ADCcounts 002A                           ?_RF_Enable 0001  
             ??_IR_CalculateCodesize 0180               ??_RF_CalculateCodesize 0180  
                          _InitMOTOR 1FA6                         _ButtonChange 005F  
                  __size_ofi1___ftge 0090                i1BUT_ReadButton@value 0001  
                start_initialization 1276                    __size_ofi2___ftge 00C8  
                  _ADC_ChangeChannel 1B26                            _InitFlash 1FAA  
             ADC_ConversionInt@state 0180                      i2_TMR_Timer0Int 1E18  
                         ?i1___ftmul 001B                           ?i1___fttol 0001  
                          _Rail_RSSI 0052                      _TMR_ResetTimer0 1A2E  
                    i2___fttol@sign1 0089                      _TMR_ResetTimer1 1A04  
                    _TMR_ResetTimer2 1AFE                   ?_ADC_ChangeChannel 0001  
                 __end_of_InitButton 1F34                     ??i2_RF_ResetData 0080  
               __end_of_IR_CheckCode 354C                           ?i2___ftmul 008B  
                         ?i2___fttol 0080                   __end_of_InitTimer0 1BD8  
                 __end_of_InitTimer1 1C4C                   __end_of_InitTimer2 1BF6  
                 __end_of_InitTimers 1F26                   _MSC_CleanBufferInt 3FA2  
                     ??_RF_ResetData 0001                        i2_RF_LoadCode 08C0  
               __end_ofi2_TMR_Timer0 1E18     __size_of_SYS_ConfigureOscillator 0008  
                ??_ADC_ChangeChannel 0180               __end_of_IR_SavedTiming 2500  
                    _TMR_Timer0Start 1EC6                      _TMR_Timer1Start 1EA2  
                    _TMR_Timer2Start 1C82                 FSH_EraseBlock@lowint 000A  
                  __size_of_Init_App 003C                          ??_ADC_Start 0180  
                           ??_InitIR 0186                             ??_InitRF 0186  
                ?_MSC_CleanBufferInt 0180            i2_FSH_VerifyWriteIntArray 1150  
                         ?_SYS_Sleep 0001        __size_ofi2_FSH_AddressToBlock 003C  
                          _Timer2Use 0064     __end_ofi2_MSC_BufferCopyIntConst 0F58  
             TMR_ResetTimer0@TimerOn 0181                  MSC_CleanBufferInt@i 0184  
                           ??___ftge 0186               TMR_ResetTimer1@TimerOn 0181  
              IR_CalculateCodesize@i 0180               TMR_ResetTimer2@TimerOn 0002  
                        __pdataBANK0 00CA                RF_CalculateCodesize@i 0180  
     __end_ofi1_IR_CalculateCodesize 1812              ?_MSC_BufferCopyIntConst 0007  
   __end_ofi1_SYS_ActivityTimerReset 1EA2            __end_of_ADC_ChangeChannel 1B4A  
                  __size_of___ftpack 010C                           ?_InitMOTOR 0001  
                      _IR_DataTiming 0200                 ??_MSC_CleanBufferInt 0184  
                        __pbssCOMRAM 004E                      ??_SYS_EnableInt 0181  
                         ?_InitFlash 0001                    __size_of___lwtoft 002A  
                      __pcstackBANK0 0080                        __pcstackBANK1 0180  
                           ?_MTR_IN1 0001                             ?_MTR_IN2 0001  
                  ??_IR_ReadReceiver 0180                  __CFG_CCP2MX$DEFAULT 000000  
                     ?i2_RF_LoadCode 0001              MSC_CleanBufferInt@count 0182  
               __end_of_IR_ResetData 1F50                    __size_of_high_isr 3B9A  
                   ??_IR_CleanBuffer 0007                      ??i1_IR_LoadCode 002A  
                           ?_InitADC 0001                             ?_InitLDO 0001  
                    RF_CheckCode@Low 00A2                     i1IR_LoadCode@Low 002A  
                 _FSH_AddressToBlock 1980                  _System_State_Change 00C9  
         __size_ofi1_IR_ReadReceiver 0034                            __pintcode 0008  
          i1MSC_CleanBufferInt@count 0003                        __pmediumconst 2800  
                    RF_DataInt@state 0180                            __ptext100 1E02  
                          __ptext101 354C                            __ptext110 1F50  
                          __ptext102 0D10                            __ptext111 0E9C  
                          __ptext103 08C0                            __ptext120 179C  
                          __ptext112 1578                            __ptext104 1AAC  
                          __ptext113 1F5E                            __ptext105 0292  
                          __ptext114 1E6A                            __ptext106 3D00  
                          __ptext115 1E18                            __ptext107 04E2  
                          __ptext116 1C9C                            __ptext108 16A2  
                          __ptext117 10AE                            __ptext109 2844  
                          __ptext118 1150                            __ptext119 13EA  
                           ?___ftdiv 000C                             ?___ftmul 018B  
                           ?___fttol 0180       __end_of_MSC_BufferCopyIntConst 10AE  
              __end_of_TMR_Timer0Int 1D68                __end_of_TMR_Timer1Int 1D3C  
              __end_of_TMR_Timer2Int 1D10                 __end_of_RF_CheckCode 3806  
              __end_of_TMR_Timer1Osc 1C14                          __pintcodelo 0018  
           __size_of_FSH_Write_IR_RF 03EE                         MSC_DelayMS@i 0189  
            __end_ofi2_TMR_Timer0Int 1E2E                    ?_TMR_Timer0Status 0001  
                ?_FSH_AddressToBlock 0001                    ?_TMR_Timer1Status 0001  
                      ??_MSC_DelayMS 0188           ??i2_SYS_ActivityTimerReset 0080  
            __size_of_SYS_DisableInt 0006              __end_of_TMR_ResetTimer0 1A58  
            __end_of_TMR_ResetTimer1 1A2E              __end_of_TMR_ResetTimer2 1B26  
                      ??i2_RF_Enable 0081                   ??_TMR_Timer0Status 0080  
                        ??_RF_Enable 0002                   ??_TMR_Timer1Status 0001  
                 _TMR_Timer1Function 1950         __size_ofi1_ADC_ChangeChannel 0024  
              __size_ofi1_RF_DataInt 0014                             ?_low_isr 0001  
                   i1_BUT_ReadButton 18EA                          ??i1___ftmul 0021  
                __end_of_PCB_Version 280A                          ??i1___fttol 0005  
            __end_of_TMR_Timer0Start 1ED8              __end_of_TMR_Timer1Start 1EB4  
            __end_of_TMR_Timer2Start 1C9C                          ??i2___ftmul 0091  
                        ??i2___fttol 0084                    ?i2_FSH_EraseBlock 0084  
                ?_TMR_Timer1Function 0001                 ??_FSH_AddressToBlock 0005  
                           _DC_Motor 00C1                   ??i2_FSH_EraseBlock 0088  
                RF_SetBandwidth@band 0180                        ??_IR_LoadCode 019A  
              __size_of_MSC_DelayNOP 002A                        LDO_Pass@state 0180  
                           _IPR1bits 000F9F                             _PIE1bits 000F9D  
                           _LDO_Pass 1CB6                      IR_LoadCode@High 019D  
              __size_of_MSC_BlinkLED 004E          FSH_VerifyWriteIntArray@data 0009  
                           i1u543_20 1990                          ??_SYS_Sleep 0180  
              __size_ofi2_RF_DataInt 001A             ??i2_RF_CalculateCodesize 0080  
                           i1u638_20 0638                             i1u638_25 0630  
                           i1u681_25 309C                             _PIR1bits 000F9E  
                           i1u587_20 13D6                             i1u683_20 310E  
                           i2u621_40 11CA                             _IRChange 0060  
                           i2u546_40 17B4                             i2u741_45 2C54  
                           i2u646_40 02F2                             i2u646_45 02E8  
                           i2u743_40 2D02                             _RCONbits 000FD0  
         i2MSC_BufferCopyIntConst@to 0089                     __CFG_WDTPS$32768 000000  
              __size_ofi1_TMR_Timer0 0010                __size_ofi1_TMR_Timer1 0010  
              __size_ofi1_TMR_Timer2 0010                 i1TMR_Timer0Int@state 0001  
           ?_FSH_VerifyWriteIntArray 0001                 ??_TMR_Timer1Function 0182  
                           _IR_Saved 00CD                     ??_FSH_EraseBlock 0009  
                       i1_RF_DataInt 1E56             i2_MSC_BufferCopyIntConst 0E9C  
                           _RF_Saved 00CE                 __end_of_RF_ResetData 1F42  
                  i2_FSH_Write_IR_RF 2844                             i1___ftge 11E6  
                         _ADCON0bits 000FC2                           _ADCON1bits 000FC1  
                         _ADCON2bits 000FC0                             i2___ftge 0D10  
               __size_of_Init_System 0032           __size_of_ADC_ChangeChannel 0024  
                 ?i2_FSH_Write_IR_RF 0001                          ??_InitMOTOR 0180  
              __size_of_IR_CheckCode 03D0                          ??_InitFlash 0180  
                __end_of_MSC_DelayMS 151E             i1_SYS_ActivityTimerReset 1E90  
                    ??i2_RF_LoadCode 009A                __size_ofi2_TMR_Timer0 0016  
                       _MSC_DelayNOP 19DA                          _INTCON2bits 000FF1  
                      ??_RF_LoadCode 019A                  __end_ofi2_RF_Enable 1E7E  
                        _INTCON3bits 000FF0                  ??i2_FSH_Write_IR_RF 0091  
                          copy_data0 12D6                     __size_of_MTR_IN1 0016  
                   __size_of_MTR_IN2 0016                         _MSC_BlinkLED 15CC  
         i2FSH_VerifyWriteIntArray@i 008B        __size_of_ADC_CalculateVoltage 00C4  
                       i2_RF_DataInt 1C9C              _SYS_ConfigureOscillator 1F84  
                   ??_BUT_ReadButton 0180         __size_ofi2_FSH_WriteIntArray 00A2  
                           _Init_App 1760                        ??_RF_Receiver 0180  
                           _Rail_VIN 00CA       FSH_Write_IR_RF@FlashWasteindex 001A  
   i2FSH_Write_IR_RF@FlashWasteindex 0099                           _ADC_Module 1DC0  
             FSH_Write_IR_RF@highint 0018                         i1_TMR_Timer0 1EF8  
                       i1_TMR_Timer1 1EE8                         i1_TMR_Timer2 1ED8  
          FSH_Write_IR_RF@WriteTries 0020                           _EECON1bits 000FA6  
                           __Hparam0 0000                     __size_of_InitADC 0028  
                   __size_of_InitLDO 0008                      _RF_SetBandwidth 1812  
                           __Lparam0 0000              i2RF_CalculateCodesize@i 0080  
       __end_ofi2_MSC_CleanBufferInt 15CC                  __end_of_IR_LoadCode 0A92  
          __end_ofi2_FSH_Write_IR_RF 2D8E                         _IR_CheckCode 317C  
                       _IR_DataPlace 0063                     __size_of___ftdiv 00E6  
                   __size_of___ftmul 015E                     __size_of___fttol 0144  
                 i2FSH_Write_IR_RF@i 009D                   i2FSH_Write_IR_RF@j 009B  
                           ___ftpack 03D6                     ?i2_TMR_Timer0Int 0001  
           ??_SYS_ActivityTimerReset 0180                         i2_TMR_Timer0 1E02  
                        _PCB_Version 2801                             ___lwtoft 1A58  
             MSC_CleanBufferInt@data 0180    FSH_VerifyWriteIntArray@ConstArray 0001  
i2FSH_VerifyWriteIntArray@ConstArray 0080                     ?_TMR_ResetTimer0 0001  
                   ?_TMR_ResetTimer1 0001                     ?_TMR_ResetTimer2 0001  
                low_isr@button_state 004B                        _RF_DataTiming 0300  
                  ??_FSH_Write_IR_RF 0012                __size_of_IR_ResetData 000E  
                   __size_of_low_isr 0276                             __ptext10 1456  
                           __ptext11 1CCE                             __ptext20 1D10  
                           __ptext12 1CE4                             __ptext21 1C30  
                           __ptext13 15CC                             __ptext30 1D68  
                           __ptext22 1D26                             __ptext14 14BC  
                           __ptext31 1724                             __ptext23 1950  
                           __ptext15 19DA                             __ptext40 3FA2  
                           __ptext32 1D7E                             __ptext24 1BF6  
                           __ptext16 191E                             __ptext41 1FAA  
                           __ptext33 1812                             __ptext25 1A04  
                           __ptext17 1F18                             __ptext50 1760  
                           __ptext42 1F26                             __ptext34 1D94  
                           __ptext26 1D3C                             __ptext18 1BD8  
                           __ptext51 09AA                             __ptext43 184A  
                           __ptext35 1C68                             __ptext27 1BB6  
                           __ptext19 1CFA                             __ptext60 18B6  
                           __ptext52 1A58                             __ptext44 1DAA  
                           __ptext36 1FA6                             __ptext28 1D52  
                           __ptext61 18EA                             __ptext53 3E5E  
                           __ptext45 1AD6                             __ptext37 1F8C  
                           __ptext29 1A2E                             __ptext70 1EF8  
                           __ptext62 1C82                             __ptext54 3BA2  
                           __ptext46 1DC0                             __ptext38 1CB6  
                           __ptext71 1DEC                             __ptext63 1AFE  
                           __ptext55 03D6                             __ptext47 1DD6  
                           __ptext39 1C4C                             __ptext80 16E6  
                           __ptext72 317C                             __ptext64 1ED8  
                           __ptext56 165E                             __ptext48 1B26  
                           __ptext81 1F42                             __ptext73 11E6  
                           __ptext65 1F6C                             __ptext57 1FAE  
                           __ptext49 1880                             __ptext90 1B6E  
                           __ptext82 1E42                             __ptext74 0B78  
                           __ptext66 1EA2                             __ptext91 06E2  
                           __ptext83 1F08                             __ptext75 05EE  
                           __ptext67 1B4A                             __ptext59 1E90  
                           __ptext92 1B92                             __ptext84 1E56  
                           __ptext76 17D8                             __ptext68 1EE8  
                           __ptext93 0A92                             __ptext85 1302  
                           __ptext77 2D8E                             __ptext69 1E2E  
                           __ptext94 0F58                             __ptext86 137C  
                           __ptext78 1F34                             __ptext87 151E  
                           __ptext79 1006                             __ptext96 1EB4  
                           __ptext88 1980                             __ptext97 1F78  
                           __ptext89 0DD8                             __ptext98 1EC6  
                           __ptext99 1A82        i2MSC_BufferCopyIntConst@count 008B  
      i2MSC_BufferCopyIntConst@shift 008D                    i1TMR_Timer0@state 0001  
                   ?_TMR_Timer0Start 0001                     ?_TMR_Timer1Start 0001  
                           _high_isr 0008                    i1TMR_Timer1@state 0001  
                   ?_TMR_Timer2Start 0003                    i1TMR_Timer2@state 0001  
      __size_ofi1_MSC_CleanBufferInt 003E                        __size_of_main 021E  
        __end_of_BUT_IR_PinChangeInt 1DC0                       _Activity_Timer 004E  
           i2FSH_WriteIntArray@Array 0087                  __end_of_RF_LoadCode 08C0  
    __end_of_FSH_VerifyWriteIntArray 13EA                __size_of_RF_CheckCode 02BA  
    __size_ofi2_RF_CalculateCodesize 0044                         MTR_IN1@state 0180  
                __end_of_RF_Receiver 1DAA                         MTR_IN2@state 0180  
                           int$flags 0066        i2FSH_WriteIntArray@ConstArray 0084  
                  _SYS_ActivityTimer 19B0               __size_of_RF_SetSquelch 0016  
                 ?_SYS_ActivityTimer 0001                         _IR_ResetData 1F42  
                     _SYS_DisableInt 1F9A                      _IR_ReadReceiver 1880  
                        _MSC_DelayMS 14BC                             exp@coeff 280A  
                           log@coeff 2828                         _IRValue_prev 00C3  
                        i2_RF_Enable 1E6A                          _OSCTUNEbits 000F9B  
                         _INTCONbits 000FF2         __end_ofi2_FSH_AddressToBlock 17D8  
            __size_ofi2_IR_ResetData 000E                FSH_Write_IR_RF@lowint 0019  
           __size_ofi1_TMR_Timer0Int 0010        __size_of_IR_CalculateCodesize 0044  
                ??_SYS_ActivityTimer 0180        __size_of_RF_CalculateCodesize 0044  
              FSH_Write_IR_RF@status 001D            ??_SYS_ConfigureOscillator 0180  
                   MSC_DelayNOP@NOPs 0180                   FSH_WriteIntArray@i 000C  
                       _RF_CheckCode 354C                             intlevel1 0000  
                           intlevel2 0000                          _IR_CodeSize 0062  
            __end_of_RF_SetBandwidth 184A                         _RF_DataPlace 00C8  
                      RF_CheckCode@i 00A8                          ?_ADC_Module 0001  
                  i2TMR_Timer0@state 0080                          _IR_LoadCode 09AA  
                i1_ADC_ChangeChannel 1B92                           _OSCCONbits 000FD3  
           __end_ofi1_BUT_ReadButton 191E            __end_of_SYS_ActivityTimer 19DA  
                     _RF_SavedTiming 2500                __size_of_RF_ResetData 000E  
         __size_ofi2_FSH_Write_IR_RF 054A               __end_of_SYS_DisableInt 1FA0  
        i2FSH_AddressToBlock@Address 0080      __size_of_SYS_ActivityTimerReset 0012  
                        _IR_SyncHigh 0055                 ?i1_ADC_ChangeChannel 0001  
                        _RF_CodeSize 00C6          __size_of_MSC_CleanBufferInt 0054  
             i2_RF_CalculateCodesize 16A2                __end_of_SYS_EnableInt 1C30  
                      _RF_SetSquelch 1D7E                          _RF_LoadCode 07D6  
                         _RF_DataInt 1C68                 i2_MSC_CleanBufferInt 1578  
          __size_of_TMR_Timer0Status 000C            __size_of_TMR_Timer1Status 000C  
                         _IR_SyncLow 0057                    MSC_BlinkLED@blink 018D  
                         _RF_Disable 1E2E                    MSC_BlinkLED@speed 018F  
                       _RF_ResetData 1F34                          _RF_Receiver 1D94  
           i2TMR_ResetTimer0@TimerOn 0081                           _MTR_Rotate 1456  
         i2FSH_EraseBlock@WriteTries 008A                __end_ofi1_IR_LoadCode 0C48  
         ??i2_MSC_BufferCopyIntConst 008F               __end_of_RF_SavedTiming 2600  
            __size_ofi2_RF_ResetData 000E  
